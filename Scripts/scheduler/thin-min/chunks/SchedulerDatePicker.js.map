{
  "version": 3,
  "sources": ["../../../../Scheduler/lib/Scheduler/data/util/recurrence/RecurrenceLegend.js", "../../../../Scheduler/lib/Scheduler/feature/base/EditBase.js", "../../../../Scheduler/lib/Scheduler/view/EventEditor.js", "../../../../Scheduler/lib/Scheduler/view/recurrence/field/RecurrenceCombo.js", "../../../../Scheduler/lib/Scheduler/view/recurrence/RecurrenceLegendButton.js", "../../../../Scheduler/lib/Scheduler/view/recurrence/RecurrenceEditor.js", "../../../../Scheduler/lib/Scheduler/feature/mixin/RecurringEventEdit.js", "../../../../Scheduler/lib/Scheduler/widget/ResourceCombo.js", "../../../../Scheduler/lib/Scheduler/feature/EventEdit.js", "../../../../Scheduler/lib/Scheduler/widget/ResourceFilter.js", "../../../../Scheduler/lib/Scheduler/widget/SchedulerDatePicker.js"],
  "sourcesContent": ["import Localizable from '../../../../Core/localization/Localizable.js';\nimport DayRuleEncoder from './RecurrenceDayRuleEncoder.js';\nimport DateHelper from '../../../../Core/helper/DateHelper.js';\n\n/**\n * @module Scheduler/data/util/recurrence/RecurrenceLegend\n */\n\n/**\n * A static class allowing to get a human readable description of the provided recurrence.\n *\n * ```javascript\n * const event = new EventModel({\n *      startDate : new Date(2018, 6, 3),\n *      endDate   : new Date(2018, 6, 4)\n * });\n * const recurrence = new RecurrenceModel({\n *      frequency : 'WEEKLY',\n *      days : ['MO', 'TU', 'WE']\n * });\n * event.recurrence = recurrence;\n * // \"Weekly on Mon, Tue and Wed\"\n * RecurrenceLegend.getLegend(recurrence);\n * ```\n *\n * @mixes Core/localization/Localizable\n */\nexport default class RecurrenceLegend extends Localizable() {\n\n    // <debug>\n    // region Localization test\n    static localization = [\n        'L{position1}',\n        'L{position2}',\n        'L{position3}',\n        'L{position4}',\n        'L{position5}',\n        'L{position-1}'\n    ];\n    // endregion\n    // </debug>\n\n    static get $name() {\n        return 'RecurrenceLegend';\n    }\n\n    static get allDaysValueAsArray() {\n        return ['SU', 'MO', 'TU', 'WE', 'TH', 'FR', 'SA'];\n    }\n\n    static get allDaysValue() {\n        return this.allDaysValueAsArray.join(',');\n    }\n\n    static get workingDaysValue() {\n        return this.allDaysValueAsArray.filter((day, index) => !DateHelper.nonWorkingDays[index]).join(',');\n    }\n\n    static get nonWorkingDaysValue() {\n        return this.allDaysValueAsArray.filter((day, index) => DateHelper.nonWorkingDays[index]).join(',');\n    }\n\n    /**\n     * Returns the provided recurrence description. The recurrence might be assigned to a timespan model,\n     * in this case the timespan start date should be provided in the second argument.\n     * @param {Scheduler.model.RecurrenceModel} recurrenceRecurrence model.\n     * @param {Date} [timeSpanStartDate] The recurring timespan start date. Can be omitted if the recurrence is assigned\n     * to a timespan model (and the timespan has {@link Scheduler.model.TimeSpan#field-startDate} filled). Then start\n     * date will be retrieved from the model.\n     * @returns {String} The recurrence description.\n     */\n    static getLegend(recurrence, timeSpanStartDate) {\n        const\n            me                                                         = this,\n            { timeSpan, interval, days, monthDays, months, positions } = recurrence,\n            startDate                                                  = timeSpanStartDate || timeSpan.startDate,\n            tplData                                                    = { interval };\n\n        let fn;\n\n        switch (recurrence.frequency) {\n            case 'DAILY':\n                return interval === 1 ? me.L('L{Daily}') : me.L('L{Every {0} days}', tplData);\n\n            case 'WEEKLY':\n                if (days && days.length) {\n                    tplData.days = me.getDaysLegend(days);\n                }\n                else if (startDate) {\n                    tplData.days = DateHelper.getDayName(startDate.getDay());\n                }\n\n                return me.L(interval === 1 ? 'L{Weekly on {1}}' : 'L{Every {0} weeks on {1}}', tplData);\n\n            case 'MONTHLY':\n                if (days && days.length && positions && positions.length) {\n                    tplData.days = me.getDaysLegend(days, positions);\n                }\n                else if (monthDays && monthDays.length) {\n                    // sort dates to output in a proper order\n                    monthDays.sort((a, b) => a - b);\n\n                    tplData.days = me.arrayToText(monthDays);\n                }\n                else if (startDate) {\n                    tplData.days = startDate.getDate();\n                }\n\n                return me.L(interval === 1 ? 'L{Monthly on {1}}' : 'L{Every {0} months on {1}}', tplData);\n\n            case 'YEARLY':\n\n                if (days && days.length && positions && positions.length) {\n                    tplData.days = me.getDaysLegend(days, positions);\n                }\n                else {\n                    tplData.days = startDate.getDate();\n                }\n\n                if (months && months.length) {\n                    // sort months to output in a proper order\n                    months.sort((a, b) => a - b);\n\n                    if (months.length > 2) {\n                        fn = month => DateHelper.getMonthShortName(month - 1);\n                    }\n                    else {\n                        fn = month => DateHelper.getMonthName(month - 1);\n                    }\n\n                    tplData.months = me.arrayToText(months, fn);\n                }\n                else {\n                    tplData.months = DateHelper.getMonthName(startDate.getMonth());\n                }\n\n                return me.L(interval === 1 ? 'L{Yearly on {1} of {2}}' : 'L{Every {0} years on {1} of {2}}', tplData);\n        }\n    }\n\n    static getDaysLegend(days, positions) {\n        const\n            me      = this,\n            tplData = { position : '' };\n        let fn;\n\n        if (positions && positions.length) {\n            tplData.position = me.arrayToText(positions, position => me.L(`L{position${position}}`));\n        }\n\n        if (days.length) {\n            days.sort((a, b) => DayRuleEncoder.decodeDay(a)[0] - DayRuleEncoder.decodeDay(b)[0]);\n\n            switch (days.join(',')) {\n                case me.allDaysValue :\n                    tplData.days = me.L('L{day}');\n                    break;\n\n                case me.workingDaysValue :\n                    tplData.days = me.L('L{weekday}');\n                    break;\n\n                case me.nonWorkingDaysValue :\n                    tplData.days = me.L('L{weekend day}');\n                    break;\n\n                default :\n                    if (days.length > 2) {\n                        fn = day => DateHelper.getDayShortName(DayRuleEncoder.decodeDay(day)[0]);\n                    }\n                    else {\n                        fn = day => DateHelper.getDayName(DayRuleEncoder.decodeDay(day)[0]);\n                    }\n\n                    tplData.days = me.arrayToText(days, fn);\n            }\n        }\n\n        return me.L('L{daysFormat}', tplData);\n    }\n\n    // Converts array of items to a human readable list.\n    // For example: [1,2,3,4]\n    // to: \"1, 2, 3 and 4\"\n    static arrayToText(array, fn) {\n        if (fn) {\n            array = array.map(fn);\n        }\n\n        return array.join(', ').replace(/,(?=[^,]*$)/, this.L('L{ and }'));\n    }\n\n}\n", "import InstancePlugin from '../../../Core/mixin/InstancePlugin.js';\nimport DateField from '../../../Core/widget/DateField.js';\nimport DateHelper from '../../../Core/helper/DateHelper.js';\nimport ObjectHelper from '../../../Core/helper/ObjectHelper.js';\nimport Config from '../../../Core/Config.js';\nimport Objects from '../../../Core/helper/util/Objects.js';\n\n/**\n * @module Scheduler/feature/base/EditBase\n */\n\nconst\n    DH             = DateHelper,\n    scheduleFields = ['startDate', 'endDate', 'resource', 'recurrenceRule'],\n    makeDate       = (fields) => {\n        // single field, update record directly\n        if (fields.length === 1) return fields[0].value;\n        // two fields, date + time\n        else if (fields.length === 2) {\n            const\n                [date, time] = fields[0] instanceof DateField ? fields : fields.reverse(),\n                dateValue    = DH.parse(date.value);\n\n            if (dateValue && time.value) {\n                dateValue.setHours(\n                    time.value.getHours(),\n                    time.value.getMinutes(),\n                    time.value.getSeconds(),\n                    time.value.getMilliseconds()\n                );\n            }\n\n            // Clone to not end up sharing dates\n            return dateValue ? DateHelper.clone(dateValue) : null;\n        }\n        // shouldn't happen...\n        return null;\n    },\n    copyTime       = (dateTo, dateFrom) => {\n        const d = new Date(dateTo.getTime());\n        d.setHours(dateFrom.getHours(), dateFrom.getMinutes());\n        return d;\n    },\n    adjustEndDate  = (startDate, startTime, me) => {\n        // The end datetime just moves in response to the changed start datetime, keeping the same duration.\n        if (startDate && startTime && me.endDateField && me.endTimeField) {\n            const newEndDate = DH.add(copyTime(me.startDateField.value, me.startTimeField.value), me.eventRecord.durationMS, 'milliseconds');\n            me.endDateField.value = newEndDate;\n            me.endTimeField.value = DH.clone(newEndDate);\n        }\n    };\n\n/**\n * Base class for EventEdit. Not to be used directly.\n *\n * @extends Core/mixin/InstancePlugin\n */\nexport default class EditBase extends InstancePlugin {\n    //region Config\n\n    static get configurable() {\n        return {\n            /**\n             * True to save and close this panel if ENTER is pressed in one of the input fields inside the panel.\n             * @config {Boolean}\n             * @default\n             * @category Editor\n             */\n            saveAndCloseOnEnter : true,\n\n            triggerEvent : null,\n\n            /**\n             * This config parameter is passed to the `startDateField` and `endDateField` constructor.\n             * @config {String}\n             * @default\n             * @category Editor widgets\n             */\n            dateFormat : 'L', // date format that uses browser locale\n\n            /**\n             * This config parameter is passed to the `startTimeField` and `endTimeField` constructor.\n             * @config {String}\n             * @default\n             * @category Editor widgets\n             */\n            timeFormat : 'LT', // date format that uses browser locale\n\n            /**\n             * Default editor configuration, which widgets it shows etc.\n             *\n             * This is the entry point into configuring any aspect of the editor.\n             *\n             * The {@link Core.widget.Container#config-items} configuration of a Container\n             * is *deeply merged* with its default `items` value. This means that you can specify\n             * an `editorConfig` object which configures the editor, or widgets inside the editor:\n             * ```javascript\n             * const scheduler = new Scheduler({\n             *     features : {\n             *         eventEdit  : {\n             *             editorConfig : {\n             *                 autoClose : false,\n             *                 modal     : true,\n             *                 cls       : 'editor-widget-cls',\n             *                 items : {\n             *                     resourceField : {\n             *                         hidden : true\n             *                     },\n             *                     // Add our own event owner field at the top of the form.\n             *                     // Weight -100 will make it sort top the top.\n             *                     ownerField : {\n             *                         weight : -100,\n             *                         type   : 'usercombo',\n             *                         name   : 'owner',\n             *                         label  : 'Owner'\n             *                     }\n             *                 },\n             *                 bbar : {\n             *                     items : {\n             *                         deleteButton : false\n             *                     }\n             *                 }\n             *             }\n             *         }\n             *     }\n             * });\n             * ```\n             * @config {PopupConfig}\n             * @category Editor\n             */\n            editorConfig : null,\n\n            /**\n             * An object to merge with the provided items config of the editor to override the\n             * configuration of provided fields, or add new fields.\n             *\n             * To remove existing items, set corresponding keys to `null`:\n             *\n             * ```javascript\n             * const scheduler = new Scheduler({\n             *     features : {\n             *         eventEdit  : {\n             *             items : {\n             *                 // Merged with provided config of the resource field\n             *                 resourceField : {\n             *                     label : 'Calendar'\n             *                 },\n             *                 recurrenceCombo : null,\n             *                 owner : {\n             *                     weight : -100, // Will sort above system-supplied fields which are weight 0\n             *                     type   : 'usercombo',\n             *                     name   : 'owner',\n             *                     label  : 'Owner'\n             *                 }\n             *             }\n             *         }\n             *     }\n             * });\n             *```\n             *\n             * The provided fields are called\n             *  - `nameField`\n             *  - `resourceField`\n             *  - `startDateField`\n             *  - `startTimeField`\n             *  - `endDateField`\n             *  - `endTimeField`\n             *  - `recurrenceCombo`\n             *  - `editRecurrenceButton`\n             * @config {Object<String,ContainerItemConfig|Boolean|null>}\n             * @category Editor widgets\n             */\n            items : null,\n\n            /**\n             * The week start day used in all date fields of the feature editor form by default.\n             * 0 means Sunday, 6 means Saturday.\n             * Defaults to the locale's week start day.\n             * @config {Number}\n             */\n            weekStartDay : null\n        };\n    }\n\n    //endregion\n\n    //region Init & destroy\n\n    construct(client, config) {\n        const me = this;\n\n        client.eventEdit = me;\n\n        super.construct(client, ObjectHelper.assign({\n            weekStartDay : client.weekStartDay\n        }, config));\n\n        me.clientListenersDetacher = client.ion({\n            [me.triggerEvent] : 'onActivateEditor',\n            dragCreateEnd     : 'onDragCreateEnd',\n\n            // Not fired at the Scheduler level.\n            // Calendar, which inherits this, implements this event.\n            eventAutoCreated : 'onEventAutoCreated',\n            thisObj          : me\n        });\n    }\n\n    doDestroy() {\n        this.clientListenersDetacher();\n\n        this._editor?.destroy();\n\n        super.doDestroy();\n    }\n\n    //endregion\n\n    //region Editing\n\n    // Not implemented at this level.\n    // Scheduler Editing relies on being called at point of event creation.\n    onEventAutoCreated() {}\n\n    changeEditorConfig(editorConfig) {\n        const { items } = this;\n\n        // Merge items which is an Object with the default editorConfig's items\n        if (items) {\n            editorConfig = Objects.clone(editorConfig);\n            editorConfig.items = Config.merge(items, editorConfig.items);\n        }\n\n        return editorConfig;\n    }\n\n    changeItems(items) {\n        this.cleanItemsConfig(items);\n        return items;\n    }\n\n    // Remove any items configured as === true which just means default config options\n    cleanItemsConfig(items) {\n        for (const ref in items) {\n            const itemCfg = items[ref];\n\n            if (itemCfg === true) {\n                delete items[ref];\n            }\n            else if (itemCfg?.items) {\n                this.cleanItemsConfig(itemCfg.items);\n            }\n        }\n    }\n\n    onDatesChange(params) {\n        const\n            me    = this,\n            field = params.source,\n            value = params.value;\n\n        // End date can never be less than start date\n        if (me.startDateField && me.endDateField) {\n            me.endDateField.min = me.startDateField.value;\n        }\n\n        if (me.endTimeField) {\n            // If the event starts and ends on the same day, the time fields need\n            // to have their min and max set against each other.\n            if (DH.isEqual(DH.clearTime(me.startDateField?.value), DH.clearTime(me.endDateField?.value))) {\n                me.endTimeField.min = me.startTimeField.value;\n            }\n            else {\n                me.endTimeField.min = null;\n            }\n        }\n\n        switch (field.ref) {\n            case 'startDateField':\n                me.startTimeField?.value && adjustEndDate(value, me.startTimeField.value, me);\n                break;\n\n            case 'startTimeField':\n                me.startDateField?.value && adjustEndDate(me.startDateField.value, value, me);\n                break;\n        }\n    }\n\n    //endregion\n\n    //region Save\n\n    async save() {\n        throw new Error('Implement in subclass');\n    }\n\n    get values() {\n        const\n            me          = this,\n            { editor }  = me,\n            startFields = [],\n            endFields   = [],\n            { values }  = editor;\n\n        // The standard values getter will produce (almost) what we want, however, there are some special fields that\n        // we need to take over. Remove those fields:\n        scheduleFields.forEach(f => delete values[f]);\n\n        editor.eachWidget(widget => {\n            const { name } = widget;\n\n            // If the widget is part of the recurrence editor, we don't gather it.\n            if (!name || widget.hidden || widget.up(w => w === me.recurrenceEditor)) {\n                delete values[name];\n                return;\n            }\n\n            switch (name) {\n                case 'startDate':\n                    startFields.push(widget);\n                    break;\n                case 'endDate':\n                    endFields.push(widget);\n                    break;\n                case 'resource':\n                    values[name] = widget.record;\n                    break;\n                case 'recurrenceRule':\n                    // If recurrence set to null, completely clear the recurrenceRule.\n                    // Otherwise it will still be perceived as recurring with the rule 'FREQ=none'\n                    values[name] = editor.widgetMap.recurrenceCombo?.value === 'none' ? '' : widget.value;\n                    break;\n                // Ignore other widgets and allow the standard values getter to provide them:\n                // default:\n                //     values[name] = widget.value;\n            }\n        }, true);\n\n        // if is changing from not allDay to allDay should consider time fields to not change them on makeDate\n        if (values.allDay && !me.eventRecord.allDay) {\n            startFields.push(me.startTimeField);\n            endFields.push(me.endTimeField);\n        }\n\n        // Handle fields being configured away\n        if (startFields.length) {\n            values.startDate = makeDate(startFields);\n        }\n        if (endFields.length) {\n            values.endDate = makeDate(endFields);\n        }\n\n        // Since there is no duration field in the editor,\n        // we don't need to recalc duration value on each date change.\n        // It's enough to return correct duration value in `values`,\n        // so the record will get updated with the correct data.\n        if (('startDate' in values) && ('endDate' in values)) {\n            values.duration = DH.diff(values.startDate, values.endDate, me.editor.record.durationUnit, true);\n        }\n\n        return values;\n    }\n\n    /**\n     * Template method, intended to be overridden. Called before the event record has been updated.\n     * @param {Scheduler.model.EventModel} eventRecord The event record\n     *\n     **/\n    onBeforeSave(eventRecord) {}\n\n    /**\n     * Template method, intended to be overridden. Called after the event record has been updated.\n     * @param {Scheduler.model.EventModel} eventRecord The event record\n     *\n     **/\n    onAfterSave(eventRecord) {}\n\n    /**\n     * Updates record being edited with values from the editor\n     * @private\n     */\n    updateRecord(record) {\n        const { values } = this;\n\n        // Clean resourceId / resources out of values when using assignment store, it will handle the assignment\n        if (this.assignmentStore) {\n            delete values.resource;\n        }\n\n        return record.set(values);\n    }\n\n    //endregion\n\n    //region Events\n\n    onBeforeEditorShow() {\n        const\n            { eventRecord, editor } = this.editingContext,\n            { nameField } = editor.widgetMap;\n\n        // Editing new event. Make sure user doesn't have to clear the input field.\n        // Record field value still should be there because a rendered event block\n        // looks bad with no text in it.\n        // nameField may have been configured away.\n        if (nameField && eventRecord.isCreating) {\n            // Avoid initial invalid because required state.\n            editor.assigningValues = true;\n            nameField.value = '';\n            editor.assigningValues = false;\n\n            // Show new event text as a placeholder\n            nameField._configuredPlaceholder = nameField.placeholder;\n            nameField.placeholder = eventRecord.name;\n        }\n    }\n\n    resetEditingContext() {\n        const me = this;\n\n        if (!me.editingContext) {\n            return;\n        }\n\n        const\n            { client }              = me,\n            { editor, eventRecord } = me.editingContext,\n            { eventStore }          = client,\n            { nameField }           = editor.widgetMap;\n\n        // This will remove the record from the store, *and* from the added bag, so no sync will take place.\n        if (eventRecord.isCreating) {\n            // Ensure that during the engine's async processing of the remove, the element is non-interactive.\n            // Mousedown on the just-created element itself passes through here, and the immediate mouseup\n            // after that instigates a click which will find no corresponding event.\n            if (client.isTimelineBase) {\n                me.editingContext.eventElement?.closest('[data-event-id]').classList.add('b-released');\n            }\n\n            eventStore.remove(eventRecord);\n\n            // Clear isCreating *after* removal.\n            // Store doesn't register as a removed record if isCreating is set\n            eventRecord.isCreating = false;\n        }\n\n        // Revert any placeholder that we may have set\n        // nameField may have been configured away.\n        if (nameField) {\n            nameField.placeholder = nameField._configuredPlaceholder;\n        }\n\n        client.element.classList.remove('b-eventeditor-editing');\n\n        // Reset context\n        me.targetEventElement = me.editingContext = editor._record = null;\n    }\n\n    onPopupKeyDown({ event }) {\n        const me = this;\n\n        if (!me.readOnly && event.key === 'Enter' && me.saveAndCloseOnEnter && event.target.tagName.toLowerCase() === 'input') {\n            // Need to prevent this key events from being fired on whatever receives focus after the editor is hidden\n            event.preventDefault();\n\n            // If enter key was hit in an input element of a start field, need to adjust end date fields (the same way as if #onDatesChange handler was called)\n            if (event.target.name === 'startDate') {\n                me.startTimeField && adjustEndDate(me.startDateField.value, me.startTimeField.value, me);\n            }\n\n            me.onSaveClick();\n        }\n    }\n\n    async finalizeStmCapture(saved) {\n    }\n\n    async onSaveClick() {\n        // <remove-on-release>\n        // TODO: add new API on Container: blurFocusedField which manages this scenario\n        //  of blurring active field just before hiding\n        // </remove-on-release>\n        this.editor.focus();\n\n        this.isFinalizingEventSave = true;\n\n        const saved = await this.save();\n\n        this.isFinalizingEventSave = false;\n\n        if (saved) {\n            await this.finalizeStmCapture(false);\n\n            this.editor.close();\n\n            /**\n             * Fires on the owning Scheduler after editor is closed by any action - save, delete or cancel\n             * @event afterEventEdit\n             * @on-owner\n             * @param {Scheduler.view.Scheduler} source The scheduler\n             */\n            this.client.trigger('afterEventEdit');\n        }\n        return saved;\n    }\n\n    async onDeleteClick() {\n        // `deleteEvent` call actually additionally closes the editor for some reason\n        // see the comment for `editor.revertFocus();` call in EventEdit.js feature\n        // that triggers `resetEditingContext` in which by default we assume canceling flow\n        // so we need to detect that context is being reset for delete action somehow\n        this.isDeletingEvent = true;\n\n        const removed = await this.deleteEvent();\n\n        this.isDeletingEvent = false;\n\n        if (removed) {\n            await this.finalizeStmCapture(false);\n\n            const { editor } = this;\n            // We expect deleteEvent will trigger close if autoClose is true and focus has moved out,\n            // otherwise need to call it manually\n            if (!editor.autoClose || editor.containsFocus) {\n                editor.close();\n            }\n            this.client.trigger('afterEventEdit');\n        }\n    }\n\n    async onCancelClick() {\n        this.isCancelingEdit = true;\n\n        this.editor.close();\n\n        this.isCancelingEdit = false;\n\n        if (this.hasStmCapture) {\n            await this.finalizeStmCapture(true);\n        }\n\n        this.client.trigger('afterEventEdit');\n    }\n\n    //endregion\n}\n", "import Store from '../../Core/data/Store.js';\nimport Popup from '../../Core/widget/Popup.js';\n\n/**\n * @module Scheduler/view/EventEditor\n */\n\n/**\n * Provided event editor dialog.\n *\n * @extends Core/widget/Popup\n * @private\n */\nexport default class EventEditor extends Popup {\n    // Factoryable type name\n    static get type() {\n        return 'eventeditor';\n    }\n\n    static get $name() {\n        return 'EventEditor';\n    }\n\n    static get configurable() {\n        return {\n            items     : [],\n            draggable : {\n                handleSelector : ':not(button,.b-field-inner)' // Ignore buttons and field inners\n            },\n            axisLock : 'flexible',\n\n            scrollable : {\n                // In case editor is very tall or window is small, make it scrollable\n                overflowY : true\n            },\n            readOnly : null,\n\n            /**\n             * A Function (or *name* of a function) which produces a customized Panel header based upon the event being edited.\n             * @config {Function|String}\n             * @param {Scheduler.model.EventModel} eventRecord The record being edited\n             * @returns {String} The Panel title.\n             */\n            titleRenderer : null\n        };\n    }\n\n    updateLocalization() {\n        super.updateLocalization(...arguments);\n\n        // Use this if there's no titleRenderer\n        this.initialTitle = this.title || '';\n    }\n\n    chainResourceStore() {\n        return this.eventEditFeature.resourceStore.chain(\n            record => !record.isSpecialRow,\n            null,\n            {\n                // It doesn't need to be a Project-based Store\n                storeClass              : Store,\n                // Need to show all records in the combo. Required in case resource store is a tree.\n                excludeCollapsedRecords : false\n            }\n        );\n    }\n\n    processWidgetConfig(widget) {\n        if (widget.type?.includes('date') && widget.weekStartDay == null) {\n            widget.weekStartDay = this.weekStartDay;\n        }\n\n        if (widget.type === 'extraItems') {\n            return false;\n        }\n\n        const\n            { eventEditFeature } = this,\n            fieldConfig          = {};\n\n        if (widget.ref === 'resourceField') {\n            const { store } = widget;\n\n            // Can't use store directly since it may be grouped and then contains irrelevant group records\n            widget.store = this.chainResourceStore();\n\n            // Allow the incoming widget's config to augment its store\n            if (store) {\n                widget.store.setConfig(store);\n            }\n\n            // When events are loaded with resourceId, we should only support single select.\n            // Only override this if the widget has not been explicitly configured\n            // with multiSelect.\n            if (!('multiSelect' in widget)) {\n                widget.multiSelect = !eventEditFeature.eventStore.usesSingleAssignment;\n            }\n        }\n\n        if ((widget.name === 'startDate' || widget.name === 'endDate') && widget.type === 'date') {\n            fieldConfig.format = eventEditFeature.dateFormat;\n        }\n\n        if ((widget.name === 'startDate' || widget.name === 'endDate') && widget.type === 'time') {\n            fieldConfig.format = eventEditFeature.timeFormat;\n        }\n\n        Object.assign(widget, fieldConfig);\n\n        return super.processWidgetConfig(widget);\n    }\n\n    onBeforeShow(...args) {\n        const\n            me               = this,\n            {\n                record,\n                titleRenderer\n            }                = me,\n            { deleteButton } = me.widgetMap;\n\n        // Hide delete button if we are readOnly or the event is in a create phase\n        // which means we are editing a dblclick-created or drag-created event.\n        if (deleteButton) {\n            deleteButton.hidden = me.readOnly || record.isCreating;\n        }\n\n        if (titleRenderer) {\n            me.title = me.callback(titleRenderer, me, [record]);\n        }\n        else {\n            me.title = me.initialTitle;\n        }\n\n        super.onBeforeShow?.(...args);\n    }\n\n    onInternalKeyDown(event) {\n        this.trigger('keyDown', { event });\n        super.onInternalKeyDown(event);\n    }\n\n    updateReadOnly(readOnly) {\n        const\n            {\n                deleteButton,\n                saveButton,\n                cancelButton\n            } = this.widgetMap;\n\n        super.updateReadOnly(readOnly);\n\n        if (deleteButton) {\n            deleteButton.hidden = readOnly;\n        }\n\n        if (saveButton) {\n            saveButton.hidden = readOnly;\n        }\n\n        if (cancelButton) {\n            cancelButton.hidden = readOnly;\n        }\n    }\n}\n\n// Register this widget type with its Factory\nEventEditor.initClass();\n", "import RecurrenceFrequencyCombo from './RecurrenceFrequencyCombo.js';\n\n/**\n * @module Scheduler/view/recurrence/field/RecurrenceCombo\n */\n\n/**\n * A combobox field for selecting a recurrence pattern: `Daily`, `Weekly`, `Monthly` or `Yearly` if the recurrence\n * has no other non-default settings, or `Custom...` if the recurrence has custom setting applied.\n *\n * {@inlineexample Scheduler/view/RecurrenceCombo.js}\n *\n * @extends Scheduler/view/recurrence/field/RecurrenceFrequencyCombo\n * @classType recurrencecombo\n */\nexport default class RecurrenceCombo extends RecurrenceFrequencyCombo {\n\n    static get $name() {\n        return 'RecurrenceCombo';\n    }\n\n    // Factoryable type name\n    static get type() {\n        return 'recurrencecombo';\n    }\n\n    static get defaultConfig() {\n        return {\n            customValue             : 'custom',\n            placeholder             : 'None',\n            // <remove-on-release>\n            // TODO: draw a splitting line\n            // </remove-on-release>\n            splitCls                : 'b-recurrencecombo-split',\n            items                   : true,\n            highlightExternalChange : false\n        };\n    }\n\n    buildItems() {\n        const me = this;\n\n        return [\n            { value : 'none', text : 'L{None}' },\n            ...super.buildItems(),\n            { value : me.customValue, text : 'L{Custom}', cls : me.splitCls }\n        ];\n    }\n\n    set value(value) {\n        // Use 'none' instead of falsy value\n        value = value || 'none';\n\n        super.value = value;\n    }\n\n    get value() {\n        return super.value;\n    }\n\n    set recurrence(recurrence) {\n        const me = this;\n\n        if (recurrence) {\n            me.value = me.isCustomRecurrence(recurrence) ? me.customValue : recurrence.frequency;\n        }\n        else {\n            me.value = null;\n        }\n    }\n\n    isCustomRecurrence(recurrence) {\n        const { interval, days, monthDays, months } = recurrence;\n\n        return Boolean(interval > 1 || (days && days.length) || (monthDays && monthDays.length) || (months && months.length));\n    }\n};\n\n// Register this widget type with its Factory\nRecurrenceCombo.initClass();\n", "import Button from '../../../Core/widget/Button.js';\nimport RecurrenceLegend from '../../data/util/recurrence/RecurrenceLegend.js';\n\n/**\n * @module Scheduler/view/recurrence/RecurrenceLegendButton\n */\n\n/**\n * A button which displays the associated {@link #property-recurrence} info in a human readable form.\n * @extends Core/widget/Button\n * @classType recurrencelegendbutton\n */\nexport default class RecurrenceLegendButton extends Button {\n\n    static get $name() {\n        return 'RecurrenceLegendButton';\n    }\n\n    // Factoryable type name\n    static get type() {\n        return 'recurrencelegendbutton';\n    }\n\n    static get defaultConfig() {\n        return {\n            localizableProperties : [],\n            recurrence            : null\n        };\n    }\n\n    /**\n     * Sets / gets the recurrence to display description for.\n     * @property {Scheduler.model.RecurrenceModel}\n     */\n    set recurrence(recurrence) {\n        this._recurrence = recurrence;\n        this.updateLegend();\n    }\n\n    get recurrence() {\n        return this._recurrence;\n    }\n\n    set eventStartDate(eventStartDate) {\n        this._eventStartDate = eventStartDate;\n        this.updateLegend();\n    }\n\n    get eventStartDate() {\n        return this._eventStartDate;\n    }\n\n    updateLegend() {\n        const { recurrence } = this;\n\n        this.text = recurrence ? RecurrenceLegend.getLegend(recurrence, this.eventStartDate) : '';\n    }\n\n    onLocaleChange() {\n        // on locale switch we update the button text to use proper language\n        this.updateLegend();\n    }\n\n    updateLocalization() {\n        this.onLocaleChange();\n        super.updateLocalization();\n    }\n}\n\n// Register this widget type with its Factory\nRecurrenceLegendButton.initClass();\n", "import Popup from '../../../Core/widget/Popup.js';\nimport './RecurrenceEditorPanel.js';\n\n/**\n * @module Scheduler/view/recurrence/RecurrenceEditor\n */\n\n/**\n * Class implementing a dialog to edit a {@link Scheduler.model.RecurrenceModel recurrence model}. The class is used by\n * the {@link Scheduler.view.mixin.RecurringEvents recurring events} feature, and you normally don't need to instantiate\n * it.\n *\n * Before showing the dialog need to use {@link Core.widget.Container#property-record} to load a\n * {@link Scheduler.model.RecurrenceModel recurrence model} data into the editor fields. For example:\n *\n * ```javascript\n * // make the editor instance\n * const editor = new RecurrenceEditor();\n * // load recurrence model into it\n * editor.record = new RecurrenceModel({ frequency : \"WEEKLY\" });\n * // display the editor\n * editor.show();\n * ```\n *\n * @extends Core/widget/Popup\n * @classType recurrenceeditor\n */\nexport default class RecurrenceEditor extends Popup {\n\n    // <debug>\n    // region Localization test\n    static localization = [\n        'L{DAILYintervalUnit}',\n        'L{WEEKLYintervalUnit}',\n        'L{MONTHLYintervalUnit}',\n        'L{YEARLYintervalUnit}'\n    ];\n    // endregion\n    // </debug>\n\n    static get $name() {\n        return 'RecurrenceEditor';\n    }\n\n    // Factoryable type name\n    static get type() {\n        return 'recurrenceeditor';\n    }\n\n    static get configurable() {\n        return {\n            draggable : true,\n            closable  : true,\n            floating  : true,\n            cls       : 'b-recurrenceeditor',\n            title     : 'L{Repeat event}',\n            autoClose : true,\n            width     : 470,\n            items     : {\n                recurrenceEditorPanel : {\n                    type  : 'recurrenceeditorpanel',\n                    title : null\n                }\n            },\n            bbar : {\n                defaults : {\n                    localeClass : this\n                },\n                items : {\n                    foo : {\n                        type   : 'widget',\n                        cls    : 'b-label-filler',\n                        weight : 100\n                    },\n                    saveButton : {\n                        color   : 'b-green',\n                        text    : 'L{Save}',\n                        onClick : 'up.onSaveClick',\n                        weight  : 200\n                    },\n                    cancelButton : {\n                        color   : 'b-gray',\n                        text    : 'L{Object.Cancel}',\n                        onClick : 'up.onCancelClick',\n                        weight  : 300\n                    }\n                }\n            },\n            scrollable : {\n                overflowY : true\n            }\n        };\n    }\n\n    updateReadOnly(readOnly) {\n        super.updateReadOnly(readOnly);\n\n        // No save or cancel buttons. It's purely for information display when in readOnly mode\n        this.bbar.hidden = readOnly;\n    }\n\n    get recurrenceEditorPanel() {\n        return this.widgetMap.recurrenceEditorPanel;\n    }\n\n    updateRecord(record) {\n        this.recurrenceEditorPanel.record = record;\n    }\n\n    onSaveClick() {\n        const me = this;\n\n        if (me.saveHandler) {\n            me.saveHandler.call(me.thisObj || me, me, me.record);\n        }\n        else {\n            me.recurrenceEditorPanel.syncEventRecord();\n            me.close();\n        }\n    }\n\n    onCancelClick() {\n        const me = this;\n\n        if (me.cancelHandler) {\n            me.cancelHandler.call(me.thisObj || me, me, me.record);\n        }\n        else {\n            me.close();\n        }\n    }\n\n}\n\n// Register this widget type with its Factory\nRecurrenceEditor.initClass();\n", "import Widget from '../../../Core/widget/Widget.js';\nimport Base from '../../../Core/Base.js';\nimport '../../view/recurrence/RecurrenceConfirmationPopup.js';\nimport '../../view/recurrence/field/RecurrenceCombo.js';\nimport '../../view/recurrence/RecurrenceLegendButton.js';\nimport '../../view/recurrence/RecurrenceEditor.js';\n\n/**\n * @module Scheduler/feature/mixin/RecurringEventEdit\n */\n\n/**\n * This mixin class provides recurring events functionality to the {@link Scheduler.feature.EventEdit event editor}.\n * @mixin\n */\nexport default Target => class RecurringEventEdit extends (Target || Base) {\n    static get $name() {\n        return 'RecurringEventEdit';\n    }\n\n    static get configurable() {\n        return {\n            recurringEventsItems : {\n                /**\n                 * Reference to the `Repeat` event field, if used\n                 * @member {Scheduler.view.recurrence.field.RecurrenceCombo} recurrenceCombo\n                 * @readonly\n                 */\n                recurrenceCombo : {\n                    type   : 'recurrencecombo',\n                    label  : 'L{EventEdit.Repeat}',\n                    ref    : 'recurrenceCombo',\n                    weight : 700\n                },\n                /**\n                 * Reference to the button that opens the event repeat settings dialog, if used\n                 * @member {Scheduler.view.recurrence.RecurrenceLegendButton} editRecurrenceButton\n                 * @readonly\n                 */\n                editRecurrenceButton : {\n                    type                 : 'recurrencelegendbutton',\n                    ref                  : 'editRecurrenceButton',\n                    name                 : 'recurrenceRule',\n                    color                : 'b-gray',\n                    menuIcon             : null,\n                    flex                 : 1,\n                    weight               : 800,\n                    ignoreParentReadOnly : true\n                }\n            },\n\n            /**\n             * Set to `false` to hide recurring fields in event editor, even if the\n             * {@link Scheduler.view.mixin.RecurringEvents#config-enableRecurringEvents Recurring Events} is `true`\n             * and a recurring event is being edited.\n             * @config {Boolean}\n             * @category Recurring\n             */\n            showRecurringUI : null\n        };\n    }\n\n    changeEditorConfig(editorConfig) {\n        editorConfig.items = { ...editorConfig.items, ...this.recurringEventsItems };\n\n        // EditBase inserts extraItems *after* all default items are in\n        editorConfig = super.changeEditorConfig(editorConfig);\n\n        return editorConfig;\n    }\n\n    construct(scheduler, config) {\n        super.construct(scheduler, config);\n\n        this.scheduler.ion({\n            beforeEventSave : 'onRecurrableEventBeforeSave',\n            thisObj         : this\n        });\n    }\n\n    doDestroy() {\n        this._recurrenceConfirmation?.destroy();\n        this._recurrenceEditor?.destroy();\n\n        super.doDestroy();\n    }\n\n    onEditorConstructed(editor) {\n        const me = this;\n\n        editor.ion({\n            hide    : me.onRecurringEventEditorHide,\n            thisObj : me\n        });\n\n        if (me.editRecurrenceButton) {\n            me.editRecurrenceButton.menu = me.recurrenceEditor;\n        }\n\n        me.recurrenceCombo?.ion({\n            change  : me.onRecurrenceComboChange,\n            thisObj : me\n        });\n    }\n\n    updateReadOnly(readOnly) {\n        if (this._recurrenceEditor) {\n            this._recurrenceEditor.readOnly = readOnly;\n        }\n    }\n\n    internalShowEditor() {\n        this.toggleRecurringFieldsVisibility(this.client.enableRecurringEvents && this.showRecurringUI !== false);\n    }\n\n    toggleRecurringFieldsVisibility(show = true) {\n        const methodName = show ? 'show' : 'hide';\n\n        this.editRecurrenceButton?.[methodName]?.();\n        this.recurrenceCombo?.[methodName]?.();\n    }\n\n    onRecurringEventEditorHide() {\n        if (this.recurrenceEditor?.isVisible) {\n            this.recurrenceEditor.hide();\n        }\n\n        if (this.recurrenceConfirmation?.isVisible) {\n            this.recurrenceConfirmation.hide();\n        }\n    }\n\n    // Builds RecurrenceModel to load into the recurrenceEditor\n    // It builds the model based on either:\n    // - recurrence rule string (if provided)\n    // - or the event being edited recurrence (if the event is repeating)\n    // - or simply make a recurrence model w/ default state (by default means: Frequency=Daily, Interval=1)\n    makeRecurrence(rule) {\n        const\n            event     = this.eventRecord,\n            eventCopy = event.copy();\n\n        let recurrence = event.recurrence;\n\n        if (!rule && recurrence) {\n            recurrence = recurrence.copy();\n        }\n        else {\n            recurrence = new event.recurrenceModel(rule ? { rule } : {});\n        }\n\n        // bind cloned recurrence to the cloned event\n        recurrence.timeSpan = eventCopy;\n        // update cloned event w/ start date from the UI field\n        eventCopy.setStartDate(this.values.startDate);\n\n        recurrence.suspendTimeSpanNotifying();\n\n        return recurrence;\n    }\n\n    onRecurrableEventBeforeSave({ eventRecord, context }) {\n        const me = this;\n\n        // Other views features may trigger beforeEventSave, so only react when *we* are editing.\n        if (me.isEditing && !eventRecord.isCreating && eventRecord.supportsRecurring &&\n                (eventRecord.isRecurring || eventRecord.isOccurrence)) {\n            me.recurrenceConfirmation.confirm({\n                actionType : 'update',\n                eventRecord,\n                changerFn() {\n                    context.finalize(true);\n                },\n                cancelFn() {\n                    context.finalize(false);\n                }\n            });\n\n            // signalizes that we plan to decide save or not asynchronously\n            context.async = true;\n        }\n    }\n\n    set recurrenceConfirmation(recurrenceConfirmation) {\n        this._recurrenceConfirmation = recurrenceConfirmation;\n    }\n\n    get recurrenceConfirmation() {\n        const me = this;\n\n        let recurrenceConfirmation = me._recurrenceConfirmation;\n\n        if (!recurrenceConfirmation || !recurrenceConfirmation.$$name) {\n            recurrenceConfirmation = Widget.create({\n                type  : 'recurrenceconfirmation',\n                owner : me.editor,\n                ...recurrenceConfirmation\n            });\n\n            me._recurrenceConfirmation = recurrenceConfirmation;\n        }\n\n        return recurrenceConfirmation;\n    }\n\n    set recurrenceEditor(recurrenceEditor) {\n        this._recurrenceEditor = recurrenceEditor;\n    }\n\n    get recurrenceEditor() {\n        const me = this;\n\n        let recurrenceEditor = me._recurrenceEditor;\n\n        // Recurrence editor is centered and modal.\n        if (!recurrenceEditor || !recurrenceEditor.$$name) {\n            me._recurrenceEditor = recurrenceEditor = Widget.create({\n                type         : 'recurrenceeditor',\n                autoShow     : false,\n                centered     : true,\n                modal        : true,\n                constrainTo  : globalThis,\n                anchor       : false,\n                rootElement  : me.rootElement,\n                saveHandler  : me.recurrenceEditorSaveHandler,\n                onBeforeShow : me.onBeforeShowRecurrenceEditor.bind(me),\n                thisObj      : me,\n                ...recurrenceEditor\n            });\n\n            // Must set *after* construction, otherwise it becomes the default state\n            // to reset readOnly back to.  Must use direct property access because\n            // getter consults state of editor.\n            recurrenceEditor.readOnly = me._readOnly;\n        }\n\n        return recurrenceEditor;\n    }\n\n    onBeforeShowRecurrenceEditor() {\n        const\n            me                                = this,\n            { recurrenceEditor, eventRecord } = me;\n\n        if (recurrenceEditor && eventRecord?.supportsRecurring) {\n            // if the event has no recurrence yet ..initialize it before showing recurrence editor\n            if (!me.recurrence) {\n                me.recurrence = me.makeRecurrence();\n            }\n\n            // update the cloned recurrence w/ up to date start date value\n            me.recurrence.timeSpan.setStartDate(me.values.startDate);\n\n            // load RecurrenceModel record into the recurrence editor\n            recurrenceEditor.record = me.recurrence;\n\n            // In case they drag it. Centered falls off if the widget has position set.\n            recurrenceEditor.centered = true;\n        }\n    }\n\n    loadRecurrenceData(recurrence) {\n        this.recurrence = recurrence;\n\n        this.updateRecurrenceFields(recurrence);\n    }\n\n    updateRecurrenceFields(recurrence) {\n        const\n            me                       = this,\n            { editRecurrenceButton } = me;\n\n        if (me.recurrenceCombo) {\n            me.recurrenceCombo.recurrence = recurrence;\n        }\n\n        // update the recurrence legend\n        if (editRecurrenceButton) {\n            editRecurrenceButton.recurrence = recurrence;\n            editRecurrenceButton.value = recurrence ? recurrence.rule : null;\n\n            if (recurrence && me.client.enableRecurringEvents && me.showRecurringUI !== false) {\n                editRecurrenceButton.show();\n            }\n            else {\n                editRecurrenceButton.hide();\n            }\n        }\n    }\n\n    onRecurrenceComboChange({ source, value, userAction }) {\n        if (userAction) {\n            const\n                me                   = this,\n                { recurrenceEditor } = me;\n\n            if (value === source.customValue) {\n                // if user picked \"Custom\" - show recurrence editor\n                // This will recurse through the change event into the opposite side\n                // of the value test which will call updateRecurrenceFields, where the\n                // assignment to the value of the recurrenceCombo will be a non-change.\n                // That will sync the state of the recurrenceButton.\n                me.recurrenceCombo.recurrence = me.makeRecurrence();\n\n                if (recurrenceEditor.centered) {\n                    recurrenceEditor.show();\n                }\n                else {\n                    recurrenceEditor.show((me.editRecurrenceButton || source).element);\n                }\n            }\n            // user has picked some frequency -> make a new recurrence based on it\n            else {\n                me.loadRecurrenceData(value && value !== 'none' ? me.makeRecurrence(`FREQ=${value}`) : null);\n            }\n        }\n    }\n\n    recurrenceEditorSaveHandler(editor, recurrence) {\n        // apply changes to the kept recurrence\n        editor.recurrenceEditorPanel.syncEventRecord(recurrence);\n\n        // update the recurrence related UI\n        this.updateRecurrenceFields(recurrence);\n\n        editor.close();\n    }\n\n    onDatesChange(...args) {\n        super.onDatesChange(...args);\n\n        if (!this.loadingRecord && this.editRecurrenceButton) {\n            const { startDate } = this.values;\n\n            if (startDate) {\n                this.editRecurrenceButton.eventStartDate = startDate;\n            }\n        }\n    }\n\n    internalLoadRecord(eventRecord) {\n        if (eventRecord?.supportsRecurring) {\n            this.loadRecurrenceData(eventRecord.recurrence ? this.makeRecurrence() : null);\n        }\n    }\n\n    updateRecord(record) {\n        // Special handling for when setting recurrence to \"None\". Since button gets hidden its value is not picked up\n        // by the normal flow.\n        if (record.recurrenceRule && !this.recurrence) {\n            record.recurrenceRule = null;\n        }\n\n        return super.updateRecord(record);\n    }\n};\n", "import Combo from '../../Core/widget/Combo.js';\nimport DomHelper from '../../Core/helper/DomHelper.js';\n\n/**\n * @module Scheduler/widget/ResourceCombo\n */\n\n/**\n * A Combo subclass which selects resources, optionally displaying the {@link Scheduler.model.ResourceModel#field-eventColor}\n * of each resource in the picker and in the input area.\n *\n * {@inlineexample Scheduler/widget/ResourceCombo.js}\n *\n * @extends Core/widget/Combo\n * @classType resourcecombo\n * @inputfield\n */\nexport default class ResourceCombo extends Combo {\n    static get $name() {\n        return 'ResourceCombo';\n    }\n\n    // Factoryable type name\n    static get type() {\n        return 'resourcecombo';\n    }\n\n    static get configurable() {\n        return {\n            /**\n             * Show the {@link Scheduler.model.ResourceModel#field-eventColor event color} for each resource\n             * @config {Boolean}\n             * @default\n             */\n            showEventColor : false,\n\n            displayField : 'name',\n            valueField   : 'id',\n\n            picker : {\n                cls : 'b-resourcecombo-picker',\n\n                itemIconTpl(record) {\n                    const\n                        { eventColor } = record,\n                        isStyleColor   = !DomHelper.isNamedColor(eventColor),\n                        style          = eventColor ? (isStyleColor ? ` style=\"color:${eventColor}\"` : '') : ' style=\"display:none\"',\n                        colorClass     = !eventColor || isStyleColor ? '' : ` b-sch-foreground-${eventColor}`;\n\n                    return `<div class=\"b-icon b-icon-square${colorClass}\"${style}></div>`;\n                }\n            }\n        };\n    }\n\n    changeShowEventColor(showEventColor) {\n        return Boolean(showEventColor);\n    }\n\n    updateShowEventColor(showEventColor) {\n        const\n            { _picker } = this,\n            methodName  = showEventColor ? 'add' : 'remove';\n\n        this.element.classList[methodName]('b-show-event-color');\n        _picker?.element.classList[methodName]('b-show-event-color');\n    }\n\n    changePicker(picker, oldPicker) {\n        picker = super.changePicker(picker, oldPicker);\n        picker?.element.classList[this.showEventColor ? 'add' : 'remove']('b-show-event-color');\n        return picker;\n    }\n\n    // Implementation needed at this level because it has two inner elements in its inputWrap\n    get innerElements() {\n        return [\n            {\n                class     : 'b-icon b-resource-icon b-icon-square b-hide-display',\n                reference : 'resourceIcon'\n            },\n            this.inputElement\n        ];\n    }\n\n    syncInputFieldValue() {\n        const\n            me            = this,\n            {\n                resourceIcon,\n                lastResourceIconCls\n            }             = me,\n            { classList } = resourceIcon,\n            eventColor    = me.selected?.eventColor ?? '';\n\n        super.syncInputFieldValue();\n\n        // Remove last colour whichever way it was done\n        resourceIcon.style.color = '';\n        lastResourceIconCls && classList.remove(lastResourceIconCls);\n        me.lastResourceIconCls = null;\n\n        if (eventColor) {\n            if (DomHelper.isNamedColor(eventColor)) {\n                me.lastResourceIconCls = `b-sch-foreground-${eventColor}`;\n                classList.add(me.lastResourceIconCls);\n            }\n            else {\n                resourceIcon.style.color = eventColor;\n            }\n            classList.remove('b-hide-display');\n        }\n        else {\n            classList.add('b-hide-display');\n        }\n    }\n}\n\n// Register this widget type with its Factory\nResourceCombo.initClass();\n", "import EditBase from './base/EditBase.js';\nimport GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\nimport ObjectHelper from '../../Core/helper/ObjectHelper.js';\nimport '../view/EventEditor.js';\nimport Delayable from '../../Core/mixin/Delayable.js';\nimport RecurringEventEdit from './mixin/RecurringEventEdit.js';\nimport '../../Core/widget/TextField.js';\nimport '../../Scheduler/widget/ResourceCombo.js';\nimport TimeSpan from '../../Scheduler/model/TimeSpan.js';\nimport '../../Core/widget/DateField.js';\nimport '../../Core/widget/TimeField.js';\nimport '../../Core/widget/Button.js';\nimport Widget from '../../Core/widget/Widget.js';\nimport DateHelper from '../../Core/helper/DateHelper.js';\nimport TaskEditStm from './mixin/TaskEditStm.js';\n\n/**\n * @module Scheduler/feature/EventEdit\n */\n\nconst punctuation = /[^\\w\\d]/g;\n\n/**\n * Feature that displays a popup containing widgets for editing event data.\n *\n * {@inlineexample Scheduler/feature/EventEdit.js}\n *\n * To customize its contents you can:\n *\n * * Reconfigure built in widgets by providing override configs in the {@link Scheduler.feature.base.EditBase#config-items} config.\n * * Change the date format of the date & time fields: {@link Scheduler.feature.base.EditBase#config-dateFormat} and {@link Scheduler.feature.base.EditBase#config-timeFormat }\n * * Configure provided widgets in the editor and add your own in the {@link Scheduler.feature.base.EditBase#config-items} config.\n * * Remove fields related to recurring events configuration (such as `recurrenceCombo`) by setting {@link Scheduler.feature.mixin.RecurringEventEdit#config-showRecurringUI} config to `false`.\n * * Advanced: Reconfigure the whole editor widget using {@link #config-editorConfig}\n *\n * ## Built in widgets\n *\n * The built in widgets are:\n *\n * | Widget ref             | Type                                                     | Weight | Description                                                    |\n * |------------------------|----------------------------------------------------------|--------|----------------------------------------------------------------|\n * | `nameField`            | {@link Core.widget.TextField}                            | 100    | Edit name                                                      |\n * | `resourceField`        | {@link Scheduler.widget.ResourceCombo}                   | 200    | Pick resource(s)                                               |\n * | `startDateField`       | {@link Core.widget.DateField}                            | 300    | Edit startDate (date part)                                     |\n * | `startTimeField`       | {@link Core.widget.TimeField}                            | 400    | Edit startDate (time part)                                     |\n * | `endDateField`         | {@link Core.widget.DateField}                            | 500    | Edit endDate (date part)                                       |\n * | `endTimeField`         | {@link Core.widget.TimeField}                            | 600    | Edit endDate (time part)                                       |\n * | `recurrenceCombo`      | {@link Scheduler.view.recurrence.field.RecurrenceCombo}  | 700    | Select recurrence rule (only visible if recurrence is used)    |\n * | `editRecurrenceButton` | {@link Scheduler.view.recurrence.RecurrenceLegendButton} | 800    | Edit the recurrence rule  (only visible if recurrence is used) |\n *\n * The built in buttons are:\n *\n * | Widget ref             | Type                                                                     | Weight | Description                                                    |\n * |------------------------|--------------------------------------------------------------------------|--------|----------------------------------------------------------------|\n * | `saveButton`           | {@link Core.widget.Button}                                               | 100    | Save event button on the bbar                                  |\n * | `deleteButton`         | {@link Core.widget.Button}                                               | 200    | Delete event button on the bbar                                |\n * | `cancelButton`         | {@link Core.widget.Button}                                               | 300    | Cancel event editing button on the bbar                        |\n *\n * ## Removing a built in item\n *\n * To remove a built in widget, specify its `ref` as `null` in the `items` config:\n *\n * ```javascript\n * const scheduler = new Scheduler({\n *     features : {\n *         eventEdit : {\n *             items : {\n *                 // Remove the start time field\n *                 startTimeField : null\n *             }\n *         }\n *     }\n * })\n * ```\n *\n * Bottom buttons may be hidden using `bbar` config passed to `editorConfig`:\n * ```javascript\n * const scheduler = new Scheduler({\n *     features : {\n *         eventEdit : {\n *             editorConfig : {\n *                 bbar : {\n *                     items : {\n *                         deleteButton : null\n *                     }\n *                 }\n *             }\n *         }\n *     }\n * })\n * ```\n *\n * To remove fields related to recurring events configuration (such as `recurrenceCombo`), set {@link Scheduler.feature.mixin.RecurringEventEdit#config-showRecurringUI} config to `false`.\n *\n * ## Customizing a built in widget\n *\n * To customize a built in widget, use its `ref` as the key in the `items` config and specify the configs you want\n * to change (they will merge with the widgets default configs):\n *\n * ```javascript\n * const scheduler = new Scheduler({\n *     features : {\n *         eventEdit : {\n *             items : {\n *                 // ref for an existing field\n *                 nameField : {\n *                     // Change its label\n *                     label : 'Description'\n *                 }\n *             }\n *         }\n *     }\n * })\n * ```\n *\n * ## Adding custom widgets\n *\n * To add a custom widget, add an entry to the `items` config. The `name` property links the input field to a field in\n * the loaded event record:\n *\n * ```javascript\n * const scheduler = new Scheduler({\n *     features : {\n *         eventEdit : {\n *             items : {\n *                 // Key to use as fields ref (for easier retrieval later)\n *                 color : {\n *                     type  : 'combo',\n *                     label : 'Color',\n *                     items : ['red', 'green', 'blue'],\n *                     // name will be used to link to a field in the event record when loading and saving in the editor\n *                     name  : 'eventColor'\n *                 }\n *             }\n *         }\n *     }\n * })\n * ```\n *\n * For more info on customizing the event editor, please see \"Customize event editor\" guide.\n *\n * This feature is **enabled** by default\n *\n * @mixes Scheduler/feature/mixin/RecurringEventEdit\n * @extends Scheduler/feature/base/EditBase\n * @demo Scheduler/eventeditor\n * @classtype eventEdit\n * @feature\n */\nexport default class EventEdit extends EditBase.mixin(TaskEditStm, RecurringEventEdit, Delayable) {\n    //region Config\n\n    static get $name() {\n        return 'EventEdit';\n    }\n\n    static get configurable() {\n        return {\n            /**\n             * The event that shall trigger showing the editor. Defaults to `eventdblclick`, set to `''` or null to\n             * disable editing of existing events.\n             * @config {String}\n             * @default\n             * @category Editor\n             */\n            triggerEvent : 'eventdblclick',\n\n            /**\n             * The data field in the model that defines the eventType.\n             * Applied as class (b-eventtype-xx) to the editors element, to allow showing/hiding fields depending on\n             * eventType. Dynamic toggling of fields in the editor is activated by adding an `eventTypeField` field to\n             * your widget:\n             *\n             * ```javascript\n             * const scheduler = new Scheduler({\n             *    features : {\n             *       eventEdit : {\n             *           items : {\n             *               eventTypeField : {\n             *                  type  : 'combo',\n             *                  name  : 'eventType',\n             *                  label : 'Type',\n             *                  items : ['Appointment', 'Internal', 'Meeting']\n             *               }\n             *           }\n             *        }\n             *     }\n             * });\n             * ```\n             * Note, your event model class also must declare this field:\n             * ```javascript\n             *  class MyEvent extends EventModel {\n             *      static get fields() {\n             *          return [\n             *              { name : 'eventType' }\n             *          ];\n             *      }\n             *  }\n             * ```\n             * @config {String}\n             * @default\n             * @category Editor\n             */\n            typeField : 'eventType',\n\n            /**\n             * The current {@link Scheduler.model.EventModel} record, which is being edited by the event editor.\n             * @property {Scheduler.model.EventModel}\n             * @readonly\n             */\n            eventRecord : null,\n\n            /**\n             * Specify `true` to put the editor in read only mode.\n             * @config {Boolean}\n             * @default false\n             */\n            readOnly : null,\n\n            /**\n             * The configuration for the internal editor widget. With this config you can control the *type*\n             * of editor (defaults to `Popup`) and which widgets to show,\n             * change the items in the `bbar`, or change whether the popup should be modal etc.\n             *\n             * ```javascript\n             * const scheduler = new Scheduler({\n             *     features : {\n             *         eventEdit  : {\n             *             editorConfig : {\n             *                 modal  : true,\n             *                 cls    : 'my-editor' // A CSS class,\n             *                 items  : {\n             *                     owner : {\n             *                         weight : -100, // Will sort above system-supplied fields which are weight 100 to 800\n             *                         type   : 'usercombo',\n             *                         name   : 'owner',\n             *                         label  : 'Owner'\n             *                     },\n             *                     agreement : {\n             *                         weight : 1000, // Will sort below system-supplied fields which are weight 100 to 800\n             *                         type   : 'checkbox',\n             *                         name   : 'agreement',\n             *                         label  : 'Agree to terms'\n             *                     },\n             *                     resourceField : {\n             *                         // Apply a special filter to limit the Combo's access\n             *                         // to resources.\n             *                         store  {\n             *                             filters : [{\n             *                                 filterBy(resource) {\n             *                                     return shouldShowResource(record);\n             *                                 }\n             *                             }]\n             *                         }\n             *                     }\n             *                 },\n             *                 bbar : {\n             *                     items : {\n             *                         deleteButton : {\n             *                             hidden : true\n             *                         }\n             *                     }\n             *                 }\n             *             }\n             *         }\n             *     }\n             * });\n             * ```\n             *\n             * Or to use your own custom editor:\n             *\n             * ```javascript\n             * const scheduler = new Scheduler({\n             *     features : {\n             *         eventEdit  : {\n             *             editorConfig : {\n             *                 type : 'myCustomEditorType'\n             *             }\n             *         }\n             *     }\n             * });\n             * ```\n             * @config {Object}\n             * @category Editor\n             */\n            editorConfig : {\n                type        : 'eventeditor',\n                title       : 'L{EventEdit.Edit event}',\n                closable    : true,\n                localeClass : this,\n\n                defaults : {\n                    localeClass : this\n                },\n                items : {\n                    /**\n                     * Reference to the name field, if used\n                     * @member {Core.widget.TextField} nameField\n                     * @readonly\n                     */\n                    nameField : {\n                        type      : 'text',\n                        label     : 'L{Name}',\n                        clearable : true,\n                        name      : 'name',\n                        weight    : 100,\n                        required  : true\n                    },\n                    /**\n                     * Reference to the resource field, if used\n                     * @member {Core.widget.Combo} resourceField\n                     * @readonly\n                     */\n                    resourceField : {\n                        type                    : 'resourcecombo',\n                        label                   : 'L{Resource}',\n                        name                    : 'resource',\n                        editable                : true,\n                        valueField              : 'id',\n                        displayField            : 'name',\n                        highlightExternalChange : false,\n                        destroyStore            : true,\n                        weight                  : 200\n                    },\n                    /**\n                     * Reference to the start date field, if used\n                     * @member {Core.widget.DateField} startDateField\n                     * @readonly\n                     */\n                    startDateField : {\n                        type             : 'date',\n                        cls              : 'b-inline',\n                        clearable        : false,\n                        required         : true,\n                        label            : 'L{Start}',\n                        name             : 'startDate',\n                        validateDateOnly : true,\n                        weight           : 300\n                    },\n                    /**\n                     * Reference to the start time field, if used\n                     * @member {Core.widget.TimeField} startTimeField\n                     * @readonly\n                     */\n                    startTimeField : {\n                        type      : 'time',\n                        clearable : false,\n                        required  : true,\n                        name      : 'startDate',\n                        cls       : 'b-match-label',\n                        weight    : 400\n                    },\n                    /**\n                     * Reference to the end date field, if used\n                     * @member {Core.widget.DateField} endDateField\n                     * @readonly\n                     */\n                    endDateField : {\n                        type             : 'date',\n                        cls              : 'b-inline',\n                        clearable        : false,\n                        required         : true,\n                        label            : 'L{End}',\n                        name             : 'endDate',\n                        validateDateOnly : true,\n                        weight           : 500\n                    },\n                    /**\n                     * Reference to the end time field, if used\n                     * @member {Core.widget.TimeField} endTimeField\n                     * @readonly\n                     */\n                    endTimeField : {\n                        type      : 'time',\n                        clearable : false,\n                        required  : true,\n                        name      : 'endDate',\n                        cls       : 'b-match-label',\n                        weight    : 600\n                    }\n                },\n\n                bbar : {\n                    // When readOnly, child buttons are hidden\n                    hideWhenEmpty : true,\n\n                    defaults : {\n                        localeClass : this\n                    },\n                    items : {\n                        /**\n                         * Reference to the save button, if used\n                         * @member {Core.widget.Button} saveButton\n                         * @readonly\n                         */\n                        saveButton : {\n                            color  : 'b-blue',\n                            cls    : 'b-raised',\n                            text   : 'L{Save}',\n                            weight : 100\n                        },\n                        /**\n                         * Reference to the delete button, if used\n                         * @member {Core.widget.Button} deleteButton\n                         * @readonly\n                         */\n                        deleteButton : {\n                            text   : 'L{Delete}',\n                            weight : 200\n                        },\n                        /**\n                         * Reference to the cancel button, if used\n                         * @member {Core.widget.Button} cancelButton\n                         * @readonly\n                         */\n                        cancelButton : {\n                            text   : 'L{Object.Cancel}',\n                            weight : 300\n                        }\n                    }\n                }\n            },\n\n            targetEventElement : null\n        };\n    }\n\n    static get pluginConfig() {\n        return {\n            chain : [\n                'populateEventMenu',\n                'onEventEnterKey',\n                'editEvent'\n            ]\n        };\n    }\n\n    //endregion\n\n    //region Init & destroy\n\n    construct(scheduler, config) {\n        // Default to the scheduler's state, but configs may override\n        this.readOnly = scheduler.readOnly;\n\n        super.construct(scheduler, config);\n\n        scheduler.ion({\n            projectChange : 'onChangeProject',\n            readOnly      : 'onClientReadOnlyToggle',\n            thisObj       : this\n        });\n    }\n\n    get scheduler() {\n        return this.client;\n    }\n\n    get project() {\n        return this.client.project;\n    }\n    //endregion\n\n    //region Editing\n\n    /**\n     * Get/set readonly state\n     * @property {Boolean}\n     */\n    get readOnly() {\n        return this._editor ? this.editor.readOnly : this._readOnly;\n    }\n\n    updateReadOnly(readOnly) {\n        super.updateReadOnly(readOnly);\n\n        if (this._editor) {\n            this.editor.readOnly = readOnly;\n        }\n    }\n\n    onClientReadOnlyToggle({ readOnly }) {\n        this.readOnly = readOnly;\n    }\n\n    /**\n     * Returns the editor widget representing this feature\n     * @member {Core.widget.Popup}\n     */\n    get editor() {\n        const\n            me              = this,\n            editorListeners = {\n                beforehide : 'resetEditingContext',\n                beforeshow : 'onBeforeEditorShow',\n                keydown    : 'onPopupKeyDown',\n                thisObj    : me\n            };\n\n        let { _editor : editor } = me;\n\n        if (editor) {\n            return editor;\n        }\n\n        editor = me._editor = Widget.create(me.getEditorConfig());\n\n        const {\n            startDateField,\n            startTimeField,\n            endDateField,\n            endTimeField\n        } = editor.widgetMap;\n\n        // If the date field doesn't exist, the time field must encapsulate the\n        // date component of the start/end points and must lay out right.\n        if (!startDateField && startTimeField) {\n            startTimeField.keepDate = true;\n            startTimeField.label = me.L('Start');\n            startTimeField.flex = '1 0 100%';\n        }\n        if (!endDateField && endTimeField) {\n            endTimeField.keepDate = true;\n            endTimeField.label = me.L('End');\n            endTimeField.flex = '1 0 100%';\n        }\n\n        // If the default Popup has been reconfigured to be static, add it as a child of our client.\n        if (!editor.floating && !editor.positioned) {\n            // If not configured with an appendTo, we add it as a child of our client.\n            if (!editor.element.parentNode) {\n                me.client.add(editor);\n            }\n            delete editorListeners.beforehide;\n            delete editorListeners.beforShow;\n            editorListeners.beforeToggleReveal = 'onBeforeEditorToggleReveal';\n        }\n\n        // Must set *after* construction, otherwise it becomes the default state\n        // to reset readOnly back to. Must use direct property access because\n        // getter consults state of editor.\n        editor.readOnly = me._readOnly;\n\n        if (editor.items.length === 0) {\n            console.warn('Event Editor configured without any `items`');\n        }\n\n        // add listeners programmatically so users cannot override them accidentally\n        editor.ion(editorListeners);\n\n        /**\n         * Fired before the editor will load the event record data into its input fields. This is useful if you\n         * want to modify the fields before data is loaded (e.g. set some input field to be readonly)\n         * @on-owner\n         * @event eventEditBeforeSetRecord\n         * @param {Core.widget.Container} source The editor widget\n         * @param {Scheduler.model.EventModel} record The record\n         */\n        me.scheduler.relayEvents(editor, ['beforeSetRecord'], 'eventEdit');\n\n        // assign widget variables, using widget name: startDate -> me.startDateField\n        // widgets with id set use that instead, id -> me.idField\n        Object.values(editor.widgetMap).forEach(widget => {\n            const ref = widget.ref || widget.id;\n            // don't overwrite if already defined\n            if (ref && !me[ref]) {\n                me[ref] = widget;\n\n                switch (widget.name) {\n                    case 'startDate':\n                    case 'endDate':\n                        widget.ion({ change : 'onDatesChange', thisObj : me });\n                        break;\n                }\n            }\n        });\n\n        // launch onEditorConstructed hook if provided\n        me.onEditorConstructed?.(editor);\n\n        me.eventTypeField?.ion({ change : 'onEventTypeChange', thisObj : me });\n\n        me.saveButton?.ion({ click : 'onSaveClick', thisObj : me });\n        me.deleteButton?.ion({ click : 'onDeleteClick', thisObj : me });\n        me.cancelButton?.ion({ click : 'onCancelClick', thisObj : me });\n\n        return editor;\n    }\n\n    getEditorConfig() {\n        const\n            me                 = this,\n            // must result in longest format, ie 2 digits for date and all time parts.\n            time               = new Date(2000, 12, 31, 23, 55, 55),\n            dateLength         = DateHelper.format(time, me.dateFormat).replace(punctuation, '').length,\n            timeLength         = DateHelper.format(time, me.timeFormat).replace(punctuation, '').length,\n            dateTimeLength     = dateLength + timeLength,\n            { cls, scheduler } = me,\n            result             = ObjectHelper.assign({\n                owner            : scheduler,\n                eventEditFeature : me,\n                weekStartDay     : me.weekStartDay,\n                align            : 'b-t',\n                id               : `${scheduler.id}-event-editor`,\n                autoShow         : false,\n                anchor           : true,\n                scrollAction     : 'realign',\n                constrainTo      : globalThis,\n                cls\n            }, me.editorConfig);\n\n        // User configuration may have included a render target which means the editor\n        // will not be floating.\n        if (Widget.prototype.getRenderContext(result)[0]) {\n            result.floating = false;\n        }\n\n        // If the default Popup has been reconfigured to be static, ensure it starts\n        // life as a visible but collapsed panel.\n        if (result.floating === false && !result.positioned) {\n            result.collapsible = {\n                type           : 'overlay',\n                direction      : 'right',\n                autoClose      : false,\n                tool           : null,\n                recollapseTool : null\n            };\n            result.collapsed = true;\n            result.hidden = result.anchor = false;\n            result.hide = function() {\n                this.collapsible.toggleReveal(false);\n            };\n        }\n\n        // Layout-affecting props must be available early so that appendTo ends up with\n        // correct layout.\n        result.onElementCreated = function({ element }) {\n            element.style.setProperty('--date-time-length', `${dateTimeLength}em`);\n            element.style.setProperty('--date-width-difference', `${(dateLength - timeLength) / 2}em`);\n        };\n        return result;\n    }\n\n    // Called from editEvent() to actually show the editor\n    internalShowEditor(eventRecord, resourceRecord, align = null) {\n        const\n            me            = this,\n            { scheduler } = me,\n            // Align to the element (b-sch-event) and not the wrapper\n            eventElement = align?.target?.nodeType === Element.ELEMENT_NODE\n                ? align.target\n                : scheduler.getElementFromEventRecord(eventRecord, resourceRecord),\n            isPartOfStore = eventRecord.isPartOfStore(scheduler.eventStore);\n\n        align = align ?? {\n            // Align to the element (b-sch-event) and not the wrapper\n            target : eventElement,\n            anchor : true\n        };\n\n        // Event not in current TimeAxis - cannot be edited without extending the TimeAxis.\n        // If there's no event element and the eventRecord is not in the store, we still\n        // edit centered on the Scheduler - we're adding a new event\n        if (align.target || !isPartOfStore || eventRecord.isCreating) {\n            /**\n             * Fires on the owning Scheduler before an event is displayed in an editor.\n             * This may be listened for to allow an application to take over event editing duties. Returning `false`\n             * stops the default editing UI from being shown.\n             * @event beforeEventEdit\n             * @on-owner\n             * @param {Scheduler.view.Scheduler} source The scheduler\n             * @param {Scheduler.feature.EventEdit} eventEdit The eventEdit feature\n             * @param {Scheduler.model.EventModel} eventRecord The record about to be shown in the event editor.\n             * @param {Scheduler.model.ResourceModel} resourceRecord The Resource record for the event. If the event\n             * is being created, it will not contain a resource, so this parameter specifies the resource the\n             * event is being created for.\n             * @param {HTMLElement} eventElement The element which represents the event in the scheduler display.\n             * @preventable\n             */\n            if (scheduler.trigger('beforeEventEdit', {\n                eventEdit : me,\n                eventRecord,\n                resourceRecord,\n                eventElement\n            }) === false) {\n                scheduler.element.classList.remove('b-eventeditor-editing');\n                return false;\n            }\n\n            // need to add this css class as early as possible to prevent\n            // the event tooltip from appearing\n            me.scheduler.element.classList.add('b-eventeditor-editing');\n\n            me.resourceRecord = resourceRecord;\n\n            const { editor } = me;\n\n            me.editingContext = {\n                eventRecord,\n                resourceRecord,\n                eventElement,\n                editor,\n                isPartOfStore\n            };\n\n            super.internalShowEditor?.(eventRecord, resourceRecord, align);\n\n            if (me.typeField) {\n                me.toggleEventType(eventRecord.get(me.typeField));\n            }\n\n            me.loadRecord(eventRecord, resourceRecord);\n\n            // If it's a static child of the client which is collapsed, expand it.\n            // Floating components focusOnShow by default, this will need to be focused.\n            if (editor.collapsed) {\n                // The *initial* reveal does not animate unless the toggleReveal call is delayed.\n                editor.setTimeout(async() => {\n                    await editor.collapsible.toggleReveal(true);\n                    editor.focus();\n                }, 100);\n            }\n            // Honour alignment settings \"anchor\" and \"centered\" which may be injected from editorConfig.\n            else if (editor.centered || !editor.anchor || !editor.floating) {\n                editor.show();\n            }\n            else if (eventElement) {\n                me.targetEventElement = eventElement;\n                editor.showBy(align);\n            }\n            // We are adding an unrendered event. Display the editor centered\n            else {\n                editor.show();\n\n                // Must be done after show because show always reverts to its configured centered setting.\n                editor.updateCentered(true);\n            }\n\n            // Adjust time field step increment based on timeAxis resolution\n            const timeResolution = scheduler.timeAxisViewModel.timeResolution;\n\n            if (timeResolution.unit === 'hour' || timeResolution.unit === 'minute') {\n                const step = `${timeResolution.increment}${timeResolution.unit}`;\n                if (me.startTimeField) {\n                    me.startTimeField.step = step;\n                }\n                if (me.endTimeField) {\n                    me.endTimeField.step = step;\n                }\n            }\n\n            // Might end up here with the old listener still around in monkey test for stress demo in turbo mode.\n            // Some action happening during edit, but cannot track down what is going on\n            me.detachListeners('changesWhileEditing');\n\n            scheduler.eventStore.ion({\n                change  : me.onChangeWhileEditing,\n                refresh : me.onChangeWhileEditing,\n                thisObj : me,\n                name    : 'changesWhileEditing'\n            });\n        }\n    }\n\n    onChangeWhileEditing() {\n        const me = this;\n        // If event was removed, cancel editing\n        // however, there's one valid case when even can be removed during save finalization - that is when\n        // all its assignments has been removed - in such case ignore the removal and do not call the `onCancelClick`\n        // because that will reject the STM transaction and revert all changes\n        if (!me.isFinalizingEventSave && me.isEditing && me.editingContext.isPartOfStore && !me.eventRecord.isPartOfStore(me.scheduler.eventStore)) {\n            me.onCancelClick();\n        }\n    }\n\n    // Fired in a listener so that it's after the auto-called onBeforeShow listeners so that\n    // subscribers to the beforeEventEditShow are called at exactly the correct lifecycle point.\n    onBeforeEditorShow() {\n        super.onBeforeEditorShow(...arguments);\n\n        /**\n         * Fires on the owning Scheduler when the editor for an event is available but before it is populated with\n         * data and shown. Allows manipulating fields etc.\n         * @event beforeEventEditShow\n         * @on-owner\n         * @param {Scheduler.view.Scheduler} source The scheduler\n         * @param {Scheduler.feature.EventEdit} eventEdit The eventEdit feature\n         * @param {Scheduler.model.EventModel} eventRecord The record about to be shown in the event editor.\n         * @param {Scheduler.model.ResourceModel} resourceRecord The Resource record for the event. If the event\n         * is being created, it will not contain a resource, so this parameter specifies the resource the\n         * event is being created for.\n         * @param {HTMLElement} eventElement The element which represents the event in the scheduler display.\n         * @param {Core.widget.Popup} editor The editor\n         */\n        this.scheduler.trigger('beforeEventEditShow', {\n            eventEdit : this,\n            ...this.editingContext\n        });\n    }\n\n    updateTargetEventElement(targetEventElement, oldTargetEventElement) {\n        targetEventElement?.classList.add('b-editing');\n        oldTargetEventElement?.classList.remove('b-editing');\n    }\n\n    /**\n     * Opens an editor for the passed event. This function is exposed on Scheduler and can be called as\n     * `scheduler.editEvent()`.\n     * @param {Scheduler.model.EventModel} eventRecord Event to edit\n     * @param {Scheduler.model.ResourceModel} [resourceRecord] The Resource record for the event.\n     * This parameter is needed if the event is newly created for a resource and has not been assigned, or when using\n     * multi assignment.\n     * @param {HTMLElement} [element] Element to anchor editor to (defaults to events element)\n     * @on-owner\n     */\n    editEvent(eventRecord, resourceRecord, element = null, stmCapture = null) {\n        const\n            me                  = this,\n            { simpleEventEdit } = me.client.features;\n\n        if (me.isEditing) {\n            // old editing flow already running, clean it up\n            me.resetEditingContext();\n        }\n\n        // If simple edit feature is active, use it when a new event is created\n        if (me.disabled || eventRecord.readOnly || (eventRecord.isCreating && simpleEventEdit?.enabled)) {\n            return;\n        }\n\n        if (stmCapture) {\n            me.stmInitiallyAutoRecord = stmCapture.stmInitiallyAutoRecord;\n            me.stmInitiallyDisabled = stmCapture.stmInitiallyDisabled;\n            me.hasStmCapture = true;\n\n            // indicate that editor has been opened, and is now managing the \"stm capture\"\n            stmCapture.transferred = true;\n        }\n        // it is set to `false` by calendar, to ignore the STM mechanism\n        else if (stmCapture !== false && !me.client.isCalendar && !me.hasStmCapture) {\n            me.captureStm(true);\n        }\n\n        return me.doEditEvent(...arguments).then(result => {\n            if (!me.isDestroying) {\n                // The Promise being async allows a mouseover to trigger the event tip\n                // unless we add the editing class immediately (But only if we actually began editing).\n                if (!me.isEditing && !me.client.isCalendar) {\n                    // probably a custom event editor was used or editing was vetoed for some other reason\n                    if (result !== false) {\n                        // Skip stm rejection if built-in editor is disabled in beforeEventEdit (using of custom event editor)\n                        me.rejectStmTransaction();\n                    }\n                    me.freeStm();\n                }\n            }\n        });\n    }\n\n    /**\n     * Returns true if the editor is currently active\n     * @readonly\n     * @property {Boolean}\n     */\n    get isEditing() {\n        const { _editor } = this;\n\n        return Boolean(\n            // Editor is not visible if it is collapsed and not expanded\n            _editor?.isVisible && !(_editor.collapsed && !_editor.revealed)\n        );\n    }\n\n    // editEvent is the single entry point in the base class.\n    // Subclass implementations of the action may differ, so are implemented in doEditEvent\n    async doEditEvent(eventRecord, resourceRecord, element = null) {\n        const\n            me            = this,\n            { scheduler } = me,\n            isNewRecord   = eventRecord.isCreating;\n\n        if (!resourceRecord) {\n            // Need to handle resourceId for edge case when creating an event with resourceId and editing it before\n            // adding it to the EventStore\n            resourceRecord = eventRecord.resource || me.resourceStore.getById(eventRecord.resourceId);\n        }\n\n        if (isNewRecord) {\n            // Ensure temporal data fields are ready when the editor is shown\n            TimeSpan.prototype.normalize.call(eventRecord);\n        }\n\n        // If element is specified (call triggered by EventDragCreate)\n        // Then we can align to that, and no scrolling is necessary.\n        // If we are simply being asked to edit a new event which is not\n        // yet added, the editor is centered, and no scroll is necessary\n        if (element || isNewRecord) {\n            return me.internalShowEditor(eventRecord, resourceRecord, element ? {\n                target : element\n            } : null);\n        }\n        else {\n            // Ensure event is in view before showing the editor.\n            // Note that we first need to extend the time axis to include\n            // currently out of range events.\n            return scheduler.scrollResourceEventIntoView(resourceRecord, eventRecord, {\n                animate        : true,\n                edgeOffset     : 0,\n                extendTimeAxis : false\n            }).then(() => me.internalShowEditor(eventRecord, resourceRecord), () => scheduler.element.classList.remove('b-eventeditor-editing'));\n        }\n    }\n\n    /**\n     * Sets fields values from record being edited\n     * @private\n     */\n    loadRecord(eventRecord, resourceRecord) {\n        this.loadingRecord = true;\n\n        this.internalLoadRecord(eventRecord, resourceRecord);\n\n        this.loadingRecord = false;\n    }\n\n    get eventRecord() {\n        return this._editor?.record;\n    }\n\n    internalLoadRecord(eventRecord, resourceRecord) {\n        const\n            me                        = this,\n            { eventStore }            = me.client,\n            { editor, resourceField } = me;\n\n        me.resourceRecord = resourceRecord;\n\n        // Update chained store early, to have records in place when setting value below (avoids adding the resource to\n        // empty combo store, https://github.com/bryntum/support/issues/5378). It is not done automatically for\n        // grouping/trees or when project is replaced\n        if (resourceField && resourceField.store?.masterStore !== me.resourceStore) {\n            resourceField.store = editor.chainResourceStore();\n        }\n\n        editor.record = eventRecord;\n\n        if (resourceField) {\n            const resources = eventStore.assignmentStore.getResourcesForEvent(eventRecord);\n\n            // Flag on parent Container to indicate that initially blank fields are valid\n            editor.assigningValues = true;\n\n            // If this is an unassigned event, select the resource we've been provided\n            if (!eventRecord.isOccurrence && !eventStore.storage.includes(eventRecord, true) && resourceRecord) {\n                me.resourceField.value = resourceRecord[me.resourceField.valueField];\n            }\n            else if (me.assignmentStore) {\n                me.resourceField.value = resources.map((resource) => resource[me.resourceField.valueField]);\n            }\n            editor.assigningValues = false;\n        }\n\n        super.internalLoadRecord(eventRecord, resourceRecord);\n    }\n\n    toggleEventType(eventType) {\n        // expose eventType in dataset, for querying and styling\n        this.editor.element.dataset.eventType = eventType || '';\n\n        this.editor.eachWidget(widget => { // need {}'s here so we don't return false and end iteration\n            widget.dataset?.eventType && (widget.hidden = widget.dataset.eventType !== eventType);\n        });\n    }\n\n    //endregion\n\n    //region Save\n\n    async finalizeEventSave(eventRecord, resourceRecords, resolve, reject) {\n        const\n            me = this,\n            {\n                scheduler,\n                assignmentStore\n            }  = me;\n\n        const aborted = false;\n\n        // Prevent multiple commits from this flow\n        assignmentStore.suspendAutoCommit();\n\n        // Avoid multiple redraws, from event changes + assignment changes\n        scheduler.suspendRefresh();\n\n        me.onBeforeSave(eventRecord);\n\n        eventRecord.beginBatch();\n        me.updateRecord(eventRecord);\n        eventRecord.endBatch();\n\n        if (!eventRecord.isOccurrence) {\n            if (me.resourceField) {\n                assignmentStore.assignEventToResource(eventRecord, resourceRecords, null, true);\n            }\n        }\n        // An occurrence event record may have changed only resources value. In that case we'll never get into afterChange() method that\n        // apply changed data and make an event \"real\", because resources is not a field and a record won't be marked as dirty.\n        // We used temporary field to save updated resources list and get into afterChange() method.\n        else if (resourceRecords) {\n            eventRecord.set('resourceRecords', resourceRecords);\n        }\n\n        // If it was a provisional event, passed in here from drag-create or dblclick or contextmenu,\n        // it's now it's no longer a provisional event and will not be removed in resetEditingContext\n        // Also, when promoted to be permanent, auto syncing will kick in if configured.\n        eventRecord.isCreating = false;\n\n        if (!aborted) {\n            await scheduler.project.commitAsync();\n        }\n\n        assignmentStore.resumeAutoCommit();\n\n        // Redraw once\n        scheduler.resumeRefresh(true);\n\n        if (!aborted) {\n            /**\n             * Fires on the owning Scheduler after an event is successfully saved\n             * @event afterEventSave\n             * @on-owner\n             * @param {Scheduler.view.Scheduler} source The scheduler instance\n             * @param {Scheduler.model.EventModel} eventRecord The record about to be saved\n             */\n            scheduler.trigger('afterEventSave', { eventRecord });\n            me.onAfterSave(eventRecord);\n        }\n        resolve(aborted ? false : eventRecord);\n    }\n\n    /**\n     * Saves the changes (applies them to record if valid, if invalid editor stays open)\n     * @private\n     * @fires beforeEventSave\n     * @fires beforeEventAdd\n     * @fires afterEventSave\n     * @async\n     */\n    save() {\n        return new Promise((resolve, reject) => {\n            const\n                me                         = this,\n                { scheduler, eventRecord } = me;\n\n            if (!eventRecord || !me.editor.isValid) {\n                resolve(false);\n                return;\n            }\n\n            const\n                { eventStore, values } = me,\n                resourceRecords        = me.resourceField?.records || (me.resourceRecord ? [me.resourceRecord] : []);\n\n            // Check for potential overlap scenarios before saving\n            // <remove-on-release>\n            // TODO: needs to be indicated in the UI\n            // </remove-on-release>\n            if (!me.scheduler.allowOverlap && eventStore) {\n                let { startDate, endDate } = values;\n\n                // Should support using a duration field instead of the end date field\n                if (!endDate) {\n                    if ('duration' in values) {\n                        endDate = DateHelper.add(startDate, values.duration, values.durationUnit || eventRecord.durationUnit);\n                    }\n                    else if ('fullDuration' in values) {\n                        endDate = DateHelper.add(startDate, values.fullDuration);\n                    }\n                    else {\n                        endDate = eventRecord.endDate;\n                    }\n                }\n\n                const abort = resourceRecords.some(resource => {\n                    return !eventStore.isDateRangeAvailable(startDate, endDate, eventRecord, resource);\n                });\n\n                if (abort) {\n                    resolve(false);\n                    return;\n                }\n            }\n\n            const context = {\n                finalize(saveEvent) {\n                    try {\n                        if (saveEvent !== false) {\n                            me.finalizeEventSave(eventRecord, resourceRecords, resolve, reject);\n                        }\n                        else {\n                            resolve(false);\n                        }\n                    }\n                    catch (e) {\n                        reject(e);\n                    }\n                }\n            };\n\n            /**\n             * Fires on the owning Scheduler before an event is saved, return `false` to prevent the save.\n             * @event beforeEventSave\n             * @on-owner\n             * @param {Scheduler.view.Scheduler} source The scheduler instance\n             * @param {Scheduler.model.EventModel} eventRecord The record about to be saved\n             * @param {Scheduler.model.ResourceModel[]} resourceRecords The resources to which the event is assigned\n             * @param {Object} values The new values\n             * @param {Object} context Extended save context:\n             * @param {Boolean} [context.async] Set this to `true` in a listener to indicate that the listener will asynchronously decide to prevent or not the event save.\n             * @param {Function} context.finalize Function to call to finalize the save. Used when `async` is `true`. Provide `false` to the function to prevent the save.\n             * @preventable\n             */\n            if (scheduler.trigger('beforeEventSave', { eventRecord, resourceRecords, values, context }) === false) {\n                resolve(false);\n                return;\n            }\n            // truthy context.async means than a listener will decide to approve saving asynchronously\n            if (!context.async) {\n                context.finalize();\n            }\n        });\n    }\n\n    //endregion\n\n    //region Delete\n\n    /**\n     * Delete event being edited\n     * @fires beforeEventDelete\n     * @private\n     * @async\n     */\n    deleteEvent() {\n        this.detachListeners('changesWhileEditing');\n\n        return new Promise((resolve, reject) => {\n            const\n                me                      = this,\n                { eventRecord, editor } = me;\n\n            me.scheduler.removeEvents([eventRecord], removeRecord => {\n                // The reason it does it here is to move focus *before* it gets deleted,\n                // and then there's code in the delete to see that it's deleting the focused one,\n                // and jump forwards or backwards to move to the next or previous event\n                // See 'Should allow key activation' test in tests/view/mixins/EventNavigation.t.js\n                if (removeRecord && editor.containsFocus) {\n                    editor.revertFocus();\n                }\n\n                resolve(removeRecord);\n            }, editor);\n        });\n    }\n\n    //endregion\n\n    //region Stores\n\n    onChangeProject() {\n        // Release resource store on project change, it will be re-chained on next show\n        if (this.resourceField) {\n            this.resourceField.store = {}; // Cannot use null\n        }\n    }\n\n    get eventStore() {\n        return this.scheduler.project.eventStore;\n    }\n\n    get resourceStore() {\n        return this.scheduler.project.resourceStore;\n    }\n\n    get assignmentStore() {\n        return this.scheduler.project.assignmentStore;\n    }\n\n    //endregion\n\n    //endregion\n\n    //region Events\n\n    onActivateEditor({ eventRecord, resourceRecord, eventElement }) {\n        this.editEvent(eventRecord, resourceRecord, eventElement);\n    }\n\n    onDragCreateEnd({ eventRecord, resourceRecord, proxyElement, stmCapture }) {\n        this.editEvent(eventRecord, resourceRecord, proxyElement, stmCapture);\n    }\n\n    // chained from EventNavigation\n    onEventEnterKey({ assignmentRecord, eventRecord, target }) {\n        const\n            { client }  = this,\n            // Event can arrive from the wrap element in some products (such as Calendar)\n            // so in these cases, we must use querySelector to look *inside* the element.\n            element     = target[target.matches(client.eventSelector) ? 'querySelector' : 'closest'](client.eventInnerSelector);\n\n        if (assignmentRecord) {\n            this.editEvent(eventRecord, assignmentRecord.resource, element);\n        }\n        else if (eventRecord) {\n            this.editEvent(eventRecord, eventRecord.resource, element);\n        }\n    }\n\n    // Toggle fields visibility when changing eventType\n    onEventTypeChange({ value }) {\n        this.toggleEventType(value);\n    }\n\n    //endregion\n\n    //region Context menu\n\n    populateEventMenu({ eventRecord, resourceRecord, items }) {\n        if (!this.scheduler.readOnly && !this.disabled) {\n            items.editEvent = {\n                text        : 'L{EventEdit.Edit event}',\n                localeClass : this,\n                icon        : 'b-icon b-icon-edit',\n                weight      : 100,\n                disabled    : eventRecord.readOnly,\n                onItem      : () => {\n                    this.editEvent(eventRecord, resourceRecord);\n                }\n            };\n        }\n    }\n\n    //endregion\n\n    onBeforeEditorToggleReveal({ reveal }) {\n        // reveal true/false is analogous to show/hide\n        this[reveal ? 'onBeforeEditorShow' : 'resetEditingContext']();\n    }\n\n    resetEditingContext() {\n        const me = this;\n\n        me.detachListeners('changesWhileEditing');\n\n        // super call has to go before the `me.rejectStmTransaction();` below\n        // because it can be removing an event manually, bypassing the stm\n        super.resetEditingContext();\n\n        // client does not use STM for task editing (at least yet)\n        if (me.hasStmCapture && !me.isDeletingEvent && !me.isCancelingEdit) {\n            me.freeStm(false);\n        }\n\n        // Clear to prevent retaining project\n        me.resourceRecord = null;\n    }\n\n    async finalizeStmCapture(shouldReject) {\n        if (shouldReject) {\n            await this.rejectStmTransaction();\n        }\n        else {\n            this.commitStmTransaction();\n        }\n\n        this.freeStm();\n    }\n}\n\nGridFeatureManager.registerFeature(EventEdit, true, 'Scheduler');\nGridFeatureManager.registerFeature(EventEdit, false, ['SchedulerPro', 'ResourceHistogram']);\n\nEventEdit.initClass();\n", "import List from '../../Core/widget/List.js';\nimport DomHelper from '../../Core/helper/DomHelper.js';\nimport StringHelper from '../../Core/helper/StringHelper.js';\nimport ArrayHelper from '../../Core/helper/ArrayHelper.js';\n\n/**\n * @module Scheduler/widget/ResourceFilter\n */\n\n/**\n * A List which allows selection of resources to filter a specified eventStore to only show\n * events for the selected resources.\n *\n * Because this widget maintains a state that can be changed through the UI, it offers some of the\n * API of an input field. It has a read only {@link #property-value} property, and it fires a\n * {@link #event-change} event.\n *\n * @extends Core/widget/List\n * @classType resourceFilter\n * @widget\n */\nexport default class ResourceFilter extends List {\n    static get $name() {\n        return 'ResourceFilter';\n    }\n\n    // Factoryable type name\n    static get type() {\n        return 'resourcefilter';\n    }\n\n    static get delayable() {\n        return {\n            applyFilters : 'raf'\n        };\n    }\n\n    static get configurable() {\n        return {\n            /**\n             * The {@link Scheduler.data.EventStore EventStore} to filter.\n             * Events for resources which are deselected in this List will be filtered out.\n             * @config {Scheduler.data.EventStore}\n             */\n            eventStore : null,\n\n            multiSelect            : true,\n            toggleAllIfCtrlPressed : true,\n            itemTpl                : record => StringHelper.encodeHtml(record.name || ''),\n\n            /**\n             * An optional filter function to apply when loading resources from the project's\n             * resource store. Defaults to loading all resources.\n             *\n             * **This is called using this `ResourceFilter` as the `this` object.**\n             * @config {Function|String}\n             * @default\n             */\n            masterFilter : () => true,\n\n            /**\n             * By default, deselecting list items filters only the {@link #config-eventStore} so that\n             * events for the deselected resources are hidden from view. The `resourceStore` is __not__\n             * filtered.\n             *\n             * Configure this as `true` to also filter the `resourceStore` so that deselected resources\n             * are also hidden from view (They will remain in this `List`)\n             * @config {Boolean}\n             * @default false\n             */\n            filterResources : null\n        };\n    }\n\n    itemIconTpl(record, i) {\n        const\n            { eventColor } = record,\n            // Named colors are applied using CSS\n            cls            = DomHelper.isNamedColor(eventColor) ? ` b-sch-foreground-${eventColor}` : '',\n            // CSS style color is used as is\n            style          = !cls && eventColor ? ` style=\"color:${eventColor}\"` : '';\n\n        return this.multiSelect ? `<div class=\"b-selected-icon b-icon${cls}\"${style}></div>` : '';\n    }\n\n    updateEventStore(eventStore) {\n        const\n            me                 = this,\n            // HACK: Temp workaround until List's store is dynamically updatable.\n            chainedStoreConfig = me.initialConfig.store?.isStore ? me.initialConfig.store.initialConfig : me.store?.config,\n            // Allow configuration of the filter for loading records from the master store.\n            { resourceStore }  = eventStore,\n            store              = me.store = resourceStore.chain(me.masterFilter, null, {\n                ...chainedStoreConfig,\n                syncOrder : true\n            }),\n            changeListeners    = {\n                change  : 'onStoreChange',\n                thisObj : me\n            };\n\n        // We need to sync selection and rendering on changes fired from master store\n        store.un(changeListeners);\n        resourceStore.ion(changeListeners);\n\n        if (!resourceStore.count) {\n            resourceStore.project.ion({\n                name    : 'project',\n                refresh : 'initFilter',\n                thisObj : me\n            });\n        }\n        else {\n            me.initFilter();\n        }\n    }\n\n    changeMasterFilter(masterFilter) {\n        // Cannot use bind, otherwise fillFromMaster's check for whether its a filter function fails.\n        const me = this;\n\n        // If we are filtering the resource store, we cannot now fill ourselves from the filtered\n        // view of the resource store. Otherwise the list would hide the list items as they are deselected.\n        if (!me.filterResources) {\n            return function(r) {\n                return me.callback(masterFilter, me, [r]);\n            };\n        }\n    }\n\n    initFilter() {\n        const { eventStore, selected } = this;\n\n        if (eventStore.count && eventStore.resourceStore.count) {\n            // We default to all resources selected unless this was configured with\n            // an initialSelection. See List#changeSelection\n            if (!this.initialSelection) {\n                selected.add(this.store.getRange());\n            }\n            this.detachListeners('project');\n        }\n    }\n\n    onStoreRefresh({ source : store, action }) {\n        // We need to re-enable the filter if the store becomes filtered.\n        // We only disable the filter if we know that we have selected all available\n        // resources.\n        if (action === 'filter' && this.eventStoreFilter) {\n            const\n                { eventStoreFilter } = this,\n                { disabled }       = eventStoreFilter,\n                newDisabled        = !store.isFiltered && this.allSelected;\n\n            if (newDisabled !== disabled) {\n                eventStoreFilter.disabled = newDisabled;\n                this.applyFilters();\n            }\n        }\n        super.onStoreRefresh(...arguments);\n    }\n\n    onSelectionChange({ source : selected, added, removed }) {\n        // Filter disabled if all resources selected\n        const\n            me       = this,\n            // Only disable the filter if the allSelected method is seeing *all* of the\n            // records from its masterStore with no filtering.\n            disabled = !me.store.isFiltered && me.allSelected;\n\n        super.onSelectionChange(...arguments);\n\n        let filtersAdded = false;\n\n        // If this is the first selection change triggered from the first project refresh\n        // in which all the resources are selected, then we ony need to apply the filters.\n        // if *not* all resources are selected, ie if added.length !== entire store length.\n        if (!me.eventStoreFilter) {\n            // Our client EventStore is filtered to only show events for our selected resources.\n            // Events without an associated resource are filtered into visibility.\n            // The addFilter function with silent param adds the filter but don't reevaluate filtering.\n            me.eventStoreFilter = me.eventStore.addFilter({\n                id       : `${me.id}-filter-instance`,\n                filterBy : e => !e.resource || me.selected.includes(e.resources),\n                disabled\n            }, added?.length === me.store.count);\n\n            filtersAdded = true;\n        }\n\n        if (me.filterResources && !me.resourceStoreFilter) {\n            // Our client EventStore is filtered to only show events for our selected resources.\n            // Events without an associated resource are filtered into visibility.\n            // The addFilter function with silent param adds the filter but don't reevaluate filtering.\n            me.resourceStoreFilter = me.eventStore.resourceStore.addFilter({\n                id       : `${me.id}-filter-instance`,\n                filterBy : r => me.selected.includes(r),\n                disabled\n            }, added?.length === me.store.count);\n\n            filtersAdded = true;\n        }\n\n        // The filters have been just added and so will take effect. No need to call applyFilter.\n        if (filtersAdded) {\n            return;\n        }\n\n        // Filter disabled if all resources selected\n        me.eventStoreFilter.disabled = disabled;\n        me.resourceStoreFilter && (me.resourceStoreFilter.disabled = disabled);\n\n        // Have the client EventStore refresh its filtering but after a small delay so the List UI updates immediately.\n        me.applyFilters();\n\n        if (me.eventListeners.change) {\n            const\n                value    = selected.values,\n                oldValue = value.concat(removed);\n\n            ArrayHelper.remove(oldValue, added);\n\n            /**\n             * Fired when this widget's selection changes\n             * @event change\n             * @param {String} value - This field's value\n             * @param {String} oldValue - This field's previous value\n             * @param {Core.widget.Field} source - This ResourceFilter\n             */\n            me.triggerFieldChange({\n                value,\n                oldValue\n            });\n        }\n    }\n\n    /**\n     * An array encapsulating the currently selected resources.\n     * @member {Scheduler.model.ResourceModel[]}\n     * @readonly\n     */\n    get value() {\n        return this.selected.values;\n    }\n\n    applyFilters() {\n        this.eventStore.filter();\n        this.filterResources && this.eventStore.resourceStore.filter();\n    }\n\n    doDestroy() {\n        this.store?.destroy();\n        super.doDestroy();\n    }\n}\n\n// Register this widget type with its Factory\nResourceFilter.initClass();\n", "import DatePicker from '../../Core/widget/DatePicker.js';\nimport DateHelper from '../../Core/helper/DateHelper.js';\nimport DomHelper from '../../Core/helper/DomHelper.js';\nimport VersionHelper from '../../Core/helper/VersionHelper.js';\n\n/**\n * @module Scheduler/widget/SchedulerDatePicker\n */\n\n/**\n * A subclass of {@link Core.widget.DatePicker} which is able to show the presence of\n * events in its cells if configured with an {@link #config-eventStore}, and\n * {@link #config-showEvents} is set to a truthy value.\n *\n * The `datepicker` Widget type is implemented by this class when this class is imported, or built\n * into a bundle, and so any {@link Core.widget.DateField} may have its\n * {@link Core.widget.PickerField#config-picker} configured to use its capabilities of showing\n * the presence of events in its date cells.\n *\n * @classtype datepicker\n * @extends Core/widget/DatePicker\n * @inlineexample Scheduler/widget/SchedulerDatePicker.js\n * @widget\n */\nexport default class SchedulerDatePicker extends DatePicker {\n    static get $name() {\n        return 'SchedulerDatePicker';\n    }\n\n    static get type() {\n        return 'datepicker';\n    }\n\n    static get configurable() {\n        return {\n            /**\n             * How to show presence of events in the configured {@link #config-eventStore} in the\n             * day cells. Values may be:\n             *\n             * * `false` - Do not show events in cells.\n             * * `true` - Show a themeable bullet to indicate the presence of events for a date.\n             * * `'count'` - Show a themeable badge containing the event count for a date.\n             * @config {Boolean|'count'}\n             * @default false\n             */\n            showEvents : null,\n\n            /**\n             * The {@link Scheduler.data.EventStore event store} from which the in-cell event presence\n             * indicators are drawn.\n             * @config {Scheduler.data.EventStore}\n             */\n            eventStore : null,\n\n            /**\n             * A function, or the name of a function in the ownership hierarchy to filter which events\n             * are collected into the day cell data blocks.\n             *\n             * Return `true` to include the passed event, or a *falsy* value to exclude the event.\n             * @config {Function|String}\n             */\n            eventFilter : {\n                $config : 'lazy',\n                value   : null\n            }\n        };\n    }\n\n    construct(config) {\n        // Handle deprecated events config. It is now showEvents.\n        // events conflicts with the events data which may be passed in\n        if ('events' in config) {\n            config = {\n                ...config,\n                showEvents : config.events\n            };\n            delete config.events;\n\n            VersionHelper.deprecate(VersionHelper['calendar'] ? 'Calendar' : 'Scheduler', '6.0.0', 'DatePicker#events should be configured as showEvents');\n        }\n        super.construct(config);\n    }\n\n    changeEventFilter(eventFilter) {\n        if (typeof eventFilter === 'string') {\n            const { handler, thisObj } = this.resolveCallback(eventFilter);\n            eventFilter = handler.bind(thisObj);\n        }\n        return eventFilter;\n    }\n\n    doRefresh() {\n        // Hidden widgets must not query the EventStore for loading on demand to be able to use\n        // the EventStore's dateRangeRequested event.\n        if (this.isVisible || !this.showEvents) {\n            this.refreshEventsMap();\n            return super.doRefresh(...arguments);\n        }\n        else {\n            this.whenVisible('doRefresh');\n        }\n    }\n\n    updateShowEvents(showEvents, oldShowEvents) {\n        const\n            me            = this,\n            { classList } = me.contentElement;\n\n        let { eventStore } = me;\n\n        // Begin any animations in the next AF\n        me.requestAnimationFrame(() => {\n            me.element.classList.toggle('b-datepicker-with-events', Boolean(showEvents));\n            me.owner?.element.classList.toggle('b-datepicker-with-events', Boolean(showEvents));\n            showEvents && classList.add(`b-show-events-${showEvents}`);\n            classList.remove(`b-show-events-${oldShowEvents}`);\n        });\n\n        if (showEvents) {\n            if (!eventStore) {\n                const eventStoreOwner = me.up(w => w.eventStore);\n\n                if (eventStoreOwner) {\n                    eventStore = eventStoreOwner.eventStore;\n                }\n                else {\n                    throw new Error('DatePicker configured with events but no eventStore');\n                }\n            }\n        }\n        else {\n            me.eventsMap = null;\n        }\n        if (!me.isConfiguring) {\n            me.updateEventStore(eventStore);\n            me.doRefresh();\n        }\n    }\n\n    refreshEventsMap() {\n        const me = this;\n\n        if (me.showEvents) {\n            me.eventsMap = me.eventStore.getEventCounts({\n                startDate : me.startDate,\n                endDate   : me.endDate,\n                dateMap   : me.eventsMap,\n                filter    : me.eventFilter\n            });\n        }\n    }\n\n    updateEventStore(eventStore) {\n        // Add a listener to refresh on any event change unless the listener is already added.\n        if (eventStore.findListener('change', 'refresh', this) === -1) {\n            eventStore?.[this.showEvents ? 'on' : 'un']?.({\n                change  : 'refresh',\n                thisObj : this\n            });\n        }\n    }\n\n    cellRenderer({ cell, date }) {\n        const\n            { showEvents } = this,\n            count          = this.eventCounts?.get?.(DateHelper.makeKey(date)),\n            isCount        = showEvents === 'count';\n\n        delete cell.dataset.btip;\n        if (count) {\n            if (!isCount && this.eventCountTip) {\n                cell.dataset.btip = this.L('L{ResourceInfoColumn.eventCountText}', count);\n            }\n            DomHelper.createElement({\n                dataset : {\n                    count\n                },\n                class : {\n                    [isCount ? 'b-cell-events-badge' : 'b-icon b-icon-circle'] : 1,\n                    [SchedulerDatePicker.getEventCountClass(count)]            : 1\n                },\n                parent                  : cell,\n                [isCount ? 'text' : ''] : count\n            });\n        }\n    }\n\n    static getEventCountClass(count) {\n        if (count) {\n            if (count < 4) {\n                return 'b-datepicker-1-to-3-events';\n            }\n            if (count < 7) {\n                return 'b-datepicker-4-to-6-events';\n            }\n            return 'b-calendar-7-or-more-events';\n        }\n        return '';\n    }\n\n    static setupClass(meta) {\n        // We take over the type name 'datepicker' when we are in the app\n        meta.replaceType = true;\n\n        super.setupClass(meta);\n    }\n}\n\n// Register this widget type with its Factory\nSchedulerDatePicker.initClass();\n"],
  "mappings": "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",
  "names": ["RecurrenceLegend", "Localizable", "$name", "allDaysValueAsArray", "allDaysValue", "join", "workingDaysValue", "filter", "day", "index", "DateHelper", "nonWorkingDays", "nonWorkingDaysValue", "getLegend", "recurrence", "timeSpanStartDate", "me", "timeSpan", "interval", "days", "monthDays", "months", "positions", "startDate", "tplData", "fn", "frequency", "L", "length", "getDaysLegend", "getDayName", "getDay", "sort", "a", "b", "arrayToText", "getDate", "month", "getMonthShortName", "getMonthName", "getMonth", "position", "DayRuleEncoder", "decodeDay", "getDayShortName", "array", "map", "replace", "_$name", "DH", "scheduleFields", "makeDate", "fields", "value", "date", "time", "DateField", "reverse", "dateValue", "parse", "setHours", "getHours", "getMinutes", "getSeconds", "getMilliseconds", "clone", "copyTime", "dateTo", "dateFrom", "d", "Date", "getTime", "adjustEndDate", "startTime", "endDateField", "endTimeField", "newEndDate", "add", "startDateField", "startTimeField", "eventRecord", "durationMS", "EditBase", "InstancePlugin", "configurable", "saveAndCloseOnEnter", "triggerEvent", "dateFormat", "timeFormat", "editorConfig", "items", "weekStartDay", "construct", "client", "config", "eventEdit", "ObjectHelper", "assign", "clientListenersDetacher", "ion", "dragCreateEnd", "eventAutoCreated", "thisObj", "doDestroy", "_this$_editor", "_editor", "destroy", "onEventAutoCreated", "changeEditorConfig", "Objects", "Config", "merge", "changeItems", "cleanItemsConfig", "ref", "itemCfg", "onDatesChange", "params", "_me$startTimeField", "_me$startDateField2", "field", "source", "min", "_me$startDateField", "_me$endDateField", "isEqual", "clearTime", "save", "Error", "values", "editor", "startFields", "endFields", "forEach", "f", "eachWidget", "widget", "_editor$widgetMap$rec", "name", "hidden", "up", "w", "recurrenceEditor", "push", "record", "widgetMap", "recurrenceCombo", "allDay", "endDate", "duration", "diff", "durationUnit", "onBeforeSave", "onAfterSave", "updateRecord", "assignmentStore", "resource", "set", "onBeforeEditorShow", "editingContext", "nameField", "isCreating", "assigningValues", "_configuredPlaceholder", "placeholder", "resetEditingContext", "eventStore", "isTimelineBase", "_me$editingContext$ev", "eventElement", "closest", "classList", "remove", "element", "targetEventElement", "_record", "onPopupKeyDown", "event", "readOnly", "key", "target", "tagName", "toLowerCase", "preventDefault", "onSaveClick", "finalizeStmCapture", "saved", "focus", "isFinalizingEventSave", "close", "trigger", "onDeleteClick", "isDeletingEvent", "removed", "deleteEvent", "autoClose", "containsFocus", "onCancelClick", "isCancelingEdit", "hasStmCapture", "EventEditor", "Popup", "type", "draggable", "handleSelector", "axisLock", "scrollable", "overflowY", "titleRenderer", "updateLocalization", "arguments", "initialTitle", "title", "chainResourceStore", "eventEditFeature", "resourceStore", "chain", "isSpecialRow", "storeClass", "Store", "excludeCollapsedRecords", "processWidgetConfig", "_widget$type", "includes", "fieldConfig", "store", "setConfig", "multiSelect", "usesSingleAssignment", "format", "Object", "onBeforeShow", "args", "_super$onBeforeShow", "deleteButton", "callback", "call", "onInternalKeyDown", "updateReadOnly", "saveButton", "cancelButton", "initClass", "RecurrenceCombo", "RecurrenceFrequencyCombo", "defaultConfig", "customValue", "splitCls", "highlightExternalChange", "buildItems", "text", "cls", "isCustomRecurrence", "Boolean", "RecurrenceLegendButton", "Button", "localizableProperties", "_recurrence", "updateLegend", "eventStartDate", "_eventStartDate", "onLocaleChange", "RecurrenceEditor", "closable", "floating", "width", "recurrenceEditorPanel", "bbar", "defaults", "localeClass", "foo", "weight", "color", "onClick", "saveHandler", "syncEventRecord", "cancelHandler", "RecurringEventEdit", "Target", "Base", "recurringEventsItems", "label", "editRecurrenceButton", "menuIcon", "flex", "ignoreParentReadOnly", "showRecurringUI", "scheduler", "beforeEventSave", "_this$_recurrenceConf", "_this$_recurrenceEdit", "_recurrenceConfirmation", "_recurrenceEditor", "onEditorConstructed", "_me$recurrenceCombo", "hide", "onRecurringEventEditorHide", "menu", "change", "onRecurrenceComboChange", "internalShowEditor", "toggleRecurringFieldsVisibility", "enableRecurringEvents", "show", "_this$editRecurrenceB", "_this$editRecurrenceB2", "_this$recurrenceCombo", "_this$recurrenceCombo2", "methodName", "_this$recurrenceEdito", "_this$recurrenceConfi", "isVisible", "recurrenceConfirmation", "makeRecurrence", "rule", "eventCopy", "copy", "recurrenceModel", "setStartDate", "suspendTimeSpanNotifying", "onRecurrableEventBeforeSave", "context", "isEditing", "supportsRecurring", "isRecurring", "isOccurrence", "confirm", "actionType", "changerFn", "finalize", "cancelFn", "async", "$$name", "Widget", "create", "owner", "autoShow", "centered", "modal", "constrainTo", "globalThis", "anchor", "rootElement", "recurrenceEditorSaveHandler", "onBeforeShowRecurrenceEditor", "bind", "_readOnly", "loadRecurrenceData", "updateRecurrenceFields", "userAction", "loadingRecord", "internalLoadRecord", "recurrenceRule", "ResourceCombo", "Combo", "showEventColor", "displayField", "valueField", "picker", "itemIconTpl", "eventColor", "isStyleColor", "DomHelper", "isNamedColor", "style", "changeShowEventColor", "updateShowEventColor", "_picker", "changePicker", "oldPicker", "_picker2", "innerElements", "class", "reference", "inputElement", "syncInputFieldValue", "_me$selected", "resourceIcon", "lastResourceIconCls", "selected", "punctuation", "EventEdit", "mixin", "TaskEditStm", "Delayable", "typeField", "clearable", "required", "resourceField", "editable", "destroyStore", "validateDateOnly", "hideWhenEmpty", "pluginConfig", "projectChange", "project", "onClientReadOnlyToggle", "_me$onEditorConstruct", "_me$eventTypeField", "_me$saveButton", "_me$deleteButton", "_me$cancelButton", "editorListeners", "beforehide", "beforeshow", "keydown", "getEditorConfig", "keepDate", "positioned", "parentNode", "beforShow", "beforeToggleReveal", "console", "warn", "relayEvents", "id", "eventTypeField", "click", "dateLength", "timeLength", "dateTimeLength", "result", "align", "scrollAction", "prototype", "getRenderContext", "collapsible", "direction", "tool", "recollapseTool", "collapsed", "toggleReveal", "onElementCreated", "setProperty", "resourceRecord", "_align", "_align$target", "nodeType", "Element", "ELEMENT_NODE", "getElementFromEventRecord", "isPartOfStore", "_super$internalShowEd", "toggleEventType", "get", "loadRecord", "setTimeout", "showBy", "updateCentered", "timeResolution", "timeAxisViewModel", "unit", "step", "increment", "detachListeners", "onChangeWhileEditing", "refresh", "updateTargetEventElement", "oldTargetEventElement", "editEvent", "stmCapture", "simpleEventEdit", "features", "disabled", "enabled", "stmInitiallyAutoRecord", "stmInitiallyDisabled", "transferred", "isCalendar", "captureStm", "doEditEvent", "then", "isDestroying", "rejectStmTransaction", "freeStm", "revealed", "isNewRecord", "getById", "resourceId", "TimeSpan", "normalize", "scrollResourceEventIntoView", "animate", "edgeOffset", "extendTimeAxis", "_resourceField$store", "masterStore", "resources", "getResourcesForEvent", "storage", "eventType", "dataset", "_widget$dataset", "finalizeEventSave", "resourceRecords", "resolve", "reject", "suspendAutoCommit", "suspendRefresh", "beginBatch", "endBatch", "assignEventToResource", "commitAsync", "resumeAutoCommit", "resumeRefresh", "Promise", "_me$resourceField", "isValid", "records", "allowOverlap", "fullDuration", "some", "isDateRangeAvailable", "saveEvent", "e", "removeEvents", "removeRecord", "revertFocus", "onChangeProject", "onActivateEditor", "onDragCreateEnd", "proxyElement", "onEventEnterKey", "assignmentRecord", "matches", "eventSelector", "eventInnerSelector", "onEventTypeChange", "populateEventMenu", "icon", "onItem", "onBeforeEditorToggleReveal", "reveal", "shouldReject", "commitStmTransaction", "GridFeatureManager", "registerFeature", "ResourceFilter", "List", "delayable", "applyFilters", "toggleAllIfCtrlPressed", "itemTpl", "StringHelper", "encodeHtml", "masterFilter", "filterResources", "i", "updateEventStore", "_me$initialConfig$sto", "_me$store", "chainedStoreConfig", "initialConfig", "isStore", "syncOrder", "changeListeners", "un", "count", "initFilter", "changeMasterFilter", "r", "initialSelection", "getRange", "onStoreRefresh", "action", "eventStoreFilter", "newDisabled", "isFiltered", "allSelected", "onSelectionChange", "added", "filtersAdded", "addFilter", "filterBy", "resourceStoreFilter", "eventListeners", "oldValue", "concat", "ArrayHelper", "triggerFieldChange", "_this$store", "SchedulerDatePicker", "DatePicker", "showEvents", "eventFilter", "$config", "events", "VersionHelper", "deprecate", "changeEventFilter", "handler", "resolveCallback", "doRefresh", "refreshEventsMap", "whenVisible", "updateShowEvents", "oldShowEvents", "contentElement", "requestAnimationFrame", "_me$owner", "toggle", "eventStoreOwner", "eventsMap", "isConfiguring", "getEventCounts", "dateMap", "findListener", "_eventStore", "cellRenderer", "cell", "_this$eventCounts", "_this$eventCounts$get", "eventCounts", "makeKey", "isCount", "btip", "eventCountTip", "createElement", "getEventCountClass", "parent", "setupClass", "meta", "replaceType"]
}
