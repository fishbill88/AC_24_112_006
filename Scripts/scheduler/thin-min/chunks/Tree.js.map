{
  "version": 3,
  "sources": ["../../../../Grid/lib/Grid/column/TreeColumn.js", "../../../../Grid/lib/Grid/feature/Tree.js"],
  "sourcesContent": ["import Column from './Column.js';\nimport ColumnStore from '../data/ColumnStore.js';\nimport DomHelper from '../../Core/helper/DomHelper.js';\n\n/**\n * @module Grid/column/TreeColumn\n */\n\nlet currentParentHasIcon = false;\n\n/**\n * A column that displays a tree structure when using the {@link Grid.feature.Tree tree} feature.\n *\n * Default editor is a {@link Core.widget.TextField TextField}.\n *\n * TreeColumn provides configs to define icons for {@link #config-expandIconCls expanded} /\n * {@link #config-collapseIconCls collapsed} nodes, {@link #config-expandedFolderIconCls expanded folder} /\n * {@link #config-collapsedFolderIconCls collapsed folder} nodes and {@link #config-leafIconCls leaf} nodes.\n *\n * When the TreeColumn renders its cells, it will look for two special fields {@link Grid.data.GridRowModel#field-href}\n * and {@link Grid.data.GridRowModel#field-target}. Specifying `href` will produce a link for the TreeNode,\n * and `target` will have the same meaning as in an A tag:\n *\n * ```javascript\n * {\n *    id        : 1,\n *    name      : 'Some external link'\n *    href      : '//www.website.com\",\n *    target    : '_blank\"\n * }\n * ```\n *\n * ## Snippet\n * ```javascript\n * new TreeGrid({\n *     appendTo : document.body,\n *\n *     columns : [\n *          { type: 'tree', field: 'name' }\n *     ]\n * });\n * ```\n *\n * {@inlineexample Grid/column/TreeColumn.js}\n *\n * ## Cell renderers\n *\n * You can affect the contents and styling of cells in this column using a\n * {@link Grid.column.TreeColumn#config-renderer} function.\n *\n * ```javascript\n * const grid = new Grid({\n *   columns : [{\n *       type       : 'tree',\n *       field      : 'name',\n *       text       : 'Name',\n *       renderer({ value, record }) {\n *         return `${value} (${record.childLevel})`\n *       }\n *     }]\n * });\n * ```\n *\n * @classType tree\n * @extends Grid/column/Column\n * @column\n */\nexport default class TreeColumn extends Column {\n\n    static $name = 'TreeColumn';\n\n    static type = 'tree';\n\n    static get defaults() {\n        return {\n            tree     : true,\n            hideable : false,\n            minWidth : 150\n        };\n    }\n\n    static get fields() {\n        return [\n            /**\n             * The icon to use for the collapse icon in collapsed state\n             * @config {String|null} expandIconCls\n             */\n            { name : 'expandIconCls', defaultValue : 'b-icon b-icon-tree-expand' },\n\n            /**\n             * The icon to use for the collapse icon in expanded state\n             * @config {String|null} collapseIconCls\n             */\n            { name : 'collapseIconCls', defaultValue : 'b-icon b-icon-tree-collapse' },\n\n            /**\n             * The icon to use for the collapse icon in expanded state\n             * @config {String|null} collapsedFolderIconCls\n             */\n            { name : 'collapsedFolderIconCls' },\n\n            /**\n             * The icon to use for the collapse icon in expanded state\n             * @config {String|null} expandedFolderIconCls\n             */\n            { name : 'expandedFolderIconCls' },\n\n            /**\n             * Size of the child indent in em. Resulting indent is indentSize multiplied by child level.\n             * @config {Number} indentSize\n             * @default 1.7\n             */\n            { name : 'indentSize', defaultValue : 1.7 },\n\n            /**\n             * The icon to use for the leaf nodes in the tree\n             * @config {String|null} leafIconCls\n             */\n            { name : 'leafIconCls', defaultValue : 'b-icon b-icon-tree-leaf' },\n\n            { name : 'editTargetSelector', defaultValue : '.b-tree-cell-value' },\n\n            /**\n             * Renderer function, used to format and style the content displayed in the cell. Return the cell text you\n             * want to display. Can also affect other aspects of the cell, such as styling.\n             *\n             * <div class=\"note\">\n             * As the TreeColumn adds its own cell content to the column, there is a limit to what is supported in the\n             * renderer function in comparison with an ordinary\n             * {@link Grid.column.Column#config-renderer Column renderer}. Most notably is that changing `cellElement`\n             * content can yield unexpected results as it will be updated later in the rendering process.\n             * </div>\n             *\n             * You can also return a {@link Core.helper.DomHelper#typedef-DomConfig} object describing the markup\n             * ```javascript\n             * new Grid({\n             *     columns : [\n             *         {\n             *              type  : 'tree',\n             *              field : 'name'\n             *              text  : 'Name',\n             *              renderer : ({ record }) => {\n             *                  return {\n             *                      class : 'myClass',\n             *                      children : [\n             *                          {\n             *                              tag : 'i',\n             *                              class : 'fa fa-pen'\n             *                          },\n             *                          {\n             *                              tag : 'span',\n             *                              html : record.name\n             *                          }\n             *                      ]\n             *                  };\n             *              }\n             *         }\n             *     ]\n             * });\n             * ```\n             *\n             * You can modify the row element too from inside a renderer to add custom CSS classes:\n             *\n             * ```javascript\n             * new Grid({\n             *     columns : [\n             *         {\n             *             type     : 'tree',\n             *             field    : 'name',\n             *             text     : 'Name',\n             *             renderer : ({ record, row }) => {\n             *                // Add special CSS class to new rows that have not yet been saved\n             *               row.cls.newRow = record.isPhantom;\n             *\n             *               return record.name;\n             *         }\n             *     ]\n             * });\n             * ```\n             *\n             * @param {Object} renderData Object containing renderer parameters\n             * @param {HTMLElement} [renderData.cellElement] Cell element, for adding CSS classes, styling etc.\n             * Can be `null` in case of export\n             * @param {*} renderData.value Value to be displayed in the cell\n             * @param {Core.data.Model} renderData.record Record for the row\n             * @param {Grid.column.Column} renderData.column This column\n             * @param {Grid.view.Grid} renderData.grid This grid\n             * @param {Grid.row.Row} [renderData.row] Row object. Can be null in case of export. Use the\n             * {@link Grid.row.Row#function-assignCls row's API} to manipulate CSS class names.\n             * @param {Object} [renderData.size] Set `size.height` to specify the desired row height for the current\n             * row. Largest specified height is used, falling back to configured {@link Grid/view/Grid#config-rowHeight}\n             * in case none is specified. Can be null in case of export\n             * @param {Number} [renderData.size.height] Set this to request a certain row height\n             * @param {Number} [renderData.size.configuredHeight] Row height that will be used if none is requested\n             * @param {Boolean} [renderData.isExport] True if record is being exported to allow special handling during\n             * export.\n             * @param {Boolean} [renderData.isMeasuring] True if the column is being measured for a `resizeToFitContent`\n             * call. In which case an advanced renderer might need to take different actions.\n             * @config {Function} renderer\n             * @category Common\n             */\n            'renderer'\n        ];\n    }\n\n    constructor(config, store) {\n        super(...arguments);\n\n        const me = this;\n\n        // We handle htmlEncoding in this class rather than relying on the generic Row DOM manipulation\n        // since this class requires quite a lot of DOM infrastructure around the actual rendered content\n        me.shouldHtmlEncode = me.htmlEncode;\n        me.setData('htmlEncode', false);\n\n        // add tree renderer (which calls original renderer internally)\n        if (me.renderer) {\n            me.originalRenderer = me.renderer;\n        }\n        me.renderer = me.treeRenderer.bind(me);\n    }\n\n    /**\n     * A column renderer that is automatically added to the column with { tree: true }. It adds padding and node icons\n     * to the cell to make the grid appear to be a tree. The original renderer is called in the process.\n     * @private\n     */\n    treeRenderer(renderData) {\n        const\n            me       = this,\n            {\n                grid,\n                column,\n                cellElement,\n                row,\n                record,\n                isExport\n            }           = renderData,\n            gridMeta    = record.instanceMeta(grid.store),\n            isCollapsed = !record.isLeaf && gridMeta.collapsed,\n            innerConfig = {\n                className : 'b-tree-cell-value'\n            },\n            children    = [innerConfig],\n            result      = {\n                className : {\n                    'b-tree-cell-inner' : 1\n                },\n                tag    : record.href ? 'a' : 'div',\n                href   : record.href,\n                target : record.target,\n                children\n            },\n            rowClasses  = {\n                'b-tree-parent-row'  : 0,\n                'b-tree-collapsed'   : 0,\n                'b-tree-expanded'    : 0,\n                'b-loading-children' : 0\n            };\n\n        let outputIsObject, iconCls, { value } = renderData;\n\n        if (me.originalRenderer) {\n            const\n                rendererHtml         = me.originalRenderer(renderData),\n                // Check if the cell content is going to be rendered by framework\n                hasFrameworkRenderer = grid.hasFrameworkRenderer?.({\n                    cellContent : rendererHtml,\n                    column\n                });\n\n            outputIsObject = typeof rendererHtml === 'object' && !hasFrameworkRenderer;\n\n            // Reset the value when framework is responsible for the cell content\n            value = hasFrameworkRenderer ? '' : (rendererHtml === false ? cellElement.innerHTML : rendererHtml);\n\n            // Save content to the `rendererHtml` to be used in processCellContent implemented by framework\n            renderData.rendererHtml = rendererHtml;\n        }\n\n        if (!outputIsObject) {\n            value = String(value ?? '');\n        }\n\n        if (isExport) {\n            return value;\n        }\n\n        if (!record.isLeaf) {\n            const\n                isCollapsed     = !record.isExpanded(grid.store),\n                expanderIconCls = isCollapsed ? me.expandIconCls : me.collapseIconCls,\n                folderIconCls   = isCollapsed ? me.collapsedFolderIconCls : me.expandedFolderIconCls;\n\n            rowClasses['b-tree-parent-row']  = 1;\n            rowClasses['b-tree-collapsed']   = isCollapsed;\n            rowClasses['b-tree-expanded']    = !isCollapsed;\n            rowClasses['b-loading-children'] = gridMeta.isLoadingChildren;\n\n            cellElement.classList.add('b-tree-parent-cell');\n\n            children.unshift({\n                tag       : 'i',\n                className : {\n                    'b-tree-expander' : 1,\n                    [expanderIconCls] : 1,\n                    'b-empty-parent'  : !gridMeta.isLoadingChildren && (record.children !== true && !record.children?.length)\n                }\n            });\n\n            // Allow user to customize tree icon or opt out entirely\n            currentParentHasIcon = iconCls = renderData.iconCls || record.iconCls || folderIconCls;\n        }\n        else {\n            // <remove-on-release>\n            // TODO: Cleanup for reusing dom nodes should be done elsewhere, also cleanup selection\n            // </remove-on-release>\n            cellElement.classList.add('b-tree-leaf-cell');\n\n            // Allow user to customize tree icon or opt out entirely\n            iconCls = renderData.iconCls || record.iconCls || me.leafIconCls;\n        }\n\n        if (iconCls) {\n            children.splice(children.length - 1, 0, {\n                tag       : 'i',\n                className : {\n                    'b-tree-icon' : 1,\n                    [iconCls]     : 1\n                }\n            });\n        }\n\n        // Row can be just a dummy object for example when the renderer is called from Column#resizeToFitContent.\n        // Add/remove the various tree node classes.\n        // Keep row's aria state up to date\n        if (row.isRow) {\n            row.assignCls(rowClasses);\n\n            if (!record.isLeaf) {\n                row.setAttribute('aria-expanded', !isCollapsed);\n\n                if (isCollapsed) {\n                    row.removeAttribute('aria-owns');\n                }\n                else {\n                    for (const region in grid.subGrids) {\n                        const el = row.elements[region];\n\n                        // A branch node may be configured expanded, but yet have no children.\n                        // They may be added dynamically.\n                        DomHelper.setAttributes(el, {\n                            'aria-owns' : record.children?.length ? record.children?.map(r => `${grid.id}-${region}-${r.id}`).join(' ') : null\n                        });\n                    }\n                }\n            }\n        }\n\n        // Array of DomConfigs\n        if (Array.isArray(value)) {\n            innerConfig.children = value;\n        }\n        // Single DomConfig\n        else if (outputIsObject) {\n            Object.assign(innerConfig, value);\n        }\n        // If we are encoding HTML, or there's no raw HTML, we can use the text property\n        // as the raw value, and DomSync will create a TextNode from that.\n        else if (me.shouldHtmlEncode || !value.includes('<')) {\n            result.className['b-text-value'] = 1;\n            innerConfig.text = value;\n        }\n        // If we are accepting HTML without encoding it, and there is HTML we must use html property\n        else {\n            innerConfig.html = value;\n        }\n\n        const padding = (record.childLevel * me.indentSize + (record.isLeaf ? (currentParentHasIcon ? 2.0 : (iconCls ? 0.5 : 0.4)) : 0));\n\n        result.style = `padding-inline-start:${padding}em`;\n\n        return result;\n    }\n\n    // This function is not meant to be called by any code other than Base#getCurrentConfig().\n    // It extracts the current configs (fields) for the column, with special handling for the renderer\n    getCurrentConfig(options) {\n        const result = super.getCurrentConfig(options);\n\n        // Use app renderer\n        result.renderer = this.originalRenderer;\n\n        return result;\n    }\n}\n\nColumnStore.registerColumnType(TreeColumn, true);\nTreeColumn.exposeProperties();\n", "import InstancePlugin from '../../Core/mixin/InstancePlugin.js';\nimport GridFeatureManager from '../feature/GridFeatureManager.js';\nimport Delayable from '../../Core/mixin/Delayable.js';\nimport '../column/TreeColumn.js';\n\n/**\n * @module Grid/feature/Tree\n */\n\nconst immediatePromise = Promise.resolve();\n\n/**\n * Feature that makes the grid work more like a tree. Included by default in {@link Grid.view.TreeGrid}. Requires\n * exactly one {@link Grid.column.TreeColumn} among grids columns. That column will have its renderer replaced with a\n * tree renderer that adds padding and icon to give the appearance of a tree. The original renderer is preserved and\n * also called.\n *\n * {@inlineexample Grid/feature/Tree.js}\n *\n * This feature is <strong>disabled</strong> by default. When enabled, the feature cannot be disabled during runtime.\n *\n * ## Keyboard shortcuts\n * This feature has the following default keyboard shortcuts:\n *\n * | Keys                 | Action                   | Action description                                                   |\n * |----------------------|--------------------------|----------------------------------------------------------------------|\n * | `Space`              | *toggleCollapseByKey*    | When focus on a parent node, this expands or collapses it's children |\n * | `ArrowRight`         | *expandIfSingleColumn*   | Expands a focused parent node if grid consist of one column only     |\n * | `Shift`+`ArrowRight` | *expandByKey*            | Expands a focused parent node                                        |\n * | `ArrowLeft`          | *collapseIfSingleColumn* | Collapses a focused parent node if grid consist of one column only   |\n * | `Shift`+`ArrowLeft`  | *collapseByKey*          | Collapses a focused parent node                                      |\n *\n * <div class=\"note\">Please note that <code>Ctrl</code> is the equivalent to <code>Command</code> and <code>Alt</code>\n * is the equivalent to <code>Option</code> for Mac users</div>\n *\n * For more information on how to customize keyboard shortcuts, please see\n * [our guide](#Grid/guides/customization/keymap.md)\n *\n * @extends Core/mixin/InstancePlugin\n *\n * @demo Grid/tree\n * @classtype tree\n * @feature\n */\nexport default class Tree extends InstancePlugin.mixin(Delayable) {\n    //region Config\n\n    static $name = 'Tree';\n\n    static configurable = {\n        /**\n         * Expand parent nodes when clicking on their cell\n         * @prp {Boolean}\n         * @default\n         */\n        expandOnCellClick : false,\n\n        /**\n         * See {@link #keyboard-shortcuts Keyboard shortcuts} for details\n         * @config {Object<String,String>}\n         */\n        keyMap : {\n            ' '                : 'toggleCollapseByKey',\n            ArrowRight         : 'expandIfSingleColumn',\n            'Shift+ArrowRight' : 'expandByKey',\n            ArrowLeft          : 'collapseIfSingleColumn',\n            'Shift+ArrowLeft'  : 'collapseByKey'\n        }\n    };\n\n    // Plugin configuration. This plugin chains some functions in Grid.\n    static get pluginConfig() {\n        return {\n            assign : ['collapseAll', 'expandAll', 'collapse', 'expand', 'expandTo', 'toggleCollapse'],\n            chain  : ['onElementPointerUp', 'onElementClick', 'bindStore']\n        };\n    }\n\n    //endregion\n\n    //region Init\n\n    construct(client, config) {\n        super.construct(client, config);\n\n        // find column\n        if (!this.treeColumn) {\n            console.info('To use the tree feature, one column should be configured with `type: \\'tree\\'`');\n        }\n\n        client.store && this.bindStore(client.store);\n    }\n\n    doDisable(disable) {\n        if (disable) {\n            throw new Error('Tree feature cannot be disabled');\n        }\n    }\n\n    get store() {\n        return this.client.store;\n    }\n\n    get treeColumn() {\n        const\n            me          = this,\n            { columns } = me.client;\n\n        if (!me._treeColumn || !columns.includes(me._treeColumn)) {\n            me._treeColumn = columns.find(column => column.isTreeColumn);\n        }\n\n        return me._treeColumn;\n    }\n\n    bindStore(store) {\n        this.detachListeners('store');\n\n        store.ion({\n            name                  : 'store',\n            beforeLoadChildren    : 'onBeforeLoadChildren',\n            loadChildren          : 'onLoadChildren',\n            loadChildrenException : 'onLoadChildrenException',\n            beforeToggleNode      : 'onBeforeToggleNode',\n            thisObj               : this\n        });\n    }\n\n    //endregion\n\n    //region Expand & collapse\n\n    /**\n     * Collapse an expanded node or expand a collapsed. Optionally forcing a certain state.\n     * This function is exposed on Grid and can thus be called as `grid.toggleCollapse()`\n     * @param {String|Number|Core.data.Model} idOrRecord Record (the node itself) or id of a node to toggle\n     * @param {Boolean} [collapse] Force collapse (true) or expand (false)\n     * @on-owner\n     */\n    async toggleCollapse(idOrRecord, collapse) {\n        if (idOrRecord == null) {\n            throw new Error('Tree#toggleCollapse must be passed a record');\n        }\n\n        const\n            me                = this,\n            { store, client } = me,\n            { rowManager }    = client,\n            record            = store.getById(idOrRecord),\n            meta              = record.instanceMeta(store);\n\n        if (await store.toggleCollapse(record, collapse)) {\n            const row = rowManager.getRowFor(record);\n\n            if (row && record.ancestorsExpanded()) {\n                const cellElement = me.treeColumn && !me.treeColumn.subGrid.collapsed && row.getCell(me.treeColumn.id);\n\n                // Toggle cell's expanded/collapsed state\n                cellElement && row.renderCell(cellElement);\n            }\n\n            // Add a temporary cls, used by Scheduler & Gantt to prevent transitions on events/tasks\n            // Block multiple applications in the case of a recursive collapseAll operation\n            if (!me.isTogglingNode) {\n                client.element.classList.add('b-toggling-node');\n                me.isTogglingNode = true;\n                me.requestAnimationFrame(() => {\n                    client.element.classList.remove('b-toggling-node');\n                    me.isTogglingNode = false;\n                });\n            }\n\n            /**\n             * Fired before a parent node record is collapsed.\n             * @event collapseNode\n             * @param {Grid.view.Grid} source The firing Grid instance.\n             * @param {Core.data.Model} record The record which has been collapsed.\n             * @on-owner\n             */\n\n            /**\n             * Fired after a parent node record is expanded.\n             * @event expandNode\n             * @param {Grid.view.Grid} source The firing Grid instance.\n             * @param {Core.data.Model} record The record which has been expanded.\n             * @on-owner\n             */\n\n            client.trigger(meta.collapsed ? 'collapseNode' : 'expandNode', { record });\n\n            /**\n             * Fired after a parent node record toggles its collapsed state.\n             * @event toggleNode\n             * @param {Core.data.Model} record The record being toggled.\n             * @param {Boolean} collapse `true` if the node is being collapsed.\n             * @on-owner\n             */\n\n            client.trigger('toggleNode', { record, collapse : meta.collapsed });\n        }\n    }\n\n    /**\n     * Collapse a single node.\n     * This function is exposed on Grid and can thus be called as `grid.collapse()`\n     * @param {String|Number|Core.data.Model} idOrRecord Record (the node itself) or id of a node to collapse\n     * @on-owner\n     */\n    async collapse(idOrRecord) {\n        return this.toggleCollapse(idOrRecord, true);\n    }\n\n    /**\n     * Expand a single node.\n     * This function is exposed on Grid and can thus be called as `grid.expand()`\n     * @param {String|Number|Core.data.Model} idOrRecord Record (the node itself) or id of a node to expand\n     * @on-owner\n     */\n    async expand(idOrRecord) {\n        return this.toggleCollapse(idOrRecord, false);\n    }\n\n    onBeforeToggleNode({ record, collapse }) {\n        /**\n         * Fired before a parent node record toggles its collapsed state.\n         * @event beforeToggleNode\n         * @param {Grid.view.Grid} source The firing Grid instance.\n         * @param {Core.data.Model} record The record being toggled.\n         * @param {Boolean} collapse `true` if the node is being collapsed.\n         * @on-owner\n         */\n        this.client.trigger('beforeToggleNode', { record, collapse });\n    }\n\n    onBeforeLoadChildren({ source : store, params }) {\n        const\n            parent = store.getById(params[store.modelClass.idField]),\n            row    = this.client.rowManager.getRowFor(parent);\n\n        row?.addCls('b-loading-children');\n    }\n\n    onLoadChildren({ source : store, params }) {\n        const\n            parent = store.getById(params[store.modelClass.idField]),\n            row    = this.client.rowManager.getRowFor(parent);\n\n        row?.removeCls('b-loading-children');\n    }\n\n    onLoadChildrenException({ record }) {\n        const row = this.client.rowManager.getRowFor(record);\n\n        row?.removeCls('b-loading-children');\n    }\n\n    /**\n     * Expand or collapse all nodes, as specified by param, starting at the passed node (which defaults to the root node)\n     * @param {Boolean} [collapse] Set to true to collapse, false to expand (defaults to true)\n     * @param {Core.data.Model} [topNode] The topmost node from which to cascade a collapse.\n     * Defaults to the {@link Core.data.Store#property-rootNode}. Not included in the cascade if\n     * the root node is being used.\n     */\n    async expandOrCollapseAll(collapse = true, topNode = this.store.rootNode) {\n        // <remove-on-release>\n        // TODO: Some logic here and some in the store, keep in same place maybe\n        // </remove-on-release>\n        const\n            { client, store } = this,\n            promises          = [],\n            childRecords      = [];\n\n        client.trigger('beforeToggleAllNodes', { collapse });\n\n        // Each collapse/expand will trigger events on store, avoid that by suspending\n        store.suspendEvents();\n        store.traverse(record => {\n            const gridMeta = record.instanceMeta(store);\n            if (!record.isLeaf) {\n                if (collapse && !gridMeta.collapsed) {\n                    this.toggleCollapse(record, true);\n                    childRecords.push(...record.children);\n                }\n                else if (!collapse && gridMeta.collapsed) {\n                    if (Array.isArray(record.children)) {\n                        childRecords.push(...record.children);\n                    }\n                    promises.push(this.toggleCollapse(record, false));\n                }\n            }\n        }, topNode, topNode === store.rootNode);\n        store.resumeEvents();\n\n        return (collapse ? immediatePromise : Promise.all(promises)).then(() => {\n            // Return to top when collapsing all\n            client.refreshRows(collapse);\n\n            if (childRecords.length) {\n                if (collapse) {\n                    store.trigger('remove', { records : childRecords, isCollapse : true, isCollapseAll : true });\n                }\n                else {\n                    store.trigger('add', { records : childRecords, isExpand : true, isExpandAll : true });\n                }\n            }\n\n            client.trigger('toggleAllNodes', { collapse });\n        });\n    }\n\n    /**\n     * Collapse all nodes.\n     * This function is exposed on Grid and can thus be called as `grid.collapseAll()`\n     * @on-owner\n     */\n    async collapseAll() {\n        return this.expandOrCollapseAll(true);\n    }\n\n    /**\n     * Expand all nodes.\n     * This function is exposed on Grid and can thus be called as `grid.expandAll()`\n     * @on-owner\n     */\n    async expandAll() {\n        return this.expandOrCollapseAll(false);\n    }\n\n    /**\n     * Expands parent nodes to make this node \"visible\".\n     * This function is exposed on Grid and can thus be called as `grid.expandTo()`\n     * @param {String|Number|Core.data.Model|String[]|Number[]|Core.data.Model[]} idOrRecord Record (the node itself),\n     * or id of a node. Also accepts arrays of the same types.\n     * @param {Boolean} [scrollIntoView=true] A flag letting you control whether to scroll the record into view\n     * @on-owner\n     * @async\n     */\n    async expandTo(idOrRecord, scrollIntoView = true) {\n        const\n            me                = this,\n            { store, client } = me;\n\n        if (Array.isArray(idOrRecord)) {\n            if (idOrRecord.length > 0) {\n                client.suspendRefresh();\n                for (let i = idOrRecord.length - 1; i >= 0; i--) {\n                    const record = store.getById(idOrRecord[i]);\n\n                    if (i === 0) {\n                        client.resumeRefresh?.();\n                        // Ensure all parents are rendered\n                        client.rowManager.refresh();\n                    }\n\n                    await me.expandTo?.(record, i === 0);\n                }\n            }\n\n            return;\n        }\n\n        const record = store.getById(idOrRecord);\n\n        // Hidden because it's in a collapsed Group: abort\n        if (record.instanceMeta(me.store).hiddenByCollapse === false) {\n            return;\n        }\n\n        // Expand any parents that need to be expanded to allow the record to be rendered.\n        if (!record.ancestorsExpanded()) {\n            const parents = [];\n\n            // Collect parents which need expanding\n            for (let parent = record.parent; parent && !parent.isRoot; parent = parent.parent) {\n                if (!parent.isExpanded(store)) {\n                    parents.unshift(parent);\n                }\n            }\n\n            client.suspendRefresh();\n\n            // Expand them from the top-down\n            for (const parent of parents) {\n                if (!me.isDestroyed) {\n                    await me.toggleCollapse(parent, false);\n                }\n            }\n\n            client.resumeRefresh?.();\n\n            // Refreshing on expand was inhibited in toggleCollapse calls\n            client.refreshRows?.();\n        }\n\n        if (!me.isDestroyed && scrollIntoView) {\n            await client.scrollRowIntoView(record);\n        }\n    }\n\n    //endregion\n\n    //region Events\n\n    /**\n     * Called when user clicks somewhere in the grid. Expand/collapse node on icon click.\n     * @private\n     */\n    onElementPointerUp(event) {\n        const\n            me              = this,\n            target          = event.target,\n            cellData        = me.client.getCellDataFromEvent(event),\n            clickedExpander = target.closest('.b-tree-expander');\n\n        // Checks if click is on node expander icon, then toggles expand/collapse. Also toggles on entire cell if expandOnCellClick is true\n        if (clickedExpander || (me.expandOnCellClick && cellData?.record.isParent)) {\n            me.toggleCollapse(cellData.record);\n        }\n    }\n\n    onElementClick(event) {\n        // Prevent default to avoid triggering navigation if the tree node is a link\n        if (event.target.closest('.b-tree-expander')) {\n            event.preventDefault();\n        }\n    }\n\n    /**\n     * Called on key down in grid. Expand/collapse node on [space]\n     * @private\n     */\n    toggleCollapseByKey() {\n        const { focusedCell } = this.client;\n\n        // Only catch space on grid cell element, not in header, editors etc...\n        if (focusedCell?.rowIndex > -1 && !focusedCell.isActionable) {\n            this.toggleCollapse(focusedCell.id);\n            return true;\n        }\n\n        return false;\n    }\n\n    //endregion\n\n    // Expands tree if single column.\n    // Called by default on ArrowRight\n    expandIfSingleColumn() {\n        if (this.client.columns.count === 1) {\n            return this.expandByKey();\n        }\n\n        // Tells keymap to continue with other actions\n        return false;\n    }\n\n    // Expands tree on Shift+ArrowRight by default.\n    expandByKey() {\n        const\n            me              = this,\n            { client }      = me,\n            { focusedCell } = client,\n            record          = focusedCell?.record;\n\n        // shift triggers tree navigation behaviour, also used by default for single column which is tree\n        if (record && focusedCell?.column.tree && record.isParent && record.instanceMeta(client.store).collapsed) {\n            me.expand(record);\n            return true;\n        }\n\n        // Tells keymap to continue with other actions\n        return false;\n    }\n\n    collapseIfSingleColumn() {\n        if (this.client.columns.count === 1) {\n            return this.collapseByKey();\n        }\n\n        // Tells keymap to continue with other actions\n        return false;\n    }\n\n    collapseByKey() {\n        const\n            me              = this,\n            { client }      = me,\n            { focusedCell } = client,\n            record          = focusedCell?.record;\n\n        // shift triggers tree navigation behaviour, also used by default for single column which is tree\n        if (focusedCell?.column.tree && record) {\n            // on expanded parent, collapse\n            if (record.isParent && !record.instanceMeta(client.store).collapsed) {\n                me.collapse(record);\n                return true;\n            }\n            // otherwise go to parent\n            if (record.parent && !record.parent.isRoot) {\n                // Deselect everything before doing this.\n                // Causes strange selection ranges otherwise\n                client.deselectAll();\n                client.focusCell({\n                    record : record.parent,\n                    column : focusedCell.column\n                });\n                return true;\n            }\n        }\n\n        // Tells keymap to continue with other actions\n        return false;\n    }\n}\n\nTree.featureClass = 'b-tree';\n\nGridFeatureManager.registerFeature(Tree, false, 'Grid');\nGridFeatureManager.registerFeature(Tree, true, 'TreeGrid');\n"],
  "mappings": "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",
  "names": ["currentParentHasIcon", "TreeColumn", "Column", "defaults", "tree", "hideable", "minWidth", "fields", "name", "defaultValue", "constructor", "config", "store", "arguments", "me", "shouldHtmlEncode", "htmlEncode", "setData", "renderer", "originalRenderer", "treeRenderer", "bind", "renderData", "grid", "column", "cellElement", "row", "record", "isExport", "gridMeta", "instanceMeta", "isCollapsed", "isLeaf", "collapsed", "innerConfig", "className", "children", "result", "tag", "href", "target", "rowClasses", "outputIsObject", "iconCls", "value", "_grid$hasFrameworkRen", "rendererHtml", "hasFrameworkRenderer", "call", "cellContent", "innerHTML", "String", "classList", "add", "leafIconCls", "_record$children", "isExpanded", "expanderIconCls", "expandIconCls", "collapseIconCls", "folderIconCls", "collapsedFolderIconCls", "expandedFolderIconCls", "isLoadingChildren", "unshift", "length", "splice", "isRow", "assignCls", "setAttribute", "removeAttribute", "region", "subGrids", "_record$children2", "_record$children3", "el", "elements", "DomHelper", "setAttributes", "map", "r", "id", "join", "Array", "isArray", "Object", "assign", "includes", "text", "html", "padding", "childLevel", "indentSize", "style", "getCurrentConfig", "options", "__publicField", "$name", "type", "ColumnStore", "registerColumnType", "exposeProperties", "_$name", "immediatePromise", "Promise", "resolve", "Tree", "InstancePlugin", "mixin", "Delayable", "pluginConfig", "chain", "construct", "client", "treeColumn", "console", "info", "bindStore", "doDisable", "disable", "Error", "columns", "_treeColumn", "find", "isTreeColumn", "detachListeners", "ion", "beforeLoadChildren", "loadChildren", "loadChildrenException", "beforeToggleNode", "thisObj", "toggleCollapse", "idOrRecord", "collapse", "rowManager", "getById", "meta", "getRowFor", "ancestorsExpanded", "subGrid", "getCell", "renderCell", "isTogglingNode", "element", "requestAnimationFrame", "remove", "trigger", "expand", "onBeforeToggleNode", "onBeforeLoadChildren", "source", "params", "parent", "modelClass", "idField", "addCls", "onLoadChildren", "removeCls", "onLoadChildrenException", "expandOrCollapseAll", "topNode", "rootNode", "promises", "childRecords", "suspendEvents", "traverse", "push", "resumeEvents", "all", "then", "refreshRows", "records", "isCollapse", "isCollapseAll", "isExpand", "isExpandAll", "collapseAll", "expandAll", "expandTo", "scrollIntoView", "suspendRefresh", "i", "_me$expandTo", "_client$resumeRefresh", "resumeRefresh", "refresh", "hiddenByCollapse", "_client$resumeRefresh2", "_client$refreshRows", "parents", "isRoot", "isDestroyed", "scrollRowIntoView", "onElementPointerUp", "event", "cellData", "getCellDataFromEvent", "closest", "expandOnCellClick", "isParent", "onElementClick", "preventDefault", "toggleCollapseByKey", "focusedCell", "rowIndex", "isActionable", "expandIfSingleColumn", "count", "expandByKey", "collapseIfSingleColumn", "collapseByKey", "deselectAll", "focusCell", "configurable", "keyMap", "ArrowRight", "ArrowLeft", "featureClass", "GridFeatureManager", "registerFeature"]
}
