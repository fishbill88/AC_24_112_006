{
  "version": 3,
  "sources": ["../../../../Core/lib/Core/widget/base/UndoRedoBase.js"],
  "sourcesContent": ["import Container from '../Container.js';\nimport '../Combo.js';\n\n/**\n * @module Core/widget/base/UndoRedoBase\n */\n\n/**\n * Abstract base class used by UndoRedo widgets in Scheduler and TaskBoard.\n *\n * @extends Core/widget/Container\n * @abstract\n */\nexport default class UndoRedoBase extends Container {\n    static get $name() {\n        return 'UndoRedoBase';\n    }\n\n    static get type() {\n        return 'undoredobase';\n    }\n\n    static get configurable() {\n        return {\n            // Documented on subclasses\n            project : null,\n\n            stm : null,\n\n            /**\n             * Configure as `true` to show \"Undo\" and \"Redo\" as button texts. The buttons always have a tooltip\n             * as a hint to the user as to their purpose.\n             * @config {Boolean}\n             */\n            text : null,\n\n            /**\n             * Button color for the undo and redo buttons. See {@link Core.widget.Button#config-color}.\n             * @config {String}\n             */\n            color : null,\n\n            /**\n             * Configure as `true` to show \"0\" badge on the undo and redo buttons when they have no actions\n             * left to perform. By default when there are no actions, no badge is displayed.\n             * @config {Boolean}\n             */\n            showZeroActionBadge : null,\n\n            cls : 'b-undo-controls b-toolbar',\n\n            layoutStyle : {\n                alignItems : 'stretch',\n                flexFlow   : 'row nowrap',\n                overflow   : 'visible'\n            },\n\n            items : {\n                undoBtn : {\n                    type     : 'button',\n                    icon     : 'b-icon-undo',\n                    tooltip  : 'L{UndoRedo.UndoLastAction}',\n                    onAction : 'up.onUndo'     // 'up.' means method is on a parent Widget.\n                },\n                transactionsCombo : {\n                    type                 : 'combo',\n                    valueField           : 'idx',\n                    editable             : false,\n                    store                : {},\n                    emptyText            : 'L{UndoRedo.NoActions}',\n                    onAction             : 'up.onTransactionSelected',\n                    displayValueRenderer : 'up.transactionsDisplayValueRenderer'\n                },\n                redoBtn : {\n                    type     : 'button',\n                    icon     : 'b-icon-redo',\n                    tooltip  : 'L{UndoRedo.RedoLastAction}',\n                    onAction : 'up.onRedo'\n                }\n            }\n        };\n    }\n\n    afterConstruct() {\n        this.updateUndoRedoControls();\n    }\n\n    updateStm(stm) {\n        this.detachListeners('undoredo');\n\n        stm?.ion({\n            name          : 'undoredo',\n            recordingstop : 'updateUndoRedoControls',\n            restoringstop : 'updateUndoRedoControls',\n            queueReset    : 'updateUndoRedoControls',\n            disabled      : 'updateUndoRedoControls',\n            thisObj       : this\n        });\n    }\n\n    changeItems(items) {\n        const { undoBtn, redoBtn } = items;\n\n        if (this.color) {\n            undoBtn && (undoBtn.color = this.color);\n            redoBtn && (redoBtn.color = this.color);\n        }\n        if (this.text) {\n            undoBtn && (undoBtn.text = 'L{UndoRedo.Undo}');\n            redoBtn && (redoBtn.text = 'L{UndoRedo.Redo}');\n        }\n\n        return super.changeItems(items);\n    }\n\n    updateProject(project) {\n        this.stm = project.stm;\n    }\n\n    fillUndoRedoCombo() {\n        const { transactionsCombo } = this.widgetMap;\n        // The transactionsCombo may be configured away if only undo and redo buttons are wanted\n        transactionsCombo && (transactionsCombo.items = this.stm.queue.map((title, idx) => [idx, title || `Transaction ${idx}`]));\n    }\n\n    updateUndoRedoControls() {\n        const\n            {\n                stm,\n                showZeroActionBadge\n            } = this,\n            {\n                undoBtn,\n                redoBtn\n            } = this.widgetMap;\n\n        undoBtn.badge = stm.position || (showZeroActionBadge ? '0' : '');\n        redoBtn.badge = (stm.length - stm.position) || (showZeroActionBadge ? '0' : '');\n\n        undoBtn.disabled = !stm.canUndo;\n        redoBtn.disabled = !stm.canRedo;\n\n        this.fillUndoRedoCombo();\n    }\n\n    transactionsDisplayValueRenderer(record, combo) {\n        const stmPos = this.stm?.position || 0;\n\n        return `${stmPos} undo actions / ${combo.store.count - stmPos} redo actions`;\n    }\n\n    onUndo() {\n        this.stm.canUndo && this.stm.undo();\n    }\n\n    onRedo() {\n        this.stm.canRedo && this.stm.redo();\n    }\n\n    onTransactionSelected(combo) {\n        const\n            stm   = this.stm,\n            value = combo.value;\n\n        if (value >= 0) {\n            if (stm.canUndo && value < stm.position) {\n                stm.undo(stm.position - value);\n            }\n            else if (stm.canRedo && value >= stm.position) {\n                stm.redo(value - stm.position + 1);\n            }\n        }\n    }\n}\n\nUndoRedoBase.initClass();\n"],
  "mappings": "wCAWe,MAAMA,UAAqBC,CAAU,CAChD,WAAWC,OAAQ,CACf,MAAO,cACX,CACA,WAAWC,MAAO,CACd,MAAO,cACX,CACA,WAAWC,cAAe,CACtB,MAAO,CAEHC,QAAU,KACVC,IAAM,KAMNC,KAAO,KAKPC,MAAQ,KAMRC,oBAAsB,KACtBC,IAAM,4BACNC,YAAc,CACVC,WAAa,UACbC,SAAa,aACbC,SAAa,WAEjBC,MAAQ,CACJC,QAAU,CACNb,KAAW,SACXc,KAAW,cACXC,QAAW,6BACXC,SAAW,aAEfC,kBAAoB,CAChBjB,KAAuB,QACvBkB,WAAuB,MACvBC,SAAuB,GACvBC,MAAuB,CAAA,EACvBC,UAAuB,wBACvBL,SAAuB,2BACvBM,qBAAuB,uCAE3BC,QAAU,CACNvB,KAAW,SACXc,KAAW,cACXC,QAAW,6BACXC,SAAW,WACf,CACJ,EAER,CACAQ,gBAAiB,CACb,KAAKC,uBAAsB,CAC/B,CACAC,UAAUvB,EAAK,CACX,KAAKwB,gBAAgB,UAAU,EAC/BxB,GAAG,MAAHA,EAAKyB,IAAI,CACLC,KAAgB,WAChBC,cAAgB,yBAChBC,cAAgB,yBAChBC,WAAgB,yBAChBC,SAAgB,yBAChBC,QAAgB,IACpB,CAAC,CACL,CACAC,YAAYvB,EAAO,CACf,KAAM,CAAEC,QAAAA,EAASU,QAAAA,CAAQ,EAAIX,EAC7B,OAAI,KAAKP,QACLQ,IAAYA,EAAQR,MAAQ,KAAKA,OACjCkB,IAAYA,EAAQlB,MAAQ,KAAKA,QAEjC,KAAKD,OACLS,IAAYA,EAAQT,KAAO,oBAC3BmB,IAAYA,EAAQnB,KAAO,qBAExB,MAAM+B,YAAYvB,CAAK,CAClC,CACAwB,cAAclC,EAAS,CACnB,KAAKC,IAAMD,EAAQC,GACvB,CACAkC,mBAAoB,CAChB,KAAM,CAAEpB,kBAAAA,GAAsB,KAAKqB,UAEnCrB,IAAsBA,EAAkBL,MAAQ,KAAKT,IAAIoC,MAAMC,IAAI,CAACC,EAAOC,IAAQ,CAACA,EAAKD,GAAU,eAAcC,GAAK,CAAC,EAC3H,CACAjB,wBAAyB,CACrB,KACI,CACItB,IAAAA,EACAG,oBAAAA,CACJ,EAAI,KACJ,CACIO,QAAAA,EACAU,QAAAA,GACA,KAAKe,UACbzB,EAAQ8B,MAAQxC,EAAIyC,WAAatC,EAAsB,IAAM,IAC7DiB,EAAQoB,MAASxC,EAAI0C,OAAS1C,EAAIyC,WAActC,EAAsB,IAAM,IAC5EO,EAAQoB,SAAW,CAAC9B,EAAI2C,QACxBvB,EAAQU,SAAW,CAAC9B,EAAI4C,QACxB,KAAKV,kBAAiB,CAC1B,CACAW,iCAAiCC,EAAQC,EAAO,CAAA,IAAAC,EAC5C,MAAMC,IAASD,EAAA,KAAKhD,OAAGgD,MAAAA,IAARA,OAAAA,OAAAA,EAAUP,WAAY,EACrC,MAAQ,GAAEQ,oBAAyBF,EAAM9B,MAAMiC,MAAQD,gBAC3D,CACAE,QAAS,CACL,KAAKnD,IAAI2C,SAAW,KAAK3C,IAAIoD,KAAI,CACrC,CACAC,QAAS,CACL,KAAKrD,IAAI4C,SAAW,KAAK5C,IAAIsD,KAAI,CACrC,CACAC,sBAAsBR,EAAO,CACzB,MACI/C,EAAQ,KAAKA,IACbwD,EAAQT,EAAMS,MACdA,GAAS,IACLxD,EAAI2C,SAAWa,EAAQxD,EAAIyC,SAC3BzC,EAAIoD,KAAKpD,EAAIyC,SAAWe,CAAK,EAExBxD,EAAI4C,SAAWY,GAASxD,EAAIyC,UACjCzC,EAAIsD,KAAKE,EAAQxD,EAAIyC,SAAW,CAAC,EAG7C,CACJ,CACA/C,EAAa+D,UAAS,EACtB/D,EAAagE,OAAS",
  "names": ["UndoRedoBase", "Container", "$name", "type", "configurable", "project", "stm", "text", "color", "showZeroActionBadge", "cls", "layoutStyle", "alignItems", "flexFlow", "overflow", "items", "undoBtn", "icon", "tooltip", "onAction", "transactionsCombo", "valueField", "editable", "store", "emptyText", "displayValueRenderer", "redoBtn", "afterConstruct", "updateUndoRedoControls", "updateStm", "detachListeners", "ion", "name", "recordingstop", "restoringstop", "queueReset", "disabled", "thisObj", "changeItems", "updateProject", "fillUndoRedoCombo", "widgetMap", "queue", "map", "title", "idx", "badge", "position", "length", "canUndo", "canRedo", "transactionsDisplayValueRenderer", "record", "combo", "_this$stm", "stmPos", "count", "onUndo", "undo", "onRedo", "redo", "onTransactionSelected", "value", "initClass", "_$name"]
}
