{
  "version": 3,
  "sources": ["../../../../Core/lib/Core/helper/mixin/DragHelperContainer.js", "../../../../Core/lib/Core/helper/mixin/DragHelperTranslate.js", "../../../../Core/lib/Core/helper/DragHelper.js", "../../../../Core/lib/Core/helper/ResizeHelper.js", "../../../../Core/lib/Core/helper/WidgetHelper.js", "../../../../Core/lib/Core/helper/util/Formatter.js", "../../../../Core/lib/Core/helper/util/NumberFormat.js", "../../../../Core/lib/Core/util/Month.js", "../../../../Core/lib/Core/widget/CalendarPanel.js", "../../../../Core/lib/Core/widget/Checkbox.js", "../../../../Core/lib/Core/widget/YearPicker.js", "../../../../Core/lib/Core/widget/DisplayField.js", "../../../../Core/lib/Core/widget/DatePicker.js", "../../../../Core/lib/Core/widget/DateField.js", "../../../../Core/lib/Core/widget/NumberField.js", "../../../../Core/lib/Core/widget/TimePicker.js", "../../../../Core/lib/Core/widget/TimeField.js", "../../../../Core/lib/Core/widget/DurationField.js", "../../../../Core/lib/Core/widget/FieldFilterPicker.js", "../../../../Core/lib/Core/widget/Label.js", "../../../../Core/lib/Core/widget/FieldFilterPickerGroup.js", "../../../../Core/lib/Core/widget/MessageDialog.js"],
  "sourcesContent": ["import Base from '../../Base.js';\nimport GlobalEvents from '../../GlobalEvents.js';\nimport DomHelper from '../../helper/DomHelper.js';\nimport Rectangle from '../../helper/util/Rectangle.js';\n\n// <remove-on-release>\n// TODO: Use mousedown pos and not center too reposition\n// </remove-on-release>\n\n/**\n * @module Core/helper/mixin/DragHelperContainer\n */\n\n/**\n * Mixin for DragHelper that handles dragging elements between containers (or rearranging within)\n *\n * @mixin\n * @private\n */\nexport default Target => class DragHelperContainer extends (Target || Base) {\n    static get $name() {\n        return 'DragHelperContainer';\n    }\n\n    //region Init\n\n    /**\n     * Initialize container drag mode.\n     * @private\n     */\n    initContainerDrag() {\n        const me = this;\n        //use container drag as default mode\n        if (!me.mode) {\n            me.mode = 'container';\n        }\n        if (me.mode === 'container' && !me.containers) {\n            throw new Error('Container drag mode must specify containers');\n        }\n    }\n\n    //endregion\n\n    //region Grab, update, finish\n\n    /**\n     * Grab an element which can be dragged between containers.\n     * @private\n     * @param event\n     * @returns {Boolean}\n     */\n    grabContainerDrag(event) {\n        const me = this;\n\n        // allow specified selectors to prevent drag\n        if (!me.ignoreSelector || !event.target.closest(me.ignoreSelector)) {\n            // go up from \"handle\" to draggable element\n            const element = DomHelper.getAncestor(event.target, me.containers, me.outerElement);\n\n            if (element) {\n                const box = element.getBoundingClientRect();\n\n                me.context = {\n                    element,\n                    valid            : true,\n                    action           : 'container',\n                    offsetX          : event.pageX - box.left,\n                    offsetY          : event.pageY - box.top,\n                    originalPosition : {\n                        parent : element.parentElement,\n                        prev   : element.previousElementSibling,\n                        next   : element.nextElementSibling\n                    }\n                };\n            }\n\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Starts dragging, called when mouse moves first time after grabbing\n     * @private\n     * @param event\n     */\n    startContainerDrag(event) {\n        const\n            me                          = this,\n            { context, floatRootOwner } = me,\n            { element : dragElement }   = context,\n            clonedNode                  = dragElement.cloneNode(true),\n            box                         = dragElement.getBoundingClientRect(),\n            outerWidgetEl               = floatRootOwner?.element.closest('.b-outer');\n\n        // init drag proxy\n        clonedNode.classList.add(me.dragProxyCls);\n        clonedNode.classList.add(me.draggingCls);\n\n        // Append drag proxy to float root, fall back to root context node\n        (floatRootOwner?.floatRoot || DomHelper.getRootElement(dragElement)).appendChild(clonedNode);\n        context.dragProxy = clonedNode;\n\n        // Always set the proxy element width manually, drag target could be sized with flex or % width\n        clonedNode.style.width  = box.width + 'px';\n        clonedNode.style.height = box.height + 'px';\n        DomHelper.setTranslateXY(context.dragProxy, box.left, box.top);\n\n        // style dragged element\n        context.dragging = dragElement;\n        dragElement.classList.add(me.dropPlaceholderCls);\n\n        // If element being dragged is also a child of the float root, add +1 to the cloned node z-index\n        if (outerWidgetEl?.parentElement?.matches('.b-float-root')) {\n            clonedNode.style.zIndex = floatRootOwner.floatRootMaxZIndex + 1;\n        }\n    }\n\n    /**\n     * Move the placeholder element into its new position on valid drag.\n     * @private\n     * @param event\n     */\n    updateContainerDrag(event) {\n        const\n            me          = this,\n            { context } = me;\n\n        if (!context.started || !context.targetElement) {\n            return;\n        }\n\n        const\n            containerElement = DomHelper.getAncestor(context.targetElement, me.containers, 'b-gridbase'),\n            willLoseFocus    = context.dragging?.contains(DomHelper.getActiveElement(context.dragging));\n\n        if (containerElement && DomHelper.isDescendant(context.element, containerElement)) {\n            // dragging over part of self, do nothing\n            return;\n        }\n\n        // The dragging element contains focus, and moving it within the DOM\n        // will cause focus loss which might affect an encapsulating autoClose Popup.\n        // Prevent focus loss handling during the DOM move.\n        if (willLoseFocus) {\n            GlobalEvents.suspendFocusEvents();\n        }\n        if (containerElement && context.valid) {\n            me.moveNextTo(containerElement, event);\n        }\n        else {\n            // dragged outside of containers, revert position\n            me.revertPosition();\n        }\n        if (willLoseFocus) {\n            GlobalEvents.resumeFocusEvents();\n        }\n\n        event.preventDefault();\n    }\n\n    /**\n     * Finalize drag, fire drop.\n     * @private\n     * @param event\n     * @fires drop\n     */\n    finishContainerDrag(event) {\n        const\n            me          = this,\n            { context } = me,\n            // extracting variables to make code more readable\n            { dragging, dragProxy, valid, draggedTo, insertBefore, originalPosition } = context;\n\n        if (dragging) {\n            // needs to have a valid target\n            context.valid = valid && draggedTo &&\n                    // no drop on self or parent\n                    (dragging !== insertBefore || originalPosition.parent !== draggedTo);\n\n            context.finalize = (valid = context.valid) => {\n                // revert if invalid (and context still exists, might have been aborted from outside)\n                if (!valid && me.context) {\n                    me.revertPosition();\n                }\n\n                dragging.classList.remove(me.dropPlaceholderCls);\n                dragProxy.remove();\n\n                me.reset();\n            };\n\n            // allow async finalization by setting async to true on context in drop handler,\n            // requires implementer to call context.finalize later to finish the drop\n            context.async = false;\n\n            me.trigger('drop', { context, event });\n\n            if (!context.async) {\n                // finalize immediately\n                context.finalize();\n            }\n        }\n    }\n\n    /**\n     * Aborts a drag operation.\n     * @private\n     * @param {Boolean} [invalid]\n     * @param {Object} [event]\n     * @param {Boolean} [silent]\n     */\n    abortContainerDrag(invalid = false, event = null, silent = false) {\n        const\n            me          = this,\n            { context } = me;\n\n        if (context.dragging) {\n            context.dragging.classList.remove(me.dropPlaceholderCls);\n            context.dragProxy.remove();\n\n            me.revertPosition();\n        }\n\n        if (!silent) {\n            me.trigger(invalid ? 'drop' : 'abort', { context, event });\n        }\n\n        me.reset();\n    }\n\n    //endregion\n\n    //region Helpers\n\n    /**\n     * Updates the drag proxy position.\n     * @private\n     * @param event\n     */\n    updateContainerProxy(event) {\n        const\n            me          = this,\n            { context } = me,\n            proxy       = context.dragProxy;\n\n        let newX = event.pageX - context.offsetX,\n            newY = event.pageY - context.offsetY;\n\n        if (typeof me.minX === 'number') {\n            newX = Math.max(me.minX, newX);\n        }\n\n        if (typeof me.maxX === 'number') {\n            newX = Math.min(me.maxX - proxy.offsetWidth, newX);\n        }\n\n        if (typeof me.minY === 'number') {\n            newY = Math.max(me.minY, newY);\n        }\n\n        if (typeof me.maxY === 'number') {\n            newY = Math.min(me.maxY  - proxy.offsetHeight, newY);\n        }\n\n        if (me.lockX) {\n            DomHelper.setTranslateY(proxy, newY);\n        }\n        else if (me.lockY) {\n            DomHelper.setTranslateX(proxy, newX);\n        }\n        else {\n            DomHelper.setTranslateXY(proxy, newX, newY);\n        }\n\n        let targetElement;\n\n        if (event.type === 'touchmove') {\n            const touch = event.changedTouches[0];\n            targetElement = DomHelper.elementFromPoint(touch.clientX, touch.clientY);\n        }\n        else {\n            targetElement = event.target;\n        }\n\n        context.targetElement = targetElement;\n    }\n\n    /**\n     * Positions element being dragged in relation to targetElement.\n     * @private\n     * @param targetElement\n     * @param event\n     */\n    moveNextTo(targetElement, event) {\n        const\n            { context } = this,\n            dragElement = context.dragging,\n            parent      = targetElement.parentElement;\n\n        if (targetElement !== dragElement) {\n            // dragged over a container and not over self, calculate where to insert\n\n            const centerX = Rectangle.from(targetElement).center.x;\n\n            if ((this.isRTL && event.pageX > centerX) || (!this.isRTL && event.pageX < centerX)) {\n                // dragged left of target center, insert before\n                parent.insertBefore(dragElement, targetElement);\n                context.insertBefore = targetElement;\n            }\n            else {\n                // dragged right of target center, insert after\n                if (targetElement.nextElementSibling) {\n                    // check that not dragged to the immediate left of self. in such case, position should not change\n                    if (targetElement.nextElementSibling !== dragElement) {\n                        context.insertBefore = targetElement.nextElementSibling;\n                        parent.insertBefore(dragElement, targetElement.nextElementSibling);\n                    }\n                    else if (!context.insertBefore && dragElement.parentElement.lastElementChild !== dragElement) {\n                        // <remove-on-release>\n                        // TODO: or flag as invalid drag? since no change...\n                        // </remove-on-release>\n                        // dragged left initially, should stay in place (checked in finishContainerDrag)\n                        context.insertBefore = targetElement.nextElementSibling;\n                    }\n                }\n                else {\n                    parent.appendChild(dragElement);\n                    context.insertBefore = null;\n                }\n            }\n\n            context.draggedTo = parent;\n        }\n    }\n\n    /**\n     * Moves element being dragged back to its original position.\n     * @private\n     */\n    revertPosition() {\n        const\n            { context }      = this,\n            { dragging }     = context,\n            { parent, next } = context.originalPosition;\n\n        // revert to correct location\n        if (next) {\n            const isNoop = next.previousSibling === dragging || (!next && dragging === parent.lastChild);\n\n            if (!isNoop) {\n                parent.insertBefore(dragging, next);\n            }\n        }\n        else {\n            parent.appendChild(dragging);\n        }\n\n        // no target container\n        context.draggedTo = null;\n    }\n\n    //endregion\n};\n", "import Base from '../../Base.js';\nimport DomHelper from '../DomHelper.js';\nimport EventHelper from '../EventHelper.js';\nimport Delayable from '../../mixin/Delayable.js';\nimport Rectangle from '../util/Rectangle.js';\n\n/**\n * @module Core/helper/mixin/DragHelperTranslate\n */\n\nconst noScroll = { pageXOffset : 0, pageYOffset : 0 };\n\n/**\n * Mixin for DragHelper that handles repositioning (translating) an element within its container\n *\n * @mixin\n * @private\n */\nexport default Target => class DragHelperTranslate extends Delayable(Target || Base) {\n    static get $name() {\n        return 'DragHelperTranslate';\n    }\n\n    static get configurable() {\n        return {\n            positioning : null,\n\n            // Private config that disables updating elements position, for when data is live updated during drag,\n            // leading to element being redrawn\n            skipUpdatingElement : null\n        };\n    }\n\n    //region Init\n\n    /**\n     * Initialize translation drag mode.\n     * @private\n     */\n    initTranslateDrag() {\n        const me = this;\n\n        if (!me.isElementDraggable && me.targetSelector) {\n            me.isElementDraggable = element => element.closest(me.targetSelector);\n        }\n    }\n\n    //endregion\n\n    //region Grab, update, finish\n\n    /**\n     * Grab an element which can be moved using translation.\n     * @private\n     * @param event\n     * @returns {Boolean}\n     */\n    grabTranslateDrag(event) {\n        const element = this.getTarget(event);\n\n        if (element) {\n            this.context = {\n                valid : true,\n                element,\n\n                startPageX   : event.pageX,\n                startPageY   : event.pageY,\n                startClientX : event.clientX,\n                startClientY : event.clientY\n            };\n\n            return true;\n        }\n\n        return false;\n    }\n\n    getTarget(event) {\n        return event.target.closest(this.targetSelector);\n    }\n\n    getX(element) {\n        if (this.positioning === 'absolute') {\n            // Read left style rather than offsetLeft as it is impacted by margin-left style (Gantt milestones)\n            return parseFloat(element.style.left, 10);\n        }\n        else {\n            return DomHelper.getTranslateX(element);\n        }\n    }\n\n    getY(element) {\n        if (this.positioning === 'absolute') {\n            return parseFloat(element.style.top, 10);\n        }\n        else {\n            return DomHelper.getTranslateY(element);\n        }\n    }\n\n    getXY(element) {\n        if (this.positioning === 'absolute') {\n            return [element.offsetLeft, element.offsetTop];\n        }\n        else {\n            return DomHelper.getTranslateXY(element);\n        }\n    }\n\n    setXY(element, x, y) {\n        if (this.skipUpdatingElement) {\n            return;\n        }\n\n        if (this.positioning === 'absolute') {\n            element.style.left = x + 'px';\n            element.style.top  = y + 'px';\n        }\n        else {\n            DomHelper.setTranslateXY(element, x, y);\n        }\n    }\n\n    /**\n     * Start translating, called on first mouse move after dragging\n     * @private\n     * @param event\n     */\n    startTranslateDrag(event) {\n        const\n            me                                       = this,\n            { context, outerElement, proxySelector } = me,\n            // When cloning an element to be dragged, we place it in BODY by default\n            dragWithin                               = me.dragWithin = me.dragWithin || (me.cloneTarget && document.body);\n\n        let element = context.dragProxy || context.element;\n\n        const\n            grabbed       = element,\n            grabbedParent = element.parentElement;\n\n        if (me.cloneTarget) {\n            const\n                elementToClone                            = proxySelector ? element.querySelector(proxySelector) : element,\n                { width, height, x : proxyX, y : proxyY } = Rectangle.from(elementToClone, dragWithin);\n\n            element = me.createProxy(element);\n\n            let x = proxyX, y = proxyY;\n\n            // Match the grabbed element's size and position.\n            if (me.autoSizeClonedTarget) {\n                element.style.width  = `${width}px`;\n                element.style.height = `${height}px`;\n            }\n\n            element.classList.add(me.dragProxyCls, me.draggingCls);\n            // Remove some irrelevant CSS classes\n            element.classList.remove('b-hover', 'b-selected', 'b-focused');\n\n            dragWithin.appendChild(element);\n\n            if (!me.autoSizeClonedTarget || proxySelector) {\n                const\n                    // Center proxy at cursor position, we assume app is applying styles to the element (inline or CSS)\n                    proxyRect                            = element.getBoundingClientRect(),\n                    { x : dragWithinX, y : dragWithinY } = dragWithin.getBoundingClientRect(),\n                    localX                               = event.clientX - dragWithinX,\n                    // Body may have a non-zero top\n                    localY                               = event.clientY - dragWithinY + (dragWithin !== document.body ? document.body.getBoundingClientRect().y : 0);\n\n                x = localX - (proxyRect.width / 2);\n                y = localY - (proxyRect.height / 2);\n\n                // When proxy is centered, update to not use original mousedown coordinates, but the first mouse move triggering the drag\n                context.startPageX = event.pageX;\n                context.startPageY = event.pageY;\n            }\n\n            me.setXY(element, x, y);\n\n            grabbed.classList.add('b-drag-original');\n\n            if (me.hideOriginalElement) {\n                grabbed.classList.add('b-hidden');\n            }\n        }\n\n        element.classList.add(me.draggingCls);\n\n        Object.assign(context, {\n            // The element which we're moving, could be a cloned version of grabbed, or the grabbed element itself\n            element,\n\n            // The original element upon which the mousedown event triggered a drag operation\n            grabbed,\n\n            // The parent of the original element where the pointerdown was detected - to be able to restore after an invalid drop\n            grabbedParent,\n\n            // The next sibling of the original element where the pointerdown was detected - to be able to restore after an invalid drop\n            grabbedNextSibling : element.nextElementSibling,\n\n            // elements position within parent element\n            elementStartX : me.getX(element),\n            elementStartY : me.getY(element),\n            elementX      : DomHelper.getOffsetX(element, dragWithin || outerElement),\n            elementY      : DomHelper.getOffsetY(element, dragWithin || outerElement),\n\n            scrollX : 0,\n            scrollY : 0,\n\n            scrollManagerElementContainsDragProxy : !me.cloneTarget || dragWithin === outerElement\n        });\n\n        if (dragWithin) {\n            context.parentElement = element.parentElement;\n\n            if (dragWithin !== element.parentElement) {\n                dragWithin.appendChild(element);\n            }\n            me.updateTranslateProxy(event);\n        }\n    }\n\n    // When drag has started, create proxy versions (if applicable) and store original positions of all related elements\n    // to be able to animate back to these positions in case of an aborted drag\n    onDragStarted() {\n        const\n            me          = this,\n            { context } = me;\n\n        let { relatedElements } = context;\n\n        // For unified proxy mode - add a CSS class to the 'main' dragging element to be able to have it be on top of related elements with z-index\n        if (me.unifiedProxy) {\n            context.element.classList.add('b-drag-main', 'b-drag-unified-proxy');\n        }\n\n        if (relatedElements?.length > 0) {\n            context.relatedElStartPos    = [];\n            context.relatedElDragFromPos = [];\n\n            const { proxySelector } = me;\n\n            let [elementStartX, elementStartY] = [context.elementStartX, context.elementStartY];\n\n            // Store reference to original elements (may need cleanup to remove CSS classes after drop)\n            context.originalRelatedElements = relatedElements;\n            // Create clone proxy elements of all related elements\n            relatedElements                 = context.relatedElements = relatedElements.map((relatedEl, i) => {\n                const\n                    proxyTemplateElement    = proxySelector ? relatedEl.querySelector(proxySelector) : relatedEl,\n                    { x, y, width, height } = Rectangle.from(proxyTemplateElement, me.dragWithin),\n                    relatedElementToDrag    = me.cloneTarget ? me.createProxy(relatedEl) : relatedEl;\n\n                relatedElementToDrag.classList.add(me.draggingCls);\n                // Remove some irrelevant CSS classes\n                relatedElementToDrag.classList.remove('b-hover', 'b-selected', 'b-focused');\n\n                if (me.cloneTarget) {\n                    // Match the original related element's position.\n                    me.setXY(relatedElementToDrag, x, y);\n                    me.dragWithin.appendChild(relatedElementToDrag);\n                    relatedElementToDrag.classList.add(me.dragProxyCls);\n\n                    // Optionally also match the original related element's size\n                    if (me.autoSizeClonedTarget) {\n                        relatedElementToDrag.style.width  = `${width}px`;\n                        relatedElementToDrag.style.height = `${height}px`;\n                    }\n\n                    if (me.hideOriginalElement) {\n                        relatedEl.classList.add('b-hidden');\n                    }\n                    relatedEl.classList.add('b-drag-original');\n                }\n\n                context.relatedElStartPos[i] = context.relatedElDragFromPos[i] = me.getXY(relatedElementToDrag);\n\n                if (me.unifiedProxy) {\n                    relatedElementToDrag.classList.add('b-drag-unified-animation', 'b-drag-unified-proxy');\n                    // Move into cascade and cache the dragFrom pos\n                    elementStartX += me.unifiedOffset;\n                    elementStartY += me.unifiedOffset;\n                    me.setXY(relatedElementToDrag, elementStartX, elementStartY);\n                    context.relatedElDragFromPos[i]   = [elementStartX, elementStartY];\n                    relatedElementToDrag.style.zIndex = 100 - i;\n                }\n\n                return relatedElementToDrag;\n            });\n\n            // Move the selected events into a unified cascade.\n            if (me.unifiedProxy && relatedElements && relatedElements.length > 0) {\n                // Animate related elements should into the position\n                EventHelper.onTransitionEnd({\n                    element  : relatedElements[0],\n                    property : 'transform',\n                    handler() {\n                        relatedElements.forEach(el => el.classList.remove('b-drag-unified-animation'));\n                    },\n                    thisObj : me,\n                    once    : true\n                });\n            }\n        }\n    }\n\n    /**\n     * Limit translation to outer bounds and specified constraints\n     * @private\n     * @param element\n     * @param x\n     * @param y\n     * @returns {{constrainedX: *, constrainedY: *}}\n     */\n    applyConstraints(element, x, y) {\n        const\n            me                           = this,\n            { constrain, dragWithin }    = me,\n            { pageXOffset, pageYOffset } = dragWithin === document.body ? globalThis : noScroll;\n\n        // limit to outer elements edges\n        if (dragWithin && constrain) {\n            if (x < 0) {\n                x = 0;\n            }\n            if (x + element.offsetWidth > dragWithin.scrollWidth) {\n                x = dragWithin.scrollWidth - element.offsetWidth;\n            }\n\n            if (y < 0) {\n                y = 0;\n            }\n            if (y + element.offsetHeight > dragWithin.scrollHeight) {\n                y = dragWithin.scrollHeight - element.offsetHeight;\n            }\n        }\n\n        // limit horizontally\n        if (typeof me.minX === 'number') {\n            x = Math.max(me.minX + pageXOffset, x);\n        }\n        if (typeof me.maxX === 'number') {\n            x = Math.min(me.maxX + pageXOffset, x);\n        }\n\n        // limit vertically\n        if (typeof me.minY === 'number') {\n            y = Math.max(me.minY + pageYOffset, y);\n        }\n        if (typeof me.maxY === 'number') {\n            y = Math.min(me.maxY + pageYOffset, y);\n        }\n\n        return { constrainedX : x, constrainedY : y };\n    }\n\n    /**\n     * Update elements translation on mouse move.\n     * @private\n     * @param {MouseEvent} event\n     * @param {Object} scrollManagerConfig\n     */\n    updateTranslateProxy(event, scrollManagerConfig) {\n        const\n            me                                        = this,\n            { lockX, lockY, context }                 = me,\n            element                                   = context.dragProxy || context.element,\n            { relatedElements, relatedElDragFromPos } = context;\n\n        // If we are cloning the dragged element outside of the element(s) monitored by the ScrollManager, then no need\n        // to take the scrollManager scroll values into account since it is only relevant when dragProxy is inside\n        // the Grid (where scroll manager operates).\n        if (context.scrollManagerElementContainsDragProxy && scrollManagerConfig) {\n            context.scrollX = scrollManagerConfig.getRelativeLeftScroll(element);\n            context.scrollY = scrollManagerConfig.getRelativeTopScroll(element);\n        }\n\n        context.pageX   = event.pageX;\n        context.pageY   = event.pageY;\n        context.clientX = event.clientX;\n        context.clientY = event.clientY;\n\n        let\n            newX = context.elementStartX + event.pageX - context.startPageX + context.scrollX,\n            newY = context.elementStartY + event.pageY - context.startPageY + context.scrollY;\n\n        // First let outside world apply snapping\n        if (me.snapCoordinates) {\n            const snapped = me.snapCoordinates({ element, newX, newY });\n\n            newX = snapped.x;\n            newY = snapped.y;\n        }\n\n        // Now constrain coordinates\n        const { constrainedX, constrainedY } = me.applyConstraints(element, newX, newY);\n\n        if (context.started || constrainedX !== newX || constrainedY !== newY) {\n            me.setXY(element, lockX ? undefined : constrainedX, lockY ? undefined : constrainedY);\n        }\n\n        if (relatedElements) {\n            const\n                deltaX = lockX ? 0 : constrainedX - context.elementStartX,\n                deltaY = lockY ? 0 : constrainedY - context.elementStartY;\n\n            relatedElements.forEach((r, i) => {\n                const [x, y] = relatedElDragFromPos[i];\n\n                me.setXY(r, x + deltaX, y + deltaY);\n            });\n        }\n\n        context.newX = constrainedX;\n        context.newY = constrainedY;\n    }\n\n    /**\n     * Finalize drag, fire drop.\n     * @private\n     * @param event\n     * @fires drop\n     */\n    async finishTranslateDrag(event) {\n        const\n            me                  = this,\n            context             = me.context,\n            { target }          = event,\n            xChanged            = !me.lockX && Math.round(context.newX) !== Math.round(context.elementStartX),\n            yChanged            = !me.lockY && Math.round(context.newY) !== Math.round(context.elementStartY),\n            element             = context.dragProxy || context.element,\n            { relatedElements } = context;\n\n        if (!me.ignoreSamePositionDrop || xChanged || yChanged) {\n            if (context.valid === false) {\n                await me.abortTranslateDrag(true, event);\n            }\n            else  {\n                const targetRect = !me.allowDropOutside && Rectangle.from(me.dragWithin || me.outerElement);\n\n                if (targetRect && ((typeof me.minX !== 'number' && me.minX !== true && (event.pageX < targetRect.left)) ||\n                    (typeof me.maxX !== 'number' && me.maxX !== true && (event.pageX > targetRect.right)) ||\n                    (typeof me.minY !== 'number' && me.minY !== true && (event.pageY < targetRect.top)) ||\n                    (typeof me.maxY !== 'number' && me.maxY !== true && (event.pageY > targetRect.bottom)))) {\n                    // revert location when dropped outside allowed element\n                    await me.abortTranslateDrag(true, event);\n                }\n                else {\n                    context.finalize = async(valid = context.valid) => {\n                        // In case someone tries to finalize twice\n                        if (context.finalized) {\n                            console.warn('DragHelper: Finalizing already finalized drag');\n                            return;\n                        }\n\n                        context.finalized = true;\n\n                        // abort if invalid (and context still exists, might have been aborted from outside)\n                        if (!valid && me.context) {\n                            // abort if flagged as invalid, without triggering abort or drop again\n                            await me.abortTranslateDrag(true, null, true);\n                        }\n\n                        if (!me.isDestroyed) {\n                            me.trigger('dropFinalized', { context, event, target });\n                            me.reset();\n                        }\n\n                        if (!me.cloneTarget && element.parentElement !== context.grabbedParent) {\n                            // If the dragged element was moved to another parent element, remove the transform style\n                            [element, ...(relatedElements || [])].forEach(el => el.style.transform = '');\n\n                        }\n                    };\n\n                    // allow async finalization by setting async to true on context in drop handler,\n                    // requires implementer to call context.finalize later to finish the drop\n                    context.async = false;\n\n                    await me.trigger('drop', { context, event, target });\n\n                    if (!context.async) {\n                        // finalize immediately\n                        await context.finalize();\n                    }\n                }\n            }\n        }\n        else {\n            // no change, abort\n            me.abortTranslateDrag(false, event);\n        }\n    }\n\n    /**\n     * Abort translation\n     * @private\n     * @param invalid\n     * @fires abort\n     */\n    async abortTranslateDrag(invalid = false, event = null, silent = false) {\n        const\n            me                                              = this,\n            {\n                cloneTarget,\n                context,\n                proxySelector,\n                dragWithin,\n                draggingCls\n            }                                               = me,\n            { relatedElements, relatedElStartPos, grabbed } = context,\n            element                                         = context.dragProxy || context.element;\n\n        context.valid = false;\n\n        me.scrollManager?.stopMonitoring();\n\n        if (context.aborted) {\n            console.warn('DragHelper: Aborting already aborted drag');\n            return;\n        }\n\n        let { elementStartX, elementStartY } = context;\n        const proxyMoved = elementStartX !== me.getX(element) ||\n                elementStartY !== me.getY(element);\n\n        if (element && context.started) {\n            // Put the dragged element back where it was\n            if (!cloneTarget && dragWithin && dragWithin !== context.grabbedParent) {\n                context.grabbedParent.insertBefore(element, context.grabbedNextSibling);\n            }\n\n            // Align the now visible grabbed element with the clone, so that it looks like it's\n            // sliding back into place when the clone is removed\n            if (cloneTarget) {\n                if (proxySelector) {\n                    const\n                        animateTo = grabbed.querySelector(proxySelector) || grabbed,\n                        { x, y }  = Rectangle.from(animateTo);\n\n                    elementStartX = x;\n                    elementStartY = y;\n                }\n\n                // <remove-on-release>\n                // TODO:\n                // if (me.hideOriginalElement) {\n                //     [elementStartX, elementStartY] = DomHelper.getTranslateXY(grabbed);\n                //     DomHelper.alignTo(grabbed, element);\n                //\n                //     // The getBoundingClientRect is important. The aligning above must be processed\n                //     // by a forced synchronous layout *before* the b-aborting class is added below.\n                //     me.grabbed.getBoundingClientRect();\n                // }\n                // </remove-on-release>\n            }\n\n            // animated restore of position.\n            element.classList.add('b-aborting');\n\n            // Move the main element back to its original position.\n            me.setXY(element, elementStartX, elementStartY);\n\n            // Move any related elements back to their original positions.\n            relatedElements?.forEach((element, i) => {\n                element.classList.remove(draggingCls);\n                element.classList.add('b-aborting');\n\n                me.setXY(element, relatedElStartPos[i][0], relatedElStartPos[i][1]);\n            });\n\n            if (!silent) {\n                me.trigger(invalid ? 'drop' : 'abort', { context, event });\n            }\n\n            // Element may have been scrolled out of view, or otherwise removed while dragging\n            if (element.isConnected && !me.isDestroying && proxyMoved) {\n                await EventHelper.waitForTransitionEnd({\n                    element,\n                    property     : DomHelper.getPropertyTransitionDuration(element, 'transform') ? 'transform' : 'all',\n                    thisObj      : me,\n                    once         : true,\n                    runOnDestroy : true\n                });\n            }\n\n            if (!me.isDestroyed) {\n                // Trigger event after transition has completed for UIs to redraw with stable DOM\n                me.trigger('abortFinalized', { context, event });\n            }\n        }\n\n        if (me.context?.started) {\n            me.reset();\n        }\n    }\n\n    // Restore state of all mutated elements\n    cleanUp() {\n        const\n            me                                                    = this,\n            { context, cloneTarget, draggingCls, dragProxyCls }   = me,\n            element                                               = context.dragProxy || context.element,\n            { relatedElements, originalRelatedElements, grabbed } = context,\n            removeClonedProxies                                   = cloneTarget && (me.removeProxyAfterDrop || !context.valid),\n            cssClassesToRemove                                    = [draggingCls, 'b-aborting', dragProxyCls, 'b-drag-main', 'b-drag-unified-proxy'];\n\n        element.classList.remove(...cssClassesToRemove);\n\n        if (removeClonedProxies) {\n            element.remove();\n        }\n        relatedElements?.forEach(element => {\n            if (removeClonedProxies) {\n                element.remove();\n            }\n            else {\n                element.classList.remove(...cssClassesToRemove);\n            }\n        });\n\n        // Restore originallly grabbed elements\n        grabbed.classList.remove('b-drag-original', 'b-hidden');\n        originalRelatedElements?.forEach(element => element.classList.remove('b-hidden', 'b-drag-original'));\n    }\n\n    //endregion\n};\n", "import Base from '../Base.js';\nimport Events from '../mixin/Events.js';\nimport DragHelperContainer from './mixin/DragHelperContainer.js';\nimport DragHelperTranslate from './mixin/DragHelperTranslate.js';\nimport DomHelper from './DomHelper.js';\nimport EventHelper from './EventHelper.js';\nimport ObjectHelper from './ObjectHelper.js';\nimport Rectangle from './util/Rectangle.js';\n\n/**\n * @module Core/helper/DragHelper\n */\n\nconst rootElementListeners = {\n    move       : 'onMouseMove',\n    up         : 'onMouseUp',\n    docclick   : 'onDocumentClick',\n    touchstart : 'onTouchStart',\n    touchmove  : 'onTouchMove',\n    touchend   : 'onTouchEnd',\n    keydown    : 'onKeyDown'\n};\n\n/**\n * ## Intro\n * A drag drop helper class which lets you move elements in page. It supports:\n *\n *  * Dragging the actual element\n *  * Dragging a cloned version of the element\n *  * Dragging extra `relatedElements` along with the main element\n *  * Firing useful events {@link #event-beforeDragStart}, {@link #event-dragStart}, {@link #event-drag}, {@link #event-drop}, {@link #event-abort}\n *  * Validation by setting a `valid` Boolean on the drag context object provided to event listeners\n *  * Aborting drag with ESCAPE key\n *  * Constraining drag to be only horizontal or vertical using {@link #config-lockX} and {@link #config-lockY}\n *  * Defining X / Y boundaries using {@link #config-minX}, {@link #config-maxX} and {@link #config-minY}, {@link #config-maxY}\n *  * Async finalization (e.g. to show confirmation prompts)\n *  * Animated final transition after mouse up of a valid drop (see {@link #function-animateProxyTo})\n *  * Animated abort transition after an invalid or aborted drop\n *\n * {@inlineexample Core/helper/DragHelper.js}\n *\n * ## Two modes\n *\n * DragHelper supports two {@link #config-mode modes}:\n *\n * * `container` - moving / rearranging elements within and between specified containers\n * * `translateXY` - freely repositioning an element, either using the element or a cloned version of it - a \"drag proxy\" (default mode)\n *\n * ## Container drag mode\n *\n * Container drag should be used when moving or rearranging child elements within and between specified containers\n *\n * Example:\n * ```javascript\n * // dragging element between containers\n * let dragHelper = new DragHelper({\n *   mode       : 'container',\n *   containers : [ container1, container2 ]\n * });\n *```\n *\n * ## Translate drag mode\n *\n * Use translate drag to reposition an element within its container using transform CSS.\n *\n * Example:\n * ```javascript\n * // dragging element within container\n * let dragHelper = new DragHelper({\n *   mode           : 'translateXY',\n *   targetSelector : 'div.movable'\n * });\n * ```\n *\n * ## Observable events\n * In the various events fired by the DragHelper, you will have access to the raw DOM event and some useful `context` about the drag operation:\n *\n * ```javascript\n *  myDrag.on({\n *      drag : ({event , context}) {\n *            // The element which we're moving, could be a cloned version of grabbed, or the grabbed element itself\n *           const element = context.element;\n *\n *           // The original mousedown element upon which triggered the drag operation\n *           const grabbed = context.grabbed;\n *\n *           // The target under the current mouse / pointer / touch position\n *           const target = context.target;\n *       }\n *  });\n * ```\n *\n * ## Simple drag helper subclass with a drop target specified:\n * ```javascript\n * export default class MyDrag extends DragHelper {\n *      static get defaultConfig() {\n *          return {\n *              // Don't drag the actual cell element, clone it\n *              cloneTarget        : true,\n *              mode               : 'translateXY',\n *              // Only allow drops on DOM elements with 'yourDropTarget' CSS class specified\n *              dropTargetSelector : '.yourDropTarget',\n *\n *              // Only allow dragging elements with the 'draggable' CSS class\n *              targetSelector : '.draggable'\n *          };\n *      }\n *\n *      construct(config) {\n *          const me = this;\n *\n *          super.construct(config);\n *\n *          me.on({\n *              dragstart : me.onDragStart\n *          });\n *      }\n *\n *      onDragStart({ event, context }) {\n *          const target = context.target;\n *\n *          // Here you identify what you are dragging (an image of a user, grid row in an order table etc) and map it to something in your\n *          // data model. You can store your data on the context object which is available to you in all drag-related events\n *          context.userId = target.dataset.userId;\n *      }\n *\n *      onEquipmentDrop({ context, event }) {\n *          const me = this;\n *\n *          if (context.valid) {\n *              const userId   = context.userId,\n *                    droppedOnTarget = context.target;\n *\n *              console.log(`You dropped user ${userStore.getById(userId).name} on ${droppedOnTarget}`, droppedOnTarget);\n *\n *              // Dropped on a scheduled event, display toast\n *              Toast.show(`You dropped user ${userStore.getById(userId).name} on ${droppedOnTarget}`);\n *          }\n *      }\n *  };\n * ```\n *\n * ## Dragging multiple elements\n *\n * You can tell the DragHelper to also move additional `relatedElements` when a drag operation is starting. Simply\n * provide an array of elements on the context object:\n *\n * ```javascript\n * new DragHelper ({\n *     callOnFunctions : true,\n *\n *     onDragStart({ context }) {\n *          // Let drag helper know about extra elements to drag\n *          context.relatedElements = Array.from(element.querySelectorAll('.b-resource-avatar'));\n *     }\n * });\n * ```\n *\n * ## Creating a custom drag proxy\n *\n * Using the {@link #function-createProxy} you can create any markup structure to use when dragging cloned targets.\n *\n * ```javascript\n * new DragHelper ({\n *    callOnFunctions      : true,\n *    // Don't drag the actual cell element, clone it\n *    cloneTarget          : true,\n *    // We size the cloned element using CSS\n *    autoSizeClonedTarget : false,\n *\n *    mode               : 'translateXY',\n *    // Only allow drops on certain DOM nodes\n *    dropTargetSelector : '.myDropTarget',\n *    // Only allow dragging cell elements in a Bryntum Grid\n *    targetSelector     : '.b-grid-row:not(.b-group-row) .b-grid-cell'\n *\n *    // Here we receive the element where the drag originated and we can choose to return just a child element of it\n *    // to use for the drag proxy (such as an icon)\n *    createProxy(element) {\n *        return element.querySelector('i').cloneNode();\n *    }\n * });\n * ```\n *\n * ## Animating a cloned drag proxy to a point before finalizing\n *\n * To provide users with the optimal user experience, you can set a `transitionTo` object (with `target` element and\n * `align` spec) on the DragHelper´s `context` object inside a {@link #event-drop} listener (only applies to translate\n * {@link #config-mode mode} operations). This will trigger a final animation of the drag proxy which should represent\n * the change of data state that will be triggered by the drop.\n *\n * You can see this in action in Gantt´s `drag-resource-from-grid` demo.\n *\n * ```javascript\n * new DragHelper ({\n *    callOnFunctions      : true,\n *    // Don't drag the actual cell element, clone it\n *    cloneTarget          : true,\n *    // We size the cloned element using CSS\n *    autoSizeClonedTarget : false,\n *\n *    mode               : 'translateXY',\n *    // Only allow drops on certain DOM nodes\n *    dropTargetSelector : '.myDropTarget',\n *    // Only allow dragging cell elements in a Bryntum Grid\n *    targetSelector     : '.b-grid-row:not(.b-group-row) .b-grid-cell'\n *\n *    // Here we receive the element where the drag originated and we can choose to return just a child element of it\n *    // to use for the drag proxy (such as an icon)\n *    createProxy(element) {\n *        return element.querySelector('i').cloneNode();\n *    },\n *\n *    async onDrop({ context, event }) {\n *       // If it's a valid drop, provide a point to animate the proxy to before finishing the operation\n *      if (context.valid) {\n *          await this.animateProxyTo(someElement, {\n *               // align left side of drag proxy to right side of the someElement\n *               align  : 'l0-r0'\n *          });\n *      }\n *      else {\n *          Toast.show(`You cannot drop here`);\n *      }\n *   }\n * });\n * ```\n *\n * @mixes Core/mixin/Events\n * @extends Core/Base\n */\nexport default class DragHelper extends Base.mixin(Events, DragHelperContainer, DragHelperTranslate) {\n    //region Config\n\n    static get defaultConfig() {\n        return {\n            /**\n             * Drag proxy CSS class\n             * @config {String}\n             * @default\n             * @private\n             */\n            dragProxyCls : 'b-drag-proxy',\n\n            /**\n             * CSS class added when drag is invalid\n             * @config {String}\n             * @default\n             */\n            invalidCls : 'b-drag-invalid',\n\n            /**\n             * CSS class added to the source element in Container drag\n             * @config {String}\n             * @default\n             * @private\n             */\n            draggingCls : 'b-dragging',\n\n            /**\n             * CSS class added to the source element in Container drag\n             * @config {String}\n             * @default\n             * @private\n             */\n            dropPlaceholderCls : 'b-drop-placeholder',\n\n            /**\n             * The amount of pixels to move mouse before it counts as a drag operation\n             * @config {Number}\n             * @default\n             */\n            dragThreshold : 5,\n\n            /**\n             * The outer element where the drag helper will operate (attach events to it and use as outer limit when looking for ancestors)\n             * @config {HTMLElement}\n             * @default\n             */\n            outerElement : document.body,\n\n            /**\n             * Outer element that limits where element can be dragged\n             * @config {HTMLElement}\n             */\n            dragWithin : null,\n\n            /**\n             * Set to true to stack any related dragged elements below the main drag proxy element. Only applicable when\n             * using translate {@link #config-mode} with {@link #config-cloneTarget}\n             * @config {Boolean}\n             */\n            unifiedProxy : null,\n\n            monitoringConfig : null,\n\n            /**\n             * Constrain translate drag to dragWithin elements bounds (set to false to allow it to \"overlap\" edges)\n             * @config {Boolean}\n             * @default\n             */\n            constrain : true,\n\n            /**\n             * Smallest allowed x when dragging horizontally.\n             * @config {Number}\n             */\n            minX : null,\n\n            /**\n             * Largest allowed x when dragging horizontally.\n             * @config {Number}\n             */\n            maxX : null,\n\n            /**\n             * Smallest allowed y when dragging horizontally.\n             * @config {Number}\n             */\n            minY : null,\n\n            /**\n             * Largest allowed y when dragging horizontally.\n             * @config {Number}\n             */\n            maxY : null,\n\n            /**\n             * Enabled dragging, specify mode:\n             * <table>\n             * <tr><td>container<td>Allows reordering elements within one and/or between multiple containers\n             * <tr><td>translateXY<td>Allows dragging within a parent container\n             * </table>\n             * @config {'container'|'translateXY'}\n             * @default\n             */\n            mode : 'translateXY',\n\n            /**\n             * A function that determines if dragging an element is allowed. Gets called with the element as argument,\n             * return true to allow dragging or false to prevent.\n             * @config {Function}\n             */\n            isElementDraggable : null,\n\n            /**\n             * A CSS selector used to determine if dragging an element is allowed.\n             * @config {String}\n             */\n            targetSelector : null,\n\n            /**\n             * A CSS selector used to determine if a drop is allowed at the current position.\n             * @config {String}\n             */\n            dropTargetSelector : null,\n\n            /**\n             * A CSS selector added to each drop target element while dragging.\n             * @config {String}\n             */\n            dropTargetCls : null,\n\n            /**\n             * A CSS selector used to target a child element of the mouse down element, to use as the drag proxy element.\n             * Applies to translate {@link #config-mode mode} when using {@link #config-cloneTarget}.\n             * @config {String}\n             */\n            proxySelector : null,\n\n            /**\n             * Set to `true` to clone the dragged target, and not move the actual target DOM node.\n             * @config {Boolean}\n             * @default\n             */\n            cloneTarget : false,\n\n            /**\n             * Set to `false` to not apply width/height of cloned drag proxy elements.\n             * @config {Boolean}\n             * @default\n             */\n            autoSizeClonedTarget : true,\n\n            /**\n             * Set to true to hide the original element while dragging (applicable when `cloneTarget` is true).\n             * @config {Boolean}\n             * @default\n             */\n            hideOriginalElement : false,\n\n            /**\n             * Containers whose elements can be rearranged (and moved between the containers). Used when\n             * mode is set to \"container\".\n             * @config {HTMLElement[]}\n             */\n            containers : null,\n\n            /**\n             * A CSS selector used to exclude elements when using container mode\n             * @config {String}\n             */\n            ignoreSelector : null,\n\n            startEvent : null,\n\n            /**\n             * Configure as `true` to disallow dragging in the `X` axis. The dragged element will only move vertically.\n             * @config {Boolean}\n             * @default\n             */\n            lockX : false,\n\n            /**\n             * Configure as `true` to disallow dragging in the `Y` axis. The dragged element will only move horizontally.\n             * @config {Boolean}\n             * @default\n             */\n            lockY : false,\n\n            /**\n             * The amount of milliseconds to wait after a touchstart, before a drag gesture will be allowed to start.\n             * @config {Number}\n             * @default\n             */\n            touchStartDelay : 300,\n\n            /**\n             * Scroll manager of the target. If specified, scrolling while dragging is supported.\n             * @config {Core.util.ScrollManager}\n             */\n            scrollManager : null,\n\n            /**\n             * A method provided to snap coordinates to fixed points as you drag\n             * @config {Function}\n             * @internal\n             */\n            snapCoordinates : null,\n\n            /**\n             * When using {@link #config-unifiedProxy}, use this amount of pixels to offset each extra element when dragging multiple items\n             * @config {Number}\n             * @default\n             */\n            unifiedOffset : 5,\n\n            /**\n             * Configure as `false` to take ownership of the proxy element after a valid drop (advanced usage).\n             * @config {Boolean}\n             * @default\n             */\n            removeProxyAfterDrop : true,\n\n            clickSwallowDuration : 50,\n\n            ignoreSamePositionDrop : true,\n\n            // true to allow drops outside the dragWithin element\n            allowDropOutside : null,\n            // for container mode\n            floatRootOwner   : null,\n\n            mouseMoveListenerElement : document,\n\n            testConfig : {\n                transitionDuration   : 10,\n                clickSwallowDuration : 50,\n                touchStartDelay      : 100\n            },\n\n            rtlSource : null,\n\n            /**\n             * Creates the proxy element to be dragged, when using {@link #config-cloneTarget}. Clones the original element by default.\n             * Provide your custom {@link #function-createProxy} function to be used for creating drag proxy.\n             * @param {HTMLElement} element The element from which the drag operation originated\n             * @config {Function}\n             * @typings {Function(HTMLElement): HTMLElement}\n             */\n            createProxy : null\n        };\n    }\n\n    //endregion\n\n    //region Events\n\n    /**\n     * Fired before dragging starts, return `false` to prevent the drag operation.\n     * @preventable\n     * @event beforeDragStart\n     * @param {Core.helper.DragHelper} source\n     * @param {Object} context\n     * @param {HTMLElement} context.element The original element upon which the mousedown event triggered a drag operation\n     * @param {MouseEvent|TouchEvent} event\n     */\n\n    /**\n     * Fired when dragging starts. The event includes a `context` object. If you want to drag additional elements you can\n     * provide these as an array of elements assigned to the `relatedElements` property of the context object.\n     * @event dragStart\n     * @param {Core.helper.DragHelper} source\n     * @param {Object} context\n     * @param {HTMLElement} context.element The element which we're moving, could be a cloned version of grabbed, or the grabbed element itself\n     * @param {HTMLElement} context.grabbed The original element upon which the mousedown event triggered a drag operation\n     * @param {HTMLElement[]} context.relatedElements Array of extra elements to include in the drag.\n     * @param {MouseEvent|TouchEvent} event\n     */\n\n    /**\n     * Fired while dragging, you can signal that the drop is valid or invalid by setting `context.valid = false;`\n     * @event drag\n     * @param {Core.helper.DragHelper} source\n     * @param {Object} context\n     * @param {HTMLElement} context.element The element which we are moving, could be a cloned version of grabbed, or the grabbed element itself\n     * @param {HTMLElement} context.target The target element below the cursor\n     * @param {HTMLElement} context.grabbed The original element upon which the mousedown event triggered a drag operation\n     * @param {HTMLElement[]} context.relatedElements An array of extra elements dragged with the main dragged element\n     * @param {Boolean} context.valid Set this to true or false to indicate whether the drop position is valid.\n     * @param {MouseEvent} event\n     */\n\n    /**\n     * Fired after a drop at an invalid position\n     * @event abort\n     * @param {Core.helper.DragHelper} source\n     * @param {Object} context\n     * @param {HTMLElement} context.element The element which we are moving, could be a cloned version of grabbed, or the grabbed element itself\n     * @param {HTMLElement} context.target The target element below the cursor\n     * @param {HTMLElement} context.grabbed The original element upon which the mousedown event triggered a drag operation\n     * @param {HTMLElement[]} context.relatedElements An array of extra elements dragged with the main dragged element\n     * @param {MouseEvent} event\n     */\n\n    /**\n     * Fires after {@link #event-abort} and after drag proxy has animated back to its original position\n     * @private\n     * @event abortFinalized\n     * @param {Core.helper.DragHelper} source\n     * @param {Object} context\n     * @param {HTMLElement} context.element The element which we are moving, could be a cloned version of grabbed, or the grabbed element itself\n     * @param {HTMLElement} context.target The target element below the cursor\n     * @param {HTMLElement} context.grabbed The original element upon which the mousedown event triggered a drag operation\n     * @param {MouseEvent} event\n     */\n    //endregion\n\n    //region Init\n\n    /**\n     * Initializes a new DragHelper.\n     * @param {DragHelperConfig} config Configuration object, accepts options specified under Configs above\n     * @example\n     * new DragHelper({\n     *   containers: [div1, div2],\n     *   isElementDraggable: element => element.className.contains('handle'),\n     *   outerElement: topParent,\n     *   listeners: {\n     *     drop: onDrop,\n     *     thisObj: this\n     *   }\n     * });\n     * @function constructor\n     */\n    construct(config) {\n        const me = this;\n\n        super.construct(config);\n\n        me.initListeners();\n\n        if (me.isContainerDrag) {\n            me.initContainerDrag();\n        }\n        else {\n            me.initTranslateDrag();\n        }\n\n        me.onScrollManagerScrollCallback = me.onScrollManagerScrollCallback.bind(me);\n    }\n\n    doDestroy() {\n        this.reset(true);\n        super.doDestroy();\n    }\n\n    /**\n     * Initialize listener\n     * @private\n     */\n    initListeners() {\n        const\n            me                 = this,\n            { outerElement }   = me,\n            dragStartListeners = {\n                element     : outerElement,\n                pointerdown : 'onPointerDown',\n                thisObj     : me\n            };\n\n        me.mouseMoveListenerElement = me.getMouseMoveListenerTarget(outerElement);\n\n        // These will be autoDetached upon destroy\n        EventHelper.on(dragStartListeners);\n    }\n\n    // Salesforce hook: we override this method to move listener from the body (which is default root node) to element\n    // inside of LWC\n    getMouseMoveListenerTarget(element) {\n        const root = element.getRootNode();\n\n        let result = this.mouseMoveListenerElement;\n\n        // If we are inside a closed shadow root and we are a child of a Widget, listen to mouse moves only inside outermost el\n        if (root.nodeType === Node.DOCUMENT_FRAGMENT_NODE && root.mode === 'closed') {\n            result = element.closest('.b-outer') || result;\n        }\n\n        return result;\n    }\n\n    get isRTL() {\n        return Boolean(this.rtlSource?.rtl);\n    }\n\n    //endregion\n\n    //region Events\n\n    /**\n     * Fires after drop. For valid drops, it exposes `context.async` which you can set to true to signal that additional\n     * processing is needed before finalizing the drop (such as showing some dialog). When that operation is done, call\n     * `context.finalize(true/false)` with a boolean that determines the outcome of the drop.\n     *\n     * You can signal that the drop is valid or invalid by setting `context.valid = false;`\n     *\n     * For translate type drags with {@link #config-cloneTarget}, you can also set `transitionTo` if you want to animate\n     * the dragged proxy to a position before finalizing the operation. See class intro text for example usage.\n     *\n     * @event drop\n     * @param {Core.helper.DragHelper} source\n     * @param {Object} context\n     * @param {HTMLElement} context.element The element which we are moving, could be a cloned version of grabbed, or the grabbed element itself\n     * @param {HTMLElement} context.target The target element below the cursor\n     * @param {HTMLElement} context.grabbed The original element upon which the mousedown event triggered a drag operation\n     * @param {HTMLElement[]} context.relatedElements An array of extra elements dragged with the main dragged element\n     * @param {Boolean} context.valid true if the drop position is valid\n     */\n\n    /**\n     * Fires after {@link #event-drop} and after drag proxy has animated to its final position (if setting `transitionTo`\n     * on the drag context object).\n     * @private\n     * @event dropFinalized\n     * @param {Core.helper.DragHelper} source\n     * @param {Object} context\n     * @param {HTMLElement} context.element The element which we are moving, could be a cloned version of grabbed, or the grabbed element itself\n     * @param {HTMLElement} context.target The target element below the cursor\n     * @param {HTMLElement} context.grabbed The original element upon which the mousedown event triggered a drag operation\n     */\n\n    onPointerDown(event) {\n        const me = this;\n\n        if (\n            // Left button or touch allowed\n            event.button !== 0 ||\n            // Visibility check is needed because mousedown on a just-created event element\n            // will cause the EventEdit to cancel the add, remove the record and hide the element\n            // *but* the mousedown event still bubbles to here and that will throw an error.\n            !DomHelper.isVisible(event.target) ||\n            // If a drag is ongoing already, finalize it and don't proceed with new drag (happens if pointerup happened\n            // when current window wasn't focused - tab switch or window switch). Also handles the edge case of trying to\n            // start a new drag while previous is awaiting finalization, in which case it just bails out.\n            me.context\n        ) {\n            return;\n        }\n\n        // Check that element is draggable\n        if (me.isElementDraggable && !me.isElementDraggable(event.target, event)) {\n            return;\n        }\n\n        me.startEvent = event;\n\n        const handled = me.isContainerDrag ? me.grabContainerDrag(event) : me.grabTranslateDrag(event);\n\n        if (handled) {\n            me.blurDetacher = EventHelper.on({\n                element : globalThis,\n                blur    : me.onWindowBlur,\n                thisObj : me\n            });\n\n            const dragListeners = {\n                element : me.mouseMoveListenerElement,\n                thisObj : me,\n                capture : true,\n                keydown : rootElementListeners.keydown\n            };\n\n            if (event.pointerType === 'touch') {\n                me.touchStartTimer = me.setTimeout(() => me.touchStartTimer = null, me.touchStartDelay, 'touchStartDelay');\n\n                dragListeners.touchmove = {\n                    handler : rootElementListeners.touchmove,\n                    passive : false // We need to be able to preventDefault on the touchmove\n                };\n\n                // Touch desktops don't fire touchend event when touch has ended, instead pointerup is fired\n                // iOS do fire touchend\n                dragListeners.touchend = dragListeners.pointerup = rootElementListeners.touchend;\n            }\n            else {\n                dragListeners.pointermove = rootElementListeners.move;\n                dragListeners.pointerup = rootElementListeners.up;\n            }\n\n            // A listener detacher is returned;\n            me.dragListenersDetacher = EventHelper.on(dragListeners);\n\n            if (me.dragWithin && me.dragWithin !== me.outerElement && me.outerElement.contains(me.dragWithin)) {\n                const\n                    box = Rectangle.from(me.dragWithin, me.outerElement);\n\n                me.minY = box.top;\n                me.maxY = box.bottom;\n\n                me.minX = box.left;\n                me.maxX = box.right;\n            }\n        }\n    }\n\n    internalMove(event) {\n        // Ignore events used to mimic pointer movement on scroll, those should not affect dragging\n        if (event.scrollInitiated) {\n            return;\n        }\n\n        const\n            me             = this,\n            { context }    = me,\n            distance       = EventHelper.getDistanceBetween(me.startEvent, event),\n            abortTouchDrag = me.touchStartTimer && distance > me.dragThreshold;\n\n        if (abortTouchDrag) {\n            me.abort(true);\n            return;\n        }\n\n        if (\n            !me.touchStartTimer && context?.element && (context.started || distance >= me.dragThreshold) &&\n            // Ignore text nodes\n            event.target?.nodeType === Node.ELEMENT_NODE\n        ) {\n\n            if (!context.started) {\n                if (me.trigger('beforeDragStart', { context, event }) === false) {\n                    return me.abort();\n                }\n\n                if (me.isContainerDrag) {\n                    me.startContainerDrag(event);\n                }\n                else {\n                    me.startTranslateDrag(event);\n                }\n\n                context.started = true;\n\n                // Now that the drag drop is confirmed to be starting, activate the configured scrollManager if present\n                me.scrollManager?.startMonitoring(ObjectHelper.merge({\n                    scrollables : [\n                        {\n                            element : me.dragWithin || me.outerElement\n                        }\n                    ],\n                    callback : me.onScrollManagerScrollCallback\n                }, me.monitoringConfig));\n\n                // Global informational class for when DragHelper is dragging\n                context.outermostEl = DomHelper.getOutermostElement(event.target);\n                context.outermostEl.classList.add('b-draghelper-active');\n\n                if (me.dropTargetSelector && me.dropTargetCls) {\n                    DomHelper.getRootElement(me.outerElement).querySelectorAll(me.dropTargetSelector).forEach(\n                        el => el.classList.add(me.dropTargetCls)\n                    );\n                }\n\n                // This event signals that the drag is started, observers could then provide relatedElements that should\n                // be dragged along with the mousedowned element\n                me.trigger('dragStart', { context, event });\n\n                me.onDragStarted?.();\n\n                // This event is used to set visibility of the original events in case drag is started\n                // in copy mode\n                me.trigger('afterDragStart', { context, event });\n            }\n\n            me.update(event);\n\n            // to prevent view drag (scroll) on ipad\n            if (event.type === 'touchmove') {\n                event.preventDefault();\n                event.stopImmediatePropagation();\n            }\n        }\n    }\n\n    onScrollManagerScrollCallback(config) {\n        const { lastMouseMoveEvent } = this;\n\n        if (this.context?.element && lastMouseMoveEvent) {\n            // Indicate that this is a 'fake' mousemove event as a result of the scrolling\n            lastMouseMoveEvent.isScroll = true;\n\n            this.update(lastMouseMoveEvent, config);\n        }\n    }\n\n    onTouchMove(event) {\n        this.internalMove(event);\n    }\n\n    /**\n     * Move drag element with mouse.\n     * @param event\n     * @fires beforeDragStart\n     * @fires dragStart\n     * @private\n     */\n    onMouseMove(event) {\n        this.internalMove(event);\n    }\n\n    /**\n     * Updates drag, called when an element is grabbed and mouse moves\n     * @private\n     * @fires drag\n     */\n    update(event, scrollManagerConfig) {\n        const\n            me                   = this,\n            { context }          = me,\n            scrollingPageElement = document.scrollingElement || document.body; // two different modes used\n\n        // In case of scrolling need to update target element based on [X, Y] of the mouse event\n        // Salesforce workaround: we're listening on the document body and salesforce won't report correct target, so\n        // we try to get it from composed path\n        let target = me.getMouseMoveEventTarget(event);\n\n        // \"pointer-events:none\" touchmove has no effect for the touchmove event target, meaning we cannot know\n        // what's under the cursor as easily in touch devices\n        if (event.type === 'touchmove') {\n            const touch = event.changedTouches[0];\n\n            target = DomHelper.elementFromPoint(touch.clientX + scrollingPageElement.scrollLeft, touch.clientY + scrollingPageElement.scrollTop);\n        }\n\n        context.target = target;\n\n        let internallyValid = me.allowDropOutside || !me.dragWithin || me.dragWithin.contains(event.target);\n\n        if (internallyValid && me.dropTargetSelector) {\n            internallyValid = internallyValid && Boolean(target?.closest(me.dropTargetSelector));\n        }\n\n        // Move the drag proxy or dragged element before triggering the drag event\n        if (me.isContainerDrag) {\n            me.updateContainerProxy(event, scrollManagerConfig);\n        }\n        else {\n            // Note, if you drag an element from Container A to Container B which is scrollable (handled by ScrollManager),\n            // and you notice that the proxy element follows the scroll and goes away from the cursor,\n            // make sure you set `outerElement` to the container of the source element (Container A)\n            // and set `constrain` to `false`.\n            me.updateTranslateProxy(event, scrollManagerConfig);\n        }\n\n        context.valid = internallyValid;\n\n        // Allow external code to validate the context before updating a container drag\n        me.trigger('drag', { context, event });\n\n        // Move the placeholder element into its new place.\n        // This will see the new state of context if mutated by a drag listener.\n        if (me.isContainerDrag) {\n            me.updateContainerDrag(event, scrollManagerConfig);\n        }\n\n        context.valid = context.valid && internallyValid;\n\n        for (const element of me.draggedElements) {\n            element.classList.toggle(me.invalidCls, !context.valid);\n        }\n\n        if (event) {\n            me.lastMouseMoveEvent = event;\n        }\n    }\n\n    get draggedElements() {\n        const { context } = this;\n        return [context.dragProxy || context.element, ...(context.relatedElements ?? [])];\n    }\n\n    /**\n     * Abort dragging\n     * @fires abort\n     */\n    async abort(silent = false) {\n        const\n            me          = this,\n            { context } = me;\n\n        me.scrollManager?.stopMonitoring?.();\n        me.removeListeners();\n\n        if (context?.started && !context.aborted) {\n            // Force a synchronous layout so that transitions from this point will work.\n            context.element.getBoundingClientRect();\n\n            // Aborted drag not considered valid\n            context.valid = false;\n\n            if (me.isContainerDrag) {\n                me.abortContainerDrag(undefined, undefined, silent);\n            }\n            else {\n                me.abortTranslateDrag(undefined, undefined, silent);\n            }\n\n            context.aborted = true;\n        }\n        else {\n            me.reset(true);\n        }\n    }\n\n    // Empty class implementation. If listeners *are* added, the detacher is added\n    // as an instance property. So this is always callable.\n    removeListeners() {\n        this.dragListenersDetacher?.();\n        this.blurDetacher?.();\n    }\n\n    // Called when a drag operation is completed, or aborted\n    // Removes DOM listeners and resets context\n    reset(silent) {\n        const\n            me          = this,\n            { context } = me;\n\n        if (context?.started) {\n            for (const element of me.draggedElements) {\n                element.classList.remove(me.invalidCls);\n            }\n\n            context.outermostEl.classList.remove('b-draghelper-active');\n\n            if (me.isContainerDrag) {\n                context.dragProxy.remove();\n            }\n            else {\n                me.cleanUp();\n            }\n\n            if (me.dropTargetSelector && me.dropTargetCls) {\n                DomHelper.getRootElement(me.outerElement).querySelectorAll(me.dropTargetSelector).forEach(\n                    el => el.classList.remove(me.dropTargetCls)\n                );\n            }\n        }\n\n        me.removeListeners();\n\n        /**\n         * Fired after a drag operation is completed or aborted\n         * @event reset\n         * @private\n         * @param {Core.helper.DragHelper} dragHelper\n         */\n        if (!silent) {\n            me.trigger('reset');\n        }\n\n        me.context = me.lastMouseMoveEvent = null;\n    }\n\n    onTouchEnd(event) {\n        this.onMouseUp(event);\n    }\n\n    /**\n     * This is a capture listener, only added during drag, which prevents a click gesture\n     * propagating from the terminating mouseup gesture\n     * @param {MouseEvent} event\n     * @private\n     */\n    onDocumentClick(event) {\n        event.stopPropagation();\n    }\n\n    /**\n     * Drop on mouse up (if dropped on valid target).\n     * @param event\n     * @private\n     */\n    onMouseUp(event) {\n        const\n            me          = this,\n            { context } = me;\n\n        me.removeListeners();\n\n        if (context) {\n            me.scrollManager?.stopMonitoring();\n\n            if (context.started) {\n                // Nobody else must get to process the pointerup event of a drag.\n                // We are using capture : true, so we see it first\n                event.stopPropagation();\n\n                context.finalizing = true;\n                if (me.isContainerDrag) {\n                    me.finishContainerDrag(event);\n                }\n                else {\n                    me.finishTranslateDrag(event);\n                }\n\n                // Prevent the impending document click from the mouseup event from propagating\n                // into a click on our element.\n                EventHelper.on({\n                    element : document,\n                    thisObj : me,\n                    click   : rootElementListeners.docclick,\n                    capture : true,\n                    expires : me.clickSwallowDuration, // In case a click did not ensue, remove the listener\n                    once    : true\n                });\n            }\n            else {\n                me.reset(true);\n            }\n        }\n    }\n\n    /**\n     * Cancel on ESC key\n     * @param event\n     * @private\n     */\n    onKeyDown(event) {\n        if (this.context?.started && event.key === 'Escape') {\n            // Nobody else must get to process the ESCAPE key event of a drag.\n            // We are using capture : true, so we see it first\n            event.stopImmediatePropagation();\n            this.abort();\n        }\n    }\n\n    onWindowBlur() {\n        // If window blur occurs while we are dragging (tab is switched, another window steals focus from browser)\n        // pointer might be released and current window will not know about that. Thus allowing to pointerdown again\n        // when focus comes back. In this case we want to let drag helper know that next pointerdown should be ignored.\n        if (this.context && !this.context.finalizing) {\n            this.abort();\n        }\n    }\n\n    /**\n     * Creates the proxy element to be dragged, when using {@link #config-cloneTarget}. Clones the original element by default.\n     * Override it to provide your own custom HTML element structure to be used as the drag proxy.\n     * @param {HTMLElement} element The element from which the drag operation originated\n     * @returns {HTMLElement}\n     */\n    createProxy(element) {\n        if (this.proxySelector) {\n            element = element.querySelector(this.proxySelector) || element;\n        }\n\n        const proxy = element.cloneNode(true);\n\n        proxy.removeAttribute('id');\n\n        return proxy;\n    }\n\n    //endregion\n\n    get isContainerDrag() {\n        return this.mode === 'container';\n    }\n\n    /**\n     * Animated the proxy element to be aligned with the passed element. Returns a Promise which resolves after the\n     * DOM transition completes. Only applies to 'translateXY' mode.\n     * @param {HTMLElement|Core.helper.util.Rectangle} element The target element or a Rectangle\n     * @param {Object} [alignSpec] An object describing how to the align drag proxy to the target element\n     * @param {String} [alignSpec.align] The alignment specification string, `[trbl]n-[trbl]n`.\n     * @param {Number|Number[]} [alignSpec.offset] The 'x' and 'y' offset values to create an extra margin round the target\n     * to offset the aligned widget further from the target. May be configured as -ve to move the aligned widget\n     * towards the target - for example producing the effect of the anchor pointer piercing the target.\n     */\n    async animateProxyTo(targetElement, alignSpec = { align : 'c-c' }) {\n        const\n            { context, draggedElements } = this,\n            { element }                  = context,\n            targetRect                   = targetElement.isRectangle ? targetElement : Rectangle.from(targetElement);\n\n        draggedElements.forEach(el => {\n            el.classList.add('b-drag-final-transition');\n\n            DomHelper.alignTo(el, targetRect, alignSpec);\n        });\n\n        await EventHelper.waitForTransitionEnd({\n            element,\n            property : 'all',\n            thisObj  : this,\n            once     : true\n        });\n\n        draggedElements.forEach(el => el.classList.remove('b-drag-final-transition'));\n    }\n\n    /**\n     * Returns true if a drag operation is active\n     * @property {Boolean}\n     * @readonly\n     */\n    get isDragging() {\n        return Boolean(this.context?.started);\n    }\n\n    //#region Salesforce hooks\n\n    getMouseMoveEventTarget(event) {\n        return !event.isScroll ? event.target : DomHelper.elementFromPoint(event.clientX, event.clientY);\n    }\n\n    //#endregion\n}\n", "import Base from '../Base.js';\nimport Events from '../mixin/Events.js';\nimport BrowserHelper from './BrowserHelper.js';\nimport EventHelper from './EventHelper.js';\nimport DomHelper from './DomHelper.js';\nimport ObjectHelper from './ObjectHelper.js';\nimport Rectangle from './util/Rectangle.js';\n\n// <remove-on-release>\n// TODO: add pointer events support\n// </remove-on-release>\n\nconst documentListeners = {\n    down       : 'onMouseDown',\n    move       : 'onMouseMove',\n    up         : 'onMouseUp',\n    docclick   : 'onDocumentClick',\n    touchstart : {\n        handler : 'onTouchStart',\n        // We preventDefault touchstart so as not to scroll. Must not be passive.\n        // https://developers.google.com/web/updates/2017/01/scrolling-intervention\n        passive : false\n    },\n    touchmove : 'onTouchMove',\n    touchend  : 'onTouchEnd',\n    keydown   : 'onKeyDown'\n};\n\n/**\n * @module Core/helper/ResizeHelper\n */\n\n/**\n * Contextual information available during a resize.\n *\n * @typedef {Object} ResizeContext\n * @property {HTMLElement} element Element being resized\n * @property {'top'|'right'|'bottom'|'left'} edge Edge being dragged\n * @property {Boolean} valid `true` if the resize is valid, `false` if it is not\n * @property {Boolean} async Set to `true` in a `resize` listener to allow asynchronous finalization of the resize\n * @property {Function} finalize Call this function to finalize the resize, required if it was flagged as `async` in a\n * `resize` listener\n * @property {Number} newWidth New width of the element\n * @property {Number} newHeight New height of the element\n * @property {Number} newX New x coordinate of the element, when dragging left edge\n * @property {Number} newY New y coordinate of the element, when dragging top edge\n */\n\n/**\n * Handles resizing of elements using handles. Handles can be actual elements or virtual handles specified as a border\n * area on elements left and right edges.\n *\n * ```javascript\n * // enable resizing all elements with class 'resizable'\n * let resizer = new ResizeHelper({\n *   targetSelector: '.resizable'\n * });\n * ```\n *\n * @mixes Core/mixin/Events\n * @internal\n */\nexport default class ResizeHelper extends Events(Base) {\n    //region Config\n\n    static get defaultConfig() {\n        return {\n            /**\n             * CSS class added when resizing\n             * @config {String}\n             * @default\n             */\n            resizingCls : 'b-resizing',\n\n            /**\n             * The amount of pixels to move mouse before it counts as a drag operation\n             * @config {Number}\n             * @default\n             */\n            dragThreshold : 5,\n\n            /**\n             * Resizing handle size\n             * @config {Number}\n             * @default\n             */\n            handleSize : 10,\n\n            /**\n             * Automatically shrink virtual handles when available space < handleSize. The virtual handles will\n             * decrease towards width/height 1, reserving space between opposite handles to for example leave room for\n             * dragging. To configure reserved space, see {@link #config-reservedSpace}.\n             * @config {Boolean}\n             * @default false\n             */\n            dynamicHandleSize : null,\n\n            //\n            /**\n             * Room in px to leave unoccupied by handles when shrinking them dynamically (see\n             * {@link #config-dynamicHandleSize}).\n             * @config {Number}\n             * @default\n             */\n            reservedSpace : 10,\n\n            /**\n             * Resizing handle size on touch devices\n             * @config {Number}\n             * @default\n             */\n            touchHandleSize : 30,\n\n            /**\n             * Minimum width when resizing\n             * @config {Number}\n             * @default\n             */\n            minWidth : 1,\n\n            /**\n             * Max width when resizing.\n             * @config {Number}\n             * @default\n             */\n            maxWidth : 0,\n\n            /**\n             * Minimum height when resizing\n             * @config {Number}\n             * @default\n             */\n            minHeight : 1,\n\n            /**\n             * Max height when resizing\n             * @config {Number}\n             * @default\n             */\n            maxHeight : 0,\n\n            // outerElement, attach events to it and use as outer limit when looking for ancestors\n            outerElement : document.body,\n\n            /**\n             * Optional scroller used to read scroll position. If unspecified, the outer element will be used.\n             * @config {Core.helper.util.Scroller}\n             */\n            scroller : null,\n\n            /**\n             * Assign a function to determine if a hovered element can be resized or not\n             * @config {Function}\n             * @default\n             */\n            allowResize : null,\n\n            /**\n             * Outer element that limits where element can be dragged\n             * @config {HTMLElement}\n             * @default\n             */\n            dragWithin : null,\n\n            /**\n             * A function that determines if dragging an element is allowed. Gets called with the element as argument,\n             * return true to allow dragging or false to prevent.\n             * @config {Function}\n             * @default\n             */\n            isElementResizable : null,\n\n            /**\n             * A CSS selector used to determine if resizing an element is allowed.\n             * @config {String}\n             * @default\n             */\n            targetSelector : null,\n\n            /**\n             * Use left handle when resizing. Only applies when `direction` is 'horizontal'\n             * @config {Boolean}\n             * @default\n             */\n\n            leftHandle : true,\n\n            /**\n             * Use right handle when resizing. Only applies when `direction` is 'horizontal'\n             * @config {Boolean}\n             * @default\n             */\n            rightHandle : true,\n\n            /**\n             * Use top handle when resizing. Only applies when `direction` is 'vertical'\n             * @config {Boolean}\n             * @default\n             */\n\n            topHandle : true,\n\n            /**\n             * Use bottom handle when resizing. Only applies when `direction` is 'vertical'\n             * @config {Boolean}\n             * @default\n             */\n            bottomHandle : true,\n\n            /**\n             * A CSS selector used to determine where handles should be \"displayed\" when resizing. Defaults to\n             * targetSelector if unspecified\n             * @config {String}\n             */\n            handleSelector : null,\n\n            /**\n             * A CSS selector used to determine which inner element contains handles.\n             * @config {String}\n             */\n            handleContainerSelector : null,\n\n            startEvent : null,\n\n            /*\n             * Optional config object, used by EventResize feature: it appends proxy and has to start resizing immediately\n             * @config {Object}\n             * @private\n             */\n            grab : null,\n\n            /**\n             * CSS class added when the resize state is invalid\n             * @config {String}\n             * @default\n             */\n            invalidCls : 'b-resize-invalid',\n\n            // A number that controls whether or not the element is wide enough for it to make sense to show resize handles\n            // e.g. handle width is 10px, so doesn't make sense to show them unless handles on both sides fit\n            handleVisibilityThreshold : null,\n\n            // Private config that disables translation when resizing left edge. Useful for example in cases when element\n            // being resized is part of a flex layout\n            skipTranslate : false,\n\n            /**\n             * Direction to resize in, either 'horizontal' or 'vertical'\n             * @config {'horizontal'|'vertical'}\n             * @default\n             */\n            direction : 'horizontal',\n\n            clickSwallowDuration : 50,\n\n            rtlSource : null\n        };\n    }\n\n    static configurable = {\n        // Private config that disables updating elements width and position, for when data is live updated during\n        // resize, leading to element being redrawn\n        skipUpdatingElement : null\n    };\n\n    //endregion\n\n    //region Events\n\n    /**\n     * Fired while dragging\n     * @event resizing\n     * @param {Core.helper.ResizeHelper} source\n     * @param {ResizeContext} context Resize context\n     * @param {MouseEvent} event Browser event\n     */\n\n    /**\n     * Fired when dragging starts.\n     * @event resizeStart\n     * @param {Core.helper.ResizeHelper} source\n     * @param {ResizeContext} context Resize context\n     * @param {MouseEvent|TouchEvent} event Browser event\n     */\n\n    /**\n     * Fires after resize, and allows for asynchronous finalization by setting 'async' to `true` on the context object.\n     * @event resize\n     * @param {Core.helper.ResizeHelper} source\n     * @param {ResizeContext} context Context about the resize operation. Set 'async' to `true` to indicate asynchronous\n     * validation of the resize flow (for showing a confirmation dialog etc)\n     */\n\n    /**\n     * Fires when a resize is canceled (width is unchanged)\n     * @event cancel\n     * @param {Core.helper.ResizeHelper} source\n     * @param {ResizeContext} context Resize context\n     * @param {MouseEvent|TouchEvent} event Browser event\n     */\n    //endregion\n\n    //region Init\n\n    construct(config) {\n        const me = this;\n\n        super.construct(config);\n\n        // Larger draggable zones on pure touch devices with no mouse\n        if (!me.handleSelector && !BrowserHelper.isHoverableDevice) {\n            me.handleSize = me.touchHandleSize;\n        }\n\n        me.handleVisibilityThreshold = me.handleVisibilityThreshold || 2 * me.handleSize;\n\n        me.initListeners();\n\n        me.initResize();\n    }\n\n    doDestroy() {\n        this.abort(true);\n        super.doDestroy();\n    }\n\n    updateSkipUpdatingElement(skip) {\n        if (skip) {\n            this.skipTranslate = true;\n        }\n    }\n\n    /**\n     * Initializes resizing\n     * @private\n     */\n    initResize() {\n        const me = this;\n\n        if (!me.isElementResizable && me.targetSelector) {\n            me.isElementResizable = element => element.closest(me.targetSelector);\n        }\n\n        if (me.grab) {\n            const { edge, element, event } = me.grab;\n\n            me.startEvent = event;\n\n            const cursorOffset = me.getCursorOffsetToElementEdge(event, element, edge);\n\n            // emulates mousedown & grabResize\n            me.context = {\n                element,\n                edge,\n                valid         : true,\n                async         : false,\n                elementStartX : DomHelper.getTranslateX(element) || element.offsetLeft, // extract x from translate\n                elementStartY : DomHelper.getTranslateY(element) || element.offsetTop, // extract x from translate\n                newX          : DomHelper.getTranslateX(element) || element.offsetLeft, // No change yet on start, but info must be present\n                newY          : DomHelper.getTranslateY(element) || element.offsetTop, // No change yet on start, but info must be present\n                elementWidth  : element.offsetWidth,\n                elementHeight : element.offsetHeight,\n                cursorOffset,\n                startX        : event.clientX + cursorOffset.x + me.scrollLeft,\n                startY        : event.clientY + cursorOffset.y + me.scrollTop,\n                finalize      : () => me.reset?.()\n            };\n\n            element.classList.add(me.resizingCls);\n\n            me.internalStartResize(me.isTouch);\n        }\n    }\n\n    /**\n     * Initialize listeners\n     * @private\n     */\n    initListeners() {\n        const\n            me = this,\n            dragStartListeners = {\n                element    : me.outerElement,\n                mousedown  : documentListeners.down,\n                touchstart : documentListeners.touchstart,\n                thisObj    : me\n            };\n\n        if (!me.handleSelector && BrowserHelper.isHoverableDevice) {\n            dragStartListeners.mousemove = {\n                handler : documentListeners.move,\n\n                // Filter events for checkResizeHandles so we only get called if the mouse\n                // is over one of our targets.\n                delegate : me.targetSelector\n            };\n\n            // We need to clean up when we exit one of our targets\n            dragStartListeners.mouseleave = {\n                handler  : 'onMouseLeaveTarget',\n                delegate : me.targetSelector,\n                capture  : true\n            };\n        }\n\n        // These will be autoDetached upon destroy\n        EventHelper.on(dragStartListeners);\n    }\n\n    get isRTL() {\n        return Boolean(this.rtlSource?.rtl);\n    }\n\n    //endregion\n\n    //region Scroll helpers\n\n    get scrollLeft() {\n        if (this.scroller) {\n            return this.scroller.x;\n        }\n\n        return this.outerElement.scrollLeft;\n    }\n\n    get scrollTop() {\n        if (this.scroller) {\n            return this.scroller.y;\n        }\n\n        return this.outerElement.scrollTop;\n    }\n\n    //endregion\n\n    //region Events\n\n    internalStartResize(isTouch) {\n        const dragListeners = {\n            element : document,\n            keydown : documentListeners.keydown,\n            thisObj : this\n        };\n\n        if (isTouch) {\n            dragListeners.touchmove = documentListeners.touchmove;\n            // Touch desktops don't fire touchend event when touch has ended, instead pointerup is fired\n            // iOS do fire touchend\n            dragListeners.touchend = dragListeners.pointerup = documentListeners.touchend;\n        }\n        else {\n            dragListeners.mousemove = documentListeners.move;\n            dragListeners.mouseup = documentListeners.up;\n        }\n\n        // A listener detacher is returned\n        this.removeDragListeners = EventHelper.on(dragListeners);\n    }\n\n    // Empty class implementation. If listeners *are* added, the detacher is added\n    // as an instance property. So this is always callable.\n    removeDragListeners() {}\n\n    reset() {\n        this.removeDragListeners?.();\n        this.context = null;\n        this.trigger('reset');\n    }\n\n    canResize(element, event) {\n        return !this.isElementResizable || this.isElementResizable(element, event);\n    }\n\n    onPointerDown(isTouch, event) {\n        const me = this;\n\n        me.startEvent = event;\n\n        if (me.canResize(event.target, event) && me.grabResizeHandle(isTouch, event)) {\n            // Stop event if resize handle was grabbed (resize started)\n            event.stopImmediatePropagation();\n            if (event.type === 'touchstart') {\n                event.preventDefault();\n            }\n            me.internalStartResize(isTouch);\n        }\n    }\n\n    onTouchStart(event) {\n        // only allowing one finger for now...\n        if (event.touches.length > 1) {\n            return;\n        }\n\n        this.onPointerDown(true, event);\n    }\n\n    /**\n     * Grab draggable element on mouse down.\n     * @private\n     * @param {MouseEvent|PointerEvent} event\n     */\n    onMouseDown(event) {\n        // only dragging with left mouse button\n        if (event.button !== 0) {\n            return;\n        }\n\n        this.onPointerDown(false, event);\n    }\n\n    internalMove(isTouch, event) {\n        const\n            me                     = this,\n            { context, direction } = me;\n\n        if (context?.element && (context.started || EventHelper.getDistanceBetween(me.startEvent, event) >= me.dragThreshold)) {\n            if (!context.started) {\n                me.scrollManager?.startMonitoring(ObjectHelper.merge({\n                    scrollables : [\n                        {\n                            element : me.dragWithin || me.outerElement,\n                            // <remove-on-release>\n                            // TODO: Update this then when we add support for resizing in both directions simultaneously\n                            // </remove-on-release>\n                            direction\n                        }\n                    ],\n                    callback : config => me.context?.element && me.lastMouseMoveEvent && me.update(me.lastMouseMoveEvent, config)\n                }, me.monitoringConfig));\n\n                me.trigger('resizeStart', { context, event });\n\n                context.started = true;\n            }\n\n            me.update(event);\n        }\n        // If a mousemove, and we are using zones, and not handles, we have to\n        // programmatically check whether we are over a handle, and add/remove\n        // classes to change the mouse cursor to resize.\n        // If we are using handles, their CSS will set the mouse cursor.\n        else if (!isTouch && !me.handleSelector) {\n            me.checkResizeHandles(event);\n        }\n    }\n\n    onTouchMove(event) {\n        this.internalMove(true, event);\n    }\n\n    /**\n     * Move grabbed element with mouse.\n     * @param {MouseEvent|PointerEvent} event\n     * @fires resizestart\n     * @private\n     */\n    onMouseMove(event) {\n        this.internalMove(false, event);\n    }\n\n    onPointerUp(isTouch, event) {\n        const\n            me      = this,\n            context = me.context;\n\n        me.removeDragListeners?.();\n\n        if (context) {\n            me.scrollManager?.stopMonitoring();\n\n            if (context.started) {\n                // Prevent the impending document click from the mouseup event from propagating\n                // into a click on our element.\n                EventHelper.on({\n                    element : document,\n                    thisObj : me,\n                    click   : documentListeners.docclick,\n                    expires : me.clickSwallowDuration, // In case a click did not ensue, remove the listener\n                    capture : true,\n                    once    : true\n                });\n            }\n            me.finishResize(event);\n        }\n        else {\n            me.reset?.();\n        }\n    }\n\n    onTouchEnd(event) {\n        this.onPointerUp(true, event);\n    }\n\n    /**\n     * Drop on mouse up (if dropped on valid target).\n     * @param {MouseEvent|PointerEvent} event\n     * @private\n     */\n    onMouseUp(event) {\n        this.onPointerUp(false, event);\n    }\n\n    /**\n     * This is a capture listener, only added during drag, which prevents a click gesture\n     * propagating from the terminating mouseup gesture\n     * @param {MouseEvent} event\n     * @private\n     */\n    onDocumentClick(event) {\n        event.stopPropagation();\n    }\n\n    /**\n     * Cancel on ESC key\n     * @param {KeyboardEvent} event\n     * @private\n     */\n    onKeyDown(event) {\n        if (event.key === 'Escape') {\n            this.abort();\n        }\n    }\n\n    //endregion\n\n    //region Grab, update, finish\n\n    /**\n     * Updates resize, called when an element is grabbed and mouse moves\n     * @private\n     * @fires resizing\n     */\n    update(event) {\n        const\n            me              = this,\n            context         = me.context,\n            parentRectangle = Rectangle.from(me.outerElement);\n\n        // Calculate the current pointer X. Do not allow overflowing either edge\n        context.currentX = Math.max(Math.min(event.clientX + context.cursorOffset.x, parentRectangle.right), parentRectangle.x) + me.scrollLeft;\n        context.currentY = Math.max(Math.min(event.clientY + context.cursorOffset.y, parentRectangle.bottom), parentRectangle.y) + me.scrollTop;\n\n        if (event) {\n            if (me.updateResize(event)) {\n                me.trigger('resizing', { context, event });\n                context.element.classList.toggle(me.invalidCls, context.valid === false);\n            }\n\n            me.lastMouseMoveEvent = event;\n        }\n    }\n\n    /**\n     * Abort dragging\n     */\n    abort(silent = false) {\n        const me = this;\n\n        me.scrollManager?.stopMonitoring?.();\n\n        if (me.context) {\n            me.abortResize(null, silent);\n        }\n        else if (!me.isDestroyed) {\n            me.reset();\n        }\n    }\n\n    /**\n     * Starts resizing, updates ResizeHelper#context with relevant info.\n     * @private\n     * @param {Boolean} isTouch\n     * @param {MouseEvent} event\n     * @returns {Boolean} True if handled, false if not\n     */\n    grabResizeHandle(isTouch, event) {\n        const me = this;\n\n        if (me.allowResize && !me.allowResize(event.target, event)) {\n            return false;\n        }\n\n        const\n            handleSelector = me.handleSelector,\n            coordsFrom = event.type === 'touchstart' ? event.changedTouches[0] : event,\n            clientX = coordsFrom.clientX,\n            clientY = coordsFrom.clientY,\n            // go up from \"handle\" to resizable element\n            element = me.targetSelector ? event.target.closest(me.targetSelector) : event.target;\n\n        if (element) {\n            let edge;\n\n            // Calculate which edge to resize\n            // If there's a handle selector, see if it's anchored on the left or the right\n            if (handleSelector) {\n                if (event.target.matches(handleSelector)) {\n                    if (me.direction === 'horizontal') {\n                        if (event.pageX < DomHelper.getPageX(element) + element.offsetWidth / 2) {\n                            edge = me.isRTL ? 'right' : 'left';\n                        }\n                        else {\n                            edge =  me.isRTL ? 'left' : 'right';\n                        }\n\n                    }\n                    else {\n                        if (event.pageY < DomHelper.getPageY(element) + element.offsetHeight / 2) {\n                            edge = 'top';\n                        }\n                        else {\n                            edge = 'bottom';\n                        }\n                    }\n                }\n                else {\n                    return false;\n                }\n            }\n            // If we're not using handles, but just active zones\n            // then test whether the event position is in an active resize zone.\n            else {\n                if (me.direction === 'horizontal') {\n                    if (me.overLeftHandle(event, element)) {\n                        edge = me.isRTL ? 'right' : 'left';\n                    }\n                    else if (me.overRightHandle(event, element)) {\n                        edge =  me.isRTL ? 'left' : 'right';\n                    }\n                }\n                else {\n                    if (me.overTopHandle(event, element)) {\n                        edge = 'top';\n                    }\n                    else if (me.overBottomHandle(event, element)) {\n                        edge = 'bottom';\n                    }\n                }\n\n                if (!edge) {\n                    me.context = null;\n                    // not over an edge, abort\n                    return false;\n                }\n            }\n\n            // If resizing is initiated by a touch, we must preventDefault on the touchstart\n            // so that scrolling is not invoked when dragging. This is in lieu of a functioning\n            // touch-action style on iOS Safari. When that's fixed, this will not be needed.\n            if (event.type === 'touchstart') {\n                event.preventDefault();\n            }\n\n            const cursorOffset = me.getCursorOffsetToElementEdge(coordsFrom, element, edge);\n\n            if (me.trigger('beforeResizeStart', { element, event }) !== false) {\n                // store initial size\n                me.context = {\n                    element,\n                    edge,\n                    isTouch,\n                    valid         : true,\n                    async         : false,\n                    direction     : me.direction,\n                    elementStartX : DomHelper.getTranslateX(element) || element.offsetLeft, // extract x from translate\n                    elementStartY : DomHelper.getTranslateY(element) || element.offsetTop, // extract y from translate\n                    newX          : DomHelper.getTranslateX(element) || element.offsetLeft, // No change yet on start, but info must be present\n                    newY          : DomHelper.getTranslateY(element) || element.offsetTop, // No change yet on start, but info must be present\n                    elementWidth  : element.offsetWidth,\n                    elementHeight : element.offsetHeight,\n                    cursorOffset,\n                    startX        : clientX + cursorOffset.x + me.scrollLeft,\n                    startY        : clientY + cursorOffset.y + me.scrollTop,\n                    finalize      : () => me.reset?.()\n                };\n\n                element.classList.add(me.resizingCls);\n\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    getCursorOffsetToElementEdge(event, element, edge) {\n        const rectEl = Rectangle.from(element);\n\n        let x = 0,\n            y = 0;\n\n        switch (edge) {\n            case 'left':\n                x = rectEl.x - (this.isRTL ? rectEl.width : 0) - event.clientX; // negative\n                break;\n            case 'right':\n                x = rectEl.x + (this.isRTL ? 0 : rectEl.width) - event.clientX; // positive\n                break;\n            case 'top':\n                y = rectEl.y - event.clientY; // negative\n                break;\n            case 'bottom':\n                y = rectEl.y + rectEl.height - event.clientY; // positive\n                break;\n        }\n\n        return { x, y };\n    }\n\n    /**\n     * Check if mouse is over a resize handle (virtual). If so, highlight.\n     * @private\n     * @param {MouseEvent} event\n     */\n    checkResizeHandles(event) {\n        const\n            me     = this,\n            target = me.targetSelector ? event.target.closest(me.targetSelector) : event.target;\n\n        // mouse over a target element and allowed to resize?\n        if (target && (!me.allowResize || me.allowResize(event.target, event))) {\n            me.currentElement = me.handleContainerSelector ? event.target.closest(me.handleContainerSelector) : event.target;\n\n            if (me.currentElement) {\n                let over;\n\n                if (me.direction === 'horizontal') {\n                    over = me.overLeftHandle(event, target) || me.overRightHandle(event, target);\n                }\n                else {\n                    over = me.overTopHandle(event, target) || me.overBottomHandle(event, target);\n                }\n\n                if (over) {\n                    me.highlightHandle(); // over handle\n                }\n                else {\n                    me.unHighlightHandle(); // not over handle\n                }\n            }\n        }\n        else if (me.currentElement) {\n            me.unHighlightHandle(); // outside element\n        }\n    }\n\n    onMouseLeaveTarget(event) {\n        const me = this;\n\n        me.currentElement = me.handleContainerSelector ? event.target.closest(me.handleContainerSelector) : event.target;\n\n        if (me.currentElement) {\n            me.unHighlightHandle();\n        }\n    }\n\n    /**\n     * Updates size of target (on mouse move).\n     * @private\n     * @param {MouseEvent|PointerEvent} event\n     */\n    updateResize(event) {\n        const\n            me = this,\n            {\n                context,\n                allowEdgeSwitch,\n                skipTranslate,\n                skipUpdatingElement\n            }  = me;\n\n        let updated;\n\n        // flip which edge is being dragged depending on whether we're to the right or left of the mousedown\n        if (allowEdgeSwitch) {\n            if (me.direction === 'horizontal') {\n                context.edge = context.currentX > context.startX ? 'right' : 'left';\n            }\n            else {\n                context.edge = context.currentY > context.startY ? 'bottom' : 'top';\n            }\n        }\n\n        const\n            {\n                element,\n                elementStartX,\n                elementStartY,\n                elementWidth,\n                elementHeight,\n                edge\n            }         = context,\n            { style } = element,\n            // limit to outerElement if set\n            deltaX    = context.currentX - context.startX,\n            deltaY    = context.currentY - context.startY,\n            minWidth  = DomHelper.getExtremalSizePX(element, 'minWidth') || me.minWidth,\n            maxWidth  = DomHelper.getExtremalSizePX(element, 'maxWidth') || me.maxWidth,\n            minHeight = DomHelper.getExtremalSizePX(element, 'minHeight') || me.minHeight,\n            maxHeight = DomHelper.getExtremalSizePX(element, 'maxHeight') || me.maxHeight,\n            // dragging the right edge right increases the width, dragging left edge right decreases width\n            sign      = (edge === 'right' && !me.isRTL) || edge === 'bottom' ? 1 : -1,\n            // new width, not allowed to go below minWidth\n            newWidth  = elementWidth + deltaX * sign,\n            newHeight = elementHeight + deltaY * sign;\n\n        let\n            width  = Math.max(minWidth, newWidth),\n            height = Math.max(minHeight, newHeight);\n\n        if (maxWidth > 0) {\n            width = Math.min(width, maxWidth);\n        }\n\n        if (maxHeight > 0) {\n            height = Math.min(height, maxHeight);\n        }\n\n        // remove flex when resizing\n        if (style.flex) {\n            style.flex = '';\n        }\n\n        if (me.direction === 'horizontal' && elementWidth !== width) {\n            if (!skipUpdatingElement) {\n                style.width = Math.abs(width) + 'px';\n            }\n            context.newWidth = width;\n\n            // when dragging left edge, also update position (so that right edge remains in place)\n            if (edge === 'left' || width < 0) {\n                const newX = Math.max(Math.min(elementStartX + elementWidth - me.minWidth, elementStartX + deltaX), 0);\n\n                if (!skipTranslate) {\n                    DomHelper.setTranslateX(element, Math.round(newX));\n                }\n\n                context.newX = newX;\n            }\n            // When dragging the right edge and we're allowed to flip the drag from left to right\n            // through the start point (eg drag event creation) the element must be at its initial X position\n            else if (edge === 'right' && allowEdgeSwitch && !skipTranslate) {\n                DomHelper.setTranslateX(element, elementStartX);\n            }\n            updated = true;\n        }\n        else if (me.direction === 'vertical' && elementHeight !== newHeight) {\n            if (!skipUpdatingElement) {\n                style.height = Math.abs(height) + 'px';\n            }\n            context.newHeight = height;\n\n            // when dragging top edge, also update position (so that bottom edge remains in place)\n            if (edge === 'top' || height < 0) {\n                context.newY = Math.max(Math.min(elementStartY + elementHeight - me.minHeight, elementStartY + deltaY), 0);\n                if (!skipTranslate) {\n                    DomHelper.setTranslateY(element, context.newY);\n                }\n            }\n            // When dragging the bottom edge and we're allowed to flip the drag from top to bottom\n            // through the start point (eg drag event creation) the element must be at its initial Y position\n            else if (edge === 'bottom' && allowEdgeSwitch && !skipTranslate) {\n                DomHelper.setTranslateY(element, elementStartY);\n            }\n            updated = true;\n        }\n\n        return updated;\n    }\n\n    /**\n     * Finalizes resize, fires drop.\n     * @private\n     * @param {MouseEvent|PointerEvent} event\n     * @fires resize\n     * @fires cancel\n     */\n    finishResize(event) {\n        const\n            me          = this,\n            context     = me.context,\n            eventObject = { context, event };\n\n        context.element.classList.remove(me.resizingCls);\n\n        if (context.started) {\n            let changed = false;\n\n            if (me.direction === 'horizontal') {\n                changed = context.newWidth && context.newWidth !== context.elementWidth;\n            }\n            else {\n                changed = context.newHeight && context.newHeight !== context.elementHeight;\n            }\n            me.trigger(changed ? 'resize' : 'cancel', eventObject);\n\n            if (!context.async) {\n                context.finalize();\n            }\n        }\n        else {\n            me.reset?.();\n        }\n    }\n\n    /**\n     * Abort resizing\n     * @private\n     * @fires cancel\n     */\n    abortResize(event = null, silent = false) {\n        const\n            me      = this,\n            context = me.context;\n\n        context.element.classList.remove(me.resizingCls);\n        if (me.direction === 'horizontal') {\n            // With these statements, no x pos is changed when resizing. Should therefor not reset it when cancelling\n            if (context.edge === 'left' || (context.allowEdgeSwitch && !context.skipTranslate)) {\n                DomHelper.setTranslateX(context.element, context.elementStartX);\n            }\n            context.element.style.width = context.elementWidth + 'px';\n        }\n        else {\n            DomHelper.setTranslateY(context.element, context.elementStartY);\n            context.element.style.height = context.elementHeight + 'px';\n        }\n\n        !silent && me.trigger('cancel', { context, event });\n\n        if (!me.isDestroyed) {\n            me.reset();\n        }\n    }\n\n    //endregion\n\n    //region Handles\n\n    // /**\n    //  * Constrain resize to outerElements bounds\n    //  * @private\n    //  * @param x\n    //  * @returns {*}\n    //  */\n    // constrainResize(x) {\n    //     const me = this;\n    //\n    //     if (me.outerElement) {\n    //         const box = me.outerElement.getBoundingClientRect();\n    //         if (x < box.left) x = box.left;\n    //         if (x > box.right) x = box.right;\n    //     }\n    //\n    //     return x;\n    // }\n\n    /**\n     * Highlights handles (applies css that changes cursor).\n     * @private\n     */\n    highlightHandle() {\n        const\n            me     = this,\n            target = me.targetSelector ? me.currentElement.closest(me.targetSelector) : me.currentElement;\n\n        // over a handle, add cls to change cursor\n        me.currentElement.classList.add('b-resize-handle');\n        target.classList.add('b-over-resize-handle');\n    }\n\n    /**\n     * Unhighlight handles (removes css).\n     * @private\n     */\n    unHighlightHandle() {\n        const\n            me = this,\n            target = me.targetSelector ? me.currentElement.closest(me.targetSelector) : me.currentElement;\n\n        target && target.classList.remove('b-over-resize-handle');\n        me.currentElement.classList.remove('b-resize-handle');\n        me.currentElement = null;\n    }\n\n    overAnyHandle(event, target) {\n        return this.overStartHandle(event, target) || this.overEndHandle(event, target);\n    }\n\n    overStartHandle(event, target) {\n        return this.direction === 'horizontal' ? this.overLeftHandle(event, target) : this.overTopHandle(event, target);\n    }\n\n    overEndHandle(event, target) {\n        return this.direction === 'horizontal' ? this.overRightHandle(event, target) : this.overBottomHandle(event, target);\n    }\n\n    getDynamicHandleSize(opposite, offsetWidth) {\n        const\n            handleCount = opposite ? 2 : 1,\n            { handleSize } = this;\n\n        // Shrink handle size when configured to do so, preserving reserved space between handles\n        if (this.dynamicHandleSize && handleSize * handleCount > offsetWidth - this.reservedSpace) {\n            return Math.max(Math.floor((offsetWidth - this.reservedSpace) / handleCount), 0);\n        }\n\n        return handleSize;\n    }\n\n    /**\n     * Check if over left handle (virtual).\n     * @private\n     * @param {MouseEvent} event MouseEvent\n     * @param {HTMLElement} target The current target element\n     * @returns {Boolean} Returns true if mouse is over left handle, otherwise false\n     */\n    overLeftHandle(event, target) {\n        const\n            me              = this,\n            { offsetWidth } = target;\n\n        if (me.leftHandle && me.canResize(target, event) && (offsetWidth >= me.handleVisibilityThreshold || me.dynamicHandleSize)) {\n            const leftHandle = Rectangle.from(target);\n\n            leftHandle.width = me.getDynamicHandleSize(me.rightHandle, offsetWidth);\n\n            return leftHandle.width > 0 && leftHandle.contains(EventHelper.getPagePoint(event));\n        }\n        return false;\n    }\n\n    /**\n     * Check if over right handle (virtual).\n     * @private\n     * @param {MouseEvent} event MouseEvent\n     * @param {HTMLElement} target The current target element\n     * @returns {Boolean} Returns true if mouse is over left handle, otherwise false\n     */\n    overRightHandle(event, target) {\n        const\n            me              = this,\n            { offsetWidth } = target;\n\n        if (me.rightHandle && me.canResize(target, event) && (offsetWidth >= me.handleVisibilityThreshold || me.dynamicHandleSize)) {\n            const rightHandle = Rectangle.from(target);\n\n            rightHandle.x = rightHandle.right - me.getDynamicHandleSize(me.leftHandle, offsetWidth);\n\n            return rightHandle.width > 0 && rightHandle.contains(EventHelper.getPagePoint(event));\n        }\n        return false;\n    }\n\n    /**\n     * Check if over top handle (virtual).\n     * @private\n     * @param {MouseEvent} event MouseEvent\n     * @param {HTMLElement} target The current target element\n     * @returns {Boolean} Returns true if mouse is over top handle, otherwise false\n     */\n    overTopHandle(event, target) {\n        const\n            me               = this,\n            { offsetHeight } = target;\n\n        if (me.topHandle && me.canResize(target, event) && (offsetHeight >= me.handleVisibilityThreshold  || me.dynamicHandleSize)) {\n            const topHandle = Rectangle.from(target);\n\n            topHandle.height = me.getDynamicHandleSize(me.bottomHandle, offsetHeight);\n\n            return topHandle.height > 0 && topHandle.contains(EventHelper.getPagePoint(event));\n        }\n        return false;\n    }\n\n    /**\n     * Check if over bottom handle (virtual).\n     * @private\n     * @param {MouseEvent} event MouseEvent\n     * @param {HTMLElement} target The current target element\n     * @returns {Boolean} Returns true if mouse is over bottom handle, otherwise false\n     */\n    overBottomHandle(event, target) {\n        const\n            me               = this,\n            { offsetHeight } = target;\n\n        if (me.bottomHandle && me.canResize(target, event) && (offsetHeight >= me.handleVisibilityThreshold  || me.dynamicHandleSize)) {\n            const bottomHandle = Rectangle.from(target);\n\n            bottomHandle.y = bottomHandle.bottom - me.getDynamicHandleSize(me.bottomHandle, offsetHeight);\n\n            return bottomHandle.height > 0 && bottomHandle.contains(EventHelper.getPagePoint(event));\n        }\n        return false;\n    }\n\n    //endregion\n}\n", "import ObjectHelper from './ObjectHelper.js';\nimport Widget from '../widget/Widget.js';\nimport Toast from '../widget/Toast.js';\nimport Mask from '../widget/Mask.js';\nimport Point from './util/Point.js';\n\n/**\n * @module Core/helper/WidgetHelper\n */\n\n/**\n * Helper for creating widgets.\n */\nexport default class WidgetHelper {\n    //region Querying\n\n    /**\n     * Returns the widget with the specified id.\n     * @param {String} Id of widget to find\n     * @returns {Core.widget.Widget} The widget if any\n     * @category Querying\n     */\n    static getById(id) {\n        return Widget.getById(id);\n    }\n\n    /**\n     * Returns the Widget which owns the passed element (or event).\n     * @param {HTMLElement|Event} element The element or event to start from\n     * @param {String|Function} [type] The type of Widget to scan upwards for. The lowercase\n     * class name. Or a filter function which returns `true` for the required Widget.\n     * @param {HTMLElement|Number} [limit] The number of components to traverse upwards to find a\n     * match of the type parameter, or the element to stop at.\n     * @returns {Core.widget.Widget} The found Widget or null.\n     * @category Querying\n     */\n    static fromElement(element, type, limit) {\n        return Widget.fromElement(element, type, limit);\n    }\n\n    //endregion\n\n    //region Widgets\n\n    /**\n     * Create a widget.\n     * @example\n     * WidgetHelper.createWidget({\n     *   type: 'button',\n     *   icon: 'user',\n     *   text: 'Edit user'\n     * });\n     * @param {ContainerItemConfig} config Widget config\n     * @returns {Core.widget.Widget} The widget\n     * @category Widgets\n     */\n    static createWidget(config = {}) {\n        return config.isWidget ? config : Widget.create(config);\n    }\n\n    /**\n     * Appends a widget (array of widgets) to the DOM tree. If config is empty, widgets are appended to the DOM. To\n     * append widget to certain position you can pass HTMLElement or its id as config, or as a config, that will be\n     * applied to all passed widgets.\n     *\n     * Usage:\n     *\n     * ```javascript\n     * // Will append button as last item to element with id 'container'\n     * let [button] = WidgetHelper.append({ type : 'button' }, 'container');\n     *\n     * // Same as above, but will add two buttons\n     * let [button1, button2] = WidgetHelper.append([\n     *     { type : 'button' },\n     *     { type : 'button' }\n     *     ], { appendTo : 'container' });\n     *\n     * // Will append two buttons before element with id 'someElement'. Order will be preserved and all widgets will have\n     * // additional class 'my-cls'\n     * let [button1, button2] = WidgetHelper.append([\n     *     { type : 'button' },\n     *     { type : 'button' }\n     *     ], {\n     *         insertBefore : 'someElement',\n     *         cls          : 'my-cls'\n     *     });\n     * ```\n     *\n     * @param {ContainerItemConfig|ContainerItemConfig[]} widget Widget config or array of such configs\n     * @param {HTMLElement|String|Object} [config] Element (or element id) to which to append the widget or config to\n     * apply to all passed widgets\n     * @returns {Core.widget.Widget[]} Array or widgets\n     * @category Widgets\n     */\n    static append(widget, config) {\n        widget = Array.isArray(widget) && widget || [widget];\n\n        if (config instanceof HTMLElement || typeof config === 'string') {\n            config = {\n                appendTo : config\n            };\n        }\n\n        // We want to fix position to insert into to keep order of passed widgets\n        if (config.insertFirst) {\n            const target = typeof config.insertFirst === 'string' ? document.getElementById(config.insertFirst) : config.insertFirst;\n\n            if (target.firstChild) {\n                config.insertBefore = target.firstChild;\n            }\n            else {\n                config.appendTo = target;\n            }\n        }\n\n        return widget.map(item => Widget.create(ObjectHelper.assign({}, config || {}, item)));\n    }\n\n    //endregion\n\n    //region Popups\n\n    /**\n     * Shows a popup (~tooltip) containing widgets connected to specified element.\n     * @example\n     * WidgetHelper.openPopup(element, {\n     *   position: 'bottom center',\n     *   items: [\n     *      { widgetConfig }\n     *   ]\n     * });\n     * @param {HTMLElement} element Element to connect popup to\n     * @param {PopupConfig} config Config object, or string to use as html in popup\n     * @returns {*|{close, widgets}}\n     * @category Popups\n     */\n    static openPopup(element, config) {\n        return Widget.create(ObjectHelper.assign({\n            forElement : element\n        }, typeof config === 'string' ? {\n            html : config\n        } : config), 'popup');\n    }\n\n    /**\n     * Shows a context menu connected to the specified element.\n     * @example\n     * WidgetHelper.showContextMenu(element, {\n     *   items: [\n     *      { id: 'addItem', icon: 'add', text: 'Add' },\n     *      ...\n     *   ],\n     *   onItem: item => alert('Clicked ' + item.text)\n     * });\n     * @param {HTMLElement|Number[]} element Element (or a coordinate) to show the context menu for\n     * @param {MenuItemConfig} config Context menu config, see example\n     * @returns {Core.widget.Menu}\n     * @category Popups\n     */\n    static showContextMenu(element, config) {\n        const me = this;\n\n        if (me.currentContextMenu) {\n            me.currentContextMenu.destroy();\n        }\n\n        if (element instanceof HTMLElement) {\n            config.forElement = element;\n        }\n        else {\n            config.forElement = document.body;\n            if (Array.isArray(element)) {\n                element = new Point(...element);\n            }\n            if (element instanceof Point) {\n                config.align = {\n                    position : element\n                };\n            }\n        }\n        config.internalListeners = { destroy : me.currentContextMenu = null };\n\n        return me.currentContextMenu = Widget.create(config, 'menu');\n    }\n\n    /**\n     * Attached a tooltip to the specified element.\n     * @example\n     * WidgetHelper.attachTooltip(element, {\n     *   text: 'Useful information goes here'\n     * });\n     * @param {HTMLElement} element Element to attach tooltip for\n     * @param {String|TooltipConfig} configOrText Tooltip config or tooltip string, see example and source\n     * @returns {HTMLElement} The passed element\n     * @category Popups\n     */\n    static attachTooltip(element, configOrText) {\n        return Widget.attachTooltip(element, configOrText);\n    }\n\n    /**\n     * Checks if element has tooltip attached\n     *\n     * @param {HTMLElement} element Element to check\n     * @returns {Boolean}\n     * @category Popups\n     */\n    static hasTooltipAttached(element) {\n        return Widget.resolveType('tooltip').hasTooltipAttached(element);\n    }\n\n    /**\n     * Destroys any tooltip attached to an element, removes it from the DOM and unregisters any tip related listeners\n     * on the element.\n     *\n     * @param {HTMLElement} element Element to remove tooltip from\n     * @category Popups\n     */\n    static destroyTooltipAttached(element) {\n        return Widget.resolveType('tooltip').destroyTooltipAttached(element);\n    }\n\n    //endregion\n\n    //region Mask\n\n    /**\n     * Masks the specified element, showing a message in the mask.\n     * @param {HTMLElement} element Element to mask\n     * @param {String} msg Message to show in the mask\n     * @category Mask\n     */\n    static mask(element, msg = 'Loading') {\n        if (element) {\n            // Config object normalization\n            if (element instanceof HTMLElement) {\n                element = {\n                    target : element,\n                    text   : msg\n                };\n            }\n\n            return Mask.mask(element, element.target);\n        }\n    }\n\n    /**\n     * Unmask the specified element.\n     * @param {HTMLElement} element\n     * @category Mask\n     */\n    static unmask(element, close = true) {\n        if (element.mask) {\n            if (close) {\n                element.mask.close();\n            }\n            else {\n                element.mask.hide();\n            }\n        }\n    }\n\n    //endregion\n\n    //region Toast\n\n    /**\n     * Show a toast\n     * @param {String} msg message to show in the toast\n     * @category Mask\n     */\n    static toast(msg) {\n        return Toast.show(msg);\n    }\n\n    //endregion\n}\n", "const hasOwnProperty = Object.prototype.hasOwnProperty;\n\nlet cacheKey = null;\n\nfunction setParser(me, parser) {\n    Object.defineProperty(me, 'parser', {\n        value : parser\n    });\n\n    return parser;\n}\n\nclass Default {\n    constructor(formatter) {\n        this.formatter = formatter;\n    }\n\n    format(value) {\n        return this.formatter.defaultFormat(value);\n    }\n\n    parse(value, strict) {\n        return this.formatter.defaultParse(value, strict);\n    }\n\n    resolvedOptions() {\n        return null;\n    }\n}\n\n// This class does not extend Core.Base because instances are not reconfigurable (making\n// setConfig harmful) nor destroyable. Instead, they get frozen and cached according to\n// their \"config\" definition.\n/**\n * Abstract base class for formatters.\n * @private\n */\nexport default class Formatter {\n    static get(format) {\n        if (format == null) {\n            return this.NULL;\n        }\n        if (format instanceof this) {\n            return format;\n        }\n\n        const\n            key = (typeof format === 'string') ? format : JSON.stringify(format),\n            cache = this.cache;\n\n        let fmt = cache.get(key);\n\n        if (!fmt) {\n            cacheKey = key;  // this is grabbed by our constructor below...\n            fmt = new this(format);\n\n            cache.set(key, fmt);\n        }\n\n        return fmt;\n    }\n\n    static get cache() {\n        return (hasOwnProperty.call(this, '_cache') && this._cache) || (this._cache = new Map());\n    }\n\n    static get NULL() {\n        return hasOwnProperty.call(this, '_null') ? this._null : (this._null = new this(null));\n    }\n\n    constructor(config) {\n        const me = this;\n\n        // This is done in a funny way so as not to complicate the derived constructor's\n        // desire to maintain a single argument signature, as well as it's calling of\n        // Object.freeze() to ensure immutability in dev mode.\n        me.cacheKey = cacheKey;\n\n        cacheKey = null;\n\n        me.initialize();\n\n        if (config === null) {\n            me.formatter = new Default(me);\n        }\n        else {\n            me.configure(config);\n\n            // Bring locale and other defaulted options back onto this object:\n            for (const [key, value] of Object.entries(me.resolvedOptions())) {\n                // For some reason (locale-specific perhaps), resolvedOptions returns\n                // with 'undefined' in some keys (e.g., min/maximumFractionDigits) when\n                // we specified 0.\n                //\n                // The second check is to only bring back values that we understand.\n                if (value != null && (key in me.defaults)) {\n                    me[key] = value;\n                }\n            }\n        }\n    }\n\n    get parser() {\n        // Replace this property w/the actual instance:\n        return setParser(this, new this.constructor.Parser(this));\n    }\n\n    defaultFormat(value) {\n        return (value == null) ? value : String(value);\n    }\n\n    defaultParse(value) {\n        return value;\n    }\n\n    format(value) {\n        return (value == null) ? value : this.formatter.format(value);\n    }\n\n    parse(value, strict) {\n        return (value == null) ? value : this.parser.parse(value, strict);\n    }\n\n    parseStrict(value) {\n        return this.parse(value, true);\n    }\n\n    resolvedOptions() {\n        return this.formatter.resolvedOptions();\n    }\n}\n", "import Formatter from './Formatter.js';\nimport StringHelper from '../StringHelper.js';\nimport LocaleManager from '../../localization/LocaleManager.js';\nimport '../../localization/En.js';\n\n/**\n * @module Core/helper/util/NumberFormat\n */\n\nconst\n    escapeRegExp = StringHelper.escapeRegExp,\n    digitsRe = /[\\d+-]/g,\n    // We cannot pass locale=null:\n    newFormatter = (locale, config) => new Intl.NumberFormat(locale || undefined, config),\n    numFormatRe = /^(?:([$])\\s*)?(?:(\\d+)>)?\\d+(,\\d+)?(?:\\.((\\d*)(?:#*)|[*]))?(?:\\s*([%])?)?$/,\n    unicodeMinus = '\\u2212';\n\nclass NumberParser {\n    constructor(formatter) {\n        const\n            me = this,\n            locale = formatter.locale,\n            // We need a formatter for this locale that has decimals and grouping:\n            numFmt = newFormatter(locale, {\n                maximumFractionDigits : 3\n            }),\n            currency = formatter.is.currency ? me._decodeStyle(locale, {\n                style           : 'currency',\n                currency        : formatter.currency,\n                currencyDisplay : formatter.currencyDisplay\n            }) : null,\n            percent = formatter.is.percent ? me._decodeStyle(locale, {\n                style : 'percent'\n            }) : null,\n            decimal = numFmt.format(1.2).replace(digitsRe, '')[0],\n            grouper = numFmt.format(1e9).replace(digitsRe, '')[0] || '';\n\n        Object.assign(me, { currency, decimal, formatter, grouper, percent });\n\n        me.decimal = decimal;\n        me.decimalRe = escapeRegExp(decimal, 'g');\n        me.grouper = grouper;\n\n        // The stripRe removes whitespace, currency text, percent text and grouping chars:\n        me.stripRe = new RegExp(\n            `(?:\\\\s+|${escapeRegExp(grouper)})` +\n            (currency ? `|(?:${escapeRegExp(currency.text)})` : '') +\n            (percent ? `|(?:${escapeRegExp(percent.text)})` : ''),\n            'g');\n\n        //<debug>\n        Object.freeze(me);\n        Object.freeze(currency);\n        Object.freeze(percent);\n        //</debug>\n    }\n\n    decimalPlaces(value) {\n        value = value.replace(this.stripRe, '');\n\n        const dot = value.indexOf(this.decimal) + 1;\n\n        return dot && (value.length - dot);\n    }\n\n    parse(value, strict) {\n        if (typeof value === 'string') {\n            value = value.replace(this.stripRe, '').replace(this.decimalRe, '.').replace(unicodeMinus, '-');\n\n            value = strict ? Number(value) : parseFloat(value);\n\n            if (this.formatter.is.percent) {\n                value /= 100;\n            }\n        }\n        // else, a number is already parsed but could be null...\n\n        return value;\n    }\n\n    _decodeStyle(locale, fmtDef) {\n        const\n            fmt = newFormatter(locale, fmtDef),\n            decFmt = newFormatter(locale, Object.assign(\n                fmt.resolvedOptions(),\n                { style : 'decimal' }\n            )),\n            zero = fmt.format(0),  // = '0%' or '$0.00' in en-US\n            zeroDec = decFmt.format(0);  // = '0' or '0.00' in en-US\n\n        return {\n            suffix : zero.startsWith(zeroDec),\n            text   : zero.replace(zeroDec, '').trim()\n        };\n    }\n}\n\n/**\n * This class is an enhancement to `Intl.NumberFormat` that has a more flexible\n * constructor as well as other features such as `parse()`.\n *\n * All constructor forms take a single argument. The most common is to pass a format\n * {@link #config-template} string:\n *```\n *  const formatter = new NumberFormat('9,999.99##');\n *```\n * The above is equivalent to:\n *```\n *  const formatter = new Intl.NumberFormat({\n *      useGrouping           : true,\n *      minimumFractionDigits : 2,\n *      maximumFractionDigits : 4\n *  });\n *```\n * The `formatter` created above is used as follows (in the `en-US` locale):\n *```\n *  console.log(formatter.format(12345.54321));\n *  console.log(formatter.format(42));\n *\n *  // 12,345.5432\n *  // 42.00\n *```\n * When a format template is insufficient, a config object can be provided, similar to\n * `Intl.NumberFormat`'s `options` parameter. While all options from `Intl.NumberFormat`\n * are valid properties for this class's config object, additional properties are\n * supported.\n *\n * For example:\n *```\n *  new NumberFormat({\n *      locale      : 'en-US',\n *      template    : '$9,999',\n *      currency    : 'USD',\n *      significant : 5\n *  });\n *```\n * The `locale` option takes the place of the first positional parameter to the\n * `Intl.NumberFormat` constructor. The `template` config is the same string that can be\n * passed by itself.\n *\n * The shorthand properties `fraction`, `integer`, and `significant` set the standard\n * options `minimumFractionDigits`, `maximumFractionDigits`, `minimumIntegerDigits`,\n * `minimumSignificantDigits`, and `maximumSignificantDigits`.\n *\n * NOTE: Instances of `NumberFormat` are immutable after construction.\n *\n * For details about `Intl.NumberFormat` see [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NumberFormat).\n */\nexport default class NumberFormat extends Formatter {\n\n    // <debug>\n    // region Localization test\n    static localization = [\n        'L{locale}',\n        'L{currency}'\n    ];\n    // endregion\n    // </debug>\n\n    static get $name() {\n        return 'NumberFormat';\n    }\n\n    //<debug>\n    constructor(options) {\n        super(options);\n\n        this.parse('0');  // throw away parse just to get us freezable\n\n        Object.freeze(this.is);\n        Object.freeze(this);\n    }\n    //</debug>\n\n    initialize() {\n        this._as = {\n            // cacheKey : cachedInstance\n        };\n\n        this.is = {\n            decimal  : false,\n            currency : false,\n            percent  : false,\n            null     : true,\n            from     : null\n        };\n    }\n\n    get truncator() {\n        const scale = this.maximumFractionDigits;\n\n        return (scale == null)\n            ? null\n            : this.as({ style : 'decimal', maximumFractionDigits : Math.min(20, scale + 1) }, 'truncator');\n    }\n\n    configure(options) {\n        const me = this;\n\n        if (typeof options !== 'string') {\n            Object.assign(me, options);\n        }\n        else {\n            me.template = options;\n        }\n\n        const\n            config = {},\n            loc = me.locale ? LocaleManager.locales[me.locale] : LocaleManager.locale,\n            defaults = loc && loc.NumberFormat,\n            template = me.template;\n\n        if (defaults) {\n            for (const key in defaults) {\n                if (me[key] == null && typeof defaults[key] !== 'function') {\n                    me[key] = defaults[key];\n                }\n            }\n        }\n\n        if (template) {\n            const\n                match = numFormatRe.exec(template),\n                m2 = match[2],\n                m4 = match[4];\n\n            me.useGrouping = !!match[3];\n            me.style = match[1] ? 'currency' : (match[6] ? 'percent' : 'decimal');\n\n            if (m2) {\n                me.integer = +m2;\n            }\n\n            if (m4 === '*') {\n                me.fraction = [0, 20];\n            }\n            else if (m4 != null) {\n                me.fraction = [match[5].length, m4.length];\n            }\n        }\n\n        me._minMax('fraction', true, true);\n        me._minMax('integer', true, false);\n        me._minMax('significant', false, true);\n\n        for (const key in me.defaults) {\n            if (me[key] != null) {\n                config[key] = me[key];\n            }\n        }\n\n        me.is.from = me.from && me.from.is;\n        me.is[me.style] = !(me.is.null = false);\n\n        me.formatter = newFormatter(me.locale, config);\n    }\n\n    /**\n     * Creates a derived `NumberFormat` from this instance, with a different `style`. This is useful for processing\n     * currency and percentage styles without the symbols being injected in the formatting.\n     *\n     * @param {String|Object} change The new style (if a string) or a set of properties to update.\n     * @param {String} [cacheAs] A key by which to cache this derived formatter.\n     * @returns {Core.helper.util.NumberFormat}\n     */\n    as(change, cacheAs = null) {\n        const\n            config = this.resolvedOptions() || { template : '9.*' },\n            cache = this._as;\n\n        let ret = cacheAs && cache[cacheAs];\n\n        if (!ret) {\n            if (typeof change === 'string') {\n                config.style = change;\n            }\n            else {\n                Object.assign(config, change);\n            }\n\n            config.from = this;\n\n            ret = new NumberFormat(config);\n        }\n\n        if (cacheAs) {\n            cache[cacheAs] = ret;\n        }\n\n        return ret;\n    }\n\n    defaultParse(value, strict) {\n        return (value == null) ? value : (strict ? Number(value) : parseFloat(value));\n    }\n\n    /**\n     * Returns the given `value` formatted in accordance with the specified locale and\n     * formatting options.\n     *\n     * @param {Number} value\n     * @returns {String}\n     */\n    format(value) {\n        if (typeof value === 'string') {\n            const v = Number(value);\n\n            value = isNaN(v) ? this.parse(value) : v;\n        }\n\n        return super.format(value);\n    }\n\n    // The parse() method is inherited but the base class implementation\n    // cannot properly document the parameter and return types:\n\n    /**\n     * Returns a `Number` parsed from the given, formatted `value`, in accordance with the\n     * specified locale and formatting options.\n     *\n     * If the `value` cannot be parsed, `NaN` is returned.\n     *\n     * Pass `strict` as `true` to require all text to convert. In essence, the default is\n     * in line with JavaScript's `parseFloat` while `strict=true` behaves like the `Number`\n     * constructor:\n     *```\n     *  parseFloat('1.2xx');  // = 1.2\n     *  Number('1.2xx')       // = NaN\n     *```\n     * @method parse\n     * @param {String} value\n     * @param {Boolean} [strict=false]\n     * @returns {Number}\n     */\n\n    /**\n     * Returns a `Number` parsed from the given, formatted `value`, in accordance with the\n     * specified locale and formatting options.\n     *\n     * If the `value` cannot be parsed, `NaN` is returned.\n     *\n     * This method simply passes the `value` to `parse()` and passes `true` for the second\n     * argument.\n     *\n     * @method parseStrict\n     * @param {String} value\n     * @returns {Number}\n     */\n\n    /**\n     * Returns the given `Number` rounded in accordance with the specified locale and\n     * formatting options.\n     *\n     * @param {Number|String} value\n     * @returns {Number}\n     */\n    round(value) {\n        return this.parse(this.format(value));\n    }\n\n    /**\n     * Returns the given `Number` truncated to the `maximumFractionDigits` in accordance\n     * with the specified locale and formatting options.\n     *\n     * @param {Number|String} value\n     * @returns {Number}\n     */\n    truncate(value) {\n        const\n            me = this,\n            scale = me.maximumFractionDigits,\n            { truncator } = me;\n\n        let v = me.parse(value),\n            dot;\n\n        if (truncator) {\n            v = truncator.format(v);\n            dot = v.indexOf(truncator.parser.decimal);\n\n            if (dot > -1 && v.length - dot  - 1 > scale) {\n                v = v.substr(0, dot + scale + 1);\n            }\n\n            v = truncator.parse(v);\n        }\n\n        return v;\n    }\n\n    resolvedOptions() {\n        const options = super.resolvedOptions();\n\n        for (const key in options) {\n            // For some reason, on TeamCity, tests get undefined for some properties...\n            // maybe a locale issue?\n            if (options[key] === undefined) {\n                options[key] = this[key];\n            }\n        }\n\n        return options;\n    }\n\n    /**\n     * Expands the provided shorthand into the \"minimum*Digits\" and \"maximum*Digits\".\n     * @param {String} name\n     * @param {Boolean} setMin\n     * @param {Boolean} setMax\n     * @private\n     */\n    _minMax(name, setMin, setMax) {\n        const\n            me = this,\n            value = me[name];\n\n        if (value != null) {\n            const\n                capName = StringHelper.capitalize(name),\n                max = `maximum${capName}Digits`,\n                min = `minimum${capName}Digits`;\n\n            if (typeof value === 'number') {\n                if (setMin) {\n                    me[min] = value;\n                }\n\n                if (setMax) {\n                    me[max] = value;\n                }\n            }\n            else {\n                me[min] = value[0];\n                me[max] = value[1];\n            }\n        }\n    }\n}\n\nNumberFormat.Parser = NumberParser;\n\nObject.assign(NumberFormat.prototype, {\n    // This object holds only those properties that Intl.NumberFormat accepts in its\n    // \"options\" parameter. Only these options will be copied from the NumberFormat\n    // and passed to the Intl.NumberFormat constructor and only these will be copied\n    // back from its resolvedOptions:\n    defaults : {\n        /**\n         * The formatting style.\n         *\n         * Valid values are: `'decimal'` (the default), `'currency'`, and `'percent'`.\n         * @config {'decimal'|'currency'|'percent'}\n         * @default\n         */\n        style : 'decimal',\n\n        /**\n         * The currency to use when using `style: 'currency'`. For example, `'USD'` (US dollar)\n         * or `'EUR'` for the euro.\n         *\n         * If not provided, the {@link Core.localization.LocaleManager} default will be used.\n         * @config {Boolean}\n         */\n        currency : null,\n\n        /**\n         * The format in which to display the currency value when using `style: 'currency'`.\n         *\n         * Valid values are: `'symbol'` (the default), `'code'`, and `'name'`.\n         * @config {'symbol'|'code'|'name'}\n         * @default\n         */\n        currencyDisplay : 'symbol',\n\n        /**\n         * The name of the locale. For example, `'en-US'`. This config is the same as the\n         * first argument to the `Intl.NumberFormat` constructor.\n         *\n         * Defaults to the browser's default locale.\n         * @config {String}\n         */\n        locale : null,\n\n        /**\n         * The maximum number of digits following the decimal.\n         *\n         * This is more convenient to specify using the {@link #config-fraction} config.\n         * @config {Number}\n         */\n        maximumFractionDigits : null,\n\n        /**\n         * The minimum number of digits following the decimal.\n         *\n         * This is more convenient to specify using the {@link #config-fraction} config.\n         * @config {Number}\n         */\n        minimumFractionDigits : null,\n\n        /**\n         * The minimum number of digits preceding the decimal.\n         *\n         * This is more convenient to specify using the {@link #config-integer} config.\n         * @config {Number}\n         */\n        minimumIntegerDigits : null,\n\n        /**\n         * The maximum number of significant digits.\n         *\n         * This is more convenient to specify using the {@link #config-significant} config.\n         * @config {Number}\n         */\n        maximumSignificantDigits : null,\n\n        /**\n         * The minimum number of significant digits.\n         *\n         * This is more convenient to specify using the {@link #config-significant} config.\n         * @config {Number}\n         */\n        minimumSignificantDigits : null,\n\n        /**\n         * Specify `false` to disable thousands separators.\n         * @config {Boolean}\n         * @default\n         */\n        useGrouping : true\n    },\n\n    /**\n     * Specifies the `minimumFractionDigits` and `minimumFractionDigits` in a compact\n     * way. If this value is a `Number`, it sets both the minimum and maximum to that\n     * value. If this value is an array, `[0]` sets the minimum and `[1]` sets the\n     * maximum.\n     * @config {Number|Number[]}\n     */\n    fraction : null,\n\n    from : null,\n\n    /**\n     * An alias for `minimumIntegerDigits`.\n     * @config {Number}\n     */\n    integer : null,\n\n    /**\n     * Specifies the `minimumSignificantDigits` and `minimumSignificantDigits` in a compact\n     * format. If this value is a `Number`, it sets only the maximum to that value. If this\n     * value is an array, `[0]` sets the minimum and `[1]` sets the maximum.\n     *\n     * If this value (or `minimumSignificantDigits` or `minimumSignificantDigits`) is set,\n     * `integer` (and `minimumIntegerDigits`) and `fraction` (and `minimumFractionDigits`\n     * and `minimumFractionDigits`) are ignored.\n     *\n     * @config {Number|Number[]}\n     */\n    significant : null,\n\n    /**\n     * A format template consisting of the following parts:\n     *```\n     *  [$] [\\d+:] \\d+ [,\\d+] [.\\d* [#*] | *] [%]\n     *```\n     * If the template begins with a `'$'`, the formatter's `style` option is set to\n     * `'currency'`. If the template ends with `'%'`, `style` is set to `'percent'`.\n     * It is invalid to include both characters. When using `'$'`, the `currency` symbol\n     * defaults to what is provided by the {@link Core.localization.LocaleManager}.\n     *\n     * To set the `minimumIntegerDigits`, the desired minimum comes before the first\n     * digits in the template and is followed by a `'>'` (greater-than). For example:\n     *```\n     *  5>9,999.00\n     *```\n     * The above sets `minimumIntegerDigits` to 5.\n     *\n     * The `useGrouping` option is enabled if there is a `','` (comma) present and is\n     * disabled otherwise.\n     *\n     * If there is a `'.'` (decimal) present, it may be followed by either of:\n     *\n     *  - Zero or more digits which may then be followed by zero or more `'#'` characters.\n     *    The number of digits determines the `minimumFractionDigits`, while the total\n     *    number of digits and `'#'`s determines the `maximumFractionDigits`.\n     *  - A single `'*'` (asterisk) indicating any number of fractional digits (no minimum\n     *    or maximum).\n     *\n     * @config {String}\n     */\n    template : null\n});\n\nObject.assign(NumberFormat.prototype, NumberFormat.prototype.defaults);\n\n// <remove-on-release>\n// TODO: is this the \"right\" way to do this?\n// </remove-on-release>\nFormatter.number = (format, value) => NumberFormat.format(format, value);\n", "import Base from '../Base.js';\nimport DayTime from './DayTime.js';\nimport Events from '../mixin/Events.js';\nimport DH from '../helper/DateHelper.js';\nimport ObjectHelper from '../helper/ObjectHelper.js';\n\n/**\n * @module Core/util/Month\n */\n\n/**\n * A class which encapsulates a calendar view of a month, and offers information about\n * the weeks and days within that calendar view.\n *\n * ```javascript\n *   // December 2018 using Monday as week start\n *   const m = new Month({\n *       date         : '2018-12-01',\n *       weekStartDay : 1\n *   });\n *\n *   m.eachWeek((week, dates) => console.log(dates.map(d => d.getDate())))\n * ```\n */\nexport default class Month  extends Events(Base) {\n\n    static $name = 'Month';\n\n    static get configurable() {\n        return {\n            /**\n             * The date which the month should encapsulate. May be a `Date` object, or a\n             * `YYYY-MM-DD` format string.\n             *\n             * Mutating a passed `Date` after initializing a `Month` object has no effect on\n             * the `Month` object.\n             * @config {Date|String}\n             */\n            date : {\n                $config : {\n                    equal : 'date'\n                },\n                value : DH.clearTime(new Date())\n            },\n\n            month : null,\n\n            year : null,\n\n            /**\n             * The week start day, 0 meaning Sunday, 6 meaning Saturday.\n             * Defaults to {@link Core.helper.DateHelper#property-weekStartDay-static}.\n             * @config {Number}\n             */\n            weekStartDay : null,\n\n            /**\n             * Configure as `true` to have the visibleDayColumnIndex and visibleColumnCount properties\n             * respect the configured {@link #config-nonWorkingDays}.\n             * @config {Boolean}\n             */\n            hideNonWorkingDays : null,\n\n            /**\n             * Non-working days as an object where keys are day indices, 0-6 (Sunday-Saturday), and the value is `true`.\n             * Defaults to {@link Core.helper.DateHelper#property-nonWorkingDays-static}.\n             * @config {Object<String,Boolean>}\n             */\n            nonWorkingDays : null,\n\n            /**\n             * Configure as `true` to always have the month encapsulate six weeks.\n             * This is useful for UIs which must be a fixed height.\n             * @prp {Boolean}\n             */\n            sixWeeks : null\n        };\n    }\n\n    //region events\n\n    /**\n     * Fired when setting the {@link #config-date} property causes the encapsulated date to change\n     * in **any** way, date, week, month or year.\n     * @event dateChange\n     * @param {Core.util.Month} source The Month which triggered the event.\n     * @param {Date} newDate The new encapsulated date value.\n     * @param {Date} oldDate The previous encapsulated date value.\n     * @param {Number} changes An object which contains properties which indicate what part of the date changed.\n     * @param {Boolean} changes.d True if the date changed in any way.\n     * @param {Boolean} changes.w True if the week changed (including same week in a different year).\n     * @param {Boolean} changes.m True if the month changed (including same month in a different year).\n     * @param {Boolean} changes.y True if the year changed.\n     * @param {Boolean} changes.r True if the row count (with respect to the {@link #config-sixWeeks} setting) changed.\n     */\n\n    /**\n     * Fired when setting the {@link #config-date} property causes a change of week. Note that\n     * weeks are calculated in the ISO standard form such that if there are fewer than four\n     * days in the first week of a year, then that week is owned by the previous year.\n     *\n     * The {@link #config-weekStartDay} is honoured when making this calculation and this is a\n     * locale-specific value which defaults to the ISO standard of 1 (Monday) in provided European\n     * locales and 0 (Sunday) in the provided US English locale.\n     * @event weekChange\n     * @param {Core.util.Month} source The Month which triggered the event.\n     * @param {Date} newDate The new encapsulated date value.\n     * @param {Date} oldDate The previous encapsulated date value.\n     * @param {Number} changes An object which contains properties which indicate what part of the date changed.\n     * @param {Boolean} changes.d True if the date changed in any way.\n     * @param {Boolean} changes.w True if the week changed (including same week in a different year).\n     * @param {Boolean} changes.m True if the month changed (including same month in a different year).\n     * @param {Boolean} changes.y True if the year changed.\n     * @param {Boolean} changes.r True if the row count (with respect to the {@link #config-sixWeeks} setting) changed.\n     */\n\n    /**\n     * Fired when setting the {@link #config-date} property causes a change of month. This\n     * will fire when changing to the same month in a different year.\n     * @event monthChange\n     * @param {Core.util.Month} source The Month which triggered the event.\n     * @param {Date} newDate The new encapsulated date value.\n     * @param {Date} oldDate The previous encapsulated date value.\n     * @param {Number} changes An object which contains properties which indicate what part of the date changed.\n     * @param {Boolean} changes.d True if the date changed in any way.\n     * @param {Boolean} changes.w True if the week changed (including same week in a different year).\n     * @param {Boolean} changes.m True if the month changed (including same month in a different year).\n     * @param {Boolean} changes.y True if the year changed.\n     * @param {Boolean} changes.r True if the row count (with respect to the {@link #config-sixWeeks} setting) changed.\n     */\n\n    /**\n     * Fired when setting the {@link #config-date} property causes a change of year.\n     * @event yearChange\n     * @param {Core.util.Month} source The Month which triggered the event.\n     * @param {Date} newDate The new encapsulated date value.\n     * @param {Date} oldDate The previous encapsulated date value.\n     * @param {Number} changes An object which contains properties which indicate what part of the date changed.\n     * @param {Boolean} changes.d True if the date changed in any way.\n     * @param {Boolean} changes.w True if the week changed (including same week in a different year).\n     * @param {Boolean} changes.m True if the month changed (including same month in a different year).\n     * @param {Boolean} changes.y True if the year changed.\n     * @param {Boolean} changes.r True if the row count (with respect to the {@link #config-sixWeeks} setting) changed.\n     */\n\n    //endRegion\n\n    /**\n     * For use when this Month's `weekStartDay` is non-zero.\n     *\n     * An array to map the days of the week 0-6 of this Calendar to the canonical day numbers\n     * used by the Javascript [Date](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) object.\n     * @member {Number[]} canonicalDayNumbers\n     * @readonly\n     */\n\n    /**\n     * An array to map a canonical day number to a *visible* column index.\n     * For example, if we have `weekStartDay` as Monday which is 1, and non working days as\n     * Wednesday, and `hideNonWorkingDays : true`, then the calendar would look like\n     *\n     *```\n     * ┌────┬────┬────┬────┬────┬────┐\n     * | Mo | Tu | Th | Fr | Sa | Su |\n     * └────┴────┴────┴────┴────┴────┘\n     *```\n     *\n     * So we'd need this array: `[ 5, 0, 1, undefined, 2, 3, 4]`\n     * @member {Number[]} visibleDayColumnIndex\n     * @readonly\n     */\n\n    /**\n     * An array to map a canonical day number to a 0-6 column index.\n     * For example, if we have `weekStartDay` as Monday which is 1, then the calendar would look like\n     *\n     *```\n     * ┌────┬────┬────┬────┬────┬────┬────┐\n     * | Mo | Tu | We | Th | Fr | Sa | Su |\n     * └────┴────┴────┴────┴────┴────┴────┘\n     *```\n     *\n     * So we'd need this array: `[ 6, 0, 1, 2, 3, 4, 5]`\n     * @member {Number[]} dayColumnIndex\n     * @readonly\n     */\n\n    /**\n     * The number of visible days in the week as defined by the `nonWorkingDays` and\n     * `hideNonWorkingDays` options.\n     * @member {Number} weekLength\n     * @readonly\n     */\n\n    configure(config) {\n        super.configure(config);\n\n        this.updateDayNumbers();\n\n        // The set is rejected during configuration because everything else has to be set up.\n        if (config.date) {\n            this.date = config.date;\n        }\n        this.generation = 0;\n    }\n\n    changeDate(date) {\n        // Date has to be set after we know everything else\n        if (this.isConfiguring) {\n            return;\n        }\n\n        date = typeof date === 'string' ? DH.parse(date, 'YYYY-MM-DD') : new Date(date);\n\n        if (isNaN(date)) {\n            throw new Error('Month date ingestion must be passed a Date, or a valid YYYY-MM-DD date string');\n        }\n\n        return date;\n    }\n\n    updateDate(newDate, oldDate) {\n        const\n            me            = this,\n            {\n                dayColumnIndex,\n                weekCount\n            }             = me,\n            monthStart    = DH.getFirstDateOfMonth(newDate),\n            monthEnd      = DH.getLastDateOfMonth(monthStart),\n            startWeekDay  = dayColumnIndex[monthStart.getDay()],\n            endWeekDay    = dayColumnIndex[monthEnd.getDay()],\n            yearChanged   = !oldDate || (newDate.getFullYear() !== oldDate.getFullYear()),\n            monthChanged  = !oldDate || (newDate.getMonth() !== oldDate.getMonth()),\n            // Collect changes as bitwise flags if we have any listeners:\n            // 0001 = date has changed.\n            // 0010 = week has changed.\n            // 0100 = month has changed.\n            // 1000 = year has changed.\n            // We need this because 10/1/2010 -> 10/1/2011 must fire a dateChange\n            // and a monthChange in addition to the yearChange.\n            // And 10/1/2010 -> 10/2/2010 must fire a dateChange in addition to the monthChange.\n            changes = me.eventListeners && (oldDate ? (newDate.getDate() !== oldDate.getDate()) |\n            (me.getWeekId(newDate) !== me.getWeekId(oldDate)) << 1 |\n            monthChanged << 2 |\n            yearChanged << 3 : 15);\n\n        // Keep our properties in sync with reality.\n        // Access the private properties directly to avoid recursion.\n        me._year = newDate.getFullYear();\n        me._month = newDate.getMonth();\n\n        // These comments assume ISO standard of Monday as week start day.\n        //\n        // This is the date of month that is the beginning of the first week row.\n        // So this may be -ve. Eg: for Dec 2018, Monday 26th Nov is the first\n        // cell on the calendar which is the -4th of December. Note that the 0th\n        // of December was 31st of November, so needs -4 to get back to the 26th.\n        me.startDayOfMonth = 1 - startWeekDay;\n\n        // This is the date of month that is the end of the last week row.\n        // So this may be > month end. Eg: for Dec 2018, Sunday 6th Jan is the last\n        // cell on the calendar which is the 37th of December.\n        me.endDayOfMonth = monthEnd.getDate() + (6 - endWeekDay);\n\n        if (me.sixWeeks) {\n            me.endDayOfMonth += (6 - me.weekCount) * 7;\n        }\n\n        // Calculate the start point of where we calculate weeks from if we need to.\n        // It's either the first \"weekStartDay\" in this year if this year's\n        // first week is last year's, and so should work out as zero,\n        // or the \"weekStartDay\" of the week before, so that dates in the first week\n        // the Math.floor(DH.diff(weekBase, date, 'day') / 7) calculates as 1.\n        if (!me.weekBase || yearChanged) {\n            me.calculateWeekBase();\n        }\n\n        // Allow calling code to detect whether a set date operation resulted in a change\n        // of month.\n        if (monthChanged || yearChanged) {\n            me.generation++;\n        }\n\n        if (changes) {\n            const event = {\n                newDate,\n                oldDate,\n                changes : {\n                    d : true,\n                    w : Boolean(changes & 2),\n                    m : Boolean(changes & 12),\n                    y : Boolean(changes & 8),\n                    r : me.weekCount !== weekCount\n                }\n            };\n\n            // If either date, month or year changes, we fire a dateChange\n            me.trigger('dateChange', event);\n\n            // If the week has changed, fire a weekChange\n            if (changes & 2) {\n                me.trigger('weekChange', event);\n            }\n\n            // If month or year changed, we fire a monthChange\n            if (changes & 12) {\n                me.trigger('monthChange', event);\n            }\n\n            // If the year has changed, fire a yearChange\n            if (changes & 8) {\n                me.trigger('yearChange', event);\n            }\n        }\n    }\n\n    calculateWeekBase() {\n        const\n            me      = this,\n            {\n                dayColumnIndex\n            }       = me,\n            jan1    = new Date(me.year, 0, 1),\n            dec31   = new Date(me.year, 11, 31),\n            january = me.month ? me.getOtherMonth(jan1) : me;\n\n        // First 7 days are in last week of previous year if the year\n        // starts after our 4th day of week.\n        if (me.dayColumnIndex[jan1.getDay()] > 3) {\n            // Week base is calculated from the year start\n            me.weekBase = january.startDate;\n        }\n        // First 7 days are in week 1 of this year\n        else {\n            // Week base is the start of week before\n            me.weekBase = new Date(me.year, 0, january.startDayOfMonth - 7);\n        }\n\n        const dec31Week = Math.floor(DH.diff(me.weekBase, dec31, 'day') / 7);\n\n        // Our year only has a 53rd week if 53rd week ends after our week's 3rd day\n        me.has53weeks = dec31Week === 53 && dayColumnIndex[dec31.getDay()] > 2;\n    }\n\n    /**\n     * Returns the week start date, based on the configured {@link #config-weekStartDay} of the\n     * passed week.\n     * @param {Number| Number[]} week The week number in the current year, or an array containing\n     * `[year, weekOfYear]` for any year.\n     *\n     * Week numbers greater than the number of weeks in the year just wrap into the following year.\n     */\n    getWeekStart(week) {\n        // Week number n of current year\n        if (typeof week === 'number') {\n            return DH.add(this.weekBase, Math.max(week, 1) * 7, 'day');\n        }\n\n        // Week n of year nnnn\n        const\n            me = this,\n            [year, weekOfYear] = week;\n\n        // nnnn is our year, so we know it\n        if (year === me.year) {\n            return me.getWeekStart(weekOfYear);\n        }\n\n        return me.getOtherMonth(new Date(year, 0, 1)).getWeekStart(weekOfYear);\n    }\n\n    getOtherMonth(date) {\n        const\n            me     = this,\n            result = (me === otherMonth) ? new Month(null) : otherMonth;\n\n        result.configure({\n            weekBase           : null,\n            weekStartDay       : me.weekStartDay,\n            nonWorkingDays     : me.nonWorkingDays,\n            hideNonWorkingDays : me.hideNonWorkingDays,\n            sixWeeks           : me.sixWeeks,\n            date               : new Date(date.getFullYear(), 0, 1) // Make it easy to calculate its own weekBase\n        });\n\n        result.date = date;\n\n        // in this case, the date config ignores changes w/=== getTime so we have to force the update because we\n        // also cleared weekBase above\n        result.updateDate(result.date, result.date);\n\n        return result;\n    }\n\n    changeYear(year) {\n        const newDate = new Date(this.date);\n\n        newDate.setFullYear(year);\n\n        // changeDate rejects non-changes, otherwise a change event will be emitted\n        this.date = newDate;\n    }\n\n    changeMonth(month) {\n        const newDate = new Date(this.date);\n\n        newDate.setMonth(month);\n\n        // changeDate rejects non-changes, otherwise a change event will be emitted\n        this.date = newDate;\n    }\n\n    get weekStartDay() {\n        // This trick allows our weekStartDay to float w/the locale even if the locale changes\n        return typeof this._weekStartDay === 'number' ? this._weekStartDay : DH.weekStartDay;\n    }\n\n    updateWeekStartDay() {\n        const me = this;\n\n        me.updateDayNumbers();\n\n        if (!me.isConfiguring && me.date) {\n            me.weekBase = null;  // force a calculateWeekBase\n            me.updateDate(me.date, me.date);\n        }\n        // else date will be set soon and weekBase is null so calculateWeekBase will be called by updateDate\n    }\n\n    get nonWorkingDays() {\n        return this._nonWorkingDays || DH.nonWorkingDays;\n    }\n\n    changeNonWorkingDays(nonWorkingDays) {\n        return ObjectHelper.assign({}, nonWorkingDays);\n    }\n\n    updateNonWorkingDays() {\n        this.updateDayNumbers();\n    }\n\n    updateHideNonWorkingDays() {\n        this.updateDayNumbers();\n    }\n\n    updateSixWeeks() {\n        if (!this.isConfiguring) {\n            this.updateDate(this.date, this.date);\n        }\n    }\n\n    /**\n     * The number of days in the calendar for this month. This will always be\n     * a multiple of 7, because this represents the number of calendar cells\n     * occupied by this month.\n     * @property {Number}\n     * @readonly\n     */\n    get dayCount() {\n        // So for the example month, Dec 2018 has 42 days, from Mon 26th Nov (-4th Dec) 2018\n        // to Sun 6th Jan (37th Dec) 2019\n        return (this.endDayOfMonth + 1) - this.startDayOfMonth;\n    }\n\n    /**\n     * The number of weeks in the calendar for this month.\n     * @property {Number}\n     * @readonly\n     */\n    get weekCount() {\n        return this.dayCount / 7;\n    }\n\n    /**\n     * The date of the first cell in the calendar view of this month.\n     * @property {Date}\n     * @readonly\n     */\n    get startDate() {\n        const me = this;\n\n        if (me.year != null && me.month != null && me.startDayOfMonth != null) {\n            return new Date(me.year, me.month, me.startDayOfMonth);\n        }\n    }\n\n    /**\n     * The date of the last cell in the calendar view of this month.\n     * @property {Date}\n     * @readonly\n     */\n    get endDate() {\n        const me = this;\n\n        if (me.year != null && me.month != null && me.startDayOfMonth != null) {\n            return new Date(me.year, me.month, me.endDayOfMonth);\n        }\n    }\n\n    /**\n     * Iterates through all calendar cells in this month, calling the passed function for each date.\n     * @param {Function} fn The function to call.\n     * @param {Date} fn.date The date for the cell.\n     */\n    eachDay(fn) {\n        for (let dayOfMonth = this.startDayOfMonth; dayOfMonth <= this.endDayOfMonth; dayOfMonth++) {\n            fn(new Date(this.year, this.month, dayOfMonth));\n        }\n    }\n\n    /**\n     * Iterates through all weeks in this month, calling the passed function\n     * for each week.\n     * @param {Function} fn The function to call.\n     * @param {Number[]} fn.week An array containing `[year, weekNumber]`\n     * @param {Date[]} fn.dates The dates for the week.\n     */\n    eachWeek(fn) {\n        const me = this,\n            { weekCount } = me;\n\n        for (let dayOfMonth = me.startDayOfMonth, week = 0; week < weekCount; week++) {\n            const weekDates  = [],\n                weekOfYear = me.getWeekNumber(new Date(me.year, me.month, dayOfMonth));\n\n            for (let day = 0; day < 7; day++, dayOfMonth++) {\n                weekDates.push(new Date(me.year, me.month, dayOfMonth));\n            }\n            fn(weekOfYear, weekDates);\n        }\n    }\n\n    /**\n     * Returns the week of the year for the passed date. This returns an array containing *two* values,\n     * the year **and** the week number are returned.\n     *\n     * The week number is calculated according to ISO rules, meaning that if the first week of the year\n     * contains less than four days, it is considered to be the last week of the preceding year.\n     *\n     * The configured {@link #config-weekStartDay} is honoured in this calculation. So if the weekStartDay\n     * is **NOT** the ISO standard of `1`, (Monday), then the weeks do not coincide with ISO weeks.\n     * @param {Date} date The date to calculate the week for.\n     * @returns {Number[]} A numeric array: `[year, week]`\n     */\n    getWeekNumber(date) {\n        const me = this;\n\n        date = DH.clearTime(date);\n\n        // If it's a date in another year, use our otherMonth to find the answer.\n        if (date.getFullYear() !== me.year) {\n            return me.getOtherMonth(new Date(date.getFullYear(), 0, 1)).getWeekNumber(date);\n        }\n\n        let weekNo = Math.floor(DH.diff(me.weekBase, date, 'day') / 7),\n            year = date.getFullYear();\n\n        // No week 0. It's the last week of last year\n        if (!weekNo) {\n            // Week is the week of last year's 31st Dec\n            return me.getOtherMonth(new Date(me.year - 1, 0, 1)).getWeekNumber(new Date(me.year, 0, 0));\n        }\n        // Only week 53 if year ends before our week's 5th day\n        else if (weekNo === 53 && !me.has53weeks) {\n            weekNo = 1;\n            year++;\n        }\n        // 54 wraps round to 2 of next year\n        else if (weekNo > 53) {\n            weekNo = weekNo % 52;\n        }\n\n        // Return array of year and week number\n        return [year, weekNo];\n    }\n\n    getWeekId(date) {\n        const week = this.getWeekNumber(date);\n\n        return week[0] * 100 + week[1];\n    }\n\n    getCellData(date, ownerMonth, dayTime = DayTime.MIDNIGHT) {\n        const\n            me                 = this,\n            day                = date.getDay(),\n            visibleColumnIndex = me.visibleDayColumnIndex[day],\n            isNonWorking       = me.nonWorkingDays[day],\n            isHiddenDay        = me.hideNonWorkingDays && isNonWorking;\n\n        // Automatically move to required month\n        if (date < me.startDate || date > me.endDate) {\n            me.month = date.getMonth();\n        }\n\n        return  {\n            day,\n            dayTime,\n            visibleColumnIndex,\n            isNonWorking,\n            week        : me.getOtherMonth(date).getWeekNumber(date),\n            key         : DH.format(date, 'YYYY-MM-DD'),\n            columnIndex : me.dayColumnIndex[day],\n            date        : new Date(date),\n            dayEnd      : dayTime.duration('s'),\n            tomorrow    : dayTime.dayOfDate(DH.add(date, 1, 'day')),\n\n            // These two properties are only significant when used by a CalendarPanel which encapsulates\n            // a single month.\n            isOtherMonth : Math.sign((date.getMonth() + date.getFullYear() * 12) - (ownerMonth.month + ownerMonth.year * 12)),\n            visible      : !isHiddenDay && (date >= ownerMonth.startDate && date < DH.add(ownerMonth.endDate, 1, 'day')),\n            isRowStart   : visibleColumnIndex === 0,\n            isRowEnd     : visibleColumnIndex === me.visibleColumnCount - 1\n        };\n    }\n\n    updateDayNumbers() {\n        const\n            me                    = this,\n            {\n                weekStartDay,\n                nonWorkingDays,\n                hideNonWorkingDays\n            }                     = me,\n            dayColumnIndex        = me.dayColumnIndex = [],\n            canonicalDayNumbers   = me.canonicalDayNumbers = [],\n            visibleDayColumnIndex = me.visibleDayColumnIndex = [];\n\n        // So, if they set weekStartDay to 1 meaning Monday which is ISO standard, we will\n        // have mapping of internal day number to canonical day number (as used by Date class)\n        // and to abbreviated day name like this:\n        // canonicalDayNumbers = [1, 2, 3, 4, 5, 6, 0] // Use for translation from our day number to Date class's day number\n        //\n        // Also, we need a map from canonical day number to *visible* cell index.\n        // for example, if we have weekStartDay as Monday which is 1, and non working days as\n        // Wednesday, and hideNonWorkingDays:true, then the calendar would look like\n        // +----+----+----+----+----+----+\n        // | Mo | Tu | Th | Fr | Sa | Su |\n        // +----+----+----+----+----+----+\n        //\n        // So we'd need this array\n        // [ 5, 0, 1, undefined, 2, 3, 4]\n        // Or think of it as this map:\n        // {\n        //      1 : 0,\n        //      2 : 1,\n        //      4 : 2,\n        //      5 : 3,\n        //      6 : 4,\n        //      0 : 5\n        // }\n        // To be able to ascertain the cell index directly from the canonical day number.\n        //\n        // We also need a logical column map which would be\n        // +----+----+----+----+----+----+----+\n        // | Mo | Tu | We | Th | Fr | Sa | Su |\n        // +----+----+----+----+----+----+----+\n        //\n        // So we'd need this array\n        // [ 6, 0, 1, 2, 3, 4, 5]\n        // Or think of it as this map:\n        // {\n        //      1 : 0,\n        //      2 : 1,\n        //      3 : 2\n        //      4 : 3,\n        //      5 : 4,\n        //      6 : 5,\n        //      0 : 6\n        // }\n\n        // We use this to cache the number of visible columns so that cell renderers can tell whether\n        // they are on the last visible column.\n        let visibleColumnIndex = 0;\n\n        for (let columnIndex = 0; columnIndex < 7; columnIndex++) {\n            const canonicalDay = (weekStartDay + columnIndex) % 7;\n\n            canonicalDayNumbers[columnIndex] = canonicalDay;\n            dayColumnIndex[canonicalDay] = columnIndex;\n\n            // If this day is going to have visible representation, we need to\n            // map it to a columnIndex;\n            if (!hideNonWorkingDays || !nonWorkingDays[canonicalDay]) {\n                visibleDayColumnIndex[canonicalDay] = visibleColumnIndex++;\n            }\n        }\n        me.visibleColumnCount = visibleColumnIndex;\n        me.weekLength = hideNonWorkingDays ? 7 - ObjectHelper.keys(nonWorkingDays).length : 7;\n    }\n}\n\n// Instance needed for internal tasks\nconst otherMonth = new Month(null);\n", "import Panel from './Panel.js';\nimport ArrayHelper from '../helper/ArrayHelper.js';\nimport DateHelper from '../helper/DateHelper.js';\nimport TimeZoneHelper from '../helper/TimeZoneHelper.js';\nimport Month from '../util/Month.js';\nimport Tooltip from './Tooltip.js';\nimport ObjectHelper from '../helper/ObjectHelper.js';\nimport DomHelper from '../helper/DomHelper.js';\n\n/**\n * @module Core/widget/CalendarPanel\n */\n\n/**\n * A Panel which displays a month of date cells.\n *\n * This is a base class for UI widgets like {@link Core.widget.DatePicker} which need to display a calendar layout\n * and should not be used directly.\n * @extends Core/widget/Panel\n */\nexport default class CalendarPanel extends Panel {\n    static get $name() {\n        return 'CalendarPanel';\n    }\n\n    // Factoryable type name\n    static get type() {\n        return 'calendarpanel';\n    }\n\n    static get configurable() {\n        return {\n            textContent : false,\n\n            /**\n             * Gets or sets the date that orientates the panel to display a particular month.\n             * Changing this causes the content to be refreshed.\n             * @member {Date} date\n             */\n            /**\n             * The date which this CalendarPanel encapsulates.\n             * @config {Date|String}\n             */\n            date : {\n                $config : {\n                    equal : 'date'\n                },\n                value : null\n            },\n\n            /**\n             * A {@link Core.util.Month} Month utility object which encapsulates this Panel's month\n             * and provides contextual information and navigation services.\n             * @config {Core.util.Month|MonthConfig}\n             */\n            month : {},\n\n            year : null,\n\n            /**\n             * The week start day, 0 meaning Sunday, 6 meaning Saturday.\n             * Defaults to {@link Core.helper.DateHelper#property-weekStartDay-static}.\n             * @config {Number}\n             */\n            weekStartDay : null,\n\n            /**\n             * Configure as `true` to always show a six week calendar.\n             * @config {Boolean}\n             * @default\n             */\n            sixWeeks : true,\n\n            /**\n             * Configure as `true` to show a week number column at the start of the calendar block.\n             * @deprecated Since 4.0.0. Use {@link #config-showWeekColumn} instead.\n             * @config {Boolean}\n             */\n            showWeekNumber : null,\n\n            /**\n             * Configure as `true` to show a week number column at the start of the calendar block.\n             * @config {Boolean}\n             */\n            showWeekColumn : null,\n\n            /**\n             * Either an array of `Date` objects which are to be disabled, or\n             * a function (or the name of a function), which, when passed a `Date` returns `true` if the\n             * date is disabled.\n             * @config {Function|Date[]|String}\n             */\n            disabledDates : null,\n\n            /**\n             * A function (or the name of a function) which creates content in, and may mutate a day header element.\n             * The following parameters are passed:\n             *  - cell [HTMLElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement) The header element.\n             *  - day [Number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number) The day number conforming to the specified {@link #config-weekStartDay}. Will be in the range 0 to 6.\n             *  - weekDay [Number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number) The canonical day number where Monday is 0 and Sunday is.\n             * @config {Function|String}\n             */\n            headerRenderer : null,\n\n            /**\n             * A function (or the name of a function) which creates content in, and may mutate the week cell element at the start of a week row.\n             * The following parameters are passed:\n             *  - cell [HTMLElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement) The header element.\n             *  - week [Number[]](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number) An array containing `[year, weekNumber]`.\n             * @config {Function|String}\n             */\n            weekRenderer : null,\n\n            /**\n             * A function (or the name of a function) which creates content in, and may mutate a day cell element.\n             * The following parameters are passed:\n             *  - cell [HTMLElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement) The header element.\n             *  - date [Date](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date) The date for the cell.\n             *  - day [Number](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number) The day for the cell (0 to 6 for Sunday to Saturday).\n             *  - rowIndex [Number[]](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number) The row index, 0 to month row count (6 if {@link #config-sixWeeks} is `true`).\n             *  _ row [HTMLElement](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement) The row element encapsulating the week which the cell is a part of.\n             *  - cellIndex [Number[]](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number) The cell index in the whole panel. May be from 0 to up to 42.\n             *  - columnIndex [Number[]](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number) The column index, 0 to 6.\n             *  - visibleColumnIndex [Number[]](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number) The visible column index taking hidden non working days into account.\n             * @config {Function|String}\n             */\n            cellRenderer : null,\n\n            /**\n             * Configure as `true` to render weekends as {@link #config-disabledDates}.\n             * @config {Boolean}\n             */\n            disableWeekends : null,\n\n            hideNonWorkingDays : null,\n\n            hideNonWorkingDaysCls : 'b-hide-nonworking-days',\n\n            /**\n             * Non-working days as an object where keys are day indices, 0-6 (Sunday-Saturday), and the value is `true`.\n             * Defaults to {@link Core.helper.DateHelper#property-nonWorkingDays-static}.\n             * @config {Object<Number,Boolean>}\n             */\n            nonWorkingDays : null,\n\n            /**\n             * A config object to create a tooltip which will show on hover of a date cell including disabled, weekend,\n             * and \"other month\" cells.\n             *\n             * It is the developer's responsibility to hook the `beforeshow` event to either veto the show by returning\n             * `false` or provide contextual content for the date.\n             *\n             * The tip instance will be primed with a `date` property.\n             * @config {TooltipConfig}\n             */\n            tip : null,\n\n            dayCellCls   : 'b-calendar-cell',\n            dayHeaderCls : 'b-calendar-day-header',\n\n            /**\n             * The class name to add to disabled calendar cells.\n             * @config {String}\n             * @private\n             */\n            disabledCls : 'b-disabled-date',\n\n            /**\n             * The class name to add to calendar cells which are in the previous or next month.\n             * @config {String}\n             * @private\n             */\n            otherMonthCls : 'b-other-month',\n\n            /**\n             * The class name to add to calendar cells which are weekend dates.\n             * @config {String}\n             * @private\n             */\n            weekendCls : 'b-weekend',\n\n            /**\n             * The class name to add to the calendar cell which contains today's date.\n             * @config {String}\n             * @private\n             */\n            todayCls : 'b-today',\n\n            /**\n             * The class name to add to calendar cells which are {@link #config-nonWorkingDays}.\n             * @config {String}\n             * @private\n             */\n            nonWorkingDayCls : 'b-nonworking-day',\n\n            /**\n             * The {@link Core.helper.DateHelper} format string to format the day names\n             * in the header row above the calendar cells.\n             * @config {String}\n             * @default\n             */\n            dayNameFormat : 'ddd',\n\n            /**\n             * By default, week rows flex to share available Panel height equally.\n             *\n             * Set this config if the available height is too small, and the cell height needs\n             * to be larger to show events.\n             *\n             * Setting this config causes the month grid to become scrollable in the `Y` axis.\n             *\n             * May be specified as a number in which case it will be taken to mean pixels,\n             * or a length in standard CSS units.\n             * @config {Number|String}\n             */\n            minRowHeight : {\n                $config : ['lazy'],\n                value   : null\n            },\n\n            /**\n             * By default, day cells flex to share available Panel width equally.\n             *\n             * Set this config if the available width is too small, and the cell width needs\n             * to be larger to show events.\n             *\n             * Setting this config causes the month grid to become scrollable in the `X` axis.\n             * @config {Number}\n             */\n            minColumnWidth : {\n                $config : ['lazy'],\n                value   : null\n            },\n\n            /**\n             * Configure this as true to disable pointer interaction with cells which are outside the\n             * range of the current month.\n             * @config {Boolean}\n             */\n            disableOtherMonthCells : null,\n\n            disableOtherMonthCellsCls : 'b-disable-othermonth-cells',\n\n            /**\n             * Configure this as `true` to hide cells which are outside the range of the current month.\n             * @config {Boolean}\n             */\n            hideOtherMonthCells : null,\n\n            hideOtherMonthCellsCls : 'b-hide-othermonth-cells',\n\n            /**\n             * By default, when navigating through time, the next time\n             * block will be animated in from the appropriate direction.\n             *\n             * Configure this as `false` to disable this.\n             * @prp {Boolean} animateTimeShift\n             * @default\n             */\n            animateTimeShift : true\n        };\n    }\n\n    construct(config) {\n        super.construct(config);\n\n        if (!this.refreshCount) {\n            this.refresh();\n        }\n    }\n\n    onPaint({ firstPaint }) {\n        super.onPaint?.(...arguments);\n\n        // Invoke the lazy configs when we first hit the visible DOM\n        if (firstPaint) {\n            // The cell structure must exist for the configs to apply to.\n            if (!this.refreshCount) {\n                this.refresh();\n            }\n            this.getConfig('minColumnWidth');\n            this.getConfig('minRowHeight');\n        }\n    }\n\n    get overflowElement() {\n        return this.weeksElement;\n    }\n\n    doDestroy() {\n        this.tip?.destroy();\n\n        super.doDestroy();\n    }\n\n    changeMinRowHeight(minRowHeight) {\n        // Fall back to 75 on platforms that do not support CSS vars\n        const minValue = parseInt(DomHelper.getStyleValue(this.element, '--min-row-height'), 10) || 75;\n\n        return isNaN(minRowHeight) ? minRowHeight : Math.max(parseInt(minRowHeight) || 0, minValue);\n    }\n\n    updateMinRowHeight(minRowHeight) {\n        this.weekElements.forEach(w => DomHelper.setLength(w, 'minHeight', minRowHeight));\n\n        this.scrollable = {\n            overflowY : minRowHeight ? 'auto' : false\n        };\n    }\n\n    changeMinColumnWidth(minColumnWidth) {\n        // Fall back to 75 on platforms that do not support CSS vars\n        const minValue = parseInt(DomHelper.getStyleValue(this.element, '--min-column-width'), 10) || 75;\n\n        return minColumnWidth == null ? minColumnWidth : Math.max(parseInt(minColumnWidth) || 0, minValue);\n    }\n\n    updateMinColumnWidth(minColumnWidth) {\n        const me = this;\n\n        me.weekdayCells.forEach(c => DomHelper.setLength(c, 'minWidth', minColumnWidth));\n        me.cellElements.forEach(c => c.matches(`.${me.dayCellCls}`) && DomHelper.setLength(c, 'minWidth', minColumnWidth));\n\n        me.scrollable = {\n            overflowX : minColumnWidth ? 'auto' : false\n        };\n        me.overflowElement.classList[minColumnWidth ? 'add' : 'remove']('b-min-columnwidth');\n    }\n\n    getDateFromDomEvent(domEvent) {\n        const element = (domEvent.nodeType === Element.ELEMENT_NODE ? domEvent : domEvent.target).closest(`#${this.id} [data-date]`);\n\n        if (element) {\n            return DateHelper.parseKey(element.dataset.date);\n        }\n    }\n\n    changeTip(tip, existingTip) {\n        const me = this;\n\n        return Tooltip.reconfigure(existingTip, tip, {\n            owner    : me,\n            defaults : {\n                type        : 'tooltip',\n                owner       : me,\n                id          : `${me.id}-cell-tip`,\n                forElement  : me.bodyElement,\n                forSelector : `.${me.dayCellCls}`\n            }\n        });\n    }\n\n    updateTip(tip) {\n        this.detachListeners('tip');\n\n        tip?.ion({\n            pointerOver : 'onTipOverCell',\n\n            name    : 'tip',\n            thisObj : this\n        });\n    }\n\n    updateElement(element, was) {\n        const me = this;\n\n        super.updateElement(element, was);\n\n        me.updateHideNonWorkingDays(me.hideNonWorkingDays);\n        me.weekdayCells = Array.from(element.querySelectorAll('.b-calendar-day-header'));\n        me.weekElements = Array.from(element.querySelectorAll('.b-calendar-week'));\n        me.weekDayElements = Array.from(element.querySelectorAll('.b-calendar-days'));\n        me.cellElements = [];\n\n        for (let i = 0, { length } = me.weekDayElements; i < length; i++) {\n            me.cellElements.push(me.weekDayElements[i].previousSibling, ...me.weekDayElements[i].children);\n        }\n    }\n\n    changeDate(date) {\n        date = typeof date === 'string' ? DateHelper.parse(date) : new Date(date);\n        if (isNaN(date)) {\n            throw new Error('CalendarPanel date ingestion must be passed a Date, or a YYYY-MM-DD date string');\n        }\n\n        return DateHelper.clearTime(date);\n    }\n\n    /**\n     * The date which this CalendarPanel encapsulates. Setting this causes the\n     * content to be refreshed.\n     * @property {Date}\n     */\n    updateDate(value) {\n        // We respond to Month change events to update the UI\n        this.month.date = value;\n    }\n\n    updateDayNameFormat() {\n        // 4th June 2000 was a Sunday\n        const d = new Date('2000-06-04T12:00:00');\n\n        this.shortDayNames = [];\n\n        // Collect local shortDayNames in default order.\n        for (let date = 4; date < 11; date++) {\n            d.setDate(date);\n            this.shortDayNames.push(DateHelper.format(d, this.dayNameFormat));\n        }\n    }\n\n    get weekStartDay() {\n        // This trick allows our weekStartDay to float w/the locale even if the locale changes\n        return typeof this._weekStartDay === 'number' ? this._weekStartDay : DateHelper.weekStartDay;\n    }\n\n    /**\n     * Set to 0 for Sunday (the default), 1 for Monday etc.\n     *\n     * Set to `null` to use the default value from {@link Core/helper/DateHelper}.\n     */\n    updateWeekStartDay(weekStartDay) {\n        const me = this;\n\n        if (me._month) {\n            me.month.weekStartDay = weekStartDay;\n\n            me.dayNames = [];\n\n            // So, if they set weekStartDay to 1 meaning Monday which is ISO standard, we will\n            // dayNames = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']\n            for (let i = 0; i < 7; i++) {\n                me.dayNames[i] = me.shortDayNames[me.canonicalDayNumbers[i]];\n            }\n\n            if (me.refreshCount) {\n                me.refresh();\n            }\n        }\n    }\n\n    updateHideNonWorkingDays(hideNonWorkingDays) {\n        // Undefined must be cast to Boolean, otherwise it will toggle the class *on*.\n        this.contentElement.classList.toggle(this.hideNonWorkingDaysCls, Boolean(hideNonWorkingDays));\n        this.scrollable?.syncOverflowState();\n        if (this._month) {\n            this.month.hideNonWorkingDays = hideNonWorkingDays;\n        }\n        // First/last visible cell might change\n        if (!this.isConfiguring) {\n            this.refresh();\n        }\n    }\n\n    updateHideOtherMonthCells(hideOtherMonthCells) {\n        // Undefined must be cast to Boolean, otherwise it will toggle the class *on*.\n        this.element.classList.toggle(this.hideOtherMonthCellsCls, Boolean(hideOtherMonthCells));\n        this.scrollable?.syncOverflowState();\n    }\n\n    updateDisableOtherMonthCells(disableOtherMonthCells) {\n        // Undefined must be cast to Boolean, otherwise it will toggle the class *on*.\n        this.element.classList.toggle(this.disableOtherMonthCellsCls, Boolean(disableOtherMonthCells));\n        this.scrollable?.syncOverflowState();\n    }\n\n    get nonWorkingDays() {\n        // If we were not configured with non working days, ask the locale for them. Once.\n        // The cached value is cleared on locale change.\n        return this._nonWorkingDays || (this._localeNonWorkingDays || (this._localeNonWorkingDays = DateHelper.nonWorkingDays));\n    }\n\n    get weekends() {\n        // Ask the DateHelper which days are weekend days only once.\n        // The cached value is cleared on locale change.\n        return this._localeWeekends || (this._localeWeekends = DateHelper.weekends);\n    }\n\n    changeNonWorkingDays(nonWorkingDays) {\n        return ObjectHelper.assign({}, nonWorkingDays);\n    }\n\n    updateNonWorkingDays(nonWorkingDays) {\n        if (this._month) {\n            this.month.nonWorkingDays = nonWorkingDays;\n            this.refresh();\n            this.scrollable?.syncOverflowState();\n        }\n    }\n\n    get visibleDayColumnIndex() {\n        return this.month.visibleDayColumnIndex;\n    }\n\n    get dayColumnIndex() {\n        return this.month.dayColumnIndex;\n    }\n\n    get canonicalDayNumbers() {\n        return this.month.canonicalDayNumbers;\n    }\n\n    get visibleColumnCount() {\n        return this.month.visibleColumnCount;\n    }\n\n    get weekLength() {\n        return this.month.weekLength;\n    }\n\n    /**\n     * The date of the first day cell in this panel.\n     * Note that this may *not* be the first of this panel's current month.\n     * @property {Date}\n     * @readonly\n     */\n    get startDate() {\n        return this.month.startDate;\n    }\n\n    get duration() {\n        // The endDate is \"exclusive\" because it means 00:00:00 of that day.\n        return DateHelper.diff(this.month.startDate, this.month.endDate, 'day') + 1;\n    }\n\n    /**\n     * The end date of this view. Note that in terms of full days, this is exclusive,\n     * ie: 2020-01-012 to 2020-01-08 is *seven* days. The end is 00:00:00 on the 8th.\n     *\n     * Note that this may *not* be the last date of this panel's current month.\n     * @property {Date}\n     * @readonly\n     */\n    get endDate() {\n        const { endDate } = this.month;\n\n        if (endDate) {\n            return DateHelper.add(endDate, 1, 'day');\n        }\n    }\n\n    changeMonth(month, currentMonth) {\n        const me = this;\n\n        if (!(month instanceof Month)) {\n\n            // Setting month to a number when we already have a Month means\n            // just updating the month number of our Month\n            if (typeof month === 'number') {\n                if (currentMonth) {\n                    currentMonth.month = month;\n                    return;\n                }\n                const date = me.date || DateHelper.clearTime(new Date());\n\n                date.setMonth(month);\n                month = {\n                    date\n                };\n            }\n            month = Month.new({\n                weekStartDay       : me.weekStartDay,\n                nonWorkingDays     : me.nonWorkingDays,\n                hideNonWorkingDays : me.hideNonWorkingDays,\n                sixWeeks           : me.sixWeeks\n            }, month);\n        }\n\n        month.ion({\n            dateChange : 'onMonthDateChange',\n            thisObj    : me\n        });\n\n        return month;\n    }\n\n    onMonthDateChange({ source : month, newDate, oldDate, changes }) {\n        const me = this;\n\n        // Ensure we're always in sync with the data our Month holds\n        me.year = month.year;\n\n        if (!me.isConfiguring) {\n            // Only refresh if we don't contain a cell for the new date\n            // or if, internally, the Month we are mapping to the UI is different.\n            if (!me.getCell(newDate) || (changes.m || changes.y)) {\n                me.refresh();\n\n                if (me.animateTimeShift && me.isVisible) {\n                    DomHelper.slideIn(me.contentElement, newDate > oldDate ? 1 : -1);\n                }\n            }\n\n            /**\n             * Fires when the date of this CalendarPanel is set.\n             * @event dateChange\n             * @param {Date} value The new date.\n             * @param {Date} oldValue The old date.\n             * @param {Object} changes An object which contains properties which indicate what part of the date changed.\n             * @param {Boolean} changes.d True if the date changed in any way.\n             * @param {Boolean} changes.w True if the week changed (including same week in a different year).\n             * @param {Boolean} changes.m True if the month changed (including same month in a different year).\n             * @param {Boolean} changes.y True if the year changed.\n             */\n            me.trigger('dateChange', {\n                changes,\n                value    : newDate,\n                oldValue : oldDate\n            });\n        }\n    }\n\n    updateYear(year) {\n        this.month.year = year;\n    }\n\n    updateShowWeekNumber(showWeekNumber) {\n        this.updateShowWeekColumn(showWeekNumber);\n    }\n\n    updateShowWeekColumn(showWeekColumn) {\n        const me = this;\n\n        me.element.classList[showWeekColumn ? 'add' : 'remove']('b-show-week-column');\n        if (me.floating) {\n            // Must realign because content change might change dimensions\n            if (!me.isAligning) {\n                me.realign();\n            }\n        }\n    }\n\n    updateSixWeeks(sixWeeks) {\n        if (this.month) {\n            this.month.sixWeeks = sixWeeks;\n            this.refresh();\n        }\n    }\n\n    /**\n     * Refreshes the UI after changing a config that would affect the UI.\n     */\n    refresh() {\n        // This method may be overridden by subclasses to add things like refresh scheduling.\n        this.doRefresh();\n    }\n\n    /**\n     * Implementation of the UI refresh.\n     * @private\n     */\n    doRefresh() {\n        // Ensure sub elements are all present\n        this.getConfig('element');\n        const\n            me       = this,\n            timeZone = me.timeZone != null ? me.timeZone : me.project?.timeZone,\n            today    = timeZone != null ? TimeZoneHelper.toTimeZone(new Date(), timeZone) : new Date(),\n            {\n                weekElements,\n                weekDayElements,\n                date,\n                month,\n                dayCellCls,\n                dayHeaderCls,\n                disabledCls,\n                otherMonthCls,\n                weekendCls,\n                todayCls,\n                nonWorkingDayCls,\n                nonWorkingDays,\n                canonicalDayNumbers,\n                sixWeeks\n            } = me;\n\n        today.setHours(0, 0, 0, 0);\n\n        // If we have not been initialized with a current date, use today\n        if (!date) {\n            me.date = today;\n            return;\n        }\n\n        /**\n         * Fires before this CalendarPanel refreshes in response to changes in its month.\n         * @event beforeRefresh\n         * @param {Core.widget.DatePicker} source This DatePicker.\n         */\n        me.trigger('beforeRefresh');\n\n        // Make sure we've calculated our shortDayNames\n        me.getConfig('dayNameFormat');\n\n        for (let columnIndex = 0; columnIndex < 7; columnIndex++) {\n            const\n                cell          = me.weekdayCells[columnIndex],\n                cellDay       = me.canonicalDayNumbers[columnIndex],\n                cellClassList = {\n                    [dayHeaderCls]     : 1,\n                    [weekendCls]       : DateHelper.weekends[cellDay],\n                    [nonWorkingDayCls] : nonWorkingDays[cellDay]\n                };\n\n            if (me.headerRenderer) {\n                cell.innerHTML = '';\n                me.callback(me.headerRenderer, me, [cell, columnIndex, cellDay]);\n            }\n            else {\n                DomHelper.setInnerText(cell, me.shortDayNames[cellDay]);\n            }\n\n            // Sync day name cell classes with its calculated status\n            DomHelper.syncClassList(cell, cellClassList);\n\n            cell.dataset.columnIndex = columnIndex;\n            cell.dataset.cellDay = cellDay;\n        }\n\n        // Create cell content\n        let rowIndex = 0,\n            cellIndex = 0,\n            lastWorkingColumn = 6;\n\n        // Which column is the last working day so it can be tagged with an identifying class\n        for (let columnIndex = 6; columnIndex >= 0; columnIndex--) {\n            if (!nonWorkingDays[canonicalDayNumbers[columnIndex]]) {\n                lastWorkingColumn = columnIndex;\n                break;\n            }\n        }\n\n        // Hide or show the \"other month\" week row depending on our sixWeeks setting\n        weekElements[4].classList.toggle('b-hide-display', month.weekCount < 5 && !sixWeeks);\n        weekElements[5].classList.toggle('b-hide-display', month.weekCount < 6 && !sixWeeks);\n\n        month.eachWeek((week, dates) => {\n            const\n                weekDayElement = weekDayElements[rowIndex],\n                weekCells = [weekDayElement.previousSibling, ...weekDayElement.children];\n\n            // Stamp week into week row's dataset\n            weekElements[rowIndex].dataset.week = `${week[0]},${week[1]}`;\n\n            if (me.weekRenderer) {\n                me.callback(me.weekRenderer, me, [weekCells[0], week]);\n            }\n            else {\n                weekCells[0].innerText = week[1];\n            }\n\n            for (let columnIndex = 0; columnIndex < 7; columnIndex++) {\n                const\n                    date          = dates[columnIndex],\n                    day           = date.getDay(),\n                    key           = DateHelper.makeKey(date),\n                    isNonWorking  = nonWorkingDays[day],\n                    cell          = weekCells[columnIndex + 1],\n                    cellClassList = {\n                        [dayCellCls]             : 1,\n                        [disabledCls]            : me.isDisabledDate(date),\n                        [otherMonthCls]          : date.getMonth() !== month.month,\n                        [weekendCls]             : DateHelper.weekends[day],\n                        [todayCls]               : date.getTime() === today.getTime(),\n                        [nonWorkingDayCls]       : isNonWorking,\n                        'b-last-working-day'     : columnIndex === lastWorkingColumn,\n                        'b-first-visible-cell'   : !(date - (me.firstVisibleDate || -1)),\n                        'b-last-visible-cell'    : !(date - (me.lastVisibleDate || -1)),\n                        [`b-day-of-week-${day}`] : 1\n                    };\n\n                // Sync day cell classes with its calculated status\n                DomHelper.syncClassList(cell, cellClassList);\n\n                cell.dataset.date = key;\n                cell.dataset.cellIndex = cellIndex;\n                cell.dataset.columnIndex = columnIndex;\n\n                // Since we manipulate the classList/Name directly, we need to trick DomSync's config comparison logic or it\n                // may think the class has not changed.\n                if (cell.lastDomConfig) {\n                    delete cell.lastDomConfig.class;\n                    delete cell.lastDomConfig.className;\n                }\n\n                if (me.cellRenderer) {\n                    me.callback(me.cellRenderer, me, [{\n                        cell,\n                        date,\n                        day,\n                        row                : weekElements[rowIndex],\n                        rowIndex,\n                        cellIndex,\n                        columnIndex,\n                        visibleColumnIndex : me.visibleDayColumnIndex[day],\n                        week,\n                        key\n                    }]);\n                }\n                else {\n                    cell.innerHTML = date.getDate();\n                }\n                cellIndex++;\n            }\n\n            rowIndex++;\n        });\n\n        /**\n         * The number of rows displayed in this month. If {@link #config-sixWeeks} is not set,\n         * this may be from 4 to 6.\n         * @member {Number} visibleWeekCount\n         * @readonly\n         */\n        me.visibleWeekCount = rowIndex;\n\n        if (me.floating) {\n            // Must realign because content change might change dimensions\n            if (!me.isAligning) {\n                me.realign();\n            }\n        }\n\n        me.refreshCount = (me.refreshCount || 0) + 1;\n\n        /**\n         * Fires when this CalendarPanel refreshes.\n         * @event refresh\n         */\n        me.trigger('refresh');\n    }\n\n    isDisabledDate(date) {\n        const\n            day = date.getDay(),\n            {\n                disabledDates,\n                nonWorkingDays\n            }   = this;\n\n        if (this.disableWeekends && nonWorkingDays[day]) {\n            return true;\n        }\n\n        if (disabledDates) {\n            if (Array.isArray(disabledDates)) {\n                date = DateHelper.clearTime(date, true);\n                return disabledDates.some(d => !(DateHelper.clearTime(d, true) - date));\n            }\n            else {\n                return this.callback(this.disabledDates, this, [date]);\n            }\n        }\n    }\n\n    get bodyConfig() {\n        const\n            result = super.bodyConfig,\n            weeksContainerChildren = [];\n\n        result.children = [{\n            tag       : 'div',\n            className : 'b-calendar-row b-calendar-weekdays',\n            reference : 'weekdaysHeader',\n            children  : [\n                { class : 'b-week-number-cell' },\n                ...ArrayHelper.fill(7, { class : this.dayHeaderCls }),\n                DomHelper.scrollBarPadElement\n            ]\n        }, {\n            // `notranslate` prevents google translate messing up the DOM, https://github.com/facebook/react/issues/11538\n            className : 'b-weeks-container notranslate',\n            reference : 'weeksElement',\n            children  : weeksContainerChildren\n        }];\n\n        for (let i = 0; i < 6; i++) {\n            const weekRow = {\n                className : 'b-calendar-row b-calendar-week',\n                dataset   : {\n                    rowIndex : i\n                },\n                children : [{\n                    className : 'b-week-number-cell'\n                }, {\n                    className   : 'b-calendar-days',\n                    children    : [{}, {}, {}, {}, {}, {}, {}],\n                    syncOptions : {\n                        ignoreRefs : true,\n                        strict     : false  // allow complete replacement of classes w/o matching lastDomConfig\n                    }\n                }]\n            };\n\n            weeksContainerChildren.push(weekRow);\n        }\n\n        return result;\n    }\n\n    get firstVisibleDate() {\n        if (this.hideOtherMonthCells) {\n            const { year, month } = this.month;\n\n            return new Date(year, month, 1);\n        }\n        for (const me = this, date = me.month.startDate; ; date.setDate(date.getDate() + 1)) {\n            if (!me.hideNonWorkingDays || !me.nonWorkingDays[date.getDay()]) {\n                return date;\n            }\n        }\n    }\n\n    get lastVisibleDate() {\n        const lastDate = DateHelper.add(this.endDate, -1, 'd');\n\n        if (this.hideOtherMonthCells) {\n            return lastDate;\n        }\n        for (const me = this, date = lastDate; ; date.setDate(date.getDate() - 1)) {\n            if (!me.hideNonWorkingDays || !me.nonWorkingDays[date.getDay()]) {\n                return date;\n            }\n        }\n    }\n\n    /**\n     * Returns the cell associated with the passed date.\n     *\n     * To exclude dates which are outside of the panel's current month, pass the `strict` parameter as `true`\n     * @param {Date|String} date The date to find the element for or a key in the format `YYYY-MM-DD`\n     * @param {Boolean} strict Only return the element if this view *owns* the date.\n     * @returns {HTMLElement} The cell for the passed date if it exists\n     */\n    getCell(date, strict) {\n        if (!(typeof date === 'string')) {\n            date = DateHelper.makeKey(date);\n        }\n        const cell = this.weeksElement.querySelector(`[data-date=\"${date}\"]`);\n\n        if (cell && (!strict || !cell.classList.contains(this.otherMonthCls))) {\n            return cell;\n        }\n    }\n\n    onTipOverCell({ source : tip, target }) {\n        tip.date = DateHelper.parseKey(target.dataset.date);\n    }\n\n    updateLocalization() {\n        // Uncache the cached locale data\n        this._localeNonWorkingDays = this._localeWeekends = null;\n\n        this.updateDayNameFormat();\n        this.updateWeekStartDay(this.weekStartDay);\n        super.updateLocalization();\n    }\n}\n\n// Register this widget type with its Factory\nCalendarPanel.initClass();\n", "import Field from './Field.js';\nimport Widget from './Widget.js';\nimport DomHelper from '../helper/DomHelper.js';\nimport ObjectHelper from '../helper/ObjectHelper.js';\n\n/**\n * @module Core/widget/Checkbox\n */\n\nconst\n    whenNotChecked = field => !field.value;\n\n/**\n * Checkbox field, wraps <code>&lt;input type=\"checkbox\"&gt;</code>.\n * Color can be specified and you can optionally configure {@link #config-text}\n * to display in a label to the right of the checkbox in addition to a standard\n * field {@link #config-label}.\n *\n * {@inlineexample Core/widget/Checkbox.js vertical}\n *\n * This field can be used as an {@link Grid.column.Column#config-editor} for the {@link Grid.column.Column}.\n *\n * ## Nested Items\n * A checkbox can also have a {@link #config-container} of additional {@link Core.widget.Container#config-items}. These\n * items can be displayed immediately following the field's label (which is the default when there is only one item) or\n * below the checkbox. This can be controlled using the {@link #config-inline} config.\n *\n * In the demo below notice how additional fields are displayed when the checkboxes are checked:\n *\n * {@inlineexample Core/widget/Checkbox-items.js vertical}\n *\n * @extends Core/widget/Field\n * @classType checkbox\n * @inputfield\n */\nexport default class Checkbox extends Field {\n    //region Config\n    static get $name() {\n        return 'Checkbox';\n    }\n\n    // Factoryable type name\n    static get type() {\n        return 'checkbox';\n    }\n\n    // Factoryable type alias\n    static get alias() {\n        return 'check';\n    }\n\n    static get configurable() {\n        return {\n            inputType : 'checkbox',\n\n            /**\n             * Specify `true` to automatically {@link Core.widget.FieldContainer#config-collapsed collapse} the field's\n             * {@link #config-container} when the field is not {@link #property-checked}.\n             *\n             * Alternatively, this can be a function that returns the desired `collapse` state when passed the field\n             * instance as its one parameter.\n             *\n             * @config {Boolean|Function}\n             * @default false\n             */\n            autoCollapse : null,\n\n            containerDefaults : {\n                syncableConfigs : {\n                    disabled : field => field.disabled || !field.value\n                },\n\n                syncConfigTriggers : {\n                    autoCollapse : 1,\n                    value        : 1\n                }\n            },\n\n            /**\n             * Get/set label\n             * @member {String} name\n             */\n            /**\n             * Text to display on checkbox label\n             * @config {String}\n             */\n            text : '',\n\n            /**\n             * The value to provide for this widget in {@link Core.widget.Container#property-values} when it is\n             * {@link #property-checked}.\n             * A value of `undefined` will cause this widget not to include its value when checked.\n             * @config {*}\n             * @default\n             */\n            checkedValue : true,\n\n            /**\n             * The value to provide for this widget in {@link Core.widget.Container#property-values} when it is not\n             * {@link #property-checked}.\n             *\n             * A value of `undefined` will cause this widget to not include its value when it is unchecked.\n             * @config {*}\n             * @default\n             */\n            uncheckedValue : false,\n\n            /**\n             * The checked state. The same as `value`.\n             * @config {Boolean} checked\n             */\n\n            /**\n             * Checkbox color, must have match in CSS\n             * @config {String}\n             */\n            color : null,\n\n            /**\n             * Get/set value\n             * @member {String} value\n             */\n            /**\n             * Sets input fields value attribute\n             * @config {String}\n             */\n            value : '',\n\n            toggleGroup : null,\n\n            localizableProperties : ['label', 'text']\n        };\n    }\n\n    //endregion\n\n    //region Init\n\n    construct(config) {\n        // Convert checked to value so that initializing getter can read it if requested prior to trying to set it.\n        if ('checked' in config) {\n            config = ObjectHelper.assign({}, config);  // copy inherited properties unlike Object.assign()\n            config.value = config.checked;\n            delete config.checked;\n        }\n\n        super.construct(config);\n\n        this.syncHasText();\n    }\n\n    get textLabelCls() {\n        return 'b-checkbox-label';\n    }\n\n    // Implementation needed at this level because it has two inner elements in its inputWrap\n    get innerElements() {\n        return [\n            this.inputElement,\n            {\n                tag       : 'label',\n                class     : this.textLabelCls,\n                for       : `${this.id}-input`,\n                reference : 'textLabel',\n                html      : this.text || ''\n            }\n        ];\n    }\n\n    get inputElement() {\n        const config = super.inputElement;\n\n        if (this.toggleGroup) {\n            config.dataset = {\n                group : this.toggleGroup\n            };\n        }\n\n        config.listeners = {\n            click  : 'internalOnClick',\n            change : 'internalOnChange',\n            input  : 'internalOnInput'\n        };\n\n        return config;\n    }\n\n    //endregion\n\n    //region Toggle\n\n    /**\n     * Get/set checked state. Equivalent to `value` config.\n     * @property {Boolean}\n     */\n    get checked() {\n        return this.value;\n    }\n\n    set checked(value) {\n        this.value = value;\n    }\n\n    syncHasText() {\n        this.element.classList[this.text ? 'add' : 'remove']('b-text');\n    }\n\n    updateText(value) {\n        if (this.textLabel) {\n            this.syncHasText();\n            this.textLabel.innerHTML = value;\n        }\n    }\n\n    afterSyncChildConfigs(container) {\n        super.afterSyncChildConfigs(container);\n\n        let { autoCollapse } = this;\n\n        if (autoCollapse) {\n            autoCollapse = (autoCollapse === true) ? whenNotChecked : autoCollapse;\n\n            container.collapsed = autoCollapse(this);\n        }\n    }\n\n    assignFieldValue(values, key, value) {\n        this.value = (value === this.checkedValue) || (value === this.uncheckedValue ? false : null);\n    }\n\n    fetchInputValue() {\n        if (!this.readOnly) {\n            this.value = this.input.checked;\n        }\n    }\n\n    gatherValue(values) {\n        const\n            me = this,\n            value = me.value ? me.checkedValue : me.uncheckedValue,\n            storedValue = value !== undefined,\n            { valueName } = me;\n\n        if (storedValue) {\n            values[valueName] = value;\n        }\n\n        me.gatherValues(values, storedValue);\n\n        if (value === true && values[valueName]?.value === value) {\n            delete values[valueName].value;\n        }\n    }\n\n    changeValue(value) {\n        return (value === 'false') ? false : Boolean(value);\n    }\n\n    updateValue(value) {\n        const\n            me      = this,\n            changed = me.input.checked !== value;\n\n        me.input.checked = value;\n\n        me.container?.syncChildConfigs();\n\n        if (changed && !me.inputting && !me.isConfiguring) {\n            me.uncheckToggleGroupMembers();\n\n            // The change event does not fire on programmatic change of input.\n            me.triggerChange(false);\n        }\n    }\n\n    get inputValueAttr() {\n        return 'checked';\n    }\n\n    updateColor(value, was) {\n        const classes = this.element.classList;\n\n        if (was) {\n            classes.remove(was);\n        }\n\n        if (value) {\n            classes.add(value);\n        }\n    }\n\n    getToggleGroupMembers() {\n        const\n            me = this,\n            { checked, toggleGroup, input : checkedElement, type } = me,\n            result = [];\n\n        if (checked && toggleGroup) {\n            DomHelper.forEachSelector(me.rootElement, `input[type=${type}][data-group=${toggleGroup}]`, inputEl => {\n                if (inputEl !== checkedElement) {\n                    const partnerCheckbox = Widget.fromElement(inputEl);\n                    partnerCheckbox && result.push(partnerCheckbox);\n                }\n            });\n        }\n\n        return result;\n    }\n\n    uncheckToggleGroupMembers() {\n        if (this.checked && this.toggleGroup) {\n            this.getToggleGroupMembers().forEach(widget => widget.checked = false);\n        }\n    }\n\n    /**\n     * Check the box\n     */\n    check() {\n        this.checked = true;\n    }\n\n    /**\n     * Uncheck the box\n     */\n    uncheck() {\n        this.checked = false;\n    }\n\n    /**\n     * Toggle checked state. If you want to force a certain state, assign to {@link #property-checked} instead.\n     */\n    toggle() {\n        this.checked = !this.checked;\n    }\n\n    //endregion\n\n    //region Events\n\n    internalOnClick(event) {\n        // Native checkboxes has no readonly attribute, we prevent toggling it here instead\n        if (this.readOnly) {\n            event.preventDefault();\n            return false;\n        }\n\n        /**\n         * Fires when the checkbox is clicked\n         * @event click\n         * @param {Core.widget.Checkbox} source The checkbox\n         * @param {Event} event DOM event\n         */\n        return this.trigger('click', { event });\n    }\n\n    /**\n     * Triggers events when user toggles the checkbox\n     * @fires beforeChange\n     * @fires change\n     * @fires action\n     * @private\n     */\n    internalOnChange(event) {\n        const me = this;\n\n        // Chrome somehow sets checked state when re-enabling, have to reset that\n        if (me.readOnly && me.value !== me.input.checked) {\n            me.input.checked = me.value;\n            return;\n        }\n\n        me.value = me.input.checked;\n\n        if (!me.inputting) {\n            me.inputting = true;\n\n            me.triggerChange(true);\n\n            me.inputting = false;\n        }\n    }\n\n    // Need to catch changes even if readOnly, because of chrome behaviour when re-enabling\n    updateInputReadOnly(readOnly) {}\n\n    /**\n     * Triggers events when checked state is changed\n     * @fires beforeChange\n     * @fires change\n     * @fires action\n     * @private\n     */\n    triggerChange(userAction) {\n        const\n            me = this,\n            { checked } = me.input;\n\n        /**\n         * Fired before checkbox is toggled. Returning false from a listener prevents the checkbox from being toggled.\n         * @event beforeChange\n         * @preventable\n         * @param {Core.widget.Checkbox} source Checkbox\n         * @param {Boolean} checked Checked or not\n         */\n\n        /**\n         * Fired when checkbox is toggled\n         * @event change\n         * @param {Core.widget.Checkbox} source Checkbox\n         * @param {Boolean} checked Checked or not\n         */\n        // Prevent uncheck if this checkbox is part of a toggleGroup (radio-button mode) ..also ensure the group has\n        // visible active members\n        const\n            eventObject  = { checked, value : checked, userAction, valid : true },\n            prevented = (!checked && userAction && me.toggleGroup &&\n                me.getToggleGroupMembers().filter(widget => widget.isVisible && !widget.disabled).length) ||\n                // Since Widget has Events mixed in configured with 'callOnFunctions' this will also call onBeforeChange,\n                // onChange and onAction\n                me.trigger('beforeChange', eventObject) === false;\n\n        // If prevented need to rollback the checkbox input\n        if (prevented) {\n            // Input change is not preventable, so need to revert the changes\n            // The change event does not fire on programmatic change of input, so no need to suspend\n            me.input.checked = me._value = !checked;\n        }\n        else {\n            me.triggerFieldChange(eventObject, false);\n\n            if (userAction) {\n                me.uncheckToggleGroupMembers();\n            }\n\n            /**\n             * User performed the default action (toggled the checkbox)\n             * @event action\n             * @param {Core.widget.Checkbox} source Checkbox\n             * @param {Boolean} checked Checked or not\n             */\n            me.trigger('action', eventObject);\n            me.trigger('change', eventObject);\n\n            return true;\n        }\n    }\n\n    //endregion\n}\n\n// Register this widget type with its Factory\nCheckbox.initClass();\n", "import Panel from './Panel.js';\nimport EventHelper from '../helper/EventHelper.js';\nimport ObjectHelper from '../helper/ObjectHelper.js';\nimport DomHelper from '../helper/DomHelper.js';\n\n/**\n * @module Core/widget/YearPicker\n */\n\n/**\n * A Panel subclass which allows a year to be selected from a range of 12 displayed years.\n *\n * The panel can be configured with {@link #config-startYear} to specify the first year in the\n * displayed range.\n *\n * The {@link #property-year} indicates and sets the currently selected year.\n *\n * The {@link #event-select} event is fired when a new year is selected.\n *\n * {@inlineexample Core/widget/YearPicker.js}\n *\n * @extends Core/widget/Panel\n *\n * @classType yearpicker\n * @widget\n */\nexport default class YearPicker extends Panel {\n    static $name = 'YearPicker';\n\n    // Factoryable type name\n    static type = 'yearpicker';\n\n    static configurable = {\n        textContent : false,\n\n        /**\n         * The definition of the top toolbar which displays the title and \"previous\" and\n         * \"next\" buttons.\n         *\n         * This contains the following predefined `items` which may be reconfigured by\n         * application code:\n         *\n         * - `title` A widget which displays the visible year range. Weight 100.\n         * - `previous` A button which navigates to the previous block. Weight 200.\n         * - `next` A button which navigates to the next block. Weight 300.\n         *\n         * These may be reordered:\n         *\n         * ```javascript\n         * new YearPicker({\n         *     appendTo : targetElement,\n         *     tbar     : {\n         *         items : {\n         *             // Move title to centre\n         *             title : {\n         *                 weight : 250\n         *             }\n         *         }\n         *     },\n         *     width    : '24em'\n         * });\n         * ```\n         * @config {ToolbarConfig}\n         */\n        tbar : {\n            overflow : null,\n            items    : {\n                previous : {\n                    type     : 'tool',\n                    cls      : 'b-icon b-icon-previous',\n                    onAction : 'up.previous',\n                    weight   : 100\n                },\n                title : {\n                    type     : 'button',\n                    cls      : 'b-yearpicker-title',\n                    weight   : 200,\n                    onAction : 'up.handleTitleClick'\n                },\n                next : {\n                    type     : 'tool',\n                    cls      : 'b-icon b-icon-next',\n                    onAction : 'up.next',\n                    weight   : 300\n                }\n            }\n        },\n\n        itemCls : 'b-year-container',\n\n        /**\n         * The number of clickable year buttons to display in the widget.\n         *\n         * It may be useful to change this if a non-standard shape or size is used.\n         * @config {Number}\n         * @default\n         */\n        yearButtonCount : 12,\n\n        /**\n         * The currently selected year.\n         * @member {Number} year\n         */\n        /**\n         * The year to use as the selected year. Defaults to the current year.\n         * @config {Number}\n         */\n        year : null,\n\n        /**\n         * The lowest year to allow.\n         * @config {Number}\n         */\n        minYear : null,\n\n        /**\n         * The highest year to allow.\n         * @config {Number}\n         */\n        maxYear : null,\n\n        /**\n         * The starting year displayed in the widget.\n         * @member {Number} startYear\n         */\n        /**\n         * The year to show at the start of the widget\n         * @config {Number}\n         */\n        startYear : null\n    };\n\n    construct(config) {\n        super.construct({\n            year : new Date().getFullYear(),\n            ...config\n        });\n\n        EventHelper.on({\n            element  : this.contentElement,\n            click    : 'onYearClick',\n            delegate : '.b-yearpicker-year',\n            thisObj  : this\n        });\n    }\n\n    get focusElement() {\n        return this.getYearButton(this.year) || this.getYearButton(this.startYear);\n    }\n\n    getYearButton(y) {\n        return this.contentElement.querySelector(`.b-yearpicker-year[data-year=\"${y}\"]`);\n    }\n\n    /**\n     * The currently selected year.\n     * @member {Number} value\n     */\n    get value() {\n        return this.year;\n    }\n\n    set value(year) {\n        this.year = year;\n    }\n\n    onYearClick({ target }) {\n        const clickedYear = Math.min(Math.max(parseInt(target.innerText), this.minYear || 1), this.maxYear || 9999);\n\n        // The updater won't run, so fire the select event here.\n        if (this.year === clickedYear) {\n            this.trigger('select', { oldValue : clickedYear, value : clickedYear });\n        }\n        else {\n            this.year = clickedYear;\n        }\n    }\n\n    handleTitleClick(e) {\n        this.trigger('titleClick', e);\n    }\n\n    previous() {\n        this.startYear = this.startYear - this.yearButtonCount;\n    }\n\n    next() {\n        this.startYear = this.endYear + 1;\n    }\n\n    ingestYear(year) {\n        if (!isNaN(year)) {\n            return ObjectHelper.isDate(year) ? year.getFullYear() : year;\n        }\n    }\n\n    changeYear(year) {\n        // ingestYear returns undefined if invalid input\n        if ((year = this.ingestYear(year))) {\n            return Math.min(Math.max(year, this.minYear || 1), this.maxYear || 9999);\n        }\n    }\n\n    updateYear(year, oldValue) {\n        const me = this;\n\n        if (!me.startYear || year > me.endYear) {\n            me.startYear = year;\n        }\n        else if (year < me.startYear) {\n            me.startYear = year - (me.yearButtonCount - 1);\n        }\n        if (!me.isConfiguring) {\n            /**\n             * Fired when a year is selected.\n             * @event select\n             * @param {Number} value The previously selected year.\n             * @param {Core.widget.YearPicker} source This YearPicker\n             */\n            me.trigger('select', { oldValue, value : year });\n        }\n    }\n\n    /**\n     * The ending year displayed in the widget.\n     * @member {Number} endYear\n     * @readonly\n     */\n    get endYear() {\n        return this.startYear + this.yearButtonCount - 1;\n    }\n\n    changeStartYear(startYear) {\n        // ingestYear returns undefined if invalid input\n        if ((startYear = this.ingestYear(startYear))) {\n            startYear = this.minYear ? Math.max(startYear, this.minYear) : startYear;\n            return this.maxYear ? Math.min(startYear, this.maxYear - (this.yearButtonCount - 1)) : startYear;\n        }\n    }\n\n    async updateStartYear(startYear, oldStartYear) {\n        if (this.isVisible) {\n            DomHelper.slideIn(this.contentElement, Math.sign(startYear - oldStartYear));\n        }\n    }\n\n    composeBody() {\n        // Must be ingested before first compose.\n        this.getConfig('year');\n\n        const\n            { startYear } = this,\n            result        = super.composeBody(),\n            children      = result.children[this.tbar ? 1 : 0].children = [];\n\n        this.widgetMap.title.text = `${`000${startYear}`.slice(-4)} - ${`000${this.endYear}`.slice(-4)}`;\n\n        for (let i = 0, y = startYear; i < this.yearButtonCount; i++, y++) {\n            children.push({\n                tag     : 'button',\n                dataset : {\n                    year : y\n                },\n                class : {\n                    'b-yearpicker-year' : 1,\n                    'b-selected'        : y === this.year\n                },\n                text : `000${y}`.slice(-4)\n            });\n        }\n\n        return result;\n    }\n}\n\n// Register this widget type with its Factory\nYearPicker.initClass();\n", "import TextField from './TextField.js';\nimport StringHelper from '../helper/StringHelper.js';\n\n/**\n * @module Core/widget/DisplayField\n */\n\n/**\n * A widget used to show a read only value. Can also use a {@link #config-template template string} to show custom\n * markup inside a Container.\n *\n * @extends Core/widget/Field\n *\n * @example\n * let displayField = new DisplayField({\n *   appendTo : document.body,\n *   label: 'name',\n *   value : 'John Doe',\n *   // or use a template\n *   // template : name => `${name} is the name`\n * });\n *\n * @classType displayField\n * @inlineexample Core/widget/DisplayField.js\n * @widget\n * @inputfield\n */\nexport default class DisplayField extends TextField {\n    static get $name() {\n        return 'DisplayField';\n    }\n\n    // Factoryable type name\n    static get type() {\n        return 'displayfield';\n    }\n\n    // Factoryable type alias\n    static get alias() {\n        return 'display';\n    }\n\n    static get configurable() {\n        return {\n            readOnly : true,\n            editable : false,\n            cls      : 'b-display-field',\n\n            /**\n             * A template string used to render the value of this field. Please note you are responsible for encoding\n             * any strings protecting against XSS.\n             *\n             * ```javascript\n             * new DisplayField({\n             *     appendTo : document.body,\n             *     name     : 'age',\n             *     label    : 'Age',\n             *     template : data => `${data.value} years old`\n             * })\n             * ```\n             * @config {Function}\n             */\n            template : null,\n\n            ariaElement : 'displayElement'\n        };\n    }\n\n    get focusElement() {\n        // we're not focusable.\n    }\n\n    changeReadOnly() {\n        return true;\n    }\n\n    changeEditable() {\n        return false;\n    }\n\n    get inputElement() {\n        return {\n            tag       : 'span',\n            id        : `${this.id}-input`,\n            reference : 'displayElement',\n            html      : this.template ? this.template(this.value) : StringHelper.encodeHtml(this.value)\n        };\n    }\n}\n\n// Register this widget type with its Factory\nDisplayField.initClass();\n", "import CalendarPanel from './CalendarPanel.js';\nimport YearPicker from './YearPicker.js';\nimport DateHelper from '../helper/DateHelper.js';\nimport EventHelper from '../helper/EventHelper.js';\nimport Combo from './Combo.js';\nimport DomHelper from '../helper/DomHelper.js';\nimport './DisplayField.js';\n\nconst\n    generateMonthNames = () => DateHelper.getMonthNames().map((m, i) => [i, m]),\n    dateSort           = (lhs, rhs) => lhs.valueOf() - rhs.valueOf(),\n    emptyArray         = Object.freeze([]);\n\nclass ReadOnlyCombo extends Combo {\n    static get $name() {\n        return 'ReadOnlyCombo';\n    }\n\n    static get type() {\n        return 'readonlycombo';\n    }\n\n    static get configurable() {\n        return {\n            editable        : false,\n            inputAttributes : {\n                tag      : 'div',\n                tabIndex : -1\n            },\n            inputValueAttr          : 'innerHTML',\n            highlightExternalChange : false,\n            monitorResize           : false,\n            triggers                : {\n                expand : false\n            },\n            picker : {\n                align : {\n                    align     : 't-b',\n                    axisLock  : true,\n                    matchSize : false\n                },\n                cls        : 'b-readonly-combo-list',\n                scrollable : {\n                    overflowX : false\n                }\n            }\n        };\n    }\n}\n\nReadOnlyCombo.initClass();\n\n/**\n * @module Core/widget/DatePicker\n */\n\n/**\n * A Panel which can display a month of date cells, which navigates between the cells, fires events upon user selection\n * actions, optionally navigates to other months in response to UI gestures, and optionally displays information about\n * each date cell.\n *\n * A date is selected (meaning a single value is selected if {@link #config-multiSelect} is not set, or\n * added to the {@link #property-selection} if {@link #config-multiSelect if set}) by clicking a cell\n * or by pressing `ENTER` when focused on a cell.\n *\n * The `SHIFT` and `CTRL` keys modify selection behaviour depending on the value of {@link #config-multiSelect}.\n *\n * This class is used as a {@link Core.widget.DateField#config-picker} by the {@link Core.widget.DateField} class.\n *\n * {@inlineexample Core/widget/DatePicker.js}\n *\n * ## Custom cell rendering\n * You can easily control the content of each date cell using the {@link #config-cellRenderer}. The example below shows\n * a view typically seen when booking hotel rooms or apartments.\n *\n * {@inlineexample Core/widget/DatePickerCellRenderer.js}\n *\n * ## Multi selection\n * You can select multiple date ranges or a single date range using the {@link #config-multiSelect} config.\n *\n * {@inlineexample Core/widget/DatePickerMulti.js}\n *\n * @classtype datepicker\n * @extends Core/widget/CalendarPanel\n * @widget\n */\nexport default class DatePicker extends CalendarPanel {\n    static get $name() {\n        return 'DatePicker';\n    }\n\n    // Factoryable type name\n    static get type() {\n        return 'datepicker';\n    }\n\n    static get delayable() {\n        return {\n            refresh : 'raf'\n        };\n    }\n\n    static get configurable() {\n        return {\n            /**\n             * The date that the user has navigated to using the UI *prior* to setting the widget's\n             * value by selecting. The initial default is today's date.\n             *\n             * This may be changed using keyboard navigation. The {@link Core.widget.CalendarPanel#property-date} is set\n             * by pressing `ENTER` when the desired date is reached.\n             *\n             * Programmatically setting the {@link Core.widget.CalendarPanel#config-date}, or using the UI to select the date\n             * by clicking it also sets the `activeDate`\n             * @config {Date}\n             */\n            activeDate : {\n                value   : new Date(),\n                $config : {\n                    equal : 'date'\n                }\n            },\n\n            focusable   : true,\n            textContent : false,\n            tbar        : {\n                overflow : null,\n                items    : {\n                    prevYear : {\n                        cls      : 'b-icon b-icon-first',\n                        onAction : 'up.gotoPrevYear',\n                        tooltip  : 'L{DatePicker.gotoPrevYear}'\n                    },\n                    prevMonth : {\n                        cls      : 'b-icon b-icon-previous',\n                        onAction : 'up.gotoPrevMonth',\n                        tooltip  : 'L{DatePicker.gotoPrevMonth}'\n                    },\n                    fields : {\n                        type  : 'container',\n                        cls   : 'b-datepicker-title',\n                        items : {\n                            monthField : {\n                                type              : 'readonlycombo',\n                                cls               : 'b-datepicker-monthfield',\n                                items             : generateMonthNames(),\n                                internalListeners : {\n                                    select : 'up.onMonthPicked'\n                                }\n                            },\n                            yearButton : {\n                                type              : 'button',\n                                cls               : 'b-datepicker-yearbutton',\n                                internalListeners : {\n                                    click : 'up.onYearPickerRequested'\n                                }\n                            }\n                        }\n                    },\n                    nextMonth : {\n                        cls      : 'b-icon b-icon-next',\n                        onAction : 'up.gotoNextMonth',\n                        tooltip  : 'L{DatePicker.gotoNextMonth}'\n                    },\n                    nextYear : {\n                        cls      : 'b-icon b-icon-last',\n                        onAction : 'up.gotoNextYear',\n                        tooltip  : 'L{DatePicker.gotoNextYear}'\n                    }\n                }\n            },\n\n            yearPicker : {\n                value : {\n                    type              : 'YearPicker',\n                    yearButtonCount   : 16,\n                    trapFocus         : true,\n                    positioned        : true,\n                    hidden            : true,\n                    internalListeners : {\n                        titleClick : 'up.onYearPickerTitleClick',\n                        select     : 'up.onYearPicked'\n                    }\n                },\n                $config : 'lazy'\n            },\n\n            /**\n             * The initially selected date.\n             * @config {Date}\n             */\n            date : null,\n\n            /**\n             * The minimum selectable date. Selection of and navigation to dates prior\n             * to this date will not be possible.\n             * @config {Date}\n             */\n            minDate : {\n                value   : null,\n                $config : {\n                    equal : 'date'\n                }\n            },\n\n            /**\n             * The maximum selectable date. Selection of and navigation to dates after\n             * this date will not be possible.\n             * @config {Date}\n             */\n            maxDate : {\n                value   : null,\n                $config : {\n                    equal : 'date'\n                }\n            },\n\n            /**\n             * By default, disabled dates cannot be navigated to, and they are skipped over\n             * during keyboard navigation. Configure this as `true` to enable navigation to\n             * disabled dates.\n             * @config {Boolean}\n             * @default\n             */\n            focusDisabledDates : null,\n\n            /**\n             * Configure as `true` to enable selecting multiple discontiguous date ranges using\n             * click and Shift+click to create ranges and Ctrl+click to select/deselect individual dates.\n             *\n             * Configure as `'range'` to enable selecting a single date range by selecting a\n             * start and end date. Hold \"SHIFT\" button to select date range. Ctrl+click may add\n             * or remove dates to/from either end of the range.\n             * @config {Boolean|'range'}\n             * @default\n             */\n            multiSelect : false,\n\n            /**\n             * If {@link #config-multiSelect} is configured as `true`, this is an array of dates\n             * which are selected. There may be multiple, discontiguous date ranges.\n             *\n             * If {@link #config-multiSelect} is configured as `'range'`, this is a two element array\n             * specifying the first and last selected dates in a range.\n             * @config {Date[]}\n             */\n            selection : {\n                $config : {\n                    equal : (v1, v2) => v1 && v1.equals(v2)\n                },\n                value : null\n            },\n\n            /**\n             * By default, the month and year are editable. Configure this as `false` to prevent that.\n             * @config {Boolean}\n             * @default\n             */\n            editMonth : true,\n\n            /**\n             * The {@link Core.helper.DateHelper} format string to format the day names.\n             * @config {String}\n             * @default\n             */\n            dayNameFormat : 'dd',\n\n            trapFocus : true,\n\n            role : 'grid',\n\n            focusDescendant : true,\n\n            /**\n             * By default, when the {@link #property-date} changes, the UI will only refresh\n             * if it doesn't contain a cell for that date, so as to keep a stable UI when\n             * navigating.\n             *\n             * Configure this as `true` to refresh the UI whenever the month changes, even if\n             * the UI already shows that date.\n             * @config {Boolean}\n             * @internal\n             */\n            alwaysRefreshOnMonthChange : null\n        };\n    }\n\n    static get prototypeProperties() {\n        return {\n            /**\n             * The class name to add to the calendar cell whose date which is outside of the\n             * {@link #config-minDate}/{@link #config-maxDate} range.\n             * @config {String}\n             * @private\n             */\n            outOfRangeCls : 'b-out-of-range',\n\n            /**\n             * The class name to add to the currently focused calendar cell.\n             * @config {String}\n             * @private\n             */\n            activeCls : 'b-active-date',\n\n            /**\n             * The class name to add to selected calendar cells.\n             * @config {String}\n             * @private\n             */\n            selectedCls : 'b-selected-date'\n        };\n    }\n\n    // region Init\n\n    construct(config) {\n        const me = this;\n\n        super.construct(config);\n\n        me.externalCellRenderer = me.cellRenderer;\n        me.cellRenderer         = me.internalCellRenderer;\n\n        me.element.setAttribute('aria-activedescendant', `${me.id}-active-day`);\n        me.weeksElement.setAttribute('role', 'grid');\n        me.weekElements.forEach(w => w.setAttribute('role', 'row'));\n        me.element.setAttribute('ariaLabelledBy', me.widgetMap.fields.id);\n\n        EventHelper.on({\n            element : me.weeksElement,\n            click   : {\n                handler  : 'onCellClick',\n                delegate : `.${me.dayCellCls}:not(.${me.disabledCls}):not(.${me.outOfRangeCls})`\n            },\n            mousedown : {\n                handler  : 'onCellMousedown',\n                delegate : `.${me.dayCellCls}`\n            },\n            thisObj : me\n        });\n\n        me.widgetMap.monthField.readOnly = me.widgetMap.yearButton.disabled = !me.editMonth;\n\n        // Ensure the DatePicker is immediately ready for use.\n        me.refresh.flush();\n    }\n\n    afterHide() {\n        this._yearPicker?.hide();\n        super.afterHide(...arguments);\n    }\n\n    doDestroy() {\n        this.yearButton?.destroy();\n        this.monthField?.destroy();\n        super.doDestroy();\n    }\n\n    // endregion\n\n    get focusElement() {\n        return this.weeksElement.querySelector(`.${this.dayCellCls}[tabIndex=\"0\"]`);\n    }\n\n    doRefresh() {\n        const\n            me             = this,\n            oldActiveCell  = me.focusElement,\n            // Coerce the active date to be in the visible range.\n            // Do not use the setter, the sync is done below\n            activeDate     = DateHelper.betweenLesser(me.activeDate, me.month.startDate, me.month.endDate) ? me.activeDate : (me._activeDate = me.date);\n\n        super.doRefresh(...arguments);\n\n        // The focused cell will have been repurposed for a new date\n        const dateOfOldActiveCell = DateHelper.parseKey(oldActiveCell?.dataset.date);\n\n        // The position of the cell may have changed, so the \"from\" cell must\n        // be identified by the date that is stamped into it *after* the refresh..\n        if (activeDate - dateOfOldActiveCell) {\n            me.syncActiveDate(activeDate, dateOfOldActiveCell);\n        }\n    }\n\n    internalCellRenderer({ cell, date }) {\n        const\n            me            = this,\n            {\n                activeCls,\n                selectedCls,\n                externalCellRenderer\n            }             = me,\n            isSelected    = me.isSelectedDate(date),\n            cellClassList = {\n                [activeCls]        : activeCls && me.isActiveDate(date),\n                [selectedCls]      : isSelected,\n                [me.outOfRangeCls] : (me.minDate && date < me.minDate) || (me.maxDate && date > me.maxDate)\n            };\n\n        if (isSelected) {\n            // Fix up start/inner/end range classes\n            if (me.multiSelect) {\n                const\n                    isStart = !me.isSelectedDate(DateHelper.add(date, -1, 'd')),\n                    isEnd   = !me.isSelectedDate(DateHelper.add(date, 1, 'd'));\n\n                cellClassList['b-range-start'] = isStart;\n                cellClassList['b-range-end'] = isEnd;\n                cellClassList['b-in-range'] = !isStart && !isEnd;\n            }\n        }\n\n        DomHelper.updateClassList(cell, cellClassList);\n\n        // Must replace entire content in case we have an externalCellRenderer\n        cell.innerHTML = `<div class=\"b-datepicker-cell-inner\">${date.getDate()}</div>`;\n        cell.setAttribute('role', 'gridcell');\n        cell.setAttribute('aria-label', DateHelper.format(date, 'MMMM D, YYYY'));\n\n        if (me.isActiveDate(date)) {\n            cell.id = `${me.id}-active-day`;\n        }\n        else {\n            cell.removeAttribute('id');\n        }\n\n        if (externalCellRenderer) {\n            arguments[0].cell = cell.firstChild;\n            me.callback(externalCellRenderer, this, arguments);\n        }\n    }\n\n    onCellMousedown(event) {\n        const cell = event.target.closest('[data-date]');\n\n        event.preventDefault();\n        cell.focus();\n\n        this.activeDate = DateHelper.parseKey(cell.dataset.date);\n    }\n\n    onCellClick(event) {\n        const cell = event.target.closest('[data-date]');\n        this.onUIDateSelect(DateHelper.parseKey(cell.dataset.date), event);\n    }\n\n    onMonthDateChange({ newDate, changes }) {\n        // toolbar widgets must have been instantiated.\n        this.getConfig('tbar');\n\n        super.onMonthDateChange(...arguments);\n\n        // Keep header widgets synced with our month\n        if (changes.m || changes.y) {\n            this.widgetMap.monthField.value = newDate.getMonth();\n            this.widgetMap.yearButton.text  = newDate.getFullYear();\n        }\n    }\n\n    /**\n     * Called when the user uses the UI to select the current activeDate. So ENTER when focused\n     * or clicking a date cell.\n     * @param {Date} date The active date to select\n     * @param {Event} event the instigating event, either a `click` event or a `keydown` event.\n     * @internal\n     */\n    onUIDateSelect(date, event) {\n        const\n            me = this,\n            {\n                lastClickedDate,\n                multiSelect\n            }  = me;\n\n        me.lastClickedDate = date;\n\n        if (!me.isDisabledDate(date)) {\n            me.activatingEvent = event;\n\n            // Handle multi selecting.\n            // * single contiguous date range, eg: an event start and end\n            // * multiple discontiguous ranges\n            if (multiSelect) {\n                me.handleMultiSelect(lastClickedDate, date, event);\n            }\n            else {\n                me.selection = date;\n                if (me.floating) {\n                    me.hide();\n                }\n            }\n\n            me.activatingEvent = null;\n        }\n    }\n\n    // Calls updateSelection if the selection is mutated\n    handleMultiSelect(lastClickedDate, date, event) {\n        const\n            me          = this,\n            {\n                multiSelect\n            }           = me,\n            _selection  = me._selection || (me._selection = new DateSet()),\n            selection   = _selection.dates,\n            singleRange = multiSelect === 'range',\n            {\n                size,\n                generation\n            }           = _selection,\n            rangeEnds   = size && {\n                [DateHelper.makeKey(DateHelper.add(selection[0], -1, 'd'))]                   : 1,\n                [DateHelper.makeKey(selection[0])]                                            : 1,\n                [DateHelper.makeKey(selection[selection.length - 1])]                         : 1,\n                [DateHelper.makeKey(DateHelper.add(selection[selection.length - 1], 1, 'd'))] : 1\n            },\n            isSelected  = _selection.has(date),\n            toggleFn    = isSelected ? 'delete' : 'add';\n\n        // If we're allowed to create one range and they clicked on a togglable date of a range\n        const clickedRangeEnd = singleRange && rangeEnds?.[DateHelper.makeKey(date)];\n\n        // Ctrl+click means toggle the date, leaving remaining selection unchanged\n        if (event.ctrlKey) {\n            // Allow individual date toggling if we are allowing multi ranges\n            // or there's no current selection, or they are on, or adjacent to the range end\n            if (multiSelect === true || !size || clickedRangeEnd) {\n                _selection[toggleFn](date);\n\n                // Check that the start hasn't been deselected\n                if (singleRange && !_selection.has(me.rangeStartDate)) {\n                    me.rangeStartDate.setDate(me.rangeStartDate.getDate() + (date < selection[1] ? 1 : -1));\n                }\n            }\n        }\n        // Shift+click means add a range\n        else if (event.shiftKey && size) {\n            const [start, end] = [\n                new Date(singleRange ? (me.rangeStartDate || (me.rangeStartDate = selection[0])) : lastClickedDate),\n                date\n            ].sort(dateSort);\n\n            // If we can only have one range\n            if (singleRange) {\n                _selection.clear();\n            }\n\n            // Add all dates in the range\n            for (const d = start; d <= end; d.setDate(d.getDate() + 1)) {\n                _selection.add(d);\n            }\n        }\n        // Make the clicked date the only selected date.\n        // Avoid a no-op which would still cause a generation change\n        else if (!(_selection.has(date) && _selection.size === 1)) {\n            _selection.clear();\n            _selection.add(date);\n        }\n\n        const newSize = _selection.size;\n\n        // Keep track of the range start date. The first selected date is the start and the end then\n        // can move to either side of that.\n        if (newSize === 1) {\n            me.rangeStartDate = date;\n        }\n        else if (!newSize) {\n            me.rangeStartDate = null;\n        }\n\n        // Process selection change if we changed the selection.\n        if (_selection.generation !== generation) {\n            me.updateSelection(_selection);\n        }\n    }\n\n    changeSelection(selection) {\n        // We always need a _selection property to be a DateSet.\n        // Falsy selection value means empty DateSet.\n        const me = this;\n\n        let result, rangeStartDate;\n\n        if (selection) {\n            // Convert single Date into Array\n            if (!selection.forEach) {\n                selection = [selection];\n            }\n\n            // Clamp selection into range. May duplicate, but the Set will dedupe.\n            selection.forEach((d, i) => selection[i] = me.changeDate(d));\n\n            // Cache the first date, regardless of sort order for use as the \"clicked date\"\n            // around which the range revolves when shift+click is used.\n            rangeStartDate = selection[0];\n            selection.sort(dateSort);\n\n            // A two element array means a start and end\n            if (me.multiSelect === 'range' && selection.length === 2) {\n                result = new DateSet();\n                for (const d = new Date(selection[0]); d <= selection[1]; d.setDate(d.getDate() + 1)) {\n                    result.add(d);\n                }\n            }\n            else {\n                // Multi dates may be in any order, so use the temporally first date as range start\n                rangeStartDate = selection[0];\n                result = new DateSet(selection);\n            }\n        }\n        else {\n            result = new DateSet();\n        }\n\n        if (rangeStartDate) {\n            me.activeDate = me.rangeStartDate = DateHelper.clearTime(rangeStartDate);\n        }\n\n        return result;\n    }\n\n    updateMultiSelect(multiSelect) {\n        this.element.classList.toggle('b-multiselect', Boolean(multiSelect));\n        if (!multiSelect) {\n            this.selection = [...this.selection][0];\n        }\n    }\n\n    updateSelection(dateSet) {\n        const\n            me        = this,\n            { dates } = dateSet,\n            selection = me.multiSelect === 'range' ? [dates[0], dates[dates.length - 1]] : dates;\n\n        // \"date\" property must be seen to be the selected date.\n        dates.length && (me.date = dates[0]);\n\n        if (!me.isConfiguring) {\n            // We're going to announce the change. UI must be up to date\n            me.refresh.now();\n\n            /**\n             * Fires when a date or date range is selected. If {@link #config-multiSelect} is specified,\n             * this will fire upon deselection and selection of dates.\n             * @event selectionChange\n             * @param {Date[]} selection The selected date. If {@link #config-multiSelect} is specified\n             * this may be a two element array specifying start and end dates.\n             * @param {Boolean} userAction This will be `true` if the change was caused by user interaction\n             * as opposed to programmatic setting.\n             */\n            me.trigger('selectionChange', {\n                selection,\n                userAction : Boolean(me.activatingEvent)\n            });\n        }\n    }\n\n    /**\n     * The selected Date(s).\n     *\n     * When {@link #config-multiSelect} is `'range'`, then this yields a two element array\n     * representing the start and end of the selected range.\n     *\n     * When {@link #config-multiSelect} is `true`, this yields an array containing every selected\n     * Date.\n     * @member {Date[]} selection\n     */\n    get selection() {\n        const\n            { _selection } = this,\n            dates          = _selection ? _selection.dates : emptyArray;\n\n        return this.multiSelect === 'range' && dates.length ? [dates[0], dates[dates.length - 1]] : dates;\n    }\n\n    onInternalKeyDown(keyEvent) {\n        const\n            me         = this,\n            keyName    = keyEvent.key.trim() || keyEvent.code,\n            activeDate = me.activeDate;\n\n        let newDate    = new Date(activeDate);\n\n        if (keyName === 'Escape' && me.floating) {\n            return me.hide();\n        }\n\n        // Only navigate if not focused on one of our child widgets.\n        // We have a prevMonth and nextMonth tool and possibly month and year pickers.\n        if (activeDate && me.weeksElement.contains(keyEvent.target)) {\n            do {\n                switch (keyName) {\n                    case 'ArrowLeft':\n                        // Disable browser use of this key.\n                        // Ctrl+ArrowLeft navigates back.\n                        // ArrowLeft scrolls if there is horizontal scroll.\n                        keyEvent.preventDefault();\n\n                        if (keyEvent.ctrlKey) {\n                            newDate = me.gotoPrevMonth();\n                        }\n                        else {\n                            newDate.setDate(newDate.getDate() - 1);\n                        }\n                        break;\n                    case 'ArrowUp':\n                        // Disable browser use of this key.\n                        // ArrowUp scrolls if there is vertical scroll.\n                        keyEvent.preventDefault();\n\n                        newDate.setDate(newDate.getDate() - 7);\n                        break;\n                    case 'ArrowRight':\n                        // Disable browser use of this key.\n                        // Ctrl+ArrowRight navigates forwards.\n                        // ArrowRight scrolls if there is horizontal scroll.\n                        keyEvent.preventDefault();\n\n                        if (keyEvent.ctrlKey) {\n                            newDate = me.gotoNextMonth();\n                        }\n                        else {\n                            newDate.setDate(newDate.getDate() + 1);\n                        }\n                        break;\n                    case 'ArrowDown':\n                        // Disable browser use of this key.\n                        // ArrowDown scrolls if there is vertical scroll.\n                        keyEvent.preventDefault();\n\n                        newDate.setDate(newDate.getDate() + 7);\n                        break;\n                    case 'Enter':\n                        return me.onUIDateSelect(activeDate, keyEvent);\n                }\n            } while (me.isDisabledDate(newDate) && !me.focusDisabledDates);\n\n            // Don't allow navigation to outside of date bounds.\n            if (me.minDate && newDate < me.minDate) {\n                return;\n            }\n            if (me.maxDate && newDate > me.maxDate) {\n                return;\n            }\n            me.activeDate = newDate;\n        }\n    }\n\n    changeMinDate(minDate) {\n        // Avoid changeDate which clamps incoming value into current allowable range\n        return minDate && CalendarPanel.prototype.changeDate.apply(this, arguments);\n    }\n\n    updateMinDate(minDate) {\n        this._yearpicker && (this._yearpicker.minYear = minDate?.getFullYear());\n        this.refresh();\n    }\n\n    changeMaxDate(minDate) {\n        // Avoid changeDate which clamps incoming value into current allowable range\n        return minDate && CalendarPanel.prototype.changeDate.apply(this, arguments);\n    }\n\n    updateMaxDate(maxDate) {\n        this._yearpicker && (this._yearpicker.maxYear = maxDate?.getFullYear());\n        this.refresh();\n    }\n\n    changeDate(date) {\n        return DateHelper.clamp(super.changeDate(date), this.minDate, this.maxDate);\n    }\n\n    updateDate(date) {\n        const me = this;\n\n        // Directly configuring a date creates the selection\n        me.isConfiguring && !me.initializingActiveDate && (me.selection = date);\n\n        // Only change the month's date if it is within our current month\n        // or we have to because we don't have a cell for it.\n        // If it's a date in the \"otherMonth\" part of the grid, do not update.\n        if (!me.month.date || date.getMonth() === me.month.month || !me.getCell(date) || me.alwaysRefreshOnMonthChange || me.isNavigating) {\n            super.updateDate(date);\n        }\n    }\n\n    changeActiveDate(activeDate, oldActiveDate) {\n        if (this.trigger('beforeActiveDateChange', { activeDate, oldActiveDate }) === false) {\n            return;\n        }\n\n        activeDate = activeDate ? this.changeDate(activeDate) : this.date || (this.date = DateHelper.clearTime(new Date()));\n\n        if (isNaN(activeDate)) {\n            throw new Error('DatePicker date ingestion must be passed a Date, or a YYYY-MM-DD date string');\n        }\n\n        return DateHelper.clamp(activeDate, this.minDate, this.maxDate);\n    }\n\n    updateActiveDate(activeDate, wasActiveDate) {\n        const\n            me                = this,\n            { isConfiguring } = me;\n\n        if (isConfiguring || !me.getCell(activeDate)) {\n            me.initializingActiveDate = isConfiguring;\n            me.date = activeDate;\n            me.initializingActiveDate = false;\n        }\n        if (!isConfiguring && !me.refresh.isPending) {\n            me.syncActiveDate(activeDate, wasActiveDate);\n        }\n    }\n\n    syncActiveDate(activeDate, wasActiveDate) {\n        const\n            me            = this,\n            { activeCls } = me,\n            activeCell    = me.getCell(activeDate),\n            wasActiveCell = wasActiveDate && me.getCell(wasActiveDate),\n            activeElement = DomHelper.getActiveElement(me.element);\n\n        activeCell.setAttribute('tabIndex', 0);\n        activeCls && activeCell.classList.add(activeCls);\n        activeCell.id = `${me.id}-active-day`;\n\n        if (me.weeksElement.contains(activeElement) /*|| me.owner?.element.contains(activeElement)*/) {\n            activeCell.focus();\n        }\n\n        if (wasActiveCell && wasActiveCell !== activeCell) {\n            wasActiveCell.removeAttribute('tabIndex');\n            activeCls && wasActiveCell.classList.remove(activeCls);\n            wasActiveCell.removeAttribute('id');\n        }\n    }\n\n    set value(value) {\n        const\n            me = this,\n            {\n                selection,\n                duration\n            }  = me;\n\n        if (value) {\n            value = me.changeDate(value, me.value);\n\n            // If we're maintaining a single date range, move the range\n            if (me.multiSelect === 'range' && selection?.length === 2) {\n                if (!DateHelper.betweenLesserEqual(value, ...selection)) {\n                    // Move range back to encapsulate date\n                    if (value < selection[0]) {\n                        me.selection = [value, DateHelper.add(value, duration - 1, 'd')];\n                    }\n                    // Move range forwards to encapsulate date\n                    else {\n                        me.selection = [DateHelper.add(value, -(duration - 1), 'd'), value];\n                    }\n                }\n                me.date = me.activeDate = value;\n                return;\n            }\n\n            // Undefined return value means no change\n            if (value !== undefined) {\n                me.selection = value;\n            }\n        }\n        else {\n            // Clearing the value - go to today's calendar\n            me.date = new Date();\n            me.selection = null;\n        }\n    }\n\n    get value() {\n        return this.selection[this.selection.length - 1];\n    }\n\n    get duration() {\n        return this.multiSelect === 'range' ? DateHelper.diff(...this.selection, 'd') + 1 : 1;\n    }\n\n    gotoPrevYear() {\n        return this.goto(-1, 'year');\n    }\n\n    gotoPrevMonth() {\n        return this.goto(-1, 'month');\n    }\n\n    gotoNextMonth() {\n        return this.goto(1, 'month');\n    }\n\n    gotoNextYear() {\n        return this.goto(1, 'year');\n    }\n\n    goto(direction, unit) {\n        const\n            me                  = this,\n            { activeDate }      = me,\n            activeCell          = activeDate && me.getCell(activeDate);\n\n        let newDate;\n\n        // If active date is already in the month we're going to, use it\n        if (unit === 'month' && activeCell && activeDate?.getMonth() === me.month.month + direction) {\n            newDate = activeDate;\n        }\n        // Move the date by the requested unit\n        else {\n            newDate = DateHelper.add(activeCell ? activeDate : me.date, direction, unit);\n        }\n        const firstDateOfNewMonth = new Date(newDate);\n\n        firstDateOfNewMonth.setDate(1);\n\n        const lastDateOfNewMonth  = DateHelper.add(DateHelper.add(firstDateOfNewMonth, 1, 'month'), -1, 'day');\n\n        // Don't navigate if month is outside bounds\n        if ((me.minDate && direction < 0 && lastDateOfNewMonth < me.minDate) || (me.maxDate && direction > 0 && firstDateOfNewMonth > me.maxDate)) {\n            return;\n        }\n\n        // We need to force a UI change even if the UI contains the target date.\n        // updateDate always calls super and CalendarPanel will refresh\n        me.isNavigating = true;\n\n        const result = me.date = newDate;\n\n        if (activeCell) {\n            me.activeDate = newDate;\n        }\n        me.isNavigating = false;\n        return result;\n    }\n\n    isActiveDate(date) {\n        return !(date - this.activeDate);\n    }\n\n    isSelectedDate(date) {\n        return this._selection?.has(date);\n    }\n\n    onMonthPicked({ record, userAction }) {\n        if (userAction) {\n            this.activeDate = DateHelper.add(this.activeDate, record.value - this.activeDate.getMonth(), 'month');\n            this.focusElement?.focus();\n        }\n    }\n\n    onYearPickerRequested() {\n        const { yearPicker } = this;\n\n        if (yearPicker.isVisible) {\n            yearPicker.hide();\n        }\n        else {\n            yearPicker.year = yearPicker.startYear = this.activeDate.getFullYear();\n            yearPicker.show();\n            yearPicker.focus();\n        }\n    }\n\n    onYearPickerTitleClick() {\n        this.yearPicker.hide();\n    }\n\n    onYearPicked({ value, source }) {\n        const newDate = new Date(this.activeDate);\n\n        newDate.setFullYear(value);\n        this.activeDate = newDate;\n\n        // Move focus without scroll *before* focus reversion from the hide.\n        // Browser behaviour of scrolling to focused element would break animation.\n        this.focusElement && DomHelper.focusWithoutScrolling(this.focusElement);\n        source.hide();\n    }\n\n    changeYearPicker(yearPicker, oldYearPicker) {\n        return YearPicker.reconfigure(oldYearPicker, yearPicker ? YearPicker.mergeConfigs({\n            owner    : this,\n            appendTo : this.element,\n            minYear  : this.minDate?.getFullYear(),\n            maxYear  : this.maxDate?.getFullYear()\n        }, yearPicker) : null, this);\n    }\n\n    get childItems() {\n        const\n            { _yearPicker } = this,\n            result          = super.childItems;\n\n        if (_yearPicker) {\n            result.push(_yearPicker);\n        }\n\n        return result;\n    }\n\n    updateLocalization() {\n        const\n            {\n                monthField\n            }          = this.widgetMap,\n            newData    = generateMonthNames();\n\n        if (!this.isConfiguring && !newData.every((d, i) => d[1] === monthField.store.getAt(i).text)) {\n            newData[monthField.value].selected = true;\n            monthField.items = newData;\n        }\n\n        super.updateLocalization();\n    }\n}\n\n// Dates are never equal, so raw Set won't work.\nclass DateSet extends Set {\n    add(d) {\n        d = DateHelper.makeKey(d);\n        if (!this.has(d)) {\n            this.generation = (this.generation || 0) + 1;\n        }\n        return super.add(d);\n    }\n\n    delete(d) {\n        d = DateHelper.makeKey(d);\n        if (this.has(d)) {\n            this.generation++;\n        }\n        return super.delete(d);\n    }\n\n    has(d) {\n        return super.has(DateHelper.makeKey(d));\n    }\n\n    clear() {\n        if (this.size) {\n            this.generation++;\n        }\n        return super.clear();\n    }\n\n    equals(other) {\n        Array.isArray(other) && (other = new DateSet(other));\n        return (other.size === this.size) && [...this].every(s => other.has(s));\n    }\n\n    get dates() {\n        return [...this].sort().map(k => DateHelper.parseKey(k));\n    }\n}\n\n// Register this widget type with its Factory\nDatePicker.initClass();\n", "import PickerField from './PickerField.js';\nimport DatePicker from './DatePicker.js';\nimport DH from '../helper/DateHelper.js';\n\n// <remove-on-release>\n// TODO: picker icon (calendar) should show day number\n// </remove-on-release>\n\n/**\n * @module Core/widget/DateField\n */\n\n/**\n * Date field widget (text field + date picker).\n *\n * This field can be used as an {@link Grid.column.Column#config-editor editor} for the {@link Grid.column.Column Column}.\n * It is used as the default editor for the {@link Grid.column.DateColumn DateColumn}.\n *\n * This widget may be operated using the keyboard. `ArrowDown` opens the date picker, which itself\n * is keyboard navigable. `Shift+ArrowDown` activates the {@link #config-step} back trigger.\n * `Shift+ArrowUp` activates the {@link #config-step} forwards trigger.\n *\n * @extends Core/widget/PickerField\n *\n * @example\n * // minimal DateField config with date format specified\n * let dateField = new DateField({\n *   format: 'YYMMDD'\n * });\n *\n * @classType datefield\n * @inlineexample Core/widget/DateField.js\n * @inputfield\n */\nexport default class DateField extends PickerField {\n    //region Config\n    static get $name() {\n        return 'DateField';\n    }\n\n    // Factoryable type name\n    static get type() {\n        return 'datefield';\n    }\n\n    // Factoryable type alias\n    static get alias() {\n        return 'date';\n    }\n\n    static get configurable() {\n        return {\n            /**\n             * Get / set format for date displayed in field (see {@link Core.helper.DateHelper#function-format-static}\n             * for formatting options).\n             * @member {String} format\n             */\n            /**\n             * Format for date displayed in field. Defaults to using long date format, as defined by current locale (`L`)\n             * @config {String}\n             * @default\n             */\n            format : 'L',\n\n            /**\n             * A flag which indicates whether the date parsing should be strict - meaning if the date\n             * is missing a year/month/day part - parsing fails.\n             *\n             * Turned off by default, meaning default values are substituted for missing parts.\n             *\n             * @config {Boolean}\n             * @default\n             */\n            strictParsing : false,\n\n            // same for all languages\n            fallbackFormat : 'YYYY-MM-DD',\n            timeFormat     : 'HH:mm:ss:SSS',\n\n            /**\n             * A flag which indicates what time should be used for selected date.\n             * `false` by default which means time is reset to midnight.\n             *\n             * Possible options are:\n             * - `false` to reset time to midnight\n             * - `true` to keep original time value\n             * - `'17:00'` a string which is parsed automatically\n             * - `new Date(2020, 0, 1, 17)` a date object to copy time from\n             * - `'entered'` to keep time value entered by user (in case {@link #config-format} includes time info)\n             *\n             * @config {Boolean|Date|String}\n             * @default\n             */\n            keepTime : false,\n\n            /**\n             * Format for date in the {@link #config-picker}. Uses localized format per default\n             * @config {String}\n             */\n            pickerFormat : null,\n\n            /**\n             * Set to true to first clear time of the field's value before comparing it to the max value\n             * @internal\n             * @config {Boolean}\n             */\n            validateDateOnly : null,\n\n            triggers : {\n                expand : {\n                    cls     : 'b-icon-calendar',\n                    handler : 'onTriggerClick',\n                    weight  : 200\n                },\n\n                back : {\n                    cls     : 'b-icon b-icon-angle-left b-step-trigger',\n                    key     : 'Shift+ArrowDown',\n                    handler : 'onBackClick',\n                    align   : 'start',\n                    weight  : 100\n                },\n\n                forward : {\n                    cls     : 'b-icon b-icon-angle-right b-step-trigger',\n                    key     : 'Shift+ArrowUp',\n                    handler : 'onForwardClick',\n                    align   : 'end',\n                    weight  : 100\n                }\n            },\n\n            // An optional extra CSS class to add to the picker container element\n            calendarContainerCls : '',\n\n            /**\n             * Get/set min value, which can be a Date or a string. If a string is specified, it will be converted using\n             * the specified {@link #config-format}.\n             * @member {Date} min\n             * @accepts {String|Date}\n             */\n            /**\n             * Min value\n             * @config {String|Date}\n             */\n            min : null,\n\n            /**\n             * Get/set max value, which can be a Date or a string. If a string is specified, it will be converted using\n             * the specified {@link #config-format}.\n             * @member {Date} max\n             * @accepts {String|Date}\n             */\n            /**\n             * Max value\n             * @config {String|Date}\n             */\n            max : null,\n\n            /**\n             * The `step` property may be set in object form specifying two properties, `magnitude`, a Number, and\n             * `unit`, a String.\n             *\n             * If a Number is passed, the step's current unit is used (or `day` if no current step set) and just the\n             * magnitude is changed.\n             *\n             * If a String is passed, it is parsed by {@link Core.helper.DateHelper#function-parseDuration-static}, for\n             * example `'1d'`, `'1 d'`, `'1 day'`, or `'1 day'`.\n             *\n             * Upon read, the value is always returned in object form containing `magnitude` and `unit`.\n             * @member {DurationConfig} step\n             * @accepts {String|Number|DurationConfig}\n             */\n            /**\n             * Time increment duration value. If specified, `forward` and `back` triggers are displayed.\n             * The value is taken to be a string consisting of the numeric magnitude and the units.\n             * The units may be a recognised unit abbreviation of this locale or the full local unit name.\n             * For example `'1d'` or `'1w'` or `'1 week'`. This may be specified as an object containing\n             * two properties: `magnitude`, a Number, and `unit`, a String\n             * @config {String|Number|DurationConfig}\n             */\n            step : false,\n\n            stepTriggers : null,\n\n            /**\n             * The week start day in the {@link #config-picker}, 0 meaning Sunday, 6 meaning Saturday.\n             * Uses localized value per default.\n             * @config {Number}\n             */\n            weekStartDay : null,\n\n            /**\n             * A config object used to configure the {@link Core.widget.DatePicker datePicker}.\n             * ```javascript\n             * dateField = new DateField({\n             *      picker    : {\n             *          multiSelect : true\n             *      }\n             *  });\n             * ```\n             * @config {DatePickerConfig}\n             */\n            picker : {\n                type         : 'datepicker',\n                role         : 'dialog',\n                floating     : true,\n                scrollAction : 'realign',\n                align        : {\n                    align    : 't0-b0',\n                    axisLock : true\n                }\n            },\n\n            /**\n             * Get/set value, which can be set as a Date or a string but always returns a Date. If a string is\n             * specified, it will be converted using the specified {@link #config-format}\n             * @member {Date} value\n             * @accepts {String|Date}\n             */\n            /**\n             * Value, which can be a Date or a string. If a string is specified, it will be converted using the\n             * specified {@link #config-format}\n             * @config {String|Date}\n             */\n            value : null\n        };\n    }\n\n    //endregion\n\n    //region Init & destroy\n\n    /**\n     * Creates default picker widget\n     *\n     * @internal\n     */\n    changePicker(picker, oldPicker) {\n        const\n            me       = this,\n            defaults = {\n                owner        : me,\n                forElement   : me[me.pickerAlignElement],\n                minDate      : me.min,\n                maxDate      : me.max,\n                weekStartDay : me._weekStartDay, // need to pass the raw value to let the component to use its default value\n\n                align : {\n                    anchor : me.overlayAnchor,\n                    target : me[me.pickerAlignElement]\n                },\n\n                onSelectionChange : ({ selection, source : picker }) => {\n                    // We only care about what DatePicker does if it has been opened\n                    if (picker.isVisible) {\n                        me._isUserAction = me._isPickerInput = true;\n                        me.value = selection[0];\n                        me._isPickerInput = me._isUserAction = false;\n                        picker.hide();\n                    }\n                }\n            };\n\n        if (me.calendarContainerCls) {\n            defaults.cls = me.calendarContainerCls;\n        }\n\n        // If we are in cleared state, the picker will also have no value.\n        // But have it focused on today as a default.\n        if (me.value) {\n            defaults.value = me.value;\n        }\n        else {\n            defaults.activeDate = new Date();\n        }\n\n        const result = DatePicker.reconfigure(oldPicker, picker, {\n            owner : me,\n            defaults\n        });\n\n        // Cells must exist early\n        result?.refresh.flush();\n\n        return result;\n    }\n\n    //endregion\n\n    //region Click listeners\n\n    get backShiftDate() {\n        return DH.add(this.value, -1 * this._step.magnitude, this._step.unit);\n    }\n\n    onBackClick() {\n        const\n            me      = this,\n            { min } = me;\n\n        if (!me.readOnly && me.value) {\n            const newValue = me.backShiftDate;\n            if (!min || min.getTime() <= newValue) {\n                me._isUserAction = true;\n                me.value = newValue;\n                me._isUserAction = false;\n            }\n        }\n    }\n\n    get forwardShiftDate() {\n        return DH.add(this.value, this._step.magnitude, this._step.unit);\n    }\n\n    onForwardClick() {\n        const\n            me      = this,\n            { max } = me;\n\n        if (!me.readOnly && me.value) {\n            const newValue = me.forwardShiftDate;\n            if (!max || max.getTime() >= newValue) {\n                me._isUserAction = true;\n                me.value = newValue;\n                me._isUserAction = false;\n            }\n        }\n    }\n\n    //endregion\n\n    //region Toggle picker\n\n    showPicker(focusPicker) {\n        if (this.readOnly) {\n            return;\n        }\n\n        const\n            me           = this,\n            { _picker }  = me;\n\n        // If it's already instanced, navigate it to our date, or default of today.\n        // It will be initialized correctly if not.\n        if (_picker) {\n            // In case a subclass uses a min getter (which does not update our min value) - ensure picker is correctly configured\n            const pickerConfig = {\n                minDate : me.min,\n                maxDate : me.max\n            };\n\n            if (me.value) {\n                pickerConfig.value = me.value;\n            }\n            // If the field is cleared, show today's Calendar in the picker\n            // unless it's already been navigated elsewhere.\n            else if (!_picker.activeDate) {\n                pickerConfig.activeDate = new Date();\n            }\n\n            // Config dependencies are correctly processed by setConfig\n            _picker.setConfig(pickerConfig);\n        }\n\n        super.showPicker(focusPicker);\n    }\n\n    focusPicker() {\n        this.picker.focus();\n    }\n\n    //endregion\n\n    // region Validation\n\n    get isValid() {\n        const me  = this;\n\n        me.clearError('L{Field.minimumValueViolation}', true);\n        me.clearError('L{Field.maximumValueViolation}', true);\n\n        let value = me.value;\n\n        if (value) {\n            const { min, max, validateDateOnly } = me;\n\n            // Validation of the date should only care about the date part\n            if (validateDateOnly) {\n                value = DH.clearTime(value, false);\n            }\n\n            if (min && value < min) {\n                me.setError('L{Field.minimumValueViolation}', true);\n                return false;\n            }\n\n            if (max && value > max) {\n                me.setError('L{Field.maximumValueViolation}', true);\n                return false;\n            }\n        }\n\n        return super.isValid;\n    }\n\n    //endregion\n\n    //region Getters/setters\n    transformDateValue(value) {\n        const me = this;\n\n        if (value != null) {\n            if (!DH.isDate(value)) {\n                if (typeof value === 'string') {\n                    // If date cannot be parsed with set format, try fallback - the more general one\n                    value = DH.parse(value, me.format, me.strictParsing) || DH.parse(value, me.fallbackFormat, me.strictParsing);\n                }\n                else {\n                    value = new Date(value);\n                }\n            }\n\n            // We insist on a *valid* Date as the value\n            if (DH.isValidDate(value)) {\n                if ((!me.min || (value - me.min > -DH.MS_PER_DAY)) && (!me.max || value <= me.max)) {\n                    return me.transformTimeValue(value);\n                }\n\n                return value;\n            }\n        }\n        return null;\n    }\n\n    transformTimeValue(value) {\n        const\n            me = this,\n            { keepTime } = me;\n\n        value = DH.clone(value);\n\n        if (!keepTime) {\n            DH.clearTime(value, false);\n        }\n        // change time if keepTime !== 'entered'\n        else if (keepTime !== 'entered') {\n            const timeValue = DH.parse(keepTime, me.timeFormat);\n\n            // if this.keepTime is a valid date or a string describing valid time copy from it\n            if (DH.isValidDate(timeValue)) {\n                DH.copyTimeValues(value, timeValue);\n            }\n            // otherwise try to copy from the current value\n            else if (DH.isValidDate(me.value)) {\n                DH.copyTimeValues(value, me.value);\n            }\n        }\n        // if keepTime === 'entered' and picker is used apply current value time\n        else if (me._isPickerInput && DH.isValidDate(me.value)) {\n            DH.copyTimeValues(value, me.value);\n        }\n        // else don't change time\n\n        return value;\n    }\n\n    changeMin(value) {\n        return this.transformDateValue(value);\n    }\n\n    updateMin(min) {\n        const { input, _picker } = this;\n\n        if (input) {\n            if (min == null) {\n                input.removeAttribute('min');\n            }\n            else {\n                input.min = min;\n            }\n        }\n\n        // See if our lazy config has been realized...\n        if (_picker) {\n            _picker.minDate = min;\n        }\n\n        this.syncInvalid();\n    }\n\n    changeMax(value) {\n        return this.transformDateValue(value);\n    }\n\n    updateMax(max) {\n        const { input, _picker } = this;\n\n        if (input) {\n            if (max == null) {\n                input.removeAttribute('max');\n            }\n            else {\n                input.max = max;\n            }\n        }\n\n        if (_picker) {\n            _picker.maxDate = max;\n        }\n\n        this.syncInvalid();\n    }\n\n    get weekStartDay() {\n        // This trick allows our weekStartDay to float w/the locale even if the locale changes\n        return typeof this._weekStartDay === 'number' ? this._weekStartDay : DH.weekStartDay;\n    }\n\n    updateWeekStartDay(weekStartDay) {\n        if (this._picker) {\n            this._picker.weekStartDay = weekStartDay;\n        }\n    }\n\n    changeValue(value, oldValue) {\n        const\n            me = this,\n            newValue = me.transformDateValue(value);\n\n        // A value we could not parse\n        if (value && !newValue) {\n            // setError uses localization\n            me.setError('L{invalidDate}');\n            return;\n        }\n\n        me.clearError('L{invalidDate}');\n\n        // Reject non-change\n        if (me.hasChanged(oldValue, newValue)) {\n            return super.changeValue(newValue, oldValue);\n        }\n\n        // But we must fix up the display in case it was an unparseable string\n        // and the value therefore did not change.\n        if (!me.inputting) {\n            me.syncInputFieldValue();\n        }\n    }\n\n    updateValue(value, oldValue) {\n        const picker = this._picker;\n\n        if (picker && !this.inputting) {\n            picker.value = picker.activeDate = value;\n        }\n\n        super.updateValue(value, oldValue);\n    }\n\n    changeStep(value, was) {\n        const type = typeof value;\n\n        if (!value) {\n            return null;\n        }\n\n        if (type === 'number') {\n            value = {\n                magnitude : Math.abs(value),\n                unit      : was ? was.unit : 'day'\n            };\n        }\n        else if (type === 'string') {\n            value = DH.parseDuration(value);\n        }\n\n        if (value && value.unit && value.magnitude) {\n            if (value.magnitude < 0) {\n                value = {\n                    magnitude : -value.magnitude,  // Math.abs\n                    unit      : value.unit\n                };\n            }\n\n            return value;\n        }\n    }\n\n    updateStep(value) {\n        // If a step is configured, show the steppers\n        this.element.classList[value ? 'remove' : 'add']('b-no-steppers');\n\n        this.syncInvalid();\n    }\n\n    hasChanged(oldValue, newValue) {\n        // if both dates are provided and the field does not has time info in its format\n        if (oldValue?.getTime && newValue?.getTime && this.keepTime !== 'entered') {\n            // Only compare date part\n            return !DH.isEqual(DH.clearTime(oldValue), DH.clearTime(newValue));\n        }\n\n        return super.hasChanged(oldValue && oldValue.getTime(), newValue && newValue.getTime());\n    }\n\n    get inputValue() {\n        // Do not use the _value property. If called during configuration, this\n        // will import the configured value from the config object.\n        const date = this.value;\n\n        return date ? DH.format(date, this.format) : '';\n    }\n\n    updateFormat() {\n        if (!this.isConfiguring) {\n            this.syncInputFieldValue(true);\n        }\n    }\n\n    //endregion\n\n    //region Localization\n\n    updateLocalization() {\n        super.updateLocalization();\n        this.syncInputFieldValue(true);\n    }\n\n    //endregion\n\n    //region Other\n\n    internalOnKeyEvent(event) {\n        super.internalOnKeyEvent(event);\n\n        if (event.key === 'Enter' && this.isValid) {\n            this.picker.hide();\n        }\n    }\n\n    //endregion\n}\n\n// Register this widget type with its Factory\nDateField.initClass();\n", "import Field from './Field.js';\nimport NumberFormat from '../helper/util/NumberFormat.js';\n\n/**\n * @module Core/widget/NumberField\n */\n\n/**\n * Number field widget. Similar to native `<input type=\"number\">`, but implemented as `<input type=\"text\">` to support\n * formatting.\n *\n * This field can be used as an {@link Grid/column/Column#config-editor} for the {@link Grid/column/Column}.\n * It is used as the default editor for the {@link Grid/column/NumberColumn},\n * {@link Grid/column/PercentColumn}, {@link Grid/column/AggregateColumn}.\n *\n * ```javascript\n * const number = new NumberField({\n *     min   : 1,\n *     max   : 5,\n *     value : 3\n * });\n * ```\n *\n * Provide a {@link Core/helper/util/NumberFormat} config as {@link #config-format} to be able to show currency. For\n * example:\n *\n * ```javascript\n * new NumberField({\n *   format : {\n *      style    : 'currency',\n *      currency : 'USD'\n *   }\n * });\n * ```\n *\n * @extends Core/widget/Field\n * @classType numberfield\n * @inlineexample Core/widget/NumberField.js\n * @inputfield\n */\nexport default class NumberField extends Field {\n\n    //region Config\n\n    static get $name() {\n        return 'NumberField';\n    }\n\n    // Factoryable type name\n    static get type() {\n        return 'numberfield';\n    }\n\n    // Factoryable type alias\n    static get alias() {\n        return 'number';\n    }\n\n    static get configurable() {\n        return {\n            /**\n             * Min value\n             * @config {Number}\n             */\n            min : null,\n\n            /**\n             * Max value\n             * @config {Number}\n             */\n            max : null,\n\n            /**\n\n             * Step size for spin button clicks.\n             * @member {Number} step\n             */\n            /**\n             * Step size for spin button clicks. Also used when pressing up/down keys in the field.\n             * @config {Number}\n             * @default\n             */\n            step : 1,\n\n            /**\n             * Large step size, defaults to 10 * `step`. Applied when pressing SHIFT and stepping either by click or\n             * using keyboard.\n             * @config {Number}\n             * @default 10\n             */\n            largeStep : 0,\n\n            /**\n             * Initial value\n             * @config {Number}\n             */\n            value : null,\n\n            /**\n             * The format to use for rendering numbers.\n             *\n             * For example:\n             * ```\n             *  format: '9,999.00##'\n             * ```\n             * The above enables digit grouping and will display at least 2 (but no more than 4) fractional digits.\n             * @config {String|NumberFormatConfig}\n             * @default\n             */\n            format : '',\n\n            /**\n             * The number of decimal places to allow. Defaults to no constraint.\n             *\n             * This config has been replaced by {@link #config-format}. Instead of this:\n             *```\n             *  decimalPrecision : 3\n             *```\n             * Use `format`:\n             *```\n             *  format : '9.###'\n             *```\n             * To set both `decimalPrecision` and `leadingZeroes` (say to `3`), do this:\n             *```\n             *  format : '3>9.###'\n             *```\n             * @config {Number}\n             * @default\n             * @deprecated Since 3.1. Use {@link #config-format} instead.\n             */\n            decimalPrecision : null,\n\n            /**\n             * The maximum number of leading zeroes to show. Defaults to no constraint.\n             *\n             * This config has been replaced by {@link #config-format}. Instead of this:\n             *```\n             *  leadingZeros : 3\n             *```\n             * Use `format`:\n             *```\n             *  format : '3>9'\n             *```\n             * To set both `leadingZeroes` and `decimalPrecision` (say to `2`), do this:\n             *```\n             *  format : '3>9.##'\n             *```\n             * @config {Number}\n             * @default\n             * @deprecated Since 3.1. Use {@link #config-format} instead.\n             */\n            leadingZeroes : null,\n\n            triggers : {\n                spin : {\n                    type : 'spintrigger'\n                }\n            },\n\n            /**\n             * Controls how change events are triggered when stepping the value up or down using either spinners or\n             * arrow keys.\n             *\n             * Configure with:\n             * * `true` to trigger a change event per step\n             * * `false` to not trigger change while stepping. Will trigger on blur/Enter\n             * * A number of milliseconds to buffer the change event, triggering when no steps are performed during that\n             *   period of time.\n             *\n             * @config {Boolean|Number}\n             * @default\n             */\n            changeOnSpin : true,\n\n            // NOTE: using type=\"number\" has several trade-offs:\n            //\n            // Negatives:\n            //   - No access to caretPos/textSelection. This causes anomalies when replacing\n            //     the input value with a formatted version of that value (the caret moves to\n            //     the end of the input el on each character typed).\n            //   - The above also prevents Siesta/synthetic events from mimicking typing.\n            //   - Thousand separators cannot be displayed (input.value = '1,000' throws an\n            //     exception).\n            // Positives:\n            //   - On mobile, the virtual keyboard only shows digits et al.\n            //   - validity property on DOM node that handles min/max checks.\n            //\n            // The above may not be exhaustive, but there is not a compelling reason to\n            // use type=\"number\" except on mobile.\n\n            /**\n             * This can be set to `'number'` to enable the numeric virtual keyboard on\n             * mobile devices. Doing so limits this component's ability to handle keystrokes\n             * and format properly as the user types, so this is not recommended for\n             * desktop applications. This will also limit similar features of automated\n             * testing tools that mimic user input.\n             * @config {String}\n             * @default text\n             */\n            inputType : null\n        };\n    }\n\n    //endregion\n\n    //region Init\n\n    construct(config) {\n        super.construct(config);\n\n        const me = this;\n\n        // Support for selecting all by double click in empty input area\n        // Browsers work differently at this case\n        me.input.addEventListener('dblclick', () => {\n            me.select();\n        });\n\n        if (typeof me.changeOnSpin === 'number') {\n            me.bufferedSpinChange = me.buffer(me.triggerChange, me.changeOnSpin);\n        }\n    }\n\n    //endregion\n\n    //region Internal functions\n\n    acceptValue(value, rawValue) {\n        let accept = !isNaN(value);\n\n        // https://github.com/bryntum/support/issues/1349\n        // Pass through if there is a text selection in the field. This fixes the case when\n        // valid value is typed already and we are replacing it by selecting complete string and typing over it.\n        // Cannot be tested in siesta, see ticket for more info.\n        if (accept && !this.hasTextSelection) {\n            accept = false;\n\n            const\n                raw = this.input.value,\n                current = parseFloat(raw);\n\n            if (raw !== rawValue) {\n                // The new value is out of range, but we accept it if the current value\n                // is also problematic. Consider the case where the input is empty and the\n                // minimum value is 100. The user must first type \"1\" and we must accept it\n                // if they are to get the opportunity to type the \"0\"s.\n                accept = !this.acceptValue(current, raw);\n\n                // Also, if we are checking the current value, be sure not to infinitely\n                // recurse here.\n            }\n        }\n\n        return accept;\n    }\n\n    okMax(value) {\n        return isNaN(this.max) || value <= this.max;\n    }\n\n    okMin(value) {\n        return isNaN(this.min) || value >= this.min;\n    }\n\n    internalOnKeyEvent(e) {\n        if (e.type === 'keydown') {\n            const\n                me = this,\n                key = e.key;\n\n            let block;\n\n            // Native arrow key spin behaviour differs between browsers, so we replace\n            // the native spinners w/our own triggers and handle arrows keys as well.\n            if (key === 'ArrowUp') {\n                me.doSpinUp(e.shiftKey);\n                block = true;\n            }\n            else if (key === 'ArrowDown') {\n                me.doSpinDown(e.shiftKey);\n                block = true;\n            }\n            else if (!e.altKey && !e.ctrlKey && key && key.length === 1) {\n                // The key property contains the character or key name... so ignore\n                // keys that aren't a single character.\n                const\n                    after      = me.getAfterValue(key),\n                    afterValue = me.formatter.parseStrict(after),\n                    // no need to check if typing same value or - if negative numbers are allowed\n                    accepted   = afterValue === me.value || (after === '-' && (isNaN(me.min) || me.min < 0));\n\n                block = !accepted && !me.acceptValue(afterValue, after);\n            }\n\n            if (key === 'Enter' && me._changedBySilentSpin) {\n                me.triggerChange(e, true);\n\n                // reset the flag\n                me._changedBySilentSpin = false;\n            }\n\n            if (block) {\n                e.preventDefault();\n            }\n        }\n\n        super.internalOnKeyEvent(e);\n    }\n\n    doSpinUp(largeStep = false) {\n        const me = this;\n\n        if (me.readOnly) {\n            return;\n        }\n\n        let newValue = (me.value || 0) + (largeStep ? me.largeStep : me.step);\n\n        if (!me.okMin(newValue)) {\n            newValue = me.min;\n        }\n\n        if (me.okMax(newValue)) {\n            me.applySpinChange(newValue);\n        }\n    }\n\n    doSpinDown(largeStep = false) {\n        const me = this;\n\n        if (me.readOnly) {\n            return;\n        }\n\n        let newValue = (me.value || 0) - (largeStep ? me.largeStep : me.step);\n\n        if (!me.okMax(newValue)) {\n            newValue = me.max;\n        }\n\n        if (me.okMin(newValue)) {\n            me.applySpinChange(newValue);\n        }\n    }\n\n    applySpinChange(newValue) {\n        const me = this;\n\n        me._isUserAction = true;\n\n        // Should not trigger change immediately?\n        if (me.changeOnSpin !== true) {\n            me._changedBySilentSpin = true;\n            // Silence the change\n            me.silenceChange = true;\n            // Optionally buffer the change\n            me.bufferedSpinChange && me.bufferedSpinChange(null, true);\n        }\n\n        me.value = newValue;\n\n        me._isUserAction = false;\n        me.silenceChange = false;\n    }\n\n    triggerChange() {\n        if (!this.silenceChange) {\n            super.triggerChange(...arguments);\n        }\n    }\n\n    onFocusOut(e) {\n        super.onFocusOut(...arguments);\n\n        const\n            me = this,\n            { input } = me,\n            raw = input.value,\n            value = me.formatter.truncate(raw),\n            formatted = isNaN(value) ? raw : me.formatValue(value);\n\n        // Triggers may have been reconfigured\n        me.triggers?.spin?.clickRepeater?.cancel();\n\n        if (raw !== formatted) {\n            input.value = formatted;\n        }\n\n        if (me._changedBySilentSpin) {\n            me.triggerChange(e, true);\n\n            // reset the flag\n            me._changedBySilentSpin = false;\n        }\n    }\n\n    internalOnInput(event) {\n        const\n            me = this,\n            { formatter, input } = me,\n            { parser } = formatter,\n            raw = input.value,\n            decimals = parser.decimalPlaces(raw);\n\n        if (formatter.truncator && decimals) {\n            let value = raw;\n\n            const trunc = formatter.truncate(raw);\n\n            if (!isNaN(trunc)) {\n                value = me.formatValue(trunc);\n\n                if (parser.decimalPlaces(value) < decimals) {\n                    // If typing has caused truncation or rounding, reset. To best preserve\n                    // the caret pos (which is reset by assigning input.value), we grab and\n                    // restore the distance from the end. This allows special things to format\n                    // into the string (such as thousands separators) since they always go to\n                    // the front of the input.\n                    const pos = raw.length - me.caretPos;\n\n                    input.value = value;\n\n                    me.caretPos = value.length - pos;\n                }\n            }\n        }\n\n        super.internalOnInput(event);\n    }\n\n    formatValue(value) {\n        return this.formatter.format(value);\n    }\n\n    changeFormat(format) {\n        const me = this;\n\n        if (format === '') {\n            const { leadingZeroes, decimalPrecision } = me;\n\n            format = leadingZeroes ? `${leadingZeroes}>9` : null;\n\n            if (decimalPrecision != null) {\n                format = `${format || ''}9.${'#'.repeat(decimalPrecision)}`;\n            }\n            else if (format) {\n                // When we only have leadingZeroes, we'll have a format like \"4>9\", but\n                // that will default to 3 decimal digits. Prior behavior implied no limit\n                // on decimal digits unless decimalPrecision was specified.\n                format += '.*';\n            }\n        }\n\n        return format;\n    }\n\n    get formatter() {\n        const\n            me = this,\n            format = me.format;\n\n        let formatter = me._formatter;\n\n        if (!formatter || me._lastFormat !== format) {\n            formatter = NumberFormat.get(me._lastFormat = format);\n\n            // <remove-on-release>\n            // TODO: use this.formatter.is.from.currency/percent visually...\n            // if (!formatter.is.decimal) {\n            //     formatter = formatter.as('decimal');\n            // }\n            // </remove-on-release>\n\n            me._formatter = formatter;\n        }\n\n        return formatter;\n    }\n\n    //endregion\n\n    //region Getters/Setters\n\n    updateStep(step) {\n        this.element.classList[step ? 'remove' : 'add']('b-hide-spinner');\n        this._step = step;\n    }\n\n    changeLargeStep(largeStep) {\n        return largeStep || (this.step * 10);\n    }\n\n    get validity() {\n        const\n            value    = this.value,\n            validity = {};\n\n        // Assert range for non-empty fields, empty fields will turn invalid if `required: true`\n        if (value != null) {\n            validity.rangeUnderflow = !this.okMin(value);\n            validity.rangeOverflow = !this.okMax(value);\n        }\n        validity.valid = !validity.rangeUnderflow && !validity.rangeOverflow;\n\n        return validity;\n    }\n\n    /**\n     * Get/set the NumberField's value, or `undefined` if the input field is empty\n     * @property {Number}\n     */\n    changeValue(value, was) {\n        const me = this;\n\n        if (value || value === 0) {\n            let valueIsNaN;\n\n            // We insist on a number as the value\n            if (typeof value !== 'number') {\n                value = (typeof value === 'string') ? me.formatter.parse(value) : Number(value);\n\n                valueIsNaN = isNaN(value);\n                if (valueIsNaN) {\n                    value = '';\n                }\n            }\n\n            if (!valueIsNaN && me.format) {\n                value = me.formatter.round(value);\n            }\n        }\n        else {\n            value = undefined;\n        }\n\n        return super.changeValue(value, was);\n    }\n\n    get inputValue() {\n        let value = this.value;\n\n        if (value != null && this.format) {\n            value = this.formatValue(value);\n        }\n\n        return value;\n    }\n\n    //endregion\n}\n\n// Register this widget type with its Factory\nNumberField.initClass();\n", "import Container from './Container.js';\nimport DateHelper from '../helper/DateHelper.js';\nimport './NumberField.js';\n\n/**\n * @module Core/widget/TimePicker\n */\n\n/**\n * A Container which displays hour and minute number fields and AM/PM switcher buttons for 12 hour time format.\n *\n * ```javascript\n * new TimeField({\n *     label     : 'Time field',\n *     appendTo  : document.body,\n *     // Configure the time picker\n *     picker    : {\n *         items : {\n *             minute : {\n *                 step : 5\n *             }\n *         }\n *     }\n * });\n * ```\n *\n * ## Contained widgets\n *\n * The default widgets contained in this picker are:\n *\n * | Widget ref | Type                                        | Description      |\n * |------------|---------------------------------------------|------------------|\n * | `hour`     | {@link Core.widget.NumberField NumberField} | The hour field   |\n * | `minute`   | {@link Core.widget.NumberField NumberField} | The minute field |\n * | `second`   | {@link Core.widget.NumberField NumberField} | The second field |\n * | `amButton` | {@link Core.widget.Button Button}           | The am button    |\n * | `pmButton` | {@link Core.widget.Button Button}           | The pm button    |\n *\n * This class is not intended for use in applications. It is used internally by the {@link Core.widget.TimeField} class.\n *\n * @classType timepicker\n * @extends Core/widget/Container\n * @widget\n */\nexport default class TimePicker extends Container {\n\n    //region Config\n    static get $name() {\n        return 'TimePicker';\n    }\n\n    // Factoryable type name\n    static get type() {\n        return 'timepicker';\n    }\n\n    static configurable = {\n        floating : true,\n        items    : {\n            hour : {\n                label                   : 'L{TimePicker.hour}',\n                type                    : 'number',\n                min                     : 0,\n                max                     : 23,\n                highlightExternalChange : false,\n                format                  : '2>9'\n            },\n            minute : {\n                label                   : 'L{TimePicker.minute}',\n                type                    : 'number',\n                min                     : 0,\n                max                     : 59,\n                highlightExternalChange : false,\n                format                  : '2>9'\n            },\n            second : {\n                hidden                  : true,\n                label                   : 'L{TimePicker.second}',\n                type                    : 'number',\n                min                     : 0,\n                max                     : 59,\n                highlightExternalChange : false,\n                format                  : '2>9'\n            },\n            amButton : {\n                type        : 'button',\n                text        : 'AM',\n                toggleGroup : 'am-pm',\n                cls         : 'b-blue',\n                onClick     : 'up.onAmPmButtonClick'\n            },\n            pmButton : {\n                type        : 'button',\n                text        : 'PM',\n                toggleGroup : 'am-pm',\n                cls         : 'b-blue',\n                onClick     : 'up.onAmPmButtonClick'\n            }\n        },\n\n        autoShow : false,\n\n        trapFocus : true,\n\n        /**\n         * By default the seconds field is not displayed. If you require seconds to be visible,\n         * configure this as `true`\n         * @config {Boolean}\n         * @default false\n         */\n        seconds : null,\n\n        /**\n         * Time value, which can be a Date or a string. If a string is specified, it will be converted using the\n         * specified {@link #config-format}\n         * @prp {Date}\n         * @accepts {Date|String}\n         */\n        value : {\n            $config : {\n                equal : 'date'\n            },\n            value : null\n        },\n\n        /**\n         * Time format. Used to set appropriate 12/24 hour format to display.\n         * See {@link Core.helper.DateHelper#function-format-static DateHelper} for formatting options.\n         * @prp {String}\n         */\n        format : null,\n\n        /**\n         * Max value, which can be a Date or a string. If a string is specified, it will be converted using the\n         * specified {@link #config-format}\n         * @prp {Date}\n         * @accepts {Date|String}\n         */\n        max : null,\n\n        /**\n         * Min value, which can be a Date or a string. If a string is specified, it will be converted using the\n         * specified {@link #config-format}\n         * @prp {Date}\n         * @accepts {Date|String}\n         */\n        min : null,\n\n        /**\n         * Initial value, which can be a Date or a string. If a string is specified, it will be converted using the\n         * specified {@link #config-format}. Initial value is restored on Escape click\n         * @member {Date} initialValue\n         * @accepts {Date|String}\n         */\n        initialValue : null // Not documented as config on purpose, API was that way\n    };\n\n    //endregion\n\n    //region Init\n\n    construct(config) {\n        super.construct(config);\n        this.refresh();\n    }\n\n    updateSeconds(seconds) {\n        this.widgetMap.second[seconds ? 'show' : 'hide']();\n    }\n\n    //endregion\n\n    //region Event listeners\n\n    // Automatically called by Widget's triggerFieldChange which announces changes to all ancestors\n    onFieldChange() {\n        if (!this.isConfiguring && !this.isRefreshing) {\n            this.value = this.pickerToTime();\n        }\n    }\n\n    onAmPmButtonClick({ source }) {\n        this._pm = source.ref === 'pmButton';\n        if (this._value) {\n            this.value = this.pickerToTime();\n        }\n    }\n\n    onInternalKeyDown(keyEvent) {\n        const me = this;\n\n        switch (keyEvent.key) {\n            case 'Escape':\n                // Support for undefined initial time\n                me.triggerTimeChange(me._initialValue);\n                me.hide();\n                keyEvent.preventDefault();\n                return;\n            case 'Enter':\n                me.value = me.pickerToTime();\n                me.hide();\n                keyEvent.preventDefault();\n                return;\n        }\n\n        super.onInternalKeyDown?.(keyEvent);\n    }\n\n    //endregion\n\n    //region Internal functions\n\n    pickerToTime() {\n        const\n            me               = this,\n            pm               = me._pm,\n            { hour, minute, second } = me.widgetMap;\n\n        hour.format = me._is24Hour ? '2>9' : null;\n\n        let hours    = hour.value,\n            newValue = new Date(me.value);\n\n        if (!me._is24Hour) {\n            if (pm && hours < 12) hours = hours + 12;\n            if (!pm && hours === 12) hours = 0;\n        }\n\n        newValue.setHours(hours);\n        newValue.setMinutes(minute.value);\n        if (me.seconds) {\n            newValue.setSeconds(second.value);\n        }\n\n        if (me._min) {\n            newValue = DateHelper.max(me._min, newValue);\n        }\n        if (me._max) {\n            newValue = DateHelper.min(me._max, newValue);\n        }\n\n        return newValue;\n    }\n\n    triggerTimeChange(time) {\n        /**\n         * Fires when a time is changed.\n         * @event timeChange\n         * @param {Date} time The selected time.\n         */\n        this.trigger('timeChange', { time });\n    }\n\n    //endregion\n\n    //region Getters / Setters\n\n    updateInitialValue(initialValue) {\n        this.value = initialValue;\n    }\n\n    changeValue(value) {\n        if (value) {\n            value = typeof value === 'string' ? DateHelper.parse(value, this.format) : value;\n        }\n        if (!this.isVisible) {\n            this._initialValue = value;\n        }\n        return value ?? DateHelper.getTime(0);\n    }\n\n    updateValue(value) {\n        if (this.isVisible) {\n            this.triggerTimeChange(value);\n        }\n        this.refresh();\n    }\n\n    updateFormat(format) {\n        this._is24Hour = DateHelper.is24HourFormat(format);\n        this.refresh();\n    }\n\n    changeMin(min) {\n        return typeof min === 'string' ? DateHelper.parse(min, this.format) : min;\n    }\n\n    changeMax(max) {\n        return typeof max === 'string' ? DateHelper.parse(max, this.format) : max;\n    }\n\n    //endregion\n\n    //region Display\n\n    refresh() {\n        const me = this;\n\n        if (!me.isConfiguring && me.value) {\n            me.isRefreshing = true;\n            const\n                { hour, minute, second, amButton, pmButton } = me.widgetMap,\n                time                                 = me.value,\n                is24                                 = me._is24Hour,\n                hours                                = time.getHours(),\n                pm                                   = me._pm = hours >= 12;\n\n            me.element.classList[is24 ? 'add' : 'remove']('b-24h');\n\n            hour.min         = is24 ? 0 : 1;\n            hour.max         = is24 ? 23 : 12;\n            hour.value       = is24 ? hours : (hours % 12) || 12;\n            minute.value     = time.getMinutes();\n            second.value     = time.getSeconds();\n            amButton.pressed = !pm;\n            pmButton.pressed = pm;\n            amButton.hidden  = pmButton.hidden = is24;\n            me.isRefreshing  = false;\n        }\n    }\n\n    //endregion\n\n}\n\n// Register this widget type with its Factory\nTimePicker.initClass();\n", "import DH from '../helper/DateHelper.js';\nimport PickerField from './PickerField.js';\nimport TimePicker from './TimePicker.js';\n\n/**\n * @module Core/widget/TimeField\n */\n\n/**\n * The time field widget is a text input field with a time picker drop down. It shows left/right arrows to increase or\n * decrease time by the {@link #config-step step value}.\n *\n * This field can be used as an {@link Grid.column.Column#config-editor editor} for the {@link Grid.column.Column Column}.\n * It is used as the default editor for the {@link Grid.column.TimeColumn TimeColumn}.\n *\n * ## Configuring the picker hour / minute fields\n *\n * You can easily configure the fields in the drop-down picker, to control the increment of the up/down step arrows:\n *\n * ```javascript\n * new TimeField({\n *     label     : 'Time field',\n *     appendTo  : document.body,\n *     picker    : {\n *         items : {\n *             minute : {\n *                 step : 5\n *             }\n *         }\n *     }\n * });\n * ```\n *\n * This widget may be operated using the keyboard. `ArrowDown` opens the time picker, which itself\n * is keyboard navigable. `Shift+ArrowDown` activates the {@link #config-step} back trigger.\n * `Shift+ArrowUp` activates the {@link #config-step} forwards trigger.\n *\n * @extends Core/widget/PickerField\n *\n * @example\n * let field = new TimeField({\n *   format: 'HH'\n * });\n *\n * @classType timefield\n * @inlineexample Core/widget/TimeField.js\n * @inputfield\n */\nexport default class TimeField extends PickerField {\n    //region Config\n    static get $name() {\n        return 'TimeField';\n    }\n\n    // Factoryable type name\n    static get type() {\n        return 'timefield';\n    }\n\n    // Factoryable type alias\n    static get alias() {\n        return 'time';\n    }\n\n    static get configurable() {\n        return {\n            picker : {\n                type  : 'timepicker',\n                align : {\n                    align    : 't0-b0',\n                    axisLock : true\n                }\n            },\n\n            /**\n             * Get/Set format for time displayed in field (see {@link Core.helper.DateHelper#function-format-static}\n             * for formatting options).\n             * @member {String} format\n             */\n            /**\n             * Format for date displayed in field (see Core.helper.DateHelper#function-format-static for formatting\n             * options).\n             * @config {String}\n             * @default\n             */\n            format : 'LT',\n\n            triggers : {\n                expand : {\n                    align   : 'end',\n                    handler : 'onTriggerClick',\n                    compose : () => ({\n                        children : [{\n                            class : {\n                                'b-icon-clock-live' : 1\n                            }\n                        }]\n                    })\n                },\n\n                back : {\n                    align   : 'start',\n                    cls     : 'b-icon b-icon-angle-left b-step-trigger',\n                    key     : 'Shift+ArrowDown',\n                    handler : 'onBackClick'\n                },\n\n                forward : {\n                    align   : 'end',\n                    cls     : 'b-icon b-icon-angle-right b-step-trigger',\n                    key     : 'Shift+ArrowUp',\n                    handler : 'onForwardClick'\n                }\n            },\n\n            /**\n             * Get/set min value, which can be a Date or a string. If a string is specified, it will be converted using\n             * the specified {@link #config-format}.\n             * @member {Date} min\n             * @accepts {String|Date}\n             */\n            /**\n             * Min time value\n             * @config {String|Date}\n             */\n            min : null,\n\n            /**\n             * Get/set max value, which can be a Date or a string. If a string is specified, it will be converted using\n             * the specified {@link #config-format}.\n             * @member {Date} max\n             * @accepts {String|Date}\n             */\n            /**\n             * Max time value\n             * @config {String|Date}\n             */\n            max : null,\n\n            /**\n             * The `step` property may be set in Object form specifying two properties, `magnitude`, a Number, and\n             * `unit`, a String.\n             *\n             * If a Number is passed, the steps's current unit is used and just the magnitude is changed.\n             *\n             * If a String is passed, it is parsed by {@link Core.helper.DateHelper#function-parseDuration-static}, for\n             * example `'5m'`, `'5 m'`, `'5 min'`, `'5 minutes'`.\n             *\n             * Upon read, the value is always returned in object form containing `magnitude` and `unit`.\n             * @member {DurationConfig} step\n             * @accepts {String|Number|DurationConfig}\n             */\n            /**\n             * Time increment duration value. Defaults to 5 minutes.\n             * The value is taken to be a string consisting of the numeric magnitude and the units.\n             * The units may be a recognised unit abbreviation of this locale or the full local unit name.\n             * For example `\"10m\"` or `\"5min\"` or `\"2 hours\"`\n             * @config {String}\n             */\n            step : '5m',\n\n            stepTriggers : null,\n\n            /**\n             * Get/set value, which can be a Date or a string. If a string is specified, it will be converted using the\n             * specified {@link #config-format}.\n             * @member {Date} value\n             * @accepts {String|Date}\n             */\n            /**\n             * Value, which can be a Date or a string. If a string is specified, it will be converted using the\n             * specified {@link #config-format}\n             * @config {String|Date}\n             */\n            value : null,\n\n            /**\n             * Set to true to not clean up the date part of the passed value. Set to false to reset the date part to\n             * January 1st\n             * @prp {Boolean}\n             * @default\n             */\n            keepDate : false\n        };\n    }\n\n    //endregion\n\n    //region Init & destroy\n\n    changePicker(picker, oldPicker) {\n        const me = this;\n\n        return TimePicker.reconfigure(oldPicker, picker, {\n            owner : me,\n\n            defaults : {\n                value      : me.value,\n                forElement : me[me.pickerAlignElement],\n                owner      : me,\n                align      : {\n                    anchor : me.overlayAnchor,\n                    target : me[me.pickerAlignElement]\n                },\n\n                onTimeChange({ time }) {\n                    me._isUserAction = true;\n                    me.value = time;\n                    me._isUserAction = false;\n                }\n            }\n        });\n    }\n\n    //endregion\n\n    //region Click listeners\n\n    onBackClick() {\n        const\n            me      = this,\n            { min } = me;\n\n        if (!me.readOnly && me.value) {\n            const newValue = DH.add(me.value, -1 * me.step.magnitude, me.step.unit);\n\n            if (!min || min.getTime() <= newValue) {\n                me._isUserAction = true;\n                me.value = newValue;\n                me._isUserAction = false;\n            }\n        }\n    }\n\n    onForwardClick() {\n        const\n            me      = this,\n            { max } = me;\n\n        if (!me.readOnly && me.value) {\n            const newValue = DH.add(me.value, me.step.magnitude, me.step.unit);\n\n            if (!max || max.getTime() >= newValue) {\n                me._isUserAction = true;\n                me.value = newValue;\n                me._isUserAction = false;\n            }\n        }\n    }\n\n    //endregion\n\n    // region Validation\n\n    get isValid() {\n        const me  = this;\n\n        me.clearError('L{Field.minimumValueViolation}', true);\n        me.clearError('L{Field.maximumValueViolation}', true);\n\n        let value = me.value;\n\n        if (value) {\n            value = value.getTime();\n            if (me._min && me._min.getTime() > value) {\n                me.setError('L{Field.minimumValueViolation}', true);\n                return false;\n            }\n\n            if (me._max && me._max.getTime() < value) {\n                me.setError('L{Field.maximumValueViolation}', true);\n                return false;\n            }\n        }\n\n        return super.isValid;\n    }\n\n    hasChanged(oldValue, newValue) {\n        if (oldValue?.getTime && newValue?.getTime) {\n            // Only care about the time part\n            return oldValue.getHours() !== newValue.getHours() ||\n                oldValue.getMinutes() !== newValue.getMinutes() ||\n                oldValue.getSeconds() !== newValue.getSeconds() ||\n                oldValue.getMilliseconds() !== newValue.getMilliseconds();\n        }\n\n        return super.hasChanged(oldValue, newValue);\n    }\n\n    //endregion\n\n    //region Toggle picker\n\n    /**\n     * Show picker\n     */\n    showPicker() {\n        const\n            me = this,\n            {\n                picker,\n                value\n            }  = me;\n\n        if (me.readOnly) {\n            return;\n        }\n\n        picker.value = value;\n        picker.format = me.format;\n        picker.maxTime = me.max;\n        picker.minTime = me.min;\n\n        // If we had no value initially.\n        if (!value) {\n            me.value = picker.value;\n        }\n\n        super.showPicker(true);\n    }\n\n    onPickerShow() {\n        super.onPickerShow();\n\n        // Remove PickerField key listener\n        this.pickerKeyDownRemover = this.pickerKeyDownRemover?.();\n    }\n\n    /**\n     * Focus time picker\n     */\n    focusPicker() {\n        this.picker.focus();\n    }\n\n    //endregion\n\n    //region Getters/setters\n\n    transformTimeValue(value) {\n        if (value != null) {\n            if (typeof value === 'string') {\n                value = DH.parse(value, this.format);\n\n                if (this.keepDate) {\n                    value = DH.copyTimeValues(new Date(this.value), value);\n                }\n            }\n            else {\n                value = new Date(value);\n            }\n\n            // We insist on a *valid* Time as the value\n            if (DH.isValidDate(value)) {\n                if (!this.keepDate) {\n                    // Clear date part back to zero so that all we have is the time part of the epoch.\n                    return DH.getTime(value);\n                }\n                else {\n                    return value;\n                }\n            }\n        }\n        return null;\n    }\n\n    changeMin(value) {\n        return this.transformTimeValue(value);\n    }\n\n    updateMin(value) {\n        const { input } = this;\n\n        if (input) {\n            if (value == null) {\n                input.removeAttribute('min');\n            }\n            else {\n                input.min = value;\n            }\n        }\n\n        this.syncInvalid();\n    }\n\n    changeMax(value) {\n        return this.transformTimeValue(value);\n    }\n\n    updateMax(value) {\n        const { input } = this;\n\n        if (input) {\n            if (value == null) {\n                input.removeAttribute('max');\n            }\n            else {\n                input.max = value;\n            }\n        }\n\n        this.syncInvalid();\n    }\n\n    changeValue(value, was) {\n        const\n            me = this,\n            newValue = me.transformTimeValue(value);\n\n        // A value we could not parse\n        if (value && !newValue || (me.isRequired && value === '')) {\n            // setError uses localization\n            me.setError('L{invalidTime}');\n            return;\n        }\n\n        me.clearError('L{invalidTime}');\n\n        // Reject non-change\n        if (me.hasChanged(was, newValue)) {\n            return super.changeValue(newValue, was);\n        }\n\n        // But we must fix up the display in case it was an unparseable string\n        // and the value therefore did not change.\n        if (!me.inputting) {\n            me.syncInputFieldValue(true);\n        }\n    }\n\n    updateValue(value, was) {\n        const { expand } = this.triggers;\n\n        // This makes to clock icon show correct time\n        if (expand && value) {\n            expand.element.firstElementChild.style.animationDelay =\n                -((value.getHours() * 60 + value.getMinutes()) / 10) + 's';\n        }\n\n        super.updateValue(value, was);\n    }\n\n    changeStep(value, was) {\n        const type = typeof value;\n\n        if (!value) {\n            return null;\n        }\n\n        if (type === 'number') {\n            value = {\n                magnitude : Math.abs(value),\n                unit      : was ? was.unit : 'hour'\n            };\n        }\n        else if (type === 'string') {\n            value = DH.parseDuration(value);\n        }\n\n        if (value?.unit && value?.magnitude) {\n            if (value.magnitude < 0) {\n                value = {\n                    magnitude : -value.magnitude,  // Math.abs\n                    unit      : value.unit\n                };\n            }\n\n            return value;\n        }\n    }\n\n    updateStep(value) {\n        // If a step is configured, show the steppers\n        this.element.classList[value ? 'remove' : 'add']('b-no-steppers');\n\n        this.syncInvalid();\n    }\n\n    updateFormat() {\n        this.syncInputFieldValue(true);\n    }\n\n    get inputValue() {\n        return DH.format(this.value, this.format);\n    }\n\n    //endregion\n\n    //region Localization\n\n    updateLocalization() {\n        super.updateLocalization();\n        this.syncInputFieldValue(true);\n    }\n\n    //endregion\n}\n\n// Register this widget type with its Factory\nTimeField.initClass();\n", "import TextField from './TextField.js';\nimport DateHelper from '../helper/DateHelper.js';\nimport ObjectHelper from '../helper/ObjectHelper.js';\nimport Duration from '../data/Duration.js';\n\n/**\n * @module Core/widget/DurationField\n */\n\n/**\n * A specialized field allowing a user to also specify duration unit when editing the duration value.\n *\n * This field can be used as an {@link Grid.column.Column#config-editor editor} for the {@link Grid.column.Column Column}.\n * It is used as the default editor for the `DurationColumn`.\n *\n * @extends Core/widget/TextField\n * @classType durationfield\n * @inlineexample Core/widget/DurationField.js\n * @inputfield\n */\nexport default class DurationField extends TextField {\n    static get $name() {\n        return 'DurationField';\n    }\n\n    // Factoryable type name\n    static get type() {\n        return 'durationfield';\n    }\n\n    // Factoryable type alias\n    static get alias() {\n        return 'duration';\n    }\n\n    static get defaultConfig() {\n        return {\n            /**\n             * The `value` config may be set in Object form specifying two properties,\n             * `magnitude`, a Number, and `unit`, a String.\n             *\n             * If a String is passed, it is parsed in accordance with current locale rules.\n             * The string is taken to be the numeric magnitude, followed by whitespace, then an abbreviation, or name of\n             * the unit.\n             * @config {DurationConfig|String}\n             * @category Common\n             */\n            value : null,\n\n            /**\n             * Step size for spin button clicks.\n             * @config {Number}\n             * @default\n             * @category Common\n             */\n            step : 1,\n\n            /**\n             * The duration unit to use with the current magnitude value.\n             * @config {'millisecond'|'second'|'minute'|'hour'|'day'|'week'|'month'|'quarter'|'year'}\n             * @category Common\n             */\n            unit : null,\n\n            defaultUnit : 'day',\n\n            /**\n             * The duration magnitude to use with the current unit value. Can be either an integer or a float value.\n             * Both \",\" and \".\" are valid decimal separators.\n             * @config {Number}\n             * @category Common\n             */\n            magnitude : null,\n\n            /**\n             * When set to `true` the field will use short names of unit durations\n             * (as returned by {@link Core.helper.DateHelper#function-getShortNameOfUnit-static}) when creating the\n             * input field's display value.\n             * @config {Boolean}\n             * @category Common\n             */\n            useAbbreviation : false,\n\n            /**\n             * Set to `true` to allow negative duration\n             * @config {Boolean}\n             * @category Common\n             */\n            allowNegative : false,\n\n            /**\n             * The number of decimal places to allow. Defaults to no constraint.\n             * @config {Number}\n             * @default\n             * @category Common\n             */\n            decimalPrecision : null,\n\n            triggers : {\n                spin : {\n                    type : 'spintrigger'\n                }\n            },\n\n            nullValue : null\n        };\n    }\n\n    /**\n     * Fired when this field's value changes.\n     * @event change\n     * @param {Core.data.Duration} value - This field's value\n     * @param {Core.data.Duration} oldValue - This field's previous value\n     * @param {Boolean} valid - True if this field is in a valid state.\n     * @param {Event} [event] - The triggering DOM event if any.\n     * @param {Boolean} userAction - Triggered by user taking an action (`true`) or by setting a value (`false`)\n     * @param {Core.widget.DurationField} source - This field\n     */\n\n    /**\n     * User performed default action (typed into this field or hit the triggers).\n     * @event action\n     * @param {Core.data.Duration} value - This field's value\n     * @param {Core.data.Duration} oldValue - This field's previous value\n     * @param {Boolean} valid - True if this field is in a valid state.\n     * @param {Event} [event] - The triggering DOM event if any.\n     * @param {Boolean} userAction - Triggered by user taking an action (`true`) or by setting a value (`false`)\n     * @param {Core.widget.DurationField} source - This field\n     */\n\n    static get configurable() {\n        return {\n            /**\n             * Get/set the min value (e.g. 1d)\n             * @member {String} min\n             * @category Common\n             */\n            /**\n             * Minimum duration value (e.g. 1d)\n             * @config {String}\n             * @category Common\n             */\n            min : null,\n\n            /**\n             * Get/set the max value\n             * @member {String} max (e.g. 10d)\n             * @category Common\n             */\n            /**\n             * Max duration value (e.g. 10d)\n             * @config {String}\n             * @category Common\n             */\n            max : null,\n\n            /**\n             * Get/set the allowed units, e.g. \"day,hour,year\".\n             * @member {String} allowedUnits\n             * @category Common\n             */\n            /**\n             * Comma-separated list of units to allow in this field, e.g. \"day,hour,year\". Leave blank to allow all\n             * valid units (the default)\n             * @config {String}\n             * @category Common\n             */\n            allowedUnits : null\n        };\n    }\n\n    changeMin(value) {\n        return typeof value === 'string' ? new Duration(value) : value;\n    }\n\n    changeMax(value) {\n        return typeof value === 'string' ? new Duration(value) : value;\n    }\n\n    changeAllowedUnits(units) {\n        if (typeof units === 'string') {\n            units = units.split(',');\n        }\n\n        return units;\n    }\n\n    updateAllowedUnits(units) {\n        this.allowedUnitsRe = new RegExp(`(${units.join('|')})`, 'i');\n    }\n\n    get inputValue() {\n        // Do not use the _value property. If called during configuration, this\n        // will import the configured value from the config object.\n        return this.value == null ? '' : this.calcValue(true).toString(this.useAbbreviation);\n    }\n\n    /**\n     * Get/Set duration unit to use with the current magnitude value.\n     * Valid values are:\n     * - \"millisecond\" - Milliseconds\n     * - \"second\" - Seconds\n     * - \"minute\" - Minutes\n     * - \"hour\" - Hours\n     * - \"day\" - Days\n     * - \"week\" - Weeks\n     * - \"month\" - Months\n     * - \"quarter\" - Quarters\n     * - \"year\"- Years\n     *\n     * @property {'millisecond'|'second'|'minute'|'hour'|'day'|'week'|'month'|'quarter'|'year'}\n     * @category Common\n     */\n    set unit(unit) {\n        this._unit = unit;\n        this.value = this.calcValue();\n    }\n\n    get unit() {\n        return this._unit;\n    }\n\n    get unitWithDefault() {\n        return this._unit || DurationField.defaultConfig.defaultUnit;\n    }\n\n    /**\n     * Get/Set numeric magnitude `value` to use with the current unit value.\n     * @property {Number}\n     * @category Common\n     */\n    set magnitude(magnitude) {\n        this.clearError('L{invalidUnit}');\n\n        this._magnitude = magnitude;\n        super.value = this.calcValue();\n    }\n\n    get magnitude() {\n        return this._magnitude;\n    }\n\n    roundMagnitude(value) {\n        return value && this.decimalPrecision != null ? ObjectHelper.round(value, this.decimalPrecision) : value;\n    }\n\n    get allowDecimals() {\n        return this.decimalPrecision !== 0;\n    }\n\n    get isValid() {\n        const\n            me      = this,\n            isEmpty = me.value == null || (me.value && me.value.magnitude == null);\n\n        return super.isValid && ((isEmpty && !me.required) || !isEmpty && (me.allowNegative || me.value.magnitude >= 0));\n    }\n\n    internalOnChange(event) {\n        const\n            me     = this,\n            value  = me.value,\n            oldVal = me._lastValue;\n\n        if (me.hasChanged(oldVal, value)) {\n            me._lastValue = value;\n            me.triggerFieldChange({ value, event, userAction : true, valid : me.isValid });\n        }\n    }\n\n    onFocusOut(e) {\n        this.syncInputFieldValue(true);\n\n        this.triggers?.spin?.clickRepeater?.cancel();\n\n        return super.onFocusOut(e);\n    }\n\n    /**\n     * The `value` property may be set in Object form specifying two properties, `magnitude`, a Number, and `unit`, a\n     * String.\n     *\n     * If a Number is passed, the field's current unit is used and just the magnitude is changed.\n     *\n     * If a String is passed, it is parsed in accordance with current locale rules. The string is taken to be the\n     * numeric magnitude, followed by whitespace, then an abbreviation, or name of the unit.\n     *\n     * Upon read, the value is always a {@link Core.data.Duration} object containing `magnitude` and `unit`.\n     *\n     * @property {Core.data.Duration}\n     * @accepts {String|Number|DurationConfig|Core.data.Duration}\n     * @category Common\n     */\n    set value(value) {\n        const\n            me = this;\n        let newMagnitude, newUnit;\n\n        this.clearError('L{invalidUnit}');\n\n        if (typeof value === 'number') {\n            // A number means preserving existing unit value\n            newMagnitude = value;\n            newUnit = me._unit;\n        }\n        else if (typeof value === 'string') {\n            if (/^\\s*$/.test(value)) {\n                // special case of \"empty\" (in user meaning) string - set to `null` to allow unscheduling of tasks\n                newMagnitude = null;\n            }\n            else {\n                // Parse as a string\n                const\n                    parsedDuration = DateHelper.parseDuration(value, me.allowDecimals, me.unitWithDefault);\n\n                if (parsedDuration) {\n                    if (!me.allowedUnitsRe || me.allowedUnitsRe.test(parsedDuration.unit)) {\n                        newUnit = parsedDuration.unit;\n                        newMagnitude = parsedDuration.magnitude;\n                    }\n                    else {\n                        me.setError('L{invalidUnit}');\n                    }\n                }\n            }\n        }\n        else {\n            // Using value object with unit and magnitude\n            if (value && 'unit' in value && 'magnitude' in value) {\n                newUnit = value.unit;\n                newMagnitude = value.magnitude;\n            }\n            else {\n                newUnit = null;\n                newMagnitude = null;\n            }\n        }\n\n        if (me._magnitude !== newMagnitude || me._unit != newUnit) {\n            me._magnitude = newMagnitude;\n\n            // Once we have unit, do not clear it if setting clearing value\n            if (newUnit) {\n                me._unit = newUnit;\n            }\n            super.value = me.calcValue();\n        }\n    }\n\n    okMax(value) {\n        if (typeof value === 'number') {\n            value = new Duration({\n                unit      : this.unitWithDefault,\n                magnitude : value\n            });\n        }\n        return this.max == null || value <= this.max;\n    }\n\n    okMin(value) {\n        if (typeof value === 'number') {\n            value = new Duration({\n                unit      : this.unitWithDefault,\n                magnitude : value\n            });\n        }\n\n        return this.min == null || value >= this.min;\n    }\n\n    get validity() {\n        const\n            value    = this.value,\n            validity = {};\n\n        // Assert range for non-empty fields, empty fields will turn invalid if `required: true`\n        if (value != null) {\n            validity.rangeUnderflow = !this.okMin(value);\n            validity.rangeOverflow  = !this.okMax(value);\n        }\n        validity.valid = !validity.rangeUnderflow && !validity.rangeOverflow;\n\n        return validity;\n    }\n\n    get value() {\n        return super.value;\n    }\n\n    calcValue(round = false) {\n        const\n            me = this;\n\n        if ((!me._unit || me._magnitude == null) && me.clearable) {\n            return null;\n        }\n        else {\n            return new Duration(round ? this.roundMagnitude(me._magnitude) : this._magnitude, me.unitWithDefault);\n        }\n    }\n\n    hasChanged(oldValue, newValue) {\n        return newValue && !oldValue ||\n            !newValue && oldValue ||\n            newValue && oldValue && !oldValue.isEqual(newValue);\n    }\n\n    /**\n     * The `milliseconds` property is a read only property which returns the number of milliseconds in this field's\n     * value\n     * @member {Number} milliseconds\n     * @readonly\n     */\n    get milliseconds() {\n        // For reasons unknown documenting as @property did not work\n\n        return this.value ? this.value.milliseconds : 0;\n    }\n\n    onInternalKeyDown(keyEvent) {\n        if (keyEvent.key === 'ArrowUp') {\n            this.doSpinUp();\n        }\n        else if (keyEvent.key === 'ArrowDown') {\n            this.doSpinDown();\n        }\n    }\n\n    doSpinUp() {\n        const me = this;\n\n        if (me.readOnly) {\n            return;\n        }\n\n        let newValue = (me.magnitude || 0) + me.step;\n\n        me._isUserAction = true;\n\n        if (!me.okMin(newValue)) {\n            newValue = me.min;\n        }\n\n        if (me.okMax(newValue)) {\n            me.value = newValue;\n        }\n\n        me._isUserAction = false;\n    }\n\n    doSpinDown() {\n        const me = this;\n\n        if (me.readOnly) {\n            return;\n        }\n\n        let newValue = (me.magnitude || 0) - me.step;\n\n        if (!me.okMax(newValue)) {\n            newValue = me.max;\n        }\n\n        if (me.okMin(newValue) && (me.allowNegative || (me.magnitude || 0) > 0)) {\n            me._isUserAction = true;\n            me.value         = newValue;\n\n            me._isUserAction = false;\n        }\n    }\n}\n\n// Register this widget type with its Factory\nDurationField.initClass();\n", "import Container from './Container.js';\nimport ArrayHelper from '../helper/ArrayHelper.js';\nimport DateHelper from '../helper/DateHelper.js';\nimport './Combo.js';\nimport './Checkbox.js';\nimport './NumberField.js';\nimport './TextField.js';\nimport './DateField.js';\nimport './DurationField.js';\nimport DomClassList from '../helper/util/DomClassList.js';\nimport ObjectHelper from '../helper/ObjectHelper.js';\nimport Duration from '../data/Duration.js';\nimport VersionHelper from '../helper/VersionHelper.js';\n\n/**\n * @module Core/widget/FieldFilterPicker\n */\n\nexport const SUPPORTED_FIELD_DATA_TYPES = ['number', 'boolean', 'string', 'date', 'duration'];\n\nexport const isSupportedDurationField = field => field.column?.type === 'duration';\n\nconst EMPTY_STRING = '';\n\n/**\n * A field that is available for selection when defining filters.\n *\n * @typedef {Object} FieldOption\n * @property {'string'|'number'|'date'|'boolean'} type The data type of the values in this field in the data source\n * @property {String} title The human-friendly display name for the field, as might be displayed in a data column header\n */\n\n/**\n * A dictionary of value field placeholder strings, keyed by data type.\n *\n * @typedef {Object} ValueFieldPlaceholders\n * @property {String} string Placeholder text for text value fields\n * @property {String} number Placeholder text for number value fields\n * @property {String} date Placeholder text for date value fields\n * @property {String} list Placeholder text for multi-select list values, e.g. for the 'is one of' operator\n */\n\n/**\n * Widget for defining a {@link Core.util.CollectionFilter} for use in filtering a {@link Core.data.Store}.\n * Filters consist of `property` (the name of the data field whose values are checked), `operator`\n * (the type of comparison to use), and `value` (the pre-defined value against which to compare the\n * data field value during filtering).\n *\n * {@inlineexample Core/widget/FieldFilterPicker.js}\n *\n * For example:\n *\n * ```javascript\n * new FieldFilterPicker({\n *     appendTo : domElement,\n *\n *     fields: {\n *         // Allow filters to be defined against the 'age' and 'role' fields in our data\n *         age       : { title: 'Age', type: 'number' },\n *         startDate : { title: 'Start Date', type: 'date' }\n *     },\n *\n *     filter : {\n *         property : 'startDate',\n *         operator : '<',\n *         value    : new Date()\n *     }\n * });\n * ```\n *\n * @extends Core/widget/Container\n * @demo Grid/fieldfilters\n * @classtype fieldfilterpicker\n * @widget\n */\nexport default class FieldFilterPicker extends Container {\n\n    //region Config\n    static get $name() {\n        return 'FieldFilterPicker';\n    }\n\n    // Factoryable type name\n    static get type() {\n        return 'fieldfilterpicker';\n    }\n\n    static operators = {\n        empty           : { value : 'empty', text : 'L{isEmpty}', argCount : 0 },\n        notEmpty        : { value : 'notEmpty', text : 'L{isNotEmpty}', argCount : 0 },\n        '='             : { value : '=', text : 'L{equals}' },\n        '!='            : { value : '!=', text : 'L{doesNotEqual}' },\n        '>'             : { value : '>', text : 'L{isGreaterThan}' },\n        '<'             : { value : '<', text : 'L{isLessThan}' },\n        '>='            : { value : '>=', text : 'L{isGreaterThanOrEqualTo}' },\n        '<='            : { value : '<=', text : 'L{isLessThanOrEqualTo}' },\n        between         : { value : 'between', text : 'L{isBetween}', argCount : 2 },\n        notBetween      : { value : 'notBetween', text : 'L{isNotBetween}', argCount : 2 },\n        isIncludedIn    : { value : 'isIncludedIn', text : 'L{isOneOf}' },\n        isNotIncludedIn : { value : 'isNotIncludedIn', text : 'L{isNotOneOf}' }\n    };\n\n    static defaultOperators = {\n        string : [\n            // In display order\n            this.operators.empty,\n            this.operators.notEmpty,\n            this.operators['='],\n            this.operators['!='],\n            { value : 'includes', text : 'L{contains}' },\n            { value : 'doesNotInclude', text : 'L{doesNotContain}' },\n            { value : 'startsWith', text : 'L{startsWith}' },\n            { value : 'endsWith', text : 'L{endsWith}' },\n            this.operators.isIncludedIn,\n            this.operators.isNotIncludedIn\n        ],\n        number : [\n            this.operators.empty,\n            this.operators.notEmpty,\n            this.operators['='],\n            this.operators['!='],\n            this.operators['>'],\n            this.operators['<'],\n            this.operators['>='],\n            this.operators['<='],\n            this.operators.between,\n            this.operators.notBetween,\n            this.operators.isIncludedIn,\n            this.operators.isNotIncludedIn\n        ],\n        date : [\n            this.operators.empty,\n            this.operators.notEmpty,\n            this.operators['='],\n            this.operators['!='],\n            { value : '<', text : 'L{isBefore}' },\n            { value : '>', text : 'L{isAfter}' },\n            this.operators.between,\n            { value : 'isToday', text : 'L{isToday}', argCount : 0 },\n            { value : 'isTomorrow', text : 'L{isTomorrow}', argCount : 0 },\n            { value : 'isYesterday', text : 'L{isYesterday}', argCount : 0 },\n            { value : 'isThisWeek', text : 'L{isThisWeek}', argCount : 0 },\n            { value : 'isNextWeek', text : 'L{isNextWeek}', argCount : 0 },\n            { value : 'isLastWeek', text : 'L{isLastWeek}', argCount : 0 },\n            { value : 'isThisMonth', text : 'L{isThisMonth}', argCount : 0 },\n            { value : 'isNextMonth', text : 'L{isNextMonth}', argCount : 0 },\n            { value : 'isLastMonth', text : 'L{isLastMonth}', argCount : 0 },\n            { value : 'isThisYear', text : 'L{isThisYear}', argCount : 0 },\n            { value : 'isNextYear', text : 'L{isNextYear}', argCount : 0 },\n            { value : 'isLastYear', text : 'L{isLastYear}', argCount : 0 },\n            { value : 'isYearToDate', text : 'L{isYearToDate}', argCount : 0 },\n            this.operators.isIncludedIn,\n            this.operators.isNotIncludedIn\n        ],\n        boolean : [\n            { value : 'isTrue', text : 'L{isTrue}', argCount : 0 },\n            { value : 'isFalse', text : 'L{isFalse}', argCount : 0 }\n        ],\n        duration : [\n            this.operators.empty,\n            this.operators.notEmpty,\n            this.operators['='],\n            this.operators['!='],\n            this.operators['>'],\n            this.operators['<'],\n            this.operators['>='],\n            this.operators['<='],\n            this.operators.between,\n            this.operators.notBetween,\n            this.operators.isIncludedIn,\n            this.operators.isNotIncludedIn\n        ],\n        relation : [\n            this.operators.isIncludedIn,\n            this.operators.isNotIncludedIn\n        ]\n    };\n\n    static get defaultValueFieldPlaceholders() {\n        return {\n            string   : 'L{enterAValue}',\n            number   : 'L{enterANumber}',\n            date     : 'L{selectADate}',\n            list     : 'L{selectOneOrMoreValues}',\n            duration : 'L{enterAValue}'\n        };\n    };\n\n    static configurable = {\n        /**\n         * Dictionary of {@link #typedef-FieldOption} representing the fields against which filters can be defined,\n         * keyed by field name.\n         *\n         * <div class=\"note\">5.3.0 Syntax accepting FieldOption[] was deprecated in favor of dictionary and will be removed in 6.0</div>\n         *\n         * If filtering a {@link Grid.view.Grid}, consider using {@link Grid.widget.GridFieldFilterPicker}, which can be configured\n         * with an existing {@link Grid.view.Grid} instead of, or in combination with, defining fields manually.\n         *\n         * Example:\n         * ```javascript\n         * fields: {\n         *     // Allow filters to be defined against the 'age' and 'role' fields in our data\n         *     age  : { title: 'Age', type: 'number' },\n         *     role : { title: 'Role', type: 'string' }\n         * }\n         * ```\n         *\n         * @config {Object<String,FieldOption>}\n         */\n        fields : null,\n\n        /**\n         * Make the entire picker disabled.\n         *\n         * @config {Boolean}\n         * @default\n         */\n        disabled : false,\n\n        /**\n         * Make the entire picker read-only.\n         *\n         * @config {Boolean}\n         * @default\n         */\n        readOnly : false,\n\n        layout : 'vbox',\n\n        /**\n         * Make only the property selector readOnly.\n         * @private\n         *\n         * @config {Boolean}\n         * @default\n         */\n        propertyLocked : false,\n\n        /**\n         * Make only the operator selector readOnly.\n         * @private\n         *\n         * @config {Boolean}\n         * @default\n         */\n        operatorLocked : false,\n\n        /**\n         * Configuration object for the {@link Core.util.CollectionFilter} displayed\n         * and editable in this picker.\n         *\n         * Example:\n         *\n         * ```javascript\n         * {\n         *     property: 'age',\n         *     operator: '=',\n         *     value: 25\n         * }\n         * ```\n         *\n         * @config {CollectionFilterConfig}\n         */\n        filter : null,\n\n        /**\n         * Optional configuration for the property selector {@link Core.widget.Combo}.\n         *\n         * @config {ComboConfig}\n         */\n        propertyFieldConfig : null,\n\n        /**\n         * Optional configuration for the operator selector {@link Core.widget.Combo}.\n         *\n         * @config {ComboConfig}\n         * @private\n         */\n        operatorFieldConfig : null,\n\n        /**\n         * Optional CSS class to apply to the value field(s).\n         *\n         * @config {String}\n         * @private\n         */\n        valueFieldCls : null,\n\n        /**\n         * @private\n         */\n        items : {\n            propertyAndOperator : {\n                type   : 'container',\n                layout : 'box',\n                items  : {\n                    propertyPicker : {\n                        type        : 'combo',\n                        items       : {},\n                        cls         : `b-${FieldFilterPicker.type}-property`,\n                        placeholder : 'L{FieldFilterPicker.selectAProperty}'\n                    },\n                    operatorPicker : {\n                        type        : 'combo',\n                        items       : {},\n                        cls         : `b-${FieldFilterPicker.type}-operator`,\n                        placeholder : 'L{FieldFilterPicker.selectAnOperator}'\n                    }\n                }\n            },\n            valueFieldRow : {\n                type  : 'container',\n                cls   : `b-${FieldFilterPicker.type}-values`,\n                items : {}\n            },\n            caseSensitive : {\n                type : 'checkbox',\n                text : 'L{FieldFilterPicker.caseSensitive}',\n                cls  : `b-${FieldFilterPicker.type}-case-sensitive`\n            }\n        },\n\n        /**\n         * Overrides the built-in list of operators that are available for selection. Specify operators as\n         * an object with data types as keys and lists of operators as values, like this:\n         *\n         * ```javascript\n         * operators : {\n         *     string : [\n         *         { value : 'empty', text : 'is empty', argCount : 0 },\n         *         { value : 'notEmpty', text : 'is not empty', argCount : 0 }\n         *     ],\n         *     number : [\n         *         { value : '=', text : 'equals' },\n         *         { value : '!=', text : 'does not equal' }\n         *     ],\n         *     date : [\n         *         { value : '<', text : 'is before' }\n         *     ]\n         * }\n         * ```\n         *\n         * Here `value` is what will be stored in the `operator` field in the filter when selected, `text` is the text\n         * displayed in the Combo for selection, and `argCount` is the number of arguments (comparison values) the\n         * operator requires. The default argCount if not specified is 1.\n         *\n         * @config {Object}\n         */\n        operators : FieldFilterPicker.defaultOperators,\n\n        /**\n         * The date format string used to display dates when using the 'is one of' / 'is not one of' operators with a date\n         * field. Defaults to the current locale's `FieldFilterPicker.dateFormat` value.\n         *\n         * @config {String}\n         * @default\n         */\n        dateFormat : 'L{FieldFilterPicker.dateFormat}',\n\n        /**\n         * Optional {Core.data.Store} against which filters are being defined. This is used to supply options to filter against\n         * when using the 'is one of' and 'is not one of' operators.\n         *\n         * @config {Core.data.Store}\n         */\n        store : null,\n\n        /**\n         * Optional {@link ValueFieldPlaceholders} object specifying custom placeholder text for value input fields.\n         *\n         * @config {ValueFieldPlaceholders}\n         */\n        valueFieldPlaceholders : null,\n\n        /**\n         * Optional function that modifies the configuration of value fields shown for a filter. The default configuration\n         * is received as an argument and the returned value will be used as the final configuration. For example:\n         *\n         * ```javascript\n         * getValueFieldConfig : (filter, fieldConfig) => {\n         *     return {\n         *         ...fieldConfig,\n         *         title : fieldName    // Override the `title` config for the field\n         *     };\n         * }\n         * ```\n         *\n         * The supplied function should accept the following arguments:\n         *\n         * @param {Core.util.CollectionFilter} filter The filter being displayed\n         * @param {ContainerItemConfig} fieldConfig Configuration object for the value field\n         *\n         * @config {Function}\n         */\n        getValueFieldConfig : null\n    };\n\n    //endregion\n\n    // Make lookup of operator arity (arg count) by [fieldType][operator]\n    static buildOperatorArgCountLookup = operators =>\n        ArrayHelper.keyBy(Object.entries(operators),\n            ([fieldType])   => fieldType,\n            ([, operators]) => ArrayHelper.keyBy(operators,\n                ({ value }) => value,\n                ({ argCount }) => argCount === undefined ? 1 : argCount\n            ));\n\n    afterConstruct() {\n        const me = this;\n        if (!me._fields) {\n            throw new Error(`${FieldFilterPicker.name} requires 'fields' to be configured.`);\n        }\n        if (!me._filter) {\n            throw new Error(`${FieldFilterPicker.name} requires 'filter' to be configured.`);\n        }\n        super.afterConstruct();\n        const { widgetMap: { propertyPicker, operatorPicker, caseSensitive } } = me;\n        propertyPicker.ion({ select : 'onPropertySelect', thisObj : me });\n        operatorPicker.ion({ select : 'onOperatorSelect', thisObj : me });\n        caseSensitive.ion({ change : 'onCaseSensitiveChange', thisObj : me });\n        me.propertyFieldConfig && propertyPicker.setConfig(me.propertyFieldConfig);\n        me.operatorFieldConfig && operatorPicker.setConfig(me.operatorFieldConfig);\n        propertyPicker.cls = me.allPropertyPickerClasses;\n        operatorPicker.cls = me.allOperatorPickerClasses;\n        me.populateUIFromFilter();\n    }\n\n    changeDateFormat(dateFormat) {\n        return this.L(dateFormat);\n    }\n\n    get allChildInputs() {\n        const { propertyPicker, operatorPicker, caseSensitive } = this.widgetMap;\n        return [propertyPicker, operatorPicker, ...this.valueFields, caseSensitive];\n    }\n\n    updateDisabled(newDisabled) {\n        this.allChildInputs.forEach(field => field.disabled = newDisabled);\n    }\n\n    updateReadOnly(newReadOnly) {\n        const { propertyPicker, operatorPicker } = this.widgetMap;\n        this.allChildInputs.forEach(field => field.readOnly = newReadOnly);\n        // Respect these individual configs when un-setting global readOnly\n        propertyPicker.readOnly = propertyPicker.readOnly || newReadOnly;\n        operatorPicker.readOnly = operatorPicker.readOnly || newReadOnly;\n    }\n\n    updatePropertyLocked(newPropertyLocked) {\n        this.widgetMap.propertyPicker.readOnly = newPropertyLocked || this.readOnly;\n        this.widgetMap.propertyPicker.cls = this.allPropertyPickerClasses;\n    }\n\n    updateOperatorLocked(newOperatorLocked) {\n        this.widgetMap.operatorPicker.readOnly = newOperatorLocked || this.readOnly;\n        this.widgetMap.operatorPicker.cls = this.allOperatorPickerClasses;\n    }\n\n    changeOperators(newOperators) {\n        const operators = (newOperators ?? FieldFilterPicker.defaultOperators);\n        return Object.keys(operators).reduce((outOperators, dataType) => ({\n            ...outOperators,\n            [dataType] : operators[dataType].map(op => ({ ...op, text : this.L(op.text) }))\n        }), {});\n    }\n\n    changeFields(newFields) {\n        let fields = newFields;\n        if (Array.isArray(newFields)) {\n            VersionHelper.deprecate('Core', '6.0.0', 'FieldOption[] deprecated, use Object<String, FieldOption> keyed by field name instead');\n            // Support old array syntax for `fields` during deprecation\n            fields = ArrayHelper.keyBy(fields, 'name');\n        }\n        return fields;\n    }\n\n    get isMultiSelectValueField() {\n        return ['isIncludedIn', 'isNotIncludedIn'].includes(this._filter?.operator);\n    }\n\n    get allPropertyPickerClasses() {\n        return new DomClassList(`b-${FieldFilterPicker.type}-property`, this.propertyFieldConfig?.cls, {\n            [`b-${FieldFilterPicker.type}-combo-locked`] : this.propertyLocked\n        });\n    }\n\n    get allOperatorPickerClasses() {\n        return new DomClassList(`b-${FieldFilterPicker.type}-operator`, this.operatorFieldConfig?.cls, {\n            [`b-${FieldFilterPicker.type}-combo-locked`] : this.operatorLocked\n        });\n    }\n\n    getValueFieldConfigs() {\n        const\n            me = this,\n            {\n                valueFieldCls,\n                fieldType,\n                _filter: { operator },\n                onValueChange,\n                filterValues,\n                isMultiSelectValueField,\n                operatorArgCount,\n                getValueFieldConfig\n            } = me,\n            valueFieldPlaceholders = ObjectHelper.merge(\n                {},\n                FieldFilterPicker.defaultValueFieldPlaceholders,\n                me.valueFieldPlaceholders\n            );\n\n        if (!fieldType || !operator || operatorArgCount === 0) {\n            return [];\n        }\n\n        let valueFieldCfg = {\n            type              : 'textfield', // replaced as needed below\n            internalListeners : {\n                change  : onValueChange,\n                input   : onValueChange,\n                thisObj : me\n            },\n            cls     : valueFieldCls,\n            dataset : {\n                type : fieldType\n            },\n            placeholder : me.L(valueFieldPlaceholders[isMultiSelectValueField ? 'list' : fieldType])\n        };\n\n        if (isMultiSelectValueField) {\n            valueFieldCfg = {\n                ...valueFieldCfg,\n                type              : 'combo',\n                multiSelect       : true,\n                createOnUnmatched : true,\n                items             : this.getUniqueDataValues(filterValues),\n                value             : filterValues ?? []\n            };\n        }\n        else if (['number', 'date', 'boolean'].includes(fieldType)) {\n            valueFieldCfg.type = `${fieldType}field`;\n        }\n        else if (fieldType === 'duration') {\n            valueFieldCfg.type = 'durationfield';\n        }\n\n        // Allow client to modify value field config\n        if (getValueFieldConfig) {\n            valueFieldCfg = me.callback(getValueFieldConfig, me, [me.filter, valueFieldCfg]);\n        }\n\n        if (isMultiSelectValueField) {\n            // We only support a single multi-select Combo for now\n            return [valueFieldCfg];\n        }\n\n        return ArrayHelper.populate(operatorArgCount, index => ([{\n            type    : 'widget',\n            tag     : 'div',\n            cls     : `b-${FieldFilterPicker.type}-value-separator`,\n            content : me.L('L{FieldFilterPicker.and}')\n        }, {\n            ...valueFieldCfg,\n            value : filterValues[index]\n        }])).flat().slice(1);\n    }\n\n    /**\n     * Return an array of unique values in the data store for the currently selected field. If no store is\n     * configured or no field is selected, returns an empty array.\n     */\n    getUniqueDataValues(extraValuesToInclude = []) {\n        const\n            me            = this,\n            { fieldType } = me;\n\n        if (!me.store || !me._filter?.property) {\n            return [];\n        }\n\n        const { relatedDisplayField } = me.selectedField;\n        let values,\n            sortedValues;\n\n        if (me.fieldIsRelation) {\n            const { foreignStore } = me.currentPropertyRelationConfig;\n            if (relatedDisplayField) {\n                // Display field specified -- sort by text label;\n                // this bypasses the type-specific sorting for raw data values below\n                values = foreignStore.allRecords.reduce((options, record) => {\n                    if (record.id != null) {\n                        options.push({\n                            text  : record[relatedDisplayField],\n                            value : record.id\n                        });\n                    }\n                    return options;\n                }, []);\n\n                // Currently only support getting text from remote field and sorting as text\n                sortedValues = values.sort((a, b) => me.sortStrings(a.text, b.text));\n            }\n            else {\n                // If no display field, fall back to only data values\n                values = foreignStore.allRecords.map(record => record.id);\n            }\n        }\n        else {\n            // Local data field\n            values = me.store.allRecords.map(record => record[me._filter.property]);\n        }\n\n        if (!sortedValues) {\n            values.push(...extraValuesToInclude);\n            const uniqueValues = ArrayHelper.unique(values.reduce((primitiveValues, value) => {\n                if (value != null && String(value).trim() !== '') {\n                    // Get primitive values from complex types, for deduping\n                    if (fieldType === 'date') {\n                        primitiveValues.push(value.valueOf());\n                    }\n                    else if (fieldType === 'duration') {\n                        primitiveValues.push(value.toString());\n                    }\n                    else {\n                        primitiveValues.push(value);\n                    }\n                }\n                return primitiveValues;\n            }, []));\n\n            // Sort\n            if (fieldType === 'string') {\n                sortedValues = uniqueValues.sort(me.sortStrings);\n            }\n            else if (fieldType === 'duration') {\n                sortedValues = uniqueValues\n                    .map(durationStr => new Duration(durationStr))\n                    .filter(duration => duration.isValid)\n                    .sort(me.sortDurations);\n            }\n            else {\n                sortedValues = uniqueValues.sort(me.sortNumerics);\n            }\n\n            // Provide labels for complex value types\n            if (fieldType === 'date') {\n                sortedValues = sortedValues.map(timestamp => {\n                    const date = new Date(timestamp);\n                    return {\n                        text  : DateHelper.format(date, me.dateFormat),\n                        value : timestamp\n                    };\n                });\n            }\n            else if (fieldType === 'duration') {\n                sortedValues = sortedValues.map(duration => duration.toString());\n            }\n        }\n\n        return sortedValues;\n    }\n\n    sortStrings(a, b) {\n        return (a ?? EMPTY_STRING).localeCompare(b ?? EMPTY_STRING);\n    }\n\n    sortNumerics(a, b) {\n        return a - b;\n    }\n\n    sortDurations(a, b) {\n        return a.valueOf() - b.valueOf();\n    }\n\n    get fieldType() {\n        return this.selectedField?.type;\n    }\n\n    get selectedField() {\n        return this.fields?.[this._filter?.property];\n    }\n\n    get propertyOptions() {\n        return Object.entries(this.fields ?? {})\n            .filter(([, fieldDef]) =>\n                SUPPORTED_FIELD_DATA_TYPES.includes(fieldDef.type) ||\n                isSupportedDurationField(fieldDef)\n            )\n            .map(([fieldName, { title }]) => ({ value : fieldName, text : title ?? fieldName }))\n            .sort((a, b) => a.text.localeCompare(b.text));\n    }\n\n    get operatorOptions() {\n        return this.operators[this.fieldIsRelation ? 'relation' : this.fieldType];\n    }\n\n    get fieldIsRelation() {\n        return Boolean(this.currentPropertyRelationConfig);\n    }\n\n    get currentPropertyRelationConfig() {\n        return this.store?.modelRelations?.find(({ foreignKey }) => foreignKey === this._filter?.property);\n    }\n\n    updateOperators() {\n        delete this._operatorArgCountLookup;\n    }\n\n    /**\n     * @internal\n     */\n    get operatorArgCountLookup() {\n        return this._operatorArgCountLookup ||\n            (this._operatorArgCountLookup = FieldFilterPicker.buildOperatorArgCountLookup(this.operators));\n    }\n\n    updateFilter() {\n        if (this._filter) {\n            this.onFilterChange();\n        }\n    }\n\n    updateStore(newStore) {\n        this._store?.un(this);\n        newStore?.ion({ refresh : 'onStoreRefresh', thisObj : this });\n    }\n\n    onStoreRefresh({ action }) {\n        if (this.isMultiSelectValueField && ['dataset', 'create', 'update', 'delete'].includes(action)) {\n            this.valueFields[0].items = this.getUniqueDataValues(this.filterValues);\n        }\n    }\n\n    refreshValueFields() {\n        const\n            me = this,\n            { valueFieldRow } = me.widgetMap;\n        valueFieldRow.removeAll();\n        valueFieldRow.add(me.getValueFieldConfigs());\n        delete me._valueFields;\n        me.refreshCaseSensitive();\n    }\n\n    refreshCaseSensitive() {\n        const\n            me = this,\n            { fieldType, operatorArgCount, isMultiSelectValueField } = me,\n            operator = me._filter?.operator,\n            { caseSensitive } = me.widgetMap;\n        caseSensitive.hidden =\n            fieldType !== 'string' ||\n            !operator ||\n            isMultiSelectValueField ||\n            operatorArgCount === 0;\n        caseSensitive.checked = me._filter?.caseSensitive !== false;\n    }\n\n    onPropertySelect(event) {\n        const\n            me = this,\n            { _filter } = me;\n        _filter.property = event.record?.data.value || null;\n        if (me.fieldType !== me._fieldType) {\n            _filter.operator = null;\n            _filter.value = null;\n        }\n        me._fieldType = _filter.type = me.fieldType;\n        me.refreshOperatorPicker();\n        me.refreshValueFields();\n        me.triggerChange();\n    }\n\n    onCaseSensitiveChange({ checked }) {\n        this._filter.caseSensitive = checked;\n        this.triggerChange();\n    }\n\n    onOperatorSelect(event) {\n        const\n            me = this,\n            wasMultiSelectValueField = me.isMultiSelectValueField;\n        const prevArgCount = this.operatorArgCount;\n        me._filter.operator = event.record?.data.value || null;\n        if (me.operatorArgCount !== prevArgCount) {\n            me._filter.value = null;\n        }\n        if (me.isMultiSelectValueField && !wasMultiSelectValueField) {\n            me._filter.value = [];\n        }\n        me.refreshValueFields();\n        me.triggerChange();\n    }\n\n    triggerChange() {\n        const { filter, isValid } = this;\n        /**\n         * Fires when the filter is modified.\n         * @event change\n         * @param {Core.widget.FieldFilterPicker} source The FieldFilterPicker instance that fired the event.\n         * @param {Array} filter The {@link Core.util.CollectionFilter} configuration object for the filter represented by this\n         *                       {@link Core.widget.FieldFilterPicker}.\n         * @param {Boolean} isValid Whether the current configuration object represents a complete and valid filter\n         */\n        this.trigger('change', {\n            filter,\n            isValid\n        });\n    }\n\n    onValueChange() {\n        const\n            me = this,\n            { isMultiSelectValueField, fieldType, _filter } = me,\n            values = this.valueFields.map(field => field.value);\n        if (isMultiSelectValueField && fieldType === 'date') {\n            _filter.value = values[0].map(timestamp => new Date(timestamp));\n        }\n        else if (isMultiSelectValueField && fieldType === 'duration') {\n            _filter.value = values[0].map(durationStr => new Duration(durationStr));\n        }\n        else {\n            // Treat end date as inclusive by setting time to end of day\n            if (fieldType === 'date' && _filter.operator === 'between' && DateHelper.isValidDate(values[1])) {\n                values[1].setHours(23, 59, 59, 999);\n            }\n            _filter.value = values.length === 1 ? values[0] : values;\n        }\n        me.triggerChange();\n    }\n\n    refreshOperatorPicker() {\n        const\n            { operatorPicker } = this.widgetMap,\n            { _filter: { operator, property }, operatorOptions } = this;\n        operatorPicker.items = operatorOptions;\n        operatorPicker.value = operator;\n        operatorPicker.hidden = property === null;\n    }\n\n    populateUIFromFilter(forceRefreshValueFields = false) {\n        const\n            me = this,\n            {\n                filterValues,\n                widgetMap: { propertyPicker, operatorPicker },\n                _filter: { property, operator, disabled },\n                propertyOptions,\n                operatorOptions,\n                isMultiSelectValueField\n            } = me;\n        propertyPicker.items = propertyOptions;\n        operatorPicker.items = operatorOptions;\n        operatorPicker.hidden = property === null;\n        let refreshValueFields = forceRefreshValueFields;\n        if (propertyPicker.value !== property) {\n            propertyPicker.value = property;\n            me.refreshOperatorPicker();\n            refreshValueFields = true;\n        }\n        if (operatorPicker.value !== operator) {\n            if (operator === null || !operatorPicker.items.find(({ value }) => value === operator)) {\n                operatorPicker.clear();\n            }\n            else {\n                operatorPicker.value = operator;\n            }\n            refreshValueFields = true;\n        }\n        if (refreshValueFields) {\n            me.refreshValueFields();\n        }\n        me.refreshCaseSensitive();\n        me.valueFields.forEach((valueField, fieldIndex) => {\n            if (isMultiSelectValueField && (valueField.value.length > 0 || filterValues.length > 0)) {\n                if (me.fieldType === 'date') {\n                    valueField.value = filterValues.map(date => date?.valueOf());\n                }\n                else if (me.fieldType === 'duration') {\n                    valueField.value = filterValues.map(duration => duration?.toString());\n                }\n                else {\n                    valueField.value = filterValues;\n                }\n            }\n            else if (fieldIndex >= filterValues.length) {\n                valueField.clear();\n            }\n            else {\n                valueField.value = filterValues[fieldIndex];\n            }\n        });\n        // Grey out all inputs if filter is disabled\n        me.allChildInputs.forEach(widget => widget.disabled = me.disabled || disabled);\n    }\n\n    get valueFields() {\n        return this._valueFields ||\n            (this._valueFields = this.widgetMap.valueFieldRow.queryAll(\n                w => ['textfield', 'datefield', 'numberfield', 'durationfield', 'combo'].includes(w.type)));\n    }\n\n    get filterValues() {\n        if (this._filter?.value == null) {\n            return [];\n        }\n        return ArrayHelper.asArray(this._filter.value);\n    }\n\n    // Must be called manually when filter modified externally\n    onFilterChange() {\n        const\n            me = this,\n            newFieldType = me.fieldType,\n            forceRefreshValueFields = newFieldType !== me._fieldType;\n        me._fieldType = me._filter.type = newFieldType;\n        me.populateUIFromFilter(forceRefreshValueFields);\n    }\n\n    get operatorArgCount() {\n        const { fieldType, filter: { operator }, operatorArgCountLookup } = this;\n        return (fieldType && operator) ? operatorArgCountLookup[fieldType][operator] : 1;\n    }\n\n    get isValid() {\n        const\n            me = this,\n            { filter, fieldType, filterValues, isMultiSelectValueField, operatorArgCount } = me,\n            { operator } = filter,\n            missingValue = operatorArgCount > 0 && filter?.value == null;\n        return (\n            // fieldType here validates that we have a matching field\n            fieldType &&\n            operator &&\n            !missingValue &&\n            (\n                (isMultiSelectValueField && filterValues.length > 0) ||\n                (filterValues.length === operatorArgCount)\n            ) &&\n            filterValues.every(value => value != null &&\n                (fieldType !== 'duration' || value.isValid))\n        );\n    }\n}\n\nFieldFilterPicker.initClass();\n", "import Widget from './Widget.js';\n\nexport default class Label extends Widget {\n    static $name = 'Label';\n    static type = 'label';\n\n    static configurable = {\n        text : null,\n\n        localizableProperties : ['text']\n    };\n\n    compose() {\n        const { text, html } = this;\n\n        return {\n            tag : 'label',\n            text,\n            html\n        };\n    }\n}\n\nLabel.initClass();\n", "import './Checkbox.js';\nimport Container from './Container.js';\nimport './Label.js';\nimport './FieldFilterPicker.js';\n\n/**\n * @module Core/widget/FieldFilterPickerGroup\n */\n\n/**\n * A set of {@link Core.widget.FieldFilterPicker}s, representing an array\n * of {@link Core.util.CollectionFilter}s. The filters are provided to the\n * picker as an array of filter configuration objects.\n *\n * {@inlineexample Core/widget/FieldFilterPickerGroup.js}\n *\n * When {@link #config-store} is provided in the configuration, the picker group will\n * read filters from the store and monitor for filter changes, and reflect any changes. It is\n * possible to synchronize multiple {@link Core.widget.FieldFilterPickerGroup}s by configuring\n * them with the same store.\n *\n * Does not support modifying filters defined as custom functions.\n *\n * @classtype fieldfilterpickergroup\n * @extends Core/widget/Container\n * @widget\n */\nexport default class FieldFilterPickerGroup extends Container {\n    //region Config\n    static get $name() {\n        return 'FieldFilterPickerGroup';\n    }\n\n    // Factoryable type name\n    static get type() {\n        return 'fieldfilterpickergroup';\n    }\n\n    /**\n     * @private\n     */\n    static addFilterButtonDefaultText = 'L{FieldFilterPickerGroup.addFilter}';\n\n    static configurable = {\n        /**\n         * Array of {@link Core.util.CollectionFilter} configuration objects. One\n         * {@link Core.widget.FieldFilterPicker} will be created\n         * for each object in the array.\n         *\n         * When {@link #config-store} is provided, any filters in the store will\n         * be automatically added and do not need to be provided explicitly.\n         *\n         * Example:\n         * ```javascript\n         * filters: [{\n         *     // Filter properties should exist among field names configured\n         *     // via `fields` or `store`\n         *     property: 'age',\n         *     operator: '<',\n         *     value: 30\n         * },{\n         *     property: 'title',\n         *     operator: 'startsWith',\n         *     value: 'Director'\n         * }]\n         * ```\n         *\n         * @config\n         * @type {CollectionFilterConfig[]}\n         */\n        filters : [],\n\n        /**\n         * Dictionary of {@link Core.widget.FieldFilterPicker#typedef-FieldOption} representing the fields against which filters can be defined,\n         * keyed by field name.\n         *\n         * If filtering a {@link Grid.view.Grid}, consider using {@link Grid.widget.GridFieldFilterPicker}, which can be configured\n         * with an existing {@link Grid.view.Grid} instead of, or in combination with, defining fields manually.\n         *\n         * Example:\n         * ```javascript\n         * fields: {\n         *     // Allow filters to be defined against the 'age' and 'role' fields in our data\n         *     age  : { text: 'Age', type: 'number' },\n         *     role : { text: 'Role', type: 'string' }\n         * }\n         * ```\n         *\n         * @config {Object<String,FieldOption>}\n         * @deprecated 5.3.0 Syntax accepting FieldOptions[] was deprecated in favor of dictionary and will be removed in 6.0\n         */\n        fields : null,\n\n        /**\n         * Whether the picker group is disabled.\n         *\n         * @config {Boolean}\n         * @default\n         */\n        disabled : false,\n\n        /**\n         * Whether the picker group is read-only.\n         *\n         * Example:\n         * fields: [\n         *    { name: 'age', type: 'number' },\n         *    { name: 'title', type: 'string' }\n         * ]\n         *\n         * @config {Boolean}\n         * @default\n         */\n        readOnly : false,\n\n        layout : 'vbox',\n\n        /**\n         * The {@link Core.data.Store} whose records will be filtered. The store's {@link Core.data.Store#property-modelClass}\n         * will be used to determine field types.\n         *\n         * This store will be kept in sync with the filters defined in the picker group, and new filters added to the store\n         * via other means will appear in this filter group when they are able to be modified by it. (Some types of filters,\n         * like arbitrary filter functions, cannot be managed through this widget.)\n         *\n         * As a corollary, multiple `FieldFilterPickerGroup`s configured with the same store will stay in sync, showing the\n         * same filters as the store's filters change.\n         *\n         * @config {Core.data.Store}\n         */\n        store : null,\n\n        /**\n         * When `limitToProperty` is set to the name of an available field (as specified either\n         * explicitly in {@link #config-fields} or implicitly in the\n         * {@link #config-store}'s model), it has the following effects:\n         *\n         * - the picker group will only show filters defined on the specified property\n         * - it will automatically set the `property` to the specified property for all newly added\n         *   filters where the property is not already set\n         * - the property selector is made read-only\n         *\n         * @config {String}\n         */\n        limitToProperty : null,\n\n        /**\n         * Optional CSS class to apply to the value field(s).\n         *\n         * @config {String}\n         * @private\n         */\n        valueFieldCls : null,\n\n        /**\n         * Show a button at the bottom of the group that adds a new, blank filter to the group.\n         *\n         * @config {Boolean}\n         * @default\n         */\n        showAddFilterButton : true,\n\n        /**\n         * Optional predicate that returns whether a given filter can be deleted. When `canDeleteFilter` is provided,\n         * it will be called for each filter and will not show the delete button for those for which the\n         * function returns false.\n         *\n         * @config {Function}\n         */\n        canDeleteFilter : null,\n\n        /**\n         * Optional function that returns {@link Core.widget.FieldFilterPicker} configuration properties for\n         * a given filter. When `getFieldFilterPickerConfig` is provided, it will be called for each filter and the returned\n         * object will be merged with the configuration properties for the individual\n         * {@link Core.widget.FieldFilterPicker} representing that filter.\n         *\n         * The supplied function should accept a single argument, the {@link Core.util.CollectionFilter} whose picker\n         * is being created.\n         *\n         * @config {Function}\n         */\n        getFieldFilterPickerConfig : null,\n\n        /**\n         * Optional predicate that returns whether a given filter can be managed by this widget. When `canManageFilter`\n         * is provided, it will be used to decide whether to display filters found in the configured\n         * {@link #config-store}.\n         *\n         * @config {Function}\n         */\n        canManageFilter : null,\n\n        /**\n         * Sets the text displayed in the 'add filter' button if one is present.\n         *\n         * @config {String}\n         */\n        addFilterButtonText : null,\n\n        /**\n         * @private\n         */\n        items : {\n            pickers : {\n                type       : 'container',\n                layout     : 'vbox',\n                scrollable : true,\n                items      : {}\n            },\n            addFilterButton : {\n                type   : 'button',\n                text   : FieldFilterPickerGroup.addFilterButtonDefaultText,\n                cls    : `b-${FieldFilterPickerGroup.type}-add-button`,\n                hidden : true\n            }\n        },\n\n        /**\n         * When specified, overrides the built-in list of available operators. See\n         * {@link Core.widget.FieldFilterPicker#config-operators}.\n         *\n         * @config {Object}\n         */\n        operators : null,\n\n        /**\n         * The date format string used to display dates when using the 'is one of' / 'is not one of' operators with a date\n         * field. Defaults to the current locale's `FieldFilterPicker.dateFormat` value.\n         *\n         * @config {String}\n         * @default\n         */\n        dateFormat : 'L{FieldFilterPicker.dateFormat}'\n    };\n\n    // endregion\n\n    static childPickerType = 'fieldfilterpicker';\n\n    afterConstruct() {\n        const me = this;\n        me.validateConfig();\n        const { addFilterButton } = me.widgetMap;\n        addFilterButton.ion({ click : 'addFilter', thisObj : me });\n        // <remove-on-release>\n        // TODO: not sure why we have to do this. Not doing L() in the static initializer because then the localization sanity test\n        //  doesn't find it\n        // </remove-on-release>\n        addFilterButton.text = me.L(addFilterButton.text);\n        me.store && me.updateStore(me.store);\n        super.afterConstruct();\n    }\n\n    changeDateFormat(dateFormat) {\n        return this.L(dateFormat);\n    }\n\n    validateConfig() {\n        if (!this.fields && !this.store) {\n            throw new Error(\n                `FieldFilterPickerGroup requires either a 'fields' or 'store' config property.`\n            );\n        }\n    }\n\n    /**\n     * @private\n     */\n    get someFiltersNotShown() {\n        return this.store && this.store.filters.count > this.filters.length;\n    }\n\n    updateFields(newFields) {\n        this.widgetMap.pickers.childItems.forEach(picker => picker.fields = newFields);\n    }\n\n    updateFilters(newFilters, oldFilters) {\n        const me = this;\n        if (oldFilters) {\n            oldFilters\n                .filter(filter => !newFilters.find(newFilter => newFilter.id === filter.id))\n                .forEach(filter => me.store?.removeFilter(filter.id));\n        }\n        newFilters.forEach(filter => filter.id = filter.id || me.nextFilterId);\n        me.widgetMap.pickers.items = newFilters?.map(filter => me.getPickerRowConfig(filter)) || [];\n    }\n\n    changeFilters(newFilters) {\n        const { canManageFilter } = this;\n        return (newFilters && canManageFilter)\n            ? newFilters.filter(filter => this.callback(canManageFilter, this, [filter]))\n            : newFilters;\n    }\n\n    updateStore(newStore) {\n        const me = this;\n        me.detachListeners('store');\n        if (newStore) {\n            // Make sure the store has all of our configured filters\n            me.widgetMap.pickers.childItems.forEach(({ widgetMap: { filterPicker: { filter, isValid } } }) => {\n                newStore.removeFilter(filter.id, true);\n                if (isValid) {\n                    newStore.addFilter(filter, true);\n                }\n            });\n            newStore.filter();\n            me.appendFiltersFromStore();\n            newStore.ion({\n                name    : 'store',\n                filter  : 'onStoreFilter',\n                thisObj : me\n            });\n        }\n        me.widgetMap.pickers.childItems.forEach(picker => picker.store = newStore);\n    }\n\n    updateShowAddFilterButton(newShow) {\n        this.widgetMap.addFilterButton.hidden = !newShow;\n    }\n\n    updateAddFilterButtonText(newText) {\n        this.widgetMap.addFilterButton.text = newText ?? FieldFilterPickerGroup.addFilterButtonDefaultText;\n    }\n\n    /**\n     * Find any filters the store has that we don't know about yet, and add to our list\n     * @private\n     */\n    appendFiltersFromStore() {\n        const\n            me = this;\n        me.store.filters.forEach(filter => {\n            const\n                canManage = me.canManage(filter),\n                { property, operator, value, id, disabled = false, caseSensitive } = filter;\n            if (canManage && property && operator &&\n                !me.filters?.find(filter => filter.id === id)\n            ) {\n                me.appendFilter({\n                    id,\n                    property,\n                    operator,\n                    value,\n                    disabled,\n                    caseSensitive\n                });\n            }\n        });\n    }\n\n    /**\n     * @private\n     */\n    canManage(filter) {\n        const me = this;\n        return !me.canManageFilter || (me.callback(me.canManageFilter, me, [filter]) === true);\n    }\n\n    /**\n     * Get the configuration object for one child FieldFilterPicker.\n     * @param {Core.util.CollectionFilter} filter The filter represented by the child FieldFilterPicker\n     * @returns {Object} The FieldFilterPicker configuration\n     */\n    getFilterPickerConfig(filter) {\n        const\n            me = this,\n            {\n                fields, store, disabled, readOnly, valueFieldCls, operators, limitToProperty, dateFormat,\n                getFieldFilterPickerConfig\n            } = me;\n        return {\n            type              : me.constructor.childPickerType,\n            fields            : fields ?? me.getFieldsFromStore(store),\n            filter,\n            store,\n            disabled,\n            readOnly,\n            propertyLocked    : Boolean(limitToProperty),\n            valueFieldCls,\n            operators,\n            dateFormat,\n            internalListeners : {\n                change  : 'onFilterPickerChange',\n                thisObj : me\n            },\n            flex : 1,\n            ...(getFieldFilterPickerConfig ? me.callback(getFieldFilterPickerConfig, me, [filter]) : undefined)\n        };\n    }\n\n    /**\n     * Get store fields as {@link Core.widget.FieldFilterPicker#typedef-FieldOption}s in a dictionary keyed by name.\n     * @private\n     */\n    getFieldsFromStore(store) {\n        return Object.fromEntries(store.fields?.map(({ name, type }) => [name, { type }]) ?? []);\n    }\n\n    getPickerRowConfig(filter) {\n        const\n            me = this,\n            { disabled, readOnly, canDeleteFilter } = me;\n        return {\n            type        : 'container',\n            layout      : 'box',\n            layoutStyle : {\n                alignItems : 'start'\n            },\n            cls     : `b-${FieldFilterPickerGroup.type}-row`,\n            dataset : {\n                separatorText : me.L('L{FieldFilterPicker.and}')\n            },\n            items : {\n                activeCheckbox : {\n                    type              : 'checkbox',\n                    disabled,\n                    readOnly,\n                    checked           : !Boolean(filter.disabled),\n                    internalListeners : {\n                        change  : 'onFilterActiveChange',\n                        thisObj : me\n                    },\n                    cls : `b-${FieldFilterPickerGroup.type}-filter-active`\n                },\n                filterPicker : me.getFilterPickerConfig(filter),\n                removeButton : {\n                    type              : 'button',\n                    ref               : 'removeButton',\n                    disabled,\n                    readOnly,\n                    hidden            : canDeleteFilter && (me.callback(canDeleteFilter, me, [filter]) === false),\n                    cls               : `b-transparent b-${FieldFilterPickerGroup.type}-remove`,\n                    icon              : 'b-fa-trash',\n                    internalListeners : {\n                        click   : 'removeFilter',\n                        thisObj : me\n                    }\n                }\n            }\n        };\n    }\n\n    get allInputs() {\n        const childInputTypes = [this.constructor.childPickerType, 'button', 'checkbox'];\n        return this.queryAll(w => childInputTypes.includes(w.type));\n    }\n\n    updateDisabled(newDisabled) {\n        this.allInputs.forEach(input => input.disabled = newDisabled);\n    }\n\n    updateReadOnly(newReadOnly) {\n        this.allInputs.forEach(input => input.readOnly = newReadOnly);\n    }\n\n    onFilterActiveChange({ source, checked }) {\n        const\n            me = this,\n            filterIndex = me.getFilterIndex(source),\n            filter = me.filters[filterIndex],\n            filterPicker = me.getFilterPicker(filterIndex);\n        filter.disabled = !checked;\n        filterPicker.onFilterChange();\n        if (me.store && filterPicker.isValid) {\n            me.store.addFilter(filter, true);\n        }\n        me.updateStoreFilter();\n        me.triggerChange();\n    }\n\n    onFilterPickerChange({ source, filter, isValid }) {\n        const\n            me = this,\n            { store } = me,\n            filterIndex = me.getFilterIndex(source);\n        if (store) {\n            store.removeFilter(filter.id, true);\n            if (isValid) {\n                store.addFilter(filter, true);\n            }\n            me.updateStoreFilter();\n        }\n        Object.assign(me.filters[filterIndex], filter);\n        me.triggerChange();\n    }\n\n    getFilterIndex(eventSource) {\n        return this.widgetMap.pickers.childItems.indexOf(\n            eventSource.containingWidget\n        );\n    }\n\n    getPickerRow(index) {\n        return this.widgetMap.pickers.childItems[index];\n    }\n\n    /**\n     * Return the {@link Core.widget.FieldFilterPicker} for the filter at the specified index.\n     * @param {Number} filterIndex\n     * @returns {Core.widget.FieldFilterPicker}\n     */\n    getFilterPicker(filterIndex) {\n        return this.getPickerRow(filterIndex).widgetMap.filterPicker;\n    }\n\n    get nextFilterId() {\n        this._nextId = (this._nextId || 0) + 1;\n        return `${this.id}-filter-${this._nextId}`;\n    }\n\n    removeFilter({ source }) {\n        const\n            me = this,\n            filterIndex = me.getFilterIndex(source),\n            filter = me.filters[filterIndex],\n            pickerRow = me.getPickerRow(filterIndex),\n            // <remove-on-release>\n            // TODO: Would like a better solution than this. Setting focus to any other element in the group\n            //  to prevent a containing popup from closing due to focusOut (in the Grid Filter feature)\n            // </remove-on-release>\n            newFocusWidget = me.query(w => w.isFocusable && w.type !== 'container' && !pickerRow.contains(w));\n\n        if (newFocusWidget) {\n            newFocusWidget.focus();\n        }\n        me.removeFilterAt(filterIndex);\n        if (me.store) {\n            me.store.removeFilter(filter.id, true);\n            me.updateStoreFilter();\n        }\n        me.trigger('remove', { filter });\n        me.triggerChange();\n    }\n\n    /**\n     * Appends a filter at the bottom of the list\n     * @param {CollectionFilterConfig} [filter={}] Configuration object for the {@link Core.util.CollectionFilter} to\n     * add. Defaults to an empty filter.\n     */\n    addFilter({ property = null, operator = null, value = null } = {}) {\n        const\n            me = this,\n            { filters } = me,\n            newFilter = {\n                property      : me.limitToProperty || property,\n                operator,\n                value,\n                disabled      : false,\n                id            : me.nextFilterId,\n                caseSensitive : false\n            };\n        me.appendFilter(newFilter);\n        if (me.getFilterPicker(filters.length - 1).isValid) {\n            me.store?.addFilter(newFilter, true);\n            me.store && me.updateStoreFilter();\n        }\n        me.trigger('add', { filter : newFilter });\n        me.triggerChange();\n    }\n\n    /**\n     * @private\n     */\n    appendFilter(filter) {\n        const me = this;\n        if (!me.limitToProperty || filter.property === me.limitToProperty) {\n            me.filters.push(filter);\n            me.widgetMap.pickers.add(\n                me.getPickerRowConfig(filter, me.filters.length - 1)\n            );\n        }\n    }\n\n    onStoreFilter(event) {\n        const me = this;\n        if (me._isUpdatingStore) {\n            return;\n        }\n        const\n            { filters } = event,\n            storeFiltersById = filters.values.reduce((byId, filter) =>\n                ({ ...byId, [filter.id] : filter }), {});\n        for (\n            let filterIndex = me.filters.length - 1;\n            filterIndex >= 0;\n            filterIndex--\n        ) {\n            const\n                filter = me.filters[filterIndex],\n                storeFilter = storeFiltersById[filter.id],\n                filterRow = me.getPickerRow(filterIndex);\n            if (filterRow) {\n                const { filterPicker, activeCheckbox } = filterRow.widgetMap;\n                if (!storeFilter && filterPicker.isValid) {\n                    me.removeFilterAt(filterIndex);\n                }\n                else if (storeFilter !== undefined) {\n                    const\n                        { operator, value, property, disabled, caseSensitive } = storeFilter;\n                    if (filter !== storeFilter) {\n                        Object.assign(filter, { operator, value, property, disabled, caseSensitive });\n                    }\n                    filterPicker.filter = filter;\n                    filterPicker.onFilterChange();\n                    activeCheckbox.checked = !disabled;\n                }\n            }\n        }\n        me.appendFiltersFromStore();\n        me.triggerChange();\n    }\n\n    /**\n     * Remove the filter at the given index.\n     * @param {Number} filterIndex The index of the filter to remove\n     */\n    removeFilterAt(filterIndex) {\n        const { widgetMap: { pickers }, filters } = this;\n        pickers.remove(pickers.childItems[filterIndex]);\n        filters.splice(filterIndex, 1);\n        this.triggerChange();\n    }\n\n    /**\n     * Trigger a store re-filter after filters have been silently modified.\n     * @private\n     */\n    updateStoreFilter() {\n        this._isUpdatingStore = true;\n        this.store?.filter();\n        this._isUpdatingStore = false;\n    }\n\n    /**\n     * Returns the array of filter configuration objects currently represented by this picker group.\n     * @type {CollectionFilterConfig[]}\n     */\n    get value() {\n        return this.filters;\n    }\n\n    triggerChange() {\n        const\n            { filters } = this,\n            validFilters = filters.filter((f, index) => this.getPickerRow(index).widgetMap.filterPicker.isValid);\n        /**\n         * Fires when any filter in the group is added, removed, or modified.\n         * @event change\n         * @param {Core.widget.FieldFilterPickerGroup} source The FieldFilterPickerGroup instance that fired the event.\n         * @param {CollectionFilterConfig[]} filters The array of {@link Core.util.CollectionFilter} configuration\n         * objects currently represented by the FieldFilterPickerGroup. **IMPORTANT:** Note that this includes all filters\n         * currently present in the UI, including partially completed ones that may not be ready to apply to a Store.\n         * To retrieve only valid filters, use the `validFilters` parameter on this event, or filter out incomplete filters\n         * in your own code.\n         * @param {CollectionFilterConfig[]} validFilters The subset of {@link Core.util.CollectionFilter} configuration\n         * objects in the `filters` parameter on this event that are complete and valid for application to a Store.\n         */\n        this.trigger('change', {\n            filters,\n            validFilters\n        });\n    }\n\n    /**\n     * Sets all current filters to enabled and checks their checkboxes.\n     */\n    activateAll() {\n        this.setAllActiveStatus(true);\n    }\n\n    /**\n     * Sets all current filters to disabled and clears their checkboxes.\n     */\n    deactivateAll() {\n        this.setAllActiveStatus(false);\n    }\n\n    /**\n     * @private\n     */\n    setAllActiveStatus(newActive) {\n        const\n            me = this,\n            { _filters, store } = me;\n        _filters.forEach((filter, filterIndex) => {\n            // Only do anything if status is changing\n            if (newActive === filter.disabled) {\n                const { filterPicker, activeCheckbox } = me.getPickerRow(filterIndex).widgetMap;\n                filter.disabled = !newActive;\n                filterPicker.onFilterChange();\n                activeCheckbox.checked = newActive;\n                if (newActive && store && filterPicker.isValid) {\n                    store.addFilter(filter, true);\n                }\n            }\n        });\n        me.updateStoreFilter();\n    }\n\n}\n\nFieldFilterPickerGroup.initClass();\n", "import Popup from './Popup.js';\nimport './Button.js';\nimport './TextField.js';\nimport Widget from './Widget.js';\nimport BrowserHelper from '../helper/BrowserHelper.js';\nimport DomHelper from '../helper/DomHelper.js';\n\n/**\n * @module Core/widget/MessageDialog\n */\n\nconst items = [\n    {\n        ref     : 'cancelButton',\n        cls     : 'b-messagedialog-cancelbutton b-gray',\n        text    : 'L{Object.Cancel}',\n        onClick : 'up.onCancelClick'\n    },\n    {\n        ref     : 'okButton',\n        cls     : 'b-messagedialog-okbutton b-raised b-blue',\n        text    : 'L{Object.Ok}',\n        onClick : 'up.onOkClick'\n    }\n];\n\n// Windows has OK button to the left, Mac / Ubuntu to the right\nif (BrowserHelper.isWindows) {\n    items.reverse();\n}\n\nclass MessageDialogConstructor extends Popup {\n\n    static get $name() {\n        return 'MessageDialog';\n    }\n\n    // Factoryable type name\n    static get type() {\n        return 'messagedialog';\n    }\n\n    static get configurable() {\n        return {\n            centered    : true,\n            modal       : true,\n            hidden      : true,\n            autoShow    : false,\n            closeAction : 'hide',\n            title       : '\\xa0',\n\n            lazyItems : {\n                $config : ['lazy'],\n                value   : [{\n                    cls : 'b-messagedialog-message',\n                    ref : 'message'\n                }, {\n                    type : 'textfield',\n                    cls  : 'b-messagedialog-input',\n                    ref  : 'input'\n                }]\n            },\n\n            showClass : null,\n\n            bbar : {\n                overflow : null,\n                items\n            }\n        };\n    }\n\n    construct() {\n        /**\n         * The enum value for the OK button\n         * @member {Number} okButton\n         * @readOnly\n         */\n        this.okButton = this.yesButton = 1;\n\n        /**\n         * The enum value for the Cancel button\n         * @member {Number} cancelButton\n         * @readOnly\n         */\n        this.cancelButton = 3;\n\n        super.construct(...arguments);\n    }\n\n    // Protect from queryAll -> destroy\n    destroy() {}\n\n    /**\n     * Shows a confirm dialog with \"Ok\" and \"Cancel\" buttons. The returned promise resolves passing the button identifier\n     * of the button that was pressed ({@link #property-okButton} or {@link #property-cancelButton}).\n     * @function confirm\n     * @param {Object} options An options object for what to show.\n     * @param {String} [options.title] The title to show in the dialog header.\n     * @param {String} [options.message] The message to show in the dialog body.\n     * @param {String} [options.rootElement] The root element of this widget, defaults to document.body. Use this\n     * if you use the MessageDialog inside a web component ShadowRoot\n     * @param {String|ButtonConfig} [options.cancelButton] A text or a config object to apply to the Cancel button.\n     * @param {String|ButtonConfig} [options.okButton] A text or config object to apply to the OK button.\n     * @returns {Promise} A promise which is resolved when the dialog is closed\n     */\n    async confirm() {\n        return this.showDialog('confirm', ...arguments);\n    }\n\n    /**\n     * Shows an alert popup with a message. The returned promise resolves when the button is clicked.\n     * @function alert\n     * @param {Object} options An options object for what to show.\n     * @param {String} [options.title] The title to show in the dialog header.\n     * @param {String} [options.message] The message to show in the dialog body.\n     * @param {String} [options.rootElement] The root element of this widget, defaults to document.body. Use this\n     * if you use the MessageDialog inside a web component ShadowRoot\n     * @param {String|ButtonConfig} [options.okButton] A text or config object to apply to the OK button.\n     * @returns {Promise} A promise which is resolved when the dialog is closed\n     */\n    async alert() {\n        return this.showDialog('alert', ...arguments);\n    }\n\n    /**\n     * Shows a popup with a basic {@link Core.widget.TextField} along with a message. The returned promise resolves when\n     * the dialog is closed and yields an Object with a `button` ({@link #property-okButton} or {@link #property-cancelButton})\n     * and a `text` property with the text the user provided\n     * @function prompt\n     * @param {Object} options An options object for what to show.\n     * @param {String} [options.title] The title to show in the dialog header.\n     * @param {String} [options.message] The message to show in the dialog body.\n     * @param {String} [options.rootElement] The root element of this widget, defaults to document.body. Use this\n     * if you use the MessageDialog inside a web component ShadowRoot\n     * @param {TextFieldConfig} [options.textField] A config object to apply to the TextField.\n     * @param {String|ButtonConfig} [options.cancelButton] A text or a config object to apply to the Cancel button.\n     * @param {String|ButtonConfig} [options.okButton] A text or config object to apply to the OK button.\n     * @returns {Promise} A promise which is resolved when the dialog is closed. The promise yields an Object with\n     * a `button` ({@link #property-okButton} or {@link #property-cancelButton}) and a `text` property with the text the\n     * user provided\n     */\n    async prompt({\n        textField\n    }) {\n        const field = this.widgetMap.input;\n\n        Widget.reconfigure(field, textField);\n        field.value = '';\n\n        return this.showDialog('prompt', ...arguments);\n    }\n\n    showDialog(mode, {\n        message = '',\n        title = '\\xa0',\n        cancelButton,\n        okButton,\n        rootElement = document.body\n    }) {\n        const me = this;\n\n        me.rootElement = rootElement;\n\n        // Ensure our child items are instanced\n        me.getConfig('lazyItems');\n\n        me.title                  = me.optionalL(title);\n        me.widgetMap.message.html = me.optionalL(message);\n        me.showClass              = `b-messagedialog-${mode}`;\n\n        // Normalize string input to config object\n        if (okButton) {\n            okButton = typeof okButton === 'string' ? { text : okButton } : okButton;\n        }\n\n        if (cancelButton) {\n            cancelButton = typeof cancelButton === 'string' ? { text : cancelButton } : cancelButton;\n        }\n\n        // Ensure default configs are applied\n        okButton = Object.assign({}, me.widgetMap.okButton.initialConfig, okButton);\n        cancelButton = Object.assign({}, me.widgetMap.cancelButton.initialConfig, cancelButton);\n\n        // Ensure strings are localized\n        okButton.text = me.optionalL(okButton.text);\n        cancelButton.text = me.optionalL(cancelButton.text);\n\n        Widget.reconfigure(me.widgetMap.okButton, okButton);\n        Widget.reconfigure(me.widgetMap.cancelButton, cancelButton);\n\n        me.show();\n\n        return me.promise = new Promise(resolve => {\n            me.resolve = resolve;\n        });\n    }\n\n    show() {\n        const activeElement = DomHelper.getActiveElement(this.element);\n\n        // So that when we focus, we don't close an autoClose popup, but temporarily become\n        // part of its ownership tree.\n        this.owner = this.element.contains(activeElement) ? null : MessageDialogConstructor.fromElement(document.activeElement);\n\n        return super.show(...arguments);\n    }\n\n    updateShowClass(showClass, oldShowClass) {\n        const { classList } = this.element;\n\n        if (oldShowClass) {\n            classList.remove(oldShowClass);\n        }\n        if (showClass) {\n            classList.add(showClass);\n        }\n    }\n\n    doResolve(value) {\n        const\n            me          = this,\n            { resolve } = me;\n\n        if (resolve) {\n            const isPrompt = me.showClass === 'b-messagedialog-prompt';\n\n            if (isPrompt && value === me.okButton && !me.widgetMap.input.isValid) {\n                return;\n            }\n\n            me.resolve = me.reject = me.promise = null;\n            resolve(isPrompt ? { button : value, text : me.widgetMap.input.value } : value);\n            me.hide();\n        }\n    }\n\n    onInternalKeyDown(event) {\n        // Cancel on escape key\n        if (event.key === 'Escape') {\n            event.stopImmediatePropagation();\n            this.onCancelClick();\n        }\n        if (event.key === 'Enter') {\n            event.stopImmediatePropagation();\n            event.preventDefault(); // Needed to not spill over into next MessageDialog if closing this opens another\n            this.onOkClick();\n        }\n        super.onInternalKeyDown(event);\n    }\n\n    onOkClick() {\n        this.doResolve(MessageDialog.okButton);\n    }\n\n    onCancelClick() {\n        this.doResolve(MessageDialog.cancelButton);\n    }\n}\n\n// Register this widget type with its Factory\nMessageDialogConstructor.initClass();\n\n// Instantiate MessgeDialog Widget on first use.\nconst MessageDialog = new Proxy({}, {\n    get(target, prop) {\n        const\n            instance = target.instance || (target.instance = new MessageDialogConstructor({\n                rootElement : document.body\n            })),\n            result = instance[prop];\n\n        return typeof result === 'function' ? result.bind(instance) : result;\n    }\n});\n\n/**\n * A singleton class which shows common dialogs, similar to the native browser APIs (though these methods do not block the UI thread):\n * - {@link Core.widget.MessageDialog#function-confirm} shows a confirmation dialog with Ok / Cancel buttons\n * - {@link Core.widget.MessageDialog#function-alert} shows an dialog with a message\n * - {@link Core.widget.MessageDialog#function-prompt} shows a dialog with a text input field\n *\n * @class\n * @singleton\n * @inlineexample Core/widget/MessageDialog.js\n * @extends Core/widget/Popup\n */\nexport default MessageDialog;\n"],
  "mappings": "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",
  "names": ["DragHelperContainer", "Target", "Base", "$name", "initContainerDrag", "me", "mode", "containers", "Error", "grabContainerDrag", "event", "ignoreSelector", "target", "closest", "element", "DomHelper", "getAncestor", "outerElement", "box", "getBoundingClientRect", "context", "valid", "action", "offsetX", "pageX", "left", "offsetY", "pageY", "top", "originalPosition", "parent", "parentElement", "prev", "previousElementSibling", "next", "nextElementSibling", "startContainerDrag", "_outerWidgetEl$parent", "floatRootOwner", "dragElement", "clonedNode", "cloneNode", "outerWidgetEl", "classList", "add", "dragProxyCls", "draggingCls", "floatRoot", "getRootElement", "appendChild", "dragProxy", "style", "width", "height", "setTranslateXY", "dragging", "dropPlaceholderCls", "matches", "zIndex", "floatRootMaxZIndex", "updateContainerDrag", "_context$dragging", "started", "targetElement", "containerElement", "willLoseFocus", "contains", "getActiveElement", "isDescendant", "GlobalEvents", "suspendFocusEvents", "moveNextTo", "revertPosition", "resumeFocusEvents", "preventDefault", "finishContainerDrag", "draggedTo", "insertBefore", "finalize", "remove", "reset", "async", "trigger", "abortContainerDrag", "invalid", "silent", "updateContainerProxy", "proxy", "newX", "newY", "minX", "Math", "max", "maxX", "min", "offsetWidth", "minY", "maxY", "offsetHeight", "lockX", "setTranslateY", "lockY", "setTranslateX", "type", "touch", "changedTouches", "elementFromPoint", "clientX", "clientY", "centerX", "Rectangle", "from", "center", "x", "isRTL", "lastElementChild", "previousSibling", "lastChild", "noScroll", "pageXOffset", "pageYOffset", "DragHelperTranslate", "Delayable", "configurable", "positioning", "skipUpdatingElement", "initTranslateDrag", "isElementDraggable", "targetSelector", "grabTranslateDrag", "getTarget", "startPageX", "startPageY", "startClientX", "startClientY", "getX", "parseFloat", "getTranslateX", "getY", "getTranslateY", "getXY", "offsetLeft", "offsetTop", "getTranslateXY", "setXY", "y", "startTranslateDrag", "proxySelector", "dragWithin", "cloneTarget", "document", "body", "grabbed", "grabbedParent", "elementToClone", "querySelector", "proxyX", "proxyY", "createProxy", "autoSizeClonedTarget", "proxyRect", "dragWithinX", "dragWithinY", "localX", "localY", "hideOriginalElement", "Object", "assign", "grabbedNextSibling", "elementStartX", "elementStartY", "elementX", "getOffsetX", "elementY", "getOffsetY", "scrollX", "scrollY", "scrollManagerElementContainsDragProxy", "updateTranslateProxy", "onDragStarted", "_relatedElements", "relatedElements", "unifiedProxy", "length", "relatedElStartPos", "relatedElDragFromPos", "originalRelatedElements", "map", "relatedEl", "i", "proxyTemplateElement", "relatedElementToDrag", "unifiedOffset", "EventHelper", "onTransitionEnd", "property", "handler", "forEach", "el", "thisObj", "once", "applyConstraints", "constrain", "globalThis", "scrollWidth", "scrollHeight", "constrainedX", "constrainedY", "scrollManagerConfig", "getRelativeLeftScroll", "getRelativeTopScroll", "snapCoordinates", "snapped", "undefined", "deltaX", "deltaY", "r", "finishTranslateDrag", "xChanged", "round", "yChanged", "ignoreSamePositionDrop", "abortTranslateDrag", "targetRect", "allowDropOutside", "right", "bottom", "finalized", "console", "warn", "isDestroyed", "transform", "_me$scrollManager", "_me$context", "scrollManager", "stopMonitoring", "aborted", "proxyMoved", "animateTo", "isConnected", "isDestroying", "waitForTransitionEnd", "getPropertyTransitionDuration", "runOnDestroy", "cleanUp", "removeClonedProxies", "removeProxyAfterDrop", "cssClassesToRemove", "rootElementListeners", "move", "up", "docclick", "touchstart", "touchmove", "touchend", "keydown", "DragHelper", "mixin", "Events", "defaultConfig", "invalidCls", "dragThreshold", "monitoringConfig", "dropTargetSelector", "dropTargetCls", "startEvent", "touchStartDelay", "clickSwallowDuration", "mouseMoveListenerElement", "testConfig", "transitionDuration", "rtlSource", "construct", "config", "initListeners", "isContainerDrag", "onScrollManagerScrollCallback", "bind", "doDestroy", "dragStartListeners", "pointerdown", "getMouseMoveListenerTarget", "on", "root", "getRootNode", "result", "nodeType", "Node", "DOCUMENT_FRAGMENT_NODE", "_this$rtlSource", "Boolean", "rtl", "onPointerDown", "button", "isVisible", "blurDetacher", "blur", "onWindowBlur", "dragListeners", "capture", "pointerType", "touchStartTimer", "setTimeout", "passive", "pointerup", "pointermove", "dragListenersDetacher", "internalMove", "_event$target", "scrollInitiated", "distance", "getDistanceBetween", "abort", "ELEMENT_NODE", "_me$onDragStarted", "startMonitoring", "ObjectHelper", "merge", "scrollables", "callback", "outermostEl", "getOutermostElement", "querySelectorAll", "call", "update", "stopImmediatePropagation", "_this$context", "lastMouseMoveEvent", "isScroll", "onTouchMove", "onMouseMove", "scrollingPageElement", "scrollingElement", "getMouseMoveEventTarget", "scrollLeft", "scrollTop", "internallyValid", "_target", "draggedElements", "toggle", "_me$scrollManager2", "_me$scrollManager2$st", "removeListeners", "_this$dragListenersDe", "_this$blurDetacher", "onTouchEnd", "onMouseUp", "onDocumentClick", "stopPropagation", "_me$scrollManager3", "finalizing", "click", "expires", "onKeyDown", "_this$context2", "key", "removeAttribute", "animateProxyTo", "alignSpec", "align", "isRectangle", "alignTo", "isDragging", "_this$context3", "_$name", "documentListeners", "down", "ResizeHelper", "resizingCls", "handleSize", "dynamicHandleSize", "reservedSpace", "touchHandleSize", "minWidth", "maxWidth", "minHeight", "maxHeight", "scroller", "allowResize", "isElementResizable", "leftHandle", "rightHandle", "topHandle", "bottomHandle", "handleSelector", "handleContainerSelector", "grab", "handleVisibilityThreshold", "skipTranslate", "direction", "BrowserHelper", "isHoverableDevice", "initResize", "updateSkipUpdatingElement", "skip", "edge", "cursorOffset", "getCursorOffsetToElementEdge", "elementWidth", "elementHeight", "startX", "startY", "_me$reset", "internalStartResize", "isTouch", "mousedown", "mousemove", "delegate", "mouseleave", "mouseup", "removeDragListeners", "_this$removeDragListe", "canResize", "grabResizeHandle", "onTouchStart", "touches", "onMouseDown", "checkResizeHandles", "onPointerUp", "_me$removeDragListene", "finishResize", "_me$reset2", "parentRectangle", "currentX", "currentY", "updateResize", "_me$scrollManager3$st", "abortResize", "coordsFrom", "getPageX", "getPageY", "overLeftHandle", "overRightHandle", "overTopHandle", "overBottomHandle", "_me$reset3", "rectEl", "currentElement", "over", "highlightHandle", "unHighlightHandle", "onMouseLeaveTarget", "allowEdgeSwitch", "updated", "getExtremalSizePX", "sign", "newWidth", "newHeight", "flex", "abs", "eventObject", "changed", "_me$reset4", "overAnyHandle", "overStartHandle", "overEndHandle", "getDynamicHandleSize", "opposite", "handleCount", "floor", "getPagePoint", "__publicField", "WidgetHelper", "getById", "id", "Widget", "fromElement", "limit", "createWidget", "isWidget", "create", "append", "widget", "Array", "isArray", "HTMLElement", "appendTo", "insertFirst", "getElementById", "firstChild", "item", "openPopup", "forElement", "html", "showContextMenu", "currentContextMenu", "destroy", "Point", "position", "internalListeners", "attachTooltip", "configOrText", "hasTooltipAttached", "resolveType", "destroyTooltipAttached", "mask", "msg", "text", "Mask", "unmask", "close", "hide", "toast", "Toast", "show", "hasOwnProperty", "prototype", "cacheKey", "setParser", "parser", "defineProperty", "value", "Default", "constructor", "formatter", "format", "defaultFormat", "parse", "strict", "defaultParse", "resolvedOptions", "Formatter", "get", "NULL", "JSON", "stringify", "cache", "fmt", "set", "_cache", "Map", "_null", "initialize", "configure", "entries", "defaults", "Parser", "String", "parseStrict", "escapeRegExp", "StringHelper", "digitsRe", "newFormatter", "locale", "Intl", "NumberFormat", "numFormatRe", "unicodeMinus", "NumberParser", "numFmt", "maximumFractionDigits", "currency", "is", "_decodeStyle", "currencyDisplay", "percent", "decimal", "replace", "grouper", "decimalRe", "stripRe", "RegExp", "decimalPlaces", "dot", "indexOf", "Number", "fmtDef", "decFmt", "zero", "zeroDec", "suffix", "startsWith", "trim", "_as", "null", "truncator", "scale", "as", "options", "template", "loc", "LocaleManager", "locales", "match", "exec", "m2", "m4", "useGrouping", "integer", "fraction", "_minMax", "change", "cacheAs", "ret", "v", "isNaN", "truncate", "substr", "name", "setMin", "setMax", "capName", "capitalize", "minimumFractionDigits", "minimumIntegerDigits", "maximumSignificantDigits", "minimumSignificantDigits", "significant", "number", "Month", "date", "$config", "equal", "DH", "clearTime", "Date", "month", "year", "weekStartDay", "hideNonWorkingDays", "nonWorkingDays", "sixWeeks", "updateDayNumbers", "generation", "changeDate", "isConfiguring", "updateDate", "newDate", "oldDate", "dayColumnIndex", "weekCount", "monthStart", "getFirstDateOfMonth", "monthEnd", "getLastDateOfMonth", "startWeekDay", "getDay", "endWeekDay", "yearChanged", "getFullYear", "monthChanged", "getMonth", "changes", "eventListeners", "getDate", "getWeekId", "_year", "_month", "startDayOfMonth", "endDayOfMonth", "weekBase", "calculateWeekBase", "d", "w", "m", "jan1", "dec31", "january", "getOtherMonth", "startDate", "dec31Week", "diff", "has53weeks", "getWeekStart", "week", "weekOfYear", "otherMonth", "changeYear", "setFullYear", "changeMonth", "setMonth", "_weekStartDay", "updateWeekStartDay", "_nonWorkingDays", "changeNonWorkingDays", "updateNonWorkingDays", "updateHideNonWorkingDays", "updateSixWeeks", "dayCount", "endDate", "eachDay", "fn", "dayOfMonth", "eachWeek", "weekDates", "getWeekNumber", "day", "push", "weekNo", "getCellData", "ownerMonth", "dayTime", "DayTime", "MIDNIGHT", "visibleColumnIndex", "visibleDayColumnIndex", "isNonWorking", "isHiddenDay", "columnIndex", "dayEnd", "duration", "tomorrow", "dayOfDate", "isOtherMonth", "visible", "isRowStart", "isRowEnd", "visibleColumnCount", "canonicalDayNumbers", "canonicalDay", "weekLength", "keys", "_Month", "CalendarPanel", "Panel", "textContent", "showWeekNumber", "showWeekColumn", "disabledDates", "headerRenderer", "weekRenderer", "cellRenderer", "disableWeekends", "hideNonWorkingDaysCls", "tip", "dayCellCls", "dayHeaderCls", "disabledCls", "otherMonthCls", "weekendCls", "todayCls", "nonWorkingDayCls", "dayNameFormat", "minRowHeight", "minColumnWidth", "disableOtherMonthCells", "disableOtherMonthCellsCls", "hideOtherMonthCells", "hideOtherMonthCellsCls", "animateTimeShift", "refreshCount", "refresh", "onPaint", "firstPaint", "_super$onPaint", "arguments", "getConfig", "overflowElement", "weeksElement", "_this$tip", "changeMinRowHeight", "minValue", "parseInt", "getStyleValue", "updateMinRowHeight", "weekElements", "setLength", "scrollable", "overflowY", "changeMinColumnWidth", "updateMinColumnWidth", "weekdayCells", "c", "cellElements", "overflowX", "getDateFromDomEvent", "domEvent", "Element", "DateHelper", "parseKey", "dataset", "changeTip", "existingTip", "Tooltip", "reconfigure", "owner", "bodyElement", "forSelector", "updateTip", "detachListeners", "ion", "pointerOver", "updateElement", "was", "weekDayElements", "children", "updateDayNameFormat", "shortDayNames", "setDate", "dayNames", "_this$scrollable", "contentElement", "syncOverflowState", "updateHideOtherMonthCells", "_this$scrollable2", "updateDisableOtherMonthCells", "_this$scrollable3", "_localeNonWorkingDays", "weekends", "_localeWeekends", "_this$scrollable4", "currentMonth", "new", "dateChange", "onMonthDateChange", "source", "getCell", "slideIn", "oldValue", "updateYear", "updateShowWeekNumber", "updateShowWeekColumn", "floating", "isAligning", "realign", "doRefresh", "_me$project", "timeZone", "project", "today", "TimeZoneHelper", "toTimeZone", "setHours", "cell", "cellDay", "cellClassList", "innerHTML", "setInnerText", "syncClassList", "rowIndex", "cellIndex", "lastWorkingColumn", "dates", "weekDayElement", "weekCells", "innerText", "makeKey", "isDisabledDate", "getTime", "firstVisibleDate", "lastVisibleDate", "lastDomConfig", "class", "className", "row", "visibleWeekCount", "some", "bodyConfig", "weeksContainerChildren", "tag", "reference", "ArrayHelper", "fill", "scrollBarPadElement", "weekRow", "syncOptions", "ignoreRefs", "lastDate", "onTipOverCell", "updateLocalization", "initClass", "whenNotChecked", "field", "Checkbox", "Field", "alias", "inputType", "autoCollapse", "containerDefaults", "syncableConfigs", "disabled", "syncConfigTriggers", "checkedValue", "uncheckedValue", "color", "toggleGroup", "localizableProperties", "checked", "syncHasText", "textLabelCls", "innerElements", "inputElement", "for", "group", "listeners", "input", "updateText", "textLabel", "afterSyncChildConfigs", "container", "collapsed", "assignFieldValue", "values", "fetchInputValue", "readOnly", "gatherValue", "_values$valueName", "storedValue", "valueName", "gatherValues", "changeValue", "updateValue", "_me$container", "syncChildConfigs", "inputting", "uncheckToggleGroupMembers", "triggerChange", "inputValueAttr", "updateColor", "classes", "getToggleGroupMembers", "checkedElement", "forEachSelector", "rootElement", "inputEl", "partnerCheckbox", "check", "uncheck", "internalOnClick", "internalOnChange", "updateInputReadOnly", "userAction", "filter", "_value", "triggerFieldChange", "YearPicker", "focusElement", "getYearButton", "startYear", "onYearClick", "clickedYear", "minYear", "maxYear", "handleTitleClick", "e", "previous", "yearButtonCount", "endYear", "ingestYear", "isDate", "changeStartYear", "updateStartYear", "oldStartYear", "composeBody", "tbar", "widgetMap", "title", "slice", "overflow", "items", "cls", "onAction", "weight", "itemCls", "DisplayField", "TextField", "editable", "ariaElement", "changeReadOnly", "changeEditable", "encodeHtml", "generateMonthNames", "getMonthNames", "dateSort", "lhs", "rhs", "valueOf", "emptyArray", "freeze", "ReadOnlyCombo", "Combo", "inputAttributes", "tabIndex", "highlightExternalChange", "monitorResize", "triggers", "expand", "picker", "axisLock", "matchSize", "DatePicker", "delayable", "activeDate", "focusable", "prevYear", "tooltip", "prevMonth", "fields", "monthField", "select", "yearButton", "nextMonth", "nextYear", "yearPicker", "trapFocus", "positioned", "hidden", "titleClick", "minDate", "maxDate", "focusDisabledDates", "multiSelect", "selection", "v1", "v2", "equals", "editMonth", "role", "focusDescendant", "alwaysRefreshOnMonthChange", "prototypeProperties", "outOfRangeCls", "activeCls", "selectedCls", "externalCellRenderer", "internalCellRenderer", "setAttribute", "flush", "afterHide", "_this$_yearPicker", "_yearPicker", "_this$yearButton", "_this$monthField", "oldActiveCell", "betweenLesser", "_activeDate", "dateOfOldActiveCell", "syncActiveDate", "isSelected", "isSelectedDate", "isActiveDate", "isStart", "isEnd", "updateClassList", "onCellMousedown", "focus", "onCellClick", "onUIDateSelect", "lastClickedDate", "activatingEvent", "handleMultiSelect", "_selection", "DateSet", "singleRange", "size", "rangeEnds", "has", "toggleFn", "clickedRangeEnd", "ctrlKey", "rangeStartDate", "shiftKey", "start", "end", "sort", "clear", "newSize", "updateSelection", "changeSelection", "updateMultiSelect", "dateSet", "now", "onInternalKeyDown", "keyEvent", "keyName", "code", "gotoPrevMonth", "gotoNextMonth", "changeMinDate", "apply", "updateMinDate", "_yearpicker", "changeMaxDate", "updateMaxDate", "clamp", "initializingActiveDate", "isNavigating", "changeActiveDate", "oldActiveDate", "updateActiveDate", "wasActiveDate", "isPending", "activeCell", "wasActiveCell", "activeElement", "betweenLesserEqual", "gotoPrevYear", "goto", "gotoNextYear", "unit", "firstDateOfNewMonth", "lastDateOfNewMonth", "_this$_selection", "onMonthPicked", "record", "_this$focusElement", "onYearPickerRequested", "onYearPickerTitleClick", "onYearPicked", "focusWithoutScrolling", "changeYearPicker", "oldYearPicker", "_this$minDate", "_this$maxDate", "mergeConfigs", "childItems", "newData", "every", "store", "getAt", "selected", "Set", "delete", "other", "s", "k", "DateField", "PickerField", "strictParsing", "fallbackFormat", "timeFormat", "keepTime", "pickerFormat", "validateDateOnly", "back", "forward", "calendarContainerCls", "step", "stepTriggers", "scrollAction", "changePicker", "oldPicker", "pickerAlignElement", "anchor", "overlayAnchor", "onSelectionChange", "_isUserAction", "_isPickerInput", "backShiftDate", "_step", "magnitude", "onBackClick", "newValue", "forwardShiftDate", "onForwardClick", "showPicker", "focusPicker", "_picker", "pickerConfig", "setConfig", "isValid", "clearError", "setError", "transformDateValue", "isValidDate", "MS_PER_DAY", "transformTimeValue", "clone", "timeValue", "copyTimeValues", "changeMin", "updateMin", "syncInvalid", "changeMax", "updateMax", "hasChanged", "syncInputFieldValue", "changeStep", "parseDuration", "updateStep", "isEqual", "inputValue", "updateFormat", "internalOnKeyEvent", "NumberField", "largeStep", "decimalPrecision", "leadingZeroes", "spin", "changeOnSpin", "addEventListener", "bufferedSpinChange", "buffer", "acceptValue", "rawValue", "accept", "hasTextSelection", "raw", "current", "okMax", "okMin", "block", "doSpinUp", "doSpinDown", "altKey", "after", "getAfterValue", "afterValue", "_changedBySilentSpin", "applySpinChange", "silenceChange", "onFocusOut", "_me$triggers", "_me$triggers$spin", "_me$triggers$spin$cli", "formatted", "formatValue", "clickRepeater", "cancel", "internalOnInput", "decimals", "trunc", "pos", "caretPos", "changeFormat", "repeat", "_formatter", "_lastFormat", "changeLargeStep", "validity", "rangeUnderflow", "rangeOverflow", "valueIsNaN", "TimePicker", "Container", "updateSeconds", "seconds", "second", "onFieldChange", "isRefreshing", "pickerToTime", "onAmPmButtonClick", "_pm", "ref", "_super$onInternalKeyD", "triggerTimeChange", "_initialValue", "pm", "hour", "minute", "_is24Hour", "hours", "setMinutes", "setSeconds", "_min", "_max", "time", "updateInitialValue", "initialValue", "is24HourFormat", "amButton", "pmButton", "is24", "getHours", "getMinutes", "getSeconds", "pressed", "label", "onClick", "autoShow", "TimeField", "compose", "keepDate", "onTimeChange", "getMilliseconds", "maxTime", "minTime", "onPickerShow", "_this$pickerKeyDownRe", "pickerKeyDownRemover", "isRequired", "firstElementChild", "animationDelay", "_value2", "DurationField", "defaultUnit", "useAbbreviation", "allowNegative", "nullValue", "allowedUnits", "Duration", "changeAllowedUnits", "units", "split", "updateAllowedUnits", "allowedUnitsRe", "join", "calcValue", "toString", "_unit", "unitWithDefault", "_magnitude", "roundMagnitude", "allowDecimals", "isEmpty", "required", "oldVal", "_lastValue", "_this$triggers", "_this$triggers$spin", "_this$triggers$spin$c", "newMagnitude", "newUnit", "test", "parsedDuration", "clearable", "milliseconds", "SUPPORTED_FIELD_DATA_TYPES", "isSupportedDurationField", "_field$column", "column", "EMPTY_STRING", "FieldFilterPicker", "defaultValueFieldPlaceholders", "string", "list", "afterConstruct", "_fields", "_filter", "propertyPicker", "operatorPicker", "caseSensitive", "propertyFieldConfig", "operatorFieldConfig", "allPropertyPickerClasses", "allOperatorPickerClasses", "populateUIFromFilter", "changeDateFormat", "dateFormat", "L", "allChildInputs", "valueFields", "updateDisabled", "newDisabled", "updateReadOnly", "newReadOnly", "updatePropertyLocked", "newPropertyLocked", "updateOperatorLocked", "newOperatorLocked", "changeOperators", "newOperators", "operators", "defaultOperators", "reduce", "outOperators", "dataType", "op", "changeFields", "newFields", "VersionHelper", "deprecate", "keyBy", "isMultiSelectValueField", "_this$_filter", "includes", "operator", "_this$propertyFieldCo", "DomClassList", "propertyLocked", "_this$operatorFieldCo", "operatorLocked", "getValueFieldConfigs", "valueFieldCls", "fieldType", "onValueChange", "filterValues", "operatorArgCount", "getValueFieldConfig", "valueFieldPlaceholders", "valueFieldCfg", "placeholder", "createOnUnmatched", "getUniqueDataValues", "populate", "index", "content", "flat", "extraValuesToInclude", "_me$_filter", "relatedDisplayField", "selectedField", "sortedValues", "fieldIsRelation", "foreignStore", "currentPropertyRelationConfig", "allRecords", "a", "b", "sortStrings", "uniqueValues", "unique", "primitiveValues", "durationStr", "sortDurations", "sortNumerics", "timestamp", "localeCompare", "_this$selectedField", "_this$fields", "_this$_filter2", "propertyOptions", "_a", "fieldDef", "fieldName", "operatorOptions", "_this$store", "_this$store$modelRela", "modelRelations", "find", "foreignKey", "_this$_filter3", "updateOperators", "_operatorArgCountLookup", "operatorArgCountLookup", "buildOperatorArgCountLookup", "updateFilter", "onFilterChange", "updateStore", "newStore", "_this$_store", "_store", "un", "onStoreRefresh", "refreshValueFields", "valueFieldRow", "removeAll", "_valueFields", "refreshCaseSensitive", "_me$_filter2", "_me$_filter3", "onPropertySelect", "_event$record", "data", "_fieldType", "refreshOperatorPicker", "onCaseSensitiveChange", "onOperatorSelect", "_event$record2", "wasMultiSelectValueField", "prevArgCount", "forceRefreshValueFields", "valueField", "fieldIndex", "queryAll", "_this$_filter4", "asArray", "newFieldType", "missingValue", "_FieldFilterPicker", "empty", "argCount", "notEmpty", "between", "notBetween", "isIncludedIn", "isNotIncludedIn", "boolean", "relation", "layout", "propertyAndOperator", "Label", "FieldFilterPickerGroup", "validateConfig", "addFilterButton", "someFiltersNotShown", "filters", "count", "updateFields", "pickers", "updateFilters", "newFilters", "oldFilters", "newFilter", "_me$store", "removeFilter", "nextFilterId", "getPickerRowConfig", "changeFilters", "canManageFilter", "filterPicker", "addFilter", "appendFiltersFromStore", "updateShowAddFilterButton", "newShow", "updateAddFilterButtonText", "newText", "addFilterButtonDefaultText", "_me$filters", "canManage", "appendFilter", "getFilterPickerConfig", "limitToProperty", "getFieldFilterPickerConfig", "childPickerType", "getFieldsFromStore", "_store$fields", "fromEntries", "canDeleteFilter", "layoutStyle", "alignItems", "separatorText", "activeCheckbox", "removeButton", "icon", "allInputs", "childInputTypes", "onFilterActiveChange", "filterIndex", "getFilterIndex", "getFilterPicker", "updateStoreFilter", "onFilterPickerChange", "eventSource", "containingWidget", "getPickerRow", "_nextId", "pickerRow", "newFocusWidget", "query", "isFocusable", "removeFilterAt", "_me$store2", "onStoreFilter", "_isUpdatingStore", "storeFiltersById", "byId", "storeFilter", "filterRow", "splice", "validFilters", "f", "activateAll", "setAllActiveStatus", "deactivateAll", "newActive", "_filters", "_FieldFilterPickerGroup", "showAddFilterButton", "addFilterButtonText", "isWindows", "reverse", "MessageDialogConstructor", "Popup", "centered", "modal", "closeAction", "lazyItems", "showClass", "bbar", "okButton", "yesButton", "cancelButton", "confirm", "showDialog", "alert", "prompt", "textField", "message", "optionalL", "initialConfig", "promise", "Promise", "resolve", "updateShowClass", "oldShowClass", "doResolve", "isPrompt", "reject", "onCancelClick", "onOkClick", "MessageDialog", "Proxy", "prop", "instance"]
}
