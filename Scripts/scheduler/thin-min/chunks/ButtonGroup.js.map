{
  "version": 3,
  "sources": ["../../../../Core/lib/Core/widget/ButtonGroup.js"],
  "sourcesContent": ["import Container from './Container.js';\nimport Rotatable from './mixin/Rotatable.js';\n\nimport './Button.js';\n\n/**\n * @module Core/widget/ButtonGroup\n */\n\n/**\n * A specialized container that holds buttons, displaying them in a horizontal group with borders adjusted to make them\n * stick together.\n *\n * Trying to add other widgets than buttons will throw an exception.\n *\n * ```javascript\n * new ButtonGroup({\n *     items : [\n *         { icon : 'b-fa b-fa-kiwi-bird' },\n *         { icon : 'b-fa b-fa-kiwi-otter' },\n *         { icon : 'b-fa b-fa-kiwi-rabbit' },\n *         ...\n *     ]\n * });\n * ```\n *\n * @inlineexample Core/widget/ButtonGroup.js\n * @classType buttonGroup\n * @extends Core/widget/Container\n * @widget\n */\nexport default class ButtonGroup extends Container.mixin(Rotatable) {\n\n    /**\n     * Fires when a button in the group is clicked\n     * @event click\n     * @param {Core.widget.Button} source Clicked button\n     * @param {Event} event DOM event\n     */\n\n    /**\n     * Fires when the default action is performed on a button in the group (the button is clicked)\n     * @event action\n     * @param {Core.widget.Button} source Clicked button\n     * @param {Event} event DOM event\n     */\n\n    /**\n     * Fires when a button in the group is toggled (the {@link Core.widget.Button#property-pressed} state is changed).\n     * If you need to process the pressed button only, consider using {@link #event-click} event or {@link #event-action} event.\n     * @event toggle\n     * @param {Core.widget.Button} source Toggled button\n     * @param {Boolean} pressed New pressed state\n     * @param {Event} event DOM event\n     */\n\n    static $name = 'ButtonGroup';\n\n    static type = 'buttongroup';\n\n    static configurable = {\n        defaultType : 'button',\n\n        /**\n         * Custom CSS class to add to element. When using raised buttons (cls 'b-raised' on the buttons), the group\n         * will look nicer if you also set that cls on the group.\n         *\n         * ```\n         * new ButtonGroup({\n         *   cls : 'b-raised,\n         *   items : [\n         *       { icon : 'b-fa b-fa-unicorn', cls : 'b-raised' },\n         *       ...\n         *   ]\n         * });\n         * ```\n         *\n         * @config {String}\n         * @category CSS\n         */\n        cls : null,\n\n        /**\n         * An array of Buttons or typed Button config objects.\n         * @config {ButtonConfig[]|Core.widget.Button[]}\n         */\n        items : null,\n\n        /**\n         * Default color to apply to all contained buttons, see {@link Core.widget.Button#config-color Button#color}.\n         * Individual buttons can override the default.\n         * @config {String}\n         */\n        color : null,\n\n        /**\n         * Set to `true` to turn the ButtonGroup into a toggle group, assigning a generated value to each contained\n         * buttons {@link Core.widget.Button#config-toggleGroup toggleGroup config}. Individual buttons can\n         * override the default.\n         * @config {Boolean}\n         */\n        toggleGroup : null,\n\n        valueSeparator : ',',\n\n        columns : null,\n\n        hideWhenEmpty : true,\n\n        defaultBindProperty : 'value'\n    };\n\n    onChildAdd(item) {\n        super.onChildAdd(item);\n\n        item.ion({\n            click   : 'resetValueCache',\n            toggle  : 'onItemToggle',\n            thisObj : this,\n            // This needs to run before the 'click' event is relayed by this button group, in such listener\n            // the `value` must already be updated\n            prio    : 10000\n        });\n    }\n\n    onChildRemove(item) {\n        item.un({\n            toggle  : 'resetValueCache',\n            click   : 'resetValueCache',\n            thisObj : this\n        });\n        super.onChildRemove(item);\n    }\n\n    onItemToggle(event) {\n        const me = this;\n\n        me.resetValueCache();\n\n        if (!me.isSettingValue && (!me.toggleGroup || event.pressed)) {\n            me.triggerFieldChange({ value : me.value, userAction : true, event });\n        }\n    }\n\n    resetValueCache() {\n        // reset cached value to revalidate next time it's requested\n        this._value = null;\n    }\n\n    createWidget(widget) {\n        const\n            me   = this,\n            type = me.constructor.resolveType(widget.type || 'button');\n\n        if (type.isButton) {\n            if (me.color && !widget.color) {\n                widget.color = me.color;\n            }\n\n            if (me.toggleGroup && !widget.toggleGroup) {\n                if (typeof me.toggleGroup === 'boolean') {\n                    me.toggleGroup = ButtonGroup.generateId('toggleGroup');\n                }\n\n                widget.toggleGroup = me.toggleGroup;\n            }\n        }\n\n        if (me.columns) {\n            widget.width = `${100 / me.columns}%`;\n        }\n\n        widget = super.createWidget(widget);\n\n        me.relayEvents(widget, ['click', 'action', 'toggle']);\n\n        return widget;\n    }\n\n    updateRotate(rotate) {\n        this.eachWidget(btn => {\n            if (btn.rotate !== false) {\n                btn.rotate = rotate;\n            }\n        });\n    }\n\n    get value() {\n        // if we don't have cached value\n        // let's calculate it based on item values\n        if (!this._value) {\n            const values = [];\n\n            // collect pressed item values\n            this.items.forEach(w => {\n                if (w.pressed && w.value !== undefined) {\n                    values.push(w.value);\n                }\n            });\n\n            // build a string\n            this._value = values.join(this.valueSeparator);\n        }\n\n        return this._value;\n    }\n\n    set value(value) {\n        const\n            me       = this,\n            oldValue = me.value;\n\n        if (!Array.isArray(value)) {\n            if (value === undefined || value === null) {\n                value = [];\n            }\n            else if (typeof value == 'string') {\n                value = value.split(me.valueSeparator);\n            }\n            else {\n                value = [value];\n            }\n        }\n\n        me._value = value.join(me.valueSeparator);\n\n        me.isSettingValue = true;\n\n        // Reflect value on items\n        me.items.forEach(w => {\n            if (w.value !== undefined) {\n                w.pressed = value.includes(w.value);\n            }\n        });\n\n        me.isSettingValue = false;\n\n        if (!me.isConfiguring && oldValue !== me.value) {\n            me.triggerFieldChange({ value : me.value, userAction : false });\n        }\n    }\n\n    updateDisabled(disabled) {\n        this.items.forEach(button => button.disabled = disabled || (!button.ignoreParentReadOnly && this.readOnly));\n    }\n\n    updateReadOnly(readOnly) {\n        super.updateReadOnly(readOnly);\n\n        this.updateDisabled(this.disabled);\n    }\n\n    get widgetClassList() {\n        const classList = super.widgetClassList;\n        // if the buttons should be shown in rows\n        this.columns && classList.push('b-columned');\n        return classList;\n    }\n}\n\n// Register this widget type with its Factory\nButtonGroup.initClass();\n"],
  "mappings": "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",
  "names": ["ButtonGroup", "Container", "mixin", "Rotatable", "onChildAdd", "item", "ion", "click", "toggle", "thisObj", "prio", "onChildRemove", "un", "onItemToggle", "event", "me", "resetValueCache", "isSettingValue", "toggleGroup", "pressed", "triggerFieldChange", "value", "userAction", "_value", "createWidget", "widget", "constructor", "resolveType", "type", "isButton", "color", "generateId", "columns", "width", "relayEvents", "updateRotate", "rotate", "eachWidget", "btn", "values", "items", "forEach", "w", "undefined", "push", "join", "valueSeparator", "oldValue", "Array", "isArray", "split", "includes", "isConfiguring", "updateDisabled", "disabled", "button", "ignoreParentReadOnly", "readOnly", "updateReadOnly", "widgetClassList", "classList", "_ButtonGroup", "__publicField", "$name", "configurable", "defaultType", "cls", "hideWhenEmpty", "defaultBindProperty", "initClass", "_$name"]
}
