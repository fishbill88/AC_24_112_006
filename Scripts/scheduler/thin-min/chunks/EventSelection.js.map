{
  "version": 3,
  "sources": ["../../../../Scheduler/lib/Scheduler/crud/AbstractCrudManager.js", "../../../../Scheduler/lib/Scheduler/data/CrudManager.js", "../../../../Scheduler/lib/Scheduler/eventlayout/PackMixin.js", "../../../../Scheduler/lib/Scheduler/view/mixin/Describable.js", "../../../../Scheduler/lib/Scheduler/view/mixin/EventSelection.js"],
  "sourcesContent": ["import Base from '../../Core/Base.js';\nimport AbstractCrudManagerMixin from './AbstractCrudManagerMixin.js';\nimport StringHelper from '../../Core/helper/StringHelper.js';\n\n/**\n * @module Scheduler/crud/AbstractCrudManager\n */\n\n/**\n * @typedef {Object} CrudManagerStoreDescriptor\n * @property {String} storeId Unique store identifier. Store related requests/responses will be sent under this name.\n * @property {Core.data.Store} store The store itself.\n * @property {String} [phantomIdField] Set this if the store model has a predefined field to keep phantom record identifier.\n * @property {String} [idField] id field name, if it's not specified then class will try to get it from store model.\n * @property {Boolean} [writeAllFields] Set to true to write all fields from modified records\n */\n\n/**\n * This is an abstract class serving as the base for the {@link Scheduler.data.CrudManager} class.\n * It implements basic mechanisms to organize batch communication with a server.\n * Yet it does not contain methods related to _data transfer_ nor _encoding_.\n * These methods are to be provided in sub-classes by consuming the appropriate mixins.\n *\n * For example, this is how the class can be used to implement an JSON encoding system:\n *\n * ```javascript\n * // let's make new CrudManager using AJAX as a transport system and JSON for encoding\n * class MyCrudManager extends JsonEncode(AjaxTransport(AbstractCrudManager)) {\n *\n * }\n * ```\n *\n * ## Data transfer and encoding methods\n *\n * These are methods that must be provided by subclasses of this class:\n *\n * - [#sendRequest](#Scheduler/crud/AbstractCrudManagerMixin#function-sendRequest)\n * - [#cancelRequest](#Scheduler/crud/AbstractCrudManagerMixin#function-cancelRequest)\n * - [#encode](#Scheduler/crud/AbstractCrudManagerMixin#function-encode)\n * - [#decode](#Scheduler/crud/AbstractCrudManagerMixin#function-decode)\n *\n * @extends Core/Base\n * @mixes Scheduler/crud/AbstractCrudManagerMixin\n * @abstract\n */\nexport default class AbstractCrudManager extends Base.mixin(AbstractCrudManagerMixin) {\n    //region Default config\n\n    /**\n     * The server revision stamp.\n     * The _revision stamp_ is a number which should be incremented after each server-side change.\n     * This property reflects the current version of the data retrieved from the server and gets updated after each\n     * {@link Scheduler/crud/AbstractCrudManagerMixin#function-load} and {@link Scheduler/crud/AbstractCrudManagerMixin#function-sync} call.\n     * @property {Number}\n     * @readonly\n     */\n    get revision() {\n        return this.crudRevision;\n    }\n\n    set revision(value) {\n        this.crudRevision = value;\n    }\n\n    /**\n     * Get or set data of {@link #property-crudStores} as a JSON string.\n     *\n     * Get a JSON string:\n     * ```javascript\n     *\n     * const jsonString = scheduler.crudManager.json;\n     *\n     * // returned jsonString:\n     * '{\"eventsData\":[...],\"resourcesData\":[...],...}'\n     *\n     * // object representation of the returned jsonString:\n     * {\n     *     resourcesData    : [...],\n     *     eventsData       : [...],\n     *     assignmentsData  : [...],\n     *     dependenciesData : [...],\n     *     timeRangesData   : [...],\n     *     // data from other stores\n     * }\n     * ```\n     *\n     * Set a JSON string (to populate the CrudManager stores):\n     *\n     * ```javascript\n     * scheduler.crudManager.json = '{\"eventsData\":[...],\"resourcesData\":[...],...}'\n     * ```\n     *\n     * @property {String}\n     */\n    get json() {\n        return StringHelper.safeJsonStringify(this);\n    }\n\n    set json(json) {\n        if (typeof json === 'string') {\n            json = StringHelper.safeJsonParse(json);\n        }\n\n        this.forEachCrudStore(store => {\n            const dataName = `${store.storeId}Data`;\n            if (json[dataName]) {\n                store.data = json[dataName];\n            }\n        });\n    }\n\n    static get defaultConfig() {\n        return {\n            /**\n             * Sets the list of stores controlled by the CRUD manager.\n             *\n             * When adding a store to the CrudManager, make sure the server response format is correct for `load` and `sync` requests.\n             * Learn more in the [Working with data](#Scheduler/guides/data/crud_manager.md#loading-data) guide.\n             *\n             * Store can be provided as in instance, using its `storeId` or as an {@link #typedef-CrudManagerStoreDescriptor}\n             * object.\n             * @config {Core.data.Store[]|String[]|CrudManagerStoreDescriptor[]}\n             */\n            stores : null\n\n            /**\n             * Encodes request to the server.\n             * @function encode\n             * @param {Object} request The request to encode.\n             * @returns {String} The encoded request.\n             * @abstract\n             */\n\n            /**\n             * Decodes response from the server.\n             * @function decode\n             * @param {String} response The response to decode.\n             * @returns {Object} The decoded response.\n             * @abstract\n             */\n        };\n    }\n\n    //endregion\n\n    //region Init\n\n    construct(config = {}) {\n        if (config.stores) {\n            config.crudStores = config.stores;\n            delete config.stores;\n        }\n\n        super.construct(config);\n    }\n\n    //endregion\n\n    //region inline data\n\n    /**\n     * Returns the data from all CrudManager `crudStores` in a format that can be consumed by `inlineData`.\n     *\n     * Used by JSON.stringify to correctly convert this CrudManager to json.\n     *\n     * The returned data is identical to what {@link Scheduler/crud/AbstractCrudManager#property-inlineData} contains.\n     *\n     * ```javascript\n     *\n     * const json = scheduler.crudManager.toJSON();\n     *\n     * // json:\n     * {\n     *     eventsData : [...],\n     *     resourcesData : [...],\n     *     dependenciesData : [...],\n     *     assignmentsData : [...],\n     *     timeRangesData : [...],\n     *     resourceTimeRangesData : [...],\n     *     // ... other stores data\n     * }\n     * ```\n     *\n     * Output can be consumed by `inlineData`.\n     *\n     * ```javascript\n     * const json = scheduler.crudManager.toJSON();\n     *\n     * // Plug it back in later\n     * scheduler.crudManager.inlineData = json;\n     * ```\n     *\n     * @function toJSON\n     * @returns {Object}\n     * @category JSON\n     */\n    toJSON() {\n        // Collect data from crudStores\n        const result = {};\n        this.forEachCrudStore((store, storeId) => result[`${storeId}Data`] = store.toJSON());\n        return result;\n    }\n\n    /**\n     * Get or set data of CrudManager stores. The returned data is identical to what\n     * {@link Scheduler/crud/AbstractCrudManager#function-toJSON} returns:\n     *\n     * ```javascript\n     *\n     * const data = scheduler.crudManager.inlineData;\n     *\n     * // data:\n     * {\n     *     eventsData : [...],\n     *     resourcesData : [...],\n     *     dependenciesData : [...],\n     *     assignmentsData : [...],\n     *     timeRangesData : [...],\n     *     resourceTimeRangesData : [...],\n     *     ... other stores data\n     * }\n     *\n     *\n     * // Plug it back in later\n     * scheduler.crudManager.inlineData = data;\n     * ```\n     *\n     * @property {Object}\n     */\n    get inlineData() {\n        return this.toJSON();\n    }\n\n    set inlineData(data) {\n        this.json = data;\n    }\n\n    //endregion\n\n    //region Store collection (add, remove, get & iterate)\n\n    set stores(stores) {\n        if (stores !== this.crudStores) {\n            this.crudStores = stores;\n        }\n    }\n\n    /**\n     * A list of registered stores whose server communication will be collected into a single batch.\n     * Each store is represented by a _store descriptor_.\n     * @member {CrudManagerStoreDescriptor[]} stores\n     */\n    get stores() {\n        return this.crudStores;\n    }\n\n    //endregion\n\n    /**\n     * Returns true if the crud manager is currently loading data\n     * @property {Boolean}\n     * @readonly\n     * @category CRUD\n     */\n    get isLoading() {\n        return this.isCrudManagerLoading;\n    }\n\n    /**\n     * Adds a store to the collection.\n     *\n     *```javascript\n     * // append stores to the end of collection\n     * crudManager.addStore([\n     *     store1,\n     *     // storeId\n     *     'bar',\n     *     // store descriptor\n     *     {\n     *         storeId : 'foo',\n     *         store   : store3\n     *     },\n     *     {\n     *         storeId         : 'bar',\n     *         store           : store4,\n     *         // to write all fields of modified records\n     *         writeAllFields  : true\n     *     }\n     * ]);\n     *```\n     *\n     * **Note:** Order in which stores are kept in the collection is very essential sometimes.\n     * Exactly in this order the loaded data will be put into each store.\n     *\n     * When adding a store to the CrudManager, make sure the server response format is correct for `load` and `sync`\n     * requests. Learn more in the [Working with data](#Scheduler/guides/data/crud_manager.md#loading-data) guide.\n     *\n     * @param {Core.data.Store|String|CrudManagerStoreDescriptor|Core.data.Store[]|String[]|CrudManagerStoreDescriptor[]} store\n     * A store or list of stores. Each store might be specified by its instance, `storeId` or _descriptor_.\n     * @param {Number} [position] The relative position of the store. If `fromStore` is specified the position will be\n     * taken relative to it.\n     * If not specified then store(s) will be appended to the end of collection.\n     * Otherwise, it will be an index in stores collection.\n     *\n     * ```javascript\n     * // insert stores store4, store5 to the start of collection\n     * crudManager.addStore([ store4, store5 ], 0);\n     * ```\n     *\n     * @param {String|Core.data.Store|CrudManagerStoreDescriptor} [fromStore] The store relative to which position\n     * should be calculated. Can be defined as a store identifier, instance or descriptor (the result of\n     * {@link Scheduler/crud/AbstractCrudManagerMixin#function-getStoreDescriptor} call).\n     *\n     * ```javascript\n     * // insert store6 just before a store having storeId equal to 'foo'\n     * crudManager.addStore(store6, 0, 'foo');\n     *\n     * // insert store7 just after store3 store\n     * crudManager.addStore(store7, 1, store3);\n     * ```\n     */\n    addStore(...args) {\n        return this.addCrudStore(...args);\n    }\n\n    removeStore(...args) {\n        return this.removeCrudStore(...args);\n    }\n\n    getStore(...args) {\n        return this.getCrudStore(...args);\n    }\n\n    hasChanges(...args) {\n        return this.crudStoreHasChanges(...args);\n    }\n\n    loadData(...args) {\n        return this.loadCrudManagerData(...args);\n    }\n}\n", "import ResourceStore from './ResourceStore.js';\nimport EventStore from './EventStore.js';\nimport AssignmentStore from './AssignmentStore.js';\nimport DependencyStore from './DependencyStore.js';\nimport Store from '../../Core/data/Store.js';\nimport ProjectCrudManager from './mixin/ProjectCrudManager.js';\nimport AbstractCrudManager from '../crud/AbstractCrudManager.js';\nimport AjaxTransport from '../crud/transport/AjaxTransport.js';\nimport JsonEncoder from '../crud/encoder/JsonEncoder.js';\nimport ProjectModel from '../model/ProjectModel.js';\nimport ObjectHelper from '../../Core/helper/ObjectHelper.js';\n\n/**\n * @module Scheduler/data/CrudManager\n */\n\n/**\n * The Crud Manager (or \"CM\") is a class implementing centralized loading and saving of data in multiple stores.\n * Loading the stores and saving all changes is done using a single request. The stores managed by CRUD manager should\n * not be configured with their own CRUD URLs or use {@link Core/data/AjaxStore#config-autoLoad}/{@link Core/data/AjaxStore#config-autoCommit}.\n *\n * This class uses JSON as its data encoding format.\n *\n * ## Scheduler stores\n *\n * The class supports Scheduler specific stores (namely: resource, event, assignment and dependency stores).\n * For these stores, the CM has separate configs ({@link #config-resourceStore}, {@link #config-eventStore},\n * {@link #config-assignmentStore}) to register them.\n *\n * ```javascript\n * const crudManager = new CrudManager({\n *     autoLoad        : true,\n *     resourceStore   : resourceStore,\n *     eventStore      : eventStore,\n *     assignmentStore : assignmentStore,\n *     transport       : {\n *         load : {\n *             url : 'php/read.php'\n *         },\n *         sync : {\n *             url : 'php/save.php'\n *         }\n *     }\n * });\n * ```\n *\n * ## AJAX request configuration\n *\n * To configure AJAX request parameters please take a look at the\n * {@link Scheduler/crud/transport/AjaxTransport} docs.\n *\n * ```javascript\n * const crudManager = new CrudManager({\n *     autoLoad        : true,\n *     resourceStore,\n *     eventStore,\n *     assignmentStore,\n *     transport       : {\n *         load    : {\n *             url         : 'php/read.php',\n *             // use GET request\n *             method      : 'GET',\n *             // pass request JSON in \"rq\" parameter\n *             paramName   : 'rq',\n *             // extra HTTP request parameters\n *             params      : {\n *                 foo     : 'bar'\n *             },\n *             // pass some extra Fetch API option\n *             credentials : 'include'\n *         },\n *         sync : {\n *             url : 'php/save.php'\n *         }\n *     }\n * });\n * ```\n *\n * ## Using inline data\n *\n * The CrudManager provides settable property {@link #property-inlineData} that can\n * be used to get data from all {@link #property-crudStores} at once and to set this\n * data as well. Populating the stores this way can be useful if you cannot or you do not want to use CrudManager for\n * server requests but you pull the data by other means and have it ready outside CrudManager. Also, the data from all\n * stores is available in a single assignment statement.\n *\n * ### Getting data\n * ```javascript\n * const data = scheduler.crudManager.inlineData;\n *\n * // use the data in your application\n * ```\n *\n * ### Setting data\n * ```javascript\n * const data = // your function to pull server data\n *\n * scheduler.crudManager.inlineData = data;\n * ```\n *\n * ## Load order\n *\n * The CM is aware of the proper load order for Scheduler specific stores so you don't need to worry about it.\n * If you provide any extra stores (using {@link #config-stores} config) they will be\n * added to the start of collection before the Scheduler specific stores.\n * If you need a different loading order, you should use {@link #function-addStore} method to\n * register your store:\n *\n * ```javascript\n * const crudManager = new CrudManager({\n *     resourceStore   : resourceStore,\n *     eventStore      : eventStore,\n *     assignmentStore : assignmentStore,\n *     // extra user defined stores will get to the start of collection\n *     // so they will be loaded first\n *     stores          : [ store1, store2 ],\n *     transport       : {\n *         load : {\n *             url : 'php/read.php'\n *         },\n *         sync : {\n *             url : 'php/save.php'\n *         }\n *     }\n * });\n *\n * // append store3 to the end so it will be loaded last\n * crudManager.addStore(store3);\n *\n * // now when we registered all the stores let's load them\n * crudManager.load();\n * ```\n *\n * ## Assignment store\n *\n * The Crud Manager is designed to use {@link Scheduler/data/AssignmentStore} for assigning events to one or multiple resources.\n * However if server provides `resourceId` for any of the `events` then the Crud Manager enables backward compatible mode when\n * an event could have a single assignment only. This also disables multiple assignments in Scheduler UI.\n * In order to use multiple assignments server backend should be able to receive/send `assignments` for `load` and `sync` requests.\n *\n * ## Project\n *\n * The Crud Manager automatically consumes stores of the provided project (namely its {@link Scheduler/model/ProjectModel#property-eventStore},\n * {@link Scheduler/model/ProjectModel#property-resourceStore}, {@link Scheduler/model/ProjectModel#property-assignmentStore},\n * {@link Scheduler/model/ProjectModel#property-dependencyStore}, {@link Scheduler/model/ProjectModel#property-timeRangeStore} and\n * {@link Scheduler/model/ProjectModel#property-resourceTimeRangeStore}):\n *\n * ```javascript\n * const crudManager = new CrudManager({\n *     // crud manager will get stores from myAppProject project\n *     project   : myAppProject,\n *     transport : {\n *         load : {\n *             url : 'php/read.php'\n *         },\n *         sync : {\n *             url : 'php/save.php'\n *         }\n *     }\n * });\n * ```\n *\n * @mixes Scheduler/data/mixin/ProjectCrudManager\n * @mixes Scheduler/crud/encoder/JsonEncoder\n * @mixes Scheduler/crud/transport/AjaxTransport\n * @extends Scheduler/crud/AbstractCrudManager\n */\n\nexport default class CrudManager extends AbstractCrudManager.mixin(ProjectCrudManager, AjaxTransport, JsonEncoder) {\n\n    static $name = 'CrudManager';\n\n    //region Config\n\n    static get defaultConfig() {\n        return {\n            projectClass         : ProjectModel,\n            resourceStoreClass   : ResourceStore,\n            eventStoreClass      : EventStore,\n            assignmentStoreClass : AssignmentStore,\n            dependencyStoreClass : DependencyStore,\n\n            /**\n             * A store with resources (or a config object).\n             * @config {Scheduler.data.ResourceStore|ResourceStoreConfig}\n             */\n            resourceStore : {},\n\n            /**\n             * A store with events (or a config object).\n             *\n             * ```\n             * crudManager : {\n             *      eventStore {\n             *          storeClass : MyEventStore\n             *      }\n             * }\n             * ```\n             * @config {Scheduler.data.EventStore|EventStoreConfig}\n             */\n            eventStore : {},\n\n            /**\n             * A store with assignments (or a config object).\n             * @config {Scheduler.data.AssignmentStore|AssignmentStoreConfig}\n             */\n            assignmentStore : {},\n\n            /**\n             * A store with dependencies(or a config object).\n             * @config {Scheduler.data.DependencyStore|DependencyStoreConfig}\n             */\n            dependencyStore : {},\n\n            /**\n             * A project that holds and links stores\n             * @config {Scheduler.model.ProjectModel}\n             */\n            project : null\n        };\n    }\n\n    //endregion\n\n    buildProject() {\n        return new this.projectClass(this.buildProjectConfig());\n    }\n\n    buildProjectConfig() {\n        return ObjectHelper.cleanupProperties({\n            eventStore             : this.eventStore,\n            resourceStore          : this.resourceStore,\n            assignmentStore        : this.assignmentStore,\n            dependencyStore        : this.dependencyStore,\n            resourceTimeRangeStore : this.resourceTimeRangeStore\n        });\n    }\n\n    //region Stores\n\n    set project(project) {\n        const me = this;\n\n        if (project !== me._project) {\n            me.detachListeners('beforeDataReady');\n            me.detachListeners('afterDataReady');\n\n            me._project = project;\n\n            if (project) {\n                me.eventStore             = project.eventStore;\n                me.resourceStore          = project.resourceStore;\n                me.assignmentStore        = project.assignmentStore;\n                me.dependencyStore        = project.dependencyStore;\n                me.timeRangeStore         = project.timeRangeStore;\n                me.resourceTimeRangeStore = project.resourceTimeRangeStore;\n\n                // When adding multiple events to the store it will trigger multiple change events each of which will\n                // call crudManager.hasChanges, which will try to actually get the changeset package. It takes some time\n                // and we better skip that part for the dataready event, suspending changes tracking.\n                project.ion({\n                    name      : 'beforeDataReady',\n                    dataReady : () => me.suspendChangesTracking(),\n                    prio      : 100,\n                    thisObj   : me\n                });\n\n                project.ion({\n                    name      : 'afterDataReady',\n                    dataReady : () => me.resumeChangesTracking(),\n                    prio      : -100,\n                    thisObj   : me\n                });\n            }\n\n            if (!me.eventStore) {\n                me.eventStore = {};\n            }\n            if (!me.resourceStore) {\n                me.resourceStore = {};\n            }\n            if (!me.assignmentStore) {\n                me.assignmentStore = {};\n            }\n            if (!me.dependencyStore) {\n                me.dependencyStore = {};\n            }\n        }\n    }\n\n    get project() {\n        return this._project;\n    }\n\n    /**\n     * Store for {@link Scheduler/feature/TimeRanges timeRanges} feature.\n     * @property {Core.data.Store}\n     */\n    get timeRangeStore() {\n        return this._timeRangeStore?.store;\n    }\n\n    set timeRangeStore(store) {\n        this.setFeaturedStore('_timeRangeStore', store, this.project?.timeRangeStoreClass);\n    }\n\n    /**\n     * Store for {@link Scheduler/feature/ResourceTimeRanges resourceTimeRanges} feature.\n     * @property {Core.data.Store}\n     */\n    get resourceTimeRangeStore() {\n        return this._resourceTimeRangeStore?.store;\n    }\n\n    set resourceTimeRangeStore(store) {\n        this.setFeaturedStore('_resourceTimeRangeStore', store, this.project?.resourceTimeRangeStoreClass);\n    }\n\n    /**\n     * Get/set the resource store bound to the CRUD manager.\n     * @property {Scheduler.data.ResourceStore}\n     */\n    get resourceStore() {\n        return this._resourceStore?.store;\n    }\n\n    set resourceStore(store) {\n        const me = this;\n\n        me.setFeaturedStore('_resourceStore', store, me.resourceStoreClass);\n    }\n\n    /**\n     * Get/set the event store bound to the CRUD manager.\n     * @property {Scheduler.data.EventStore}\n     */\n    get eventStore() {\n        return this._eventStore?.store;\n    }\n\n    set eventStore(store) {\n        const me = this;\n\n        me.setFeaturedStore('_eventStore', store, me.eventStoreClass);\n    }\n\n    /**\n     * Get/set the assignment store bound to the CRUD manager.\n     * @property {Scheduler.data.AssignmentStore}\n     */\n    get assignmentStore() {\n        return this._assignmentStore?.store;\n    }\n\n    set assignmentStore(store) {\n        this.setFeaturedStore('_assignmentStore', store, this.assignmentStoreClass);\n    }\n\n    /**\n     * Get/set the dependency store bound to the CRUD manager.\n     * @property {Scheduler.data.DependencyStore}\n     */\n    get dependencyStore() {\n        return this._dependencyStore?.store;\n    }\n\n    set dependencyStore(store) {\n        this.setFeaturedStore('_dependencyStore', store, this.dependencyStoreClass);\n    }\n\n    setFeaturedStore(property, store, storeClass) {\n        const\n            me       = this,\n            oldStore = me[property]?.store;\n\n        // if not the same store\n        if (oldStore !== store) {\n            // normalize store value (turn it into a storeClass instance if needed)\n            store = Store.getStore(store, store?.storeClass || storeClass);\n\n            if (oldStore) {\n                me.removeStore(oldStore);\n            }\n\n            me[property] = store && { store } || null;\n\n            // Adds configured scheduler stores to the store collection ensuring correct order\n            // unless they're already registered.\n            me.addPrioritizedStore(me[property]);\n        }\n\n        return me[property];\n    }\n\n    getChangesetPackage() {\n        const pack = super.getChangesetPackage();\n\n        // Remove assignments from changes if using single assignment mode (resourceId)\n        if (pack && this.eventStore.usesSingleAssignment) {\n            delete pack[this.assignmentStore.storeId];\n            // No other changes?\n            if (!this.crudStores.some(storeInfo => pack[storeInfo.storeId])) {\n                return null;\n            }\n        }\n\n        return pack;\n    }\n\n    //endregion\n\n    get crudLoadValidationMandatoryStores() {\n        return [this._eventStore.storeId, this._resourceStore.storeId];\n    }\n\n};\n", "import Base from '../../Core/Base.js';\nimport DateHelper from '../../Core/helper/DateHelper.js';\n\n/**\n * @module Scheduler/eventlayout/PackMixin\n */\n\n/**\n * Mixin holding functionality shared between HorizontalLayoutPack and VerticalLayout.\n *\n * @mixin\n * @private\n */\nexport default Target => class PackMixin extends (Target || Base) {\n    static get $name() {\n        return 'PackMixin';\n    }\n\n    static get defaultConfig() {\n        return {\n            coordProp       : 'top',\n            sizeProp        : 'height',\n            inBandCoordProp : 'inBandTop',\n            inBandSizeProp  : 'inBandHeight'\n        };\n    }\n\n    isSameGroup(a, b) {\n        return this.grouped ? a.group === b.group : true;\n    }\n\n    // Packs the events to consume as little space as possible\n    packEventsInBands(events, applyClusterFn) {\n        const\n            me                      = this,\n            { coordProp, sizeProp } = me;\n\n        let slot,\n            firstInCluster,\n            cluster,\n            j;\n\n        for (let i = 0, l = events.length; i < l; i++) {\n            firstInCluster = events[i];\n\n            slot = me.findStartSlot(events, firstInCluster);\n\n            cluster = me.getCluster(events, i);\n\n            if (cluster.length > 1) {\n                firstInCluster[coordProp] = slot.start;\n                firstInCluster[sizeProp]  = slot.end - slot.start;\n\n                // If there are multiple slots, and events in the cluster have multiple start dates, group all same-start events into first slot\n                j = 1;\n\n                while (j < (cluster.length - 1) && cluster[j + 1].start - firstInCluster.start === 0) {\n                    j++;\n                }\n\n                // See if there's more than 1 slot available for this cluster, if so - first group in cluster consumes the entire first slot\n                const nextSlot = me.findStartSlot(events, cluster[j]);\n\n                if (nextSlot && nextSlot.start < 0.8) {\n                    cluster.length = j;\n                }\n            }\n\n            const\n                clusterSize = cluster.length,\n                slotSize    = (slot.end - slot.start) / clusterSize;\n\n            // Apply fraction values\n            for (j = 0; j < clusterSize; j++) {\n                applyClusterFn(cluster[j], j, slot, slotSize);\n            }\n\n            i += clusterSize - 1;\n        }\n\n        return 1;\n    }\n\n    findStartSlot(events, event) {\n        const\n            {\n                inBandSizeProp,\n                inBandCoordProp,\n                coordProp,\n                sizeProp\n            }                = this,\n            priorOverlappers = this.getPriorOverlappingEvents(events, event);\n\n        let i;\n\n        if (priorOverlappers.length === 0) {\n            return {\n                start : 0,\n                end   : 1\n            };\n        }\n\n        for (i = 0; i < priorOverlappers.length; i++) {\n            const\n                item       = priorOverlappers[i],\n                COORD_PROP = inBandCoordProp in item ? inBandCoordProp : coordProp,\n                SIZE_PROP  = inBandSizeProp in item ? inBandSizeProp : sizeProp;\n\n            if (i === 0 && item[COORD_PROP] > 0) {\n                return {\n                    start : 0,\n                    end   : item[COORD_PROP]\n                };\n            }\n            else {\n                if (item[COORD_PROP] + item[SIZE_PROP] < (i < priorOverlappers.length - 1 ? priorOverlappers[i + 1][COORD_PROP] : 1)) {\n                    return {\n                        start : item[COORD_PROP] + item[SIZE_PROP],\n                        end   : i < priorOverlappers.length - 1 ? priorOverlappers[i + 1][COORD_PROP] : 1\n                    };\n                }\n            }\n        }\n\n        return false;\n    }\n\n    getPriorOverlappingEvents(events, event) {\n        const\n            start       = event.start,\n            end         = event.end,\n            overlappers = [];\n\n        for (let i = 0, l = events.indexOf(event); i < l; i++) {\n            const item = events[i];\n\n            if (this.isSameGroup(item, event) && DateHelper.intersectSpans(start, end, item.start, item.end)) {\n                overlappers.push(item);\n            }\n        }\n\n        overlappers.sort(this.sortOverlappers.bind(this));\n\n        return overlappers;\n    }\n\n    sortOverlappers(e1, e2) {\n        const { coordProp } = this;\n\n        return e1[coordProp] - e2[coordProp];\n    }\n\n    getCluster(events, startIndex) {\n        const\n            startEvent = events[startIndex],\n            result     = [startEvent];\n\n        if (startIndex >= events.length - 1) {\n            return result;\n        }\n\n        let { start, end } = startEvent;\n\n        for (let i = startIndex + 1, l = events.length; i < l; i++) {\n            const item = events[i];\n\n            if (!this.isSameGroup(item, startEvent) || !DateHelper.intersectSpans(start, end, item.start, item.end)) {\n                break;\n            }\n\n            result.push(item);\n            start = DateHelper.max(start, item.start);\n            end   = DateHelper.min(item.end, end);\n        }\n\n        return result;\n    }\n};\n", "import Base from '../../../Core/Base.js';\nimport DateHelper from '../../../Core/helper/DateHelper.js';\n\n/**\n * @module Scheduler/view/mixin/Describable\n */\n\nconst\n    arrayify = format => (!format || Array.isArray(format)) ? format : [format],\n    pickFormat = (formats, index, defaultFormat) => (formats && formats[index] !== true) ? formats[index] : defaultFormat;\n\n/**\n * Mixin that provides a consistent method for describing the ranges of time presented by a view. This is currently\n * consumed only by the Calendar widget for describing its child views. This mixin is defined here to facilitate using\n * a Scheduler as a child view of a Calendar.\n *\n * @mixin\n */\nexport default Target => class Describable extends (Target || Base) {\n    static $name = 'Describable';\n\n    static configurable = {\n        /**\n         * A {@link Core.helper.DateHelper} format string to use to create date output for view descriptions.\n         * @config {String}\n         * @default\n         */\n        dateFormat : 'MMMM d, YYYY',\n\n        /**\n         * A string used to separate start and end dates in the {@link #config-descriptionFormat}.\n         * @prp {String}\n         * @default\n         */\n        dateSeparator : ' - ',\n\n        /**\n         * The date format used by the default {@link #config-descriptionRenderer} for rendering the view's description.\n         * If this value is `null`, the {@link #config-dateFormat} (and potentially {@link #config-dateSeparator}) will\n         * be used.\n         *\n         * For views that can span a range of dates, this can be a 2-item array with the following interpretation:\n         *\n         * - `descriptionFormat[0]` is either a date format string or `true` (to use {@link #config-dateFormat}). The\n         *   result of formatting the `startDate` with this format specification is used when the formatting both the\n         *   `startDate` and `endDate` with this specification produces the same result. For example, a week view\n         *   displays only the month and year components of the date, so this will be used unless the end of the week\n         *   crosses into the next month.\n         *\n         * - `descriptionFormat[1]` is used with {@link Core.helper.DateHelper#function-formatRange-static} when the\n         *  `startDate` and `endDate` format differently using `descriptionFormat[0]` (as described above). This one\n         *  format string produces a result for both dates. If this value is `true`, the {@link #config-dateFormat} and\n         *  {@link #config-dateSeparator} are combined to produce the range format.\n         *\n         * @prp {String|String[]|Boolean[]}\n         * @default\n         */\n        descriptionFormat : null,\n\n        /**\n         * A function that provides the textual description for this view. If provided, this function overrides the\n         * {@link #config-descriptionFormat}.\n         *\n         * ```javascript\n         *  descriptionRenderer() {\n         *      const\n         *          eventsInView = this.eventStore.records.filter(\n         *              eventRec => DateHelper.intersectSpans(\n         *                  this.startDate, this.endDate,\n         *                  eventRec.startDate, eventRec.endDate)).length,\n         *          sd = DateHelper.format(this.startDate, 'DD/MM/YYY'),\n         *          ed = DateHelper.format(this.endDate, 'DD/MM/YYY');\n         *\n         *     return `${sd} - ${ed}, ${eventsInView} event${eventsInView === 1 ? '' : 's'}`;\n         * }\n         * ```\n         * @config {Function} descriptionRenderer\n         * @param {Core.widget.Widget} view The active view in case the function is in another scope.\n         */\n        descriptionRenderer : null\n    };\n\n    /**\n     * Returns the date or ranges of included dates as an array. If there is only one significant date, the array will\n     * have only one element. Otherwise, a range of dates is returned as a two-element array with `[0]` being the\n     * `startDate` and `[1]` the `lastDate`.\n     * @member {Date[]}\n     * @internal\n     */\n    get dateBounds() {\n        return [this.date];\n    }\n\n    /**\n     * The textual description generated by the {@link #config-descriptionRenderer} if present, or by the\n     * view's date (or date *range* if it has a range) and the {@link #config-descriptionFormat}.\n     * @property {String}\n     * @readonly\n     */\n    get description() {\n        const\n            me = this,\n            { descriptionRenderer } = me;\n\n        return descriptionRenderer ? me.callback(descriptionRenderer, me, [me]) : me.formattedDescription;\n    }\n\n    get formattedDescription() {\n        const\n            me = this,\n            { dateBounds, dateFormat } = me,\n            descriptionFormat = me.descriptionFormat ?? arrayify(me.defaultDescriptionFormat),\n            format0 = pickFormat(descriptionFormat, 0, dateFormat),\n            end = dateBounds.length > 1 && descriptionFormat?.length > 1 && (\n                DateHelper.format(dateBounds[0], format0) !== DateHelper.format(dateBounds[1], format0)\n            );\n\n        // Format the startDate and endDate using the first format\n        let ret = DateHelper.format(dateBounds[0], format0);\n\n        if (end) {\n            // The endDate renders a different description, and we have a range format.\n            ret = DateHelper.formatRange(dateBounds,\n                pickFormat(descriptionFormat, 1, `S${dateFormat}${me.dateSeparator}E${dateFormat}`));\n        }\n\n        return ret;\n    }\n\n    changeDescriptionFormat(format) {\n        return arrayify(format);\n    }\n\n    get widgetClass() {}  // no b-describable class\n};\n", "import Base from '../../../Core/Base.js';\nimport Collection from '../../../Core/util/Collection.js';\nimport ArrayHelper from '../../../Core/helper/ArrayHelper.js';\n\n/**\n * @module Scheduler/view/mixin/EventSelection\n */\n\n/**\n * Mixin that tracks event or assignment selection by clicking on one or more events in the scheduler.\n * @mixin\n */\nexport default Target => class EventSelection extends (Target || Base) {\n    static get $name() {\n        return 'EventSelection';\n    }\n\n    //region Default config\n\n    static get configurable() {\n        return {\n            /**\n             * Configure as `true`, or set property to `true` to highlight dependent events as well when selecting an event.\n             * @config {Boolean}\n             * @default\n             * @category Selection\n             */\n            highlightPredecessors : false,\n\n            /**\n             * Configure as `true`, or set property to `true` to highlight dependent events as well when selecting an event.\n             * @config {Boolean}\n             * @default\n             * @category Selection\n             */\n            highlightSuccessors : false,\n\n            /**\n             * Configure as `true` to deselect a selected event upon click.\n             * @config {Boolean}\n             * @default\n             * @category Selection\n             */\n            deselectOnClick : false,\n\n            /**\n             * Configure as `false` to preserve selection when clicking the empty schedule area.\n             * @config {Boolean}\n             * @default\n             * @category Selection\n             */\n            deselectAllOnScheduleClick : true\n        };\n    }\n\n    static get defaultConfig() {\n        return {\n            /**\n             * Configure as `true` to allow `CTRL+click` to select multiple events in the scheduler.\n             * @config {Boolean}\n             * @category Selection\n             */\n            multiEventSelect : false,\n\n            /**\n             * Configure as `true`, or set property to `true` to disable event selection.\n             * @config {Boolean}\n             * @default\n             * @category Selection\n             */\n            eventSelectionDisabled : false,\n\n            /**\n             * CSS class to add to selected events.\n             * @config {String}\n             * @default\n             * @category CSS\n             * @private\n             */\n            eventSelectedCls : 'b-sch-event-selected',\n\n            /**\n             * Configure as `true` to trigger `selectionChange` when removing a selected event/assignment.\n             * @config {Boolean}\n             * @default\n             * @category Selection\n             */\n            triggerSelectionChangeOnRemove : false,\n\n            /**\n             * This flag controls whether Scheduler should preserve its selection of events when loading a new dataset\n             * (if selected event ids are included in the newly loaded dataset).\n             * @config {Boolean}\n             * @default\n             * @category Selection\n             */\n            maintainSelectionOnDatasetChange : true,\n\n            /**\n             * CSS class to add to other instances of a selected event, to highlight them.\n             * @config {String}\n             * @default\n             * @category CSS\n             * @private\n             */\n            eventAssignHighlightCls : 'b-sch-event-assign-selected',\n\n            /**\n             * Collection to store selection.\n             * @config {Core.util.Collection}\n             * @private\n             */\n            selectedCollection : {}\n        };\n    }\n\n    //endregion\n\n    //region Events\n\n    /**\n     * Fired any time there is a change to the events selected in the Scheduler.\n     * @event eventSelectionChange\n     * @param {'select'|'deselect'|'update'|'clear'} action One of the actions 'select', 'deselect', 'update',\n     * 'clear'\n     * @param {Scheduler.model.EventModel[]} selected An array of the Events added to the selection.\n     * @param {Scheduler.model.EventModel[]} deselected An array of the Event removed from the selection.\n     * @param {Scheduler.model.EventModel[]} selection The new selection.\n     */\n\n    /**\n     * Fired any time there is going to be a change to the events selected in the Scheduler.\n     * Returning `false` prevents the change\n     * @event beforeEventSelectionChange\n     * @preventable\n     * @param {String} action One of the actions 'select', 'deselect', 'update', 'clear'\n     * @param {Scheduler.model.EventModel[]} selected An array of events that will be added to the selection.\n     * @param {Scheduler.model.EventModel[]} deselected An array of events that will be removed from the selection.\n     * @param {Scheduler.model.EventModel[]} selection The currently selected events, before applying `selected` and `deselected`.\n     */\n\n    /**\n     * Fired any time there is a change to the assignments selected in the Scheduler.\n     * @event assignmentSelectionChange\n     * @param {'select'|'deselect'|'update'|'clear'} action One of the actions 'select', 'deselect', 'update',\n     * 'clear'\n     * @param {Scheduler.model.AssignmentModel[]} selected An array of the Assignments added to the selection.\n     * @param {Scheduler.model.AssignmentModel[]} deselected An array of the Assignments removed from the selection.\n     * @param {Scheduler.model.AssignmentModel[]} selection The new selection.\n     */\n\n    /**\n     * Fired any time there is going to be a change to the assignments selected in the Scheduler.\n     * Returning `false` prevents the change\n     * @event beforeAssignmentSelectionChange\n     * @preventable\n     * @param {String} action One of the actions 'select', 'deselect', 'update', 'clear'\n     * @param {Scheduler.model.EventModel[]} selected An array of assignments that will be added to the selection.\n     * @param {Scheduler.model.EventModel[]} deselected An array of assignments that will be removed from the selection.\n     * @param {Scheduler.model.EventModel[]} selection The currently selected assignments, before applying `selected` and `deselected`.\n     */\n\n    //endregion\n\n    //region Init\n\n    afterConstruct() {\n        super.afterConstruct();\n\n        this.navigator?.ion({\n            navigate : 'onEventNavigate',\n            thisObj  : this\n        });\n    }\n\n    //endregion\n\n    //region Selected Collection\n\n    set selectedCollection(selectedCollection) {\n        if (!(selectedCollection instanceof Collection)) {\n            selectedCollection = new Collection(selectedCollection);\n        }\n        this._selectedCollection = selectedCollection;\n\n        // Fire row change events from onSelectedCollectionChange\n        selectedCollection.ion({\n            change : (...args) => this.project.deferUntilRepopulationIfNeeded(\n                'onSelectedCollectionChange',\n                (...args) => !this.isDestroying && this.onSelectedCollectionChange(...args),\n                args\n            ),\n            // deferring this handler breaks the UI\n            beforeSplice : 'onBeforeSelectedCollectionSplice',\n            thisObj      : this\n        });\n    }\n\n    get selectedCollection() {\n        return this._selectedCollection;\n    }\n\n    getActionType(selection, selected, deselected) {\n        return (selection.length > 0)\n            ? ((selected.length > 0 && deselected.length > 0)\n                ? 'update'\n                : (selected.length > 0\n                    ? 'select'\n                    : 'deselect'))\n            : 'clear';\n    }\n\n    //endregion\n\n    //region Modify selection\n\n    getEventsFromAssignments(assignments) {\n        return ArrayHelper.unique(assignments.map(assignment => assignment.event));\n    }\n\n    /**\n     * The {@link Scheduler.model.EventModel events} which are selected.\n     * @property {Scheduler.model.EventModel[]}\n     * @category Selection\n     */\n    get selectedEvents() {\n        return this.getEventsFromAssignments(this.selectedCollection.values);\n    }\n\n    set selectedEvents(events) {\n        // Select all assignments\n        const assignments = [];\n\n        events = ArrayHelper.asArray(events);\n\n        events?.forEach(event => {\n            if (this.isEventSelectable(event) !== false) {\n                if (event.isOccurrence) {\n                    event.assignments.forEach(as => {\n                        assignments.push(this.assignmentStore.getOccurrence(as, event));\n                    });\n                }\n                else {\n                    assignments.push(...event.assignments);\n                }\n            }\n        });\n\n        // Replace the entire selected collection with the new record set\n        this.selectedCollection.splice(0, this.selectedCollection.count, assignments);\n    }\n\n    /**\n     * The {@link Scheduler.model.AssignmentModel events} which are selected.\n     * @property {Scheduler.model.AssignmentModel[]}\n     * @category Selection\n     */\n    get selectedAssignments() {\n        return this.selectedCollection.values;\n    }\n\n    set selectedAssignments(assignments) {\n        // Replace the entire selected collection with the new record set\n        this.selectedCollection.splice(0, this.selectedCollection.count, assignments || []);\n    }\n\n    /**\n     * Returns `true` if the {@link Scheduler.model.EventModel event} is selected.\n     * @param {Scheduler.model.EventModel} event The event\n     * @returns {Boolean} Returns `true` if the event is selected\n     * @category Selection\n     */\n    isEventSelected(event) {\n        const { selectedCollection } = this;\n\n        return Boolean(selectedCollection.count && selectedCollection.includes(event.assignments));\n    }\n\n    /**\n     * A template method (empty by default) allowing you to control if an event can be selected or not.\n     *\n     * ```javascript\n     * new Scheduler({\n     *     isEventSelectable(event) {\n     *         return event.startDate >= Date.now();\n     *     }\n     * })\n     * ```\n     *\n     * This selection process is applicable to calendar too:\n     *\n     * ```javascript\n     * new Calendar({\n     *     isEventSelectable(event) {\n     *         return event.startDate >= Date.now();\n     *     }\n     * })\n     * ```\n     *\n     * @param {Scheduler.model.EventModel} event The event record\n     * @returns {Boolean} true if event can be selected, otherwise false\n     * @prp {Function}\n     * @category Selection\n     */\n    isEventSelectable(event) {}\n\n    /**\n     * Returns `true` if the {@link Scheduler.model.AssignmentModel assignment} is selected.\n     * @param {Scheduler.model.AssignmentModel} assignment The assignment\n     * @returns {Boolean} Returns `true` if the assignment is selected\n     * @category Selection\n     */\n    isAssignmentSelected(assignment) {\n        return this.selectedCollection.includes(assignment);\n    }\n\n    /**\n     * Selects the passed {@link Scheduler.model.EventModel event} or {@link Scheduler.model.AssignmentModel assignment}\n     * *if it is not selected*. Selecting events results in all their assignments being selected.\n     * @param {Scheduler.model.EventModel|Scheduler.model.AssignmentModel} eventOrAssignment The event or assignment to select\n     * @param {Boolean} [preserveSelection] Pass `true` to preserve any other selected events or assignments\n     * @category Selection\n     */\n    select(eventOrAssignment, preserveSelection = false) {\n        if (eventOrAssignment.isAssignment) {\n            this.selectAssignment(eventOrAssignment, preserveSelection);\n        }\n        else {\n            this.selectEvent(eventOrAssignment, preserveSelection);\n        }\n    }\n\n    /**\n     * Selects the passed {@link Scheduler.model.EventModel event} *if it is not selected*. Selecting an event will\n     * select all its assignments.\n     * @param {Scheduler.model.EventModel} event The event to select\n     * @param {Boolean} [preserveSelection] Pass `true` to preserve any other selected events\n     * @category Selection\n     */\n    selectEvent(event, preserveSelection = false) {\n        // If the event is already selected, this is a no-op.\n        // In this case, selection must not be cleared even in the absence of preserveSelection\n        if (!this.isEventSelected(event)) {\n            this.selectEvents([event], preserveSelection);\n        }\n    }\n\n    /**\n     * Selects the passed {@link Scheduler.model.AssignmentModel assignment} *if it is not selected*.\n     * @param {Scheduler.model.AssignmentModel} assignment The assignment to select\n     * @param {Boolean} [preserveSelection] Pass `true` to preserve any other selected assignments\n     * @param {Event} [event] If this method was invoked as a result of a user action, this is the DOM event that triggered it\n     * @category Selection\n     */\n    selectAssignment(assignment, preserveSelection = false, event) {\n        // If the event is already selected, this is a no-op.\n        // In this case, selection must not be cleared even in the absence of preserveSelection\n        if (!this.isAssignmentSelected(assignment)) {\n            preserveSelection ? this.selectedCollection.add(assignment) : this.selectedAssignments = assignment;\n        }\n    }\n\n    /**\n     * Deselects the passed {@link Scheduler.model.EventModel event} or {@link Scheduler.model.AssignmentModel assignment}\n     * *if it is selected*.\n     * @param {Scheduler.model.EventModel|Scheduler.model.AssignmentModel} eventOrAssignment The event or assignment to deselect.\n     * @category Selection\n     */\n    deselect(eventOrAssignment) {\n        if (eventOrAssignment.isAssignment) {\n            this.deselectAssignment(eventOrAssignment);\n        }\n        else {\n            this.deselectEvent(eventOrAssignment);\n        }\n    }\n\n    /**\n     * Deselects the passed {@link Scheduler.model.EventModel event} *if it is selected*.\n     * @param {Scheduler.model.EventModel} event The event to deselect.\n     * @category Selection\n     */\n    deselectEvent(event) {\n        if (this.isEventSelected(event)) {\n            this.selectedCollection.remove(...event.assignments);\n        }\n    }\n\n    /**\n     * Deselects the passed {@link Scheduler.model.AssignmentModel assignment} *if it is selected*.\n     * @param {Scheduler.model.AssignmentModel} assignment The assignment to deselect\n     * @param {Event} [event] If this method was invoked as a result of a user action, this is the DOM event that triggered it\n     * @category Selection\n     */\n    deselectAssignment(assignment) {\n        if (this.isAssignmentSelected(assignment)) {\n            this.selectedCollection.remove(assignment);\n        }\n    }\n\n    /**\n     * Adds {@link Scheduler.model.EventModel events} to the selection.\n     * @param {Scheduler.model.EventModel[]} events Events to be selected\n     * @param {Boolean} [preserveSelection] Pass `true` to preserve any other selected events\n     * @category Selection\n     */\n    selectEvents(events, preserveSelection = false) {\n        if (preserveSelection) {\n            const assignments = (events.reduce((assignments, event) => {\n                if (this.isEventSelectable(event) !== false) {\n                    assignments.push(...event.assignments);\n                }\n                return assignments;\n            }, []));\n\n            this.selectedCollection.add(assignments);\n        }\n        else {\n            this.selectedEvents = events;\n        }\n    }\n\n    /**\n     * Removes {@link Scheduler.model.EventModel events} from the selection.\n     * @param {Scheduler.model.EventModel[]} events Events or assignments  to be deselected\n     * @category Selection\n     */\n    deselectEvents(events) {\n        this.selectedCollection.remove(events.reduce((assignments, event) => {\n            assignments.push(...event.assignments);\n            return assignments;\n        }, []));\n    }\n\n    /**\n     * Adds {@link Scheduler.model.AssignmentModel assignments} to the selection.\n     * @param {Scheduler.model.AssignmentModel[]} assignments Assignments to be selected\n     * @category Selection\n     */\n    selectAssignments(assignments) {\n        this.selectedCollection.add(assignments);\n    }\n\n    /**\n     * Removes {@link Scheduler.model.AssignmentModel assignments} from the selection.\n     * @param {Scheduler.model.AssignmentModel[]} assignments Assignments  to be deselected\n     * @category Selection\n     */\n    deselectAssignments(assignments) {\n        this.selectedCollection.remove(assignments);\n    }\n\n    /**\n     * Deselects all {@link Scheduler.model.EventModel events} and {@link Scheduler.model.AssignmentModel assignments}.\n     * @category Selection\n     */\n    clearEventSelection() {\n        this.selectedAssignments = [];\n    }\n\n    //endregion\n\n    //region Events\n\n    /**\n     * Responds to mutations of the underlying selection Collection.\n     * Keeps the UI synced, eventSelectionChange and assignmentSelectionChange event is fired when `me.silent` is falsy.\n     * @private\n     */\n\n    onBeforeSelectedCollectionSplice({ toAdd, toRemove, index }) {\n        const\n            me = this,\n            selection = me._selectedCollection.values,\n            selected = toAdd,\n            deselected = toRemove > 0 ? selected.slice(index, toRemove + index) : [],\n            action = me.getActionType(selection, selected, deselected);\n\n        if (me.trigger('beforeEventSelectionChange', {\n            action,\n            selection  : me.getEventsFromAssignments(selection) || [],\n            selected   : me.getEventsFromAssignments(selected) || [],\n            deselected : me.getEventsFromAssignments(deselected) || []\n        }) === false) {\n            return false;\n        }\n\n        if (me.trigger('beforeAssignmentSelectionChange', {\n            action,\n            selection,\n            selected,\n            deselected\n        }) === false) {\n            return false;\n        }\n    }\n\n    onSelectedCollectionChange({ added, removed }) {\n        const\n            me         = this,\n            selection  = me.selectedAssignments,\n            selected   = added || [],\n            deselected = removed || [];\n\n        function updateSelection(assignmentRecord, select) {\n            const eventRecord    = assignmentRecord.event;\n\n            if (eventRecord) {\n                const\n                    { eventAssignHighlightCls } = me,\n                    element                     = me.getElementFromAssignmentRecord(assignmentRecord);\n\n                me.currentOrientation.toggleCls(assignmentRecord, me.eventSelectedCls, select);\n\n                eventAssignHighlightCls && me.getElementsFromEventRecord(eventRecord).forEach(el => {\n                    if (el !== element) {\n                        const otherAssignmentRecord = me.resolveAssignmentRecord(el);\n\n                        me.currentOrientation.toggleCls(otherAssignmentRecord, eventAssignHighlightCls, select);\n\n                        if (select) {\n                            // Need to force a reflow to get the highlightning animation triggered\n                            el.style.animation = 'none';\n                            el.offsetHeight;\n                            el.style.animation = '';\n                        }\n                        el.classList.toggle(eventAssignHighlightCls, select);\n                    }\n                });\n            }\n        }\n\n        deselected.forEach(record => updateSelection(record, false));\n        selected.forEach(record => updateSelection(record, true));\n\n        if (me.highlightSuccessors || me.highlightPredecessors) {\n            me.highlightLinkedEvents(me.selectedEvents);\n        }\n\n        // To be able to restore selection after reloading resources (which might lead to regenerated assignments in\n        // the single assignment scenario, so cannot rely on records or ids)\n        me.$selectedAssignments = selection.map(assignment => ({\n            eventId    : assignment.eventId,\n            resourceId : assignment.resourceId\n        }));\n\n        if (!me.silent) {\n            const action = this.getActionType(selection, selected, deselected);\n\n            me.trigger('assignmentSelectionChange', {\n                action,\n                selection,\n                selected,\n                deselected\n            });\n\n            me.trigger('eventSelectionChange', {\n                action,\n                selection  : me.selectedEvents,\n                selected   : me.getEventsFromAssignments(selected),\n                deselected : me.getEventsFromAssignments(deselected)\n            });\n        }\n    }\n\n    /**\n     * Assignment change listener to remove events from selection which are no longer in the assignments.\n     * @private\n     */\n    onAssignmentChange(event) {\n        super.onAssignmentChange(event);\n\n        const\n            me = this,\n            { action, records : assignments } = event;\n\n        me.silent = !me.triggerSelectionChangeOnRemove;\n\n        if (action === 'remove') {\n            me.deselectAssignments(assignments);\n        }\n        else if (action === 'removeall' && !me.eventStore.isSettingData) {\n            me.clearEventSelection();\n        }\n        else if (action === 'dataset' && me.$selectedAssignments) {\n            if (!me.maintainSelectionOnDatasetChange) {\n                me.clearEventSelection();\n            }\n            else {\n                const newAssignments = me.$selectedAssignments.map(selector =>\n                    assignments.find(a =>\n                        a.eventId === selector.eventId &&\n                        a.resourceId === selector.resourceId\n                    )\n                );\n\n                me.selectedAssignments = ArrayHelper.clean(newAssignments);\n            }\n        }\n\n        me.silent = false;\n    }\n\n    onInternalEventStoreChange({ source, action, records }) {\n        // Setting empty event dataset cannot be handled in onAssignmentChange above, no assignments might be affected\n        if (!source.isResourceTimeRangeStore && action === 'dataset' && !records.length) {\n            this.clearEventSelection();\n        }\n\n        super.onInternalEventStoreChange(...arguments);\n    }\n\n    /**\n     * Mouse listener to update selection.\n     * @private\n     */\n    onAssignmentSelectionClick(event, clickedRecord) {\n        const me = this;\n\n        // Multi selection: CTRL means preserve selection, just add or remove the event.\n        // Single selection: CTRL deselects already selected event\n        if (me.isAssignmentSelected(clickedRecord)) {\n            if (me.deselectOnClick || event.ctrlKey) {\n                me.deselectAssignment(clickedRecord, me.multiEventSelect, event);\n            }\n        }\n        else if (this.isEventSelectable(clickedRecord.event) !== false) {\n            me.selectAssignment(clickedRecord, event.ctrlKey && me.multiEventSelect, event);\n        }\n    }\n\n    /**\n     * Navigation listener to update selection.\n     * @private\n     */\n    onEventNavigate({ event, item }) {\n        if (!this.eventSelectionDisabled) {\n            const assignment = item && (item.nodeType === Element.ELEMENT_NODE ? this.resolveAssignmentRecord(item) : item);\n\n            if (assignment) {\n                this.onAssignmentSelectionClick(event, assignment);\n            }\n            // The click was not an event or assignment\n            else if (this.deselectAllOnScheduleClick) {\n                this.clearEventSelection();\n            }\n        }\n    }\n\n    changeHighlightSuccessors(value) {\n        return this.changeLinkedEvents(value);\n    }\n\n    changeHighlightPredecessors(value) {\n        return this.changeLinkedEvents(value);\n    }\n\n    changeLinkedEvents(value) {\n        const me = this;\n\n        if (value) {\n            me.highlighted = me.highlighted || new Set();\n\n            me.highlightLinkedEvents(me.selectedEvents);\n        }\n        else if (me.highlighted) {\n            me.highlightLinkedEvents();\n        }\n\n        return value;\n    }\n\n    // Function that highlights/unhighlights events in a dependency chain\n    highlightLinkedEvents(eventRecords = []) {\n        const\n            me                  = this,\n            {\n                highlighted,\n                eventStore\n            }                   = me,\n            dependenciesFeature = me.features.dependencies;\n\n        // Unhighlight previously highlighted records\n        highlighted.forEach(eventRecord => {\n            if (!eventRecords.includes(eventRecord)) {\n                eventRecord.meta.highlight = false;\n                highlighted.delete(eventRecord);\n\n                if (eventStore.includes(eventRecord)) {\n                    eventRecord.dependencies.forEach(dep => dependenciesFeature.unhighlight(dep, 'b-highlight'));\n                }\n            }\n        });\n\n        eventRecords.forEach(eventRecord => {\n            const toWalk = [eventRecord];\n\n            // Collect all events along the dependency chain\n            while (toWalk.length) {\n                const record = toWalk.pop();\n\n                highlighted.add(record);\n\n                if (me.highlightSuccessors) {\n                    record.outgoingDeps.forEach(outgoing => {\n                        dependenciesFeature.highlight(outgoing, 'b-highlight');\n                        !highlighted.has(outgoing.toEvent) && toWalk.push(outgoing.toEvent);\n                    });\n                }\n                if (me.highlightPredecessors) {\n                    record.incomingDeps.forEach(incoming => {\n                        dependenciesFeature.highlight(incoming, 'b-highlight');\n                        !highlighted.has(incoming.fromEvent) && toWalk.push(incoming.fromEvent);\n                    });\n                }\n            }\n\n            // Highlight them\n            highlighted.forEach(record => record.meta.highlight = true);\n        });\n\n        // Toggle flag on schedulers element, to fade others in or out\n        me.element.classList.toggle('b-highlighting', eventRecords.length > 0);\n\n        me.refreshWithTransition();\n    }\n\n    onEventDataGenerated(renderData) {\n        if (this.highlightSuccessors || this.highlightPredecessors) {\n            renderData.cls['b-highlight'] = renderData.eventRecord.meta.highlight;\n        }\n        super.onEventDataGenerated(renderData);\n    }\n\n    updateProject(project, old) {\n        // Clear selection when the whole world shifts :)\n        this.clearEventSelection();\n\n        super.updateProject(project, old);\n    }\n\n    //endregion\n\n    doDestroy() {\n        this._selectedCollection?.destroy();\n\n        super.doDestroy();\n    }\n\n    //region Getters/Setters\n\n    // This does not need a className on Widgets.\n    // Each *Class* which doesn't need 'b-' + constructor.name.toLowerCase() automatically adding\n    // to the Widget it's mixed in to should implement thus.\n    get widgetClass() {}\n\n    //endregion\n};\n"],
  "mappings": "mgBA0Ce,MAAMA,UAA4BC,EAAKC,MAAMC,CAAwB,CAAE,CAUlF,IAAIC,UAAW,CACX,OAAO,KAAKC,YAChB,CACA,IAAID,SAASE,EAAO,CAChB,KAAKD,aAAeC,CACxB,CA+BA,IAAIC,MAAO,CACP,OAAOC,EAAaC,kBAAkB,IAAI,CAC9C,CACA,IAAIF,KAAKA,EAAM,CACP,OAAOA,GAAS,WAChBA,EAAOC,EAAaE,cAAcH,CAAI,GAE1C,KAAKI,iBAAiBC,GAAS,CAC3B,MAAMC,EAAY,GAAED,EAAME,cACtBP,EAAKM,CAAQ,IACbD,EAAMG,KAAOR,EAAKM,CAAQ,EAElC,CAAC,CACL,CACA,WAAWG,eAAgB,CACvB,MAAO,CAWHC,OAAS,KAgBjB,CAGAC,UAAUC,EAAS,CAAA,EAAI,CACfA,EAAOF,SACPE,EAAOC,WAAaD,EAAOF,OAC3B,OAAOE,EAAOF,QAElB,MAAMC,UAAUC,CAAM,CAC1B,CAuCAE,QAAS,CAEL,MAAMC,EAAS,CAAA,EACf,YAAKX,iBAAiB,CAACC,EAAOE,IAAYQ,EAAQ,GAAER,OAAa,EAAIF,EAAMS,OAAM,CAAE,EAC5EC,CACX,CA2BA,IAAIC,YAAa,CACb,OAAO,KAAKF,OAAM,CACtB,CACA,IAAIE,WAAWR,EAAM,CACjB,KAAKR,KAAOQ,CAChB,CAGA,IAAIE,OAAOA,EAAQ,CACXA,IAAW,KAAKG,aAChB,KAAKA,WAAaH,EAE1B,CAMA,IAAIA,QAAS,CACT,OAAO,KAAKG,UAChB,CAQA,IAAII,WAAY,CACZ,OAAO,KAAKC,oBAChB,CAsDAC,YAAYC,EAAM,CACd,OAAO,KAAKC,aAAa,GAAGD,CAAI,CACpC,CACAE,eAAeF,EAAM,CACjB,OAAO,KAAKG,gBAAgB,GAAGH,CAAI,CACvC,CACAI,YAAYJ,EAAM,CACd,OAAO,KAAKK,aAAa,GAAGL,CAAI,CACpC,CACAM,cAAcN,EAAM,CAChB,OAAO,KAAKO,oBAAoB,GAAGP,CAAI,CAC3C,CACAQ,YAAYR,EAAM,CACd,OAAO,KAAKS,oBAAoB,GAAGT,CAAI,CAC3C,CACJ,CACA3B,EAAoBqC,OAAS,sBCjJd,MAAMC,UAAoBtC,EAAoBE,MAAMqC,EAAoBC,EAAeC,CAAW,CAAE,CAG/G,WAAWzB,eAAgB,CACvB,MAAO,CACH0B,aAAuBC,EACvBC,mBAAuBC,EACvBC,gBAAuBC,EACvBC,qBAAuBC,EACvBC,qBAAuBC,EAKvBC,cAAgB,CAAA,EAahBC,WAAa,CAAA,EAKbC,gBAAkB,CAAA,EAKlBC,gBAAkB,CAAA,EAKlBC,QAAU,KAElB,CAEAC,cAAe,CACX,OAAO,IAAI,KAAKf,aAAa,KAAKgB,mBAAkB,CAAE,CAC1D,CACAA,oBAAqB,CACjB,OAAOC,EAAaC,kBAAkB,CAClCP,WAAyB,KAAKA,WAC9BD,cAAyB,KAAKA,cAC9BE,gBAAyB,KAAKA,gBAC9BC,gBAAyB,KAAKA,gBAC9BM,uBAAyB,KAAKA,sBAClC,CAAC,CACL,CAEA,IAAIL,QAAQA,EAAS,CACjB,MAAMM,EAAK,KACPN,IAAYM,EAAGC,WACfD,EAAGE,gBAAgB,iBAAiB,EACpCF,EAAGE,gBAAgB,gBAAgB,EACnCF,EAAGC,SAAWP,EACVA,IACAM,EAAGT,WAAyBG,EAAQH,WACpCS,EAAGV,cAAyBI,EAAQJ,cACpCU,EAAGR,gBAAyBE,EAAQF,gBACpCQ,EAAGP,gBAAyBC,EAAQD,gBACpCO,EAAGG,eAAyBT,EAAQS,eACpCH,EAAGD,uBAAyBL,EAAQK,uBAIpCL,EAAQU,IAAI,CACRC,KAAY,kBACZC,UAAYA,IAAMN,EAAGO,uBAAsB,EAC3CC,KAAY,IACZC,QAAYT,CAChB,CAAC,EACDN,EAAQU,IAAI,CACRC,KAAY,iBACZC,UAAYA,IAAMN,EAAGU,sBAAqB,EAC1CF,KAAY,KACZC,QAAYT,CAChB,CAAC,GAEAA,EAAGT,aACJS,EAAGT,WAAa,CAAA,GAEfS,EAAGV,gBACJU,EAAGV,cAAgB,CAAA,GAElBU,EAAGR,kBACJQ,EAAGR,gBAAkB,CAAA,GAEpBQ,EAAGP,kBACJO,EAAGP,gBAAkB,CAAA,GAGjC,CACA,IAAIC,SAAU,CACV,OAAO,KAAKO,QAChB,CAKA,IAAIE,gBAAiB,CAAA,IAAAQ,EACjB,OAAAA,EAAO,KAAKC,mBAAe,MAAAD,IAAA,OAAA,OAApBA,EAAsB7D,KACjC,CACA,IAAIqD,eAAerD,EAAO,CAAA,IAAA+D,EACtB,KAAKC,iBAAiB,kBAAmBhE,GAAK+D,EAAE,KAAKnB,WAAOmB,MAAAA,IAAA,OAAA,OAAZA,EAAcE,mBAAmB,CACrF,CAKA,IAAIhB,wBAAyB,CAAA,IAAAiB,EACzB,OAAAA,EAAO,KAAKC,2BAAuB,MAAAD,IAAA,OAAA,OAA5BA,EAA8BlE,KACzC,CACA,IAAIiD,uBAAuBjD,EAAO,CAAA,IAAAoE,EAC9B,KAAKJ,iBAAiB,0BAA2BhE,GAAKoE,EAAE,KAAKxB,WAAOwB,MAAAA,IAAA,OAAA,OAAZA,EAAcC,2BAA2B,CACrG,CAKA,IAAI7B,eAAgB,CAAA,IAAA8B,EAChB,OAAAA,EAAO,KAAKC,kBAAc,MAAAD,IAAA,OAAA,OAAnBA,EAAqBtE,KAChC,CACA,IAAIwC,cAAcxC,EAAO,CACrB,MAAMkD,EAAK,KACXA,EAAGc,iBAAiB,iBAAkBhE,EAAOkD,EAAGlB,kBAAkB,CACtE,CAKA,IAAIS,YAAa,CAAA,IAAA+B,EACb,OAAAA,EAAO,KAAKC,eAAW,MAAAD,IAAA,OAAA,OAAhBA,EAAkBxE,KAC7B,CACA,IAAIyC,WAAWzC,EAAO,CAClB,MAAMkD,EAAK,KACXA,EAAGc,iBAAiB,cAAehE,EAAOkD,EAAGhB,eAAe,CAChE,CAKA,IAAIQ,iBAAkB,CAAA,IAAAgC,EAClB,OAAAA,EAAO,KAAKC,oBAAgB,MAAAD,IAAA,OAAA,OAArBA,EAAuB1E,KAClC,CACA,IAAI0C,gBAAgB1C,EAAO,CACvB,KAAKgE,iBAAiB,mBAAoBhE,EAAO,KAAKoC,oBAAoB,CAC9E,CAKA,IAAIO,iBAAkB,CAAA,IAAAiC,EAClB,OAAAA,EAAO,KAAKC,oBAAgB,MAAAD,IAAA,OAAA,OAArBA,EAAuB5E,KAClC,CACA,IAAI2C,gBAAgB3C,EAAO,CACvB,KAAKgE,iBAAiB,mBAAoBhE,EAAO,KAAKsC,oBAAoB,CAC9E,CACA0B,iBAAiBc,EAAU9E,EAAO+E,EAAY,CAAA,IAAAC,EAC1C,MACI9B,EAAW,KACX+B,GAAQD,EAAG9B,EAAG4B,CAAQ,KAAC,MAAAE,IAAA,OAAA,OAAZA,EAAchF,MAE7B,GAAIiF,IAAajF,EAAO,CAAA,IAAAkF,EAEpBlF,EAAQmF,EAAMhE,SAASnB,IAAOkF,EAAAlF,KAAK,MAAAkF,IAALA,OAAAA,OAAAA,EAAOH,aAAcA,CAAU,EACzDE,GACA/B,EAAGjC,YAAYgE,CAAQ,EAE3B/B,EAAG4B,CAAQ,EAAI9E,GAAS,CAAEA,MAAAA,CAAM,GAAK,KAGrCkD,EAAGkC,oBAAoBlC,EAAG4B,CAAQ,CAAC,EAEvC,OAAO5B,EAAG4B,CAAQ,CACtB,CACAO,qBAAsB,CAClB,MAAMC,EAAO,MAAMD,oBAAmB,EAEtC,OAAIC,GAAQ,KAAK7C,WAAW8C,uBACxB,OAAOD,EAAK,KAAK5C,gBAAgBxC,OAAO,EAEpC,CAAC,KAAKM,WAAWgF,KAAKC,GAAaH,EAAKG,EAAUvF,OAAO,CAAC,GACnD,KAGRoF,CACX,CAEA,IAAII,mCAAoC,CACpC,MAAO,CAAC,KAAKjB,YAAYvE,QAAS,KAAKqE,eAAerE,OAAO,CACjE,CACJ,CAxMIyF,EADiBjE,EACVkE,QAAQ,eAyMnBlE,EAAYD,OAAS,cCpWrB,IAAAoE,EAAeC,GAAU,cAAyBA,GAAUzG,EAAM,CAC9D,WAAWuG,OAAQ,CACf,MAAO,WACX,CACA,WAAWxF,eAAgB,CACvB,MAAO,CACH2F,UAAkB,MAClBC,SAAkB,SAClBC,gBAAkB,YAClBC,eAAkB,eAE1B,CACAC,YAAYC,EAAGC,EAAG,CACd,OAAO,KAAKC,QAAUF,EAAEG,QAAUF,EAAEE,MAAQ,EAChD,CAEAC,kBAAkBC,EAAQC,EAAgB,CACtC,MACIxD,EAA0B,KAC1B,CAAE6C,UAAAA,EAAWC,SAAAA,CAAS,EAAI9C,EAC9B,IAAIyD,EACAC,EACAC,EACAC,EACJ,QAASC,EAAI,EAAGC,EAAIP,EAAOQ,OAAQF,EAAIC,EAAGD,IAAK,CAI3C,GAHAH,EAAiBH,EAAOM,CAAC,EACzBJ,EAAOzD,EAAGgE,cAAcT,EAAQG,CAAc,EAC9CC,EAAU3D,EAAGiE,WAAWV,EAAQM,CAAC,EAC7BF,EAAQI,OAAS,EAAG,CAKpB,IAJAL,EAAeb,CAAS,EAAIY,EAAKS,MACjCR,EAAeZ,CAAQ,EAAKW,EAAKU,IAAMV,EAAKS,MAE5CN,EAAI,EACGA,EAAKD,EAAQI,OAAS,GAAMJ,EAAQC,EAAI,CAAC,EAAEM,MAAQR,EAAeQ,QAAU,GAC/EN,IAGJ,MAAMQ,EAAWpE,EAAGgE,cAAcT,EAAQI,EAAQC,CAAC,CAAC,EAChDQ,GAAYA,EAASF,MAAQ,KAC7BP,EAAQI,OAASH,GAGzB,MACIS,EAAcV,EAAQI,OACtBO,GAAeb,EAAKU,IAAMV,EAAKS,OAASG,EAE5C,IAAKT,EAAI,EAAGA,EAAIS,EAAaT,IACzBJ,EAAeG,EAAQC,CAAC,EAAGA,EAAGH,EAAMa,CAAQ,EAEhDT,GAAKQ,EAAc,EAEvB,MAAO,EACX,CACAL,cAAcT,EAAQgB,EAAO,CACzB,KACI,CACIvB,eAAAA,EACAD,gBAAAA,EACAF,UAAAA,EACAC,SAAAA,CACJ,EAAmB,KACnB0B,EAAmB,KAAKC,0BAA0BlB,EAAQgB,CAAK,EACnE,IAAIV,EACJ,GAAIW,EAAiBT,SAAW,EAC5B,MAAO,CACHG,MAAQ,EACRC,IAAQ,GAGhB,IAAKN,EAAI,EAAGA,EAAIW,EAAiBT,OAAQF,IAAK,CAC1C,MACIa,EAAaF,EAAiBX,CAAC,EAC/Bc,EAAa5B,KAAmB2B,EAAO3B,EAAkBF,EACzD+B,EAAa5B,KAAkB0B,EAAO1B,EAAiBF,EAC3D,GAAIe,IAAM,GAAKa,EAAKC,CAAU,EAAI,EAC9B,MAAO,CACHT,MAAQ,EACRC,IAAQO,EAAKC,CAAU,GAI3B,GAAID,EAAKC,CAAU,EAAID,EAAKE,CAAS,GAAKf,EAAIW,EAAiBT,OAAS,EAAIS,EAAiBX,EAAI,CAAC,EAAEc,CAAU,EAAI,GAC9G,MAAO,CACHT,MAAQQ,EAAKC,CAAU,EAAID,EAAKE,CAAS,EACzCT,IAAQN,EAAIW,EAAiBT,OAAS,EAAIS,EAAiBX,EAAI,CAAC,EAAEc,CAAU,EAAI,GAKhG,MAAO,EACX,CACAF,0BAA0BlB,EAAQgB,EAAO,CACrC,MACIL,EAAcK,EAAML,MACpBC,EAAcI,EAAMJ,IACpBU,EAAc,CAAA,EAClB,QAAShB,EAAI,EAAGC,EAAIP,EAAOuB,QAAQP,CAAK,EAAGV,EAAIC,EAAGD,IAAK,CACnD,MAAMa,EAAOnB,EAAOM,CAAC,EACjB,KAAKZ,YAAYyB,EAAMH,CAAK,GAAKQ,EAAWC,eAAed,EAAOC,EAAKO,EAAKR,MAAOQ,EAAKP,GAAG,GAC3FU,EAAYI,KAAKP,CAAI,EAG7BG,OAAAA,EAAYK,KAAK,KAAKC,gBAAgBC,KAAK,IAAI,CAAC,EACzCP,CACX,CACAM,gBAAgBE,EAAIC,EAAI,CACpB,KAAM,CAAEzC,UAAAA,CAAU,EAAI,KACtB,OAAOwC,EAAGxC,CAAS,EAAIyC,EAAGzC,CAAS,CACvC,CACAoB,WAAWV,EAAQgC,EAAY,CAC3B,MACIC,EAAajC,EAAOgC,CAAU,EAC9B/H,EAAa,CAACgI,CAAU,EAC5B,GAAID,GAAchC,EAAOQ,OAAS,EAC9B,OAAOvG,EAEX,GAAI,CAAE0G,MAAAA,EAAOC,IAAAA,CAAI,EAAIqB,EACrB,QAAS3B,EAAI0B,EAAa,EAAGzB,EAAIP,EAAOQ,OAAQF,EAAIC,EAAGD,IAAK,CACxD,MAAMa,EAAOnB,EAAOM,CAAC,EACrB,GAAI,CAAC,KAAKZ,YAAYyB,EAAMc,CAAU,GAAK,CAACT,EAAWC,eAAed,EAAOC,EAAKO,EAAKR,MAAOQ,EAAKP,GAAG,EAClG,MAEJ3G,EAAOyH,KAAKP,CAAI,EAChBR,EAAQa,EAAWU,IAAIvB,EAAOQ,EAAKR,KAAK,EACxCC,EAAQY,EAAWW,IAAIhB,EAAKP,IAAKA,CAAG,EAExC,OAAO3G,CACX,CACJ,ECtIA,MACImI,EAAWC,GAAW,CAACA,GAAUC,MAAMC,QAAQF,CAAM,EAAKA,EAAS,CAACA,CAAM,EAC1EG,EAAaA,CAACC,EAASC,EAAOC,IAAmBF,GAAWA,EAAQC,CAAK,IAAM,GAAQD,EAAQC,CAAK,EAAIC,EAQ5G,IAAAC,EAAevD,GAAM,OAAI,OAAAwD,EAAA,cAA2BxD,GAAUzG,EAAM,CAkEhE,IAAIkK,YAAa,CACb,MAAO,CAAC,KAAKC,IAAI,CACrB,CAOA,IAAIC,aAAc,CACd,MACIvG,EAAK,KACL,CAAEwG,oBAAAA,CAAoB,EAAIxG,EAC9B,OAAOwG,EAAsBxG,EAAGyG,SAASD,EAAqBxG,EAAI,CAACA,CAAE,CAAC,EAAIA,EAAG0G,oBACjF,CACA,IAAIA,sBAAuB,OACvB,MACI1G,EAAK,KACL,CAAEqG,WAAAA,EAAYM,WAAAA,CAAW,EAAI3G,EAC7B4G,GAAoB5G,EAAAA,EAAG4G,oBAAH5G,KAAAA,EAAwB2F,EAAS3F,EAAG6G,wBAAwB,EAChFC,EAAUf,EAAWa,EAAmB,EAAGD,CAAU,EACrDxC,EAAMkC,EAAWtC,OAAS,IAAK6C,GAAAA,KAAiB,OAAjBA,EAAmB7C,QAAS,GACvDgB,EAAWa,OAAOS,EAAW,CAAC,EAAGS,CAAO,IAAM/B,EAAWa,OAAOS,EAAW,CAAC,EAAGS,CAAO,EAG9F,IAAIC,EAAMhC,EAAWa,OAAOS,EAAW,CAAC,EAAGS,CAAO,EAClD,OAAI3C,IAEA4C,EAAMhC,EAAWiC,YAAYX,EACzBN,EAAWa,EAAmB,EAAI,IAAGD,IAAa3G,EAAGiH,iBAAiBN,GAAY,CAAC,GAEpFI,CACX,CACAG,wBAAwBtB,EAAQ,CAC5B,OAAOD,EAASC,CAAM,CAC1B,CACA,IAAIuB,aAAc,CAAA,CACtB,EAtGI1E,EADqB2D,EACd1D,QAAQ,eACfD,EAFqB2D,EAEdgB,eAAe,CAMlBT,WAAa,eAMbM,cAAgB,MAsBhBL,kBAAoB,KAqBpBJ,oBAAsB,OAzDLJ,GCLzBiB,EAAezE,GAAU,cAA8BA,GAAUzG,EAAM,CACnE,WAAWuG,OAAQ,CACf,MAAO,gBACX,CAEA,WAAW0E,cAAe,CACtB,MAAO,CAOHE,sBAAwB,GAOxBC,oBAAsB,GAOtBC,gBAAkB,GAOlBC,2BAA6B,GAErC,CACA,WAAWvK,eAAgB,CACvB,MAAO,CAMHwK,iBAAmB,GAOnBC,uBAAyB,GAQzBC,iBAAmB,uBAOnBC,+BAAiC,GAQjCC,iCAAmC,GAQnCC,wBAA0B,8BAM1BC,mBAAqB,CAAA,EAE7B,CA2CAC,gBAAiB,CAAA,IAAAC,EACb,MAAMD,eAAc,GACpBC,EAAI,KAACC,aAAS,MAAAD,IAAdA,QAAAA,EAAgB9H,IAAI,CAChBgI,SAAW,kBACX3H,QAAW,IACf,CAAC,CACL,CAGA,IAAIuH,mBAAmBA,EAAoB,CACjCA,aAA8BK,IAChCL,EAAqB,IAAIK,EAAWL,CAAkB,GAE1D,KAAKM,oBAAsBN,EAE3BA,EAAmB5H,IAAI,CACnBmI,OAASA,IAAI1K,IAAS,KAAK6B,QAAQ8I,+BAC/B,6BACA,IAAI3K,IAAS,CAAC,KAAK4K,cAAgB,KAAKC,2BAA2B,GAAG7K,CAAI,EAC1EA,CACJ,EAEA8K,aAAe,mCACflI,QAAe,IACnB,CAAC,CACL,CACA,IAAIuH,oBAAqB,CACrB,OAAO,KAAKM,mBAChB,CACAM,cAAcC,EAAWC,EAAUC,EAAY,CAC3C,OAAQF,EAAU9E,OAAS,EACnB+E,EAAS/E,OAAS,GAAKgF,EAAWhF,OAAS,EACzC,SACC+E,EAAS/E,OAAS,EACf,SACA,WACR,OACV,CAGAiF,yBAAyBC,EAAa,CAClC,OAAOC,EAAYC,OAAOF,EAAYG,IAAIC,GAAcA,EAAW9E,KAAK,CAAC,CAC7E,CAMA,IAAI+E,gBAAiB,CACjB,OAAO,KAAKN,yBAAyB,KAAKhB,mBAAmBuB,MAAM,CACvE,CACA,IAAID,eAAe/F,EAAQ,CAAA,IAAAiG,EAEvB,MAAMP,EAAc,CAAA,EACpB1F,EAAS2F,EAAYO,QAAQlG,CAAM,GACnCiG,EAAAjG,KAAMiG,MAAAA,IAANA,QAAAA,EAAQE,QAAQnF,GAAS,CACjB,KAAKoF,kBAAkBpF,CAAK,IAAM,KAC9BA,EAAMqF,aACNrF,EAAM0E,YAAYS,QAAQG,GAAM,CAC5BZ,EAAYhE,KAAK,KAAKzF,gBAAgBsK,cAAcD,EAAItF,CAAK,CAAC,CAClE,CAAC,EAGD0E,EAAYhE,KAAK,GAAGV,EAAM0E,WAAW,EAGjD,CAAC,EAED,KAAKjB,mBAAmB+B,OAAO,EAAG,KAAK/B,mBAAmBgC,MAAOf,CAAW,CAChF,CAMA,IAAIgB,qBAAsB,CACtB,OAAO,KAAKjC,mBAAmBuB,MACnC,CACA,IAAIU,oBAAoBhB,EAAa,CAEjC,KAAKjB,mBAAmB+B,OAAO,EAAG,KAAK/B,mBAAmBgC,MAAOf,GAAe,CAAA,CAAE,CACtF,CAOAiB,gBAAgB3F,EAAO,CACnB,KAAM,CAAEyD,mBAAAA,CAAmB,EAAI,KAC/B,MAAOmC,GAAQnC,EAAmBgC,OAAShC,EAAmBoC,SAAS7F,EAAM0E,WAAW,EAC5F,CA2BAU,kBAAkBpF,EAAO,CAAA,CAOzB8F,qBAAqBhB,EAAY,CAC7B,OAAO,KAAKrB,mBAAmBoC,SAASf,CAAU,CACtD,CAQAiB,OAAOC,EAAmBC,EAAoB,GAAO,CAC7CD,EAAkBE,aAClB,KAAKC,iBAAiBH,EAAmBC,CAAiB,EAG1D,KAAKG,YAAYJ,EAAmBC,CAAiB,CAE7D,CAQAG,YAAYpG,EAAOiG,EAAoB,GAAO,CAGrC,KAAKN,gBAAgB3F,CAAK,GAC3B,KAAKqG,aAAa,CAACrG,CAAK,EAAGiG,CAAiB,CAEpD,CAQAE,iBAAiBrB,EAAYmB,EAAoB,GAAOjG,EAAO,CAGtD,KAAK8F,qBAAqBhB,CAAU,IACrCmB,EAAoB,KAAKxC,mBAAmB6C,IAAIxB,CAAU,EAAI,KAAKY,oBAAsBZ,EAEjG,CAOAyB,SAASP,EAAmB,CACpBA,EAAkBE,aAClB,KAAKM,mBAAmBR,CAAiB,EAGzC,KAAKS,cAAcT,CAAiB,CAE5C,CAMAS,cAAczG,EAAO,CACb,KAAK2F,gBAAgB3F,CAAK,GAC1B,KAAKyD,mBAAmBiD,OAAO,GAAG1G,EAAM0E,WAAW,CAE3D,CAOA8B,mBAAmB1B,EAAY,CACvB,KAAKgB,qBAAqBhB,CAAU,GACpC,KAAKrB,mBAAmBiD,OAAO5B,CAAU,CAEjD,CAOAuB,aAAarH,EAAQiH,EAAoB,GAAO,CAC5C,GAAIA,EAAmB,CACnB,MAAMvB,EAAe1F,EAAO2H,OAAO,CAACjC,EAAa1E,KACzC,KAAKoF,kBAAkBpF,CAAK,IAAM,IAClC0E,EAAYhE,KAAK,GAAGV,EAAM0E,WAAW,EAElCA,GACR,CAAA,CAAE,EACL,KAAKjB,mBAAmB6C,IAAI5B,CAAW,OAGvC,KAAKK,eAAiB/F,CAE9B,CAMA4H,eAAe5H,EAAQ,CACnB,KAAKyE,mBAAmBiD,OAAO1H,EAAO2H,OAAO,CAACjC,EAAa1E,KACvD0E,EAAYhE,KAAK,GAAGV,EAAM0E,WAAW,EAC9BA,GACR,CAAA,CAAE,CAAC,CACV,CAMAmC,kBAAkBnC,EAAa,CAC3B,KAAKjB,mBAAmB6C,IAAI5B,CAAW,CAC3C,CAMAoC,oBAAoBpC,EAAa,CAC7B,KAAKjB,mBAAmBiD,OAAOhC,CAAW,CAC9C,CAKAqC,qBAAsB,CAClB,KAAKrB,oBAAsB,CAAA,CAC/B,CAQAsB,iCAAiC,CAAEC,MAAAA,EAAOC,SAAAA,EAAUxF,MAAAA,CAAM,EAAG,CACzD,MACIjG,EAAK,KACL6I,EAAY7I,EAAGsI,oBAAoBiB,OACnCT,EAAW0C,EACXzC,EAAa0C,EAAW,EAAI3C,EAAS4C,MAAMzF,EAAOwF,EAAWxF,CAAK,EAAI,CAAA,EACtE0F,EAAS3L,EAAG4I,cAAcC,EAAWC,EAAUC,CAAU,EAS7D,GARI/I,EAAG4L,QAAQ,6BAA8B,CACzCD,OAAAA,EACA9C,UAAa7I,EAAGgJ,yBAAyBH,CAAS,GAAK,CAAA,EACvDC,SAAa9I,EAAGgJ,yBAAyBF,CAAQ,GAAK,CAAA,EACtDC,WAAa/I,EAAGgJ,yBAAyBD,CAAU,GAAK,CAAA,EAC3D,IAAM,IAGH/I,EAAG4L,QAAQ,kCAAmC,CAC9CD,OAAAA,EACA9C,UAAAA,EACAC,SAAAA,EACAC,WAAAA,EACH,IAAM,GACH,MAAO,EAEf,CACAL,2BAA2B,CAAEmD,MAAAA,EAAOC,QAAAA,CAAQ,EAAG,CAC3C,MACI9L,EAAa,KACb6I,EAAa7I,EAAGiK,oBAChBnB,EAAa+C,GAAS,CAAA,EACtB9C,EAAa+C,GAAW,CAAA,EAC5B,SAASC,EAAgBC,EAAkB1B,EAAQ,CAC/C,MAAM2B,EAAiBD,EAAiBzH,MACxC,GAAI0H,EAAa,CACb,KACI,CAAElE,wBAAAA,CAAwB,EAAI/H,EAC9BkM,EAA8BlM,EAAGmM,+BAA+BH,CAAgB,EACpFhM,EAAGoM,mBAAmBC,UAAUL,EAAkBhM,EAAG4H,iBAAkB0C,CAAM,EAC7EvC,GAA2B/H,EAAGsM,2BAA2BL,CAAW,EAAEvC,QAAQ6C,GAAM,CAChF,GAAIA,IAAOL,EAAS,CAChB,MAAMM,EAAwBxM,EAAGyM,wBAAwBF,CAAE,EAC3DvM,EAAGoM,mBAAmBC,UAAUG,EAAuBzE,EAAyBuC,CAAM,EAClFA,IAEAiC,EAAGG,MAAMC,UAAY,OACrBJ,EAAGK,aACHL,EAAGG,MAAMC,UAAY,IAEzBJ,EAAGM,UAAUC,OAAO/E,EAAyBuC,CAAM,EAE3D,CAAC,EAET,CAYA,GAXAvB,EAAWW,QAAQqD,GAAUhB,EAAgBgB,EAAQ,EAAK,CAAC,EAC3DjE,EAASY,QAAQqD,GAAUhB,EAAgBgB,EAAQ,EAAI,CAAC,GACpD/M,EAAGuH,qBAAuBvH,EAAGsH,wBAC7BtH,EAAGgN,sBAAsBhN,EAAGsJ,cAAc,EAI9CtJ,EAAGiN,qBAAuBpE,EAAUO,IAAIC,IAAe,CACnD6D,QAAa7D,EAAW6D,QACxBC,WAAa9D,EAAW8D,UAC5B,EAAE,EACE,CAACnN,EAAGoN,OAAQ,CACZ,MAAMzB,EAAS,KAAK/C,cAAcC,EAAWC,EAAUC,CAAU,EACjE/I,EAAG4L,QAAQ,4BAA6B,CACpCD,OAAAA,EACA9C,UAAAA,EACAC,SAAAA,EACAC,WAAAA,CACJ,CAAC,EACD/I,EAAG4L,QAAQ,uBAAwB,CAC/BD,OAAAA,EACA9C,UAAa7I,EAAGsJ,eAChBR,SAAa9I,EAAGgJ,yBAAyBF,CAAQ,EACjDC,WAAa/I,EAAGgJ,yBAAyBD,CAAU,CACvD,CAAC,EAET,CAKAsE,mBAAmB9I,EAAO,CACtB,MAAM8I,mBAAmB9I,CAAK,EAC9B,MACIvE,EAAK,KACL,CAAE2L,OAAAA,EAAQ2B,QAAUrE,CAAY,EAAI1E,EAExC,GADAvE,EAAGoN,OAAS,CAACpN,EAAG6H,+BACZ8D,IAAW,SACX3L,EAAGqL,oBAAoBpC,CAAW,UAE7B0C,IAAW,aAAe,CAAC3L,EAAGT,WAAWgO,cAC9CvN,EAAGsL,oBAAmB,UAEjBK,IAAW,WAAa3L,EAAGiN,qBAChC,GAAI,CAACjN,EAAG8H,iCACJ9H,EAAGsL,oBAAmB,MAErB,CACD,MAAMkC,EAAiBxN,EAAGiN,qBAAqB7D,IAAIqE,GAC/CxE,EAAYyE,KAAKxK,GACbA,EAAEgK,UAAYO,EAASP,SACvBhK,EAAEiK,aAAeM,EAASN,UAC9B,CACJ,EACAnN,EAAGiK,oBAAsBf,EAAYyE,MAAMH,CAAc,EAGjExN,EAAGoN,OAAS,EAChB,CACAQ,2BAA2B,CAAEC,OAAAA,EAAQlC,OAAAA,EAAQ2B,QAAAA,CAAQ,EAAG,CAEhD,CAACO,EAAOC,0BAA4BnC,IAAW,WAAa,CAAC2B,EAAQvJ,QACrE,KAAKuH,oBAAmB,EAE5B,MAAMsC,2BAA2B,GAAGG,SAAS,CACjD,CAKAC,2BAA2BzJ,EAAO0J,EAAe,CAC7C,MAAMjO,EAAK,KAGPA,EAAGqK,qBAAqB4D,CAAa,GACjCjO,EAAGwH,iBAAmBjD,EAAM2J,UAC5BlO,EAAG+K,mBAAmBkD,EAAejO,EAAG0H,iBAAkBnD,CAAK,EAG9D,KAAKoF,kBAAkBsE,EAAc1J,KAAK,IAAM,IACrDvE,EAAG0K,iBAAiBuD,EAAe1J,EAAM2J,SAAWlO,EAAG0H,iBAAkBnD,CAAK,CAEtF,CAKA4J,gBAAgB,CAAE5J,MAAAA,EAAOG,KAAAA,CAAK,EAAG,CAC7B,GAAI,CAAC,KAAKiD,uBAAwB,CAC9B,MAAM0B,EAAa3E,IAASA,EAAK0J,WAAaC,QAAQC,aAAe,KAAK7B,wBAAwB/H,CAAI,EAAIA,GACtG2E,EACA,KAAK2E,2BAA2BzJ,EAAO8E,CAAU,EAG5C,KAAK5B,4BACV,KAAK6D,oBAAmB,EAGpC,CACAiD,0BAA0B/R,EAAO,CAC7B,OAAO,KAAKgS,mBAAmBhS,CAAK,CACxC,CACAiS,4BAA4BjS,EAAO,CAC/B,OAAO,KAAKgS,mBAAmBhS,CAAK,CACxC,CACAgS,mBAAmBhS,EAAO,CACtB,MAAMwD,EAAK,KACX,OAAIxD,GACAwD,EAAG0O,YAAc1O,EAAG0O,aAAe,IAAIC,IACvC3O,EAAGgN,sBAAsBhN,EAAGsJ,cAAc,GAErCtJ,EAAG0O,aACR1O,EAAGgN,sBAAqB,EAErBxQ,CACX,CAEAwQ,sBAAsB4B,EAAe,CAAA,EAAI,CACrC,MACI5O,EAAsB,KACtB,CACI0O,YAAAA,EACAnP,WAAAA,CACJ,EAAsBS,EACtB6O,EAAsB7O,EAAG8O,SAASC,aAEtCL,EAAYhF,QAAQuC,GAAe,CAC1B2C,EAAaxE,SAAS6B,CAAW,IAClCA,EAAY+C,KAAKC,UAAY,GAC7BP,EAAYQ,OAAOjD,CAAW,EAC1B1M,EAAW6K,SAAS6B,CAAW,GAC/BA,EAAY8C,aAAarF,QAAQyF,GAAON,EAAoBO,YAAYD,EAAK,aAAa,CAAC,EAGvG,CAAC,EACDP,EAAalF,QAAQuC,GAAe,CAChC,MAAMoD,EAAS,CAACpD,CAAW,EAE3B,KAAOoD,EAAOtL,QAAQ,CAClB,MAAMgJ,EAASsC,EAAOC,IAAG,EACzBZ,EAAY7D,IAAIkC,CAAM,EAClB/M,EAAGuH,qBACHwF,EAAOwC,aAAa7F,QAAQ8F,GAAY,CACpCX,EAAoBI,UAAUO,EAAU,aAAa,EACrD,CAACd,EAAYe,IAAID,EAASE,OAAO,GAAKL,EAAOpK,KAAKuK,EAASE,OAAO,CACtE,CAAC,EAED1P,EAAGsH,uBACHyF,EAAO4C,aAAajG,QAAQkG,GAAY,CACpCf,EAAoBI,UAAUW,EAAU,aAAa,EACrD,CAAClB,EAAYe,IAAIG,EAASC,SAAS,GAAKR,EAAOpK,KAAK2K,EAASC,SAAS,CAC1E,CAAC,EAITnB,EAAYhF,QAAQqD,GAAUA,EAAOiC,KAAKC,UAAY,EAAI,CAC9D,CAAC,EAEDjP,EAAGkM,QAAQW,UAAUC,OAAO,iBAAkB8B,EAAa7K,OAAS,CAAC,EACrE/D,EAAG8P,sBAAqB,CAC5B,CACAC,qBAAqBC,EAAY,EACzB,KAAKzI,qBAAuB,KAAKD,yBACjC0I,EAAWC,IAAI,aAAa,EAAID,EAAW/D,YAAY+C,KAAKC,WAEhE,MAAMc,qBAAqBC,CAAU,CACzC,CACAE,cAAcxQ,EAASyQ,EAAK,CAExB,KAAK7E,oBAAmB,EACxB,MAAM4E,cAAcxQ,EAASyQ,CAAG,CACpC,CAEAC,WAAY,CAAA,IAAAC,GACRA,EAAI,KAAC/H,uBAAmB,MAAA+H,IAAA,QAAxBA,EAA0BC,QAAO,EACjC,MAAMF,UAAS,CACnB,CAKA,IAAIjJ,aAAc,CAAA,CAEtB",
  "names": ["AbstractCrudManager", "Base", "mixin", "AbstractCrudManagerMixin", "revision", "crudRevision", "value", "json", "StringHelper", "safeJsonStringify", "safeJsonParse", "forEachCrudStore", "store", "dataName", "storeId", "data", "defaultConfig", "stores", "construct", "config", "crudStores", "toJSON", "result", "inlineData", "isLoading", "isCrudManagerLoading", "addStore", "args", "addCrudStore", "removeStore", "removeCrudStore", "getStore", "getCrudStore", "hasChanges", "crudStoreHasChanges", "loadData", "loadCrudManagerData", "_$name", "CrudManager", "ProjectCrudManager", "AjaxTransport", "JsonEncoder", "projectClass", "ProjectModel", "resourceStoreClass", "ResourceStore", "eventStoreClass", "EventStore", "assignmentStoreClass", "AssignmentStore", "dependencyStoreClass", "DependencyStore", "resourceStore", "eventStore", "assignmentStore", "dependencyStore", "project", "buildProject", "buildProjectConfig", "ObjectHelper", "cleanupProperties", "resourceTimeRangeStore", "me", "_project", "detachListeners", "timeRangeStore", "ion", "name", "dataReady", "suspendChangesTracking", "prio", "thisObj", "resumeChangesTracking", "_this$_timeRangeStore", "_timeRangeStore", "_this$project", "setFeaturedStore", "timeRangeStoreClass", "_this$_resourceTimeRa", "_resourceTimeRangeStore", "_this$project2", "resourceTimeRangeStoreClass", "_this$_resourceStore", "_resourceStore", "_this$_eventStore", "_eventStore", "_this$_assignmentStor", "_assignmentStore", "_this$_dependencyStor", "_dependencyStore", "property", "storeClass", "_me$property", "oldStore", "_store", "Store", "addPrioritizedStore", "getChangesetPackage", "pack", "usesSingleAssignment", "some", "storeInfo", "crudLoadValidationMandatoryStores", "__publicField", "$name", "PackMixin", "Target", "coordProp", "sizeProp", "inBandCoordProp", "inBandSizeProp", "isSameGroup", "a", "b", "grouped", "group", "packEventsInBands", "events", "applyClusterFn", "slot", "firstInCluster", "cluster", "j", "i", "l", "length", "findStartSlot", "getCluster", "start", "end", "nextSlot", "clusterSize", "slotSize", "event", "priorOverlappers", "getPriorOverlappingEvents", "item", "COORD_PROP", "SIZE_PROP", "overlappers", "indexOf", "DateHelper", "intersectSpans", "push", "sort", "sortOverlappers", "bind", "e1", "e2", "startIndex", "startEvent", "max", "min", "arrayify", "format", "Array", "isArray", "pickFormat", "formats", "index", "defaultFormat", "Describable", "_a", "dateBounds", "date", "description", "descriptionRenderer", "callback", "formattedDescription", "dateFormat", "descriptionFormat", "defaultDescriptionFormat", "format0", "ret", "formatRange", "dateSeparator", "changeDescriptionFormat", "widgetClass", "configurable", "SchedulerEventSelection", "highlightPredecessors", "highlightSuccessors", "deselectOnClick", "deselectAllOnScheduleClick", "multiEventSelect", "eventSelectionDisabled", "eventSelectedCls", "triggerSelectionChangeOnRemove", "maintainSelectionOnDatasetChange", "eventAssignHighlightCls", "selectedCollection", "afterConstruct", "_this$navigator", "navigator", "navigate", "Collection", "_selectedCollection", "change", "deferUntilRepopulationIfNeeded", "isDestroying", "onSelectedCollectionChange", "beforeSplice", "getActionType", "selection", "selected", "deselected", "getEventsFromAssignments", "assignments", "ArrayHelper", "unique", "map", "assignment", "selectedEvents", "values", "_events", "asArray", "forEach", "isEventSelectable", "isOccurrence", "as", "getOccurrence", "splice", "count", "selectedAssignments", "isEventSelected", "Boolean", "includes", "isAssignmentSelected", "select", "eventOrAssignment", "preserveSelection", "isAssignment", "selectAssignment", "selectEvent", "selectEvents", "add", "deselect", "deselectAssignment", "deselectEvent", "remove", "reduce", "deselectEvents", "selectAssignments", "deselectAssignments", "clearEventSelection", "onBeforeSelectedCollectionSplice", "toAdd", "toRemove", "slice", "action", "trigger", "added", "removed", "updateSelection", "assignmentRecord", "eventRecord", "element", "getElementFromAssignmentRecord", "currentOrientation", "toggleCls", "getElementsFromEventRecord", "el", "otherAssignmentRecord", "resolveAssignmentRecord", "style", "animation", "offsetHeight", "classList", "toggle", "record", "highlightLinkedEvents", "$selectedAssignments", "eventId", "resourceId", "silent", "onAssignmentChange", "records", "isSettingData", "newAssignments", "selector", "find", "clean", "onInternalEventStoreChange", "source", "isResourceTimeRangeStore", "arguments", "onAssignmentSelectionClick", "clickedRecord", "ctrlKey", "onEventNavigate", "nodeType", "Element", "ELEMENT_NODE", "changeHighlightSuccessors", "changeLinkedEvents", "changeHighlightPredecessors", "highlighted", "Set", "eventRecords", "dependenciesFeature", "features", "dependencies", "meta", "highlight", "delete", "dep", "unhighlight", "toWalk", "pop", "outgoingDeps", "outgoing", "has", "toEvent", "incomingDeps", "incoming", "fromEvent", "refreshWithTransition", "onEventDataGenerated", "renderData", "cls", "updateProject", "old", "doDestroy", "_this$_selectedCollec", "destroy"]
}
