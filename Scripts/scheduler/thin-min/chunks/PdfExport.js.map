{
  "version": 3,
  "sources": ["../../../../Grid/lib/Grid/feature/mixin/SummaryFormatter.js", "../../../../Grid/lib/Grid/feature/Summary.js", "../../../../Grid/lib/Grid/view/export/field/ExportRowsCombo.js", "../../../../Grid/lib/Grid/view/export/field/ExportOrientationCombo.js", "../../../../Grid/lib/Grid/view/export/ExportDialog.js", "../../../../Grid/lib/Grid/feature/export/exporter/MultiPageExporter.js", "../../../../Grid/lib/Grid/feature/export/exporter/MultiPageVerticalExporter.js", "../../../../Grid/lib/Grid/feature/export/exporter/SinglePageExporter.js", "../../../../Grid/lib/Grid/feature/export/PdfExport.js"],
  "sourcesContent": ["import Base from '../../../Core/Base.js';\n\n/**\n * @module Grid/feature/mixin/SummaryFormatter\n */\n\n/**\n * Mixin for Summary and GroupSummary that handles formatting sums.\n * @mixin\n * @private\n */\nexport default Target => class SummaryFormatter extends (Target || Base) {\n    static get $name() {\n        return 'SummaryFormatter';\n    }\n\n    /**\n     * Calculates sums and returns as a html table\n     * @param {Grid.column.Column} column Column to calculate sum for\n     * @param {Core.data.Model[]} records Records to include in calculation\n     * @param {String} cls CSS class to apply to summary table\n     * @param {Core.data.Model} groupRecord current group row record\n     * @param {String} groupField Current groups field name\n     * @param {String} groupValue Current groups value\n     * @returns {String} html content\n     */\n    generateHtml(column, records, cls, groupRecord, groupField, groupValue) {\n        const\n            store = this.store,\n            summaries = column.summaries ||\n                  (column.sum ? [{ sum : column.sum, renderer : column.summaryRenderer }] : []);\n\n        let html = `<table class=\"${cls}\">`;\n\n        summaries.forEach(config => {\n            let type = config.sum,\n                sum  = null;\n\n            if (type === true) type = 'sum';\n\n            switch (type) {\n                case 'sum':\n                case 'add':\n                    sum = store.sum(column.field, records);\n                    break;\n                case 'max':\n                    sum = store.max(column.field, records);\n                    break;\n                case 'min':\n                    sum = store.min(column.field, records);\n                    break;\n                case 'average':\n                case 'avg':\n                    sum = store.average(column.field, records);\n                    break;\n                case 'count':\n                    sum = records.length;\n                    break;\n                case 'countNotEmpty':\n                    sum = records.reduce((sum, record) => {\n                        const value = record[column.field];\n                        return sum + (value != null ? 1 : 0);\n                    }, 0);\n                    break;\n            }\n\n            if (typeof type === 'function') {\n                sum = records.reduce(type, 'seed' in config ? config.seed : 0);\n            }\n\n            if (sum !== null) {\n                const\n                    valueCls  = 'b-grid-summary-value',\n                    // optional label\n                    labelHtml = config.label\n                        ? `<td class=\"b-grid-summary-label\">${config.label}</td>`\n                        : '';\n\n                // value to display, either using renderer or as is\n                let valueHtml = config.renderer\n                        ? config.renderer({ config, sum })\n                        : sum,\n                    summaryHtml;\n\n                if (valueHtml == null) {\n                    valueHtml = '';\n                }\n\n                // no <td>s in html, wrap it (always the case when not using renderer)\n                if (!String(valueHtml).includes('<td>')) {\n                    summaryHtml = labelHtml\n                        // has label, use returned html as value cell\n                        ? `${labelHtml}<td class=\"${valueCls}\">${valueHtml}</td>`\n                        // no label, span entire table\n                        : `<td colspan=\"2\" class=\"${valueCls}\">${valueHtml}</td>`;\n                }\n                // user is in charge of giving correct formatting\n                else {\n                    summaryHtml = valueHtml;\n                }\n\n                html += `<tr>${summaryHtml}</tr>`;\n            }\n        });\n\n        return html + '</table>';\n    }\n};\n", "import DomHelper from '../../Core/helper/DomHelper.js';\nimport InstancePlugin from '../../Core/mixin/InstancePlugin.js';\nimport GridFeatureManager from '../feature/GridFeatureManager.js';\nimport SummaryFormatter from './mixin/SummaryFormatter.js';\n\n/**\n * @module Grid/feature/Summary\n */\n\n/**\n * @typedef {Object} ColumnSummaryConfig\n * @property {'sum'|'add'|'count'|'countNotEmpty'|'average'|Function} sum Summary type, see\n * {@link Grid/column/Column#config-sum} for details\n * @property {Function} renderer Renderer function for summary, see\n * {@link Grid/column/Column#config-summaryRenderer} for details\n * @property {*} seed Initial value when using a function as `sum`\n */\n\n/**\n * Displays a summary row in the grid footer.\n *\n * {@inlineexample Grid/feature/Summary.js}\n *\n * Specify type of summary on columns, available types are:\n * <dl class=\"wide\">\n * <dt>sum <dd>Sum of all values in the column\n * <dt>add <dd>Alias for sum\n * <dt>count <dd>Number of rows\n * <dt>countNotEmpty <dd>Number of rows containing a value\n * <dt>average <dd>Average of all values in the column\n * <dt>function <dd>A custom function, used with store.reduce. Should take arguments (sum, record)\n * </dl>\n * Columns can also specify a summaryRenderer to format the calculated sum.\n *\n * This feature is <strong>disabled</strong> by default.\n *\n * ```javascript\n * { text : 'Score', data : 'score', width : 80, sum : true }\n * { text : 'Rank', data : 'rank', width : 80, sum : 'average', summaryRenderer: ({ sum }) => return 'Average rank ' + sum }\n * ```\n *\n * Also, it is possible to set up multiple summaries as array of summary configs:\n * ```javascript\n * { text : 'Rank', data : 'rank', summaries : [{ sum : 'average', label : 'Average' }, { sum : 'count', label : 'Count' }] }\n * ```\n *\n * @extends Core/mixin/InstancePlugin\n * @demo Grid/features\n * @classtype summary\n * @feature\n */\nexport default class Summary extends SummaryFormatter(InstancePlugin) {\n    //region Config\n    static get configurable() {\n        return {\n            /**\n             * Set to `true` to sum values of selected row records\n             * @config {Boolean}\n             */\n            selectedOnly : null,\n\n            hideFooters : false\n        };\n    }\n\n    // Plugin configuration. This plugin chains some of the functions in Grid.\n    static get pluginConfig() {\n        return {\n            chain : ['renderRows', 'bindStore']\n        };\n    }\n\n    //endregion\n\n    //region Init\n\n    static get $name() {\n        return 'Summary';\n    }\n\n    construct(grid, config) {\n        this.grid = grid;\n\n        super.construct(grid, config);\n\n        this.bindStore(grid.store);\n\n        grid.hideFooters = this.hideFooters;\n    }\n\n    bindStore(store) {\n        this.detachListeners('store');\n\n        store.ion({\n            name    : 'store',\n            change  : 'onStoreChange',\n            thisObj : this\n        });\n    }\n\n    get store() {\n        return this.grid.store;\n    }\n\n    doDestroy() {\n        super.doDestroy();\n    }\n\n    doDisable(disable) {\n        super.doDisable(disable);\n\n        const { client } = this;\n\n        if (disable) {\n            client.element.classList.add('b-summary-disabled');\n        }\n        else {\n            this.updateSummaries();\n            client.element.classList.remove('b-summary-disabled');\n            client.eachSubGrid(subGrid => subGrid.scrollable.syncPartners());\n        }\n    }\n\n    //endregion\n\n    //region Render\n\n    renderRows() {\n        this.updateSummaries();\n    }\n\n    /**\n     * Updates summaries. Summaries are displayed as tables in footer (styling left out to keep brief):\n     * ```\n     * <table>\n     *     <tr><td colspan=\"2\">0</td></tr> // { sum : 'min' } Only a calculation, span entire table\n     *     <tr><td>Max</td><td>10</td></tr> // { sum : 'max', label: 'Max' } Label + calculation\n     *     <tr><td>Max</td><td>10</td></tr> // { sum : 'sum', label: 'Max' } Label + calculation\n     * </table>\n     * ```\n     * @private\n     */\n    updateSummaries() {\n        const\n            me              = this,\n            { grid, store } = me,\n            cells           = DomHelper.children(grid.element, '.b-grid-footer'),\n            selectedOnly    = me.selectedOnly && grid.selectedRecords.length > 0,\n            records         = (store.isFiltered ? store.storage.values : store.allRecords).filter(r => !r.isSpecialRow && (!selectedOnly || grid.isSelected(r)));\n\n        // reset seeds, to not have ever increasing sums :)\n        grid.columns.forEach(column => {\n            column.summaries?.forEach(config => {\n                if ('seed' in config) {\n                    if (!('initialSeed' in config)) {\n                        config.initialSeed = config.seed;\n                    }\n\n                    if (['number', 'string', 'date'].includes(typeof config.initialSeed)) {\n                        config.seed = config.initialSeed;\n                    }\n                    else {\n                        // create shallow copy\n                        config.seed = Object.assign({}, config.initialSeed);\n                    }\n                }\n            });\n        });\n\n        cells.forEach(cellElement => {\n            // Skip for special columns like checkbox selection\n            if (!cellElement.dataset.column) {\n                return;\n            }\n\n            const\n                column = grid.columns.get(cellElement.dataset.column),\n                html   = me.generateHtml(column, records, 'b-grid-footer-summary');\n\n            if (column.summaries ? column.summaries.length : column.sum ? 1 : 0) {\n                // First time, set table\n                if (!cellElement.children.length) {\n                    cellElement.innerHTML = html;\n                }\n                // Following times, sync changes\n                else {\n                    DomHelper.sync(html, cellElement.firstElementChild);\n                }\n            }\n        });\n    }\n\n    //endregion\n\n    //region Events\n\n    /**\n     * Updates summaries on store changes (except record update, handled below)\n     * @private\n     */\n    onStoreChange({ action, changes }) {\n        let shouldUpdate = true;\n\n        if (this.disabled) {\n            return;\n        }\n\n        if (action === 'update') {\n            // only update summary when a field that affects summary is changed\n            // <remove-on-release>\n            // TODO: this should maybe be removed, another column might depend on the value for its summary?\n            // </remove-on-release>\n            shouldUpdate = Object.keys(changes).some(field => {\n                const colField = this.grid.columns.get(field);\n                // check existence, since a field not used in a column might have changed\n                return Boolean(colField) && (Boolean(colField.sum) || Boolean(colField.summaries));\n            });\n        }\n\n        if (shouldUpdate) {\n            this.updateSummaries();\n        }\n    }\n\n    //endregion\n\n    updateSelectedOnly(value) {\n        const me = this;\n        me.detachListeners('selectionChange');\n\n        if (value) {\n            me.grid.ion({\n                name            : 'selectionChange',\n                selectionChange : me.refresh,\n                thisObj         : me\n            });\n        }\n        me.refresh();\n    }\n\n    /**\n     * Refreshes the summaries\n     */\n    refresh() {\n        this.updateSummaries();\n    }\n}\n\nSummary.featureClass = 'b-summary';\n\nGridFeatureManager.registerFeature(Summary);\n", "import { RowsRange } from '../../../feature/export/Utils.js';\nimport Combo from '../../../../Core/widget/Combo.js';\n\nexport default class ExportRowsCombo extends Combo {\n\n    //region Config\n\n    static get $name() {\n        return 'ExportRowsCombo';\n    }\n\n    // Factoryable type name\n    static get type() {\n        return 'exportrowscombo';\n    }\n\n    static get defaultConfig() {\n        return {\n            editable : false\n        };\n    }\n\n    //endregion\n\n    buildItems() {\n        const me = this;\n\n        return [\n            { id : RowsRange.all, text : me.L('L{all}') },\n            { id : RowsRange.visible, text : me.L('L{visible}') }\n        ];\n    }\n}\n\n// Register this widget type with its Factory\nExportRowsCombo.initClass();\n", "import { Orientation } from '../../../feature/export/Utils.js';\nimport Combo from '../../../../Core/widget/Combo.js';\n\nexport default class ExportOrientationCombo extends Combo {\n\n    //region Config\n\n    static get $name() {\n        return 'ExportOrientationCombo';\n    }\n\n    // Factoryable type name\n    static get type() {\n        return 'exportorientationcombo';\n    }\n\n    static get defaultConfig() {\n        return {\n            editable : false\n        };\n    }\n\n    //endregion\n\n    buildItems() {\n        const me = this;\n\n        return [\n            { id : Orientation.portrait, text : me.L('L{portrait}') },\n            { id : Orientation.landscape, text : me.L('L{landscape}') }\n        ];\n    }\n}\n\n// Register this widget type with its Factory\nExportOrientationCombo.initClass();\n", "import Popup from '../../../Core/widget/Popup.js';\nimport LocaleManager from '../../../Core/localization/LocaleManager.js';\nimport './field/ExportRowsCombo.js';\nimport './field/ExportOrientationCombo.js';\nimport { FileFormat, PaperFormat } from '../../feature/export/Utils.js';\nimport Checkbox from '../../../Core/widget/Checkbox.js';\nimport Field from '../../../Core/widget/Field.js';\n\nfunction buildComboItems(obj, fn = x => x) {\n    return Object.keys(obj).map(key => ({ id : key, text : fn(key) }));\n}\n\n/**\n * @module Grid/view/export/ExportDialog\n */\n\n/**\n * Dialog window used by the {@link Grid/feature/export/PdfExport PDF export feature}. It allows users to select export\n * options like paper format and columns to export. This dialog contains a number of predefined\n * {@link Core/widget/Field fields} which you can access through the popup's {@link #property-widgetMap}.\n *\n * ## Default widgets\n *\n * The default widgets of this dialog are:\n *\n * | Widget ref             | Type                         | Weight | Description                                          |\n * |------------------------|------------------------------|--------|----------------------------------------------------- |\n * | `columnsField`         | {@link Core/widget/Combo}    | 100    | Choose columns to export                             |\n * | `rowsRangeField`       | {@link Core/widget/Combo}    | 200    | Choose which rows to export                          |\n * | `exporterTypeField`    | {@link Core/widget/Combo}    | 300    | Type of the exporter to use                          |\n * | `alignRowsField`       | {@link Core/widget/Checkbox} | 400    | Align row top to the page top on every exported page |\n * | `repeatHeaderField`    | {@link Core/widget/Checkbox} | 500    | Toggle repeating headers on / off                    |\n * | `fileFormatField`      | {@link Core/widget/Combo}    | 600    | Choose file format                                   |\n * | `paperFormatField`     | {@link Core/widget/Combo}    | 700    | Choose paper format                                  |\n * | `orientationField`     | {@link Core/widget/Combo}    | 800    | Choose orientation                                   |\n *\n * The default buttons are:\n *\n * | Widget ref             | Type                       | Weight | Description                                          |\n * |------------------------|----------------------------|--------|------------------------------------------------------|\n * | `exportButton`         | {@link Core/widget/Button} | 100    | Triggers export                                      |\n * | `cancelButton`         | {@link Core/widget/Button} | 200    | Cancel export                                        |\n *\n * Bottom buttons may be customized using `bbar` config passed to `exportDialog`:\n *\n * ```javascript\n * const grid = new Grid({\n *     features : {\n *         pdfExport : {\n *             editorConfig : {\n *                 bbar : {\n *                     items : {\n *                         exportButton : { text : 'Go!' }\n *                     }\n *                 }\n *             }\n *         }\n *     }\n * });\n * ```\n * ## Configuring default widgets\n *\n * Widgets can be customized with {@link Grid/feature/export/PdfExport#config-exportDialog} config:\n *\n * ```javascript\n * const grid = new Grid({\n *     features : {\n *         pdfExport : {\n *             exportDialog : {\n *                 items : {\n *                     // hide the field\n *                     orientationField  : { hidden : true },\n *\n *                     // reorder fields\n *                     exporterTypeField : { weight : 150 },\n *\n *                     // change default format in exporter\n *                     fileFormatField   : { value : 'png' }\n *                 }\n *             }\n *         }\n *     }\n * });\n *\n * grid.features.pdfExport.showExportDialog();\n * ```\n *\n * ## Configuring default columns\n *\n * By default all visible columns are selected in the export dialog. This is managed by the\n * {@link #config-autoSelectVisibleColumns} config. To change default selected columns you should disable this config\n * and set field value. Value should be an array of valid column ids (or column instances). This way you can\n * preselect hidden columns:\n *\n * ```javascript\n * const grid = new Grid({\n *     columns : [\n *         { id : 'name', text : 'Name', field : 'name' },\n *         { id : 'age', text : 'Age', field : 'age' },\n *         { id : 'city', text : 'City', field : 'city', hidden : true }\n *     ],\n *     features : {\n *         pdfExport : {\n *             exportDialog : {\n *                 autoSelectVisibleColumns : false,\n *                 items : {\n *                     columnsField : { value : ['name', 'city'] }\n *                 }\n *             }\n *         }\n *     }\n * })\n *\n * // This will show export dialog with Name and City columns selected\n * // even though City column is hidden in the UI\n * grid.features.pdfExport.showExportDialog();\n * ```\n *\n * ## Adding fields\n *\n * You can add your own fields to the export dialog. To make such field value acessible to the feature it should follow\n * a specific naming pattern - it should have `ref` config ending with `Field`, see other fields for reference -\n * `orientationField`, `columnsField`, etc. Fields not matching this pattern are ignored. When values are collected from\n * the dialog, `Field` part of the widget reference is removed, so `orientationField` becomes `orientation`, `fooField`\n * becomes `foo`, etc.\n *\n * ```javascript\n * const grid = new Grid({\n *     features : {\n *         pdfExport : {\n *             exportDialog : {\n *                 items : {\n *                     // This field gets into export config\n *                     fooField : {\n *                         type : 'text',\n *                         label : 'Foo',\n *                         value : 'FOO'\n *                     },\n *\n *                     // This one does not, because name doesn't end with `Field`\n *                     bar : {\n *                         type : 'text',\n *                         label : 'Bar',\n *                         value : 'BAR'\n *                     },\n *\n *                     // Add a container widget to wrap some fields together\n *                     myContainer : {\n *                         type : 'container',\n *                         items : {\n *                             // This one gets into config too despite the nesting level\n *                             bazField : {\n *                                 type : 'text',\n *                                 label : 'Baz',\n *                                 value : 'BAZ'\n *                             }\n *                         }\n *                     }\n *                 }\n *             }\n *         }\n *     }\n * });\n *\n * // Assuming export dialog is opened and export triggered with default values\n * // you can receive custom field values here\n * grid.on({\n *     beforePdfExport({ config }) {\n *         console.log(config.foo) // 'FOO'\n *         console.log(config.bar) // undefined\n *         console.log(config.baz) // 'BAZ'\n *     }\n * });\n * ```\n *\n * ## Configuring widgets at runtime\n *\n * If you don't know column ids before grid instantiation or you want a flexible config, you can change widget values\n * before dialog pops up:\n *\n * ```javascript\n * const grid = new Grid({\n *     columns : [\n *         { id : 'name', text : 'Name', field : 'name' },\n *         { id : 'age', text : 'Age', field : 'age' },\n *         { id : 'city', text : 'City', field : 'city', hidden : true }\n *     ],\n *     features : {\n *         pdfExport : true\n *     }\n * });\n *\n * // Such listener would ignore autoSelectVisibleColumns config. Similar to the snippet\n * // above this will show Name and City columns\n * grid.features.pdfExport.exportDialog.on({\n *     beforeShow() {\n *         this.widgetMap.columnsField.value = ['age', 'city']\n *     }\n * });\n * ```\n *\n * @extends Core/widget/Popup\n */\nexport default class ExportDialog extends Popup {\n\n    //region Config\n\n    static get $name() {\n        return 'ExportDialog';\n    }\n\n    static get type() {\n        return 'exportdialog';\n    }\n\n    static get configurable() {\n        return {\n            autoShow  : false,\n            autoClose : false,\n            closable  : true,\n            centered  : true,\n\n            /**\n             * Returns map of values of dialog fields.\n             * @member {Object<String,Object>} values\n             * @readonly\n             */\n\n            /**\n             * Grid instance to build export dialog for\n             * @config {Grid.view.Grid}\n             */\n            client : null,\n\n            /**\n             * Set to `false` to not preselect all visible columns when the dialog is shown\n             * @config {Boolean}\n             */\n            autoSelectVisibleColumns : true,\n\n            /**\n             * Set to `false` to allow using PNG + Multipage config in export dialog\n             * @config {Boolean}\n             */\n            hidePNGMultipageOption : true,\n\n            title : 'L{exportSettings}',\n\n            maxHeight : '80%',\n\n            scrollable : {\n                overflowY : true\n            },\n            defaults : {\n                localeClass : this\n            },\n            items : {\n                columnsField : {\n                    type         : 'combo',\n                    label        : 'L{ExportDialog.columns}',\n                    store        : {},\n                    valueField   : 'id',\n                    displayField : 'text',\n                    multiSelect  : true,\n                    weight       : 100,\n                    maxHeight    : 100\n                },\n                rowsRangeField : {\n                    type   : 'exportrowscombo',\n                    label  : 'L{ExportDialog.rows}',\n                    value  : 'all',\n                    weight : 200\n                },\n                exporterTypeField : {\n                    type         : 'combo',\n                    label        : 'L{ExportDialog.exporterType}',\n                    editable     : false,\n                    value        : 'singlepage',\n                    displayField : 'text',\n                    buildItems() {\n                        const dialog = this.parent;\n\n                        return dialog.exporters.map(exporter => ({\n                            id   : exporter.type,\n                            text : dialog.optionalL(exporter.title, this)\n                        }));\n                    },\n                    onChange({ value }) {\n                        this.owner.widgetMap.alignRowsField.hidden    = value === 'singlepage';\n                        this.owner.widgetMap.repeatHeaderField.hidden = value !== 'multipagevertical';\n                    },\n                    weight : 300\n                },\n                alignRowsField : {\n                    type    : 'checkbox',\n                    label   : 'L{ExportDialog.alignRows}',\n                    checked : false,\n                    hidden  : true,\n                    weight  : 400\n                },\n                repeatHeaderField : {\n                    type        : 'checkbox',\n                    label       : 'L{ExportDialog.repeatHeader}',\n                    localeClass : this,\n                    hidden      : true,\n                    weight      : 500\n                },\n                fileFormatField : {\n                    type        : 'combo',\n                    label       : 'L{ExportDialog.fileFormat}',\n                    localeClass : this,\n                    editable    : false,\n                    value       : 'pdf',\n                    items       : [],\n                    onChange({ value, oldValue }) {\n                        const dialog = this.parent;\n                        if (dialog.hidePNGMultipageOption) {\n                            const\n                                exporterField = dialog.widgetMap.exporterTypeField,\n                                exporter      = exporterField.store.find(r => r.id === 'singlepage');\n\n                            if (value === FileFormat.png && exporter) {\n                                this._previousDisabled = exporterField.disabled;\n                                exporterField.disabled = true;\n\n                                this._previousValue = exporterField.value;\n                                exporterField.value = 'singlepage';\n                            }\n                            else if (oldValue === FileFormat.png && this._previousValue) {\n                                exporterField.disabled = this._previousDisabled;\n                                exporterField.value    = this._previousValue;\n                            }\n                        }\n                    },\n                    weight : 600\n                },\n                paperFormatField : {\n                    type     : 'combo',\n                    label    : 'L{ExportDialog.paperFormat}',\n                    editable : false,\n                    value    : 'A4',\n                    items    : [],\n                    weight   : 700\n                },\n                orientationField : {\n                    type   : 'exportorientationcombo',\n                    label  : 'L{ExportDialog.orientation}',\n                    value  : 'portrait',\n                    weight : 800\n                }\n            },\n            bbar : {\n                defaults : {\n                    localeClass : this\n                },\n                items : {\n                    exportButton : {\n                        color   : 'b-green',\n                        text    : 'L{ExportDialog.export}',\n                        weight  : 100,\n                        onClick : 'up.onExportClick'\n                    },\n                    cancelButton : {\n                        color   : 'b-gray',\n                        text    : 'L{ExportDialog.cancel}',\n                        weight  : 200,\n                        onClick : 'up.onCancelClick'\n                    }\n                }\n            }\n        };\n    }\n\n    //endregion\n\n    construct(config = {}) {\n        const\n            me         = this,\n            { client } = config;\n\n        if (!client) {\n            throw new Error('`client` config is required');\n        }\n\n        me.columnsStore = client.columns.chain(column => column.isLeaf && column.exportable, null, { excludeCollapsedRecords : false });\n\n        me.applyInitialValues(config);\n\n        super.construct(config);\n\n        LocaleManager.ion({\n            locale  : 'onLocaleChange',\n            prio    : -1,\n            thisObj : me\n        });\n    }\n\n    applyInitialValues(config) {\n        const\n            me    = this,\n            items = config.items = config.items || {};\n\n        config.width               = config.width || me.L('L{width}');\n        config.defaults            = config.defaults || {};\n        config.defaults.labelWidth = config.defaults.labelWidth || me.L('L{ExportDialog.labelWidth}');\n\n        items.columnsField     = items.columnsField || {};\n        items.fileFormatField  = items.fileFormatField || {};\n        items.paperFormatField = items.paperFormatField || {};\n\n        items.fileFormatField.items  = buildComboItems(FileFormat, value => value.toUpperCase());\n        items.paperFormatField.items = buildComboItems(PaperFormat);\n\n        items.columnsField.store = me.columnsStore;\n    }\n\n    onBeforeShow() {\n        const { columnsField, alignRowsField, exporterTypeField, repeatHeaderField } = this.widgetMap;\n\n        if (this.autoSelectVisibleColumns) {\n            columnsField.value = this.columnsStore.query(c => !c.hidden);\n        }\n        alignRowsField.hidden    = exporterTypeField.value === 'singlepage';\n        repeatHeaderField.hidden = exporterTypeField.value !== 'multipagevertical';\n\n        super.onBeforeShow?.(...arguments);\n    }\n\n    onLocaleChange() {\n        const\n            labelWidth = this.L('L{labelWidth}');\n\n        this.width = this.L('L{width}');\n\n        this.eachWidget(widget => {\n            if (widget instanceof Field) {\n                widget.labelWidth = labelWidth;\n            }\n        });\n    }\n\n    onExportClick() {\n        const values = this.values;\n\n        /**\n         * Fires when export button is clicked\n         * @event export\n         * @param {Object} values Object containing config for {@link Grid.feature.export.PdfExport#function-export export()} method\n         * @category Export\n         */\n        this.trigger('export', { values });\n    }\n\n    onCancelClick() {\n        /**\n         * Fires when cancel button is clicked. Popup will hide itself.\n         * @event cancel\n         * @category Export\n         */\n        this.trigger('cancel');\n        this.hide();\n    }\n\n    get values() {\n        const\n            fieldRe = /field/i,\n            result  = {};\n\n        this.eachWidget(widget => {\n            if (fieldRe.test(widget.ref)) {\n                result[widget.ref.replace(fieldRe, '')] = widget instanceof Checkbox ? widget.checked : widget.value;\n            }\n        });\n\n        return result;\n    }\n}\n\nExportDialog.initClass();\n", "import Exporter from './Exporter.js';\nimport { Orientation, PaperFormat, RowsRange } from '../Utils.js';\n\n/**\n * @module Grid/feature/export/exporter/MultiPageExporter\n */\n\n/**\n * A multiple page exporter. Used by the {@link Grid.feature.export.PdfExport} feature to export to multiple pages. You\n * do not need to use this class directly.\n *\n * ### Extending exporter\n *\n * ```javascript\n * class MyMultiPageExporter extends MultiPageExporter {\n *     // type is required for exporter\n *     static get type() {\n *         return 'mymultipageexporter';\n *     }\n *\n *     get stylesheets() {\n *         const stylesheets = super.stylesheets;\n *\n *         stylesheets.forEach(styleNodeOrLinkTag => doSmth(styleNodeOrLinkTag))\n *\n *         return stylesheets;\n *     }\n * }\n *\n * const grid = new Grid({\n *     features : {\n *         pdfExport : {\n *             // this export feature is configured with only one exporter\n *             exporters : [MyMultiPageExporter]\n *         }\n *     }\n * });\n *\n * // run export with the new exporter\n * grid.features.pdfExport.export({ exporter : 'mymultipageexporter' });\n * ```\n *\n * @classType multipage\n * @feature\n * @extends Grid/feature/export/exporter/Exporter\n */\nexport default class MultiPageExporter extends Exporter {\n\n    static get $name() {\n        return 'MultiPageExporter';\n    }\n\n    static get type() {\n        return 'multipage';\n    }\n\n    static get title() {\n        // In case locale is missing exporter is still distinguishable\n        return this.L('L{multipage}');\n    }\n\n    static get exportingPageText() {\n        return 'L{exportingPage}';\n    }\n\n    //region State management\n\n    async stateNextPage({ client, rowsRange, enableDirectRendering }) {\n        const { exportMeta } = this;\n\n        ++exportMeta.currentPage;\n        ++exportMeta.verticalPosition;\n\n        delete exportMeta.lastExportedRowBottom;\n\n        // If current vertical position is greater than max vertical pages, switch to next column\n        if (exportMeta.verticalPosition >= exportMeta.verticalPages) {\n            Object.assign(exportMeta, {\n                verticalPosition     : 0,\n                horizontalPosition   : exportMeta.horizontalPosition + 1,\n                currentPageTopMargin : 0,\n                lastTop              : 0,\n                lastRowIndex         : rowsRange === RowsRange.visible ? client.rowManager.firstVisibleRow.dataIndex : 0\n            });\n\n            delete exportMeta.lastRowDataIndex;\n\n            if (!enableDirectRendering) {\n                await this.scrollRowIntoView(client, exportMeta.firstVisibleDataIndex, { block : 'start' });\n            }\n        }\n    }\n\n    //endregion\n\n    //region Preparation\n\n    async prepareComponent(config) {\n        await super.prepareComponent(config);\n\n        const\n            me              = this,\n            { exportMeta }  = me,\n            {\n                client,\n                headerTpl,\n                footerTpl,\n                alignRows,\n                rowsRange,\n                enableDirectRendering\n            }               = config,\n            paperFormat     = PaperFormat[config.paperFormat],\n            isPortrait      = config.orientation === Orientation.portrait,\n            paperWidth      = isPortrait ? paperFormat.width : paperFormat.height,\n            paperHeight     = isPortrait ? paperFormat.height : paperFormat.width,\n            pageWidth       = me.inchToPx(paperWidth),\n            pageHeight      = me.inchToPx(paperHeight),\n            onlyVisibleRows = rowsRange === RowsRange.visible,\n            horizontalPages = Math.ceil(exportMeta.totalWidth / pageWidth);\n\n        // To estimate amount of pages correctly we need to know height of the header/footer on every page\n        let contentHeight = pageHeight;\n\n        if (headerTpl) {\n            contentHeight -= me.measureElement(headerTpl({\n                totalWidth  : exportMeta.totalWidth,\n                totalPages  : -1,\n                currentPage : -1\n            }));\n        }\n\n        if (footerTpl) {\n            contentHeight -= me.measureElement(footerTpl({\n                totalWidth  : exportMeta.totalWidth,\n                totalPages  : -1,\n                currentPage : -1\n            }));\n        }\n\n        let totalHeight, verticalPages, totalRows = client.store.count;\n\n        if (onlyVisibleRows) {\n            totalRows = me.getVisibleRowsCount(client);\n\n            totalHeight = exportMeta.totalHeight + client.headerHeight + client.footerHeight + client.bodyHeight;\n        }\n        else {\n            totalHeight = exportMeta.totalHeight + client.headerHeight + client.footerHeight + client.scrollable.scrollHeight;\n        }\n\n        // alignRows config specifies if rows should be always fully visible. E.g. if row doesn't fit on the page, it goes\n        // to the top of the next page\n        if (alignRows && !onlyVisibleRows) {\n            // we need to estimate amount of vertical pages for case when we only put row on the page if it fits\n            // first we need to know how much rows would fit one page, keeping in mind first page also contains header\n            // This estimation is loose, because row height might differ much between pages\n            const\n                rowHeight       = client.rowManager.rowOffsetHeight,\n                rowsOnFirstPage = Math.floor((contentHeight - client.headerHeight) / rowHeight),\n                rowsPerPage     = Math.floor(contentHeight / rowHeight),\n                remainingRows   = totalRows - rowsOnFirstPage;\n\n            verticalPages = 1 + Math.ceil(remainingRows / rowsPerPage);\n        }\n        else {\n            verticalPages = Math.ceil(totalHeight / contentHeight);\n        }\n\n        Object.assign(exportMeta, {\n            paperWidth,\n            paperHeight,\n            pageWidth,\n            pageHeight,\n            horizontalPages,\n            verticalPages,\n            totalHeight,\n            contentHeight,\n            totalRows,\n            totalPages           : horizontalPages * verticalPages,\n            currentPage          : 0,\n            verticalPosition     : 0,\n            horizontalPosition   : 0,\n            currentPageTopMargin : 0,\n            lastTop              : 0,\n            lastRowIndex         : onlyVisibleRows ? client.rowManager.firstVisibleRow.dataIndex : 0\n        });\n\n        if (!enableDirectRendering) {\n            this.adjustRowBuffer(client);\n        }\n    }\n\n    async restoreComponent(config) {\n        await super.restoreComponent(config);\n\n        if (!config.enableDirectRendering) {\n            this.restoreRowBuffer(config.client);\n        }\n    }\n\n    //endregion\n\n    async collectRows(config) {\n        const\n            me             = this,\n            { exportMeta } = me,\n            {\n                client,\n                alignRows,\n                rowsRange\n            }              = config,\n            {\n                subGrids,\n                currentPageTopMargin,\n                verticalPosition,\n                contentHeight,\n                totalRows,\n                lastRowDataIndex\n            }              = exportMeta,\n            { rowManager } = client,\n            { rows }       = rowManager,\n            onlyVisible    = rowsRange === RowsRange.visible,\n            hasMergeCells  = client.hasActiveFeature('mergeCells');\n\n        let remainingHeight, index;\n\n        if (onlyVisible && lastRowDataIndex != null) {\n            if (lastRowDataIndex === rows[rows.length - 1].dataIndex) {\n                index = rows.length - 1;\n            }\n            else {\n                index = rows.findIndex(r => r.dataIndex === lastRowDataIndex);\n            }\n        }\n        else {\n            index = onlyVisible\n                ? rows.findIndex(r => r.bottom > Math.ceil(client.scrollable.y))\n                : rows.findIndex(r => r.bottom + currentPageTopMargin + client.headerHeight > 0);\n        }\n\n        const\n            firstRowIndex     = index,\n            // This is a portion of the row which is not visible, which means it shouldn't affect remaining height\n            // Don't calculate for the first page\n            overflowingHeight = (onlyVisible || verticalPosition === 0) ? 0 : rows[index].top + currentPageTopMargin + client.headerHeight;\n\n        // Calculate remaining height to fill with rows\n        // remainingHeight is height of the page content region to fill. When next row is exported, this heights gets\n        // reduced. Since top rows may be partially visible, it would lead to increasing error and eventually to incorrect\n        // exported rows for the page\n        remainingHeight = contentHeight - overflowingHeight;\n\n        // first exported page container header\n        if (verticalPosition === 0) {\n            remainingHeight -= client.headerHeight;\n        }\n\n        // data index of the last collected row\n        let lastDataIndex,\n            offset = 0;\n\n        while (remainingHeight > 0) {\n            const row = rows[index];\n\n            if (alignRows && remainingHeight < row.offsetHeight) {\n                offset = -remainingHeight;\n                remainingHeight = 0;\n                // If we skip a row save its bottom to meta data in order to align canvases height\n                // properly\n                me.exportMeta.lastExportedRowBottom = rows[index - 1].bottom;\n            }\n            else {\n                me.collectRow(row);\n\n                remainingHeight -= row.offsetHeight;\n\n                lastDataIndex = row.dataIndex;\n\n                // Last row is processed, still need to fill the view\n                if (++index === rows.length && remainingHeight > 0) {\n                    remainingHeight = 0;\n                }\n                else if (onlyVisible && (index - firstRowIndex) === totalRows) {\n                    remainingHeight = 0;\n                }\n            }\n        }\n\n        // Collect merged cells per subgrid\n        if (hasMergeCells) {\n            for (const subGridName in subGrids) {\n                const\n                    subGrid     = subGrids[subGridName],\n                    mergedCells = client.subGrids[subGridName].element.querySelectorAll(`.b-grid-merged-cells`);\n\n                subGrid.mergedCellsHtml = [];\n\n                for (const mergedCell of mergedCells) {\n                    subGrid.mergedCellsHtml.push(mergedCell.outerHTML);\n                }\n            }\n        }\n\n        const lastRow = rows[index - 1];\n\n        if (lastRow) {\n            // Calculate exact grid height according to the last exported row\n            exportMeta.exactGridHeight = lastRow.bottom + client.footerContainer.offsetHeight + client.headerContainer.offsetHeight;\n            exportMeta.lastRowDataIndex = lastRow.dataIndex + 1;\n        }\n\n        await me.onRowsCollected(rows.slice(firstRowIndex, index), config);\n\n        // No scrolling required if we are only exporting currently visible rows\n        if (onlyVisible) {\n            exportMeta.exactGridHeight -= exportMeta.scrollableTopMargin = client.scrollable.y;\n        }\n        else {\n            // With variable row height row manager might relayout rows to fix position, moving them up or down.\n            const detacher = rowManager.ion({ offsetRows : ({ offset : value }) => offset += value });\n\n            await me.scrollRowIntoView(client, lastDataIndex + 1);\n\n            detacher();\n        }\n\n        return offset;\n    }\n\n    async renderRows(config) {\n        const\n            me              = this,\n            { exportMeta }  = me,\n            {\n                client,\n                alignRows,\n                rowsRange\n            }               = config,\n            {\n                currentPageTopMargin,\n                verticalPosition,\n                contentHeight,\n                totalRows,\n                lastRowIndex,\n                fakeRow\n            }               = exportMeta,\n            { store }       = client,\n            hasMergeCells   = client.hasActiveFeature('mergeCells'),\n            onlyVisibleRows = rowsRange === RowsRange.visible;\n\n        let index       = lastRowIndex,\n            { lastTop } = exportMeta,\n            remainingHeight;\n\n        const\n            firstRowIndex     = index,\n            // This is a portion of the row which is not visible, which means it shouldn't affect remaining height\n            // Don't calculate for the first page\n            overflowingHeight = (onlyVisibleRows || verticalPosition === 0) ? 0 : lastTop + currentPageTopMargin + client.headerHeight,\n            rows              = [];\n\n        // Calculate remaining height to fill with rows\n        // remainingHeight is height of the page content region to fill. When next row is exported, this heights gets\n        // reduced. Since top rows may be partially visible, it would lead to increasing error and eventually to incorrect\n        // exported rows for the page\n        remainingHeight = contentHeight - overflowingHeight;\n\n        // first exported page contains header\n        if (verticalPosition === 0) {\n            remainingHeight -= client.headerHeight;\n        }\n\n        // data index of the last collected row\n        let lastDataIndex, previousTop,\n            offset = 0;\n\n        while (remainingHeight > 0) {\n            fakeRow.render(index, store.getAt(index), true, false, true);\n\n            if (alignRows && remainingHeight < fakeRow.offsetHeight) {\n                offset = -remainingHeight;\n                remainingHeight = 0;\n                // If we skip a row save its bottom to meta data in order to align canvases height\n                // properly\n                me.exportMeta.lastExportedRowBottom = lastTop;\n            }\n            else {\n                previousTop = lastTop;\n                lastDataIndex = index;\n\n                lastTop = fakeRow.translate(lastTop);\n                remainingHeight -= fakeRow.offsetHeight;\n\n                me.collectRow(fakeRow);\n\n                // Push an object with data required to build merged cell\n                rows.push({\n                    top          : fakeRow.top,\n                    bottom       : fakeRow.bottom,\n                    offsetHeight : fakeRow.offsetHeight,\n                    dataIndex    : fakeRow.dataIndex\n                });\n\n                // Last row is processed, still need to fill the view\n                if (++index === store.count && remainingHeight > 0) {\n                    remainingHeight = 0;\n                }\n                else if (onlyVisibleRows && (index - firstRowIndex) === totalRows) {\n                    remainingHeight = 0;\n                }\n            }\n        }\n\n        if (hasMergeCells) {\n            me.renderMergedCells(config, firstRowIndex, index, rows);\n        }\n\n        // Store next to last row index and top position so we could proceed on the next page.\n        // In fact, when we take full control of row rendering we don't even need to do this. It is only required\n        // to be compatible with current exporters. When we get rid of scrolling, we can just start rendering rows\n        // on each page from 0 (adjusted by overflow of the previous row)\n        exportMeta.lastRowIndex = alignRows ? index : lastDataIndex;\n        exportMeta.lastTop = alignRows ? lastTop : previousTop;\n\n        if (fakeRow) {\n            // Calculate exact grid height according to the last exported row\n            exportMeta.exactGridHeight = fakeRow.bottom + client.footerContainer.offsetHeight + client.headerContainer.offsetHeight;\n        }\n\n        await me.onRowsCollected(rows, config);\n\n        return offset;\n    }\n\n    async buildPage(config) {\n        const\n            me             = this,\n            { exportMeta } = me,\n            {\n                client,\n                headerTpl,\n                footerTpl,\n                enableDirectRendering\n            }              = config,\n            {\n                totalWidth,\n                totalPages,\n                currentPage,\n                subGrids\n            }              = exportMeta;\n\n        // Rows are stored in shared state object, need to clean it before exporting next page\n        Object.values(subGrids).forEach(subGrid => subGrid.rows = []);\n\n        // With variable row height total height might change after scroll, update it\n        // to show content completely on the last page\n        if (config.rowsRange === RowsRange.all) {\n            exportMeta.totalHeight = client.height - client.bodyHeight + client.scrollable.scrollHeight - me.getVirtualScrollerHeight(client);\n        }\n\n        let header, footer;\n\n        // Measure header and footer height\n        if (headerTpl) {\n            header = me.prepareHTML(headerTpl({\n                totalWidth,\n                totalPages,\n                currentPage\n            }));\n        }\n\n        if (footerTpl) {\n            footer = me.prepareHTML(footerTpl({\n                totalWidth,\n                totalPages,\n                currentPage\n            }));\n        }\n\n        let offset;\n\n        if (enableDirectRendering) {\n            offset = await me.renderRows(config);\n        }\n        else {\n            offset = await me.collectRows(config);\n        }\n\n        const html = me.buildPageHtml(config);\n\n        return { html, header, footer, offset };\n    }\n\n    async onRowsCollected() {}\n\n    buildPageHtml() {\n        const\n            me           = this,\n            { subGrids } = me.exportMeta;\n\n        // Now when rows are collected, we need to add them to exported grid\n        let html = me.prepareExportElement();\n\n        Object.values(subGrids).forEach(({ placeHolder, rows, mergedCellsHtml }) => {\n            const placeHolderText = placeHolder.outerHTML;\n\n            let contentHtml = rows.reduce((result, row) => {\n                result += row[0];\n\n                return result;\n            }, '');\n\n            if (mergedCellsHtml?.length) {\n                contentHtml += `<div class=\"b-grid-merged-cells-container\">${mergedCellsHtml.join('')}</div>`;\n            }\n\n            html = html.replace(placeHolderText, contentHtml);\n        });\n\n        return html;\n    }\n\n    prepareExportElement() {\n        const\n            me = this,\n            { element, exportMeta } = me;\n\n        if (exportMeta.scrollableTopMargin) {\n            element.querySelector('.b-grid-vertical-scroller').style.marginTop = `-${exportMeta.scrollableTopMargin}px`;\n        }\n\n        return super.prepareExportElement();\n    }\n}\n\n// HACK: terser/obfuscator doesn't yet support async generators, when processing code it converts async generator to regular async\n// function.\nMultiPageExporter.prototype.pagesExtractor = async function * pagesExtractor(config) {\n    const\n        me = this,\n        {\n            exportMeta,\n            stylesheets\n        }  = me,\n        {\n            totalWidth,\n            totalPages,\n            paperWidth,\n            paperHeight,\n            contentHeight\n        }  = exportMeta;\n\n    let currentPage;\n\n    while ((currentPage = exportMeta.currentPage) < totalPages) {\n        me.trigger('exportStep', { text : me.L(MultiPageExporter.exportingPageText, { currentPage, totalPages }), progress : Math.round(((currentPage + 1) / totalPages) * 90) });\n\n        const { html, header, footer, offset } = await me.buildPage(config);\n\n        // TotalHeight might change in case of variable row heights\n        // Move exported content in the visible frame\n        const styles = [\n            ...stylesheets,\n            `\n                <style>\n                    #${config.client.id} {\n                        height: ${exportMeta.exactGridHeight}px !important;\n                        width: ${totalWidth}px !important;\n                    }\n                    \n                    .b-export-body .b-export-viewport {\n                        margin-inline-start : ${-paperWidth * exportMeta.horizontalPosition}in;\n                        margin-top  : ${exportMeta.currentPageTopMargin}px;\n                    }\n                </style>\n            `];\n\n        // when aligning rows, offset gets accumulated, so we need to take it into account\n        exportMeta.currentPageTopMargin -= contentHeight + offset;\n\n        await me.stateNextPage(config);\n\n        yield {\n            html : me.pageTpl({\n                html,\n                header,\n                footer,\n                styles,\n                paperWidth,\n                paperHeight\n            })\n        };\n    }\n};\n", "import Exporter from './Exporter.js';\nimport { Orientation, PaperFormat, RowsRange } from '../Utils.js';\n\n/**\n * @module Grid/feature/export/exporter/MultiPageVerticalExporter\n */\n\n/**\n * A vertical multiple page exporter. Used by the {@link Grid.feature.export.PdfExport} feature to export to multiple\n * pages. Content will be scaled in a horizontal direction to fit the page.\n *\n * You do not need to use this class directly.\n *\n * ### Extending exporter\n *\n * ```javascript\n * class MyMultiPageVerticalExporter extends MultiPageVerticalExporter {\n *     // type is required for exporter\n *     static get type() {\n *         return 'mymultipageverticalexporter';\n *     }\n *\n *     get stylesheets() {\n *         const stylesheets = super.stylesheets;\n *\n *         stylesheets.forEach(styleNodeOrLinkTag => doSmth(styleNodeOrLinkTag))\n *\n *         return stylesheets;\n *     }\n * }\n *\n * const grid = new Grid({\n *     features : {\n *         pdfExport : {\n *             // this export feature is configured with only one exporter\n *             exporters : [MyMultiPageVerticalExporter]\n *         }\n *     }\n * });\n *\n * // run export with the new exporter\n * grid.features.pdfExport.export({ exporter : 'mymultipageverticalexporter' });\n * ```\n *\n * @classType multipagevertical\n * @feature\n * @extends Grid/feature/export/exporter/Exporter\n */\nexport default class MultiPageVerticalExporter extends Exporter {\n\n    static get $name() {\n        return 'MultiPageVerticalExporter';\n    }\n\n    static get type() {\n        return 'multipagevertical';\n    }\n\n    static get title() {\n        // In case locale is missing exporter is still distinguishable\n        return this.L('L{multipagevertical}');\n    }\n\n    static get exportingPageText() {\n        return 'L{exportingPage}';\n    }\n\n    //region State management\n\n    async stateNextPage({ client }) {\n        const\n            { exportMeta } = this,\n            {\n                totalRows,\n                processedRows,\n                totalPages\n            } = exportMeta;\n\n        ++exportMeta.currentPage;\n        ++exportMeta.verticalPosition;\n\n        // With variable row heights it is possible that initial pages estimation is wrong. If we're out but there are\n        // more rows to process - continue exporting\n        if (exportMeta.currentPage === totalPages && processedRows.size !== totalRows) {\n            ++exportMeta.totalPages;\n            ++exportMeta.verticalPages;\n        }\n    }\n\n    //endregion\n\n    estimateTotalPages(config) {\n        const\n            me             = this,\n            { exportMeta } = me,\n            {\n                client,\n                headerTpl,\n                footerTpl,\n                alignRows,\n                rowsRange,\n                repeatHeader,\n                enableDirectRendering\n            }              = config,\n            {\n                pageWidth,\n                pageHeight,\n                totalWidth\n            }              = exportMeta,\n            scale          = me.getScaleValue(pageWidth, totalWidth);\n\n        // To estimate amount of pages correctly we need to know height of the header/footer on every page\n        let\n            // bodyHeight does not always report correct value, read it from the DOM element instead, we don't care\n            // about forced reflow at this stage\n            totalHeight   = 0 - me.getVirtualScrollerHeight(client) + client.height - client.bodyElement.offsetHeight + client.scrollable.scrollHeight,\n            // We will be scaling content horizontally, need to adjust content height accordingly\n            contentHeight = pageHeight / scale,\n            totalRows     = client.store.count,\n            initialScroll = 0,\n            rowsHeight    = totalHeight,\n            verticalPages;\n\n        if (headerTpl) {\n            contentHeight -= me.measureElement(headerTpl({\n                totalWidth,\n                totalPages  : -1,\n                currentPage : -1\n            }));\n        }\n\n        if (footerTpl) {\n            contentHeight -= me.measureElement(footerTpl({\n                totalWidth,\n                totalPages  : -1,\n                currentPage : -1\n            }));\n        }\n\n        // If we are repeating header on every page we have smaller contentHeight\n        if (repeatHeader) {\n            contentHeight -= client.headerHeight + client.footerHeight;\n            totalHeight -= client.headerHeight + client.footerHeight;\n        }\n\n        if (rowsRange === RowsRange.visible) {\n            const\n                rowManager = client.rowManager,\n                firstRow = rowManager.firstVisibleRow,\n                lastRow  = rowManager.lastVisibleRow;\n\n            // With direct rendering we start rendering from 0, no need to adjust anything\n            if (!enableDirectRendering) {\n                initialScroll = firstRow.top;\n            }\n\n            totalRows = me.getVisibleRowsCount(client);\n\n            if (enableDirectRendering) {\n                totalHeight = client.headerHeight + client.footerHeight + lastRow.bottom - firstRow.top;\n                rowsHeight = lastRow.bottom - firstRow.top;\n            }\n            else {\n                rowsHeight = totalHeight = totalHeight - client.scrollable.scrollHeight + lastRow.bottom - firstRow.top;\n            }\n\n            exportMeta.lastRowIndex = firstRow.dataIndex;\n            exportMeta.finishRowIndex = lastRow.dataIndex;\n        }\n        else {\n            exportMeta.finishRowIndex = client.store.count - 1;\n        }\n\n        // alignRows config specifies if rows should be always fully visible. E.g. if row doesn't fit on the page, it goes\n        // to the top of the next page\n        if (alignRows && !repeatHeader && rowsRange !== RowsRange.visible) {\n            // we need to estimate amount of vertical pages for case when we only put row on the page if it fits\n            // first we need to know how much rows would fit one page, keeping in mind first page also contains header\n            // This estimation is loose, because row height might differ much between pages\n            const\n                rowHeight       = client.rowManager.rowOffsetHeight,\n                rowsOnFirstPage = Math.floor((contentHeight - client.headerHeight) / rowHeight),\n                rowsPerPage     = Math.floor(contentHeight / rowHeight),\n                remainingRows   = totalRows - rowsOnFirstPage;\n\n            verticalPages = 1 + Math.ceil(remainingRows / rowsPerPage);\n        }\n        else {\n            verticalPages = Math.ceil(rowsHeight / contentHeight);\n        }\n\n        Object.assign(exportMeta, {\n            scale,\n            contentHeight,\n            totalRows,\n            totalHeight,\n            verticalPages,\n            initialScroll,\n            horizontalPages : 1,\n            totalPages      : verticalPages\n        });\n    }\n\n    async prepareComponent(config) {\n        await super.prepareComponent(config);\n\n        const\n            me              = this,\n            { exportMeta }  = me,\n            { client }      = config,\n            paperFormat     = PaperFormat[config.paperFormat],\n            isPortrait      = config.orientation === Orientation.portrait,\n            paperWidth      = isPortrait ? paperFormat.width : paperFormat.height,\n            paperHeight     = isPortrait ? paperFormat.height : paperFormat.width,\n            pageWidth       = me.inchToPx(paperWidth),\n            pageHeight      = me.inchToPx(paperHeight),\n            horizontalPages = 1;\n\n        Object.assign(exportMeta, {\n            paperWidth,\n            paperHeight,\n            pageWidth,\n            pageHeight,\n            horizontalPages,\n            currentPage          : 0,\n            verticalPosition     : 0,\n            horizontalPosition   : 0,\n            currentPageTopMargin : 0,\n            lastTop              : 0,\n            lastRowIndex         : 0,\n            processedRows        : new Set()\n        });\n\n        me.estimateTotalPages(config);\n\n        if (!config.enableDirectRendering) {\n            me.adjustRowBuffer(client);\n        }\n    }\n\n    async restoreComponent(config) {\n        await super.restoreComponent(config);\n\n        if (!config.enableDirectRendering) {\n            this.restoreRowBuffer(config.client);\n        }\n    }\n\n    async collectRows(config) {\n        const\n            me                 = this,\n            { exportMeta }     = me,\n            {\n                client,\n                alignRows,\n                repeatHeader\n            }                  = config,\n            {\n                subGrids,\n                currentPageTopMargin,\n                verticalPosition,\n                totalRows,\n                contentHeight\n            }                  = exportMeta,\n            // If we are repeating header we've already took header height into account when setting content height\n            clientHeaderHeight = repeatHeader ? 0 : client.headerHeight,\n            { rowManager }     = client,\n            { rows }           = rowManager,\n            onlyVisibleRows    = config.rowsRange === RowsRange.visible,\n            hasMergeCells      = client.hasActiveFeature('mergeCells');\n\n        let index = onlyVisibleRows\n                ? rows.findIndex(r => r.bottom > client.scrollable.y)\n                : rows.findIndex(r => r.bottom + currentPageTopMargin + clientHeaderHeight > 0),\n            remainingHeight;\n\n        const\n            firstRowIndex     = index,\n            // This is a portion of the row which is not visible, which means it shouldn't affect remaining height\n            // Don't calculate for the first page\n            overflowingHeight = verticalPosition === 0 ? 0 : rows[index].top + currentPageTopMargin + clientHeaderHeight;\n\n        // Calculate remaining height to fill with rows\n        // remainingHeight is height of the page content region to fill. When next row is exported, this heights gets\n        // reduced. Since top rows may be partially visible, it would lead to increasing error and eventually to incorrect\n        // exported rows for the page\n        remainingHeight = contentHeight - overflowingHeight;\n\n        // first exported page container header\n        if (verticalPosition === 0) {\n            remainingHeight -= clientHeaderHeight;\n        }\n\n        // data index of the last collected row\n        let lastDataIndex,\n            offset = 0;\n\n        while (remainingHeight > 0) {\n            const row = rows[index];\n\n            if (alignRows && remainingHeight < row.offsetHeight) {\n                offset = -remainingHeight;\n                remainingHeight = 0;\n            }\n            else {\n                me.collectRow(row);\n\n                remainingHeight -= row.offsetHeight;\n\n                // only mark row as processed if it fitted without overflow\n                if (remainingHeight > 0) {\n                    // We cannot use simple counter here because some rows appear on 2 pages. Need to track unique identifier\n                    exportMeta.processedRows.add(row.dataIndex);\n                }\n\n                lastDataIndex = row.dataIndex;\n\n                // Last row is processed, still need to fill the view\n                if (++index === rows.length && remainingHeight > 0) {\n                    remainingHeight = 0;\n                }\n                else if (onlyVisibleRows && (index - firstRowIndex) === totalRows) {\n                    remainingHeight = 0;\n                }\n            }\n        }\n\n        // Collect merged cells per subgrid\n        if (hasMergeCells) {\n            for (const subGridName in subGrids) {\n                const\n                    subGrid     = subGrids[subGridName],\n                    mergedCells = client.subGrids[subGridName].element.querySelectorAll(`.b-grid-merged-cells`);\n\n                subGrid.mergedCellsHtml = [];\n\n                for (const mergedCell of mergedCells) {\n                    subGrid.mergedCellsHtml.push(mergedCell.outerHTML);\n                }\n            }\n        }\n\n        const lastRow = rows[index - 1];\n\n        if (lastRow) {\n            // Calculate exact grid height according to the last exported row\n            exportMeta.exactGridHeight = lastRow.bottom + client.footerContainer.offsetHeight + client.headerContainer.offsetHeight;\n        }\n\n        await me.onRowsCollected(rows.slice(firstRowIndex, index), config);\n\n        // No scrolling required if we are only exporting currently visible rows\n        if (onlyVisibleRows) {\n            exportMeta.scrollableTopMargin = client.scrollable.y;\n        }\n        else {\n            // With variable row height row manager might relayout rows to fix position, moving them up or down.\n            const detacher = rowManager.ion({ offsetRows : ({ offset : value }) => offset += value });\n\n            await me.scrollRowIntoView(client, lastDataIndex + 1);\n\n            detacher();\n        }\n\n        return offset;\n    }\n\n    async renderRows(config) {\n        const\n            me                    = this,\n            { exportMeta }        = me,\n            {\n                client,\n                alignRows,\n                repeatHeader\n            }                     = config,\n            {\n                currentPageTopMargin,\n                verticalPosition,\n                totalRows,\n                contentHeight,\n                lastRowIndex,\n                finishRowIndex,\n                fakeRow\n            }                     = exportMeta,\n            // If we are repeating header we've already took header height into account when setting content height\n            clientHeaderHeight    = repeatHeader ? 0 : client.headerHeight,\n            { store }             = client,\n            hasMergeCells         = client.hasActiveFeature('mergeCells'),\n            onlyVisibleRows       = config.rowsRange === RowsRange.visible;\n\n        let index       = lastRowIndex,\n            { lastTop } = exportMeta,\n            remainingHeight;\n\n        const\n            firstRowIndex     = index,\n            // This is a portion of the row which is not visible, which means it shouldn't affect remaining height\n            // Don't calculate for the first page\n            overflowingHeight = verticalPosition === 0 ? 0 : lastTop + currentPageTopMargin + clientHeaderHeight,\n            rows              = [];\n\n        // Calculate remaining height to fill with rows\n        // remainingHeight is height of the page content region to fill. When next row is exported, this heights gets\n        // reduced. Since top rows may be partially visible, it would lead to increasing error and eventually to incorrect\n        // exported rows for the page\n        remainingHeight = contentHeight - overflowingHeight;\n\n        // first exported page container header\n        if (verticalPosition === 0) {\n            remainingHeight -= clientHeaderHeight;\n        }\n\n        // data index of the last collected row\n        let lastDataIndex,\n            nextPageTop,\n            offset = 0;\n\n        while (remainingHeight > 0) {\n            fakeRow.render(index, store.getAt(index), true, false, true);\n\n            if (alignRows && remainingHeight < fakeRow.offsetHeight) {\n                offset = -remainingHeight;\n                remainingHeight = 0;\n            }\n            else {\n                nextPageTop = lastTop;\n                lastDataIndex = index;\n\n                lastTop = fakeRow.translate(lastTop);\n                remainingHeight -= fakeRow.offsetHeight;\n\n                me.collectRow(fakeRow);\n\n                // Push an object with data required to build merged cell\n                rows.push({\n                    top          : fakeRow.top,\n                    bottom       : fakeRow.bottom,\n                    offsetHeight : fakeRow.offsetHeight,\n                    dataIndex    : fakeRow.dataIndex\n                });\n\n                // only mark row as processed if it fitted without overflow\n                if (remainingHeight > 0) {\n                    // We cannot use simple counter here because some rows appear on 2 pages. Need to track unique identifier\n                    exportMeta.processedRows.add(index);\n                }\n\n                // Last row is processed, still need to fill the view\n                if (index === finishRowIndex) {\n                    remainingHeight = 0;\n                }\n                else if ((++index - firstRowIndex) === totalRows && onlyVisibleRows) {\n                    remainingHeight = 0;\n                }\n            }\n        }\n\n        if (hasMergeCells) {\n            me.renderMergedCells(config, firstRowIndex, index, rows);\n        }\n\n        // Store next to last row index and top position so we could proceed on the next page.\n        // In fact, when we take full control of row rendering we don't even need to do this. It is only required\n        // to be compatible with current exporters. When we get rid of scrolling, we can just start rendering rows\n        // on each page from 0 (adjusted by overflow of the previous row)\n        exportMeta.lastRowIndex = lastDataIndex;\n        exportMeta.lastTop = nextPageTop;\n\n        if (fakeRow) {\n            // Calculate exact grid height according to the last exported row to constrain column lines to the last\n            // row\n            exportMeta.exactGridHeight = fakeRow.bottom + client.footerContainer.offsetHeight + client.headerContainer.offsetHeight;\n        }\n\n        await me.onRowsCollected(rows, config);\n\n        return offset;\n    }\n\n    async buildPage(config) {\n        const\n            me             = this,\n            { exportMeta } = me,\n            {\n                client,\n                headerTpl,\n                footerTpl,\n                enableDirectRendering\n            }              = config,\n            {\n                totalWidth,\n                totalPages,\n                currentPage,\n                subGrids\n            }              = exportMeta;\n\n        // Rows are stored in shared state object, need to clean it before exporting next page\n        Object.values(subGrids).forEach(subGrid => subGrid.rows = []);\n\n        // With variable row height total height might change after scroll, update it\n        // to show content completely on the last page\n        if (config.rowsRange === RowsRange.all) {\n            exportMeta.totalHeight = client.headerHeight + client.footerHeight + client.scrollable.scrollHeight;\n\n            if (!enableDirectRendering) {\n                exportMeta.totalHeight -= me.getVirtualScrollerHeight(client);\n            }\n        }\n\n        let header, footer, offset;\n\n        // Measure header and footer height\n        if (headerTpl) {\n            header = me.prepareHTML(headerTpl({\n                totalWidth,\n                totalPages,\n                currentPage\n            }));\n        }\n\n        if (footerTpl) {\n            footer = me.prepareHTML(footerTpl({\n                totalWidth,\n                totalPages,\n                currentPage\n            }));\n        }\n\n        if (enableDirectRendering) {\n            offset = await me.renderRows(config);\n        }\n        else {\n            offset = await me.collectRows(config);\n        }\n\n        const html = me.buildPageHtml(config);\n\n        return { html, header, footer, offset };\n    }\n\n    async onRowsCollected() {}\n\n    buildPageHtml() {\n        const\n            me           = this,\n            { subGrids } = me.exportMeta;\n\n        // Now when rows are collected, we need to add them to exported grid\n        let html = me.prepareExportElement();\n\n        Object.values(subGrids).forEach(({ placeHolder, rows, mergedCellsHtml }) => {\n            const placeHolderText = placeHolder.outerHTML;\n\n            let contentHtml = rows.reduce((result, row) => {\n                result += row[0];\n\n                return result;\n            }, '');\n\n            if (mergedCellsHtml?.length) {\n                contentHtml += `<div class=\"b-grid-merged-cells-container\">${mergedCellsHtml.join('')}</div>`;\n            }\n\n            html = html.replace(placeHolderText, contentHtml);\n        });\n\n        return html;\n    }\n}\n\n// HACK: terser/obfuscator doesn't yet support async generators, when processing code it converts async generator to regular async\n// function.\nMultiPageVerticalExporter.prototype.pagesExtractor = async function * pagesExtractor(config) {\n    const\n        me = this,\n        {\n            exportMeta,\n            stylesheets\n        }  = me,\n        {\n            totalWidth,\n            paperWidth,\n            paperHeight,\n            contentHeight,\n            scale,\n            initialScroll\n        }  = exportMeta;\n\n    let\n        { totalPages } = exportMeta,\n        currentPage;\n\n    while ((currentPage = exportMeta.currentPage) < totalPages) {\n        me.trigger('exportStep', {\n            text     : me.L(MultiPageVerticalExporter.exportingPageText, { currentPage, totalPages }),\n            progress : Math.round(((currentPage + 1) / totalPages) * 90)\n        });\n\n        const { html, header, footer, offset } = await me.buildPage(config);\n\n        // TotalHeight might change in case of variable row heights\n        // Move exported content in the visible frame\n        const styles = [\n            ...stylesheets,\n            `\n                <style>\n                    #${config.client.id} {\n                        width: ${totalWidth}px !important;\n                    }\n                    \n                    .b-export .b-export-content {\n                        transform: scale(${scale});\n                        transform-origin: top left;\n                        height: auto;\n                    }\n                </style>\n            `\n        ];\n\n        if (config.repeatHeader) {\n            const gridHeight = exportMeta.exactGridHeight ? `${exportMeta.exactGridHeight + exportMeta.currentPageTopMargin}px` : '100%';\n\n            styles.push(\n                `\n                <style>\n                    #${config.client.id} {\n                        height: ${gridHeight} !important;\n                    }\n                    \n                    .b-export .b-export-content {\n                        height: ${100 / scale}%;\n                    }\n                    \n                    .b-export-body {\n                        height: 100%;\n                        display: flex;\n                    }\n                \n                    .b-export-viewport {\n                        height: 100%;\n                    }\n                    \n                    .b-grid-vertical-scroller {\n                        margin-top: ${exportMeta.currentPageTopMargin - initialScroll}px;\n                    }\n                </style>\n                `\n            );\n        }\n        else {\n            const gridHeight = exportMeta.exactGridHeight || (contentHeight - exportMeta.currentPageTopMargin);\n\n            styles.push(\n                `\n                <style>\n                    #${config.client.id} {\n                        height: ${gridHeight}px !important;\n                    }\n                    \n                    .b-export-body {\n                        overflow: hidden;\n                    }\n                    \n                    .b-export .b-export-content {\n                        height: ${100 / scale}%;\n                    }\n                    \n                    .b-export-body .b-export-viewport {\n                        margin-top: ${exportMeta.currentPageTopMargin}px;\n                    }\n                    \n                    .b-grid-vertical-scroller {\n                        margin-top: -${initialScroll}px;\n                    }\n                </style>\n                `\n            );\n        }\n\n        // when aligning rows, offset gets accumulated, so we need to take it into account\n        exportMeta.currentPageTopMargin -= contentHeight + offset;\n\n        await me.stateNextPage(config);\n\n        ({ totalPages } = exportMeta);\n\n        yield {\n            html : me.pageTpl({\n                html,\n                header,\n                footer,\n                styles,\n                paperWidth,\n                paperHeight\n            })\n        };\n    }\n};\n", "import BrowserHelper from '../../../../Core/helper/BrowserHelper.js';\nimport Exporter from './Exporter.js';\nimport { Orientation, PaperFormat, RowsRange } from '../Utils.js';\n\n/**\n * @module Grid/feature/export/exporter/SinglePageExporter\n */\n\n/**\n * A single page exporter. Used by the {@link Grid.feature.export.PdfExport} feature to export to single page. Content\n * will be scaled in both directions to fit the page.\n *\n * You do not need to use this class directly.\n *\n * ### Extending exporter\n *\n * ```javascript\n * class MySinglePageExporter extends SinglePageExporter {\n *     // type is required for exporter\n *     static get type() {\n *         return 'mysinglepageexporter';\n *     }\n *\n *     get stylesheets() {\n *         const stylesheets = super.stylesheets;\n *\n *         stylesheets.forEach(styleNodeOrLinkTag => doSmth(styleNodeOrLinkTag))\n *\n *         return stylesheets;\n *     }\n * }\n *\n * const grid = new Grid({\n *     features : {\n *         pdfExport : {\n *             // this export feature is configured with only one exporter\n *             exporters : [MySinglePageExporter]\n *         }\n *     }\n * });\n *\n * // run export with the new exporter\n * grid.features.pdfExport.export({ exporter : 'mysinglepageexporter' });\n * ```\n *\n * @classType singlepage\n * @feature\n * @extends Grid/feature/export/exporter/Exporter\n */\nexport default class SinglePageExporter extends Exporter {\n\n    static get $name() {\n        return 'SinglePageExporter';\n    }\n\n    static get type() {\n        return 'singlepage';\n    }\n\n    static get title() {\n        // In case locale is missing exporter is still distinguishable\n        return this.localize('L{singlepage}');\n    }\n\n    static get defaultConfig() {\n        return {\n            /**\n             * Set to true to center content horizontally on the page\n             * @config {Boolean}\n             */\n            centerContentHorizontally : false\n        };\n    }\n\n    async prepareComponent(config) {\n        await super.prepareComponent(config);\n\n        Object.assign(this.exportMeta, {\n            verticalPages      : 1,\n            horizontalPages    : 1,\n            totalPages         : 1,\n            currentPage        : 0,\n            verticalPosition   : 0,\n            horizontalPosition : 0\n        });\n    }\n\n    async onRowsCollected() {}\n\n    positionRows(rows, config) {\n        if (config.enableDirectRendering) {\n            return rows.map(r => r[0]);\n        }\n        else {\n            let currentTop = 0;\n\n            // In case of variable row height row vertical position is not guaranteed to increase\n            // monotonously. Position row manually instead\n            return rows.map(([html, , height]) => {\n                const result = html.replace(/translate\\(\\d+px, \\d+px\\)/, `translate(0px, ${currentTop}px)`);\n\n                currentTop += height;\n\n                return result;\n            });\n        }\n    }\n\n    async collectRows(config) {\n        const\n            me                    = this,\n            { client }            = config,\n            { rowManager, store } = client,\n            hasMergeCells         = client.hasActiveFeature('mergeCells'),\n            { subGrids }          = me.exportMeta,\n            totalRows             = config.rowsRange === RowsRange.visible && store.count\n                // visibleRowCount is a projection of how much rows will fit the view, which should be\n                // maximum amount of exported rows. and there can be less\n                ? me.getVisibleRowsCount(client)\n                : store.count;\n\n        let { totalHeight } = me.exportMeta,\n            processedRows   = 0,\n            lastDataIndex   = -1;\n\n        if (rowManager.rows.length > 0) {\n            if (config.rowsRange === RowsRange.visible) {\n                lastDataIndex = rowManager.firstVisibleRow.dataIndex - 1;\n            }\n\n            if (hasMergeCells) {\n                for (const subGrid of Object.values(subGrids)) {\n                    subGrid.mergedCellsHtml = [];\n                }\n            }\n\n            // Collecting rows\n            while (processedRows < totalRows) {\n                const\n                    rows    = rowManager.rows,\n                    lastRow = rows[rows.length - 1],\n                    lastProcessedRowIndex = processedRows;\n\n                rows.forEach(row => {\n                    // When we are scrolling rows will be duplicated even with disabled buffers (e.g. when we are trying to\n                    // scroll last record into view). So we store last processed row dataIndex (which is always growing\n                    // sequence) and filter all rows with lower/same dataIndex\n                    if (row.dataIndex > lastDataIndex && processedRows < totalRows) {\n                        ++processedRows;\n                        totalHeight += row.offsetHeight;\n                        me.collectRow(row);\n                    }\n                });\n\n                // Collect merged cells per subgrid\n                if (hasMergeCells) {\n                    for (const subGridName in subGrids) {\n                        const\n                            subGrid     = subGrids[subGridName],\n                            mergedCells = client.subGrids[subGridName].element.querySelectorAll(`.b-grid-merged-cells`);\n\n                        for (const mergedCell of mergedCells) {\n                            subGrid.mergedCellsHtml.push(mergedCell.outerHTML);\n                        }\n                    }\n                }\n\n                // Calculate new rows processed in this iteration e.g. to collect events\n                const\n                    firstNewRowIndex = rows.findIndex(r => r.dataIndex === lastDataIndex + 1),\n                    lastNewRowIndex  = firstNewRowIndex + (processedRows - lastProcessedRowIndex);\n\n                await me.onRowsCollected(rows.slice(firstNewRowIndex, lastNewRowIndex), config);\n\n                if (processedRows < totalRows) {\n                    lastDataIndex = lastRow.dataIndex;\n                    await me.scrollRowIntoView(client, lastDataIndex + 1);\n                }\n            }\n        }\n\n        return totalHeight;\n    }\n\n    async renderRows(config) {\n        const\n            me                    = this,\n            { client, rowsRange } = config,\n            { rowManager, store } = client,\n            hasMergeCells         = client.hasActiveFeature('mergeCells'),\n            onlyVisibleRows       = rowsRange === RowsRange.visible;\n\n        let { totalHeight } = me.exportMeta;\n\n        if (store.count) {\n            const\n                { fakeRow }         = me.exportMeta,\n                { firstVisibleRow } = rowManager,\n                fromIndex           = onlyVisibleRows ? firstVisibleRow.dataIndex : 0,\n                toIndex             = onlyVisibleRows ? rowManager.lastVisibleRow.dataIndex : store.count - 1,\n                rows                = [];\n\n            let top = 0;\n\n            // Fake row might not have cells if there are no columns\n            if (fakeRow.cells.length) {\n                for (let i = fromIndex; i <= toIndex; i++) {\n                    fakeRow.render(i, store.getAt(i), true, false, true);\n\n                    top = fakeRow.translate(top);\n\n                    me.collectRow(fakeRow);\n\n                    // Push an object with data required to build merged cell\n                    rows.push({\n                        top          : fakeRow.top,\n                        bottom       : fakeRow.bottom,\n                        offsetHeight : fakeRow.offsetHeight,\n                        dataIndex    : fakeRow.dataIndex\n                    });\n                }\n\n                await me.onRowsCollected(rows, config);\n            }\n\n            totalHeight += top;\n\n            if (hasMergeCells) {\n                me.renderMergedCells(config, fromIndex, toIndex, rows);\n            }\n        }\n\n        return totalHeight;\n    }\n\n    buildPageHtml(config) {\n        const\n            me           = this,\n            { subGrids } = me.exportMeta;\n\n        // Now when rows are collected, we need to add them to exported grid\n        let html = me.prepareExportElement();\n\n        Object.values(subGrids).forEach(({ placeHolder, rows, mergedCellsHtml }) => {\n            const placeHolderText = placeHolder.outerHTML;\n            let contentHtml =  me.positionRows(rows, config).join('');\n\n            if (mergedCellsHtml?.length) {\n                contentHtml += `<div class=\"b-grid-merged-cells-container\">${mergedCellsHtml.join('')}</div>`;\n            }\n\n            html = html.replace(placeHolderText, contentHtml);\n        });\n\n        return html;\n    }\n}\n\n// HACK: terser/obfuscator doesn't yet support async generators, when processing code it converts async generator to regular async\n// function.\nSinglePageExporter.prototype.pagesExtractor = async function * pagesExtractor(config) {\n    // When we prepared grid we stretched it horizontally, now we need to gather all rows\n    // There are two ways:\n    // 1. set component height to scrollable.scrollHeight value to render all rows at once (maybe a bit more complex\n    // if rows have variable height)\n    // 2. iterate over rows, scrolling new portion into view once in a while\n    // #1 sounds simpler, but that might require too much rendering, let's scroll rows instead\n\n    const\n        me             = this,\n        { client }     = config,\n        { totalWidth } = me.exportMeta,\n        styles         = me.stylesheets,\n        portrait       = config.orientation === Orientation.portrait,\n        paperFormat    = PaperFormat[config.paperFormat],\n        paperWidth     = portrait ? paperFormat.width : paperFormat.height,\n        paperHeight    = portrait ? paperFormat.height : paperFormat.width;\n\n    let totalHeight, header, footer;\n\n    if (config.enableDirectRendering) {\n        totalHeight = await me.renderRows(config);\n\n        totalHeight += client.headerHeight + client.footerHeight;\n    }\n    else {\n        totalHeight = await me.collectRows(config);\n\n        totalHeight += client.height - client.bodyHeight;\n    }\n\n    const html = me.buildPageHtml(config);\n\n    const totalClientHeight = totalHeight;\n\n    // Measure header and footer height\n    if (config.headerTpl) {\n        header = me.prepareHTML(config.headerTpl({ totalWidth }));\n        const height = me.measureElement(header);\n        totalHeight += height;\n    }\n\n    if (config.footerTpl) {\n        footer = me.prepareHTML(config.footerTpl({ totalWidth }));\n        const height = me.measureElement(footer);\n        totalHeight += height;\n    }\n\n    const\n        widthScale  = Math.min(1, me.getScaleValue(me.inchToPx(paperWidth), totalWidth)),\n        heightScale = Math.min(1, me.getScaleValue(me.inchToPx(paperHeight), totalHeight)),\n        scale       = Math.min(widthScale, heightScale);\n\n    // Now add style to stretch grid vertically\n    styles.push(\n        `<style>\n                #${client.id} {\n                    height: ${totalClientHeight}px !important;\n                    width: ${totalWidth}px !important;\n                }\n                \n                .b-export-content {\n                    ${me.centerContentHorizontally ? 'left: 50%;' : ''}\n                    transform: scale(${scale}) ${me.centerContentHorizontally ? 'translateX(-50%)' : ''};\n                    transform-origin: top left;\n                    height: ${scale === 1 ? 'inherit' : 'auto !important'};\n                }\n            </style>`\n    );\n\n    if (BrowserHelper.isIE11) {\n        styles.push(\n        `<style>\n                .b-export-body {\n                   min-height: ${totalClientHeight}px !important;\n                }\n         </style>`\n        );\n    }\n\n    // This is a single page exporter so we only yield one page\n    yield {\n        html : me.pageTpl({\n            html,\n            header,\n            footer,\n            styles,\n            paperWidth,\n            paperHeight\n        })\n    };\n};\n", "import AjaxHelper from '../../../Core/helper/AjaxHelper.js';\nimport EventHelper from '../../../Core/helper/EventHelper.js';\nimport VersionHelper from '../../../Core/helper/VersionHelper.js';\nimport InstancePlugin from '../../../Core/mixin/InstancePlugin.js';\nimport MultiPageExporter from './exporter/MultiPageExporter.js';\nimport MultiPageVerticalExporter from './exporter/MultiPageVerticalExporter.js';\nimport SinglePageExporter from './exporter/SinglePageExporter.js';\nimport ObjectHelper from '../../../Core/helper/ObjectHelper.js';\nimport ExportDialog from '../../view/export/ExportDialog.js';\nimport GridFeatureManager from '../GridFeatureManager.js';\nimport Toast from '../../../Core/widget/Toast.js';\nimport { FileMIMEType } from './Utils.js';\n\n/**\n * @module Grid/feature/export/PdfExport\n */\n\n/**\n * Generates PDF/PNG files from the Grid component.\n *\n * **NOTE:** Server side is required to make export work!\n *\n * Check out PDF Export Server documentation and installation steps [here](https://github.com/bryntum/pdf-export-server#pdf-export-server)\n *\n * When your server is up and running, it listens to requests. The Export feature sends a request to the specified URL\n * with the HTML fragments. The server generates a PDF (or PNG) file and returns a download link (or binary, depending\n * on {@link #config-sendAsBinary} config). Then the Export feature opens the link in a new tab and the file is\n * automatically downloaded by your browser. This is configurable, see {@link #config-openAfterExport} config.\n *\n * The {@link #config-exportServer} URL must be configured. The URL can be localhost if you start the server locally,\n * or your remote server address.\n *\n * ## Usage\n *\n * ```javascript\n * const grid = new Grid({\n *     features : {\n *         pdfExport : {\n *             exportServer : 'http://localhost:8080' // Required\n *         }\n *     }\n * })\n *\n * // Opens popup allowing to customize export settings\n * grid.features.pdfExport.showExportDialog();\n *\n * // Simple export\n * grid.features.pdfExport.export({\n *     // Required, set list of column ids to export\n *     columns : grid.columns.map(c => c.id)\n * }).then(result => {\n *     // Response instance and response content in JSON\n *     let { response } = result;\n * });\n * ```\n *\n * ## Exporters\n *\n * There are three exporters available by default: `singlepage`, `multipage` and `multipagevertical`:\n *  * `singlepage` -  generates single page with content scaled to fit the provided {@link #config-paperFormat}\n *  * `multipage` - generates as many pages as required to fit all requested content, unscaled\n *  * `multipagevertical` - a combination of two above: it scales content horizontally to fit into page width and then\n *  puts overflowing content on vertical pages. Like a scroll.\n *\n * ## Loading resources\n *\n * If you face a problem with loading resources when exporting, the cause might be that the application and the export server are hosted on different servers.\n * This is due to [Cross-Origin Resource Sharing](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) (CORS). There are 2 options how to handle this:\n * - Allow cross-origin requests from the server where your export is hosted to the server where your application is hosted;\n * - Copy all resources keeping the folder hierarchy from the server where your application is hosted to the server where your export is hosted\n * and setup paths using {@link #config-translateURLsToAbsolute} config and configure the export server to give access to the path:\n *\n * ```javascript\n * const grid = new Grid({\n *     features : {\n *         pdfExport : {\n *             exportServer : 'http://localhost:8080',\n *             // '/resources' is hardcoded in WebServer implementation\n *             translateURLsToAbsolute : 'http://localhost:8080/resources'\n *         }\n *     }\n * })\n * ```\n *\n * ```javascript\n * // Following path would be served by this address: http://localhost:8080/resources/\n * node ./src/server.js -h 8080 -r web/application/styles\n * ```\n *\n * where `web/application/styles` is a physical root location of the copied resources, for example:\n *\n * <img src=\"Grid/export-server-resources.png\" style=\"max-width : 500px\" alt=\"Export server structure with copied resources\" />\n *\n * @extends Core/mixin/InstancePlugin\n *\n * @demo Grid/export\n * @classtype pdfExport\n * @feature\n */\nexport default class PdfExport extends InstancePlugin {\n    static get $name() {\n        return 'PdfExport';\n    }\n\n    static get configurable() {\n        return {\n            dialogClass  : ExportDialog,\n            /**\n             * URL of the print server.\n             * @config {String}\n             */\n            exportServer : undefined,\n\n            /**\n             * Returns the instantiated export dialog widget as configured by {@link #config-exportDialog}\n             * @member {Grid.view.export.ExportDialog} exportDialog\n             */\n            /**\n             * A config object to apply to the {@link Grid.view.export.ExportDialog} widget.\n             * @config {ExportDialogConfig}\n             */\n            exportDialog : {\n                value : true,\n\n                $config : ['lazy']\n            },\n\n            /**\n             * Name of the exported file.\n             * @config {String}\n             */\n            fileName : null,\n\n            /**\n             * Format of the exported file, either `pdf` or `png`.\n             * @config {'pdf'|'png'}\n             * @default\n             * @category Export file config\n             */\n            fileFormat : 'pdf',\n\n            /**\n             * Export server will navigate to this url first and then will change page content to whatever client sent.\n             * This option is useful with react dev server, which uses a strict CORS policy.\n             * @config {String}\n             */\n            clientURL : null,\n\n            /**\n             * Export paper format. Available options are A1...A5, Legal, Letter.\n             * @config {'A1'|'A2'|'A3'|'A4'|'A5'|'Legal'|'Letter'}\n             * @default\n             * @category Export file config\n             */\n            paperFormat : 'A4',\n\n            /**\n             * Orientation. Options are `portrait` and `landscape`.\n             * @config {'portrait'|'landscape'}\n             * @default\n             * @category Export file config\n             */\n            orientation : 'portrait',\n\n            /**\n             * Specifies which rows to export. `all` for complete set of rows, `visible` for only rows currently visible.\n             * @config {'all'|'visible'}\n             * @category Export file config\n             * @default\n             */\n            rowsRange : 'all',\n\n            /**\n             * Set to true to align row top to the page top on every exported page. Only applied to multipage export.\n             * @config {Boolean}\n             * @default\n             */\n            alignRows : false,\n\n            /**\n             * Set to true to show column headers on every page. This will also set {@link #config-alignRows} to true.\n             * Only applies to MultiPageVertical exporter.\n             * @config {Boolean}\n             * @default\n             */\n            repeatHeader : false,\n\n            /**\n             * By default, subGrid width is changed to fit all exported columns. To keep certain subGrid size specify it\n             * in the following form:\n             * ```javascript\n             * keepRegionSizes : {\n             *     locked : true\n             * }\n             * ```\n             * @config {Object<String,Boolean>}\n             * @default\n             */\n            keepRegionSizes : null,\n\n            /**\n             * When exporting large views (hundreds of pages) stringified HTML may exceed browser or server request\n             * length limit. This config allows to specify how many pages to send to server in one request.\n             * @config {Number}\n             * @default\n             * @private\n             */\n            pagesPerRequest : 0,\n\n            /**\n             * Config for exporter.\n             * @config {Object}\n             * @private\n             */\n            exporterConfig : null,\n\n            /**\n             * Type of the exporter to use. Should be one of the configured {@link #config-exporters}\n             * @config {String}\n             * @default\n             */\n            exporterType : 'singlepage',\n\n            /**\n             * List of exporter classes to use in export feature\n             * @config {Grid.feature.export.exporter.Exporter[]}\n             * @default\n             */\n            exporters : [SinglePageExporter, MultiPageExporter, MultiPageVerticalExporter],\n\n            /**\n             * `True` to replace all linked CSS files URLs to absolute before passing HTML to the server.\n             * When passing a string the current origin of the CSS files URLS will be replaced by the passed origin.\n             *\n             * For example: css files pointing to /app.css will be translated from current origin to {translateURLsToAbsolute}/app.css\n             * @config {Boolean|String}\n             * @default\n             */\n            translateURLsToAbsolute : true,\n\n            /**\n             * When true links are converted to absolute by combining current window location (with replaced origin) with\n             * resource link.\n             * When false links are converted by combining new origin with resource link (for angular)\n             * @config {Boolean}\n             * @default\n             */\n            keepPathName : true,\n\n            /**\n             * When true, page will attempt to download generated file.\n             * @config {Boolean}\n             * @default\n             */\n            openAfterExport : true,\n\n            /**\n             * Set to true to receive binary file from the server instead of download link.\n             * @config {Boolean}\n             * @default\n             */\n            sendAsBinary : false,\n\n            /**\n             * False to open in the current tab, true - in a new tab\n             * @config {Boolean}\n             * @default\n             */\n            openInNewTab : false,\n\n            /**\n             * A template function used to generate a page header. It is passed an object with ´currentPage´ and `totalPages´ properties.\n             *\n             * ```javascript\n             * let grid = new Grid({\n             *     appendTo   : 'container',\n             *     features : {\n             *         pdfExport : {\n             *             exportServer : 'http://localhost:8080/',\n             *             headerTpl : ({ currentPage, totalPages }) => `\n             *                 <div class=\"demo-export-header\">\n             *                     <img src=\"coolcorp-logo.png\"/>\n             *                     <dl>\n             *                         <dt>Date: ${DateHelper.format(new Date(), 'll LT')}</dt>\n             *                         <dd>${totalPages ? `Page: ${currentPage + 1}/${totalPages}` : ''}</dd>\n             *                     </dl>\n             *                 </div>`\n             *          }\n             *     }\n             * });\n             * ```\n             * @config {Function}\n             */\n            headerTpl : null,\n\n            /**\n             * A template function used to generate a page footer. It is passed an object with ´currentPage´ and `totalPages´ properties.\n             *\n             * ```javascript\n             * let grid = new Grid({\n             *      appendTo   : 'container',\n             *      features : {\n             *          pdfExport : {\n             *              exportServer : 'http://localhost:8080/',\n             *              footerTpl    : () => '<div class=\"demo-export-footer\"><h3>© 2020 CoolCorp Inc</h3></div>'\n             *          }\n             *      }\n             * });\n             * ```\n             * @config {Function}\n             */\n            footerTpl : null,\n\n            /**\n             * An object containing the Fetch options to pass to the export server request. Use this to control if\n             * credentials are sent and other options, read more at\n             * [MDN](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch).\n             * @config {FetchOptions}\n             */\n            fetchOptions : null,\n\n            /**\n             * A message to be shown when Export feature is performing export.\n             * @config {String}\n             * @default \"Generating pages...\"\n             */\n            exportMask : 'L{Generating pages}',\n\n            /**\n             * A message to be shown when export is almost done.\n             * @config {String}\n             * @default \"Waiting for response from server...\"\n             */\n            exportProgressMask : 'L{Waiting for response from server}',\n\n            /**\n             * Set to `false` to not show Toast message on export error.\n             * @config {Boolean}\n             * @default\n             */\n            showErrorToast : true,\n\n            localizableProperties : ['exportMask', 'exportProgressMask'],\n\n            /**\n             * This method accepts all stylesheets (link and style tags) which are supposed to be put on the page. Use\n             * this hook method to filter or modify them.\n             *\n             * ```javascript\n             * new Grid({\n             *     features: {\n             *         pdfExport: {\n             *             // filter out inline styles and bootstrap.css\n             *             filterStyles: styles => styles.filter(item => !/(link|bootstrap.css)/.test(item))\n             *         }\n             *     }\n             * });\n             * ```\n             * @param {String[]} styles\n             * @returns {String[]} List of stylesheets to put on the exported page\n             */\n            filterStyles : styles => styles,\n\n            /**\n             * Enables direct rendering of the component content which significantly improves performance. To enable\n             * old export mode set this flag to false.\n             * @config {Boolean}\n             * @default\n             */\n            enableDirectRendering : true\n        };\n    }\n\n    updateEnableDirectRendering(value) {\n        if (!value) {\n            VersionHelper.deprecate('Grid', '6.0.0', 'Indirect rendering is deprecated');\n        }\n    }\n\n    doDestroy() {\n        this.exportDialog?.destroy();\n\n        this.exportersMap.forEach(exporter => exporter.destroy());\n\n        super.doDestroy();\n    }\n\n    /**\n     * When export is started from GUI ({@link Grid.view.export.ExportDialog}), export promise can be accessed via\n     * this property.\n     * @property {Promise|null}\n     */\n    get currentExportPromise() {\n        return this._currentExportPromise;\n    }\n\n    set currentExportPromise(value) {\n        this._currentExportPromise = value;\n    }\n\n    get exportersMap() {\n        return this._exportersMap || (this._exportersMap = new Map());\n    }\n\n    getExporter(config = {}) {\n        const\n            me               = this,\n            { exportersMap } = me,\n            { type }         = config;\n\n        let exporter;\n\n        if (exportersMap.has(type)) {\n            exporter = exportersMap.get(type);\n\n            Object.assign(exporter, config);\n        }\n        else {\n            const exporterClass = this.exporters.find(cls => cls.type === type);\n\n            if (!exporterClass) {\n                throw new Error(`Exporter type ${type} is not found. Make sure you've configured it`);\n            }\n\n            config = ObjectHelper.clone(config);\n            delete config.type;\n\n            exporter = new exporterClass(config);\n\n            exporter.relayAll(me);\n\n            exportersMap.set(type, exporter);\n        }\n\n        return exporter;\n    }\n\n    buildExportConfig(config = {}) {\n        const\n            me = this,\n            {\n                client,\n                exportServer,\n                clientURL,\n                fileFormat,\n                fileName,\n                paperFormat,\n                rowsRange,\n                alignRows,\n                repeatHeader,\n                keepRegionSizes,\n                orientation,\n                translateURLsToAbsolute,\n                keepPathName,\n                sendAsBinary,\n                headerTpl,\n                footerTpl,\n                filterStyles,\n                enableDirectRendering\n            }  = me;\n\n        if (!config.columns) {\n            config.columns = client.columns.visibleColumns.filter(column => column.exportable).map(column => column.id);\n        }\n\n        const result = ObjectHelper.assign({\n            client,\n            exportServer,\n            clientURL,\n            fileFormat,\n            paperFormat,\n            rowsRange,\n            alignRows,\n            repeatHeader,\n            keepRegionSizes,\n            orientation,\n            translateURLsToAbsolute,\n            keepPathName,\n            sendAsBinary,\n            headerTpl,\n            footerTpl,\n            enableDirectRendering,\n            exporterType : me.exporterType,\n            fileName     : fileName || client.$$name\n        }, config);\n\n        // slice columns array to not modify it during export\n        result.columns = config.columns.slice();\n\n        // Only vertical exporter is supported\n        if (result.exporterType !== 'multipagevertical') {\n            result.repeatHeader = false;\n        }\n\n        // Align rows by default\n        if (!('alignRows' in config) && config.repeatHeader) {\n            result.alignRows = true;\n        }\n\n        result.exporterConfig = ObjectHelper.assign({\n            type                    : result.exporterType,\n            translateURLsToAbsolute : result.translateURLsToAbsolute,\n            keepPathName            : result.keepPathName,\n            filterStyles\n        }, result.exporterConfig || {});\n\n        delete result.exporterType;\n        delete result.translateURLsToAbsolute;\n        delete result.keepPathName;\n\n        return result;\n    }\n\n    /**\n     * Starts the export process. Accepts a config object which overrides any default configs.\n     * **NOTE**. Component should not be interacted with when export is in progress\n     *\n     * @param {Object} config\n     * @param {String[]} config.columns (required) List of column ids to export. E.g.\n     *\n     * ```javascript\n     * grid.features.pdfExport.export({ columns : grid.columns.map(c => c.id) })\n     * ```\n     * @returns {Promise} Object of the following structure\n     * ```\n     * {\n     *     response // Response instance\n     * }\n     * ```\n     */\n    async export(config = {}) {\n        const\n            me = this,\n            {\n                client,\n                pagesPerRequest\n            }  = me;\n\n        config = me.buildExportConfig(config);\n\n        let result;\n\n        /**\n         * Fires on the owning Grid before export started. Return `false` to cancel the export.\n         * @event beforePdfExport\n         * @preventable\n         * @on-owner\n         * @param {Object} config Export config\n         */\n        if (client.trigger('beforePdfExport', { config }) !== false) {\n            client.isExporting = true;\n\n            // This mask should be always visible to protect grid from changes even if the mask message is not visible\n            // due to the export dialog which is rendered above the grid's mask. The dialog has its own mask which shares the export message.\n            client.mask(me.exportMask);\n\n            try {\n                const exporter = me.getExporter(config.exporterConfig);\n\n                if (pagesPerRequest === 0) {\n                    const pages = await exporter.export(config);\n\n                    if (me.isDestroying) {\n                        return;\n                    }\n\n                    // Hide dialog\n                    me.exportDialog?.close();\n\n                    // We can unmask early\n                    client.unmask();\n\n                    /**\n                     * Fires when export progress changes\n                     * @event exportStep\n                     * @param {Number} progress Current progress, 0-100\n                     * @param {String} text Optional text to show\n                     */\n                    me.trigger('exportStep', { progress : 90, text : me.exportProgressMask, contentGenerated : true });\n\n                    const responsePromise = me.receiveExportContent(pages, config);\n\n                    // Show toast message indicating we're waiting for the server response\n                    me.toast = me.showLoadingToast(responsePromise);\n\n                    const response = await responsePromise;\n\n                    result = { response };\n\n                    await me.processExportContent(response, config);\n                }\n            }\n            catch (error) {\n                if (error instanceof Response) {\n                    result = { response : error };\n                }\n                else {\n                    result = { error };\n                }\n\n                throw error;\n            }\n            finally {\n                if (me.toast && !me.toast.isDestroying) {\n                    // Hide would also destroy the toast\n                    me.toast.hide();\n                }\n\n                if (!me.isDestroying) {\n                    // Close dialog on exception\n                    me.exportDialog?.close();\n                    client.unmask();\n\n                    if (me.showErrorToast) {\n                        // Do not show warning if user has cancelled request\n                        if (result.error) {\n                            if (result.error.name !== 'AbortError') {\n                                Toast.show({\n                                    html        : me.L('L{Export failed}'),\n                                    rootElement : me.rootElement\n                                });\n                            }\n                        }\n                        else if (!result.response.ok) {\n                            Toast.show({\n                                html        : me.L('L{Server error}'),\n                                rootElement : me.rootElement\n                            });\n                        }\n                    }\n\n                    /**\n                     * Fires on the owning Grid when export has finished\n                     * @event pdfExport\n                     * @on-owner\n                     * @param {Response} [response] Optional response, if received\n                     * @param {Error} [error] Optional error, if exception occurred\n                     */\n                    client.trigger('pdfExport', result);\n\n                    client.isExporting = false;\n                }\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Sends request to the export server and returns Response instance. This promise can be cancelled by the user\n     * by clicking on the toast message. When the user clicks on the toast, `abort` method is called on the promise\n     * returned by this method. If you override this method you can implement `abort` method like in the snippet\n     * below to cancel the request.\n     *\n     * ```javascript\n     * class MyPdfExport extends PdfExport {\n     *     receiveExportContent(pages, config) {\n     *         let controller;\n     *\n     *         const promise = new Promise(resolve => {\n     *             controller = new AbortController();\n     *             const signal = controller.signal;\n     *\n     *             fetch(url, { signal })\n     *                 .then(response => resolve(response));\n     *         });\n     *\n     *         // This method will be called when user clicks on the toast message to cancel the request\n     *         promise.abort = () => controller.abort();\n     *\n     *         return promise;\n     *     }\n     * }\n     *\n     * const grid = new Grid({ features: { myPdfExport : {...} } });\n     *\n     * grid.features.myPdfExport.export().catch(e => {\n     *     // In case of aborted request do nothing\n     *     if (e.name !== 'AbortError') {\n     *         // handle other exceptions\n     *     }\n     * });\n     * ```\n     * @param {Object[]} pages Array of exported pages.\n     * @param {String} pages[].html pages HTML of the exported page.\n     * @param {Object} config Export config\n     * @param {String} config.exportServer URL of the export server.\n     * @param {String} config.orientation Page orientation. portrait/landscape.\n     * @param {String} config.paperFormat Paper format as supported by puppeteer. A4/A3/...\n     * @param {String} config.fileFormat File format. PDF/PNG.\n     * @param {String} config.fileName Name to use for the saved file.\n     * @param {String} config.clientURL URL to navigate before export. See {@link #config-clientURL}.\n     * @param {String} config.sendAsBinary Tells server whether to return binary file instead of download link.\n     * @returns {Promise} Returns Response instance\n     */\n    receiveExportContent(pages, config) {\n        return AjaxHelper.fetch(\n            config.exportServer,\n            Object.assign({\n                method      : 'POST',\n                credentials : 'omit',\n                headers     : { 'Content-Type' : 'application/json' },\n                body        : JSON.stringify({\n                    html         : pages,\n                    orientation  : config.orientation,\n                    format       : config.paperFormat,\n                    fileFormat   : config.fileFormat,\n                    fileName     : config.fileName,\n                    clientURL    : config.clientURL,\n                    sendAsBinary : config.sendAsBinary\n                })\n            }, this.fetchOptions)\n        );\n    }\n\n    /**\n     * Handles output of the {@link #function-receiveExportContent}. Server response can be of two different types depending\n     * on {@link #config-sendAsBinary} config:\n     * - `application/json` In this case JSON response contains url of the file to download\n     * - `application/octet-stream` In this case response contains stream of file binary data\n     *\n     * If {@link #config-openAfterExport} is true, this method will try to download content.\n     * @param {Response} response\n     * @param {Object} config Export config\n     * @param {String} config.exportServer URL of the export server.\n     * @param {String} config.orientation Page orientation. portrait/landscape.\n     * @param {String} config.paperFormat Paper format as supported by puppeteer. A4/A3/...\n     * @param {String} config.fileFormat File format. PDF/PNG.\n     * @param {String} config.fileName Name to use for the saved file.\n     * @param {String} config.clientURL URL to navigate before export. See {@link #config-clientURL}.\n     * @param {String} config.sendAsBinary Tells server whether to return binary file instead of download link. See {@link #config-sendAsBinary}\n     */\n    async processExportContent(response, config) {\n        const me = this;\n\n        if (response.ok && me.openAfterExport) {\n            // Clone Response to not block response stream\n            response = response.clone();\n\n            const contentType = response.headers.get('content-type');\n\n            if (contentType.match(/application\\/octet-stream/)) {\n                const\n                    MIMEType  = FileMIMEType[config.fileFormat],\n                    objectURL = await me.responseBlobToObjectURL(response, MIMEType),\n                    link      = me.getDownloadLink(config.fileName, objectURL);\n\n                link.click();\n            }\n            else if (contentType.match(/application\\/json/)) {\n                const responseJSON = await response.json();\n\n                if (responseJSON.success) {\n                    const link = me.getDownloadLink(config.fileName, responseJSON.url);\n\n                    link.click();\n                }\n                else {\n                    Toast.show({\n                        html        : responseJSON.msg,\n                        rootElement : this.rootElement\n                    });\n                }\n            }\n        }\n    }\n\n    /**\n     * Creates object URL from response content with given mimeType\n     * @param {Response} response Response instance\n     * @param {String} mimeType\n     * @returns {Promise} Returns string object URL\n     * @private\n     */\n    async responseBlobToObjectURL(response, mimeType) {\n        const blob = await response.blob();\n\n        return URL.createObjectURL(blob.slice(0, blob.size, mimeType));\n    }\n\n    /**\n     * Creates link to download the file.\n     * @param {String} name File name\n     * @param {String} href URL of the resource\n     * @returns {HTMLElement} HTMLAnchorElement\n     * @private\n     */\n    getDownloadLink(name, href) {\n        const link = document.createElement('a');\n\n        link.download = name;\n        link.href = href;\n\n        if (this.openInNewTab) {\n            link.target = '_blank';\n        }\n\n        return link;\n    }\n\n    get defaultExportDialogConfig() {\n        return ObjectHelper.copyProperties({}, this, [\n            'client',\n            'exporters',\n            'exporterType',\n            'orientation',\n            'fileFormat',\n            'paperFormat',\n            'alignRows',\n            'rowsRange',\n            'repeatHeader'\n        ]);\n    }\n\n    changeExportDialog(exportDialog, oldExportDialog) {\n        const me = this;\n\n        oldExportDialog?.destroy();\n\n        if (exportDialog) {\n            const config = me.dialogClass.mergeConfigs({\n                rootElement : me.rootElement,\n                client      : me.client,\n                items       : {\n                    rowsRangeField : {\n                        value : me.rowsRange\n                    },\n\n                    exporterTypeField : {\n                        value : me.exporterType\n                    },\n\n                    orientationField : {\n                        value : me.orientation\n                    },\n\n                    paperFormatField : {\n                        value : me.paperFormat\n                    },\n\n                    repeatHeaderField : {\n                        value : me.repeatHeader\n                    },\n\n                    fileFormatField : {\n                        value : me.fileFormat\n                    },\n\n                    alignRowsField : {\n                        checked : me.alignRows\n                    }\n                }\n            }, me.defaultExportDialogConfig, exportDialog);\n\n            exportDialog = me.dialogClass.new(config);\n\n            exportDialog.ion({\n                export  : me.onExportButtonClick,\n                thisObj : me\n            });\n        }\n\n        return exportDialog;\n    }\n\n    /**\n     * Shows {@link Grid.view.export.ExportDialog export dialog}\n     */\n    async showExportDialog() {\n        return this.exportDialog.show();\n    }\n\n    onExportButtonClick({ values }) {\n        const\n            me         = this,\n            dialogMask = me.exportDialog.mask({\n                progress    : 0,\n                maxProgress : 100,\n                text        : me.exportMask\n            });\n\n        const detacher = me.ion({\n            exportstep({ progress, text, contentGenerated }) {\n                if (contentGenerated) {\n                    me.exportDialog.unmask();\n                    detacher();\n                }\n                else {\n                    dialogMask.progress = progress;\n\n                    if (text != null) {\n                        dialogMask.text = text;\n                    }\n                }\n            }\n        });\n\n        me.currentExportPromise = me.export(values);\n\n        // Clear current export promise\n        me.currentExportPromise.catch(() => {}).finally(() => {\n            detacher();\n            me.exportDialog?.unmask();\n            me.currentExportPromise = null;\n        });\n    }\n\n    showLoadingToast(exportPromise) {\n        const toast = Toast.show({\n            timeout      : 0,\n            showProgress : false,\n            rootElement  : this.rootElement,\n            html         : `\n    <span class=\"b-mask-icon b-icon b-icon-spinner\"></span>\n    <span>${this.L('L{Waiting for response from server}')}</span>\n    <button class=\"b-button\">${this.L('L{Click to abort}')}</button>`\n        });\n\n        EventHelper.on({\n            element : toast.element,\n            click() {\n                exportPromise.abort?.();\n            }\n        });\n\n        return toast;\n    }\n}\n\nGridFeatureManager.registerFeature(PdfExport, false, 'Grid');\n\n// Format expected by export server\n// const pageFormat = {\n//     html       : '',\n//     column     : 1,\n//     number     : 1,\n//     row        : 1,\n//     rowsHeight : 1\n// };\n//\n// const format = {\n//     fileFormat  : 'pdf',\n//     format      : 'A4',\n//     orientation : 'portrait',\n//     range       : 'complete',\n//     html        : { array : JSON.stringify(pageFormat) }\n// };\n"],
  "mappings": "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",
  "names": ["SummaryFormatter", "Target", "Base", "$name", "generateHtml", "column", "records", "cls", "groupRecord", "groupField", "groupValue", "store", "summaries", "sum", "renderer", "summaryRenderer", "html", "forEach", "config", "type", "field", "max", "min", "average", "length", "reduce", "record", "value", "seed", "valueCls", "labelHtml", "label", "valueHtml", "summaryHtml", "String", "includes", "Summary", "InstancePlugin", "configurable", "selectedOnly", "hideFooters", "pluginConfig", "chain", "construct", "grid", "bindStore", "detachListeners", "ion", "name", "change", "thisObj", "doDestroy", "doDisable", "disable", "client", "element", "classList", "add", "updateSummaries", "remove", "eachSubGrid", "subGrid", "scrollable", "syncPartners", "renderRows", "me", "cells", "DomHelper", "children", "selectedRecords", "isFiltered", "storage", "values", "allRecords", "filter", "r", "isSpecialRow", "isSelected", "columns", "_column$summaries", "initialSeed", "Object", "assign", "cellElement", "dataset", "get", "sync", "firstElementChild", "innerHTML", "onStoreChange", "action", "changes", "shouldUpdate", "disabled", "keys", "some", "colField", "Boolean", "updateSelectedOnly", "selectionChange", "refresh", "featureClass", "_$name", "GridFeatureManager", "registerFeature", "ExportRowsCombo", "Combo", "defaultConfig", "editable", "buildItems", "id", "RowsRange", "all", "text", "L", "visible", "initClass", "ExportOrientationCombo", "Orientation", "portrait", "landscape", "buildComboItems", "obj", "fn", "x", "map", "key", "ExportDialog", "Popup", "autoShow", "autoClose", "closable", "centered", "autoSelectVisibleColumns", "hidePNGMultipageOption", "title", "maxHeight", "overflowY", "defaults", "localeClass", "items", "columnsField", "valueField", "displayField", "multiSelect", "weight", "rowsRangeField", "exporterTypeField", "dialog", "parent", "exporters", "exporter", "optionalL", "onChange", "owner", "widgetMap", "alignRowsField", "hidden", "repeatHeaderField", "checked", "fileFormatField", "oldValue", "exporterField", "find", "FileFormat", "png", "_previousDisabled", "_previousValue", "paperFormatField", "orientationField", "bbar", "exportButton", "color", "onClick", "cancelButton", "Error", "columnsStore", "isLeaf", "exportable", "excludeCollapsedRecords", "applyInitialValues", "LocaleManager", "locale", "prio", "width", "labelWidth", "toUpperCase", "PaperFormat", "onBeforeShow", "_super$onBeforeShow", "query", "c", "call", "arguments", "onLocaleChange", "eachWidget", "widget", "Field", "onExportClick", "trigger", "onCancelClick", "hide", "fieldRe", "result", "test", "ref", "replace", "Checkbox", "MultiPageExporter", "Exporter", "exportingPageText", "stateNextPage", "rowsRange", "enableDirectRendering", "exportMeta", "currentPage", "verticalPosition", "lastExportedRowBottom", "verticalPages", "horizontalPosition", "currentPageTopMargin", "lastTop", "lastRowIndex", "rowManager", "firstVisibleRow", "dataIndex", "lastRowDataIndex", "scrollRowIntoView", "firstVisibleDataIndex", "block", "prepareComponent", "headerTpl", "footerTpl", "alignRows", "paperFormat", "isPortrait", "orientation", "paperWidth", "height", "paperHeight", "pageWidth", "inchToPx", "pageHeight", "onlyVisibleRows", "horizontalPages", "Math", "ceil", "totalWidth", "contentHeight", "measureElement", "totalPages", "totalHeight", "totalRows", "count", "getVisibleRowsCount", "headerHeight", "footerHeight", "bodyHeight", "scrollHeight", "rowHeight", "rowOffsetHeight", "rowsOnFirstPage", "floor", "rowsPerPage", "remainingRows", "adjustRowBuffer", "restoreComponent", "restoreRowBuffer", "collectRows", "subGrids", "rows", "onlyVisible", "hasMergeCells", "hasActiveFeature", "remainingHeight", "index", "findIndex", "bottom", "y", "firstRowIndex", "overflowingHeight", "top", "lastDataIndex", "offset", "row", "offsetHeight", "collectRow", "subGridName", "mergedCells", "querySelectorAll", "mergedCellsHtml", "mergedCell", "push", "outerHTML", "lastRow", "exactGridHeight", "footerContainer", "headerContainer", "onRowsCollected", "slice", "scrollableTopMargin", "detacher", "offsetRows", "fakeRow", "previousTop", "render", "getAt", "translate", "renderMergedCells", "buildPage", "getVirtualScrollerHeight", "header", "footer", "prepareHTML", "buildPageHtml", "prepareExportElement", "placeHolder", "placeHolderText", "contentHtml", "join", "querySelector", "style", "marginTop", "prototype", "pagesExtractor", "stylesheets", "progress", "round", "styles", "pageTpl", "MultiPageVerticalExporter", "processedRows", "size", "estimateTotalPages", "repeatHeader", "scale", "getScaleValue", "bodyElement", "initialScroll", "rowsHeight", "firstRow", "lastVisibleRow", "finishRowIndex", "Set", "clientHeaderHeight", "nextPageTop", "gridHeight", "SinglePageExporter", "localize", "centerContentHorizontally", "positionRows", "currentTop", "lastProcessedRowIndex", "firstNewRowIndex", "lastNewRowIndex", "fromIndex", "toIndex", "i", "totalClientHeight", "widthScale", "heightScale", "BrowserHelper", "isIE11", "PdfExport", "dialogClass", "exportServer", "undefined", "exportDialog", "$config", "fileName", "fileFormat", "clientURL", "keepRegionSizes", "pagesPerRequest", "exporterConfig", "exporterType", "translateURLsToAbsolute", "keepPathName", "openAfterExport", "sendAsBinary", "openInNewTab", "fetchOptions", "exportMask", "exportProgressMask", "showErrorToast", "localizableProperties", "filterStyles", "updateEnableDirectRendering", "VersionHelper", "deprecate", "_this$exportDialog", "destroy", "exportersMap", "currentExportPromise", "_currentExportPromise", "_exportersMap", "Map", "getExporter", "has", "exporterClass", "ObjectHelper", "clone", "relayAll", "set", "buildExportConfig", "visibleColumns", "$$name", "export", "isExporting", "mask", "_me$exportDialog", "pages", "isDestroying", "close", "unmask", "contentGenerated", "responsePromise", "receiveExportContent", "toast", "showLoadingToast", "response", "processExportContent", "error", "Response", "_me$exportDialog2", "Toast", "show", "rootElement", "ok", "AjaxHelper", "fetch", "method", "credentials", "headers", "body", "JSON", "stringify", "format", "contentType", "match", "MIMEType", "FileMIMEType", "objectURL", "responseBlobToObjectURL", "getDownloadLink", "click", "responseJSON", "json", "success", "url", "msg", "mimeType", "blob", "URL", "createObjectURL", "href", "link", "document", "createElement", "download", "target", "defaultExportDialogConfig", "copyProperties", "changeExportDialog", "oldExportDialog", "mergeConfigs", "new", "onExportButtonClick", "showExportDialog", "dialogMask", "maxProgress", "exportstep", "catch", "finally", "_me$exportDialog3", "exportPromise", "timeout", "showProgress", "EventHelper", "on", "_exportPromise$abort", "abort"]
}
