{
  "version": 3,
  "sources": ["../../../Engine/lib/Engine/quark/model/gantt/ConstrainedByParentMixin.js", "../../../Engine/lib/Engine/quark/model/gantt/ConstrainedLateEventMixin.js", "../../../Engine/lib/Engine/quark/model/gantt/ScheduledByDependenciesLateEventMixin.js", "../../../Engine/lib/Engine/quark/model/gantt/scheduling_modes/FixedEffortDispatcher.js", "../../../Engine/lib/Engine/quark/model/gantt/scheduling_modes/FixedEffortMixin.js", "../../../Engine/lib/Engine/quark/model/gantt/scheduling_modes/FixedUnitsDispatcher.js", "../../../Engine/lib/Engine/quark/model/gantt/scheduling_modes/FixedUnitsMixin.js", "../../../Engine/lib/Engine/quark/model/gantt/InactiveEventMixin.js", "../../../Engine/lib/Engine/quark/model/gantt/GanttEvent.js", "../../../Engine/lib/Engine/quark/model/gantt/HasCriticalPathsMixin.js", "../../../Engine/lib/Engine/quark/model/gantt/GanttProjectMixin.js", "../../../Gantt/lib/Gantt/column/AddNewColumn.js", "../../../Gantt/lib/Gantt/widget/CalendarPicker.js", "../../../Gantt/lib/Gantt/column/CalendarColumn.js", "../../../Gantt/lib/Gantt/column/GanttDateColumn.js", "../../../Gantt/lib/Gantt/column/ConstraintDateColumn.js", "../../../Gantt/lib/Gantt/column/ConstraintTypeColumn.js", "../../../Gantt/lib/Gantt/column/DeadlineDateColumn.js", "../../../Gantt/lib/Gantt/column/EarlyEndDateColumn.js", "../../../Gantt/lib/Gantt/column/EarlyStartDateColumn.js", "../../../Gantt/lib/Gantt/column/EffortColumn.js", "../../../Gantt/lib/Gantt/column/EndDateColumn.js", "../../../Gantt/lib/Gantt/column/IgnoreResourceCalendarColumn.js", "../../../Gantt/lib/Gantt/column/InactiveColumn.js", "../../../Gantt/lib/Gantt/column/LateEndDateColumn.js", "../../../Gantt/lib/Gantt/column/LateStartDateColumn.js", "../../../Gantt/lib/Gantt/column/ManuallyScheduledColumn.js", "../../../Gantt/lib/Gantt/column/MilestoneColumn.js", "../../../Gantt/lib/Gantt/column/NameColumn.js", "../../../Gantt/lib/Gantt/column/NoteColumn.js", "../../../Gantt/lib/Gantt/column/PercentDoneColumn.js", "../../../Gantt/lib/Gantt/widget/DependencyField.js", "../../../Gantt/lib/Gantt/column/DependencyColumn.js", "../../../Gantt/lib/Gantt/column/PredecessorColumn.js", "../../../Gantt/lib/Gantt/data/AssignmentsManipulationStore.js", "../../../Gantt/lib/Gantt/model/AssignmentModel.js", "../../../Gantt/lib/Gantt/localization/En.js", "../../../Gantt/lib/Gantt/column/ResourceAssignmentGridResourceColumn.js", "../../../Gantt/lib/Gantt/widget/AssignmentGrid.js", "../../../Gantt/lib/Gantt/widget/AssignmentPicker.js", "../../../Gantt/lib/Gantt/widget/AssignmentField.js", "../../../Gantt/lib/Gantt/column/ResourceAssignmentColumn.js", "../../../Gantt/lib/Gantt/column/RollupColumn.js", "../../../Gantt/lib/Gantt/column/SchedulingModeColumn.js", "../../../Gantt/lib/Gantt/column/SequenceColumn.js", "../../../Gantt/lib/Gantt/column/ShowInTimelineColumn.js", "../../../Gantt/lib/Gantt/column/StartDateColumn.js", "../../../Gantt/lib/Gantt/column/SuccessorColumn.js", "../../../Gantt/lib/Gantt/column/TotalSlackColumn.js", "../../../Gantt/lib/Gantt/column/WBSColumn.js", "../../../Gantt/lib/Gantt/column/AllColumns.js", "../../../Gantt/lib/Gantt/column/EventModeColumn.js", "../../../Gantt/lib/Gantt/column/TimeAxisColumn.js", "../../../Gantt/lib/Gantt/data/AssignmentStore.js", "../../../Gantt/lib/Gantt/model/CalendarModel.js", "../../../Gantt/lib/Gantt/data/CalendarManagerStore.js", "../../../Gantt/lib/Gantt/model/DependencyModel.js", "../../../Gantt/lib/Gantt/data/DependencyStore.js", "../../../Gantt/lib/Gantt/model/ResourceModel.js", "../../../Gantt/lib/Gantt/data/ResourceStore.js", "../../../Gantt/lib/Gantt/model/Baseline.js", "../../../Gantt/lib/Gantt/data/field/WbsField.js", "../../../Gantt/lib/Gantt/model/TaskModel.js", "../../../Gantt/lib/Gantt/data/TaskStore.js", "../../../Gantt/lib/Gantt/feature/Baselines.js", "../../../Gantt/lib/Gantt/feature/CellEdit.js", "../../../Gantt/lib/Gantt/feature/CriticalPaths.js", "../../../Gantt/lib/Gantt/feature/Dependencies.js", "../../../Gantt/lib/Gantt/feature/Indicators.js", "../../../Gantt/lib/Gantt/feature/Labels.js", "../../../Gantt/lib/Gantt/feature/ParentArea.js", "../../../Gantt/lib/Gantt/feature/ProgressLine.js", "../../../Gantt/lib/Gantt/feature/ProjectLines.js", "../../../Gantt/lib/Gantt/feature/Rollups.js", "../../../Gantt/lib/Gantt/feature/Summary.js", "../../../Gantt/lib/Gantt/feature/TaskCopyPaste.js", "../../../Gantt/lib/Gantt/feature/TaskDrag.js", "../../../Gantt/lib/Gantt/feature/TaskDragCreate.js", "../../../Gantt/lib/Gantt/widget/TaskEditor.js", "../../../Gantt/lib/Gantt/feature/TaskEdit.js", "../../../Gantt/lib/Gantt/feature/TaskMenu.js", "../../../Gantt/lib/Gantt/feature/TaskNonWorkingTime.js", "../../../Gantt/lib/Gantt/feature/TaskResize.js", "../../../Gantt/lib/Gantt/feature/TaskSegmentDrag.js", "../../../Gantt/lib/Gantt/feature/TaskSegmentResize.js", "../../../Gantt/lib/Gantt/feature/TaskTooltip.js", "../../../Gantt/lib/Gantt/feature/TreeGroup.js", "../../../Gantt/lib/Gantt/feature/Versions.js", "../../../Gantt/lib/Gantt/feature/export/exporter/GanttExporterMixin.js", "../../../Gantt/lib/Gantt/feature/export/exporter/MultiPageExporter.js", "../../../Gantt/lib/Gantt/feature/export/exporter/MultiPageVerticalExporter.js", "../../../Gantt/lib/Gantt/feature/export/exporter/SinglePageExporter.js", "../../../Gantt/lib/Gantt/feature/export/PdfExport.js", "../../../Gantt/lib/Gantt/model/CalendarIntervalModel.js", "../../../Gantt/lib/Gantt/model/ProjectModel.js", "../../../Gantt/lib/Gantt/model/WebSocketProjectModel.js", "../../../Gantt/lib/Gantt/util/ProjectGenerator.js", "../../../Gantt/lib/Gantt/util/ResourceAssignmentParser.js", "../../../Gantt/lib/Gantt/feature/export/MspExport.js", "../../../Gantt/lib/Gantt/view/mixin/GanttDom.js", "../../../Gantt/lib/Gantt/view/mixin/GanttRegions.js", "../../../Gantt/lib/Gantt/view/mixin/GanttScroll.js", "../../../Gantt/lib/Gantt/view/mixin/GanttState.js", "../../../Gantt/lib/Gantt/view/mixin/GanttStores.js", "../../../Gantt/lib/Gantt/view/mixin/GanttTimelineDateMapper.js", "../../../Gantt/lib/Gantt/view/mixin/TaskNavigation.js", "../../../Gantt/lib/Gantt/view/orientation/NewTaskRendering.js", "../../../Gantt/lib/Gantt/view/GanttBase.js", "../../../Gantt/lib/Gantt/view/Gantt.js", "../../../Gantt/bundle/entry.thin.js"],
  "sourcesContent": ["var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Mixin } from '../../../../ChronoGraph/class/Mixin.js';\nimport { prototypeValue } from '../../../../ChronoGraph/util/Helpers.js';\nimport DateHelper from '../../../../Core/helper/DateHelper.js';\nimport Localizable from '../../../../Core/localization/Localizable.js';\nimport { ConflictResolution, ConstraintInterval, ConstraintIntervalDescription } from '../../../chrono/Conflict.js';\nimport { ConstraintIntervalSide, Direction } from \"../../../scheduling/Types.js\";\nimport { format } from '../../../util/Functions.js';\nimport { BaseEventMixin } from '../scheduler_basic/BaseEventMixin.js';\nimport { HasChildrenMixin } from '../scheduler_basic/HasChildrenMixin.js';\nimport { ConstrainedEarlyEventMixin } from '../scheduler_pro/ConstrainedEarlyEventMixin.js';\nimport \"../../../localization/En.js\";\n//---------------------------------------------------------------------------------------------------------------------\n/**\n * This mixin makes the event to \"inherit\" the constraints from its parent event.\n */\nexport class ConstrainedByParentMixin extends Mixin([BaseEventMixin, HasChildrenMixin, ConstrainedEarlyEventMixin], (base) => {\n    const superProto = base.prototype;\n    class ConstrainedByParentMixin extends base {\n        *maybeSkipNonWorkingTime(date, isForward = true) {\n            const childEvents = yield this.$.childEvents;\n            // summary tasks are simply aligned by their children so they should not skip non-working time at all\n            if (childEvents.size > 0)\n                return date;\n            return yield* superProto.maybeSkipNonWorkingTime.call(this, date, isForward);\n        }\n        *calculateStartDateConstraintIntervals() {\n            const intervals = yield* superProto.calculateStartDateConstraintIntervals.call(this);\n            const parentEvent = yield this.$.parentEvent;\n            if (parentEvent?.graph) {\n                // Child inherits its parent task constraints\n                const parentIntervals = yield parentEvent.$.startDateConstraintIntervals;\n                intervals.push.apply(intervals, parentIntervals);\n            }\n            return intervals;\n        }\n        *calculateEndDateConstraintIntervals() {\n            const intervals = yield* superProto.calculateEndDateConstraintIntervals.call(this);\n            const parentEvent = yield this.$.parentEvent;\n            if (parentEvent?.graph) {\n                // Child inherits its parent task constraints\n                const parentIntervals = yield parentEvent.$.endDateConstraintIntervals;\n                intervals.push.apply(intervals, parentIntervals);\n            }\n            return intervals;\n        }\n        *calculateEarlyStartDateConstraintIntervals() {\n            const intervals = yield* superProto.calculateEarlyStartDateConstraintIntervals.call(this);\n            const parentEvent = yield this.$.parentEvent;\n            if (parentEvent?.graph) {\n                // Child inherits its parent task constraints\n                const parentIntervals = yield parentEvent.$.earlyStartDateConstraintIntervals;\n                intervals.push.apply(intervals, parentIntervals);\n                // If the parent is scheduled manually it should still restrict its children (even though it has no a constraint set)\n                // so we append an artificial constraining interval\n                if ((yield parentEvent.$.manuallyScheduled) && (yield this.$.direction) === Direction.Forward) {\n                    intervals.push(ManuallyScheduledParentConstraintInterval.new({\n                        side: ConstraintIntervalSide.Start,\n                        startDate: yield parentEvent.$.startDate\n                    }));\n                }\n            }\n            return intervals;\n        }\n        *calculateEarlyEndDateConstraintIntervals() {\n            const intervals = yield* superProto.calculateEarlyEndDateConstraintIntervals.call(this);\n            const parentEvent = yield this.$.parentEvent;\n            if (parentEvent?.graph) {\n                // Child inherits its parent task constraints\n                const parentIntervals = yield parentEvent.$.earlyEndDateConstraintIntervals;\n                intervals.push.apply(intervals, parentIntervals);\n            }\n            return intervals;\n        }\n    }\n    return ConstrainedByParentMixin;\n}) {\n}\n/**\n * Class implements resolving a scheduling conflict happened due to a parent event\n * [[ConstrainedByParentMixin.manuallyScheduled|manually scheduled state]].\n * It resolves the conflict by setting the event [[ConstrainedByParentMixin.manuallyScheduled|manuallyScheduled]] to `false`.\n */\nexport class DisableManuallyScheduledConflictResolution extends Localizable(ConflictResolution) {\n    static get $name() {\n        return 'RemoveManuallyScheduledParentConstraintConflictResolution';\n    }\n    construct() {\n        super.construct(...arguments);\n        this.event = this.interval.owner;\n    }\n    getDescription() {\n        const { event } = this;\n        return format(this.L('L{descriptionTpl}'), event.name || event.id);\n    }\n    /**\n     * Resolves the conflict by setting the event [[ConstrainedByParentMixin.manuallyScheduled|manuallyScheduled]] to `false`.\n     */\n    resolve() {\n        this.event.manuallyScheduled = false;\n    }\n}\n/**\n * Description builder for an [[ManuallyScheduledParentConstraintInterval|manual parent constraint interval]].\n */\nexport class ManuallyScheduledParentConstraintIntervalDescription extends ConstraintIntervalDescription {\n    static get $name() {\n        return 'ManuallyScheduledParentConstraintIntervalDescription';\n    }\n    /**\n     * Returns description for the provided event constraint interval.\n     * @param interval Constraint interval\n     */\n    static getDescription(interval) {\n        let tpl;\n        switch (interval.side) {\n            case ConstraintIntervalSide.Start:\n                tpl = this.L('L{startDescriptionTpl}');\n                break;\n            case ConstraintIntervalSide.End:\n                tpl = this.L('L{endDescriptionTpl}');\n                break;\n        }\n        return format(tpl, ...this.getDescriptionParameters(interval));\n    }\n    static getDescriptionParameters(interval) {\n        const event = interval.owner;\n        return [\n            DateHelper.format(interval.startDate, this.L('L{dateFormat}')),\n            DateHelper.format(interval.endDate, this.L('L{dateFormat}')),\n            event.name || event.id\n        ];\n    }\n}\n/**\n * Class implements an interval applied by a [[ConstrainedByParentMixin.manuallyScheduled|manually scheduled]] parent event.\n * The interval suggests the only resolution option - disabling [[ConstrainedByParentMixin.manuallyScheduled|manually scheduled]] mode.\n */\nexport class ManuallyScheduledParentConstraintInterval extends ConstraintInterval {\n    getDescription() {\n        return this.descriptionBuilderClass.getDescription(this);\n    }\n    isAffectedByTransaction(transaction) {\n        const event = this.owner;\n        transaction = transaction || event.graph.activeTransaction;\n        const manuallyScheduledQuark = transaction.entries.get(event.$.manuallyScheduled);\n        // new constrained event or modified constraint\n        return !transaction.baseRevision.hasIdentifier(event.$$) ||\n            manuallyScheduledQuark && !manuallyScheduledQuark.isShadow();\n    }\n    /**\n     * Returns possible resolution options for cases when\n     * the interval takes part in a conflict.\n     *\n     * The interval suggests the only resolution option - disabling manual scheduling.\n     */\n    getResolutions() {\n        return this.resolutions || (this.resolutions = [\n            this.resetManuallyScheduledConflictResolutionClass.new({ interval: this })\n        ]);\n    }\n}\n__decorate([\n    prototypeValue(DisableManuallyScheduledConflictResolution)\n], ManuallyScheduledParentConstraintInterval.prototype, \"resetManuallyScheduledConflictResolutionClass\", void 0);\n__decorate([\n    prototypeValue(ManuallyScheduledParentConstraintIntervalDescription)\n], ManuallyScheduledParentConstraintInterval.prototype, \"descriptionBuilderClass\", void 0);\n", "var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Reject } from \"../../../../ChronoGraph/chrono/Effect.js\";\nimport { Mixin } from '../../../../ChronoGraph/class/BetterMixin.js';\nimport { calculate, field } from '../../../../ChronoGraph/replica/Entity.js';\nimport DateHelper from '../../../../Core/helper/DateHelper.js';\nimport { dateConverter, model_field } from '../../../chrono/ModelFieldAtom.js';\nimport { Direction, TimeUnit, ConstraintIntervalSide } from '../../../scheduling/Types.js';\nimport { MAX_DATE, MIN_DATE, isDateFinite } from \"../../../util/Constants.js\";\nimport { HasChildrenMixin } from '../scheduler_basic/HasChildrenMixin.js';\nimport { ConstrainedEarlyEventMixin, EarlyLateLazyness } from \"../scheduler_pro/ConstrainedEarlyEventMixin.js\";\nimport { ConflictEffect } from '../../../chrono/Conflict.js';\nimport { EffectResolutionResult } from \"../../../chrono/SchedulingIssueEffect.js\";\nimport { ManuallyScheduledParentConstraintInterval } from \"./ConstrainedByParentMixin.js\";\n//---------------------------------------------------------------------------------------------------------------------\n/**\n * This mixin provides the constraint-based as-late-as-possible scheduling. See the [[ConstrainedEarlyEventMixin]]\n * for the description of the ASAP constraints-based scheduling. See [[GanttProjectMixin]] for more details about\n * forward/backward, ASAP/ALAP scheduling.\n *\n * It also provides the facilities for calculating the event's [[totalSlack]] and the [[critical]] flag.\n *\n * The ALAP-specific constraints are accumulated in [[lateStartDateConstraintIntervals]], [[lateEndDateConstraintIntervals]] fields.\n */\nexport class ConstrainedLateEventMixin extends Mixin([ConstrainedEarlyEventMixin, HasChildrenMixin], (base) => {\n    const superProto = base.prototype;\n    class ConstrainedLateEventMixin extends base {\n        /**\n         * Calculation method for the [[lateStartDateConstraintIntervals]]. Returns empty array by default.\n         * Override this method to return some extra constraints for the start date during the ALAP scheduling.\n         */\n        *calculateLateStartDateConstraintIntervals() {\n            const intervals = [];\n            const parentEvent = yield this.$.parentEvent;\n            if (parentEvent) {\n                // Child inherits its parent task constraints\n                const parentIntervals = yield parentEvent.$.lateStartDateConstraintIntervals;\n                intervals.push.apply(intervals, parentIntervals);\n            }\n            return intervals;\n        }\n        /**\n         * Calculation method for the [[lateEndDateConstraintIntervals]]. Returns empty array by default.\n         * Override this method to return some extra constraints for the end date during the ALAP scheduling.\n         */\n        *calculateLateEndDateConstraintIntervals() {\n            const intervals = [];\n            const parentEvent = yield this.$.parentEvent;\n            if (parentEvent) {\n                // Child inherits its parent task constraints\n                const parentIntervals = yield parentEvent.$.lateEndDateConstraintIntervals;\n                intervals.push.apply(intervals, parentIntervals);\n                // If the parent is scheduled manually it should still restrict its children (even though it has no a constraint set)\n                // so we append an artificial constraining interval\n                if ((yield parentEvent.$.manuallyScheduled) && (yield this.$.direction) === Direction.Backward) {\n                    intervals.push(ManuallyScheduledParentConstraintInterval.new({\n                        side: ConstraintIntervalSide.End,\n                        endDate: yield parentEvent.$.endDate\n                    }));\n                }\n            }\n            return intervals;\n        }\n        /**\n         * The method defines wether the provided child event should be\n         * taken into account when calculating this summary event [[lateStartDate]].\n         * Child events roll up their [[lateStartDate]] values to their summary tasks.\n         * So a summary task [[lateStartDate]] date gets equal to its minimal child [[lateStartDate]].\n         *\n         * If the method returns `true` the child event is taken into account\n         * and if the method returns `false` it's not.\n         * By default the method returns `true` to include all child events data.\n         * @param childEvent Child event to consider.\n         * @returns `true` if the provided event should be taken into account, `false` if not.\n         */\n        *shouldRollupChildLateStartDate(childEvent) {\n            return true;\n        }\n        *calculateMinChildrenLateStartDate() {\n            let result = MAX_DATE;\n            const subEventsIterator = yield* this.subEventsIterable();\n            for (let childEvent of subEventsIterator) {\n                if (!(yield* this.shouldRollupChildLateStartDate(childEvent)))\n                    continue;\n                let childDate;\n                if ((yield childEvent.$.manuallyScheduled) && (yield* childEvent.hasSubEvents())) {\n                    childDate = yield childEvent.$.minChildrenLateStartDate;\n                }\n                childDate = childDate || (yield childEvent.$.lateStartDate);\n                if (childDate && childDate < result)\n                    result = childDate;\n            }\n            return result.getTime() - MAX_DATE.getTime() ? result : null;\n        }\n        *calculateLateStartDateRaw() {\n            // Manually scheduled task treat its current start date as late start date\n            // in case of backward scheduling.\n            // Early dates in that case are calculated the same way it happens for automatic tasks\n            if ((yield this.$.manuallyScheduled) && (yield this.$.direction) === Direction.Backward) {\n                return yield this.$.startDate;\n            }\n            // Parent task calculate its late start date as minimal late start date of its children\n            if (yield* this.hasSubEvents()) {\n                return yield this.$.minChildrenLateStartDate;\n            }\n            if (!(yield* this.isConstrainedLate())) {\n                return yield this.$.startDate;\n            }\n            // need to use concat instead of directly mutating the `startDateConstraintIntervals` since that is\n            // used as storage for `this.$.lateStartDateConstraintIntervals`\n            const startDateConstraintIntervals = (yield this.$.lateStartDateConstraintIntervals).concat(yield this.$.startDateConstraintIntervals);\n            const endDateConstraintIntervals = (yield this.$.lateEndDateConstraintIntervals).concat(yield this.$.endDateConstraintIntervals);\n            let effectiveInterval = yield* this.calculateEffectiveConstraintInterval(true, startDateConstraintIntervals, endDateConstraintIntervals);\n            if (effectiveInterval === null) {\n                return null;\n            }\n            else if (effectiveInterval.isIntervalEmpty()) {\n                // re-calculate effective resulting interval gathering intersection history\n                effectiveInterval = yield* this.calculateEffectiveConstraintInterval(true, startDateConstraintIntervals, endDateConstraintIntervals, true);\n                const conflict = ConflictEffect.new({\n                    intervals: [...effectiveInterval.intersectionOf]\n                });\n                if ((yield conflict) === EffectResolutionResult.Cancel) {\n                    yield Reject(conflict);\n                }\n                else {\n                    return null;\n                }\n            }\n            return isDateFinite(effectiveInterval.endDate) ? effectiveInterval.endDate : null;\n        }\n        /**\n         * The method defines wether the provided child event should be\n         * taken into account when calculating this summary event [[lateEndDate]].\n         * Child events roll up their [[lateEndDate]] values to their summary tasks.\n         * So a summary task [[lateEndDate]] gets equal to its maximal child [[lateEndDate]].\n         *\n         * If the method returns `true` the child event is taken into account\n         * and if the method returns `false` it's not.\n         * By default the method returns `true` to include all child events data.\n         * @param childEvent Child event to consider.\n         * @returns `true` if the provided event should be taken into account, `false` if not.\n         */\n        *shouldRollupChildLateEndDate(childEvent) {\n            return true;\n        }\n        *calculateMaxChildrenLateEndDate() {\n            let result = MIN_DATE;\n            const subEventsIterator = yield* this.subEventsIterable();\n            for (let childEvent of subEventsIterator) {\n                if (!(yield* this.shouldRollupChildLateEndDate(childEvent)))\n                    continue;\n                let childDate;\n                if ((yield childEvent.$.manuallyScheduled) && (yield* childEvent.hasSubEvents())) {\n                    childDate = yield childEvent.$.maxChildrenLateEndDate;\n                }\n                childDate = childDate || (yield childEvent.$.lateEndDate);\n                if (childDate && childDate > result)\n                    result = childDate;\n            }\n            return result.getTime() - MIN_DATE.getTime() ? result : null;\n        }\n        *calculateLateStartDate() {\n            return yield this.$.lateStartDateRaw;\n        }\n        *calculateLateEndDateRaw() {\n            // Manually scheduled task treat its current end date as late end date\n            // in case of backward scheduling.\n            // Early dates in that case are calculated the same way it happens for automatic tasks\n            if ((yield this.$.manuallyScheduled) && (yield this.$.direction) === Direction.Backward) {\n                return yield this.$.endDate;\n            }\n            // Parent task calculate its late end date as minimal early end date of its children\n            if (yield* this.hasSubEvents()) {\n                return yield this.$.maxChildrenLateEndDate;\n            }\n            if (!(yield* this.isConstrainedLate())) {\n                return yield this.$.endDate;\n            }\n            const startDateConstraintIntervals = yield this.$.lateStartDateConstraintIntervals;\n            const endDateConstraintIntervals = yield this.$.lateEndDateConstraintIntervals;\n            let effectiveInterval = (yield* this.calculateEffectiveConstraintInterval(false, \n            // need to use concat instead of directly mutating the `startDateConstraintIntervals` since that is\n            // used as storage for `this.$.lateStartDateConstraintIntervals`\n            startDateConstraintIntervals.concat(yield this.$.startDateConstraintIntervals), endDateConstraintIntervals.concat(yield this.$.endDateConstraintIntervals)));\n            if (effectiveInterval === null) {\n                return null;\n            }\n            else if (effectiveInterval.isIntervalEmpty()) {\n                // re-calculate effective resulting interval gathering intersection history\n                effectiveInterval = (yield* this.calculateEffectiveConstraintInterval(false, \n                // need to use concat instead of directly mutating the `startDateConstraintIntervals` since that is\n                // used as storage for `this.$.lateStartDateConstraintIntervals`\n                (yield this.$.lateStartDateConstraintIntervals).concat(yield this.$.startDateConstraintIntervals), (yield this.$.lateEndDateConstraintIntervals).concat(yield this.$.endDateConstraintIntervals), true));\n                const conflict = ConflictEffect.new({\n                    intervals: [...effectiveInterval.intersectionOf]\n                });\n                if ((yield conflict) === EffectResolutionResult.Cancel) {\n                    yield Reject(conflict);\n                }\n                else {\n                    return null;\n                }\n            }\n            return isDateFinite(effectiveInterval.endDate) ? effectiveInterval.endDate : null;\n        }\n        *calculateLateEndDate() {\n            const date = yield this.$.lateEndDateRaw;\n            return yield* this.maybeSkipNonWorkingTime(date, false);\n        }\n        *calculateTotalSlack() {\n            const earlyStartDate = yield this.$.earlyStartDateRaw;\n            const lateStartDate = yield this.$.lateStartDateRaw;\n            const earlyEndDate = yield this.$.earlyEndDateRaw;\n            const lateEndDate = yield this.$.lateEndDateRaw;\n            const slackUnit = yield this.$.slackUnit;\n            let endSlack, result;\n            if ((earlyStartDate && lateStartDate) || (earlyEndDate && lateEndDate)) {\n                if (earlyStartDate && lateStartDate) {\n                    result = yield* this.calculateProjectedDuration(earlyStartDate, lateStartDate, slackUnit);\n                    if (earlyEndDate && lateEndDate) {\n                        endSlack = yield* this.calculateProjectedDuration(earlyEndDate, lateEndDate, slackUnit);\n                        if (endSlack < result)\n                            result = endSlack;\n                    }\n                }\n                else if (earlyEndDate && lateEndDate) {\n                    result = yield* this.calculateProjectedDuration(earlyEndDate, lateEndDate, slackUnit);\n                }\n            }\n            return result;\n        }\n        *calculateCritical() {\n            const totalSlack = yield this.$.totalSlack;\n            return totalSlack <= 0;\n        }\n        *isConstrainedLate() {\n            const startDateIntervals = yield this.$.startDateConstraintIntervals;\n            const endDateIntervals = yield this.$.endDateConstraintIntervals;\n            const lateStartDateConstraintIntervals = yield this.$.lateStartDateConstraintIntervals;\n            const lateEndDateConstraintIntervals = yield this.$.lateEndDateConstraintIntervals;\n            return Boolean(startDateIntervals?.length || endDateIntervals?.length || lateStartDateConstraintIntervals?.length || lateEndDateConstraintIntervals?.length);\n        }\n        *calculateStartDatePure() {\n            const direction = yield this.$.direction;\n            if (direction === Direction.Backward) {\n                // early exit if this mixin is not applicable, but only after(!) the direction check\n                // this is because the `isConstrainedLate` yield early constraint intervals, which are generally lazy,\n                // depending on the direction\n                if (!(yield* this.isConstrainedLate()) || (yield this.$.manuallyScheduled) || (yield this.$.unscheduled)) {\n                    return yield* superProto.calculateStartDatePure.call(this);\n                }\n                return yield this.$.lateStartDate;\n            }\n            else {\n                return yield* superProto.calculateStartDatePure.call(this);\n            }\n        }\n        *calculateStartDateProposed() {\n            const direction = yield this.$.direction;\n            switch (direction) {\n                case Direction.Backward:\n                    // early exit if this mixin is not applicable, but only after(!) the direction check\n                    // this is because the `isConstrainedLate` yield early constraint intervals, which are generally lazy,\n                    // depending on the direction\n                    if (!(yield* this.isConstrainedLate()) || (yield this.$.manuallyScheduled) || (yield this.$.unscheduled)) {\n                        return yield* superProto.calculateStartDateProposed.call(this);\n                    }\n                    return (yield this.$.lateStartDate) || (yield* superProto.calculateStartDateProposed.call(this));\n                default:\n                    return yield* superProto.calculateStartDateProposed.call(this);\n            }\n        }\n        *calculateEndDatePure() {\n            const direction = yield this.$.direction;\n            if (direction === Direction.Backward) {\n                // early exit if this mixin is not applicable, but only after(!) the direction check\n                // this is because the `isConstrainedLate` yield early constraint intervals, which are generally lazy,\n                // depending on the direction\n                if (!(yield* this.isConstrainedLate()) || (yield this.$.manuallyScheduled) || (yield this.$.unscheduled)) {\n                    return yield* superProto.calculateEndDatePure.call(this);\n                }\n                return yield this.$.lateEndDate;\n            }\n            else {\n                return yield* superProto.calculateEndDatePure.call(this);\n            }\n        }\n        *calculateEndDateProposed() {\n            const direction = yield this.$.direction;\n            switch (direction) {\n                case Direction.Backward:\n                    // early exit if this mixin is not applicable, but only after(!) the direction check\n                    // this is because the `isConstrainedLate` yield early constraint intervals, which are generally lazy,\n                    // depending on the direction\n                    if (!(yield* this.isConstrainedLate()) || (yield this.$.manuallyScheduled) || (yield this.$.unscheduled)) {\n                        return yield* superProto.calculateEndDateProposed.call(this);\n                    }\n                    return (yield this.$.lateEndDate) || (yield* superProto.calculateEndDateProposed.call(this));\n                default:\n                    return yield* superProto.calculateEndDateProposed.call(this);\n            }\n        }\n    }\n    __decorate([\n        field({ lazy: EarlyLateLazyness })\n    ], ConstrainedLateEventMixin.prototype, \"minChildrenLateStartDate\", void 0);\n    __decorate([\n        field({ lazy: EarlyLateLazyness })\n    ], ConstrainedLateEventMixin.prototype, \"lateStartDateRaw\", void 0);\n    __decorate([\n        model_field({ type: 'date', persist: false }, { lazy: EarlyLateLazyness, converter: dateConverter, persistent: false })\n    ], ConstrainedLateEventMixin.prototype, \"lateStartDate\", void 0);\n    __decorate([\n        field({ lazy: EarlyLateLazyness })\n    ], ConstrainedLateEventMixin.prototype, \"maxChildrenLateEndDate\", void 0);\n    __decorate([\n        field({ lazy: EarlyLateLazyness })\n    ], ConstrainedLateEventMixin.prototype, \"lateEndDateRaw\", void 0);\n    __decorate([\n        model_field({ type: 'date', persist: false }, { lazy: EarlyLateLazyness, converter: dateConverter, persistent: false })\n    ], ConstrainedLateEventMixin.prototype, \"lateEndDate\", void 0);\n    __decorate([\n        field({ lazy: EarlyLateLazyness })\n    ], ConstrainedLateEventMixin.prototype, \"lateStartDateConstraintIntervals\", void 0);\n    __decorate([\n        field({ lazy: EarlyLateLazyness })\n    ], ConstrainedLateEventMixin.prototype, \"lateEndDateConstraintIntervals\", void 0);\n    __decorate([\n        model_field({ type: 'number', persist: false }, { lazy: EarlyLateLazyness, persistent: false })\n    ], ConstrainedLateEventMixin.prototype, \"totalSlack\", void 0);\n    __decorate([\n        model_field({ type: 'string', defaultValue: TimeUnit.Day, persist: false }, { lazy: EarlyLateLazyness, converter: DateHelper.normalizeUnit, persistent: false })\n    ], ConstrainedLateEventMixin.prototype, \"slackUnit\", void 0);\n    __decorate([\n        model_field({ type: 'boolean', defaultValue: false, persist: false }, { persistent: false, lazy: EarlyLateLazyness })\n    ], ConstrainedLateEventMixin.prototype, \"critical\", void 0);\n    __decorate([\n        calculate('lateStartDateConstraintIntervals')\n    ], ConstrainedLateEventMixin.prototype, \"calculateLateStartDateConstraintIntervals\", null);\n    __decorate([\n        calculate('lateEndDateConstraintIntervals')\n    ], ConstrainedLateEventMixin.prototype, \"calculateLateEndDateConstraintIntervals\", null);\n    __decorate([\n        calculate('minChildrenLateStartDate')\n    ], ConstrainedLateEventMixin.prototype, \"calculateMinChildrenLateStartDate\", null);\n    __decorate([\n        calculate('lateStartDateRaw')\n    ], ConstrainedLateEventMixin.prototype, \"calculateLateStartDateRaw\", null);\n    __decorate([\n        calculate('maxChildrenLateEndDate')\n    ], ConstrainedLateEventMixin.prototype, \"calculateMaxChildrenLateEndDate\", null);\n    __decorate([\n        calculate('lateStartDate')\n    ], ConstrainedLateEventMixin.prototype, \"calculateLateStartDate\", null);\n    __decorate([\n        calculate('lateEndDateRaw')\n    ], ConstrainedLateEventMixin.prototype, \"calculateLateEndDateRaw\", null);\n    __decorate([\n        calculate('lateEndDate')\n    ], ConstrainedLateEventMixin.prototype, \"calculateLateEndDate\", null);\n    __decorate([\n        calculate('totalSlack')\n    ], ConstrainedLateEventMixin.prototype, \"calculateTotalSlack\", null);\n    __decorate([\n        calculate('critical')\n    ], ConstrainedLateEventMixin.prototype, \"calculateCritical\", null);\n    return ConstrainedLateEventMixin;\n}) {\n}\n", "var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Mixin } from '../../../../ChronoGraph/class/BetterMixin.js';\nimport { calculate } from '../../../../ChronoGraph/replica/Entity.js';\nimport { isAtomicValue } from '../../../../ChronoGraph/util/Helpers.js';\nimport { DependencyType, TimeUnit } from '../../../scheduling/Types.js';\nimport { ScheduledByDependenciesEarlyEventMixin } from \"../scheduler_pro/ScheduledByDependenciesEarlyEventMixin.js\";\nimport { ConstrainedLateEventMixin } from \"./ConstrainedLateEventMixin.js\";\n//---------------------------------------------------------------------------------------------------------------------\n/**\n * This mixin adds support for scheduling event ALAP, by dependencies. All it does is\n * create the \"late\" constraint interval for every outgoing dependency.\n *\n * See [[ConstrainedEarlyEventMixin]] for more details about constraint-based scheduling.\n * See also [[ScheduledByDependenciesEarlyEventMixin]].\n */\nexport class ScheduledByDependenciesLateEventMixin extends Mixin([ScheduledByDependenciesEarlyEventMixin, ConstrainedLateEventMixin], (base) => {\n    const superProto = base.prototype;\n    class ScheduledByDependenciesLateEventMixin extends base {\n        *shouldSuccessorAffectScheduling(dependency) {\n            const toEvent = yield dependency.$.toEvent;\n            // ignore missing target events and inactive dependencies\n            return toEvent && !isAtomicValue(toEvent) && (yield dependency.$.active)\n                // and inactive target events (unless this event is also inactive)\n                && (!(yield toEvent.$.inactive) || (yield this.$.inactive));\n        }\n        *calculateLateStartDateConstraintIntervals() {\n            const intervals = yield* superProto.calculateLateStartDateConstraintIntervals.call(this);\n            const project = this.getProject();\n            const dependencyConstraintIntervalClass = project.dependencyConstraintIntervalClass;\n            let dependency;\n            for (dependency of (yield this.$.outgoingDeps)) {\n                // ignore missing target events and inactive dependencies\n                if (!(yield* this.shouldSuccessorAffectScheduling(dependency)))\n                    continue;\n                const successor = yield dependency.$.toEvent;\n                let successorDate;\n                switch (yield dependency.$.type) {\n                    case DependencyType.StartToStart:\n                        successorDate = yield successor.$.lateStartDateRaw;\n                        break;\n                    case DependencyType.StartToEnd:\n                        successorDate = yield successor.$.lateEndDateRaw;\n                        break;\n                }\n                if (successorDate) {\n                    const lag = yield dependency.$.lag;\n                    const lagUnit = yield dependency.$.lagUnit;\n                    const lagMS = yield* project.$convertDuration(lag, lagUnit, TimeUnit.Millisecond);\n                    const calendar = yield dependency.$.calendar;\n                    // this \"subscribes\" on the calendar's `version` field (which is incremented\n                    // every time when the intervals of the calendar changes)\n                    yield calendar.$.version;\n                    let endDate = successorDate;\n                    // Take lag into account\n                    if (lagMS) {\n                        // Skip non-wroking time forward to constrain the event as late as possible\n                        // (could affect if the event and successor use different calendars)\n                        endDate = calendar.skipNonWorkingTime(calendar.calculateStartDate(successorDate, lagMS));\n                    }\n                    const interval = dependencyConstraintIntervalClass.new({\n                        owner: dependency,\n                        startDate: null,\n                        endDate,\n                    });\n                    intervals.unshift(interval);\n                }\n            }\n            return intervals;\n        }\n        *calculateLateEndDateConstraintIntervals() {\n            const intervals = yield* superProto.calculateLateEndDateConstraintIntervals.call(this);\n            const project = this.getProject();\n            const dependencyConstraintIntervalClass = project.dependencyConstraintIntervalClass;\n            let dependency;\n            for (dependency of (yield this.$.outgoingDeps)) {\n                // ignore missing target events and inactive dependencies\n                if (!(yield* this.shouldSuccessorAffectScheduling(dependency)))\n                    continue;\n                const successor = yield dependency.$.toEvent;\n                let successorDate;\n                switch (yield dependency.$.type) {\n                    case DependencyType.EndToEnd:\n                        successorDate = yield successor.$.lateEndDateRaw;\n                        break;\n                    case DependencyType.EndToStart:\n                        successorDate = yield successor.$.lateStartDateRaw;\n                        break;\n                }\n                if (successorDate) {\n                    const lag = yield dependency.$.lag;\n                    const lagUnit = yield dependency.$.lagUnit;\n                    const lagMS = yield* project.$convertDuration(lag, lagUnit, TimeUnit.Millisecond);\n                    const calendar = yield dependency.$.calendar;\n                    // this \"subscribes\" on the calendar's `version` field (which is incremented\n                    // every time when the intervals of the calendar changes)\n                    yield calendar.$.version;\n                    let endDate = successorDate;\n                    // Take lag into account\n                    if (lagMS) {\n                        // Skip non-wroking time forward to constrain the event as late as possible\n                        // (could affect if the event and successor use different calendars)\n                        endDate = calendar.skipNonWorkingTime(calendar.calculateStartDate(successorDate, lagMS));\n                    }\n                    const interval = dependencyConstraintIntervalClass.new({\n                        owner: dependency,\n                        startDate: null,\n                        endDate,\n                    });\n                    intervals.unshift(interval);\n                }\n            }\n            return intervals;\n        }\n    }\n    __decorate([\n        calculate('lateStartDateIntervals')\n    ], ScheduledByDependenciesLateEventMixin.prototype, \"calculateLateStartDateConstraintIntervals\", null);\n    return ScheduledByDependenciesLateEventMixin;\n}) {\n}\n", "import { CycleResolution, CycleDescription } from \"../../../../../ChronoGraph/cycle_resolver/CycleResolver.js\";\nimport { durationFormula, DurationVar, endDateFormula, EndDateVar, startDateFormula, StartDateVar } from \"../../scheduler_basic/BaseEventDispatcher.js\";\nimport { effortFormula, EffortVar, endDateByEffortFormula, startDateByEffortFormula, unitsFormula, UnitsVar } from \"../../scheduler_pro/HasEffortDispatcher.js\";\n//---------------------------------------------------------------------------------------------------------------------\nexport const fixedEffortSEDWUGraphDescription = CycleDescription.new({\n    variables: new Set([StartDateVar, EndDateVar, DurationVar, EffortVar, UnitsVar]),\n    formulas: new Set([\n        // the order of formulas is important here - the earlier ones are preferred\n        endDateByEffortFormula,\n        durationFormula,\n        unitsFormula,\n        effortFormula,\n        startDateByEffortFormula,\n        startDateFormula,\n        endDateFormula\n    ])\n});\n//---------------------------------------------------------------------------------------------------------------------\nexport const fixedEffortSEDWUForward = CycleResolution.new({\n    description: fixedEffortSEDWUGraphDescription,\n    defaultResolutionFormulas: new Set([endDateByEffortFormula, durationFormula])\n});\nexport const fixedEffortSEDWUBackward = CycleResolution.new({\n    description: fixedEffortSEDWUGraphDescription,\n    defaultResolutionFormulas: new Set([startDateByEffortFormula, durationFormula])\n});\n", "import { HasProposedValue } from \"../../../../../ChronoGraph/chrono/Effect.js\";\nimport { Mixin } from \"../../../../../ChronoGraph/class/BetterMixin.js\";\nimport { Direction, SchedulingMode } from \"../../../../scheduling/Types.js\";\nimport { EffortVar, UnitsVar } from \"../../scheduler_pro/HasEffortDispatcher.js\";\nimport { HasSchedulingModeMixin } from \"../../scheduler_pro/HasSchedulingModeMixin.js\";\nimport { fixedEffortSEDWUBackward, fixedEffortSEDWUForward } from \"./FixedEffortDispatcher.js\";\n//---------------------------------------------------------------------------------------------------------------------\n/**\n * This mixin provides the fixed effort scheduling mode facility. The scheduling mode is controlled with the\n * [[HasSchedulingModeMixin.schedulingMode]] field.\n *\n * See [[HasSchedulingModeMixin]] for more details.\n *\n * In this mode, the effort of the task remains \"fixed\" as the name suggest. It is changed only if there's no other options,\n * for example if both \"duration\" and \"units\" has changed. In other cases, some other variable is updated.\n */\nexport class FixedEffortMixin extends Mixin([HasSchedulingModeMixin], (base) => {\n    const superProto = base.prototype;\n    class FixedEffortMixin extends base {\n        *prepareDispatcher(YIELD) {\n            const schedulingMode = yield* this.effectiveSchedulingMode();\n            if (schedulingMode === SchedulingMode.FixedEffort) {\n                const cycleDispatcher = yield* superProto.prepareDispatcher.call(this, YIELD);\n                if (yield HasProposedValue(this.$.assigned))\n                    cycleDispatcher.addProposedValueFlag(UnitsVar);\n                cycleDispatcher.addKeepIfPossibleFlag(EffortVar);\n                return cycleDispatcher;\n            }\n            else {\n                return yield* superProto.prepareDispatcher.call(this, YIELD);\n            }\n        }\n        cycleResolutionContext(Y) {\n            const schedulingMode = this.effectiveSchedulingModeSync(Y);\n            if (schedulingMode === SchedulingMode.FixedEffort) {\n                const direction = Y(this.$.direction);\n                return direction === Direction.Forward || direction === Direction.None ? fixedEffortSEDWUForward : fixedEffortSEDWUBackward;\n            }\n            else {\n                return superProto.cycleResolutionContext.call(this, Y);\n            }\n        }\n    }\n    return FixedEffortMixin;\n}) {\n}\n", "import { CycleResolution, CycleDescription } from \"../../../../../ChronoGraph/cycle_resolver/CycleResolver.js\";\nimport { durationFormula, DurationVar, endDateFormula, EndDateVar, startDateFormula, StartDateVar } from \"../../scheduler_basic/BaseEventDispatcher.js\";\nimport { effortFormula, EffortVar, endDateByEffortFormula, startDateByEffortFormula, unitsFormula, UnitsVar } from \"../../scheduler_pro/HasEffortDispatcher.js\";\n//---------------------------------------------------------------------------------------------------------------------\nexport const fixedUnitsSEDWUGraphDescription = CycleDescription.new({\n    variables: new Set([StartDateVar, EndDateVar, DurationVar, EffortVar, UnitsVar]),\n    formulas: new Set([\n        // the order of formulas is important here - the earlier ones are preferred\n        endDateByEffortFormula,\n        durationFormula,\n        effortFormula,\n        unitsFormula,\n        startDateByEffortFormula,\n        startDateFormula,\n        endDateFormula\n    ])\n});\n//---------------------------------------------------------------------------------------------------------------------\nexport const fixedUnitsSEDWUForwardNonEffortDriven = CycleResolution.new({\n    description: fixedUnitsSEDWUGraphDescription,\n    defaultResolutionFormulas: new Set([endDateByEffortFormula, endDateFormula, effortFormula])\n});\nexport const fixedUnitsSEDWUForwardEffortDriven = CycleResolution.new({\n    description: fixedUnitsSEDWUGraphDescription,\n    defaultResolutionFormulas: new Set([endDateByEffortFormula, endDateFormula, durationFormula])\n});\nexport const fixedUnitsSEDWUBackwardNonEffortDriven = CycleResolution.new({\n    description: fixedUnitsSEDWUGraphDescription,\n    defaultResolutionFormulas: new Set([startDateByEffortFormula, startDateFormula, effortFormula])\n});\nexport const fixedUnitsSEDWUBackwardEffortDriven = CycleResolution.new({\n    description: fixedUnitsSEDWUGraphDescription,\n    defaultResolutionFormulas: new Set([startDateByEffortFormula, startDateFormula, durationFormula])\n});\n", "import { HasProposedValue } from \"../../../../../ChronoGraph/chrono/Effect.js\";\nimport { Mixin } from \"../../../../../ChronoGraph/class/BetterMixin.js\";\nimport { Direction, SchedulingMode } from \"../../../../scheduling/Types.js\";\nimport { EffortVar, UnitsVar } from \"../../scheduler_pro/HasEffortDispatcher.js\";\nimport { HasSchedulingModeMixin } from \"../../scheduler_pro/HasSchedulingModeMixin.js\";\nimport { fixedUnitsSEDWUBackwardEffortDriven, fixedUnitsSEDWUBackwardNonEffortDriven, fixedUnitsSEDWUForwardEffortDriven, fixedUnitsSEDWUForwardNonEffortDriven } from \"./FixedUnitsDispatcher.js\";\n//---------------------------------------------------------------------------------------------------------------------\n/**\n * This mixin provides the fixed units scheduling mode facility. The scheduling mode is controlled with the\n * [[HasSchedulingModeMixin.schedulingMode]] field.\n *\n * See [[HasSchedulingModeMixin]] for more details.\n *\n * In this mode, the assignment units of the task's assignments remains \"fixed\" as the name suggest.\n * Those are changed only if there's no other options, for example if both \"duration\" and \"effort\" has changed.\n *\n * If the [[HasSchedulingModeMixin.effortDriven]] flag is enabled, effort variable becomes \"fixed\" as well, so normally the \"duration\"\n * variable will change. If that flag is disabled, then \"effort\" will be changed.\n */\nexport class FixedUnitsMixin extends Mixin([HasSchedulingModeMixin], (base) => {\n    const superProto = base.prototype;\n    class FixedUnitsMixin extends base {\n        *prepareDispatcher(YIELD) {\n            const schedulingMode = yield* this.effectiveSchedulingMode();\n            if (schedulingMode === SchedulingMode.FixedUnits) {\n                const cycleDispatcher = yield* superProto.prepareDispatcher.call(this, YIELD);\n                if (yield HasProposedValue(this.$.assigned))\n                    cycleDispatcher.addProposedValueFlag(UnitsVar);\n                if (yield this.$.effortDriven)\n                    cycleDispatcher.addKeepIfPossibleFlag(EffortVar);\n                cycleDispatcher.addKeepIfPossibleFlag(UnitsVar);\n                return cycleDispatcher;\n            }\n            else {\n                return yield* superProto.prepareDispatcher.call(this, YIELD);\n            }\n        }\n        cycleResolutionContext(Y) {\n            const schedulingMode = this.effectiveSchedulingModeSync(Y);\n            if (schedulingMode === SchedulingMode.FixedUnits) {\n                const direction = Y(this.$.direction);\n                const effortDriven = Y(this.$.effortDriven);\n                if (direction === Direction.Forward || direction === Direction.None) {\n                    return effortDriven ? fixedUnitsSEDWUForwardEffortDriven : fixedUnitsSEDWUForwardNonEffortDriven;\n                }\n                else {\n                    return effortDriven ? fixedUnitsSEDWUBackwardEffortDriven : fixedUnitsSEDWUBackwardNonEffortDriven;\n                }\n            }\n            else {\n                return superProto.cycleResolutionContext.call(this, Y);\n            }\n        }\n    }\n    return FixedUnitsMixin;\n}) {\n}\n", "var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { ProposedOrPrevious } from \"../../../../ChronoGraph/chrono/Effect.js\";\nimport { Mixin } from \"../../../../ChronoGraph/class/Mixin.js\";\nimport { calculate, write } from \"../../../../ChronoGraph/replica/Entity.js\";\nimport { ScheduledByDependenciesLateEventMixin } from \"../gantt/ScheduledByDependenciesLateEventMixin.js\";\nexport class InactiveEventMixin extends Mixin([ScheduledByDependenciesLateEventMixin], (base) => {\n    const superProto = base.prototype;\n    class InactiveEventMixin extends base {\n        writeInactive(me, transaction, quark, inactive) {\n            const isLoading = !transaction.baseRevision.hasIdentifier(me);\n            me.constructor.prototype.write.call(this, me, transaction, quark, inactive);\n            // @ts-ignore\n            // Apply parent inactive state to children unless we are loading data or undoing/redoing some changes\n            // in such cases both parent and children data are supposed to be provided\n            if (!isLoading && this.children && !this.stm?.state.isRestoringStateClass) {\n                for (const child of this.children) {\n                    child.inactive = inactive;\n                }\n            }\n        }\n        *calculateInactive() {\n            const inactive = yield ProposedOrPrevious;\n            // A summary task is active if it has at least one active sub-event\n            if (yield* this.hasSubEvents()) {\n                const subEvents = yield* this.subEventsIterable();\n                let activeCnt = 0;\n                for (const subEvent of subEvents) {\n                    // calculate active sub-events count\n                    if (!(yield subEvent.$.inactive))\n                        activeCnt++;\n                }\n                // inactive if it has no active sub-events\n                return !activeCnt;\n            }\n            return inactive;\n        }\n        *shouldRollupChildEffort(child) {\n            return !(yield child.$.inactive) || (yield this.$.inactive);\n        }\n        *shouldRollupChildPercentDoneSummaryData(child) {\n            return !(yield child.$.inactive) || (yield this.$.inactive);\n        }\n        *shouldRollupChildStartDate(child) {\n            // Do not take into account inactive children dates when calculating\n            // their parent start/end dates (unless the parent is also inactive)\n            return !(yield child.$.inactive) || (yield this.$.inactive);\n        }\n        *shouldRollupChildEndDate(child) {\n            // Do not take into account inactive children dates when calculating\n            // their parent start/end dates (unless the parent is also inactive)\n            return !(yield child.$.inactive) || (yield this.$.inactive);\n        }\n        *shouldRollupChildEarlyStartDate(childEvent) {\n            // Do not take into account inactive children dates when calculating\n            // their parent start end dates (unless the parent is also inactive)\n            return !(yield childEvent.$.inactive) || (yield this.$.inactive);\n        }\n        *shouldRollupChildEarlyEndDate(childEvent) {\n            // Do not take into account inactive children dates when calculating\n            // their parent start end dates (unless the parent is also inactive)\n            return !(yield childEvent.$.inactive) || (yield this.$.inactive);\n        }\n        *shouldRollupChildLateStartDate(childEvent) {\n            // Do not take into account inactive children dates when calculating\n            // their parent start end dates (unless the parent is also inactive)\n            return !(yield childEvent.$.inactive) || (yield this.$.inactive);\n        }\n        *shouldRollupChildLateEndDate(childEvent) {\n            // Do not take into account inactive children dates when calculating\n            // their parent start end dates (unless the parent is also inactive)\n            return !(yield childEvent.$.inactive) || (yield this.$.inactive);\n        }\n    }\n    __decorate([\n        write('inactive')\n    ], InactiveEventMixin.prototype, \"writeInactive\", null);\n    __decorate([\n        calculate('inactive')\n    ], InactiveEventMixin.prototype, \"calculateInactive\", null);\n    return InactiveEventMixin;\n}) {\n}\n", "import { MixinAny } from \"../../../../ChronoGraph/class/BetterMixin.js\";\nimport { SchedulerProEvent } from \"../scheduler_pro/SchedulerProEvent.js\";\nimport { ConstrainedByParentMixin } from \"./ConstrainedByParentMixin.js\";\nimport { ConstrainedLateEventMixin } from \"./ConstrainedLateEventMixin.js\";\nimport { ScheduledByDependenciesLateEventMixin } from \"./ScheduledByDependenciesLateEventMixin.js\";\nimport { FixedEffortMixin } from \"./scheduling_modes/FixedEffortMixin.js\";\nimport { FixedUnitsMixin } from \"./scheduling_modes/FixedUnitsMixin.js\";\nimport { InactiveEventMixin } from \"./InactiveEventMixin.js\";\n/**\n * This is an event class, [[GanttProjectMixin]] is working with.\n * It is constructed as [[SchedulerProEvent]], enhanced with extra functionality.\n */\nexport class GanttEvent extends MixinAny([\n    SchedulerProEvent,\n    ConstrainedByParentMixin,\n    ConstrainedLateEventMixin,\n    ScheduledByDependenciesLateEventMixin,\n    FixedEffortMixin,\n    FixedUnitsMixin,\n    InactiveEventMixin\n], (base) => {\n    class GanttEvent extends base {\n    }\n    return GanttEvent;\n}) {\n}\n", "var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Mixin } from \"../../../../ChronoGraph/class/BetterMixin.js\";\nimport { calculate, field } from \"../../../../ChronoGraph/replica/Entity.js\";\nimport { HasChildrenMixin } from \"../scheduler_basic/HasChildrenMixin.js\";\n/**\n * This is a mixin, adding critical path calculation to the event node.\n *\n * Scheduling-wise it adds *criticalPaths* field to an entity mixing it.\n *\n * For more details on the _critical path method_ please check this article: https://en.wikipedia.org/wiki/Critical_path_method\n */\nexport class HasCriticalPathsMixin extends Mixin([HasChildrenMixin], (base) => {\n    const superProto = base.prototype;\n    class HasCriticalPathsMixin extends base {\n        *calculateCriticalPaths() {\n            const paths = [], pathsToProcess = [], events = yield this.$.childEvents, eventsToProcess = [...events], projectEndDate = yield this.$.endDate;\n            // First collect events we'll start collecting paths from.\n            // We need to start from critical events w/o incoming dependencies\n            let event;\n            while ((event = eventsToProcess.shift())) {\n                const childEvents = yield event.$.childEvents, eventIsCritical = yield event.$.critical, eventIsActive = !(yield event.$.inactive), eventEndDate = yield event.$.endDate;\n                // register a new path finishing at the event\n                if (eventIsActive && eventEndDate && eventEndDate.getTime() - projectEndDate.getTime() === 0 && eventIsCritical) {\n                    pathsToProcess.push([{ event }]);\n                }\n                eventsToProcess.push(...childEvents);\n            }\n            let path;\n            // fetch paths one by one and process\n            while ((path = pathsToProcess.shift())) {\n                let taskIndex = path.length - 1, node;\n                // get the path last event\n                while ((node = path[taskIndex])) {\n                    const criticalPredecessorNodes = [];\n                    // collect critical successors\n                    for (const dependency of (yield node.event.$.incomingDeps)) {\n                        const event = yield dependency.$.fromEvent;\n                        // if we found a critical predecessor\n                        if (event && (yield dependency.$.active) && !(yield event.$.inactive) && (yield event.$.critical)) {\n                            criticalPredecessorNodes.push({ event, dependency });\n                        }\n                    }\n                    // if critical predecessor(s) found\n                    if (criticalPredecessorNodes.length) {\n                        // make a copy of the path leading part\n                        const pathCopy = path.slice();\n                        // append the found predecessor to the path\n                        path.push(criticalPredecessorNodes[0]);\n                        // if we found more than one predecessor we start new path as: leading path + predecessor\n                        for (let i = 1; i < criticalPredecessorNodes.length; i++) {\n                            pathsToProcess.push(pathCopy.concat(criticalPredecessorNodes[i]));\n                        }\n                        // increment counter to process the predecessor we've appended to the path\n                        taskIndex++;\n                    }\n                    else {\n                        // no predecessors -> stop the loop\n                        taskIndex = -1;\n                    }\n                }\n                // we collected the path backwards so let's reverse it\n                paths.push(path.reverse());\n            }\n            return paths;\n        }\n    }\n    __decorate([\n        field({ lazy: true })\n    ], HasCriticalPathsMixin.prototype, \"criticalPaths\", void 0);\n    __decorate([\n        calculate('criticalPaths')\n    ], HasCriticalPathsMixin.prototype, \"calculateCriticalPaths\", null);\n    return HasCriticalPathsMixin;\n}) {\n}\n", "var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { ProposedOrPrevious, UnsafeProposedOrPreviousValueOf } from \"../../../../ChronoGraph/chrono/Effect.js\";\nimport { Mixin } from '../../../../ChronoGraph/class/BetterMixin.js';\nimport { field, calculate } from \"../../../../ChronoGraph/replica/Entity.js\";\nimport { Direction, ProjectType, ConstraintIntervalSide } from '../../../scheduling/Types.js';\nimport { MAX_DATE, MIN_DATE } from '../../../util/Constants.js';\nimport { ChronoEventTreeStoreMixin } from \"../../store/ChronoEventStoreMixin.js\";\nimport { SchedulerProProjectMixin } from \"../scheduler_pro/SchedulerProProjectMixin.js\";\nimport { SchedulerProResourceMixin } from \"../scheduler_pro/SchedulerProResourceMixin.js\";\nimport { ConstrainedLateEventMixin } from \"./ConstrainedLateEventMixin.js\";\nimport { SchedulerProAssignmentMixin } from \"../scheduler_pro/SchedulerProAssignmentMixin.js\";\nimport { GanttEvent } from './GanttEvent.js';\nimport { HasCriticalPathsMixin } from \"./HasCriticalPathsMixin.js\";\nimport { HasEffortMixin } from \"../scheduler_pro/HasEffortMixin.js\";\nimport { ConstraintInterval, ConstraintIntervalDescription } from \"../../../chrono/Conflict.js\";\nimport { format } from \"../../../util/Functions.js\";\nimport \"../../../localization/En.js\";\nimport { prototypeValue } from \"../../../../ChronoGraph/util/Helpers.js\";\n//---------------------------------------------------------------------------------------------------------------------\n/**\n * Gantt project mixin type. At this level, events are called \"tasks\". All scheduling features from the [[SchedulerProProjectMixin]]\n * are preserved. Additionally, tasks inherit constraints from parent tasks. Tasks also receives the [[HasEffortMixin.effort|effort]] field\n * and [[HasSchedulingModeMixin.schedulingMode|schedulingMode]] field.\n *\n * The base event class for this level is [[GanttEvent]]. The base assignment class is [[SchedulerProAssignmentMixin]].\n *\n * At this level, project can be scheduled in backward direction. This is controlled with the [[direction]] field.\n *\n * * Forward ASAP scheduling\n *\n * This is a default, most-used mode. In this mode, the \"base\" date is project start date. If it is not provided,\n * it is calculated as the earliest date of all project tasks. Events are scheduled ASAP, based on the \"early\" constraints\n * (plus \"generic\" constraints).\n *\n * * Forward ALAP scheduling\n *\n * In this mode, the \"base\" date is still project start date. If it is not provided,\n * it is calculated as the earliest date of all project tasks.\n *\n * Events are first scheduled ASAP, based on the \"early\" constraints. This gives the project end date.\n * Now events are scheduled ALAP, using the project end date as the base.\n *\n * The difference between the task position in Forward ASAP and Forward ALAP scheduling is called [[ConstrainedLateEventMixin.totalSlack|\"slack\"]]\n *\n * * Backward ALAP scheduling\n *\n * This is a \"default\" backward scheduling. In this mode, the \"base\" date is project end date. If it is not provided,\n * it is calculated as the latest date of all project tasks. Events are scheduled ALAP, based on the \"late\" constraints\n * (plus \"generic\" constraints).\n *\n * * Backward ASAP scheduling\n *\n * In this mode, the \"base\" date is still project end date. If it is not provided,\n * it is calculated as the latest date of all project tasks.\n *\n * Events are first scheduled ALAP, based on the \"late\" constraints. This gives the project start date.\n * Now events are scheduled ASAP, using the project start date as the base.\n *\n */\nexport class GanttProjectMixin extends Mixin([\n    SchedulerProProjectMixin,\n    HasEffortMixin,\n    ConstrainedLateEventMixin,\n    HasCriticalPathsMixin\n], (base) => {\n    const superProto = base.prototype;\n    class GanttProjectMixin extends base {\n        constructor() {\n            super(...arguments);\n            // this atom is recalculated in every transaction (it is \"self dependent\")\n            // this happens because it is always calculated to the value which is different from\n            // proposed value\n            // this is a \"source of changes\" which we use for `project.startDate/endDate` in case\n            // scanning the children returned `null`\n            // so it will cause the `project.startDate` to always recalculate until it obtain some value\n            this.nonEqual = false;\n        }\n        *calculateNonEqual() {\n            return !(yield ProposedOrPrevious);\n        }\n        get isGanttProjectMixin() {\n            return true;\n        }\n        afterConfigure() {\n            superProto.afterConfigure.apply(this, arguments);\n            this.projectConstraintIntervalClass = this.projectConstraintIntervalClass || ProjectConstraintInterval;\n        }\n        // <remove-on-release>\n        // TODO: SchedulerBasicProjectMixin overrides HasChildrenMixin hasSubEvents and subEventsIterable methods\n        //  so we define the methods here to fix that\n        //  https://github.com/canonic-epicure/typescript-mixin-class/issues/1\n        // </remove-on-release>\n        *hasSubEvents() {\n            const childEvents = yield this.$.childEvents;\n            return childEvents.size > 0;\n        }\n        *subEventsIterable() {\n            return yield this.$.childEvents;\n        }\n        *calculateDirection() {\n            return yield ProposedOrPrevious;\n        }\n        *calculateStartDate() {\n            const direction = yield this.$.direction;\n            if (direction === Direction.Forward) {\n                let result = yield ProposedOrPrevious;\n                if (!result) {\n                    result = yield* this.unsafeCalculateInitialMinChildrenStartDateDeep();\n                    if (!result)\n                        yield this.$.nonEqual;\n                }\n                return result;\n            }\n            else if (direction === Direction.Backward) {\n                const startDate = yield* this.calculateMinChildrenStartDate();\n                const endDate = yield this.$.endDate;\n                // Calculated startDate can get after the project endDate\n                // (in case its built based on a manually scheduled task that start after the project finishes).\n                // We set the project startDate to its endDate value then.\n                return startDate && endDate > startDate ? startDate : endDate;\n            }\n        }\n        *calculateEndDate() {\n            const direction = yield this.$.direction;\n            if (direction === Direction.Forward) {\n                const startDate = yield this.$.startDate;\n                const endDate = yield* this.calculateMaxChildrenEndDate();\n                // Calculated endDate can be before the project startDate\n                // (in case its built based on a manually scheduled task that finishes before the project starts).\n                // Then it leads to an infinite cycle because of these BaseEventMixin.calculateDurationPure lines:\n                //      if (startDate > endDate) {\n                //          yield Write(this.$.duration, 0, null)\n                //      }\n                // So we simply check if the project endDate got earlier than its start date\n                // and set endDate to startDate value then.\n                // This case is reported in: https://github.com/bryntum/support/issues/3127\n                // and asserted by: 031_manually_scheduled.t.ts\n                return endDate && endDate > startDate ? endDate : startDate;\n            }\n            else if (direction === Direction.Backward) {\n                let result = yield ProposedOrPrevious;\n                if (!result) {\n                    result = yield* this.unsafeCalculateInitialMaxChildrenEndDateDeep();\n                    if (!result)\n                        yield this.$.nonEqual;\n                }\n                return result;\n            }\n        }\n        *shouldRollupChildStartDate(child) {\n            // Do not take into account inactive children dates when calculating start date\n            return !(yield child.$.inactive);\n        }\n        *shouldRollupChildEndDate(child) {\n            // Do not take into account inactive children dates when calculating start date\n            return !(yield child.$.inactive);\n        }\n        *calculateEarlyStartDateConstraintIntervals() {\n            const intervals = yield* superProto.calculateEarlyStartDateConstraintIntervals.call(this);\n            const direction = yield this.$.direction;\n            if (direction === Direction.Forward) {\n                const startDate = yield this.$.startDate;\n                startDate && intervals.push(this.projectConstraintIntervalClass.new({\n                    owner: this,\n                    side: ConstraintIntervalSide.Start,\n                    startDate\n                }));\n            }\n            else if (direction === Direction.Backward) {\n                const startDate = yield this.$.lateStartDate;\n                startDate && intervals.push(this.projectConstraintIntervalClass.new({\n                    owner: this,\n                    side: ConstraintIntervalSide.Start,\n                    startDate\n                }));\n            }\n            return intervals;\n        }\n        *calculateLateEndDateConstraintIntervals() {\n            const intervals = yield* superProto.calculateLateEndDateConstraintIntervals.call(this);\n            const direction = yield this.$.direction;\n            if (direction === Direction.Forward) {\n                const endDate = yield this.$.earlyEndDate;\n                endDate && intervals.push(this.projectConstraintIntervalClass.new({\n                    owner: this,\n                    side: ConstraintIntervalSide.End,\n                    endDate\n                }));\n            }\n            else if (direction === Direction.Backward) {\n                const endDate = yield this.$.endDate;\n                endDate && intervals.push(this.projectConstraintIntervalClass.new({\n                    owner: this,\n                    side: ConstraintIntervalSide.End,\n                    endDate\n                }));\n            }\n            return intervals;\n        }\n        getDefaultEventModelClass() {\n            return GanttEvent;\n        }\n        getDefaultAssignmentModelClass() {\n            return SchedulerProAssignmentMixin;\n        }\n        getDefaultResourceModelClass() {\n            return SchedulerProResourceMixin;\n        }\n        getDefaultEventStoreClass() {\n            return ChronoEventTreeStoreMixin;\n        }\n        getType() {\n            return ProjectType.Gantt;\n        }\n        // this method is only used to calculated \"initial\" project start date only\n        *unsafeCalculateInitialMinChildrenStartDateDeep() {\n            const childEvents = yield this.$.childEvents;\n            // note, that we does not yield here, as we want to calculate \"initial\" project start date\n            // which will be used only if there's no user input or explicit setting for it\n            // such project date should be calculated as earliest date of all tasks, based on the\n            // \"initial\" data (which includes proposed)\n            if (!childEvents.size)\n                return yield UnsafeProposedOrPreviousValueOf(this.$.startDate);\n            let result = MAX_DATE, child;\n            const toProcess = [...childEvents];\n            while ((child = toProcess.shift())) {\n                let childDate = yield UnsafeProposedOrPreviousValueOf(child.$.startDate);\n                // in case a task has no start date but has end date provided - use that value\n                if (!childDate) {\n                    childDate = yield UnsafeProposedOrPreviousValueOf(child.$.endDate);\n                }\n                if (childDate && childDate < result)\n                    result = childDate;\n                toProcess.push(...yield child.$.childEvents);\n            }\n            return (result.getTime() !== MIN_DATE.getTime() && result.getTime() !== MAX_DATE.getTime()) ? result : null;\n        }\n        *unsafeCalculateInitialMaxChildrenEndDateDeep() {\n            const childEvents = yield this.$.childEvents;\n            // note, that we use \"unsafe\" ProposedOrPrevious effect here, because we only get into this method\n            // if there's no user input for the project end date\n            if (!childEvents.size)\n                return yield UnsafeProposedOrPreviousValueOf(this.$.endDate);\n            let result = MIN_DATE, child;\n            const toProcess = [...childEvents];\n            while ((child = toProcess.shift())) {\n                let childDate = yield UnsafeProposedOrPreviousValueOf(child.$.endDate);\n                // in case a task has no end date but has start date provided - use that value\n                if (!childDate) {\n                    childDate = yield UnsafeProposedOrPreviousValueOf(child.$.startDate);\n                }\n                if (childDate && childDate > result)\n                    result = childDate;\n                toProcess.push(...yield child.$.childEvents);\n            }\n            return (result.getTime() !== MIN_DATE.getTime() && result.getTime() !== MAX_DATE.getTime()) ? result : null;\n        }\n        getDependencyCycleDetectionIdentifiers(fromEvent, toEvent) {\n            return [\n                // @ts-ignore\n                toEvent.$.earlyStartDateConstraintIntervals,\n                // @ts-ignore\n                toEvent.$.earlyEndDateConstraintIntervals,\n                // @ts-ignore\n                toEvent.$.lateEndDateConstraintIntervals,\n                // @ts-ignore\n                toEvent.$.lateStartDateConstraintIntervals\n            ];\n        }\n    }\n    __decorate([\n        field({ equality: () => false })\n    ], GanttProjectMixin.prototype, \"nonEqual\", void 0);\n    __decorate([\n        calculate('nonEqual')\n    ], GanttProjectMixin.prototype, \"calculateNonEqual\", null);\n    return GanttProjectMixin;\n}) {\n}\n/**\n * Class providing a [[ProjectConstraintInterval]] instance description.\n */\nexport class ProjectConstraintIntervalDescription extends ConstraintIntervalDescription {\n    static get $name() {\n        return 'ProjectConstraintIntervalDescription';\n    }\n    static getDescription(interval) {\n        return format(interval.startDate ? this.L('L{startDateDescriptionTpl}') : this.L('L{endDateDescriptionTpl}'), ...this.getDescriptionParameters(interval));\n    }\n}\n/**\n * Class implementing constraining interval applied by a project.\n * A forward scheduled project implicitly restricts tasks to start not early than the project start date\n * and a backward scheduled project restricts tasks to finish not later than the project end date.\n */\nexport class ProjectConstraintInterval extends ConstraintInterval {\n    isAffectedByTransaction(transaction) {\n        const project = this.owner;\n        transaction = transaction || project.graph.activeTransaction;\n        const dateQuark = transaction.entries.get(this.startDate ? project.$.startDate : project.$.endDate);\n        // modified project start (end for BW projects) date\n        return dateQuark && !dateQuark.isShadow();\n    }\n}\n__decorate([\n    prototypeValue(ProjectConstraintIntervalDescription)\n], ProjectConstraintInterval.prototype, \"descriptionBuilderClass\", void 0);\n", "import Column from '../../Grid/column/Column.js';\nimport Store from '../../Core/data/Store.js';\nimport ColumnStore from '../../Grid/data/ColumnStore.js';\nimport Combo from '../../Core/widget/Combo.js';\n\n/**\n * @module Gantt/column/AddNewColumn\n */\n\n/**\n * This column allows user to dynamically add columns to the Gantt chart by clicking the column header\n * and picking columns from a combobox.\n *\n * ## Adding a custom column to the combobox\n *\n * In order to appear in the column combobox list a column class have to fulfill these conditions:\n *\n * 1. the class should have a static property `type` with unique string value that will identify the column.\n * 2. the class should be registered with the call to {@link Grid/data/ColumnStore#function-registerColumnType-static ColumnStore.registerColumnType}.\n * 3. the class should have a static property `isGanttColumn` with truthy value.\n * 4. the class should have a static `text` property with column name.\n *\n * For example:\n *\n * ```javascript\n * import ColumnStore from 'gantt-distr/lib/Grid/data/ColumnStore.js';\n * import Column from 'gantt-distr/lib/Grid/column/Column.js';\n *\n * // New column class to display task priority\n * export default class TaskPriorityColumn extends Column {\n *     // unique alias of the column\n *     static get type() {\n *         return 'priority';\n *     }\n *\n *     // indicates that the column should be present in \"Add New...\" column\n *     static get isGanttColumn() {\n *         return true;\n *     }\n *\n *     static get defaults() {\n *         return {\n *             // the column is mapped to \"priority\" field of the Task model\n *             field : 'priority',\n *             // the column title\n *             text  : 'Priority'\n *         };\n *     }\n * }\n *\n * // register new column\n * ColumnStore.registerColumnType(TaskPriorityColumn);\n * ```\n *\n * @extends Grid/column/Column\n * @classType addnew\n * @column\n */\nexport default class AddNewColumn extends Column {\n\n    static get $name() {\n        return 'AddNewColumn';\n    }\n\n    static get type() {\n        return 'addnew';\n    }\n\n    static get defaults() {\n        return {\n            text       : 'L{New Column}',\n            cls        : 'b-new-column-column',\n            draggable  : false,\n            sortable   : false,\n            exportable : false,\n            field      : null,\n            editor     : null\n        };\n    }\n\n    doDestroy() {\n        this._combo?.destroy();\n        super.doDestroy();\n    }\n\n    /**\n     * Returns the combo box field rendered into the header of this column\n     * @property {Core.widget.Combo}\n     * @readonly\n     */\n    get combo() {\n        const\n            me      = this,\n            columns = me.grid.columns;\n\n        return me._combo || (\n            me._combo = new Combo({\n                owner         : me.grid,\n                cls           : 'b-new-column-combo',\n                placeholder   : me.L('L{New Column}'),\n                triggers      : false,\n                autoExpand    : true,\n                store         : me.ganttColumnStore,\n                displayField  : 'text',\n                monitorResize : false,\n                picker        : {\n                    align : {\n                        align    : 't0-b0',\n                        axisLock : true\n                    },\n                    minWidth : 200,\n                    onItem({ record : columnRecord }) {\n                        const newColumn = new columnRecord.value({\n                            region : me.region\n                        }, columns);\n\n                        // Insert the new column before the \"New Column\" column\n                        // then focus it to ensure it is in view.\n                        columns.insert(columns.indexOf(me), newColumn);\n                        newColumn.element.focus();\n                    },\n\n                    // Column elements are rerendered, so the forElement must be kept up to date\n                    onBeforeShow() {\n                        this.forElement = me.element;\n                    }\n                },\n                syncInputFieldValue() {\n                    this.input.value = '';\n                },\n                internalListeners : {\n                    // Keystrokes must not leak up to the Grid where its Navigator will react\n                    keydown({ event }) {\n                        event.stopImmediatePropagation();\n                    }\n                }\n            })\n        );\n    }\n\n    get ganttColumnStore() {\n        // Create a store containing the Gantt column classes.\n        // A filter ensures that column types which are already\n        // present in the grid are not shown.\n        return new Store({\n            data : Object.values(ColumnStore.columnTypes).reduce((result, col) => {\n                // We must ensure that the defaultValues property is calculated\n                // so that we can detect a text property.\n                if (!col.$meta.fields.exposedData) {\n                    col.exposeProperties({});\n                }\n\n                // To be included, a column must have a static isGanttColumn\n                // property which yields a truthy value, and a text value.\n                if (col.isGanttColumn && col.text) {\n                    result.push({\n                        id    : col.type,\n                        text  : col.optionalL(col.text),\n                        value : col\n                    });\n                }\n                return result;\n            }, []),\n            filters : [\n                // A colRecord is only filtered in if the grid columns do not contain an instance.\n                colRecord => !this.grid.columns.some(gridCol => gridCol.constructor === colRecord.value)\n            ],\n            sorters : [\n                { field : 'text' }\n            ]\n        });\n    }\n\n    headerRenderer({ column, headerElement }) {\n        column.combo.render(headerElement);\n    }\n\n    onKeyDown(event) {\n        if (event.key === 'Enter') {\n            this.combo.focus();\n        }\n    }\n\n    updateLocalization() {\n        // reset cached combo to rebuild options store w/ new translated column names\n        if (this._combo) {\n            this._combo.destroy();\n            this._combo = null;\n        }\n\n        super.updateLocalization();\n    }\n}\n\nColumnStore.registerColumnType(AddNewColumn);\n", "import Combo from '../../Core/widget/Combo.js';\nimport Store from '../../Core/data/Store.js';\n\n/**\n * @module Gantt/widget/CalendarPicker\n */\n\n/**\n * Combo box preconfigured with possible calendar values.\n *\n * This field can be used as an editor for the {@link Grid.column.Column Column}.\n * It is used as the default editor for the {@link Gantt.column.CalendarColumn CalendarColumn}.\n * Note: This picker doesn't support {@link Core/widget/Combo#config-multiSelect multiSelect}\n *\n * {@inlineexample Gantt/widget/CalendarPicker.js}\n * @extends Core/widget/Combo\n * @classType calendarpicker\n * @widget\n */\nexport default class CalendarPicker extends Combo {\n\n    static get $name() {\n        return 'CalendarPicker';\n    }\n\n    // Factoryable type name\n    static get type() {\n        return 'calendarpicker';\n    }\n\n    /**\n     * Replaces the field store records with the provided ones.\n     * @param {Gantt.model.CalendarModel[]} calendars New contents for the widget store.\n     */\n    refreshCalendars(calendars) {\n        this.store.data = calendars.map(c => {\n            return {\n                id   : c.id,\n                text : c.name\n            };\n        });\n    }\n\n    get store() {\n        if (!this._store) {\n            this.store = new Store();\n        }\n\n        return this._store;\n    }\n\n    set store(store) {\n        super.store = store;\n    }\n\n    get value() {\n        return super.value;\n    }\n\n    set value(value) {\n        if (value) {\n            if (value.isDefault && value.isDefault()) {\n                value = null;\n            }\n            else if (value.id) {\n                value = value.id;\n            }\n        }\n\n        super.value = value;\n    }\n}\n\n// Register this widget type with its Factory\nCalendarPicker.initClass();\n", "import Column from '../../Grid/column/Column.js';\nimport ColumnStore from '../../Grid/data/ColumnStore.js';\nimport CalendarPicker from '../widget/CalendarPicker.js';\n\n/**\n * @module Gantt/column/CalendarColumn\n */\n\n/**\n * A column that displays (and allows user to update) the current {@link Gantt.model.CalendarModel calendar} of the task.\n *\n * Default editor is a {@link Gantt.widget.CalendarPicker CalendarPicker}.\n *\n * @extends Grid/column/Column\n * @classType calendar\n * @column\n */\nexport default class CalendarColumn extends Column {\n\n    static get $name() {\n        return 'CalendarColumn';\n    }\n\n    static get type() {\n        return 'calendar';\n    }\n\n    static get isGanttColumn() {\n        return true;\n    }\n\n    static get defaults() {\n        return {\n            field  : 'calendar',\n            text   : 'L{Calendar}',\n            editor : {\n                type         : CalendarPicker.type,\n                clearable    : true,\n                allowInvalid : false\n            }\n        };\n    }\n\n    afterConstruct() {\n        super.afterConstruct();\n\n        const\n            me      = this,\n            project = me.grid.project;\n\n        // Store default calendar to filter out this value\n        me.defaultCalendar = project.defaultCalendar;\n\n        me.refreshCalendars();\n\n        project.calendarManagerStore.ion({\n            changePreCommit : me.refreshCalendars,\n            refresh         : me.refreshCalendars,\n            thisObj         : me\n        });\n    }\n\n    // region Events\n\n    refreshCalendars() {\n        if (this.editor) {\n            const project = this.grid.project;\n\n            this.editor.refreshCalendars(project.calendarManagerStore.allRecords);\n        }\n    }\n\n    // endregion\n\n    renderer({ value }) {\n        if (value !== this.defaultCalendar && value?.id != null) {\n            const model = this.grid.project.calendarManagerStore.getById(value.id);\n            return model?.name ?? '';\n        }\n        return '';\n    }\n}\n\nColumnStore.registerColumnType(CalendarColumn);\n", "import DateColumn from '../../Grid/column/DateColumn.js';\n\n/**\n * @module Gantt/column/GanttDateColumn\n */\n\n/**\n * Base column class that displays dates, in the `ll` format by default. If set to `null` uses Gantt's {@link Scheduler.view.mixin.TimelineViewPresets#config-displayDateFormat date format} as a default.\n * The format will be dynamically updated while zooming according to the {@link Scheduler.preset.ViewPreset#field-displayDateFormat} value specified for the ViewPreset being selected.\n *\n * By default, this class hides the left/right arrows to modify the date incrementally, you can enable this with the {@link Grid.column.DateColumn#config-step} config\n * of the {@link #config-editor} config.\n *\n * Default editor is a {@link Core.widget.DateField DateField}.\n *\n * @extends Grid/column/DateColumn\n * @abstract\n */\nexport default class GanttDateColumn extends DateColumn {\n    static get $name() {\n        return 'GanttDateColumn';\n    }\n\n    static get isGanttColumn() {\n        return true;\n    }\n\n    static get defaults() {\n        return {\n            instantUpdate : true,\n            width         : 130,\n            step          : null,\n\n            /**\n             * The date format used to display dates in this column. If `format` is set to `null`,\n             * the current value of the Gantt's {@link Scheduler.view.mixin.TimelineViewPresets#config-displayDateFormat} will be used to format the date value.\n             * @config {String|null}\n             * @category Common\n             */\n            format : 'll'\n        };\n    }\n\n    construct(data, store) {\n        const me = this;\n\n        me.gantt = store.grid;\n\n        super.construct(data, store);\n\n        // If a format is specified, always stick to it\n        if (me.format) {\n            me.explicitFormat = true;\n        }\n        // Otherwise adapt to gantt's format when it changes\n        else {\n            me.gantt.ion({\n                displayDateFormatChange({ format }) {\n                    if (!me.explicitFormat) {\n                        me.set('format', format);\n                    }\n                }\n            });\n        }\n    }\n\n    set format(format) {\n        this.explicitFormat = true;\n        this.set('format', format);\n    }\n\n    get format() {\n        return (this.explicitFormat && this.data.format) || this.gantt.displayDateFormat;\n    }\n\n    set editor(value) {\n        super.editor = value;\n    }\n\n    // assign the project on the editor, even before any editing has started\n    get editor() {\n        const value = super.editor;\n\n        value.project = this.gantt.project;\n\n        return value;\n    }\n}\n", "import ColumnStore from '../../Grid/data/ColumnStore.js';\nimport GanttDateColumn from '../../Gantt/column/GanttDateColumn.js';\n\n/**\n * @module Gantt/column/ConstraintDateColumn\n */\n\n/**\n * A column showing the {@link Gantt/model/TaskModel#field-constraintDate date} of the constraint, applied to the task.\n * The type of the constraint can be displayed with the {@link Gantt/column/ConstraintTypeColumn}.\n *\n * Default editor is a {@link Core/widget/DateField}.\n *\n * If {@link #config-format} is omitted, Gantt's {@link Scheduler/view/mixin/TimelineViewPresets#config-displayDateFormat} will be used as a default value and\n * the format will be dynamically updated while zooming according to the {@link Scheduler/preset/ViewPreset#field-displayDateFormat} value specified for the ViewPreset being selected.\n *\n * @extends Gantt/column/GanttDateColumn\n * @classType constraintdate\n * @column\n */\nexport default class ConstraintDateColumn extends GanttDateColumn {\n\n    static get $name() {\n        return 'ConstraintDateColumn';\n    }\n\n    static get type() {\n        return 'constraintdate';\n    }\n\n    static get defaults() {\n        return {\n            field : 'constraintDate',\n            text  : 'L{Constraint Date}',\n            width : 146\n        };\n    }\n}\n\nColumnStore.registerColumnType(ConstraintDateColumn);\n", "import Column from '../../Grid/column/Column.js';\nimport ColumnStore from '../../Grid/data/ColumnStore.js';\nimport FunctionHelper from '../../Core/helper/FunctionHelper.js';\nimport ConstraintTypePicker from '../../SchedulerPro/widget/ConstraintTypePicker.js';\n\n/**\n * @module Gantt/column/ConstraintTypeColumn\n */\n\n/**\n * {@link Gantt/model/TaskModel#field-constraintType Constraint type} column.\n *\n * Default editor is a {@link SchedulerPro/widget/ConstraintTypePicker}.\n *\n * The constraint can be one of:\n *\n * - Must start on [date]\n * - Must finish on [date]\n * - Start no earlier than [date]\n * - Start no later than [date]\n * - Finish no earlier than [date]\n * - Finish no later than [date]\n *\n * The date of the constraint can be specified with the {@link Gantt/column/ConstraintDateColumn}\n *\n * @extends Grid/column/Column\n * @classType constrainttype\n * @column\n */\nexport default class ConstraintTypeColumn extends Column {\n\n    static get $name() {\n        return 'ConstraintTypeColumn';\n    }\n\n    static get type() {\n        return 'constrainttype';\n    }\n\n    static get isGanttColumn() {\n        return true;\n    }\n\n    static get defaults() {\n        return {\n            field  : 'constraintType',\n            text   : 'L{Constraint Type}',\n            width  : 146,\n            editor : {\n                type         : ConstraintTypePicker.type,\n                clearable    : true,\n                allowInvalid : false\n            },\n            filterable : {\n                filterField : {\n                    type : 'constrainttypepicker'\n                }\n            }\n        };\n    }\n\n    afterConstruct() {\n        const me = this;\n\n        super.afterConstruct();\n\n        me.grid.ion({\n            startCellEdit  : me.onStartCellEdit,\n            finishCellEdit : me.onDoneCellEdit,\n            cancelCellEdit : me.onDoneCellEdit,\n            thisObj        : me\n        });\n\n        // we need to trigger the column refresh **after** the editor locale change\n        // to display properly translated constraint types\n        FunctionHelper.createSequence(me.editor.updateLocalization, me.onEditorLocaleChange, me);\n    }\n\n    onStartCellEdit({ editorContext : { editor, record } }) {\n        if (editor.inputField instanceof ConstraintTypePicker) {\n            editor.inputField.store.addFilter({\n                id       : 'isConstraintTypeApplicable', // no-sanity\n                filterBy : r => record.run('isConstraintTypeApplicable', r.id)\n            });\n            /* eslint-enable quote-props */\n            this._filterDetacher = () => editor.inputField.store.removeFilter('isConstraintTypeApplicable');\n        }\n    }\n\n    onDoneCellEdit() {\n        this._filterDetacher && this._filterDetacher();\n    }\n\n    // * reactiveRenderer() {\n    //     const\n    //         value = yield this.record.$.constraintType,\n    //         model = this.column.editor.store.getById(value);\n    //\n    //     return model && model.text || '';\n    //\n    // }\n\n    renderer({ value }) {\n        // id 'none' is the special \"None\" record, so render empty cell.\n        const model = value != null && value !== 'none' && this.editor.store.getById(value);\n        return model && model.text || '';\n    }\n\n    // Refreshes the column **after** the editor locale change\n    // to display properly translated constraint types\n    onEditorLocaleChange() {\n        this.grid.refreshColumn(this);\n    }\n}\n\nColumnStore.registerColumnType(ConstraintTypeColumn);\n", "import ColumnStore from '../../Grid/data/ColumnStore.js';\nimport GanttDateColumn from '../../Gantt/column/GanttDateColumn.js';\n\n/**\n * @module Gantt/column/DeadlineDateColumn\n */\n\n/**\n * A column showing the {@link Gantt/model/TaskModel#field-deadlineDate} field.\n *\n * Default editor is a {@link Core/widget/DateField}.\n *\n * If {@link #config-format} is omitted, Gantt's {@link Scheduler/view/mixin/TimelineViewPresets#config-displayDateFormat}\n * will be used as a default value and the format will be dynamically updated while zooming according to the\n * {@link Scheduler/preset/ViewPreset#field-displayDateFormat} value specified for the ViewPreset being selected.\n *\n * @extends Gantt/column/GanttDateColumn\n * @classType deadlinedate\n * @column\n */\nexport default class DeadlineDateColumn extends GanttDateColumn {\n\n    static get $name() {\n        return 'DeadlineDateColumn';\n    }\n\n    static get type() {\n        return 'deadlinedate';\n    }\n\n    static get defaults() {\n        return {\n            field : 'deadlineDate',\n            text  : 'L{Deadline}',\n            width : 146\n        };\n    }\n}\n\nColumnStore.registerColumnType(DeadlineDateColumn);\n", "import ColumnStore from '../../Grid/data/ColumnStore.js';\nimport GanttDateColumn from './GanttDateColumn.js';\n\n/**\n * @module Gantt/column/EarlyEndDateColumn\n */\n\n/**\n * A column that displays the task's {@link Gantt.model.TaskModel#field-earlyEndDate early end date}.\n *\n * Default editor is a {@link Core.widget.DateField DateField}.\n *\n * If {@link #config-format} is omitted, Gantt's {@link Scheduler.view.mixin.TimelineViewPresets#config-displayDateFormat} will be used as a default value and\n * the format will be dynamically updated while zooming according to the {@link Scheduler.preset.ViewPreset#field-displayDateFormat} value specified for the ViewPreset being selected.\n *\n * @extends Gantt/column/GanttDateColumn\n * @classType earlyenddate\n * @column\n */\nexport default class EarlyEndDateColumn extends GanttDateColumn {\n\n    static get $name() {\n        return 'EarlyEndDateColumn';\n    }\n\n    static get type() {\n        return 'earlyenddate';\n    }\n\n    static get defaults() {\n        return {\n            field : 'earlyEndDate',\n            text  : 'L{Early End}'\n        };\n    }\n}\n\nColumnStore.registerColumnType(EarlyEndDateColumn);\n", "import ColumnStore from '../../Grid/data/ColumnStore.js';\nimport GanttDateColumn from './GanttDateColumn.js';\n\n/**\n * @module Gantt/column/EarlyStartDateColumn\n */\n\n/**\n * A column that displays the task's {@link Gantt.model.TaskModel#field-earlyStartDate early start date}.\n *\n * Default editor is a {@link Core.widget.DateField DateField}.\n *\n * If {@link #config-format} is omitted, Gantt's {@link Scheduler.view.mixin.TimelineViewPresets#config-displayDateFormat} will be used as a default value and\n * the format will be dynamically updated while zooming according to the {@link Scheduler.preset.ViewPreset#field-displayDateFormat} value specified for the ViewPreset being selected.\n *\n * @extends Gantt/column/GanttDateColumn\n * @classType earlystartdate\n * @column\n */\nexport default class EarlyStartDateColumn extends GanttDateColumn {\n\n    static get $name() {\n        return 'EarlyStartDateColumn';\n    }\n\n    static get type() {\n        return 'earlystartdate';\n    }\n\n    static get defaults() {\n        return {\n            field : 'earlyStartDate',\n            text  : 'L{Early Start}'\n        };\n    }\n}\n\nColumnStore.registerColumnType(EarlyStartDateColumn);\n", "import ColumnStore from '../../Grid/data/ColumnStore.js';\nimport DurationColumn from '../../Scheduler/column/DurationColumn.js';\nimport EffortField from '../../SchedulerPro/widget/EffortField.js';\n\n/**\n * @module Gantt/column/EffortColumn\n */\n\n/**\n * A column showing the task {@link Gantt.model.TaskModel#field-effort effort} and {@link Gantt.model.TaskModel#field-effortUnit units}.\n * The editor of this column understands the time units, so user can enter \"4d\" indicating 4 days effort, or \"4h\" indicating 4 hours, etc.\n * The numeric magnitude can be either an integer or a float value. Both \",\" and \".\" are valid decimal separators.\n * For example, you can enter \"4.5d\" indicating 4.5 days duration, or \"4,5h\" indicating 4.5 hours.\n *\n * Default editor is a {@link Core.widget.DurationField DurationField}.\n *\n * @extends Scheduler/column/DurationColumn\n * @classType effort\n * @column\n */\nexport default class EffortColumn extends DurationColumn {\n\n    static get $name() {\n        return 'EffortColumn';\n    }\n\n    static get type() {\n        return 'effort';\n    }\n\n    //region Config\n\n    static get defaults() {\n        return {\n            field : 'fullEffort',\n            text  : 'L{Effort}'\n        };\n    }\n\n    //endregion\n\n    get defaultEditor() {\n        return {\n            type : EffortField.type,\n            name : this.field\n        };\n    }\n}\n\nColumnStore.registerColumnType(EffortColumn);\n", "import ColumnStore from '../../Grid/data/ColumnStore.js';\nimport GanttDateColumn from '../../Gantt/column/GanttDateColumn.js';\nimport '../../SchedulerPro/widget/EndDateField.js';\n\n/**\n * @module Gantt/column/EndDateColumn\n */\n\n/**\n * A column that displays (and allows user to update) the task's {@link Gantt.model.TaskModel#field-endDate end date}.\n *\n * Default editor is a {@link SchedulerPro.widget.EndDateField EndDateField}.\n *\n * If {@link #config-format} is omitted, Gantt's {@link Scheduler.view.mixin.TimelineViewPresets#config-displayDateFormat} will be used as a default value and\n * the format will be dynamically updated while zooming according to the {@link Scheduler.preset.ViewPreset#field-displayDateFormat} value specified for the ViewPreset being selected.\n *\n * @extends Gantt/column/GanttDateColumn\n * @classType enddate\n * @column\n */\nexport default class EndDateColumn extends GanttDateColumn {\n\n    static get $name() {\n        return 'EndDateColumn';\n    }\n\n    static get type() {\n        return 'enddate';\n    }\n\n    static get defaults() {\n        return {\n            field : 'endDate',\n            text  : 'L{Finish}'\n        };\n    }\n\n    get defaultEditor() {\n        const editorCfg = super.defaultEditor;\n\n        editorCfg.type = 'enddate';\n\n        return editorCfg;\n    }\n}\n\nColumnStore.registerColumnType(EndDateColumn);\n", "import CheckColumn from '../../Grid/column/CheckColumn.js';\nimport ColumnStore from '../../Grid/data/ColumnStore.js';\n\n/**\n * @module Gantt/column/IgnoreResourceCalendarColumn\n */\n\n/**\n * A column that displays (and allows user to change) whether the task ignores its assigned resource calendars\n * when scheduling or not ({@link Gantt.model.TaskModel#field-ignoreResourceCalendar} field).\n *\n * This column uses a {@link Core.widget.Checkbox checkbox} as its editor, and it is not intended to be changed.\n *\n * @extends Grid/column/CheckColumn\n * @classType ignoreresourcecalendar\n * @column\n */\nexport default class IgnoreResourceCalendarColumn extends CheckColumn {\n\n    static $name = 'IgnoreResourceCalendarColumn';\n\n    static type = 'ignoreresourcecalendar';\n\n    static isGanttColumn = true;\n\n    static get defaults() {\n        return {\n            field : 'ignoreResourceCalendar',\n            text  : 'L{Ignore resource calendar}'\n        };\n    }\n}\n\nColumnStore.registerColumnType(IgnoreResourceCalendarColumn);\n", "import CheckColumn from '../../Grid/column/CheckColumn.js';\nimport ColumnStore from '../../Grid/data/ColumnStore.js';\n\n/**\n * @module Gantt/column/InactiveColumn\n */\n\n/**\n * A column that displays (and allows user to update) the task's\n * {@link Gantt/model/TaskModel#field-inactive} field.\n *\n * This column uses a {@link Core/widget/Checkbox} as its editor, and it is not intended to be changed.\n *\n * @extends Grid/column/CheckColumn\n * @classType inactive\n * @column\n */\nexport default class InactiveColumn extends CheckColumn {\n\n    static get $name() {\n        return 'InactiveColumn';\n    }\n\n    static get type() {\n        return 'inactive';\n    }\n\n    static get isGanttColumn() {\n        return true;\n    }\n\n    static get defaults() {\n        return {\n            field : 'inactive',\n            text  : 'L{Inactive}'\n        };\n    }\n}\n\nColumnStore.registerColumnType(InactiveColumn);\n", "import ColumnStore from '../../Grid/data/ColumnStore.js';\nimport GanttDateColumn from './GanttDateColumn.js';\n\n/**\n * @module Gantt/column/LateEndDateColumn\n */\n\n/**\n * A column that displays the task's {@link Gantt.model.TaskModel#field-lateEndDate late end date}.\n *\n * Default editor is a {@link Core.widget.DateField DateField}.\n *\n * If {@link #config-format} is omitted, Gantt's {@link Scheduler.view.mixin.TimelineViewPresets#config-displayDateFormat} will be used as a default value and\n * the format will be dynamically updated while zooming according to the {@link Scheduler.preset.ViewPreset#field-displayDateFormat} value specified for the ViewPreset being selected.\n *\n * @extends Gantt/column/GanttDateColumn\n * @classType lateenddate\n * @column\n */\nexport default class LateEndDateColumn extends GanttDateColumn {\n\n    static get $name() {\n        return 'LateEndDateColumn';\n    }\n\n    static get type() {\n        return 'lateenddate';\n    }\n\n    static get defaults() {\n        return {\n            field : 'lateEndDate',\n            text  : 'L{Late End}'\n        };\n    }\n}\n\nColumnStore.registerColumnType(LateEndDateColumn);\n", "import ColumnStore from '../../Grid/data/ColumnStore.js';\nimport GanttDateColumn from './GanttDateColumn.js';\n\n/**\n * @module Gantt/column/LateStartDateColumn\n */\n\n/**\n * A column that displays the task's {@link Gantt.model.TaskModel#field-lateStartDate late start date}.\n *\n * Default editor is a {@link Core.widget.DateField DateField}.\n *\n * If {@link #config-format} is omitted, Gantt's {@link Scheduler.view.mixin.TimelineViewPresets#config-displayDateFormat} will be used as a default value and\n * the format will be dynamically updated while zooming according to the {@link Scheduler.preset.ViewPreset#field-displayDateFormat} value specified for the ViewPreset being selected.\n *\n * @extends Gantt/column/GanttDateColumn\n * @classType latestartdate\n * @column\n */\nexport default class LateStartDateColumn extends GanttDateColumn {\n\n    static get $name() {\n        return 'LateStartDateColumn';\n    }\n\n    static get type() {\n        return 'latestartdate';\n    }\n\n    static get defaults() {\n        return {\n            field : 'lateStartDate',\n            text  : 'L{Late Start}'\n        };\n    }\n}\n\nColumnStore.registerColumnType(LateStartDateColumn);\n", "import CheckColumn from '../../Grid/column/CheckColumn.js';\nimport ColumnStore from '../../Grid/data/ColumnStore.js';\n\n/**\n * @module Gantt/column/ManuallyScheduledColumn\n */\n\n/**\n * A column that displays (and allows user to update) the task's\n * {@link Gantt.model.TaskModel#field-manuallyScheduled} field.\n *\n * This column uses a {@link Core.widget.Checkbox checkbox} as its editor, and it is not intended to be changed.\n *\n * @extends Grid/column/CheckColumn\n * @classType manuallyscheduled\n * @column\n */\nexport default class ManuallyScheduledColumn extends CheckColumn {\n\n    static get $name() {\n        return 'ManuallyScheduledColumn';\n    }\n\n    static get type() {\n        return 'manuallyscheduled';\n    }\n\n    static get isGanttColumn() {\n        return true;\n    }\n\n    static get defaults() {\n        return {\n            field : 'manuallyScheduled',\n            text  : 'L{Manually scheduled}'\n        };\n    }\n}\n\nColumnStore.registerColumnType(ManuallyScheduledColumn);\n", "import CheckColumn from '../../Grid/column/CheckColumn.js';\nimport ColumnStore from '../../Grid/data/ColumnStore.js';\n\n/**\n * @module Gantt/column/MilestoneColumn\n */\n\n/**\n * A Column that indicates whether a task is a milestone. This column uses a {@link Core.widget.Checkbox checkbox} as\n * its editor.\n *\n * @extends Grid/column/CheckColumn\n * @classType milestone\n * @column\n */\nexport default class MilestoneColumn extends CheckColumn {\n    static suppressNoModelFieldWarning = true;\n    static get $name() {\n        return 'MilestoneColumn';\n    }\n\n    static get type() {\n        return 'milestone';\n    }\n\n    static get isGanttColumn() {\n        return true;\n    }\n\n    static get defaults() {\n        return {\n            field : 'milestone',\n            text  : 'L{Milestone}'\n        };\n    }\n}\n\nColumnStore.registerColumnType(MilestoneColumn);\n", "import TreeColumn from '../../Grid/column/TreeColumn.js';\nimport ColumnStore from '../../Grid/data/ColumnStore.js';\n\n/**\n * @module Gantt/column/NameColumn\n */\n\n/**\n * A tree column showing (and allowing user to edit) the task's {@link Gantt.model.TaskModel#field-name name} field.\n *\n * Default editor is a {@link Core.widget.TextField TextField}.\n *\n * @extends Grid/column/TreeColumn\n * @classType name\n * @column\n */\nexport default class NameColumn extends TreeColumn {\n\n    static get $name() {\n        return 'NameColumn';\n    }\n\n    static get type() {\n        return 'name';\n    }\n\n    static get isGanttColumn() {\n        return true;\n    }\n\n    //region Config\n\n    static get defaults() {\n        return {\n            width : 200,\n            field : 'name',\n            text  : 'L{Name}'\n        };\n    }\n\n    //endregion\n}\n\nColumnStore.registerColumnType(NameColumn);\n", "import Column from '../../Grid/column/Column.js';\nimport ColumnStore from '../../Grid/data/ColumnStore.js';\nimport '../../Core/widget/TextAreaPickerField.js';\n\n/**\n * @module Gantt/column/NoteColumn\n */\n\n/**\n * A column which displays a task's {@link Gantt.model.TaskModel#field-note note} field.\n *\n * Default editor is a {@link Core.widget.TextAreaPickerField}.\n *\n * @extends Grid/column/Column\n * @classType note\n * @column\n */\nexport default class NoteColumn extends Column {\n\n    static get $name() {\n        return 'NoteColumn';\n    }\n\n    static get type() {\n        return 'note';\n    }\n\n    static get isGanttColumn() {\n        return true;\n    }\n\n    static get defaults() {\n        return {\n            field  : 'note',\n            text   : 'L{Note}',\n            width  : 150,\n            editor : {\n                type : 'textareapickerfield'\n            }\n        };\n    }\n\n    renderer({ value }) {\n        return (value || '').trim();\n    }\n\n}\n\nColumnStore.registerColumnType(NoteColumn);\n", "import NumberColumn from '../../Grid/column/NumberColumn.js';\nimport ColumnStore from '../../Grid/data/ColumnStore.js';\nimport '../../Core/widget/NumberField.js';\n\n/**\n * @module Gantt/column/PercentDoneColumn\n */\n\n/**\n * A column representing the {@link SchedulerPro.model.mixin.PercentDoneMixin#field-percentDone percentDone} field of the task.\n *\n * Default editor is a {@link Core.widget.NumberField NumberField}.\n *\n * @extends Grid/column/NumberColumn\n * @classType percentdone\n * @column\n */\nexport default class PercentDoneColumn extends NumberColumn {\n    circleHeightPercentage = 0.75;\n\n    static get $name() {\n        return 'PercentDoneColumn';\n    }\n\n    static get type() {\n        return 'percentdone';\n    }\n\n    static get isGanttColumn() {\n        return true;\n    }\n\n    //region Config\n\n    static get fields() {\n        return [\n            /**\n             * Set to `true` to render a circular progress bar to visualize the task progress\n             * @config {Boolean} showCircle\n             */\n            'showCircle'\n        ];\n    }\n\n    static get defaults() {\n        return {\n            field : 'percentDone',\n            text  : 'L{% Done}',\n            unit  : '%',\n            step  : 1,\n            min   : 0,\n            max   : 100,\n            width : 90\n        };\n    }\n    //endregion\n\n    construct(config) {\n        super.construct(...arguments);\n\n        if (this.showCircle) {\n            this.htmlEncode = false;\n        }\n    }\n\n    defaultRenderer({ record, isExport, value }) {\n        value = record.getFormattedPercentDone(value);\n\n        if (isExport) {\n            return value;\n        }\n\n        if (this.showCircle) {\n            return {\n                className : {\n                    'b-percentdone-circle' : 1,\n                    'b-full'               : value === 100,\n                    'b-empty'              : value === 0\n                },\n                style : {\n                    height                      : this.circleHeightPercentage * this.grid.rowHeight + 'px',\n                    width                       : this.circleHeightPercentage * this.grid.rowHeight + 'px',\n                    '--gantt-percentdone-angle' : `${value / 100}turn`\n                },\n                dataset : {\n                    value\n                }\n            };\n\n        }\n\n        return value + this.unit;\n    }\n\n    // formatValue(value) {\n    //     if (value <= 99) {\n    //         return Math.round(value);\n    //     }\n    //     else {\n    //         return Math.floor(value);\n    //     }\n    // }\n\n    // * reactiveRenderer() {\n    //     const\n    //         { column : me, record, client } = this,\n    //         value = me.formatValue(yield record.$.percentDone);\n    //\n    //     if (me.showCircle) {\n    //         const size  = client.rowHeight * 0.8;\n    //\n    //         return {\n    //             className : 'b-percentdone-circle',\n    //             style     : {\n    //                 animationDelay : `-${value - 0.1}s`,\n    //                 width          : size,\n    //                 height         : size\n    //             },\n    //             dataset : {\n    //                 value\n    //             }\n    //         };\n    //     }\n    //\n    //     return value + me.unit;\n    // }\n}\n\nColumnStore.registerColumnType(PercentDoneColumn);\n", "import Combo from '../../Core/widget/Combo.js';\nimport List from '../../Core/widget/List.js';\nimport Collection from '../../Core/util/Collection.js';\nimport TextField from '../../Core/widget/TextField.js';\nimport StringHelper from '../../Core/helper/StringHelper.js';\nimport DateHelper from '../../Core/helper/DateHelper.js';\nimport LocaleManager from '../../Core/localization/LocaleManager.js';\nimport Objects from '../../Core/helper/util/Objects.js';\nimport Dependencies from '../../Scheduler/feature/Dependencies.js';\nimport Rectangle from '../../Core/helper/util/Rectangle.js';\n\n/**\n * @module Gantt/widget/DependencyField\n */\n\n// Enables toggling of link type for each side\nconst\n    toggleTypes = {\n        from : [2, 3, 0, 1],\n        to   : [1, 0, 3, 2]\n    },\n    fromTo = {\n        from : 1,\n        to   : 1\n    },\n    buildDependencySuffixRe = () => new RegExp(`(${dependencyTypes.join('|')})?((?:[+-])\\\\d+[a-z]*)?`, 'i');\n\n// <remove-on-release>\n// TODO: Move to static class field?\n// </remove-on-release>\n// For parsing dependency strings and converting string to type.\n// dependencyTypes may be localized in the Gantt class domain\n// in which case the Regex is generated from the four local values.\nlet dependencyTypes = [\n        'SS',\n        'SF',\n        'FS',\n        'FF'\n    ],\n    dependencySuffixRe = buildDependencySuffixRe();\n\n/**\n * Chooses dependencies, connector sides and lag time for dependencies of a Task.\n *\n * This field can be used as an editor for a {@link Grid/column/Column}.\n * It is used as the default editor for the {@link Gantt/column/DependencyColumn}.\n *\n * The contextual task is the `record` property of this field's {@link Core/widget/Widget#property-owner}.\n *\n * {@inlineexample Gantt/widget/DependencyField.js}\n * @extends Core/widget/Combo\n * @classType dependencyfield\n * @inputfield\n */\nexport default class DependencyField extends Combo {\n    //region Config\n\n    static $name = 'DependencyField';\n\n    // Factoryable type name\n    static type = 'dependencyfield';\n\n    static configurable = {\n        listCls : 'b-predecessor-list',\n\n        displayField : 'name',\n\n        valueField : 'name',\n\n        // Filtering down to zero using the captive filter field in the picker\n        // should not make the overall field invalid.\n        validateFilter : false,\n\n        // The filtering field is in the picker.\n        // Don't hide it when the input length drops below minChars\n        minChars : 0,\n\n        // The main input's text is not the filter string, so it must not be cleared on picker hide\n        clearTextOnPickerHide : false,\n\n        picker : {\n            floating            : true,\n            scrollAction        : 'realign',\n            itemsFocusable      : false,\n            activateOnMouseover : true,\n            align               : {\n                align    : 't0-b0',\n                axisLock : true\n            },\n            maxHeight  : 324,\n            minHeight  : 161,\n            scrollable : {\n                overflowY : true\n            },\n            autoShow     : false,\n            focusOnHover : false\n        },\n\n        /**\n         * Delimiter between dependency ids in the field\n         * @config {String}\n         * @default\n         */\n        delimiter : ';',\n\n        /**\n         * The dependency store\n         * @config {Gantt.data.DependencyStore}\n         * @default\n         */\n        dependencyStore : null,\n\n        /**\n         * The other task's relationship with this field's contextual task.\n         * This will be `'from'` if we are editing predecessors, and `'to'` if\n         * we are editing successors.\n         * @config {'from'|'to'}\n         */\n        otherSide : null,\n\n        /**\n         * This field's contextual task's relationship with the other task.\n         * This will be `'to'` if we are editing predecessors, and `'from'` if\n         * we are editing successors.\n         * @config {'from'|'to'}\n         */\n        ourSide : null,\n\n        multiSelect : true,\n\n        chipView : null,\n\n        validateOnInput : false,\n\n        /**\n         * A task field (id, wbsCode, sequenceNumber etc) that will be used when displaying and editing linked\n         * tasks. Defaults to {@link Gantt/view/GanttBase#config-dependencyIdField Gantt#dependencyIdField}\n         * @config {String}\n         */\n        dependencyIdField : null,\n\n        /**\n         * The task whose dependencies are being edited (used to filter out invalid options)\n         * @config {String}\n         * @internal\n         */\n        eventRecord : null,\n\n        /**\n         * The sorters defining how to sort tasks in the drop down list, defaults to sorting by `name` field\n         * ascending. See {@link Core.data.mixin.StoreSort} for more information.\n         * @config {Sorter[]|String[]}\n         */\n        sorters : [\n            {\n                field : 'name'\n            }\n        ]\n    };\n\n    //endregion\n\n    construct(config) {\n        const\n            me                     = this,\n            { ourSide, otherSide } = config;\n\n        //<debug>\n        if (!fromTo[ourSide] || !fromTo[otherSide] || ourSide === otherSide) {\n            throw new Error('DependencyField needs \"ourSide\" and \"otherSide\" configs of \"from\" or \"to\"');\n        }\n        //</debug>\n\n        me.dependencies = new Collection({\n            extraKeys : otherSide\n        });\n        me.startCollection = new Collection({\n            extraKeys : otherSide\n        });\n        super.construct(config);\n\n        me.delimiterRegEx = new RegExp(`\\\\s*${me.delimiter}\\\\s*`);\n\n        const localizeDependencies = () => {\n            dependencyTypes = me.L('L{DependencyType.short}');\n            dependencySuffixRe = buildDependencySuffixRe();\n            me.syncInputFieldValue();\n        };\n\n        // Update when changing locale\n        LocaleManager.ion({ locale : localizeDependencies, thisObj : me });\n\n        localizeDependencies();\n    }\n\n    internalOnInput() {\n        this.clearError(undefined, true);\n\n        if (this.isValid) {\n            // Avoid combo filtering. That's done from our FilterField\n            TextField.prototype.internalOnInput.call(this);\n        }\n    }\n\n    get invalidValueError() {\n        return 'L{invalidDependencyFormat}';\n    }\n\n    onInternalKeyDown(keyEvent) {\n        const { key } = keyEvent;\n\n        // Don't pass Enter down, that selects when ComboBox passes it down\n        // to its list. We want default action on Enter.\n        // Our list has its own, built in filter field which provides key events.\n        if (key === 'Enter') {\n            this.syncInvalid();\n        }\n        else {\n            super.onInternalKeyDown?.(keyEvent);\n        }\n        if (this.pickerVisible && key === 'ArrowDown') {\n            this.filterField.focus();\n        }\n    }\n\n    onTriggerClick() {\n        if (this.pickerVisible) {\n            super.onTriggerClick(...arguments);\n        }\n        else {\n            this.doFilter(this.filterInput ? this.filterInput.value : null);\n        }\n    }\n\n    changeStore(store) {\n        // Filter the store to hide the field's Task\n        store = store.chain(record => !this.eventRecord || (record.id !== this.eventRecord.id), null, {\n            excludeCollapsedRecords : false,\n            sorters                 : this.sorters\n        });\n\n        return super.changeStore(store);\n    }\n\n    changePicker(picker, oldPicker) {\n        const\n            me          = this,\n            filterField = me.filterField || (me.filterField = new TextField({\n                cls         : 'b-dependency-list-filter',\n                clearable   : true,\n                placeholder : 'Filter',\n                triggers    : {\n                    filter : {\n                        cls   : 'b-icon b-icon-filter',\n                        align : 'start'\n                    }\n                },\n                internalListeners : {\n                    input({ event }) {\n                        me.filterOnInput(event);\n                    },\n                    clear({ event }) {\n                        Object.defineProperty(event, 'target', {\n                            configurable : true,\n                            value        : filterFieldInput\n                        });\n                        me.filterOnInput.now(event);\n                    }\n                }\n            })),\n            filterFieldInput = me.filterInput = filterField.input,\n            result = DependencyField.reconfigure(oldPicker, picker ? Objects.merge({\n                owner      : me,\n                store      : me.store,\n                cls        : `b-dependency-list ${me.listCls}`,\n                itemTpl    : me.listItemTpl,\n                forElement : me[me.pickerAlignElement],\n                align      : {\n                    anchor    : me.overlayAnchor,\n                    target    : me[me.pickerAlignElement],\n                    // Reasonable minimal height to fit few combo items below the combo.\n                    // When height is not enough, list will appear on top. That works for windows higher than 280px,\n                    // worrying about shorter windows sounds overkill.\n                    // We cannot use relative measures here, each combo list item is ~40px high\n                    minHeight : me.inlinePicker ? null : Math.min(3, me.store.count) * 40\n                },\n\n                navigator : {\n                    keyEventTarget : filterFieldInput,\n                    processEvent   : e => {\n                        if (e.key === 'Escape') {\n                            me.hidePicker();\n                        }\n                        else {\n                            return e;\n                        }\n                    }\n                },\n                onItem         : me.onPredecessorClick.bind(me),\n                getItemClasses : function(task) {\n                    const\n                        result     = List.prototype.getItemClasses.call(this, task),\n                        dependency = me.dependencies.getBy(me.otherSide + 'Event', task),\n                        cls        = dependency ? ` b-selected b-${dependency.getConnectorString(1).toLowerCase()}` : '';\n\n                    return result + cls;\n                }\n            }, picker) : null, me);\n\n        // May have been set to null (destroyed)\n        if (result) {\n            // Avoid pulling scrollable in too early to not trigger ResizeObserver in FF\n            result.ion({\n                show() {\n                    // The scrolling viewport is obscured by the filterField\n                    Object.defineProperty(result.scrollable, 'viewport', {\n                        get() {\n                            return Rectangle.client(this.element).deflate(filterField.height, 0, 0, 0);\n                        }\n                    });\n                },\n                once    : true,\n                thisObj : me\n            });\n            filterField.owner = result;\n            filterField.render(result.contentElement);\n        }\n        // If it has been destroyed, destroy orphaned filterField\n        else {\n            me.destroyProperties('filterField');\n        }\n\n        return result;\n    }\n\n    updateEventRecord() {\n        // Ensure this field's Task is filtered out.\n        // See our changeStore which owns the chainedFilterFn.\n        this.store.fillFromMaster();\n    }\n\n    onPickerShow({ source : picker }) {\n        const\n            me                 = this,\n            { element }        = me.filterField,\n            { contentElement } = picker;\n\n        picker.minWidth = me[me.pickerAlignElement].offsetWidth;\n        if (contentElement.firstChild !== element) {\n            contentElement.insertBefore(element, contentElement.firstChild);\n        }\n\n        super.onPickerShow(...arguments);\n    }\n\n    listItemTpl(task) {\n        const\n            taskName              = StringHelper.encodeHtml(task.name),\n            { dependencyIdField } = this.owner,\n            idField               = (dependencyIdField && dependencyIdField !== task.constructor.idField) ? dependencyIdField : task.constructor.idField,\n            // Don't output generated ids in the list\n            taskIdentifier        = !task.isPhantom ? String(task[idField]) : '';\n\n        return `<div class=\"b-predecessor-item-text\">${taskName} ${taskIdentifier.length ? `(${taskIdentifier})` : ''}</div>\n            <div class=\"b-sch-box b-from\" data-side=\"from\"></div>\n            <div class=\"b-sch-box b-to\" data-side=\"to\"></div>`;\n    }\n\n    get isValid() {\n        return Boolean(!this.task || this.parseDependencies(this.input.value)) && super.isValid;\n    }\n\n    set value(dependencies) {\n        const\n            me                     = this,\n            dependenciesCollection = me.dependencies;\n\n        // Convert strings, eg: '1fs-2h;2ss+1d' to Dependency records\n        if (typeof dependencies === 'string') {\n            me.input.value = dependencies;\n\n            dependencies = me.parseDependencies(dependencies);\n            if (!dependencies) {\n                me.syncInvalid();\n                return;\n            }\n\n            dependencies = dependencies.map(dep => new me.dependencyStore.modelClass(dep));\n        }\n        else {\n            me.startCollection.clear();\n\n            if (dependencies !== null) {\n                me.startCollection.values = dependencies;\n            }\n        }\n\n        dependenciesCollection.clear();\n\n        // Allow clearing the value by passing null (happens when clicking clear button)\n        if (dependencies !== null) {\n            dependenciesCollection.values = dependencies;\n        }\n\n        // If there has been a change, update the textual value.\n        if (!me.inputting) {\n            me.syncInputFieldValue();\n        }\n    }\n\n    get value() {\n        return this.dependencies.values;\n    }\n\n    get inputValue() {\n        const\n            me        = this,\n            { value } = me;\n\n        return value == null ? '' : me.constructor.dependenciesToString(value, me.otherSide, me.delimiter, me.dependencyIdField);\n    }\n\n    onPredecessorClick({ source : list, item, record : task, event }) {\n        const\n            me               = this,\n            { dependencies } = me,\n            box              = event.target.closest('.b-sch-box'),\n            side             = box?.dataset.side;\n\n        let dependency = dependencies.getBy(me.otherSide + 'Event', task);\n\n        // Prevent regular selection continuing after this click handler.\n        item.dataset.noselect = true;\n        // As we bypass List's selection, we trigger a manual change event to allow any prior error message to be cleared\n        me.trigger('change', { value : me.value, event, userAction : true });\n\n        // Click text to remove predecessor completely\n        if (dependency && !box) {\n            dependencies.remove(dependency);\n        }\n        else {\n            // Clicking a connect side box toggles that\n            if (dependency) {\n                // We must create a clone because the record is \"live\".\n                // Updates to it go back to the UI.\n                // Also we cannot really modify record here. When editing will finish editor will compare `toJSON`\n                // output of models, which refers to the `model.data` field. And if we modify record instance, change\n                // won't go to the data object, it will be kept in the field though. Only way to sync model.data.type and\n                // model.type here is to instantiate model with correct data already\n                const\n                    { id, type } = dependency;\n\n                // Using private argument here to avoid copying record current values, we're only interested in data object\n                dependency = dependency.copy({ id, type : toggleTypes[side][type] }, { skipFieldIdentifiers : true });\n                // HACK: Above code results having serialized values in `${me.otherSide}Event` field\n                // and we expect to find task instance when doing code like:\n                //     dependencies.getBy(me.otherSide + 'Event', task)\n                // So let's put the task instance there manually.\n                dependency[`${me.otherSide}Event`] = task;\n                dependency[`${me.ourSide}Event`] = me.task;\n\n                // Replace the old predecessor link with the new, modified one.\n                // Collection will *replace* in-place due to ID matching.\n                dependencies.add(dependency);\n            }\n            // Create a new dependency to/from the clicked task\n            else {\n                dependencies.add(me.dependencyStore.createRecord({\n                    [`${me.otherSide}Event`] : task,\n                    [`${me.ourSide}Event`]   : me.task\n                }, true));\n            }\n        }\n        me.syncInputFieldValue();\n\n        list.refresh();\n    }\n\n    static dependenciesToString(dependencies, side, delimiter = ';', eventIdField = 'id') {\n        const eventField = `${side}Event`;\n        const getEventId = dependency => {\n            const event = dependency[eventField];\n            return event?.isModel ? event[eventIdField] : (event || '');\n        };\n\n        if (dependencies?.length) {\n            const result = dependencies.sort((a, b) => getEventId(a) - getEventId(b)).map(dependency =>\n                `${getEventId(dependency)}${Dependencies.getLocalizedDependencyType(dependency.getConnectorString())}${dependency.getLag()}`\n            );\n\n            return result.join(delimiter);\n        }\n\n        return '';\n    }\n\n    // static * dependenciesToStringGenerator(dependencies, otherSide, delimiter = ';') {\n    //     const result = [];\n    //\n    //     if (dependencies && dependencies.length) {\n    //         for (const dependency of dependencies) {\n    //             const\n    //                 otherSideEvent = yield dependency.$[otherSide + 'Event'],\n    //                 otherSideEventId = otherSideEvent ? otherSideEvent.id : (otherSideEvent || '');\n    //\n    //             result.push(`${otherSideEventId}${yield dependency.getConnectorString()}${dependency.getLag()}`);\n    //         }\n    //     }\n    //\n    //     return result.join(delimiter);\n    // }\n\n    get task() {\n        return this.owner?.record;\n    }\n\n    parseDependencies(value) {\n        const\n            me              = this,\n            {\n                store : taskStore,\n                task,\n                dependencyStore\n            }               = me,\n            dependencies    = value.split(me.delimiterRegEx),\n            DependencyModel = dependencyStore.modelClass,\n            result          = [];\n\n        for (let i = 0; i < dependencies.length; i++) {\n            const dependencyText = dependencies[i];\n\n            if (dependencyText) {\n                let idLen      = dependencyText.length + 1,\n                    linkedTask = null,\n                    linkedTaskId;\n\n                for (; idLen && !linkedTask; idLen--) {\n                    linkedTaskId = dependencyText.substr(0, idLen);\n                    linkedTask = taskStore.find(task => String(task[me.dependencyIdField]) === linkedTaskId, true);\n                }\n                if (!linkedTask) {\n                    return null;\n                }\n\n                // Chop off connector and lag specification, i.e. the \"SS-1h\" part\n                const\n                    remainder = dependencyText.substr(idLen + 1),\n                    // Start the structure of the dependency we are describing\n                    dependency = {\n                    // This will be \"from\" if we're editing predecessors\n                    // and \"to\" if we're editing successors\n                        [`${me.otherSide}Event`] : linkedTask,\n\n                        // This will be \"to\" if we're editing predecessors\n                        // and \"from\" if we're editing successors\n                        [`${me.ourSide}Event`] : task,\n\n                        type : DependencyModel.Type.EndToStart\n                    };\n\n                // There's a trailing edge/lag spec\n                if (remainder.length) {\n                    const edgeAndLag = dependencySuffixRe.exec(remainder);\n\n                    if (edgeAndLag && (edgeAndLag[1] || edgeAndLag[2])) {\n                        // The SS/FF bit\n                        if (edgeAndLag[1]) {\n                            dependency.type = dependencyTypes.indexOf(edgeAndLag[1].toUpperCase());\n                        }\n                        // The -1h bit\n                        if (edgeAndLag[2]) {\n                            const\n                                parsedLag = DateHelper.parseDuration(edgeAndLag[2], true, task.durationUnit);\n                            dependency.lag = parsedLag.magnitude;\n                            dependency.lagUnit = parsedLag.unit;\n                        }\n                    }\n                    else {\n                        return null;\n                    }\n                }\n\n                result.push(dependency);\n            }\n        }\n\n        return result;\n    }\n\n    get needsInputSync() {\n        return super.needsInputSync || (!this.isValid && this.inputValue !== this.input.value);\n    }\n\n    doDestroy() {\n        this.dependencies.destroy();\n        this.startCollection.destroy();\n        super.doDestroy();\n    }\n};\n\n// Register this widget type with its Factory\nDependencyField.initClass();\n", "import Column from '../../Grid/column/Column.js';\nimport ColumnStore from '../../Grid/data/ColumnStore.js';\nimport DependencyField from '../widget/DependencyField.js';\nimport Delayable from '../../Core/mixin/Delayable.js';\n\n/**\n * @module Gantt/column/DependencyColumn\n */\nconst\n    hasNoProject = v => !v.project,\n    depIsValid   = v => v;\n\n/**\n * A column which displays, in textual form, the dependencies which either link to the\n * contextual task from other, preceding tasks, or dependencies which link the\n * contextual task to successor tasks.\n *\n * Default editor is a {@link Gantt/widget/DependencyField}.\n *\n * The {@link Grid/column/Column#config-field} MUST be either `predecessors` or `successors` in order\n * for this column to know what kind of dependency it is showing.\n *\n * By default predecessors and successors have a task ID as a value. But it's configurable and any field may be used to display there (as example: wbsCode or sequenceNumber)\n * using {@link #config-dependencyIdField}\n *\n * @classType dependency\n * @extends Grid/column/Column\n * @column\n */\nexport default class DependencyColumn extends Delayable(Column) {\n\n    static get $name() {\n        return 'DependencyColumn';\n    }\n\n    static get type() {\n        return 'dependency';\n    }\n\n    static get fields() {\n        return [\n            /**\n             * Delimiter used for displayed value and editor\n             * @config {String} delimiter\n             */\n            { name : 'delimiter', defaultValue : ';' },\n\n            /**\n             * A task field (id, wbsCode, sequenceNumber etc) that will be used when displaying and editing linked tasks. Defaults to {@link Gantt/view/GanttBase#config-dependencyIdField}\n             * @config {String} dependencyIdField\n             */\n            { name : 'dependencyIdField', defaultValue : null }\n        ];\n    }\n\n    static get defaults() {\n        return {\n            htmlEncode : false,\n            width      : 120,\n\n            renderer({ record, grid }) {\n                const dependencyIdField = this.dependencyIdField || grid.dependencyIdField;\n                return DependencyField.dependenciesToString(record[this.field], this.field === 'predecessors' ? 'from' : 'to', this.delimiter, dependencyIdField);\n            },\n\n            filterable({ value, record : taskRecord, column }) {\n                const\n                    dependencyIdField = column.dependencyIdField || column.grid.dependencyIdField;\n\n                value = value.toLowerCase();\n\n                return taskRecord[`${column.field === 'predecessors' ? 'predecessorTasks' : 'successorTasks'}`].some(linkedTask => {\n                    return linkedTask && value.includes(linkedTask[dependencyIdField]?.toString().toLowerCase());\n                });\n            }\n        };\n    }\n\n    afterConstruct() {\n        //<debug>\n        if (this.field !== 'predecessors' && this.field !== 'successors') {\n            throw new Error('Dependency column field must be either \\'predecessors\\' or \\'successors\\'');\n        }\n        //</debug>\n\n        super.afterConstruct();\n    }\n\n    getFilterableValue(record) {\n        return this.renderer({ record, grid : this.grid });\n    }\n\n    async finalizeCellEdit({ grid, record, inputField, value, oldValue, editorContext }) {\n        inputField.clearError();\n\n        if (record && value) {\n            const\n                toValidate      = value.filter(hasNoProject),\n                project         = grid.dependencyStore.getProject(),\n                oldDependencies = record[this.field];\n\n            await project.commitAsync();\n\n            if (project.isDestroyed) return;\n\n            const\n                results  = await Promise.all(\n                    toValidate.map(dependency => project.isValidDependencyModel(dependency, oldDependencies))\n                ),\n                valid = results.every(depIsValid);\n\n            if (!valid) {\n                return editorContext.column.L('L{Invalid dependency}');\n            }\n            return true;\n        }\n    }\n\n    get defaultEditor() {\n        const\n            me = this,\n            { grid } = me,\n            isPredecessor = me.field === 'predecessors';\n\n        return {\n            type              : 'dependencyfield',\n            grid,\n            name              : me.field,\n            delimiter         : me.delimiter,\n            dependencyIdField : me.dependencyIdField || grid.dependencyIdField,\n            ourSide           : isPredecessor ? 'to' : 'from',\n            otherSide         : isPredecessor ? 'from' : 'to',\n            store             : grid.eventStore || grid.taskStore,\n            dependencyStore   : grid.dependencyStore\n        };\n    }\n}\n\nColumnStore.registerColumnType(DependencyColumn);\n", "import ColumnStore from '../../Grid/data/ColumnStore.js';\nimport DependencyColumn from './DependencyColumn.js';\n\n/**\n * @module Gantt/column/PredecessorColumn\n */\n\n/**\n * A column which displays, in textual form, the dependencies which link from tasks\n * upon which the contextual task depends.\n *\n * This type of column is editable by default. Default editor is a {@link Gantt/widget/DependencyField}.\n *\n * This column will be ignored if using {@link Grid/feature/CellCopyPaste} to paste or {@link Grid/feature/FillHandle}\n * to fill values.\n *\n * @classType predecessor\n * @extends Gantt/column/DependencyColumn\n * @column\n */\nexport default class PredecessorColumn extends DependencyColumn {\n\n    static get $name() {\n        return 'PredecessorColumn';\n    }\n\n    static get type() {\n        return 'predecessor';\n    }\n\n    static get isGanttColumn() {\n        return true;\n    }\n\n    static get defaults() {\n        return {\n            text  : 'L{Predecessors}',\n            field : 'predecessors'\n        };\n    }\n\n    canFillValue = () => false;\n}\n\nColumnStore.registerColumnType(PredecessorColumn);\n", "import AssignmentStore from '../../SchedulerPro/data/AssignmentStore.js';\n\n/**\n * @module Gantt/data/AssignmentsManipulationStore\n */\n\n/**\n * Special store class for _single_ task/event assignments manipulation, used by {@link Gantt/widget/AssignmentGrid}\n *\n * Contains a collection of {@link Gantt/model/AssignmentModel} records.\n *\n * @extends Scheduler/data/AssignmentStore\n * @internal\n */\nexport default class AssignmentsManipulationStore extends AssignmentStore {\n    //region Config\n    static get defaultConfig() {\n        return {\n            storage : {\n                extraKeys : ['resource']\n            },\n            callOnFunctions : true,\n\n            /**\n             * Event model to manipulate assignments of, the event should be part of a project.\n             *\n             * @config {Gantt.model.TaskModel}\n             */\n            projectEvent : null,\n\n            /**\n             * Flag indicating whether assigned resources should be placed (floated) before unassigned ones.\n             *\n             * @config {Boolean}\n             * @private\n             */\n            floatAssignedResources : true,\n\n            /**\n             * Flag indicating whether assigned resources should be floated live\n             *\n             * @config {Boolean}\n             * @private\n             */\n            liveFloatAssignedResources : false\n        };\n    }\n\n    afterConfigure() {\n        const me = this;\n\n        super.afterConfigure();\n\n        me.addSorter({\n            fn : me.defaultSort.bind(me)\n        });\n    }\n\n    //endregion\n\n    get projectEvent() {\n        return this._projectEvent;\n    }\n\n    set projectEvent(projectEvent) {\n        const me = this;\n\n        // If the event is the same, but some underlying data has changed, we must still update\n        if (\n            projectEvent != me._projectEvent ||\n            (projectEvent && (projectEvent.generation !== me._projectEventGeneration)) ||\n            (projectEvent?.getProject()?.assignmentStore.storage.generation !== me._assignmentStoreGeneration)\n        ) {\n\n            me._projectEvent = projectEvent;\n            me._projectEventGeneration = projectEvent?.generation;\n            me._assignmentStoreGeneration = projectEvent?.getProject()?.assignmentStore.storage.generation;\n\n            if (projectEvent) {\n                //<debug>\n                // if (!hasHasAssignments(projectEvent)) {\n                //     throw new Error('Event should have HasAssignments mixin mixed in!');\n                // }\n                // Being part of project event should have access to event store\n                if (!projectEvent.getEventStore()) {\n                    throw new Error('Event should be part of an event store');\n                }\n\n                if (!projectEvent.getResourceStore()) {\n                    throw new Error('Event\\'s event store should have a reference to resource store!');\n                }\n\n                if (!projectEvent.getAssignmentStore()) {\n                    throw new Error('Event\\'s event store should have a reference to assignment store!');\n                }\n                //</debug>\n\n                me.fillFromMaster();\n\n                me.sort();\n            }\n            else {\n                me.removeAll();\n            }\n        }\n    }\n\n    get floatAssignedResources() {\n        return this._floatAssignedResources;\n    }\n\n    set floatAssignedResources(value) {\n        const me = this;\n\n        if (value !== me.floatAssignedResources) {\n            me._floatAssignedResources = value;\n            me.sort();\n        }\n    }\n\n    /**\n     * Fills this store from master {@link Gantt/data/ResourceStore resource} store and {@link Gantt/data/AssignmentStore assignment} store.\n     * @internal\n     */\n    fillFromMaster() {\n        const\n            me               = this,\n            { projectEvent } = me;\n\n        if (projectEvent) {\n            const\n                {\n                    assignmentStore,\n                    resourceStore\n                }                  = projectEvent,\n                resourceDataSource = assignmentStore.modelClass.getFieldDefinition('resource').dataSource,\n                eventDataSource    = assignmentStore.modelClass.getFieldDefinition('event').dataSource,\n                storeData          = [];\n\n            // For each excludes group header records - ResourceStore might be grouped externally\n            resourceStore.forEach(\n                resource => {\n                    const\n                        existingAssignment = assignmentStore.getAssignmentForEventAndResource(projectEvent, resource),\n                        data               = Object.assign(\n                            { units : 0 },\n                            existingAssignment?.data\n                        );\n\n                    delete data.id;\n                    delete data.eventId;\n                    delete data.resourceId;\n                    // handle data mapping cases\n                    delete data[resourceDataSource];\n                    delete data[eventDataSource];\n\n                    // apply resource and event after cleaning data mapping\n                    Object.assign(data, { resource, event : projectEvent });\n\n                    storeData.push(data);\n                },\n                this,\n                {\n                    includeFilteredOutRecords    : true,\n                    includeCollapsedGroupRecords : true\n                }\n            );\n\n            me.data = storeData;\n        }\n    }\n\n    toValue() {\n        return this.query(a => a.units > 0);\n    }\n\n    toValueString() {\n        return this.toValue().join(', ');\n    }\n\n    defaultSort(lhs, rhs) {\n        let result = 0;\n\n        if (this.floatAssignedResources) {\n            if (!rhs.units && lhs.units) {\n                result = -1;\n            }\n            else if (!lhs.units && rhs.units) {\n                result = 1;\n            }\n            else {\n                result = lhs.resourceName.localeCompare(rhs.resourceName);\n            }\n        }\n        else {\n            result = lhs.resourceName.localeCompare(rhs.resourceName);\n        }\n\n        return result;\n    }\n\n    onUpdate({ changes }) {\n        const me = this;\n\n        if (!me.isConfiguring) {\n            if (Object.hasOwnProperty.call(changes, 'event')) {\n                if (me.floatAssignedResources && me.liveFloatAssignedResources) {\n                    me.sort();\n                }\n            }\n        }\n    }\n}\n", "import SchedulerProAssignmentModel from '../../SchedulerPro/model/AssignmentModel.js';\nimport { isSerializableEqual } from '../../Engine/chrono/ModelFieldAtom.js';\n\n/**\n * @module Gantt/model/AssignmentModel\n */\n\n/**\n * This class represent a single assignment of a {@link Gantt.model.ResourceModel resource} to a\n * {@link Gantt.model.TaskModel task} in your gantt chart.\n *\n * @extends SchedulerPro/model/AssignmentModel\n *\n * @typings SchedulerPro/model/AssignmentModel -> SchedulerPro/model/SchedulerProAssignmentModel\n * @uninherit Core/data/mixin/TreeNode\n */\nexport default class AssignmentModel extends SchedulerProAssignmentModel {\n    //region Fields\n    static get fields() {\n        /**\n         * The numeric, percent-like value, indicating what is the \"contribution level\"\n         * of the resource availability to the task.\n         * Number 100, means that the assigned resource spends 100% of its working time to the task.\n         * Number 50 means that the resource spends only half of its available time for the assigned task.\n         * @field {Number} units\n         */\n        return [\n            /**\n             * Id for event to assign. Note that after load it will be populated with the actual event.\n             * @field {Gantt.model.TaskModel} event\n             * @accepts {String|Number|Gantt.model.TaskModel}\n             */\n            {\n                name      : 'event',\n                persist   : true,\n                serialize : record => record?.id,\n                isEqual   : isSerializableEqual\n            },\n\n            /**\n             * Id for resource to assign to. Note that after load it will be populated with the actual resource.\n             * @field {Gantt.model.ResourceModel} resource\n             * @accepts {String|Number|Gantt.model.ResourceModel}\n             */\n            {\n                name      : 'resource',\n                persist   : true,\n                serialize : record => record?.id,\n                isEqual   : isSerializableEqual\n            },\n\n            /**\n             * Hidden\n             * @field {String|Number} eventId\n             * @hide\n             */\n            'eventId',\n\n            /**\n             * Hidden\n             * @field {String|Number} resourceId\n             * @hide\n             */\n            'resourceId'\n        ];\n    }\n    //endregion\n}\n", "import LocaleHelper from '../../Core/localization/LocaleHelper.js';\nimport '../../SchedulerPro/localization/En.js';\n\nconst locale = {\n\n    localeName : 'En',\n    localeDesc : 'English (US)',\n    localeCode : 'en-US',\n\n    Object : {\n        Save : 'Save'\n    },\n\n    IgnoreResourceCalendarColumn : {\n        'Ignore resource calendar' : 'Ignore resource calendar'\n    },\n\n    InactiveColumn : {\n        Inactive : 'Inactive'\n    },\n\n    AddNewColumn : {\n        'New Column' : 'New Column'\n    },\n\n    CalendarColumn : {\n        Calendar : 'Calendar'\n    },\n\n    EarlyStartDateColumn : {\n        'Early Start' : 'Early Start'\n    },\n\n    EarlyEndDateColumn : {\n        'Early End' : 'Early End'\n    },\n\n    LateStartDateColumn : {\n        'Late Start' : 'Late Start'\n    },\n\n    LateEndDateColumn : {\n        'Late End' : 'Late End'\n    },\n\n    TotalSlackColumn : {\n        'Total Slack' : 'Total Slack'\n    },\n\n    ConstraintDateColumn : {\n        'Constraint Date' : 'Constraint Date'\n    },\n\n    ConstraintTypeColumn : {\n        'Constraint Type' : 'Constraint Type'\n    },\n\n    DeadlineDateColumn : {\n        Deadline : 'Deadline'\n    },\n\n    DependencyColumn : {\n        'Invalid dependency' : 'Invalid dependency'\n    },\n\n    DurationColumn : {\n        Duration : 'Duration'\n    },\n\n    EffortColumn : {\n        Effort : 'Effort'\n    },\n\n    EndDateColumn : {\n        Finish : 'Finish'\n    },\n\n    EventModeColumn : {\n        'Event mode' : 'Event mode',\n        Manual       : 'Manual',\n        Auto         : 'Auto'\n    },\n\n    ManuallyScheduledColumn : {\n        'Manually scheduled' : 'Manually scheduled'\n    },\n\n    MilestoneColumn : {\n        Milestone : 'Milestone'\n    },\n\n    NameColumn : {\n        Name : 'Name'\n    },\n\n    NoteColumn : {\n        Note : 'Note'\n    },\n\n    PercentDoneColumn : {\n        '% Done' : '% Done'\n    },\n\n    PredecessorColumn : {\n        Predecessors : 'Predecessors'\n    },\n\n    ResourceAssignmentColumn : {\n        'Assigned Resources' : 'Assigned Resources',\n        'more resources'     : 'more resources'\n    },\n\n    RollupColumn : {\n        Rollup : 'Rollup'\n    },\n\n    SchedulingModeColumn : {\n        'Scheduling Mode' : 'Scheduling Mode'\n    },\n\n    SequenceColumn : {\n        Sequence : 'Sequence'\n    },\n\n    ShowInTimelineColumn : {\n        'Show in timeline' : 'Show in timeline'\n    },\n\n    StartDateColumn : {\n        Start : 'Start'\n    },\n\n    SuccessorColumn : {\n        Successors : 'Successors'\n    },\n\n    TaskCopyPaste : {\n        copyTask  : 'Copy',\n        cutTask   : 'Cut',\n        pasteTask : 'Paste'\n    },\n\n    WBSColumn : {\n        WBS      : 'WBS',\n        renumber : 'Renumber'\n    },\n\n    DependencyField : {\n        invalidDependencyFormat : 'Invalid dependency format'\n    },\n\n    ProjectLines : {\n        'Project Start' : 'Project start',\n        'Project End'   : 'Project end'\n    },\n\n    TaskTooltip : {\n        Start    : 'Start',\n        End      : 'End',\n        Duration : 'Duration',\n        Complete : 'Complete'\n    },\n\n    AssignmentGrid : {\n        Name     : 'Resource name',\n        Units    : 'Units',\n        unitsTpl : ({ value }) => value ? value + '%' : ''\n    },\n\n    Gantt : {\n        Edit                   : 'Edit',\n        Indent                 : 'Indent',\n        Outdent                : 'Outdent',\n        'Convert to milestone' : 'Convert to milestone',\n        Add                    : 'Add...',\n        'New task'             : 'New task',\n        'New milestone'        : 'New milestone',\n        'Task above'           : 'Task above',\n        'Task below'           : 'Task below',\n        'Delete task'          : 'Delete',\n        Milestone              : 'Milestone',\n        'Sub-task'             : 'Subtask',\n        Successor              : 'Successor',\n        Predecessor            : 'Predecessor',\n        changeRejected         : 'Scheduling engine rejected the changes',\n        linkTasks              : 'Add dependencies',\n        unlinkTasks            : 'Remove dependencies'\n    },\n\n    EventSegments : {\n        splitTask : 'Split task'\n    },\n\n    Indicators : {\n        earlyDates   : 'Early start/end',\n        lateDates    : 'Late start/end',\n        Start        : 'Start',\n        End          : 'End',\n        deadlineDate : 'Deadline'\n    },\n\n    Versions : {\n        indented     : 'Indented',\n        outdented    : 'Outdented',\n        cut          : 'Cut',\n        pasted       : 'Pasted',\n        deletedTasks : 'Deleted tasks'\n    }\n};\n\nexport default LocaleHelper.publishLocale(locale);\n", "import ResourceInfoColumn from '../../Scheduler/column/ResourceInfoColumn.js';\nimport ColumnStore from '../../Grid/data/ColumnStore.js';\n\n/**\n * @module Gantt/column/ResourceAssignmentGridResourceColumn.js\n */\n\n/**\n * Column showing the resource name / avatar inside the AssignmentGrid\n *\n * @internal\n * @extends Scheduler/column/ResourceInfoColumn\n * @classType resourceassignment\n * @column\n */\nexport default class ResourceAssignmentGridResourceColumn extends ResourceInfoColumn {\n\n    static get $name() {\n        return 'ResourceAssignmentGridResourceColumn';\n    }\n\n    static get type() {\n        return 'assignmentResource';\n    }\n\n    static get defaults() {\n        return {\n            showEventCount     : false,\n            cls                : 'b-assignmentgrid-resource-column',\n            field              : 'resourceName',\n            flex               : 1,\n            editor             : null,\n            useNameAsImageName : false,\n            filterable         : {\n                filterField : {\n                    placeholder : 'L{AssignmentGrid.Name}',\n                    triggers    : {\n                        filter : {\n                            align : 'start',\n                            cls   : 'b-icon b-icon-filter'\n                        }\n                    }\n                }\n            }\n        };\n    }\n\n    defaultRenderer({ grid, record, cellElement, value, isExport }) {\n        if (!record.isSpecialRow) {\n            record = record.resource;\n        }\n\n        return super.defaultRenderer({ grid, record, cellElement, value, isExport });\n    }\n}\n\nColumnStore.registerColumnType(ResourceAssignmentGridResourceColumn);\n", "import Grid from '../../Grid/view/Grid.js';\nimport NumberColumn from '../../Grid/column/NumberColumn.js';\nimport Objects from '../../Core/helper/util/Objects.js';\nimport AssignmentManipulationStore from '../data/AssignmentsManipulationStore.js';\nimport AssignmentModel from '../model/AssignmentModel.js';\nimport '../../Core/widget/Checkbox.js';\nimport '../../Grid/feature/FilterBar.js';\nimport '../../Gantt/localization/En.js';\nimport '../../Gantt/column/ResourceAssignmentGridResourceColumn.js';\n\n/**\n * @module Gantt/widget/AssignmentGrid\n */\n\n/**\n * This grid visualizes and lets users edit assignments of an {@link #config-projectEvent event}. Used by the\n * {@link Gantt.widget.AssignmentField}. This grid shows one column showing the resource name, and one showing\n * the units assigned. You can add additional columns by providing a {@link Grid.view.Grid#config-columns} array in your grid config.\n *\n * {@inlineexample Gantt/widget/AssignmentGrid.js}\n * @extends Grid/view/Grid\n * @classType assignmentgrid\n * @widget\n */\nexport default class AssignmentGrid extends Grid {\n\n    static get $name() {\n        return 'AssignmentGrid';\n    }\n\n    // Factoryable type name\n    static get type() {\n        return 'assignmentgrid';\n    }\n\n    //region Config\n    static get configurable() {\n        return {\n            // Required by ResourceInfo column\n            resourceImageExtension : '.jpg',\n            minHeight              : 200,\n\n            /**\n             * A {@link Grid.column.Column} config object for the resource column. You can pass a `renderer` which\n             * gives you access to the `resource` record.\n             *\n             * @config {ColumnConfig}\n             */\n            resourceColumn : {\n                type : 'assignmentResource'\n            },\n\n            /**\n             * A config object for the units column\n             *\n             * @config {NumberColumnConfig}\n             */\n            unitsColumn : {\n                field       : 'units',\n                type        : NumberColumn.type,\n                text        : 'L{Units}',\n                localeClass : this,\n                width       : 70,\n                min         : 0,\n                max         : 100,\n                step        : 10,\n                unit        : '%',\n                renderer    : ({ value }) => this.L('L{unitsTpl}', { value : Math.round(value) }),\n                filterable  : false\n            }\n        };\n    }\n\n    static get defaultConfig() {\n        return {\n            selectionMode : {\n                checkboxOnly : true,\n                multiSelect  : true,\n                showCheckAll : true\n            },\n\n            // If enabled blocks header checkbox click event\n            features : {\n                group       : false,\n                filterBar   : true,\n                contextMenu : false\n            },\n\n            disableGridRowModelWarning : true,\n\n            /**\n             * Event model to manipulate assignments of, the task should be part of a task store.\n             * Either task or {@link Grid/view/Grid#config-store store} should be given.\n             *\n             * @config {Gantt.model.TaskModel}\n             */\n            projectEvent : null\n        };\n    }\n    //endregion\n\n    construct() {\n        super.construct(...arguments);\n\n        this.ion({\n            selectionChange : ({ selected, deselected }) => {\n                selected.forEach(assignment => assignment.units = assignment.units || assignment.getFieldDefinition('units').defaultValue);\n                deselected.forEach(assignment => {\n                    if (this.store.includes(assignment)) {\n                        assignment.units = 0;\n                    }\n                });\n            }\n        });\n    }\n\n    get projectEvent() {\n        const me = this,\n            store = me.store;\n\n        let projectEvent = me._projectEvent;\n\n        if (store && (projectEvent !== store.projectEvent)) {\n            projectEvent = me._projectEvent = store.projectEvent;\n        }\n\n        return projectEvent;\n    }\n\n    set projectEvent(projectEvent) {\n        const me = this;\n\n        me._projectEvent = projectEvent;\n\n        me.store.projectEvent = projectEvent;\n\n        if (projectEvent) {\n            me.selectedRecords = me.store.query(as => projectEvent.assignments.find(existingAs => existingAs.resource === as.resource));\n        }\n    }\n\n    get store() {\n        return super.store;\n    }\n\n    set store(store) {\n        const\n            me       = this,\n            oldStore = me.store;\n\n        if (store && oldStore !== store) {\n            if (!(store instanceof AssignmentManipulationStore)) {\n                store = AssignmentManipulationStore.new({\n                    modelClass   : me._projectEvent?.assignmentStore.modelClass || AssignmentModel,\n                    projectEvent : me._projectEvent\n                }, store);\n            }\n\n            super.store = store;\n\n            me.storeDetacher?.();\n            me.storeDetacher = store.ion({ update : 'onAssignmentUpdate', thisObj : me });\n        }\n    }\n\n    set columns(columns) {\n        if (columns) {\n            // Clone is needed to flatten the properties from the prototype chain, the Model class wants data\n            // in a flat simple object\n            columns.unshift(Objects.clone(this.resourceColumn), Objects.clone(this.unitsColumn));\n        }\n\n        super.columns = columns;\n    }\n\n    get columns() {\n        return super.columns;\n    }\n\n    onAssignmentUpdate({ record, changes }) {\n        const { units } = changes;\n\n        // Sync selection while cell editing\n        if (units) {\n            if (!units.value) {\n                this.deselectRow(record);\n            }\n            else if (units.oldValue === 0) {\n                this.selectRow({\n                    record,\n                    scrollIntoView : false,\n                    addToSelection : true\n                });\n            }\n        }\n    }\n}\n\n// Register this widget type with its Factory\nAssignmentGrid.initClass();\n", "import AssignmentGrid from './AssignmentGrid.js';\nimport '../../Core/widget/Container.js';\nimport '../../Core/widget/Button.js';\n\n/**\n * @module Gantt/widget/AssignmentPicker\n */\n\n/**\n * Class for assignment field dropdown, wraps {@link Gantt/widget/AssignmentGrid} within a frame and adds two buttons: Save and Cancel\n * @private\n */\nexport default class AssignmentPicker extends AssignmentGrid {\n\n    static get $name() {\n        return 'AssignmentPicker';\n    }\n\n    // Factoryable type name\n    static get type() {\n        return 'assignmentpicker';\n    }\n\n    static get defaultConfig() {\n        return {\n            trapFocus : true,\n            height    : '20em',\n            minWidth  : '25em',\n            bbar      : [\n                {\n                    type        : 'button',\n                    text        : this.L('L{Object.Save}'),\n                    localeClass : this,\n                    ref         : 'saveBtn',\n                    color       : 'b-green'\n                },\n                {\n                    type        : 'button',\n                    text        : this.L('L{Object.Cancel}'),\n                    localeClass : this,\n                    ref         : 'cancelBtn',\n                    color       : 'b-gray'\n                }\n            ],\n            /**\n             * The Event to load resource assignments for.\n             * Either an Event or {@link #config-store store} should be given.\n             *\n             * @config {Gantt.model.TaskModel}\n             */\n            projectEvent : null,\n\n            /**\n             * Store for the picker.\n             * Either store or {@link #config-projectEvent projectEvent} should be given\n             *\n             * @config {Gantt.data.AssignmentsManipulationStore}\n             */\n            store : null\n        };\n    }\n\n    configure(config) {\n        config.selectedRecordCollection = config.assignments;\n        super.configure(config);\n    }\n\n    show() {\n        this.originalSelected = this.selectedRecords.map(a => a.copy());\n        return super.show(...arguments);\n    }\n\n    afterConfigure() {\n        const me = this;\n\n        super.afterConfigure();\n\n        me.bbar.widgetMap.saveBtn?.ion({ click : 'onSaveClick', thisObj : me });\n        me.bbar.widgetMap.cancelBtn?.ion({ click : 'onCancelClick', thisObj : me });\n    }\n\n    //region Event handlers\n    onSaveClick() {\n        this.hide();\n    }\n\n    onCancelClick() {\n        this.hide();\n    }\n    //endregion\n}\n\n// Register this widget type with its Factory\nAssignmentPicker.initClass();\n", "import Combo from '../../Core/widget/Combo.js';\nimport PickerField from '../../Core/widget/PickerField.js';\nimport AssignmentPicker from './AssignmentPicker.js';\nimport AssignmentsManipulationStore from '../data/AssignmentsManipulationStore.js';\nimport ObjectHelper from '../../Core/helper/ObjectHelper.js';\nimport StringHelper from '../../Core/helper/StringHelper.js';\n\n/**\n * @module Gantt/widget/AssignmentField\n */\n\n/**\n * A special field widget used to edit single event assignments.\n *\n * This field is used as the default editor for the {@link Gantt.column.ResourceAssignmentColumn}\n *\n * {@inlineexample Gantt/widget/AssignmentField.js}\n *\n * ## Customizing the drop-down grid\n *\n * The field is a {@link Core/widget/Combo} which has a {@link Gantt/widget/AssignmentGrid} as its picker. Here's a\n * snippet showing how to configure the grid:\n *\n * ```javascript\n * const gantt = new Gantt({\n *     appendTo                : 'container',\n *     resourceImageFolderPath : '../_shared/images/users/',\n *     columns                 : [\n *         { type : 'name', field : 'name', text : 'Name', width : 250 },\n *         {\n *             type        : 'resourceassignment',\n *             width       : 250,\n *             showAvatars : true,\n *             editor      : {\n *                 type   : 'assignmentfield',\n *                 // The picker config is applied to the Grid\n *                 picker : {\n *                     height   : 350,\n *                     width    : 450,\n *                     features : {\n *                         filterBar  : true,\n *                         group      : 'resource.city',\n *                         headerMenu : false,\n *                         cellMenu   : false\n *                     },\n *                     // The extra columns are concatenated onto the base column set.\n *                     columns : [{\n *                         text       : 'Calendar',\n *                         // Read a nested property (name) from the resource calendar\n *                         field      : 'resource.calendar.name',\n *                         filterable : false,\n *                         editor     : false,\n *                         width      : 85\n *                     }]\n *                 }\n *             }\n *         }\n *     ],\n *\n *     project\n *  });\n * ```\n *\n * @extends Core/widget/Combo\n * @classType assignmentfield\n * @demo Gantt/resourceassignment\n * @inputfield\n */\nexport default class AssignmentField extends Combo {\n\n    static get $name() {\n        return 'AssignmentField';\n    }\n\n    // Factoryable type name\n    static get type() {\n        return 'assignmentfield';\n    }\n\n    //region Config\n    static get configurable() {\n        return {\n            // Let the editor know that the selectable records are also editable\n            editingRecords : true,\n\n            chipView : {\n                cls : 'b-assignment-chipview',\n                itemTpl(assignment) {\n                    return StringHelper.xss`${assignment.resourceName} ${Math.round(assignment.units)}%`;\n                },\n                scrollable : {\n                    overflowX : 'hidden-scroll'\n                }\n            },\n\n            triggers : {\n                expand : {\n                    cls     : 'b-icon-down',\n                    handler : 'onTriggerClick'\n                }\n            },\n\n            multiSelect : true,\n            // <remove-on-release>\n            // TODO: change clearable when it's back to editable\n            // </remove-on-release>\n            clearable   : false,\n            editable    : false,\n            value       : null,\n\n            /**\n             * A config object used to configure the {@link Gantt.widget.AssignmentGrid assignment grid}\n             * used to select resources to assign.\n             *\n             * Any `columns` provided are concatenated onto the default column set.\n             * @config {AssignmentGridConfig|Gantt.widget.AssignmentGrid} picker\n             */\n            picker : {\n                type         : AssignmentPicker.type,\n                floating     : true,\n                scrollAction : 'realign'\n            },\n\n            /**\n             * Width of picker, defaults to this field's {@link Core/widget/PickerField#config-pickerAlignElement} width\n             *\n             * @config {Number}\n             */\n            pickerWidth : null,\n\n            /**\n             * Event to load resource assignments for.\n             * Either event or {@link #config-store store} should be given.\n             *\n             * @config {Gantt.model.TaskModel}\n             */\n            projectEvent : null,\n\n            /**\n             * Assignment manipulation store to use, or it's configuration object.\n             * Either store or {@link #config-projectEvent projectEvent} should be given\n             *\n             * @config {Core.data.Store|StoreConfig}\n             */\n            store : {},\n\n            /**\n             * A template function used to generate the tooltip contents when hovering this field. Defaults to\n             * showing \"[Name] [%]\"\n             * ```javascript\n             * const gantt = new Gantt({\n             *   columns                 : [\n             *         { type : 'name', field : 'name', text : 'Name', width : 250 },\n             *         {\n             *             type        : 'resourceassignment',\n             *             editor      : {\n             *                 type   : 'assignmentfield',\n             *                 tooltipTemplate({ taskRecord, assignmentRecords }) {\n             *                     return assignmentRecords.map(as => as.resource?.name).join(', ');\n             *                 }\n             *             }\n             *         }\n             *     ]\n             * });\n             * ```\n             * @config {Function} tooltipTemplate\n             * @param {Object} data Tooltip data\n             * @param {Gantt.model.TaskModel} data.taskRecord The taskRecord the assignments are associated with\n             * @param {Gantt.model.AssignmentModel} data.assignmentRecords The field value represented as assignment\n             * records\n             * @returns {String|DomConfig|DomConfig[]}\n             */\n            tooltipTemplate() {\n                return StringHelper.encodeHtml(this.store.toValueString());\n            }\n        };\n    }\n\n    //endregion\n\n    // Any change must offer the save/cancel UI since THAT is what actually makes the edit\n    onChipClose(records) {\n        this.showPicker();\n\n        this.picker.deselectRows(records);\n    }\n\n    syncInputFieldValue() {\n        super.syncInputFieldValue();\n\n        const { store } = this;\n\n        if (store && this.tooltipTemplate) {\n            this.tooltip = this.tooltipTemplate({ taskRecord : store.projectEvent, assignmentRecords : store.toValue() });\n        }\n    }\n\n    //region Picker\n\n    // Override. This field does not have a primary filter, so\n    // down arrow/trigger click should just show the picker.\n    onTriggerClick(event) {\n        if (this.pickerVisible) {\n            this.hidePicker();\n        }\n        else {\n            PickerField.prototype.showPicker.call(this, event && ('key' in event));\n        }\n    }\n\n    focusPicker() {\n        this.picker.focus();\n    }\n\n    changePicker(picker, oldPicker) {\n        const me = this;\n        return super.changePicker(picker && ObjectHelper.assign({\n            projectEvent      : me.projectEvent,\n            store             : me.store,\n            readOnly          : me.readOnly,\n            resourceImagePath : me.resourceImageFolderPath,\n            assignments       : me.valueCollection,\n\n            onCancelClick() {\n                me.value = this.originalSelected;\n                this.hide();\n            },\n\n            align : {\n                anchor : me.overlayAnchor,\n                target : me[me.pickerAlignElement]\n            },\n\n            internalListeners : {\n                hide : () => {\n                    if (!me.isDestroying) {\n                        // Only apply the filters and refresh the UI if we are focused.\n                        // If the hide is due to focusout, the refresh will be applied next time.\n                        me.store.clearFilters(me.containsFocus);\n                    }\n                }\n            }\n        }, picker) || null, oldPicker);\n    }\n\n    //endregion\n\n    //region Value\n\n    changeProjectEvent(projectEvent) {\n        // NOTE: This kind of thing would normally be handled in updateProjectEvent, however, the setter of the\n        //  AssignmentManipulationStore pulls double duty and resyncs some fields, even if presented with the same\n        //  projectEvent.\n        const { picker, store }      = this;\n        this._projectEvent           = projectEvent;\n\n        if (store) {\n            store.projectEvent = projectEvent;\n        }\n\n        if (picker) {\n            picker.projectEvent = projectEvent;\n        }\n\n        return projectEvent;\n    }\n\n    changeStore(store) {\n        if (store && !(store instanceof AssignmentsManipulationStore)) {\n            store = new AssignmentsManipulationStore(store);\n        }\n\n        return store;\n    }\n\n    updateStore(store) {\n        const me = this;\n\n        me.detachListeners('storeMutation');\n\n        if (store instanceof AssignmentsManipulationStore) {\n            const { projectEvent } = store;\n\n            if (projectEvent) {\n                me.projectEvent = projectEvent;\n            }\n            else {\n                // This is to not do the store::fillFromMaster() call, otherwise editor will be unhappy\n                store.projectEvent = me.projectEvent;\n            }\n        }\n\n        store.ion({\n            name    : 'storeMutation',\n            change  : 'syncInputFieldValue',\n            thisObj : me\n        });\n    }\n\n    // This return an array of special Assignment records created\n    // by the picker / grid\n    get value() {\n        return super.value;\n    }\n\n    set value(assignments) {\n        // either real (=== currently assigned resources)\n        // Or to-be assigned resources coming from the assignment grid\n\n        // Map over to the special assignment records created by the AssignmentGrid store\n        assignments = assignments?.map(as => {\n            const\n                ourStoreVersion = this.store.find(a => a.resource === as.resource, true);\n\n            ourStoreVersion?.copyData(as);\n\n            return ourStoreVersion;\n        });\n\n        super.value = assignments;\n    }\n\n    hasChanged(initialValue, value) {\n        return !ObjectHelper.isEqual(initialValue, value);\n    }\n\n    //endregion\n\n    // Override. Picker is completely self-contained. Prevent any\n    // field action on its key events.\n    onPickerKeyDown(event) {\n        const grid = this.picker;\n\n        // Move \"down\" into the grid body\n        if (event.key === 'ArrowDown' && event.target.compareDocumentPosition(grid.bodyContainer) === document.DOCUMENT_POSITION_FOLLOWING) {\n            grid.element.focus();\n        }\n        else if (event.key === 'Escape' && !grid.focusedCell.isActionable) {\n            this.hidePicker();\n        }\n    }\n\n    // Caching a copy of each record since the grid picker of this class will allow editing\n    // A change to the records will constitute a change of this field\n    cacheCurrentValue(records) {\n        if (Array.isArray(records)) {\n            return this._value = records.map(rec => rec.copy(rec.id));\n        }\n\n        return super.cacheCurrentValue(records);\n    }\n}\n\n// Register this widget type with its Factory\nAssignmentField.initClass();\n", "import Column from '../../Grid/column/Column.js';\nimport ColumnStore from '../../Grid/data/ColumnStore.js';\nimport AssignmentField from '../widget/AssignmentField.js';\nimport AssignmentModel from '../model/AssignmentModel.js';\nimport ChipView from '../../Core/widget/ChipView.js';\nimport '../../Core/widget/NumberField.js';\nimport AvatarRendering from '../../Core/widget/util/AvatarRendering.js';\nimport StringHelper from '../../Core/helper/StringHelper.js';\nimport DomHelper from '../../Core/helper/DomHelper.js';\nimport DragHelper from '../../Core/helper/DragHelper.js';\nimport ObjectHelper from '../../Core/helper/ObjectHelper.js';\n\n/**\n * @module Gantt/column/ResourceAssignmentColumn\n */\n\nconst resourceNameRegExp = a => a.resourceName.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n\n/**\n * Column allowing resource manipulation (assignment/unassignment/units changing) on a task. In the column cells,\n * assignments are either shown as badges or avatars. To show avatars, set {@link #config-showAvatars} to `true`. When\n * showing avatars there are two options for how to specify image paths:\n *\n * * You may provide a {@link Gantt.view.Gantt#config-resourceImageFolderPath} on your Gantt panel pointing to where\n *   resource images are located. Set the resource image filename in the `image` field of the resource data.\n * * And/or you may provide an `imageUrl` on your record, which then will take precedence when showing images.\n *\n * If a resource has no name, or its image cannot be loaded, the resource initials are rendered. If the resource has\n * an {@link Scheduler/model/mixin/ResourceModelMixin#field-eventColor} specified, it will be used as the background\n * color of the initials.\n *\n * Default editor is a {@link Gantt.widget.AssignmentField AssignmentField}.\n *\n * ## Customizing displayed elements\n *\n * If {@link #config-showAvatars} is false, column will render resource name and utilization wrapped in a\n * small element called _a chip_. Content of the chip can be customized. For example, if you don't want to see percent\n * value, or want to display different resource name, you can specify an {@link #config-itemTpl} config. Please keep in\n * mind that when you start editing the cell, chip will be rendered by the default editor. If you want chips to be\n * consistent, you need to customize the editor too.\n *\n * ```javascript\n * new Gantt({\n *     columns: [\n *         {\n *             type     : 'resourceassignment',\n *             itemTpl  : (assignment) => assignment.resourceName,\n *             editor   : {\n *                 chipView : {\n *                     itemTpl : assignment => assignment.resourceName\n *                 }\n *             }\n *         }\n *     ]\n * });\n * ```\n *\n * {@inlineexample Gantt/column/ResourceAssignment.js}\n *\n * @extends Grid/column/Column\n * @classType resourceassignment\n * @column\n */\nexport default class ResourceAssignmentColumn extends Column {\n    internalCellCls = 'b-resourceassignment-cell';\n\n    static get $name() {\n        return 'ResourceAssignmentColumn';\n    }\n\n    static get type() {\n        return 'resourceassignment';\n    }\n\n    static get isGanttColumn() {\n        return true;\n    }\n\n    static get fields() {\n        return [\n            /**\n             * True to show a resource avatar for every assignment. Note that you also have to provide a\n             * {@link Gantt.view.Gantt#config-resourceImageFolderPath} for where to load images from. And/or you may\n             * provide an `imageUrl` on your record, which then will take precedence when showing images.\n             * @config {Boolean} showAvatars\n             * @category Common\n             */\n            'showAvatars',\n\n            'sideMargin',\n\n            /**\n             * A function which produces the content to put in the resource assignment cell.\n             * May be overridden in subclasses, or injected into the column\n             * to customize the Chip content.\n             *\n             * Defaults to returning `${assignment.resourceName} ${assignment.units}%`\n             *\n             * @param {Gantt.model.AssignmentModel} assignment The assignment\n             * @param {Number} index The index - zero based.\n             * @config {Function} itemTpl\n             * @category Rendering\n             */\n            {\n                name         : 'itemTpl',\n                defaultValue : (assignment, index, htmlEncode = true) => {\n                    return htmlEncode ? StringHelper.encodeHtml(assignment.toString()) : assignment.toString();\n                }\n            },\n\n            /**\n             * A function which receives data about the resource and returns a html string to be displayed in the\n             * tooltip.\n             *\n             * ```javascript\n             * const gantt = new Gantt({\n             *     columns : [\n             *          {\n             *              type          : 'resourceassignment',\n             *              showAvatars : true,\n             *              avatarTooltipTemplate({ resourceRecord }) {\n             *                  return `<b>${resourceRecord.name}</b>`;\n             *              }\n             *          }\n             *     ]\n             * });\n             * ```\n             *\n             * This function will be called with an object containing the fields below:\n             *\n             * @param {Object} data\n             * @param {Gantt.model.TaskModel} data.taskRecord Hovered task\n             * @param {Gantt.model.ResourceModel} data.resourceRecord Hovered resource\n             * @param {Gantt.model.AssignmentModel} data.assignmentRecord Hovered assignment\n             * @param {Core.widget.Tooltip} data.tooltip The tooltip instance\n             * @param {Number} data.overflowCount Number of overflowing resources, only valid for last shown resource\n             * @param {Gantt.model.AssignmentModel[]} data.overflowAssignments Array of overflowing assignments, only\n             * valid for last shown resource\n             * @config {Function} avatarTooltipTemplate\n             */\n            'avatarTooltipTemplate',\n\n            /**\n             * When `true`, the names of all overflowing resources are shown in the tooltip. When `false`, the number of\n             * overflowing resources is displayed instead.\n             * Only valid for last shown resource, if there are overflowing resources.\n             * @config {Boolean} showAllNames\n             * @default true\n             * @category Common\n             */\n            { name : 'showAllNames', type : 'boolean', defaultValue : true },\n\n            /**\n             * True to allow drag-drop of resource avatars between rows. Dropping a resource outside the\n             * resource assignment cells will unassign the resource.\n             * @config {Boolean} enableResourceDragging\n             * @category Common\n             */\n            { name : 'enableResourceDragging' },\n\n            /**\n             * A config object passed to the avatar {@link Core.widget.Tooltip}\n             *\n             * ```javascript\n             * const gantt = new Gantt({\n             *     columns : [\n             *          {\n             *              type          : 'resourceassignment',\n             *              showAvatars : true,\n             *              avatarTooltip : {\n             *                  // Allow moving mouse over the tooltip\n             *                  allowOver : true\n             *              }\n             *          }\n             *     ]\n             * });\n             * ```\n             *\n             * This function will be called with an object containing the fields below:\n             *\n             * @config {TooltipConfig} avatarTooltip\n             */\n            'avatarTooltip',\n\n            { name : 'avatarMaxSize', defaultValue : 50 }\n        ];\n    }\n\n    static get defaults() {\n        return {\n            field         : 'assignments',\n            instantUpdate : false,\n            text          : 'L{Assigned Resources}',\n            width         : 250,\n            showAvatars   : false,\n            sideMargin    : 20,\n            sortable(task1, task2) {\n                const\n                    a1 = task1.assignments.join(''),\n                    a2 = task2.assignments.join('');\n\n                if (a1 === a2) {\n                    return 0;\n                }\n                return a1 < a2 ? -1 : 1;\n            },\n\n            filterable({ value, record }) {\n                // We're being passed an array of Assignments\n                if (Array.isArray(value)) {\n                    // Shortcut if we're matching no assignments.\n                    if (!value.length) {\n                        return Boolean(!record.assignments.length);\n                    }\n                    // Create a multi resource name Regexp, eg /Macy|Lee|George/.\n                    value = value.map(resourceNameRegExp).join('|');\n                }\n                const regexp = new RegExp(value, 'gi');\n\n                return record.assignments.some(assignment => regexp.test(assignment.resourceName));\n            },\n            alwaysClearCell : false\n        };\n    }\n\n    construct() {\n        super.construct(...arguments);\n\n        const\n            me       = this,\n            { grid } = me;\n\n        if (me.showAvatars) {\n            Object.assign(me, {\n                repaintOnResize : true,\n                htmlEncode      : false,\n                renderer        : me.rendererWithAvatars,\n                avatarRendering : new AvatarRendering({\n                    element : grid.element,\n                    tooltip : ObjectHelper.assign({\n                        forSelector       : '.b-resourceassignment-cell .b-resource-avatar',\n                        internalListeners : {\n                            beforeShow({ source : tooltip }) {\n                                const\n                                    {\n                                        taskRecord,\n                                        resourceRecord,\n                                        assignmentRecord,\n                                        overflowCount,\n                                        overflowAssignments\n                                    }      = tooltip.activeTarget.elementData,\n                                    result = me.avatarTooltipTemplate?.({\n                                        taskRecord, resourceRecord, assignmentRecord, overflowCount, tooltip, overflowAssignments\n                                    });\n\n                                if (tooltip.items.length === 0) {\n                                    const text   = me.showAllNames\n                                        ? `${StringHelper.encodeHtml(assignmentRecord)}<br />${overflowAssignments.join('<br />')}`\n                                        : StringHelper.xss`${assignmentRecord}${overflowCount ? ` (+${overflowCount} ${me.L('L{more resources}')})` : ''}`;\n                                    tooltip.html = result ?? text;\n                                }\n                            }\n                        }\n                    }, me.avatarTooltip)\n                })\n            });\n        }\n\n        if (me.enableResourceDragging) {\n            me.grid.ion({\n                paint   : me.setupDragging,\n                thisObj : me,\n                once    : true\n            });\n        }\n\n        grid.ion({\n            beforeCellEditStart : me.onBeforeCellEditStart,\n            finishCellEdit      : me.onDoneCellEdit,\n            cancelCellEdit      : me.onDoneCellEdit,\n            thisObj             : me\n        });\n\n        if (me.showAvatars) {\n            grid.ion({\n                beforeRenderRows : me.calculateAvatarSize,\n                once             : true,\n                thisObj          : me\n            });\n\n            grid.rowManager.ion({\n                beforeRowHeight : me.calculateAvatarSize,\n                thisObj         : me\n            });\n        }\n\n        grid.resourceStore.ion({\n            name    : 'resourceStore',\n            update  : me.onResourceUpdate,\n            thisObj : me\n        });\n    }\n\n    calculateAvatarSize({ height }) {\n        const\n            { grid }        = this,\n            rowHeight       = height || grid.rowHeight,\n            { cellElement } = grid.beginGridMeasuring();\n\n        cellElement.classList.add(this.internalCellCls);\n\n        const\n            cellStyles = globalThis.getComputedStyle(cellElement),\n            padding    = parseInt(cellStyles.paddingTop, 10);\n\n        this.avatarRendering.size = Math.min(this.avatarMaxSize, rowHeight - (2 * padding));\n\n        cellElement.classList.remove(this.internalCellCls);\n        grid.endGridMeasuring();\n    }\n\n    doDestroy() {\n        super.doDestroy();\n\n        this.avatarRendering?.destroy();\n        this.dragHelper?.destroy();\n    }\n\n    get defaultEditor() {\n        return {\n            type  : AssignmentField.type,\n            store : {\n                modelClass : this.grid.project.assignmentStore.modelClass\n            }\n        };\n    }\n\n    onBeforeCellEditStart({ editorContext : { record, column } }) {\n        const me = this;\n\n        if (column === me) {\n            const { editor } = me;\n\n            editor.resourceImageFolderPath = me.grid.resourceImageFolderPath;\n            editor.projectEvent            = record;\n\n            me.detachListeners('editorStore');\n\n            editor.store.ion({\n                name           : 'editorStore',\n                changesApplied : me.onEditorChangesApplied,\n                thisObj        : me\n            });\n        }\n    }\n\n    onDoneCellEdit() {\n        this.detachListeners('editorStore');\n    }\n\n    onEditorChangesApplied() {\n        const\n            me          = this,\n            cellElement = me.grid.getCell({ id : me.editor.projectEvent.id, columnId : me.id });\n\n        if (cellElement) {\n            me.renderer({ value : me.editor.projectEvent.assignments, cellElement });\n        }\n    }\n\n    onResourceUpdate({ source }) {\n        // no need for this listener when the gantt is loading data\n        if (!source.project?.propagatingLoadChanges) {\n            this.grid.refreshColumn(this);\n        }\n    }\n\n    get chipView() {\n        const me = this;\n\n        if (!me._chipView) {\n            me._chipView = new ChipView({\n                parent         : me,\n                cls            : 'b-assignment-chipview',\n                navigator      : null,\n                itemsFocusable : false,\n                closable       : false,\n                itemTpl        : me.itemTpl,\n                store          : {},\n                scrollable     : {\n                    overflowX : 'hidden-scroll'\n                }\n            });\n            // The List class only refreshes itself when visible, so\n            // since this is an offscreen, rendering element\n            // we have to fake visibility.\n            Object.defineProperty(me.chipView, 'isVisible', {\n                get() {\n                    return true;\n                }\n            });\n            // Complete the initialization, which is finalized on first paint.\n            // In particular the lazy scrollable config is ingested on paint.\n            me.chipView.triggerPaint();\n        }\n        return me._chipView;\n    }\n\n    renderer({ cellElement, value, isExport }) {\n        value = value.filter(a => a.resource)\n            .sort((lhs, rhs) => lhs.resourceName.localeCompare(rhs.resourceName));\n\n        if (isExport) {\n            return value.map((val, i) => this.itemTpl(val, i, false)).join(',');\n        }\n        else {\n            const\n                { chipView } = this,\n                chipViewWrap = cellElement.querySelector('.b-assignment-chipview-wrap') || (\n                    DomHelper.createElement({\n                        parent    : cellElement,\n                        className : 'b-assignment-chipview-wrap'\n                    })\n                );\n\n            chipView.store.storage.replaceValues({\n                values : value,\n                silent : true\n            });\n\n            chipView.refresh();\n            const chipCloneElement = chipView.element.cloneNode(true);\n            chipCloneElement.removeAttribute('id');\n\n            chipViewWrap.innerHTML = '';\n            chipViewWrap.appendChild(chipCloneElement);\n        }\n    }\n\n    rendererWithAvatars({ record : taskRecord, value, isExport }) {\n        value = value.filter(a => a.resource)\n            .sort((lhs, rhs) => lhs.resourceName.localeCompare(rhs.resourceName));\n\n        const\n            me                  = this,\n            { size }            = me.avatarRendering,\n            nbrVisible          = Math.floor((me.width - me.sideMargin) / (size + 2)),\n            overflowCount       = value.length > nbrVisible ? value.length - nbrVisible : 0,\n            overflowAssignments = value.length > nbrVisible ? value.filter(assignment => value.indexOf(assignment) >= nbrVisible) : [];\n\n        if (isExport) {\n            return value.map((as, i) => this.itemTpl(as, i, false)).join(',');\n        }\n\n        return {\n            className : 'b-resource-avatar-container',\n            children  : value.map((assignmentRecord, i) => {\n                const { resource : resourceRecord } = assignmentRecord;\n\n                if (i < nbrVisible) {\n                    const\n                        isLastOverflowing = overflowCount > 0 && i === nbrVisible - 1,\n                        imgConfig         = me.renderAvatar({\n                            taskRecord,\n                            resourceRecord,\n                            assignmentRecord,\n                            overflowCount       : isLastOverflowing ? overflowCount : 0,\n                            overflowAssignments : isLastOverflowing ? overflowAssignments : []\n                        });\n\n                    if (isLastOverflowing) {\n                        return {\n                            className : 'b-overflow-img',\n                            style     : {\n                                height : size + 'px',\n                                width  : size + 'px'\n                            },\n                            children : [\n                                imgConfig,\n                                {\n                                    tag       : 'span',\n                                    className : 'b-overflow-count',\n                                    html      : `+${overflowCount}`\n                                }\n                            ]\n                        };\n                    }\n\n                    return imgConfig;\n                }\n            })\n        };\n    }\n\n    renderAvatar({ taskRecord, resourceRecord, assignmentRecord, overflowCount, overflowAssignments }) {\n        const\n            {\n                resourceImageFolderPath\n            }        = this.grid,\n            imageUrl = resourceRecord.imageUrl || resourceRecord.image && resourceImageFolderPath && (resourceImageFolderPath + resourceRecord.image),\n            avatar   = this.avatarRendering.getResourceAvatar({\n                resourceRecord,\n                initials        : resourceRecord.initials,\n                color           : resourceRecord.eventColor,\n                iconCls         : resourceRecord.iconCls,\n                defaultImageUrl : this.defaultAvatar,\n                imageUrl\n            });\n\n        // Some paths in avatarRendering does not yield elementData\n        if (!avatar.elementData) {\n            avatar.elementData = {};\n        }\n\n        Object.assign(avatar.elementData, { taskRecord, resourceRecord, assignmentRecord, overflowCount, overflowAssignments });\n\n        return avatar;\n    }\n\n    get defaultAvatar() {\n        const { grid } = this;\n\n        return grid.defaultResourceImageName ? grid.resourceImageFolderPath + grid.defaultResourceImageName : '';\n    }\n\n    // Used with CellCopyPaste to be able to copy assignments from one task to another\n    toClipboardString({ record }) {\n        return StringHelper.safeJsonStringify(record[this.field]);\n    }\n\n    // Used with CellCopyPaste to be able to copy assignments from one task to another\n    fromClipboardString({ string, record }) {\n        const\n            parsedAssignments = StringHelper.safeJsonParse(string),\n            newAssignments    = [];\n\n        if (parsedAssignments?.length) {\n            for (const assignmentData of parsedAssignments) {\n                delete assignmentData.id;\n                delete assignmentData.event;\n                delete assignmentData.resource;\n                assignmentData.eventId = record.id;\n                newAssignments.push(new AssignmentModel(assignmentData));\n            }\n        }\n\n        return newAssignments;\n    }\n\n    // Only allow if complete range is only inside this column\n    canFillValue({ range }) {\n        return range.every(cs => cs.column === this);\n    }\n\n    calculateFillValue({ record, value }) {\n        const string = JSON.stringify(value);\n        return this.fromClipboardString({ string, record });\n    }\n\n    setupDragging() {\n        const\n            me       = this,\n            { grid } = me;\n\n        // Prevent row reorders from resource assignment cell\n        if (grid.features.rowReorder) {\n            grid.features.rowReorder.dragHelper.targetSelector += ' .b-grid-cell:not(.b-resourceassignment-cell)';\n        }\n\n        me.subGrid.element.classList.add('b-draggable-resource-avatars');\n\n        me.dragHelper = new DragHelper({\n            callOnFunctions : true,\n            // Don't drag the actual element, clone the avatar instead\n            cloneTarget     : true,\n            // Allow drag of row elements inside the resource grid\n            targetSelector  : '.b-resource-avatar-container > .b-resource-avatar',\n            onDragStart({ context }) {\n                const { grabbed } = context;\n\n                context.resourceRecord = grabbed.elementData.resourceRecord;\n                grid.enableScrollingCloseToEdges();\n            },\n\n            onDrag({ context, event }) {\n                const targetTask = context.targetTask = grid.resolveTaskRecord(event.target);\n\n                context.valid = Boolean(targetTask && !targetTask.resources.includes(context.resourceRecord));\n            },\n\n            // Drop callback after a mouse up. If drop is valid, the element is animated to its final position before the data transfer\n            async onDrop({ context, event }) {\n                const\n                    { targetTask, resourceRecord, valid, grabbed, element } = context,\n                    { assignmentRecord, taskRecord }                        = grabbed.elementData,\n                    validDropTarget                                         = event.target.closest('.b-resourceassignment-cell');\n\n                // We handle case of \"invalid\" drop ourselves, and when you don't drop on a resource\n                // assignment cell it means unassign (i.e. DragHelper never aborts a drop)\n                if (valid) {\n                    grabbed.style.display = 'none';\n                }\n                if (!validDropTarget) {\n                    element.style.display = 'none';\n                    // Invalid drop target means unassign\n                    taskRecord.unassign(resourceRecord);\n                }\n                else if (valid) {\n                    // Valid drop, provide a point to animate the proxy to before finishing the operation\n                    const\n                        resourceAssignmentCell = grid.getCell({\n                            column : me,\n                            record : targetTask\n                        }),\n                        avatarContainer        = resourceAssignmentCell?.querySelector('.b-resource-avatar-container');\n\n                    // Before we finalize the drop and update the task record, transition the element to the target point\n                    if (avatarContainer) {\n                        await this.animateProxyTo(avatarContainer, {\n                            align : 'l0-r0'\n                        });\n                    }\n\n                    if (!targetTask.resources.includes(resourceRecord)) {\n                        assignmentRecord.event = targetTask;\n                    }\n                }\n\n                grid.disableScrollingCloseToEdges();\n            }\n        });\n    }\n}\n\nColumnStore.registerColumnType(ResourceAssignmentColumn);\n", "import CheckColumn from '../../Grid/column/CheckColumn.js';\nimport ColumnStore from '../../Grid/data/ColumnStore.js';\n\n/**\n * @module Gantt/column/RollupColumn\n */\n\n/**\n * A column that displays a checkbox to edit the {@link Gantt.model.TaskModel#field-rollup rollup} data field.\n * This field indicates if a task should rollup to its closest parent or not.\n * Requires the {@link Gantt.feature.Rollups Rollups} feature to be enabled.\n *\n * This column uses a {@link Core.widget.Checkbox checkbox} as its editor, and it is not intended to be changed.\n *\n * @extends Grid/column/CheckColumn\n * @classType rollup\n * @column\n */\nexport default class RollupColumn extends CheckColumn {\n\n    static get $name() {\n        return 'RollupColumn';\n    }\n\n    static get type() {\n        return 'rollup';\n    }\n\n    static get isGanttColumn() {\n        return true;\n    }\n\n    static get defaults() {\n        return {\n            field : 'rollup',\n            text  : 'L{Rollup}'\n        };\n    }\n}\n\nColumnStore.registerColumnType(RollupColumn);\n", "import Column from '../../Grid/column/Column.js';\nimport ColumnStore from '../../Grid/data/ColumnStore.js';\nimport FunctionHelper from '../../Core/helper/FunctionHelper.js';\nimport SchedulingModePicker from '../../SchedulerPro/widget/SchedulingModePicker.js';\n\n/**\n * @module Gantt/column/SchedulingModeColumn\n */\n\n/**\n * A column which displays a task's scheduling {@link Gantt.model.TaskModel#field-schedulingMode mode} field.\n *\n * Default editor is a {@link SchedulerPro.widget.SchedulingModePicker SchedulingModePicker}.\n *\n * @extends Grid/column/Column\n * @classType schedulingmodecolumn\n * @column\n */\nexport default class SchedulingModeColumn extends Column {\n\n    static get $name() {\n        return 'SchedulingModeColumn';\n    }\n\n    static get type() {\n        return 'schedulingmodecolumn';\n    }\n\n    static get isGanttColumn() {\n        return true;\n    }\n\n    static get defaults() {\n        return {\n            field  : 'schedulingMode',\n            text   : 'L{Scheduling Mode}',\n            editor : {\n                type         : SchedulingModePicker.type,\n                allowInvalid : false,\n                picker       : {\n                    minWidth : '8.5em'\n                }\n            }\n        };\n    }\n\n    afterConstruct() {\n        const me = this;\n\n        super.afterConstruct();\n\n        let store;\n        // we need to trigger the column refresh **after** the editor locale change\n        // to display properly translated scheduling modes\n        if (me.editor) {\n            FunctionHelper.createSequence(me.editor.updateLocalization, me.onEditorLocaleChange, me);\n            store = me.editor.store;\n        }\n        else {\n            store = new SchedulingModePicker().store;\n        }\n        this.store = store;\n    }\n\n    renderer({ value }) {\n        const model = this.store.getById(value);\n        return model && model.text || '';\n    }\n\n    // * reactiveRenderer() {\n    //     const\n    //         value = yield this.record.$.schedulingMode,\n    //         model = this.column.editor.store.getById(value);\n    //\n    //     return model && model.text || '';\n    // }\n\n    // Refreshes the column **after** the editor locale change\n    // to display properly translated scheduling modes\n    onEditorLocaleChange() {\n        this.grid.refreshColumn(this);\n    }\n\n    // Only allow if complete range is only inside this column\n    canFillValue({ range }) {\n        return range.every(cs => cs.column === this);\n    }\n\n}\n\nColumnStore.registerColumnType(SchedulingModeColumn);\n", "import Column from '../../Grid/column/Column.js';\nimport ColumnStore from '../../Grid/data/ColumnStore.js';\n\n/**\n * @module Gantt/column/SequenceColumn\n */\n\n/**\n * A \"calculated\" column which displays the sequential position of the task in the project.\n *\n * There is no `editor`, since value is read-only.\n *\n * See {@link Gantt.model.TaskModel#property-sequenceNumber} for details.\n *\n * @extends Grid/column/Column\n * @classType sequence\n * @column\n */\nexport default class SequenceColumn extends Column {\n\n    static get $name() {\n        return 'SequenceColumn';\n    }\n\n    static get type() {\n        return 'sequence';\n    }\n\n    static get isGanttColumn() {\n        return true;\n    }\n\n    static get defaults() {\n        return {\n            field      : 'sequenceNumber',\n            text       : 'L{Sequence}',\n            sortable   : false,\n            groupable  : false,\n            filterable : false,\n            width      : 70,\n            editor     : null\n        };\n    }\n}\n\nColumnStore.registerColumnType(SequenceColumn);\n", "import CheckColumn from '../../Grid/column/CheckColumn.js';\nimport ColumnStore from '../../Grid/data/ColumnStore.js';\n\n/**\n * @module Gantt/column/ShowInTimelineColumn\n */\n\n/**\n * Column that shows if a task should be shown in the {@link SchedulerPro.widget.Timeline Timeline} widget.\n *\n * This column uses a {@link Core.widget.Checkbox checkbox} as its editor, and it is not intended to be changed.\n *\n * @extends Grid/column/CheckColumn\n * @classType showintimeline\n * @column\n */\nexport default class ShowInTimelineColumn extends CheckColumn {\n\n    static get $name() {\n        return 'ShowInTimelineColumn';\n    }\n\n    static get type() {\n        return 'showintimeline';\n    }\n\n    static get isGanttColumn() {\n        return true;\n    }\n\n    static get defaults() {\n        return {\n            field : 'showInTimeline',\n            text  : 'L{Show in timeline}'\n        };\n    }\n}\n\nColumnStore.registerColumnType(ShowInTimelineColumn);\n", "import ColumnStore from '../../Grid/data/ColumnStore.js';\nimport GanttDateColumn from '../../Gantt/column/GanttDateColumn.js';\nimport '../../SchedulerPro/widget/StartDateField.js';\n\n/**\n * @module Gantt/column/StartDateColumn\n */\n\n/**\n * A column that displays (and allows user to update) the task's {@link Gantt.model.TaskModel#field-startDate start date}.\n *\n * Default editor is a {@link SchedulerPro.widget.StartDateField StartDateField}.\n *\n * If {@link #config-format} is omitted, Gantt's {@link Scheduler.view.mixin.TimelineViewPresets#config-displayDateFormat} will be used as a default value and\n * the format will be dynamically updated while zooming according to the {@link Scheduler.preset.ViewPreset#field-displayDateFormat} value specified for the ViewPreset being selected.\n *\n * @extends Gantt/column/GanttDateColumn\n * @classType startdate\n * @column\n */\nexport default class StartDateColumn extends GanttDateColumn {\n\n    static get $name() {\n        return 'StartDateColumn';\n    }\n\n    static get type() {\n        return 'startdate';\n    }\n\n    static get defaults() {\n        return {\n            field : 'startDate',\n            text  : 'L{Start}'\n        };\n    }\n\n    get defaultEditor() {\n        const editorCfg = super.defaultEditor;\n\n        editorCfg.type = 'startdate';\n\n        return editorCfg;\n    }\n}\n\nColumnStore.registerColumnType(StartDateColumn);\n", "import ColumnStore from '../../Grid/data/ColumnStore.js';\nimport DependencyColumn from './DependencyColumn.js';\n\n/**\n * @module Gantt/column/SuccessorColumn\n */\n\n/**\n * A column which displays, in textual form, the dependencies which link from the\n * contextual to successor tasks.\n *\n * This type of column is editable by default. Default editor is a {@link Gantt/widget/DependencyField}.\n *\n * This column will be ignored if using {@link Grid/feature/CellCopyPaste} to paste or {@link Grid/feature/FillHandle}\n * to fill values.\n *\n * @classType successor\n * @extends Gantt/column/DependencyColumn\n * @column\n */\nexport default class SuccessorColumn extends DependencyColumn {\n\n    static get $name() {\n        return 'SuccessorColumn';\n    }\n\n    static get type() {\n        return 'successor';\n    }\n\n    static get isGanttColumn() {\n        return true;\n    }\n\n    static get defaults() {\n        return {\n            text  : 'L{Successors}',\n            field : 'successors'\n        };\n    }\n\n    canFillValue = () => false;\n}\n\nColumnStore.registerColumnType(SuccessorColumn);\n", "import ColumnStore from '../../Grid/data/ColumnStore.js';\nimport DurationColumn from '../../Scheduler/column/DurationColumn.js';\nimport DateHelper from '../../Core/helper/DateHelper.js';\nimport Duration from '../../Core/data/Duration.js';\n\n/**\n * @module Gantt/column/TotalSlackColumn\n */\n\n/**\n * A column that displays the task's {@link Gantt.model.TaskModel#field-totalSlack total slack}.\n *\n * Default editor is a {@link Core.widget.DurationField DurationField}.\n *\n * @extends Scheduler/column/DurationColumn\n * @classType totalslack\n * @column\n */\nexport default class TotalSlackColumn extends DurationColumn {\n\n    static get $name() {\n        return 'TotalSlackColumn';\n    }\n\n    static get type() {\n        return 'totalslack';\n    }\n\n    static get isGanttColumn() {\n        return true;\n    }\n\n    get durationUnitField() {\n        return 'slackUnit';\n    }\n\n    static get defaults() {\n        return {\n            field : 'totalSlack',\n            text  : 'L{Total Slack}',\n            filterable({ value, record, operator, column }) {\n                const\n                    a = DateHelper.asMilliseconds(column.roundValue(record.totalSlack), record.slackUnit),\n                    b = value.milliseconds;\n\n                switch (operator) {\n                    case '='  : return a === b;\n                    case '<'  : return a < b;\n                    case '<=' : return a <= b;\n                    case '>'  : return a > b;\n                    case '>=' : return a >= b;\n                    default   : throw new Error('Invalid operator ' + operator);\n                }\n            }\n        };\n    }\n\n    getFilterableValue(record) {\n        return new Duration({\n            magnitude : record.totalSlack,\n            unit      : record.slackUnit\n        });\n    }\n}\n\nColumnStore.registerColumnType(TotalSlackColumn);\n", "import Column from '../../Grid/column/Column.js';\nimport ColumnStore from '../../Grid/data/ColumnStore.js';\n\n/**\n * @module Gantt/column/WBSColumn\n */\n\n/**\n * A calculated column which displays the _WBS_ (_Work Breakdown Structure_) for the tasks - the position of the task\n * in the project tree structure.\n *\n * While there is no `editor`, since the WBS is a calculated value, there is a `renumber` item in the `headerMenuItems`\n * that allows the user to {@link Gantt.model.TaskModel#function-refreshWbs refresh} the WBS values.\n *\n * @extends Grid/column/Column\n * @classType wbs\n * @column\n */\nexport default class WBSColumn extends Column {\n\n    static get $name() {\n        return 'WBSColumn';\n    }\n\n    static get type() {\n        return 'wbs';\n    }\n\n    static get isGanttColumn() {\n        return true;\n    }\n\n    static get defaults() {\n        return {\n            field  : 'wbsValue',\n            text   : 'L{WBS}',\n            width  : 70,\n            editor : null,\n\n            filterable({ value, record }) {\n                // value might be WBS instance\n                return record.wbsValue.match(String(value));\n            },\n\n            headerMenuItems : {\n                renumber : {\n                    text : 'L{WBSColumn.renumber}',\n                    icon : 'b-icon-renumber',\n\n                    onItem({ source }) {\n                        source.taskStore.rootNode.refreshWbs();\n                    }\n                }\n            },\n\n            // This renderer is required to force string WBS value for TableExporter. zipcelx will call `valueOf` (value + '')\n            // which would return padded value.\n            renderer({ value }) {\n                return String(value);\n            }\n        };\n    }\n\n    canFillValue = () => false;\n}\n\nColumnStore.registerColumnType(WBSColumn);\n", "import AddNewColumn from './AddNewColumn.js';\nimport CalendarColumn from './CalendarColumn.js';\nimport ConstraintDateColumn from './ConstraintDateColumn.js';\nimport ConstraintTypeColumn from './ConstraintTypeColumn.js';\nimport DeadlineDateColumn from './DeadlineDateColumn.js';\nimport DurationColumn from '../../Scheduler/column/DurationColumn.js';\nimport EarlyEndDateColumn from './EarlyEndDateColumn.js';\nimport EarlyStartDateColumn from './EarlyStartDateColumn.js';\nimport EffortColumn from './EffortColumn.js';\nimport EndDateColumn from './EndDateColumn.js';\nimport IgnoreResourceCalendarColumn from './IgnoreResourceCalendarColumn.js';\nimport InactiveColumn from './InactiveColumn.js';\n// Not including EventModelColumn on purpose\nimport LateEndDateColumn from './LateEndDateColumn.js';\nimport LateStartDateColumn from './LateStartDateColumn.js';\nimport ManuallyScheduledColumn from './ManuallyScheduledColumn.js';\nimport MilestoneColumn from './MilestoneColumn.js';\nimport NameColumn from './NameColumn.js';\nimport NoteColumn from './NoteColumn.js';\nimport PercentDoneColumn from './PercentDoneColumn.js';\nimport PredecessorColumn from './PredecessorColumn.js';\nimport ResourceAssignmentColumn from './ResourceAssignmentColumn.js';\nimport RollupColumn from './RollupColumn.js';\nimport SchedulingModeColumn from './SchedulingModeColumn.js';\nimport SequenceColumn from './SequenceColumn.js';\nimport ShowInTimelineColumn from './ShowInTimelineColumn.js';\nimport StartDateColumn from './StartDateColumn.js';\nimport SuccessorColumn from './SuccessorColumn.js';\nimport TotalSlackColumn from './TotalSlackColumn.js';\nimport WBSColumn from './WBSColumn.js';\n\n/**\n * @module Gantt/column/AllColumns\n *\n * Imports all currently developed Gantt columns and re-exports them in an object.\n * Should be used to import and register all Gantt columns.\n */\nexport default {\n    AddNewColumn,\n    CalendarColumn,\n    ConstraintDateColumn,\n    ConstraintTypeColumn,\n    DeadlineDateColumn,\n    DurationColumn,\n    EarlyEndDateColumn,\n    EarlyStartDateColumn,\n    EffortColumn,\n    EndDateColumn,\n    IgnoreResourceCalendarColumn,\n    InactiveColumn,\n    LateEndDateColumn,\n    LateStartDateColumn,\n    ManuallyScheduledColumn,\n    MilestoneColumn,\n    NameColumn,\n    NoteColumn,\n    PercentDoneColumn,\n    PredecessorColumn,\n    ResourceAssignmentColumn,\n    RollupColumn,\n    SchedulingModeColumn,\n    SequenceColumn,\n    ShowInTimelineColumn,\n    StartDateColumn,\n    SuccessorColumn,\n    TotalSlackColumn,\n    WBSColumn\n};\n", "import CheckColumn from '../../Grid/column/CheckColumn.js';\nimport ColumnStore from '../../Grid/data/ColumnStore.js';\n\n/**\n * A column that displays (and allows user to update) the task's\n * {@link Gantt.model.TaskModel#field-manuallyScheduled manuallyScheduled} field.\n *\n * This column uses a {@link Core.widget.Checkbox checkbox} as its editor, and it is not intended to be changed.\n *\n * @extends Grid/column/CheckColumn\n * @classType eventmode\n * @column\n */\nexport default class EventModeColumn extends CheckColumn {\n\n    static get $name() {\n        return 'EventModeColumn';\n    }\n\n    static get type() {\n        return 'eventmode';\n    }\n\n    static get isGanttColumn() {\n        return true;\n    }\n\n    static get defaults() {\n        return {\n            field : 'manuallyScheduled',\n            align : 'left',\n            text  : 'L{Event mode}'\n        };\n    }\n\n    internalRenderer({ value, cellElement, column, isExport }) {\n        super.internalRenderer(...arguments);\n\n        if (isExport) {\n            return this.renderText(value);\n        }\n        else {\n            if (cellElement.widget) {\n                cellElement.widget.text = this.renderText(value);\n            }\n        }\n    }\n\n    onCheckboxChange({ source, checked }) {\n        super.onCheckboxChange(...arguments);\n        source.text = this.renderText(checked);\n    }\n\n    renderText(value) {\n        return value ? this.L('L{Manual}') : this.L('L{Auto}');\n    }\n}\n\nColumnStore.registerColumnType(EventModeColumn);\n", "import SchedulerTimeAxisColumn from '../../Scheduler/column/TimeAxisColumn.js';\nimport ColumnStore from '../../Grid/data/ColumnStore.js';\n\n/**\n * @module Gantt/column/TimeAxisColumn\n */\n\n/**\n * A column containing the timeline \"viewport\", in which tasks, dependencies etc. are drawn.\n * Normally you do not need to interact with or create this column, it is handled by Gantt.\n *\n * @extends Scheduler/column/TimeAxisColumn\n * @typings Scheduler/column/TimeAxisColumn -> Scheduler/column/SchedulerTimeAxisColumn\n * @column\n */\nexport default class TimeAxisColumn extends SchedulerTimeAxisColumn {\n\n    static get defaults() {\n        return {\n            /**\n             * Set to `false` to disable {@link Gantt.feature.TaskMenu TaskMenu} for the cell elements in this column.\n             * @config {Boolean} enableCellContextMenu\n             * @default true\n             * @category Menu\n             */\n            enableCellContextMenu : true\n        };\n    }\n\n}\n\nColumnStore.registerColumnType(TimeAxisColumn);\n", "import SchedulerProAssignmentStore from '../../SchedulerPro/data/AssignmentStore.js';\nimport AssignmentModel from '../model/AssignmentModel.js';\n\n/**\n * @module Gantt/data/AssignmentStore\n */\n\n/**\n * A class representing a collection of assignments between tasks in the {@link Gantt/data/TaskStore} and resources\n * in the {@link Gantt/data/ResourceStore}.\n *\n * ```javascript\n * const assignmentStore = new AssignmentStore({\n *     data : [\n *         { \"id\" : 1, \"event\" : 11,  \"resource\" : 1 },\n *         { \"id\" : 2, \"event\" : 12,  \"resource\" : 1 },\n *     ]\n * })\n * ```\n *\n * Contains a collection of the {@link Gantt/model/AssignmentModel} records.\n *\n * @extends SchedulerPro/data/AssignmentStore\n * @typings SchedulerPro/data/AssignmentStore -> SchedulerPro/data/SchedulerProAssignmentStore\n */\nexport default class AssignmentStore extends SchedulerProAssignmentStore {\n    static get defaultConfig() {\n        return {\n            modelClass : AssignmentModel,\n\n            /**\n             * CrudManager must load stores in the correct order. Lowest first.\n             * @private\n             */\n            loadPriority : 500,\n\n            /**\n             * CrudManager must sync stores in the correct order. Lowest first.\n             * @private\n             */\n            syncPriority : 400\n        };\n    }\n}\n", "import SchedulerProCalendarModel from '../../SchedulerPro/model/CalendarModel.js';\n\n/**\n * @module Gantt/model/CalendarModel\n */\n\n/**\n * This class represents a calendar in the Gantt project. It contains a collection of the {@link SchedulerPro.model.CalendarIntervalModel}.\n * Every interval can be either recurrent (regularly repeating in time) or static.\n *\n * Please refer to the [calendars guide](#Gantt/guides/basics/calendars.md) for details\n *\n * @extends SchedulerPro/model/CalendarModel\n *\n * @typings SchedulerPro/model/CalendarModel -> SchedulerPro/model/SchedulerProCalendarModel\n */\nexport default class CalendarModel extends SchedulerProCalendarModel {}\n", "import SchedulerProCalendarManagerStore from '../../SchedulerPro/data/CalendarManagerStore.js';\nimport CalendarModel from '../model/CalendarModel.js';\n\n/**\n * @module Gantt/data/CalendarManagerStore\n */\n\n/**\n * A class representing the tree of calendars in the Gantt chart. An individual calendar is represented as an instance of the\n * {@link Gantt.model.CalendarModel} class. The store expects the data loaded to be hierarchical. Each parent node should\n * contain its children in a property called 'children'.\n *\n * Please refer to the [calendars guide](#Gantt/guides/basics/calendars.md) for details\n *\n * @extends SchedulerPro/data/CalendarManagerStore\n * @typings SchedulerPro/data/CalendarManagerStore -> SchedulerPro/data/SchedulerProCalendarManagerStore\n */\nexport default class CalendarManagerStore extends SchedulerProCalendarManagerStore {\n    static get defaultConfig() {\n        return {\n            modelClass : CalendarModel\n        };\n    }\n}\n", "import SchedulerProDependencyModel from '../../SchedulerPro/model/DependencyModel.js';\n\n/**\n * @module Gantt/model/DependencyModel\n */\n\n/**\n * This class represents a single dependency between the tasks in your Gantt project.\n *\n * ## Subclassing the Dependency class\n *\n * The name of any field in data can be customized in the subclass, see the example below.\n *\n * ```javascript\n * class MyDependencyModel extends DependencyModel {\n *   static get fields() {\n *     return [\n *       { name: 'to', dataSource : 'targetId' },\n *       { name: 'from', dataSource : 'sourceId' }\n *     ];\n *   }\n * }\n * ```\n *\n * @extends SchedulerPro/model/DependencyModel\n *\n * @typings Scheduler/model/DependencyModel -> Scheduler/model/SchedulerDependencyModel\n * @typings SchedulerPro/model/DependencyModel -> SchedulerPro/model/SchedulerProDependencyModel\n */\nexport default class DependencyModel extends SchedulerProDependencyModel {\n\n    constructor(...args) {\n        const [config] = args;\n\n        if (config?.fromTask) {\n            config.fromEvent = config.fromTask;\n        }\n\n        if (config?.toTask) {\n            config.toEvent = config.toTask;\n        }\n\n        super(...args);\n    }\n\n    get from() {\n        return this.fromEvent?.id;\n    }\n\n    set from(value) {\n        super.from = value;\n    }\n\n    /**\n     * The origin task of this dependency.\n     *\n     * Accepts multiple formats but always returns an {@link Gantt.model.TaskModel}.\n     *\n     * **NOTE:** This is not a proper field but rather an alias, it will be serialized but cannot be remapped. If you\n     * need to remap, consider using {@link #field-from} instead.\n     *\n     * @field {Gantt.model.TaskModel} fromTask\n     * @accepts {String|Number|Gantt.model.TaskModel}\n     * @category Dependency\n     */\n\n    /**\n     * The destination task of this dependency.\n     *\n     * Accepts multiple formats but always returns an {@link Gantt.model.TaskModel}.\n     *\n     * **NOTE:** This is not a proper field but rather an alias, it will be serialized but cannot be remapped. If you\n     * need to remap, consider using {@link #field-to} instead.\n     *\n     * @field {Gantt.model.TaskModel} toTask\n     * @accepts {String|Number|Gantt.model.TaskModel}\n     * @category Dependency\n     */\n\n    get fromTask() {\n        return this.fromEvent;\n    }\n\n    set fromTask(task) {\n        this.fromEvent = task;\n    }\n\n    get to() {\n        return this.toEvent?.id;\n    }\n\n    set to(value) {\n        super.to = value;\n    }\n\n    get toTask() {\n        return this.toEvent;\n    }\n\n    set toTask(task) {\n        this.toEvent = task;\n    }\n\n    // <remove-on-release>\n    // Override persistable getter to prevent sending whole task data but sending only the id only\n    // TODO: Remove as part of https://github.com/bryntum/support/issues/1955\n    // </remove-on-release>\n    get persistableData() {\n        const\n            data                 = super.persistableData,\n            { fromTask, toTask } = data;\n\n        if (fromTask) {\n            data.fromTask = fromTask.id;\n        }\n\n        if (toTask) {\n            data.toTask = toTask.id;\n        }\n\n        return data;\n    }\n\n    shouldRecordFieldChange(fieldName, oldValue, newValue) {\n        if (fieldName === 'from' || fieldName === 'to') {\n            // we don't need to record the changes in the computed `to/from` fields\n            // note, that at the scheduler basic level, we do record changes in those fields,\n            // because there the fields are \"real\"\n            return false;\n        }\n        else {\n            return super.shouldRecordFieldChange(fieldName, oldValue, newValue);\n        }\n    }\n}\n", "import SchedulerProDependencyStore from '../../SchedulerPro/data/DependencyStore.js';\nimport DependencyModel from '../model/DependencyModel.js';\n\n/**\n * @module Gantt/data/DependencyStore\n */\n\n/**\n * A class representing a collection of dependencies between tasks in the {@link Gantt.data.TaskStore}.\n * Contains a collection of {@link Gantt.model.DependencyModel} records.\n *\n * ```javascript\n * const dependencyStore = new DependencyStore({\n *     data : [\n *         {\n *             \"id\"       : 1,\n *             \"fromTask\" : 11,\n *             \"toTask\"   : 15,\n *             \"lag\"      : 2\n *         },\n *         {\n *             \"id\"       : 2,\n *             \"fromTask\" : 12,\n *             \"toTask\"   : 15\n *         }\n *     ]\n * })\n * ```\n *\n * @extends SchedulerPro/data/DependencyStore\n * @typings SchedulerPro/data/DependencyStore -> SchedulerPro/data/SchedulerProDependencyStore\n */\nexport default class DependencyStore extends SchedulerProDependencyStore {\n    static get defaultConfig() {\n        return {\n            modelClass : DependencyModel,\n\n            /**\n             * CrudManager must load stores in the correct order. Lowest first.\n             * @private\n             */\n            loadPriority : 300,\n\n            /**\n             * CrudManager must sync stores in the correct order. Lowest first.\n             * @private\n             */\n            syncPriority : 500\n        };\n    }\n}\n", "import SchedulerProResourceModel from '../../SchedulerPro/model/ResourceModel.js';\n\n/**\n * @module Gantt/model/ResourceModel\n */\n\n/**\n * This class represents a single resource in your Gantt project.\n *\n * If you want to add or change some fields, describing resources - subclass this class:\n *\n * ```javascript\n * class MyResourceModel extends ResourceModel {\n *\n *   static get fields() {\n *     return [\n *       { name: 'company', type: 'string' }\n *     ]\n *   }\n * }\n * ```\n *\n * See also: {@link Gantt.model.AssignmentModel}\n * @extends SchedulerPro/model/ResourceModel\n *\n * @typings SchedulerPro/model/ResourceModel -> SchedulerPro/model/SchedulerProResourceModel\n */\nexport default class ResourceModel extends SchedulerProResourceModel {\n    /**\n     * Get associated tasks\n     *\n     * @member {SchedulerPro.model.EventModel[]} events\n     * @readonly\n     */\n}\n", "import SchedulerProResourceStore from '../../SchedulerPro/data/ResourceStore.js';\nimport ResourceModel from '../model/ResourceModel.js';\n\n/**\n * @module Gantt/data/ResourceStore\n */\n\n/**\n * A class representing the collection of the resources - {@link Gantt.model.ResourceModel} records.\n *\n * ```javascript\n * const resourceStore = new ResourceStore({\n *     data : [\n *         { \"id\" : 1, \"name\" : \"John Doe\" },\n *         { \"id\" : 2, \"name\" : \"Jane Doe\" }\n *     ]\n * })\n * ```\n *\n * @extends SchedulerPro/data/ResourceStore\n * @typings SchedulerPro/data/ResourceStore -> SchedulerPro/data/SchedulerProResourceStore\n */\nexport default class ResourceStore extends SchedulerProResourceStore {\n    static get defaultConfig() {\n        return {\n            modelClass : ResourceModel,\n\n            /**\n             * CrudManager must load stores in the correct order. Lowest first.\n             * @private\n             */\n            loadPriority : 400,\n\n            /**\n             * CrudManager must sync stores in the correct order. Lowest first.\n             * @private\n             */\n            syncPriority : 200\n        };\n    }\n}\n", "import TimeSpan from '../../Scheduler/model/TimeSpan.js';\n\n/**\n * @module Gantt/model/Baseline\n */\n\n/**\n * This class represents a baseline of a Task.\n *\n * Records based on this model are initially created when tasks are loaded into the TaskStore. If dates (startDate and\n * endDate) are left out, the task's dates will be used. If dates are `null`, dates will be empty and the baseline bar\n * won't be displayed in the UI.\n *\n * @extends Scheduler/model/TimeSpan\n */\nexport default class Baseline extends TimeSpan {\n    //region Fields\n\n    // <remove-on-release>\n    // TODO: handle persist? defaultValue?\n    // </remove-on-release>\n    static get fields() {\n        return [\n            /**\n             * The owning Task of the Baseline\n             * @field {Gantt.model.TaskModel} task\n             */\n            {\n                name    : 'task',\n                persist : false\n            }\n\n            /**\n             * Start date of the baseline in ISO 8601 format.\n             *\n             * Note that the field always returns a `Date`.\n             *\n             * @field {Date} startDate\n             * @accepts {String|Date}\n             */\n\n            /**\n             * End date of the baseline in ISO 8601 format.\n             *\n             * Note that the field always returns a `Date`.\n             *\n             * @field {Date} endDate\n             * @accepts {String|Date}\n             */\n\n            /**\n             * An encapsulation of the CSS classes to be added to the rendered baseline element.\n             *\n             * Always returns a {@link Core.helper.util.DomClassList}, but may still be treated as a string. For\n             * granular control of adding and removing individual classes, it is recommended to use the\n             * {@link Core.helper.util.DomClassList} API.\n             *\n             * @field {Core.helper.util.DomClassList} cls\n             * @accepts {Core.helper.util.DomClassList|String}\n             */\n\n        ];\n    }\n\n    //endregion\n\n    //region Init\n\n    //endregion\n\n    get isBaseline() {\n        return true;\n    }\n\n    //region Milestone\n\n    get milestone() {\n        // a summary baseline may have zero duration when \"recalculateParents\" is on\n        // and a child baseline has working time on the summary baseline non-working time\n        // so we operate start and end date pair here\n        if (!this.isLeaf) {\n            const { startDate, endDate } = this;\n\n            if (startDate && endDate) {\n                return endDate.getTime() === startDate.getTime();\n            }\n        }\n\n        return this.duration === 0;\n    }\n\n    set milestone(value) {\n        value ? this.convertToMilestone() : this.convertToRegular();\n    }\n\n    async setMilestone(value) {\n        return value ? this.convertToMilestone() : this.convertToRegular();\n    }\n\n    /**\n     * Converts this baseline to a milestone (start date will match the end date).\n     *\n     * @propagating\n     */\n    async convertToMilestone() {\n        return this.setDuration(0, this.durationUnit, false);\n    }\n\n    /**\n     * Converts a milestone baseline to a regular baseline with a duration of 1 (keeping current `durationUnit`).\n     *\n     * @propagating\n     */\n    async convertToRegular() {\n        if (this.milestone) {\n            return this.setDuration(1, this.durationUnit, false);\n        }\n    }\n\n    //endregion\n\n    // Uses engine to calculate dates and/or duration.\n    normalize() {\n        const\n            me = this,\n            { task, startDate, endDate, duration } = me,\n            hasDuration  = duration != null;\n\n        if (!task.graph) {\n            super.normalize();\n        }\n        else {\n            // need to calculate duration (checking first since seemed most likely to happen)\n            if (startDate && endDate && !hasDuration) {\n                me.setData('duration', task.run('calculateProjectedDuration', startDate, endDate));\n            }\n            // need to calculate endDate\n            else if (startDate && !endDate && hasDuration) {\n                me.setData('endDate', task.run('calculateProjectedXDateWithDuration', startDate, true, duration));\n            }\n            // need to calculate startDate\n            else if (!startDate && endDate && hasDuration) {\n                me.setData('startDate', task.run('calculateProjectedXDateWithDuration', endDate, false, duration));\n            }\n        }\n    }\n}\n", "import DataField from '../../../Core/data/field/DataField.js';\nimport Wbs from '../../../Core/data/Wbs.js';\n\n/**\n * @module Gantt/data/field/WbsField\n */\n\n/**\n * This class is used for a WBS (Work Breakdown Structure) field. These fields hold a {@link Gantt.data.Wbs}\n * object for their value.\n *\n * @extends Core/data/field/DataField\n * @inputfield\n */\nexport default class WbsField extends DataField {\n    static get type() {\n        return 'wbs';\n    }\n\n    convert(value) {\n        return Wbs.from(value);\n    }\n\n    serialize(value) {\n        // the wbsValue field is not persistent, so this is likely not going to be called... however, the user could\n        // flip that option so we implement this method in case that happens.\n        return String(value);\n    }\n}\n\nWbsField.prototype.compare = Wbs.compare;\n\nWbsField.initClass();\n", "import DateHelper from '../../Core/helper/DateHelper.js';\nimport Duration from '../../Core/data/Duration.js';\nimport Store from '../../Core/data/Store.js';\nimport TimeSpan from '../../Scheduler/model/TimeSpan.js';\nimport DependencyBaseModel from '../../Scheduler/model/DependencyBaseModel.js';\nimport PercentDoneMixin from '../../SchedulerPro/model/mixin/PercentDoneMixin.js';\nimport { GanttEvent } from '../../Engine/quark/model/gantt/GanttEvent.js';\nimport PartOfProject from '../data/mixin/PartOfProject.js';\nimport Baseline from './Baseline.js';\nimport Wbs from '../../Core/data/Wbs.js';\nimport '../data/field/WbsField.js';\nimport EventSegmentModel from '../../SchedulerPro/model/EventSegmentModel.js';\n\n/**\n * @module Gantt/model/TaskModel\n */\n\nconst\n    // A utility function to populate a Task's baseline with the Task's default values\n    applyBaselineDefaults   = (task, baselines) => {\n        const {\n            startDate, durationUnit, endDate\n        } = task;\n\n        return baselines ? baselines.map(baseline => {\n            // Baseline has its own data if at least two of the following are defined.\n            // The remaining data, if incomplete, will be calculated in Baseline normalize() method\n            const\n                hasData = (+('startDate' in baseline) + ('endDate' in baseline) + ('duration' in baseline)) > 1,\n                data    = { task, ...baseline };\n\n            // Don't fill dates that are missing in loaded data\n            // https://github.com/bryntum/support/issues/4309\n            if (!hasData) {\n                Object.assign(data, { startDate, endDate, durationUnit });\n            }\n            return data;\n        }) : [];\n    },\n\n    descendingWbsSorter     = s => s.field === 'wbsValue' && !s.ascending,\n    isReversed              = children => {\n        for (let firstChildWbs, childWbs, i = 0, n = children.length; i < n; ++i) {\n            childWbs = children[i].wbsValue;\n\n            if (childWbs) {\n                if (firstChildWbs) {\n                    return childWbs < firstChildWbs;\n                }\n\n                firstChildWbs = childWbs;\n            }\n        }\n\n        return false;\n    },\n    // Refresh siblings in depth when it's not initial WBS calculation\n    refreshWbsOptions       = { deep : true },\n    // Record should not be considered modified by initial assignment of wbsValue\n    refreshWbsOnJoinOptions = { deep : true, silent : true };\n\n/**\n * Options for the `convertEmptyParentToLeaf` static property.\n * @typedef {Object} ConvertEmptyParentToLeafOptions\n * @property {Boolean} onLoad `true` to convert empty parent tasks to leaf tasks on load\n * @property {Boolean} onRemove `true` to convert parent tasks that become empty after removing a child to leaf tasks\n */\n\n/**\n * This class represents a task in your Gantt project. Extend it to add your own custom task fields and methods.\n *\n * ## Subclassing the TaskModel class\n * To subclass the TaskModel and add extra {@link Core.data.Model#property-fields-static} and API methods, please see\n * the snippet below.\n *\n *```javascript\n * class MyTaskModel extends TaskModel {\n *   static get fields() {\n *       return [\n *           { name: 'importantDate', type: 'date' }\n *       ]\n *   }\n *```\n *\n * After creating your own Task model class, configure the {@link Gantt.model.ProjectModel#config-taskModelClass} on\n * Project to use it:\n *\n *```javascript\n * new Gantt({\n *     project : {\n *         taskModelClass : MyTaskModel\n *     }\n * });\n *```\n *\n * ## Creating a new Task programmatically\n *\n * To create a new task programmatically, simply call the TaskModel constructor and pass in any field values.\n *\n * ```javascript\n * const newTask = new TaskModel({\n *     name          : 'My awesome task',\n *     importantDate : new Date(2022, 0, 1),\n *     percentDone   : 80 // So awesome it's almost done\n *     // ...\n * });\n * ```\n *\n * ## Async scheduling\n *\n * A record created from an {@link Gantt/model/TaskModel} is normally part of a {@link Gantt/data/TaskStore}, which in\n * turn is part of a {@link Gantt/model/ProjectModel project}.\n * When dates or the duration of a task is changed, the project performs async calculations of the other related fields\n * (including the field of other tasks affected by the change).\n * For example if {@link #field-duration} is changed, it will recalculate {@link #field-endDate}.\n *\n * As a result of this being an async operation, the values of other fields are not guaranteed to be up to date\n * immediately after a change. To ensure data is up to date, `await` the calculations to finish.\n *\n * For example, `endDate` is not up to date after this operation:\n *\n * ```javascript\n * taskRecord.duration = 5;\n * // taskRecord.endDate not yet calculated\n * ```\n *\n * But if calculations are awaited it is up to date:\n *\n * ```javascript\n * taskRecord.duration = 5;\n * await taskRecord.project.commitAsync();\n * // endDate is calculated\n * ```\n *\n * In case of multiple changes no need to trigger recalculation after each of them:\n *\n * ```javascript\n * // change taskRecord1 start and duration\n * taskRecord1.startDate = '2021-11-15';\n * taskRecord1.duration = 5;\n * // change taskRecord2 duration\n * taskRecord2.duration = 1;\n * // change taskRecord3 finish date\n * taskRecord3.endDate = '2021-11-17';\n *\n * // now when all changes are done trigger rescheduling\n * await taskRecord.project.commitAsync();\n * ```\n *\n * ## Manually vs automatically scheduled tasks\n *\n * A task can be either **automatically** (default) or **manually** scheduled. This is defined by the\n * {@link #field-manuallyScheduled} field. Manually scheduled tasks are not affected by the automatic scheduling\n * process, which means their start/end dates are meant to be changed by user manually. Such tasks are not shifted\n * by their predecessors nor such summary tasks rollup their children start/end dates.\n * While automatically scheduled tasks start/end dates are calculated by the Gantt.\n *\n * ## Start and end dates\n *\n * For all tasks, the end date is non-inclusive: {@link #field-startDate} <= date < {@link #field-endDate}.\n * Example: a task which starts at 2020/07/18 and has 2 days duration, should have the end date: 2020/07/20, **not**\n * 2018/07/19 23:59:59.\n * The start and end dates of tasks in are *points* on the time axis and if you specify that a task starts\n * 01/01/2020 and has 1 day duration, that means the start point is 01/01/2020 00:00 and end point is 02/01/2020 00:00.\n *\n * @mixes SchedulerPro/data/mixin/PartOfProject\n * @mixes SchedulerPro/model/mixin/PercentDoneMixin\n *\n * @extends Scheduler/model/TimeSpan\n */\nexport default class TaskModel extends GanttEvent.derive(TimeSpan).mixin(\n    PartOfProject,\n    PercentDoneMixin\n) {\n    //region Fields\n\n    /**\n     * This static configuration option allows you to control whether an empty parent task should be converted into a\n     * leaf. Enable/disable it for a whole class:\n     *\n     * ```javascript\n     * TaskModel.convertEmptyParentToLeaf = false;\n     * ```\n     *\n     * By specifying `true`, all empty parents will be considered leafs. Can also be assigned a configuration object\n     * with the following Boolean properties to customize the behaviour:\n     *\n     * * `onLoad` - Apply the transformation on load to any parents without children (`children : []`)\n     * * `onRemove` - Apply the transformation when all children have been removed from a parent\n     *\n     * ```javascript\n     * TaskModel.convertEmptyParentToLeaf = {\n     *     onLoad   : false,\n     *     onRemove : true\n     * }\n     * ```\n     *\n     * @member {Boolean|ConvertEmptyParentToLeafOptions} convertEmptyParentToLeaf\n     * @default true\n     * @static\n     * @category Parent & children\n     */\n\n    static get fields() {\n        return [\n            /**\n             * Unique identifier of task (mandatory)\n             * @field {String|Number} id\n             * @category Common\n             */\n\n            /**\n             * Name of the task\n             * @field {String} name\n             * @category Common\n             */\n\n            /**\n             * A set of resources assigned to this task\n             * @field {Set} assigned\n             * @readonly\n             * @category Common\n             */\n\n            /**\n             * This field is automatically set to `true` when the task is \"unscheduled\" - user has provided an empty\n             * string in one of the UI editors for start date, end date or duration. Such task is not rendered,\n             * and does not affect the schedule of its successors.\n             *\n             * To schedule the task back, enter one of the missing values, so that there's enough information\n             * to calculate start date, end date and duration.\n             *\n             * Note, that setting this field manually does nothing. This field should be persisted, but not updated\n             * manually.\n             *\n             * @field {Boolean} unscheduled\n             * @readonly\n             * @category Scheduling\n             */\n\n            /**\n             * Start date of the task in ISO 8601 format\n             *\n             * UI fields representing this data field are disabled for summary events\n             * except the {@link #field-manuallyScheduled manually scheduled} events.\n             * See {@link #function-isEditable} for details.\n             *\n             * Note that the field always returns a `Date`.\n             *\n             * @field {Date} startDate\n             * @accepts {String|Date}\n             * @category Scheduling\n             */\n\n            /**\n             * End date of the task in ISO 8601 format\n             *\n             * UI fields representing this data field are disabled for summary events\n             * except the {@link #field-manuallyScheduled manually scheduled} events.\n             * See {@link #function-isEditable} for details.\n             *\n             * Note that the field always returns a `Date`.\n             *\n             * @field {Date} endDate\n             * @accepts {String|Date}\n             * @category Scheduling\n             */\n\n            /**\n             * The numeric part of the task duration (the number of units).\n             *\n             * UI fields representing this data field are disabled for summary events\n             * except the {@link #field-manuallyScheduled manually scheduled} events.\n             * See {@link #function-isEditable} for details.\n             *\n             * @field {Number} duration\n             * @category Scheduling\n             */\n\n            /**\n             * Segments of the task that appear when the task gets {@link #function-splitToSegments}.\n             * @field {SchedulerPro.model.EventSegmentModel[]} segments\n             * @category Scheduling\n             */\n\n            /**\n             * An encapsulation of the CSS classes to be added to the rendered event element.\n             *\n             * Always returns a {@link Core.helper.util.DomClassList}, but may still be treated as a string. For\n             * granular control of adding and removing individual classes, it is recommended to use the\n             * {@link Core.helper.util.DomClassList} API.\n             *\n             * @field {Core.helper.util.DomClassList} cls\n             * @accepts {Core.helper.util.DomClassList|String} cls\n             * @category Styling\n             */\n            {\n                name      : 'cls',\n                serialize : (value) => {\n                    return value.isDomClassList ? value.toString() : value;\n                },\n                persist : true\n            },\n\n            /**\n             * The current status of a task, expressed as the percentage completed (integer from 0 to 100)\n             *\n             * UI fields representing this data field are disabled for summary events.\n             * See {@link #function-isEditable} for details.\n             *\n             * @field {Number} percentDone\n             * @category Scheduling\n             */\n\n            /**\n             * The numeric part of the task effort (the number of units). The effort of the \"parent\" tasks will be automatically set to the sum\n             * of efforts of their \"child\" tasks\n             *\n             * UI fields representing this data field are disabled for summary events.\n             * See {@link #function-isEditable} for details.\n             *\n             * @field {Number} effort\n             * @category Scheduling\n             */\n\n            /**\n             * The unit part of the task duration, defaults to \"day\" (days). Valid values are:\n             *\n             * - \"millisecond\" - Milliseconds\n             * - \"second\" - Seconds\n             * - \"minute\" - Minutes\n             * - \"hour\" - Hours\n             * - \"day\" - Days\n             * - \"week\" - Weeks\n             * - \"month\" - Months\n             * - \"quarter\" - Quarters\n             * - \"year\"- Years\n             *\n             * This field is readonly after creation, to change it use the {@link #function-setDuration} call.\n             * @field {'millisecond'|'second'|'minute'|'hour'|'day'|'week'|'month'|'quarter'|'year'} durationUnit\n             * @default \"day\"\n             * @category Scheduling\n             */\n\n            /**\n             * The unit part of the task's effort, defaults to \"h\" (hours). Valid values are:\n             *\n             * - \"millisecond\" - Milliseconds\n             * - \"second\" - Seconds\n             * - \"minute\" - Minutes\n             * - \"hour\" - Hours\n             * - \"day\" - Days\n             * - \"week\" - Weeks\n             * - \"month\" - Months\n             * - \"quarter\" - Quarters\n             * - \"year\"- Years\n             *\n             * This field is readonly after creation, to change it use the {@link #function-setEffort} call.\n             * @field {'millisecond'|'second'|'minute'|'hour'|'day'|'week'|'month'|'quarter'|'year'} effortUnit\n             * @default \"hour\"\n             * @category Scheduling\n             */\n\n            { name : 'fullEffort', persist : false },\n\n            /**\n             * The effective calendar used by the task.\n             * Returns the task own {@link #field-calendar} if provided or the project {@link Gantt.model.ProjectModel#field-calendar calendar}.\n             *\n             * @field {Gantt.model.CalendarModel} effectiveCalendar\n             * @category Scheduling\n             * @calculated\n             * @readonly\n             */\n\n            /**\n             * The calendar, assigned to the task. Allows you to set the time when task can be performed.\n             *\n             * @field {Gantt.model.CalendarModel} calendar\n             * @category Scheduling\n             */\n\n            /**\n             * The getter will yield a {@link Core.data.Store} of {@link Gantt.model.Baseline}s.\n             *\n             * When constructing a task the baselines will be constructed from an array of\n             * {@link Gantt.model.Baseline} data objects.\n             *\n             * When serializing, it will yield an array of {@link Gantt.model.Baseline} data objects.\n             *\n             * @field {Core.data.Store} baselines\n             * @accepts {BaselineConfig[]}\n             * @category Features\n             */\n            { name : 'baselines', type : 'store', modelClass : Baseline, storeClass : Store, lazy : true },\n\n            /**\n             * A freetext note about the task.\n             * @field {String} note\n             * @category Common\n             */\n            { name : 'note', type : 'string' },\n\n            'parentId',\n\n            /**\n             * Field storing the task constraint alias or `null` if not constraint set.\n             * Valid values are:\n             * - \"finishnoearlierthan\"\n             * - \"finishnolaterthan\"\n             * - \"mustfinishon\"\n             * - \"muststarton\"\n             * - \"startnoearlierthan\"\n             * - \"startnolaterthan\"\n             *\n             * @field {'finishnoearlierthan'|'finishnolaterthan'|'mustfinishon'|'muststarton'|'startnoearlierthan'|'startnolaterthan'|null} constraintType\n             * @category Scheduling\n             */\n\n            /**\n             * Field defining the constraint boundary date or `null` if {@link #field-constraintType} is `null`.\n             * @field {String|Date|null} constraintDate\n             * @category Scheduling\n             */\n\n            /**\n             * When set to `true`, the {@link #field-startDate} of the task will not be changed by any of its incoming\n             * dependencies or constraints.\n             *\n             * @field {Boolean} manuallyScheduled\n             * @category Scheduling\n             */\n\n            /**\n             * When set to `true` the task becomes inactive and stops taking part in the project scheduling (doesn't\n             * affect linked tasks, rolls up its attributes and affect its assigned resources allocation).\n             *\n             * @field {Boolean} inactive\n             * @category Scheduling\n             */\n\n            /**\n             * When set to `true` the calendars of the assigned resources\n             * are not taken into account when scheduling the task.\n             *\n             * By default the field value is `false` resulting in that the task performs only when\n             * its own {@link #field-calendar} and some of the assigned\n             * resource calendars allow that.\n\n             * @field {Boolean} ignoreResourceCalendar\n             * @category Scheduling\n             */\n\n            /**\n             * This field defines the scheduling mode for the task. Based on this field some fields of the task\n             * will be \"fixed\" (should be provided by the user) and some - computed.\n             *\n             * Possible values are:\n             *\n             * - `Normal` is the default (and backward compatible) mode. It means the task will be scheduled based on\n             * information about its start/end dates, task own calendar (project calendar if there's no one) and\n             * calendars of the assigned resources.\n             *\n             * - `FixedDuration` mode means, that task has fixed start and end dates, but its effort will be computed\n             * dynamically, based on the assigned resources information. Typical example of such task is - meeting.\n             * Meetings typically have pre-defined start and end dates and the more people are participating in the\n             * meeting, the more effort is spent on the task. When duration of such task increases, its effort is\n             * increased too (and vice-versa). Note: fixed start and end dates here doesn't mean that a user can't\n             * update them via GUI, the only field which won't be editable in GUI is the\n             * {@link #field-effort effort field}, it will be calculated according to duration and resources assigned to\n             * the task.\n             *\n             * - `FixedEffort` mode means, that task has fixed effort and computed duration. The more resources will be\n             * assigned to this task, the less the duration will be. The typical example will be a \"paint the walls\"\n             * task - several painters will complete it faster.\n             *\n             * - `FixedUnits` mode means, that the assignment level of all assigned resources will be kept as provided\n             * by the user, and either {@link #field-effort} or duration of the task is recalculated, based on the\n             * {@link #field-effortDriven} flag.\n             *\n             * @field {'Normal'|'FixedDuration'|'FixedEffort'|'FixedUnits'} schedulingMode\n             * @category Scheduling\n             */\n\n            /**\n             * This boolean flag defines what part of task data should be updated in the `FixedUnits` scheduling mode.\n             * If it is `true`, then {@link #field-effort} is kept intact, and duration is updated. If it is `false` -\n             * vice-versa.\n             *\n             * @field {Boolean} effortDriven\n             * @default false\n             * @category Scheduling\n             */\n\n            /**\n             * A calculated field storing the _early start date_ of the task.\n             * The _early start date_ is the earliest possible date the task can start.\n             * This value is calculated based on the earliest dates of the task predecessors and the task own\n             * constraints. If the task has no predecessors nor other constraints, its early start date matches the\n             * project start date.\n             *\n             * UI fields representing this data field are naturally disabled since the field is readonly.\n             * See {@link #function-isEditable} for details.\n             *\n             * @field {Date} earlyStartDate\n             * @calculated\n             * @readonly\n             * @category Scheduling\n             */\n\n            /**\n             * A calculated field storing the _early end date_ of the task.\n             * The _early end date_ is the earliest possible date the task can finish.\n             * This value is calculated based on the earliest dates of the task predecessors and the task own\n             * constraints. If the task has no predecessors nor other constraints, its early end date matches the\n             * project start date plus the task duration.\n             *\n             * UI fields representing this data field are naturally disabled since the field is readonly.\n             * See {@link #function-isEditable} for details.\n             *\n             * @field {Date} earlyEndDate\n             * @calculated\n             * @readonly\n             * @category Scheduling\n             */\n\n            /**\n             * A calculated field storing the _late start date_ of the task.\n             * The _late start date_ is the latest possible date the task can start.\n             * This value is calculated based on the latest dates of the task successors and the task own constraints.\n             * If the task has no successors nor other constraints, its late start date matches the project end date\n             * minus the task duration.\n             *\n             * UI fields representing this data field are naturally disabled since the field is readonly.\n             * See {@link #function-isEditable} for details.\n             *\n             * @field {Date} lateStartDate\n             * @calculated\n             * @readonly\n             * @category Scheduling\n             */\n\n            /**\n             * A calculated field storing the _late end date_ of the task.\n             * The _late end date_ is the latest possible date the task can finish.\n             * This value is calculated based on the latest dates of the task successors and the task own constraints.\n             * If the task has no successors nor other constraints, its late end date matches the project end date.\n             *\n             * UI fields representing this data field are naturally disabled since the field is readonly.\n             * See {@link #function-isEditable} for details.\n             *\n             * @field {Date} lateEndDate\n             * @calculated\n             * @readonly\n             * @category Scheduling\n             */\n\n            /**\n             * A calculated field storing the _total slack_ (or _total float_) of the task.\n             * The _total slack_ is the amount of working time the task can be delayed without causing a delay\n             * to the project end.\n             * The value is expressed in {@link #field-slackUnit} units.\n             *\n             * ```javascript\n             * // let output slack info to the console\n             * console.log(`The ${task.name} task can be delayed for ${task.totalSlack} ${slackUnit}s`)\n             * ```\n             *\n             * UI fields representing this data field are naturally disabled since the field is readonly.\n             * See {@link #function-isEditable} for details.\n             *\n             *\n             * @field {Number} totalSlack\n             * @calculated\n             * @readonly\n             * @category Scheduling\n             */\n\n            /**\n             * A calculated field storing unit for the {@link #field-totalSlack} value.\n             * @field {String} slackUnit\n             * @default \"day\"\n             * @category Scheduling\n             */\n\n            /**\n             * A calculated field indicating if the task is _critical_.\n             * A task considered _critical_ if its delaying causes the project delay.\n             * The field value is calculated based on {@link #field-totalSlack} field value.\n             *\n             * ```javascript\n             * if (task.critical) {\n             *     Toast.show(`The ${task.name} is critical!`);\n             * }\n             * ```\n             *\n             * @field {Boolean} critical\n             * @calculated\n             * @readonly\n             * @category Scheduling\n             */\n\n            // NOTE: These are not actually fields, they are never set during task lifespan and only used by crud manager\n            // to send changes to the backend\n            // Two fields which specify the relations between \"phantom\" tasks when they are\n            // being sent to the server to be created (e.g. when you create a new task containing a new child task).\n            // { name : 'phantomId', type : 'string' },\n            // { name : 'phantomParentId', type : 'string' },\n\n            /**\n             * Child nodes. To allow loading children on demand, specify `children : true` in your data. Omit the field\n             * for leaf tasks.\n             *\n             * Note, if the task store loads data from a remote origin, make sure {@link Core/data/AjaxStore#config-readUrl}\n             * is specified, and optionally {@link Core/data/AjaxStore#config-parentIdParamName} is set, otherwise\n             * {@link Core/data/Store#function-loadChildren} has to be implemented.\n             *\n             * @field {Gantt.model.TaskModel[]} children\n             * @accepts {Boolean|Object[]|Gantt.model.TaskModel[]}\n             * @category Parent & children\n             */\n            { name : 'children', persist : false },\n\n            /**\n             * Set this to true if this task should be shown in the Timeline widget\n             * @field {Boolean} showInTimeline\n             * @category Features\n             */\n            { name : 'showInTimeline', type : 'boolean' },\n\n            /**\n             * Set this to true to roll up a task to its closest parent\n             * @field {Boolean} rollup\n             * @category Features\n             */\n            { name : 'rollup', type : 'boolean' },\n\n            /**\n             * The {@link Gantt.data.Wbs WBS} for this task record. This field is automatically calculated and\n             * maintained by the store. This calculation can be refreshed by calling {@link #function-refreshWbs}.\n             *\n             * To get string representation of the WBS value (e.g. '2.1.3'), use {@link Gantt.data.Wbs#property-value}\n             * property.\n             *\n             * @readonly\n             * @field {Gantt.data.Wbs} wbsValue\n             * @accepts {Gantt.data.Wbs|String}\n             * @category Scheduling\n             */\n            { name : 'wbsValue', type : 'wbs', persist : false },\n\n            /**\n             * A deadline date for this task. Does not affect scheduling logic.\n             *\n             * Note that the field always returns a `Date`.\n             *\n             * @field {Date} deadlineDate\n             * @accepts {String|Date}\n             * @category Scheduling\n             */\n            { name : 'deadlineDate', type : 'date' },\n\n            // Override TreeNode parentIndex to make it persistable\n            { name : 'parentIndex', type : 'number', persist : true },\n\n            /**\n             * CSS class specifying an icon to apply to the task row\n             * @field {String} iconCls\n             * @category Styling\n             */\n            'iconCls',\n\n            /**\n             * CSS class specifying an icon to apply to the task bar\n             * @field {String} taskIconCls\n             * @category Styling\n             */\n            'taskIconCls',\n\n            /**\n             * Specify false to prevent the event from being dragged (if {@link Gantt/feature/TaskDrag} feature is used)\n             * @field {Boolean} draggable\n             * @default true\n             * @category Interaction\n             */\n            { name : 'draggable', type : 'boolean', persist : false, defaultValue : true },   // true or false\n\n            /**\n             * Specify false to prevent the task from being resized (if {@link Gantt/feature/TaskResize} feature is\n             * used). You can also specify 'start' or 'end' to only allow resizing in one direction\n             * @field {Boolean|String} resizable\n             * @default true\n             * @category Interaction\n             */\n            { name : 'resizable', persist : false, defaultValue : true }                  // true, false, 'start' or 'end'\n        ];\n    }\n\n    //endregion\n\n    //region Config\n\n    // Flag for storing the initial manuallyScheduled value during tree transform. To avoid deoptimizing\n    $manuallyScheduled = null;\n\n    //endregion\n\n    getDefaultSegmentModelClass() {\n        return EventSegmentModel;\n    }\n\n    endBatch() {\n        const { isPersistable : wasPersistable } = this;\n\n        super.endBatch(...arguments);\n\n        // If this event newly persistable, its assignments are eligible for syncing.\n        if (this.isPersistable && !wasPersistable) {\n            this.assignments.forEach(assignment => {\n                assignment.stores.forEach(s => {\n                    s.updateModifiedBagForRecord(assignment);\n                });\n            });\n        }\n    }\n\n    /**\n     * Returns all predecessor dependencies of this task\n     * @member {Gantt.model.DependencyModel[]} predecessors\n     * @readonly\n     */\n\n    /**\n     * Returns all successor dependencies of this task\n     * @member {Gantt.model.DependencyModel[]} successors\n     * @readonly\n     */\n\n    get isTask() {\n        return true;\n    }\n\n    get isTaskModel() {\n        return true;\n    }\n\n    // To pass as an event when using a Gantt project with Scheduler Pro\n    get isEvent() {\n        return true;\n    }\n\n    get wbsCode() {\n        return String(this.wbsValue);\n    }\n\n    set wbsCode(value) {\n        this.wbsValue = Wbs.from(value);\n    }\n\n    copy(...args) {\n        const copy = super.copy(...args);\n\n        // Clean wbs but do not mark as dirty\n        copy.setData('wbsValue', null);\n\n        return copy;\n    }\n\n    /**\n     * Propagates changes to the dependent tasks. For example:\n     *\n     * ```js\n     * // double a task duration\n     * task.duration *= 2;\n     * // call commitAsync() to do further recalculations caused by the duration change\n     * task.commitAsync().then(() => console.log('Schedule updated'));\n     * ```\n     *\n     * @method commitAsync\n     * @async\n     * @propagating\n     */\n\n    /**\n     * Either activates or deactivates the task depending on the passed value.\n     * Will cause the schedule to be updated - returns a `Promise`\n     *\n     * @method\n     * @name setInactive\n     * @param {Boolean} inactive `true` to deactivate the task, `false` to activate it.\n     * @async\n     * @propagating\n     */\n\n    /**\n     * Sets {@link #field-segments} field value.\n     *\n     * @method\n     * @name setSegments\n     * @param {SchedulerPro.model.EventSegmentModel[]} segments Array of segments or null to make the task not segmented.\n     * @returns {Promise}\n     * @propagating\n     */\n\n    /**\n     * Splits the task to segments.\n     * @method splitToSegments\n     * @param {Date} from The date to split this task at.\n     * @param {Number} [lag=1] Split duration.\n     * @param {String} [lagUnit] Split duration unit.\n     * @returns {Promise}\n     * @propagating\n     */\n\n    /**\n     * Merges the task segments.\n     * The method merges two provided task segments (and all the segment between them if any).\n     * @method mergeSegments\n     * @param {SchedulerPro.model.EventSegmentModel} [segment1] First segment to merge.\n     * @param {SchedulerPro.model.EventSegmentModel} [segment2] Second segment to merge.\n     * @returns {Promise}\n     * @propagating\n     */\n\n    /**\n     * Sets the task {@link #field-ignoreResourceCalendar} field value and triggers rescheduling.\n     *\n     * @method setIgnoreResourceCalendar\n     * @param {boolean} ignore Provide `true` to ignore the calendars of the assigned resources\n     * when scheduling the task. If `false` the task performs only when\n     * its own {@link #field-calendar} and some of the assigned\n     * resource calendars allow that.\n     * @async\n     * @propagating\n     */\n\n    /**\n     * Returns the event {@link #field-ignoreResourceCalendar} field value.\n     *\n     * @method getIgnoreResourceCalendar\n     * @returns {boolean} The event {@link #field-ignoreResourceCalendar} field value.\n     */\n\n    /**\n     * The event first segment or null if the event is not segmented.\n     * @member {SchedulerPro.model.EventSegmentModel} firstSegment\n     */\n\n    /**\n     * The event last segment or null if the event is not segmented.\n     * @member {SchedulerPro.model.EventSegmentModel} lastSegment\n     */\n\n    // Apply baseline defaults to records added to the baselines store\n    processBaselinesStoreData(data) {\n        return applyBaselineDefaults(this, data);\n    }\n\n    set baselines(baselines) {\n        this.set({ baselines });\n    }\n\n    // Tests expect baselines to initialize on first access, not when task is created\n    get baselines() {\n        const me = this;\n\n        // Baselines field is lazy, we are responsible for initializing it when needed. Which is now, on first access\n        if (!me.$initializedBaselines) {\n            const baselinesField = me.fieldMap.baselines;\n            baselinesField.init(me.data, me);\n            me.assignInitables();\n            me.$initializedBaselines = true;\n        }\n\n        return me.meta.baselinesStore;\n    }\n\n    get hasBaselines() {\n        const baselinesField = this.fieldMap.baselines;\n\n        return Boolean(this.baselines?.count ?? this.originalData[baselinesField.dataSource]);\n    }\n\n    /**\n     * Applies the start/end dates from the task to the corresponding baseline.\n     *\n     * ```javascript\n     * const task = new TaskModel({\n     *      name: 'New task',\n     *      startDate: '2019-01-14',\n     *      endDate: '2019-01-17',\n     *      duration: 3,\n     *      baselines: [\n     *          // Baseline version 1\n     *          {\n     *              startDate: '2019-01-13',\n     *              endDate: '2019-01-16'\n     *          },\n     *          // Baseline version 2\n     *          {\n     *              startDate: '2019-01-14',\n     *              endDate: '2019-01-17'\n     *          },\n     *          // Baseline version 3\n     *          {\n     *              startDate: '2019-01-15',\n     *              endDate: '2019-01-18'\n     *          }\n     *      ]\n     * });\n     *\n     * // Apply the task's start/end dates to the baseline version 3\n     * task.setBaseline(3);\n     * ```\n     * @param {Number} version The baseline version to update\n     */\n    setBaseline(version) {\n        if (version <= 0) {\n            return;\n        }\n\n        const\n            { baselines }    = this,\n            missingBaselines = version - baselines.count;\n\n        // Add missing baselines up to the passed version\n        if (missingBaselines > 0) {\n            baselines.add(applyBaselineDefaults(this, new Array(missingBaselines).fill({})));\n        }\n        else {\n            baselines.getAt(version - 1).set(applyBaselineDefaults(this, [{}])[0]);\n        }\n    }\n\n    // <remove-on-release>\n    // TODO: drop and move to the engine, use outgoingDeps everywhere\n    // </remove-on-release>\n    get successors() {\n        return Array.from(this.outgoingDeps || []);\n    }\n\n    set successors(successors) {\n        this.outgoingDeps = successors;\n    }\n\n    setSuccessors(successors) {\n        return this.replaceDependencies(successors, true);\n    }\n\n    // Updates either predecessors or successors with a new array, updating existing dependency records and\n    // removing existing dependencies not part of current set\n    replaceDependencies(dependencyRecords, isSuccessors) {\n        const\n            me                  = this,\n            { dependencyStore } = me.project,\n            updated             = new Set(),\n            toAdd               = new Set(),\n            toRemove            = [],\n            currentSet          = isSuccessors ? me.outgoingDeps : me.incomingDeps,\n            depsArr             = Array.from(currentSet);\n\n        // <remove-on-release>\n        // TODO: All this collecting is added since chronograph\n        // </remove-on-release>\n        // cannot handle removing and adding the same records at the moment.\n        // We used to have here simple \"removing all current & adding provided\" approach\n        // Collect already existing instances and new ones\n        dependencyRecords.forEach(dependency => {\n            const existingDep = depsArr.find(isSuccessors ? dep => dep.toEvent === dependency.toEvent : dep => dep.fromEvent === dependency.fromEvent);\n\n            if (existingDep) {\n                updated.add(existingDep);\n\n                // Copy data using our own internal setters\n                existingDep.copyData(dependency);\n            }\n            else {\n                toAdd.add(dependency);\n            }\n        });\n\n        // Collect records that should be removed\n        currentSet.forEach(dependency => {\n            if (!updated.has(dependency)) {\n                toRemove.push(dependency);\n            }\n        });\n\n        // remove records\n        toRemove.forEach(dependency => dependencyStore.remove(dependency));\n\n        // add new records\n        toAdd.forEach(dependency => {\n            if (isSuccessors) {\n                dependency.fromEvent = me;\n            }\n            else {\n                dependency.toEvent = me;\n            }\n            dependencyStore.add(dependency);\n        });\n\n        return me.commitAsync();\n    }\n\n    // <remove-on-release>\n    // TODO: drop and move to the engine, use outgoingDeps everywhere\n    // </remove-on-release>\n    get predecessors() {\n        return Array.from(this.incomingDeps || []);\n    }\n\n    set predecessors(predecessors) {\n        this.incomingDeps = predecessors;\n    }\n\n    setPredecessors(predecessors) {\n        return this.replaceDependencies(predecessors, false);\n    }\n\n    get assignments() {\n        return super.assignments;\n    }\n\n    set assignments(assignments) {\n        const\n            me                  = this,\n            { assignmentStore } = me.project,\n            toAdd               = [],\n            currentAssignments  = me.assignments,\n            removedAssignments  = currentAssignments.filter(current => !assignments?.find(newAss => newAss.resource === current.resource));\n\n        assignments.forEach(assignment => {\n            const currentAssignment = assignmentStore.getAssignmentForEventAndResource(this, assignment.resource);\n\n            if (currentAssignment) {\n                currentAssignment.copyData(assignment);\n            }\n            // New one\n            else {\n                assignment.remove();\n                toAdd.push(assignment);\n            }\n        });\n\n        assignmentStore.remove(removedAssignments);\n        assignmentStore.add(toAdd);\n    }\n\n    get assigned() {\n        const { project } = this;\n\n        // Figure assignments out before buckets are created  (if part of project)\n        if (project?.isDelayingCalculation) {\n            return project.assignmentStore.storage.findItem('event', this) ?? new Set();\n        }\n\n        return super.assigned;\n    }\n\n    set assigned(assigned) {\n        super.assigned = assigned;\n    }\n\n    //region Is\n\n    get isDraggable() {\n        return this.draggable;\n    }\n\n    get isResizable() {\n        return this.resizable && !this.milestone && this.isEditable('endDate');\n    }\n\n    // override `isMilestone` on TimeSpan model and make it to return the same value what `milestone` returns\n    get isMilestone() {\n        return this.milestone;\n    }\n\n    /**\n     * Defines if the given task field should be manually editable in UI.\n     * You can override this method to provide your own logic.\n     *\n     * By default, the method defines:\n     * - {@link #field-earlyStartDate}, {@link #field-earlyEndDate}, {@link #field-lateStartDate},\n     * {@link #field-lateEndDate}, {@link #field-totalSlack} as not editable;\n     * - {@link #field-effort}, {@link #property-fullEffort}, {@link #field-percentDone} as not editable for summary\n     *   tasks;\n     * - {@link #field-endDate}, {@link #field-duration} and {@link #field-fullDuration} fields\n     *   as not editable for summary tasks except the {@link #field-manuallyScheduled manually scheduled} ones.\n     *\n     * @param {String} fieldName Name of the field\n     * @returns {Boolean} Returns `true` if the field is editable, `false` if it is not and `undefined` if the task has\n     * no such field.\n     */\n    isEditable(fieldName) {\n        switch (fieldName) {\n            // r/o fields\n            case 'earlyStartDate':\n            case 'earlyEndDate':\n            case 'lateStartDate':\n            case 'lateEndDate':\n            case 'totalSlack':\n                return false;\n\n            // disable effort & percentDone editing for summary tasks\n            case 'effort' :\n            case 'fullEffort' :\n            case 'percentDone' :\n            case 'renderedPercentDone' :\n                return this.isLeaf;\n\n            // end/duration is allowed to edit for leafs and manually scheduled summaries\n            case 'endDate' :\n            case 'duration' :\n            case 'fullDuration' :\n                return this.isLeaf || this.manuallyScheduled;\n        }\n\n        return super.isEditable(fieldName);\n    }\n\n    isFieldModified(fieldName) {\n        if (fieldName === 'fullEffort') {\n            return super.isFieldModified('effort') || super.isFieldModified('effortUnit');\n        }\n        return super.isFieldModified(fieldName);\n    }\n\n    //endregion\n\n    //region Milestone\n\n    get milestone() {\n        // a summary task may have zero duration due to working time periods mismatch w/ its children\n        // so we operate start and end date pair here\n        if (!this.isLeaf) {\n            const { startDate, endDate } = this;\n\n            if (startDate && endDate) {\n                return endDate.getTime() === startDate.getTime();\n            }\n        }\n\n        return this.duration === 0;\n    }\n\n    set milestone(value) {\n        value ? this.convertToMilestone() : this.convertToRegular();\n    }\n\n    async setMilestone(value) {\n        return value ? this.convertToMilestone() : this.convertToRegular();\n    }\n\n    /**\n     * Converts this task to a milestone (start date will match the end date).\n     * @propagating\n     */\n    async convertToMilestone() {\n        return this.setDuration(0, this.durationUnit, false);\n    }\n\n    /**\n     * Converts the milestone task to a regular task with a duration of 1 (keeping current {@link #field-durationUnit}).\n     * @propagating\n     */\n    async convertToRegular() {\n        if (this.milestone) {\n            return this.setDuration(1, this.durationUnit, false);\n        }\n    }\n\n    //endregion\n\n    //region Dependencies\n\n    /**\n     * Returns all dependencies of this task (both incoming and outgoing)\n     *\n     * @property {Gantt.model.DependencyModel[]}\n     */\n    get allDependencies() {\n        return this.dependencies;\n    }\n\n    get dependencies() {\n        // Don't crash when calculations are delayed to after refresh (?. since it might be used outside of project)\n        if (this.project?.isDelayingCalculation) {\n            return [];\n        }\n\n        return [...this.incomingDeps || [], ...this.outgoingDeps || []];\n    }\n\n    set dependencies(dependencies) {\n        const\n            me           = this,\n            predecessors = [],\n            successors   = [];\n\n        dependencies?.forEach(dependency => {\n            if (dependency.fromEvent === me || dependency.fromEvent === me.id) {\n                successors.push(dependency);\n            }\n            else if (dependency.toEvent === me || dependency.toEvent === me.id) {\n                predecessors.push(dependency);\n            }\n        });\n\n        me.setPredecessors(predecessors);\n        me.setSuccessors(successors);\n    }\n\n    /**\n     * Returns all predecessor tasks of a task\n     *\n     * @property {Gantt.model.TaskModel[]}\n     */\n    get predecessorTasks() {\n        return [...this.incomingDeps || []].map(dependency => dependency.fromEvent);\n    }\n\n    /**\n     * Returns all successor tasks of a task\n     *\n     * @readonly\n     * @property {Gantt.model.TaskModel[]}\n     */\n    get successorTasks() {\n        return [...this.outgoingDeps || []].map(dependency => dependency.toEvent);\n    }\n\n    //endregion\n\n    //region Calculated fields\n\n    /**\n     * Returns count of all sibling nodes (including their children).\n     * @property {Number}\n     */\n    get previousSiblingsTotalCount() {\n        let task  = this.previousSibling,\n            count = this.parentIndex;\n\n        while (task) {\n            count += task.descendantCount;\n            task = task.previousSibling;\n        }\n\n        return count;\n    }\n\n    /**\n     * Returns the sequential number of the task. A sequential number means the ordinal position of the task in the\n     * total dataset, regardless of its nesting level and collapse/expand state of any parent tasks. The root node has a\n     * sequential number equal to 0.\n     *\n     * For example, in the following tree data sample sequential numbers are specified in the comments:\n     * ```javascript\n     * root : {\n     *     children : [\n     *         {   // 1\n     *             leaf : true\n     *         },\n     *         {       // 2\n     *             children : [\n     *                 {   // 3\n     *                     children : [\n     *                         {   // 4\n     *                             leaf : true\n     *                         },\n     *                         {   // 5\n     *                             leaf : true\n     *                         }\n     *                     ]\n     *                 }]\n     *         },\n     *         {   // 6\n     *             leaf : true\n     *         }\n     *     ]\n     * }\n     * ```\n     * If we collapse parent tasks, sequential number of collapsed tasks won't change.\n     *\n     * @property {Number}\n     */\n    get sequenceNumber() {\n        // Shortcut when part of a store, much cheaper\n        if (this.taskStore) {\n            return this.taskStore.allIndexOf(this) + 1;\n        }\n\n        // More expensive calculation when not part of a store, to please tests\n        let code = 0,\n            task = this;\n\n        while (task.parent) {\n            code += task.previousSiblingsTotalCount + 1;\n            task = task.parent;\n        }\n\n        return code;\n    }\n\n    //endregion\n\n    //region Project related methods\n\n    get isSubProject() {\n        return false;\n    }\n\n    // <remove-on-release>\n    // TODO: cache project\n    // /**\n    //  * Returns the {@link Gantt.model.SubProjectModel project} instance, associated with this task if this task belongs to a project\n    //  *\n    //  * @private\n    //  * @internal\n    //  * @returns {Gantt.model.SubProjectModel} project\n    //  */\n    // </remove-on-release>\n    get subProject() {\n        const me = this;\n\n        let project = null;\n\n        // <remove-on-release>\n        // TODO: implement is project\n        // </remove-on-release>\n        if (me.isProject) {\n            project = me;\n        }\n        else {\n            me.bubbleWhile(t => {\n                if (t.isProject) {\n                    project = t;\n                }\n\n                return !project;\n            });\n        }\n\n        return project;\n    }\n\n    //endregion\n\n    /**\n     * Property which encapsulates the effort's magnitude and units.\n     *\n     *\n     * UI fields representing this property are disabled for summary events.\n     * See {@link #function-isEditable} for details.\n     *\n     * @property {Core.data.Duration}\n     */\n    get fullEffort() {\n        return new Duration({\n            unit      : this.effortUnit,\n            magnitude : this.effort\n        });\n    }\n\n    set fullEffort(effort) {\n        this.setEffort(effort.magnitude, effort.unit);\n    }\n\n    //region Scheduler Pro compatibility\n\n    /**\n     * Returns all resources assigned to an event.\n     *\n     * @property {Gantt.model.ResourceModel[]}\n     * @readonly\n     */\n    get resources() {\n        // Only include valid resources, to not have nulls in the result\n        return this.assignments.reduce((resources, assignment) => {\n            assignment.resource && resources.push(assignment.resource);\n            return resources;\n        }, []);\n    }\n\n    // Resources + any links to any of them\n    get $linkedResources() {\n        return this.resources?.flatMap(resourceRecord => ([\n            resourceRecord,\n            ...resourceRecord.$links\n        ])) ?? [];\n    }\n\n    //endregion\n\n    /**\n     * A `Set<Gantt.model.DependencyModel>` of the outgoing dependencies for this task\n     * @member {Set} outgoingDeps\n     * @readonly\n     */\n\n    /**\n     * A `Set<Gantt.model.DependencyModel>` of the incoming dependencies for this task\n     * @member {Set} incomingDeps\n     * @readonly\n     */\n\n    /**\n     * An array of the assignments, related to this task\n     * @member {Gantt.model.AssignmentModel[]} assignments\n     * @readonly\n     */\n\n    /**\n     * If given resource is assigned to this task, returns a {@link Gantt.model.AssignmentModel} record.\n     * Otherwise returns `null`\n     *\n     * @method getAssignmentFor\n     * @param {Gantt.model.ResourceModel} resource The instance of {@link Gantt.model.ResourceModel}\n     *\n     * @returns {Gantt.model.AssignmentModel|null}\n     */\n\n    /**\n     * This method assigns a resource to this task.\n     *\n     * Will cause the schedule to be updated - returns a `Promise`\n     *\n     * @method assign\n     * @param {Gantt.model.ResourceModel} resource The instance of {@link Gantt.model.ResourceModel}\n     * @param {Number} [units=100] The `units` field of the new assignment\n     *\n     * @async\n     * @propagating\n     */\n\n    /**\n     * This method unassigns a resource from this task.\n     *\n     * Will cause the schedule to be updated - returns a `Promise`\n     *\n     * @method unassign\n     * @param {Gantt.model.ResourceModel} resource The instance of {@link Gantt.model.ResourceModel}\n     * @async\n     * @propagating\n     */\n\n    /**\n     * Sets the calendar of the task. Will cause the schedule to be updated - returns a `Promise`\n     *\n     * @method setCalendar\n     * @param {Gantt.model.CalendarModel} calendar The new calendar. Provide `null` to return back to the project calendar.\n     * @async\n     * @propagating\n     */\n\n    /**\n     * Returns the task calendar.\n     *\n     * @method getCalendar\n     * @returns {Gantt.model.CalendarModel} The task calendar.\n     */\n\n    /**\n     * Sets the start date of the task. Will cause the schedule to be updated - returns a `Promise`\n     *\n     * Note, that the actually set start date may be adjusted, according to the calendar, by skipping the non-working time forward.\n     *\n     * @method setStartDate\n     * @param {Date} date The new start date.\n     * @param {Boolean} [keepDuration=true] Whether to keep the duration (and update the end date), while changing the start date, or vice-versa.\n     * @async\n     * @propagating\n     */\n\n    /**\n     * Sets the end date of the task. Will cause the schedule to be updated - returns a `Promise`\n     *\n     * Note, that the actually set end date may be adjusted, according to the calendar, by skipping the non-working time backward.\n     *\n     * @method setEndDate\n     * @param {Date} date The new end date.\n     * @param {Boolean} [keepDuration=false] Whether to keep the duration (and update the start date), while changing the end date, or vice-versa.\n     * @async\n     * @propagating\n     */\n\n    /**\n     * Updates the duration (and optionally unit) of the task. Will cause the schedule to be updated - returns a `Promise`\n     *\n     * @method setDuration\n     * @param {Number} duration New duration value\n     * @param {'millisecond'|'second'|'minute'|'hour'|'day'|'week'|'month'|'quarter'|'year'} [unit] New duration\n     * unit\n     * @async\n     * @propagating\n     */\n\n    /**\n     * Updates the effort (and optionally unit) of the task. Will cause the schedule to be updated - returns a `Promise`\n     *\n     * @method setEffort\n     * @param {Number} effort New effort value\n     * @param {'millisecond'|'second'|'minute'|'hour'|'day'|'week'|'month'|'quarter'|'year'} [unit] New effort\n     * unit\n     * @async\n     * @propagating\n     */\n\n    /**\n     * Sets the constraint type and (optionally) constraining date to the task.\n     *\n     * @method setConstraint\n     * @param {'finishnoearlierthan'|'finishnolaterthan'|'mustfinishon'|'muststarton'|'startnoearlierthan'|'startnolaterthan'|null} constraintType\n     * Constraint type, please refer to the {@link Gantt.model.TaskModel#field-constraintType} for the valid values.\n     * @param {Date}   [constraintDate] Constraint date.\n     * @async\n     * @propagating\n     */\n\n    //region Normalization\n\n    normalize() {\n        // Do nothing, normalization now happens as part of initial propagate and should use calendar anyway\n    }\n\n    inSetNormalize(field) {\n        // Do nothing, normalization now happens as part of initial propagate and should use calendar anyway\n    }\n\n    /**\n     * Not (yet) supported by the underlying scheduling engine\n     * @function setStartEndDate\n     * @hide\n     * @param {Date} start The new start date\n     * @param {Date} end The new end date\n     */\n\n    //endregion\n\n    joinStore(store) {\n        const\n            me             = this,\n            useOrderedTree = (me.firstStore || store).useOrderedTreeForWbs;\n\n        if (!me.wbsValue && !me.generatedParent) {\n            if (me.taskStore?.isLoadingData || !(me.nextSibling?.wbsValue || me.previousSibling?.wbsValue)) {\n                // If we are being loaded or have no siblings, then we can just process this node and its children.\n                me.refreshWbs({ useOrderedTree, ...refreshWbsOnJoinOptions });\n            }\n            else {\n                // Otherwise, we need to also refresh this node's siblings. Since we only come here if we have a\n                // sibling, we can be sure we also have a parent.\n                me.parent.refreshWbs(refreshWbsOptions, -1);\n            }\n        }\n\n        super.joinStore(store);\n    }\n\n    /**\n     * Refreshes the {@link #field-wbsValue} of this record and its children. This is rarely needed but may be required\n     * after a complex series of filtering, inserting, or removing nodes. In particular, removing nodes does create a\n     * gap in `wbsValue` values that may be undesirable.\n     * @param {Object} [options] A set of options for refreshing.\n     * @param {Boolean} [options.deep=true] Pass `false` to not update the `wbsValue` of this node's children.\n     * @param {Boolean} [options.silent=false] Pass `true` to update the `wbsValue` silently (no events). This is done\n     * at load time since this value represents the clean state. Passing `true` also has the effect of not marking the\n     * change as a dirty state on the record, in the case where `wbsValue` has been flagged as `persist: true`.\n     * @param {Boolean} [options.useOrderedTree=false] Pass `true` to use ordered tree to calculate WBS index.\n     * @param {Number} [index] The index of this node in its parent's children array. Pass -1 to ignore this node's\n     * `wbsValue` and only operate on children (if `options.deep`).\n     */\n    refreshWbs(options, index) {\n        const\n            me         = this,\n            { parent } = me,\n            taskStore  = me.firstStore || null,\n            {\n                useOrderedTree = taskStore?.useOrderedTreeForWbs ?? false\n            }          = options || {};\n\n        if (parent && index !== -1 && me.fieldMap.wbsValue) {\n            if (useOrderedTree) {\n                index = me.orderedParentIndex;\n            }\n            else {\n                index = index ?? me.unfilteredIndex ?? me.parentIndex;\n            }\n\n            index++;\n\n            const wbs = parent.isRoot ? new Wbs(index) : parent.wbsValue.append(index);\n\n            me.set('wbsValue', wbs, options?.silent);\n        }\n\n        if (options?.deep ?? true) {\n            if (useOrderedTree) {\n                for (const child of me.orderedChildren ?? []) {\n                    child.refreshWbs(options);\n                }\n            }\n            else {\n                const\n                    children = me.unfilteredChildren ?? me.children,\n                    n        = children?.length || 0;\n\n                if (n) {\n                    // The array may be reversed, and if it is, then the sorter has been applied and we need to reverse\n                    // the WBS assignment to match\n                    const reverse = isReversed(children) && taskStore?.sorters?.findIndex(descendingWbsSorter) === 0;\n\n                    for (let i = 0; i < n; ++i) {\n                        children[i].refreshWbs(options, reverse ? n - i - 1 : i);\n                    }\n                }\n            }\n        }\n    }\n\n    async tryInsertChild() {\n        return this.getProject().tryPropagateWithChanges(() => {\n            this.insertChild(...arguments);\n        });\n    }\n\n    updateDependencies(startDate, endDate) {\n        this.outgoingDeps.forEach(dep => {\n            // filter out wrong\n            if (dep.toEvent.isScheduled) {\n                const {\n                    type,\n                    calendar,\n                    toEvent\n                } = dep;\n\n                // Calculate lag value for the outgoing dependency to keep successor in place. Lag should be\n                // calculated for future start/end dates and should skip non-working time\n                if (startDate) {\n                    if (type === DependencyBaseModel.Type.StartToStart) {\n                        dep.setLag(DateHelper.as('hour', calendar.calculateDurationMs(startDate, toEvent.startDate, true)), 'hour');\n                    }\n                    else if (type === DependencyBaseModel.Type.StartToEnd) {\n                        dep.setLag(DateHelper.as('hour', calendar.calculateDurationMs(startDate, toEvent.endDate, true)), 'hour');\n                    }\n                }\n\n                if (endDate) {\n                    if (type === DependencyBaseModel.Type.EndToStart) {\n                        dep.setLag(DateHelper.as('hour', calendar.calculateDurationMs(endDate, toEvent.startDate, true)), 'hour');\n                    }\n                    else if (type === DependencyBaseModel.Type.EndToEnd) {\n                        dep.setLag(DateHelper.as('hour', calendar.calculateDurationMs(endDate, toEvent.endDate, true)), 'hour');\n                    }\n                }\n            }\n        });\n    }\n\n    async moveTaskPinningSuccessors(date) {\n        const me = this;\n\n        // set start date, this will put new values to the engine and would allow to recalculate dates before\n        // project is committed\n        me.startDate = date;\n\n        // Go up the tree processing outgoing dependencies for this task and all its parents\n        me.bubble(node => {\n            if (!node.isRoot) {\n                const\n                    // Peek new start/end dates\n                    startDate = node.run('calculateStartDate'),\n                    endDate   = node.run('calculateEndDate');\n\n                node.updateDependencies(startDate, endDate);\n            }\n        });\n\n        return me.project.commitAsync();\n    }\n\n    async setStartDatePinningSuccessors(date) {\n        const\n            me      = this,\n            promise = me.setStartDate(date, false);\n\n        // Go up the tree processing outgoing dependencies for this task and all its parents\n        me.bubble(node => {\n            if (!node.isRoot) {\n                // Peek new end date\n                const startDate = node.run('calculateStartDate');\n\n                node.updateDependencies(startDate, null);\n            }\n        });\n\n        return promise;\n    }\n\n    async setEndDatePinningSuccessors(date) {\n        const me = this;\n\n        me.endDate = date;\n\n        // Go up the tree processing outgoing dependencies for this task and all its parents\n        me.bubble(node => {\n            if (!node.isRoot) {\n                // Peek new end date\n                const endDate = node.run('calculateEndDate');\n\n                node.updateDependencies(null, endDate);\n            }\n        });\n\n        return me.project.commitAsync();\n    }\n\n    getCurrentConfig(options) {\n        const\n            { segments } = this,\n            result       = super.getCurrentConfig(options);\n\n        // include segments\n        if (result && segments) {\n            result.segments = segments.map(segment => segment.getCurrentConfig(options));\n        }\n\n        return result;\n    }\n}\n\nTaskModel.convertEmptyParentToLeaf = true;\n\n// TaskModel.$meta.fields.map.wbsCode.defineAccessor(TaskModel.prototype, /* force = */true);\n", "import AjaxStore from '../../Core/data/AjaxStore.js';\nimport TaskModel from '../model/TaskModel.js';\nimport { ChronoEventTreeStoreMixin } from '../../Engine/quark/store/ChronoEventStoreMixin.js';\nimport PartOfProject from './mixin/PartOfProject.js';\nimport GetEventsMixin from '../../Scheduler/data/mixin/GetEventsMixin.js'; // To allow using TaskStore in Pro & Calendar\nimport DayIndexMixin from '../../Scheduler/data/mixin/DayIndexMixin.js'; // To allow using TaskStore in Calendar\nimport DateHelper from '../../Core/helper/DateHelper.js';\nimport ObjectHelper from '../../Core/helper/ObjectHelper.js';\nimport Wbs from '../../Core/data/Wbs.js';\n\n/**\n * @module Gantt/data/TaskStore\n */\n\nconst\n    refreshWbsForChildrenOptions = { deep : true },\n    wbsAuto                      = Object.freeze({\n        add    : true,\n        remove : true,\n        sort   : true\n    }),\n    wbsManual                    = Object.freeze({\n        add    : false,\n        remove : false,\n        sort   : false\n    });\n\n/**\n * An object that describes the actions that should trigger a {@link Gantt.model.TaskModel#function-refreshWbs} to\n * update WBS values. Objects of this type are passed to {@link #config-wbsMode} when the simpler\n * values of `'auto'` or (the default) `'manual'` are not desired.\n *\n * The value `'auto'` is equivalent to all properties of this object being `true`.\n * The value `'manual'` is equivalent to all properties of this object being `false`.\n *\n * @typedef WbsMode\n * @property {Boolean} [add] Set this property to `true` to refresh WBS values when nodes are added.\n * @property {Boolean} [remove] Set this property to `true` to refresh WBS values when nodes are removed.\n * @property {Boolean} [sort] Set this property to `true` to refresh WBS values when nodes are sorted.\n */\n\n/**\n * A class representing the tree of tasks in the Gantt project. An individual task is represented as an instance of the\n * {@link Gantt.model.TaskModel} class. The store expects the data loaded to be hierarchical. Each parent node should\n * contain its children in a property called 'children'.\n *\n * ```javascript\n * const taskStore = new TaskStore({\n *     data : [\n *         {\n *             \"id\"           : 1000,\n *             \"name\"         : \"Cool project\",\n *             \"percentDone\"  : 50,\n *             \"startDate\"    : \"2019-01-02\",\n *             \"expanded\"     : true,\n *             \"children\"     : [\n *                 {\n *                     \"id\"           : 1,\n *                     \"name\"         : \"A leaf node\",\n *                     \"startDate\"    : \"2019-01-02\",\n *                     \"percentDone\"  : 50,\n *                     \"duration\"     : 10,\n *                 }\n *             ]\n *         }\n *     ]\n * });\n * ```\n *\n * @mixes Scheduler/data/mixin/GetEventsMixin\n * @extends Core/data/AjaxStore\n */\nexport default class TaskStore extends ChronoEventTreeStoreMixin.derive(AjaxStore).mixin(\n    PartOfProject,\n    DayIndexMixin,\n    GetEventsMixin\n) {\n\n    static $name = 'TaskStore';\n\n    static get defaultConfig() {\n        return {\n            modelClass : TaskModel,\n\n            /**\n             * CrudManager must load stores in the correct order. Lowest first.\n             * @config {Number}\n             * @private\n             */\n            loadPriority : 200,\n\n            /**\n             * CrudManager must sync stores in the correct order. Lowest first.\n             * @config {Number}\n             * @private\n             */\n            syncPriority : 300,\n\n            storeId : 'tasks',\n\n            tree : true\n        };\n    }\n\n    static get configurable() {\n        return {\n            /**\n             * Set to `'auto'` to automatically update {@link Gantt.model.TaskModel#field-wbsValue} as records in the\n             * store are manipulated (e.g., when the user performs drag-and-drop reordering).\n             *\n             * In manual mode, the WBS value is initialized as the store loads and only altered implicitly by the\n             * {@link #function-indent} and {@link #function-outdent} methods. The WBS values are otherwise updated only\n             * by an explicit call to {@link Gantt.model.TaskModel#function-refreshWbs}.\n             *\n             * This can also be a {@link #typedef-WbsMode} object that indicates what operations\n             * should automatically {@link Gantt.model.TaskModel#function-refreshWbs refresh} WBS values.\n             *\n             * The operations that trigger WBS refresh can be enabled explicitly in this object, for example:\n             *\n             * ```javascript\n             *  wbsMode : {\n             *      add : true,\n             *      remove : true\n             *  }\n             * ```\n             * The above is an opt-in list that enable auto WBS refresh for node add and remove operations (these two\n             * operations are associated with dragging to reorder items). No other operation will trigger WBS refresh.\n             * At present, this leaves out only the `sort` operation, but if new auto-refreshing operations were added\n             * in future releases, those would also not be included.\n             *\n             * Alternatively, this object can be an opt-out specification if all values are falsy:\n             *\n             * ```javascript\n             *  wbsMode : {\n             *      sort : false\n             *  }\n             * ```\n             * The above two examples are (currently) equivalent in outcome. The choice between opt-in or opt-out form\n             * is a matter of convenience as well as future-proofing preference.\n             *\n             * The value `'auto'` is equivalent to all properties being `true`.\n             * The value `'manual'` (the default) is equivalent to all properties being `false`.\n             * @config {String|WbsMode}\n             */\n            wbsMode : 'manual',\n\n            /**\n             * Specifies which tree to use to calculate WBS. Ordered tree is unsortable and unfilterable, it\n             * always holds complete tree hierarchy. By default, it uses sortable and filterable tree.\n             * @config {Boolean}\n             * @default\n             */\n            useOrderedTreeForWbs : false,\n\n            /**\n             * Controls behavior of the outdent logic regarding siblings. By default, outdent will move child to be\n             * its parent's sibling and will move all previous siblings to the outdented node's children. Visually, node\n             * will remain in place just changing the level. When set to `true` only node with its subtree will be\n             * outdented, siblings will not change parent. Visually, node will be moved as last child of the new parent.\n             * @config {Boolean}\n             * @default\n             */\n            outdentIgnoringSiblings : false\n        };\n    }\n\n    changeWbsMode(value) {\n        if (value === 'auto') {\n            return wbsAuto;\n        }\n\n        if (value && typeof value === 'object') {\n            if (ObjectHelper.values(value).every(v => !v)) {   // if (an opt-out list)\n                value = ObjectHelper.assign({}, wbsAuto, value);\n            }\n\n            return value;\n        }\n\n        return wbsManual;\n    }\n\n    /**\n     * For each task in this TaskStore, sets the data in the passed baseline index to the current state of the task.\n     * @param {Number} index The index in the baselines list of the baseline to update.\n     */\n    setBaseline(index) {\n        const data = this.storage.values;\n\n        this.forEach(task => task.setBaseline(index));\n        this.trigger('refresh', {\n            action  : 'batch',\n            records : data,\n            data\n        });\n    }\n\n    /**\n     * Increase the indentation level of one or more tasks in the tree\n     * @param {Gantt.model.TaskModel|Gantt.model.TaskModel[]} nodes The nodes to indent.\n     * @returns {Promise} A promise which yields the result of the operation\n     * @fires indent\n     * @fires change\n     */\n    async indent(nodes) {\n        const\n            me                     = this,\n            { taskStore, project } = me;\n\n        let result = false;\n\n        nodes = Array.isArray(nodes) ? nodes.slice() : [nodes];\n\n        // 1. Filter out project nodes\n        nodes = nodes.filter(node => !node.isProjectModel);\n\n        // 2. Filtering out all nodes which parents are also to be indented as well as the ones having no previous\n        //    sibling since such nodes can't be indented\n        nodes = nodes.filter(node => {\n            let result;\n\n            result = Boolean(node.previousSibling);\n\n            while (result && !node.isRoot) {\n                result = !nodes.includes(node.parent);\n                node   = node.parent;\n            }\n\n            return result;\n        });\n\n        /**\n         * Fired before tasks in the tree are indented. Return `false` from a listener to prevent the indent.\n         * @event beforeIndent\n         * @preventable\n         * @param {Gantt.data.TaskStore} source The task store\n         * @param {Gantt.model.TaskModel[]} records Tasks to be indented\n         */\n        if (nodes.length && taskStore.trigger('beforeIndent', { records : nodes }) !== false) {\n            // 3. Sorting nodes into tree walk order\n            nodes.sort((lhs, rhs) => Wbs.compare(lhs.wbsCode, rhs.wbsCode));\n\n            // No events should go to the UI until we have finished the operation successfully\n            taskStore.beginBatch();\n\n            // Ask the project to try the indent operation\n            result = await project.tryPropagateWithChanges(() => {\n                for (const node of nodes) {\n                    const newParent = node.previousSibling;\n                    newParent.appendChild(node);\n                    me.toggleCollapse(newParent, false);\n                }\n            });\n\n            if (me.isDestroyed) {\n                return;\n            }\n\n            // Now show the successful result\n            taskStore.endBatch();\n\n            if (result) {\n                me.refreshWbsForChildren({\n                    up : 2,  // the nodes are now deeper but that move affects their grandparent node's WBS\n                    nodes\n                });\n\n                /**\n                 * Fired after tasks in the tree are indented\n                 * @event indent\n                 * @param {Gantt.data.TaskStore} source The task store\n                 * @param {Gantt.model.TaskModel[]} records Tasks that were indented\n                 */\n                me.trigger('indent', { records : nodes });\n                me.trigger('change', {\n                    action  : 'indent',\n                    records : nodes\n                });\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Decrease the indentation level of one or more tasks in the tree\n     * @param {Gantt.model.TaskModel|Gantt.model.TaskModel[]} nodes The nodes to outdent.\n     * @returns {Promise} A promise which yields the result of the operation\n     * @fires outdent\n     * @fires change\n     */\n    async outdent(nodes) {\n        const\n            me                     = this,\n            { taskStore, project } = me;\n\n        let result = false;\n\n        nodes = Array.isArray(nodes) ? nodes.slice() : [nodes];\n\n        // 1. Filter out project nodes\n        nodes = nodes.filter(node => !node.isProjectModel);\n\n        // 2. Filtering out all nodes which parents are also to be outdented as well as the ones having no previous sibling\n        //    since such nodes can't be indented\n        nodes = nodes.filter(node => {\n            let result;\n\n            result = node.parent && !node.parent.isRoot;\n\n            while (result && !node.isRoot) {\n                result = !nodes.includes(node.parent);\n                node   = node.parent;\n            }\n\n            return result;\n        });\n\n        /**\n         * Fired before tasks in the tree are outdented. Return `false` from a listener to prevent the outdent.\n         * @event beforeOutdent\n         * @preventable\n         * @param {Gantt.data.TaskStore} source The task store\n         * @param {Gantt.model.TaskModel[]} records Tasks to be outdented\n         */\n        if (nodes.length && taskStore.trigger('beforeOutdent', { records : nodes }) !== false) {\n            // 3. Sorting nodes into reverse tree walk order\n            nodes.sort((lhs, rhs) => Wbs.compare(rhs.wbsCode, lhs.wbsCode));\n\n            // No events should go to the UI until we have finished the operation successfully\n            taskStore.beginBatch();\n\n            result = await project.tryPropagateWithChanges(() => {\n                for (const node of nodes) {\n                    const newChildren = !this.outdentIgnoringSiblings && node.parent.children.slice(node.parent.children.indexOf(node) + 1);\n\n                    node.parent.parent.insertChild(node, node.parent.nextSibling, false, {\n                        orderedBeforeNode : node.parent.nextOrderedSibling\n                    });\n\n                    // https://github.com/bryntum/support/issues/5721\n                    // it seems appending empty array is recorded by stm but can not be correctly restored\n                    // should be fixed in stm of course, but just avoiding this call (as its a no-op anyway)\n                    // is much simpler fix\n                    newChildren.length && node.appendChild(newChildren);\n                    me.toggleCollapse(node, false);\n                }\n            });\n\n            if (me.isDestroyed) {\n                return;\n            }\n\n            taskStore.endBatch();\n\n            if (result) {\n                me.refreshWbsForChildren({\n                    up : 1,  // only need to update the (new) parent\n                    nodes\n                });\n\n                /**\n                 * Fired after tasks in the tree are outdented\n                 * @event outdent\n                 * @param {Gantt.data.TaskStore} source The task store\n                 * @param {Gantt.model.TaskModel[]} records Tasks that were outdented\n                 */\n                me.trigger('outdent', { records : nodes });\n                me.trigger('change', {\n                    action  : 'outdent',\n                    records : nodes\n                });\n            }\n        }\n\n        return result;\n    }\n\n    onNodeAddChild(parent, children, index, isMove, silent = false) {\n        super.onNodeAddChild(parent, children, index, isMove, silent);\n\n        if (!this.isLoadingData && this.wbsMode.add) {\n            parent.refreshWbs(refreshWbsForChildrenOptions);\n\n            // Trigger refresh of old & new parent children for moved nodes, if needed\n            const wbsRefreshed = new Set();\n            children.forEach(child => {\n                const oldParent = this.getById(child.meta.oldParentId);\n                if (oldParent && parent !== oldParent && !wbsRefreshed.has(oldParent)) {\n                    wbsRefreshed.add(oldParent);\n                    oldParent.refreshWbs(refreshWbsForChildrenOptions, -1);\n                }\n            });\n        }\n    }\n\n    onNodeRemoveChild(parent, children, index, flags = { isMove : false, silent : false, unfiltered : false }) {\n        const result = super.onNodeRemoveChild(parent, children, index, flags);\n\n        if (this.wbsMode.remove && !flags.isMove) {\n            parent.refreshWbs(refreshWbsForChildrenOptions);\n        }\n\n        return result;\n    }\n\n    afterChangesetApplied(modifiedParents) {\n        super.afterChangesetApplied(modifiedParents);\n\n        modifiedParents.forEach(record => {\n            record.refreshWbs({ deep : true, useOrderedTree : true });\n        });\n    }\n\n    afterPerformSort(silent) {\n        if (this.wbsMode.sort) {\n            this.rootNode.refreshWbs(refreshWbsForChildrenOptions);\n        }\n\n        super.afterPerformSort(silent);\n    }\n\n    /**\n     * This method updates the WBS values due to changes in the indentation of a given set of child nodes.\n     * @param {Object} options An object containing options in addition to a `nodes` property with the children.\n     * @param {Gantt.model.TaskModel[]} options.nodes The array of child record to refresh. This is required.\n     * @param {Boolean} [options.silent=false] Pass `true` to update the `wbsValue` silently (no events).\n     * @param {Number} [options.up=1] The number of ancestors to ascend when determining the parent(s) to refresh.\n     * By default, this value is 1 which indicates the immediate parent of the supplied nodes. This is suitable for\n     * outdenting. For indenting, this value should be 2. This is because the previous parent node (now grandparent\n     * node) needs to be refreshed, not merely the new parent.\n     * @private\n     */\n    refreshWbsForChildren(options) {\n        const\n            nodes   = options.nodes,\n            opts    = { ...refreshWbsForChildrenOptions, ...options },\n            parents = new Set(),\n            up      = opts.up || 0;\n\n        let n, parent;\n\n        nodes.forEach(node => {\n            for (parent = node, n = up; parent && n; --n) {\n                parent = parent.parent;\n            }\n\n            parents.add(parent);\n        });\n\n        for (parent of parents) {\n            parent.refreshWbs(opts);\n        }\n    }\n\n    getTotalTimeSpan() {\n        return {\n            startDate : this.getProject().startDate,\n            endDate   : this.getProject().endDate\n        };\n    }\n\n    getEventsForResource(resourceId) {\n        const\n            resource    = this.resourceStore.getById(resourceId),\n            assignments = resource?.assignments.filter(assignment => assignment.isPartOfStore(this.assignmentStore)) || [],\n            events      = [];\n\n        assignments.forEach(({ event }) => event && events.push(event));\n\n        return events;\n    }\n\n    /**\n     * Checks if a date range is allocated or not for a given resource.\n     * @param {Date} start The start date\n     * @param {Date} end The end date\n     * @param {Scheduler.model.EventModel|null} excludeEvent An event to exclude from the check (or null)\n     * @param {Scheduler.model.ResourceModel} resource The resource\n     * @returns {Boolean} True if the timespan is available for the resource\n     * @category Resource\n     */\n    isDateRangeAvailable(start, end, excludeEvent, resource) {\n        // NOTE: Also exists in EventStoreMixin.js\n\n        // This should be a collection of unique event records\n        const allEvents = new Set(this.getEventsForResource(resource));\n\n        // In private mode we can pass an AssignmentModel. In this case, we assume that multi-assignment is used.\n        // So we need to make sure that other resources are available for this time too.\n        // No matter if the event retrieved from the assignment belongs to the target resource or not.\n        // We gather all events from the resources the event is assigned to except of the one from the assignment record.\n        // Note, events from the target resource are added above.\n        if (excludeEvent?.isAssignment) {\n            const\n                currentEvent = excludeEvent.event,\n                resources    = currentEvent.resources;\n\n            resources.forEach(resource => {\n                // Ignore events for the resource which is passed as an AssignmentModel to excludeEvent\n                if (resource.id !== excludeEvent.resourceId) {\n                    this.getEventsForResource(resource).forEach(event => allEvents.add(event));\n                }\n            });\n        }\n\n        if (excludeEvent) {\n            const eventToRemove = excludeEvent.isAssignment ? excludeEvent.event : excludeEvent;\n            allEvents.delete(eventToRemove);\n        }\n\n        return !Array.from(allEvents).some(event => event.isScheduled && DateHelper.intersectSpans(start, end, event.startDate, event.endDate));\n    }\n\n    linkTasks(tasks) {\n        for (let i = 1; i < tasks.length; i++) {\n            const\n                from = tasks[i - 1],\n                to   = tasks[i];\n\n            if (!this.dependencyStore.getEventsLinkingDependency(from, to)) {\n                this.dependencyStore.add({ from, to });\n            }\n        }\n    }\n\n    unlinkTasks(tasks) {\n        this.dependencyStore.remove(this.dependencyStore.query(({ fromTask, toTask }) => tasks.includes(fromTask) || tasks.includes(toTask)));\n    }\n}\n", "import TooltipBase from '../../Scheduler/feature/base/TooltipBase.js';\nimport GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\nimport DateHelper from '../../Core/helper/DateHelper.js';\nimport StringHelper from '../../Core/helper/StringHelper.js';\n\n/**\n * @module Gantt/feature/Baselines\n */\n\nconst baselineSelector = '.b-task-baseline';\n\n/**\n * Displays a {@link Gantt.model.TaskModel task}'s {@link Gantt.model.TaskModel#field-baselines} below the tasks in the\n * timeline.\n *\n * {@inlineexample Gantt/feature/Baselines.js}\n *\n * This feature also optionally shows a tooltip when hovering any of the task's baseline elements. The\n * tooltip's content may be customized.\n *\n * <div class=\"note\">If dates (startDate and endDate) are left out in the baseline data, the task's dates will be\n * applied. If dates are `null`, they will be kept empty and the baseline bar won't be displayed in the UI.</div>\n *\n * To customize the look of baselines, you can supply `cls` or `style´ in the baseline data.\n *\n * This feature is **off** by default. For info on enabling it, see {@link Grid.view.mixin.GridFeatures}.\n *\n * @extends Scheduler/feature/base/TooltipBase\n * @demo Gantt/baselines\n * @classtype baselines\n * @feature\n */\nexport default class Baselines extends TooltipBase {\n    //region Config\n\n    static get $name() {\n        return 'Baselines';\n    }\n\n    // Default configuration.\n    static get defaultConfig() {\n        return {\n            cls         : 'b-gantt-task-tooltip',\n            align       : 't-b',\n            forSelector : baselineSelector,\n            recordType  : 'baseline'\n        };\n    }\n\n    static configurable = {\n        /**\n         * An empty function by default, but provided so that you can override it. This function is called each time\n         * a task baseline is rendered into the gantt to render the contents of the baseline element.\n         *\n         * Returning a string will display it in the baseline bar, it accepts both plain text or HTML. It is also\n         * possible to return a DOM config object which will be synced to the baseline bars content.\n         *\n         * ```javascript\n         * // using plain string\n         * new Gantt({\n         *     features : {\n         *         baselines : {\n         *             renderer : ({ baselineRecord }) => baselineRecord.startDate\n         *         }\n         *     }\n         * });\n         *\n         * // using DOM config\n         * new Gantt({\n         *     features : {\n         *         baselines : {\n         *             renderer : ({ baselineRecord }) => {\n         *                 return {\n         *                     tag : 'b',\n         *                     html : baselineRecord.startDate\n         *                 };\n         *             }\n         *         }\n         *     }\n         * });\n         * ```\n         *\n         * @param {Object} detail An object containing the information needed to render a Baseline.\n         * @param {Gantt.model.TaskModel} detail.taskRecord The task record.\n         * @param {Gantt.model.Baseline} detail.baselineRecord The baseline record.\n         * @param {DomConfig} detail.renderData An object containing details about the baseline element.\n         * @returns {DomConfig|DomConfig[]|String} A string or an DomObject config object to append to a baseline element children\n         * @prp {Function}\n         */\n        renderer : null\n    };\n\n    static get pluginConfig() {\n        return {\n            chain : [\n                // onTaskDataGenerated for populating task with baselines\n                'onTaskDataGenerated',\n                // onPaint for creating tooltip (in TooltipBase)\n                'onPaint'\n            ]\n        };\n    }\n\n    updateRenderer() {\n        this.gantt.refresh();\n    }\n\n    //endregion\n\n    //region Init & destroy\n\n    construct(gantt, config) {\n        this.tipId = `${gantt.id}-baselines-tip`;\n        this.gantt = gantt;\n\n        super.construct(gantt, config);\n    }\n\n    doDisable(disable) {\n        // Hide or show the baseline elements\n        this.client.refreshWithTransition();\n\n        super.doDisable(disable);\n    }\n\n    //endregion\n\n    //region Element & template\n\n    resolveTimeSpanRecord(forElement) {\n        const baselineElement = forElement.closest(baselineSelector);\n        return baselineElement?.elementData.baseline;\n    }\n\n    /**\n     * Template (a function accepting event data and returning a string) used to display info in the tooltip.\n     * The template will be called with an object as with fields as detailed below\n     * @config {Function}\n     * @param {Object} data A data block containing the information needed to create tooltip content.\n     * @param {Gantt.model.Baseline} data.baseline The Baseline record to display\n     * @param {Gantt.model.TaskModel} data.baseline.task The owning task of the baseline.\n     * @param {String} data.startClockHtml Predefined HTML to show the start time.\n     * @param {String} data.endClockHtml Predefined HTML to show the end time.\n     */\n    template(data) {\n        const\n            me              = this,\n            { baseline }    = data,\n            { task }        = baseline,\n            displayDuration = me.client.formatDuration(baseline.duration);\n\n        return `\n            <div class=\"b-gantt-task-title\">${StringHelper.encodeHtml(task.name)} (baseline ${baseline.parentIndex + 1})</div>\n            <table>\n            <tr><td>${me.L('L{TaskTooltip.Start}')}:</td><td>${data.startClockHtml}</td></tr>\n            ${baseline.milestone ? '' : `\n                <tr><td>${me.L('L{TaskTooltip.End}')}:</td><td>${data.endClockHtml}</td></tr>\n                <tr><td>${me.L('L{TaskTooltip.Duration}')}:</td><td class=\"b-right\">${displayDuration + ' ' + DateHelper.getLocalizedNameOfUnit(baseline.durationUnit, baseline.duration !== 1)}</td></tr>\n            `}\n            </table>\n            `;\n    }\n\n    getTaskDOMConfig(taskRecord, top) {\n        const\n            me        = this,\n            baselines = taskRecord.baselines.allRecords,\n            { rtl }   = me.client,\n            position  = rtl ? 'right' : 'left';\n\n        return {\n            className : {\n                'b-baseline-wrap' : true\n            },\n            style : {\n                transform : `translateY(${top}px)`\n            },\n            dataset : {\n                // Prefix task id to allow element reusage also for baseline wrap\n                taskId : `baselinesFor${taskRecord.id}`\n            },\n            children : baselines.map((baseline, i) => {\n                const\n                    baselineBox = me.gantt.taskRendering.getTaskBox(baseline),\n                    inset       = baselineBox ? (rtl ? me.client.timeAxisSubGrid.totalFixedWidth - baselineBox.left : baselineBox.left) : 0;\n\n                if (baselineBox) {\n                    const renderData = {\n                        className : {\n                            [baseline.cls]              : baseline.cls,\n                            'b-task-baseline'           : 1,\n                            'b-task-baseline-milestone' : baseline.milestone\n                        },\n                        style : {\n                            width      : baselineBox.width,\n                            [position] : inset,\n                            style      : baseline.style\n                        },\n                        dataset : {\n                            index : i\n                        },\n                        elementData : {\n                            baseline\n                        }\n                    };\n\n                    const value = me.renderer ? me.renderer({ baselineRecord : baseline, taskRecord, renderData }) : '';\n\n                    if (typeof value === 'string') {\n                        renderData.html = value;\n                    }\n                    else {\n                        renderData.children = [value].flat();\n                    }\n\n                    return renderData;\n                }\n                else {\n                    return null;\n                }\n            }),\n            syncOptions : {\n                syncIdField : 'index'\n            }\n        };\n    }\n\n    onTaskDataGenerated({ taskRecord, top, extraConfigs, wrapperCls }) {\n        if (!this.disabled && taskRecord.hasBaselines) {\n            wrapperCls['b-has-baselines'] = 1;\n            extraConfigs.push(this.getTaskDOMConfig(taskRecord, top));\n        }\n    }\n\n    //endregion\n}\n\nGridFeatureManager.registerFeature(Baselines, false, 'Gantt');\n", "import ObjectHelper from '../../Core/helper/ObjectHelper.js';\nimport GridCellEdit from '../../Grid/feature/CellEdit.js';\nimport GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\n\n/**\n * @module Gantt/feature/CellEdit\n */\n\n/**\n * Extends the {@link Grid.feature.CellEdit} to encapsulate Gantt functionality. This feature is enabled by <b>default</b>\n *\n * {@inlineexample Gantt/feature/CellEdit.js}\n *\n * Editing can be started by a user by double-clicking an editable cell in the gantt's data grid, or it can be started programmatically\n * by calling {@link Grid/feature/CellEdit#function-startEditing} and providing it with correct cell context.\n *\n * See {@link #function-doAddNewAtEnd}.\n *\n * ## Instant update\n * If {@link Grid.column.Column#config-instantUpdate} on the column is set to true, record will be\n * updated instantly as value in the editor is changed. In combination with\n * {@link Gantt.model.ProjectModel#config-autoSync} it could result in excessive requests to the backend.\n *\n * Instant update is enabled for these columns by default:\n * - {@link Scheduler.column.DurationColumn}\n * - {@link Gantt.column.StartDateColumn}\n * - {@link Gantt.column.EndDateColumn}\n * - {@link Gantt.column.ConstraintDateColumn}\n * - {@link Gantt.column.DeadlineDateColumn}\n * - {@link Gantt.column.EarlyStartDateColumn}\n * - {@link Gantt.column.EarlyEndDateColumn}\n * - {@link Gantt.column.LateStartDateColumn}\n * - {@link Gantt.column.LateEndDateColumn}\n *\n * To disable instant update on the column set config to false:\n *\n * ```javascript\n * new Gantt({\n *     columns: [\n *         {\n *             type: 'startdate',\n *             instantUpdate: false\n *         }\n *     ]\n * })\n * ```\n *\n * @extends Grid/feature/CellEdit\n *\n * @classtype cellEdit\n * @feature\n * @typings Grid/feature/CellEdit -> Grid/feature/GridCellEdit\n */\nexport default class CellEdit extends GridCellEdit {\n\n    static get $name() {\n        // NOTE: Even though the class name matches the one defined on the base class\n        // we need this method in order registerFeature() to work properly\n        // (it uses hasOwnProperty when detecting the class name)\n        return 'CellEdit';\n    }\n\n    // Default configuration\n    static get defaultConfig() {\n        return {\n            addNewAtEnd : {\n                duration : 1\n            }\n        };\n    }\n\n    static get pluginConfig() {\n        const cfg = super.pluginConfig;\n\n        cfg.chain = [...cfg.chain, 'onProjectChange'];\n\n        return cfg;\n    }\n\n    onProjectChange() {\n        // Cancel editing if project is changed\n        this.cancelEditing(true);\n    }\n\n    // Provide any editor with access to the current project\n    getEditorForCell({ record }) {\n        const\n            editor         = super.getEditorForCell(...arguments),\n            { inputField } = editor;\n\n        inputField.project     = record.project;\n        inputField.eventRecord = record;\n\n        return editor;\n    }\n\n    /**\n     * Adds a new, empty record at the end of the TaskStore with the initial\n     * data specified by the {@link Grid.feature.CellEdit#config-addNewAtEnd} setting.\n     *\n     * @returns {Promise} Newly added record wrapped in a promise.\n     */\n    async doAddNewAtEnd() {\n        const\n            gantt           = this.grid,\n            { addNewAtEnd, addToCurrentParent } = this,\n            { project }     = gantt;\n\n        // First finish any ongoing calculations\n        await project.commitAsync();\n\n        // Block adding after destruction (async above) or if using a \"display store\"\n        if (gantt.isDestroyed || gantt.store !== gantt.taskStore) {\n            return;\n        }\n\n        const data = ObjectHelper.assign({\n            name      : this.L('L{Gantt.New task}'),\n            startDate : project.startDate\n        }, addNewAtEnd);\n\n        let newTask;\n        if (!addToCurrentParent) {\n            newTask = gantt.taskStore.rootNode.appendChild(data);\n        }\n        else {\n            newTask = gantt.addTaskBelow(gantt.taskStore.last, { data });\n        }\n\n        await project.commitAsync();\n\n        if (gantt.isDestroyed) {\n            return;\n        }\n\n        // If the new record was not added due to it being off the end of the rendered block\n        // ensure we force it to be there before we attempt to edit it.\n        if (!gantt.rowManager.getRowFor(newTask)) {\n            gantt.rowManager.displayRecordAtBottom();\n        }\n\n        return newTask;\n    }\n\n    onCellEditStart() {\n        this.client.project.suspendAutoSync();\n    }\n\n    afterCellEdit() {\n        this.client.project.resumeAutoSync();\n    }\n\n}\n\nGridFeatureManager.registerFeature(CellEdit, true, 'Gantt');\n", "import GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\nimport Delayable from '../../Core/mixin/Delayable.js';\nimport InstancePlugin from '../../Core/mixin/InstancePlugin.js';\n\n/**\n * @module Gantt/feature/CriticalPaths\n */\n\n/**\n * This feature highlights the project _critical paths_.\n * Every task is important, but only some of them are critical.\n * The critical path is a chain of linked tasks that directly affects the project finish date.\n * If any task on the critical path is late, the whole project is late.\n *\n * For more details on the _critical path method_ please check [this article](https://en.wikipedia.org/wiki/Critical_path_method).\n *\n * This feature is loaded by default, but the visualization needs to be enabled:\n *\n * ```javascript\n * // let's visualize the project critical paths\n * gantt.features.criticalPaths.disabled = false;\n * ```\n *\n * {@inlineexample Gantt/feature/CriticalPaths.js}\n *\n * If you need to get information about critical paths, you can refer to\n * {@link Gantt/model/ProjectModel#property-criticalPaths} property of the project:\n *\n * ```javascript\n * const paths = gantt.project.criticalPaths;\n * ```\n *\n * @extends Core/mixin/InstancePlugin\n * @demo Gantt/criticalpaths\n * @classtype criticalPaths\n * @feature\n */\nexport default class CriticalPaths extends Delayable(InstancePlugin) {\n    //region Config\n\n    static get $name() {\n        return 'CriticalPaths';\n    }\n\n    static get defaultConfig() {\n        return {\n            cls                   : 'b-gantt-critical-paths',\n            criticalDependencyCls : 'b-critical',\n            disabled              : true\n        };\n    }\n\n    static get pluginConfig() {\n        return {\n            chain : ['onTaskDataGenerated']\n        };\n    }\n\n    //endregion\n\n    //region Init\n\n    doDisable(disable) {\n        const me = this;\n\n        if (disable) {\n            me.unhighlightCriticalPaths();\n        }\n        // Highlight now if we have entered graph\n        else if (me.client.project.graph) {\n            me.highlightCriticalPaths();\n        }\n        // In delayed calculation mode (the default) we might not be in graph yet, postpone highlighting until we are\n        else {\n            me.client.project.ion({\n                graphReady() {\n                    me.highlightCriticalPaths();\n                },\n                thisObj : me,\n                once    : true\n            });\n        }\n\n        super.doDisable(disable);\n    }\n\n    getDependenciesFeature() {\n        // return dependencies feature only when it's ready\n        return this.client.foregroundCanvas && this.client.features.dependencies;\n    }\n\n    setupObserver() {\n        const\n            me = this,\n            { project }  = me.client;\n\n        let dependencies;\n\n        // destroy previous observer if any\n        me.destroyObserver();\n\n        me.criticalPathObserver = project.getGraph().observe(function * () {\n            return yield project.$.criticalPaths;\n\n        }, criticalPaths => {\n            // if the feature is not disabled\n            if (!me.disabled) {\n                me.removeCriticalCls();\n\n                // check if dependencies feature is there\n                if ((dependencies = dependencies || me.getDependenciesFeature())) {\n                    for (const path of criticalPaths) {\n                        for (const node of path) {\n                            if (node.dependency) {\n                                dependencies.highlight(node.dependency, me.criticalDependencyCls);\n                            }\n                        }\n                    }\n                }\n\n                /**\n                 * Fired when critical paths get highlighted.\n                 *\n                 * See also: {@link #event-criticalPathsUnhighlighted}\n                 * @event criticalPathsHighlighted\n                 */\n                me.client.trigger('criticalPathsHighlighted');\n            }\n        });\n    }\n\n    destroyObserver() {\n        if (this.criticalPathObserver) {\n            this.client.project?.getGraph?.().removeIdentifier(this.criticalPathObserver);\n            this.criticalPathObserver = null;\n        }\n    }\n\n    doDestroy() {\n        this.destroyObserver();\n        super.doDestroy();\n    }\n\n    highlightCriticalPaths() {\n        const\n            me          = this,\n            { element } = me.client;\n\n        // the component has cls set means we had CPs rendered so need to clean them\n        if (element.classList.contains(me.cls)) {\n            me.unhighlightCriticalPaths();\n        }\n\n        me.setupObserver();\n\n        // add the feature base cls to enable stylesheets\n        element.classList.add(me.cls);\n    }\n\n    removeCriticalCls() {\n        const\n            project      = this.client.project,\n            dependencies = this.getDependenciesFeature();\n\n        // if we have dependencies rendered remove classes from them\n        if (dependencies) {\n            project.dependencyStore.forEach(dependency => dependencies.unhighlight(dependency, this.criticalDependencyCls));\n        }\n    }\n\n    unhighlightCriticalPaths() {\n        const\n            me     = this,\n            client = me.client;\n\n        // destroy criticalPath atom observer\n        me.destroyObserver();\n\n        me.removeCriticalCls();\n\n        // remove the feature base cls\n        client.element.classList.remove(me.cls);\n\n        /**\n         * Fired when critical paths get hidden.\n         *\n         * See also: {@link #event-criticalPathsHighlighted}\n         * @event criticalPathsUnhighlighted\n         */\n        client.trigger('criticalPathsUnhighlighted');\n    }\n\n    //endregion\n\n    // Add DOMConfigs for enabled indicators as `extraConfigs` on the task. Will in the end be added to the task row\n    onTaskDataGenerated(renderData) {\n        if (!this.disabled) {\n            renderData.cls['b-critical'] = renderData.taskRecord.critical;\n        }\n    }\n}\n\nGridFeatureManager.registerFeature(CriticalPaths, true, 'Gantt');\n", "import GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\nimport SchedulerDependencies from '../../Scheduler/feature/Dependencies.js';\nimport Rectangle from '../../Core/helper/util/Rectangle.js';\nimport VersionHelper from '../../Core/helper/VersionHelper.js';\nimport { DependencyType } from '../../Engine/scheduling/Types.js';\n\n/**\n * @module Gantt/feature/Dependencies\n */\n\nconst\n    // Map dependency type to side of a box, for displaying an icon in the tooltip\n    fromBoxSide        = [\n        'start',\n        'start',\n        'end',\n        'end'\n    ],\n    toBoxSide          = [\n        'start',\n        'end',\n        'start',\n        'end'\n    ],\n    criticalPathSorter = ({ fromTask: a }, { fromTask: b }) => (a?.critical === b?.critical) ? 0 : a?.critical ? 1 : -1,\n    // Round to half pixels, more precise is not reliable x-browser\n    round              = num => Math.round(num * 2) / 2;\n\n// noinspection JSClosureCompilerSyntax\n/**\n * Feature that draws dependencies between tasks. Uses a dependency {@link Gantt.model.ProjectModel#property-dependencyStore store}\n * to determine which dependencies to draw.\n *\n * {@inlineexample Gantt/guides/gettingstarted/basic.js}\n *\n * To customize the dependency tooltip, you can provide the {@link Scheduler.feature.Dependencies#config-tooltip} config\n * and specify a {@link Core.widget.Tooltip#config-getHtml} function. For example:\n *\n * ```javascript\n * const gantt = new Gantt({\n *     features : {\n *         dependencies : {\n *             tooltip : {\n *                 getHtml({ activeTarget }) {\n *                     const dependencyModel = gantt.resolveDependencyRecord(activeTarget);\n *\n *                     if (!dependencyModel) return null;\n *\n *                     const { fromEvent, toEvent } = dependencyModel;\n *\n *                     return `${fromEvent.name} (${fromEvent.id}) -> ${toEvent.name} (${toEvent.id})`;\n *                 }\n *             }\n *         }\n *     }\n * }\n * ```\n *\n * ## Styling dependency lines\n *\n * You can easily customize the arrows drawn between events. To change all arrows, apply\n * the following basic SVG CSS:\n *\n * ```css\n * .b-sch-dependency {\n *    stroke-width: 2;\n *    stroke : red;\n * }\n *\n * .b-sch-dependency-arrow {\n *     fill: red;\n * }\n * ```\n *\n * To style an individual dependency line, you can provide a [cls](#Scheduler/model/DependencyModel#field-cls) in your\n * data:\n *\n * ```json\n * {\n *     \"id\"   : 9,\n *     \"from\" : 7,\n *     \"to\"   : 8,\n *     \"cls\"  : \"special-dependency\"\n * }\n * ```\n *\n * ```scss\n * // Make line dashed\n * .b-sch-dependency {\n *    stroke-dasharray: 5, 5;\n * }\n * ```\n *\n * By default predecessors and successors in columns and the task editor are displayed using task id and name. The id\n * part is configurable, any task field may be used instead (for example wbsCode or sequence number) by\n * {@link Gantt/view/GanttBase#config-dependencyIdField Gantt#dependencyIdField} property.\n *\n * ```javascript\n * const gantt = new Gantt({\n *    dependencyIdField: 'wbsCode',\n *\n *    project,\n *    columns : [\n *        { type : 'name', width : 250 }\n *    ],\n * });\n * ```\n *\n * Also see {@link Gantt/column/DependencyColumn#config-dependencyIdField DependencyColumn#dependencyIdField} to\n * configure columns only if required.\n *\n * This feature is **enabled** by default\n *\n * @extends Scheduler/feature/Dependencies\n * @typings Scheduler/feature/Dependencies -> Scheduler/feature/SchedulerDependencies\n * @demo Gantt/basic\n * @classtype dependencies\n * @feature\n */\nexport default class Dependencies extends SchedulerDependencies {\n\n    //region Config\n\n    static $name = 'Dependencies';\n\n    static configurable = {\n        terminalSides                     : ['left', 'right'],\n        highlightDependenciesOnEventHover : true,\n\n        pathFinderConfig : {\n            otherHorizontalMargin : 0,\n            otherVerticalMargin   : 0\n        }\n    };\n\n    //endregion\n\n    //region Init\n\n    construct(gantt, config = {}) {\n        // Scheduler might be using gantt's feature, when on same page\n        if (gantt.isGantt) {\n            this.gantt = gantt;\n        }\n\n        super.construct(gantt, config);\n    }\n\n    //endregion\n\n    //region Scheduler overrides\n\n    // Add critical path marker which has different color\n    createMarkers() {\n        super.createMarkers();\n\n        const endMarker = this.endMarker.cloneNode(true);\n\n        endMarker.setAttribute('id', 'arrowEndCritical');\n        endMarker.retainElement = true;\n\n        this.client.svgCanvas.appendChild(endMarker);\n    }\n\n    /**\n     * Returns the dependency record for a DOM element\n     * @function resolveDependencyRecord\n     * @param {HTMLElement} element The dependency line element\n     * @returns {Gantt.model.DependencyModel} The dependency record\n     */\n\n    get rowStore() {\n        return this.client.store;\n    }\n\n    // We don't care about the resourceStore in gantt\n    attachToResourceStore(...args) {\n        // But we have to care for Scheduler Pro using Gantt:s feature (shared bundle)\n        if (!this.gantt) {\n            super.attachToResourceStore(...args);\n        }\n    }\n\n    getDependencyKey(dependency, ...args) {\n        if (!this.gantt) {\n            super.getDependencyKey(dependency, ...args);\n        }\n\n        return dependency.id;\n    }\n\n    // Gantt draws between tasks, replace Schedulers assignment element lookup\n    getAssignmentElement(task) {\n        if (!this.gantt) {\n            return super.getAssignmentElement(task);\n        }\n\n        return this.client.getElementFromTaskRecord(task);\n    }\n\n    // Gantt draws between tasks, replace Schedulers assignment bounds lookup\n    getAssignmentBounds(task) {\n        if (!this.gantt) {\n            return super.getAssignmentBounds(task);\n        }\n\n        const\n            { client } = this,\n            element    = client.getElementFromTaskRecord(task);\n\n        if (element && !client.isExporting) {\n            return Rectangle.from(element, this.relativeTo);\n        }\n\n        return client.isEngineReady && client.getTaskBox(task, true, true);\n    }\n\n    //region Export\n\n    // Export calls this fn to determine if a dependency should be included or not\n    isDependencyVisible(dependency) {\n        if (!this.gantt) {\n            return super.isDependencyVisible(dependency);\n        }\n\n        return dependency.fromEvent?.isScheduled && dependency.toEvent?.isScheduled;\n    }\n\n    //endregion\n\n    // Override Schedulers dependency drawing\n    drawDependency(dependency, batch = false, forceBoxes = null) {\n        if (!this.gantt) {\n            return super.drawDependency(dependency, batch, forceBoxes);\n        }\n\n        const\n            me                     = this,\n            {\n                domConfigs,\n                client\n            } = me,\n            { store }              = client,\n            topIndex               = client.firstVisibleRow.dataIndex,\n            bottomIndex            = client.lastVisibleRow.dataIndex,\n            { startMS, endMS }     = client.visibleDateRange,\n            { fromEvent, toEvent } = dependency;\n\n        if (store.isAvailable(fromEvent) && store.isAvailable(toEvent)) {\n            const\n                fromIndex  = store.indexOf(fromEvent),\n                toIndex    = store.indexOf(toEvent),\n                fromDateMS = Math.min(fromEvent.startDateMS, toEvent.startDateMS),\n                toDateMS   = Math.max(fromEvent.endDateMS, toEvent.endDateMS);\n\n            // Draw only if dependency intersects view, unless it is part of an export\n            if (client.isExporting || fromIndex != null && toIndex != null && !(\n                // Both ends above view\n                (fromIndex < topIndex && toIndex < topIndex) ||\n                // Both ends below view\n                (fromIndex > bottomIndex && toIndex > bottomIndex) ||\n                // Both ends before view\n                (fromDateMS < startMS && toDateMS < startMS) ||\n                // Both ends after view\n                (fromDateMS > endMS && toDateMS > endMS)\n            )) {\n                const lineDomConfigs = me.getDomConfigs(dependency, fromEvent, toEvent, forceBoxes);\n\n                if (lineDomConfigs) {\n                    domConfigs.set(dependency.id, lineDomConfigs);\n                }\n                // No room to draw a line\n                else {\n                    domConfigs.delete(dependency.id);\n                }\n            }\n\n            // Give mixins a shot at running code after a dependency is drawn. Used by grid cache to cache the\n            // dependency (when needed)\n            me.afterDrawDependency(dependency, fromIndex, toIndex, fromDateMS, toDateMS);\n        }\n\n        if (!batch) {\n            me.domSync();\n        }\n    }\n\n    //endregion\n\n    //region Draw & render\n\n    getDependenciesToConsider(startMS, endMS, startIndex, endIndex) {\n        const\n            dependencies    = super.getDependenciesToConsider?.(startMS, endMS, startIndex, endIndex),\n            criticalFeature = this.client.features.criticalPaths;\n\n        if (dependencies && criticalFeature?.enabled) {\n            return Array.from(dependencies).sort(criticalPathSorter);\n        }\n\n        return dependencies;\n    }\n\n    adjustLineDef(dependency, lineDef) {\n        const me = this;\n\n        // Do not adjust for scheduler using Gantts feature\n        if (!me.gantt) {\n            return lineDef;\n        }\n\n        const\n            { rtl }              = me.gantt,\n            { startBox, endBox } = lineDef,\n            arrowMargin          = me.pathFinder.startArrowMargin,\n            startRowBox          = me.client.getRecordCoords(dependency.fromEvent, true),\n            endRowBox            = me.client.getRecordCoords(dependency.toEvent, true),\n            startBoxEnd          = round(startBox.getEnd(rtl)),\n            endBoxStart          = round(endBox.getStart(rtl)),\n            endBoxEnd            = round(endBox.getEnd(rtl)),\n            // Detecting whether the source box ends before (or at the same point) as the end box start\n            // is different between LRT and RTL\n            sourceEndsBeforeStart = rtl\n                ? (endBoxStart <= startBoxEnd && endBoxEnd <= (startBoxEnd + arrowMargin))\n                : (endBoxStart >= startBoxEnd && endBoxEnd >= (startBoxEnd + arrowMargin));\n\n        if (\n            dependency.type === DependencyType.EndToStart &&\n            // Target box is below source box\n            startBox.bottom < endBox.y &&\n            // If source box ends before target box start - draw line to target box top edge.\n            // Round coordinates to make behavior more consistent on zoomed page\n            sourceEndsBeforeStart\n        ) {\n            // Arrow to left part of top\n            lineDef.endSide = 'top';\n\n            // The default entry point for top is the center, but for Gantt Tasks, we join to startArrowMargin inwards\n            // to top-start, so we give the end box a width of arrowMargin.\n            // Milestones always have the top entry point left in the center.\n            if (!dependency.toEvent.milestone) {\n                if (rtl) {\n                    endBox.x = endBox.right - arrowMargin * 2;\n                }\n                else {\n                    endBox.width = arrowMargin * 2;\n                }\n            }\n        }\n\n        return {\n            ...lineDef,\n            // Reversing start/end endpoints generate more Gantt-friendly arrows\n            startBox      : endBox,\n            endBox        : startBox,\n            endSide       : lineDef.startSide,\n            startSide     : lineDef.endSide,\n            boxesReversed : true,\n            // Add vertical box for each task. They are supposed to push line to row boundary\n            otherBoxes    : [\n                {\n                    start  : startBox.x,\n                    end    : startBox.right,\n                    top    : startRowBox.y,\n                    bottom : startRowBox.bottom\n                },\n                {\n                    start  : endBox.x,\n                    end    : endBox.right,\n                    top    : endRowBox.y,\n                    bottom : endRowBox.bottom\n                }\n            ]\n        };\n    }\n\n    /**\n     * Draws all dependencies for the specified task.\n     * @deprecated 5.1 The Dependencies feature was refactored and this fn is no longer needed\n     */\n    drawForTask() {\n        VersionHelper.deprecate('Gantt', '6.0.0', 'Dependencies.drawForTask() is no longer needed');\n        this.refresh();\n    }\n\n    //endregion\n\n    //region Tooltip\n\n    /**\n     * Generates html for the tooltip shown when hovering a dependency\n     * @param {Object} tooltipConfig\n     * @returns {String} Html to display in the tooltip\n     * @private\n     */\n    getHoverTipHtml({ activeTarget }) {\n        const\n            me                    = this,\n            dependency            = me.resolveDependencyRecord(activeTarget),\n            { dependencyIdField } = me.client;\n\n        if (!dependency) {\n            return null;\n        }\n\n        const { fromEvent, toEvent } = dependency;\n\n        return {\n            children : [{\n                className : 'b-sch-dependency-tooltip',\n                children  : [\n                    { tag : 'label', text : me.L('L{from}') },\n                    { text : `${fromEvent.name} ${fromEvent[dependencyIdField]}` },\n                    { className : `b-sch-box b-${dependency.fromSide || fromBoxSide[dependency.type]}` },\n                    { tag : 'label', text : me.L('L{to}') },\n                    { text : `${toEvent.name} ${toEvent[dependencyIdField]}` },\n                    { className : `b-sch-box b-${dependency.toSide || toBoxSide[dependency.type]}` },\n                    dependency.lag ? { tag : 'label', text : me.L('L{DependencyEdit.Lag}') } : null,\n                    dependency.lag ? { text : dependency.fullLag } : null\n                ]\n            }]\n        };\n    }\n\n    //endregion\n\n    //region Dependency creation\n\n    /**\n     * Create a new dependency from source terminal to target terminal\n     * @internal\n     */\n    async createDependency(data) {\n        const\n            me         = this,\n            {\n                source,\n                target,\n                fromSide,\n                toSide\n            }          = data,\n            type       = (fromSide === 'start' ? 0 : 2) + (toSide === 'end' ? 1 : 0),\n            dependency = me.dependencyStore.add({\n                fromEvent : source,\n                toEvent   : target,\n                type\n            })[0];\n\n        await me.dependencyStore.project.commitAsync();\n\n        return dependency;\n    }\n\n    // endregion\n}\n\nGridFeatureManager.registerFeature(Dependencies, true, 'Gantt');\n", "import GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\nimport TooltipBase from '../../Scheduler/feature/base/TooltipBase.js';\nimport DomClassList from '../../Core/helper/util/DomClassList.js';\nimport ObjectHelper from '../../Core/helper/ObjectHelper.js';\nimport StringHelper from '../../Core/helper/StringHelper.js';\n\n/**\n * @module Gantt/feature/Indicators\n */\n\n/**\n * The Indicators feature displays indicators (icons) for different dates related to a task in its row. Hovering an\n * indicator will show a tooltip with its name and date(s). The owning task `id` is embedded in the indicator element\n * dataset as `taskRecordId` which can be useful if you want to have custom actions when clicking (showing a menu for example).\n *\n * By default, it includes and displays the following indicators (config name):\n * * Early start/end dates (earlyDates)\n * * Late start/end dates (lateDates)\n * * Constraint date (constraintDate)\n * * Deadline date (deadlineDate)\n *\n * This demo shows the default indicators:\n *\n * {@inlineexample Gantt/feature/Indicators.js}\n *\n * This config will display them all:\n *\n * ```javascript\n * new Gantt({\n *   features : {\n *     indicators : true\n *   }\n * });\n * ```\n *\n * To selectively disable indicators:\n *\n * ```javascript\n * features : {\n *   indicators : {\n *     items : {\n *       earlyDates     : false,\n *       constraintDate : false\n *     }\n *   }\n * }\n * ```\n *\n * They can also be toggled at runtime:\n *\n * ```javascript\n * gantt.features.indicators.items.deadlineDate = true/false;\n * ```\n *\n * The feature also supports adding custom indicators, by adding properties to the `items` config object:\n *\n * ```javascript\n * items : {\n *   lateDates  : false,\n *\n *   // Custom indicator only shown for tasks more than half done\n *   myCustomIndicator : taskRecord => taskRecord.percentDone > 50 ? {\n *      startDate : DateHelper.add(taskRecord.endDate, 2, 'days'),\n *      name : 'My custom indicator',\n *      iconCls : 'b-fa b-fa-alien'\n *   } : null\n * }\n * ```\n *\n * This demo shows a custom indicator:\n *\n * {@inlineexample Gantt/feature/IndicatorsCustom.js}\n *\n * These custom indicators are defined as functions, that accept a task record and return a TimeSpan (or a raw data\n * object). The function will be called for each visible task during rendering, to not show the indicator for certain\n * tasks return `null` from it.\n *\n * When using this feature we recommend that you configure gantt with a larger `rowHeight` + `barMargin` (>15 px), since\n * the indicators are indented to fit below the task bars.\n *\n * @extends Scheduler/feature/base/TooltipBase\n * @classType indicators\n * @feature\n * @demo Gantt/indicators\n */\n\nexport default class Indicators extends TooltipBase {\n\n    // <debug>\n    // region Localization test\n    static localization = [\n        'L{ConstraintTypePicker.none}',\n        'L{ConstraintTypePicker.muststarton}',\n        'L{ConstraintTypePicker.mustfinishon}',\n        'L{ConstraintTypePicker.startnoearlierthan}',\n        'L{ConstraintTypePicker.startnolaterthan}',\n        'L{ConstraintTypePicker.finishnoearlierthan}',\n        'L{ConstraintTypePicker.finishnolaterthan}'\n    ];\n    // endregion\n    // </debug>\n\n    //region Config\n\n    static get $name() {\n        return 'Indicators';\n    }\n\n    static get defaultConfig() {\n        return {\n            cls         : 'b-gantt-task-tooltip', // reused on purpose\n            forSelector : '.b-indicator',\n            recordType  : 'indicator',\n            hoverDelay  : 500,\n            layoutStyle : {\n                flexDirection : 'column'\n            },\n\n            defaultIndicators : {\n                earlyDates : taskRecord => taskRecord.earlyStartDate && !taskRecord.isMilestone ? {\n                    startDate : taskRecord.earlyStartDate,\n                    endDate   : taskRecord.earlyEndDate,\n                    cls       : 'b-bottom b-early-dates',\n                    name      : this.L('L{earlyDates}')\n                } : null,\n\n                lateDates : taskRecord => taskRecord.lateStartDate && !taskRecord.isMilestone ? {\n                    startDate : taskRecord.lateStartDate,\n                    endDate   : taskRecord.lateEndDate,\n                    cls       : 'b-bottom b-late-dates',\n                    name      : this.L('L{lateDates}')\n                } : null,\n\n                constraintDate : taskRecord => taskRecord.constraintDate ? {\n                    startDate : taskRecord.constraintDate,\n                    cls       : `b-bottom b-constraint-date b-constraint-type-${taskRecord.constraintType}`,\n                    name      : this.L(`L{ConstraintTypePicker.${taskRecord.constraintType}}`)\n                } : null,\n\n                deadlineDate : taskRecord => taskRecord.deadlineDate ? {\n                    startDate : taskRecord.deadlineDate,\n                    cls       : `b-bottom b-deadline-date`,\n                    name      : this.L('L{deadlineDate}')\n                } : null\n            },\n\n            /**\n             * Used to enable/disable built in indicators and to define custom indicators.\n             *\n             * Custom indicators are defined as functions, that accept a task record and return a\n             * {@link Scheduler.model.TimeSpan}, or a config object thereof.\n             *\n             * ```\n             * new Gantt({\n             *   features : {\n             *     indicators : {\n             *       items : {\n             *         // Disable deadlineDate indicators\n             *         deadlineDate : false,\n             *\n             *         // Add a custom indicator (called prepare)\n             *         prepare : taskRecord => ({\n             *            startDate : taskRecord.startDate,\n             *            iconCls   : 'b-fa b-fa-magnify',\n             *            name      : 'Start task preparations'\n             *         })\n             *       }\n             *     }\n             *   }\n             * });\n             * ```\n             *\n             * For more information, please see the class description at top.\n             *\n             * @config {Object<String,Function|Boolean>}\n             * @category Common\n             */\n            items : null,\n\n            /**\n             * A function which receives data about the indicator and returns a string,\n             * or a Promise yielding a string (for async tooltips), to be displayed in the tooltip.\n             * This method will be called with an object containing the fields below\n             * @param {Object} data Indicator data\n             * @param {String} data.name Indicator name\n             * @param {Date} data.startDate Indicator startDate\n             * @param {Date} data.endDate Indicator endDate\n             * @param {Gantt.model.TaskModel} data.taskRecord The task to which the indicator belongs\n             * @config {Function}\n             */\n            tooltipTemplate : data => {\n                const\n                    { indicator } = data,\n                    encodedName   = StringHelper.encodeHtml(indicator.name);\n\n                if (data.endDate) {\n                    return `\n                        ${indicator.name ? `<div class=\"b-gantt-task-title\">${encodedName}</div>` : ''}\n                        <table>\n                            <tr><td>${this.L('L{Start}')}:</td><td>${data.startClockHtml}</td></tr>\n                            <tr><td>${this.L('L{End}')}:</td><td>${data.endClockHtml}</td></tr>\n                        </table>\n                    `;\n                }\n\n                return `\n                    ${indicator.name ? `<div class=\"b-gantt-task-title\">${encodedName}</div>` : ''}\n                    ${data.startText}\n                `;\n            }\n\n        };\n    }\n\n    static get pluginConfig() {\n        return {\n            chain : ['onTaskDataGenerated', 'onPaint']\n        };\n    }\n\n    //endregion\n\n    construct(gantt, config = {}) {\n        this.tipId = `${gantt.id}-indicators-tip`;\n\n        // Store items to set manually after config, we do not want to pass them along to the base class since it will\n        // apply them to the tooltip\n        config = Object.assign({}, config);\n        const { items } = config;\n\n        super.construct(gantt, config);\n\n        this.items = items;\n    }\n\n    template(...args) {\n        return this.tooltipTemplate(...args);\n    }\n\n    // Private setter, not supposed to set it during runtime\n    set items(indicators) {\n        const me = this;\n\n        // All indicators, custom + default\n        me._indicators = ObjectHelper.assign({}, me.defaultIndicators, indicators);\n\n        // Accessors to toggle the indicators from the outside\n        me._indicatorAccessors = {};\n        // Keep track of enabled/disabled indicators\n        me._indicatorStatus = {};\n\n        for (const name in me._indicators) {\n            // Store if indicator is enabled/disabled (enabled if true or fn)\n            me._indicatorStatus[name] = Boolean(me._indicators[name]);\n\n            // If it was configured as true, it means we should use a default implementation\n            if (typeof me._indicators[name] !== 'function') {\n                me._indicators[name] = me.defaultIndicators[name];\n            }\n\n            // Create accessors so that we can enable/disable on the fly using:\n            // gantt.features.indicators.items.deadlineDate = false;\n            Object.defineProperty(me._indicatorAccessors, name, {\n                enumerable : true,\n                get() {\n                    return me._indicatorStatus[name] ? me._indicators[name] : false;\n                },\n                set(value) {\n                    me._indicatorStatus[name] = value;\n                    me.client.refresh();\n                }\n            });\n        }\n    }\n\n    /**\n     * Accessors for the indicators that can be used to toggle them at runtime.\n     *\n     * ```\n     * gantt.features.indicators.items.deadlineDate = false;\n     * ```\n     *\n     * @property {Object<String,Boolean>}\n     * @readonly\n     * @category Common\n     */\n    get items() {\n        // These accessors are generated in `set items`, allowing runtime enabling/disabling of indicators\n        return this._indicatorAccessors;\n    }\n\n    //region Render\n\n    // Map fn that generates a DOMConfig for an indicator\n    createIndicatorDOMConfig(indicator, index) {\n        const\n            { gantt, renderData }      = this,\n            { taskRecord }             = renderData,\n            { cls, iconCls }           = indicator,\n            { rtl, timeAxisViewModel } = gantt,\n            x                          = timeAxisViewModel.getPositionFromDate(indicator.startDate),\n            width                      = indicator.endDate ? Math.abs(timeAxisViewModel.getPositionFromDate(indicator.endDate) - x) : null,\n            classList                  = cls?.isDomClassList ? cls : new DomClassList(cls),\n            top                        = renderData.top || gantt.store.indexOf(taskRecord) * gantt.rowManager.rowOffsetHeight + gantt.resourceMargin,\n            height                     = renderData.height || gantt.rowHeight - gantt.resourceMargin * 2;\n\n        indicator.taskRecord = taskRecord;\n\n        return {\n            className : Object.assign(classList, {\n                'b-indicator' : 1,\n                'b-has-icon'  : indicator.iconCls\n            }),\n            style : {\n                [rtl ? 'right' : 'left'] : x,\n                top,\n                height,\n                width,\n                style                    : indicator.style\n            },\n            dataset : {\n                // For sync\n                taskId       : `${renderData.taskId}-indicator-${index}`,\n                // allow users to look up which task this indicator belongs to\n                taskRecordId : renderData.taskId\n            },\n            children : [\n                iconCls ? {\n                    tag       : 'i',\n                    className : iconCls\n                } : null\n            ],\n            elementData : indicator\n        };\n    }\n\n    // Add DOMConfigs for enabled indicators as `extraConfigs` on the task. Will in the end be added to the task row\n    onTaskDataGenerated(renderData) {\n        if (this.disabled) {\n            return;\n        }\n\n        const\n            { items } = this,\n            usedIndicators   = [];\n\n        // Iterate all indicators\n        for (const name in items) {\n            const indicatorFn = items[name];\n\n            // If it is enabled and a function, call it and store the resulting timespan\n            if (this._indicatorStatus[name] && typeof indicatorFn === 'function') {\n                const timeSpan = indicatorFn(renderData.taskRecord);\n                timeSpan && this.client.timeAxis.timeSpanInAxis(timeSpan.startDate, timeSpan.endDate) && usedIndicators.push(timeSpan);\n            }\n        }\n\n        // Convert indicator timespans to DOMConfigs for rendering\n        renderData.extraConfigs.push(...usedIndicators.map(this.createIndicatorDOMConfig, {\n            gantt : this.client,\n            renderData\n        }));\n    }\n\n    //endregion\n\n    //region Tooltip\n\n    resolveTimeSpanRecord(forElement) {\n        return forElement.lastDomConfig.elementData;\n    }\n    //endregion\n}\n\nGridFeatureManager.registerFeature(Indicators, false);\n", "import GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\nimport SchedulerLabels from '../../Scheduler/feature/Labels.js';\n\n/**\n * @module Gantt/feature/Labels\n */\n\n/**\n * Specialized version of the Labels feature for Scheduler, that handles labels for tasks in Gantt. See\n * {@link Scheduler/feature/Labels Schedulers Labels feature} for more information.\n\n * This feature is **off** by default. For info on enabling it, see {@link Grid.view.mixin.GridFeatures}.\n *\n * @extends Scheduler/feature/Labels\n * @demo Gantt/labels\n * @typings Scheduler/feature/Labels -> Scheduler/feature/SchedulerLabels\n * @classtype labels\n * @feature\n */\nexport default class Labels extends SchedulerLabels {\n    static get $name() {\n        return 'Labels';\n    }\n\n    static get pluginConfig() {\n        return {\n            chain : ['onTaskDataGenerated']\n        };\n    }\n\n    onTaskDataGenerated(data) {\n        this.onEventDataGenerated(data);\n    }\n}\n\nGridFeatureManager.registerFeature(Labels, false, 'Gantt');\n", "import InstancePlugin from '../../Core/mixin/InstancePlugin.js';\nimport GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\n\n/**\n * @module Gantt/feature/ParentArea\n */\n\n/**\n * Highlights the area encapsulating all child tasks of a parent task in a semi-transparent layer. You can style\n * these layer elements using the `b-parent-area` CSS class.\n *\n * {@inlineexample Gantt/feature/ParentArea.js}\n *\n * This feature is **off** by default. For info on enabling it, see {@link Grid.view.mixin.GridFeatures}.\n *\n * ```javascript\n * const gantt = new Gantt({\n *     features : {\n *         parentArea : true\n *     }\n * });\n * ```\n *\n * @extends Core/mixin/InstancePlugin\n * @demo Gantt/parent-area\n * @classtype parentArea\n * @feature\n */\nexport default class ParentArea extends InstancePlugin {\n    static $name = 'ParentArea';\n\n    static pluginConfig = {\n        chain : ['onBeforeTaskSync']\n    };\n\n    // Map to keep track of highlighted parents, holds DomConfigs keyed by parentRecord\n    highlighted = new Map();\n\n    // Recursively highlight self and all unhighlighted ancestors\n    highlightParent(parentRecord) {\n        const { highlighted } = this;\n\n        if (parentRecord && !parentRecord.isProjectModel && !highlighted.has(parentRecord)) {\n            const\n                { client }          = this,\n                { rowOffsetHeight } = client.rowManager,\n                descendants         = parentRecord.visibleDescendantCount,\n                box                 = client.getTaskBox(parentRecord);\n\n            if (!box) {\n                return;\n            }\n\n            const domConfig = {\n                className : {\n                    'b-parent-area' : 1\n                },\n                style : {\n                    top    : box.top,\n                    height : (descendants + 1) * rowOffsetHeight - box.top % rowOffsetHeight, // +1 for self\n                    left   : box.left,\n                    width  : box.width\n                },\n                dataset : {\n                    taskId : `parent-area-${parentRecord.id}`\n                }\n            };\n\n            highlighted.set(parentRecord, domConfig);\n\n            this.highlightParent(parentRecord.parent);\n        }\n    }\n\n    // Called after collecting all task configs, before DomSyncing them\n    onBeforeTaskSync(configs) {\n        if (!this.disabled) {\n            const { highlighted, client } = this;\n\n            // Start from scratch to not have to keep track of modifications, collecting task area configs is cheap\n            highlighted.clear();\n\n            // Highlight all parents whose area intersects the view, which we know if a child is among rendered rows\n            for (const row of client.rowManager) {\n                const taskRecord = client.store.getById(row.id);\n                taskRecord && this.highlightParent(taskRecord.parent);\n            }\n\n            configs.push(...highlighted.values());\n        }\n    }\n\n    doDisable(disable) {\n        super.doDisable(disable);\n\n        this.client.refresh();\n    }\n}\n\nGridFeatureManager.registerFeature(ParentArea, false, 'Gantt');\n", "import InstancePlugin from '../../Core/mixin/InstancePlugin.js';\nimport GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\nimport Delayable from '../../Core/mixin/Delayable.js';\nimport DateHelper from '../../Core/helper/DateHelper.js';\nimport DomHelper from '../../Core/helper/DomHelper.js';\nimport ArrayHelper from '../../Core/helper/ArrayHelper.js';\n\n/**\n * @module Gantt/feature/ProgressLine\n */\n\n/**\n *\n * This feature draws project progress line with SVG lines. Requires {@link SchedulerPro/feature/PercentBar} to be enabled (which\n * by default, it is)\n *\n * This feature is **off** by default. For info on enabling it, see {@link Grid/view/mixin/GridFeatures}.\n *\n * ```javascript\n * let gantt = new Gantt({\n *     features : {\n *         progressLine : {\n *            statusDate : new Date(2017, 2, 8)\n *         }\n *     }\n * });\n * ```\n *\n * Status date can be changed dynamically:\n *\n * ```javascript\n * gantt.features.progressLine.statusDate = new Date();\n * ```\n *\n * If status date is not in the current Gantt time span, progress line will use view start or end coordinates. This\n * behavior can be customized with {@link #config-drawLineOnlyWhenStatusDateVisible} config. Or you can override {@link #function-shouldDrawProgressLine}\n * method and provide more complex condition.\n *\n * Progress line is a set of SVG <line> elements drawn between all the tasks.\n *\n * {@inlineexample Gantt/feature/ProgressLine.js}\n *\n * @demo Gantt/progressline\n * @extends Core/mixin/InstancePlugin\n * @mixes Core/mixin/Delayable\n * @classtype progressLine\n * @feature\n */\nexport default class ProgressLine extends Delayable(InstancePlugin) {\n    /**\n     * Fired when progress line is rendered\n     * @event progressLineDrawn\n     */\n\n    //region Config\n\n    static get $name() {\n        return 'ProgressLine';\n    }\n\n    static get defaultConfig() {\n        return {\n            /**\n             * Progress line status date. If not provided, current date is used.\n             * @config {Date}\n             */\n            statusDate : new Date(),\n\n            /**\n             * Set to true to hide progress line, when status date is not in the current time axis.\n             * @config {Boolean}\n             */\n            drawLineOnlyWhenStatusDateVisible : false,\n\n            lineCls : 'b-gantt-progress-line',\n\n            containerCls : 'b-progress-line-canvas'\n        };\n    }\n\n    static get pluginConfig() {\n        return {\n            chain : ['onPaint']\n        };\n    }\n\n    //endregion\n\n    //region Init & destroy\n\n    construct(client, config = {}) {\n        const me = this;\n\n        // Many things may schedule a draw. Ensure it only happens once, on the next frame.\n        // And Ensure it really is on the *next* frame after invocation by passing\n        // the cancelOutstanding flag.\n        me.scheduleDraw = me.createOnFrame('draw', [], me, true);\n\n        super.construct(client, config);\n\n        this.lineSegments = [];\n    }\n\n    doDisable(disable) {\n        const me = this;\n\n        // attach/detach listeners\n        me.attachToClient(disable ? null : me.client);\n\n        if (me.client.rendered) {\n            me.draw();\n        }\n\n        super.doDisable(disable);\n    }\n\n    //endregion\n\n    get statusDate() {\n        return this._statusDate;\n    }\n\n    /**\n     * Progress line status date. If not provided, current date is used.\n     * @property {Date}\n     */\n    set statusDate(date) {\n        if (date instanceof Date) {\n            this._statusDate = date;\n            if (!this.disabled) {\n                this.scheduleDraw();\n            }\n        }\n    }\n\n    // cannot use `get svgCanvas` because it will trigger svgCanvas getter on instance too early\n    getSVGCanvas() {\n        const\n            me = this,\n            { client } = me;\n\n        if (!me._svgCanvas) {\n            const svg = me._svgCanvas = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n            // To not be touched when syncing tasks to DOM\n            svg.retainElement = true;\n            svg.classList.add(me.containerCls);\n            client.foregroundCanvas.appendChild(svg);\n        }\n        return me._svgCanvas;\n    }\n\n    // region Event handlers\n\n    attachToProject(project) {\n        this.detachListeners('project');\n\n        project?.ion({\n            name    : 'project',\n            refresh : 'onProjectRefresh',\n            thisObj : this\n        });\n    }\n\n    attachToRowManager(rowManager) {\n        this.detachListeners('rowManager');\n\n        rowManager?.ion({\n            name              : 'rowManager',\n            translaterow      : 'onTranslateRow',\n            refresh           : 'scheduleDraw',\n            rerender          : 'scheduleDraw',\n            changetotalheight : 'scheduleDraw',\n            thisObj           : this\n        });\n    }\n\n    attachToClient(client) {\n        const me = this;\n\n        me.detachListeners('client');\n\n        // dependencies are drawn on scroll, both horizontal and vertical\n        client?.ion({\n            name                   : 'client',\n            horizontalscroll       : 'scheduleDraw',\n            togglenode             : 'scheduleDraw',\n            taskdrag               : 'onTaskDrag',\n            taskdragabortfinalized : 'scheduleDraw',\n            aftertaskdrop          : 'scheduleDraw',\n            timelineviewportresize : 'scheduleDraw',\n            thisObj                : me\n        });\n\n        me.attachToProject(client?.project);\n        me.attachToRowManager(client?.rowManager);\n    }\n\n    onPaint() {\n        this.attachToProject(this.disabled ? null : this.client.project);\n    }\n\n    /**\n     * Redraws the line when the project propagation is done\n     * @private\n     */\n    onProjectRefresh() {\n        this.scheduleDraw();\n    }\n\n    onTranslateRow({ row }) {\n        // a changetotalheight event is fired after translations, if a rowHeight change is detected here it will redraw\n        // the line\n        if (row.lastTop >= 0 && row.top !== row.lastTop) {\n            this.scheduleDraw();\n        }\n    }\n\n    // Refreshing only lines for dragged task to avoid slowing down drag operation\n    onTaskDrag({ taskRecords, dragData }) {\n        taskRecords.forEach(record => {\n            this.updateLineForTask(record, {\n                [record.id] : DateHelper.add(record.startDate, dragData.timeDiff)\n            });\n        });\n    }\n    // endregion\n\n    /**\n     * Returns true if progress line should be drawn\n     * @returns {Boolean}\n     */\n    shouldDrawProgressLine() {\n        const me = this;\n        return !me.client.timeAxisSubGrid.collapsed && !me.disabled && (!me.drawLineOnlyWhenStatusDateVisible || me.client.timeAxis.dateInAxis(me.statusDate));\n    }\n\n    /**\n     * Returns status date horizontal position relative to the foreground canvas\n     * @returns {Number}\n     * @private\n     */\n    getStatusDateX() {\n        let { statusDate } = this;\n\n        const { client } = this;\n\n        if (!client.timeAxis.dateInAxis(statusDate)) {\n            statusDate = statusDate < client.timeAxis.startDate ? client.timeAxis.startDate : client.timeAxis.endDate;\n        }\n\n        return client.getCoordinateFromDate(statusDate);\n    }\n\n    /**\n     * Returns object with status date local coordinate and view x,y coordinates. Used to convert page coordinates to\n     * view local.\n     * @returns {{statusDateX: Number, viewXY: number[]}}\n     * @private\n     */\n    getRenderData() {\n        const\n            statusDateX = this.getStatusDateX(),\n            // We refer to the DOM to get status date horizontal coordinate (for segmented tasks which are not supported yet)\n            // we need to adjust progress bar element box to view/scroll.\n            viewBox     = this.client.timeAxisSubGridElement.getBoundingClientRect(),\n            viewXY      = [this.client.scrollLeft - viewBox.left, -viewBox.top];\n\n        return { statusDateX, viewXY };\n    }\n\n    // region Drawing\n\n    /**\n     * Renders the progress line.\n     */\n    draw() {\n        const\n            me         = this,\n            { client } = me;\n\n        me.lineSegments.forEach(el => el.remove());\n        me.lineSegments = [];\n\n        if (!me.shouldDrawProgressLine()) {\n            return;\n        }\n\n        if (client.isAnimating) {\n            client.ion({\n                transitionend() {\n                    me.scheduleDraw();\n                },\n                once : true\n            });\n\n            return;\n        }\n\n        const\n            data  = me.getRenderData(),\n            lines = [];\n\n        client.rowManager.forEach(row => lines.push(...me.getLineSegmentRenderData(row, data)));\n\n        // Batch rendering to avoid constant layout reflows\n        // With batch drawing line takes ~8ms comparing to ~30ms prior\n        lines.forEach(line => me.drawLineSegment(line));\n\n        client.trigger('progressLineDrawn');\n    }\n\n    segmentBelongsToTask(el, taskRecord) {\n        // Use getAttribute to not upset Salesforce LockerService\n        return el.getAttribute('data-task-id') == taskRecord.id;\n    }\n\n    /**\n     * Updates progress line segment for one task\n     * @param {Gantt.model.TaskModel} taskRecord\n     * @param {Object} [renderData] Optional render data, which is an object where keys are task ids and values are\n     * new task start date\n     * @private\n     */\n    updateLineForTask(taskRecord, renderData) {\n        const me = this;\n\n        if (me.disabled) {\n            return;\n        }\n\n        const row = me.client.getRowFor(taskRecord);\n\n        if (row) {\n            const toRemove = [];\n\n            me.lineSegments.forEach(el => {\n                if (me.segmentBelongsToTask(el, taskRecord)) {\n                    toRemove.push(el);\n                    el.remove();\n                }\n            });\n\n            ArrayHelper.remove(me.lineSegments, ...toRemove);\n\n            me.getLineSegmentRenderData(row, me.getRenderData(), renderData)\n                .forEach(line => me.drawLineSegment(line));\n        }\n    }\n\n    /**\n     * Draws line for a given row\n     * @param {Grid.row.Row} row Row instance\n     * @param {Object} data Output from {@link #function-getRenderData} method\n     * @param {Object} [renderData] Optional render data, which is an object where keys are task ids and values are\n     * new task start date\n     * @internal\n     */\n    getLineSegmentRenderData(row, data, renderData = {}) {\n        const\n            me                      = this,\n            { statusDateX, viewXY } = data,\n            taskRecord              = me.client.getRecordFromElement(row.elements.normal),\n            taskId                  = taskRecord.id,\n            lineDefinitions         = [];\n\n        let point;\n\n        if (me.isStatusLineTask(taskRecord, renderData[taskRecord.id])) {\n            point = me.calculateCoordinateForTask(taskRecord, viewXY);\n\n            // If multiple rows are affected by event update, it could happen, that point\n            // could not be resolved\n            point && lineDefinitions.push(\n                {\n                    dataset : { taskId },\n                    x1      : statusDateX,\n                    y1      : row.top,\n                    x2      : point.x,\n                    y2      : point.y\n                },\n                {\n                    dataset : { taskId },\n                    x1      : point.x,\n                    y1      : point.y,\n                    x2      : statusDateX,\n                    y2      : row.bottom\n                }\n            );\n        }\n\n        // otherwise we render vertical status line\n\n        if (!point) {\n            lineDefinitions.push(\n                {\n                    dataset : { taskId },\n                    x1      : statusDateX,\n                    y1      : row.top,\n                    x2      : statusDateX,\n                    y2      : row.bottom\n                }\n            );\n        }\n\n        return lineDefinitions;\n    }\n\n    /**\n     * Draws line on svg canvas\n     * @param {Object} data Line render data. Output from {@link #function-getLineSegmentRenderData}\n     * @returns {Element}\n     * @internal\n     */\n    drawLineSegment(data) {\n        const me = this;\n\n        me.lineSegments.push(DomHelper.createElement(Object.assign({\n            tag    : 'line',\n            ns     : 'http://www.w3.org/2000/svg',\n            // cannot use className when namespace is provided\n            class  : me.lineCls,\n            parent : me.getSVGCanvas()\n        }, data)));\n    }\n\n    /**\n     * Returns true if task should be connected to the progress line.\n     * @param {Gantt.model.TaskModel} taskRecord\n     * @param {Date} [startDate] Provide to check if task record should be connected to the progress line if it'd\n     * start then\n     * @returns {Boolean}\n     * @internal\n     */\n    isStatusLineTask(taskRecord, startDate) {\n        const statusDate = this.statusDate;\n\n        startDate = startDate || taskRecord.startDate;\n\n        // task should be visible and not inactive\n        return taskRecord?.project && !taskRecord.inactive && this.client.timeAxis.isTimeSpanInAxis(taskRecord) &&\n            // - is in progress\n            (taskRecord.isInProgress ||\n                // ...or is not started and its start date is before statusDate\n                (!taskRecord.isStarted && startDate < statusDate) ||\n                // ...or is finished and its start date is after statusDate\n                (taskRecord.isCompleted && startDate > statusDate));\n    }\n\n    /**\n     * This method will calculate point inside task element to be connected with line.\n     * @param {Gantt.model.TaskModel} record\n     * @param {Number[]} translateBy View xy coordinates to calculate relative point position\n     * @returns {Object} Object containing coordinates for point in progress line, or undefined if no progress bar el is found\n     * @private\n     */\n    calculateCoordinateForTask(record, translateBy) {\n        const\n            { client }     = this,\n            node           = client.getElementFromTaskRecord(record),\n            isZeroDuration = record.milestone,\n            progressBarEl  = isZeroDuration ? node : node?.querySelector('.b-task-percent-bar');\n\n        if (progressBarEl) {\n            const\n                box       = progressBarEl.getBoundingClientRect(),\n                totalSize = client.timeAxisViewModel.totalSize;\n\n            return {\n                x : Math.min((isZeroDuration ? box.left : box.right) + translateBy[0], totalSize),\n                y : box.top + box.height / 2 + translateBy[1]\n            };\n        }\n    }\n\n    // endregion\n}\n\nGridFeatureManager.registerFeature(ProgressLine);\n", "import GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\nimport AbstractTimeRanges from '../../Scheduler/feature/AbstractTimeRanges.js';\nimport AttachToProjectMixin from '../../Scheduler/data/mixin/AttachToProjectMixin.js';\n\n/**\n * @module Gantt/feature/ProjectLines\n */\n\n/**\n * This feature draws two vertical lines in the schedule area, indicating project start/end dates.\n *\n * {@inlineexample Gantt/guides/gettingstarted/basic.js}\n *\n * This feature is **enabled** by default\n *\n * @extends Scheduler/feature/TimeRanges\n * @demo Gantt/advanced\n * @classtype projectLines\n * @feature\n */\nexport default class ProjectLines extends AbstractTimeRanges.mixin(AttachToProjectMixin) {\n    //region Config\n\n    static get $name() {\n        return 'ProjectLines';\n    }\n\n    static get defaultConfig() {\n        return {\n            showHeaderElements : true,\n            cls                : 'b-gantt-project-line'\n        };\n    }\n\n    //endregion\n\n    //region Project\n\n    attachToProject(project) {\n        super.attachToProject(project);\n\n        project.ion({\n            name    : 'project',\n            refresh : this.onProjectRefresh,\n            thisObj : this\n        });\n    }\n\n    //endregion\n\n    //region Init\n\n    // We must override the TimeRanges superclass implementation which ingests the client's project's\n    // timeRangeStore. We implement our own store\n    startConfigure() {}\n\n    updateLocalization() {\n        this.renderRanges();\n    }\n\n    //endregion\n\n    onProjectRefresh() {\n        this.renderRanges();\n    }\n\n    shouldRenderRange(range) {\n        const { client } = this;\n\n        return client.timeAxis.dateInAxis(range.startDate);\n    }\n\n    get timeRanges() {\n        const { startDate, endDate } = this.client.project;\n\n        return startDate && endDate ? [\n            {\n                name : this.L('L{Project Start}'),\n                startDate\n            },\n            {\n                name      : this.L('L{Project End}'),\n                startDate : endDate\n            }\n        ] : [];\n    }\n}\n\nGridFeatureManager.registerFeature(ProjectLines, true, 'Gantt');\n", "import TooltipBase from '../../Scheduler/feature/base/TooltipBase.js';\nimport GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\nimport StringHelper from '../../Core/helper/StringHelper.js';\n\n/**\n * @module Gantt/feature/Rollups\n */\n\nconst\n    rollupCls      = 'b-task-rollup',\n    rollupSelector = `.${rollupCls}`;\n\n/**\n * If the task's {@link Gantt/model/TaskModel#field-rollup} data field is set to true, it displays a small bar or diamond below its summary task in the timeline.\n * Each of the rollup elements show a tooltip when hovering it with details of the task.\n * The tooltip content is customizable, see {@link #config-template} config for details.\n *\n * To edit the rollup data field, use {@link Gantt/column/RollupColumn} or a checkbox on Advanced tab of {@link Gantt/widget/TaskEditor}.\n *\n * This feature is **off** by default. For info on enabling it, see {@link Grid/view/mixin/GridFeatures}.\n *\n * @extends Scheduler/feature/base/TooltipBase\n * @inlineexample Gantt/feature/Rollups.js\n * @demo Gantt/rollups\n * @classtype rollups\n * @feature\n */\nexport default class Rollups extends TooltipBase {\n    //region Config\n\n    static get $name() {\n        return 'Rollups';\n    }\n\n    // Default configuration.\n    static get defaultConfig() {\n        return {\n            cls         : 'b-gantt-task-tooltip',\n            align       : 't-b',\n            forSelector : rollupSelector\n        };\n    }\n\n    static get pluginConfig() {\n        return {\n            chain : [\n                // onTaskDataGenerated for decorating task with rollups\n                'onTaskDataGenerated',\n                // render for creating tooltip (in TooltipBase)\n                'onPaint'\n            ]\n        };\n    }\n\n    //endregion\n\n    //region Init & destroy\n\n    construct(gantt, config) {\n        this.tipId = `${gantt.id}-rollups-tip`;\n\n        super.construct(gantt, config);\n    }\n\n    attachToTaskStore(store) {\n        this.detachListeners('taskStore');\n\n        store?.ion({\n            name    : 'taskStore',\n            update  : 'onStoreUpdateRecord',\n            thisObj : this\n        });\n    }\n\n    doDestroy() {\n        this.attachToTaskStore(null);\n        super.doDestroy();\n    }\n\n    doDisable(disable) {\n        const me = this;\n\n        if (me.tooltip) {\n            me.tooltip.disabled = disable;\n        }\n\n        // attach/detach listeners\n        me.attachToTaskStore(disable ? null : me.client.taskStore);\n\n        // Hide or show the rollup elements\n        me.client.refresh();\n\n        super.doDisable(disable);\n    }\n\n    //endregion\n\n    getTipHtml({ activeTarget, event }) {\n        const\n            { client }     = this,\n            task           = client.resolveTaskRecord(activeTarget),\n            rawElements    = document.elementsFromPoint(event.pageX + globalThis.pageXOffset, event.pageY + globalThis.pageYOffset),\n            rollupElements = rawElements\n                .filter(e => e.classList.contains(rollupCls))\n                .sort((lhs, rhs) => parseInt(lhs.dataset.index, 10) - parseInt(rhs.dataset.index, 10)),\n            children       = rollupElements.map(el => task.children[parseInt(el.dataset.index, 10)]);\n\n        return this.template({\n            task,\n            children\n        });\n    }\n\n    /**\n     * Template (a function accepting event data and returning a string) used to display info in the tooltip.\n     * The template will be called with an object as with fields as detailed below\n     * @config {Function}\n     * @param {Object} data A data block containing the information needed to create tooltip content.\n     * @param {Gantt.model.TaskModel} data.task The summary task to rollup to.\n     * @param {Gantt.model.TaskModel[]} data.children The array of rollup tasks.\n     */\n    template({ children }) {\n        const\n            me         = this,\n            { client } = me,\n            pieces     = [];\n\n        children.map((child, index) => {\n            const\n                { startDate, endDate } = child,\n                startText              = client.getFormattedDate(startDate),\n                endDateValue           = client.getDisplayEndDate(endDate, startDate),\n                endText                = client.getFormattedDate(endDateValue);\n\n            pieces.push(\n                `<div class=\"b-gantt-task-title ${index ? 'b-follow-on' : ''}\">${StringHelper.encodeHtml(child.name)}</div><table>`,\n                `<tr><td>${me.L('L{TaskTooltip.Start}')}:</td><td>${me.clockTemplate.template({\n                    date : startDate,\n                    text : startText,\n                    cls  : 'b-sch-tooltip-startdate'\n                })}</td></tr>`,\n                `<tr><td>${me.L('L{TaskTooltip.End}')}:</td><td>${child.isMilestone ? '' : me.clockTemplate.template({\n                    date : endDateValue,\n                    text : endText,\n                    cls  : 'b-sch-tooltip-enddate'\n                })}</td></tr></table>`\n            );\n        });\n\n        return pieces.join('');\n    }\n\n    //region Events\n\n    onStoreUpdateRecord({ record, changes }) {\n        // We don't need this listener in case the gantt is loading data\n        if (!this.client.project.propagatingLoadChanges) {\n            // If it's a size or position change, then sync that parent's rollups\n            if (record.parent && (changes.rollup || changes.startDate || changes.endDate)) {\n                this.client.taskRendering.redraw(record.parent);\n            }\n        }\n    }\n\n    onTaskDataGenerated({ taskRecord, left, wrapperChildren, style }) {\n        // Not checking taskRecord.isParent as it might be a lazy loaded parent (set to `true`)\n        if (!this.disabled && Array.isArray(taskRecord.children)) {\n            const\n                // Shortest last in DOM, so they are on top in the stacking order so that you can hover\n                // them if they overlap with longer ones. Otherwise, they might be below and won't trigger\n                // their own mouseover events.\n                children = taskRecord.children.slice().sort((lhs, rhs) => rhs.durationMS - lhs.durationMS);\n\n            wrapperChildren.push({\n                className : `${rollupCls}-wrap`,\n                dataset   : {\n                    taskFeature : 'rollups'\n                },\n                children : children.map(child => {\n                    // skip inactive children if the task itself is active, skip unscheduled tasks\n                    // (might be unscheduled because of delayed calculations)\n                    if (child.rollup && child.isScheduled && (!child.inactive || taskRecord.inactive)) {\n                        const positionData = this.client.getSizeAndPosition(child);\n\n                        if (!positionData) {\n                            return null;\n                        }\n\n                        const { position, width } = positionData;\n\n                        return {\n                            dataset : {\n                                index        : child.parentIndex,\n                                rollupTaskId : child.id\n                            },\n                            className : {\n                                [rollupCls]   : rollupCls,\n                                [child.cls]   : child.cls,\n                                'b-milestone' : child.isMilestone,\n                                'b-inactive'  : child.inactive\n                            },\n                            style : {\n                                style,\n                                width : child.isMilestone ? null : width,\n                                left  : position - left\n                            }\n                        };\n                    }\n                    return null;\n                }),\n                syncOptions : {\n                    syncIdField : 'rollupTaskId'\n                }\n            });\n        }\n    }\n\n    //endregion\n}\n\nGridFeatureManager.registerFeature(Rollups, false, 'Gantt');\n", "import TimelineSummary from '../../Scheduler/feature/TimelineSummary.js';\nimport GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\n\n/**\n * @module Gantt/feature/Summary\n */\n\n/**\n * Describes a summary level for the time axis in Gantt\n * @typedef GanttSummaryOptions\n * @property {String} label Label for the summary\n * @property {Function} renderer Function to calculate the and render the summary value\n * @property {Date} startDate Tick start date\n * @property {Date} endDate Tick end date\n * @property {Gantt.data.TaskStore} taskStore Task store\n * @property {Gantt.data.TaskStore} store Display store, for when Gantt is configured to display tasks from another\n * store than its task store (for example when using the TreeGroup feature)\n */\n\n/**\n * A feature displaying a summary bar in the grid footer.\n *\n * ## Summaries in the locked grid\n * For regular columns in the locked section - specify type of summary on columns, available types are:\n * <dl class=\"wide\">\n * <dt>sum <dd>Sum of all values in the column\n * <dt>add <dd>Alias for sum\n * <dt>count <dd>Number of rows\n * <dt>countNotEmpty <dd>Number of rows containing a value\n * <dt>average <dd>Average of all values in the column\n * <dt>function <dd>A custom function, used with store.reduce. Should take arguments (sum, record)\n * </dl>\n * Columns can also specify a {@link Grid.column.Column#config-summaryRenderer} to format the calculated sum.\n *\n * ## Summaries in the time axis grid\n *\n * To output summaries in the ticks of the time axis summary bar, either provide a {@link #config-renderer} or use\n * {@link #config-summaries}. The `renderer` method provides the current tick `startDate` and `endDate` which you\n * can use to output the data you want to present in each summary cell.\n *\n * ```javascript\n * features : {\n *     summary     : {\n *         // Find all intersecting task and render the count in each cell\n *         renderer: ({ taskStore, startDate, endDate }) => {\n *             const intersectingTasks = taskStore.query(task =>\n *                 // Gantt by default renders tasks as early as possible, if loaded with un-normalized data there\n *                 // might not be any start and end dates calculated yet\n *                 task.isScheduled &&\n *                 // Find tasks that intersect the current tick\n *                 DateHelper.intersectSpans(task.startDate, task.endDate, startDate, endDate)\n *             );\n *\n *             return intersectingTasks.length;\n *         }\n *     }\n * }\n * ```\n *\n * {@inlineexample Gantt/feature/Summary.js}\n *\n * This feature is <strong>disabled</strong> by default.\n *\n * @extends Scheduler/feature/TimelineSummary\n * @classtype summary\n * @feature\n * @demo Gantt/summary\n * @typings Grid/feature/Summary -> Grid/feature/GridSummary\n * @typings Scheduler/feature/Summary -> Scheduler/feature/SchedulerSummary\n */\nexport default class Summary extends TimelineSummary {\n    //region Config\n\n    static get $name() {\n        return 'Summary';\n    }\n\n    static get configurable() {\n        return {\n            /**\n             * Array of summary configs which consists of a label and a {@link #config-renderer} function\n             *\n             * ```javascript\n             * new Gantt({\n             *     features : {\n             *         summary : {\n             *             summaries : [\n             *                 {\n             *                     label : 'Label',\n             *                     renderer : ({ startDate, endDate, taskStore }) => {\n             *                         // return display value\n             *                         returns '<div>Renderer output</div>';\n             *                     }\n             *                 }\n             *             ]\n             *         }\n             *     }\n             * });\n             * ```\n             *\n             * @config {GanttSummaryOptions[]}\n             */\n            summaries : null,\n\n            /**\n             * Renderer function for a single time axis tick. Should calculate a sum and return HTML as a result.\n             *\n             * ```javascript\n             * new Gantt({\n             *     features : {\n             *         summary : {\n             *             renderer : ({ startDate, endDate, taskStore }) => {\n             *                 // return display value\n             *                 returns '<div>Renderer output</div>';\n             *             }\n             *         }\n             *     }\n             * });\n             * ```\n             *\n             * @param {Date} startDate Tick start date\n             * @param {Date} endDate Tick end date\n             * @param {Gantt.data.TaskStore} taskStore Task store\n             * @param {Gantt.data.TaskStore} store Display store, for when Gantt is configured to display tasks from\n             * another store than its task store (for example when using the TreeGroup feature)\n             * @returns {String} Html content\n             * @config {Function}\n             */\n            renderer : null\n        };\n    }\n\n    // Plugin configuration. This plugin chains some of the functions in Grid.\n    static get pluginConfig() {\n        const config = super.pluginConfig;\n\n        config.chain.push('updateTaskStore', 'bindStore');\n\n        return config;\n    }\n\n    //endregion\n\n    //region Init\n\n    construct(gantt, config) {\n        super.construct(gantt, config);\n\n        // Feature might be run from Grid (in docs), should not crash\n        if (gantt.isGanttBase) {\n            this.updateTaskStore(gantt.taskStore);\n        }\n    }\n\n    bindStore() {\n        this.updateTimelineSummaries();\n    }\n\n    //endregion\n\n    //region Render\n\n    updateTaskStore(taskStore) {\n        this.detachListeners('summaryTaskStore');\n\n        taskStore.ion({\n            name    : 'summaryTaskStore',\n            filter  : 'updateTimelineSummaries',\n            thisObj : this\n        });\n    }\n\n    /**\n     * Updates summaries.\n     * @private\n     */\n    updateTimelineSummaries() {\n        const\n            me                = this,\n            {\n                client,\n                summaries\n            }                 = me,\n            { timeAxis }      = client,\n            summaryContainer  = me.summaryBarElement;\n\n        if (summaryContainer && client.isEngineReady) {\n            Array.from(summaryContainer.children).forEach((element, i) => {\n                const tick = timeAxis.getAt(i);\n\n                let html    = '',\n                    tipHtml = `<header>${me.L('L{Summary for}', client.getFormattedDate(tick.startDate))}</header>`;\n\n                summaries.forEach(config => {\n                    const\n                        value     = config.renderer({\n                            startDate     : tick.startDate,\n                            endDate       : tick.endDate,\n                            taskStore     : client.taskStore,\n                            store         : client.store,\n                            resourceStore : client.resourceStore,\n                            gantt         : client,\n                            element\n                        }),\n                        valueHtml = `<div class=\"b-timeaxis-summary-value\">${value ?? '&nbsp;'}</div>`;\n\n                    if (summaries.length > 1 || value !== '') {\n                        html += valueHtml;\n                    }\n\n                    tipHtml += `<label>${config.label || ''}</label>` + valueHtml;\n                });\n\n                element.innerHTML = html;\n                element._tipHtml  = tipHtml;\n            });\n        }\n    }\n}\n\n// Override Grids Summary with this improved version\nGridFeatureManager.registerFeature(Summary, false, 'Gantt');\n", "import RowCopyPaste from '../../Grid/feature/RowCopyPaste.js';\nimport GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\n\n/**\n * @module Gantt/feature/TaskCopyPaste\n */\n\n/**\n * Allow using [Ctrl/CMD + C/X] and [Ctrl/CMD + V] to copy/cut and paste tasks. You can configure how a newly pasted record\n * is named using {@link #function-generateNewName}\n *\n * This feature is **enabled** by default\n *\n * ```javascript\n * const gantt = new Gantt({\n *     features : {\n *         taskCopyPaste : true\n *     }\n * });\n * ```\n *\n * ## Keyboard shortcuts\n *\n * By default, this feature will react to Ctrl+C, Ctrl+X and Ctrl+V for standard clipboard actions.\n * You can reconfigure the keys used to trigger these actions, see {@link #config-keyMap} for more details.\n *\n * @extends Grid/feature/RowCopyPaste\n * @inlineexample Gantt/feature/TaskCopyPaste.js\n * @classtype taskCopyPaste\n * @feature\n */\nexport default class TaskCopyPaste extends RowCopyPaste {\n\n    static get $name() {\n        return 'TaskCopyPaste';\n    }\n\n    static get type() {\n        return 'taskCopyPaste';\n    }\n\n    static get configurable() {\n        return {\n            copyRecordText  : 'L{copyTask}',\n            cutRecordText   : 'L{cutTask}',\n            pasteRecordText : 'L{pasteTask}'\n        };\n    }\n\n    //region Events\n\n    /**\n     * Fires on the owning Gantt after a paste action is performed.\n     * @event paste\n     * @on-owner\n     * @param {Gantt.view.Gantt} source Owner gantt\n     * @param {Gantt.model.TaskModel} referenceRecord The reference task record, the clipboard task records will\n     * be pasted above this row.\n     * @param {Gantt.model.TaskModel[]} records The pasted task records\n     * @param {Gantt.model.TaskModel[]} originalRecords For a copy action, these are the records that were copied.\n     * For cut action, this is same as the `records` param.\n     * @param {Boolean} isCut `true` if this is a cut action\n     * @param {String} entityName 'task' to distinguish this event from other beforePaste events\n     */\n\n    /**\n     * Fires on the owning Gantt before a paste action is performed, return `false` to prevent the action\n     * @event beforePaste\n     * @preventable\n     * @on-owner\n     * @param {Gantt.view.Gantt} source Owner Gantt\n     * @param {Gantt.model.TaskModel} referenceRecord The reference task record, the clipboard task records will\n     * be pasted above this row.\n     * @param {Gantt.model.TaskModel[]} records The records about to be pasted\n     * @param {Boolean} isCut `true` if this is a cut action\n     * @param {String} entityName 'task' to distinguish this event from other beforePaste events\n     */\n\n    //endregion\n\n    construct(gantt, config) {\n        super.construct(gantt, config);\n\n        gantt.ion({\n            beforeRenderTask : 'onBeforeRenderTask',\n            thisObj          : this\n        });\n    }\n\n    // Used in events to separate events from different features from each other\n    entityName = 'task';\n\n    //region Display store adjustments\n\n    populateCellMenu({ record, items }) {\n        super.populateCellMenu(...arguments);\n\n        // No copy pasting when using a \"display store\"\n        if (this.client.usesDisplayStore) {\n            items.cut && (items.cut.disabled = true);\n            items.copy && (items.copy.disabled = true);\n            items.paste && (items.paste.disabled = true);\n        }\n    }\n\n    copy() {\n        !this.client.usesDisplayStore && this.copyRows();\n    }\n\n    cut() {\n        !this.client.usesDisplayStore && this.copyRows(true);\n    }\n\n    paste(referenceRecord) {\n        !this.client.usesDisplayStore && this.pasteRows(referenceRecord?.isModel ? referenceRecord : null);\n    }\n\n    //endregion\n\n    onRowCutOrCopy(taskRecord) {\n        super.onRowCutOrCopy(...arguments);\n\n        // After a row is cut or copied - also refresh the associated task bar\n        this.client.taskRendering.redraw(taskRecord);\n    }\n\n    onBeforeRenderTask({ renderData }) {\n        renderData.cls['b-cut-row'] = renderData.row.cls['b-cut-row'];\n    }\n\n    /**\n     * Clears the clipboard and refreshes the UI\n     *\n     * @category Common\n     */\n    clearClipboard() {\n        const recordsToClear = this.clipboardRecords.slice();\n        super.clearClipboard();\n        // Paste might have been a no-op if pasted at same position, force clear the CSS class\n        recordsToClear.forEach(taskRecord => this.client.taskRendering.redraw(taskRecord));\n    }\n\n    extractParents(taskRecords, idMap) {\n        const result = super.extractParents(taskRecords, idMap);\n\n        if (!this._isCut) {\n            this.depsToCopy = this.extractDependencies(taskRecords, idMap);\n        }\n\n        return result;\n    }\n\n    insertCopiedRecords(toInsert, recordReference) {\n        const\n            me     = this,\n            result = super.insertCopiedRecords(toInsert, recordReference);\n\n        toInsert.forEach(parent => parent.refreshWbs({ deep : true, useOrderedTree : true }));\n\n        me.client.dependencyStore.add(me.depsToCopy);\n\n        delete me.depsToCopy;\n\n        return result;\n    }\n\n    /**\n     * Extract dependencies from passed records. The result will include only deps via records and not include deps\n     * with foreign records.\n     * @param {Core.data.Model[]} taskRecords array of records to extract dependencies from\n     * @param {Object} idMap Map linking original node id with its copy\n     * @returns {Object[]} array of dependencies settings via passed records to apply using applyDependencies method\n     * @private\n     */\n    extractDependencies(taskRecords, idMap) {\n        // This map is required to see which tasks are already connected\n        const depsMap = {};\n\n        return taskRecords.reduce((deps, task) => {\n            task.predecessors.forEach(predecessor => {\n                const key = predecessor.id;\n\n                if (!(key in depsMap) && taskRecords.includes(predecessor.fromEvent)) {\n                    depsMap[key] = true;\n\n                    deps.push(Object.assign({}, predecessor.data, {\n                        id        : undefined,\n                        to        : undefined,\n                        toEvent   : idMap[task.id].id,\n                        toTask    : undefined,\n                        from      : undefined,\n                        fromEvent : idMap[predecessor.fromEvent.id].id,\n                        fromTask  : undefined\n                    }));\n                }\n            });\n\n            task.successors.forEach(successor => {\n                const key = successor.id;\n\n                if (!(key in depsMap) && taskRecords.includes(successor.toEvent)) {\n                    depsMap[key] = true;\n\n                    deps.push(Object.assign({}, successor.data, {\n                        id        : undefined,\n                        to        : undefined,\n                        toEvent   : idMap[successor.toEvent.id].id,\n                        toTask    : undefined,\n                        from      : undefined,\n                        fromEvent : idMap[task.id].id,\n                        fromTask  : undefined\n                    }));\n                }\n            });\n\n            return deps;\n        }, []);\n    }\n}\n\nGridFeatureManager.registerFeature(TaskCopyPaste, true, 'Gantt');\n", "import DragBase from '../../Scheduler/feature/base/DragBase.js';\nimport GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\nimport Rectangle from '../../Core/helper/util/Rectangle.js';\nimport ArrayHelper from '../../Core/helper/ArrayHelper.js';\nimport EventHelper from '../../Core/helper/EventHelper.js';\n\n/**\n * @module Gantt/feature/TaskDrag\n */\n\n/**\n * @typedef ValidationMessage\n * @property {Boolean} valid `true` for valid, `false` for invalid\n * @property {String} message Validation message\n */\n\n/**\n * Allows user to drag and drop tasks within Gantt, to change their start date.\n *\n * ## Constraining the drag drop area\n *\n * You can constrain how the dragged task is allowed to move by using {@link Gantt.view.Gantt#config-getDateConstraints}.\n * This method is configured on the Gantt instance and lets you define the date range for the dragged task programmatically.\n *\n * ## Drag drop tasks from outside\n *\n * Dragging unplanned tasks from an external grid is a very popular use case. Please refer to the [Drag from grid demo](../examples/drag-from-grid)\n * and study the [Drag from grid guide](#Gantt/guides/dragdrop/drag_tasks_from_grid.md) to learn more.\n *\n * ## Validating a drag drop operation\n *\n * It is easy to programmatically decide what is a valid drag drop operation. Use the {@link #config-validatorFn}\n * and return either `true` / `false` (optionally a message to show to the user).\n *\n * ```javascript\n * features : {\n *     taskDrag : {\n *        validatorFn(draggedTaskRecords, newStartDate) {\n *            const valid = Date.now() >= newStartDate;\n *\n *            return {\n *                valid,\n *                message : valid ? '' : 'Not allow to drag a task into the past'\n *            };\n *        }\n *     }\n * }\n * ```\n *\n * If you instead want to do a single validation upon drop, you can listen to {@link #event-beforeTaskDropFinalize}\n * and set the `valid` flag on the context object provided.\n *\n * ```javascript\n * const gantt = new Gantt({\n *     listeners : {\n *         beforeTaskDropFinalize({ context }) {\n *             const { taskRecords } = context;\n *             // Don't allow dropping a task in the past\n *             context.valid = Date.now() <= eventRecords[0].startDate;\n *         }\n *     }\n * });\n * ```\n *\n * ## Preventing drag of certain tasks\n *\n * To prevent certain tasks from being dragged, you have two options. You can set {@link Gantt.model.TaskModel#field-draggable}\n * to `false` in your data, or you can listen for the {@link Gantt.view.Gantt#event-beforeTaskDrag} event and\n * return `false` to block the drag.\n *\n * ```javascript\n * new Gantt({\n *     listeners : {\n *         beforeTaskDrag({ taskRecord }) {\n *             // Only allow dragging tasks that has not started\n *             return taskRecord.percentDone === 0;\n *         }\n *     }\n * })\n * ```\n *\n * ## Customizing the drag drop tooltip\n *\n * To show custom HTML in the tooltip, please see the {@link #config-tooltipTemplate} config. Example:\n *\n * ```javascript\n * features: {\n *     taskDrag: {\n *         // A minimal start date tooltip\n *         tooltipTemplate : ({ taskRecord, startDate }) => {\n *             return DateHelper.format(startDate, 'HH:mm');\n *         }\n *     }\n * }\n * ```\n *\n * This feature is **enabled** by default\n *\n * @extends Scheduler/feature/base/DragBase\n * @demo Gantt/basic\n * @classtype taskDrag\n * @feature\n */\nexport default class TaskDrag extends DragBase {\n    //region Config\n\n    static get $name() {\n        return 'TaskDrag';\n    }\n\n    static get configurable() {\n        return {\n            /**\n             * An empty function by default, but provided so that you can perform custom validation on\n             * the item being dragged. This function is called during the drag and drop process and also after the drop is made.\n             * Return true if the new position is valid, false to prevent the drag.\n             * @param {Gantt.model.TaskModel[]} taskRecords An array of tasks being dragged\n             * @param {Date} startDate The new start date\n             * @param {Number} duration The duration of the item being dragged\n             * @param {Event} event The event object\n             * @returns {Boolean|ValidationMessage} `true` if this validation passes, `false` if it does not.\n             *\n             * Or an object with 2 properties: `valid` -  Boolean `true`/`false` depending on validity,\n             * and `message` - String with a custom error message to display when invalid.\n             * @config {Function}\n             */\n            validatorFn : (taskRecords, startDate, duration, event) => true,\n\n            /**\n             * `this` reference for the validatorFn\n             * @config {Object}\n             */\n            validatorFnThisObj : null,\n\n            /**\n             * Gets or sets special key to activate successor pinning behavior. Supported values are:\n             * * 'ctrl'\n             * * 'shift'\n             * * 'alt'\n             * * 'meta'\n             *\n             * Assign false to disable it.\n             * @member {Boolean|String} pinSuccessors\n             */\n            /**\n             * Set to true to enable dragging task while pinning dependent tasks. By default, this behavior is activated\n             * if you hold CTRL key during drag. Alternatively, you may provide key name to use. Supported values are:\n             * * 'ctrl'\n             * * 'shift'\n             * * 'alt'\n             * * 'meta'\n             *\n             * **Note**: Only supported in forward-scheduled project\n             *\n             * @config {Boolean|String}\n             * @default\n             */\n            pinSuccessors : false,\n\n            tooltipCls : 'b-gantt-taskdrag-tooltip',\n\n            capitalizedEventName : null\n        };\n    }\n\n    afterConstruct() {\n        this.capitalizedEventName = this.capitalizedEventName || this.client.capitalizedEventName;\n        super.afterConstruct(...arguments);\n    }\n\n    changePinSuccessors(value) {\n        return EventHelper.toSpecialKey(value);\n    }\n\n    /**\n     * Template used to generate drag tooltip contents.\n     * ```javascript\n     * const gantt = new Gantt({\n     *     features : {\n     *         taskDrag : {\n     *             tooltipTemplate({taskRecord, startText}) {\n     *                 return `${taskRecord.name}: ${startText}`\n     *             }\n     *         }\n     *     }\n     * });\n     * ```\n     * @config {Function} tooltipTemplate\n     * @param {Object} data Tooltip data\n     * @param {Gantt.model.TaskModel} data.taskRecord\n     * @param {Boolean} data.valid Currently over a valid drop target or not\n     * @param {Date} data.startDate New start date\n     * @param {Date} data.endDate New end date\n     * @returns {String}\n     */\n\n    //endregion\n\n    //region Events\n\n    /**\n     * Fires on the owning Gantt before task dragging starts. Return false to prevent the action.\n     * @event beforeTaskDrag\n     * @preventable\n     * @on-owner\n     * @param {Gantt.view.Gantt} source\n     * @param {Gantt.model.TaskModel} taskRecord\n     * @param {Event} event The native browser event\n     */\n\n    /**\n     * Fires on the owning Gantt when task dragging starts\n     * @event taskDragStart\n     * @on-owner\n     * @param {Gantt.view.Gantt} source\n     * @param {Gantt.model.TaskModel[]} taskRecords\n     */\n\n    /**\n     * Fires on the owning Gantt while a task is being dragged\n     * @event taskDrag\n     * @on-owner\n     * @param {Gantt.view.Gantt} source\n     * @param {Gantt.model.TaskModel[]} taskRecords\n     * @param {Date} startDate\n     * @param {Date} endDate\n     * @param {Object} dragData\n     * @param {Boolean} changed `true` if startDate has changed.\n     */\n\n    /**\n     * Fires on the owning Gantt to allow implementer to prevent immediate finalization by setting `data.context.async = true`\n     * in the listener, to show a confirmation popup etc\n     * ```javascript\n     * scheduler.on('beforetaskdropfinalize', ({ context }) => {\n     *     context.async = true;\n     *     setTimeout(() => {\n     *         // async code don't forget to call finalize\n     *         context.finalize();\n     *     }, 1000);\n     * })\n     * ```\n     * @event beforeTaskDropFinalize\n     * @on-owner\n     * @param {Gantt.view.Gantt} source Gantt instance\n     * @param {Object} context\n     * @param {Gantt.model.TaskModel[]} context.taskRecords The dragged task records\n     * @param {Boolean} context.valid Set this to `false` to mark the drop as invalid\n     * @param {Boolean} context.async Set true to handle dragdrop asynchronously (e.g. to wait for user\n     * confirmation)\n     * @param {Function} context.finalize Call this method to finalize dragdrop. This method accepts one\n     * argument: pass true to update records, or false, to ignore changes\n     */\n\n    /**\n     * Fires on the owning Gantt after a valid task drop\n     * @event taskDrop\n     * @on-owner\n     * @param {Gantt.view.Gantt} source\n     * @param {Gantt.model.TaskModel[]} taskRecords\n     * @param {Boolean} isCopy\n     */\n\n    /**\n     * Fires on the owning Gantt after a task drop, regardless if the drop validity\n     * @event afterTaskDrop\n     * @on-owner\n     * @param {Gantt.view.Gantt} source\n     * @param {Gantt.model.TaskModel[]} taskRecords\n     * @param {Boolean} valid\n     */\n\n    //endregion\n\n    //region Init\n\n    construct(gantt, config) {\n        this.gantt = gantt;\n\n        super.construct(gantt, config);\n    }\n\n    get store() {\n        return this.gantt.store;\n    }\n\n    //endregion\n\n    //region Drag events\n\n    getDraggableElement(el) {\n        return el?.closest(this.drag.targetSelector);\n    }\n\n    resolveEventRecord(eventElement, client = this.client) {\n        return client.resolveTaskRecord(eventElement);\n    }\n\n    isElementDraggable(el, event) {\n        const\n            me           = this,\n            { client }   = me,\n            eventElement = me.getDraggableElement(el);\n\n        if (!eventElement || me.disabled || client.readOnly) {\n            return false;\n        }\n\n        // displaying something resizable within the event?\n        // if (el.closest(gantt.eventSelector).matches('[class$=\"-handle\"]')) {\n        if (el.matches('[class$=\"-handle\"]')) {\n            return false;\n        }\n\n        const eventRecord = me.resolveEventRecord(eventElement, client);\n\n        // Tasks not part of project are transient tasks in a display store, which are not meant to be manipulated\n        if (!eventRecord || !eventRecord.isDraggable || eventRecord.readOnly || !eventRecord.project) {\n            return false;\n        }\n\n        // Hook for features that need to prevent drag\n        const prevented = client[`is${me.capitalizedEventName}ElementDraggable`]?.(\n            eventElement, eventRecord, el, event\n        ) === false;\n\n        return !prevented;\n    }\n\n    triggerBeforeEventDrag(eventType, event) {\n        return this.client.trigger(eventType, event);\n    }\n\n    triggerEventDrag(dragData, start) {\n        // Trigger the event on every mousemove so that features which need to adjust\n        // Such as dependencies and baselines can keep adjusted.\n        this.client.trigger('taskDrag', {\n            taskRecords : dragData.draggedEntities,\n            startDate   : dragData.startDate,\n            endDate     : dragData.endDate,\n            dragData,\n            changed     : dragData.startDate - start !== 0\n        });\n    }\n\n    triggerDragStart(dragData) {\n        this.client.trigger('taskDragStart', {\n            taskRecords : dragData.draggedEntities,\n            dragData\n        });\n    }\n\n    triggerDragAbort(dragData) {\n        this.client.trigger('taskDragAbort', {\n            taskRecords : dragData.draggedEntities,\n            context     : dragData\n        });\n    }\n\n    triggerDragAbortFinalized(dragData) {\n        this.client.trigger('taskDragAbortFinalized', {\n            taskRecords : dragData.draggedEntities,\n            context     : dragData\n        });\n    }\n\n    triggerAfterDrop(dragData, valid) {\n        this.currentOverClient.trigger('afterTaskDrop', {\n            taskRecords : dragData.draggedEntities,\n            context     : dragData,\n            valid\n        });\n    }\n\n    //endregion\n\n    //region Drag data\n\n    getProductDragContext(dd) {\n        return {\n            valid : true\n        };\n    }\n\n    getMinimalDragData(info) {\n        const\n            element    = this.getElementFromContext(info),\n            taskRecord = this.client.resolveTaskRecord(element);\n\n        return { taskRecord };\n    }\n\n    getTaskScheduleRegion(taskRecord, dateConstraints) {\n        return this.client.getScheduleRegion(taskRecord, true, dateConstraints);\n    }\n\n    getDateConstraints(taskRecord) {\n        return this.client.getDateConstraints?.(taskRecord);\n    }\n\n    setupProductDragData(context) {\n        // debugger\n        const\n            me              = this,\n            { client }      = me,\n            element         = context.element,\n            taskRecord      = client.resolveTaskRecord(element),\n            taskRegion      = Rectangle.from(element),\n            relatedRecords  = me.getRelatedRecords(taskRecord) || [],\n            dateConstraints = me.getDateConstraints(taskRecord),\n            eventBarEls     = [element],\n            scheduleRegion  = me.getTaskScheduleRegion(taskRecord, dateConstraints);\n\n        me.setupConstraints(\n            scheduleRegion,\n            taskRegion,\n            client.timeAxisViewModel.snapPixelAmount,\n            Boolean(dateConstraints)\n        );\n\n        // Collecting additional elements to drag\n        relatedRecords.forEach(r => {\n            ArrayHelper.include(eventBarEls, client.getElementFromTaskRecord(r, false));\n        });\n\n        const draggedEntities = [taskRecord, ...relatedRecords];\n\n        return { record : taskRecord, dateConstraints, eventBarEls, draggedEntities, taskRecords : draggedEntities };\n    }\n\n    /**\n     * Get correct axis coordinate.\n     * @private\n     * @param {Gantt.model.TaskModel} taskRecord Record being dragged\n     * @param {HTMLElement} element Element being dragged\n     * @param {Number[]} coord XY coordinates\n     * @returns {Number|Number[]} X,Y or XY\n     */\n    getCoordinate(taskRecord, element, coord) {\n        return coord[0];\n    }\n\n    //endregion\n\n    //region Finalize & validation\n\n    // Called from EventDragBase to assert if a drag is valid or not\n    checkDragValidity(dragData, event) {\n        return this.validatorFn.call(this.validatorFnThisObj || this,\n            dragData.draggedEntities,\n            dragData.startDate,\n            dragData.duration,\n            event\n        );\n    }\n\n    /**\n     * Checks if a task can be dropped on the specified location\n     * @private\n     * @returns {Boolean} Valid (true) or invalid (false)\n     */\n    isValidDrop(dragData) {\n        return true;\n    }\n\n    /**\n     * Update tasks being dragged.\n     * @private\n     * @param {Object} context Drag data.\n     */\n    async updateRecords(context) {\n        const\n            {\n                startDate,\n                browserEvent,\n                draggedEntities : [taskRecord]\n            }                = context,\n            oldStartDate     = taskRecord.startDate;\n\n        if (this.pinSuccessors && browserEvent[this.pinSuccessors]) {\n            await taskRecord.moveTaskPinningSuccessors(startDate);\n        }\n        else {\n            await taskRecord.setStartDate(startDate, true);\n        }\n\n        // If not rejected (the startDate has changed), tell the world there was a successful drop.\n        if (taskRecord.startDate - oldStartDate) {\n            this.client.trigger('taskDrop', {\n                taskRecords : context.draggedEntities\n            });\n        }\n        else {\n            this.dragData.valid = false;\n        }\n    }\n\n    getRecordElement(task) {\n        return this.client.getElementFromTaskRecord(task, true);\n    }\n\n    get tipId() {\n        return `${this.client.id}-task-drag-tip`;\n    }\n\n    //endregion\n}\n\nGridFeatureManager.registerFeature(TaskDrag, true, 'Gantt');\n", "import DragCreateBase from '../../Scheduler/feature/base/DragCreateBase.js';\nimport GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\nimport Draggable from '../../Core/mixin/Draggable.js';\nimport DateHelper from '../../Core/helper/DateHelper.js';\n\n/**\n * @module Gantt/feature/TaskDragCreate\n */\n\n/**\n * A feature that allows the user to schedule tasks by dragging in the empty parts of the gantt timeline row. Note, this feature is only applicable for unscheduled tasks.\n * {@inlineexample Gantt/feature/TaskDragCreate.js}\n *\n * This feature is **enabled** by default\n *\n * @extends Scheduler/feature/base/DragCreateBase\n * @demo Gantt/advanced\n * @classtype taskDragCreate\n * @feature\n */\nexport default class TaskDragCreate extends DragCreateBase {\n    //region Config\n\n    static get $name() {\n        return 'TaskDragCreate';\n    }\n\n    static get configurable() {\n        return {\n            // used by gantt to only allow one task per row\n            preventMultiple : true\n        };\n    }\n\n    //endregion\n\n    //region Events\n\n    /**\n     * Fires on the owning Gantt after the task has been scheduled.\n     * @event dragCreateEnd\n     * @on-owner\n     * @param {Gantt.view.Gantt} source\n     * @param {Gantt.model.TaskModel} taskRecord\n     * @param {MouseEvent} event The ending mouseup event.\n     * @param {HTMLElement} proxyElement The proxy element showing the drag creation zone.\n     */\n\n    /**\n     * Fires on the owning Gantt at the beginning of the drag gesture\n     * @event beforeDragCreate\n     * @on-owner\n     * @param {Gantt.view.Gantt} source\n     * @param {Gantt.model.TaskModel} taskRecord\n     * @param {Date} date The datetime associated with the drag start point.\n     */\n\n    /**\n     * Fires on the owning Gantt after the drag start has created a proxy element.\n     * @event dragCreateStart\n     * @on-owner\n     * @param {Gantt.view.Gantt} source\n     * @param {HTMLElement} proxyElement The proxy representing the new event.\n     */\n\n    /**\n     * Fires on the owning Gantt to allow implementer to prevent immediate finalization by setting `data.context.async = true`\n     * in the listener, to show a confirmation popup etc\n     * ```\n     *  scheduler.on('beforedragcreatefinalize', ({context}) => {\n     *      context.async = true;\n     *      setTimeout(() => {\n     *          // async code don't forget to call finalize\n     *          context.finalize();\n     *      }, 1000);\n     *  })\n     * ```\n     * @event beforeDragCreateFinalize\n     * @on-owner\n     * @param {Gantt.view.Gantt} source Scheduler instance\n     * @param {HTMLElement} proxyElement Proxy element, representing future event\n     * @param {Object} context\n     * @param {Boolean} context.async Set true to handle drag create asynchronously (e.g. to wait for user\n     * confirmation)\n     * @param {Function} context.finalize Call this method to finalize drag create. This method accepts one\n     * argument: pass true to update records, or false, to ignore changes\n     */\n\n    /**\n     * Fires on the owning Gantt at the end of the drag create gesture whether or not\n     * a task was scheduled by the gesture.\n     * @event afterDragCreate\n     * @on-owner\n     * @param {Gantt.view.Gantt} source\n     * @param {HTMLElement} proxyElement The element showing the drag creation zone.\n     */\n\n    //endregion\n\n    //region Init\n\n    construct(gantt, config) {\n        this.gantt = gantt;\n\n        super.construct(gantt, config);\n    }\n\n    get store() {\n        return this.gantt.store;\n    }\n\n    //endregion\n\n    //region Gantt specific implementation\n\n    setupDragContext(event) {\n        const { client } = this;\n\n        // Only mousedown on an empty cell can initiate drag-create\n        if (event.target.closest?.(`.${client.timeAxisColumn.cellCls}`)) {\n            const taskRecord = client.getRecordFromElement(event.target);\n\n            // And there must be a task backing the cell.\n            if (taskRecord) {\n                // Skip the EventResize's setupDragContext. We want the base one.\n                const result = Draggable().prototype.setupDragContext.call(this, event);\n\n                result.scrollManager = client.scrollManager;\n                result.taskRecord = result.rowRecord = taskRecord;\n                return result;\n            }\n        }\n    }\n\n    startDrag(drag) {\n        // This flag must be set in startDrag\n        const\n            draggingEnd  = this.draggingEnd = drag.event.pageX > drag.startEvent.pageX,\n            { client }   = this,\n            { timeAxis } = client,\n            {\n                mousedownDate,\n                taskRecord,\n                date\n            }            = drag;\n\n        client.beginListeningForBatchedUpdates();\n        taskRecord.beginBatch();\n        taskRecord.set('startDate', DateHelper.floor(draggingEnd ? mousedownDate : date, timeAxis.resolution, undefined, client.weekStartDay));\n        taskRecord.set('endDate', DateHelper.ceil(draggingEnd ? date : mousedownDate, timeAxis.resolution, undefined, client.weekStartDay));\n\n        // This presents the task to be scheduled for validation at the proposed mouse/date point\n        // If rejected, we have to revert the batched changes\n        if (this.handleBeforeDragCreate(drag, taskRecord, drag.event) === false) {\n            this.onAborted(drag);\n            return false;\n        }\n\n        // Now it will have an element, and that's what we are dragging\n        drag.itemElement = drag.element = client.getElementFromTaskRecord(drag.taskRecord);\n\n        return super.startDrag.call(this, drag);\n    }\n\n    handleBeforeDragCreate(drag, taskRecord, event) {\n        const\n            me     = this,\n            result = me.gantt.trigger('beforeDragCreate', {\n                taskRecord,\n                date : drag.mousedownDate,\n                event\n            });\n\n        // Save date constraints\n        me.dateConstraints = me.gantt.getDateConstraints?.(taskRecord);\n\n        return result;\n    }\n\n    checkValidity(context, event) {\n        const me = this;\n\n        context.taskRecord = me.dragging.taskRecord;\n        return me.createValidatorFn.call(me.validatorFnThisObj || me, context, event);\n    }\n\n    // Row is not empty if task is scheduled\n    isRowEmpty(taskRecord) {\n        return !taskRecord.startDate || !taskRecord.endDate;\n    }\n\n    onAborted({ taskRecord }) {\n        taskRecord.cancelBatch();\n        this.client.endListeningForBatchedUpdates();\n    }\n\n    //endregion\n}\n\nGridFeatureManager.registerFeature(TaskDragCreate, true, 'Gantt');\n", "import GanttTaskEditor from '../../SchedulerPro/widget/GanttTaskEditor.js';\n\n/**\n * @module Gantt/widget/TaskEditor\n */\n\n/**\n * Provides a UI to edit tasks in a popup dialog. It is implemented as a Tab Panel with several preconfigured built-in\n * tabs. Although the default configuration may be adequate in many cases, the Task Editor is easily configurable.\n *\n * This demo shows how to use TaskEditor as a standalone widget:\n *\n * {@inlineexample Gantt/widget/TaskEditor.js}\n *\n * To hide built-in tabs or to add custom tabs, or to append widgets to any of the built-in tabs\n * use the {@link Gantt.feature.TaskEdit#config-items items} config.\n *\n * The Task editor contains tabs by default. Each tab is a container with built in widgets: text fields, grids, etc.\n *\n * | Tab ref           | Text         | Weight | Description                                           |\n * |-------------------|--------------|--------|-------------------------------------------------------|\n * | `generalTab`      | General      | 100    | Name, start/end dates, duration, percent done, effort |\n * | `predecessorsTab` | Predecessors | 200    | Grid with incoming dependencies                       |\n * | `successorsTab`   | Successors   | 300    | Grid with outgoing dependencies                       |\n * | `resourcesTab`    | Resources    | 400    | Grid with assigned resources                          |\n * | `advancedTab`     | Advanced     | 500    | Assigned calendar, scheduling mode, constraints, etc  |\n * | `notesTab`        | Notes        | 600    | Text area to add notes to the selected task           |\n *\n * ## Task editor customization example\n *\n * This example shows a custom Task Editor configuration. The built-in \"Notes\" tab is hidden, a custom \"Files\" tab is\n * added, the \"General\" tab is renamed to \"Common\" and \"Custom\" field is appended to it. Double-click on a task bar to\n * start editing:\n *\n * {@inlineexample Gantt/feature/TaskEditCustom.js}\n *\n * @extends SchedulerPro/widget/GanttTaskEditor\n */\nexport default class TaskEditor extends GanttTaskEditor {\n    // Factoryable type name\n    static get type() {\n        return 'taskeditor';\n    }\n\n    static get $name() {\n        return 'TaskEditor';\n    }\n\n    static get defaultConfig() {\n        return {\n            cls : 'b-gantt-taskeditor b-schedulerpro-taskeditor'\n        };\n    }\n}\n\n// Register this widget type with its Factory\nTaskEditor.initClass();\n", "import SchedulerProTaskEdit from '../../SchedulerPro/feature/TaskEdit.js';\nimport TaskEditor from '../widget/TaskEditor.js';\nimport GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\n\n/**\n * @module Gantt/feature/TaskEdit\n */\n\n/**\n * Feature that allows editing tasks using a {@link Gantt/widget/TaskEditor}, a popup with fields for editing task data.\n *\n * This demo shows the task edit feature, double-click child task bar to start editing:\n *\n * {@inlineexample Gantt/feature/TaskEdit.js}\n *\n * ## Customizing tabs and their widgets\n *\n * To customize tabs you can:\n *\n * * Reconfigure built in tabs by providing override configs in the {@link #config-items} config.\n * * Remove existing tabs or add your own in the {@link #config-items} config.\n * * Advanced: Reconfigure the whole editor widget using {@link #config-editorConfig} or replace the whole editor\n *   using {@link #config-editorClass}.\n *\n * This example shows a custom Task Editor configuration. The built-in \"Notes\" tab is hidden, a custom \"Files\" tab is\n * added, the \"General\" tab is renamed to \"Common\" and \"Custom\" field is appended to it. Double-click on a task bar to\n * start editing:\n *\n * {@inlineexample Gantt/feature/TaskEditCustom.js}\n *\n * To add extra items to a tab you need to specify {@link Core/widget/Container#config-items} for the tab container.\n * This example shows custom widgets added to \"General\" tab:\n *\n * {@inlineexample Gantt/feature/TaskEditExtraItems.js}\n *\n * {@region Expand to see Default tabs and fields}\n *\n * The {@link Gantt/widget/TaskEditor Task editor} contains tabs by default. Each tab is a container with built in\n * widgets: text fields, grids, etc.\n *\n * | Tab ref           | Type                                                   | Text         | Weight | Description                                            |\n * |-------------------|--------------------------------------------------------|--------------|--------|--------------------------------------------------------|\n * | `generalTab`      | {@link SchedulerPro/widget/taskeditor/GeneralTab}      | General      | 100    | Name, start/end dates, duration, percent done, effort. |\n * | `predecessorsTab` | {@link SchedulerPro/widget/taskeditor/PredecessorsTab} | Predecessors | 200    | Grid with incoming dependencies                        |\n * | `successorsTab`   | {@link SchedulerPro/widget/taskeditor/SuccessorsTab}   | Successors   | 300    | Grid with outgoing dependencies                        |\n * | `resourcesTab`    | {@link SchedulerPro/widget/taskeditor/ResourcesTab}    | Resources    | 400    | Grid with assigned resources                           |\n * | `advancedTab`     | {@link SchedulerPro/widget/taskeditor/AdvancedTab}     | Advanced     | 500    | Assigned calendar, scheduling mode, constraints, etc.  |\n * | `notesTab`        | {@link SchedulerPro/widget/taskeditor/NotesTab}        | Notes        | 600    | Text area to add notes to the selected task            |\n *\n * ### General tab\n *\n * General tab contains widgets for basic configurations\n *\n * | Widget ref    | Type                                       | Text       | Weight | Description                                                |\n * |---------------|--------------------------------------------|------------|--------|------------------------------------------------------------|\n * | `name`        | {@link Core/widget/TextField}              | Name       | 100    | Task name                                                  |\n * | `percentDone` | {@link Core/widget/NumberField}            | % Complete | 200    | Shows what part of task is done already in percentage      |\n * | `effort`      | {@link SchedulerPro/widget/EffortField}    | Effort     | 300    | Amount of working time required to complete the whole task |\n * | `divider`     | {@link Core/widget/Widget}                 |            | 400    | Visual splitter between 2 groups of fields                 |\n * | `startDate`   | {@link SchedulerPro/widget/StartDateField} | Start      | 500    | Shows when the task begins                                 |\n * | `endDate`     | {@link SchedulerPro/widget/EndDateField}   | Finish     | 600    | Shows when the task ends                                   |\n * | `duration`    | {@link Core/widget/DurationField}          | Duration   | 700    | Shows how long the task is                                 |\n *\n * ### Predecessors tab\n *\n * Predecessors tab contains a grid with incoming dependencies and controls to remove/add dependencies\n *\n * | Widget ref | Type                        | Weight | Description                                                      |\n * |------------|-----------------------------|--------|------------------------------------------------------------------|\n * | `grid`     | {@link Grid/view/Grid}      | 100    | Predecessors task name, dependency type and lag                  |\n * | `toolbar`  | {@link Core/widget/Toolbar} | 200    | Control buttons                                                  |\n * | \\>`add`    | {@link Core/widget/Button}  | 210    | Adds a new predecessor, select task using the name column editor |\n * | \\>`remove` | {@link Core/widget/Button}  | 220    | Removes selected incoming dependency                             |\n *\n * \\> - nested items\n *\n * ### Successors tab\n *\n * Successors tab contains a grid with outgoing dependencies and controls to remove/add dependencies\n *\n * | Widget ref | Type                        | Weight | Description                                                    |\n * |------------|-----------------------------|--------|----------------------------------------------------------------|\n * | `grid`     | {@link Grid/view/Grid}      | 100    | Successors task name, dependency type and lag                  |\n * | `toolbar`  | {@link Core/widget/Toolbar} | 200    | Control buttons                                                |\n * | \\>`add`    | {@link Core/widget/Button}  | 210    | Adds a new successor, select task using the name column editor |\n * | \\>`remove` | {@link Core/widget/Button}  | 220    | Removes selected outgoing dependency                           |\n *\n * \\> - nested items\n *\n * ### Resources tab\n *\n * Resources tab contains a grid with assignments\n *\n * | Widget ref | Type                        | Weight | Description                                                                                                            |\n * |------------|-----------------------------|--------|------------------------------------------------------------------------------------------------------------------------|\n * | `grid`     | {@link Grid/view/Grid}      | 100    | Assignments resource name and units (100 means that the assigned resource spends 100% of its working time to the task) |\n * | `toolbar`  | {@link Core/widget/Toolbar} | 200    | Shows control buttons                                                                                                  |\n * | \\>`add`    | {@link Core/widget/Button}  | 210    | Adds a dummy assignment, select resource using the name column editor                                                  |\n * | \\>`remove` | {@link Core/widget/Button}  | 220    | Removes selected assignment                                                                                            |\n *\n * \\> - nested items\n *\n * ### Advanced tab\n *\n * Advanced tab contains additional task scheduling options\n *\n * | Widget ref                    | Type                                             | Weight | Description                                                                                                                  |\n * |-------------------------------|--------------------------------------------------|--------|------------------------------------------------------------------------------------------------------------------------------|\n * | `calendarField`               | {@link Core/widget/Combo}                        | 100    | Shows a list of available calendars for this task                                                                            |\n * | `manuallyScheduledField`      | {@link Core/widget/Checkbox}                     | 200    | If checked, the task is not considered in scheduling                                                                         |\n * | `schedulingModeField`         | {@link SchedulerPro/widget/SchedulingModePicker} | 300    | Shows a list of available scheduling modes for this task                                                                     |\n * | `effortDrivenField`           | {@link Core/widget/Checkbox}                     | 400    | If checked, the effort of the task is kept intact, and the duration is updated. Works when scheduling mode is \"Fixed Units\". |\n * | `divider`                     | {@link Core/widget/Widget}                       | 500    | Visual splitter between 2 groups of fields                                                                                   |\n * | `constraintTypeField`         | {@link SchedulerPro/widget/ConstraintTypePicker} | 600    | Shows a list of available constraints for this task                                                                          |\n * | `constraintDateField`         | {@link Core/widget/DateField}                    | 700    | Shows a date for the selected constraint type                                                                                |\n * | `rollupField`                 | {@link Core/widget/Checkbox}                     | 800    | If checked, shows a bar below the parent task. Works when the \"Rollup\" feature is enabled.                                   |\n * | `inactiveField`               | {@link Core/widget/Checkbox}                     | 900    | Allows to inactivate the task so it won't take part in the scheduling process.                                               |\n * | `ignoreResourceCalendarField` | {@link Core/widget/Checkbox}                     | 1000   | If checked the task ignores the assigned resource calendars when scheduling                                                  |\n *\n * ### Notes tab\n *\n * Notes tab contains a text area to show notes\n *\n * | Field ref   | Type                              | Weight | Description                                     |\n * |-------------|-----------------------------------|--------|-------------------------------------------------|\n * | `noteField` | {@link Core/widget/TextAreaField} | 100    | Shows a text area to add text notes to the task |\n *\n * {@endregion}\n *\n * ## Removing a built in item\n *\n * To remove a built in tab or widget, specify its `ref` as `false` in the {@link #config-items} config:\n *\n * ```javascript\n * const gantt = new Gantt({\n *     features : {\n *         taskEdit : {\n *             items : {\n *                 generalTab      : {\n *                     items : {\n *                         // Remove \"% Complete\",\"Effort\", and the divider in the \"General\" tab\n *                         percentDone : false,\n *                         effort      : false,\n *                         divider     : false\n *                     }\n *                 },\n *                 // Remove all tabs except the \"General\" tab\n *                 notesTab        : false,\n *                 predecessorsTab : false,\n *                 successorsTab   : false,\n *                 resourcesTab    : false,\n *                 advancedTab     : false\n *             }\n *         }\n *     }\n * })\n * ```\n *\n * The built in buttons are:\n *\n * | Widget ref     | Type                       | Weight | Description                             |\n * |----------------|----------------------------|--------|-----------------------------------------|\n * | `saveButton`   | {@link Core/widget/Button} | 100    | Save event button on the bbar           |\n * | `deleteButton` | {@link Core/widget/Button} | 200    | Delete event button on the bbar         |\n * | `cancelButton` | {@link Core/widget/Button} | 300    | Cancel event editing button on the bbar |\n *\n * Bottom buttons may be hidden using `bbar` config passed to `editorConfig`:\n *\n* ```javascript\n * const gantt = new Gantt({\n *     features : {\n *         taskEdit : {\n *             editorConfig : {\n *                 bbar : {\n *                     items : {\n *                         deleteButton : false\n *                     }\n *                 }\n *             }\n *         }\n *     }\n * })\n * ```\n *\n * ## Customizing a built in item\n *\n * To customize a built in tab or field, use its `ref` as the key in the {@link #config-items} config and specify the configs you want\n * to change (they will be merged with the tabs or fields default configs correspondingly):\n *\n * ```javascript\n * const gantt = new Gantt({\n *     features : {\n *         taskEdit : {\n *             items : {\n *                 generalTab      : {\n *                     // Rename \"General\" tab\n *                     title : 'Main',\n *                     items : {\n *                         // Rename \"% Complete\" field\n *                         percentDone : {\n *                             label : 'Status'\n *                         }\n *                     }\n *                 }\n *             }\n *         }\n *     }\n * })\n * ```\n *\n * ## Adding a custom item\n *\n * To add a custom tab or field, add an entry to the {@link #config-items} config. When you add a field,\n * the `name` property links the input field to a field in the loaded task record:\n *\n * ```javascript\n * const gantt = new Gantt({\n *     features : {\n *         taskEdit : {\n *             items : {\n *                 generalTab : {\n *                     items : {\n *                         // Add new field to the last position\n *                         newGeneralField : {\n *                             type   : 'textfield',\n *                             weight : 710,\n *                             label  : 'New field in General Tab',\n *                             // Name of the field matches data field name, so value is loaded/saved automatically\n *                             name   : 'custom'\n *                         }\n *                     }\n *                 },\n *                 // Add a custom tab to the first position\n *                 newTab     : {\n *                     // Tab is a FormTab by default\n *                     title  : 'New tab',\n *                     weight : 90,\n *                     items  : {\n *                         newTabField : {\n *                             type   : 'textfield',\n *                             weight : 710,\n *                             label  : 'New field in New Tab',\n *                             // Name of the field matches data field name, so value is loaded/saved automatically.\n *                             // In this case it is equal to the Task \"name\" field.\n *                             name   : 'name'\n *                         }\n *                     }\n *                 }\n *             }\n *         }\n *     }\n * })\n * ```\n *\n * To turn off the Task Editor just simple disable the feature.\n *\n * ```javascript\n * const gantt = new Gantt({\n *     features : {\n *         taskEdit : false\n *     }\n * })\n * ```\n *\n * For more info on customizing the Task Editor, please see Guides/Customization/Customize task editor\n *\n * @extends SchedulerPro/feature/TaskEdit\n * @demo Gantt/taskeditor\n * @classtype taskEdit\n * @feature\n *\n * @typings SchedulerPro/feature/TaskEdit -> SchedulerPro/feature/SchedulerProTaskEdit\n */\nexport default class TaskEdit extends SchedulerProTaskEdit {\n\n    static get $name() {\n        return 'TaskEdit';\n    }\n\n    static get defaultConfig() {\n        return {\n            /**\n             * The event that shall trigger showing the editor. Set to `` or null to disable editing of existing events.\n             * @config {String|null}\n             * @default\n             * @category Editor\n             */\n            triggerEvent : 'taskdblclick',\n\n            saveAndCloseOnEnter : true,\n\n            /**\n             * Class to use as the editor. By default it uses {@link Gantt.widget.TaskEditor}\n             * @config {Core.widget.Widget}\n             * @typings {typeof Widget}\n             * @category Editor\n             */\n            editorClass : TaskEditor\n        };\n    }\n\n    static get pluginConfig() {\n        return {\n            chain  : ['populateTaskMenu', 'onTaskEnterKey'],\n            assign : ['editTask']\n        };\n    }\n\n    /**\n     * Shows a {@link Gantt/widget/TaskEditor} to edit the passed task. This function is exposed on\n     * the Gantt instance and can be called as `gantt.editTask()`.\n     * @param {Gantt.model.TaskModel} taskRecord Task to edit\n     * @param {HTMLElement} [element] The task element\n     * @returns {Promise} Promise which resolves after the editor is shown\n     * @on-owner\n     * @async\n     */\n    editTask(taskRecord, element) {\n        return this.editEvent(taskRecord, null, element);\n    }\n\n    onActivateEditor({ taskRecord, taskElement }) {\n        this.editTask(taskRecord, taskElement);\n    }\n\n    getElementFromTaskRecord(taskRecord) {\n        return this.client.getElementFromTaskRecord(taskRecord);\n    }\n\n    onTaskEnterKey({ taskRecord }) {\n        this.editTask(taskRecord);\n    }\n\n    //region Context menu\n\n    populateTaskMenu({ taskRecord, selection, items }) {\n        // Task without project is transient record in a display store and not meant to be manipulated\n        if (!this.client.readOnly && selection.length <= 1 && taskRecord.project) {\n            items.editTask = {\n                text        : 'L{Gantt.Edit}',\n                localeClass : this.client,\n                cls         : 'b-separator',\n                icon        : 'b-icon b-icon-edit',\n                weight      : 100,\n                disabled    : this.disabled || taskRecord.readOnly,\n                onItem      : () => this.editTask(taskRecord)\n            };\n        }\n    }\n\n    //endregion\n\n    onEventEnterKey({ taskRecord, target }) {\n        this.editTask(taskRecord);\n    }\n\n    scrollTaskIntoView(taskRecord) {\n        return this.scrollEventIntoView(taskRecord);\n    }\n\n    scrollEventIntoView(eventRecord) {\n        return this.client.scrollTaskIntoView(eventRecord);\n    }\n}\n\nGridFeatureManager.registerFeature(TaskEdit, true, 'Gantt');\n", "import GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\nimport EventMenu from '../../Scheduler/feature/EventMenu.js';\nimport Objects from '../../Core/helper/util/Objects.js';\n\n/**\n * @module Gantt/feature/TaskMenu\n */\n\n/**\n * Displays a context menu for tasks. Items are populated by other features and/or application code.\n * Configure it with `false` to disable it completely. If enabled, {@link Grid.feature.CellMenu} feature\n * is not available. Cell context menu items are handled by this feature.\n *\n * ## Default task menu items\n *\n * Here is the list of menu items provided by the Task menu feature and populated by the other features:\n *\n * | Reference             | Text                 | Weight | Feature                            | Description                                                                      |\n * |-----------------------|----------------------|--------|------------------------------------|----------------------------------------------------------------------------------|\n * | `editTask`            | Edit task            | 100    | {@link Gantt.feature.TaskEdit}      | Edit the task                                                                    |\n * | `cut`                 | Cut task             | 110    | {@link Gantt.feature.TaskCopyPaste} | Cut the task                                                                     |\n * | `copy`                | Copy task            | 120    | {@link Gantt.feature.TaskCopyPaste} | Copy the task                                                                    |\n * | `paste`               | Paste task           | 130    | {@link Gantt.feature.TaskCopyPaste} | Paste the task                                                                   |\n * | `search`*             | Search for value     | 200    | {@link Grid.feature.Search}         | Search for cell text                                                             |\n * | `filterDateEquals`*   | On                   | 300    | {@link Grid.feature.Filter}         | Filter by columns field, equal to cell value                                     |\n * | `filterDateBefore`*   | Before               | 310    | {@link Grid.feature.Filter}         | Filter by columns field, less than cell value                                    |\n * | `filterDateAfter`*    | After                | 320    | {@link Grid.feature.Filter}         | Filter by columns field, more than cell value                                    |\n * | `filterNumberEquals`* | Equals               | 300    | {@link Grid.feature.Filter}         | Filter by columns field, equal to cell value                                     |\n * | `filterNumberLess`*   | Less than            | 310    | {@link Grid.feature.Filter}         | Filter by columns field, less than cell value                                    |\n * | `filterNumberMore`*   | More than            | 320    | {@link Grid.feature.Filter}         | Filter by columns field, more than cell value                                    |\n * | `filterStringEquals`* | Equals               | 300    | {@link Grid.feature.Filter}         | Filter by columns field, equal to cell value                                     |\n * | `filterRemove`*       | Remove filter        | 400    | {@link Grid.feature.Filter}         | Stop filtering by selected column field                                          |\n * | `add`                 | Add...               | 500    | *This feature*                      | Submenu for adding tasks                                                         |\n * | \\>`addTaskAbove`      | Task above           | 510    | *This feature*                      | Add a new task above the selected task                                           |\n * | \\>`addTaskBelow`      | Task below           | 520    | *This feature*                      | Add a new task below the selected task                                           |\n * | \\>`milestone`         | Milestone            | 530    | *This feature*                      | Add a new milestone below the selected task                                      |\n * | \\>`subtask`           | Subtask              | 540    | *This feature*                      | Add a new task as a child of the current, turning it into a parent               |\n * | \\>`successor`         | Successor            | 550    | *This feature*                      | Add a new task below current task, linked using an \"Finish-to-Start\" dependency  |\n * | \\>`predecessor`       | Predecessor          | 560    | *This feature*                      | Add a new task above current task, linked using an \"Finish-to-Start\" dependency  |\n * | `convertToMilestone`  | Convert to milestone | 600    | *This feature*                      | Turns the selected task into a milestone. Shown for leaf tasks only              |\n * | `splitTask`           | Split task           | 650    | {@link SchedulerPro.feature.EventSegments} | Split the task                                                                   |\n * | `indent`              | Indent               | 700    | *This feature*                      | Add the task as a child of its previous sibling, turning that task into a parent |\n * | `outdent`             | Outdent              | 800    | *This feature*                      | Turn the task into a sibling of its parent                                       |\n * | `deleteTask`          | Delete task          | 900    | *This feature*                      | Remove the selected task                                                         |\n * | `linkTasks`           | Add dependencies     | 1000   | *This feature*                      | Add dependencies between two or more selected tasks                                                         |\n * | `unlinkTasks`         | Remove dependencies  | 1010   | *This feature*                      | Removes dependencies between selected tasks                                                         |\n *\n * \\* - items that are shown for the locked grid cells only\n *\n * \\> - first level of submenu\n *\n * ## Customizing the menu items\n *\n * The menu items in the Task menu can be customized, existing items can be changed or removed,\n * and new items can be added. This is handled using the `items` config of the feature.\n *\n * To add extra items for all events:\n *\n * ```javascript\n * const gantt = new Gantt({\n *     features : {\n *         taskMenu : {\n *             // Extra items for all events\n *             items : {\n *                 flagTask : {\n *                     text : 'Extra',\n *                     icon : 'b-fa b-fa-fw b-fa-flag',\n *                     onItem({taskRecord}) {\n *                         taskRecord.flagged = true;\n *                     }\n *                 }\n *             }\n *         }\n *     }\n * });\n * ```\n *\n * ## Remove menu/submenu items\n *\n * Items can be removed from the menu:\n *\n * ```javascript\n * const gantt = new Gantt({\n *     features : {\n *         taskMenu : {\n *             items : {\n *                 // Hide delete task option\n *                 deleteTask: false,\n *\n *                 // Hide item from the `add` submenu\n *                 add: {\n *                     menu: {\n *                          subtask: false\n *                     }\n *                 }\n *             }\n *         }\n *     }\n * });\n * ```\n *\n * ## Manipulate items for specific tasks\n *\n * Items can behave different depending on the type of the task:\n *\n * ```javascript\n * const gantt = new Gantt({\n *     features : {\n *         taskMenu : {\n *             // Process items before menu is shown\n *             processItems({ items, taskRecord }) {\n *                  // Push an extra item for conferences\n *                  if (taskRecord.type === 'conference') {\n *                      items.showSessions = {\n *                          text : 'Show sessions',\n *                          ontItem({taskRecord}) {\n *                              // ...\n *                          }\n *                      };\n *                  }\n *\n *                  // Do not show menu for secret events\n *                  if (taskRecord.type === 'secret') {\n *                      return false;\n *                  }\n *             }\n *         }\n *     }\n * });\n * ```\n *\n * Full information of the menu customization can be found in the \"Customizing the Task menu\" guide.\n *\n * This feature is **enabled** by default\n *\n * @extends Scheduler/feature/EventMenu\n * @demo Gantt/taskmenu\n * @classtype taskMenu\n * @feature\n *\n * @inlineexample Gantt/feature/TaskMenu.js\n */\nexport default class TaskMenu extends EventMenu {\n    //region Config\n\n    static get $name() {\n        return 'TaskMenu';\n    }\n\n    static get defaultConfig() {\n        return {\n            type : 'task',\n\n            /**\n             * A function called before displaying the menu that allows manipulations of its items.\n             * Returning `false` from this function prevents the menu being shown.\n             *\n             * ```javascript\n             * features         : {\n             *    taskMenu : {\n             *         processItems({ items, taskRecord }) {\n             *             // Add or hide existing items here as needed\n             *             items.myAction = {\n             *                 text   : 'Cool action',\n             *                 icon   : 'b-fa b-fa-fw b-fa-ban',\n             *                 onItem : () => console.log(`Clicked ${eventRecord.name}`),\n             *                 weight : 1000 // Move to end\n             *             };\n             *\n             *            if (!eventRecord.allowDelete) {\n             *                 items.deleteEvent.hidden = true;\n             *             }\n             *         }\n             *     }\n             * },\n             * ```\n             * @param {Object} context An object with information about the menu being shown\n             * @param {Gantt.model.TaskModel} context.taskRecord The record representing the current task\n             * @param {Grid.column.Column} context.column The current column\n             * @param {Object<String,MenuItemConfig>} context.items An object containing the {@link Core.widget.MenuItem menu item} configs keyed by their id\n             * @param {Event} context.event The DOM event object that triggered the show\n             * @config {Function}\n             * @preventable\n             */\n            processItems : null\n\n            /**\n             * This is a preconfigured set of items used to create the default context menu.\n             *\n             * ```javascript\n             * const gantt = new Gantt({\n             *     features : {\n             *         taskMenu : {\n             *             items : {\n             *                 add                 : false,\n             *                 convertToMilestone  : false\n             *             }\n             *         }\n             *     }\n             * });\n             * ```\n             * The `items` provided by this feature are listed below. These are the property names which you may\n             * configure:\n             *\n             * - `add` A submenu option containing a `menu` config which contains the following named items:\n             *     * `addTaskAbove` Inserts a sibling task above the context task.\n             *     * `addTaskBelow` Inserts a sibling task below the context task.\n             *     * `milestone` Inserts a sibling milestone below the context task.\n             *     * `subtask` Appends a child task to the context task. This menu supports an \"at\" property that\n             *       can be set to 'end' to append new tasks to the end of the parent task's children. By default,\n             *       (at = 'start'), new subtasks are inserted as the firstChild of the parent task.\n             *     * `successor` Adds a sibling task linked by a dependence below the context task.\n             *     * `predecessor` Adds a sibling task linked by a dependence above the context task.\n             *  - `deleteTask` Deletes the context task.\n             *  - `indent` Indents the context task by adding it as a child of its previous sibling.\n             *  - `outdent` Outdents the context task by adding it as the final sibling of its parent.\n             *  - `convertToMilestone` Converts the context task to a zero duration milestone.\n             *\n             * See the feature config in the above example for details.\n             *\n             * @config {Object<String,MenuItemConfig|Boolean|null>} items\n             */\n        };\n    }\n\n    static get pluginConfig() {\n        const config = super.pluginConfig;\n\n        config.chain.push('populateTaskMenu');\n\n        return config;\n    }\n\n    //endregion\n\n    construct(gantt, config = {}) {\n        super.construct(...arguments);\n\n        this.gantt = gantt;\n\n        if (gantt.features.cellMenu) {\n            console.warn('`CellMenu` feature is ignored, when `TaskMenu` feature is enabled. If you need cell specific menu items, please configure `TaskMenu` feature items instead.');\n            gantt.features.cellMenu.disabled = true;\n        }\n    }\n\n    //region Events\n\n    /**\n     * This event fires on the owning Gantt before the context menu is shown for a task. Allows manipulation of the items\n     * to show in the same way as in `processItems`. Returning false from a listener prevents the menu from\n     * being shown.\n     * @event taskMenuBeforeShow\n     * @on-owner\n     * @preventable\n     * @param {Gantt.view.Gantt} source\n     * @param {MenuItemConfig[]} items Menu item configs\n     * @param {Gantt.model.TaskModel} taskRecord Event record for which the menu was triggered\n     * @param {HTMLElement} taskElement\n     */\n\n    /**\n     * This event fires on the owning Gantt when an item is selected in the context menu.\n     * @event taskMenuItem\n     * @on-owner\n     * @param {Gantt.view.Gantt} source\n     * @param {Core.widget.MenuItem} item\n     * @param {Gantt.model.TaskModel} taskRecord\n     * @param {HTMLElement} taskElement\n     */\n\n    /**\n     * This event fires on the owning Gantt after showing the context menu for an event\n     * @event taskMenuShow\n     * @on-owner\n     * @param {Gantt.view.Gantt} source\n     * @param {Core.widget.Menu} menu The menu\n     * @param {Gantt.model.TaskModel} taskRecord Event record for which the menu was triggered\n     * @param {HTMLElement} taskElement\n     */\n\n    //endregion\n\n    getDataFromEvent(event) {\n        const\n            { client }    = this,\n            targetElement = this.getTargetElementFromEvent(event),\n            // to resolve record from a task element or from a grid cell\n            taskRecord    = client.resolveTaskRecord(targetElement) || client.getRecordFromElement(targetElement),\n            taskElement   = taskRecord && client.getElementFromTaskRecord(taskRecord, false); // get wrapper;\n\n        return Objects.assign({\n            event,\n            targetElement,\n            taskElement,\n            taskRecord\n        }, client.getCellDataFromEvent(event));\n    }\n\n    callChainablePopulateMenuMethod(eventParams) {\n        // When context menu is called for a task cell, need to collect items from features\n        // which usually add items to CellMenu in Grid and Scheduler,\n        // since CellMenu feature is disabled when TaskMenu feature is enabled.\n        if (eventParams.cellData && this.client.populateCellMenu) {\n            this.client.populateCellMenu(eventParams);\n        }\n\n        super.callChainablePopulateMenuMethod(...arguments);\n    }\n\n    shouldShowMenu(eventParams) {\n        const { column } = eventParams;\n\n        return eventParams.taskRecord && (!column || column.enableCellContextMenu !== false);\n    }\n\n    getElementFromRecord(record) {\n        return this.client.getElementFromTaskRecord(record);\n    }\n\n    populateTaskMenu({ items, column, selection, taskRecord }) {\n        const\n            { client }    = this,\n            {\n                isTreeGrouped,\n                usesDisplayStore\n            }             = client,\n            // Context menu on the selection offers multi actions on the selection.\n            // Context menu on a non-selected record offers single actions on the context record.\n            multiSelected = selection.includes(taskRecord) && selection.length > 1;\n\n        items.add                = {\n            disabled : client.readOnly || isTreeGrouped || usesDisplayStore,\n            hidden   : multiSelected\n        };\n        items.convertToMilestone = {\n            disabled : client.readOnly || taskRecord.readOnly,\n            hidden   : taskRecord.isParent || taskRecord.milestone\n        };\n        items.indent             = {\n            disabled : client.readOnly || !taskRecord.previousSibling || taskRecord.readOnly || isTreeGrouped || usesDisplayStore\n        };\n        items.outdent            = {\n            disabled : client.readOnly || taskRecord.parent === client.taskStore.rootNode || taskRecord.readOnly || isTreeGrouped || usesDisplayStore\n        };\n        items.deleteTask         = {\n            disabled : client.readOnly || taskRecord.readOnly\n        };\n        items.linkTasks          = {\n            disabled : !multiSelected\n        };\n        items.unlinkTasks        = {\n            disabled : items.linkTasks.disabled\n        };\n\n        // TaskMenu feature is responsible for cell items\n        if (column?.cellMenuItems) {\n            Objects.merge(items, column.cellMenuItems);\n        }\n    }\n\n    // This generates the fixed, unchanging part of the items and is only called once\n    // to generate the baseItems of the feature.\n    // The dynamic parts which are set by populateEventMenu have this merged into them.\n    changeItems(items) {\n        const { client } = this;\n\n        return Objects.merge({\n            add : {\n                text   : 'L{Gantt.Add}',\n                cls    : 'b-separator',\n                icon   : 'b-icon-add',\n                weight : 500,\n                menu   : {\n                    addTaskAbove : {\n                        text   : 'L{Gantt.Task above}',\n                        weight : 510,\n                        icon   : 'b-icon-up',\n                        onItem({ taskRecord }) {\n                            client.addTaskAbove(taskRecord);\n                        }\n                    },\n                    addTaskBelow : {\n                        text   : 'L{Gantt.Task below}',\n                        weight : 520,\n                        icon   : 'b-icon-down',\n                        onItem({ taskRecord }) {\n                            client.addTaskBelow(taskRecord);\n                        }\n                    },\n                    milestone : {\n                        text   : 'L{Gantt.Milestone}',\n                        weight : 530,\n                        icon   : 'b-icon-milestone',\n                        onItem({ taskRecord }) {\n                            client.addMilestoneBelow(taskRecord);\n                        }\n                    },\n                    subtask : {\n                        text   : 'L{Gantt.Sub-task}',\n                        weight : 540,\n                        icon   : 'b-icon-subtask',\n                        at     : 'start',\n                        onItem({ taskRecord }) {\n                            client.addSubtask(taskRecord, { at : this.at });\n                        }\n                    },\n                    successor : {\n                        text   : 'L{Gantt.Successor}',\n                        weight : 550,\n                        icon   : 'b-icon-successor',\n                        onItem({ taskRecord }) {\n                            client.addSuccessor(taskRecord);\n                        }\n                    },\n                    predecessor : {\n                        text   : 'L{Gantt.Predecessor}',\n                        weight : 560,\n                        icon   : 'b-icon-predecessor',\n                        onItem({ taskRecord }) {\n                            client.addPredecessor(taskRecord);\n                        }\n                    }\n                }\n            },\n            convertToMilestone : {\n                icon   : 'b-icon-milestone',\n                text   : 'L{Gantt.Convert to milestone}',\n                weight : 600,\n                onItem({ taskRecord }) {\n                    taskRecord.convertToMilestone();\n                }\n            },\n            indent : {\n                text      : 'L{Gantt.Indent}',\n                icon      : 'b-icon-indent',\n                weight    : 700,\n                separator : true,\n                onItem({ selection, taskRecord }) {\n                    // Context menu on the selection offers multi actions on the selection.\n                    // Context menu on a non-selected record offers single actions on the context record.\n                    client.indent(selection.includes(taskRecord) ? selection : taskRecord);\n                }\n            },\n            outdent : {\n                text   : 'L{Gantt.Outdent}',\n                icon   : 'b-icon-outdent',\n                weight : 800,\n                onItem({ selection, taskRecord }) {\n                    // Context menu on the selection offers multi actions on the selection.\n                    client.outdent(selection.includes(taskRecord) ? selection : taskRecord);\n                }\n            },\n            deleteTask : {\n                text   : 'L{Gantt.Delete task}',\n                icon   : 'b-icon-trash',\n                cls    : 'b-separator',\n                weight : 900,\n                onItem({ selection, taskRecord }) {\n                    // Context menu on the selection offers multi actions on the selection.\n                    // Context menu on a non-selected record offers single actions on the context record.\n                    client.store.remove(selection.includes(taskRecord) ? selection : taskRecord);\n                }\n            },\n            linkTasks : {\n                text   : 'L{Gantt.linkTasks}',\n                icon   : 'b-icon-link',\n                cls    : 'b-separator',\n                weight : 1000,\n                onItem({ selection }) {\n                    client.store.linkTasks(selection);\n                }\n            },\n            unlinkTasks : {\n                text   : 'L{Gantt.unlinkTasks}',\n                icon   : 'b-icon-unlink',\n                weight : 1010,\n                onItem({ selection }) {\n                    client.store.unlinkTasks(selection);\n                }\n            }\n        }, items);\n    }\n\n}\n\nTaskMenu.featureClass = '';\n\nGridFeatureManager.registerFeature(TaskMenu, true, 'Gantt');\n", "import GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\nimport DateHelper from '../../Core/helper/DateHelper.js';\nimport InstancePlugin from '../../Core/mixin/InstancePlugin.js';\nimport AttachToProjectMixin from '../../Scheduler/data/mixin/AttachToProjectMixin.js';\nimport Tooltip from '../../Core/widget/Tooltip.js';\nimport ObjectHelper from '../../Core/helper/ObjectHelper.js';\nimport EventHelper from '../../Core/helper/EventHelper.js';\n\nconst casedEventName = {\n    click       : 'Click',\n    dblclick    : 'DblClick',\n    contextmenu : 'ContextMenu'\n};\n\n/**\n * @module Gantt/feature/TaskNonWorkingTime\n */\n\n/**\n * Feature highlighting the non-working time intervals for tasks, based on their {@link Gantt.model.TaskModel#field-calendar}.\n * If a task has no calendar defined, the project's calendar will be used. The non-working time interval can also be\n * recurring. You can find a live example showing how to achieve this in the [Task Calendars Demo](../examples/calendars/).\n *\n * {@inlineexample Gantt/feature/TaskNonWorkingTime.js}\n *\n * The demo above shows the default `row` mode, but the feature also supports a `bar` {@link #config-mode} that shades\n * parts of the task bars:\n *\n * {@inlineexample Gantt/feature/TaskNonWorkingTimeBar.js}\n *\n * If you want a tooltip to be displayed when hovering over the non-working time interval, you can configure a\n * {@link #config-tooltipTemplate}.\n *\n * ## Data structure\n * Below you see an example of data defining calendars and assigning the tasks a calendar:\n * ```javascript\n * const gantt = new Gantt({\n *     features : {\n *         taskNonWorkingTime : true\n *     },\n *\n *     // A Project holding the data and the calculation engine for the Gantt. It also acts as a CrudManager, allowing\n *     project   : {\n *         tasksData : [\n *             { id : 1, name : 'Task 1' },\n *             { id : 2, name : 'Task 2', calendar : 'break' }\n *         ],\n *         calendarsData : [\n *             {\n *                 id        : 'general',\n *                 name      : 'General',\n *                 intervals : [\n *                     {\n *                         recurrentStartDate : 'on Sat at 0:00',\n *                         recurrentEndDate   : 'on Mon at 0:00',\n *                         isWorking          : false\n *                     }\n *                 ]\n *             },\n *             {\n *                 id        : 'break',\n *                 name      : 'Breaks',\n *                 intervals : [\n *                     {\n *                         startDate : '2022-08-07',\n *                         endDate   : '2022-08-11',\n *                         isWorking : false\n *                     },\n *                     {\n *                         startDate : '2022-08-18',\n *                         endDate   : '2022-08-20',\n *                         isWorking : false\n *                     }\n *                 ]\n *             }\n *         ]\n *     }\n * }):\n * ```\n *\n * ## Styling non-working time interval elements\n *\n * To style the elements representing the non-working time elements you can set the {@link SchedulerPro.model.CalendarModel#field-cls}\n * field in your data. This will add a CSS class to all non-working time elements for the calendar. You can also add an\n * {@link SchedulerPro.model.CalendarModel#field-iconCls} value specifying an icon to display inside the interval.\n *\n * ```javascript\n * {\n *   \"success\"   : true,\n *   \"calendars\" : {\n *       \"rows\" : [\n *           {\n *               \"id\"                       : \"day\",\n *               \"name\"                     : \"Day shift\",\n *               \"unspecifiedTimeIsWorking\" : false,\n *               \"cls\"                      : \"dayshift\",\n *               \"intervals\"                : [\n *                   {\n *                       \"recurrentStartDate\" : \"at 8:00\",\n *                       \"recurrentEndDate\"   : \"at 17:00\",\n *                       \"isWorking\"          : true\n *                   }\n *               ]\n *           }\n *       ]\n *    }\n * }\n * ```\n *\n * You can also add a `cls` value and an `iconCls` to **individual** intervals:\n *\n * ```javascript\n * {\n *   \"success\"   : true,\n *   \"calendars\" : {\n *       \"rows\" : [\n *           {\n *               \"id\"                       : \"day\",\n *               \"name\"                     : \"Day shift\",\n *               \"unspecifiedTimeIsWorking\" : true,\n *               \"intervals\"                : [\n *                   {\n *                      \"startDate\"          : \"2022-03-23T02:00\",\n *                      \"endDate\"            : \"2022-03-23T04:00\",\n *                      \"isWorking\"          : false,\n *                      \"cls\"                : \"factoryShutdown\",\n *                      \"iconCls\"            : \"warningIcon\"\n *                  }\n *               ]\n *           }\n *       ]\n *    }\n * }\n * ```\n *\n * This feature is **off** by default. For info on enabling it, see {@link Grid.view.mixin.GridFeatures}.\n *\n * @extends Core/mixin/InstancePlugin\n * @demo Gantt/calendars\n * @classtype taskNonWorkingTime\n * @feature\n */\nexport default class TaskNonWorkingTime extends InstancePlugin.mixin(AttachToProjectMixin) {\n    /**\n     * Triggered when clicking a nonworking time element\n     * @event taskNonWorkingTimeClick\n     * @param {Gantt.view.Gantt} source The Gantt chart instance\n     * @param {Gantt.model.TaskModel} taskRecord Task record\n     * @param {Object} interval The raw data describing the nonworking time interval\n     * @param {String} interval.name The interval name (if any)\n     * @param {Date} interval.startDate The interval start date\n     * @param {Date} interval.endDate The interval end date\n     * @param {MouseEvent} domEvent Browser event\n     * @on-owner\n     */\n\n    /**\n     * Triggered when double-clicking a nonworking time element\n     * @event taskNonWorkingTimeDblClick\n     * @param {Gantt.view.Gantt} source The Gantt chart instance\n     * @param {Gantt.model.TaskModel} taskRecord Task record\n     * @param {Object} interval The raw data describing the nonworking time interval\n     * @param {String} interval.name The interval name (if any)\n     * @param {Date} interval.startDate The interval start date\n     * @param {Date} interval.endDate The interval end date\n     * @param {MouseEvent} domEvent Browser event\n     * @on-owner\n     */\n\n    /**\n     * Triggered when right-clicking a nonworking time element\n     * @event taskNonWorkingTimeContextMenu\n     * @param {Gantt.view.Gantt} source The Gantt chart instance\n     * @param {Gantt.model.TaskModel} taskRecord Task record\n     * @param {Object} interval The raw data describing the nonworking time interval\n     * @param {String} interval.name The interval name (if any)\n     * @param {Date} interval.startDate The interval start date\n     * @param {Date} interval.endDate The interval end date\n     * @param {MouseEvent} domEvent Browser event\n     * @on-owner\n     */\n\n    //region Config\n\n    static $name = 'TaskNonWorkingTime';\n\n    static configurable = {\n        idPrefix : 'TaskNonWorkingTime',\n\n        /**\n         * The largest time axis unit to display non working ranges for ('hour' or 'day' etc).\n         * When zooming to a view with a larger unit, no non-working time elements will be rendered.\n         *\n         * **Note:** Be careful with setting this config to big units like 'year'. When doing this,\n         * make sure the timeline {@link Scheduler.view.TimelineBase#config-startDate start} and\n         * {@link Scheduler.view.TimelineBase#config-endDate end} dates are set tightly.\n         * When using a long range (for example many years) with non-working time elements rendered per hour,\n         * you will end up with millions of elements, impacting performance.\n         * When zooming, use the {@link Scheduler.view.mixin.TimelineZoomable#config-zoomKeepsOriginalTimespan} config.\n         * @config {String}\n         * @default\n         */\n        maxTimeAxisUnit : 'week',\n\n        /**\n         * A template function used to generate contents for a tooltip when hovering non-working time intervals\n         * ```javascript\n         * const gantt = new Gantt({\n         *     features : {\n         *         taskNonWorkingTime : {\n         *             tooltipTemplate({ taskRecord, startDate, endDate }) {\n         *                 return 'Non-working time';\n         *             }\n         *         }\n         *     ]\n         * });\n         * ```\n         * @config {Function} tooltipTemplate\n         * @param {Object} data Tooltip data\n         * @param {Gantt.model.TaskModel} data.taskRecord The taskRecord\n         * @param {Date} data.startDate The start date of the-non working interval\n         * @param {Date} data.endDate The end date of the non-working interval\n         * @param {String} data.name The name of the non-working interval\n         * @param {String} data.cls The cls of the non-working interval\n         * @param {String} data.iconCls The iconCls of the non-working interval\n         * @returns {String|DomConfig|DomConfig[]}\n         */\n        tooltipTemplate : null,\n\n        tooltip : {},\n\n        /**\n         * Rendering mode, one of:\n         * - 'row' - renders non-working time intervals to the task row\n         * - 'bar' - renders non-working time intervals inside the task bar\n         * - 'both - combines 'row' and 'bar' rendering modes\n         * @prp {'row'|'bar'|'both'}\n         */\n        mode : 'row'\n    };\n\n    // Cannot use `static properties = {}`, new Map/Set would pollute the prototype\n    static get properties() {\n        return {\n            rowMap  : new Map(),\n            taskMap : new Map()\n        };\n    };\n\n    static pluginConfig = {\n        chain : ['onTaskDataGenerated', 'onPaint']\n    };\n\n    // No feature based styling needed, do not add a cls to Scheduler\n    static featureClass = '';\n\n    //endregion\n\n    //region Init\n\n    construct() {\n        super.construct(...arguments);\n\n        this.client.timeAxis.ion({\n            name        : 'timeAxis',\n            reconfigure : 'onTimeAxisReconfigure',\n            // should trigger before event rendering chain\n            prio        : 100,\n            thisObj     : this\n        });\n\n        this.client.taskStore.ion({\n            filter  : this.clear,\n            thisObj : this\n        });\n    }\n\n    attachToProject(project) {\n        super.attachToProject(project);\n\n        project.ion({\n            name    : 'project',\n            refresh : 'onProjectRefresh',\n            prio    : 100,\n            thisObj : this\n        });\n    }\n\n    onProjectRefresh() {\n        this.clear();\n    }\n\n    onPaint({ firstPaint }) {\n        if (firstPaint) {\n            this.mouseEventsDetacher = EventHelper.on({\n                element     : this.client.foregroundCanvas,\n                delegate    : '.b-tasknonworkingtime',\n                click       : 'handleMouseEvent',\n                dblclick    : 'handleMouseEvent',\n                contextmenu : 'handleMouseEvent',\n                thisObj     : this\n            });\n        }\n    }\n\n    doDisable(disable) {\n        super.doDisable(disable);\n\n        this.clear();\n        this.client.refresh();\n    }\n\n    updateMode() {\n        if (!this.isConfiguring) {\n            this.clear();\n            this.client.refresh();\n        }\n    }\n\n    clear() {\n        this.taskMap.clear();\n        this.rowMap.clear();\n    }\n\n    //endregion\n\n    //region Events\n\n    onTimeAxisReconfigure() {\n        this.clear();\n    }\n\n    //endregion\n\n    //region Rendering\n\n    // Called on render of resources events to get events to render. Add any ranges\n    // (chained function from Scheduler)\n    onTaskDataGenerated(renderData) {\n        if (!renderData.task.effectiveCalendar) {\n            return;\n        }\n\n        if (this.mode !== 'bar') {\n            const calendarIntervals = this.getCalendarIntervalsToRender(renderData, false);\n\n            // Convert indicator timespans to DOMConfigs for rendering\n            renderData.extraConfigs.push(...calendarIntervals);\n        }\n\n        if (this.mode !== 'row') {\n            const calendarIntervals = this.getCalendarIntervalsToRender(renderData, true);\n\n            renderData.children.push(...calendarIntervals);\n        }\n    }\n\n    getCalendarIntervalsToRender(renderData, barMode = false) {\n        const\n            me           = this,\n            {\n                rowMap,\n                taskMap,\n                client\n            }            = me,\n            { timeAxis } = client,\n            { task }     = renderData,\n            intervals    = [],\n            shouldPaint  = !me.maxTimeAxisUnit || DateHelper.compareUnits(timeAxis.unit, me.maxTimeAxisUnit) <= 0,\n            map          = barMode ? taskMap : rowMap;\n\n        if (!me.disabled && shouldPaint) {\n            const oneTickMs = timeAxis.first.durationMS;\n\n            if (!map.has(task.id)) {\n                const\n                    calendar   = task.effectiveCalendar,\n                    // In bar mode we only care about intervals fitting in the task, while in row mode we care about\n                    // all intervals\n                    ranges     = (!barMode || task.isScheduled) ? calendar.getNonWorkingTimeRanges(\n                        barMode ? task.startDate : client.startDate,\n                        barMode ? task.endDate : client.endDate\n                    ) : [],\n                    domConfigs = [];\n\n                for (let i = 0; i < ranges.length; i++) {\n                    const range = ranges[i];\n\n                    if (range.endDate - range.startDate >= oneTickMs) {\n                        domConfigs.push(me.createIntervalDOMConfig({\n                            id           : `r${task.id}i${i}`,\n                            iconCls      : range.iconCls || calendar.iconCls || '',\n                            cls          : `${calendar.cls ? `${calendar.cls} ` : ''}${range.cls || ''}`,\n                            startDate    : range.startDate,\n                            endDate      : range.endDate,\n                            name         : range.name,\n                            isNonWorking : true\n                        }, renderData, barMode));\n                    }\n                }\n\n                map.set(task.id, domConfigs);\n            }\n\n            intervals.push(...ObjectHelper.clone(map.get(task.id)));\n        }\n\n        return intervals;\n    }\n\n    createIntervalDOMConfig(interval, renderData, barMode = false) {\n        const\n            { client : gantt } = this,\n            { taskRecord }     = renderData,\n            {\n                cls,\n                iconCls,\n                name,\n                startDate,\n                endDate\n            }                  = interval,\n            x                  = gantt.getCoordinateFromDate(startDate) - (barMode ? renderData.left : 0),\n            width              = gantt.getCoordinateFromDate(endDate) - x - (barMode ? renderData.left : 0),\n            top                = barMode ? null : gantt.store.indexOf(taskRecord) * gantt.rowManager.rowOffsetHeight,\n            height             = barMode ? null : gantt.rowHeight;\n\n        return {\n            className : {\n                'b-tasknonworkingtime' : 1,\n                [cls]                  : 1\n            },\n\n            style : {\n                left  : x,\n                top,\n                height,\n                // Crop to fit task's width in bar mode\n                width : barMode && width + x > renderData.width ? renderData.width - x : width\n            },\n\n            children : [\n                iconCls ? {\n                    tag       : 'i',\n                    className : iconCls\n                } : null,\n                name\n            ],\n\n            dataset : {\n                taskId : interval.id\n            },\n\n            elementData : {\n                taskRecord,\n                interval\n            }\n        };\n    }\n\n    //endregion\n\n    //region Tooltip\n\n    changeTooltip(tooltip, old) {\n        const me = this;\n\n        old?.destroy();\n\n        if (!me.tooltipTemplate || !tooltip) {\n            return null;\n        }\n\n        return Tooltip.new({\n            align          : 'b-t',\n            forSelector    : '.b-timelinebase:not(.b-eventeditor-editing):not(.b-resizing-event):not(.b-dragcreating):not(.b-dragging-event):not(.b-creating-dependency) .b-sch-foreground-canvas > .b-tasknonworkingtime',\n            forElement     : me.client.timeAxisSubGridElement,\n            showOnHover    : true,\n            hideDelay      : 0,\n            anchorToTarget : true,\n            trackMouse     : false,\n            getHtml        : ({ activeTarget }) => {\n                const\n                    {\n                        taskRecord,\n                        interval\n                    } = activeTarget.elementData;\n\n                return me.tooltipTemplate({ taskRecord, ...interval });\n            }\n        }, tooltip);\n    }\n\n    //endregion\n\n    handleMouseEvent(domEvent) {\n        const\n            me                       = this,\n            target                   = domEvent.target.closest('.b-tasknonworkingtime'),\n            { taskRecord, interval } = target.elementData;\n\n        me.client.trigger('taskNonWorkingTime' + casedEventName[domEvent.type], {\n            feature : me,\n            taskRecord,\n            interval,\n            domEvent\n        });\n    }\n}\n\nGridFeatureManager.registerFeature(TaskNonWorkingTime, false, 'Gantt');\n", "import EventHelper from '../../Core/helper/EventHelper.js';\nimport EventResize from '../../SchedulerPro/feature/EventResize.js';\nimport GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\n\n/**\n * @module Gantt/feature/TaskResize\n */\n\n/**\n * Feature that allows resizing a task by dragging its end date. Resizing a task by dragging its start date is not allowed.\n *\n * This feature is **enabled** by default\n *\n * This feature updates the event's `endDate` live in order to leverage the\n * rendering pathway to always yield a correct appearance. The changes are done in\n * {@link Core.data.Model#function-beginBatch batched} mode so that changes do not become\n * eligible for data synchronization or propagation until the operation is completed.\n *\n * ## Customizing the resize tooltip\n *\n * To show custom HTML in the tooltip, please see the {@link #config-tooltipTemplate} config. Example:\n *\n * ```javascript\n * taskResize : {\n *     // A minimal end date tooltip\n *     tooltipTemplate : ({ record, endDate }) => {\n *         return DateHelper.format(endDate, 'MMM D');\n *     }\n * }\n * ```\n *\n * @extends SchedulerPro/feature/EventResize\n * @demo Gantt/basic\n * @classtype taskResize\n * @feature\n */\nexport default class TaskResize extends EventResize {\n\n    static get $name() {\n        return 'TaskResize';\n    }\n\n    static get configurable() {\n        return {\n            draggingItemCls : 'b-sch-event-resizing',\n\n            resizingItemInnerCls : null,\n\n            /**\n             * Gets or sets special key to activate successor pinning behavior. Supported values are:\n             * * 'ctrl'\n             * * 'shift'\n             * * 'alt'\n             * * 'meta'\n             *\n             * Assign false to disable it.\n             * @member {Boolean|String} pinSuccessors\n             */\n            /**\n             * Set to true to enable resizing task while pinning dependent tasks. By default, this behavior is activated\n             * if you hold CTRL key during drag. Alternatively, you may provide key name to use. Supported values are:\n             * * 'ctrl'\n             * * 'shift'\n             * * 'alt'\n             * * 'meta'\n             *\n             * **Note**: Only supported in forward-scheduled project\n             *\n             * @config {Boolean|String}\n             * @default\n             */\n            pinSuccessors : false\n        };\n    }\n\n    static get pluginConfig() {\n        return {\n            chain : ['render', 'onEventDataGenerated', 'isTaskElementDraggable']\n        };\n    }\n\n    onDragItemMouseMove() {\n        // internalUpdateRecord is based on the assumption only taskbar end edge can be resized\n        this[`${this.client.rtl ? 'right' : 'left'}Handle`] = false;\n\n        super.onDragItemMouseMove(...arguments);\n    }\n\n    changePinSuccessors(value) {\n        return EventHelper.toSpecialKey(value);\n    }\n\n    //region Events\n\n    /**\n     * @event beforeEventResize\n     * @hide\n     */\n\n    /**\n     * @event eventResizeStart\n     * @hide\n     */\n\n    /**\n     * @event eventPartialResize\n     * @hide\n     */\n\n    /**\n     * @event beforeEventResizeFinalize\n     * @hide\n     */\n\n    /**\n     * @event eventResizeEnd\n     * @hide\n     */\n\n    /**\n     * Fires on the owning Gantt before resizing starts. Return false to prevent the operation.\n     * @event beforeTaskResize\n     * @preventable\n     * @on-owner\n     * @param {Gantt.model.TaskModel} taskRecord\n     * @param {Event} event\n     */\n\n    /**\n     * Fires on the owning Gantt when task resizing starts\n     * @event taskResizeStart\n     * @on-owner\n     * @param {Gantt.model.TaskModel} taskRecord\n     * @param {Event} event\n     */\n\n    /**\n     * Fires on the owning Gantt on each resize move event\n     * @event taskPartialResize\n     * @on-owner\n     * @param {Gantt.model.TaskModel} taskRecord\n     * @param {Date} start The start date\n     * @param {Date} end The end date\n     * @param {HTMLElement} element The element\n     */\n\n    /**\n     * Fires on the owning Gantt to allow implementer to prevent immediate finalization by setting `data.context.async = true`\n     * in the listener, to show a confirmation popup etc\n     * ```javascript\n     *  gantt.on('beforetaskresizefinalize', ({context}) => {\n     *      context.async = true;\n     *      setTimeout(() => {\n     *          // async code don't forget to call finalize\n     *          context.finalize();\n     *      }, 1000);\n     *  })\n     * ```\n     * @event beforeTaskResizeFinalize\n     * @on-owner\n     * @param {Gantt.model.TaskModel} taskRecord\n     * @param {Object} data\n     * @param {Gantt.view.Gantt} data.source Gantt instance\n     * @param {Object} data.context\n     * @param {Boolean} data.context.async Set true to handle resize asynchronously (e.g. to wait for user\n     * confirmation)\n     * @param {Function} data.context.finalize Call this method to finalize resize. This method accepts one\n     * argument: pass true to update records, or false, to ignore changes\n     */\n\n    /**\n     * Fires on the owning Gantt after the resizing gesture has finished.\n     * @event taskResizeEnd\n     * @on-owner\n     * @param {Boolean} changed\n     * @param {Gantt.model.TaskModel} taskRecord\n     */\n\n    //endregion\n\n    //region Gantt specifics\n\n    isTaskElementDraggable(eventElement, eventRecord, el, event) {\n        return this.isEventElementDraggable(...arguments);\n    }\n\n    checkValidity() {\n        // Task resize just does basic validity checks which runs the validatorFn\n        return this.basicValidityCheck(...arguments);\n    }\n\n    getBeforeResizeParams(context) {\n        return {};\n    }\n\n    // Injects Gantt specific data into the drag context\n    setupProductResizeContext(context, event) {\n        const\n            gantt      = this.client,\n            taskRecord = gantt.resolveTaskRecord(context.element);\n\n        Object.assign(context, {\n            taskRecord,\n            eventRecord     : taskRecord,\n            dateConstraints : gantt.getDateConstraints?.(taskRecord)\n        });\n    }\n\n    async internalUpdateRecord(context, timespanRecord) {\n        const\n            { client }     = this,\n            { generation } = timespanRecord,\n            {\n                startDate,\n                endDate\n            }              = context,\n            toSet          = { endDate };\n\n        // Fix the duration according to the Entity's rules.\n        context.duration = toSet.duration = timespanRecord.run('calculateProjectedDuration', startDate, endDate);\n\n        // Fix the dragged date point according to the Entity's rules.\n        const value = toSet[context.toSet] = timespanRecord.run('calculateProjectedXDateWithDuration', startDate, true, context.duration);\n\n        // Update the record to its final correct state using *batched changes*\n        // These will *not* be propagated, it's just to force the dragged event bar\n        // into its corrected shape before the real changes which will propagate are applied below.\n        // We MUST do it like this because the final state may not be a net change if the changes\n        // got rejected, and in that case, the engine will not end up firing any change events.\n        timespanRecord.set(toSet);\n\n        // Quit listening for batchedUpdate *before* we cancel the batch so that the\n        // change events from the revert do not update the UI.\n        client.endListeningForBatchedUpdates();\n\n        this.cancelEventRecordBatch(timespanRecord);\n\n        if (this.pinSuccessors && context.event[this.pinSuccessors]) {\n            await timespanRecord.setEndDatePinningSuccessors(value);\n        }\n        else {\n            await timespanRecord.setEndDate(value, false);\n        }\n\n        timespanRecord.endBatch();\n\n        // If the record has been changed\n        return timespanRecord.generation !== generation;\n    }\n\n    //endregion\n}\n\nGridFeatureManager.registerFeature(TaskResize, true, 'Gantt');\n", "import GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\nimport TaskDrag from './TaskDrag.js';\nimport Rectangle from '../../Core/helper/util/Rectangle.js';\n\n/**\n * @module Gantt/feature/TaskSegmentDrag\n */\n\n/**\n * Allows user to drag and drop task segments, to change their start date.\n *\n * {@inlineexample Gantt/feature/TaskSegments.js}\n *\n * This feature is **enabled** by default\n *\n * @extends Gantt/feature/TaskDrag\n * @demo Gantt/split-tasks\n * @classtype taskSegmentDrag\n * @feature\n */\nexport default class TaskSegmentDrag extends TaskDrag {\n\n    // <debug>\n    // region Localization test\n    static localization = [\n        'L{EventSegments.splitTask}'\n    ];\n    // endregion\n    // </debug>\n\n    //region Config\n\n    static $name = 'TaskSegmentDrag';\n\n    static get configurable() {\n        return {\n            capitalizedEventName : 'TaskSegment'\n        };\n    }\n\n    static get pluginConfig() {\n        return {\n            chain : ['onPaint', 'isTaskElementDraggable']\n        };\n    }\n\n    //endregion\n\n    //region Events\n\n    /**\n     * Fires on the owning Gantt before segment dragging starts. Return `false` to prevent the action.\n     * @event beforeTaskSegmentDrag\n     * @preventable\n     * @on-owner\n     * @param {Gantt.view.Gantt} source\n     * @param {Gantt.model.TaskModel} taskRecord The segment about to be dragged\n     * @param {Event} event The native browser event\n     */\n\n    /**\n     * Fires on the owning Gantt when segment dragging starts\n     * @event taskSegmentDragStart\n     * @on-owner\n     * @param {Gantt.view.Gantt} source\n     * @param {Gantt.model.TaskModel[]} taskRecords Dragged segments\n     */\n\n    /**\n     * Fires on the owning Gantt while a segment is being dragged\n     * @event taskSegmentDrag\n     * @on-owner\n     * @param {Gantt.view.Gantt} source\n     * @param {Gantt.model.TaskModel[]} taskRecords Dragged segments\n     * @param {Date} startDate\n     * @param {Date} endDate\n     * @param {Object} dragData\n     * @param {Boolean} changed `true` if startDate has changed.\n     */\n\n    /**\n     * Fires on the owning Gantt to allow implementer to prevent immediate finalization by setting `data.context.async = true`\n     * in the listener, to show a confirmation popup etc\n     * ```javascript\n     * scheduler.on('beforetasksegmentdropfinalize', ({ context }) => {\n     *     context.async = true;\n     *     setTimeout(() => {\n     *         // async code don't forget to call finalize\n     *         context.finalize();\n     *     }, 1000);\n     * })\n     * ```\n     * @event beforeTaskSegmentDropFinalize\n     * @on-owner\n     * @param {Gantt.view.Gantt} source Gantt instance\n     * @param {Object} context\n     * @param {Gantt.model.TaskModel[]} context.taskRecords Dragged segments\n     * @param {Boolean} context.valid Set this to `false` to mark the drop as invalid\n     * @param {Boolean} context.async Set true to handle dragdrop asynchronously (e.g. to wait for user\n     * confirmation)\n     * @param {Function} context.finalize Call this method to finalize dragdrop. This method accepts one\n     * argument: pass true to update records, or false, to ignore changes\n     */\n\n    /**\n     * Fires on the owning Gantt after a valid task drop\n     * @event taskSegmentDrop\n     * @on-owner\n     * @param {Gantt.view.Gantt} source\n     * @param {Gantt.model.TaskModel[]} taskRecords Dropped segments\n     * @param {Boolean} isCopy\n     */\n\n    /**\n     * Fires on the owning Gantt after a task drop, regardless if the drop validity\n     * @event afterTaskSegmentDrop\n     * @on-owner\n     * @param {Gantt.view.Gantt} source\n     * @param {Gantt.model.TaskModel[]} taskRecords Dropped segments\n     * @param {Boolean} valid\n     */\n\n    //endregion\n\n    // Prevent TaskDrag to handle a segment\n    isTaskElementDraggable(taskElement, taskRecord, el, event) {\n        const me = this;\n\n        // We don't care dragging if that's a task having nothing to do w/ segments\n        if (me.disabled || (!taskRecord.isEventSegment && !taskRecord.isSegmented)) {\n            return true;\n        }\n\n        // Otherwise make sure TaskDrag is not trying to handle a segment element drag\n        return !el.closest(me.drag.targetSelector);\n    }\n\n    //region Drag events\n\n    triggerBeforeEventDrag(eventType, event) {\n        return this.client.trigger('beforeTaskSegmentDrag', event);\n    }\n\n    triggerBeforeEventDropFinalize(eventType, eventData, client) {\n        client.trigger(`before${this.capitalizedEventName}DropFinalize`, eventData);\n    }\n\n    triggerEventDrag(dragData, start) {\n        // Trigger the event on every mousemove so that features which need to adjust\n        // Such as dependencies and baselines can keep adjusted.\n        this.client.trigger('taskSegmentDrag', {\n            taskRecords : dragData.draggedEntities,\n            startDate   : dragData.startDate,\n            endDate     : dragData.endDate,\n            dragData,\n            changed     : dragData.startDate - start !== 0\n        });\n    }\n\n    triggerDragStart(dragData) {\n        this.client.trigger('taskSegmentDragStart', {\n            taskRecords : dragData.draggedEntities,\n            dragData\n        });\n    }\n\n    triggerDragAbort(dragData) {\n        this.client.trigger('taskSegmentDragAbort', {\n            taskRecords : dragData.draggedEntities,\n            context     : dragData\n        });\n    }\n\n    triggerDragAbortFinalized(dragData) {\n        this.client.trigger('taskSegmentDragAbortFinalized', {\n            taskRecords : dragData.draggedEntities,\n            context     : dragData\n        });\n    }\n\n    triggerAfterDrop(dragData, valid) {\n        this.currentOverClient.trigger('afterTaskSegmentDrop', {\n            taskRecords : dragData.draggedEntities,\n            context     : dragData,\n            valid\n        });\n    }\n\n    onInternalInvalidDrop(abort) {\n        super.onInternalInvalidDrop(...arguments);\n\n        // revert main task element width changes\n        this.dragData.mainTaskElement.style.width = this.dragData.initialMainTaskElementWidth + 'px';\n    }\n\n    //endregion\n\n    //region Drag data\n\n    buildDragHelperConfig() {\n        const config = super.buildDragHelperConfig();\n\n        config.targetSelector = '.b-sch-event-segment:not(.b-first)';\n\n        return config;\n    }\n\n    getTaskScheduleRegion(taskRecord, dateConstraints) {\n        const\n            { client }      = this,\n            mainTaskElement = client.getElementFromTaskRecord(taskRecord.event),\n            mainTaskRegion  = Rectangle.from(mainTaskElement, client.timeAxisSubGridElement),\n            result          = this.client.getScheduleRegion(taskRecord.event, true, dateConstraints);\n\n        // For segment we shift constrainRectangle by the main event offset\n        result.translate(-mainTaskRegion.x);\n\n        return result;\n    }\n\n    setupProductDragData(context) {\n        const result = super.setupProductDragData(context);\n\n        result.mainTaskElement = this.client.getElementFromTaskRecord(result.record.event, false);\n        result.initialMainTaskElementWidth = parseFloat(result.mainTaskElement.style.width);\n\n        return result;\n    }\n\n    updateDragContext(context, event) {\n        super.updateDragContext(...arguments);\n\n        const {\n            dirty,\n            record,\n            mainTaskElement,\n            initialMainTaskElementWidth\n        } = this.dragData;\n\n        // If dragging the last segment update the main task width accordingly\n        // need this to update dependency properly while dragging\n        if (dirty && !record.nextSegment) {\n            // main task width = its origin width + drag distance\n            mainTaskElement.style.width = (initialMainTaskElementWidth + context.clientX - context.startClientX) + 'px';\n        }\n    }\n\n    get tipId() {\n        return `${this.client.id}-task-segment-drag-tip`;\n    }\n\n    //endregion\n\n    //region Finalize & validation\n\n    /**\n     * Update tasks being dragged.\n     * @private\n     * @param {Object} context Drag data.\n     */\n    async updateRecords(context) {\n        const\n            {\n                startDate,\n                draggedEntities : [taskRecord]\n            }                = context,\n            oldStartDate     = taskRecord.startDate;\n\n        if (taskRecord.isEventSegment) {\n            await taskRecord.setStartDate(startDate, true);\n\n            // If not rejected (the startDate has changed), tell the world there was a successful drop.\n            if (taskRecord.startDate - oldStartDate) {\n                this.client.trigger('taskSegmentDrop', {\n                    taskRecords : context.draggedEntities\n                });\n            }\n            else {\n                this.dragData.valid = false;\n            }\n        }\n    }\n\n    getDateConstraints(taskRecord) {\n        const result = super.getDateConstraints(taskRecord) || {};\n\n        let { minDate, maxDate } = result;\n\n        // A segment movement is constrained by its neighbor segments if any\n        if (taskRecord.previousSegment && (!minDate || minDate < taskRecord.previousSegment.endDate)) {\n            minDate = taskRecord.previousSegment.endDate;\n        }\n\n        if (taskRecord.nextSegment && (!maxDate || maxDate < taskRecord.nextSegment.startDate)) {\n            maxDate = taskRecord.nextSegment.startDate;\n        }\n\n        return (minDate || maxDate) && {\n            start : minDate,\n            end   : maxDate\n        };\n    }\n\n    //endregion\n}\n\nGridFeatureManager.registerFeature(TaskSegmentDrag, true, 'Gantt');\n", "import GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\nimport EventSegmentResize from '../../SchedulerPro/feature/EventSegmentResize.js';\n\n/**\n * @module Gantt/feature/TaskSegmentResize\n */\n\n/**\n * Feature that allows resizing a task segment by dragging its end.\n *\n * {@inlineexample Gantt/feature/TaskSegments.js}\n *\n * This feature is **enabled** by default.\n *\n * @extends SchedulerPro/feature/EventSegmentResize\n * @classtype taskSegmentResize\n * @feature\n */\nexport default class TaskSegmentResize extends EventSegmentResize {\n\n    //region Events\n\n    /**\n     * Fired on the owning Gantt before resizing starts. Return `false` to prevent the action.\n     * @event beforeTaskSegmentResize\n     * @on-owner\n     * @preventable\n     * @param {Scheduler.view.Scheduler} source Gantt instance\n     * @param {Gantt.model.TaskModel} taskRecord Segment being resized\n     * @param {Scheduler.model.ResourceModel} resourceRecord Resource record the resize starts within\n     * @param {MouseEvent} event Browser event\n     */\n\n    /**\n     * Fires on the owning Gantt when event resizing starts\n     * @event taskSegmentResizeStart\n     * @on-owner\n     * @param {Scheduler.view.Scheduler} source Gantt instance\n     * @param {Gantt.model.TaskModel} taskRecord Segment being resized\n     * @param {Scheduler.model.ResourceModel} resourceRecord Resource record the resize starts within\n     * @param {MouseEvent} event Browser event\n     */\n\n    /**\n     * Fires on the owning Gantt on each resize move event\n     * @event taskSegmentPartialResize\n     * @on-owner\n     * @param {Scheduler.view.Scheduler} source Gantt instance\n     * @param {Gantt.model.TaskModel} taskRecord Segment being resized\n     * @param {Date} startDate\n     * @param {Date} endDate\n     * @param {HTMLElement} element\n     */\n\n    /**\n     * Fired on the owning Scheduler to allow implementer to prevent immediate finalization by setting\n     * `data.context.async = true` in the listener, to show a confirmation popup etc.\n     * ```javascript\n     *  scheduler.on('beforeTaskSegmentResizeFinalize', ({context}) => {\n     *      context.async = true;\n     *      setTimeout(() => {\n     *          // async code don't forget to call finalize\n     *          context.finalize();\n     *      }, 1000);\n     *  })\n     * ```\n     * @event beforeTaskSegmentResizeFinalize\n     * @on-owner\n     * @param {Scheduler.view.Scheduler} source Scheduler instance\n     * @param {Object} context\n     * @param {Boolean} context.async Set true to handle resize asynchronously (e.g. to wait for user confirmation)\n     * @param {Function} context.finalize Call this method to finalize resize. This method accepts one argument:\n     *                   pass `true` to update records, or `false`, to ignore changes\n     */\n\n    /**\n     * Fires on the owning Gantt after the resizing gesture has finished.\n     * @event taskSegmentResizeEnd\n     * @on-owner\n     * @param {Scheduler.view.Scheduler} source Gantt instance\n     * @param {Boolean} changed Shows if the record has been changed by the resize action\n     * @param {Gantt.model.TaskModel} taskRecord Segment being resized\n     */\n\n    //endregion\n\n    //region Config\n\n    static $name = 'TaskSegmentResize';\n\n    static get configurable() {\n        return {\n            draggingItemCls : 'b-sch-event-resizing',\n\n            resizingItemInnerCls : null,\n\n            leftHandle : false\n        };\n    }\n\n    static get pluginConfig() {\n        return {\n            // <remove-on-release>\n            // TODO: have to list all chain entries from parent classes here to just add 2 new entries\n            // </remove-on-release>\n            chain : ['render', 'onEventDataGenerated', 'isTaskElementDraggable', 'isTaskSegmentElementDraggable']\n        };\n    }\n\n    //endregion\n\n    //region Init & destroy\n\n    // Prevent task dragging when it starts over resize handles\n    isTaskElementDraggable(eventElement, eventRecord, el, event) {\n        return this.isEventElementDraggable(...arguments);\n    }\n\n    // Prevent segment dragging when it starts over resize handles\n    isTaskSegmentElementDraggable(eventElement, eventRecord, el, event) {\n        return this.isEventElementDraggable(...arguments);\n    }\n\n    checkValidity() {\n        // Task resize just does basic validity checks which runs the validatorFn\n        return this.basicValidityCheck(...arguments);\n    }\n\n    getBeforeResizeParams(context) {\n        return {};\n    }\n\n    // Injects Gantt specific data into the drag context\n    setupProductResizeContext(context, event) {\n        const\n            gantt      = this.client,\n            taskRecord = gantt.resolveTaskRecord(context.element);\n\n        Object.assign(context, {\n            taskRecord,\n            eventRecord     : taskRecord,\n            dateConstraints : gantt.getDateConstraints?.(taskRecord)\n        });\n    }\n\n    async internalUpdateRecord(context, timespanRecord) {\n        const\n            { client }     = this,\n            { generation } = timespanRecord,\n            {\n                startDate,\n                endDate\n            }              = context,\n            toSet          = { endDate };\n\n        // Fix the duration according to the Entity's rules.\n        context.duration = toSet.duration = timespanRecord.run('calculateProjectedDuration', startDate, endDate);\n\n        // Fix the dragged date point according to the Entity's rules.\n        const value = toSet[context.toSet] = timespanRecord.run('calculateProjectedXDateWithDuration', startDate, true, context.duration);\n\n        // Update the record to its final correct state using *batched changes*\n        // These will *not* be propagated, it's just to force the dragged event bar\n        // into its corrected shape before the real changes which will propagate are applied below.\n        // We MUST do it like this because the final state may not be a net change if the changes\n        // got rejected, and in that case, the engine will not end up firing any change events.\n        timespanRecord.set(toSet);\n\n        // Quit listening for batchedUpdate *before* we cancel the batch so that the\n        // change events from the revert do not update the UI.\n        client.endListeningForBatchedUpdates();\n\n        this.cancelEventRecordBatch(timespanRecord);\n\n        if (this.pinSuccessors && context.event[this.pinSuccessors]) {\n            await timespanRecord.setEndDatePinningSuccessors(value);\n        }\n        else {\n            await timespanRecord.setEndDate(value, false);\n        }\n\n        timespanRecord.endBatch();\n\n        // If the record has been changed\n        return timespanRecord.generation !== generation;\n    }\n\n    get tipId() {\n        return `${this.client.id}-task-segment-resize-tip`;\n    }\n\n    //endregion\n\n}\n\nGridFeatureManager.registerFeature(TaskSegmentResize, true, 'Gantt');\n", "import TooltipBase from '../../Scheduler/feature/base/TooltipBase.js';\nimport GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\nimport DateHelper from '../../Core/helper/DateHelper.js';\nimport StringHelper from '../../Core/helper/StringHelper.js';\n\n/**\n * @module Gantt/feature/TaskTooltip\n */\n\n/**\n * This feature displays a task tooltip on mouse hover. The template of the tooltip is customizable\n * with the {@link #config-template} function.\n *\n * ## Showing custom HTML in the tooltip\n *```javascript\n * new Gantt({\n *     features : {\n *         taskTooltip : {\n *             template : ({ taskRecord }) => `Tooltip for ${taskRecord.name}`,\n *             // Tooltip configs can be used here\n *             align    : 'l-r' // Align left to right\n *         }\n *     }\n * });\n * ```\n *\n * ## Showing remotely loaded data\n * Loading remote data into the task tooltip is easy. Simply use the {@link #config-template} and return a Promise which yields the content to show.\n * ```javascript\n * new Gantt({\n *     features : {\n *         taskTooltip : {\n *             template : ({ taskRecord }) => AjaxHelper.get(`./fakeServer?name=${taskRecord.name}`).then(response => response.text())\n *         }\n *     }\n * });\n * ```\n *\n * This feature is **enabled** by default.\n *\n * @extends Scheduler/feature/base/TooltipBase\n * @demo Gantt/tooltips\n * @classtype taskTooltip\n * @feature\n */\nexport default class TaskTooltip extends TooltipBase {\n\n    static get $name() {\n        return 'TaskTooltip';\n    }\n\n    static get defaultConfig() {\n        return {\n            /**\n             * Template (a function accepting task data and returning a string) used to display info in the tooltip.\n             * The template will be called with an object as with fields as detailed below\n             * @param {Object} data\n             * @param {Gantt.model.TaskModel} data.taskRecord\n             * @param {String} data.startClockHtml\n             * @param {String} data.endClockHtml\n             * @config {Function} template\n             */\n            template(data) {\n                const\n                    me              = this,\n                    { taskRecord }  = data,\n                    displayDuration = me.client.formatDuration(taskRecord.duration, me.decimalPrecision);\n\n                return `\n                    ${taskRecord.name ? `<div class=\"b-gantt-task-title\">${StringHelper.encodeHtml(taskRecord.name)}</div>` : ''}\n                    <table>\n                    <tr><td>${me.L('L{Start}')}:</td><td>${data.startClockHtml}</td></tr>\n                    ${taskRecord.milestone ? '' : `\n                        <tr><td>${me.L('L{End}')}:</td><td>${data.endClockHtml}</td></tr>\n                        <tr><td>${me.L('L{Duration}')}:</td><td class=\"b-right\">${displayDuration} ${DateHelper.getLocalizedNameOfUnit(taskRecord.durationUnit, taskRecord.duration !== 1)}</td></tr>\n                        <tr><td>${me.L('L{Complete}')}:</td><td class=\"b-right\">${taskRecord.renderedPercentDone}%</td></tr>\n                    `}\n                    </table>                 \n                `;\n            },\n\n            /**\n             * Precision of displayed duration, defaults to use {@link Gantt.view.Gantt#config-durationDisplayPrecision}.\n             * Specify an integer value to override that setting, or `false` to use raw value\n             * @member {Number|Boolean} decimalPrecision\n             */\n            /**\n             * Precision of displayed duration, defaults to use {@link Gantt.view.Gantt#config-durationDisplayPrecision}.\n             * Specify an integer value to override that setting, or `false` to use raw value\n             * @config {Number|Boolean}\n             */\n            decimalPrecision : null,\n\n            cls : 'b-gantt-task-tooltip',\n\n            monitorRecordUpdate : true\n        };\n    }\n}\n\nGridFeatureManager.registerFeature(TaskTooltip, true, 'Gantt');\n", "import GridTreeGroup from '../../Grid/feature/TreeGroup.js';\nimport GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\nimport WalkHelper from '../../Core/helper/WalkHelper.js';\nimport Delayable from '../../Core/mixin/Delayable.js';\nimport AttachToProjectMixin from '../../Scheduler/data/mixin/AttachToProjectMixin.js';\n\n/**\n * @module Gantt/feature/TreeGroup\n */\n\n/**\n * Extends Grid's {@link Grid.feature.TreeGroup} (follow the link for more info) feature to enable using it with Gantt.\n * Allows generating a new task tree where parents are determined by the values of specified task fields/functions:\n *\n * {@inlineexample Gantt/feature/TreeGroup.js}\n *\n * ## Important information\n *\n * Using the TreeGroup feature comes with some caveats:\n *\n * * Grouping replaces the store Gantt uses to display tasks with a temporary \"display store\". The original task store\n *   is left intact, when grouping stops Gantt will revert to using it to display tasks.\n * * `gantt.taskStore` points to the original store when this feature is enabled. To apply sorting or filtering programmatically, you should instead interact with the \"display store\" directly, using `gantt.store`.\n * * Generated parents are read-only, they cannot be edited using the default UI.\n * * Leaves in the new tree are still editable as usual, and any changes to them survives the grouping operation.\n * * Moving tasks in the tree (rearranging rows) is not supported while it is grouped.\n *\n * This feature is <strong>disabled</strong> by default.\n *\n * @extends Grid/feature/TreeGroup\n *\n * @classtype treeGroup\n * @feature\n * @typings Grid/feature/TreeGroup -> Grid/feature/GridTreeGroup\n */\nexport default class TreeGroup extends GridTreeGroup.mixin(AttachToProjectMixin, Delayable) {\n\n    static $name = 'TreeGroup';\n\n    static delayable = {\n        refresh : 'raf'\n    };\n\n    updateParents(root) {\n        // Since generated parents are not part of the project we have to manually set their dates etc. Walk them all\n        // (since they are generated we are guaranteed there is no mix of parents and leaves at any give level), and\n        // determine those\n        root.children?.length && WalkHelper.postWalk(root, task => !task.children?.[0].isLeaf && task.children, task => {\n            const { children } = task;\n\n            let minStartDate = children[0].startDate,\n                maxEndDate   = children[0].endDate,\n                percentDone  = 0;\n\n            for (const child of children) {\n                if (child.startDate) {\n                    minStartDate = Math.min(child.startDate, minStartDate || Number.MAX_SAFE_INTEGER);\n                }\n                if (child.endDate) {\n                    maxEndDate   = Math.max(child.endDate, maxEndDate);\n                }\n                percentDone += child.percentDone;\n            }\n\n            task.startDate = new Date(minStartDate);\n            task.endDate = new Date(maxEndDate);\n            task.duration = this.client.project.taskStore.rootNode.run('calculateProjectedDuration', task.startDate, task.endDate);\n            task.percentDone = percentDone / children.length;\n        });\n    }\n\n    // Generate dates etc. for parents during grouping\n    processTransformedData(transformedData) {\n        this.updateParents(transformedData);\n    }\n\n    // Update dates etc. for parents when a task is changed\n    onTaskStoreChange({ action, records }) {\n        if (records.some(r => r.isLeaf) && action !== 'dataset') {\n            const { client } = this;\n\n            client.suspendRefresh();\n            this.updateParents(client.store.rootNode);\n            client.resumeRefresh();\n\n            this.refresh();\n        }\n    }\n\n    refresh() {\n        this.client.refreshWithTransition();\n    }\n\n    // Add task store listener when grouping, to catch task changes and update parents\n    async applyLevels(levels) {\n        // Detach prior to applying new levels, to avoid triggering old listeners in case tasks are affected\n        // (they should not be, locked down in test, but just in case)\n        this.detachListeners('taskStore');\n\n        await super.applyLevels(levels);\n\n        if (this.isDestroyed) {\n            return;\n        }\n\n        if (levels) {\n            this.client.taskStore.ion({\n                name    : 'taskStore',\n                change  : 'onTaskStoreChange',\n                thisObj : this\n            });\n        }\n    }\n}\n\nGridFeatureManager.registerFeature(TreeGroup, false, 'Gantt');\n", "import GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\nimport TaskModel from '../model/TaskModel.js';\nimport SchedulerProVersions from '../../SchedulerPro/feature/Versions.js';\n\n/**\n * @module Gantt/feature/Versions\n */\n\n/**\n * Captures versions (snapshots) of the active project, including a detailed log of the changes new in each version.\n *\n * When active, the feature monitors the project for changes and appends them to the changelog. When a version is captured,\n * the version will consist of a complete snapshot of the project data at the time of the capture, in addition to the list\n * of changes in the changelog that have occurred since the last version was captured.\n *\n * For information about the data structure representing a version and how to persist it, see {@link SchedulerPro.model.VersionModel}.\n *\n * For information about the data structures representing the changelog and how to persist them, see\n * {@link SchedulerPro.model.changelog.ChangeLogTransactionModel}.\n *\n * This feature is **off** by default. For info on enabling it, see {@link Grid.view.mixin.GridFeatures}.\n *\n * ```javascript\n * const gantt = new Gantt({\n *     features : {\n *         versions : true\n *     }\n * });\n * ```\n *\n * To display versions and their changes, use a {@link SchedulerPro.widget.VersionGrid} configured with a {@link Gantt.model.ProjectModel}.\n *\n * {@inlineexample Gantt/guides/whats-new/5.3.0/versions.js}\n *\n * See also:\n * - {@link SchedulerPro.model.VersionModel} A stored version of a ProjectModel, captured at a point in time, with change log\n * - {@link SchedulerPro.model.changelog.ChangeLogTransactionModel} The set of add/remove/update actions that occurred in response to a user action\n * - {@link SchedulerPro.widget.VersionGrid} Widget for displaying a project's versions and changes\n *\n * @extends SchedulerPro/feature/Versions\n * @classType versions\n * @feature\n *\n * @typings SchedulerPro/feature/Versions -> SchedulerPro/feature/SchedulerProVersions\n */\nexport default class GanttVersions extends SchedulerProVersions {\n\n    static $name = 'Versions';\n\n    static configurable = {\n\n        /**\n         * The set of Model types whose subtypes should be recorded as the base type in the change log. For example,\n         * by default if a subclassed TaskModelEx exists and an instance of one is updated, it will be recorded in the\n         * changelog as a TaskModel.\n         * @config {Array}\n         * @default [TaskModel, AssignmentModel, DependencyModel, ResourceModel]\n         */\n        knownBaseTypes : [TaskModel, ...SchedulerProVersions.configurable.knownBaseTypes]\n    };\n\n    construct(gantt, config) {\n        super.construct(gantt, config);\n        gantt.ion({\n            taskMenuItem : ({ item, selection }) => {\n                const\n                    me         = this,\n                    isMultiple = selection.length > 1;\n                if (item.ref === 'deleteTask') {\n                    me.transactionDescription = isMultiple ? me.L('L{Versions.deletedTasks}')\n                        : me.L('L{Versions.deletedTask}');\n                }\n                else if (item.ref === 'indent') {\n                    me.transactionDescription = me.L('L{Versions.indented}');\n                }\n                else if (item.ref === 'outdent') {\n                    me.transactionDescription = me.L('L{Versions.outdented}');\n                }\n                else if (item.ref === 'cut') {\n                    me.transactionDescription = me.L('L{Versions.cut}');\n                }\n                else if (item.ref === 'paste') {\n                    me.transactionDescription = me.L('L{Versions.pasted}');\n                }\n            }\n        });\n    }\n}\n\nGridFeatureManager.registerFeature(GanttVersions, false, 'Gantt');\n", "import Rectangle from '../../../../Core/helper/util/Rectangle.js';\nimport DomHelper from '../../../../Core/helper/DomHelper.js';\nimport DomSync from '../../../../Core/helper/DomSync.js';\n\n// This value is actually defined in CSS for the Gantt as a height for wrap element when baseline is active. Ideally\n// we should link it to the style\nconst BASELINE_RATIO = 0.4;\n\n/**\n * This mixin overrides event elements handling in similar scheduler mixin. Uses correct element class names and\n * resolves elements in gantt-way.\n * @private\n */\nexport default base => class GanttExporterMixin extends base {\n    async prepareComponent(config) {\n        await super.prepareComponent(config);\n\n        const\n            me             = this,\n            // Clear cloned gantt element from task elements\n            fgCanvasEl     = me.element.querySelector('.b-sch-foreground-canvas');\n\n        DomHelper.removeEachSelector(fgCanvasEl, '.b-gantt-task-wrap');\n        DomHelper.removeEachSelector(fgCanvasEl, '.b-released');\n    }\n\n    collectEvents(rows, config) {\n        const\n            me         = this,\n            addedRows  = rows.length,\n            { client } = config,\n            normalRows = me.exportMeta.subGrids.normal.rows;\n\n        rows.forEach((row, index) => {\n            const\n                rowConfig = normalRows[normalRows.length - addedRows + index],\n                event     = client.store.getAt(row.dataIndex),\n                eventsMap = rowConfig[3];\n\n            if (event.isScheduled) {\n                const el = client.getElementFromTaskRecord(event, false);\n\n                if (el && !eventsMap.has(event.id)) {\n                    eventsMap.set(event.id, [el.outerHTML, Rectangle.from(el.firstChild, el.offsetParent)]);\n                }\n            }\n        });\n    }\n\n    renderEvents(config, rows) {\n        const\n            me              = this,\n            { client }      = config,\n            renderBaselines = client.hasActiveFeature('baselines'),\n            normalRows      = me.exportMeta.subGrids.normal.rows;\n\n        // Unlike Scheduler Gantt calculates elements and boxes for dependencies from the index of the record in the\n        // store. Upside is that it allows to correctly estimate position of the task which is outside of the view.\n        // Downside is that we will have to either move every single element or the entire canvas up by the difference\n        // between first row we rendered and estimated vertical position\n        const offset = me.exportMeta.topRowOffset = rows[0].top - rows[0].dataIndex * rows[0].offsetHeight;\n\n        rows.forEach((row, index) => {\n            const\n                rowConfig  = normalRows[index],\n                eventsMap  = rowConfig[3],\n                record     = client.store.getAt(row.dataIndex),\n                renderData = client.currentOrientation.getTaskRenderData(row, record),\n                { taskId } = renderData;\n\n            renderData.top += offset;\n\n            // If task\n            if (renderData.isTask) {\n                const\n                    taskDOMConfig   = client.currentOrientation.getTaskDOMConfig(renderData),\n                    targetElement   = document.createElement('div'),\n                    { isMilestone } = record,\n                    hasBaselines    = record.baselines.count;\n\n                DomSync.sync({\n                    targetElement,\n                    domConfig : taskDOMConfig\n                });\n\n                let { left, top, width, height } = renderData;\n\n                // for milestone, we need to adjust left coordinate by half height(width)\n                if (isMilestone) {\n                    left = left - height / 2;\n                    width = height;\n                }\n\n                eventsMap.set(taskId, [\n                    targetElement.outerHTML,\n                    new Rectangle(left, top, width, height * (renderBaselines && hasBaselines ? BASELINE_RATIO : 1)), []\n                ]);\n            }\n\n            if (renderData.extraConfigs.length) {\n                const\n                    targetElement = document.createElement('div'),\n                    extrasArray   = [];\n\n                for (const domConfig of renderData.extraConfigs) {\n                    DomSync.sync({\n                        targetElement,\n                        domConfig\n                    });\n\n                    extrasArray.push(targetElement.outerHTML);\n                }\n\n                if (!eventsMap.has(taskId)) {\n                    eventsMap.set(taskId, ['', null, []]);\n                }\n\n                eventsMap.get(taskId)[2] = extrasArray;\n            }\n        });\n    }\n\n    getEventBox(event) {\n        if (!event) {\n            return;\n        }\n\n        let result = this.exportMeta.eventsBoxes.get(String(event.id));\n\n        // If task is not rendered we need to estimate its position\n        if (!result) {\n            const\n                { client }     = this.exportMeta,\n                startX         = client.getCoordinateFromDate(event.startDate),\n                endX           = client.getCoordinateFromDate(event.endDate),\n                { rows }       = this.exportMeta.subGrids.normal,\n                [\n                    firstRowHTML,\n                    firstRowTop,\n                    height\n                ]              = rows[0],\n                [, lastRowTop] = rows[rows.length - 1],\n                // take data index from html\n                firstRowIndex  = parseInt(firstRowHTML.match(/data-index=\"(\\d+)?\"/)[1]),\n                taskIndex      = client.taskStore.indexOf(event),\n                estimatedY     = taskIndex < firstRowIndex ? firstRowTop - height : lastRowTop + height;\n\n            result = new Rectangle(startX, estimatedY, endX - startX, height);\n        }\n\n        return result;\n    }\n};\n", "import SchedulerMultiPageExporter from '../../../../Scheduler/feature/export/exporter/MultiPageExporter.js';\nimport GanttExporterMixin from './GanttExporterMixin.js';\n\n/**\n * @module Gantt/feature/export/exporter/MultiPageExporter\n */\n\n/**\n * A multiple page exporter. Used by the {@link Gantt.feature.export.PdfExport} feature to export to multiple pages. You\n * do not need to use this class directly.\n *\n * ### Extending exporter\n *\n * ```javascript\n * class MyMultiPageExporter extends MultiPageExporter {\n *     // type is required for exporter\n *     static get type() {\n *         return 'mymultipageexporter';\n *     }\n *\n *     get stylesheets() {\n *         const stylesheets = super.stylesheets;\n *\n *         stylesheets.forEach(styleNodeOrLinkTag => doSmth(styleNodeOrLinkTag))\n *\n *         return stylesheets;\n *     }\n * }\n *\n * const gantt = new Gantt({\n *     features : {\n *         pdfExport : {\n *             // this export feature is configured with only one exporter\n *             exporters : [MyMultiPageExporter]\n *         }\n *     }\n * });\n *\n * // run export with the new exporter\n * gantt.features.pdfExport.export({ exporter : 'mymultipageexporter' });\n * ```\n *\n * @classType multipage\n * @feature\n * @extends Scheduler/feature/export/exporter/MultiPageExporter\n * @typings Scheduler/feature/export/exporter/MultiPageExporter -> Scheduler/feature/export/exporter/SchedulerMultiPageExporter\n */\nexport default class MultiPageExporter extends GanttExporterMixin(SchedulerMultiPageExporter) {\n\n    static get $name() {\n        return 'MultiPageExporter';\n    }\n\n    static get type() {\n        return 'multipage';\n    }\n\n}\n", "import SchedulerMultiPageVerticalExporter from '../../../../Scheduler/feature/export/exporter/MultiPageVerticalExporter.js';\nimport GanttExporterMixin from './GanttExporterMixin.js';\n\n/**\n * @module Gantt/feature/export/exporter/MultiPageVerticalExporter\n */\n\n/**\n * A vertical multiple page exporter. Used by the {@link Gantt.feature.export.PdfExport} feature to export to multiple\n * pages. Content will be scaled in a horizontal direction to fit the page.\n *\n * You do not need to use this class directly.\n *\n * ### Extending exporter\n *\n * ```javascript\n * class MyMultiPageVerticalExporter extends MultiPageVerticalExporter {\n *     // type is required for exporter\n *     static get type() {\n *         return 'mymultipageverticalexporter';\n *     }\n *\n *     get stylesheets() {\n *         const stylesheets = super.stylesheets;\n *\n *         stylesheets.forEach(styleNodeOrLinkTag => doSmth(styleNodeOrLinkTag))\n *\n *         return stylesheets;\n *     }\n * }\n *\n * const gantt = new Gantt({\n *     features : {\n *         pdfExport : {\n *             // this export feature is configured with only one exporter\n *             exporters : [MyMultiPageVerticalExporter]\n *         }\n *     }\n * });\n *\n * // run export with the new exporter\n * gantt.features.pdfExport.export({ exporter : 'mymultipageverticalexporter' });\n * ```\n *\n * @classType multipagevertical\n * @feature\n * @extends Scheduler/feature/export/exporter/MultiPageVerticalExporter\n * @typings Scheduler/feature/export/exporter/MultiPageVerticalExporter -> Scheduler/feature/export/exporter/SchedulerMultiPageVerticalExporter\n */\nexport default class MultiPageVerticalExporter extends GanttExporterMixin(SchedulerMultiPageVerticalExporter) {\n\n    static get $name() {\n        return 'MultiPageVerticalExporter';\n    }\n\n    static get type() {\n        return 'multipagevertical';\n    }\n}\n", "import SchedulerSinglePageExporter from '../../../../Scheduler/feature/export/exporter/SinglePageExporter.js';\nimport GanttExporterMixin from './GanttExporterMixin.js';\n\n/**\n * @module Gantt/feature/export/exporter/SinglePageExporter\n */\n\n/**\n * A single page exporter. Used by the {@link Gantt.feature.export.PdfExport} feature to export to single page. Content\n * will be scaled in both directions to fit the page.\n *\n * You do not need to use this class directly.\n *\n * ### Extending exporter\n *\n * ```javascript\n * class MySinglePageExporter extends SinglePageExporter {\n *     // type is required for exporter\n *     static get type() {\n *         return 'mysinglepageexporter';\n *     }\n *\n *     get stylesheets() {\n *         const stylesheets = super.stylesheets;\n *\n *         stylesheets.forEach(styleNodeOrLinkTag => doSmth(styleNodeOrLinkTag))\n *\n *         return stylesheets;\n *     }\n * }\n *\n * const gantt = new Gantt({\n *     features : {\n *         pdfExport : {\n *             // this export feature is configured with only one exporter\n *             exporters : [MySinglePageExporter]\n *         }\n *     }\n * });\n *\n * // run export with the new exporter\n * gantt.features.pdfExport.export({ exporter : 'mysinglepageexporter' });\n * ```\n *\n * @classType singlepage\n * @feature\n * @extends Scheduler/feature/export/exporter/SinglePageExporter\n * @typings Scheduler/feature/export/exporter/SinglePageExporter -> Scheduler/feature/export/exporter/SchedulerSinglePageExporter\n */\nexport default class SinglePageExporter extends GanttExporterMixin(SchedulerSinglePageExporter) {\n\n    static get $name() {\n        return 'SinglePageExporter';\n    }\n\n    static get type() {\n        return 'singlepage';\n    }\n\n}\n", "import SchedulerPdfExport from '../../../Scheduler/feature/export/PdfExport.js';\nimport SinglePageExporter from './exporter/SinglePageExporter.js';\nimport MultiPageExporter from './exporter/MultiPageExporter.js';\nimport MultiPageVerticalExporter from './exporter/MultiPageVerticalExporter.js';\nimport GridFeatureManager from '../../../Grid/feature/GridFeatureManager.js';\n\n/**\n * @module Gantt/feature/export/PdfExport\n */\n\n/**\n * Generates PDF/PNG files from the Gantt component.\n *\n * <img src=\"Gantt/gantt-export-dialog.png\" style=\"max-width : 300px\" alt=\"Gantt Export dialog\">\n *\n * **NOTE:** Server side is required to make export work!\n *\n * Check out PDF Export Server documentation and installation steps [here](https://github.com/bryntum/pdf-export-server#pdf-export-server)\n *\n * When your server is up and running, it listens to requests. The Export feature sends a request to the specified URL\n * with the HTML fragments. The server generates a PDF (or PNG) file and returns a download link (or binary, depending\n * on {@link #config-sendAsBinary} config). Then the Export feature opens the link in a new tab and the file is\n * automatically downloaded by your browser. This is configurable, see {@link #config-openAfterExport} config.\n *\n * The {@link #config-exportServer} URL must be configured. The URL can be localhost if you start the server locally,\n * or your remote server address.\n *\n * ## Usage\n *\n * ```javascript\n * const gantt = new Gantt({\n *     features : {\n *         pdfExport : {\n *             exportServer : 'http://localhost:8080' // Required\n *         }\n *     }\n * })\n *\n * // Opens popup allowing to customize export settings\n * gantt.features.pdfExport.showExportDialog();\n *\n * // Simple export\n * gantt.features.pdfExport.export({\n *     // Required, set list of column ids to export\n *     columns : gantt.columns.map(c => c.id)\n * }).then(result => {\n *     // Response instance and response content in JSON\n *     let { response, responseJSON } = result;\n * });\n * ```\n *\n * ## Configuring the export dialog\n *\n * To learn about how to customize the export dialog and its default widgets, please refer to the\n * {@link Scheduler.view.export.SchedulerExportDialog} which provides a 'ref' identifier for each child widget so that\n * you can customize them all based on your requirements.\n *\n * ## Loading resources\n *\n * If you face a problem with loading resources when exporting, the cause might be that the application and the export server are hosted on different servers.\n * This is due to [Cross-Origin Resource Sharing](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) (CORS). There are 2 options how to handle this:\n * - Allow cross-origin requests from the server where your export is hosted to the server where your application is hosted;\n * - Copy all resources keeping the folder hierarchy from the server where your application is hosted to the server where your export is hosted\n * and setup paths using {@link Grid.feature.export.PdfExport#config-translateURLsToAbsolute} config and configure the export server to give access to the path:\n *\n * ```javascript\n * const gantt = new Gantt({\n *     features : {\n *         pdfExport : {\n *             exportServer : 'http://localhost:8080',\n *             // '/resources' is hardcoded in WebServer implementation\n *             translateURLsToAbsolute : 'http://localhost:8080/resources'\n *         }\n *     }\n * })\n * ```\n *\n * ```javascript\n * // Following path would be served by this address: http://localhost:8080/resources/\n * node ./src/server.js -h 8080 -r web/application/styles\n * ```\n *\n * where `web/application/styles` is the physical root location of the copied resources, for example:\n *\n * <img src=\"Grid/export-server-resources.png\" style=\"max-width : 500px\" alt=\"Export server structure with copied resources\" />\n *\n * @classtype pdfExport\n *\n * @extends Scheduler/feature/export/PdfExport\n * @feature\n * @typings Scheduler/feature/export/PdfExport -> Scheduler/feature/export/SchedulerPdfExport\n */\nexport default class PdfExport extends SchedulerPdfExport {\n    static get $name() {\n        return 'PdfExport';\n    }\n\n    static get defaultConfig() {\n        return {\n            exporters : [SinglePageExporter, MultiPageExporter, MultiPageVerticalExporter]\n        };\n    }\n}\n\nGridFeatureManager.registerFeature(PdfExport, false, 'Gantt');\n", "import SchedulerProCalendarIntervalModel from '../../SchedulerPro/model/CalendarIntervalModel.js';\n\n/**\n * @module Gantt/model/CalendarIntervalModel\n */\n\n/**\n * This class represents a calendar interval in the Gantt calendar.\n * Every interval can be either recurrent (regularly repeating in time) or static.\n *\n * Please refer to the [calendars guide](#Gantt/guides/basics/calendars.md) for details\n *\n * @extends SchedulerPro/model/CalendarIntervalModel\n *\n * @typings SchedulerPro/model/CalendarIntervalModel -> SchedulerPro/model/SchedulerProCalendarIntervalModel\n */\nexport default class CalendarIntervalModel extends SchedulerProCalendarIntervalModel {}\n", "import Model from '../../Core/data/Model.js';\nimport Store from '../../Core/data/Store.js';\nimport StringHelper from '../../Core/helper/StringHelper.js';\nimport { GanttProjectMixin, ProjectConstraintInterval } from '../../Engine/quark/model/gantt/GanttProjectMixin.js';\nimport ProjectModelTimeZoneMixin from '../../Scheduler/model/mixin/ProjectModelTimeZoneMixin.js';\nimport { DateConstraintInterval } from '../../Engine/quark/model/scheduler_pro/HasDateConstraintMixin.js';\nimport { DependencyConstraintInterval } from '../../Engine/quark/model/scheduler_pro/ScheduledByDependenciesEarlyEventMixin.js';\nimport TimeSpan from '../../Scheduler/model/TimeSpan.js';\nimport ProjectCurrentConfig from '../../Scheduler/model/mixin/ProjectCurrentConfig.js';\nimport ProjectModelCommon from '../../Scheduler/model/mixin/ProjectModelCommon.js';\nimport ProjectCrudManager from '../../SchedulerPro/data/mixin/ProjectCrudManager.js';\nimport ProjectChangeHandlerMixin from '../../SchedulerPro/model/mixin/ProjectChangeHandlerMixin.js';\nimport AssignmentStore from '../data/AssignmentStore.js';\nimport CalendarManagerStore from '../data/CalendarManagerStore.js';\nimport DependencyStore from '../data/DependencyStore.js';\nimport ResourceStore from '../data/ResourceStore.js';\nimport TaskStore from '../data/TaskStore.js';\nimport AssignmentModel from './AssignmentModel.js';\nimport CalendarModel from './CalendarModel.js';\nimport DependencyModel from './DependencyModel.js';\nimport ResourceModel from './ResourceModel.js';\nimport TaskModel from './TaskModel.js';\nimport StateTrackingManager from '../../SchedulerPro/data/stm/StateTrackingManager.js';\n\n/**\n * @module Gantt/model/ProjectModel\n */\n\n/**\n * This class represents a global project of your Project plan or Gantt - a central place for all data.\n *\n * It holds and links the stores usually used by Gantt:\n *\n * - {@link Gantt/data/TaskStore}\n * - {@link Gantt/data/ResourceStore}\n * - {@link Gantt/data/AssignmentStore}\n * - {@link Gantt/data/DependencyStore}\n * - {@link Gantt/data/CalendarManagerStore}\n * - {@link #config-timeRangeStore TimeRangeStore}\n *\n * The project uses a scheduling engine to calculate dates, durations and such. It is also responsible for\n * handling references between models, for example to link an task via an assignment to a resource. These operations\n * are asynchronous, a fact that is hidden when working in the Gantt UI but which you must know about when performing\n * operations on the data level.\n *\n * When there is a change to data that requires something else to be recalculated, the project schedules a calculation\n * (a commit) which happens moments later. It is also possible to trigger these calculations directly. This flow\n * illustrates the process:\n *\n * 1. Something changes which requires the project to recalculate, for example adding a new task:\n *\n * ```javascript\n * const [task] = project.taskStore.add({ startDate, endDate });\n * ```\n *\n * 2. A recalculation is scheduled, thus:\n *\n * ```javascript\n * task.duration; // <- Not yet calculated\n * ```\n *\n * 3. Calculate now instead of waiting for the scheduled calculation\n *\n * ```javascript\n * await project.commitAsync();\n *\n * task.duration; // <- Now available\n * ```\n *\n * Please refer to [this guide](#Gantt/guides/data/project_data.md) for more information.\n *\n * ## Built in CrudManager\n *\n * Gantt's project has a {@link Scheduler/crud/AbstractCrudManagerMixin CrudManager} built in. Using it is the recommended way of\n * syncing data between Gantt and a backend. Example usage:\n *\n * ```javascript\n * const gantt = new Gantt({\n *     project : {\n *         // Configure urls used by the built in CrudManager\n *         transport : {\n *             load : {\n *                 url : 'php/load.php'\n *             },\n *             sync : {\n *                 url : 'php/sync.php'\n *             }\n *         }\n *     }\n * });\n *\n * // Load data from the backend\n * gantt.project.load()\n * ```\n *\n * For more information on CrudManager, see Schedulers docs on {@link Scheduler/data/CrudManager}.\n * For a detailed description of the protocol used by CrudManager, please see the\n * [Crud manager guide](#Gantt/guides/data/crud_manager.md)\n *\n * You can access the current Project data changes anytime using the {@link #property-changes} property.\n *\n * ## Working with inline data\n *\n * The project provides an {@link #property-inlineData} getter/setter that can\n * be used to manage data from all Project stores at once. Populating the stores this way can\n * be useful if you do not want to use the CrudManager for server communication but instead load data using Axios\n * or similar.\n *\n * ### Getting data\n * ```javascript\n * const data = gantt.project.inlineData;\n *\n * // use the data in your application\n * ```\n *\n * ### Setting data\n * ```javascript\n * // Get data from server manually\n * const data = await axios.get('/project?id=12345');\n *\n * // Feed it to the project\n * gantt.project.inlineData = data;\n * ```\n *\n * See also {@link #function-loadInlineData}\n *\n * ### Getting changed records\n *\n * You can access the changes in the current Project dataset anytime using the {@link #property-changes} property. It\n * returns an object with all changes:\n *\n * ```javascript\n * const changes = project.changes;\n *\n * console.log(changes);\n *\n * > {\n *   tasks : {\n *       updated : [{\n *           name : 'My task',\n *           id   : 12\n *       }]\n *   },\n *   assignments : {\n *       added : [{\n *           event      : 12,\n *           resource   : 7,\n *           units      : 100,\n *           $PhantomId : 'abc123'\n *       }]\n *     }\n * };\n * ```\n *\n * ## Monitoring data changes\n *\n * While it is possible to listen for data changes on the projects individual stores, it is sometimes more convenient\n * to have a centralized place to handle all data changes. By listening for the {@link #event-change change event} your\n * code gets notified when data in any of the stores changes. Useful for example to keep an external data model up to\n * date:\n *\n * ```javascript\n * const gantt = new Gantt({\n *     project: {\n *         listeners : {\n *             change({ store, action, records }) {\n *                 const { $name } = store.constructor;\n *\n *                 if (action === 'add') {\n *                     externalDataModel.add($name, records);\n *                 }\n *\n *                 if (action === 'remove') {\n *                     externalDataModel.remove($name, records);\n *                 }\n *             }\n *         }\n *     }\n * });\n * ```\n *\n * ## Processing the data loaded from the server\n *\n * If you want to process the data received from the server after loading, you can use\n * the {@link #event-beforeLoadApply} or {@link #event-beforeSyncApply} events:\n *\n * ```javascript\n * const gantt = new Gantt({\n *     project: {\n *         listeners : {\n *             beforeLoadApply({ response }) {\n *                 // do something with load-response object before it is provided to all the project stores\n *             }\n *         }\n *     }\n * });\n * ```\n *\n * ## Built in StateTrackingManager\n *\n * The project also has a built in {@link Core/data/stm/StateTrackingManager} (STM for short), that\n * handles undo/redo for the project stores (additional stores can also be added). By default, it is only used while\n * editing tasks using the task editor, the editor updates tasks live and uses STM to rollback changes if canceled. But\n * you can enable it to track all project store changes:\n *\n * ```javascript\n * // Enable automatic transaction creation and start recording\n * project.stm.autoRecord = true;\n * project.stm.enable();\n *\n * // Undo a transaction\n * project.stm.undo();\n *\n * // Redo\n * project.stm.redo();\n * ```\n *\n * Check out the `undoredo` demo to see it in action.\n *\n * @extends Core/data/Model\n *\n * @mixes SchedulerPro/data/mixin/ProjectCrudManager\n * @mixes SchedulerPro/model/mixin/ProjectChangeHandlerMixin\n * @mixes Core/mixin/Events\n * @mixes Scheduler/model/mixin/ProjectModelTimeZoneMixin\n *\n * @typings SchedulerPro/model/ProjectModel -> SchedulerPro/model/SchedulerProProjectModel\n */\nexport default class ProjectModel extends GanttProjectMixin.derive(Model).mixin(\n    ProjectChangeHandlerMixin,\n    ProjectCurrentConfig,\n    ProjectCrudManager,\n    ProjectModelTimeZoneMixin,\n    ProjectModelCommon\n) {\n    //region Config\n\n    static $name = 'ProjectModel';\n\n    /**\n     * @hidefields id, readOnly, children, parentId, parentIndex\n     */\n\n    /**\n     * Silences propagations caused by the project loading.\n     *\n     * Applying the loaded data to the project occurs in two basic stages:\n     *\n     * 1. Data gets into the engine graph which triggers changes propagation\n     * 2. The changes caused by the propagation get written to related stores\n     *\n     * Setting this flag to `true` makes the component perform step 2 silently without triggering events causing reactions on those changes\n     * (like sending changes back to the server if `autoSync` is enabled) and keeping stores in unmodified state.\n     *\n     * This is safe if the loaded data is consistent so propagation doesn't really do any adjustments.\n     * By default the system treats the data as consistent so this option is `true`.\n     *\n     * ```javascript\n     * new Gantt({\n     *     project : {\n     *         // We want scheduling engine to recalculate the data properly\n     *         // so then we could save it back to the server\n     *         silenceInitialCommit : false,\n     *         ...\n     *     }\n     *     ...\n     * })\n     * ```\n     *\n     * @config {Boolean} silenceInitialCommit\n     * @default true\n     * @category Advanced\n     */\n\n    /**\n     * Maximum range the project calendars can iterate.\n     * The value is defined in milliseconds and by default equals `5 years` roughly.\n     * ```javascript\n     * new Gantt({\n     *     project : {\n     *         // adjust calendar iteration limit to 10 years roughly:\n     *         // 10 years expressed in ms\n     *         maxCalendarRange : 10 * 365 * 24 * 3600000,\n     *         ...\n     *     }\n     * });\n     * ```\n     * @config {Number} maxCalendarRange\n     * @default 157680000000\n     * @category Advanced\n     */\n\n    /**\n     * When `true` the project manually scheduled tasks will adjust their proposed start/end dates\n     * to skip non working time.\n     *\n     * @field {Boolean} skipNonWorkingTimeWhenSchedulingManually\n     * @default false\n     */\n\n    /**\n     * This config manages DST correction in the scheduling engine. It only has effect when DST transition hour is\n     * working time. Usually DST transition occurs on Sunday, so with non working weekends the DST correction logic\n     * is not involved.\n     *\n     * If **true**, it will add/remove one hour when calculating duration from start/end dates. For example:\n     * Assume weekends are working and on Sunday, 2020-10-25 at 03:00 clocks are set back 1 hour. Assume there is a task:\n     *\n     * ```javascript\n     * {\n     *     startDate    : '2020-10-20',\n     *     duration     : 10,\n     *     durationUnit : 'day'\n     * }\n     * ```\n     * It will end on 2020-10-29 23:00. Because of the DST transition Sunday is actually 25 hours long and when the\n     * Gantt project calculates the end date it converts days to hours multiplying by 24. If you're setting duration\n     * and want task to end on the end of the day you should manually correct for DST, like so:\n     *\n     * ```javascript\n     * {\n     *     startDate    : '2020-10-20',\n     *     duration     : 10 * 24 + 1,\n     *     durationUnit : 'hour'\n     * },\n     * ```\n     *\n     * If task has start and end dates it will correct for DST twice:\n     *\n     * ```javascript\n     * {\n     *     startDate    : '2020-10-20',\n     *     endDate      : '2020-10-30'\n     * }\n     * ```\n     * This task will end on 2020-10-29 22:00 which is a known quirk.\n     *\n     * If **false**, the Gantt project will not add DST correction which fixes the quirk mentioned above and such task\n     * will end on 2020-10-30 exactly, having hours duration of 10 days * 24 hours + 1 hour.\n     *\n     * Also, for this task days duration will be a floating point number due to extra (or missing) hour:\n     *\n     * ```javascript\n     * task.getDuration('day')  // 10.041666666666666\n     * task.getDuration('hour') // 241\n     * ```\n     *\n     * @config {Boolean} adjustDurationToDST\n     * @default false\n     * @category Advanced\n     */\n    // <remove-on-release>\n    // TODO: This config is introduced only to make behavior transition smooth. If nobody complains about it for\n    //  a couple of releases, it should be removed\n    // </remove-on-release>\n\n    /**\n     * Set to `true` to enable calculation progress notifications.\n     * When enabled, the project fires {@link #event-progress} events and the Gantt chart load mask reacts by showing a progress bar for the Engine calculations.\n     *\n     * **Note**: Enabling progress notifications will impact calculation performance, since it needs to pause calculations to allow the UI to redraw.\n     *\n     * @config {Boolean} enableProgressNotifications\n     * @category Advanced\n     */\n    /**\n     * Enables/disables the calculation progress notifications.\n     * @member {Boolean} enableProgressNotifications\n     * @category Advanced\n     */\n\n    /**\n     * Returns current Project changes as an object consisting of added/modified/removed arrays of records for every\n     * managed store. Returns `null` if no changes exist. Format:\n     *\n     * ```javascript\n     * {\n     *     resources : {\n     *         added    : [{ name : 'New guy' }],\n     *         modified : [{ id : 2, name : 'Mike' }],\n     *         removed  : [{ id : 3 }]\n     *     },\n     *     events : {\n     *         modified : [{  id : 12, name : 'Cool task' }]\n     *     },\n     *     ...\n     * }\n     * ```\n     *\n     * @member {Object} changes\n     * @readonly\n     * @category Models & Stores\n     */\n\n    // region Events\n\n    /**\n     * Fired during the Engine calculation if {@link #config-enableProgressNotifications} config is `true`\n     * @event progress\n     * @param {Number} total The total number of operations\n     * @param {Number} remaining The number of remaining operations\n     * @param {'storePopulation'|'propagating'} phase The phase of the calculation, either 'storePopulation'\n     * when data is getting loaded, or 'propagating' when data is getting calculated\n     */\n\n    /**\n     * Fired when the Engine detects a computation cycle.\n     * @event cycle\n     * @param {Object} schedulingIssue Scheduling error describing the case:\n     * @param {Function} schedulingIssue.getDescription Returns the cycle description\n     * @param {Object} schedulingIssue.cycle Object providing the cycle info\n     * @param {Function} schedulingIssue.getResolutions Returns possible resolutions\n     * @param {Function} continueWithResolutionResult Function to call after a resolution is chosen to\n     * proceed with the Engine calculations:\n     * ```javascript\n     * project.on('cycle', ({ continueWithResolutionResult }) => {\n     *     // cancel changes in case of a cycle\n     *     continueWithResolutionResult(EffectResolutionResult.Cancel);\n     * })\n     * ```\n     */\n\n    /**\n     * Fired when the Engine detects a scheduling conflict.\n     * @event schedulingConflict\n     * @param {Object} schedulingIssue The conflict details:\n     * @param {Function} schedulingIssue.getDescription Returns the conflict description\n     * @param {Object[]} schedulingIssue.intervals Array of conflicting intervals\n     * @param {Function} schedulingIssue.getResolutions Function to get possible resolutions\n     * @param {Function} continueWithResolutionResult Function to call after a resolution is chosen to\n     * proceed with the Engine calculations:\n     * ```javascript\n     * project.on('schedulingConflict', ({ schedulingIssue, continueWithResolutionResult }) => {\n     *     // apply the first resolution and continue\n     *     schedulingIssue.getResolutions()[0].resolve();\n     *     continueWithResolutionResult(EffectResolutionResult.Resume);\n     * })\n     * ```\n     */\n\n    /**\n     * Fired when the Engine detects a calendar misconfiguration when the calendar does\n     * not provide any working periods of time which makes usage impossible.\n     * @event emptyCalendar\n     * @param {Object} schedulingIssue Scheduling error describing the case:\n     * @param {Function} schedulingIssue.getDescription Returns the error description\n     * @param {Function} schedulingIssue.getCalendar Returns the calendar that must be fixed\n     * @param {Function} schedulingIssue.getResolutions Returns possible resolutions\n     * @param {Function} continueWithResolutionResult Function to call after a resolution is chosen to\n     * proceed with the Engine calculations:\n     * ```javascript\n     * project.on('emptyCalendar', ({ schedulingIssue, continueWithResolutionResult }) => {\n     *     // apply the first resolution and continue\n     *     schedulingIssue.getResolutions()[0].resolve();\n     *     continueWithResolutionResult(EffectResolutionResult.Resume);\n     * })\n     * ```\n     */\n\n    /**\n     * Fired when the engine has finished its calculations and the results has been written back to the records.\n     *\n     * ```javascript\n     * gantt.project.on({\n     *     dataReady() {\n     *        console.log('Calculations finished');\n     *     }\n     * });\n     *\n     * gantt.project.taskStore.first.duration = 10;\n     *\n     * // At some point a bit later it will log 'Calculations finished'\n     * ```\n     *\n     * @event dataReady\n     * @param {Gantt.model.ProjectModel} source The project\n     * @param {Boolean} isInitialCommit Flag that shows if this commit is initial\n     */\n\n    //endregion\n\n    static get defaults() {\n        return {\n            /**\n             * If this flag is set to `true` (default) when a start/end date is set on the event, a corresponding\n             * `start-no-earlier/later-than` constraint is added, automatically. This is done in order to\n             * keep the event \"attached\" to this date, according to the user intention.\n             *\n             * Depending on your use case, you might want to disable this behaviour.\n             *\n             * @field {Boolean} addConstraintOnDateSet\n             * @default true\n             */\n\n            /**\n             * The number of hours per day.\n             *\n             * **Please note:** the value **does not define** the amount of **working** time per day\n             * for that purpose one should use calendars.\n             *\n             * The value is used when converting the duration from one unit to another.\n             * So when user enters a duration of, for example, `5 days` the system understands that it\n             * actually means `120 hours` and schedules accordingly.\n             * @field {Number} hoursPerDay\n             * @default 24\n             */\n\n            /**\n             * The number of days per week.\n             *\n             * **Please note:** the value **does not define** the amount of **working** time per week\n             * for that purpose one should use calendars.\n             *\n             * The value is used when converting the duration from one unit to another.\n             * So when user enters a duration of, for example, `2 weeks` the system understands that it\n             * actually means `14 days` (which is then converted to {@link #field-hoursPerDay hours}) and\n             * schedules accordingly.\n             * @field {Number} daysPerWeek\n             * @default 7\n             */\n\n            /**\n             * The number of days per month.\n             *\n             * **Please note:** the value **does not define** the amount of **working** time per month\n             * for that purpose one should use calendars.\n             *\n             * The value is used when converting the duration from one unit to another.\n             * So when user enters a duration of, for example, `1 month` the system understands that it\n             * actually means `30 days` (which is then converted to {@link #field-hoursPerDay hours}) and\n             * schedules accordingly.\n             * @field {Number} daysPerMonth\n             * @default 30\n             */\n\n            /**\n             * The source of the calendar for dependencies (the calendar used for taking dependencies lag into account).\n             * Possible values are:\n             *\n             * - `ToEvent` - successor calendar will be used (default);\n             * - `FromEvent` - predecessor calendar will be used;\n             * - `Project` - the project calendar will be used.\n             *\n             * @field {String} dependenciesCalendar\n             * @default 'ToEvent'\n             */\n\n            /**\n             * The project calendar.\n             * @config {String|CalendarModelConfig|Gantt.model.CalendarModel} calendar\n             */\n\n            /**\n             * The project calendar.\n             * @field {Gantt.model.CalendarModel} calendar\n             */\n\n            /**\n             * `true` to enable automatic {@link Gantt/model/TaskModel#field-percentDone % done} calculation for summary\n             * tasks, `false` to disable it.\n             * @field {Boolean} autoCalculatePercentDoneForParentTasks\n             * @default true\n             */\n\n            /**\n             * State tracking manager instance the project relies on\n             * @member {Core.data.stm.StateTrackingManager} stm\n             * @category Advanced\n             */\n            /**\n             * Configuration options to provide to the STM manager\n             *\n             * @config {StateTrackingManagerConfig|Core.data.stm.StateTrackingManager} stm\n             * @category Advanced\n             */\n\n            /**\n             * The {@link Gantt.data.TaskStore store} holding the task information.\n             *\n             * See also {@link Gantt.model.TaskModel}\n             * @member {Gantt.data.TaskStore} eventStore\n             * @category Models & Stores\n             */\n            /**\n             * A {@link Gantt.data.TaskStore} instance or a config object.\n             * @config {Gantt.data.TaskStore|Object} eventStore\n             * @category Models & Stores\n             */\n\n            /**\n             * An alias for the {@link #property-eventStore}.\n             *\n             * See also {@link Gantt.model.TaskModel}\n             * @member {Gantt.data.TaskStore} taskStore\n             * @category Models & Stores\n             */\n            /**\n             * An alias for the {@link #config-eventStore}.\n             * @config {Gantt.data.TaskStore|TaskStoreConfig} taskStore\n             * @category Models & Stores\n             */\n\n            /**\n             * The {@link Gantt.data.DependencyStore store} holding the dependency information.\n             *\n             * See also {@link Gantt.model.DependencyModel}\n             * @member {Gantt.data.DependencyStore} dependencyStore\n             * @category Models & Stores\n             */\n            /**\n             * A {@link Gantt.data.DependencyStore} instance or a config object.\n             * @config {Gantt.data.DependencyStore|DependencyStoreConfig} dependencyStore\n             * @category Models & Stores\n             */\n\n            /**\n             * The {@link Gantt.data.ResourceStore store} holding the resources that can be assigned to the tasks in the\n             * task store.\n             *\n             * See also {@link Gantt.model.ResourceModel}\n             * @member {Gantt.data.ResourceStore} resourceStore\n             * @category Models & Stores\n             */\n            /**\n             * A {@link Gantt.data.ResourceStore} instance or a config object.\n             * @config {Gantt.data.ResourceStore|ResourceStoreConfig} resourceStore\n             * @category Models & Stores\n             */\n\n            /**\n             * The {@link Gantt.data.AssignmentStore store} holding the assignment information.\n             *\n             * See also {@link Gantt.model.AssignmentModel}\n             * @member {Gantt.data.AssignmentStore} assignmentStore\n             * @category Models & Stores\n             */\n            /**\n             * An {@link Gantt.data.AssignmentStore} instance or a config object.\n             * @config {Gantt.data.AssignmentStore|AssignmentStoreConfig} assignmentStore\n             * @category Models & Stores\n             */\n\n            /**\n             * The {@link Gantt.data.CalendarManagerStore store} holding the calendar information.\n             *\n             * See also {@link Gantt.model.CalendarModel}\n             * @member {Gantt.data.CalendarManagerStore} calendarManagerStore\n             * @category Models & Stores\n             */\n            /**\n             * A {@link Gantt.data.CalendarManagerStore} instance or a config object.\n             * @config {Gantt.data.CalendarManagerStore|CalendarManagerStoreConfig} calendarManagerStore\n             * @category Models & Stores\n             */\n\n            /**\n             * The {@link Core.data.Store store} containing time ranges to be visualized.\n             *\n             * See also {@link Scheduler.model.TimeSpan}\n             * @member {Core.data.Store} timeRangeStore\n             * @category Models & Stores\n             */\n\n            /**\n             * Returns an array of critical paths.\n             * Each _critical path_ is an array of critical path nodes.\n             * Each _critical path node_ is an object which contains {@link Gantt/model/TaskModel#field-critical critical task}\n             * and {@link Gantt/model/DependencyModel dependency} leading to the next critical path node.\n             * Dependency is missing if it is the last critical path node in the critical path.\n             * To highlight critical paths, enable {@link Gantt/feature/CriticalPaths} feature.\n             *\n             * ```javascript\n             * // This is an example of critical paths structure\n             * [\n             *      // First path\n             *      [\n             *          {\n             *              event : Gantt.model.TaskModel\n             *              dependency : Gantt.model.DependencyModel\n             *          },\n             *          {\n             *              event : Gantt.model.TaskModel\n             *          }\n             *      ],\n             *      // Second path\n             *      [\n             *          {\n             *              event : Gantt.model.TaskModel\n             *          }\n             *      ]\n             *      // and so on....\n             * ]\n             * ```\n             *\n             * For more details on the _critical path method_ theory please check\n             * [this article](https://en.wikipedia.org/wiki/Critical_path_method).\n             *\n             * @member {Array[]} criticalPaths\n             * @category Scheduling\n             */\n\n            // root should be always expanded\n            expanded : true\n        };\n    }\n\n    static get defaultConfig() {\n        return {\n            projectConstraintIntervalClass    : ProjectConstraintInterval,\n            dateConstraintIntervalClass       : DateConstraintInterval,\n            dependencyConstraintIntervalClass : DependencyConstraintInterval,\n\n            /**\n             * The constructor of the event model class, to be used in the project. Will be set as the {@link Core.data.Store#config-modelClass modelClass}\n             * property of the {@link #property-eventStore}\n             *\n             * @config {Gantt.model.TaskModel} [taskModelClass]\n             * @typings {typeof TaskModel}\n             * @category Models & Stores\n             */\n            taskModelClass : TaskModel,\n\n            /**\n             * The constructor of the dependency model class, to be used in the project. Will be set as the {@link Core.data.Store#config-modelClass modelClass}\n             * property of the {@link #property-dependencyStore}\n             *\n             * @config {Gantt.model.DependencyModel} [dependencyModelClass]\n             * @typings {typeof DependencyModel}\n             * @category Models & Stores\n             */\n            dependencyModelClass : DependencyModel,\n\n            /**\n             * The constructor of the resource model class, to be used in the project. Will be set as the {@link Core.data.Store#config-modelClass modelClass}\n             * property of the {@link #property-resourceStore}\n             *\n             * @config {Gantt.model.ResourceModel} [resourceModelClass]\n             * @typings {typeof ResourceModel}\n             * @category Models & Stores\n             */\n            resourceModelClass : ResourceModel,\n\n            /**\n             * The constructor of the assignment model class, to be used in the project. Will be set as the {@link Core.data.Store#config-modelClass modelClass}\n             * property of the {@link #property-assignmentStore}\n             *\n             * @config {Gantt.model.AssignmentModel} [assignmentModelClass]\n             * @typings {typeof AssignmentModel}\n             * @category Models & Stores\n             */\n            assignmentModelClass : AssignmentModel,\n\n            /**\n             * The constructor of the calendar model class, to be used in the project. Will be set as the {@link Core.data.Store#config-modelClass modelClass}\n             * property of the {@link #property-calendarManagerStore}\n             *\n             * @config {Gantt.model.CalendarModel} [calendarModelClass]\n             * @typings {typeof CalendarModel}\n             * @category Models & Stores\n             */\n            calendarModelClass : CalendarModel,\n\n            /**\n             * The constructor to create an task store instance with. Should be a class, subclassing the {@link Gantt.data.TaskStore}\n             * @config {Gantt.data.TaskStore}\n             * @typings {typeof TaskStore}\n             * @category Models & Stores\n             */\n            taskStoreClass : TaskStore,\n\n            /**\n             * The constructor to create a dependency store instance with. Should be a class, subclassing the {@link Gantt.data.DependencyStore}\n             * @config {Gantt.data.DependencyStore}\n             * @typings {typeof DependencyStore}\n             * @category Models & Stores\n             */\n            dependencyStoreClass : DependencyStore,\n\n            /**\n             * The constructor to create a dependency store instance with. Should be a class, subclassing the {@link Gantt.data.ResourceStore}\n             * @config {Gantt.data.ResourceStore}\n             * @typings {typeof ResourceStore}\n             * @category Models & Stores\n             */\n            resourceStoreClass : ResourceStore,\n\n            /**\n             * The constructor to create a dependency store instance with. Should be a class, subclassing the {@link Gantt.data.AssignmentStore}\n             * @config {Gantt.data.AssignmentStore}\n             * @typings {typeof AssignmentStore}\n             * @category Models & Stores\n             */\n            assignmentStoreClass : AssignmentStore,\n\n            /**\n             * The constructor to create a calendar store instance with. Should be a class, subclassing the {@link Gantt.data.CalendarManagerStore}\n             * @config {Gantt.data.CalendarManagerStore}\n             * @typings {typeof CalendarManagerStore}\n             * @category Models & Stores\n             */\n            calendarManagerStoreClass : CalendarManagerStore,\n\n            /**\n             * Start date of the project in the ISO 8601 format. Setting this date will constrain all other tasks in the\n             * project to start no earlier than it.\n             *\n             * If this date is not provided, it will be calculated as the earliest date among all tasks.\n             *\n             * Note that the field always returns a `Date`.\n             *\n             * @field {Date} startDate\n             * @accepts {String|Date}\n             */\n\n            /**\n             * End date of the project in the ISO 8601 format.\n             * The value is calculated as the latest date among all tasks.\n             *\n             * Note that the field always returns a `Date`.\n             *\n             * @field {Date} endDate\n             * @accepts {String|Date}\n             */\n\n            /**\n             * The scheduling direction of the project events.\n             * The `Forward` direction corresponds to the As-Soon-As-Possible (ASAP) scheduling,\n             * `Backward` - to As-Late-As-Possible (ALAP).\n             *\n             * @field {'Forward'|'Backward'} direction\n             * @default 'Forward'\n             */\n\n            /**\n             * The initial data, to fill the {@link #property-taskStore taskStore} with.\n             * Should be an array of {@link Gantt.model.TaskModel TaskModels} or configuration objects.\n             *\n             * @config {TaskModelConfig[]|Gantt.model.TaskModel[]}\n             * @category Legacy inline data\n             */\n            tasksData : null,\n\n            // What is actually used to hold initial tasks, tasksData is transformed in construct()\n            /**\n             * Alias to {@link #config-tasksData}.\n             *\n             * @config {TaskModelConfig[]|Gantt.model.TaskModel[]}\n             * @category Legacy inline data\n             */\n            eventsData : null,\n\n            /**\n             * The initial data, to fill the {@link #property-dependencyStore dependencyStore} with.\n             * Should be an array of {@link Gantt.model.DependencyModel DependencyModels} or configuration objects.\n             *\n             * @config {DependencyModelConfig[]|Gantt.model.DependencyModel[]}\n             * @category Legacy inline data\n             */\n            dependenciesData : null,\n\n            /**\n             * The initial data, to fill the {@link #property-resourceStore resourceStore} with.\n             * Should be an array of {@link Gantt.model.ResourceModel ResourceModels} or configuration objects.\n             *\n             * @config {ResourceModelConfig[]|Gantt.model.ResourceModel[]}\n             * @category Legacy inline data\n             */\n            resourcesData : null,\n\n            /**\n             * The initial data, to fill the {@link #property-assignmentStore assignmentStore} with.\n             * Should be an array of {@link Gantt.model.AssignmentModel AssignmentModels} or configuration objects.\n             *\n             * @config {AssignmentModelConfig[]|Gantt.model.AssignmentModel[]}\n             * @category Legacy inline data\n             */\n            assignmentsData : null,\n\n            /**\n             * The initial data, to fill the {@link #property-calendarManagerStore calendarManagerStore} with.\n             * Should be an array of {@link Gantt.model.CalendarModel CalendarModels} or configuration objects.\n             *\n             * @config {CalendarModelConfig[]|Gantt.model.CalendarModel[]}\n             * @category Legacy inline data\n             */\n            calendarsData : null,\n\n            /**\n             * Store that holds time ranges (using the {@link Scheduler.model.TimeSpan} model or subclass thereof) for\n             * {@link Scheduler.feature.TimeRanges} feature. A store will be automatically created if none is specified.\n             * @config {StoreConfig|Core.data.Store}\n             * @category Models & Stores\n             */\n            timeRangeStore : {\n                modelClass : TimeSpan,\n                storeId    : 'timeRanges'\n            },\n\n            /**\n             * Set to `true` to reset the undo/redo queues of the internal {@link Core.data.stm.StateTrackingManager}\n             * after the Project has loaded. Defaults to `false`\n             * @config {Boolean} resetUndoRedoQueuesAfterLoad\n             * @category Advanced\n             */\n\n            convertEmptyParentToLeaf : false,\n\n            supportShortSyncResponseNote : 'Note: Please consider enabling \"supportShortSyncResponse\" option to allow less detailed sync responses (https://bryntum.com/products/gantt/docs/api/Gantt/model/ProjectModel#config-supportShortSyncResponse)',\n\n            /**\n             * Enables early rendering in Gantt, by postponing calculations to after the first refresh.\n             *\n             * Requires task data loaded in Gantt to be pre-normalized to function as intended, since it will be used to\n             * render tasks before engine has normalized the data. Given un-normalized data tasks will snap into place\n             * when calculations are finished.\n             *\n             * The Gantt chart will be read-only until the initial calculations are finished.\n             *\n             * @config {Boolean}\n             * @default\n             * @category Advanced\n             */\n            delayCalculation : true,\n\n            eventStore           : {},\n            assignmentStore      : {},\n            resourceStore        : {},\n            dependencyStore      : {},\n            calendarManagerStore : {},\n\n            stmClass : StateTrackingManager\n        };\n    }\n\n    static get configurable() {\n        return {\n\n            /**\n             * Get/set {@link #property-taskStore} data.\n             *\n             * Always returns an array of {@link Gantt.model.TaskModel TaskModels} but also accepts an array of\n             * its configuration objects as input.\n             *\n             * @member {Gantt.model.TaskModel[]} tasks\n             * @accepts {Gantt.model.TaskModel[]|TaskModelConfig[]}\n             * @category Inline data\n             */\n            /**\n             * Data use to fill the {@link #property-taskStore}. Should be an array of\n             * {@link Gantt.model.TaskModel TaskModels} or its configuration objects.\n             *\n             * @config {Gantt.model.TaskModel[]|TaskModelConfig[]}\n             * @category Inline data\n             */\n            tasks : null,\n\n            /**\n             * Get/set {@link #property-resourceStore} data.\n             *\n             * Always returns an array of {@link Gantt.model.ResourceModel ResourceModels} but also accepts an array\n             * of its configuration objects as input.\n             *\n             * @member {Gantt.model.ResourceModel[]} resources\n             * @accepts {Gantt.model.ResourceModel[]|ResourceModelConfig[]}\n             * @category Inline data\n             */\n            /**\n             * Data use to fill the {@link #property-resourceStore}. Should be an array of\n             * {@link Gantt.model.ResourceModel ResourceModels} or its configuration objects.\n             *\n             * @config {Gantt.model.ResourceModel[]|ResourceModelConfig[]}\n             * @category Inline data\n             */\n            resources : null,\n\n            /**\n             * Get/set {@link #property-assignmentStore} data.\n             *\n             * Always returns an array of {@link Gantt.model.AssignmentModel AssignmentModels} but also accepts an\n             * array of its configuration objects as input.\n             *\n             * @member {Gantt.model.AssignmentModel[]} assignments\n             * @accepts {Gantt.model.AssignmentModel[]|AssignmentModelConfig[]}\n             * @category Inline data\n             */\n            /**\n             * Data use to fill the {@link #property-assignmentStore}. Should be an array of\n             * {@link Gantt.model.AssignmentModel AssignmentModels} or its configuration objects.\n             *\n             * @config {Gantt.model.AssignmentModel[]|AssignmentModelConfig[]}\n             * @category Inline data\n             */\n            assignments : null,\n\n            /**\n             * Get/set {@link #property-dependencyStore} data.\n             *\n             * Always returns an array of {@link Gantt.model.DependencyModel DependencyModels} but also accepts an\n             * array of its configuration objects as input.\n             *\n             * @member {Gantt.model.DependencyModel[]} dependencies\n             * @accepts {Gantt.model.DependencyModel[]|DependencyModelConfig[]}\n             * @category Inline data\n             */\n            /**\n             * Data use to fill the {@link #property-dependencyStore}. Should be an array of\n             * {@link Gantt.model.DependencyModel DependencyModels} or its configuration objects.\n             *\n             * @config {Gantt.model.DependencyModel[]|DependencyModelConfig[]}\n             * @category Inline data\n             */\n            dependencies : null,\n\n            /**\n             * Get/set {@link #property-timeRangeStore} data.\n             *\n             * Always returns an array of {@link Scheduler.model.TimeSpan TimeSpans} but also accepts an\n             * array of its configuration objects as input.\n             *\n             * @member {Scheduler.model.TimeSpan[]} timeRanges\n             * @accepts {Scheduler.model.TimeSpan[]|TimeSpanConfig[]}\n             * @category Inline data\n             */\n            /**\n             * Data use to fill the {@link #property-timeRangeStore}. Should be an array of\n             * {@link Scheduler.model.TimeSpan TimeSpans} or its configuration objects.\n             *\n             * @config {Scheduler.model.TimeSpan[]|TimeSpanConfig[]}\n             * @category Inline data\n             */\n            timeRanges : null,\n\n            /**\n             * Get/set {@link #property-calendarManagerStore} data.\n             *\n             * Always returns a {@link Gantt.model.CalendarModel} array but also accepts an array of its configuration\n             * objects as input.\n             *\n             * @member {Gantt.model.CalendarModel[]} calendars\n             * @accepts {Gantt.model.CalendarModel[]|CalendarModelConfig[]}\n             * @category Inline data\n             */\n            /**\n             * Data use to fill the {@link #property-calendarManagerStore}. Should be a\n             * {@link Gantt.model.CalendarModel} array or its configuration objects.\n             *\n             * @config {Gantt.model.CalendarModel[]|CalendarModelConfig[]}\n             * @category Inline data\n             */\n            calendars : null,\n\n            /**\n             * The initial data, to fill the {@link #property-timeRangeStore} with.\n             * Should be an array of {@link Scheduler.model.TimeSpan TimeSpans} or configuration objects.\n             *\n             * @config {TimeSpanConfig[]|Scheduler.model.TimeSpan[]}\n             * @category Legacy inline data\n             */\n            timeRangesData : null,\n\n            // <remove-on-release>\n            // TODO: Make public?\n            // </remove-on-release>\n            syncDataOnLoad : null,\n\n            /**\n             * Set to `true` to make STM ignore changes coming from the backend. This will allow user to only undo redo\n             * local changes.\n             * @prp {Boolean}\n             */\n            ignoreRemoteChangesInSTM : false\n        };\n    }\n\n    //endregion\n\n    construct(...args) {\n        const config = args[0] || {};\n\n        // put config to arguments (passed to the parent class \"construct\")\n        args[0] = config;\n\n        if ('tasksData' in config) {\n            config.eventsData   = config.tasksData;\n            delete config.tasksData;\n        }\n\n        if ('taskStore' in config) {\n            config.eventStore = config.taskStore;\n            delete config.taskStore;\n        }\n\n        // Maintain backwards compatibility\n        // default config will be exposed later and won't be applied if a value is exists,\n        // but we should sync eventModelClass/eventStoreClass with taskModelClass/taskStoreClass before all further actions\n        // to apply the correct value in all mixins that uses eventModelClass/eventStoreClass properties only\n        config.eventModelClass = config.taskModelClass || config.eventModelClass || this.getDefaultConfiguration().taskModelClass || this.defaultEventModelClass;\n        config.eventStoreClass = config.taskStoreClass || config.eventStoreClass || this.getDefaultConfiguration().taskStoreClass || this.defaultEventStoreClass;\n\n        super.construct(...args);\n    }\n\n    //region Attaching stores\n\n    // Attach to a store, relaying its change events\n    attachStore(store) {\n        if (this.syncDataOnLoad) {\n            store.syncDataOnLoad = this.syncDataOnLoad;\n        }\n\n        store.ion({\n            name    : store.$$name,\n            change  : 'relayStoreChange',\n            thisObj : this\n        });\n\n        super.attachStore(store);\n    }\n\n    // Detach a store, stop relaying its change events\n    detachStore(store) {\n        store && this.detachListeners(store.$$name);\n        super.detachStore(store);\n    }\n\n    relayStoreChange(event) {\n        super.relayStoreChange(event);\n        /**\n         * Fired when data in any of the projects stores changes.\n         *\n         * Basically a relayed version of each stores own change event, decorated with which store it originates from.\n         * See the {@link Core.data.Store#event-change store change event} documentation for more information.\n         *\n         * @event change\n         * @param {Gantt.model.ProjectModel} source This project\n         * @param {Core.data.Store} store Affected store\n         * @param {'remove'|'removeAll'|'add'|'updatemultiple'|'clearchanges'|'filter'|'update'|'dataset'|'replace'} action\n         * Name of action which triggered the change. May be one of the options listed above.\n         * @param {Core.data.Model} record Changed record, for actions that affects exactly one record (`'update'`)\n         * @param {Core.data.Model[]} records Changed records, passed for all actions except `'removeAll'`\n         * @param {Object} changes Passed for the `'update'` action, info on which record fields changed\n         */\n        return this.trigger('change', { store : event.source, ...event, source : this });\n    }\n\n    //endregion\n\n    get defaultEventModelClass() {\n        return TaskModel;\n    }\n\n    get defaultEventStoreClass() {\n        return TaskStore;\n    }\n\n    set taskStore(store) {\n        this.eventStore = store;\n    }\n\n    get taskStore() {\n        return this.eventStore;\n    }\n\n    get timeRangeStore() {\n        return this._timeRangeStore;\n    }\n\n    set timeRangeStore(store) {\n        const me = this;\n\n        me.detachStore(me._timeRangeStore);\n\n        me._timeRangeStore = Store.getStore(store, Store);\n\n        if (!me._timeRangeStore.storeId) {\n            me._timeRangeStore.storeId = 'timeRanges';\n        }\n\n        me.attachStore(me._timeRangeStore);\n    }\n\n    async tryInsertChild() {\n        return this.tryPropagateWithChanges(() => {\n            this.insertChild(...arguments);\n        });\n    }\n\n    /**\n     * Overrides the project owned store identifiers calculation and launches rescheduling.\n     * @method setCalculations\n     * @param {Object} calculations Object providing new _engine_ fields calculation function names.\n     * The object is grouped by store identifiers. For example below code\n     * overrides task {@link Gantt/model/TaskModel#field-startDate}, {@link Gantt/model/TaskModel#field-endDate}\n     * and {@link Gantt/model/TaskModel#field-duration} calculation so\n     * the fields will always simply return their current values:\n     *\n     * ```javascript\n     * // task startDate, endDate and duration will use their userProvidedValue method\n     * // which simply returns their current values as-is\n     * const oldCalculations = await project.setCalculations({\n     *     tasks : {\n     *         startDate : \"userProvidedValue\",\n     *         endDate   : \"userProvidedValue\",\n     *         duration  : \"userProvidedValue\"\n     *     }\n     * })\n     * ```\n     * @returns {Promise} Promise that resolves with an object having the overridden calculations.\n     * The object can be used to toggle the calculations back in the future:\n     * ```javascript\n     * // override event duration calculation\n     * const oldCalculations = await project.setCalculations({\n     *     events : {\n     *         duration  : \"userProvidedValue\"\n     *     }\n     * })\n     * // revert the duration calculation back\n     * project.setCalculations(oldCalculations)\n     * ```\n     * @category Advanced\n     */\n\n    /**\n     * Returns a calendar of the project. If task has never been assigned a calendar a project's calendar will be returned.\n     *\n     * @method getCalendar\n     * @returns {Gantt.model.CalendarModel}\n     * @category Scheduling\n     */\n\n    /**\n     * Sets the calendar of the project. Will cause the schedule to be updated - returns a `Promise`\n     *\n     * @method setCalendar\n     * @param {Gantt.model.CalendarModel} calendar The new calendar.\n     * @async\n     * @propagating\n     * @category Scheduling\n     */\n\n    /**\n     * Causes the scheduling engine to re-evaluate the task data and all associated data and constraints\n     * and apply necessary changes.\n     * @async\n     * @function propagate\n     * @propagating\n     * @category Scheduling\n     */\n\n    /**\n     * Suspend {@link #function-propagate propagation} processing. When propagation is suspended,\n     * calls to {@link #function-propagate} do not proceed, instead a propagate call is deferred\n     * until a matching {@link #function-resumePropagate} is called.\n     * @function suspendPropagate\n     * @category Scheduling\n     */\n\n    /**\n     * Resume {@link #function-propagate propagation}. If propagation is resumed (calls may be nested\n     * which increments a suspension counter), then if a call to propagate was made during suspension,\n     * {@link #function-propagate} is executed.\n     * @param {Boolean} [trigger] Pass `false` to inhibit automatic propagation if propagate was requested during suspension.\n     * @async\n     * @function resumePropagate\n     * @category Scheduling\n     */\n\n    /**\n     * Accepts a \"data package\" consisting of data for the projects stores, which is then loaded into the stores.\n     *\n     * The package can hold data for EventStore, AssignmentStore, ResourceStore, DependencyStore and Calendar Manager.\n     * It uses the same format as when creating a project with inline data:\n     *\n     * ```javascript\n     * await project.loadInlineData({\n     *     eventsData       : [...],\n     *     resourcesData    : [...],\n     *     assignmentsData  : [...],\n     *     dependenciesData : [...],\n     *     calendarsData    : [...]\n     * });\n     * ```\n     *\n     * After populating the stores it commits the project, starting its calculations. By awaiting `loadInlineData()` you\n     * can be sure that project calculations are finished.\n     *\n     * @function loadInlineData\n     * @param {Object} dataPackage A data package as described above\n     * @fires load\n     * @async\n     * @category Inline data\n     */\n\n    /**\n     * Project changes (CRUD operations to records in its stores) are automatically committed on a buffer to the\n     * underlying graph based calculation engine. The engine performs it calculations async.\n     *\n     * By calling this function, the commit happens right away. And by awaiting it you are sure that project\n     * calculations are finished and that references between records are up to date.\n     *\n     * The returned promise is resolved with an object. If that object has `rejectedWith` set, there has been a conflict and the calculation failed.\n     *\n     * ```javascript\n     * // Move a task in time\n     * taskStore.first.shift(1);\n     *\n     * // Trigger calculations directly and wait for them to finish\n     * const result = await project.commitAsync();\n     *\n     * if (result.rejectedWith) {\n     *     // there was a conflict during the scheduling\n     * }\n     * ```\n     *\n     * @async\n     * @propagating\n     * @function commitAsync\n     * @category Scheduling\n     */\n\n    //region JSON\n\n    /**\n     * Returns the data from the records of the projects stores, in a format that can be consumed by `loadInlineData()`.\n     *\n     * Used by JSON.stringify to correctly convert this record to json.\n     *\n     *\n     * ```javascript\n     * const project = new ProjectModel({\n     *     eventsData       : [...],\n     *     resourcesData    : [...],\n     *     assignmentsData  : [...],\n     *     dependenciesData : [...]\n     * });\n     *\n     * const json = project.toJSON();\n     *\n     * // json:\n     * {\n     *     eventsData : [...],\n     *     resourcesData : [...],\n     *     dependenciesData : [...],\n     *     assignmentsData : [...]\n     * }\n     * ```\n     *\n     * Output can be consumed by `loadInlineData()`:\n     *\n     * ```javascript\n     * const json = project.toJSON();\n     *\n     * // Plug it back in later\n     * project.loadInlineData(json);\n     * ```\n     *\n     * @returns {Object}\n     * @category Inline data\n     */\n    toJSON() {\n        return {\n            eventsData       : this.eventStore.toJSON(),\n            resourcesData    : this.resourceStore.toJSON(),\n            dependenciesData : this.dependencyStore.toJSON(),\n            assignmentsData  : this.assignmentStore.toJSON()\n        };\n    }\n\n    /**\n     * Get or set project data (records from its stores) as a JSON string.\n     *\n     * Get a JSON string:\n     *\n     * ```javascript\n     * const project = new ProjectModel({\n     *     eventsData       : [...],\n     *     resourcesData    : [...],\n     *     assignmentsData  : [...],\n     *     dependenciesData : [...]\n     * });\n     *\n     * const jsonString = project.json;\n     *\n     * // jsonString:\n     * '{\"eventsData\":[...],\"resourcesData\":[...],...}'\n     * ```\n     *\n     * Set a JSON string (to populate the project stores):\n     *\n     * ```javascript\n     * project.json = '{\"eventsData\":[...],\"resourcesData\":[...],...}'\n     * ```\n     *\n     * @property {String}\n     * @category Inline data\n     */\n    get json() {\n        return super.json;\n    }\n\n    set json(json) {\n        if (typeof json === 'string') {\n            json = StringHelper.safeJsonParse(json);\n        }\n\n        this.loadInlineData(json);\n    }\n\n    //endregion\n\n    //#region Inline data\n\n    get tasks() {\n        return this.taskStore.allRecords;\n    }\n\n    updateTasks(events) {\n        this.taskStore.data = events;\n    }\n\n    get calendars() {\n        return this.calendarManagerStore.allRecords;\n    }\n\n    updateCalendars(calendars) {\n        this.calendarManagerStore.data = calendars;\n    }\n\n    updateTimeRangesData(ranges) {\n        this.timeRangeStore.data = ranges;\n    }\n\n    /**\n     * Get or set data of project stores. The returned data is identical to what\n     * {@link #function-toJSON} returns:\n     *\n     * ```javascript\n     *\n     * const data = scheduler.project.inlineData;\n     *\n     * // data:\n     * {\n     *     eventsData : [...],\n     *     resourcesData : [...],\n     *     dependenciesData : [...],\n     *     assignmentsData : [...]\n     * }\n     *\n     *\n     * // Plug it back in later\n     * scheduler.project.inlineData = data;\n     * ```\n     *\n     * @member {Object} inlineData\n     * @category Inline data\n     */\n    get inlineData() {\n        return this.toJSON();\n    }\n\n    set inlineData(inlineData) {\n        this.json = inlineData;\n    }\n\n    //#endregion\n\n    afterChange(toSet, wasSet) {\n        super.afterChange(...arguments);\n\n        if (wasSet.calendar) {\n            this.trigger('calendarChange');\n        }\n    }\n\n    refreshWbs(options) {\n        const\n            me = this,\n            children = me.unfilteredChildren ?? me.children;\n\n        if (children?.length) {\n            // We leverage the refreshWbs() method of TaskModel (our children) to do the work. This node does not\n            // have a wbsValue, so we pass -1 for the index to skip on to just our children.\n            children[0].refreshWbs?.call(me, options, -1);\n        }\n    }\n}\n\nProjectModel.applyConfigs = true;\n", "import ProjectModel from './ProjectModel.js';\nimport ProjectWebSocketHandlerMixin from '../../SchedulerPro/model/mixin/ProjectWebSocketHandlerMixin.js';\n\nexport default class WebSocketProjectModel extends ProjectWebSocketHandlerMixin(ProjectModel) {\n    static $name = 'WebSocketProjectModel';\n}\n", "import AsyncHelper from '../../Core/helper/AsyncHelper.js';\nimport DH from '../../Core/helper/DateHelper.js';\nimport RandomGenerator from '../../Core/helper/util/RandomGenerator.js';\n\n/**\n * @module Gantt/util/ProjectGenerator\n */\n\nconst\n    year                = new Date().getFullYear(),\n    earlyMondayThisYear = DH.add(DH.startOf(new Date(year, 0, 5), 'week'), 1 - DH.weekStartDay, 'day'),\n    rnd                 = new RandomGenerator();\n\nfunction getNum(id, token) {\n    return parseInt('' + id + token);\n}\n\n/**\n * An internal utility class which generates sample project data for Examples and Tests.\n */\n\nexport default class ProjectGenerator {\n    static async generateAsync(requestedTaskCount, maxProjectSize, progressCallback = null, startDate = earlyMondayThisYear, log = true) {\n        const\n            config = {\n                startDate,\n                tasksData        : [],\n                dependenciesData : []\n            },\n            blockCount = Math.ceil(requestedTaskCount / 10),\n            projectSize = Math.ceil(maxProjectSize / 10),\n            generator = this.generateBlocks(blockCount, projectSize, config.startDate);\n\n        let count = 0,\n            duration = 0,\n            taskCount = 0,\n            dependencyCount = 0;\n\n        log && console.time('generate');\n\n        for (const block of generator) {\n            config.tasksData.push(...block.tasksData);\n            config.dependenciesData.push(...block.dependenciesData);\n\n            if (block.projectDuration) {\n                duration = Math.max(block.projectDuration, duration);\n            }\n\n            taskCount += block.taskCount;\n            dependencyCount += block.dependencyCount;\n\n            if (++count % 1000 === 0) {\n                progressCallback?.(taskCount, dependencyCount, false);\n                await AsyncHelper.animationFrame();\n            }\n        }\n\n        progressCallback?.(taskCount, dependencyCount, true);\n\n        config.endDate = DH.add(config.startDate, Math.max(duration, 30), 'days');\n\n        log && console.timeEnd('generate');\n\n        return config;\n    }\n\n    static * generateBlocks(count, projectSize, startDate) {\n        let currentId        = 1,\n            dependencyId     = 1,\n            projectDuration  = 0,\n            blockDuration    = 0,\n            sumDuration      = 0,\n            currentDuration  = 0,\n            currentStartDate = startDate,\n            finishedDuration = 0;\n\n        function rndDuration(addToTotal = true, resetSum = false) {\n            const value = rnd.nextRandom(5) + 2;\n\n            if (addToTotal) {\n                blockDuration += value;\n            }\n\n            if (resetSum) {\n                sumDuration = 0;\n            }\n\n            sumDuration += value;\n            currentDuration = value;\n\n            return value;\n        }\n\n        function nextStartDate(offset = currentDuration) {\n            currentStartDate = DH.add(currentStartDate, offset, 'days');\n            return currentStartDate;\n        }\n\n        function calculateEndDate() {\n            return DH.add(currentStartDate, currentDuration, 'days');\n        }\n\n        function storePercentDone(children) {\n            finishedDuration = 0;\n\n            for (const task of children) {\n                finishedDuration += task.duration * task.percentDone;\n            }\n\n            return children;\n        }\n\n        for (let i = 0; i < count; i++) {\n            const\n                blockStartId = currentId,\n                block = {\n                    tasksData : [\n                        {\n                            id        : currentId++,\n                            name      : 'Parent ' + blockStartId,\n                            startDate : nextStartDate(i > 0 ? currentDuration : 0),\n                            expanded  : true,\n                            inactive  : false,\n                            children  : [\n                                {\n                                    id        : currentId++,\n                                    name      : 'Sub-parent ' + getNum(blockStartId, 1),\n                                    startDate : nextStartDate(0),\n                                    expanded  : true,\n                                    inactive  : false,\n                                    children  : storePercentDone([\n                                        {\n                                            id          : currentId++,\n                                            name        : 'Task ' + getNum(blockStartId, 11),\n                                            startDate   : nextStartDate(0),\n                                            duration    : rndDuration(true, true),\n                                            effort      : currentDuration,\n                                            effortUnit  : 'day',\n                                            endDate     : calculateEndDate(),\n                                            percentDone : rnd.nextRandom(100),\n                                            inactive    : false\n                                        },\n                                        {\n                                            id          : currentId++,\n                                            name        : 'Task ' + getNum(blockStartId, 12),\n                                            startDate   : nextStartDate(),\n                                            duration    : rndDuration(),\n                                            effort      : currentDuration,\n                                            effortUnit  : 'day',\n                                            endDate     : calculateEndDate(),\n                                            percentDone : rnd.nextRandom(100),\n                                            inactive    : false\n                                        },\n                                        {\n                                            id          : currentId++,\n                                            name        : 'Task ' + getNum(blockStartId, 13),\n                                            startDate   : nextStartDate(),\n                                            duration    : rndDuration(),\n                                            effort      : currentDuration,\n                                            effortUnit  : 'day',\n                                            endDate     : calculateEndDate(),\n                                            percentDone : rnd.nextRandom(100),\n                                            inactive    : false\n                                        },\n                                        {\n                                            id          : currentId++,\n                                            name        : 'Task ' + getNum(blockStartId, 14),\n                                            startDate   : nextStartDate(),\n                                            duration    : rndDuration(),\n                                            effort      : currentDuration,\n                                            effortUnit  : 'day',\n                                            endDate     : calculateEndDate(),\n                                            percentDone : rnd.nextRandom(100),\n                                            inactive    : false\n                                        }\n                                    ]),\n                                    duration    : sumDuration,\n                                    effort      : sumDuration,\n                                    effortUnit  : 'day',\n                                    percentDone : finishedDuration / sumDuration,\n                                    endDate     : calculateEndDate()\n                                },\n                                {\n                                    id        : currentId++,\n                                    name      : 'Sub-parent ' + getNum(blockStartId, 2),\n                                    startDate : nextStartDate(),\n                                    expanded  : true,\n                                    inactive  : false,\n                                    children  : storePercentDone([\n                                        {\n                                            id          : currentId++,\n                                            name        : 'Task ' + getNum(blockStartId, 21),\n                                            startDate   : nextStartDate(0),\n                                            duration    : rndDuration(true, true),\n                                            effort      : currentDuration,\n                                            effortUnit  : 'day',\n                                            endDate     : calculateEndDate(),\n                                            percentDone : rnd.nextRandom(100),\n                                            inactive    : false\n                                        },\n                                        {\n                                            id          : currentId++,\n                                            name        : 'Task ' + getNum(blockStartId, 22),\n                                            startDate   : nextStartDate(),\n                                            duration    : rndDuration(),\n                                            effort      : currentDuration,\n                                            effortUnit  : 'day',\n                                            endDate     : calculateEndDate(),\n                                            percentDone : rnd.nextRandom(100),\n                                            inactive    : false\n                                        },\n                                        {\n                                            id          : currentId++,\n                                            name        : 'Task ' + getNum(blockStartId, 23),\n                                            startDate   : nextStartDate(),\n                                            duration    : rndDuration(),\n                                            effort      : currentDuration,\n                                            effortUnit  : 'day',\n                                            endDate     : calculateEndDate(),\n                                            percentDone : rnd.nextRandom(100),\n                                            inactive    : false\n                                        }\n                                    ]),\n                                    duration    : sumDuration,\n                                    effort      : sumDuration,\n                                    effortUnit  : 'day',\n                                    percentDone : finishedDuration / sumDuration,\n                                    endDate     : calculateEndDate()\n                                }\n                            ],\n                            duration   : blockDuration,\n                            effort     : blockDuration,\n                            effortUnit : 'day',\n                            endDate    : calculateEndDate()\n                        }\n                    ],\n\n                    dependenciesData : [\n                        { id : dependencyId++, fromEvent : blockStartId + 2, toEvent : blockStartId + 3 },\n                        { id : dependencyId++, fromEvent : blockStartId + 3, toEvent : blockStartId + 4 },\n                        { id : dependencyId++, fromEvent : blockStartId + 4, toEvent : blockStartId + 5 },\n                        { id : dependencyId++, fromEvent : blockStartId + 5, toEvent : blockStartId + 7 },\n                        { id : dependencyId++, fromEvent : blockStartId + 7, toEvent : blockStartId + 8 },\n                        { id : dependencyId++, fromEvent : blockStartId + 8, toEvent : blockStartId + 9 }\n                    ],\n\n                    taskCount       : 10,\n                    dependencyCount : 5\n                };\n\n            const\n                parent     = block.tasksData[0],\n                subParent1 = parent.children[0],\n                subParent2 = parent.children[1];\n\n            parent.percentDone = (subParent1.duration * subParent1.percentDone + subParent2.duration * subParent2.percentDone) / parent.duration;\n\n            projectDuration += blockDuration;\n            blockDuration = 0;\n            block.projectDuration = projectDuration;\n\n            if (i % projectSize !== 0) {\n                block.dependenciesData.push({\n                    id        : dependencyId++,\n                    fromEvent : blockStartId - 2,\n                    toEvent   : blockStartId + 2,\n                    type      : 2,\n                    lag       : 0,\n                    lagUnit   : 'd'\n                });\n                block.dependencyCount++;\n            }\n            else {\n                projectDuration = 0;\n            }\n\n            currentId++;\n\n            yield block;\n        }\n    }\n}\n", "import Parser from '../../Core/util/Parser.js';\n\nconst { defineParser, alt, seq, string, regexp, succeed, red, isSuccess } = Parser;\n\n/**\n * @module Gantt/util/ResourceAssignmentParser\n */\n\n/**\n * Consumes string while it won't hit [ or , character, value parsed will be trimmed of spaces\n *\n * Example: Maxim Bazhenov [100%] rest -> Maxim Bazhenov\n */\nconst resourceNamePEG = defineParser(\n    red(\n        regexp('[^\\\\[\\\\,]+'),\n        name => ({\n            resourceName : name.trim(),\n            units        : 100,\n            match        : name\n        })\n    )\n);\n\n/**\n * Consumes string while it provides numbers or spaces, value parsed them will be filtered of spaces\n * and just compacted number will be used.\n *\n * Example: 12 34 0 rest -> 12340\n */\nconst integerPEG = defineParser(\n    red(\n        regexp('[0-9\\\\s]+'),\n        (value) => ({\n            value : value.split(/\\s*/).join(''),\n            match : value\n        })\n    )\n);\n\n/**\n * Consumes one character either (decimal separator) '.' or ','\n *\n * Example: , rest -> ,\n */\nconst decimalSeparatorPEG = defineParser(\n    red(\n        alt(\n            string('.'),\n            string(',')\n        ),\n        (value) => ({\n            value,\n            match : value\n        })\n    )\n);\n\n/**\n * Consumes units number which might be given as:\n * - number with integer, decimal separator and fractional parts\n * - decimal separator and fractional part, so integer part will be considered 0\n * - just integer\n * value parsed will be transformed into Number type\n *\n * Example:\n * 10.2 rest -> 10.2\n * .2 rest -> 0.2\n * 100 rest -> 100\n */\nconst unitsNumberPEG = defineParser(\n    alt(\n        red(\n            seq(\n                () => integerPEG,\n                () => decimalSeparatorPEG,\n                () => integerPEG\n            ),\n            (integer, sep, fractional) => ({\n                value : Number(`${integer.value}.${fractional.value}`),\n                match : [integer.match, sep.match, fractional.match].join('')\n            })\n        ),\n        red(\n            seq(\n                () => decimalSeparatorPEG,\n                () => integerPEG\n            ),\n            (sep, fractional) => ({\n                value : Number(`0.${fractional.value}`),\n                match : [sep.match, fractional.match].join('')\n            })\n        ),\n        red(\n            () => integerPEG,\n            (value) => ({\n                value : Number(`${value.value}`),\n                match : value.match\n            })\n        )\n    )\n);\n\n/**\n * Consumes units with %, strips spaces between units number and % character.\n *\n * Example:\n * 70.5  % rest -> 70.5\n */\nconst unitsPersentagePEG = defineParser(\n    alt(\n        red(\n            seq(\n                () => unitsNumberPEG,\n                regexp('\\\\s*\\\\%')\n            ),\n            (units, perc) => ({\n                value : units.value,\n                match : [units.match, perc].join('')\n            })\n        ),\n        red(\n            () => unitsNumberPEG,\n            (units) => ({\n                value : units.value,\n                match : units.match\n            })\n        )\n    )\n);\n\n/**\n * Consumes units designation string, which should look like [ units with or without % ].\n * Strips spaces before and after [, ] characters.\n *\n * Example:\n * [ 70.2 % ] rest -> 70.2\n */\nconst unitsDesignationPEG = defineParser(\n    red(\n        seq(\n            regexp('\\\\s*\\\\[\\\\s*'),\n            () => unitsPersentagePEG,\n            regexp('\\\\s*\\\\]')\n        ),\n        (startSep, units, endSep) => ({\n            units : units.value,\n            match : [startSep, units.match, endSep].join('')\n        })\n    )\n);\n\n/**\n * Consumes just single , character stripping spaces before and after\n *\n * Example:\n *     ,     rest -> ,\n */\nconst commaPEG = defineParser(\n    red(\n        regexp('\\\\s*,\\\\s*'),\n        (value) => ({\n            value,\n            match : value\n        })\n    )\n);\n\n/**\n * Consumes resource assignment string which consists of resources assignment entries separated by , character.\n * Each entry contains following parts:\n * - resource name (mandatory)\n * - units designation (optional, default is 100)\n *\n * Example:\n * Maxim Bazhenov, Mats Bryntse [90], Johan Isaksson [50 %] -> Successful parse result\n *\n * See {@link #function-parse} for parse result analysis\n */\nconst raPEG = defineParser(\n    alt(\n        seq(\n            () => resourceNamePEG,\n            () => unitsDesignationPEG,\n            alt(\n                seq(\n                    () => commaPEG,\n                    () => raPEG\n                ),\n                succeed('')\n            )\n        ),\n        seq(\n            () => resourceNamePEG,\n            alt(\n                seq(\n                    () => commaPEG,\n                    () => raPEG\n                ),\n                succeed('')\n            )\n        )\n    )\n);\n\n/**\n * Parses resource assignment string into structured set of objects\n *\n * The string format is: `Resource Name [Units%], Other name, ...` where units part is optional as well as % sign\n *\n * @returns {Object} Structured information about parsed assignments\n */\nexport const parse = (str) => {\n    let gotSuccess = false, result = [], rest = '';\n\n    raPEG(str, (possibleResult) => {\n        if (isSuccess(possibleResult)) {\n            const [, structuredResult, unstracturedRest] = possibleResult;\n\n            if (structuredResult.length > result.length) {\n                result = structuredResult;\n                rest = unstracturedRest;\n                gotSuccess = true;\n            }\n        }\n    });\n\n    let position = 0;\n\n    return gotSuccess ? {\n        rest,\n        assignments : result.reduce(\n            (result, part) => {\n                let currentResource;\n\n                if (typeof part == 'object') {\n                    if (Object.prototype.hasOwnProperty.call(part, 'resourceName')) {\n                        currentResource = Object.assign({ position }, part);\n                        result.push(currentResource);\n                    }\n                    else {\n                        currentResource = result[result.length - 1];\n                        if (Object.prototype.hasOwnProperty.call(part, 'units')) {\n                            currentResource.units = part.units;\n                        }\n                        currentResource.match += part.match;\n                    }\n\n                    position += part.match.length;\n                }\n\n                return result;\n            },\n            []\n        )\n    } : false;\n};\n\n/**\n * Composes parsable string from parse result object\n *\n * @param {Object} result Parse result like object\n * @param {Boolean} [exactIfPossible=false] Set to true to compose exactly like it was given to {@link #function-parse} and if parse result reverse composition information is available.\n * @returns {String}\n */\nexport const compose = (parseResult, exactIfPossible = false) => {\n    let result = '';\n\n    if (parseResult.assignments) {\n        result += parseResult.assignments.reduce(\n            (str, { resourceName, units, match }) => {\n                if (match && exactIfPossible) {\n                    str += match;\n                }\n                else {\n                    str += (str.length ? ', ' : '') + `${resourceName} [${units}%]`;\n                }\n\n                return str;\n            },\n            result\n        );\n    }\n\n    if (parseResult.rest) {\n        result += parseResult.rest;\n    }\n\n    if (!exactIfPossible) {\n        result = result.trim();\n    }\n\n    return result;\n};\n\n/**\n * Normalizes the given string by parsing it and recomposing it back thus omitting all optional parts\n *\n * @param {String} str\n * @returns {String}\n */\nexport const normalize = (str) => compose(parse(str));\n\nexport default {\n    parse,\n    compose,\n    normalize\n};\n", "import BrowserHelper from '../../../Core/helper/BrowserHelper.js';\nimport DH from '../../../Core/helper/DateHelper.js';\nimport GridFeatureManager from '../../../Grid/feature/GridFeatureManager.js';\nimport InstancePlugin from '../../../Core/mixin/InstancePlugin.js';\nimport ObjectHelper from '../../../Core/helper/ObjectHelper.js';\nimport XMLHelper from '../../../Core/helper/XMLHelper.js';\nimport Model from '../../../Core/data/Model.js';\n\nconst\n    // <remove-on-release>\n    // TODO: some early date to safely not intersect w/ some calendar exceptions\n    // </remove-on-release>\n    MIN_DATE = DH.clearTime(new Date(1900, 5, 15)),\n    taskUnitMap = {\n        minute : 3,\n        hour   : 5,\n        day    : 7,\n        week   : 9,\n        month  : 11\n    },\n    projectUnitMap = {\n        minute : 1,\n        hour   : 2,\n        day    : 3,\n        week   : 4,\n        month  : 5\n    },\n    constraintMap = {\n        finishnoearlierthan : 6,\n        finishnolaterthan   : 7,\n        mustfinishon        : 3,\n        muststarton         : 2,\n        startnoearlierthan  : 4,\n        startnolaterthan    : 5\n    },\n    typeMap = {\n        FixedDuration : 1,\n        FixedUnits    : 0,\n        FixedEffort   : 2,\n        Normal        : 0\n    },\n    dependencyTypeMap = {\n        0 : 3,\n        1 : 2,\n        2 : 1,\n        3 : 0\n    };\n\n/**\n * @module Gantt/feature/export/MspExport\n */\n\n/**\n * A feature that allows exporting Gantt to Microsoft Project without involving a server.\n *\n * [Microsoft Project XML specification](https://docs.microsoft.com/en-us/office-project/xml-data-interchange/introduction-to-project-xml-data)\n *\n * This feature supports exporting to an XML format that can be imported by MS Project Professional 2013 / 2019.\n *\n * Here is an example of how to add the feature:\n *\n * ```javascript\n * const gantt = new Gantt({\n *     features : {\n *         mspExport : {\n *             // Choose the filename for the exported file\n *             filename : 'Gantt Export'\n *         }\n *     }\n * });\n * ```\n *\n * And how to trigger an export:\n *\n * ```javascript\n * gantt.features.mspExport.export({\n *     filename : 'Gantt Export'\n * })\n * ```\n *\n * ## Processing of exported data\n *\n * Use the {@link #event-dataCollected} event to process exported data before it is written to the XML-file:\n *\n * ```javascript\n * // set listener on Gantt construction step\n * const gantt = new Gantt({\n *     ---\n *     features : {\n *         mspExport : {\n *             listeners : {\n *                 dataCollected : {{ data }} => {\n *                     // patch <Project><Name> tag content\n *                     data.Name = 'My Cool Project';\n *                 }\n *             }\n *         }\n *     }\n * });\n *\n * // set listener at runtime\n * gantt.features.mspExport.on({\n *     dataCollected : {{ data }} => {\n *         // patch <Project><Name> tag content\n *         data.Name = 'My Cool Project';\n *     }\n * })\n * ```\n *\n * @classtype mspExport\n *\n * @extends Core/mixin/InstancePlugin\n * @feature\n * @demo Gantt/msprojectexport\n */\nexport default class MspExport extends InstancePlugin {\n\n    static $name = 'MspExport';\n\n    resourceCalendar = new Map();\n\n    static configurable = {\n        /**\n         * Name of the exported file (including extension)\n         * @config {String}\n         * @default\n         */\n        filename : null,\n\n        /**\n         * Defines how dates are formatted for MS Project. Information about formats can be found in {@link Core.helper.DateHelper}\n         * @config {String}\n         * @default\n         */\n        dateFormat : 'YYYY-MM-DDTHH:mm:ss',\n\n        /**\n         * Defines how time is formatted for MSProject. Information about formats can be found in {@link Core.helper.DateHelper}\n         * @config {String}\n         * @default\n         */\n        timeFormat : 'HH:mm:ss',\n\n        /**\n         * Defines the version used for MSProject (2013 or 2019)\n         * @config {Number}\n         * @default\n         */\n        msProjectVersion : 2019\n    };\n\n    /**\n     * Generate the export data to generate the XML.\n     * @returns {Object} Gantt data on MS Project structure to generate the XML\n     * @private\n     */\n    generateExportData() {\n        const me = this;\n\n        me.tasks = me.collectProjectTasks();\n\n        return {\n            ...me.getMsProjectConfig(),\n            Calendars : {\n                Calendar : me.getCalendarsData()\n            },\n            Tasks : {\n                Task : me.getTasksData()\n            },\n            Resources : {\n                Resource : me.getResourcesData()\n            },\n            Assignments : {\n                Assignment : me.getAssignmentsData()\n            }\n        };\n    }\n\n    /**\n     * Generates and downloads the .XML file.\n     * @param {Object} [config] Optional configuration object, which overrides the initial settings of the feature/exporter.\n     * @param {String} [config.filename] The filename to use\n     */\n    export(config = {}) {\n        const me = this;\n\n        if (me.disabled) {\n            return;\n        }\n\n        me.resourceCalendar.clear();\n\n        config = ObjectHelper.assign({}, me.config, config);\n\n        if (!config.filename) {\n            config.filename = `${me.client.$$name}.xml`;\n        }\n\n        /**\n         * Fires on the owning Gantt before export starts. Return `false` to cancel the export.\n         * @event beforeMspExport\n         * @preventable\n         * @on-owner\n         * @param {Object} config Export config\n         */\n        if (me.client.trigger('beforeMspExport', { config }) !== false) {\n\n            const data = me.generateExportData(config);\n\n            /**\n             * Fires when project data is collected to an object\n             * that is going to be exported as XML text.\n             *\n             * The event can be used to modify exported data before it is written to the XML-file:\n             *\n             * ```javascript\n             * const gantt = new Gantt({\n             *     ---\n             *     features : {\n             *         mspExport : {\n             *             listeners : {\n             *                 // listener to process exported data\n             *                 dataCollected : {{ data }} => {\n             *                     // patch <Project><Name> tag content\n             *                     data.Name = 'My Cool Project';\n             *                 }\n             *             }\n             *         }\n             *     }\n             * });\n             * ```\n             * @event dataCollected\n             * @param {Object} config Export config\n             * @param {Object} data Collected data to export\n             */\n            me.trigger('dataCollected', { config, data });\n\n            const\n                fileContent = me.convertToXml(data),\n                eventParams = { config, data, fileContent };\n\n            /**\n             * Fires on the owning Gantt when project content is exported\n             * to XML, before the XML is downloaded by the browser.\n             * @event mspExport\n             * @on-owner\n             * @param {Object} config Export config\n             * @param {String} fileContent Exported XML-file content\n             */\n            me.client.trigger('mspExport', eventParams);\n\n            BrowserHelper.download(config.filename, `data:text/xml;charset=utf-8,${encodeURIComponent(eventParams.fileContent)}`);\n        }\n    }\n\n    /**\n     * Convert Object data to XML.\n     * @param {Object} data The Object with data.\n     * @returns {String} The XML data.\n     * @private\n     */\n    convertToXml(data) {\n        return XMLHelper.convertFromObject(data, {\n            rootName            : 'Project',\n            elementName         : '',\n            xmlns               : 'http://schemas.microsoft.com/project',\n            rootElementForArray : false\n        });\n    }\n\n    /**\n     * Get the XML configurations in MS Project format.\n     * @returns {Object} MS Project configurations for the XML\n     * @private\n     */\n    getMsProjectConfig() {\n        const\n            me = this,\n            dateFormat = me.dateFormat,\n            { project } = me.client,\n            fileName = me.filename || me.client.$$name;\n\n        return {\n            CalendarUID                : me.getCalendarUID(project.effectiveCalendar),\n            CreationDate               : DH.format(new Date(), dateFormat),\n            SplitsInProgressTasks      : 0,\n            MoveCompletedEndsBack      : 0,\n            MoveRemainingStartsBack    : 0,\n            MoveRemainingStartsForward : 0,\n            MoveCompletedEndsForward   : 0,\n            NewTaskStartDate           : 0,\n            DaysPerMonth               : project.daysPerMonth,\n            FinishDate                 : DH.format(project.endDate, dateFormat),\n            MinutesPerDay              : project.hoursPerDay * 60,\n            MinutesPerWeek             : project.daysPerWeek * project.hoursPerDay * 60,\n            Name                       : fileName,\n            ScheduleFromStart          : project.direction === 'Forward' ? 1 : 0,\n            StartDate                  : DH.format(project.startDate, dateFormat),\n            Title                      : fileName,\n            WorkFormat                 : projectUnitMap[project.effortUnit],\n            ProjectExternallyEdited    : 0\n        };\n    }\n\n    /**\n     * Format Calendars from Gantt to MS Project format.\n     * @returns {Array} Calendars array formatted\n     * @private\n     */\n    getCalendarsData() {\n        const\n            me = this,\n            {\n                calendarManagerStore,\n                project\n            } = me.client,\n            { effectiveCalendar } = project,\n            calendars             = calendarManagerStore.allRecords || [];\n\n        // if project's calendar is not included on calendars array, include it\n        if (!calendarManagerStore.getByInternalId(effectiveCalendar.internalId)) {\n            calendars.push(effectiveCalendar);\n        }\n\n        // Each resource in MS Project data model has its own calendar\n        // so let's make dummy calendars for all resources\n\n        me.client.resources.forEach(resource => {\n            const calendar = new resource.effectiveCalendar.constructor({ name : resource.name });\n\n            // parent calendar for this dummy will be the real calendar the resource uses\n            calendar.parent = resource.effectiveCalendar;\n\n            calendar.isResourceCalendar = true;\n\n            // remember the resource calendar\n            me.resourceCalendar.set(resource, calendar);\n\n            calendars.push(calendar);\n        });\n\n        return calendars.map(calendar => {\n            const uid = me.getCalendarUID(calendar);\n\n            let\n                calendarName    = calendar.name || calendar.internalId,\n                baseCalendarUID = 0,\n                isBaseCalendar  = 0;\n\n            // MS Project does not support calendars hierarchy fully\n            // it has two level hierarchy:\n            // - first level - so called base calendars\n            // - second level - any other calendars (including resource calendars) that extend the base ones\n\n            if (!calendar.isResourceCalendar) {\n                calendarName    += ' - imported';\n                // all non-dummy calendars we import as base calendars (the one that can be extended in MSP)\n                isBaseCalendar  = 1;\n            }\n            else {\n                baseCalendarUID = me.getCalendarUID(calendar.parent, 0);\n            }\n\n            return {\n                ID              : uid,\n                UID             : uid,\n                BaseCalendarUID : baseCalendarUID,\n                // all non-dummy calendars we import as base calendars (the one that can be extended in MSP)\n                IsBaseCalendar  : isBaseCalendar,\n                Name            : calendarName,\n                WeekDays        : {\n                    WeekDay : me.formatWeekDays(calendar)\n                }\n                // <remove-on-release>\n                // TODO:\n                // WorkWeeks : {\n                //     WorkWeek : this.formatWorkWeeks(calendar)\n                // }\n                // </remove-on-release>\n            };\n        });\n    }\n\n    /**\n     * Format intervals to MS project format for the WeekDays property.\n     * @param {Array} calendar Array of intervals data.\n     * @returns {Array} Array with data formatted\n     * @private\n     */\n    formatWeekDays(calendar) {\n        const\n            { timeFormat } = this,\n            ticks          = [],\n            daysData       = {};\n\n        let startDate = MIN_DATE,\n            endDate;\n\n        for (let i = 0; i < 7; i++) {\n            // week day index\n            const day = startDate.getDay();\n\n            daysData[day] = {\n                DayType    : day + 1,\n                DayWorking : 0\n            };\n\n            endDate = DH.clearTime(DH.add(startDate, 1, 'day'));\n\n            ticks.push({ startDate, endDate });\n\n            // proceed to next day\n            startDate = endDate;\n        }\n\n        // clone original calendar to get rid of its existing caches\n        calendar = calendar.copy();\n\n        const\n            // dummy calendar with 7 day borders ..to force forEachAvailabilityInterval to stop on each day start\n            dummyCalendar        = new calendar.constructor({ intervals : ticks }),\n            calendarsCombination = this.client.project.combineCalendars([calendar, dummyCalendar]);\n\n        calendarsCombination.forEachAvailabilityInterval(\n            { startDate : MIN_DATE, endDate },\n            (startDate, endDate, calendarCacheInterval) => {\n                const\n                    calendarsStatus   = calendarCacheInterval.getCalendarsWorkStatus(),\n                    dayData           = daysData[startDate.getDay()];\n\n                // if the calendar has working interval for that period\n                if (calendarsStatus.get(calendar)) {\n                    // consider the day as working\n                    dayData.DayWorking = 1;\n\n                    dayData.WorkingTimes = dayData.WorkingTimes || { WorkingTime : [] };\n\n                    // put that time range\n                    dayData.WorkingTimes.WorkingTime.push({\n                        FromTime : DH.format(startDate, timeFormat),\n                        ToTime   : DH.format(endDate, timeFormat)\n                    });\n                }\n            }\n        );\n\n        return Object.values(daysData);\n    }\n\n    /**\n     * Format intervals to MS project format for the WorkWeeks property.\n     * @param {Array} Array of intervals data.\n     * @returns {Array} Array with data formatted\n     * @private\n     */\n    // <remove-on-release>\n    // formatWorkWeeks(calendar) {\n    //     // TODO: implement\n    // }\n    // </remove-on-release>\n\n    collectProjectTasks() {\n        const result = [];\n\n        this.client.store.rootNode.traverse(node => result.push(node), true);\n\n        return result;\n    }\n\n    /**\n     * Format Tasks from Gantt to MS Project format.\n     * @returns {Array} Tasks array formatted\n     * @private\n     */\n    getTasksData() {\n        const\n            me             = this,\n            { project }    = me.client,\n            isForward      = project.direction == 'Forward',\n            { dateFormat, tasks } = me;\n\n        return tasks.map(task => {\n            const\n                { startDate, endDate, wbsCode } = task,\n                // filter out broken dependencies\n                predecessors     = task.predecessors.filter(({ fromEvent }) => fromEvent),\n                durationMs       = project.convertDuration(task.duration, task.durationUnit, 'millisecond'),\n                effortMs         = project.convertDuration(task.effort, task.effortUnit, 'millisecond'),\n                actualDurationMs = task.percentDone * 0.01 * durationMs,\n                startDateStr     = DH.format(startDate, dateFormat),\n                endDateStr       = DH.format(endDate, dateFormat),\n                durationStr      = MspExport.convertDurationToMspDuration(durationMs, 'ms'),\n                uid              = me.getTaskUID(task),\n                result           = {\n                    UID               : uid,\n                    Name              : task.name,\n                    Active            : me.inactive ? 0 : 1,\n                    Manual            : task.manuallyScheduled ? 1 : 0,\n                    Type              : task.isLeaf ? typeMap[task.schedulingMode] : 1,\n                    IsNull            : startDate && endDate ? 0 : 1,\n                    WBS               : wbsCode,\n                    OutlineNumber     : wbsCode,\n                    OutlineLevel      : wbsCode.split('.').length,\n                    Start             : startDateStr,\n                    Finish            : endDateStr,\n                    Duration          : durationStr,\n                    ManualStart       : startDateStr,\n                    ManualFinish      : endDateStr,\n                    ManualDuration    : durationStr,\n                    DurationFormat    : taskUnitMap[task.durationUnit],\n                    Work              : MspExport.convertDurationToMspDuration(effortMs, 'ms'),\n                    EffortDriven      : task.effortDriven ? 1 : 0,\n                    Estimated         : 0,\n                    Milestone         : task.isMilestone ? 1 : 0,\n                    Summary           : task.isLeaf ? 0 : 1,\n                    PercentComplete   : Math.round(task.percentDone),\n                    ActualStart       : startDateStr,\n                    ActualDuration    : MspExport.convertDurationToMspDuration(actualDurationMs, 'ms'),\n                    RemainingDuration : MspExport.convertDurationToMspDuration(durationMs - actualDurationMs, 'ms'),\n                    PredecessorLink   : predecessors.map(predecessor => ({\n                        LagFormat      : taskUnitMap[predecessor.lagUnit],\n                        LinkLag        : project.convertDuration(predecessor.lag, predecessor.lagUnit, 'minute') * 10,\n                        PredecessorUID : me.getTaskUID(predecessor.fromEvent),\n                        Type           : dependencyTypeMap[predecessor.type]\n                    })),\n                    Baseline : task.baselines.map((baseline, index) => ({\n                        Number   : index,\n                        Finish   : DH.format(baseline.endDate, dateFormat),\n                        Start    : DH.format(baseline.startDate, dateFormat),\n                        Duration : MspExport.convertDurationToMspDuration(baseline.duration, baseline.durationUnit)\n                    })),\n                    IgnoreResourceCalendar : task.ignoreResourceCalendar ? 1 : 0,\n                    Rollup                 : task.rollup ? 1 : 0,\n                    ConstraintType         : task.constraintType ? constraintMap[task.constraintType] : (isForward ? 0 : 1),\n                    CalendarUID            : me.getCalendarUID(task.calendar)\n                };\n\n            if (task.constraintDate) {\n                result.ConstraintDate = DH.format(task.constraintDate, dateFormat);\n            }\n\n            if (task.deadlineDate) {\n                result.Deadline = DH.format(task.deadlineDate, dateFormat);\n            }\n\n            if (task.note) {\n                result.Notes = task.note;\n            }\n\n            return result;\n        });\n    }\n\n    getTaskUID(task) {\n        return task.internalId;\n    }\n\n    getCalendarUID(calendar, fallbackValue = -1) {\n        return calendar && !calendar.isRoot ? calendar.internalId : fallbackValue;\n    }\n\n    /**\n     * Format Resources from Gantt to MS Project format.\n     * @returns {Array} Resources array formatted\n     * @private\n     */\n    getResourcesData() {\n        return this.client.resources.map(resource => ({\n            UID         : resource.internalId,\n            Name        : resource.name,\n            Type        : 1,\n            MaxUnits    : '1.00',\n            PeakUnits   : '1.00',\n            // seems for version 2013 setting the calendar id it breaks so only Project level calendar is importable\n            CalendarUID : this.msProjectVersion === 2013 ? null : this.getCalendarUID(this.resourceCalendar.get(resource))\n        }));\n    }\n\n    /**\n     * Format Assignments from Gantt to MS Project format.\n     * @returns {Array} Assignments array formatted\n     * @private\n     */\n    getAssignmentsData() {\n        const result = [];\n\n        // for version 2013 the assignments doesn't work\n        if (this.msProjectVersion === 2013) {\n            return result;\n        }\n\n        const { project } = this.client;\n\n        for (const task of this.tasks) {\n            const\n                assigned    = task.assigned,\n                taskUID     = this.getTaskUID(task),\n                percentDone = Math.round(task.percentDone),\n                start       = DH.format(task.startDate, this.dateFormat),\n                finish      = DH.format(task.endDate, this.dateFormat);\n\n            if (assigned.size) {\n                for (const assignment of assigned) {\n                    const\n                        assignmentWorkMs          = project.convertDuration(assignment.effort, task.effortUnit, 'millisecond'),\n                        actualAssignmentWorkMs    = project.convertDuration(assignment.actualEffort, task.effortUnit, 'millisecond'),\n                        remainingAssignmentWorkMs = assignmentWorkMs - actualAssignmentWorkMs;\n\n                    result.push({\n                        UpdateNeeded        : 0,\n                        UID                 : assignment.internalId,\n                        TaskUID             : taskUID,\n                        ResourceUID         : assignment.resource.internalId,\n                        PercentWorkComplete : percentDone,\n                        Work                : MspExport.convertDurationToMspDuration(assignmentWorkMs, 'ms'),\n                        ActualWork          : MspExport.convertDurationToMspDuration(actualAssignmentWorkMs, 'ms'),\n                        RemainingWork       : MspExport.convertDurationToMspDuration(remainingAssignmentWorkMs, 'ms'),\n                        Start               : start,\n                        Finish              : finish,\n                        Units               : assignment.units / 100\n                    });\n                }\n            }\n            else {\n                const\n                    effortMs       = project.convertDuration(task.effort, task.effortUnit, 'millisecond'),\n                    actualEffortMs = effortMs * percentDone * 0.01,\n                    effortStr      = MspExport.convertDurationToMspDuration(effortMs, 'ms');\n\n                result.push({\n                    UID                 : Model._internalIdCounter++,\n                    TaskUID             : taskUID,\n                    ResourceUID         : -65535,\n                    PercentWorkComplete : percentDone,\n                    ActualWork          : MspExport.convertDurationToMspDuration(actualEffortMs, 'ms'),\n                    RemainingWork       : MspExport.convertDurationToMspDuration(effortMs - actualEffortMs, 'ms'),\n                    Start               : start,\n                    Finish              : finish,\n                    Units               : 1,\n                    Work                : effortStr\n                });\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Convert to MS Project Span Date Time format.\n     * @param {Number} value The value to be converted.\n     * @param {String} unit The unit of the value to be converted\n     * @returns {String} The value formatted to \"PTnHnMnS\". E.g: PT10H30M, PT6H20M13S\n     * @private\n     */\n    static convertDurationToMspDuration(value, unit) {\n        if (value == null) {\n            return '';\n        }\n\n        const\n            delta = DH.getDelta(DH.as('ms', value, unit), { ignoreLocale : true, maxUnit : 'hour' }),\n            { hour = 0, minute = 0, second = 0 } = delta;\n\n        return `PT${hour}H${minute}M${second}S`;\n    }\n}\n\nGridFeatureManager.registerFeature(MspExport, false, 'Gantt');\n", "import Base from '../../../Core/Base.js';\nimport DomDataStore from '../../../Core/data/DomDataStore.js';\n\n/**\n * @module Gantt/view/mixin/GanttDom\n */\n\nconst hyphenRe = /-/g;\n\n/**\n * An object which encapsulates a Gantt timeline tick context based on a DOM event. This will include\n * the row (task) information and the tick and time information for a DOM pointer event detected\n * in the timeline.\n * @typedef {Object} GanttTimelineContext\n * @property {Event} domEvent The DOM event which triggered the context change.\n * @property {HTMLElement} eventElement If the `domEvent` was on an event bar, this will be the event bar element.\n * @property {HTMLElement} cellElement The cell element under the `domEvent`\n * @property {Date} date The date corresponding to the `domEvent` position in the timeline\n * @property {Scheduler.model.TimeSpan} tick A {@link Scheduler.model.TimeSpan} record which encapsulates the contextual tick\n * @property {Number} tickIndex The contextual tick index. This may be fractional.\n * @property {Number} tickParentIndex The integer contextual tick index.\n * @property {Date} tickStartDate The start date of the contextual tick.\n * @property {Date} tickEndDate The end date of the contextual tick.\n * @property {Grid.row.Row} row The contextual {@link Grid.row.Row}\n * @property {Number} index The contextual row index\n * @property {Gantt.model.TaskModel} [taskRecord] The contextual task record (if any) if the event source is a `Gantt`\n */\n\n/**\n * Fired when the pointer-activated {@link Scheduler.view.mixin.TimelineDomEvents#property-timelineContext} has changed.\n * @event timelineContextChange\n * @override // this has different TimelineContext type from the one in TimelineDomEvents\n * @param {GanttTimelineContext} oldContext The tick/task context being deactivated.\n * @param {GanttTimelineContext} context The tick/task context being activated.\n */\n\n/**\n * Mixin with TaskModel <-> HTMLElement mapping functions\n *\n * @mixin\n */\nexport default Target => class GanttDom extends (Target || Base) {\n    static get $name() {\n        return 'GanttDom';\n    }\n\n    // Alias for resolveTaskRecord method to satisfy the scheduler naming requirements.\n    resolveEventRecord(element) {\n        return this.resolveTaskRecord(element);\n    }\n\n    /**\n     * Returns the task record for a DOM element\n     * @param {HTMLElement} element The DOM node to lookup\n     * @returns {Gantt.model.TaskModel} The task record\n     */\n    resolveTaskRecord(element) {\n        const eventElement = element.closest(this.eventSelector);\n\n        return eventElement ? this.store.getById(eventElement.dataset.taskId) : this.getRecordFromElement(element);\n    }\n\n    /**\n     * Product agnostic method which yields the {@link Gantt.model.TaskModel} record which underpins the row which\n     * encapsulates the passed element. The element can be a grid cell, or an event element, and the result\n     * will be a {@link Gantt.model.TaskModel}\n     * @param {HTMLElement|Event} elementOrEvent The HTML element or DOM event to resolve a record from\n     * @returns {Gantt.model.TaskModel} The resource corresponding to the element, or null if not found.\n     */\n    resolveRowRecord(elementOrEvent) {\n        return this.resolveTaskRecord(elementOrEvent);\n    }\n\n    /**\n     * Relays keydown events as taskKeyDown if we have a selected task(s).\n     * @private\n     */\n    onElementKeyDown(event) {\n        const taskRecord = this.resolveTaskRecord(event.target);\n\n        super.onElementKeyDown(event);\n\n        if (taskRecord) {\n            this.trigger('taskKeyDown', {\n                taskRecord,\n                event\n            });\n        }\n    }\n\n    /**\n     * Relays keyup events as taskKeyUp if we have a selected task(s).\n     * @private\n     */\n    onElementKeyUp(event) {\n        const taskRecord = this.resolveTaskRecord(event.target);\n\n        super.onElementKeyUp(event);\n\n        if (taskRecord) {\n            this.trigger('taskKeyUp', {\n                taskRecord,\n                event\n            });\n        }\n    }\n\n    /**\n     * Returns the HTMLElement representing a task record.\n     *\n     * @param {Gantt.model.TaskModel} taskRecord A task record\n     * @param {Boolean} [inner] Specify `false` to return the task wrapper element\n     *\n     * @returns {HTMLElement} The element representing the task record\n     */\n    getElementFromTaskRecord(taskRecord, inner = true) {\n        return this.taskRendering.getElementFromTaskRecord(taskRecord, inner);\n    }\n\n    // <remove-on-release>\n    // TODO: since we have decided to call tasks events then the method being aliased should be renamed\n    // </remove-on-release>\n    // Alias to make scheduler features applied to Gantt happy\n    getElementFromEventRecord(eventRecord) {\n        return this.getElementFromTaskRecord(eventRecord);\n    }\n\n    /**\n     * Generates the element `id` for a task element. This is used when\n     * recycling an event div which has been moved from one resource to\n     * another. The event is assigned its new render id *before* being\n     * returned to the free pool, so that when the render engine requests\n     * a div from the free pool, the same div will be returned and it will\n     * smoothly transition to its new position.\n     * @param {Scheduler.model.EventModel} taskRecord\n     * @private\n     */\n    getEventRenderId(taskRecord) {\n        // <remove-on-release>\n        // TODO: use DomHelper.makeValidId or StringHelper.createId. Cannot currently since they strip out ids that only contains numbers\n        // </remove-on-release>\n        return `${this.id.toString().replace(hyphenRe, '_')}-${taskRecord.id}`;\n    }\n\n    /**\n     * In Gantt, the task is the row, so it's valid to resolve a mouse event on a task to the TimeAxisColumn's cell.\n     *\n     * This method find the cell location of the passed event. It returns an object describing the cell.\n     * @param {Event} event A Mouse, Pointer or Touch event targeted at part of the grid.\n     * @returns {Object} An object containing the following properties:\n     * - `cellElement` - The cell element clicked on.\n     * - `columnId` - The `id` of the column clicked under.\n     * - `record` - The {@link Core.data.Model record} clicked on.\n     * - `id` - The `id` of the {@link Core.data.Model record} clicked on.\n     * @private\n     * @category Events\n     */\n    getEventData(event) {\n        const\n            me     = this,\n            record = me.resolveTimeSpanRecord(event.target);\n\n        // If the event was on a task, then we're in one of the TimeAxisColumn's cells.\n        if (record) {\n            const\n                cellElement = me.getCell({\n                    record,\n                    column : me.timeAxisColumn\n                }),\n                cellData = DomDataStore.get(cellElement),\n                id       = cellData.id,\n                columnId = cellData.columnId;\n\n            return {\n                cellElement,\n                cellData,\n                columnId,\n                id,\n                record,\n                cellSelector : { id, columnId }\n            };\n        }\n        else {\n            return super.getEventData(event);\n        }\n    }\n\n    // This does not need a className on Widgets.\n    // Each *Class* which doesn't need 'b-' + constructor.name.toLowerCase() automatically adding\n    // to the Widget it's mixed in to should implement thus.\n    get widgetClass() {}\n};\n", "import Base from '../../../Core/Base.js';\nimport Rectangle from '../../../Core/helper/util/Rectangle.js';\nimport DH from '../../../Core/helper/DateHelper.js';\n\n/**\n * @module Gantt/view/mixin/GanttRegions\n */\n\n/**\n * Functions to get regions (bounding boxes) for gantt, tasks etc.\n *\n * @mixin\n */\nexport default Target => class GanttRegions extends (Target || Base) {\n    static get $name() {\n        return 'GanttRegions';\n    }\n\n    /**\n     * Gets the region represented by the timeline and optionally only for a single task. Returns `null` if passed a\n     * task that is filtered out or not part of the task store.\n     * @param {Gantt.model.TaskModel} taskRecord (optional) The task record\n     * @returns {Core.helper.util.Rectangle|null} The region of the schedule\n     */\n    getScheduleRegion(taskRecord, local = true, dateConstraints) {\n        const\n            me                                   = this,\n            { timeAxisSubGridElement, timeAxis } = me;\n\n        let region;\n\n        if (taskRecord) {\n            const\n                taskElement = me.getElementFromTaskRecord(taskRecord),\n                row         = me.getRowById(taskRecord.id);\n\n            if (!row) {\n                return null;\n            }\n\n            region = Rectangle.from(row.getElement('normal'), timeAxisSubGridElement);\n\n            if (taskElement) {\n                const taskRegion = Rectangle.from(taskElement, timeAxisSubGridElement);\n\n                region.y      = taskRegion.y;\n                region.bottom = taskRegion.bottom;\n            }\n            else {\n                region.y += me.barMargin;\n                region.bottom -= me.barMargin;\n            }\n        }\n        else {\n            // <remove-on-release>\n            // TODO: This is what the function that was removed here did.\n            // The coordinate space needs to be sorted out here!\n            // </remove-on-release>\n            region       = Rectangle.from(timeAxisSubGridElement).moveTo(null, 0);\n            region.width = timeAxisSubGridElement.scrollWidth;\n\n            region.y      = region.y + me.barMargin;\n            region.bottom = region.bottom - me.barMargin;\n        }\n\n        const\n            taStart        = timeAxis.startDate,\n            taEnd          = timeAxis.endDate,\n            { start, end } = dateConstraints || {};\n\n        if (start && end && !timeAxis.timeSpanInAxis(start, end)) {\n            return null;\n        }\n\n        if (!start && !end) {\n            dateConstraints = me.getDateConstraints?.(taskRecord) || {\n                start : taStart,\n                end   : taEnd\n            };\n        }\n\n        let startX = me.getCoordinateFromDate(dateConstraints.start ? DH.max(taStart, dateConstraints.start) : taStart),\n            endX   = me.getCoordinateFromDate(dateConstraints.end ? DH.min(taEnd, dateConstraints.end) : taEnd);\n\n        if (!local) {\n            startX = me.translateToPageCoordinate(startX);\n            endX   = me.translateToPageCoordinate(endX);\n        }\n\n        region.x     = Math.min(startX, endX);\n        region.width = Math.max(startX, endX) - Math.min(startX, endX);\n\n        return region;\n    }\n\n    translateToPageCoordinate(x) {\n        const element = this.timeAxisSubGridElement;\n\n        return x + element.getBoundingClientRect().left - element.scrollLeft;\n    }\n\n    // Decide if a record is inside a collapsed tree node, or inside a collapsed group (using grouping feature)\n    isRowVisible(taskRecord) {\n        // records in collapsed groups/branches etc. are removed from processedRecords\n        return this.store.indexOf(taskRecord) >= 0;\n    }\n\n    /**\n     * Get the region for a specified task\n     * @param {Gantt.model.TaskModel} taskRecord\n     * @param {Boolean} [includeOutside]\n     * @param {Boolean} [inner] Specify true to return the box for the task bar within the wrapper.\n     * @returns {Core.helper.util.Rectangle}\n     */\n    getTaskBox(taskRecord, includeOutside = false, inner = false) {\n        return this.taskRendering.getTaskBox(...arguments);\n    }\n\n    getSizeAndPosition() {\n        return this.taskRendering.getSizeAndPosition(...arguments);\n    }\n\n    // This does not need a className on Widgets.\n    // Each *Class* which doesn't need 'b-' + constructor.name.toLowerCase() automatically adding\n    // to the Widget it's mixed in to should implement thus.\n    get widgetClass() {}\n};\n", "import Base from '../../../Core/Base.js';\nimport ObjectHelper from '../../../Core/helper/ObjectHelper.js';\nimport DomHelper from '../../../Core/helper/DomHelper.js';\n\n/**\n * @module Gantt/view/mixin/GanttScroll\n */\n\nconst defaultScrollOptions = {\n    block      : 'nearest',\n    edgeOffset : 20\n};\n\n/**\n * Functions for scrolling to tasks, dates etc.\n *\n * @mixin\n */\nexport default Target => class GanttScroll extends (Target || Base) {\n    static get $name() {\n        return 'GanttScroll';\n    }\n\n    /**\n     * Scrolls a task record into the viewport.\n     *\n     * @param {Gantt.model.TaskModel} taskRecord The task record to scroll into view\n     * @param {ScrollOptions} [options] How to scroll.\n     * @returns {Promise} A Promise which resolves when the scrolling is complete.\n     */\n    scrollTaskIntoView(taskRecord, options = defaultScrollOptions) {\n        let taskStart = taskRecord.startDate,\n            taskEnd   = taskRecord.endDate;\n\n        const me = this;\n\n        if (options.edgeOffset == null) {\n            options.edgeOffset = 20;\n        }\n\n        if (!taskRecord.isScheduled) {\n            return this.scrollRowIntoView(taskRecord, options);\n        }\n\n        if (me.timeAxisSubGrid.collapsed) {\n            return;\n        }\n\n        taskStart = taskStart || taskEnd;\n        taskEnd   = taskEnd || taskStart;\n\n        const taskIsOutside = taskStart < me.timeAxis.startDate | ((taskEnd > me.timeAxis.endDate) << 1);\n\n        // Make sure task is within TimeAxis time span unless extendTimeAxis passed as false.\n        // The TaskEdit feature passes false because it must not mutate the TimeAxis.\n        // Bitwise flag:\n        //  1 === start is before TimeAxis start.\n        //  2 === end is after TimeAxis end.\n        if (taskIsOutside && options.extendTimeAxis !== false) {\n            const currentTimeSpanRange = me.timeAxis.endDate - me.timeAxis.startDate;\n            let startAnchorPoint, endAnchorPoint;\n\n            // Event is too wide, expand the range to encompass it.\n            if (taskIsOutside === 3) {\n                me.timeAxis.setTimeSpan(\n                    new Date(taskStart.valueOf() - currentTimeSpanRange / 2),\n                    new Date(taskEnd.getTime() + currentTimeSpanRange / 2)\n                );\n            }\n            // Event is partially or wholly outside but will fit.\n            // Move the TimeAxis to include it. Attempt to maintain visual position.\n            else {\n                startAnchorPoint = me.getCoordinateFromDate((taskIsOutside & 1) ? taskEnd : taskStart);\n\n                // Event starts before\n                if (taskIsOutside & 1) {\n                    me.timeAxis.setTimeSpan(\n                        new Date(taskStart),\n                        new Date(taskStart.valueOf() + currentTimeSpanRange)\n                    );\n                }\n                // Event ends after\n                else {\n                    me.timeAxis.setTimeSpan(\n                        new Date(taskEnd.valueOf() - currentTimeSpanRange),\n                        new Date(taskEnd)\n                    );\n                }\n                // Restore view to same relative scroll position.\n                endAnchorPoint = (taskIsOutside & 1)\n                    ? me.getCoordinateFromDate(taskEnd)\n                    : me.getCoordinateFromDate(taskStart);\n\n                me.timeAxisSubGrid.scrollable.scrollBy(endAnchorPoint - startAnchorPoint);\n            }\n        }\n\n        // Establishing element to scroll to\n        const el = me.getElementFromTaskRecord(taskRecord);\n\n        if (el) {\n            const scroller = me.timeAxisSubGrid.scrollable;\n\n            // Scroll into view with animation and highlighting if needed.\n            // Mute scroll events during the scroll so that event rendering doesn't replace\n            // the target element.\n            return scroller.scrollIntoView(el, ObjectHelper.assign({\n                silent : true\n            }, options));\n        }\n        else {\n            // Event not rendered, scroll to calculated location\n            return me.scrollUnrenderedTaskIntoView(taskRecord, options);\n        }\n    }\n\n    /**\n     * Scrolls an unrendered task into view. Internal function used from #scrollTaskIntoView.\n     * @private\n     */\n    scrollUnrenderedTaskIntoView(taskRec, options = defaultScrollOptions) {\n        if (options.edgeOffset == null) {\n            options.edgeOffset = 20;\n        }\n\n        const\n            me               = this,\n            scroller         = me.timeAxisSubGrid.scrollable,\n            box              = me.getTaskBox(taskRec),\n            scrollerViewport = scroller.viewport,\n            targetRect       = box.translate(scrollerViewport.x - scroller.x, scrollerViewport.y - scroller.y);\n\n        let result           = scroller.scrollIntoView(targetRect, Object.assign({}, options, { highlight : false }));\n\n        if (options.highlight || options.focus) {\n            const detacher = me.ion({\n                renderTask({ taskRecord, element }) {\n                    if (taskRecord === taskRec) {\n                        detacher();\n                        result = result.then(() => {\n                            options.highlight && DomHelper.highlight(element);\n                            options.focus && element.focus();\n                        });\n                    }\n                }\n            });\n        }\n        else {\n            // Task is painter asynchronously after scroll, need to wait for corresponding event from the view\n            result = Promise.all([\n                result,\n                new Promise(resolve => {\n                    const detacher = me.ion({\n                        renderTask({ taskRecord }) {\n                            if (taskRecord === taskRec) {\n                                detacher();\n                                resolve();\n                            }\n                        }\n                    });\n                })\n            ]);\n        }\n\n        return result;\n    }\n\n    // This does not need a className on Widgets.\n    // Each *Class* which doesn't need 'b-' + constructor.name.toLowerCase() automatically adding\n    // to the Widget it's mixed in to should implement thus.\n    get widgetClass() {}\n};\n", "import Base from '../../../Core/Base.js';\n\n/**\n * @module Gantt/view/mixin/GanttState\n */\n\n/**\n * Mixin for Gantt that handles state. It serializes the following gantt properties:\n *\n * * barMargin\n * * tickSize\n * * zoomLevel\n *\n * See {@link Grid.view.mixin.GridState} and {@link Core.mixin.State} for more information on state.\n *\n * @mixin\n */\nexport default Target => class GanttState extends (Target || Base) {\n    static get $name() {\n        return 'GanttState';\n    }\n\n    updateProject(project, old) {\n        super.updateProject(project, old);\n\n        this.detachListeners('suspendStateDuringDelayedCalculation');\n\n        // Delay calculation code path involves changing readOnly of the Gantt panel. This will also\n        // trigger state change, we don't need that. So we pause `triggerUpdate` listener to not trigger `stateChange`\n        if (project?.delayCalculation) {\n            project.ion({\n                name                  : 'suspendStateDuringDelayedCalculation',\n                delayCalculationStart : {\n                    fn   : 'suspendStateListener',\n                    prio : 10\n                },\n                delayCalculationEnd : {\n                    fn   : 'resumeStateListener',\n                    prio : -10\n                },\n                thisObj : this\n            });\n        }\n    }\n\n    suspendStateListener() {\n        this.stateListenerSuspended = (this.stateListenerSuspended || 0) + 1;\n    }\n\n    resumeStateListener() {\n        const me = this;\n\n        me.stateListenerSuspended = (me.stateListenerSuspended || 1) - 1;\n\n        if (!me.stateListenerSuspended && me.isSaveStatePending) {\n            me.saveState({ immediate : true });\n        }\n    }\n\n    saveState(...args) {\n        if (!this.stateListenerSuspended) {\n            return super.saveState(...args);\n        }\n    }\n\n    /**\n     * Gets or sets gantt's state. Check out {@link Gantt.view.mixin.GanttState} mixin for details.\n     * @member {Object} state\n     * @member {Object} state\n     * @property {Object[]} state.columns\n     * @property {Number} state.rowHeight\n     * @property {Object} state.scroll\n     * @property {Number} state.scroll.scrollLeft\n     * @property {Number} state.scroll.scrollTop\n     * @property {Array} state.selectedRecords\n     * @property {String} state.style\n     * @property {String} state.selectedCell\n     * @property {Object} state.store\n     * @property {Object} state.store.sorters\n     * @property {Object} state.store.groupers\n     * @property {Object} state.store.filters\n     * @property {Object} state.subGrids\n     * @property {Number} state.barMargin\n     * @property {Number} state.zoomLevel\n     * @category State\n     */\n\n    /**\n     * Apply previously stored state.\n     * @param {Object} state\n     * @private\n     */\n    applyState(state) {\n        const me = this;\n\n        // Applying sorters too early might lead to unexpected results if fields in the incoming dataset will be changed\n        // after initial commit\n        // state.store might be undefined if responsive level is being applied\n        if (!me.project.isInitialCommitPerformed && (state.store?.sorters || state.store?.filters)) {\n            const storeState = state.store;\n\n            me.project.commitAsync().then(() => {\n                if (!me.isDestroyed) {\n                    me.suspendRefresh();\n                    me.store.state = storeState;\n                    me.resumeRefresh(true);\n                }\n            });\n\n            delete state.store;\n        }\n\n        // Restoring selected cell and records during startup attempts to access task DOM elements which are not yet\n        // rendered. So we filter out these props and apply them in onPaint handler\n        const specialKeys = ['selectedCell', 'selectedRecords'];\n        if (specialKeys.some(key => key in state)) {\n            const subState = {};\n\n            // Copy special keys to a partial state object to apply later\n            specialKeys.forEach(key => {\n                if (key in state) {\n                    subState[key] = state[key];\n\n                    delete state[key];\n                }\n            });\n\n            // Create fixer method that will apply state after\n            me._applyStateAfterPaint = () => {\n                me._applyStateAfterPaint = null;\n\n                me.suspendRefresh();\n                Object.keys(subState).forEach(key => me[key] = subState[key]);\n                me.resumeRefresh(true);\n            };\n        }\n\n        super.applyState(state);\n    }\n\n    // This does not need a className on Widgets.\n    // Each *Class* which doesn't need 'b-' + constructor.name.toLowerCase() automatically adding\n    // to the Widget it's mixed in to should implement thus.\n    get widgetClass() {}\n\n    onPaint(...args) {\n        super.onPaint(...args);\n\n        const me = this;\n\n        if (me._applyStateAfterPaint) {\n            if (!me.project.isInitialCommitPerformed) {\n                me.project.ion({\n                    commitFinalized() {\n                        me._applyStateAfterPaint();\n                    },\n                    thisObj : me,\n                    once    : true\n                });\n            }\n            else {\n                me._applyStateAfterPaint();\n            }\n        }\n    }\n};\n", "import Base from '../../../Core/Base.js';\nimport ProjectConsumer from '../../../Scheduler/data/mixin/ProjectConsumer.js';\nimport ProjectModel from '../../model/ProjectModel.js';\nimport DateHelper from '../../../Core/helper/DateHelper.js';\n\n/**\n * @module Gantt/view/mixin/GanttStores\n */\n\n/**\n * Functions for store assignment and store event listeners.\n * Properties are aliases to corresponding\n * ones of Gantt's {@link Gantt.model.ProjectModel project} instance.\n *\n * @mixin\n */\nexport default Target => class GanttStores extends ProjectConsumer(Target || Base) {\n    static get $name() {\n        return 'GanttStores';\n    }\n\n    // This is the static definition of the Stores we consume from the project, and\n    // which we must provide *TO* the project if we or our CrudManager is configured\n    // with them.\n    // The property name is the store name, and within that there is the dataName which\n    // is the property which provides static data definition. And there is a listeners\n    // definition which specifies the listeners *on this object* for each store.\n    //\n    // To process incoming stores, implement an updateXxxxxStore method such\n    // as `updateEventStore(eventStore)`.\n    //\n    // To process an incoming Project implement `updateProject`. __Note that\n    // `super.updateProject(...arguments)` must be called first.__\n    static get projectStores() {\n        return {\n            calendarManagerStore : {},\n\n            resourceStore : {\n                dataName : 'resources'\n            },\n\n            eventStore : {\n                dataName : 'events'\n            },\n\n            assignmentStore : {\n                dataName : 'assignments'\n            },\n\n            dependencyStore : {\n                dataName : 'dependencies'\n            }\n        };\n    }\n\n    static get configurable() {\n        return {\n            // Overridden. ProjectConsumer defaults to Scheduler's ProjectModel\n            projectModelClass : ProjectModel,\n\n            /**\n             * Inline tasks, will be loaded into an internally created TaskStore.\n             * @config {Gantt.model.TaskModel[]|TaskModelConfig[]}\n             * @category Data\n             */\n            tasks : null,\n\n            /**\n             * The {@link Gantt.data.TaskStore} holding the tasks to be rendered into the Gantt.\n             * @config {Gantt.data.TaskStore}\n             * @category Data\n             */\n            taskStore : null\n        };\n    }\n\n    updateProject(project, oldProject) {\n        super.updateProject(project, oldProject);\n\n        this.detachListeners('ganttStores');\n\n        this.bindCrudManager(project);\n\n        project?.ion({\n            name    : 'ganttStores',\n            refresh : 'internalOnProjectRefresh',\n            thisObj : this\n        });\n    }\n\n    get replica() {\n        return this.project.replica;\n    }\n\n    internalOnProjectRefresh({ isInitialCommit, isCalculated }) {\n        const\n            me = this,\n            {\n                project,\n                visibleDate = {}\n            }  = me;\n\n        if (!me.isPainted) {\n            return;\n        }\n\n        if (!me.appliedViewStartDate && !('startDate' in me.initialConfig) && project.startDate) {\n            const\n                requestedVisibleDate   = visibleDate?.date,\n                { startDate, endDate } = project,\n                min                    = requestedVisibleDate ? DateHelper.min(startDate, requestedVisibleDate) : startDate,\n                max                    = requestedVisibleDate\n                    ? (endDate\n                        ? DateHelper.max(endDate, requestedVisibleDate)\n                        : DateHelper.add(min, me.visibleDateRange.endDate - me.visibleDateRange.startDate))\n                    : endDate;\n\n            // if managed to calculated start/end dates\n            if (min && max) {\n                me.setTimeSpan(min, max, { ...visibleDate, visibleDate : requestedVisibleDate });\n                me.appliedViewStartDate = true;\n            }\n        }\n\n        // Transition all refreshes except the initial one or any used for early rendering\n        if (!isInitialCommit && isCalculated) {\n            me.refreshWithTransition();\n        }\n        // No transition on initial refresh, nothing to transition and don't want to delay dependency drawing more\n        // than necessary\n        else {\n            me.refresh();\n        }\n\n        me.trigger('projectRefresh', { isInitialCommit, isCalculated });\n    }\n\n    //endregion\n\n    //region Inline data\n\n    //region Store & model docs\n\n    // Configs\n\n    /**\n     * Inline resources, will be loaded into the backing project's ResourceStore.\n     * @config {Gantt.model.ResourceModel[]|ResourceModelConfig[]} resources\n     * @category Data\n     */\n\n    /**\n     * Inline assignments, will be loaded into the backing project's AssignmentStore.\n     * @config {Gantt.model.AssignmentModel[]|AssignmentModelConfig[]} assignments\n     * @category Data\n     */\n\n    /**\n     * Inline dependencies, will be loaded into the backing project's DependencyStore.\n     * @config {Gantt.model.DependencyModel[]|DependencyModelConfig[]} dependencies\n     * @category Data\n     */\n\n    /**\n     * Inline time ranges, will be loaded into the backing project's time range store.\n     * @config {Scheduler.model.TimeSpan[]|TimeSpanConfig[]} timeRanges\n     * @category Data\n     */\n\n    /**\n     * Inline calendars, will be loaded into the backing project's CalendarManagerStore.\n     * @config {Gantt.model.CalendarModel[]|CalendarModelConfig[]} calendars\n     * @category Data\n     */\n\n    // Properties\n\n    /**\n     * Get/set resources, applies to the backing project's ResourceStore.\n     * @member {Gantt.model.ResourceModel[]} resources\n     * @accepts {Gantt.model.ResourceModel[]|ResourceModelConfig[]}\n     * @category Data\n     */\n\n    /**\n     * Get/set assignments, applies to the backing project's AssignmentStore.\n     * @member {Gantt.model.AssignmentModel[]} assignments\n     * @accepts {Gantt.model.AssignmentModel[]|AssignmentModelConfig[]}\n     * @category Data\n     */\n\n    /**\n     * Get/set dependencies, applies to the backing projects DependencyStore.\n     * @member {Gantt.model.DependencyModel[]} dependencies\n     * @accepts {Gantt.model.DependencyModel[]|DependencyModelConfig[]}\n     * @category Data\n     */\n\n    /**\n     * Get/set time ranges, applies to the backing project's TimeRangeStore.\n     * @member {Scheduler.model.TimeSpan[]} timeRanges\n     * @accepts {Scheduler.model.TimeSpan[]|TimeSpanConfig[]}\n     * @category Data\n     */\n\n    /**\n     * Get/set calendars, applies to the backing projects CalendarManagerStore.\n     * @member {Gantt.model.CalendarModel[]} calendars\n     * @accepts {Gantt.model.CalendarModel[]|CalendarModelConfig[]}\n     * @category Data\n     */\n\n    //endregion\n\n    get timeRanges() {\n        return this.project.timeRanges;\n    }\n\n    set timeRanges(timeRanges) {\n        this.project.timeRanges = timeRanges;\n    }\n\n    get calendars() {\n        return this.project.calendars;\n    }\n\n    set calendars(calendars) {\n        this.project.calendars = calendars;\n    }\n\n    //endregion\n\n    //region TaskStore\n\n    get usesDisplayStore() {\n        return this.store !== this.taskStore;\n    }\n\n    /**\n     * Get/set tasks, applies to the backing project's EventStore.\n     * Returns a flat array of all tasks in the task store.\n     * @member {Gantt.model.TaskModel[]} tasks\n     * @accepts {Gantt.model.TaskModel[]|TaskModelConfig[]}\n     * @category Data\n     */\n    get tasks() {\n        return this.project.eventStore.allRecords;\n    }\n\n    changeTasks(tasks) {\n        const { project } = this;\n\n        if (this.buildingProjectConfig) {\n            // Set the property in the project config object.\n            project.eventsData = tasks;\n        }\n        else {\n            // Live update the project when in use.\n            project.eventStore.data = tasks;\n        }\n    }\n\n    /**\n     * Get/set the task store instance of the backing project.\n     * @member {Gantt.data.TaskStore} taskStore\n     * @category Data\n     */\n    changeTaskStore(taskStore) {\n        const { project } = this;\n\n        if (this.buildingProjectConfig) {\n            // Set the property in the project config object.\n            // Must not go through the updater. It's too early to\n            // inform host of store change.\n            project.eventStore = taskStore;\n            return;\n        }\n\n        // Live update the project when in use.\n        if (!this.initializingProject) {\n            if (project.eventStore !== taskStore) {\n                project.setEventStore(taskStore);\n                taskStore = project.eventStore;\n            }\n        }\n        return taskStore;\n    }\n\n    updateEventStore(eventStore) {\n        const me = this;\n\n        eventStore.metaMapId = me.id;\n\n        // taskStore is used for rows (store) and tasks\n        me.taskStore = me.store = eventStore;\n    }\n\n    bindStore(store) {\n        super.bindStore(store);\n\n        this.timeAxisViewModel.store = store;\n\n        // Occasionally we need to track batched changes.\n        // TaskResize requires this as it changes the endDate with task batched.\n        this.detachListeners('storeBatchedUpdateListener');\n\n        store.ion({\n            name          : 'storeBatchedUpdateListener',\n            batchedUpdate : 'onEventStoreBatchedUpdate',\n            thisObj       : this\n        });\n    }\n\n    /**\n     * Listener to the batchedUpdate event which fires when a field is changed on a record which\n     * is batch updating. Occasionally UIs must keep in sync with batched changes.\n     * For example, the TaskResize feature performs batched updating of the startDate/endDate\n     * and it tells its client to listen to batchedUpdate.\n     * @private\n     */\n    onEventStoreBatchedUpdate(event) {\n        const me = this;\n\n        if (me.listenToBatchedUpdates) {\n            const wasEnabled = me.enableEventAnimations;\n\n            // This pathway is used from TaskResize during dragging, so we do not\n            // want the size animating. It should follow the pointer in real time.\n            me.enableEventAnimations = false;\n            me.onStoreUpdateRecord(event);\n            me.enableEventAnimations = wasEnabled;\n        }\n    }\n\n    //endregion\n\n    //region Internal\n\n    // This does not need a className on Widgets.\n    // Each *Class* which doesn't need 'b-' + constructor.name.toLowerCase() automatically adding\n    // to the Widget it's mixed in to should implement thus.\n    get widgetClass() {}\n\n    //endregion\n};\n", "import Base from '../../../Core/Base.js';\n\n/**\n * @module Gantt/view/mixin/GanttTimelineDateMapper\n */\n\nexport default Target => class GanttTimelineDateMapper extends (Target || Base) {\n    static get $name() {\n        return 'GanttTimelineDateMapper';\n    }\n\n    /**\n     * Method to get a displayed end date value, see {@link Gantt/view/mixin/GanttTimelineDateMapper#function-getFormattedEndDate} for more info.\n     * @private\n     * @param {Date} endDate The date to format\n     * @param {Date} startDate The start date\n     * @returns {Date} The date value to display\n     */\n    getDisplayEndDate(endDate, startDate) {\n        return endDate;\n    }\n\n    // This does not need a className on Widgets.\n    // Each *Class* which doesn't need 'b-' + constructor.name.toLowerCase() automatically adding\n    // to the Widget it's mixed in to should implement thus.\n    get widgetClass() {}\n};\n", "import Base from '../../../Core/Base.js';\n\n/**\n * @module Gantt/view/mixin/TaskNavigation\n */\nconst animate100 = {\n    animate : 100\n};\n\n/**\n * Mixin that tracks event or assignment selection by clicking on one or more events in the scheduler.\n * @mixin\n */\nexport default Target => class TaskNavigation extends (Target || Base) {\n    static get $name() {\n        return 'TaskNavigation';\n    }\n\n    static get defaultConfig() {\n        return {\n            navigator : {\n                inlineFlow : false,\n                prevKey    : 'ArrowUp',\n                nextKey    : 'ArrowDown',\n                keys       : {\n                    Enter : 'onTaskEnterKey'\n                }\n            },\n\n            isNavigationKey : {\n                ArrowDown  : 1,\n                ArrowUp    : 1,\n                ArrowLeft  : 0,\n                ArrowRight : 0\n            }\n        };\n    }\n\n    processEvent(event) {\n        const me = this,\n            eventElement = event.target.closest(me.eventSelector);\n\n        if (!me.navigator.disabled && eventElement) {\n            event.taskRecord = event.eventRecord = me.resolveTaskRecord(eventElement);\n        }\n\n        return event;\n    }\n\n    normalizeTarget(event) {\n        return event.taskRecord;\n    }\n\n    // Makes sure you a click on a task that is already focused will call cell selection\n    onElementMouseDown(event) {\n        const\n            me               = this,\n            { _focusedCell } = me,\n            taskEl           = event.target.closest(me.navigator.itemSelector),\n            isFocused        = taskEl && taskEl === _focusedCell?.target;\n\n        super.onElementMouseDown(event);\n\n        if (isFocused && me.lastNavigationEvent !== event) {\n            me.onCellNavigate?.(me, _focusedCell, _focusedCell, true);\n            me.lastNavigationEvent = event; // Saved the navigation event so to not process this event twice\n        }\n    }\n\n    selectEvent(record, preserveSelection = false) {\n        if (!this.isSelected(record)) {\n            // Select row without scrolling any column into view\n            this.selectRow({\n                record         : record.id,\n                column         : false,\n                addToSelection : preserveSelection\n            });\n        }\n    }\n\n    deselectEvent(record) {\n        this.deselectRow(record.id);\n    }\n\n    getNext(taskRecord) {\n        const\n            me        = this,\n            { store } = me;\n\n        for (let rowIdx = store.indexOf(taskRecord) + 1; rowIdx < store.count; rowIdx++) {\n            const nextTask = store.getAt(rowIdx);\n\n            // Skip tasks which are outside the TimeAxis\n            if (me.isInTimeAxis(nextTask)) {\n                return nextTask;\n            }\n        }\n    }\n\n    getPrevious(taskRecord) {\n        const\n            me        = this,\n            { store } = me;\n\n        for (let rowIdx = store.indexOf(taskRecord) - 1; rowIdx >= 0; rowIdx--) {\n            const prevTask = store.getAt(rowIdx);\n\n            // Skip tasks which are outside the TimeAxis\n            if (me.isInTimeAxis(prevTask)) {\n                return prevTask;\n            }\n        }\n    }\n\n    set activeEvent(record) {\n        this.navigator.activeItem = this.getElementFromTaskRecord(record, false);\n    }\n\n    get activeEvent() {\n        const { activeItem } = this.navigator;\n\n        if (activeItem) {\n            return this.resolveTaskRecord(activeItem);\n        }\n    }\n\n    async navigateTo(targetEvent, {\n        scrollIntoView = true,\n        uiEvent        = {}\n    }) {\n        const\n            me                      = this,\n            { navigator }           = me,\n            { skipScrollIntoView }  = navigator;\n\n        if (targetEvent) {\n            if (scrollIntoView) {\n                // No key processing during scroll\n                navigator.disabled = true;\n                await me.scrollTaskIntoView(targetEvent, animate100);\n                navigator.disabled = false;\n            }\n            else {\n                navigator.skipScrollIntoView = true;\n            }\n\n            // Panel can be destroyed before promise is resolved\n            if (!me.isDestroyed) {\n                me.activeEvent = targetEvent;\n                navigator.skipScrollIntoView = skipScrollIntoView;\n                navigator.trigger('navigate', {\n                    event : uiEvent,\n                    item  : me.getElementFromTaskRecord(targetEvent, false)\n                });\n            }\n        }\n    }\n\n    clearEventSelection() {\n        this.deselectAll();\n    }\n\n    onTaskEnterKey() {\n        // Empty, to be chained by features (used by TaskEdit)\n    }\n\n    // OVERRIDE for EventNavigation#onDeleteKey\n    onDeleteKey(keyEvent) {\n        const record = keyEvent.eventRecord;\n\n        if (!this.readOnly && this.enableDeleteKey && record) {\n            this.removeEvents([record]);\n        }\n    }\n\n    onGridBodyFocusIn(focusEvent) {\n        // Task navigation only has a say when navigation is inside the TimeAxisSubGrid\n        if (this.timeAxisSubGridElement.contains(focusEvent.target)) {\n            const\n                me                  = this,\n                { navigationEvent } = me,\n                { target }          = focusEvent,\n                eventFocus          = target.closest(me.navigator.itemSelector),\n                task                = eventFocus ? me.resolveTaskRecord(target) : me.getRecordFromElement(target),\n                destinationCell     = me.normalizeCellContext({\n                    rowIndex : me.store.indexOf(task),\n                    column   : me.timeAxisColumn,\n                    target\n                });\n\n            // Don't take over what the event navigator does if it's doing task navigation.\n            // Just silently cache our actionable location.\n            if (eventFocus) {\n                if (me.lastNavigationEvent !== navigationEvent) {\n                    const { _focusedCell } = me;\n\n                    me._focusedCell = destinationCell;\n                    me.onCellNavigate?.(me, _focusedCell, destinationCell, true);\n                    // Saved the navigation event so to not process this event twice\n                    me.lastNavigationEvent = navigationEvent;\n                }\n                return;\n            }\n\n            // Try to focus the task.\n            me.navigateTo(task, {\n                scrollIntoView : Boolean(navigationEvent?.type !== 'mousedown'),\n                uiEvent        : navigationEvent\n            });\n            return;\n        }\n\n        super.onGridBodyFocusIn(focusEvent);\n    }\n\n    // This does not need a className on Widgets.\n    // Each *Class* which doesn't need 'b-' + constructor.name.toLowerCase() automatically adding\n    // to the Widget it's mixed in to should implement thus.\n    get widgetClass() {}\n};\n", "import Base from '../../../Core/Base.js';\nimport DomSync from '../../../Core/helper/DomSync.js';\nimport DomClassList from '../../../Core/helper/util/DomClassList.js';\nimport Rectangle from '../../../Core/helper/util/Rectangle.js';\nimport DateHelper from '../../../Core/helper/DateHelper.js';\nimport StringHelper from '../../../Core/helper/StringHelper.js';\nimport DomHelper from '../../../Core/helper/DomHelper.js';\n\n// <remove-on-release>\n// TODO: No need to keep this as an \"orientation\", make it a mixin for Gantt instead\n// </remove-on-release>\n\n/**\n * @module Gantt/view/orientation/NewTaskRendering\n * @internal\n */\n\nconst\n    releaseEventActions  = {\n        releaseElement : 1, // Not used at all at the moment\n        reuseElement   : 1  // Used by some other element\n    },\n    renderEventActions   = {\n        newElement      : 1,\n        reuseOwnElement : 1,\n        reuseElement    : 1\n    };\n\n/**\n * Handles rendering of tasks, using the following strategy:\n *\n * 1. When a row is rendered, it collects a DOM config for its task bar and stores in a map (row -> config)\n * 2. When a rendering pass is done, it syncs the DOM configs from the map to DOM\n *\n * The need for caching with this approach is minimal, only the map needs to be kept up to date with available rows.\n *\n * @internal\n * @extends Core/Base\n */\nexport default class NewTaskRendering extends Base {\n\n    //region Config & Init\n\n    static get properties() {\n        return {\n            rowMap : new Map()\n        };\n    }\n\n    construct(gantt) {\n        this.gantt = gantt;\n\n        gantt.rowManager.ion({\n            renderDone      : 'onRenderDone',\n            removeRows      : 'onRemoveRows',\n            beforeRowHeight : 'onBeforeRowHeightChange',\n            renderRow       : 'onRenderRow',\n            thisObj         : this\n        });\n\n        super.construct({});\n    }\n\n    init() {}\n\n    //endregion\n\n    //region View hooks\n\n    refreshRows() {}\n\n    onTimeAxisViewModelUpdate() {\n        // Update view bounds\n        this.updateFromHorizontalScroll(this.gantt.timeAxisSubGrid.scrollable.x);\n    }\n\n    onViewportResize() {}\n\n    onDragAbort() {}\n\n    onBeforeRowHeightChange(event) {\n        const { gantt } = this;\n\n        if (gantt.foregroundCanvas) {\n            //gantt.element.classList.add('b-notransition');\n            gantt.foregroundCanvas.style.fontSize = `${(event?.height ?? gantt.rowHeight) - gantt.resourceMargin * 2}px`;\n            //gantt.element.classList.remove('b-notransition');\n        }\n    }\n\n    //endregion\n\n    //region Region & coordinates\n\n    get visibleDateRange() {\n        return this._visibleDateRange;\n    }\n\n    // <remove-on-release>\n    // TODO: Replace calls with generator below\n    // </remove-on-release>\n    getTaskBox(taskRecord, includeOutside = false, inner = false) {\n        const\n            { gantt }           = this,\n            { isBatchUpdating } = taskRecord,\n            { store }           = gantt,\n            startDate           = isBatchUpdating ? taskRecord.get('startDate') : taskRecord.startDate,\n            endDate             = isBatchUpdating ? taskRecord.get('endDate') : taskRecord.endDate;\n\n        if (inner) {\n            const innerElement = this.getElementFromTaskRecord(taskRecord);\n\n            if (innerElement) {\n                return Rectangle.from(innerElement, gantt.timeAxisSubGridElement);\n            }\n        }\n\n        // A task that gets startDate during initial propagation, which seems not have happened yet.\n        // Or a removed task (this fn is also used for baselines). Nothing to render then\n        if (!startDate || !endDate || (taskRecord.isTask && (store.isDestroyed || !store.isAvailable(taskRecord)))) {\n            return null;\n        }\n\n        const positionData = this.getSizeAndPosition(taskRecord, includeOutside, inner);\n\n        if (!positionData) {\n            return null;\n        }\n\n        const\n            { position, width } = positionData,\n            top = gantt.rowManager.calculateTop(store.indexOf(taskRecord.isBaseline ? taskRecord.task : taskRecord)) + gantt.resourceMargin,\n            height = gantt.rowHeight - gantt.resourceMargin * 2,\n            bounds = new Rectangle(position, top, width, height);\n\n        // Position always correct in Gantt, since there is no stacking\n        bounds.layout = true;\n\n        return bounds;\n    }\n\n    // returns an object with `position` + `width`. If task is not inside current time axis, position is -1\n    getSizeAndPosition(taskRecord, includeOutside, inner) {\n        const\n            me                   = this,\n            { gantt }            = me,\n            { timeAxis }         = gantt,\n            viewStart            = timeAxis.startDate,\n            viewEnd              = timeAxis.endDate,\n            isMilestone          = taskRecord.milestone,\n            // Ensure dependencies feature is present (=== false if not)\n            horizontalAdjustment = isMilestone ? gantt.features.dependencies.pathFinder?.startArrowMargin : 0;\n\n        let\n            // Must use Model.get in order to get latest values in case we are inside a batch.\n            // TaskResize changes the endDate using batching to enable a tentative change\n            // via the batchedUpdate event which is triggered when changing a field in a batch.\n            // Fall back to accessor if propagation has not populated date fields.\n            taskStart            = taskRecord.isBatchUpdating ? taskRecord.get('startDate') : taskRecord.startDate,\n            // Might get here before engine has normalized\n            taskEnd              = taskRecord.isBatchUpdating\n                ? taskRecord.get('endDate')\n                : taskRecord.endDate || (taskRecord.duration != null\n                    ? DateHelper.add(taskStart, taskRecord.duration, taskRecord.durationUnit) : null),\n            startCoordinate, endCoordinate;\n\n        // Early bailout for tasks that are fully out of timeaxis\n        if (!includeOutside && (taskEnd < viewStart || taskStart > viewEnd)) {\n            return null;\n        }\n\n        // The calls using `includeOutside` are not used during task rendering, but when rendering dependencies.\n        // In those cases the lines are expected to be drawn even to tasks fully out of view, clipped to view bounds\n        if (includeOutside && taskStart < viewStart) {\n            startCoordinate = gantt.getCoordinateFromDate(viewStart) - horizontalAdjustment;\n        }\n        else if (includeOutside && taskStart > viewEnd) {\n            startCoordinate = gantt.getCoordinateFromDate(viewEnd) + horizontalAdjustment;\n        }\n        // Starts before view and ends in or after view, approximate startCoordinate\n        else if (taskStart < viewStart) {\n            const\n                // Using seconds instead of ms in a try to not loose to much precision in year views\n                pxPerSecond      = gantt.timeAxisViewModel.getSingleUnitInPixels('second'),\n                secondsOutOfView = (timeAxis.startMS - taskRecord.startDateMS) / 1000, // taskRecord.startDateMS is cached in TimeSpan\n                pxOutOfView      = secondsOutOfView * pxPerSecond;\n\n            startCoordinate = gantt.getCoordinateFromDate(viewStart) - pxOutOfView;\n        }\n        // The \"normal\" case, somewhere in the timeaxis\n        else {\n            if (gantt.fillTicks && !isMilestone && (!taskRecord.isBatchUpdating || gantt.snap)) {\n                const\n                    tickIdx = Math.floor(gantt.timeAxis.getTickFromDate(taskStart)),\n                    tick    = gantt.timeAxis.getAt(tickIdx);\n\n                taskStart = tick.startDate;\n            }\n            startCoordinate = gantt.getCoordinateFromDate(taskStart);\n        }\n\n        if (!isMilestone) {\n            // Same logic applies to `includeOutside` for end date, clip to view\n            if (includeOutside && taskEnd < viewStart) {\n                endCoordinate = gantt.getCoordinateFromDate(viewStart);\n            }\n            else if (includeOutside && taskEnd > viewEnd) {\n                endCoordinate = gantt.getCoordinateFromDate(viewEnd);\n            }\n            // Starts in or before view and ends outside, approximate end\n            else if (taskEnd > viewEnd) {\n                const\n                    pxPerSecond      = gantt.timeAxisViewModel.getSingleUnitInPixels('second'),\n                    secondsOutOfView = (taskRecord.endDateMS - timeAxis.endMS) / 1000, // taskRecord.endDateMS is cached in TimeSpan\n                    pxOutOfView      = secondsOutOfView * pxPerSecond;\n\n                endCoordinate = gantt.getCoordinateFromDate(viewEnd) + pxOutOfView;\n            }\n            else {\n                if (gantt.fillTicks && (!taskRecord.isBatchUpdating || gantt.snap)) {\n                    const\n                        tickIdx = Math.ceil(gantt.timeAxis.getTickFromDate(taskEnd)) - 1,\n                        tick    = gantt.timeAxis.getAt(tickIdx);\n\n                    taskEnd = tick.endDate;\n                }\n                endCoordinate = gantt.getCoordinateFromDate(taskEnd);\n            }\n        }\n\n        let width = isMilestone ? 0 : Math.abs(startCoordinate - endCoordinate);\n\n        // Requesting diamond width, in viewport space\n        if (inner && isMilestone && taskStart > viewStart && taskStart < viewEnd) {\n            // By default as wide as it is high\n            width = gantt.rowHeight - gantt.resourceMargin * 2;\n            startCoordinate -= width / 2;\n        }\n\n        if (!includeOutside && startCoordinate + width < 0) {\n            return null;\n        }\n\n        return {\n            position : startCoordinate,\n            width\n        };\n    }\n\n    getRowRegion(taskRecord, startDate, endDate) {\n        const\n            { gantt } = this,\n            row       = gantt.getRowFor(taskRecord);\n\n        // might not be rendered\n        if (!row) {\n            return null;\n        }\n\n        const\n            rowElement = row.getElement(gantt.timeAxisSubGrid.region),\n            taStart    = gantt.timeAxis.startDate,\n            taEnd      = gantt.timeAxis.endDate,\n            start      = startDate ? DateHelper.max(taStart, startDate) : taStart,\n            end        = endDate ? DateHelper.min(taEnd, endDate) : taEnd,\n            startX     = gantt.getCoordinateFromDate(start),\n            endX       = gantt.getCoordinateFromDate(end, true, true),\n            y          = row.top + gantt.scrollTop,\n            x          = Math.min(startX, endX),\n            bottom     = y + rowElement.offsetHeight;\n\n        return new Rectangle(x, y, Math.max(startX, endX) - x, bottom - y);\n    }\n\n    getDateFromXY(xy, roundingMethod, local) {\n        let coord = xy[0];\n\n        if (!local) {\n            coord = this.translateToScheduleCoordinate(coord);\n        }\n\n        return this.gantt.timeAxisViewModel.getDateFromPosition(coord, roundingMethod);\n    }\n\n    translateToScheduleCoordinate(x) {\n        // Get rid of fractional pixels, to not end up with negative fractional values for pos\n        const pos = x - Math.floor(this.gantt.timeAxisSubGridElement.getBoundingClientRect().left);\n        return pos + this.gantt.scrollLeft;\n    }\n\n    translateToPageCoordinate(x) {\n        const element = this.gantt.timeAxisSubGridElement;\n        return x + element.getBoundingClientRect().left - element.scrollLeft;\n    }\n\n    //endregion\n\n    //region Element <-> Record mapping\n\n    getElementFromTaskRecord(taskRecord, inner = true) {\n        const { syncIdMap } = this.gantt.foregroundCanvas;\n\n        let wrapper = syncIdMap?.[taskRecord.id];\n\n        // For linked tasks, we might be trying to find element for the original. If none found, we also check linked\n        // tasks. Needed for dependencies, since they point to original tasks, not linked ones.\n        if (!wrapper && taskRecord.hasLinks && syncIdMap) {\n            taskRecord.forEachLinked((store, linked) => {\n                if (syncIdMap[linked.id]) {\n                    wrapper = syncIdMap[linked.id];\n                }\n            });\n        }\n\n        return inner ? wrapper?.syncIdMap.task : wrapper;\n    }\n\n    //endregion\n\n    //region Dependency connectors\n\n    // Cannot be moved from this file, called from currentOrientation.xx\n\n    /**\n     * Gets displaying item start side\n     *\n     * @param {Gantt.model.TaskModel} taskRecord\n     * @returns {String} 'left' / 'right' / 'top' / 'bottom'\n     */\n    getConnectorStartSide(taskRecord) {\n        return this.gantt.rtl ? 'right' : 'left';\n    }\n\n    /**\n     * Gets displaying item end side\n     *\n     * @param {Gantt.model.TaskModel} taskRecord\n     * @returns {String} 'left' / 'right' / 'top' / 'bottom'\n     */\n    getConnectorEndSide(taskRecord) {\n        return this.gantt.rtl ? 'left' : 'right';\n    }\n\n    //endregion\n\n    //region Rendering\n\n    onRenderRow({ row, record }) {\n        // indicate inactive task rows\n        row.assignCls({ 'b-inactive' : record.inactive });\n    }\n\n    onRemoveRows({ rows }) {\n        rows.forEach(row => this.rowMap.delete(row));\n        !this.gantt.refreshSuspended && this.onRenderDone();\n    }\n\n    // Update header range on horizontal scroll. No need to draw any tasks, Gantt only cares about vertical scroll\n    updateFromHorizontalScroll(scrollX) {\n        const\n            me            = this,\n            { gantt }     = me,\n            {\n                timeAxisSubGrid,\n                timeAxis,\n                rtl\n            }             = gantt,\n            { width }     = timeAxisSubGrid,\n            { totalSize } = gantt.timeAxisViewModel,\n            start         = scrollX,\n            // If there are few pixels left from the right most position then just render all remaining ticks,\n            // there wouldn't be many. It makes end date reachable with more page zoom levels while not having any poor\n            // implications.\n            // 5px to make TimeViewRangePageZoom test stable in puppeteer.\n            returnEnd     = timeAxisSubGrid.scrollable.maxX !== 0 && Math.abs(timeAxisSubGrid.scrollable.maxX) <= Math.round(start) + 5,\n            startDate     = gantt.getDateFromCoord({ coord : Math.max(0, start), ignoreRTL : true }),\n            endDate       = returnEnd ? timeAxis.endDate : (gantt.getDateFromCoord({ coord : start + width, ignoreRTL : true }) || timeAxis.endDate);\n\n        if (startDate && !gantt._viewPresetChanging) {\n            me._visibleDateRange = { startDate, endDate, startMS : startDate.getTime(), endMS : endDate.getTime() };\n            me.viewportCoords  = rtl\n                // RTL starts all the way to the right (and goes in opposite direction)\n                ? { left : totalSize - scrollX - width, right : totalSize - scrollX }\n                // LTR all the way to the left\n                : { left : scrollX, right : scrollX + width };\n\n            // Update timeaxis header making it display the new dates\n            const range = gantt.timeView.range = { startDate, endDate };\n\n            gantt.onVisibleDateRangeChange(range);\n        }\n    }\n\n    internalPopulateTaskRenderData(renderData, taskRecord) {\n        const\n            { gantt }   = this,\n            taskContent = {\n                className : 'b-gantt-task-content',\n                dataset   : {\n                    taskBarFeature : 'content'\n                },\n                children : []\n            };\n\n        if (renderData) {\n            let resizable = (taskRecord.isResizable === undefined ? true : taskRecord.isResizable);\n\n            if (renderData.startsOutsideView) {\n                if (resizable === true) {\n                    resizable = 'end';\n                }\n                else if (resizable === 'start') {\n                    resizable = false;\n                }\n            }\n            if (renderData.endsOutsideView) {\n                if (resizable === true) {\n                    resizable = 'start';\n                }\n                else if (resizable === 'end') {\n                    resizable = false;\n                }\n            }\n\n            Object.assign(renderData, {\n                iconCls    : new DomClassList(taskRecord.taskIconCls),\n                id         : gantt.getEventRenderId(taskRecord),\n                style      : taskRecord.style || '',\n                taskId     : taskRecord.id,\n                // Classes for the wrapping div\n                wrapperCls : new DomClassList({\n                    [gantt.eventCls + '-wrap']   : 1,\n                    [`${gantt.eventCls}-parent`] : taskRecord.isParent,\n                    'b-milestone-wrap'           : taskRecord.milestone,\n                    'b-inactive'                 : taskRecord.inactive,\n                    'b-expanded'                 : taskRecord.isExpanded(gantt.store),\n                    'b-readonly'                 : taskRecord.readOnly,\n                    'b-linked'                   : taskRecord.isLinked,\n                    'b-original'                 : taskRecord.hasLinks,\n                    'b-temporary'                : !taskRecord.project\n                }),\n                // Task record cls property is now a DomClassList, so clone it\n                // so that it can be manipulated here and by renderers.\n                cls          : taskRecord.isResourceTimeRange ? new DomClassList() : taskRecord.cls.clone(),\n                // Extra DOMConfigs to add to the tasks row, for example for indicators\n                extraConfigs : []\n            });\n\n            // Gather event element classes as keys to add to the renderData.cls DomClassList.\n            // Truthy value means the key will be added as a class name.\n            Object.assign(renderData.cls, {\n                [gantt.eventCls]                       : 1,\n                [gantt.generatedIdCls]                 : taskRecord.hasGeneratedId,\n                [gantt.dirtyCls]                       : taskRecord.modifications,\n                [gantt.committingCls]                  : taskRecord.isCommitting,\n                [gantt.endsOutsideViewCls]             : renderData.endsOutsideView,\n                [gantt.startsOutsideViewCls]           : renderData.startsOutsideView,\n                [gantt.fixedEventCls]                  : taskRecord.isDraggable === false,\n                [`b-sch-event-resizable-${resizable}`] : 1,\n                'b-milestone'                          : taskRecord.milestone,\n                // 'b-critical'                           : taskRecord.critical,\n                'b-task-started'                       : taskRecord.isStarted,\n                'b-task-finished'                      : taskRecord.isCompleted,\n                'b-task-selected'                      : gantt.selectedRecords.includes(taskRecord)\n            });\n\n            const\n                eventStyle = taskRecord.eventStyle || gantt.eventStyle,\n                eventColor = taskRecord.eventColor || gantt.eventColor;\n\n            renderData.eventColor = eventColor;\n            renderData.eventStyle = eventStyle;\n\n            if (gantt.taskRenderer) {\n                // User has specified a renderer fn, either to return a simple string, or an object\n                const value = gantt.taskRenderer.call(gantt.taskRendererThisObj || gantt, {\n                    taskRecord,\n                    renderData\n                });\n\n                // If the user's renderer coerced it into a string, recreate a DomClassList.\n                if (typeof renderData.cls === 'string') {\n                    renderData.cls = new DomClassList(renderData.cls);\n                }\n\n                // Same goes for iconCls\n                if (typeof renderData.iconCls === 'string') {\n                    renderData.iconCls = new DomClassList(renderData.iconCls);\n                }\n\n                if (typeof renderData.wrapperCls === 'string') {\n                    renderData.wrapperCls = new DomClassList(renderData.wrapperCls);\n                }\n\n                let childContent = null;\n\n                // Likely HTML content\n                if (StringHelper.isHtml(value)) {\n                    childContent = {\n                        tag  : 'span',\n                        html : value\n                    };\n                }\n                // DOM config or plain string can be used as is\n                else if (typeof value === 'string' || typeof value === 'object') {\n                    childContent = value;\n                }\n                // Other, use string\n                else if (value != null) {\n                    childContent = String(value);\n                }\n\n                if (childContent) {\n                    if (Array.isArray(childContent)) {\n                        taskContent.children.push(...childContent);\n                    }\n                    else {\n                        taskContent.children.push(childContent);\n                    }\n                    renderData.cls.add('b-has-content');\n                }\n            }\n\n            // If there are any iconCls entries...\n            renderData.cls['b-sch-event-withicon'] = renderData.iconCls.length;\n\n            // renderers have last say on style & color\n            renderData.wrapperCls[`b-sch-style-${renderData.eventStyle}`] = renderData.eventStyle;\n\n            if (DomHelper.isNamedColor(renderData.eventColor)) {\n                renderData.wrapperCls[`b-sch-color-${renderData.eventColor}`] = renderData.eventColor;\n            }\n            else if (renderData.eventColor) {\n                renderData.style = `background-color:${renderData.eventColor};` + renderData.style;\n            }\n\n            if (renderData.iconCls?.length) {\n                taskContent.children.unshift({\n                    tag       : 'i',\n                    className : renderData.iconCls\n                });\n            }\n\n            // if we have some children collected or it's a milestone (milestone styling needs content element presence)\n            if (taskContent.children.length || taskRecord.milestone) {\n                renderData.children.push(taskContent);\n            }\n        }\n\n        renderData.taskContent = taskContent;\n\n        renderData.wrapperChildren = [];\n    }\n\n    populateTaskRenderData(renderData, taskRecord) {\n        this.internalPopulateTaskRenderData(...arguments);\n\n        // Method which features may chain in to\n        this.gantt.onTaskDataGenerated(renderData);\n    }\n\n    // This method is a single entry point to get complete render data for the task\n    getTaskRenderData(row, taskRecord) {\n        const\n            me   = this,\n            box  = me.getTaskBox(taskRecord, false, false, row),\n            data = {\n                taskRecord,\n                // <remove-on-release>\n                // TODO: Deprecate task\n                // </remove-on-release>\n                task     : taskRecord,\n                row,\n                children : []\n            };\n\n        if (box) {\n            Object.assign(data, {\n                isTask : true,\n                top    : box.top,\n                left   : box.left,\n                width  : box.width,\n                height : box.height\n            });\n        }\n        else {\n            // Calculate top position, used by Baselines feature to position its elements\n            data.top = row.top + me.gantt.resourceMargin;\n        }\n\n        me.populateTaskRenderData(data, taskRecord);\n\n        return data;\n    }\n\n    // This method generates DOM config from the render data\n    getTaskDOMConfig(data) {\n        return {\n            className : data.wrapperCls,\n            tabIndex  : '0',\n            children  : [\n                {\n                    className : data.cls,\n                    style     : (data.internalStyle || '') + (data.style || ''),\n                    children  : data.children,\n                    dataset   : {\n                        // Each feature putting contents in the task wrap should have this to simplify syncing and\n                        // element retrieval after sync\n                        taskFeature : 'task'\n                    },\n                    syncOptions : {\n                        syncIdField : 'taskBarFeature'\n                    }\n                },\n                ...data.wrapperChildren\n            ],\n            style : {\n                top    : data.top,\n                left   : data.left - (this.gantt.rtl ? data.width : 0),\n                // DomHelper appends px to dimensions when using numbers\n                width  : data.width,\n                zIndex : data.zIndex\n            },\n            dataset : {\n                taskId : data.taskId\n            },\n            // Will not be part of DOM, but attached to the element\n            elementData : data,\n            // Options for this level of sync, lower levels can have their own\n            syncOptions : {\n                syncIdField      : 'taskFeature',\n                // Remove instead of release when a feature is disabled\n                releaseThreshold : 0\n            }\n        };\n    }\n\n    // Called per row in \"view\", collect configs\n    renderer({ row, record : taskRecord }) {\n        const\n            me   = this,\n            data = me.getTaskRenderData(row, taskRecord);\n\n        let config;\n\n        if (data.isTask) {\n            config = me.getTaskDOMConfig(data);\n            me.gantt.trigger('beforeRenderTask', { renderData : data, domConfig : config });\n        }\n        else if (data.extraConfigs.length === 0) {\n            me.rowMap.delete(row);\n            return;\n        }\n\n        // Store DOM configs\n        me.rowMap.set(row, [config, ...data.extraConfigs]);\n    }\n\n    // Called when the current row rendering \"pass\" is complete, sync collected configs to DOM\n    onRenderDone() {\n        const\n            { gantt } = this,\n            configs   = Array.from(this.rowMap.values()).flat();\n\n        // Give features a chance to inject or manipulate task configs\n        gantt.onBeforeTaskSync(configs);\n\n        DomSync.sync({\n            domConfig : {\n                onlyChildren : true,\n                children     : configs\n            },\n            targetElement : gantt.foregroundCanvas,\n            syncIdField   : 'taskId',\n\n            // Called by DomHelper when it creates, releases or reuses elements\n            callback({ action, domConfig, lastDomConfig, targetElement : element }) {\n                // If element is a task wrap, trigger appropriate events\n                if (action !== 'none' && domConfig && domConfig.className && domConfig.className[gantt.eventCls + '-wrap']) {\n                    const\n                        // Some actions are considered first a release and then a render (reusing another element).\n                        // This gives clients code a chance to clean up before reusing an element\n                        isRelease = releaseEventActions[action],\n                        isRender  = renderEventActions[action];\n\n                    // If we are reusing an element that was previously released we should not trigger again\n                    if (isRelease && lastDomConfig?.elementData?.isTask) {\n                        const\n                            event = {\n                                renderData : lastDomConfig.elementData,\n                                taskRecord : lastDomConfig.elementData.taskRecord,\n                                element\n                            };\n\n                        // This event is documented on Gantt\n                        gantt.trigger('releaseTask', event);\n                    }\n\n                    // Trigger only for actual tasks, not indicators or baselines\n                    if (isRender && domConfig?.elementData?.isTask) {\n                        const\n                            event = {\n                                renderData : domConfig.elementData,\n                                taskRecord : domConfig.elementData.taskRecord,\n                                element\n                            };\n\n                        event.reusingElement = action === 'reuseElement';\n                        // This event is documented on Gantt\n                        gantt.trigger('renderTask', event);\n                    }\n                }\n            }\n        });\n    }\n\n    // Redraws a single task by rerendering its cell\n    redraw(taskRecord) {\n        // Refresh cell, will call `renderer` above and update its DOM config\n        if (this.gantt.rowManager.refreshCell(taskRecord, this.gantt.timeAxisColumn.id)) {\n            // Update DOM\n            this.onRenderDone();\n        }\n    }\n\n    //endregion\n}\n", "import TimelineBase from '../../Scheduler/view/TimelineBase.js';\nimport ObjectHelper from '../../Core/helper/ObjectHelper.js';\nimport VersionHelper from '../../Core/helper/VersionHelper.js';\n\nimport NewTaskRendering from './orientation/NewTaskRendering.js';\n\nimport CrudManagerView from '../../Scheduler/crud/mixin/CrudManagerView.js';\nimport CurrentConfig from '../../Scheduler/view/mixin/CurrentConfig.js';\nimport ProjectProgressMixin from '../../SchedulerPro/view/mixin/ProjectProgressMixin.js';\nimport GanttDom from './mixin/GanttDom.js';\nimport GanttRegions from './mixin/GanttRegions.js';\nimport GanttScroll from './mixin/GanttScroll.js';\nimport GanttState from './mixin/GanttState.js';\nimport GanttStores from './mixin/GanttStores.js';\nimport GanttTimelineDateMapper from './mixin/GanttTimelineDateMapper.js';\nimport TaskNavigation from './mixin/TaskNavigation.js';\n\nimport EventNavigation from '../../Scheduler/view/mixin/EventNavigation.js';\n\nimport '../localization/En.js';\nimport '../../Gantt/column/TimeAxisColumn.js';\n\n// Always required features\nimport '../../Grid/feature/Tree.js';\nimport '../../Grid/feature/RegionResize.js';\nimport '../feature/Dependencies.js';\n\nimport NameColumn from '../column/NameColumn.js';\n\nimport { DependencyType } from '../../Engine/scheduling/Types.js';\nimport Column from '../../Grid/column/Column.js';\nimport ColumnStore from '../../Grid/data/ColumnStore.js';\n\nimport Toast from '../../Core/widget/Toast.js';\nimport DomHelper from '../../Core/helper/DomHelper.js';\nimport DomSync from '../../Core/helper/DomSync.js';\nimport SchedulingIssueResolution from '../../SchedulerPro/view/mixin/SchedulingIssueResolution.js';\n\n/**\n * @module Gantt/view/GanttBase\n */\n\nconst emptyObject = Object.freeze({});\n\nlet newTaskCount = 0;\n\n/**\n * A thin base class for {@link Gantt/view/Gantt}. Does not include any features by default, allowing smaller custom\n * built bundles if used in place of {@link Gantt/view/Gantt}.\n *\n * @mixes Gantt/view/mixin/GanttDom\n * @mixes Gantt/view/mixin/GanttRegions\n * @mixes Gantt/view/mixin/GanttScroll\n * @mixes Gantt/view/mixin/GanttState\n * @mixes Gantt/view/mixin/GanttStores\n * @mixes Scheduler/crud/mixin/CrudManagerView\n * @mixes Scheduler/view/mixin/EventNavigation\n * @mixes Gantt/view/mixin/TaskNavigation\n * @mixes SchedulerPro/view/mixin/ProjectProgressMixin\n * @mixes SchedulerPro/view/mixin/SchedulingIssueResolution\n *\n * @features Scheduler/feature/ColumnLines\n * @features Scheduler/feature/EventFilter\n * @features Scheduler/feature/HeaderZoom\n * @features Scheduler/feature/Labels\n * @features Scheduler/feature/NonWorkingTime\n * @features Scheduler/feature/Pan\n * @features Scheduler/feature/ScheduleMenu\n * @features Scheduler/feature/ScheduleTooltip\n * @features Scheduler/feature/Summary\n * @features Scheduler/feature/TimeAxisHeaderMenu\n * @features Scheduler/feature/TimeRanges\n *\n * @features SchedulerPro/feature/PercentBar\n * @features SchedulerPro/feature/DependencyEdit\n * @features SchedulerPro/feature/EventSegments\n *\n * @features Gantt/feature/Baselines\n * @features Gantt/feature/CellEdit\n * @features Gantt/feature/CriticalPaths\n * @features Gantt/feature/Dependencies\n * @features Gantt/feature/Indicators\n * @features Gantt/feature/Labels\n * @features Gantt/feature/ParentArea\n * @features Gantt/feature/ProgressLine\n * @features Gantt/feature/ProjectLines\n * @features Gantt/feature/Rollups\n * @features Gantt/feature/Summary\n * @features Gantt/feature/TaskCopyPaste\n * @features Gantt/feature/TaskDrag\n * @features Gantt/feature/TaskDragCreate\n * @features Gantt/feature/TaskEdit\n * @features Gantt/feature/TaskMenu\n * @features Gantt/feature/TaskNonWorkingTime\n * @features Gantt/feature/TaskResize\n * @features Gantt/feature/TaskSegmentDrag\n * @features Gantt/feature/TaskSegmentResize\n * @features Gantt/feature/TaskTooltip\n * @features Gantt/feature/TreeGroup\n * @features Gantt/feature/Versions\n *\n * @features Gantt/feature/export/MspExport\n * @features Gantt/feature/export/PdfExport\n * @features Gantt/feature/export/exporter/MultiPageExporter\n * @features Gantt/feature/export/exporter/MultiPageVerticalExporter\n * @features Gantt/feature/export/exporter/SinglePageExporter\n *\n * @extends Scheduler/view/TimelineBase\n * @widget\n */\nexport default class GanttBase extends TimelineBase.mixin(\n    CrudManagerView,\n    GanttDom,\n    GanttRegions,\n    GanttScroll,\n    GanttStores,\n    GanttState,\n    GanttTimelineDateMapper,\n    EventNavigation,\n    TaskNavigation,\n    ProjectProgressMixin,\n    SchedulingIssueResolution,\n    CurrentConfig\n) {\n\n    //region Task interaction events\n\n    /**\n     * Triggered after a mousedown on a task bar.\n     * @event taskMouseDown\n     * @param {Gantt.view.Gantt} source The Gantt instance\n     * @param {Gantt.model.TaskModel} taskRecord The Task record\n     * @param {MouseEvent} event The native browser event\n     */\n\n    /**\n     * Triggered after a mouseup on a task bar.\n     * @event taskMouseUp\n     * @param {Gantt.view.Gantt} source The Gantt instance\n     * @param {Gantt.model.TaskModel} taskRecord The Task record\n     * @param {MouseEvent} event The native browser event\n     */\n\n    /**\n     * Triggered after a click on a task bar.\n     * @event taskClick\n     * @param {Gantt.view.Gantt} source The Gantt instance\n     * @param {Gantt.model.TaskModel} taskRecord The Task record\n     * @param {MouseEvent} event The native browser event\n     */\n\n    /**\n     * Triggered after a doubleclick on a task.\n     * @event taskDblClick\n     * @param {Gantt.view.Gantt} source The Gantt instance\n     * @param {Gantt.model.TaskModel} taskRecord The Task record\n     * @param {MouseEvent} event The native browser event\n     */\n\n    /**\n     * Triggered after a rightclick (or long press on a touch device) on a task.\n     * @event taskContextMenu\n     * @param {Gantt.view.Gantt} source The Gantt instance\n     * @param {Gantt.model.TaskModel} taskRecord The Task record\n     * @param {MouseEvent} event The native browser event\n     */\n\n    /**\n     * Triggered after a mouseover on a task.\n     * @event taskMouseOver\n     * @param {Gantt.view.Gantt} source The Gantt instance\n     * @param {Gantt.model.TaskModel} taskRecord The Task record\n     * @param {MouseEvent} event The native browser event\n     */\n\n    /**\n     * Triggered for mouseout from a task.\n     * @event taskMouseOut\n     * @param {Gantt.view.Gantt} source The Gantt instance\n     * @param {Gantt.model.TaskModel} taskRecord The Task record\n     * @param {MouseEvent} event The native browser event\n     */\n\n    /**\n     * Triggered when a keydown event is observed if there are selected tasks.\n     * @event taskKeyDown\n     * @param {Gantt.view.Gantt} source This Gantt\n     * @param {Gantt.model.TaskModel} taskRecord Task record\n     * @param {KeyboardEvent} event Browser event\n     */\n\n    /**\n     * Triggered when a keyup event is observed if there are selected tasks.\n     * @event taskKeyUp\n     * @param {Gantt.view.Gantt} source This Gantt\n     * @param {Gantt.model.TaskModel} eventRecord Task record\n     * @param {KeyboardEvent} event Browser event\n     */\n\n    //endregion\n\n    //region Other events\n\n    /**\n     * Task is rendered, its element is available in DOM.\n     * @event renderTask\n     * @param {Gantt.view.Gantt} source The Gantt instance\n     * @param {Object} renderData Task render data\n     * @param {Gantt.model.TaskModel} taskRecord Rendered task\n     * @param {HTMLElement} element Task element\n     */\n\n    /**\n     * Task is released, no longer in view/removed. A good spot for cleaning custom things added in a `renderTask`\n     * listener up, if needed.\n     * @event releaseTask\n     * @param {Gantt.view.Gantt} source The Gantt instance\n     * @param {Object} renderData Task render data\n     * @param {Gantt.model.TaskModel} taskRecord Rendered task\n     * @param {HTMLElement} element Task element\n     */\n\n    //endregion\n\n    // For documentation & typings purposes\n\n    /**\n     * Returns the dependency record for a DOM element\n     *\n     * *NOTE: Only available when the {@link Gantt/feature/Dependencies Dependencies} feature is enabled.*\n     *\n     * @function resolveDependencyRecord\n     * @param {HTMLElement} element The dependency line element\n     * @returns {Gantt.model.DependencyModel} The dependency record\n     * @category Feature shortcuts\n     */\n\n    //endregion\n\n    //region Config\n\n    static $name = 'GanttBase';\n\n    // Factoryable type name\n    static get type() {\n        return 'ganttbase';\n    }\n\n    static get defaultConfig() {\n        return {\n            /**\n             * Get/set the gantt's read-only state. When set to `true`, any UIs for modifying data are disabled.\n             * @member {Boolean} readOnly\n             * @category Common\n             */\n            /**\n             * Configure as `true` to make the gantt read-only, by disabling any UIs for modifying data.\n             *\n             * __Note that checks MUST always also be applied at the server side.__\n             * @config {Boolean} readOnly\n             * @default false\n             * @category Common\n             */\n\n            /**\n             * The {@link Gantt.model.ProjectModel} instance containing the data visualized by the Gantt chart.\n             * @member {Gantt.model.ProjectModel} project\n             * @category Data\n             */\n\n            /**\n             * A {@link Gantt.model.ProjectModel} instance or a config object. The project holds all Gantt data.\n             * @config {Gantt.model.ProjectModel|ProjectModelConfig}\n             * @category Data\n             */\n            project : null,\n\n            /**\n             * The path for resource images, used by various widgets such as the resource assignment column.\n             * @config {String}\n             * @category Common\n             */\n            resourceImageFolderPath : null,\n\n            /**\n             * The file name of an image file to use when a resource has no image, or its image cannot be loaded.\n             * @config {String}\n             * @category Common\n             */\n            defaultResourceImageName : null,\n\n            /**\n             * True to toggle the collapsed/expanded state when clicking a parent task bar.\n             * @member {Boolean} toggleParentTasksOnClick\n             * @category Common\n             */\n            /**\n             * True to toggle the collapsed/expanded state when clicking a parent task bar.\n             * @config {Boolean}\n             * @default true\n             * @category Common\n             */\n            toggleParentTasksOnClick : true,\n\n            /**\n             * True to scroll the task bar into view when clicking a cell, you can also pass a\n             * {@link #function-scrollTaskIntoView scroll config} object.\n             * @config {Boolean|ScrollOptions}\n             * @category Common\n             */\n            scrollTaskIntoViewOnCellClick : false,\n\n            // data for the stores, in the topological order\n            calendars    : null,\n            resources    : null,\n            tasks        : null,\n            dependencies : null,\n            assignments  : null,\n\n            eventCls                : 'b-gantt-task',\n            eventBarTextField       : null,\n            eventLayout             : 'none',\n            eventSelectionDisable   : true,\n            eventColor              : null,\n            eventStyle              : null,\n            rowHeight               : 45,\n            scheduledEventName      : 'task',\n            eventScrollMode         : 'move',\n            overScheduledEventClass : 'b-gantt-task-hover',\n            mode                    : 'horizontal',\n            //fixedRowHeight          : true, // Not working with exporter, no time to investigate why currently\n\n            timeCellCls : 'b-sch-timeaxis-cell',\n\n            // <remove-on-release>\n            // TODO: This will be brought in by the TaskNavigation mixin when it is implemented\n            // </remove-on-release>\n            focusCls : 'b-active',\n\n            /**\n             * An empty function by default, but provided so that you can override it. This function is called each time\n             * a task is rendered into the gantt to render the contents of the task.\n             *\n             * Returning a string will display it in the task bar, it accepts both plain text or HTML. It is also\n             * possible to return a DOM config object which will be synced to the task bars content.\n             *\n             * ```javascript\n             * // using plain string\n             * new Gantt({\n             *    taskRenderer : ({ taskRecord }) => StringHelper.encodeHtml(taskRecord.name)\n             * });\n             *\n             * // using html string\n             * new Gantt({\n             *    taskRenderer : ({ taskRecord }) => StringHelper.xss`${taskRecord.id} <b>${taskRecord.name}</b>`\n             * });\n             *\n             * // using DOM config\n             * new Gantt({\n             *    taskRenderer({ taskRecord }) {\n             *       return {\n             *           tag  : 'b',\n             *           html : StringHelper.encodeHtml(taskRecord.name)\n             *       }\n             *    }\n             * });\n             * ```\n             *\n             * @param {Object} detail An object containing the information needed to render a Task.\n             * @param {Gantt.model.TaskModel} detail.taskRecord The task record.\n             * @param {Object} detail.renderData An object containing details about the task rendering.\n             * @param {Core.helper.util.DomClassList|String} detail.renderData.cls An object whose property names represent the CSS class names\n             * to be added to the tasks's element. Set a property's value to truthy or falsy to add or remove the class\n             * name based on the property name. Using this technique, you do not have to know whether the class is already\n             * there, or deal with concatenation.\n             * @param {String|Object<String,String>} detail.renderData.style Inline styles for the task bar DOM element. Use either\n             * 'border: 1px solid black' or { border: '1px solid black' }\n             * @param {Core.helper.util.DomClassList|String} detail.renderData.wrapperCls An object whose property names represent the CSS class names\n             * to be added to the event wrapper element. Set a property's value to truthy or falsy to add or remove the class\n             * name based on the property name. Using this technique, you do not have to know whether the class is already\n             * there, or deal with concatenation.\n             * @param {Core.helper.util.DomClassList|String} detail.renderData.iconCls An object whose property names represent the CSS class\n             * names to be added to a task icon element.\n             * @param {Scheduler.model.TimeSpan[]|TimeSpanConfig[]} indicators An array that can be populated with\n             * TimeSpan records or their config objects to have them rendered in the task row\n             * @returns {String} A simple string creating the actual HTML\n             * @config {Function}\n             * @category Scheduled events\n             */\n            taskRenderer : null,\n\n            /**\n             * A callback function or a set of `name: value` properties to apply on tasks created using the task context menu.\n             * Be aware that `name` value will be ignored since it's auto generated and may be configured with localization.\n             *\n             * Example:\n             * ```javascript\n             * // Object form:\n             * newTaskDefaults : {\n             *    duration          : 3,\n             *    manuallyScheduled : true,\n             *    percentDone       : 15\n             * }\n             * ```\n             *\n             * ```javascript\n             * // Function form:\n             * newTaskDefaults : (targetRecord) => {\n             *    return {\n             *        duration          : targetRecord.duration,\n             *        manuallyScheduled : targetRecord.manuallyScheduled\n             *    }\n             * }\n             * ```\n             * @config {Object|Function}\n             */\n            newTaskDefaults : {},\n\n            /**\n             * A task field (id, wbsCode, sequenceNumber etc) that will be used when displaying and editing linked tasks.\n             * @config {String} dependencyIdField\n             * @default 'id'\n             * @category Common\n             */\n            dependencyIdField : 'id',\n\n            /**\n             * Returns dates that will constrain resize and drag operations. The method will be called with the\n             * task being dragged.\n             * @param {Gantt.model.TaskModel} taskRecord The task record being moved or resized.\n             * @returns {Object} Constraining object containing `start` and `end` constraints. Omitting either\n             * will mean that end is not constrained. So you can prevent a resize or move from moving *before*\n             * a certain time while not constraining the end date.\n             * @returns {Date} [return.start] Start date\n             * @returns {Date} [return.end] End date\n             * @config {Function}\n             * @category Scheduled events\n             */\n            getDateConstraints : null\n        };\n    }\n\n    static configurable = {\n        /**\n         * See {@link Gantt.view.Gantt#keyboard-shortcuts Keyboard shortcuts} for details\n         * @config {Object<String,String>} keyMap\n         * @category Common\n         */\n        keyMap : {\n            'Alt+Shift+ArrowLeft'  : 'outdent',\n            'Alt+Shift+ArrowRight' : 'indent'\n        }\n    };\n\n    timeCellSelector = '.b-sch-timeaxis-cell';\n\n    get isGantt() {\n        return true;\n    }\n\n    //endregion\n\n    //region Init\n\n    construct(config = {}) {\n        const\n            me              = this,\n            hasInlineStores = Boolean(config.calendars || config.taskStore || config.dependencyStore || config.resourceStore || config.assignmentStore),\n            hasInlineData   = Boolean(config.calendars || config.tasks || config.dependencies || config.resources || config.assignments);\n\n        // <remove-on-release>\n        // TODO: Config system to be enhanced to merge object properties from the hierarchy's\n        // defaultConfig set so that each class level could just declare the features it requires.\n        // </remove-on-release>\n        if (!config.features) {\n            const defaults = me.getDefaultConfiguration().features;\n            config.features = defaults && typeof defaults === 'object' ? defaults : {};\n        }\n\n        // gantt is always a tree\n        if (!('tree' in config.features)) {\n            config.features.tree = true;\n        }\n\n        // disable group feature by default\n        if (!('group' in config.features)) {\n            config.features.group = false;\n        }\n\n        const { project } = config;\n\n        if (project && (hasInlineStores || hasInlineData)) {\n            throw new Error('Providing both project and inline data is not supported');\n        }\n\n        // gather all data in the ProjectModel instance\n        if (!project?.isModel) {\n            config.project = ObjectHelper.assign({\n                calendarsData    : config.calendars,\n                eventsData       : config.tasks,\n                dependenciesData : config.dependencies,\n                resourcesData    : config.resources,\n                assignmentsData  : config.assignments,\n\n                resourceStore   : config.resourceStore,\n                eventStore      : config.taskStore,\n                assignmentStore : config.assignmentStore,\n                dependencyStore : config.dependencyStore,\n                timeRangeStore  : config.timeRangeStore\n            }, project);\n\n            delete config.resourceStore;\n            delete config.taskStore;\n            delete config.assignmentStore;\n            delete config.dependencyStore;\n            delete config.timeRangeStore;\n\n            delete config.calendars;\n            delete config.resources;\n            delete config.tasks;\n            delete config.assignments;\n            delete config.dependencies;\n        }\n        // EOF data gathering\n\n        super.construct(config);\n\n        me.ion({\n            taskclick  : 'onTaskBarClick',\n            cellClick  : 'onNonTimeAxisCellClick',\n            toggleNode : 'onToggleParentNode'\n        });\n    }\n\n    changeColumns(columns, currentStore) {\n        if (columns) {\n            let cols = columns;\n\n            if (!Array.isArray(columns)) {\n                cols = columns.data;\n\n                // Need to pull the taskstore in, to make sure any fields added by columns are added to it\n                this._thisIsAUsedExpression(this.taskStore);\n            }\n\n            // Always include the name column\n            if (!cols.some(column => {\n                const constructor = column instanceof Column ? column.constructor : ColumnStore.getColumnClass(column.type) || Column;\n\n                return constructor === NameColumn || constructor.prototype instanceof NameColumn;\n            })) {\n                cols.unshift({\n                    type : 'name'\n                });\n            }\n        }\n\n        return super.changeColumns(columns, currentStore);\n    }\n\n    // Overrides TimelineBase to supply taskStore as its store (which is only used in passed events)\n    set timeAxisViewModel(timeAxisViewModel) {\n        super.timeAxisViewModel = timeAxisViewModel;\n\n        if (this.store) {\n            this.timeAxisViewModel.store = this.store;\n        }\n    }\n\n    get timeAxisViewModel() {\n        return super.timeAxisViewModel;\n    }\n\n    //endregion\n\n    //region Overrides\n\n    onPaintOverride() {\n        // Internal procedure used for paint method overrides\n        // Not used in onPaint() because it may be chained on instance and Override won't be applied\n    }\n\n    //endregion\n\n    //region Events\n\n    resumeRefresh(trigger) {\n\n        super.resumeRefresh(false);\n\n        if (!this.refreshSuspended && trigger && this.isPainted) {\n            if (!this.rowManager.topRow) {\n                // <remove-on-release>\n                // TODO: investigate why we need this\n                // </remove-on-release>\n                this.rowManager.reinitialize();\n            }\n            else {\n                this.refreshWithTransition();\n            }\n        }\n    }\n\n    // <remove-on-release>\n    // TODO: scheduler doesn't need that code and it shouldn't be needed in gantt too\n    // </remove-on-release>\n    // Overriding grids behaviour to ignore individual updates caused by propagation\n    onStoreUpdateRecord(params) {\n        if (!this.project.isBatchingChanges) {\n            let result;\n\n            this.runWithTransition(() => {\n                result = super.onStoreUpdateRecord(params);\n            }, !this.refreshSuspended);\n\n            return result;\n        }\n    }\n\n    // Transition batch changes\n    onStoreDataChange(params) {\n        this.runWithTransition(() => {\n            super.onStoreDataChange(params);\n        }, params.action === 'batch');\n    }\n\n    // Features can hook into this to add to generated task data\n    onTaskDataGenerated() {}\n\n    // Features can hook into this to manipulate visible task configs before they are DomSynced\n    onBeforeTaskSync() {}\n\n    onTaskBarClick({ taskRecord }) {\n        if (this.toggleParentTasksOnClick && !taskRecord.isLeaf) {\n            this.toggleCollapse(taskRecord);\n        }\n    }\n\n    onNonTimeAxisCellClick({ record, column }) {\n        const { scrollTaskIntoViewOnCellClick } = this;\n        if (column.type !== 'timeAxis' && scrollTaskIntoViewOnCellClick && record.isScheduled) {\n            this.scrollTaskIntoView(record, scrollTaskIntoViewOnCellClick === true\n                ? { animate : true, block : 'center', y : false }\n                : scrollTaskIntoViewOnCellClick\n            );\n        }\n    }\n\n    onToggleParentNode({ record }) {\n        // Repaint parent node on collapse / expand (unless in a collapsed parent, happens on collapse all)\n        record.parent.isExpanded(this.taskStore) && this.taskRendering.redraw(record);\n    }\n\n    // Grid row selection change\n    afterSelectionChange({ selectedRecords, deselectedRecords }) {\n        const me = this;\n\n        function setTaskSelection(record, selected) {\n            const taskElement = me.getElementFromTaskRecord(record);\n            if (taskElement) {\n                DomSync[selected ? 'addCls' : 'removeCls']('b-task-selected', taskElement);\n            }\n        }\n\n        selectedRecords?.map(record => setTaskSelection(record, true));\n        deselectedRecords?.map(record => setTaskSelection(record, false));\n    }\n\n    //endregion\n\n    //region TimelineBase implementations\n\n    // Overrides grid to take project loading into account\n    toggleEmptyText() {\n        const\n            me = this;\n        if (me.bodyContainer && me.rowManager) {\n            DomHelper.toggleClasses(me.bodyContainer, 'b-grid-empty', !(me.rowManager.rowCount || me.project.isLoadingOrSyncing));\n        }\n    }\n\n    // Gantt only has one orientation, but TimelineBase expects this to work to call correct rendering code\n    get currentOrientation() {\n        const me = this;\n\n        if (!me._currentOrientation) {\n            //me.taskRendering = me._currentOrientation = new TaskRendering(me);\n            me.taskRendering = me._currentOrientation = new NewTaskRendering(me);\n        }\n\n        return me._currentOrientation;\n    }\n\n    getTimeSpanMouseEventParams(taskElement, event) {\n        const taskRecord = this.resolveTaskRecord(taskElement);\n\n        return !taskRecord ? null : {\n            taskRecord,\n            taskElement,\n            event\n        };\n    }\n\n    getScheduleMouseEventParams(cellData) {\n        return {\n            taskRecord : this.store.getById(cellData.id)\n        };\n    }\n\n    // Used by shared features to resolve an event or task\n    resolveTimeSpanRecord(element) {\n        return this.resolveTaskRecord(element);\n    }\n\n    repaintEventsForResource(taskRecord) {\n        this.taskRendering.redraw(taskRecord);\n    }\n\n    // Used by the dependencies feature to keep it orientation (vertical, horizontal) independent\n    get visibleResources() {\n        return {\n            first : this.store.getById(this.firstVisibleRow?.id),\n            last  : this.store.getById(this.lastVisibleRow?.id)\n        };\n    }\n\n    //endregion\n\n    //region Feature hooks\n\n    /**\n     * Populates the task context menu. Chained in features to add menu items.\n     * @param {Object} options Contains menu items and extra data retrieved from the menu target.\n     * @param {Grid.column.Column} options.column Column for which the menu will be shown.\n     * @param {Gantt.model.TaskModel} options.taskRecord The reference task record\n     * @param {Scheduler.model.ResourceModel} options.resourceRecord The context resource.\n     * @param {Scheduler.model.AssignmentModel} options.assignmentRecord The context assignment if any.\n     * @param {Object<String,MenuItemConfig>} options.items A named object to describe menu items.\n     * @internal\n     */\n    populateTaskMenu() {}\n\n    //endregion\n\n    // region ContextMenu API\n\n    async addTask(referenceTask, options = emptyObject) {\n        const\n            me = this,\n            {\n                milestone,\n                asPredecessor,\n                asSuccessor\n            } = options,\n            project   = me.project,\n            parent    = referenceTask.parent,\n            defaults  = typeof me.newTaskDefaults == 'function' ? me.newTaskDefaults(referenceTask) : me.newTaskDefaults,\n            newRecord = me.taskStore.modelClass.new({\n                // use reference task values only if not provided in newTaskDefaults\n                startDate    : referenceTask.startDate,\n                duration     : referenceTask.duration,\n                durationUnit : referenceTask.durationUnit\n            }, defaults, options.data);\n\n        /**\n         * Fires when adding a task from the UI to allow data mutation.\n         * @event beforeTaskAdd\n         * @param {Gantt.view.Gantt} source The Gantt instance\n         * @param {Gantt.model.TaskModel} taskRecord The task\n         */\n        me.trigger('beforeTaskAdd', { taskRecord : newRecord });\n\n        if (!newRecord.name) {\n            newRecord.name = `${me.L(milestone ? 'L{Gantt.New milestone}' : 'L{Gantt.New task}')} ${++newTaskCount}`;\n        }\n\n        project.suspendChangesTracking();\n\n        if (options.asChild) {\n            referenceTask.insertChild(newRecord, options.at === 'end' ? null : referenceTask.firstChild);\n        }\n        else if (options.above) {\n            parent.insertChild(newRecord, referenceTask);\n        }\n        else {\n            parent.insertChild(newRecord, referenceTask.nextSibling);\n        }\n\n        // Do not trigger change check, we've added a new record so project will trigger event anyway\n        project.resumeChangesTracking(true);\n\n        if (milestone) {\n            await project.commitAsync();\n            await newRecord.convertToMilestone();\n        }\n        else {\n            await project.commitAsync();\n        }\n\n        // run propagation to handle the new task record\n        // and then add a dependency if needed\n        if (asSuccessor) {\n            me.dependencyStore.add({\n                fromEvent : referenceTask,\n                toEvent   : newRecord,\n                type      : DependencyType.EndToStart,\n                fromSide  : 'right',\n                toSide    : 'left'\n            });\n        }\n        else if (asPredecessor) {\n            me.dependencyStore.add({\n                fromEvent : newRecord,\n                toEvent   : referenceTask,\n                type      : DependencyType.EndToStart,\n                fromSide  : 'right',\n                toSide    : 'left'\n            });\n        }\n\n        if (asSuccessor || asPredecessor) {\n            // wait for immediate commit to handle the new dependency\n            await project.commitAsync();\n        }\n\n        return newRecord;\n    }\n\n    /**\n     * Adds a new task above the passed reference task\n     * @param {Gantt.model.TaskModel} taskRecord The reference task record\n     * @param {Object} [options] Options for creating the new task\n     * @param {TaskModelConfig} [options.data] Data for the new task\n     * @returns {Gantt.model.TaskModel} A promise which yields the added task\n     * @async\n     */\n    addTaskAbove(taskRecord, options) {\n        return this.addTask(taskRecord, { ...options, above : true });\n    }\n\n    /**\n     * Adds a new task below the passed reference task\n     * @param {Gantt.model.TaskModel} taskRecord The reference task record\n     * @param {Object} [options] Options for creating the new task\n     * @param {TaskModelConfig} [options.data] Data for the new task\n     * @returns {Gantt.model.TaskModel} A promise which yields the added task\n     * @async\n     */\n    addTaskBelow(taskRecord, options) {\n        return this.addTask(taskRecord, options);\n    }\n\n    /**\n     * Adds a new milestone task below the passed reference task\n     * @param {Gantt.model.TaskModel} taskRecord The reference task record\n     * @param {Object} [options] Options for creating the new milestone\n     * @param {TaskModelConfig} [options.data] Data for the new milestone\n     * @returns {Gantt.model.TaskModel} A promise which yields the added task\n     * @async\n     */\n    addMilestoneBelow(taskRecord, options) {\n        return this.addTask(taskRecord, { ...options, milestone : true });\n    }\n\n    /**\n     * Adds a new subtask to the passed reference task\n     * @param {Gantt.model.TaskModel} taskRecord The reference task record\n     * @param {Object} [options] Options for creating the new subtask\n     * @param {'start'|'end'} [options.at='start'] Where to insert the new subtask in the parent's children.\n     * @param {TaskModelConfig} [options.data] Data for the new task\n     * @returns {Gantt.model.TaskModel} A promise which yields the added task\n     * @async\n     */\n    addSubtask(taskRecord, options) {\n        const promise = this.addTask(taskRecord, { ...options, asChild : true });\n\n        this.toggleCollapse(taskRecord, false);\n\n        return promise;\n    }\n\n    /**\n     * Adds a successor task to the passed reference task\n     * @param {Gantt.model.TaskModel} taskRecord The reference task record\n     * @param {Object} [options] Options for creating the new task\n     * @param {TaskModelConfig} [options.data] Data for the new task\n     * @returns {Gantt.model.TaskModel} A promise which yields the added task\n     * @async\n     */\n    addSuccessor(taskRecord, options) {\n        return this.addTask(taskRecord, { ...options, asSuccessor : true });\n    }\n\n    /**\n     * Adds a predecessor task to the passed reference task\n     * @param {Gantt.model.TaskModel} taskRecord The reference task record\n     * @param {Object} [options] Options for creating the new task\n     * @param {TaskModelConfig} [options.data] Data for the new task\n     * @returns {Gantt.model.TaskModel} A promise which yields the added task\n     * @async\n     */\n    addPredecessor(taskRecord, options) {\n        return this.addTask(taskRecord, { ...options, above : true, asPredecessor : true });\n    }\n\n    /**\n     * Increase the indentation level of one or more tasks in the tree. Has no effect if {@link Gantt.feature.TreeGroup}\n     * has regrouped the tree.\n     * @param {Gantt.model.TaskModel[]|Gantt.model.TaskModel} tasks The task(s) to indent.\n     * @returns {Promise} A promise which resolves if operation is successful\n     */\n    async indent(tasks) {\n        const me = this;\n\n        if (me.isTreeGrouped) {\n            return;\n        }\n\n        // If called by keyboard shortcut\n        if (!tasks || tasks instanceof Event) {\n            tasks = me.selectedRecords;\n        }\n\n        // Might be indenting or outdenting already\n        await this.project.commitAsync();\n\n        const result = await me.taskStore.indent(tasks);\n\n        // If `false`, the scheduling engine has found a reason that the operation could not happen.\n        if (!result) {\n            Toast.show({\n                rootElement : me.rootElement,\n                html        : me.L('L{Gantt.changeRejected}')\n            });\n        }\n\n        return result;\n    }\n\n    /**\n     * Decrease the indentation level of one or more tasks in the tree. Has no effect if {@link Gantt.feature.TreeGroup}\n     * has regrouped the tree.\n     *\n     * @param {Gantt.model.TaskModel[]|Gantt.model.TaskModel} tasks The task(s) to outdent.\n     * @returns {Promise} A promise which resolves if operation is successful\n     */\n    async outdent(tasks) {\n        const me = this;\n\n        if (me.isTreeGrouped) {\n            return;\n        }\n\n        // If called by keyboard shortcut\n        if (!tasks || tasks instanceof Event) {\n            tasks = me.selectedRecords;\n        }\n\n        // Might be indenting or outdenting already\n        await this.project.commitAsync();\n\n        const result = await me.taskStore.outdent(tasks);\n\n        // If `false`, the scheduling engine has found a reason that the operation could not happen.\n        if (!result) {\n            Toast.show({\n                rootElement : me.rootElement,\n                html        : me.L('L{Gantt.changeRejected}')\n            });\n        }\n\n        return result;\n    }\n\n    // endregion\n\n    // the 4 methods below are required since super cannot be called from GanttDom mixin\n\n    onElementKeyDown(event) {\n        super.onElementKeyDown(event);\n    }\n\n    onElementKeyUp(event) {\n        super.onElementKeyUp(event);\n    }\n\n    onElementMouseOver(event) {\n        super.onElementMouseOver(event);\n    }\n\n    onElementMouseOut(event) {\n        super.onElementMouseOut(event);\n    }\n}\n\n// Register this widget type with its Factory\nGanttBase.initClass();\n\nVersionHelper.setVersion('gantt', '5.3.7');\n", "import GanttBase from './GanttBase.js';\n\n// Based on thin GridBase, need to pull in default Grid features also\nimport '../../Grid/feature/ColumnDragToolbar.js';\nimport '../../Grid/feature/ColumnPicker.js';\nimport '../../Grid/feature/ColumnReorder.js';\nimport '../../Grid/feature/ColumnResize.js';\nimport '../../Grid/feature/CellMenu.js';\nimport '../../Grid/feature/HeaderMenu.js';\nimport '../../Grid/feature/Filter.js';\nimport '../../Grid/feature/FilterBar.js';\nimport '../../Grid/feature/Sort.js';\nimport '../../Grid/feature/Stripe.js';\nimport '../../Grid/column/CheckColumn.js'; // For checkbox selection mode\n\nimport '../../Grid/feature/RowReorder.js';\n\nimport '../../Scheduler/feature/ColumnLines.js';\nimport '../../Scheduler/feature/EventFilter.js';\nimport '../../Scheduler/feature/EventMenu.js';\nimport '../../Scheduler/feature/NonWorkingTime.js';\nimport '../../Scheduler/feature/ScheduleMenu.js';\nimport '../../Scheduler/feature/ScheduleTooltip.js';\nimport '../../Scheduler/feature/TimeAxisHeaderMenu.js';\n\nimport '../../SchedulerPro/feature/PercentBar.js';\nimport '../../SchedulerPro/feature/EventSegments.js';\n\nimport '../feature/CellEdit.js';\nimport '../feature/CriticalPaths.js';\nimport '../feature/Dependencies.js';\nimport '../feature/TaskCopyPaste.js';\nimport '../feature/TaskDrag.js';\nimport '../feature/TaskDragCreate.js';\nimport '../feature/TaskEdit.js';\nimport '../feature/TaskMenu.js';\nimport '../feature/TaskResize.js';\nimport '../feature/TaskSegmentDrag.js';\nimport '../feature/TaskSegmentResize.js';\nimport '../feature/TaskTooltip.js';\n\n/**\n * @module Gantt/view/Gantt\n */\n\n/**\n * <h2>Summary</h2>\n * The <b>Gantt</b> widget is the main component that visualizes the project data contained in a\n * {@link Gantt/model/ProjectModel} instance. The Gantt view is implemented as a TreeGrid consisting of a left section\n * showing the task hierarchy (or WBS) and a right section showing a graphical representation of the tasks on the time\n * axis. Task relationships (or \"dependencies\") are rendered as arrows between the tasks and in the background you can\n * (optionally) render non-working time too.\n *\n * The view is very interactive by default:\n *  * hovering over elements shows informative tooltips\n *  * right-clicking various elements shows context menus\n *  * double-clicking the task name shows an inline editor\n *  * double-clicking a task bar opens a detailed task editor popup\n *  * task bars can be dragged and resized\n *  * task progress can be changed by drag drop\n *  * task dependencies can be created by drag drop\n *\n * The Gantt view is very easy to use and is fully functional with minimal configuration yet\n * it is highly configurable through many configuration options and features.\n *\n * The minimum configuration consists of a {@link #config-project} and {@link Grid/view/Grid#config-columns}.\n * (If you only want to show the \"Name\" column, you can even omit `columns` as it's the default column set.)\n *\n * {@inlineexample Gantt/view/Gantt.js}\n * ## Inheriting from Bryntum Grid\n * Bryntum Gantt inherits from Bryntum Grid, meaning that most features available in the grid are also available\n * for the Gantt component. Common features include columns, cell editing, context menus, row grouping, sorting and more.\n * Note: If you want to use the Grid component standalone, e.g. to use drag-from-grid functionality, you need a separate\n * license for the Grid component.\n *\n * For more information on configuring columns, filtering, search etc. please see the {@link Grid.view.Grid Grid API docs}.\n * <h2>Configuring data for Gantt</h2>\n * The central place for all data visualized in the Gantt chart is the {@link Gantt/model/ProjectModel} instance, passed as the {@link #config-project}\n * configuration option when configuring the Gantt.\n *\n * For details related to the Gantt data structure / updating data / loading and saving data to the server,\n * adding custom fields and other information, please refer to the\n * [Project data guide](#Gantt/guides/data/project_data.md).\n *\n * <h2>Configuring columns</h2>\n * The only mandatory column is the <code>name</code> column which is of type {@link Gantt/column/NameColumn}.\n * It is a tree column that shows the project WBS structure, and allows inline editing of the\n * {@link Gantt/model/TaskModel#field-name} field.\n *\n * The Gantt chart ships with lots of predefined columns (such as {@link Gantt/column/PercentDoneColumn}) but you can of course add your own columns too, showing any additional data in your data model.\n *\n * {@inlineexample Gantt/view/GanttColumns.js}\n *\n * <h2>Advanced configurations</h2>\n * Almost any aspect of Bryntum Gantt can be configured. The included examples cover most of the supported configuration options.\n * To see some of the features in action, please click on the links below:\n *\n *  * [Labels](../examples/labels/)\n *  * [Tooltips](../examples/tooltips)\n *  * [Time Ranges](../examples/timeranges/)\n *  * [Resource Picker](../examples/resourceassignment/)\n *  * [Task Menu](../examples/taskmenu/)\n *  * [Task Editor](../examples/taskeditor/)\n *  * [Undo/Redo](../examples/undoredo/)\n *  * [Advanced](../examples/advanced)\n *\n * {@region Keyboard shortcuts}\n * Gantt has the following default keyboard shortcuts:\n *\n * | Keys                       | Action    | Action description                |\n * |----------------------------|-----------|-----------------------------------|\n * | `Alt`+`Shift`+`ArrowRight` | *indent*  | Indents currently selected tasks  |\n * | `Alt`+`Shift`+`ArrowLeft`  | *outdent* | Outdents currently selected tasks |\n *\n * <div class=\"note\">Please note that <code>Ctrl</code> is the equivalent to <code>Command</code> and <code>Alt</code>\n * is the equivalent to <code>Option</code> for Mac users</div>\n *\n * As Gantt is a subclass of Grid, many of Grid's {@link Grid.view.Grid#keyboard-shortcuts keyboard-shortcuts}\n * works for Gantt as well.\n *\n * For more information on how to customize keyboard shortcuts, please see\n * [our guide](#Gantt/guides/customization/keymap.md).\n * {@endregion}\n *\n * @extends Gantt/view/GanttBase\n * @classType gantt\n * @widget\n */\nexport default class Gantt extends GanttBase {\n\n    /**\n     * **This config is not used in the Gantt**\n     * @private\n     * @config {Scheduler.crud.AbstractCrudManagerMixin} crudManagerClass\n     */\n\n    /**\n     * **This config is not used in the Gantt. Please use {@link #config-project} config instead**\n     * @private\n     * @config {Object|Scheduler.crud.AbstractCrudManagerMixin} crudManager\n     */\n\n    static get $name() {\n        return 'Gantt';\n    }\n\n    // Factoryable type name\n    static get type() {\n        return 'gantt';\n    }\n}\n\n// Register this widget type with its Factory\nGantt.initClass();\n", "// region Symlinks (\"grunt symlink\" task)\n\nexport * from './entry.engine.gantt.js';\n\n//endregion\n\n// region Gantt\n\n// column\nexport { default as AddNewColumn } from '../lib/Gantt/column/AddNewColumn.js';\nexport { default as AllColumns } from '../lib/Gantt/column/AllColumns.js';\nexport { default as CalendarColumn } from '../lib/Gantt/column/CalendarColumn.js';\nexport { default as ConstraintDateColumn } from '../lib/Gantt/column/ConstraintDateColumn.js';\nexport { default as ConstraintTypeColumn } from '../lib/Gantt/column/ConstraintTypeColumn.js';\nexport { default as DeadlineDateColumn } from '../lib/Gantt/column/DeadlineDateColumn.js';\nexport { default as DependencyColumn } from '../lib/Gantt/column/DependencyColumn.js';\nexport { default as EarlyEndDateColumn } from '../lib/Gantt/column/EarlyEndDateColumn.js';\nexport { default as EarlyStartDateColumn } from '../lib/Gantt/column/EarlyStartDateColumn.js';\nexport { default as EffortColumn } from '../lib/Gantt/column/EffortColumn.js';\nexport { default as EndDateColumn } from '../lib/Gantt/column/EndDateColumn.js';\nexport { default as EventModeColumn } from '../lib/Gantt/column/EventModeColumn.js';\nexport { default as GanttDateColumn } from '../lib/Gantt/column/GanttDateColumn.js';\nexport { default as IgnoreResourceCalendarColumn } from '../lib/Gantt/column/IgnoreResourceCalendarColumn.js';\nexport { default as InactiveColumn } from '../lib/Gantt/column/InactiveColumn.js';\nexport { default as LateEndDateColumn } from '../lib/Gantt/column/LateEndDateColumn.js';\nexport { default as LateStartDateColumn } from '../lib/Gantt/column/LateStartDateColumn.js';\nexport { default as ManuallyScheduledColumn } from '../lib/Gantt/column/ManuallyScheduledColumn.js';\nexport { default as MilestoneColumn } from '../lib/Gantt/column/MilestoneColumn.js';\nexport { default as NameColumn } from '../lib/Gantt/column/NameColumn.js';\nexport { default as NoteColumn } from '../lib/Gantt/column/NoteColumn.js';\nexport { default as PercentDoneColumn } from '../lib/Gantt/column/PercentDoneColumn.js';\nexport { default as PredecessorColumn } from '../lib/Gantt/column/PredecessorColumn.js';\nexport { default as ResourceAssignmentColumn } from '../lib/Gantt/column/ResourceAssignmentColumn.js';\nexport { default as ResourceAssignmentGridResourceColumn } from '../lib/Gantt/column/ResourceAssignmentGridResourceColumn.js';\nexport { default as RollupColumn } from '../lib/Gantt/column/RollupColumn.js';\nexport { default as SchedulingModeColumn } from '../lib/Gantt/column/SchedulingModeColumn.js';\nexport { default as SequenceColumn } from '../lib/Gantt/column/SequenceColumn.js';\nexport { default as ShowInTimelineColumn } from '../lib/Gantt/column/ShowInTimelineColumn.js';\nexport { default as StartDateColumn } from '../lib/Gantt/column/StartDateColumn.js';\nexport { default as SuccessorColumn } from '../lib/Gantt/column/SuccessorColumn.js';\nexport { default as TimeAxisColumn } from '../lib/Gantt/column/TimeAxisColumn.js';\nexport { default as TotalSlackColumn } from '../lib/Gantt/column/TotalSlackColumn.js';\nexport { default as WBSColumn } from '../lib/Gantt/column/WBSColumn.js';\n\n//data\nexport { default as AssignmentsManipulationStore } from '../lib/Gantt/data/AssignmentsManipulationStore.js';\nexport { default as AssignmentStore } from '../lib/Gantt/data/AssignmentStore.js';\nexport { default as CalendarManagerStore } from '../lib/Gantt/data/CalendarManagerStore.js';\nexport { default as DependencyStore } from '../lib/Gantt/data/DependencyStore.js';\nexport { default as ResourceStore } from '../lib/Gantt/data/ResourceStore.js';\nexport { default as TaskStore } from '../lib/Gantt/data/TaskStore.js';\nexport { default as WbsField } from '../lib/Gantt/data/field/WbsField.js';\n\n// feature\nexport { default as Baselines } from '../lib/Gantt/feature/Baselines.js';\nexport { default as CellEdit } from '../lib/Gantt/feature/CellEdit.js';\nexport { default as CriticalPaths } from '../lib/Gantt/feature/CriticalPaths.js';\nexport { default as Dependencies } from '../lib/Gantt/feature/Dependencies.js';\nexport { default as Indicators } from '../lib/Gantt/feature/Indicators.js';\nexport { default as Labels } from '../lib/Gantt/feature/Labels.js';\nexport { default as ParentArea } from '../lib/Gantt/feature/ParentArea.js';\nexport { default as ProgressLine } from '../lib/Gantt/feature/ProgressLine.js';\nexport { default as ProjectLines } from '../lib/Gantt/feature/ProjectLines.js';\nexport { default as Rollups } from '../lib/Gantt/feature/Rollups.js';\nexport { default as Summary } from '../lib/Gantt/feature/Summary.js';\nexport { default as TaskCopyPaste } from '../lib/Gantt/feature/TaskCopyPaste.js';\nexport { default as TaskDrag } from '../lib/Gantt/feature/TaskDrag.js';\nexport { default as TaskDragCreate } from '../lib/Gantt/feature/TaskDragCreate.js';\nexport { default as TaskEdit } from '../lib/Gantt/feature/TaskEdit.js';\nexport { default as TaskMenu } from '../lib/Gantt/feature/TaskMenu.js';\nexport { default as TaskNonWorkingTime } from '../lib/Gantt/feature/TaskNonWorkingTime.js';\nexport { default as TaskResize } from '../lib/Gantt/feature/TaskResize.js';\nexport { default as TaskSegmentDrag } from '../lib/Gantt/feature/TaskSegmentDrag.js';\nexport { default as TaskSegmentResize } from '../lib/Gantt/feature/TaskSegmentResize.js';\nexport { default as TaskTooltip } from '../lib/Gantt/feature/TaskTooltip.js';\nexport { default as TreeGroup } from '../lib/Gantt/feature/TreeGroup.js';\nexport { default as Versions } from '../lib/Gantt/feature/Versions.js';\n\n//export\nexport { default as MultiPageExporter } from '../lib/Gantt/feature/export/exporter/MultiPageExporter.js';\nexport { default as MultiPageVerticalExporter } from '../lib/Gantt/feature/export/exporter/MultiPageVerticalExporter.js';\nexport { default as PdfExport } from '../lib/Gantt/feature/export/PdfExport.js';\nexport { default as SinglePageExporter } from '../lib/Gantt/feature/export/exporter/SinglePageExporter.js';\n\n// model\nexport { default as AssignmentModel } from '../lib/Gantt/model/AssignmentModel.js';\nexport { default as Baseline } from '../lib/Gantt/model/Baseline.js';\nexport { default as CalendarIntervalModel } from '../lib/Gantt/model/CalendarIntervalModel.js';\nexport { default as CalendarModel } from '../lib/Gantt/model/CalendarModel.js';\nexport { default as DependencyModel } from '../lib/Gantt/model/DependencyModel.js';\nexport { default as ProjectModel } from '../lib/Gantt/model/ProjectModel.js';\nexport { default as ResourceModel } from '../lib/Gantt/model/ResourceModel.js';\nexport { default as TaskModel } from '../lib/Gantt/model/TaskModel.js';\nexport { default as WebSocketProjectModel } from '../lib/Gantt/model/WebSocketProjectModel.js';\n\n// util\nexport { default as ProjectGenerator } from '../lib/Gantt/util/ProjectGenerator.js';\nexport { default as ResourceAssignmentParser } from '../lib/Gantt/util/ResourceAssignmentParser.js';\n\n// widget\nexport { default as AssignmentField } from '../lib/Gantt/widget/AssignmentField.js';\nexport { default as AssignmentGrid } from '../lib/Gantt/widget/AssignmentGrid.js';\nexport { default as AssignmentPicker } from '../lib/Gantt/widget/AssignmentPicker.js';\nexport { default as CalendarPicker } from '../lib/Gantt/widget/CalendarPicker.js';\nexport { default as DependencyField } from '../lib/Gantt/widget/DependencyField.js';\nexport { default as TaskEditor } from '../lib/Gantt/widget/TaskEditor.js';\n\n// feature experimental\nexport { default as MspExport } from '../lib/Gantt/feature/export/MspExport.js';\n\n// view mixin\nexport { default as GanttDom } from '../lib/Gantt/view/mixin/GanttDom.js';\nexport { default as GanttRegions } from '../lib/Gantt/view/mixin/GanttRegions.js';\nexport { default as GanttScroll } from '../lib/Gantt/view/mixin/GanttScroll.js';\nexport { default as GanttState } from '../lib/Gantt/view/mixin/GanttState.js';\nexport { default as GanttStores } from '../lib/Gantt/view/mixin/GanttStores.js';\nexport { default as GanttTimelineDateMapper } from '../lib/Gantt/view/mixin/GanttTimelineDateMapper.js';\nexport { default as TaskNavigation } from '../lib/Gantt/view/mixin/TaskNavigation.js';\n\n// view orientation\nexport { default as NewTaskRendering } from '../lib/Gantt/view/orientation/NewTaskRendering.js';\n\n// view\nexport { default as Gantt } from '../lib/Gantt/view/Gantt.js';\nexport { default as GanttBase } from '../lib/Gantt/view/GanttBase.js';\n\n//endregion\n"],
  "mappings": "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",
  "names": ["__decorate", "decorators", "target", "key", "desc", "c", "arguments", "length", "r", "Object", "getOwnPropertyDescriptor", "d", "Reflect", "decorate", "i", "defineProperty", "ConstrainedByParentMixin", "Mixin", "BaseEventMixin", "HasChildrenMixin", "ConstrainedEarlyEventMixin", "base", "superProto", "prototype", "maybeSkipNonWorkingTime", "date", "isForward", "$", "childEvents", "size", "call", "calculateStartDateConstraintIntervals", "intervals", "parentEvent", "graph", "parentIntervals", "startDateConstraintIntervals", "push", "apply", "calculateEndDateConstraintIntervals", "endDateConstraintIntervals", "calculateEarlyStartDateConstraintIntervals", "earlyStartDateConstraintIntervals", "manuallyScheduled", "direction", "Direction", "Forward", "ManuallyScheduledParentConstraintInterval", "new", "side", "ConstraintIntervalSide", "Start", "startDate", "calculateEarlyEndDateConstraintIntervals", "earlyEndDateConstraintIntervals", "DisableManuallyScheduledConflictResolution", "Localizable", "ConflictResolution", "$name", "construct", "event", "interval", "owner", "getDescription", "format", "L", "name", "id", "resolve", "ManuallyScheduledParentConstraintIntervalDescription", "ConstraintIntervalDescription", "tpl", "End", "getDescriptionParameters", "DateHelper", "endDate", "ConstraintInterval", "descriptionBuilderClass", "isAffectedByTransaction", "transaction", "activeTransaction", "manuallyScheduledQuark", "entries", "get", "baseRevision", "hasIdentifier", "$$", "isShadow", "getResolutions", "resolutions", "resetManuallyScheduledConflictResolutionClass", "prototypeValue", "ConstrainedLateEventMixin", "calculateLateStartDateConstraintIntervals", "lateStartDateConstraintIntervals", "calculateLateEndDateConstraintIntervals", "lateEndDateConstraintIntervals", "Backward", "shouldRollupChildLateStartDate", "childEvent", "calculateMinChildrenLateStartDate", "result", "MAX_DATE", "subEventsIterator", "subEventsIterable", "childDate", "hasSubEvents", "minChildrenLateStartDate", "lateStartDate", "getTime", "calculateLateStartDateRaw", "isConstrainedLate", "concat", "effectiveInterval", "calculateEffectiveConstraintInterval", "isIntervalEmpty", "conflict", "ConflictEffect", "intersectionOf", "EffectResolutionResult", "Cancel", "Reject", "isDateFinite", "shouldRollupChildLateEndDate", "calculateMaxChildrenLateEndDate", "MIN_DATE", "maxChildrenLateEndDate", "lateEndDate", "calculateLateStartDate", "lateStartDateRaw", "calculateLateEndDateRaw", "calculateLateEndDate", "lateEndDateRaw", "calculateTotalSlack", "earlyStartDate", "earlyStartDateRaw", "earlyEndDate", "earlyEndDateRaw", "slackUnit", "endSlack", "calculateProjectedDuration", "calculateCritical", "totalSlack", "startDateIntervals", "endDateIntervals", "Boolean", "calculateStartDatePure", "unscheduled", "calculateStartDateProposed", "calculateEndDatePure", "calculateEndDateProposed", "field", "lazy", "EarlyLateLazyness", "model_field", "type", "persist", "converter", "dateConverter", "persistent", "defaultValue", "TimeUnit", "Day", "normalizeUnit", "calculate", "ScheduledByDependenciesLateEventMixin", "ScheduledByDependenciesEarlyEventMixin", "shouldSuccessorAffectScheduling", "dependency", "toEvent", "isAtomicValue", "active", "inactive", "project", "getProject", "dependencyConstraintIntervalClass", "outgoingDeps", "successor", "successorDate", "DependencyType", "StartToStart", "StartToEnd", "lag", "lagUnit", "lagMS", "$convertDuration", "Millisecond", "calendar", "version", "skipNonWorkingTime", "calculateStartDate", "unshift", "EndToEnd", "EndToStart", "fixedEffortSEDWUGraphDescription", "CycleDescription", "variables", "Set", "StartDateVar", "EndDateVar", "DurationVar", "EffortVar", "UnitsVar", "formulas", "endDateByEffortFormula", "durationFormula", "unitsFormula", "effortFormula", "startDateByEffortFormula", "startDateFormula", "endDateFormula", "fixedEffortSEDWUForward", "CycleResolution", "description", "defaultResolutionFormulas", "fixedEffortSEDWUBackward", "FixedEffortMixin", "HasSchedulingModeMixin", "prepareDispatcher", "YIELD", "effectiveSchedulingMode", "SchedulingMode", "FixedEffort", "cycleDispatcher", "HasProposedValue", "assigned", "addProposedValueFlag", "addKeepIfPossibleFlag", "cycleResolutionContext", "Y", "effectiveSchedulingModeSync", "None", "fixedUnitsSEDWUGraphDescription", "fixedUnitsSEDWUForwardNonEffortDriven", "fixedUnitsSEDWUForwardEffortDriven", "fixedUnitsSEDWUBackwardNonEffortDriven", "fixedUnitsSEDWUBackwardEffortDriven", "FixedUnitsMixin", "FixedUnits", "effortDriven", "InactiveEventMixin", "writeInactive", "me", "quark", "_this$stm", "isLoading", "constructor", "write", "children", "stm", "state", "isRestoringStateClass", "child", "calculateInactive", "ProposedOrPrevious", "subEvents", "activeCnt", "subEvent", "shouldRollupChildEffort", "shouldRollupChildPercentDoneSummaryData", "shouldRollupChildStartDate", "shouldRollupChildEndDate", "shouldRollupChildEarlyStartDate", "shouldRollupChildEarlyEndDate", "GanttEvent", "MixinAny", "SchedulerProEvent", "HasCriticalPathsMixin", "calculateCriticalPaths", "paths", "pathsToProcess", "events", "eventsToProcess", "projectEndDate", "shift", "eventIsCritical", "critical", "eventIsActive", "eventEndDate", "path", "taskIndex", "node", "criticalPredecessorNodes", "incomingDeps", "fromEvent", "pathCopy", "slice", "reverse", "GanttProjectMixin", "SchedulerProProjectMixin", "HasEffortMixin", "nonEqual", "calculateNonEqual", "isGanttProjectMixin", "afterConfigure", "projectConstraintIntervalClass", "ProjectConstraintInterval", "calculateDirection", "unsafeCalculateInitialMinChildrenStartDateDeep", "calculateMinChildrenStartDate", "calculateEndDate", "calculateMaxChildrenEndDate", "unsafeCalculateInitialMaxChildrenEndDateDeep", "getDefaultEventModelClass", "getDefaultAssignmentModelClass", "SchedulerProAssignmentMixin", "getDefaultResourceModelClass", "SchedulerProResourceMixin", "getDefaultEventStoreClass", "ChronoEventTreeStoreMixin", "getType", "ProjectType", "Gantt", "UnsafeProposedOrPreviousValueOf", "toProcess", "getDependencyCycleDetectionIdentifiers", "equality", "ProjectConstraintIntervalDescription", "dateQuark", "AddNewColumn", "Column", "defaults", "text", "cls", "draggable", "sortable", "exportable", "editor", "doDestroy", "_this$_combo", "_combo", "destroy", "combo", "columns", "grid", "Combo", "placeholder", "triggers", "autoExpand", "store", "ganttColumnStore", "displayField", "monitorResize", "picker", "align", "axisLock", "minWidth", "onItem", "record", "columnRecord", "newColumn", "value", "region", "insert", "indexOf", "element", "focus", "onBeforeShow", "forElement", "syncInputFieldValue", "input", "internalListeners", "keydown", "stopImmediatePropagation", "Store", "data", "values", "ColumnStore", "columnTypes", "reduce", "col", "$meta", "fields", "exposedData", "exposeProperties", "isGanttColumn", "optionalL", "filters", "colRecord", "some", "gridCol", "sorters", "headerRenderer", "column", "headerElement", "render", "onKeyDown", "updateLocalization", "registerColumnType", "_$name", "CalendarPicker", "refreshCalendars", "calendars", "map", "_store", "isDefault", "initClass", "CalendarColumn", "clearable", "allowInvalid", "afterConstruct", "defaultCalendar", "calendarManagerStore", "ion", "changePreCommit", "refresh", "thisObj", "allRecords", "renderer", "model", "getById", "GanttDateColumn", "DateColumn", "instantUpdate", "width", "step", "gantt", "explicitFormat", "displayDateFormatChange", "set", "displayDateFormat", "ConstraintDateColumn", "ConstraintTypeColumn", "ConstraintTypePicker", "filterable", "filterField", "startCellEdit", "onStartCellEdit", "finishCellEdit", "onDoneCellEdit", "cancelCellEdit", "FunctionHelper", "createSequence", "onEditorLocaleChange", "editorContext", "inputField", "addFilter", "filterBy", "run", "_filterDetacher", "removeFilter", "refreshColumn", "DeadlineDateColumn", "EarlyEndDateColumn", "EarlyStartDateColumn", "EffortColumn", "DurationColumn", "defaultEditor", "EffortField", "EndDateColumn", "editorCfg", "IgnoreResourceCalendarColumn", "CheckColumn", "__publicField", "InactiveColumn", "LateEndDateColumn", "LateStartDateColumn", "ManuallyScheduledColumn", "MilestoneColumn", "suppressNoModelFieldWarning", "NameColumn", "TreeColumn", "NoteColumn", "trim", "PercentDoneColumn", "NumberColumn", "circleHeightPercentage", "unit", "min", "max", "config", "showCircle", "htmlEncode", "defaultRenderer", "isExport", "getFormattedPercentDone", "className", "style", "height", "rowHeight", "dataset", "toggleTypes", "from", "to", "buildDependencySuffixRe", "RegExp", "dependencyTypes", "join", "dependencySuffixRe", "DependencyField", "ourSide", "otherSide", "dependencies", "Collection", "extraKeys", "startCollection", "delimiterRegEx", "delimiter", "localizeDependencies", "LocaleManager", "locale", "internalOnInput", "clearError", "undefined", "isValid", "TextField", "invalidValueError", "onInternalKeyDown", "keyEvent", "syncInvalid", "_super$onInternalKeyD", "pickerVisible", "onTriggerClick", "doFilter", "filterInput", "changeStore", "chain", "eventRecord", "excludeCollapsedRecords", "changePicker", "oldPicker", "filter", "filterOnInput", "clear", "configurable", "filterFieldInput", "now", "reconfigure", "Objects", "merge", "listCls", "itemTpl", "listItemTpl", "pickerAlignElement", "anchor", "overlayAnchor", "minHeight", "inlinePicker", "Math", "count", "navigator", "keyEventTarget", "processEvent", "e", "hidePicker", "onPredecessorClick", "bind", "getItemClasses", "task", "List", "getBy", "getConnectorString", "toLowerCase", "show", "scrollable", "Rectangle", "client", "deflate", "once", "contentElement", "destroyProperties", "updateEventRecord", "fillFromMaster", "onPickerShow", "source", "offsetWidth", "firstChild", "insertBefore", "taskName", "StringHelper", "encodeHtml", "dependencyIdField", "idField", "taskIdentifier", "isPhantom", "String", "parseDependencies", "dependenciesCollection", "dep", "dependencyStore", "modelClass", "inputting", "inputValue", "dependenciesToString", "list", "item", "box", "closest", "noselect", "trigger", "userAction", "remove", "copy", "skipFieldIdentifiers", "add", "createRecord", "eventIdField", "eventField", "getEventId", "isModel", "sort", "a", "b", "Dependencies", "getLocalizedDependencyType", "getLag", "_this$owner", "taskStore", "split", "DependencyModel", "dependencyText", "idLen", "linkedTask", "linkedTaskId", "substr", "find", "remainder", "Type", "edgeAndLag", "exec", "toUpperCase", "parsedLag", "parseDuration", "durationUnit", "magnitude", "needsInputSync", "_DependencyField", "valueField", "validateFilter", "minChars", "clearTextOnPickerHide", "floating", "scrollAction", "itemsFocusable", "activateOnMouseover", "maxHeight", "overflowY", "autoShow", "focusOnHover", "multiSelect", "chipView", "validateOnInput", "hasNoProject", "v", "depIsValid", "DependencyColumn", "Delayable", "taskRecord", "_linkedTask$dependenc", "includes", "toString", "getFilterableValue", "finalizeCellEdit", "oldValue", "toValidate", "oldDependencies", "commitAsync", "isDestroyed", "Promise", "all", "isValidDependencyModel", "every", "isPredecessor", "eventStore", "PredecessorColumn", "canFillValue", "AssignmentsManipulationStore", "AssignmentStore", "defaultConfig", "storage", "callOnFunctions", "projectEvent", "floatAssignedResources", "liveFloatAssignedResources", "addSorter", "fn", "defaultSort", "_projectEvent", "_projectEvent$getProj", "generation", "_projectEventGeneration", "assignmentStore", "_assignmentStoreGeneration", "_projectEvent$getProj2", "removeAll", "_floatAssignedResources", "resourceStore", "resourceDataSource", "getFieldDefinition", "dataSource", "eventDataSource", "storeData", "forEach", "resource", "existingAssignment", "getAssignmentForEventAndResource", "assign", "units", "eventId", "resourceId", "includeFilteredOutRecords", "includeCollapsedGroupRecords", "toValue", "query", "toValueString", "lhs", "rhs", "resourceName", "localeCompare", "onUpdate", "changes", "isConfiguring", "hasOwnProperty", "AssignmentModel", "SchedulerProAssignmentModel", "serialize", "isEqual", "isSerializableEqual", "localeName", "localeDesc", "localeCode", "Save", "Inactive", "Calendar", "TotalSlackColumn", "Deadline", "Duration", "Effort", "Finish", "EventModeColumn", "Manual", "Auto", "Milestone", "Name", "Note", "Predecessors", "ResourceAssignmentColumn", "RollupColumn", "Rollup", "SchedulingModeColumn", "SequenceColumn", "Sequence", "ShowInTimelineColumn", "StartDateColumn", "SuccessorColumn", "Successors", "TaskCopyPaste", "copyTask", "cutTask", "pasteTask", "WBSColumn", "WBS", "renumber", "invalidDependencyFormat", "ProjectLines", "TaskTooltip", "Complete", "AssignmentGrid", "Units", "unitsTpl", "Edit", "Indent", "Outdent", "Add", "Successor", "Predecessor", "changeRejected", "linkTasks", "unlinkTasks", "EventSegments", "splitTask", "Indicators", "earlyDates", "lateDates", "deadlineDate", "Versions", "indented", "outdented", "cut", "pasted", "deletedTasks", "LocaleHelper", "publishLocale", "ResourceAssignmentGridResourceColumn", "ResourceInfoColumn", "showEventCount", "flex", "useNameAsImageName", "cellElement", "isSpecialRow", "Grid", "resourceImageExtension", "resourceColumn", "unitsColumn", "localeClass", "round", "selectionMode", "checkboxOnly", "showCheckAll", "features", "group", "filterBar", "contextMenu", "disableGridRowModelWarning", "selectionChange", "selected", "deselected", "assignment", "selectedRecords", "as", "assignments", "existingAs", "oldStore", "_me$storeDetacher", "AssignmentManipulationStore", "_me$_projectEvent", "storeDetacher", "update", "clone", "onAssignmentUpdate", "selectRow", "scrollIntoView", "addToSelection", "deselectRow", "AssignmentPicker", "trapFocus", "bbar", "ref", "color", "configure", "selectedRecordCollection", "originalSelected", "_me$bbar$widgetMap$sa", "_me$bbar$widgetMap$ca", "widgetMap", "saveBtn", "click", "cancelBtn", "onSaveClick", "hide", "onCancelClick", "AssignmentField", "editingRecords", "xss", "overflowX", "expand", "handler", "editable", "pickerWidth", "tooltipTemplate", "onChipClose", "records", "showPicker", "deselectRows", "tooltip", "assignmentRecords", "PickerField", "focusPicker", "ObjectHelper", "readOnly", "resourceImagePath", "resourceImageFolderPath", "valueCollection", "isDestroying", "clearFilters", "containsFocus", "changeProjectEvent", "updateStore", "detachListeners", "change", "_assignments", "ourStoreVersion", "copyData", "hasChanged", "initialValue", "onPickerKeyDown", "compareDocumentPosition", "bodyContainer", "document", "DOCUMENT_POSITION_FOLLOWING", "focusedCell", "isActionable", "cacheCurrentValue", "Array", "isArray", "_value", "rec", "resourceNameRegExp", "replace", "internalCellCls", "index", "showAvatars", "sideMargin", "task1", "task2", "a1", "a2", "regexp", "test", "alwaysClearCell", "repaintOnResize", "rendererWithAvatars", "avatarRendering", "AvatarRendering", "forSelector", "beforeShow", "_me$avatarTooltipTemp", "resourceRecord", "assignmentRecord", "overflowCount", "overflowAssignments", "activeTarget", "elementData", "avatarTooltipTemplate", "items", "showAllNames", "html", "avatarTooltip", "enableResourceDragging", "paint", "setupDragging", "beforeCellEditStart", "onBeforeCellEditStart", "beforeRenderRows", "calculateAvatarSize", "rowManager", "beforeRowHeight", "onResourceUpdate", "beginGridMeasuring", "classList", "cellStyles", "globalThis", "getComputedStyle", "padding", "parseInt", "paddingTop", "avatarMaxSize", "endGridMeasuring", "_this$avatarRendering", "_this$dragHelper", "dragHelper", "changesApplied", "onEditorChangesApplied", "getCell", "columnId", "_source$project", "propagatingLoadChanges", "_chipView", "ChipView", "parent", "closable", "triggerPaint", "val", "chipViewWrap", "querySelector", "DomHelper", "createElement", "replaceValues", "silent", "chipCloneElement", "cloneNode", "removeAttribute", "innerHTML", "appendChild", "nbrVisible", "floor", "isLastOverflowing", "imgConfig", "renderAvatar", "tag", "imageUrl", "image", "avatar", "getResourceAvatar", "initials", "eventColor", "iconCls", "defaultImageUrl", "defaultAvatar", "defaultResourceImageName", "toClipboardString", "safeJsonStringify", "fromClipboardString", "string", "parsedAssignments", "safeJsonParse", "newAssignments", "assignmentData", "range", "cs", "calculateFillValue", "JSON", "stringify", "rowReorder", "targetSelector", "subGrid", "DragHelper", "cloneTarget", "onDragStart", "context", "grabbed", "enableScrollingCloseToEdges", "onDrag", "targetTask", "resolveTaskRecord", "valid", "resources", "onDrop", "validDropTarget", "display", "unassign", "resourceAssignmentCell", "avatarContainer", "animateProxyTo", "disableScrollingCloseToEdges", "SchedulingModePicker", "groupable", "durationUnitField", "operator", "asMilliseconds", "roundValue", "milliseconds", "Error", "wbsValue", "match", "headerMenuItems", "icon", "rootNode", "refreshWbs", "AllColumns", "internalRenderer", "renderText", "widget", "onCheckboxChange", "checked", "TimeAxisColumn", "SchedulerTimeAxisColumn", "enableCellContextMenu", "SchedulerProAssignmentStore", "loadPriority", "syncPriority", "CalendarModel", "SchedulerProCalendarModel", "CalendarManagerStore", "SchedulerProCalendarManagerStore", "SchedulerProDependencyModel", "args", "fromTask", "toTask", "_this$fromEvent", "_this$toEvent", "persistableData", "shouldRecordFieldChange", "fieldName", "newValue", "DependencyStore", "SchedulerProDependencyStore", "ResourceModel", "SchedulerProResourceModel", "ResourceStore", "SchedulerProResourceStore", "Baseline", "TimeSpan", "isBaseline", "milestone", "isLeaf", "duration", "convertToMilestone", "convertToRegular", "setMilestone", "setDuration", "normalize", "hasDuration", "setData", "WbsField", "DataField", "convert", "Wbs", "compare", "applyBaselineDefaults", "baselines", "baseline", "hasData", "descendingWbsSorter", "s", "ascending", "isReversed", "firstChildWbs", "childWbs", "n", "refreshWbsOptions", "deep", "refreshWbsOnJoinOptions", "TaskModel", "derive", "mixin", "PartOfProject", "PercentDoneMixin", "$manuallyScheduled", "isDomClassList", "storeClass", "getDefaultSegmentModelClass", "EventSegmentModel", "endBatch", "isPersistable", "wasPersistable", "stores", "updateModifiedBagForRecord", "isTask", "isTaskModel", "isEvent", "wbsCode", "processBaselinesStoreData", "$initializedBaselines", "fieldMap", "init", "assignInitables", "meta", "baselinesStore", "hasBaselines", "_this$baselines", "baselinesField", "originalData", "setBaseline", "missingBaselines", "fill", "getAt", "successors", "setSuccessors", "replaceDependencies", "dependencyRecords", "isSuccessors", "updated", "toAdd", "toRemove", "currentSet", "depsArr", "existingDep", "has", "predecessors", "setPredecessors", "currentAssignments", "removedAssignments", "current", "newAss", "currentAssignment", "isDelayingCalculation", "findItem", "isDraggable", "isResizable", "resizable", "isEditable", "isMilestone", "isFieldModified", "allDependencies", "_this$project", "predecessorTasks", "successorTasks", "previousSiblingsTotalCount", "previousSibling", "parentIndex", "descendantCount", "sequenceNumber", "allIndexOf", "code", "isSubProject", "subProject", "isProject", "bubbleWhile", "t", "fullEffort", "effortUnit", "effort", "setEffort", "$linkedResources", "_this$resources", "flatMap", "$links", "inSetNormalize", "joinStore", "useOrderedTree", "firstStore", "useOrderedTreeForWbs", "generatedParent", "_me$taskStore", "_me$nextSibling", "_me$previousSibling", "isLoadingData", "nextSibling", "options", "orderedParentIndex", "unfilteredIndex", "wbs", "isRoot", "append", "orderedChildren", "unfilteredChildren", "_taskStore$sorters", "findIndex", "tryInsertChild", "tryPropagateWithChanges", "insertChild", "updateDependencies", "isScheduled", "DependencyBaseModel", "setLag", "calculateDurationMs", "moveTaskPinningSuccessors", "bubble", "setStartDatePinningSuccessors", "promise", "setStartDate", "setEndDatePinningSuccessors", "getCurrentConfig", "segments", "segment", "convertEmptyParentToLeaf", "refreshWbsForChildrenOptions", "wbsAuto", "freeze", "wbsManual", "TaskStore", "AjaxStore", "DayIndexMixin", "GetEventsMixin", "storeId", "tree", "wbsMode", "outdentIgnoringSiblings", "changeWbsMode", "action", "indent", "nodes", "isProjectModel", "beginBatch", "newParent", "toggleCollapse", "refreshWbsForChildren", "up", "outdent", "newChildren", "orderedBeforeNode", "nextOrderedSibling", "onNodeAddChild", "isMove", "wbsRefreshed", "oldParent", "oldParentId", "onNodeRemoveChild", "flags", "unfiltered", "afterChangesetApplied", "modifiedParents", "afterPerformSort", "opts", "parents", "getTotalTimeSpan", "getEventsForResource", "isPartOfStore", "isDateRangeAvailable", "start", "end", "excludeEvent", "allEvents", "isAssignment", "eventToRemove", "delete", "intersectSpans", "tasks", "getEventsLinkingDependency", "baselineSelector", "Baselines", "TooltipBase", "recordType", "pluginConfig", "updateRenderer", "tipId", "doDisable", "disable", "refreshWithTransition", "resolveTimeSpanRecord", "baselineElement", "template", "displayDuration", "formatDuration", "startClockHtml", "endClockHtml", "getLocalizedNameOfUnit", "getTaskDOMConfig", "top", "rtl", "position", "transform", "taskId", "baselineBox", "taskRendering", "getTaskBox", "inset", "timeAxisSubGrid", "totalFixedWidth", "left", "renderData", "baselineRecord", "flat", "syncOptions", "syncIdField", "onTaskDataGenerated", "extraConfigs", "wrapperCls", "disabled", "GridFeatureManager", "registerFeature", "CellEdit", "GridCellEdit", "addNewAtEnd", "cfg", "onProjectChange", "cancelEditing", "getEditorForCell", "doAddNewAtEnd", "addToCurrentParent", "newTask", "addTaskBelow", "last", "getRowFor", "displayRecordAtBottom", "onCellEditStart", "suspendAutoSync", "afterCellEdit", "resumeAutoSync", "CriticalPaths", "InstancePlugin", "criticalDependencyCls", "unhighlightCriticalPaths", "highlightCriticalPaths", "graphReady", "getDependenciesFeature", "foregroundCanvas", "setupObserver", "destroyObserver", "criticalPathObserver", "getGraph", "observe", "criticalPaths", "removeCriticalCls", "highlight", "_this$client$project", "_this$client$project$", "removeIdentifier", "contains", "unhighlight", "fromBoxSide", "toBoxSide", "criticalPathSorter", "num", "SchedulerDependencies", "isGantt", "createMarkers", "endMarker", "setAttribute", "retainElement", "svgCanvas", "rowStore", "attachToResourceStore", "getDependencyKey", "getAssignmentElement", "getElementFromTaskRecord", "getAssignmentBounds", "isExporting", "relativeTo", "isEngineReady", "isDependencyVisible", "_dependency$fromEvent", "_dependency$toEvent", "drawDependency", "batch", "forceBoxes", "domConfigs", "topIndex", "firstVisibleRow", "dataIndex", "bottomIndex", "lastVisibleRow", "startMS", "endMS", "visibleDateRange", "isAvailable", "fromIndex", "toIndex", "fromDateMS", "startDateMS", "toDateMS", "endDateMS", "lineDomConfigs", "getDomConfigs", "afterDrawDependency", "domSync", "getDependenciesToConsider", "startIndex", "endIndex", "_super$getDependencie", "criticalFeature", "enabled", "adjustLineDef", "lineDef", "startBox", "endBox", "arrowMargin", "pathFinder", "startArrowMargin", "startRowBox", "getRecordCoords", "endRowBox", "startBoxEnd", "getEnd", "endBoxStart", "getStart", "endBoxEnd", "sourceEndsBeforeStart", "bottom", "y", "endSide", "x", "right", "startSide", "boxesReversed", "otherBoxes", "drawForTask", "VersionHelper", "deprecate", "getHoverTipHtml", "resolveDependencyRecord", "fromSide", "toSide", "fullLag", "createDependency", "terminalSides", "highlightDependenciesOnEventHover", "pathFinderConfig", "otherHorizontalMargin", "otherVerticalMargin", "hoverDelay", "layoutStyle", "flexDirection", "defaultIndicators", "constraintDate", "constraintType", "indicator", "encodedName", "startText", "indicators", "_indicators", "_indicatorAccessors", "_indicatorStatus", "enumerable", "createIndicatorDOMConfig", "timeAxisViewModel", "getPositionFromDate", "abs", "DomClassList", "rowOffsetHeight", "resourceMargin", "taskRecordId", "usedIndicators", "indicatorFn", "timeSpan", "timeAxis", "timeSpanInAxis", "lastDomConfig", "Labels", "SchedulerLabels", "onEventDataGenerated", "ParentArea", "highlighted", "Map", "highlightParent", "parentRecord", "descendants", "visibleDescendantCount", "domConfig", "onBeforeTaskSync", "configs", "row", "ProgressLine", "statusDate", "Date", "drawLineOnlyWhenStatusDateVisible", "lineCls", "containerCls", "scheduleDraw", "createOnFrame", "lineSegments", "attachToClient", "rendered", "draw", "_statusDate", "getSVGCanvas", "_svgCanvas", "svg", "createElementNS", "attachToProject", "attachToRowManager", "translaterow", "rerender", "changetotalheight", "horizontalscroll", "togglenode", "taskdrag", "taskdragabortfinalized", "aftertaskdrop", "timelineviewportresize", "onPaint", "onProjectRefresh", "onTranslateRow", "lastTop", "onTaskDrag", "taskRecords", "dragData", "updateLineForTask", "timeDiff", "shouldDrawProgressLine", "collapsed", "dateInAxis", "getStatusDateX", "getCoordinateFromDate", "getRenderData", "statusDateX", "viewBox", "timeAxisSubGridElement", "getBoundingClientRect", "viewXY", "scrollLeft", "el", "isAnimating", "transitionend", "lines", "getLineSegmentRenderData", "line", "drawLineSegment", "segmentBelongsToTask", "getAttribute", "ArrayHelper", "getRecordFromElement", "elements", "normal", "lineDefinitions", "point", "isStatusLineTask", "calculateCoordinateForTask", "x1", "y1", "x2", "y2", "ns", "class", "isTimeSpanInAxis", "isInProgress", "isStarted", "isCompleted", "translateBy", "isZeroDuration", "progressBarEl", "totalSize", "AbstractTimeRanges", "AttachToProjectMixin", "showHeaderElements", "startConfigure", "renderRanges", "shouldRenderRange", "timeRanges", "rollupCls", "rollupSelector", "Rollups", "attachToTaskStore", "getTipHtml", "rawElements", "elementsFromPoint", "pageX", "pageXOffset", "pageY", "pageYOffset", "rollupElements", "pieces", "getFormattedDate", "endDateValue", "getDisplayEndDate", "endText", "clockTemplate", "onStoreUpdateRecord", "rollup", "redraw", "wrapperChildren", "durationMS", "taskFeature", "positionData", "getSizeAndPosition", "rollupTaskId", "Summary", "TimelineSummary", "summaries", "isGanttBase", "updateTaskStore", "bindStore", "updateTimelineSummaries", "summaryContainer", "summaryBarElement", "tick", "tipHtml", "valueHtml", "label", "_tipHtml", "RowCopyPaste", "entityName", "copyRecordText", "cutRecordText", "pasteRecordText", "beforeRenderTask", "populateCellMenu", "usesDisplayStore", "paste", "copyRows", "referenceRecord", "pasteRows", "onRowCutOrCopy", "onBeforeRenderTask", "clearClipboard", "recordsToClear", "clipboardRecords", "extractParents", "idMap", "_isCut", "depsToCopy", "extractDependencies", "insertCopiedRecords", "toInsert", "recordReference", "depsMap", "deps", "predecessor", "TaskDrag", "DragBase", "validatorFn", "validatorFnThisObj", "pinSuccessors", "tooltipCls", "capitalizedEventName", "changePinSuccessors", "EventHelper", "toSpecialKey", "getDraggableElement", "drag", "resolveEventRecord", "eventElement", "isElementDraggable", "_client", "matches", "triggerBeforeEventDrag", "eventType", "triggerEventDrag", "draggedEntities", "changed", "triggerDragStart", "triggerDragAbort", "triggerDragAbortFinalized", "triggerAfterDrop", "currentOverClient", "getProductDragContext", "dd", "getMinimalDragData", "info", "getElementFromContext", "getTaskScheduleRegion", "dateConstraints", "getScheduleRegion", "getDateConstraints", "_this$client$getDateC", "_this$client", "setupProductDragData", "taskRegion", "relatedRecords", "getRelatedRecords", "eventBarEls", "scheduleRegion", "setupConstraints", "snapPixelAmount", "include", "getCoordinate", "coord", "checkDragValidity", "isValidDrop", "updateRecords", "browserEvent", "oldStartDate", "getRecordElement", "TaskDragCreate", "DragCreateBase", "preventMultiple", "setupDragContext", "_event$target$closest", "_event$target", "timeAxisColumn", "cellCls", "Draggable", "scrollManager", "rowRecord", "startDrag", "draggingEnd", "startEvent", "mousedownDate", "beginListeningForBatchedUpdates", "resolution", "weekStartDay", "ceil", "handleBeforeDragCreate", "onAborted", "itemElement", "_me$gantt$getDateCons", "_me$gantt", "checkValidity", "dragging", "createValidatorFn", "isRowEmpty", "cancelBatch", "endListeningForBatchedUpdates", "TaskEditor", "GanttTaskEditor", "TaskEdit", "SchedulerProTaskEdit", "triggerEvent", "saveAndCloseOnEnter", "editorClass", "editTask", "editEvent", "onActivateEditor", "taskElement", "onTaskEnterKey", "populateTaskMenu", "selection", "weight", "onEventEnterKey", "scrollTaskIntoView", "scrollEventIntoView", "TaskMenu", "EventMenu", "processItems", "cellMenu", "console", "warn", "getDataFromEvent", "targetElement", "getTargetElementFromEvent", "getCellDataFromEvent", "callChainablePopulateMenuMethod", "eventParams", "cellData", "shouldShowMenu", "getElementFromRecord", "isTreeGrouped", "multiSelected", "hidden", "isParent", "deleteTask", "cellMenuItems", "changeItems", "menu", "addTaskAbove", "addMilestoneBelow", "subtask", "at", "addSubtask", "addSuccessor", "addPredecessor", "separator", "featureClass", "casedEventName", "dblclick", "contextmenu", "TaskNonWorkingTime", "properties", "rowMap", "taskMap", "prio", "firstPaint", "mouseEventsDetacher", "on", "delegate", "updateMode", "onTimeAxisReconfigure", "effectiveCalendar", "mode", "calendarIntervals", "getCalendarIntervalsToRender", "barMode", "shouldPaint", "maxTimeAxisUnit", "compareUnits", "oneTickMs", "first", "ranges", "getNonWorkingTimeRanges", "createIntervalDOMConfig", "isNonWorking", "changeTooltip", "old", "Tooltip", "showOnHover", "hideDelay", "anchorToTarget", "trackMouse", "getHtml", "handleMouseEvent", "domEvent", "feature", "idPrefix", "TaskResize", "EventResize", "draggingItemCls", "resizingItemInnerCls", "onDragItemMouseMove", "isTaskElementDraggable", "isEventElementDraggable", "basicValidityCheck", "getBeforeResizeParams", "setupProductResizeContext", "_gantt$getDateConstra", "internalUpdateRecord", "timespanRecord", "toSet", "cancelEventRecordBatch", "setEndDate", "TaskSegmentDrag", "isEventSegment", "isSegmented", "triggerBeforeEventDropFinalize", "eventData", "onInternalInvalidDrop", "abort", "mainTaskElement", "initialMainTaskElementWidth", "buildDragHelperConfig", "mainTaskRegion", "translate", "parseFloat", "updateDragContext", "dirty", "nextSegment", "clientX", "startClientX", "minDate", "maxDate", "previousSegment", "TaskSegmentResize", "EventSegmentResize", "leftHandle", "isTaskSegmentElementDraggable", "decimalPrecision", "renderedPercentDone", "monitorRecordUpdate", "TreeGroup", "GridTreeGroup", "updateParents", "root", "_root$children", "WalkHelper", "postWalk", "_task$children", "minStartDate", "maxEndDate", "percentDone", "Number", "MAX_SAFE_INTEGER", "processTransformedData", "transformedData", "onTaskStoreChange", "suspendRefresh", "resumeRefresh", "applyLevels", "levels", "delayable", "GanttVersions", "SchedulerProVersions", "taskMenuItem", "isMultiple", "transactionDescription", "knownBaseTypes", "BASELINE_RATIO", "GanttExporterMixin", "prepareComponent", "fgCanvasEl", "removeEachSelector", "collectEvents", "rows", "addedRows", "normalRows", "exportMeta", "subGrids", "rowConfig", "eventsMap", "outerHTML", "offsetParent", "renderEvents", "renderBaselines", "hasActiveFeature", "offset", "topRowOffset", "offsetHeight", "currentOrientation", "getTaskRenderData", "taskDOMConfig", "DomSync", "sync", "extrasArray", "getEventBox", "eventsBoxes", "startX", "endX", "firstRowHTML", "firstRowTop", "lastRowTop", "firstRowIndex", "estimatedY", "MultiPageExporter", "SchedulerMultiPageExporter", "MultiPageVerticalExporter", "SchedulerMultiPageVerticalExporter", "SinglePageExporter", "SchedulerSinglePageExporter", "PdfExport", "SchedulerPdfExport", "exporters", "CalendarIntervalModel", "SchedulerProCalendarIntervalModel", "ProjectModel", "Model", "ProjectChangeHandlerMixin", "ProjectCurrentConfig", "ProjectCrudManager", "ProjectModelTimeZoneMixin", "ProjectModelCommon", "expanded", "dateConstraintIntervalClass", "DateConstraintInterval", "DependencyConstraintInterval", "taskModelClass", "dependencyModelClass", "resourceModelClass", "assignmentModelClass", "calendarModelClass", "taskStoreClass", "dependencyStoreClass", "resourceStoreClass", "assignmentStoreClass", "calendarManagerStoreClass", "tasksData", "eventsData", "dependenciesData", "resourcesData", "assignmentsData", "calendarsData", "timeRangeStore", "supportShortSyncResponseNote", "delayCalculation", "stmClass", "StateTrackingManager", "timeRangesData", "syncDataOnLoad", "ignoreRemoteChangesInSTM", "eventModelClass", "getDefaultConfiguration", "defaultEventModelClass", "eventStoreClass", "defaultEventStoreClass", "attachStore", "$$name", "detachStore", "relayStoreChange", "_timeRangeStore", "getStore", "toJSON", "json", "loadInlineData", "updateTasks", "updateCalendars", "updateTimeRangesData", "inlineData", "afterChange", "wasSet", "_children$0$refreshWb", "applyConfigs", "WebSocketProjectModel", "ProjectWebSocketHandlerMixin", "year", "getFullYear", "earlyMondayThisYear", "DH", "startOf", "rnd", "RandomGenerator", "getNum", "token", "ProjectGenerator", "generateAsync", "requestedTaskCount", "maxProjectSize", "progressCallback", "log", "blockCount", "projectSize", "generator", "generateBlocks", "taskCount", "dependencyCount", "time", "block", "projectDuration", "AsyncHelper", "animationFrame", "timeEnd", "currentId", "dependencyId", "blockDuration", "sumDuration", "currentDuration", "currentStartDate", "finishedDuration", "rndDuration", "addToTotal", "resetSum", "nextRandom", "nextStartDate", "storePercentDone", "blockStartId", "subParent1", "subParent2", "defineParser", "alt", "seq", "succeed", "red", "isSuccess", "Parser", "resourceNamePEG", "integerPEG", "decimalSeparatorPEG", "unitsNumberPEG", "integer", "sep", "fractional", "unitsPersentagePEG", "perc", "unitsDesignationPEG", "startSep", "endSep", "commaPEG", "raPEG", "parse", "str", "gotSuccess", "rest", "possibleResult", "structuredResult", "unstracturedRest", "part", "currentResource", "compose", "parseResult", "exactIfPossible", "ResourceAssignmentParser", "clearTime", "taskUnitMap", "minute", "hour", "day", "week", "month", "projectUnitMap", "constraintMap", "finishnoearlierthan", "finishnolaterthan", "mustfinishon", "muststarton", "startnoearlierthan", "startnolaterthan", "typeMap", "FixedDuration", "Normal", "dependencyTypeMap", "MspExport", "resourceCalendar", "generateExportData", "collectProjectTasks", "getMsProjectConfig", "Calendars", "getCalendarsData", "Tasks", "Task", "getTasksData", "Resources", "Resource", "getResourcesData", "Assignments", "Assignment", "getAssignmentsData", "export", "filename", "fileContent", "convertToXml", "BrowserHelper", "download", "encodeURIComponent", "XMLHelper", "convertFromObject", "rootName", "elementName", "xmlns", "rootElementForArray", "dateFormat", "fileName", "CalendarUID", "getCalendarUID", "CreationDate", "SplitsInProgressTasks", "MoveCompletedEndsBack", "MoveRemainingStartsBack", "MoveRemainingStartsForward", "MoveCompletedEndsForward", "NewTaskStartDate", "DaysPerMonth", "daysPerMonth", "FinishDate", "MinutesPerDay", "hoursPerDay", "MinutesPerWeek", "daysPerWeek", "ScheduleFromStart", "StartDate", "Title", "WorkFormat", "ProjectExternallyEdited", "getByInternalId", "internalId", "isResourceCalendar", "uid", "calendarName", "baseCalendarUID", "isBaseCalendar", "ID", "UID", "BaseCalendarUID", "IsBaseCalendar", "WeekDays", "WeekDay", "formatWeekDays", "timeFormat", "ticks", "daysData", "getDay", "DayType", "DayWorking", "dummyCalendar", "calendarsCombination", "combineCalendars", "forEachAvailabilityInterval", "calendarCacheInterval", "calendarsStatus", "getCalendarsWorkStatus", "dayData", "WorkingTimes", "WorkingTime", "FromTime", "ToTime", "traverse", "durationMs", "convertDuration", "effortMs", "actualDurationMs", "startDateStr", "endDateStr", "durationStr", "convertDurationToMspDuration", "getTaskUID", "Active", "schedulingMode", "IsNull", "OutlineNumber", "OutlineLevel", "ManualStart", "ManualFinish", "ManualDuration", "DurationFormat", "Work", "EffortDriven", "Estimated", "PercentComplete", "ActualStart", "ActualDuration", "RemainingDuration", "PredecessorLink", "LagFormat", "LinkLag", "PredecessorUID", "IgnoreResourceCalendar", "ignoreResourceCalendar", "ConstraintType", "ConstraintDate", "note", "Notes", "fallbackValue", "MaxUnits", "PeakUnits", "msProjectVersion", "taskUID", "finish", "assignmentWorkMs", "actualAssignmentWorkMs", "actualEffort", "remainingAssignmentWorkMs", "UpdateNeeded", "TaskUID", "ResourceUID", "PercentWorkComplete", "ActualWork", "RemainingWork", "actualEffortMs", "effortStr", "_internalIdCounter", "delta", "getDelta", "ignoreLocale", "maxUnit", "second", "_MspExport", "hyphenRe", "GanttDom", "Target", "Base", "eventSelector", "resolveRowRecord", "elementOrEvent", "onElementKeyDown", "onElementKeyUp", "inner", "getElementFromEventRecord", "getEventRenderId", "getEventData", "DomDataStore", "cellSelector", "widgetClass", "GanttRegions", "local", "getRowById", "getElement", "barMargin", "moveTo", "scrollWidth", "taStart", "taEnd", "_me$getDateConstraint", "translateToPageCoordinate", "isRowVisible", "includeOutside", "defaultScrollOptions", "edgeOffset", "GanttScroll", "taskStart", "taskEnd", "scrollRowIntoView", "taskIsOutside", "extendTimeAxis", "currentTimeSpanRange", "startAnchorPoint", "endAnchorPoint", "setTimeSpan", "valueOf", "scrollBy", "scrollUnrenderedTaskIntoView", "taskRec", "scroller", "scrollerViewport", "viewport", "targetRect", "detacher", "renderTask", "then", "GanttState", "updateProject", "delayCalculationStart", "delayCalculationEnd", "suspendStateListener", "stateListenerSuspended", "resumeStateListener", "isSaveStatePending", "saveState", "immediate", "applyState", "_state$store", "_state$store2", "isInitialCommitPerformed", "storeState", "specialKeys", "subState", "_applyStateAfterPaint", "keys", "commitFinalized", "GanttStores", "ProjectConsumer", "projectStores", "dataName", "projectModelClass", "oldProject", "bindCrudManager", "replica", "internalOnProjectRefresh", "isInitialCommit", "isCalculated", "visibleDate", "isPainted", "appliedViewStartDate", "initialConfig", "requestedVisibleDate", "changeTasks", "buildingProjectConfig", "changeTaskStore", "initializingProject", "setEventStore", "updateEventStore", "metaMapId", "batchedUpdate", "onEventStoreBatchedUpdate", "listenToBatchedUpdates", "wasEnabled", "enableEventAnimations", "GanttTimelineDateMapper", "animate100", "animate", "TaskNavigation", "inlineFlow", "prevKey", "nextKey", "Enter", "isNavigationKey", "ArrowDown", "ArrowUp", "ArrowLeft", "ArrowRight", "normalizeTarget", "onElementMouseDown", "_focusedCell", "taskEl", "itemSelector", "isFocused", "lastNavigationEvent", "_me$onCellNavigate", "onCellNavigate", "selectEvent", "preserveSelection", "isSelected", "deselectEvent", "getNext", "rowIdx", "nextTask", "isInTimeAxis", "getPrevious", "prevTask", "activeEvent", "activeItem", "navigateTo", "targetEvent", "uiEvent", "skipScrollIntoView", "clearEventSelection", "deselectAll", "onDeleteKey", "enableDeleteKey", "removeEvents", "onGridBodyFocusIn", "focusEvent", "navigationEvent", "eventFocus", "destinationCell", "normalizeCellContext", "rowIndex", "_me$onCellNavigate2", "releaseEventActions", "releaseElement", "reuseElement", "renderEventActions", "newElement", "reuseOwnElement", "NewTaskRendering", "renderDone", "removeRows", "renderRow", "refreshRows", "onTimeAxisViewModelUpdate", "updateFromHorizontalScroll", "onViewportResize", "onDragAbort", "onBeforeRowHeightChange", "fontSize", "_visibleDateRange", "isBatchUpdating", "innerElement", "calculateTop", "bounds", "layout", "_gantt$features$depen", "viewStart", "viewEnd", "horizontalAdjustment", "startCoordinate", "endCoordinate", "pxPerSecond", "getSingleUnitInPixels", "secondsOutOfView", "pxOutOfView", "fillTicks", "snap", "tickIdx", "getTickFromDate", "getRowRegion", "rowElement", "scrollTop", "getDateFromXY", "xy", "roundingMethod", "translateToScheduleCoordinate", "getDateFromPosition", "_wrapper", "syncIdMap", "wrapper", "hasLinks", "forEachLinked", "linked", "getConnectorStartSide", "getConnectorEndSide", "onRenderRow", "assignCls", "onRemoveRows", "refreshSuspended", "onRenderDone", "scrollX", "returnEnd", "maxX", "getDateFromCoord", "ignoreRTL", "_viewPresetChanging", "viewportCoords", "timeView", "onVisibleDateRangeChange", "internalPopulateTaskRenderData", "taskContent", "taskBarFeature", "_renderData$iconCls", "startsOutsideView", "endsOutsideView", "taskIconCls", "eventCls", "isExpanded", "isLinked", "isResourceTimeRange", "generatedIdCls", "hasGeneratedId", "dirtyCls", "modifications", "committingCls", "isCommitting", "endsOutsideViewCls", "startsOutsideViewCls", "fixedEventCls", "eventStyle", "taskRenderer", "taskRendererThisObj", "childContent", "isHtml", "isNamedColor", "populateTaskRenderData", "tabIndex", "internalStyle", "zIndex", "releaseThreshold", "onlyChildren", "callback", "_lastDomConfig$elemen", "_domConfig$elementDat", "isRelease", "isRender", "reusingElement", "refreshCell", "emptyObject", "newTaskCount", "GanttBase", "TimelineBase", "CrudManagerView", "EventNavigation", "ProjectProgressMixin", "SchedulingIssueResolution", "CurrentConfig", "timeCellSelector", "toggleParentTasksOnClick", "scrollTaskIntoViewOnCellClick", "eventBarTextField", "eventLayout", "eventSelectionDisable", "scheduledEventName", "eventScrollMode", "overScheduledEventClass", "timeCellCls", "focusCls", "newTaskDefaults", "hasInlineStores", "hasInlineData", "taskclick", "cellClick", "toggleNode", "changeColumns", "currentStore", "cols", "_thisIsAUsedExpression", "getColumnClass", "onPaintOverride", "topRow", "reinitialize", "params", "isBatchingChanges", "runWithTransition", "onStoreDataChange", "onTaskBarClick", "onNonTimeAxisCellClick", "onToggleParentNode", "afterSelectionChange", "deselectedRecords", "setTaskSelection", "toggleEmptyText", "toggleClasses", "rowCount", "isLoadingOrSyncing", "_currentOrientation", "getTimeSpanMouseEventParams", "getScheduleMouseEventParams", "repaintEventsForResource", "visibleResources", "_this$firstVisibleRow", "_this$lastVisibleRow", "addTask", "referenceTask", "asPredecessor", "asSuccessor", "newRecord", "suspendChangesTracking", "asChild", "above", "resumeChangesTracking", "Event", "Toast", "rootElement", "onElementMouseOver", "onElementMouseOut", "keyMap", "setVersion", "HOSTS", "EXPIRING_CLASSES", "isTestEnv", "host", "location", "href", "initialized", "initExpiryHelper", "baseClass", "ExpiryHelper", "__foo", "product", "productName", "getVersion", "callHomeDelay", "blockUrl", "queryString", "Product", "verifyUrl", "blocked", "lastVersionCheck", "trialKey", "versionCheckKey", "cacheTrialStartTime", "isExpired", "readyState", "onTrialExpired", "addEventListener", "setTimeout", "updateBlockedStatus", "timeString", "getLocalStorageItem", "isNaN", "trialStartTime", "setLocalStorageItem", "_window$bryntum", "_window$bryntum$this$", "ONE_DAY", "window", "bryntum", "expired", "saveVersionCheckKey", "url", "logUrl", "license", "img", "Image", "onload", "naturalWidth", "blockTrial", "onerror", "src", "rootEl", "expirationShown", "floatRoot", "timeout", "forEachSelector", "Widget", "fromElement", "maskExpiredWidget", "removeLocalStorageItem", "mask", "cover", "setWaterMark", "darkColor", "lightColor", "_DomHelper$themeInfo", "_DomHelper$themeInfo$", "thumb", "themeInfo", "endsWith", "svgString", "backgroundImage", "btoa", "Override", "setWatermarks", "targets", "GlobalEvents", "websiteUrls", "products", "frameworks", "splice", "prod", "framework", "newScript", "dataLayer", "gtag", "head"]
}
