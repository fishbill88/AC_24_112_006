{
  "version": 3,
  "sources": ["../../lib/SchedulerPro/column/ResourceCalendarColumn.js", "../../lib/SchedulerPro/column/ScaleColumn.js", "../../lib/SchedulerPro/model/EventModel.js", "../../lib/SchedulerPro/data/EventStore.js", "../../lib/SchedulerPro/eventlayout/ProHorizontalLayout.js", "../../lib/SchedulerPro/eventlayout/ProHorizontalLayoutStack.js", "../../lib/SchedulerPro/eventlayout/ProHorizontalLayoutPack.js", "../../lib/SchedulerPro/feature/CalendarHighlight.js", "../../lib/SchedulerPro/feature/DependencyEdit.js", "../../lib/SchedulerPro/feature/EventBuffer.js", "../../lib/SchedulerPro/feature/EventSegmentDrag.js", "../../lib/SchedulerPro/feature/NestedEvents.js", "../../lib/SchedulerPro/feature/ResourceNonWorkingTime.js", "../../lib/SchedulerPro/feature/TimeSpanHighlight.js", "../../lib/SchedulerPro/model/changelog/ChangeLogPropertyUpdate.js", "../../lib/SchedulerPro/model/ProjectModel.js", "../../lib/SchedulerPro/view/mixin/SchedulerProEventRendering.js", "../../lib/SchedulerPro/view/orientation/ProHorizontalRendering.js", "../../lib/SchedulerPro/view/orientation/ProVerticalRendering.js", "../../lib/SchedulerPro/view/SchedulerProBase.js", "../../lib/SchedulerPro/view/ResourceHistogram.js", "../../lib/SchedulerPro/model/ResourceUtilizationModel.js", "../../lib/SchedulerPro/data/ResourceUtilizationStore.js", "../../lib/SchedulerPro/view/ResourceUtilization.js", "../../lib/SchedulerPro/view/SchedulerPro.js", "../../lib/SchedulerPro/widget/Timeline.js", "../../lib/SchedulerPro/widget/VersionGrid.js"],
  "sourcesContent": ["import Column from '../../Grid/column/Column.js';\nimport ColumnStore from '../../Grid/data/ColumnStore.js';\nimport AttachToProjectMixin from '../../Scheduler/data/mixin/AttachToProjectMixin.js';\nimport CalendarField from '../widget/CalendarField.js';\n\n/**\n * @module SchedulerPro/column/ResourceCalendarColumn\n */\n\n/**\n * A column that displays (and allows user to update) the current {@link SchedulerPro.model.CalendarModel calendar} of\n * the resource.\n *\n * Default editor is a {@link SchedulerPro.widget.CalendarField CalendarField}.\n *\n * {@inlineexample SchedulerPro/column/ResourceCalendarColumn.js}\n * @mixes Scheduler/data/mixin/AttachToProjectMixin\n * @extends Grid/column/Column\n * @classType resourceCalendar\n * @column\n */\nexport default class ResourceCalendarColumn extends Column.mixin(AttachToProjectMixin) {\n\n    //region Config\n\n    static get $name() {\n        return 'ResourceCalendarColumn';\n    }\n\n    static get type() {\n        return 'resourceCalendar';\n    }\n\n    static get defaults() {\n        return {\n            field  : 'calendar',\n            text   : 'Calendar',\n            editor : {\n                type         : CalendarField.type,\n                clearable    : true,\n                allowInvalid : false\n            }\n        };\n    }\n\n    //endregion\n\n    //region Init\n\n    attachToProject(project) {\n        if (project) {\n            // Store default calendar to filter out this value\n            this.defaultCalendar = project.defaultCalendar;\n\n            this.editor.store = project.calendarManagerStore;\n        }\n    }\n\n    attachToResourceStore(resourceStore) {\n        super.attachToResourceStore(resourceStore);\n\n        if (resourceStore) {\n            resourceStore.ion({\n                name    : 'resourceStore',\n                update  : 'onResourceUpdate',\n                thisObj : this\n            });\n        }\n    }\n\n    //endregion\n\n    //region Events\n\n    // Event rendering does not update cells when engine updates a resource, instead we do a minimal update here\n    onResourceUpdate({ record, changes }) {\n        const change = changes[this.field];\n\n        if (change) {\n            // Ignore \"normalization\" of id -> instance, won't affect our appearance\n            if (typeof change.oldValue === 'string' && change.value?.id === change.oldValue) {\n                return;\n            }\n            this.refreshCell(record);\n        }\n    }\n\n    //endregion\n\n    //region Render\n\n    renderer({ value }) {\n        if (value === this.defaultCalendar) {\n            return '';\n        }\n        else if (value && value.id) {\n            const record = this.editor.store.getById(value.id);\n            return record && record[this.editor.displayField] || '';\n        }\n        else {\n            return '';\n        }\n    }\n\n    //endregion\n\n}\n\nColumnStore.registerColumnType(ResourceCalendarColumn);\n", "import Column from '../../Grid/column/Column.js';\nimport ColumnStore from '../../Grid/data/ColumnStore.js';\nimport Scale from '../../Core/widget/graph/Scale.js';\n\n/**\n * @module SchedulerPro/column/ScaleColumn\n */\n\n/**\n * An object representing a point on the scale displayed by {@link SchedulerPro.column.ScaleColumn}.\n *\n * @typedef {Object} ScalePoint\n * @property {Number} value Point value\n * @property {String} unit Point value unit\n * @property {String} text Point text label\n */\n\n/**\n * A specialised column showing a graduated scale from a defined array of values\n * and labels. This column is used in the {@link SchedulerPro.view.ResourceHistogram} and is not editable. Normally\n * you should not need to interact with this class directly.\n *\n * @extends Grid/column/Column\n * @classType scale\n * @column\n */\nexport default class ScaleColumn extends Column {\n\n    //region Config\n\n    static get $name() {\n        return 'ScaleColumn';\n    }\n\n    static get type() {\n        return 'scale';\n    }\n\n    static get isScaleColumn() {\n        return true;\n    }\n\n    static get fields() {\n        return [\n            'scalePoints'\n        ];\n    }\n\n    static get defaults() {\n        return {\n            text            : '\\xa0',\n            width           : 40,\n            minWidth        : 40,\n            cellCls         : 'b-scale-cell',\n            editor          : false,\n            sortable        : false,\n            groupable       : false,\n            filterable      : false,\n            alwaysClearCell : false,\n            scalePoints     : [\n                {\n                    value : 4\n                },\n                {\n                    value : 8,\n                    text  : 8\n                }\n            ]\n        };\n    }\n\n    //endregion\n\n    //region Constructor/Destructor\n\n    onDestroy() {\n        this.scaleWidget.destroy();\n    }\n\n    //endregion\n\n    //region Internal\n\n    set width(width) {\n        super.width = width;\n        this.scaleWidget.width = width;\n    }\n\n    get width() {\n        return super.width;\n    }\n\n    applyValue(useProp, key, value) {\n        // pass value to scaleWidget\n        if (key === 'scalePoints') {\n            this.scaleWidget[key] = value;\n        }\n\n        return super.applyValue(...arguments);\n    }\n\n    buildScaleWidget() {\n        const me = this;\n\n        const scaleWidget = new Scale({\n            owner         : me.grid,\n            appendTo      : me.grid.floatRoot,\n            cls           : 'b-hide-offscreen',\n            align         : 'right',\n            scalePoints   : me.scalePoints,\n            monitorResize : false\n        });\n\n        Object.defineProperties(scaleWidget, {\n            width : {\n                get() {\n                    return me.width;\n                },\n                set(width) {\n                    this.element.style.width = `${width}px`;\n                    this._width = me.width;\n                }\n            },\n            height : {\n                get() {\n                    return this._height;\n                },\n                set(height) {\n                    this.element.style.height = `${height}px`;\n                    this._height = height;\n                }\n            }\n        });\n\n        scaleWidget.width = me.width;\n\n        return scaleWidget;\n    }\n\n    get scaleWidget() {\n        const me = this;\n\n        if (!me._scaleWidget) {\n            me._scaleWidget = me.buildScaleWidget();\n        }\n\n        return me._scaleWidget;\n    }\n\n    //endregion\n\n    //region Render\n\n    renderer({ cellElement, scaleWidget = this.scaleWidget }) {\n        scaleWidget.height = this.grid.rowHeight;\n        scaleWidget.refresh();\n\n        // Clone the scale widget element since every row is supposed to have\n        // the same scale settings\n        const scaleCloneElement = scaleWidget.element.cloneNode(true);\n        scaleCloneElement.removeAttribute('id');\n        scaleCloneElement.classList.remove('b-hide-offscreen');\n\n        cellElement.innerHTML = '';\n        cellElement.appendChild(scaleCloneElement);\n    }\n\n    //endregion\n\n}\n\nColumnStore.registerColumnType(ScaleColumn);\n", "import PartOfProject from '../data/mixin/PartOfProject.js';\nimport PercentDoneMixin from './mixin/PercentDoneMixin.js';\nimport { SchedulerProEvent } from '../../Engine/quark/model/scheduler_pro/SchedulerProEvent.js';\nimport Duration from '../../Core/data/Duration.js';\nimport DateHelper from '../../Core/helper/DateHelper.js';\nimport EventModelMixin from '../../Scheduler/model/mixin/EventModelMixin.js';\nimport TimeSpan from '../../Scheduler/model/TimeSpan.js';\nimport RecurringTimeSpan from '../../Scheduler/model/mixin/RecurringTimeSpan.js';\nimport EventSegmentModel from './EventSegmentModel.js';\n\n/**\n * @module SchedulerPro/model/EventModel\n */\n\n/**\n * This class represent a single event in your schedule, usually added to a {@link SchedulerPro.data.EventStore}.\n *\n * It is a subclass of the {@link Scheduler.model.TimeSpan}, which is in turn subclass of {@link Core.data.Model}.\n * Please refer to documentation of that class to become familiar with the base interface of the event.\n *\n * ## Async date calculations\n *\n * A record created from an `EventModel` is normally part of an `EventStore`, which in turn is part of a project. When\n * dates or the duration of an event is changed, the project performs async calculations to normalize the other fields.\n * For example if `duration` is change, it will calculate `endDate`.\n *\n * As a result of this being an async operation, the values of other fields are not guaranteed to be up to date\n * immediately after a change. To ensure data is up to date, await the calculations to finish.\n *\n * For example, `endDate` is not up to date after this operation:\n *\n * ```javascript\n * eventRecord.duration = 5;\n * // endDate not yet calculated\n * ```\n *\n * But if calculations are awaited it is up to date:\n *\n * ```javascript\n * eventRecord.duration = 5;\n * await eventRecord.project.commitAsync();\n * // endDate is calculated\n * ```\n *\n * As an alternative, you can also use `setAsync()` to trigger calculations directly after the change:\n *\n * ```javascript\n * await eventRecord.setAsync({ duration : 5});\n * // endDate is calculated\n * ```\n *\n * ## Subclassing the Event model class\n * The Event model has a few predefined fields as seen below. If you want to add new fields or change the options for\n * the existing fields, you can do that by subclassing this class (see example below).\n *\n * ```javascript\n * class MyEvent extends EventModel {\n *\n *     static get fields() {\n *         return [\n *            // Add new field\n *            { name: 'myField', type : 'number', defaultValue : 0 }\n *         ];\n *     },\n *\n *     myCheckMethod() {\n *         return this.myField > 0\n *     },\n *\n *     ...\n * });\n * ```\n *\n * If you in your data want to use other names for the startDate, endDate, resourceId and name fields you can configure\n * them as seen below:\n * ```javascript\n * class MyEvent extends EventModel {\n *\n *     static get fields() {\n *         return [\n *            { name: 'startDate', dataSource 'taskStart' },\n *            { name: 'endDate', dataSource 'taskEnd', format: 'YYYY-MM-DD' },\n *            { name: 'resourceId', dataSource 'userId' },\n *            { name: 'name', dataSource 'taskTitle' },\n *         ];\n *     },\n *     ...\n * });\n * ```\n *\n * Please refer to {@link Core.data.Model} for additional details.\n *\n * @extends Scheduler/model/TimeSpan\n * @mixes Scheduler/model/mixin/RecurringTimeSpan\n * @mixes Scheduler/model/mixin/EventModelMixin\n * @mixes SchedulerPro/model/mixin/PercentDoneMixin\n * @mixes SchedulerPro/data/mixin/PartOfProject\n *\n * @typings Scheduler/model/EventModel -> Scheduler/model/SchedulerEventModel\n */\nexport default class EventModel extends SchedulerProEvent.derive(TimeSpan).mixin(\n    RecurringTimeSpan,\n    PartOfProject,\n    EventModelMixin,\n    PercentDoneMixin\n) {\n\n    /**\n     * Returns the event store this event is part of.\n     *\n     * @member {SchedulerPro.data.EventStore} eventStore\n     * @readonly\n     * @typings Scheduler/model/TimeSpan:eventStore -> {Scheduler.data.EventStore||SchedulerPro.data.EventStore}\n     */\n\n    /**\n     * If given resource is assigned to this event, returns a {@link SchedulerPro.model.AssignmentModel} record.\n     * Otherwise returns `null`\n     *\n     * @method getAssignmentFor\n     * @param {SchedulerPro.model.ResourceModel} resource The instance of {@link SchedulerPro.model.ResourceModel}\n     *\n     * @returns {SchedulerPro.model.AssignmentModel|null}\n     */\n\n    /**\n     * This method assigns a resource to this event.\n     *\n     * Will cause the schedule to be updated - returns a `Promise`\n     *\n     * @method assign\n     * @param {SchedulerPro.model.ResourceModel} resource The instance of {@link SchedulerPro.model.ResourceModel}\n     * @param {Number} [units=100] The `units` field of the new assignment\n     *\n     * @async\n     * @propagating\n     */\n\n    /**\n     * This method unassigns a resource from this event.\n     *\n     * Will cause the schedule to be updated - returns a `Promise`\n     *\n     * @method unassign\n     * @param {SchedulerPro.model.ResourceModel} resource The instance of {@link SchedulerPro.model.ResourceModel}\n     *\n     * @async\n     * @propagating\n     */\n\n    /**\n     * Sets the calendar of the event. Will cause the schedule to be updated - returns a `Promise`\n     *\n     * @method setCalendar\n     * @param {SchedulerPro.model.CalendarModel} calendar The new calendar. Provide `null` to fall back to the project calendar.\n     * @async\n     * @propagating\n     */\n\n    /**\n     * Returns the event calendar.\n     *\n     * @method getCalendar\n     * @returns {SchedulerPro.model.CalendarModel} The event calendar.\n     */\n\n    /**\n     * Either activates or deactivates the task depending on the passed value.\n     * Will cause the schedule to be updated - returns a `Promise`\n     *\n     * @method setInactive\n     * @param {boolean} inactive `true` to deactivate the task, `false` to activate it.\n     * @async\n     * @propagating\n     */\n\n    /**\n     * Sets the start date of the event. Will cause the schedule to be updated - returns a `Promise`\n     *\n     * Note, that the actually set start date may be adjusted, according to the calendar, by skipping the non-working time forward.\n     *\n     * @method setStartDate\n     * @param {Date} date The new start date.\n     * @param {Boolean} [keepDuration=true] Whether to keep the duration (and update the end date), while changing the start date, or vice-versa.\n     * @async\n     * @propagating\n     */\n\n    /**\n     * Sets the end date of the event. Will cause the schedule to be updated - returns a `Promise`\n     *\n     * Note, that the actually set end date may be adjusted, according to the calendar, by skipping the non-working time backward.\n     *\n     * @method setEndDate\n     * @param {Date} date The new end date.\n     * @param {Boolean} [keepDuration=false] Whether to keep the duration (and update the start date), while changing the end date, or vice-versa.\n     * @async\n     * @propagating\n     */\n\n    /**\n     * Updates the duration (and optionally unit) of the event. Will cause the schedule to be updated - returns a `Promise`\n     *\n     * @method setDuration\n     * @param {Number} duration New duration value\n     * @param {String} [unit] New duration unit\n     * @async\n     * @propagating\n     */\n\n    /**\n     * Sets the constraint type and (optionally) constraining date to the event.\n     *\n     * @method setConstraint\n     * @param {'finishnoearlierthan'|'finishnolaterthan'|'mustfinishon'|'muststarton'|'startnoearlierthan'|'startnolaterthan'|null} constraintType\n     * Constraint type, please refer to the {@link #field-constraintType} for the valid\n     * values.\n     * @param {Date} [constraintDate] Constraint date.\n     * @async\n     * @propagating\n     */\n\n    /**\n     * Updates the {@link #field-effort} (and optionally {@link #field-effortUnit unit}) of the event.\n     * Will cause the schedule to be updated - returns a `Promise`\n     *\n     * @method setEffort\n     * @param {Number} effort New effort value\n     * @param {'millisecond'|'second'|'minute'|'hour'|'day'|'week'|'month'|'quarter'|'year'} [unit] New effort\n     * unit\n     * @async\n     * @propagating\n     */\n\n    /**\n     * Sets {@link #field-segments} field value.\n     *\n     * @method\n     * @name setSegments\n     * @param {SchedulerPro.model.EventSegmentModel[]} segments Array of segments or null to make the event not segmented.\n     * @returns {Promise}\n     * @propagating\n     */\n\n    /**\n     * Splits the event into segments.\n     * @method splitToSegments\n     * @param {Date} from The date to split this event at.\n     * @param {Number} [lag=1] Split duration.\n     * @param {String} [lagUnit] Split duration unit.\n     * @returns {Promise}\n     * @propagating\n     */\n\n    /**\n     * Merges the event segments.\n     * The method merges two provided event segments (and all the segment between them if any).\n     * @method mergeSegments\n     * @param {SchedulerPro.model.EventSegmentModel} [segment1] First segment to merge.\n     * @param {SchedulerPro.model.EventSegmentModel} [segment2] Second segment to merge.\n     * @returns {Promise}\n     * @propagating\n     */\n\n    /**\n     * Sets the event {@link #field-ignoreResourceCalendar} field value and triggers rescheduling.\n     *\n     * @method setIgnoreResourceCalendar\n     * @param {Boolean} ignore Provide `true` to ignore the calendars of the assigned resources\n     * when scheduling the event. If `false` the event performs only when\n     * its own {@link #field-calendar} and some of the assigned\n     * resource calendars allow that.\n     * @async\n     * @propagating\n     */\n\n    /**\n     * Returns the event {@link #field-ignoreResourceCalendar} field value.\n     *\n     * @method getIgnoreResourceCalendar\n     * @returns {Boolean} The event {@link #field-ignoreResourceCalendar} field value.\n     */\n\n    /**\n     * The event first segment or null if the event is not segmented.\n     * @member {SchedulerPro.model.EventSegmentModel} firstSegment\n     */\n\n    /**\n     * The event last segment or null if the event is not segmented.\n     * @member {SchedulerPro.model.EventSegmentModel} lastSegment\n     */\n\n    //region Config\n\n    static get $name() {\n        return 'EventModel';\n    }\n\n    static isProEventModel = true;\n\n    static get fields() {\n        return [\n            /**\n             * This field is automatically set to `true` when the event is \"unscheduled\" - user has provided an empty\n             * string in one of the UI editors for start date, end date or duration. Such event is not rendered,\n             * and does not affect the schedule of its successors.\n             *\n             * To schedule the event back, enter one of the missing values, so that there's enough information\n             * to calculate start date, end date and duration.\n             *\n             * Note, that setting this field manually does nothing. This field should be persisted, but not updated\n             * manually.\n             *\n             * @field {Boolean} unscheduled\n              * @readonly\n              * @category Scheduling\n             */\n\n            /**\n             * Segments of the event that appear when the event gets {@link #function-splitToSegments}.\n             * @field {SchedulerPro.model.EventSegmentModel[]} segments\n             * @category Scheduling\n             */\n\n            /**\n             * The current status of a task, expressed as the percentage completed (integer from 0 to 100)\n             *\n             * UI fields representing this data field are disabled for summary events.\n             * See {@link #function-isEditable} for details.\n             *\n             * @field {Number} percentDone\n             * @category Scheduling\n             */\n\n            /**\n             * The start date of a time span (or Event / Task).\n             *\n             * Uses {@link Core/helper/DateHelper#property-defaultFormat-static DateHelper.defaultFormat} to convert a\n             * supplied string to a Date. To specify another format, either change that setting or subclass TimeSpan and\n             * change the dateFormat for this field.\n             *\n             * UI fields representing this data field are disabled for summary events\n             * except the {@link #field-manuallyScheduled manually scheduled} events.\n             * See {@link #function-isEditable} for details.\n             *\n             * Note that the field always returns a `Date`.\n             *\n             * @field {Date} startDate\n             * @accepts {String|Date}\n             * @category Scheduling\n             */\n\n            /**\n             * The end date of a time span (or Event / Task).\n             *\n             * Uses {@link Core/helper/DateHelper#property-defaultFormat-static DateHelper.defaultFormat} to convert a\n             * supplied string to a Date. To specify another format, either change that setting or subclass TimeSpan and\n             * change the dateFormat for this field.\n             *\n             * UI fields representing this data field are disabled for summary events\n             * except the {@link #field-manuallyScheduled manually scheduled} events.\n             * See {@link #function-isEditable} for details.\n             *\n             * Note that the field always returns a `Date`.\n             *\n             * @field {Date} endDate\n             * @accepts {String|Date}\n             * @category Scheduling\n             */\n\n            /**\n             * The numeric part of the timespan's duration (the number of units).\n             *\n             * UI fields representing this data field are disabled for summary events\n             * except the {@link #field-manuallyScheduled manually scheduled} events.\n             * See {@link #function-isEditable} for details.\n             *\n             * @field {Number} duration\n             * @category Scheduling\n             */\n\n            /**\n             * Field storing the event constraint alias or NULL if not constraint set.\n             * Valid values are:\n             * - \"finishnoearlierthan\"\n             * - \"finishnolaterthan\"\n             * - \"mustfinishon\"\n             * - \"muststarton\"\n             * - \"startnoearlierthan\"\n             * - \"startnolaterthan\"\n             *\n             * @field {'finishnoearlierthan'|'finishnolaterthan'|'mustfinishon'|'muststarton'|'startnoearlierthan'|'startnolaterthan'|null} constraintType\n             * @category Scheduling\n             */\n\n            /**\n             * Field defining the constraint boundary date, if applicable.\n             * @field {Date} constraintDate\n             * @category Scheduling\n             */\n\n            /**\n             * When set to `true`, the `startDate` of the event will not be changed by any of its incoming dependencies\n             * or constraints.\n             *\n             * @field {Boolean} manuallyScheduled\n             * @category Scheduling\n             */\n\n            /**\n             * When set to `true` the event becomes inactive and stops taking part in the project scheduling (doesn't\n             * affect linked events and affect its assigned resources allocation).\n             *\n             * @field {Boolean} inactive\n             * @category Scheduling\n             */\n\n            /**\n             * When set to `true` the calendars of the assigned resources\n             * are not taken into account when scheduling the event.\n             *\n             * By default the field value is `false` resulting in that the event performs only when\n             * its own {@link #field-calendar} and some of the assigned\n             * resource calendars allow that.\n\n             * @field {Boolean} ignoreResourceCalendar\n             * @category Scheduling\n             */\n\n            /**\n             * A calculated field storing the _early start date_ of the event.\n             * The _early start date_ is the earliest possible date the event can start.\n             * This value is calculated based on the earliest dates of the event predecessors and the event own constraints.\n             * If the event has no predecessors nor other constraints, its early start date matches the project start date.\n             *\n             * UI fields representing this data field are naturally disabled since the field is readonly.\n             * See {@link #function-isEditable} for details.\n             *\n             * @field {Date} earlyStartDate\n             * @calculated\n             * @readonly\n             * @category Scheduling\n             */\n\n            /**\n             * A calculated field storing the _early end date_ of the event.\n             * The _early end date_ is the earliest possible date the event can finish.\n             * This value is calculated based on the earliest dates of the event predecessors and the event own constraints.\n             * If the event has no predecessors nor other constraints, its early end date matches the project start date plus the event duration.\n             *\n             * UI fields representing this data field are naturally disabled since the field is readonly.\n             * See {@link #function-isEditable} for details.\n             *\n             * @field {Date} earlyEndDate\n             * @calculated\n             * @readonly\n             * @category Scheduling\n             */\n\n            /**\n             * The calendar, assigned to the entity. Allows you to set the time when entity can perform the work.\n             *\n             * All entities are by default assigned to the project calendar, provided as the {@link SchedulerPro.model.ProjectModel#field-calendar} option.\n             *\n             * @field {SchedulerPro.model.CalendarModel} calendar\n             * @category Scheduling\n             */\n\n            /**\n             * The numeric part of the event effort (the number of units).\n             *\n             * @field {Number} effort\n             * @category Scheduling\n             */\n\n            /**\n             * The unit part of the event effort, defaults to \"h\" (hours). Valid values are:\n             *\n             * - \"millisecond\" - Milliseconds\n             * - \"second\" - Seconds\n             * - \"minute\" - Minutes\n             * - \"hour\" - Hours\n             * - \"day\" - Days\n             * - \"week\" - Weeks\n             * - \"month\" - Months\n             * - \"quarter\" - Quarters\n             * - \"year\"- Years\n             *\n             * This field is readonly after creation, to change it use the {@link #function-setEffort} call.\n             * @field {'millisecond'|'second'|'minute'|'hour'|'day'|'week'|'month'|'quarter'|'year'} effortUnit\n             * @default \"hour\"\n             * @category Scheduling\n             * @readonly\n             */\n\n            /**\n             * This field defines the event scheduling mode. Based on this field some fields of the event\n             * will be \"fixed\" (should be provided by the user) and some - computed.\n             *\n             * Possible values are:\n             *\n             * - `Normal` is the default (and backward compatible) mode. It means the event will be scheduled based on\n             * information about its start/end dates, event own calendar (project calendar if there's no one) and\n             * calendars of the assigned resources.\n             *\n             * - `FixedDuration` mode means, that event has fixed start and end dates, but its effort will be computed\n             * dynamically, based on the assigned resources information. When duration of such event increases,\n             * its effort is increased too. The mode tends to preserve user provided duration so changing effort\n             * results adjusting assignment units and vise-versa assignment changes adjusts effort.\n             *\n             * @field {'Normal'|'FixedDuration'} schedulingMode\n             * @category Scheduling\n             */\n\n            /**\n             * This boolean flag defines what part the data should be updated in the `FixedDuration` scheduling\n             * mode.\n             * If it is `true`, then {@link #field-effort} is kept intact when new duration is provided and\n             * assignment {@link SchedulerPro.model.AssignmentModel#field-units} is updated.\n             * If it is `false`, then assignment {@link SchedulerPro.model.AssignmentModel#field-units} is kept\n             * intact when new duration is provided and {@link #field-effort} is updated.\n             *\n             * @field {Boolean} effortDriven\n             * @default false\n             * @category Scheduling\n             */\n\n            /**\n             * The event effective calendar. Returns the\n             * {@link SchedulerPro.model.ProjectModel#field-calendar project calendar} if the event has no own\n             * {@link #field-calendar} provided.\n             * @member {SchedulerPro.model.CalendarModel} effectiveCalendar\n             */\n\n            /**\n             * Set this to true if this task should be shown in the Timeline widget\n             * @field {Boolean} showInTimeline\n             * @category Common\n             */\n            { name : 'showInTimeline', type : 'boolean', defaultValue : false },\n\n            /**\n             * Note about the event\n             * @field {String} note\n             * @category Common\n             */\n            'note',\n\n            /**\n             * Buffer time before event start. Specified in a human-friendly form as accepted by\n             * {@link Core.helper.DateHelper#function-parseDuration-static}:\n             * ```javascript\n             * // Create event model with a 30 minutes buffer time before the event start\n             * new EventModel({ startDate : '2020-01-01', endDate : '2020-01-02', preamble : '30 minutes' })\n             * ```\n             *\n             * Used by the {@link SchedulerPro.feature.EventBuffer} feature.\n             *\n             * @field {Core.data.Duration} preamble\n             * @accepts {String}\n             * @category Scheduling\n             */\n            {\n                name    : 'preamble',\n                convert : value => value ? new Duration(value) : null\n            },\n            /**\n             * Buffer time after event end. Specified in a human-friendly form as accepted by\n             * {@link Core.helper.DateHelper#function-parseDuration-static}:\n             * ```javascript\n             * // Create event model with a 1 hour buffer time after the event end\n             * new EventModel({ startDate : '2020-01-01', endDate : '2020-01-02', postamble : '1 hour' })\n             * ```\n             *\n             * Used by the {@link SchedulerPro.feature.EventBuffer} feature.\n             *\n             * @field {String} postamble\n             * @accepts {String}\n             * @category Scheduling\n             */\n            {\n                name    : 'postamble',\n                convert : value => value ? new Duration(value) : null\n            }\n        ];\n    }\n\n    getDefaultSegmentModelClass() {\n        return EventSegmentModel;\n    }\n\n    //endregion\n\n    //region EventBuffer\n\n    updateWrapDate(date, duration, forward = true) {\n        duration = new Duration(duration);\n\n        return new Date(date.getTime() + (forward ? 1 : -1) * duration.milliseconds);\n    }\n\n    get startDate() {\n        let dt;\n\n        if (this.isOccurrence) {\n            dt = this.get('startDate');\n        }\n        else {\n            // Micro optimization to avoid expensive super call. super will be hit in Scheduler Pro\n            dt = this._startDate ?? super.startDate;\n        }\n\n        if (this.allDay) {\n            dt = this.constructor.getAllDayStartDate(dt);\n        }\n\n        return dt;\n    }\n\n    set startDate(startDate) {\n        const me = this;\n\n        // Update children when parents startDate changes (ignoring initial data set)\n        // <remove-on-release>\n        // TODO: Handle in engine? Arcady is informed\n        // </remove-on-release>\n        if (me.generation && me.isParent && !me.$ignoreChange) {\n            const timeDiff = DateHelper.diff(me.startDate, startDate);\n\n            if (timeDiff) {\n                // Move all children same amount\n                for (const child of this.children) {\n                    child.startDate = DateHelper.add(child.startDate, timeDiff);\n                }\n            }\n        }\n\n        if (me.batching) {\n            me._startDate = startDate;\n            me.set({ startDate });\n        }\n        else {\n            super.startDate = startDate;\n\n            if (me.preamble) {\n                me.wrapStartDate = null;\n                me.wrapEndDate = null;\n            }\n        }\n    }\n\n    get endDate() {\n        let dt;\n\n        if (this.isOccurrence) {\n            dt = this.get('endDate');\n        }\n        else {\n            // Micro optimization to avoid expensive super call. super will be hit in Scheduler Pro\n            dt = this._endDate ?? super.endDate;\n        }\n\n        if (this.allDay) {\n            dt = this.constructor.getAllDayEndDate(dt);\n        }\n\n        return dt;\n    }\n\n    set endDate(endDate) {\n        const me = this;\n\n        if (me.batching) {\n            me._endDate = endDate;\n            me.set({ endDate });\n        }\n        else {\n            super.endDate = endDate;\n\n            if (me.postamble) {\n                me.wrapStartDate = null;\n                me.wrapEndDate = null;\n            }\n        }\n    }\n\n    /**\n     * Property which encapsulates the effort's magnitude and units.\n     *\n     * UI fields representing this property are disabled for summary events.\n     * See {@link #function-isEditable} for details.\n     *\n     * @property {Core.data.Duration}\n     */\n    get fullEffort() {\n        return new Duration({\n            unit      : this.effortUnit,\n            magnitude : this.effort\n        });\n    }\n\n    set fullEffort(effort) {\n        this.setEffort(effort.magnitude, effort.unit);\n    }\n\n    // Cannot use `convert` method because it might be disabled by `useRawData : true` and we always need to calculate\n    // that value\n    get wrapStartDate() {\n        const\n            me                      = this,\n            { preamble, startDate } = me,\n            wrapStartDate           = me._wrapStartDate;\n\n        let result;\n\n        if (wrapStartDate) {\n            result = wrapStartDate;\n        }\n        else {\n            if (preamble) {\n                result = me.updateWrapDate(startDate, preamble, false);\n                me._wrapStartDate = result;\n            }\n            else {\n                result = startDate;\n            }\n        }\n\n        return result;\n    }\n\n    set wrapStartDate(value) {\n        this._wrapStartDate = value;\n    }\n\n    get wrapEndDate() {\n        const\n            me                     = this,\n            { postamble, endDate } = me,\n            wrapEndDate            = me._wrapEndDate;\n\n        let result;\n\n        if (wrapEndDate) {\n            result = wrapEndDate;\n        }\n        else {\n            if (postamble) {\n                result = me.updateWrapDate(endDate, postamble, true);\n                me._wrapEndDate = result;\n            }\n            else {\n                result = endDate;\n            }\n        }\n\n        return result;\n    }\n\n    set wrapEndDate(value) {\n        this._wrapEndDate = value;\n    }\n\n    set(data) {\n        const isObject = typeof data === 'object';\n        if (data === 'preamble' || (isObject && 'preamble' in data)) {\n            this.wrapStartDate = null;\n        }\n        if (data === 'postamble' || (isObject && 'postamble' in data)) {\n            this.wrapEndDate = null;\n        }\n        return super.set(...arguments);\n    }\n\n    /**\n     * Returns event start date adjusted by {@link #field-preamble} (start date - duration).\n     * @property {Date}\n     * @readonly\n     */\n    get outerStartDate() {\n        return this.wrapStartDate;\n    }\n\n    /**\n     * Returns event end date adjusted by {@link #field-postamble} (end date + duration).\n     * @property {Date}\n     * @readonly\n     */\n    get outerEndDate() {\n        return this.wrapEndDate;\n    }\n\n    //endregion\n\n    /**\n     * Defines if the given event field should be manually editable in UI.\n     * You can override this method to provide your own logic.\n     *\n     * By default, the method defines:\n     * - {@link #field-earlyStartDate}, {@link #field-earlyEndDate} as not editable;\n     * - {@link #field-endDate}, {@link #field-duration} and {@link #field-fullDuration} fields\n     *   as not editable for summary events except the {@link #field-manuallyScheduled manually scheduled} ones;\n     * - {@link #field-percentDone} as not editable for summary events.\n     *\n     * @param {String} fieldName Name of the field\n     * @returns {Boolean} Returns `true` if the field is editable, `false` if it is not and `undefined` if the event has\n     * no such field.\n     */\n    isEditable(fieldName) {\n        switch (fieldName) {\n            // r/o fields\n            case 'earlyStartDate':\n            case 'earlyEndDate':\n                return false;\n\n            // disable percentDone editing for summary tasks\n            case 'percentDone' :\n            case 'renderedPercentDone' :\n                return this.isLeaf;\n\n            // end/duration is allowed to edit for leafs and manually scheduled summaries\n            case 'endDate' :\n            case 'duration' :\n            case 'fullDuration' :\n                return this.isLeaf || this.manuallyScheduled;\n        }\n\n        return super.isEditable(fieldName);\n    }\n\n    // Occurrences are not part of the project, when requesting their stm we retrieve it from the master event instead\n    get stm() {\n        return this.recurringEvent?.stm ?? super.stm;\n    }\n\n    set stm(stm) {\n        super.stm = stm;\n    }\n\n    //region Early render\n\n    get assigned() {\n        const\n            { project }  = this,\n            assigned     = super.assigned;\n\n        // Figure assigned events out before buckets are created  (if part of project)\n        if (project?.isDelayingCalculation && !assigned) {\n            return project.assignmentStore.storage.findItem('event', this);\n        }\n\n        return assigned;\n    }\n\n    set assigned(assigned) {\n        super.assigned = assigned;\n    }\n\n    //endregion\n\n    getCurrentConfig(options) {\n        const\n            { segments } = this,\n            result       = super.getCurrentConfig(options);\n\n        // include segments\n        if (result && segments) {\n            result.segments = segments.map(segment => segment.getCurrentConfig(options));\n        }\n\n        return result;\n    }\n\n}\n", "import AjaxStore from '../../Core/data/AjaxStore.js';\nimport GetEventsMixin from '../../Scheduler/data/mixin/GetEventsMixin.js';\nimport DayIndexMixin from '../../Scheduler/data/mixin/DayIndexMixin.js';\nimport EventStoreMixin from '../../Scheduler/data/mixin/EventStoreMixin.js';\nimport SharedEventStoreMixin from '../../Scheduler/data/mixin/SharedEventStoreMixin.js';\nimport RecurringEventsMixin from '../../Scheduler/data/mixin/RecurringEventsMixin.js';\nimport EventModel from '../model/EventModel.js';\nimport PartOfProject from './mixin/PartOfProject.js';\nimport { ChronoEventStoreMixin } from '../../Engine/quark/store/ChronoEventStoreMixin.js';\n\n/**\n * @module SchedulerPro/data/EventStore\n */\n\n/**\n * A store holding all the {@link SchedulerPro.model.EventModel events} to be rendered into a {@link SchedulerPro.view.SchedulerPro Scheduler Pro}.\n *\n * This store only accepts a model class inheriting from {@link SchedulerPro.model.EventModel}.\n *\n * An EventStore is usually connected to a project, which binds it to other related stores (AssignmentStore,\n * ResourceStore and DependencyStore). The project also handles normalization/calculation of the data on the records in\n * the store. For example if a record is added with a `startDate` and an `endDate`, it will calculate the `duration`.\n *\n * The calculations happens async, records are not guaranteed to have up to date data until they are finished. To be\n * certain that calculations have finished, call `await project.commitAsync()` after store actions. Or use one of the\n * `xxAsync` functions, such as `loadDataAsync()`.\n *\n * Using `commitAsync()`:\n *\n * ```javascript\n * eventStore.data = [{ startDate, endDate }, ...];\n *\n * // duration of the record is not yet calculated\n *\n * await eventStore.project.commitAsync();\n *\n * // now it is\n * ```\n *\n * Using `loadDataAsync()`:\n *\n * ```javascript\n * await eventStore.loadDataAsync([{ startDate, endDate }, ...]);\n *\n * // duration is calculated\n * ```\n *\n * @mixes SchedulerPro/data/mixin/PartOfProject\n * @mixes Scheduler/data/mixin/SharedEventStoreMixin\n * @mixes Scheduler/data/mixin/GetEventsMixin\n * @mixes Scheduler/data/mixin/EventStoreMixin\n * @mixes Scheduler/data/mixin/RecurringEventsMixin\n * @extends Core/data/AjaxStore\n *\n * @typings Scheduler/data/EventStore -> Scheduler/data/SchedulerEventStore\n */\nexport default class EventStore extends PartOfProject(SharedEventStoreMixin(RecurringEventsMixin(GetEventsMixin(DayIndexMixin(EventStoreMixin(ChronoEventStoreMixin.derive(AjaxStore))))))) {\n\n    //region Config\n\n    static $name = 'EventStore';\n\n    static get defaultConfig() {\n        return {\n            modelClass : EventModel\n        };\n    }\n\n    //endregion\n\n}\n", "import Base from '../../Core/Base.js';\n\nconst sortFn = (a, b) => {\n    if (a < b) {\n        return -1;\n    }\n    else if (a > b) {\n        return 1;\n    }\n    else {\n        return 0;\n    }\n};\n\n/**\n * @module SchedulerPro/eventlayout/ProHorizontalLayout\n */\n\n/**\n * Mixin for SchedulerPro horizontal layouts ({@link SchedulerPro.eventlayout.ProHorizontalLayoutPack} and\n * {@link SchedulerPro.eventlayout.ProHorizontalLayoutStack}). Should not be used directly, instead specify\n * {@link Scheduler.view.mixin.SchedulerEventRendering#config-eventLayout} in the SchedulerPro config (`stack`, `pack`\n * or `none`):\n *\n * ```javascript\n * new SchedulerPro({\n *   eventLayout: 'stack'\n * });\n * ```\n *\n * ## Grouping events\n *\n * By default events are not grouped and are laid out inside the row using start and end dates. Using\n * {@link #config-groupBy} config you can group events inside the resource row. Every group will be laid out on its own\n * band, as if layout was applied to each group of events separately.\n *\n * {@inlineexample SchedulerPro/eventlayout/ProHorizontalLayout.js}\n *\n * ### By field value\n *\n * You can specify field name to group events by. The following snippet would put *high* prio events at the top:\n *\n * ```javascript\n * new SchedulerPro({\n *     eventLayout : {\n *         type    : 'stack',\n *         groupBy : 'prio'\n *     },\n *     project : {\n *         eventsData : [\n *             { id : 1, startDate : '2017-02-08', duration : 1, prio : 'low' },\n *             { id : 2, startDate : '2017-02-09', duration : 1, prio : 'high' },\n *             { id : 3, startDate : '2017-02-10', duration : 1, prio : 'high' },\n *         ],\n *         resourcesData : [\n *             { id : 1, name : 'Resource 1' }\n *         ],\n *         assignmentsData : [\n *             { id : 1, resource : 1, event : 1 },\n *             { id : 2, resource : 1, event : 2 },\n *             { id : 3, resource : 1, event : 3 }\n *         ]\n *     }\n * })\n * ```\n *\n * ### Order of groups\n *\n * Groups are **always** sorted ascending. In the example above *high* prio events are above *low* prio events because:\n *\n * ```javascript\n * 'high' < 'low' // true\n * ```\n *\n * If you want to group events in a specific order, you can define it in a\n * special {@link #config-weights} config:\n *\n * ```javascript\n * new SchedulerPro({\n *     eventLayout : {\n *         type    : 'stack',\n *         weights : {\n *             low  : 100,\n *             high : 200\n *         },\n *         groupBy : 'prio'\n *     }\n * });\n * ```\n *\n * This will put *low* prio events at the top.\n *\n * The weight value defaults to `Infinity` unless specified in the weights config explicitly.\n *\n * ### Using a function\n *\n * You can use a custom function to group events. The group function receives an event record as a single argument and\n * is expected to return a non-null value for the group. This allows you to arrange events in any order you like,\n * including grouping by multiple properties at once.\n *\n * The snippet below groups events by duration and priority by creating 4 weights:\n *\n * |       | high prio | low prio |\n * |-------|-----------|----------|\n * | long  |     2     |    10    |\n * | short |     3     |    15    |\n *\n * ```javascript\n * new SchedulerPro({\n *     eventLayout : {\n *         type    : 'stack',\n *         groupBy : event => {\n *             return (event.duration > 2 ? 2 : 3) * (event.prio === 'high' ? 1 : 5);\n *         }\n *     }\n * })\n * ```\n *\n * This will divide events into 4 groups as seen in this demo:\n *\n * {@inlineexample SchedulerPro/eventlayout/ProHorizontalLayout2.js}\n *\n * ## Manual event layout\n *\n * You can provide a custom function to layout events inside the row and set the row size as required using\n * {@link #config-layoutFn}. The function is called with an array of {@link EventRenderData render data} objects. The\n * custom function can iterate over those objects and position them inside the row using `top` and `height` attributes.\n * The function should return the total row height in pixels.\n *\n * Please note that using a custom layout function makes {@link SchedulerPro.view.SchedulerPro#config-rowHeight}\n * obsolete.\n *\n * {@inlineexample SchedulerPro/eventlayout/ProHorizontalLayoutFn.js}\n *\n * ```javascript\n * new SchedulerPro({\n *     eventLayout : {\n *         layoutFn : items => {\n *             // Put event element at random top position\n *             item.top = 100 * Math.random();\n *         }\n *     }\n * });\n * ```\n *\n * @mixin\n */\nexport default Target => class ProHorizontalLayout extends (Target || Base) {\n    static get configurable() {\n        return {\n            /**\n             * Type of horizontal layout. Supported values are `stack`, `pack` and `none`.\n             * @config {'stack'|'pack'|'none'}\n             */\n            type : null,\n\n            /**\n             * The weights config allows you to specify order of the event groups inside the row. Higher weights are\n             * placed further down in the row. If field value is not specified in the weights object, it will be\n             * assigned `Infinity` value and pushed to the bottom.\n             *\n             * Only applicable when {@link #config-groupBy} config is not a function:\n             *\n             * ```javascript\n             * new SchedulerPro({\n             *     eventLayout : {\n             *         type    : 'stack',\n             *         weights : {\n             *             // Events with high prio will be placed at the top, then medium,\n             *             // then low prio events.\n             *             high   : 100,\n             *             medium : 150,\n             *             low    : 200\n             *         },\n             *         groupBy : 'prio'\n             *     }\n             * });\n             * ```\n             *\n             * Only explicitly defined groups are put in separate bands inside the row:\n             *\n             * ```javascript\n             * new SchedulerPro({\n             *     eventLayout : {\n             *         // Pack layout is also supported\n             *         type : 'pack',\n             *         weights : {\n             *             // Events with high prio will be placed at the top. All other\n             *             // events will be put to the same group at the bottom\n             *             high : 100\n             *         },\n             *         groupBy : 'prio'\n             *     }\n             * });\n             * ```\n             * @config {Object<String,Number>}\n             */\n            weights : null,\n\n            /**\n             * Specifies a way to group events inside the row. Can accept either a model field name or a function which\n             * is provided with event record as a single argument and is expected to return group for the event.\n             *\n             * @config {String|Function}\n             */\n            groupBy        : null,\n            groupByThisObj : null,\n\n            /**\n             * Supply a function to manually layout events. It accepts event layout data and should set `top`\n             * and `height` for every provided data item (left and width are calculated according to the event start\n             * date and duration). The function should return the total row height in pixels.\n             *\n             * For example, we can arrange events randomly in the row:\n             * ```javascript\n             * new SchedulerPro({\n             *     eventLayout : {\n             *         layoutFn : items => {\n             *             items.forEach(item => {\n             *                 item.top = Math.round(Math.random() * 100);\n             *                 item.height = Math.round(Math.random() * 100);\n             *             });\n             *\n             *             return 50;\n             *         }\n             *     }\n             * })\n             * ```\n             *\n             * If you need a reference to the scheduler pro instance, you can get that from the function scope (arrow\n             * function doesn't work here):\n             *\n             * ```javascript\n             * new SchedulerPro({\n             *     eventLayout : {\n             *         layoutFn(items) {\n             *             items.forEach(item => {\n             *                 item.top = Math.round(Math.random() * 100);\n             *                 item.height = Math.round(Math.random() * 100);\n             *             });\n             *\n             *             // note `scheduler`, not `schedulerPro`\n             *             return this.scheduler.rowHeight;\n             *         }\n             *     }\n             * })\n             * ```\n             *\n             * @config {Function}\n             * @param {EventRenderData[]} events Unordered array of event render data, sorting may be required\n             * @param {Scheduler.model.ResourceModel} resource The resource for which the events are being laid out.\n             * @returns {Number} Returns total row height\n             */\n            layoutFn : null\n        };\n    }\n\n    /**\n     * This method performs layout on an array of event render data and returns amount of _bands_. Band is a multiplier of a\n     * configured {@link Scheduler.view.Scheduler#config-rowHeight} to calculate total row height required to fit all\n     * events.\n     * This method should not be used directly, it is called by the Scheduler during the row rendering process.\n     * @method applyLayout\n     * @param {EventRenderData[]} events\n     * @param {Scheduler.model.ResourceModel} resource\n     * @returns {Number}\n     */\n\n    /**\n     * This method iterates over events and calculates top position for each of them. Default layouts calculate\n     * positions to avoid events overlapping horizontally (except for the 'none' layout). Pack layout will squeeze events to a single\n     * row by reducing their height, Stack layout will increase the row height and keep event height intact.\n     * This method should not be used directly, it is called by the Scheduler during the row rendering process.\n     * @method layoutEventsInBands\n     * @param {EventRenderData[]} events\n     */\n\n    /**\n     * Returns `true` if event {@link #config-groupBy grouper} is defined.\n     * @type {Boolean}\n     * @readonly\n     */\n    get grouped() {\n        return Boolean(this.groupBy);\n    }\n\n    /**\n     * Returns group for the passed event render data.\n     * @param {EventRenderData} layoutData\n     * @returns {*}\n     */\n    getGroupValue(layoutData) {\n        let result;\n\n        if (layoutData.group != null) {\n            result = layoutData.group;\n        }\n        else {\n            const\n                { groupBy, weights, groupByThisObj = this } = this,\n                { eventRecord }                             = layoutData;\n\n            if (typeof groupBy === 'function') {\n                result = groupBy.call(groupByThisObj, eventRecord);\n            }\n            else {\n                result = eventRecord[groupBy];\n\n                if (weights) {\n                    // If record value is null or undefined, use infinite weight to move record to the bottom\n                    result = weights[result] ?? Infinity;\n                }\n            }\n\n            layoutData.group = result;\n        }\n\n        return result;\n    }\n\n    /**\n     * Sorts events by group and returns ordered array of groups, or empty array if events are not grouped.\n     * @param {EventRenderData[]} events\n     * @returns {String[]}\n     */\n    getEventGroups(events) {\n        // If group fn is defined, we need to sort events array according to groups\n        if (this.grouped) {\n            const groups = new Set();\n\n            events.sort((a, b) => {\n                const\n                    aValue = this.getGroupValue(a),\n                    bValue = this.getGroupValue(b);\n\n                groups.add(aValue);\n                groups.add(bValue);\n\n                return sortFn(aValue, bValue);\n            });\n\n            return Array.from(groups).sort(sortFn);\n        }\n        else {\n            return [];\n        }\n    }\n};\n", "import ProHorizontalLayout from './ProHorizontalLayout.js';\nimport HorizontalLayoutStack from '../../Scheduler/eventlayout/HorizontalLayoutStack.js';\n\n/**\n * @module SchedulerPro/eventlayout/ProHorizontalLayoutStack\n */\n\n/**\n * Handles layout of events within a row (resource) in horizontal mode. Stacks events, increasing row height to fit\n * all overlapping events.\n *\n * This layout is used by default in horizontal mode.\n *\n * This layout supports grouping events inside the resource row. See\n * {@link SchedulerPro.eventlayout.ProHorizontalLayout} for more info.\n *\n * @mixes SchedulerPro/eventlayout/ProHorizontalLayout\n */\nexport default class ProHorizontalLayoutStack extends HorizontalLayoutStack.mixin(ProHorizontalLayout) {\n    static get $name() {\n        return 'ProHorizontalLayoutStack';\n    }\n\n    /**\n     * @hideconfigs type, weights, groupBy, layoutFn\n     */\n\n    // heightRun is used when pre-calculating row heights, taking a cheaper path\n    layoutEventsInBands(events, heightRun = false) {\n        this.getEventGroups(events);\n\n        return super.layoutEventsInBands(events, heightRun);\n    }\n}\n", "import ProHorizontalLayout from './ProHorizontalLayout.js';\nimport HorizontalLayoutPack from '../../Scheduler/eventlayout/HorizontalLayoutPack.js';\n\n/**\n * @module SchedulerPro/eventlayout/ProHorizontalLayoutPack\n */\n\n/**\n * Handles layout of events within a row (resource) in horizontal mode. Packs events (adjusts their height) to fit\n * available row height.\n *\n * This layout supports grouping events inside the resource row. See\n * {@link SchedulerPro.eventlayout.ProHorizontalLayout} for more info.\n *\n * @mixes SchedulerPro/eventlayout/ProHorizontalLayout\n */\nexport default class ProHorizontalLayoutPack extends HorizontalLayoutPack.mixin(ProHorizontalLayout) {\n    static get $name() {\n        return 'ProHorizontalLayoutPack';\n    }\n\n    /**\n     * @hideconfigs type, weights, groupBy, layoutFn\n     */\n\n    layoutEventsInBands(events) {\n        const\n            groups = this.getEventGroups(events),\n            // If we don't have any groups, treat it like we have a single group including all events\n            groupCount = groups.length || 1;\n\n        const result = this.packEventsInBands(events, (event, j, slot, slotSize) => {\n            const\n                size              = slotSize / groupCount,\n                groupIndex        = groupCount === 1 ? 0 : groups.indexOf(event.group),\n                adjustedSlotStart = groupIndex / groupCount;\n\n            // This height and top are used to position event in the grouped row\n            event.height = size;\n            event.top    = adjustedSlotStart + slot.start / groupCount + j * size;\n\n            // This height and top are used to layout events in the same band. They emulate a single row which is what\n            // pack logic expects\n            event.inBandHeight = slotSize;\n            event.inBandTop = slot.start + j * slotSize;\n        });\n\n        events.forEach(event => {\n            Object.assign(\n                event,\n                this.bandIndexToPxConvertFn.call(\n                    this.bandIndexToPxConvertThisObj || this,\n                    event.top,\n                    event.height,\n                    event.eventRecord,\n                    event.resourceRecord\n                )\n            );\n        });\n\n        return result;\n    }\n}\n", "import ArrayHelper from '../../Core/helper/ArrayHelper.js';\nimport GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\nimport ResourceTimeRangesBase from '../../Scheduler/feature/base/ResourceTimeRangesBase.js';\nimport ResourceTimeRangeModel from '../../Scheduler/model/ResourceTimeRangeModel.js';\n\n/**\n * @module SchedulerPro/feature/CalendarHighlight\n */\n\nlet counter = 0;\n\nclass CalendarHighlightModel extends ResourceTimeRangeModel {\n    static get $name() {\n        return 'CalendarHighlightModel';\n    }\n\n    static domIdPrefix = 'calendarhighlight';\n\n    // For nicer DOM, since the records are transient we do not need a fancy UUID\n    static generateId() {\n        return ++counter;\n    }\n}\n\n/**\n * This feature temporarily visualizes {@link SchedulerPro/model/CalendarModel calendars} for the event or resource\n * calendar (controlled by the {@link #config-calendar} config). The calendars are highlighted while a user is creating,\n * dragging or resizing a task. Enabling this feature makes it easier for the end user to understand the underlying\n * rules of the schedule.\n *\n * {@inlineexample SchedulerPro/feature/CalendarHighlight.js}\n *\n * ## Example usage\n *\n * ```javascript\n * new SchedulerPro({\n *     features : {\n *         calendarHighlight : {\n *             // visualize resource calendars while interacting with events\n *             calendar : 'resource'\n *         }\n *     }\n * })\n * ```\n *\n * This feature is **disabled** by default.\n *\n * @extends Scheduler/feature/base/ResourceTimeRangesBase\n * @classtype calendarHighlight\n * @feature\n * @demo SchedulerPro/highlight-event-calendars\n */\nexport default class CalendarHighlight extends ResourceTimeRangesBase {\n\n    //region Config\n\n    static get $name() {\n        return 'CalendarHighlight';\n    }\n\n    static get configurable() {\n        return {\n            /**\n             * A string defining which calendar(s) to highlight during drag drop, resize or create flows.\n             * Valid values are `event` or `resource`.\n             *\n             * @config {'event'|'resource'}\n             * @default\n             */\n            calendar : 'event',\n\n            /**\n             * A string defining which calendar(s) to highlight during drag drop, resize or create flows.\n             * Valid values are `event` or `resource`.\n             *\n             * @config {'event'|'resource'}\n             */\n            unhighlightOnDrop : null,\n\n            /**\n             * A callback function which is called when you interact with one or more events (e.g. drag drop) to\n             * highlight only available resources.\n             *\n             * ```javascript\n             * new SchedulerPro({\n             *     features : {\n             *         calendarHighlight : {\n             *             collectAvailableResources({ scheduler, eventRecords }) {\n             *                  const mainEvent = eventRecords[0];\n             *                  return scheduler.resourceStore.query(resource => resource.role === mainEvent.requiredRole || !mainEvent.requiredRole);\n             *              }\n             *         }\n             *     }\n             * });\n             * ```\n             *\n             * @param {Object} context A context object\n             * @param {SchedulerPro.view.SchedulerPro} context.scheduler The scheduler instance\n             * @param {Scheduler.model.EventModel[]} context.eventRecords The event records\n             * @returns {Scheduler.model.ResourceModel[]} An array with the available resource records\n             * @config {Function}\n             */\n            collectAvailableResources : null,\n\n            rangeCls                    : 'b-sch-highlighted-calendar-range',\n            resourceTimeRangeModelClass : CalendarHighlightModel,\n            inflate                     : 3\n        };\n    }\n\n    static get pluginConfig() {\n        const config  = super.pluginConfig;\n\n        config.assign = [\n            'highlightEventCalendars',\n            'highlightResourceCalendars',\n            'unhighlightCalendars'\n        ];\n\n        return config;\n    }\n\n    afterConstruct() {\n        super.afterConstruct();\n\n        this.client.ion({\n            eventDragStart   : 'onEventDragStart',\n            eventDragReset   : 'unhighlightCalendars',\n            eventResizeStart : 'onEventResizeStart',\n            eventResizeEnd   : 'unhighlightCalendars',\n            dragCreateStart  : 'onDragCreateStart',\n            afterDragCreate  : 'unhighlightCalendars',\n            thisObj          : this\n        });\n    }\n\n    //endregion\n\n    highlightCalendar(eventRecords, resourceRecords) {\n        eventRecords = ArrayHelper.asArray(eventRecords);\n        resourceRecords = ArrayHelper.asArray(resourceRecords);\n\n        if (this.calendar === 'event') {\n            this.highlightEventCalendars(eventRecords, resourceRecords);\n        }\n        else {\n            this.highlightResourceCalendars(resourceRecords);\n        }\n    }\n\n    // region public APIs\n    /**\n     * Highlights the time spans representing the calendars of the passed event records, and resource records.\n     * @on-owner\n     * @param {Scheduler.model.EventModel[]} eventRecords The event records\n     * @param {Scheduler.model.ResourceModel[]} [resourceRecords] The resource records\n     * @param {Boolean} [clearExisting] Provide `false` to leave previous highlight elements\n     */\n    highlightEventCalendars(eventRecords, resourceRecords, clearExisting = true) {\n        const\n            me                     = this,\n            { client }             = me,\n            { startDate, endDate } = client;\n\n        if (me.disabled) {\n            return;\n        }\n\n        if (clearExisting) {\n            me.unhighlightCalendars();\n        }\n\n        eventRecords = ArrayHelper.asArray(eventRecords);\n\n        if (!resourceRecords) {\n            resourceRecords = eventRecords.flatMap(event => event.$linkedResources);\n        }\n\n        me.highlight = new Map();\n\n        resourceRecords = ArrayHelper.asArray(resourceRecords);\n\n        eventRecords.forEach(eventRecord => {\n            if (!eventRecord.calendar) {\n                return;\n            }\n\n            const timespans = eventRecord.calendar\n                ?.getWorkingTimeRanges(startDate, endDate)\n                .map(timespan => new CalendarHighlightModel(timespan));\n\n            if (timespans) {\n                for (const resourceRecord of resourceRecords) {\n                    me.highlight.set(resourceRecord, timespans);\n                    client.currentOrientation.refreshEventsForResource(resourceRecord, true, false);\n                }\n                if (resourceRecords.length > 0) {\n                    client.currentOrientation.onRenderDone();\n                }\n            }\n        });\n    }\n\n    /**\n     * Highlights the time spans representing the working time calendars of the passed resource records.\n     * @on-owner\n     * @param {Scheduler.model.ResourceModel[]} resourceRecords The resource records\n     * @param {Boolean} [clearExisting] Provide `false` to leave previous highlight elements\n     */\n    highlightResourceCalendars(resourceRecords, clearExisting = true) {\n        const\n            me                                         = this,\n            { startDate, endDate, currentOrientation } = me.client;\n\n        if (me.disabled) {\n            return;\n        }\n\n        if (clearExisting) {\n            me.unhighlightCalendars();\n        }\n\n        // Highlight resource calendars\n        me.highlight = new Map();\n\n        for (const resourceRecord of resourceRecords) {\n            const timespans = resourceRecord.calendar\n                ?.getWorkingTimeRanges(startDate, endDate)\n                .map(timespan => new CalendarHighlightModel(timespan));\n\n            if (timespans) {\n                me.highlight.set(resourceRecord, timespans);\n                currentOrientation.refreshEventsForResource(resourceRecord, true, false);\n            }\n        }\n        if (resourceRecords.length > 0) {\n            currentOrientation.onRenderDone();\n        }\n    }\n\n    /**\n     * Removes all highlight elements.\n     * @on-owner\n     */\n    unhighlightCalendars() {\n        if (!this.highlight) {\n            // We're not highlighting anything, bail out\n            return;\n        }\n\n        const\n            { currentOrientation } = this.client,\n            resources              = this.highlight.keys();\n\n        this.highlight = null;\n\n        for (const resource of resources) {\n            currentOrientation.refreshEventsForResource(resource, true, false);\n        }\n\n        currentOrientation.onRenderDone();\n    }\n\n    // endregion\n\n    // region event listeners\n    onEventDragStart({ context }) {\n        if (this.disabled) {\n            return;\n        }\n\n        const\n            me               = this,\n            { client }       = me,\n            { eventRecords } = context,\n            resourceRecords  = context.availableResources =\n                client.features.eventDrag.constrainDragToResource\n                    ? [context.resourceRecord]\n                    : me.collectAvailableResources?.({\n                        scheduler : client,\n                        eventRecords\n                    }) ?? client.resourceStore.records;\n\n        me.highlightCalendar(eventRecords, resourceRecords);\n    }\n\n    onEventResizeStart({ eventRecord, resourceRecord }) {\n        if (!this.disabled) {\n            this.highlightCalendar(eventRecord, [resourceRecord]);\n        }\n    }\n\n    onDragCreateStart({ eventRecord, resourceRecord }) {\n        if (!this.disabled) {\n            this.highlightCalendar(eventRecord, [resourceRecord]);\n        }\n    }\n\n    // endregion\n\n    // Called on render of resources events to get events to render. Add any ranges\n    // (chained function from Scheduler)\n    getEventsToRender(resource, events) {\n        const timespans = this.highlight?.get(resource);\n\n        timespans && events.push(...timespans);\n\n        return events;\n    }\n\n    onEventDataGenerated(renderData) {\n        const { eventRecord } = renderData;\n\n        if (eventRecord.isCalendarHighlightModel) {\n            const { inflate } = this;\n\n            // Flag that we should fill entire row/col\n            renderData.fillSize = this.client.isVertical;\n            // Add our own cls\n            renderData.wrapperCls['b-sch-highlighted-calendar-range'] = 1;\n            // Add label\n            renderData.children.push({\n                className : 'b-sch-event-content',\n                html      : eventRecord.name,\n                dataset   : {\n                    taskBarFeature : 'content'\n                }\n            });\n\n            // Inflate\n            renderData.width += inflate * 2;\n            renderData.height += inflate * 2;\n            renderData.left -= inflate;\n            renderData.top -= inflate;\n\n            // Event data for DOMSync comparison, unique per calendar & resource combination\n            renderData.eventId = `${this.generateElementId(eventRecord)}-resource-${renderData.resourceRecord.id}`;\n        }\n    }\n\n    updateDisabled(disabled, was) {\n        super.updateDisabled(disabled, was);\n\n        if (disabled) {\n            this.unhighlightCalendars();\n        }\n    }\n\n    shouldInclude(eventRecord) {\n        return eventRecord.isCalendarHighlightModel;\n    }\n\n    // No classname on Scheduler's/Gantt's element\n    get featureClass() {}\n}\n\nGridFeatureManager.registerFeature(CalendarHighlight, false, 'SchedulerPro');\n", "import GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\nimport SchedulerDependencyEdit from '../../Scheduler/feature/DependencyEdit.js';\nimport '../../Core/widget/Checkbox.js';\n\n/**\n * @module SchedulerPro/feature/DependencyEdit\n */\n\n/**\n * Feature that displays a popup containing fields for editing dependency data.\n *\n * This feature is **off** by default. For info on enabling it, see {@link Grid/view/mixin/GridFeatures}.\n *\n * @extends Scheduler/feature/DependencyEdit\n * @inlineexample SchedulerPro/feature/DependencyEdit.js\n * @typings Scheduler/feature/DependencyEdit -> Scheduler/feature/SchedulerDependencyEdit\n * @demo SchedulerPro/dependencies/\n * @classtype dependencyEdit\n * @feature\n */\nexport default class DependencyEdit extends SchedulerDependencyEdit {\n    //region Config\n\n    static get $name() {\n        return 'DependencyEdit';\n    }\n\n    static get configurable() {\n        return {\n            /**\n             * True to show the lag field for the dependency\n             * @config {Boolean}\n             * @default\n             * @category Editor widgets\n             */\n            showLagField : true,\n\n            editorConfig : {\n                items : {\n                    activeField : {\n                        type  : 'checkbox',\n                        name  : 'active',\n                        label : 'L{Active}'\n                    }\n                }\n            }\n        };\n    }\n    //endregion\n}\n\nGridFeatureManager.registerFeature(DependencyEdit, false);\n", "import InstancePlugin from '../../Core/mixin/InstancePlugin.js';\nimport GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\nimport Tooltip from '../../Core/widget/Tooltip.js';\n\n/**\n * @module SchedulerPro/feature/EventBuffer\n */\n\n/**\n * Feature that allows showing additional time before & after an event, to visualize things like travel time - or the time you\n * need to prepare a room for a meeting + clean it up after.\n *\n * The feature relies on two model fields: {@link SchedulerPro.model.EventModel#field-preamble} and\n * {@link SchedulerPro.model.EventModel#field-postamble} which are used to calculate overall start and end dates used to\n * position the event. Buffer time overlaps the same way events overlap (as you can see in the inline demo below). It\n * should also be noted that buffer time is ignored for milestones.\n *\n * {@inlineexample SchedulerPro/feature/EventBuffer.js}\n *\n * This feature is **disabled** by default\n *\n * @extends Core/mixin/InstancePlugin\n * @classtype eventBuffer\n * @feature\n * @demo SchedulerPro/travel-time\n */\nexport default class EventBuffer extends InstancePlugin {\n    static get $name() {\n        return 'EventBuffer';\n    }\n\n    static get configurable() {\n        return {\n            /**\n             * Show buffer duration labels\n             * @config {Boolean}\n             * @default\n             */\n            showDuration : true,\n\n            /**\n             * A function which receives data about the buffer time and returns a html string to show in a tooltip when\n             * hovering a buffer time element\n             * @param {Object} data Data\n             * @param {Core.data.Duration} data.duration Buffer time duration\n             * @param {Boolean} data.before `true` if this is a buffer time before the event start, `false` if after\n             * @param {SchedulerPro.model.EventModel} data.eventRecord The event record\n             * @config {Function}\n             */\n            tooltipTemplate : {\n                value   : null,\n                $config : 'nullify'\n            }\n        };\n    }\n\n    static get pluginConfig() {\n        return {\n            chain : ['onEventDataGenerated']\n        };\n    }\n\n    //region Chained methods\n\n    updateTooltipTemplate(tooltipTemplate) {\n        const me = this;\n\n        if (tooltipTemplate) {\n            me.tooltip = Tooltip.new({\n                forElement  : me.client.timeAxisSubGridElement,\n                forSelector : '.b-sch-event-buffer-before,.b-sch-event-buffer-after',\n                align       : {\n                    align  : 'b-t',\n                    offset : [0, 10]\n                },\n                getHtml({ activeTarget }) {\n                    const\n                        eventRecord = me.client.resolveEventRecord(activeTarget),\n                        before      = activeTarget.matches('.b-sch-event-buffer-before'),\n                        duration    = before ? eventRecord.preamble : eventRecord.postamble;\n\n                    return me.tooltipTemplate({ eventRecord, duration, before });\n                }\n            });\n        }\n        else {\n            me.tooltip?.destroy();\n        }\n    }\n\n    onEventDataGenerated({ useEventBuffer, bufferBeforeWidth, bufferAfterWidth, eventRecord, wrapperChildren }) {\n        if (this.enabled && useEventBuffer) {\n            const\n                { isHorizontal }        = this.client,\n                { showDuration }        = this,\n                { preamble, postamble } = eventRecord,\n                sizeProp                = isHorizontal ? 'width' : 'height';\n\n            // Buffer elements should always be there, otherwise animation might get wrong\n            wrapperChildren.push(\n                {\n                    className : {\n                        'b-sch-event-buffer'        : 1,\n                        'b-sch-event-buffer-before' : 1,\n                        'b-buffer-thin'             : !bufferBeforeWidth\n                    },\n                    style    : `${sizeProp}: ${bufferBeforeWidth}px`,\n                    children : (showDuration && preamble) ? [\n                        {\n                            tag       : 'span',\n                            className : 'b-buffer-label',\n                            html      : preamble.toString(true)\n                        }\n                    ] : undefined\n                },\n                {\n                    className : {\n                        'b-sch-event-buffer'       : 1,\n                        'b-sch-event-buffer-after' : 1,\n                        'b-buffer-thin'            : !bufferAfterWidth\n                    },\n                    style    : `${sizeProp}: ${bufferAfterWidth}px`,\n                    children : (showDuration && postamble) ? [\n                        {\n                            tag       : 'span',\n                            className : 'b-buffer-label',\n                            html      : postamble.toString(true)\n                        }\n                    ] : undefined\n                }\n            );\n        }\n    }\n\n    //endregion\n\n    updateShowDuration() {\n        if (!this.isConfiguring) {\n            this.client.refreshWithTransition();\n        }\n    }\n\n    doDisable(disable) {\n        super.doDisable(disable);\n\n        const { client } = this;\n\n        if (!client.isConfiguring && client.isPainted) {\n            // Add a special CSS class to disable certain transitions\n            client.element.classList.add('b-eventbuffer-transition');\n\n            client.refreshWithTransition();\n\n            client.waitForAnimations().then(() => {\n                client.element.classList.remove('b-eventbuffer-transition');\n            });\n        }\n    }\n}\n\nGridFeatureManager.registerFeature(EventBuffer, false, 'SchedulerPro');\n", "import EventDrag from '../../Scheduler/feature/EventDrag.js';\nimport DateHelper from '../../Core/helper/DateHelper.js';\nimport Rectangle from '../../Core/helper/util/Rectangle.js';\nimport GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\n\n/**\n * @module SchedulerPro/feature/EventSegmentDrag\n */\n\n/**\n * Allows user to drag and drop event segments within the row.\n *\n * {@inlineexample SchedulerPro/feature/EventSegments.js}\n *\n * This feature is **enabled** by default\n *\n * @extends Scheduler/feature/EventDrag\n * @classtype eventSegmentDrag\n * @feature\n */\nexport default class EventSegmentDrag extends EventDrag {\n    //region Config\n\n    static $name = 'EventSegmentDrag';\n\n    static get defaultConfig() {\n        return {\n            constrainDragToResource : true\n        };\n    }\n\n    static get configurable() {\n        return {\n            capitalizedEventName : 'EventSegment'\n        };\n    }\n\n    static get pluginConfig() {\n        return {\n            chain : ['onPaint', 'isEventElementDraggable']\n        };\n    }\n\n    //endregion\n\n    //region Events\n\n    /**\n     * Fired on the owning Scheduler to allow implementer to use asynchronous finalization by setting\n     * `context.async = true` in the listener, to show a confirmation popup etc.\n     * ```javascript\n     *  scheduler.on('beforeEventSegmentDropFinalize', ({ context }) => {\n     *      context.async = true;\n     *      setTimeout(() => {\n     *          // async code don't forget to call finalize\n     *          context.finalize();\n     *      }, 1000);\n     *  })\n     * ```\n     *\n     * For synchronous one-time validation, simply set `context.valid` to true or false.\n     * ```javascript\n     *  scheduler.on('beforeEventSegmentDropFinalize', ({ context }) => {\n     *      context.valid = false;\n     *  })\n     * ```\n     * @event beforeEventSegmentDropFinalize\n     * @on-owner\n     * @param {Scheduler.view.Scheduler} source Scheduler instance\n     * @param {Object} context\n     * @param {Boolean} context.async Set true to not finalize the drag-drop operation immediately (e.g. to wait for user confirmation)\n     * @param {Scheduler.model.EventModel[]} context.eventRecords Dragged segments\n     * @param {Boolean} context.valid Set this to `false` to abort the drop immediately.\n     * @param {Function} context.finalize Call this method after an **async** finalization flow, to finalize the drag-drop operation. This method accepts one\n     * argument: pass `true` to update records, or `false` to ignore changes\n     */\n\n    /**\n     * Fired on the owning Scheduler after an event segment is dropped\n     * @event afterEventSegmentDrop\n     * @on-owner\n     * @param {Scheduler.view.Scheduler} source\n     * @param {Scheduler.model.EventModel[]} eventRecords Dropped segments\n     * @param {Boolean} valid\n     * @param {Object} context\n     */\n\n    /**\n     * Fired on the owning Scheduler when an event segment is dropped\n     * @event eventSegmentDrop\n     * @on-owner\n     * @param {Scheduler.view.Scheduler} source\n     * @param {Scheduler.model.EventModel[]} eventRecords Dropped segments\n     */\n\n    /**\n     * Fired on the owning Scheduler before event segment dragging starts. Return `false` to prevent the action.\n     * @event beforeEventSegmentDrag\n     * @on-owner\n     * @preventable\n     * @param {Scheduler.view.Scheduler} source Scheduler instance\n     * @param {Scheduler.model.EventModel[]} eventRecords Segments to drag\n     * @param {MouseEvent} event Browser event\n     */\n\n    /**\n     * Fired on the owning Scheduler when event segment dragging starts\n     * @event eventSegmentDragStart\n     * @on-owner\n     * @param {Scheduler.view.Scheduler} source Scheduler instance\n     * @param {Scheduler.model.EventModel[]} eventRecords Dragged segments\n     * @param {MouseEvent} event Browser event\n     */\n\n    /**\n     * Fired on the owning Scheduler when event segments are dragged\n     * @event eventSegmentDrag\n     * @on-owner\n     * @param {Scheduler.view.Scheduler} source Scheduler instance\n     * @param {Scheduler.model.EventModel[]} eventRecords Dragged segments\n     * @param {Date} startDate Start date for the current location\n     * @param {Date} endDate End date for the current location\n     * @param {Object} context\n     * @param {Boolean} context.valid Set this to `false` to signal that the current drop position is invalid.\n     */\n\n    /**\n     * Fired on the owning Scheduler after an event segment drag operation has been aborted\n     * @event eventSegmentDragAbort\n     * @on-owner\n     * @param {Scheduler.view.Scheduler} source Scheduler instance\n     * @param {Scheduler.model.EventModel[]} eventRecords Dragged segments\n     */\n    /**\n     * Fired on the owning Scheduler after an event segment drag operation regardless of the operation being cancelled\n     * or not\n     * @event eventSegmentDragReset\n     * @on-owner\n     * @param {Scheduler.view.Scheduler} source Scheduler instance\n     */\n    //endregion\n\n    //region Drag events\n\n    getTriggerParams(dragData) {\n        const { assignmentRecords, eventRecords, resourceRecord, browserEvent: event } = dragData;\n\n        return {\n            // `context` is now private, but used in WebSocketHelper\n            context : dragData,\n            eventRecords,\n            resourceRecord,\n            assignmentRecords,\n            event\n        };\n    }\n\n    triggerEventDrag(dragData, start) {\n        this.scheduler.trigger('eventSegmentDrag', Object.assign(this.getTriggerParams(dragData), {\n            startDate : dragData.startDate,\n            endDate   : dragData.endDate\n        }));\n    }\n\n    triggerDragStart(dragData) {\n        this.scheduler.navigator.skipNextClick = true;\n\n        this.scheduler.trigger('eventSegmentDragStart', this.getTriggerParams(dragData));\n    }\n\n    triggerDragAbort(dragData) {\n        this.scheduler.trigger('eventSegmentDragAbort', this.getTriggerParams(dragData));\n    }\n\n    triggerDragAbortFinalized(dragData) {\n        this.scheduler.trigger('eventSegmentDragAbortFinalized', this.getTriggerParams(dragData));\n    }\n\n    triggerAfterDrop(dragData, valid) {\n        this.scheduler.trigger('afterEventSegmentDrop', Object.assign(this.getTriggerParams(dragData), {\n            valid\n        }));\n\n        if (!valid) {\n            // Edge cases:\n            // 1. If this drag was a no-op, and underlying data was changed while drag was ongoing (e.g. web socket\n            // push), we need to manually force a view refresh to ensure a correct render state\n            //\n            // or\n            // 2. Events were removed before we dropped at an invalid point\n            const\n                { assignmentStore, eventStore } = this.client,\n                needRefresh                     = this.dragData.initialAssignmentsState.find(({\n                    resource, assignment\n                }, i) => {\n                    return !assignmentStore.includes(assignment) ||\n                        !eventStore.includes(assignment.event) ||\n                        resource.id !== this.dragData.assignmentRecords[i]?.resourceId;\n                });\n\n            if (needRefresh) {\n                this.client.refresh();\n            }\n        }\n    }\n\n    //endregion\n\n    //region Update records\n\n    /**\n     * Update events being dragged.\n     * @private\n     * @param context Drag data.\n     * @async\n     */\n    async updateRecords(context) {\n        const\n            me             = this,\n            { client }     = me,\n            copyKeyPressed = false;\n\n        let result;\n\n        if (!context.externalDropTarget) {\n            client.eventStore.suspendAutoCommit();\n\n            result = await me.updateSegment(client, context, copyKeyPressed);\n\n            client.eventStore.resumeAutoCommit();\n        }\n\n        // Tell the world there was a successful drop\n        client.trigger('eventSegmentDrop', Object.assign(me.getTriggerParams(context), {\n            isCopy               : copyKeyPressed,\n            event                : context.browserEvent,\n            targetEventRecord    : context.targetEventRecord,\n            targetResourceRecord : context.newResource,\n            externalDropTarget   : context.externalDropTarget\n        }));\n\n        return result;\n    }\n\n    /**\n     * Update assignments being dragged\n     * @private\n     * @async\n     */\n    async updateSegment(client, context) {\n        // The code is written to emit as few store events as possible\n        const\n            me                  = this,\n            isVertical          = client.mode === 'vertical',\n            {\n                eventRecords,\n                assignmentRecords,\n                timeDiff\n            }                   = context;\n\n        client.suspendRefresh();\n\n        let updated = false;\n\n        if (isVertical) {\n            // <remove-on-release>\n            // TODO: Broken after merge, figure it out\n            // </remove-on-release>\n            eventRecords.forEach((draggedEvent, i) => {\n                const eventBar = context.eventBarEls[i];\n\n                delete draggedEvent.instanceMeta(client).hasTemporaryDragElement;\n\n                // If it was created by a call to scheduler.currentOrientation.addTemporaryDragElement\n                // then release it back to be available to DomSync next time the rendered event block\n                // is synced.\n                if (eventBar.dataset.transient) {\n                    eventBar.remove();\n                }\n            });\n        }\n\n        const\n            eventBarEls  = context.eventBarEls.slice(),\n            draggedEvent = context.eventRecord,\n            newStartDate = me.adjustStartDate(context.origStart, timeDiff);\n\n        if (!DateHelper.isEqual(draggedEvent.startDate, newStartDate)) {\n\n            client.endListeningForBatchedUpdates();\n\n            me.cancelBatchUpdate(draggedEvent);\n\n            draggedEvent.startDate = newStartDate;\n\n            updated = true;\n\n            await client.project.commitAsync();\n\n            me.endBatchUpdate?.(draggedEvent);\n        }\n\n        client.resumeRefresh();\n\n        if (assignmentRecords.length > 0) {\n            if (!updated) {\n                context.valid = false;\n            }\n            else {\n                // https://github.com/bryntum/support/issues/630\n                // Force re-render when using fillTicks. If date changed within same tick the element won't actually\n                // change and since we hijacked it for drag it won't be returned to its original position\n                if (client.fillTicks) {\n                    eventBarEls.forEach(el => delete el.lastDomConfig);\n                }\n\n                // Not doing full refresh above, to allow for animations\n                client.refreshWithTransition();\n            }\n        }\n    }\n\n    //endregion\n\n    //region Drag data\n\n    // Prevent event draggind when it starts over a resize handle\n    isEventElementDraggable(eventElement, eventRecord, el, event) {\n        const me = this;\n\n        // ALLOW event drag:\n        // - if segments dragging is disabled or event is not segmented\n        if (me.disabled || !(eventRecord.isEventSegment || eventRecord.segments)) {\n            return true;\n        }\n\n        // otherwise make sure EventDrag is not trying to handle a segment element drag\n        return !el.closest(me.drag.targetSelector);\n    }\n\n    buildDragHelperConfig() {\n        const config = super.buildDragHelperConfig();\n\n        config.targetSelector = '.b-sch-event-segment:not(.b-first)';\n\n        return config;\n    }\n\n    getMinimalDragData(info) {\n        const\n            me                = this,\n            { client }        = me,\n            element           = me.getElementFromContext(info),\n            eventRecord       = client.resolveEventRecord(element),\n            resourceRecord    = client.resolveResourceRecord(element),\n            assignmentRecord  = client.resolveAssignmentRecord(element),\n            assignmentRecords = assignmentRecord ? [assignmentRecord] : [],\n            eventRecords      = [eventRecord];\n\n        return {\n            eventRecord,\n            resourceRecord,\n            assignmentRecord,\n            eventRecords,\n            assignmentRecords\n        };\n    }\n\n    beginBatchUpdate(eventRecord) {\n        eventRecord.event.beginBatch();\n        eventRecord.beginBatch();\n    }\n\n    endBatchUpdate(eventRecord) {\n        // could be no \"event\" if segments got merged after dragging\n        eventRecord.event?.endBatch();\n        eventRecord.endBatch();\n    }\n\n    cancelBatchUpdate(eventRecord) {\n        eventRecord.event?.cancelBatch();\n        eventRecord.cancelBatch();\n    }\n\n    setupProductDragData(info) {\n        const\n            me            = this,\n            { client }    = me,\n            element       = me.getElementFromContext(info),\n            {\n                eventRecord,\n                resourceRecord\n            }             = me.getMinimalDragData(info),\n            eventBarEls   = [],\n            mainEventElement = client.getElementsFromEventRecord(eventRecord.event, resourceRecord, true)[0];\n\n        if (me.constrainDragToResource && !resourceRecord) {\n            throw new Error('Resource could not be resolved for event: ' + eventRecord.id);\n        }\n\n        // We tweak last segment drag in RTL mode so its X-ccordinate is always zero\n        // so we have to tell DragHelper to still process corresponding drop event though\n        // the coordinate hasn't changed\n        me.drag.ignoreSamePositionDrop = !client.rtl || eventRecord.nextSegment;\n\n        // During this batch we want the client's UI to update itself using the proposed changes\n        // Only if startDrag has not already done it\n        if (!client.listenToBatchedUpdates) {\n            client.beginListeningForBatchedUpdates();\n        }\n\n        // Do changes in batch mode while dragging\n        me.beginBatchUpdate(eventRecord);\n\n        const\n            dateConstraints    = me.getDateConstraints?.(resourceRecord, eventRecord),\n            constrainRectangle = me.constrainRectangle = me.getConstrainingRectangle(dateConstraints, resourceRecord, eventRecord),\n            eventRegion        = Rectangle.from(element, client.foregroundCanvas, true),\n            mainEventRegion    = Rectangle.from(mainEventElement, client.foregroundCanvas, true);\n\n        // For segment we shift constrainRectangle by the main event offset\n        constrainRectangle.translate(-mainEventRegion.x);\n\n        super.setupConstraints(\n            constrainRectangle,\n            eventRegion,\n            client.timeAxisViewModel.snapPixelAmount,\n            Boolean(dateConstraints.start)\n        );\n\n        eventBarEls.push(element);\n\n        return {\n            record          : eventRecord,\n            draggedEntities : [eventRecord],\n            dateConstraints : dateConstraints?.start ? dateConstraints : null,\n            eventBarEls,\n            mainEventElement\n        };\n    }\n\n    suspendRecordElementRedrawing() {}\n\n    suspendElementRedrawing() {}\n\n    getDateConstraints(resourceRecord, eventRecord) {\n        let { minDate, maxDate } = super.getDateConstraints(resourceRecord, eventRecord);\n\n        // A segment movement is constrained by its neighbour segments if any\n        if (eventRecord.previousSegment && (!minDate || minDate < eventRecord.previousSegment.endDate)) {\n            minDate = eventRecord.previousSegment.endDate;\n        }\n\n        if (eventRecord.nextSegment && (!maxDate || maxDate < eventRecord.nextSegment.startDate)) {\n            maxDate = eventRecord.nextSegment.startDate;\n        }\n\n        return {\n            start : minDate,\n            end   : maxDate\n        };\n    }\n\n    get tipId() {\n        return `${this.client.id}-segment-drag-tip`;\n    }\n\n    internalSnapToPosition(snapTo) {\n        super.internalSnapToPosition();\n\n        // for RTL we pin last segment to 0px offset ..the main event element will get updated\n        if (this.client.rtl && !this.dragData.eventRecord.nextSegment) {\n            snapTo.x = 0;\n        }\n    }\n\n    updateDragContext(context, event) {\n        super.updateDragContext(...arguments);\n\n        const\n            { client } = this,\n            {\n                dirty,\n                eventRecord,\n                endDate\n            } = this.dragData;\n\n        // If dragging the last segment update the main event width accordingly\n        // need this to update dependency properly while dragging\n        if (dirty && !eventRecord.nextSegment) {\n\n            const { enableEventAnimations } = client;\n\n            client.enableEventAnimations = false;\n\n            eventRecord.event.set('endDate', endDate);\n\n            if (client.features.eventBuffer?.enabled) {\n                eventRecord.event.wrapEndDate = endDate;\n            }\n\n            client.enableEventAnimations = enableEventAnimations;\n        }\n    }\n\n    //endregion\n}\n\nGridFeatureManager.registerFeature(EventSegmentDrag, true, 'SchedulerPro');\nGridFeatureManager.registerFeature(EventSegmentDrag, false, 'ResourceHistogram');\n", "import ArrayHelper from '../../Core/helper/ArrayHelper.js';\nimport DateHelper from '../../Core/helper/DateHelper.js';\nimport DomHelper from '../../Core/helper/DomHelper.js';\nimport DomSync from '../../Core/helper/DomSync.js';\nimport Rectangle from '../../Core/helper/util/Rectangle.js';\nimport Delayable from '../../Core/mixin/Delayable.js';\nimport InstancePlugin from '../../Core/mixin/InstancePlugin.js';\nimport GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\nimport AttachToProjectMixin from '../../Scheduler/data/mixin/AttachToProjectMixin.js';\n\n/**\n * @module SchedulerPro/feature/NestedEvents\n */\n\nconst borderWidths     = {\n    border : 1,\n    hollow : 2\n};\n\n// Future improvements might include:\n// * Add info to EventTooltip, parent could display number of children, child could display parent name\n// * Add parent picker to EventEdit\n// * Handle reassigning in editor, what happens if you reassign to a resource that events parent is not assigned to...\n\n// <remove-on-release>\n// TODO: Fix dependencies between parents - needs arcady\n// </remove-on-release>\n\n/**\n * A feature that renders child events nested inside their parent. Requires Scheduler Pro to use a tree event store\n * (normally handled automatically when events in data has children) and it is limited to one level of nesting.\n *\n * {@inlineexample SchedulerPro/feature/NestedEvents.js}\n *\n * The feature has configs for {@link #config-eventLayout}, {@link #config-resourceMargin} and {@link #config-barMargin}\n * that are separate from those on Scheduler Pro and only affect nested events.\n *\n * You can by default drag nested events out of their parents and drop any event onto root level events to nest. The\n * drag and drop behaviour can be customized using the {@link #config-constrainDragToParent},\n * {@link #config-allowNestingOnDrop} and {@link #config-allowDeNestingOnDrop} configs.\n *\n * <div class=\"note\">Note that for a nested event to show up for a resource both the parent and the nested event has to\n * be assigned to that resource.</div>\n *\n * ## Parent / children scheduling\n *\n * Scheduler Pro uses a scheduling engine closely related to the one used by Gantt (a subset of it). It for example\n * schedules based on calendars, dependencies and constraints. Part of its default logic is that parent events start and\n * end dates (and thus duration) is defined by their children. This means that if you remove the latest scheduled child\n * of a parent, the parents end date and duration will be adjusted to match the new latest scheduled child.\n *\n * Depending on what you plan to use nested events for in your application, this might not be the desired behaviour. If\n * you want the parent element to keep its dates regardless of its children, you should flag it as\n * {@link SchedulerPro/model/EventModel#field-manuallyScheduled}.\n *\n * A parent defined like this will shrink / grow with its children:\n *\n * ```json\n * {\n *     \"id\"        : 1,\n *     \"startDate\" : \"2022-03-24\",\n *     \"children\"  : [\n *         ...\n *     ]\n * }\n * ```\n *\n * Try removing an event here to see what happens:\n *\n * {@inlineexample SchedulerPro/feature/NestedEventsNotManually.js}\n *\n * A parent with `manuallyScheduled : true` will **not** shrink / grow with is children:\n *\n * ```json\n * {\n *     \"id\"                : 1,\n *     \"startDate\"         : \"2022-03-24\",\n *     \"duration\"          : 10,\n *     \"manuallyScheduled\" : true\n *     \"children\"          : [\n *         ...\n *     ]\n * }\n * ```\n *\n * Try the same thing here:\n *\n * {@inlineexample SchedulerPro/feature/NestedEventsManually.js}\n *\n * <div class=\"note\">Note that this also makes resizing a parent event that is not manually scheduled useless, it would\n * only snap back to the dates defined by its children. To avoid confusion, resizing is therefor turned off for parent\n * events unless they have `manuallyScheduled: true`</div>\n *\n * ## Drag and drop for parent events\n *\n * Normally the dates of a parent event is defined by its children (as described above), with exception for when drag\n * dropping a parent event along the time axis. In this case the operation will update the dates of all the children,\n * which will thus also move the parent event in time.\n *\n * If a parent event is dragged to a new resource, all its children will also be assigned to that resource.\n *\n * ## Caveats\n *\n * Usage of the feature comes with some requirements/caveats:\n * * As already mentioned, it requires a tree event store\n * * Requires using an AssignmentStore, the legacy single assignment mode does not handle tree stores\n * * Scheduler must use stack or overlap {@link SchedulerPro/view/SchedulerPro#config-eventLayout}, pack not supported\n * * {@link Scheduler/feature/Dependencies} are not supported for nested events\n * * {@link Scheduler/feature/EventDragSelect} is not supported\n * * Multi event drag is not supported for nested events\n * * Cannot {@link Scheduler/feature/EventDragCreate} within parent events\n * * {@link Scheduler/feature/Labels} are not supported for nested events\n * * {@link SchedulerPro/feature/EventBuffer} won't work with nested events\n * * {@link SchedulerPro/feature/TaskEdit} does not allow assigning resources or dependencies to nested events\n *\n * This feature is **off** by default. For info on enabling it, see {@link Grid.view.mixin.GridFeatures}.\n *\n * @classtype nestedEvents\n * @feature\n */\nexport default class NestedEvents extends InstancePlugin.mixin(AttachToProjectMixin, Delayable) {\n    static $name = 'NestedEvents';\n\n    //region Config\n\n    static configurable = {\n        /**\n         * This config defines how to handle overlapping nested events. Valid values are:\n         * - `stack`, events use fixed height and stack on top of each other (not supported in vertical mode)\n         * - `pack`, adjusts event height\n         * - `none`, allows events to overlap\n         *\n         * <div class=\"note\">Note that stacking works differently for nested events as compared to normal events (and\n         * not at all in vertical mode). The height of the parent event will never change, all nested events use\n         * {@link #config-eventHeight fixed height} and will stack until all available space is consumed, after which\n         * they will overflow the parent.</div>\n         *\n         * <div class=\"note\">Also note that stacked nested events are clipped by the parent, making it scrollable on\n         * vertical overflow. This cannot be combined with sticky events. If stacking events in your app won't overflow\n         * the parent, you can specify `overflow: visible` on `.b-nested-events-container.b-nested-events-layout-stack`\n         * to not clip and make sticky events work.</div>\n         *\n         * @prp {'stack'|'pack'|'none'}\n         * @default\n         */\n        eventLayout : 'pack',\n\n        /**\n         * Vertical (horizontal in vertical mode) space between nested event bars, in px\n         * @prp {Number}\n         * @default\n         */\n        barMargin : 5,\n\n        /**\n         * Margin above first nested event bar and below last (or before / after in vertical mode), in px\n         * @prp {Number}\n         * @default\n         */\n        resourceMargin : 0,\n\n        /**\n         * Fixed event height (width in vertical mode) to use when configured with `eventLayout : 'stack'`.\n         * @prp {Number}\n         * @default\n         */\n        eventHeight : 30,\n\n        /**\n         * Space (in px) in a parent element reserved for displaying a title etc. Used to compute available space for\n         * the nested events container inside the parent.\n         *\n         * Setting this config updates the ` --schedulerpro-nested-event-header-height` CSS variable.\n         *\n         * @prp {Number}\n         * @default\n         */\n        headerHeight : 20,\n\n        /**\n         * Constrains dragging of nested events within their parent when configured as `true`, allows them to be\n         * dragged out of it when configured as `false` (the default).\n         * @prp {Boolean}\n         * @default\n         */\n        constrainDragToParent : false,\n\n        /**\n         * Allow an event to be dropped on another to nest it.\n         *\n         * Dropping an event on another will add the dropped event as a child of the target, turning the target into a\n         * parent if it was not already.\n         *\n         * Parent events dropped on another event are ignored.\n         *\n         * @prp {Boolean}\n         * @default\n         */\n        allowNestingOnDrop : true,\n\n        /**\n         * Allow dropping a nested event directly on a resource to de-nest it, turning it into an ordinary event.\n         *\n         * Requires {@link #config-constrainDragToParent} to be configured with `false` to be applicable.\n         *\n         * @prp {Boolean}\n         * @default\n         */\n        allowDeNestingOnDrop : true,\n\n        /**\n         * Constrains resizing of nested events to their parents start and end dates when configured as `true` (the\n         * default), preventing them from changing their parents dates.\n         *\n         * Configure as `false` if you want to allow resizing operations to extend the parents dates (only applies for\n         * parents not configured with `manuallyScheduled: true`).\n         *\n         * <div class=\"note\">Note that when using `eventLayout: stack` the nested events are clipped by the parent, the\n         * part extending outside if not constrained to parent will not be shown until it re-renders after resize. If\n         * stacking events in your app won't overflow the parent, you can specify `overflow: visible` on\n         * `.b-nested-events-container.b-nested-events-layout-stack` to not clip.</div>\n         *\n         * @prp {Boolean}\n         * @default\n         */\n        constrainResizeToParent : true\n    };\n\n    static pluginConfig = {\n        before : ['onEventStoreBatchedUpdate'],\n        chain  : [\n            'getEventsToRender', 'onEventDataGenerated', 'processEventDrop', 'processCrossSchedulerEventDrop',\n            'beforeEventDragStart', 'afterEventDragStart', 'afterEventDragAbortFinalized',\n            'checkEventDragValidity', 'afterEventResizeStart'\n        ],\n        override : [\n            'getResourceMargin', 'getBarMargin', 'getAppliedResourceHeight', 'getResourceWidth', 'getEventLayout',\n            'getElementFromAssignmentRecord', 'scheduleEvent'\n        ]\n    };\n\n    static delayable = {\n        refreshClient : 'raf'\n    };\n\n    //endregion\n\n    construct(client, config) {\n        super.construct(client, config);\n\n        // EventStore has to be a tree store for the feature to work.\n        // If it starts empty, it might not be flagged as such. Help it out.\n        this.client.eventStore.tree = true;\n    }\n\n    refreshClient() {\n        !this.client.isConfiguring && this.client.refreshWithTransition();\n    }\n\n    doDisable() {\n        this.refreshClient();\n    }\n\n    //region Props\n\n    updateEventLayout(layout) {\n        if (layout === 'stack' && this.client.isVertical) {\n            console.warn('Stacked nested events are not supported in vertical mode');\n        }\n\n        this.refreshClient();\n    }\n\n    updateBarMargin() {\n        this.refreshClient();\n    }\n\n    updateResourceMargin() {\n        this.refreshClient();\n    }\n\n    updateEventHeight() {\n        this.refreshClient();\n    }\n\n    updateHeaderHeight(height) {\n        this.client.element.style.setProperty('--schedulerpro-nested-event-header-height', `${height}px`);\n        this.refreshClient();\n    }\n\n    // Nested events has their own layout setting\n    getEventLayout(resourceRecord, parentEventRecord) {\n        if (parentEventRecord) {\n            return { type : this.eventLayout };\n        }\n\n        return this.overridden.getEventLayout(resourceRecord);\n    }\n\n    // Specific resource margin for nested events\n    getResourceMargin(resourceRecord, parentEventRecord) {\n        if (parentEventRecord && !parentEventRecord.isRoot) {\n            return this.resourceMargin;\n        }\n\n        return this.overridden.getResourceMargin(resourceRecord);\n    }\n\n    // Specific bar margin for nested events\n    getBarMargin(resourceRecord, parentEventRecord) {\n        if (parentEventRecord && !parentEventRecord.isRoot) {\n            return this.barMargin;\n        }\n\n        return this.overridden.getBarMargin(resourceRecord);\n    }\n\n    // Use height available inside the parent event\n    getAppliedResourceHeight(resourceRecord, parentEventRecord) {\n        const me = this;\n\n        if (parentEventRecord && !parentEventRecord.isRoot) {\n            if (me.eventLayout === 'stack') {\n                // Layout subtracts resourceMargin * 2, added here to get eventHeight correct after\n                return me.eventHeight + me.resourceMargin * 2;\n            }\n            else {\n                const borderWidth = borderWidths[me.client.getEventStyle(parentEventRecord, resourceRecord)] ?? 0;\n\n                return me.currentParentsHeight - me.headerHeight - borderWidth;\n            }\n        }\n\n        return me.overridden.getAppliedResourceHeight(resourceRecord);\n    }\n\n    getResourceWidth(resourceRecord, parentEventRecord) {\n        if (parentEventRecord && !parentEventRecord.isRoot) {\n            return this.currentParentsWidth - this.headerHeight;\n        }\n\n        return this.overridden.getResourceWidth(resourceRecord);\n    }\n\n    //endregion\n\n    //region CRUD listeners\n\n    attachToEventStore(eventStore) {\n        eventStore?.ion({\n            name    : 'eventStore',\n            change  : 'onEventStoreChange',\n            thisObj : this\n        });\n    }\n\n    onEventStoreChange({ records }) {\n        // Refresh if a nested event was changed\n        if (records?.some(r => r.parent && !r.parent.isRoot)) {\n            this.refreshClient();\n        }\n    }\n\n    onEventStoreBatchedUpdate({ records }) {\n        // Refresh if a nested event was changed, and we are listening for batched changes (resizing)\n        if (this.client.listenToBatchedUpdates && records?.some(r => r.parent && !r.parent.isRoot)) {\n            this.refreshClient();\n            // Prevent default handler\n            return false;\n        }\n    }\n\n    //endregion\n\n    //region Drag\n\n    // Move event element to foreground canvas during drag. Has to happen before drag starts for the feature to pick up\n    // correct coordinates to resolve resource by, transition back to on abort etc.\n    beforeEventDragStart(context, dragData) {\n        const\n            me                                 = this,\n            { client }                         = me,\n            { eventRecord, assignmentRecords } = dragData,\n            { parentElement }                  = context.element;\n\n        // Dragging nested events?\n        if (eventRecord.parent && parentElement !== client.foregroundCanvas) {\n            me.isDraggingNestedEvent = true;\n\n            // Remember origin to be able to restore on abort (success redraws so that will be covered anyway)\n            context.originalParentElement = parentElement;\n            context.originalBounds = [];\n\n            for (const assignment of assignmentRecords) {\n                const { event } = assignment;\n\n                // UI should not allow selecting nested events from different parents, but it is programmatically\n                // possible. We only include from the dragged events parent here, behaviour for mixed parents are for\n                // now undefined\n                if (event.parent === eventRecord.parent) {\n                    const eventElement = client.getElementFromAssignmentRecord(assignment, true);\n\n                    context.originalBounds.push({\n                        element : eventElement,\n                        bounds  : Rectangle.from(eventElement, parentElement)\n                    });\n\n                    if (!me.constrainDragToParent && client.features.eventDrag.constrainDragToTimeline) {\n                        // Pull nested events out\n                        const relativeBounds = Rectangle.from(eventElement, client.timeAxisSubGridElement);\n                        eventElement.style.top = `${relativeBounds.top}px`;\n                        eventElement.style.left = `${relativeBounds.left}px`;\n\n                        DomSync.addChild(client.foregroundCanvas, eventElement, assignment.id);\n                    }\n                }\n            }\n        }\n        else {\n            me.isDraggingNestedEvent = false;\n        }\n    }\n\n    // Setup constraints when drag starts if needed\n    afterEventDragStart(context, dragData) {\n        // Constrain to current parent?\n        if (this.isDraggingNestedEvent && this.constrainDragToParent) {\n            const\n                { eventDrag } = this.client.features,\n                { parent }    = dragData.eventRecord,\n                parentBounds  = context.originalParentElement.getBoundingClientRect();\n\n            // Constrain top / bottom\n            eventDrag.setYConstraint(0, parentBounds.height - context.originalBounds[0].bounds.height);\n\n            // For left / right we also have to constrain the dates, otherwise only the element will be constrained\n            eventDrag.setXConstraint(0, parentBounds.width - context.originalBounds[0].bounds.width);\n            dragData.dateConstraints = { start : parent.startDate, end : parent.endDate };\n        }\n    }\n\n    checkEventDragValidity({ targetEventRecord, eventRecord, timeDiff, newResource, resourceRecord }) {\n        const me = this;\n\n        // Disallow dropping on a blank space in a resource if configured to not allow de-nesting\n        // (ignore first round, targetEventRecord cannot be resolved until on next, which we determine here by checking\n        // timeDiff or resource change)\n        if (me.isDraggingNestedEvent && !me.allowDeNestingOnDrop && !targetEventRecord && (timeDiff || newResource !== resourceRecord)) {\n            return {\n                valid   : false,\n                message : me.L('L{deNestingNotAllowed}')\n            };\n        }\n\n        // Disallow dropping on a new parent if configured to not allow nesting\n        if (!me.allowNestingOnDrop && targetEventRecord && targetEventRecord !== eventRecord.parent) {\n            return {\n                valid   : false,\n                message : me.L('L{nestingNotAllowed}')\n            };\n        }\n    }\n\n    // Move event to new parent if dropped on a parent or moved out of one\n    processEventDrop({ context, toScheduler, eventRecord, resourceRecord, reassignedFrom, element, eventsToAdd, addedEvents, draggedAssignment }) {\n        const\n            { parent }            = eventRecord,\n            { targetEventRecord } = context;\n\n        let newParent = parent;\n\n        // targetEventRecord is resolved using mouse coords, it might be outside of parent when constrained thus\n        // we have to check if constrained here to not move it out by mistake\n        if (parent !== targetEventRecord && !this.constrainDragToParent && !eventRecord.children?.length) {\n            // Dropped on a new parent and allowed to nest\n            if (targetEventRecord && this.allowNestingOnDrop) {\n                newParent = targetEventRecord.parent.isRoot ? targetEventRecord : targetEventRecord.parent;\n                // We resolve resource and targetEventRecord differently (mouse vs element), might get next resource so\n                // we re-resolve here to be sure it is correct\n                const targetResource = this.client.resolveResourceRecord(context.browserEvent);\n                if (targetResource !== resourceRecord) {\n                    resourceRecord = draggedAssignment.resource = targetResource;\n                }\n            }\n            // Dropped directly on resource and allowed to de-nest (cant get here if not allowed, blocked in validation)\n            else {\n                newParent = toScheduler.eventStore.rootNode;\n            }\n\n            if (newParent && newParent !== parent) {\n                addedEvents.push(newParent.appendChild(eventRecord));\n                // Don't want to add it to root when dragging to another scheduler\n                ArrayHelper.remove(eventsToAdd, eventRecord);\n            }\n        }\n\n        // Moved parent to new resource, reassign all children assigned to its previous resource\n        if (parent?.isRoot && eventRecord.isParent && reassignedFrom && reassignedFrom !== resourceRecord) {\n            for (const child of eventRecord.children) {\n                const existingAssignment = child.assignments.find(a => a.resource === reassignedFrom);\n                if (existingAssignment) {\n                    existingAssignment.resource = resourceRecord;\n                }\n            }\n        }\n\n        // Add to new parent (or put back in old) matching outer position. If we don't do this element might get released\n        // on DomSync of foregroundCanvas (also this lets it transition within the parent)\n        if (newParent && !newParent.isRoot) {\n            const\n                newParentElement = this.client.getElementFromEventRecord(newParent, resourceRecord).syncIdMap.nestedEventsContainer,\n                intersection     = newParentElement && Rectangle.from(element, newParentElement);\n\n            // If dropped on a root level leaf it has no nested events container yet\n            if (newParentElement) {\n                element.style.top = `${intersection.top}px`;\n                element.style.left = `${intersection.left}px`;\n\n                // If dropped at the same position in a new parent it won't transition into place if it thinks nothing\n                // changed\n                element.lastDomConfig = null;\n\n                DomSync.addChild(newParentElement, element, element.dataset.syncId);\n            }\n        }\n    }\n\n    // Assign all children to same resource when dropping on another scheduler\n    processCrossSchedulerEventDrop({ eventRecord }) {\n        if (eventRecord.isParent) {\n            for (const child of eventRecord.children) {\n                child.resource = eventRecord.resource;\n            }\n        }\n    }\n\n    // Restore element after abort (back to original parent and position)\n    async afterEventDragAbortFinalized({ originalParentElement, originalBounds }) {\n        if (this.isDraggingNestedEvent) {\n            // Wait for any position transition\n            for (const animation of originalBounds[0].element.getAnimations()) {\n                if (animation.transitionProperty === 'top' || animation.transitionProperty === 'left') {\n                    await animation.finished;\n                }\n            }\n\n            for (const { element, bounds } of originalBounds) {\n                // Move it back\n                element.style.top = `${bounds.top}px`;\n                element.style.left = `${bounds.left}px`;\n                originalParentElement.appendChild(element);\n            }\n        }\n    }\n\n    // Limit resizing to parent bounds if configured to do so (it is the default)\n    afterEventResizeStart(context) {\n        if (this.constrainResizeToParent) {\n            const { parent } = context.timespanRecord;\n            if (parent && !parent.isRoot) {\n                let { startDate, endDate } = parent;\n\n                if (context.dateConstraints) {\n                    startDate = DateHelper.max(startDate, context.dateConstraints.start);\n                    endDate = DateHelper.min(endDate, context.dateConstraints.end);\n                }\n\n                context.dateConstraints = {\n                    start : startDate,\n                    end   : endDate\n                };\n            }\n        }\n    }\n\n    //endregion\n\n    //region Overrides to make scheduler work with nested events\n\n    // Let Scheduler resolve nested events too\n    getElementFromAssignmentRecord(assignmentRecord, returnWrapper) {\n        if (assignmentRecord?.event?.parent && !assignmentRecord.event.parent.isRoot) {\n            const parentElement = this.client.getElementFromEventRecord(assignmentRecord.event.parent, assignmentRecord.resource);\n            return DomSync.getChild(parentElement, `nestedEventsContainer.${assignmentRecord.id}${returnWrapper ? '' : '.event'}`);\n        }\n\n        return this.overridden.getElementFromAssignmentRecord(assignmentRecord, returnWrapper);\n    }\n\n    // Allow scheduling nested events by overriding Schedulers implementation\n    async scheduleEvent({ eventRecord, parentEventRecord, startDate, element }) {\n        // When passed a parent, append to it and assign to its resource\n        if (parentEventRecord) {\n            eventRecord.startDate = startDate;\n            eventRecord = parentEventRecord.appendChild(eventRecord);\n            eventRecord.assign(parentEventRecord.resource);\n\n            // When given an element, it is positioned inside the parent and adopted by DomSync, letting it transition\n            if (element) {\n                const\n                    parentElement = this.client.getElementFromEventRecord(parentEventRecord).syncIdMap.nestedEventsContainer,\n                    eventRect     = Rectangle.from(element, parentElement);\n\n                // Clear translate styles used by DragHelper\n                DomHelper.setTranslateXY(element, 0, 0);\n                DomHelper.setTopLeft(element, eventRect.y, eventRect.x);\n\n                DomSync.addChild(parentElement, element, eventRecord.assignments[0].id);\n            }\n\n            await this.client.project.commitAsync();\n        }\n        else {\n            return this.overridden.scheduleEvent(...arguments);\n        }\n    }\n\n    //endregion\n\n    //region Rendering\n\n    // Hook into event collection to filter out children, since they will be rendered inside their parents\n    getEventsToRender(resourceRecord, eventRecords) {\n        if (!this.disabled) {\n            // Only keep direct children of the root (?. in case someone tries to use a flat store)\n            ArrayHelper.remove(eventRecords, ...eventRecords.filter(eventRecord => eventRecord.isEventModel && !eventRecord.parent.isRoot));\n        }\n\n        return eventRecords;\n    }\n\n    // Hook into event render data generation to add nested events (by using mostly the same rendering path as normal\n    // events)\n    onEventDataGenerated({ eventRecord, resourceRecord, wrapperCls, height, width, children, left, top }) {\n        if (eventRecord.isParent) {\n            wrapperCls['b-nested-events-parent'] = 1;\n\n            const me = this;\n\n            me.currentParentsHeight = height;\n            me.currentParentsWidth = width;\n\n            const\n                {\n                    currentOrientation,\n                    isVertical\n                }                      = me.client,\n                assignedChildren       = eventRecord.children.filter(e => e.$linkedResources?.includes(resourceRecord)),\n                // This call uses the same render path as normal events, applying event layout etc. The layout is then\n                // as needed patched up below (to be relative to parent etc)\n                layouts                = currentOrientation.layoutEvents(resourceRecord, assignedChildren, false, eventRecord, me.overlappingEventSorter),\n                nestedEvents           = [];\n\n            let eventsData;\n\n            if (isVertical) {\n                eventsData = [];\n                for (const layout of Object.values(layouts)) {\n                    eventsData.push(layout.renderData);\n                }\n            }\n            else {\n                eventsData = layouts?.eventsData;\n            }\n\n            if (eventsData) {\n                for (const layout of eventsData) {\n                    // Positioned inside parent\n                    if (isVertical) {\n                        layout.left -= left;\n                        layout.top -= top;\n                        layout.absoluteTop = layout.top;\n                    }\n                    else {\n                        // Special handling for overlap, it does not use the same render path as other layouts\n                        if (me.eventLayout === 'none') {\n                            layout.top = 0;\n                            layout.height = me.getAppliedResourceHeight(resourceRecord, eventRecord);\n                        }\n                        // Stack also needs some special handling of height, since it uses fixed event height\n                        else if (me.eventLayout === 'stack') {\n                            layout.height = me.eventHeight;\n                        }\n\n                        layout.left -= left;\n                        layout.absoluteTop = layout.top;\n                    }\n\n                    const domConfig = currentOrientation.renderEvent(isVertical ? { renderData : layout } : layout, height);\n                    domConfig.className['b-nested-event'] = 1;\n                    nestedEvents.push(domConfig);\n                }\n            }\n\n            // Nested event DomConfig\n            children.push({\n                className : {\n                    'b-nested-events-container'                  : 1,\n                    [`b-nested-events-layout-${me.eventLayout}`] : 1\n                },\n                dataset : {\n                    taskBarFeature : 'nestedEventsContainer'\n                },\n                children    : nestedEvents,\n                syncOptions : {\n                    syncIdField      : 'syncId',\n                    releaseThreshold : 0\n                }\n            });\n        }\n    }\n\n    //endregion\n}\n\nGridFeatureManager.registerFeature(NestedEvents, false, 'SchedulerPro');\n", "import GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\nimport ResourceTimeRangesBase from '../../Scheduler/feature/base/ResourceTimeRangesBase.js';\nimport ResourceTimeRangeModel from '../../Scheduler/model/ResourceTimeRangeModel.js';\nimport DateHelper from '../../Core/helper/DateHelper.js';\n\n/**\n * @module SchedulerPro/feature/ResourceNonWorkingTime\n */\n\n/**\n * Feature that highlights the non-working intervals for resources based on their {@link SchedulerPro.model.ResourceModel#field-calendar}.\n * If a resource has no calendar defined, the project's calendar will be used. The non-working time interval can\n * also be recurring. You can find a live example showing how to achieve this in the [Resource Non-Working Time Demo](../examples/resource-non-working-time/).\n *\n * {@inlineexample SchedulerPro/feature/ResourceNonWorkingTime.js}\n *\n * ## Data structure\n * Example data defining calendars and assigning the resources a calendar:\n * ```javascript\n * {\n *   \"success\"   : true,\n *   \"calendars\" : {\n *       \"rows\" : [\n *           {\n *               \"id\"                       : \"day\",\n *               \"name\"                     : \"Day shift\",\n *               \"unspecifiedTimeIsWorking\" : false,\n *               \"cls\"                      : \"dayshift\",\n *               \"intervals\"                : [\n *                   {\n *                       \"recurrentStartDate\" : \"at 8:00\",\n *                       \"recurrentEndDate\"   : \"at 17:00\",\n *                       \"isWorking\"          : true,\n *                   }\n *               ]\n *           }\n *    ],\n *    \"resources\" : {\n *       \"rows\" : [\n *           {\n *               \"id\"         : 1,\n *               \"name\"       : \"George\",\n *               \"calendar\"   : \"day\",\n *               \"role\"       : \"Office\",\n *               \"eventColor\" : \"blue\"\n *           },\n *           {\n *               \"id\"         : 2,\n *               \"name\"       : \"Rob\",\n *               \"calendar\"   : \"day\",\n *               \"role\"       : \"Office\",\n *               \"eventColor\" : \"blue\"\n *           }\n *        ]\n *   [...]\n * ```\n *\n * ```javascript\n * const scheduler = new SchedulerPro({\n *   // A Project holding the data and the calculation engine for Scheduler Pro. It also acts as a CrudManager, allowing\n *   // loading data into all stores at once\n *   project : {\n *       autoLoad  : true,\n *       transport : {\n *           load : {\n *               url : './data/data.json'\n *           }\n *       }\n *   },\n *   features : {\n *       resourceNonWorkingTime : true\n *   },\n *   [...]\n * }):\n * ```\n *\n * ## Styling non-working time interval elements\n *\n * To style the elements representing the non-working time elements you can set the {@link SchedulerPro.model.CalendarModel#field-cls}\n * field in your data. This will add a CSS class to all non-working time elements for the calendar. You can also add\n * an {@link SchedulerPro.model.CalendarModel#field-iconCls} value specifying an icon to display inside the interval.\n *\n * ```javascript\n * {\n *   \"success\"   : true,\n *   \"calendars\" : {\n *       \"rows\" : [\n *           {\n *               \"id\"                       : \"day\",\n *               \"name\"                     : \"Day shift\",\n *               \"unspecifiedTimeIsWorking\" : false,\n *               \"cls\"                      : \"dayshift\",\n *               \"intervals\"                : [\n *                   {\n *                       \"recurrentStartDate\" : \"at 8:00\",\n *                       \"recurrentEndDate\"   : \"at 17:00\",\n *                       \"isWorking\"          : true\n *                   }\n *               ]\n *           }\n *       ]\n *    }\n * }\n * ```\n *\n * You can also add a `cls` value and an `iconCls` to **individual** intervals:\n *\n * ```javascript\n * {\n *   \"success\"   : true,\n *   \"calendars\" : {\n *       \"rows\" : [\n *           {\n *               \"id\"                       : \"day\",\n *               \"name\"                     : \"Day shift\",\n *               \"unspecifiedTimeIsWorking\" : true,\n *               \"intervals\"                : [\n *                   {\n *                      \"startDate\"          : \"2022-03-23T02:00\",\n *                      \"endDate\"            : \"2022-03-23T04:00\",\n *                      \"isWorking\"          : false,\n *                      \"cls\"                : \"factoryShutdown\",\n *                      \"iconCls\"            : \"warningIcon\"\n *                  }\n *               ]\n *           }\n *       ]\n *    }\n * }\n * ```\n *\n * This feature is **off** by default. For info on enabling it, see {@link Grid.view.mixin.GridFeatures}.\n *\n * @extends Scheduler/feature/base/ResourceTimeRangesBase\n * @demo SchedulerPro/resource-non-working-time\n * @classtype resourceNonWorkingTime\n * @feature\n */\nexport default class ResourceNonWorkingTime extends ResourceTimeRangesBase {\n\n    //region Config\n\n    static $name = 'ResourceNonWorkingTime';\n\n    static configurable = {\n        rangeCls : 'b-sch-resourcenonworkingtime',\n\n        /**\n         * The largest time axis unit to display non working ranges for ('hour' or 'day' etc).\n         * When zooming to a view with a larger unit, no non-working time elements will be rendered.\n         *\n         * **Note:** Be careful with setting this config to big units like 'year'. When doing this,\n         * make sure the timeline {@link Scheduler.view.TimelineBase#config-startDate start} and\n         * {@link Scheduler.view.TimelineBase#config-endDate end} dates are set tightly.\n         * When using a long range (for example many years) with non-working time elements rendered per hour,\n         * you will end up with millions of elements, impacting performance.\n         * When zooming, use the {@link Scheduler.view.mixin.TimelineZoomable#config-zoomKeepsOriginalTimespan} config.\n         * @config {'millisecond'|'second'|'minute'|'hour'|'day'|'week'|'month'|'quarter'|'year'}\n         * @default\n         */\n        maxTimeAxisUnit : 'hour',\n\n        /**\n         * Set to `true` to allow mouse interactions with the rendered range elements. By default, the range elements\n         * are not reachable with the mouse, and only serve as a static background.\n         * @prp {Boolean}\n         * @default\n         */\n        enableMouseEvents : false,\n\n        /**\n         * The Model class to use for representing a {@link Scheduler.model.ResourceTimeRangeModel}\n         * @config {Function}\n         */\n        resourceTimeRangeModelClass : ResourceTimeRangeModel,\n\n        entityName : 'resourceNonWorkingTime'\n    };\n\n    // Cannot use `static properties = {}`, new Map would pollute the prototype\n    static get properties() {\n        return {\n            resourceMap : new Map()\n        };\n    };\n\n    //endregion\n\n    //region Constructor\n\n    construct() {\n        super.construct(...arguments);\n\n        this.resourceTimeRangeModelClass = class ResourceNonWorkingTimeModel extends this.resourceTimeRangeModelClass {\n            static $name = 'ResourceNonWorkingTimeModel';\n            static domIdPrefix = 'resourcenonworkingtimemodel';\n        };\n\n        this.client.timeAxis.ion({\n            name        : 'timeAxis',\n            reconfigure : 'onTimeAxisReconfigure',\n            // should trigger before event rendering chain\n            prio        : 100,\n            thisObj     : this\n        });\n    }\n\n    //endregion\n\n    //region Events\n\n    /**\n     * Triggered for mouse down ona resource nonworking time range. Only triggered if the ResourceNonWorkingTime feature is configured\n     * with `enableMouseEvents: true`.\n     * @event resourceNonWorkingTimeMouseDown\n     * @param {SchedulerPro.view.SchedulerPro} source This Scheduler\n     * @param {SchedulerPro.feature.ResourceNonWorkingTime} feature The ResourceNonWorkingTime feature\n     * @param {Scheduler.model.ResourceTimeRangeModel} resourceTimeRangeRecord Resource time range record\n     * @param {Scheduler.model.ResourceModel} resourceRecord Resource record\n     * @param {MouseEvent} domEvent Browser event\n     * @on-owner\n     */\n\n    /**\n     * Triggered for mouse up ona resource nonworking time range. Only triggered if the ResourceNonWorkingTime feature is configured\n     * with `enableMouseEvents: true`.\n     * @event resourceNonWorkingTimeMouseUp\n     * @param {SchedulerPro.view.SchedulerPro} source This Scheduler\n     * @param {SchedulerPro.feature.ResourceNonWorkingTime} feature The ResourceNonWorkingTime feature\n     * @param {Scheduler.model.ResourceTimeRangeModel} resourceTimeRangeRecord Resource time range record\n     * @param {Scheduler.model.ResourceModel} resourceRecord Resource record\n     * @param {MouseEvent} domEvent Browser event\n     * @on-owner\n     */\n\n    /**\n     * Triggered for click on a resource nonworking time range. Only triggered if the ResourceNonWorkingTime feature is configured with\n     * `enableMouseEvents: true`.\n     * @event resourceNonWorkingTimeClick\n     * @param {SchedulerPro.view.SchedulerPro} source This Scheduler\n     * @param {SchedulerPro.feature.ResourceNonWorkingTime} feature The ResourceNonWorkingTime feature\n     * @param {Scheduler.model.ResourceTimeRangeModel} resourceTimeRangeRecord Resource time range record\n     * @param {Scheduler.model.ResourceModel} resourceRecord Resource record\n     * @param {MouseEvent} domEvent Browser event\n     * @on-owner\n     */\n\n    /**\n     * Triggered for double-click on a resource nonworking time range. Only triggered if the ResourceNonWorkingTime feature is configured\n     * with `enableMouseEvents: true`.\n     * @event resourceNonWorkingTimeDblClick\n     * @param {SchedulerPro.view.SchedulerPro} source This Scheduler\n     * @param {SchedulerPro.feature.ResourceNonWorkingTime} feature The ResourceNonWorkingTime feature\n     * @param {Scheduler.model.ResourceTimeRangeModel} resourceTimeRangeRecord Resource time range record\n     * @param {Scheduler.model.ResourceModel} resourceRecord Resource record\n     * @param {MouseEvent} domEvent Browser event\n     * @on-owner\n     */\n\n    /**\n     * Triggered for right-click on a resource nonworking time range. Only triggered if the ResourceNonWorkingTime feature is configured\n     * with `enableMouseEvents: true`.\n     * @event resourceNonWorkingTimeContextMenu\n     * @param {SchedulerPro.view.SchedulerPro} source This Scheduler\n     * @param {SchedulerPro.feature.ResourceNonWorkingTime} feature The ResourceNonWorkingTime feature\n     * @param {Scheduler.model.ResourceTimeRangeModel} resourceTimeRangeRecord Resource time range record\n     * @param {Scheduler.model.ResourceModel} resourceRecord Resource record\n     * @param {MouseEvent} domEvent Browser event\n     * @on-owner\n     */\n\n    /**\n     * Triggered for mouse over on a resource nonworking time range. Only triggered if the ResourceNonWorkingTime feature is configured\n     * with `enableMouseEvents: true`.\n     * @event resourceNonWorkingTimeMouseOver\n     * @param {SchedulerPro.view.SchedulerPro} source This Scheduler\n     * @param {SchedulerPro.feature.ResourceNonWorkingTime} feature The ResourceNonWorkingTime feature\n     * @param {Scheduler.model.ResourceTimeRangeModel} resourceTimeRangeRecord Resource time range record\n     * @param {Scheduler.model.ResourceModel} resourceRecord Resource record\n     * @param {MouseEvent} domEvent Browser event\n     * @on-owner\n     */\n\n    /**\n     * Triggered for mouse out of a resource nonworking time range. Only triggered if the ResourceNonWorkingTime feature is configured\n     * with `enableMouseEvents: true`.\n     * @event resourceNonWorkingTimeMouseOut\n     * @param {SchedulerPro.view.SchedulerPro} source This Scheduler\n     * @param {SchedulerPro.feature.ResourceNonWorkingTime} feature The ResourceNonWorkingTime feature\n     * @param {Scheduler.model.ResourceTimeRangeModel} resourceTimeRangeRecord Resource time range record\n     * @param {Scheduler.model.ResourceModel} resourceRecord Resource record\n     * @param {MouseEvent} domEvent Browser event\n     * @on-owner\n     */\n\n    //endregion\n\n    //region Init\n\n    attachToResourceStore(resourceStore) {\n        super.attachToResourceStore(resourceStore);\n\n        resourceStore?.ion({\n            name            : 'resourceStore',\n            changePreCommit : 'onResourceChange',\n            thisObj         : this\n        });\n    }\n\n    attachToCalendarManagerStore(calendarManagerStore) {\n        super.attachToCalendarManagerStore(calendarManagerStore);\n\n        calendarManagerStore?.ion({\n            name            : 'calendarManagerStore',\n            changePreCommit : 'onCalendarChange',\n            thisObj         : this\n        });\n    }\n\n    //endregion\n\n    //region Events\n\n    onTimeAxisReconfigure() {\n        // reset ranges cache on timeAxis change\n        this.resourceMap.clear();\n    }\n\n    onResourceChange({ action, records, record, changes }) {\n        const me = this;\n\n        // Might need to redraw on update\n        if (action === 'update') {\n            const change = changes.calendar;\n\n            // Ignore calendar normalization\n            if (change && (typeof change.oldValue !== 'string' || change.value?.id !== change.oldValue)) {\n                me.resourceMap.delete(record.id);\n                // Redraw row in case calendar change did not affect any events\n                me.client.runWithTransition(() => {\n                    me.client.currentOrientation.refreshEventsForResource(record);\n                });\n            }\n        }\n\n        // Keep map up to date on removals (adds are handled through rendering in getEventsToRender)\n        if (action === 'remove') {\n            records.forEach(record => me.resourceMap.delete(record.id));\n        }\n\n        if (action === 'removeall') {\n            me.resourceMap.clear();\n        }\n    }\n\n    onCalendarChange({ action, records, record, changes }) {\n        this.resourceMap.clear();\n        this.client.refresh();\n    }\n\n    //endregion\n\n    //region Internal\n\n    // Called on render of resources events to get events to render. Add any ranges\n    // (chained function from Scheduler)\n    getEventsToRender(resource, events) {\n        const\n            me                      = this,\n            { resourceMap, client } = me,\n            { timeAxis }            = client,\n            shouldPaint             = !me.maxTimeAxisUnit || DateHelper.compareUnits(timeAxis.unit, me.maxTimeAxisUnit) <= 0;\n\n        if (!me.disabled && shouldPaint && resource.effectiveCalendar) {\n            if (!resourceMap.has(resource.id)) {\n                const\n                    ranges  = resource.effectiveCalendar.getNonWorkingTimeRanges(\n                        client.startDate,\n                        client.endDate\n                    ),\n                    records = ranges.map((range, i) => new me.resourceTimeRangeModelClass({\n                        id           : `r${resource.id}i${i}`,\n                        iconCls      : range.iconCls || resource.effectiveCalendar.iconCls || '',\n                        cls          : `${resource.effectiveCalendar.cls || ''} ${range.cls || ''}`,\n                        startDate    : range.startDate,\n                        endDate      : range.endDate,\n                        name         : range.name || '',\n                        resourceId   : resource.id,\n                        isNonWorking : true\n                    }));\n\n                resourceMap.set(resource.id, records);\n            }\n\n            events.push(...resourceMap.get(resource.id));\n        }\n\n        return events;\n    }\n\n    shouldInclude({ isNonWorking }) {\n        return isNonWorking;\n    }\n\n    /**\n     * Returns a resource nonworking time range record from the passed element\n     * @param {HTMLElement} rangeElement\n     * @returns {Scheduler.model.ResourceTimeRangeModel}\n     * @category DOM\n     */\n    resolveResourceNonWorkingTimeInterval(rangeElement) {\n        return rangeElement?.closest('.b-sch-resourcenonworkingtime')?.elementData.eventRecord;\n    }\n\n    //endregion\n\n}\n\n// No feature based styling needed, do not add a cls to Scheduler\nResourceNonWorkingTime.featureClass = '';\n\nGridFeatureManager.registerFeature(ResourceNonWorkingTime, false, 'SchedulerPro');\n", "import InstancePlugin from '../../Core/mixin/InstancePlugin.js';\nimport GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\nimport DomHelper from '../../Core/helper/DomHelper.js';\nimport DomSync from '../../Core/helper/DomSync.js';\nimport EventHelper from '../../Core/helper/EventHelper.js';\n\n/**\n * @module SchedulerPro/feature/TimeSpanHighlight\n */\n\nconst\n    timespanDefaults = {\n        isHighlightConfig : true,\n        clearExisting     : false\n    };\n\n/**\n * An object describing the time span region to highlight.\n *\n * @typedef {Object} HighlightTimeSpan\n * @property {Date} startDate A start date constraining the region\n * @property {Date} endDate An end date constraining the region\n * @property {String} name A name to show in the highlight element\n * @property {Scheduler.model.ResourceModel} [resourceRecord] The resource record (applicable for Scheduler only)\n * @property {Core.data.Model} [taskRecord] The task record (applicable for Gantt only)\n * @property {String} [cls] A CSS class to add to the highlight element\n * @property {Boolean} [clearExisting=true] `false` to keep existing highlight elements\n * @property {String} [animationId] An id to enable animation of highlight elements\n * @property {Boolean} [surround=false] True to shade the time axis areas before and after the time span\n * (adds a `b-unavailable` CSS class which you can use for styling)\n * @property {Number} [padding] Inflates the non-timeaxis sides of the region by this many pixels\n */\n\n/**\n * This feature exposes methods on the owning timeline widget which you can use to highlight one or multiple time spans\n * in the schedule. Please see {@link #function-highlightTimeSpan} and {@link #function-highlightTimeSpans} to learn\n * more or try the demo below:\n *\n * {@inlineexample SchedulerPro/feature/TimeSpanHighlight.js}\n *\n * ## Example usage with Scheduler Pro\n *\n * ```javascript\n * const scheduler = new SchedulerPro({\n *     features : {\n *         timeSpanHighlight : true\n *     }\n * })\n *\n * scheduler.highlightTimeSpan({\n *      startDate : new Date(2022, 4, 1),\n *      endDate   : new Date(2022, 4, 5),\n *      name      : 'Time off'\n * });\n * ```\n *\n * ## Example usage with Gantt\n *\n * ```javascript\n * const gantt = new Gantt({\n *     features : {\n *         timeSpanHighlight : true\n *     }\n * })\n *\n * gantt.highlightTimeSpan({\n *      startDate : new Date(2022, 4, 1),\n *      endDate   : new Date(2022, 4, 5),\n *      padding   : 10, // Some \"air\" around the rectangle\n *      taskRecord, // You can also highlight an area specific to a Gantt task\n *      name      : 'Time off'\n * });\n * ```\n *\n * This feature is **disabled** by default.\n *\n * @extends Core/mixin/InstancePlugin\n * @classtype timeSpanHighlight\n * @feature\n * @demo SchedulerPro/highlight-time-spans\n */\nexport default class TimeSpanHighlight extends InstancePlugin {\n\n    //region Config\n    domConfigs = [];\n    configs = [];\n\n    static get $name() {\n        return 'TimeSpanHighlight';\n    }\n\n    static get configurable() {\n        return {\n            padding : 0\n        };\n    }\n\n    static get pluginConfig() {\n        return {\n            assign : [\n                'highlightTimeSpan',\n                'highlightTimeSpans',\n                'unhighlightTimeSpans'\n            ],\n            chain : [\n                'onTimeAxisViewModelUpdate'\n            ]\n        };\n    }\n\n    //endregion\n\n    construct() {\n        super.construct(...arguments);\n\n        this.client.rowManager.ion({\n            renderDone : this.onViewChanged,\n            thisObj    : this\n        });\n    }\n\n    /**\n     * Highlights the region representing the passed time span and optionally for a single certain resource.\n     * @on-owner\n     * @param {HighlightTimeSpan} options A single options object describing the time span to highlight.\n     */\n    highlightTimeSpan(config, draw = true) {\n        const\n            me         = this,\n            {\n                startDate,\n                endDate,\n                name,\n                surround,\n                padding       = me.padding,\n                clearExisting = true\n            }          = config,\n            { client } = me,\n            taskRecord = config.isTimeSpan ? config : config.taskRecord;\n\n        // The resource property allows an actual TaskRecord to be used as a config.\n        let resourceRecord  = config.resourceRecord || config.resource;\n        const { animationId } = config;\n\n        if (animationId) {\n            DomHelper.addTemporaryClass(client.element, 'b-transition-highlight', 500, client);\n        }\n\n        if (clearExisting) {\n            me.domConfigs.length = me.configs.length = 0;\n        }\n\n        if (me.disabled) {\n            // nothing to highlight\n            return;\n        }\n\n        if (surround) {\n            me.surroundTimeSpan(config);\n            return;\n        }\n\n        me.configs.push(config);\n\n        let rect;\n        if (client.isGanttBase) {\n            rect = client.getScheduleRegion(taskRecord, true, { start : startDate, end : endDate });\n        }\n        else {\n            if (resourceRecord) {\n                // Allows resolving link from original in TreeGrouped scheduler\n                resourceRecord = client.store.getById(resourceRecord);\n            }\n\n            rect = client.getScheduleRegion(resourceRecord, null, true, { start : startDate, end : endDate }, !resourceRecord);\n        }\n\n        if (!rect) {\n            // nothing to highlight\n            return;\n        }\n\n        if (padding) {\n            if (client.isHorizontal) {\n                rect.inflate(padding, 0, padding, 0);\n            }\n            else {\n                rect.inflate(0, padding, 0, padding);\n            }\n        }\n\n        me.domConfigs.push(\n            rect.visualize({\n                children : [\n                    {\n                        class : 'b-sch-highlighted-range-name',\n                        html  : name\n                    }\n                ],\n                dataset : {\n                    syncId : animationId\n                },\n                class : {\n                    'b-sch-highlighted-range'                           : 1,\n                    [config.cls]                                        : config.cls,\n                    [config.class || 'b-sch-highlighted-range-default'] : 1\n                }\n            }, true)\n        );\n\n        if (draw) {\n            me.draw();\n        }\n    }\n\n    draw() {\n        DomSync.sync({\n            targetElement : this.containerEl,\n            domConfig     : {\n                onlyChildren : true,\n                children     : this.domConfigs\n            }\n        });\n    }\n\n    surroundTimeSpan(timeSpan) {\n        this.highlightTimeSpans([\n            Object.assign({}, timeSpan, {\n                animationId : (timeSpan.animationId || '') + 'Before',\n                class       : 'b-unavailable',\n                surround    : false,\n                startDate   : this.client.startDate,\n                endDate     : timeSpan.startDate\n            }),\n            Object.assign({}, timeSpan, {\n                animationId : (timeSpan.animationId || '') + 'After',\n                class       : 'b-unavailable',\n                surround    : false,\n                startDate   : timeSpan.endDate,\n                endDate     : this.client.endDate\n            })\n        ], { clearExisting : timeSpan.clearExisting });\n    }\n\n    /**\n     * Highlights the regions representing the passed time spans.\n     * @on-owner\n     * @param {HighlightTimeSpan[]} timeSpans An array of objects with start/end dates describing the rectangle to highlight.\n     * @param {Object} [options] A single options object\n     * @param {Boolean} [options.clearExisting=true] Set to `false` to preserve previously highlighted elements\n     */\n    highlightTimeSpans(timeSpans, options = {}) {\n        const\n            me = this,\n            {\n                clearExisting = true\n            }  = options;\n\n        if (clearExisting) {\n            timeSpans = timeSpans.slice();\n            me.domConfigs.length = me.configs.length = 0;\n        }\n\n        if (me.disabled) {\n            return;\n        }\n\n        timeSpans.forEach(timeSpan => {\n            // If we are *re*drawing a set of configs, they will have the isHighlightConfig\n            // property, so we can pass them straight in. If its a config from the outside,\n            // then apply the defaults and the isHighlightConfig flag.\n            me.highlightTimeSpan(timeSpan.isHighlightConfig ? timeSpan : Object.setPrototypeOf(timespanDefaults, timeSpan), false);\n        });\n\n        me.draw();\n    }\n\n    /**\n     * Removes any highlighting elements.\n     * @param {Boolean} [fadeOut] `true` to fade out the highlight elements before removing\n     * @on-owner\n     */\n    async unhighlightTimeSpans(fadeOut = false) {\n        const\n            me         = this,\n            { client } = me;\n\n        if (fadeOut) {\n            DomHelper.addTemporaryClass(client.element, 'b-transition-highlight', 500, client);\n        }\n\n        Array.from(me.containerEl.children).forEach(element => {\n            if (fadeOut) {\n                element.style.opacity = 0;\n                me.fadeOutDetacher    = EventHelper.onTransitionEnd({\n                    element,\n                    property : 'opacity',\n                    thisObj  : client,\n                    handler  : () => {\n                        me.domConfigs.length = me.configs.length = 0;\n                        me.draw();\n                    }\n                });\n            }\n            else {\n                me.domConfigs.length = me.configs.length = 0;\n                me.draw();\n            }\n        });\n    }\n\n    get containerEl() {\n        if (!this._containerEl) {\n            this._containerEl = DomHelper.createElement({\n                parent        : this.client.foregroundCanvas,\n                retainElement : true,\n                class         : 'b-sch-highlight-container'\n            });\n        }\n\n        return this._containerEl;\n    }\n\n    onTimeAxisViewModelUpdate() {\n        this.onViewChanged();\n    }\n\n    onViewChanged() {\n        if (this.configs.length > 0) {\n            this.highlightTimeSpans(this.configs);\n        }\n    }\n\n    updateDisabled(disabled, was) {\n        if (disabled) {\n            this.unhighlightTimeSpans();\n        }\n\n        super.updateDisabled(disabled, was);\n    }\n\n    // No classname on Scheduler's/Gantt's element\n    get featureClass() {}\n}\n\nGridFeatureManager.registerFeature(TimeSpanHighlight, false, ['SchedulerPro', 'Gantt']);\n", "/**\n * @module SchedulerPro/model/changelog/ChangeLogPropertyUpdate\n */\n\n/**\n * An immutable, serializable object that describes an update to a single object property from one value to another.\n */\nexport default class ChangeLogPropertyUpdate {\n\n    static $name = 'ChangeLogPropertyUpdate';\n\n    constructor({ property, before, after }) {\n        Object.assign(this, {\n            /**\n             * @member {String} property A descriptor for the entity (object) affected by this action.\n             * @readonly\n             * @category Common\n             */\n            property,\n\n            /**\n             * @member {String|Number|Object} before The property's value before the action.\n             * @readonly\n             * @immutable\n             * @category Common\n             */\n            before,\n\n            /**\n             * @member {String|Number|Object} after The property's value after the action.\n             * @readonly\n             * @immutable\n             * @category Common\n             */\n            after\n        });\n        Object.freeze(this);\n    }\n}\n", "import { SchedulerProProjectMixin } from '../../Engine/quark/model/scheduler_pro/SchedulerProProjectMixin.js';\nimport ProjectModelMixin from '../../Scheduler/model/mixin/ProjectModelMixin.js';\nimport ProjectChangeHandlerMixin from './mixin/ProjectChangeHandlerMixin.js';\n\nimport ProjectCrudManager from '../data/mixin/ProjectCrudManager.js';\n\nimport AssignmentModel from './AssignmentModel.js';\nimport CalendarModel from './CalendarModel.js';\nimport DependencyModel from './DependencyModel.js';\nimport EventModel from './EventModel.js';\nimport ResourceModel from './ResourceModel.js';\n\nimport CalendarManagerStore from '../data/CalendarManagerStore.js';\nimport DependencyStore from '../data/DependencyStore.js';\nimport EventStore from '../data/EventStore.js';\nimport ResourceStore from '../data/ResourceStore.js';\nimport AssignmentStore from '../data/AssignmentStore.js';\nimport StateTrackingManager from '../data/stm/StateTrackingManager.js';\n\n/**\n * @module SchedulerPro/model/ProjectModel\n */\n\n/**\n * Scheduler Pro Project model class - a central place for all data.\n *\n * It holds and links the stores usually used by Scheduler Pro:\n *\n * - {@link SchedulerPro/data/EventStore}\n * - {@link SchedulerPro/data/ResourceStore}\n * - {@link SchedulerPro/data/AssignmentStore}\n * - {@link SchedulerPro/data/DependencyStore}\n * - {@link SchedulerPro/data/CalendarManagerStore}\n * - {@link Scheduler/data/ResourceTimeRangeStore}\n * - {@link #config-timeRangeStore TimeRangeStore}\n *\n * The project uses a scheduling engine to calculate dates, durations and such. It is also responsible for\n * handling references between models, for example to link an event via an assignment to a resource. These operations\n * are asynchronous, a fact that is hidden when working in the Scheduler Pro UI but which you must know about when\n * performing operations on the data level.\n *\n * When there is a change to data that requires something else to be recalculated, the project schedules a calculation\n * (a commit) which happens moments later. It is also possible to trigger these calculations directly. This flow\n * illustrates the process:\n *\n * 1. Something changes which requires the project to recalculate, for example adding a new task:\n *\n * ```javascript\n * const [event] = project.eventStore.add({ startDate, endDate });\n * ```\n *\n * 2. A recalculation is scheduled, thus:\n *\n * ```javascript\n * event.duration; // <- Not yet calculated\n * ```\n *\n * 3. Calculate now instead of waiting for the scheduled calculation\n *\n * ```javascript\n * await project.commitAsync();\n *\n * event.duration; // <- Now available\n * ```\n *\n * Please refer to [this guide](#SchedulerPro/guides/basics/project_data.md) for more information.\n *\n * ## Built in CrudManager\n *\n * Scheduler Pro's project has a {@link Scheduler/crud/AbstractCrudManagerMixin CrudManager} built in. Using it is the recommended\n * way of syncing data between Scheduler Pro and a backend. Example usage:\n *\n * ```javascript\n * const scheduler = new SchedulerPro({\n *     project : {\n *         // Configure urls used by the built in CrudManager\n *         transport : {\n *             load : {\n *                 url : 'php/load.php'\n *             },\n *             sync : {\n *                 url : 'php/sync.php'\n *             }\n *         }\n *     }\n * });\n *\n * // Load data from the backend\n * scheduler.project.load()\n * ```\n *\n * For more information on CrudManager, see Schedulers docs on {@link Scheduler/data/CrudManager}.\n * For a detailed description of the protocol used by CrudManager, see the [Crud manager guide](#Scheduler/guides/data/crud_manager.md)\n *\n * You can access the current Project data changes anytime using the {@link #property-changes} property.\n *\n * ## Working with inline data\n *\n * The project provides an {@link #property-inlineData} getter/setter that can\n * be used to manage data from all Project stores at once. Populating the stores this way can\n * be useful if you do not want to use the CrudManager for server communication but instead load data using Axios\n * or similar.\n *\n * ### Getting data\n * ```javascript\n * const data = scheduler.project.inlineData;\n *\n * // use the data in your application\n * ```\n *\n * ### Setting data\n * ```javascript\n * // Get data from server manually\n * const data = await axios.get('/project?id=12345');\n *\n * // Feed it to the project\n * scheduler.project.inlineData = data;\n * ```\n *\n * See also {@link #function-loadInlineData}\n *\n * ### Getting changed records\n *\n * You can access the changes in the current Project dataset anytime using the {@link #property-changes} property. It\n * returns an object with all changes:\n *\n * ```javascript\n * const changes = project.changes;\n *\n * console.log(changes);\n *\n * > {\n *   tasks : {\n *       updated : [{\n *           name : 'My task',\n *           id   : 12\n *       }]\n *   },\n *   assignments : {\n *       added : [{\n *           event      : 12,\n *           resource   : 7,\n *           units      : 100,\n *           $PhantomId : 'abc123'\n *       }]\n *     }\n * };\n * ```\n *\n * ## Monitoring data changes\n *\n * While it is possible to listen for data changes on the projects individual stores, it is sometimes more convenient\n * to have a centralized place to handle all data changes. By listening for the {@link #event-change change event} your\n * code gets notified when data in any of the stores changes. Useful for example to keep an external data model up to\n * date:\n *\n * ```javascript\n * const scheduler = new SchedulerPro({\n *     project: {\n *         listeners : {\n *             change({ store, action, records }) {\n *                 const { $name } = store.constructor;\n *\n *                 if (action === 'add') {\n *                     externalDataModel.add($name, records);\n *                 }\n *\n *                 if (action === 'remove') {\n *                     externalDataModel.remove($name, records);\n *                 }\n *             }\n *         }\n *     }\n * });\n * ```\n *\n * ## Processing the data loaded from the server\n *\n * If you want to process the data received from the server after loading, you can use\n * the {@link #event-beforeLoadApply} or {@link #event-beforeSyncApply} events:\n *\n * ```javascript\n * const gantt = new Gantt({\n *     project: {\n *         listeners : {\n *             beforeLoadApply({ response }) {\n *                 // do something with load-response object before data is fed to the stores\n *             }\n *         }\n *     }\n * });\n * ```\n *\n * ## Built in StateTrackingManager\n *\n * The project also has a built in {@link Core/data/stm/StateTrackingManager} (STM for short), that\n * handles undo/redo for the project stores (additional stores can also be added). By default, it is only used while\n * editing tasks using the task editor, the editor updates tasks live and uses STM to rollback changes if canceled. But\n * you can enable it to track all project store changes:\n *\n * ```javascript\n * // Enable automatic transaction creation and start recording\n * project.stm.autoRecord = true;\n * project.stm.enable();\n *\n * // Undo a transaction\n * project.stm.undo();\n *\n * // Redo\n * project.stm.redo();\n * ```\n *\n * Check out the `undoredo` demo to see it in action.\n *\n * @mixes Core/mixin/Events\n * @mixes SchedulerPro/data/mixin/PartOfProject\n * @mixes SchedulerPro/data/mixin/ProjectCrudManager\n * @mixes SchedulerPro/model/mixin/ProjectChangeHandlerMixin\n *\n * @extends Scheduler/model/mixin/ProjectModelMixin\n *\n * @typings Scheduler/model/ProjectModel -> Scheduler/model/SchedulerProjectModel\n */\nexport default class ProjectModel extends ProjectChangeHandlerMixin(ProjectCrudManager(ProjectModelMixin(SchedulerProProjectMixin))) {\n    //region Events\n\n    /**\n     * Fired when the engine has finished its calculations and the results has been written back to the records.\n     *\n     * ```javascript\n     * scheduler.project.on({\n     *     dataReady() {\n     *        console.log('Calculations finished');\n     *     }\n     * });\n     *\n     * scheduler.eventStore.first.duration = 10;\n     *\n     * // At some point a bit later it will log 'Calculations finished'\n     * ```\n     *\n     * @event dataReady\n     * @param {SchedulerPro.model.ProjectModel} source The project\n     */\n\n    /**\n     * Fired during the Engine calculation if {@link #config-enableProgressNotifications enableProgressNotifications} config is `true`\n     * @event progress\n     * @param {Number} total The total number of operations\n     * @param {Number} remaining The number of remaining operations\n     * @param {'storePopulation'|'propagating'} phase The phase of the calculation, either 'storePopulation'\n     * when data is getting loaded, or 'propagating' when data is getting calculated\n     */\n\n    /**\n     * Fired when the Engine detects a computation cycle.\n     * @event cycle\n     * @param {Object} schedulingIssue Scheduling error describing the case:\n     * @param {Function} schedulingIssue.getDescription Returns the cycle description\n     * @param {Object} schedulingIssue.cycle Object providing the cycle info\n     * @param {Function} schedulingIssue.getResolutions Returns possible resolutions\n     * @param {Function} continueWithResolutionResult Function to call after a resolution is chosen to\n     * proceed with the Engine calculations:\n     * ```js\n     * project.on('cycle', ({ continueWithResolutionResult }) => {\n     *     // cancel changes in case of a cycle\n     *     continueWithResolutionResult(EffectResolutionResult.Cancel);\n     * })\n     * ```\n     */\n\n    /**\n     * Fired when the Engine detects a scheduling conflict.\n     * @event schedulingConflict\n     * @param {Object} schedulingIssue The conflict details:\n     * @param {Function} schedulingIssue.getDescription Returns the conflict description\n     * @param {Object[]} schedulingIssue.intervals Array of conflicting intervals\n     * @param {Function} schedulingIssue.getResolutions Function to get possible resolutions\n     * @param {Function} continueWithResolutionResult Function to call after a resolution is chosen to\n     * proceed with the Engine calculations:\n     * ```js\n     * project.on('schedulingConflict', ({ schedulingIssue, continueWithResolutionResult }) => {\n     *     // apply the first resolution and continue\n     *     schedulingIssue.getResolutions()[0].resolve();\n     *     continueWithResolutionResult(EffectResolutionResult.Resume);\n     * })\n     * ```\n     */\n\n    /**\n     * Fired when the Engine detects a calendar misconfiguration when the calendar does\n     * not provide any working periods of time which makes the calendar usage impossible.\n     * @event emptyCalendar\n     * @param {Object} schedulingIssue Scheduling error describing the case:\n     * @param {Function} schedulingIssue.getDescription Returns the error description\n     * @param {Function} schedulingIssue.getCalendar Returns the calendar that must be fixed\n     * @param {Function} schedulingIssue.getResolutions Returns possible resolutions\n     * @param {Function} continueWithResolutionResult Function to call after a resolution is chosen to\n     * proceed with the Engine calculations:\n     * ```js\n     * project.on('emptyCalendar', ({ schedulingIssue, continueWithResolutionResult }) => {\n     *     // apply the first resolution and continue\n     *     schedulingIssue.getResolutions()[0].resolve();\n     *     continueWithResolutionResult(EffectResolutionResult.Resume);\n     * })\n     * ```\n     */\n\n    //endregion\n\n    //region Config\n\n    static get $name() {\n        return 'ProjectModel';\n    }\n\n    /**\n     * Silences propagations caused by the project loading.\n     *\n     * Applying the loaded data to the project occurs in two basic stages:\n     *\n     * 1. Data gets into the engine graph which triggers changes propagation\n     * 2. The changes caused by the propagation get written to related stores\n     *\n     * Setting this flag to `true` makes the component perform step 2 silently without triggering events causing reactions on those changes\n     * (like sending changes back to the server if `autoSync` is enabled) and keeping stores in unmodified state.\n     *\n     * This is safe if the loaded data is consistent so propagation doesn't really do any adjustments.\n     * By default the system treats the data as consistent so this option is `true`.\n     *\n     * ```js\n     * new SchedulerPro{\n     *     project : {\n     *         // We want scheduling engine to recalculate the data properly\n     *         // so then we could save it back to the server\n     *         silenceInitialCommit : false,\n     *         ...\n     *     }\n     *     ...\n     * })\n     * ```\n     *\n     * @config {Boolean} silenceInitialCommit\n     * @default true\n     * @category Advanced\n     */\n\n    /**\n     * Maximum range the project calendars can iterate.\n     * The value is defined in milliseconds and by default equals `5 years` roughly.\n     * ```javascript\n     * new SchedulerPro({\n     *     project : {\n     *         // adjust calendar iteration limit to 10 years roughly:\n     *         // 10 years expressed in ms\n     *         maxCalendarRange : 10 * 365 * 24 * 3600000,\n     *         ...\n     *     }\n     * });\n     * ```\n     * @config {Number} maxCalendarRange\n     * @default 157680000000\n     * @category Advanced\n     */\n\n    /**\n     * When `true` the project manually scheduled tasks will adjust their proposed start/end dates\n     * to skip non working time.\n     *\n     * @field {Boolean} skipNonWorkingTimeWhenSchedulingManually\n     * @default false\n     */\n\n    /**\n     * When `true` the project's manually scheduled tasks adjust their duration by excluding the non-working time from it,\n     * according to the calendar. However, this may lead to inconsistencies, when moving an event which both starts\n     * and ends on the non-working time. For such cases you can disable this option.\n     *\n     * Default value is `true`\n     *\n     * IMPORTANT: Setting this option to `false` also forcefully sets the {@link #field-skipNonWorkingTimeWhenSchedulingManually} option\n     * to `false`.\n     * IMPORTANT: This option is going to be disabled by default from version 6.0.0.\n     *\n     * @field {Boolean} skipNonWorkingTimeInDurationWhenSchedulingManually\n     * @default true\n     */\n\n    /**\n     * This config manages DST correction in the scheduling engine. It only has effect when DST transition hour is\n     * working time. Usually DST transition occurs on Sunday, so with non working weekends the DST correction logic\n     * is not involved.\n     *\n     * If **true**, it will add/remove one hour when calculating end date. For example:\n     * Assume weekends are working and on Sunday, 2020-10-25 at 03:00 clocks are set back 1 hour. Assume there is an event:\n     *\n     * ```javascript\n     * {\n     *     startDate    : '2020-10-20',\n     *     duration     : 10 * 24 + 1,\n     *     durationUnit : 'hour'\n     * }\n     * ```\n     * It will end on 2020-10-30 01:00 (which is wrong) but duration will be reported correctly. Because of the DST\n     * transition the SchedulerPro project will add one more hour when calculating the end date.\n     *\n     * Also this may occur when day with DST transition is working but there are non-working intervals between that day\n     * and event end date.\n     *\n     * ```javascript\n     * {\n     *     calendar         : 1,\n     *     calendarsData    : [\n     *         {\n     *             id           : 1,\n     *             startDate    : '2020-10-26',\n     *             endDate      : '2020-10-27',\n     *             isWorking    : false\n     *         }\n     *     ],\n     *     eventsData       : [\n     *         {\n     *             id           : 1,\n     *             startDate    : '2020-10-20',\n     *             endDate      : '2020-10-30'\n     *         },\n     *         {\n     *             id           : 2,\n     *             startDate    : '2020-10-20',\n     *             duration     : 10 * 24 + 1,\n     *             durationUnit : 'hour'\n     *         }\n     *     ]\n     * }\n     * ```\n     *\n     * Event 1 duration will be incorrectly reported as 9 days * 24 hours, missing 1 extra hour added by DST transition.\n     * Event 2 end date will be calculated to 2020-10-30 01:00, adding one extra hour.\n     *\n     * If **false**, the SchedulerPro project will not add DST correction which fixes the quirk mentioned above.\n     * Event 1 duration will be correctly reported as 9 days * 24 hours + 1 hour. Event 2 end date will be calculated\n     * to 2020-10-30.\n     *\n     * Also, for those events days duration will be a floating point number due to extra (or missing) hour:\n     *\n     * ```javascript\n     * eventStore.getById(1).getDuration('day')  // 10.041666666666666\n     * eventStore.getById(1).getDuration('hour') // 241\n     * ```\n     *\n     * @config {Boolean} adjustDurationToDST\n     * @default false\n     */\n\n    // <remove-on-release>\n    // TODO: For 6.0. This config is introduced only to make behavior transition smooth. If nobody complains about it for\n    //  a couple of releases, it should be removed\n    // </remove-on-release>\n\n    /**\n     * The number of hours per day.\n     *\n     * **Please note:** the value **does not define** the amount of **working** time per day\n     * for that purpose one should use calendars.\n     *\n     * The value is used when converting the duration from one unit to another.\n     * So when user enters a duration of, for example, `5 days` the system understands that it\n     * actually means `120 hours` and schedules accordingly.\n     * @field {Number} hoursPerDay\n     * @default 24\n     */\n\n    /**\n     * The number of days per week.\n     *\n     * **Please note:** the value **does not define** the amount of **working** time per week\n     * for that purpose one should use calendars.\n     *\n     * The value is used when converting the duration from one unit to another.\n     * So when user enters a duration of, for example, `2 weeks` the system understands that it\n     * actually means `14 days` (which is then converted to {@link #field-hoursPerDay hours}) and\n     * schedules accordingly.\n     * @field {Number} daysPerWeek\n     * @default 7\n     */\n\n    /**\n     * The number of days per month.\n     *\n     * **Please note:** the value **does not define** the amount of **working** time per month\n     * for that purpose one should use calendars.\n     *\n     * The value is used when converting the duration from one unit to another.\n     * So when user enters a duration of, for example, `1 month` the system understands that it\n     * actually means `30 days` (which is then converted to {@link #field-hoursPerDay hours}) and\n     * schedules accordingly.\n     * @field {Number} daysPerMonth\n     * @default 30\n     */\n\n    /**\n     * The scheduling direction of the project events.\n     * Possible values are `Forward` and `Backward`. The `Forward` direction corresponds to the As-Soon-As-Possible scheduling (ASAP),\n     * `Backward` - to As-Late-As-Possible (ALAP).\n     * @field {'Forward'|'Backward'} direction\n     * @default 'Forward'\n     */\n\n    /**\n     * The source of the calendar for dependencies (the calendar used for taking dependencies lag into account).\n     * Possible values are:\n     *\n     * - `ToEvent` - successor calendar will be used (default);\n     * - `FromEvent` - predecessor calendar will be used;\n     * - `Project` - the project calendar will be used.\n     *\n     * @field {'ToEvent'|'FromEvent'|'Project'} dependenciesCalendar\n     * @default 'ToEvent'\n     */\n\n    /**\n     * The project calendar.\n     * @field {SchedulerPro.model.CalendarModel} calendar\n     * @accepts {String|CalendarModelConfig|SchedulerPro.model.CalendarModel}\n     */\n\n    /**\n     * Returns current Project changes as an object consisting of added/modified/removed arrays of records for every\n     * managed store. Returns `null` if no changes exist. Format:\n     *\n     * ```javascript\n     * {\n     *     resources : {\n     *         added    : [{ name : 'New guy' }],\n     *         modified : [{ id : 2, name : 'Mike' }],\n     *         removed  : [{ id : 3 }]\n     *     },\n     *     events : {\n     *         modified : [{  id : 12, name : 'Cool task' }]\n     *     },\n     *     ...\n     * }\n     * ```\n     *\n     * @member {Object} changes\n     * @readonly\n     * @category Models & Stores\n     */\n\n    /**\n     * Project changes (CRUD operations to records in its stores) are automatically committed on a buffer to the\n     * underlying graph based calculation engine. The engine performs it calculations async.\n     *\n     * By calling this function, the commit happens right away. And by awaiting it you are sure that project\n     * calculations are finished and that references between records are up to date.\n     *\n     * The returned promise is resolved with an object. If that object has `rejectedWith` set, there has been a conflict and the calculation failed.\n     *\n     * ```javascript\n     * // Move an event in time\n     * eventStore.first.shift(1);\n     *\n     * // Trigger calculations directly and wait for them to finish\n     * const result = await project.commitAsync();\n     *\n     * if (result.rejectedWith) {\n     *     // there was a conflict during the scheduling\n     * }\n     * ```\n     *\n     * @async\n     * @function commitAsync\n     * @category Common\n     */\n\n    /**\n     * Set to `true` to enable calculation progress notifications.\n     * When enabled the project fires {@link #event-progress progress} event.\n     *\n     * **Note**: Enabling progress notifications will impact calculation performance, since it needs to pause calculations to allow redrawing the UI.\n     * @config {Boolean} enableProgressNotifications\n     * @category Advanced\n     */\n    /**\n     * Enables/disables the calculation progress notifications.\n     * @member {Boolean} enableProgressNotifications\n     * @category Advanced\n     */\n\n    /**\n     * If this flag is set to `true` (default) when a start/end date is set on the event, a corresponding\n     * `start-no-earlier/later-than` constraint is added, automatically. This is done in order to\n     * keep the event \"attached\" to this date, according to the user intention.\n     *\n     * Depending on your use case, you might want to disable this behaviour.\n     *\n     * @field {Boolean} addConstraintOnDateSet\n     * @default true\n     */\n\n    static get defaultConfig() {\n        return {\n            /**\n             * @hideproperties project, taskStore\n             */\n\n            //region Inline data configs & properties\n\n            /**\n             * Get/set {@link #property-eventStore} data.\n             *\n             * Always returns an array of {@link SchedulerPro.model.EventModel EventModels} but also accepts an array of\n             * its configuration objects as input.\n             *\n             * @member {SchedulerPro.model.EventModel[]} events\n             * @accepts {SchedulerPro.model.EventModel[]|EventModelConfig[]}\n             * @category Inline data\n             */\n            /**\n             * Data use to fill the {@link #property-eventStore}. Should be an array of\n             * {@link SchedulerPro.model.EventModel EventModels} or its configuration objects.\n             *\n             * @config {SchedulerPro.model.EventModel[]|EventModelConfig[]} events\n             * @category Inline data\n             */\n\n            /**\n             * Get/set {@link #property-resourceStore} data.\n             *\n             * Always returns an array of {@link SchedulerPro.model.ResourceModel ResourceModels} but also accepts an\n             * array of its configuration objects as input.\n             *\n             * @member {SchedulerPro.model.ResourceModel[]} resources\n             * @accepts {SchedulerPro.model.ResourceModel[]|ResourceModelConfig[]}\n             * @category Inline data\n             */\n            /**\n             * Data use to fill the {@link #property-resourceStore}. Should be an array of\n             * {@link SchedulerPro.model.ResourceModel ResourceModels} or its configuration objects.\n             *\n             * @config {SchedulerPro.model.ResourceModel[]|ResourceModelConfig[]} resources\n             * @category Inline data\n             */\n\n            /**\n             * Get/set {@link #property-assignmentStore} data.\n             *\n             * Always returns an array of {@link SchedulerPro.model.AssignmentModel AssignmentModels} but also accepts\n             * an array of its configuration objects as input.\n             *\n             * @member {SchedulerPro.model.AssignmentModel[]} assignments\n             * @accepts {SchedulerPro.model.AssignmentModel[]|AssignmentModelConfig[]}\n             * @category Inline data\n             */\n            /**\n             * Data use to fill the {@link #property-assignmentStore}. Should be an array of\n             * {@link SchedulerPro.model.AssignmentModel AssignmentModels} or its configuration objects.\n             *\n             * @config {SchedulerPro.model.AssignmentModel[]|AssignmentModelConfig[]} assignments\n             * @category Inline data\n             */\n\n            /**\n             * Get/set {@link #property-dependencyStore} data.\n             *\n             * Always returns an array of {@link SchedulerPro.model.DependencyModel DependencyModels} but also accepts an\n             * array of its configuration objects as input.\n             *\n             * @member {SchedulerPro.model.DependencyModel[]} dependencies\n             * @accepts {SchedulerPro.model.DependencyModel[]|DependencyModelConfig[]}\n             * @category Inline data\n             */\n            /**\n             * Data use to fill the {@link #property-dependencyStore}. Should be an array of\n             * {@link SchedulerPro.model.DependencyModel DependencyModels} or its configuration objects.\n             *\n             * @config {SchedulerPro.model.DependencyModel[]|DependencyModelConfig[]} dependencies\n             * @category Inline data\n             */\n\n            /**\n             * Get/set {@link #property-timeRangeStore} data.\n             *\n             * Always returns an array of {@link Scheduler.model.TimeSpan TimeSpans} but also accepts an\n             * array of its configuration objects as input.\n             *\n             * @member {Scheduler.model.TimeSpan[]} timeRanges\n             * @accepts {Scheduler.model.TimeSpan[]|TimeSpanConfig[]}\n             * @category Inline data\n             */\n            /**\n             * Data use to fill the {@link #property-timeRangeStore}. Should be an array of\n             * {@link Scheduler.model.TimeSpan TimeSpans} or its configuration objects.\n             *\n             * @config {Scheduler.model.TimeSpan[]|TimeSpanConfig[]} timeRanges\n             * @category Inline data\n             */\n\n            /**\n             * Get/set {@link #property-resourceTimeRangeStore} data.\n             *\n             * Always returns an array of {@link Scheduler.model.ResourceTimeRangeModel ResourceTimeRangeModels} but\n             * also accepts an array of its configuration objects as input.\n             *\n             * @member {Scheduler.model.ResourceTimeRangeModel[]} resourceTimeRanges\n             * @accepts {Scheduler.model.ResourceTimeRangeModel[]|ResourceTimeRangeModelConfig[]}\n             * @category Inline data\n             */\n            /**\n             * Data use to fill the {@link #property-resourceTimeRangeStore}. Should be an array\n             * of {@link Scheduler.model.ResourceTimeRangeModel ResourceTimeRangeModels} or its configuration objects.\n             *\n             * @config {Scheduler.model.ResourceTimeRangeModel[]|ResourceTimeRangeModelConfig[]} resourceTimeRanges\n             * @category Inline data\n             */\n\n            //endregion\n\n            //region Legacy inline data configs & properties\n\n            /**\n             * The initial data, to fill the {@link #property-eventStore eventStore} with.\n             * Should be an array of {@link SchedulerPro.model.EventModel EventModels} or its configuration objects.\n             *\n             * @config {SchedulerPro.model.EventModel[]} eventsData\n             * @category Legacy inline data\n             */\n\n            /**\n             * The initial data, to fill the {@link #property-dependencyStore dependencyStore} with.\n             * Should be an array of {@link SchedulerPro.model.DependencyModel DependencyModels} or its configuration\n             * objects.\n             *\n             * @config {SchedulerPro.model.DependencyModel[]} [dependenciesData]\n             * @category Legacy inline data\n             */\n\n            /**\n             * The initial data, to fill the {@link #property-resourceStore resourceStore} with.\n             * Should be an array of {@link SchedulerPro.model.ResourceModel ResourceModels} or its configuration objects.\n             *\n             * @config {SchedulerPro.model.ResourceModel[]} [resourcesData]\n             * @category Legacy inline data\n             */\n\n            /**\n             * The initial data, to fill the {@link #property-assignmentStore assignmentStore} with.\n             * Should be an array of {@link SchedulerPro.model.AssignmentModel AssignmentModels} or its configuration\n             * objects.\n             *\n             * @config {SchedulerPro.model.AssignmentModel[]} [assignmentsData]\n             * @category Legacy inline data\n             */\n\n            //endregion\n\n            //region Store configs and properties\n\n            /**\n             * The {@link SchedulerPro.data.EventStore store} holding the event information.\n             *\n             * See also {@link SchedulerPro.model.EventModel}\n             *\n             * @member {SchedulerPro.data.EventStore} eventStore\n             * @category Models & Stores\n             */\n            /**\n             * An {@link SchedulerPro.data.EventStore} instance or a config object.\n             * @config {SchedulerPro.data.EventStore|EventStoreConfig} eventStore\n             * @category Models & Stores\n             */\n\n            /**\n             * The {@link SchedulerPro.data.DependencyStore store} holding the dependency information.\n             *\n             * See also {@link SchedulerPro.model.DependencyModel}\n             *\n             * @member {SchedulerPro.data.DependencyStore} dependencyStore\n             * @category Models & Stores\n             */\n            /**\n             * A {@link SchedulerPro.data.DependencyStore} instance or a config object.\n             * @config {SchedulerPro.data.DependencyStore|DependencyStoreConfig} dependencyStore\n             * @category Models & Stores\n             */\n\n            /**\n             * The {@link SchedulerPro.data.ResourceStore store} holding the resources that can be assigned to the\n             * events in the event store.\n             *\n             * See also {@link SchedulerPro.model.ResourceModel}\n             *\n             * @member {SchedulerPro.data.ResourceStore} resourceStore\n             * @category Models & Stores\n             */\n            /**\n             * A {@link SchedulerPro.data.ResourceStore} instance or a config object.\n             * @config {SchedulerPro.data.ResourceStore|ResourceStoreConfig} resourceStore\n             * @category Models & Stores\n             */\n\n            /**\n             * The {@link SchedulerPro.data.AssignmentStore store} holding the assignment information.\n             *\n             * See also {@link SchedulerPro.model.AssignmentModel}\n             *\n             * @member {SchedulerPro.data.AssignmentStore} assignmentStore\n             * @category Models & Stores\n             */\n            /**\n             * An {@link SchedulerPro.data.AssignmentStore} instance or a config object.\n             * @config {SchedulerPro.data.AssignmentStore|AssignmentStoreConfig} assignmentStore\n             * @category Models & Stores\n             */\n\n            /**\n             * The {@link SchedulerPro.data.CalendarManagerStore store} holding the calendar information.\n             *\n             * See also {@link SchedulerPro.model.CalendarModel}\n             * @member {SchedulerPro.data.CalendarManagerStore} calendarManagerStore\n             * @category Models & Stores\n             */\n            /**\n             * A {@link SchedulerPro.data.CalendarManagerStore} instance or a config object.\n             * @config {SchedulerPro.data.CalendarManagerStore|CalendarManagerStoreConfig} calendarManagerStore\n             * @category Models & Stores\n             */\n\n            //endregion\n\n            //region Model & store class configs\n\n            /**\n             * The constructor of the calendar model class, to be used in the project. Will be set as the\n             * {@link Core.data.Store#config-modelClass modelClass} property of the\n             * {@link #property-calendarManagerStore}\n             *\n             * @config {SchedulerPro.model.CalendarModel} [calendarModelClass]\n             * @typings {typeof CalendarModel}\n             * @category Models & Stores\n             */\n            calendarModelClass : CalendarModel,\n\n            /**\n             * The constructor of the dependency model class, to be used in the project. Will be set as the\n             * {@link Core.data.Store#config-modelClass modelClass} property of the {@link #property-dependencyStore}\n             *\n             * @config {SchedulerPro.model.DependencyModel}\n             * @typings {typeof DependencyModel}\n             * @category Models & Stores\n             */\n            dependencyModelClass : DependencyModel,\n\n            /**\n             * The constructor of the event model class, to be used in the project. Will be set as the\n             * {@link Core.data.Store#config-modelClass modelClass} property of the {@link #property-eventStore}\n             *\n             * @config {SchedulerPro.model.EventModel}\n             * @typings {typeof EventModel}\n             * @category Models & Stores\n             */\n            eventModelClass : EventModel,\n\n            /**\n             * The constructor of the assignment model class, to be used in the project. Will be set as the\n             * {@link Core.data.Store#config-modelClass modelClass} property of the {@link #property-assignmentStore}\n             *\n             * @config {SchedulerPro.model.AssignmentModel}\n             * @typings {typeof AssignmentModel}\n             * @category Models & Stores\n             */\n            assignmentModelClass : AssignmentModel,\n\n            /**\n             * The constructor of the resource model class, to be used in the project. Will be set as the\n             * {@link Core.data.Store#config-modelClass modelClass} property of the {@link #property-resourceStore}\n             *\n             * @config {SchedulerPro.model.ResourceModel}\n             * @typings {typeof ResourceModel}\n             * @category Models & Stores\n             */\n            resourceModelClass : ResourceModel,\n\n            /**\n             * The constructor to create a calendar store instance with. Should be a class, subclassing the\n             * {@link SchedulerPro.data.CalendarManagerStore}\n             * @config {SchedulerPro.data.CalendarManagerStore|Object}\n             * @typings {typeof CalendarManagerStore|object}\n             * @category Models & Stores\n             */\n            calendarManagerStoreClass : CalendarManagerStore,\n\n            /**\n             * The constructor to create a dependency store instance with. Should be a class, subclassing the\n             * {@link SchedulerPro.data.DependencyStore}\n             * @config {SchedulerPro.data.DependencyStore|Object}\n             * @typings {typeof DependencyStore|object}\n             * @category Models & Stores\n             */\n            dependencyStoreClass : DependencyStore,\n\n            /**\n             * The constructor to create an event store instance with. Should be a class, subclassing the\n             * {@link SchedulerPro.data.EventStore}\n             * @config {SchedulerPro.data.EventStore|Object}\n             * @typings {typeof EventStore|object}\n             * @category Models & Stores\n             */\n            eventStoreClass : EventStore,\n\n            /**\n             * The constructor to create an assignment store instance with. Should be a class, subclassing the\n             * {@link SchedulerPro.data.AssignmentStore}\n             * @config {SchedulerPro.data.AssignmentStore|Object}\n             * @typings {typeof AssignmentStore|object}\n             * @category Models & Stores\n             */\n            assignmentStoreClass : AssignmentStore,\n\n            /**\n             * The constructor to create a resource store instance with. Should be a class, subclassing the\n             * {@link SchedulerPro.data.ResourceStore}\n             * @config {SchedulerPro.data.ResourceStore|Object}\n             * @typings {typeof ResourceStore|object}\n             * @category Models & Stores\n             */\n            resourceStoreClass : ResourceStore,\n\n            //endregion\n\n            /**\n             * The initial data, to fill the {@link #property-calendarManagerStore} with.\n             * Should be an array of {@link SchedulerPro.model.CalendarModel} or it's configuration objects.\n             *\n             * @config {SchedulerPro.model.CalendarModel[]}\n             * @category Legacy inline data\n             */\n            calendarsData : null,\n\n            /**\n             * Set to `true` to reset the undo/redo queues of the internal {@link Core.data.stm.StateTrackingManager}\n             * after the Project has loaded. Defaults to `false`\n             * @config {Boolean} resetUndoRedoQueuesAfterLoad\n             * @category Advanced\n             */\n\n            supportShortSyncResponseNote : 'Note: Please consider enabling \"supportShortSyncResponse\" option to allow less detailed sync responses (https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/ProjectModel#config-supportShortSyncResponse)',\n\n            /**\n             * Enables early rendering in SchedulerPro, by postponing calculations to after the first refresh.\n             *\n             * Requires event data loaded to be pre-normalized to function as intended, since it will be used to render\n             * before engine has normalized the data. Given un-normalized data events will snap into place when\n             * calculations are finished.\n             *\n             * The Gantt chart will be read-only until the initial calculations are finished.\n             *\n             * @config {Boolean}\n             * @default\n             * @category Advanced\n             */\n            delayCalculation : true,\n\n            calendarManagerStore : {},\n\n            stmClass : StateTrackingManager\n        };\n    }\n\n    static get configurable() {\n        return {\n            /**\n             * Get/set {@link #property-calendarManagerStore} data.\n             *\n             * Always returns a {@link SchedulerPro.model.CalendarModel} array but also accepts an array of\n             * its configuration objects as input.\n             *\n             * @member {SchedulerPro.model.CalendarModel[]} calendars\n             * @accepts {SchedulerPro.model.CalendarModel[]|CalendarModelConfig[]}\n             * @category Inline data\n             */\n            /**\n             * Data use to fill the {@link #property-eventStore}. Should be a {@link SchedulerPro.model.CalendarModel}\n             * array or its configuration objects.\n             *\n             * @config {SchedulerPro.model.CalendarModel[]|CalendarModelConfig[]} calendars\n             * @category Inline data\n             */\n            calendars : null\n        };\n    }\n\n    // For TaskBoard compatibility\n    get taskStore() {\n        return this.eventStore;\n    }\n\n    //endregion\n\n    //region Inline data\n\n    get calendars() {\n        return this.calendarManagerStore.allRecords;\n    }\n\n    updateCalendars(calendars) {\n        this.calendarManagerStore.data = calendars;\n    }\n\n    //endregion\n}\n", "import Base from '../../../Core/Base.js';\nimport ProHorizontalLayoutStack from '../../eventlayout/ProHorizontalLayoutStack.js';\nimport ProHorizontalLayoutPack from '../../eventlayout/ProHorizontalLayoutPack.js';\n\n/**\n * @module SchedulerPro/view/mixin/SchedulerProEventRendering\n */\n\n/**\n * Config for event layout\n * @typedef {Object} EventLayoutConfig\n * @property {'stack'|'pack'|'mixed'|'none'} type Event layout type. Possible values for horizontal mode are\n * `stack`, `pack` and `none`. For vertical mode: `pack`, `mixed` and `none`.\n * @property {Function} layoutFn Horizontal mode only. This function allows to manually position events inside the row.\n * @property {Object} weights Horizontal mode only. Specifies groups order.\n * @property {String|Function} groupBy Horizontal mode only. Specifies a way to group events inside a row.\n */\n\n/**\n * Functions to handle event rendering in Scheduler Pro (EventModel -> dom elements).\n *\n * @mixin\n */\nexport default Target => class SchedulerProEventRendering extends (Target || Base) {\n    static get $name() {\n        return 'SchedulerProEventRendering';\n    }\n\n    static get configurable() {\n        return {\n            /**\n             * This config defines how to handle overlapping events. Valid values are:\n             * - `stack`, adjusts row height (only horizontal)\n             * - `pack`, adjusts event height\n             * - `mixed`, allows two events to overlap, more packs (only vertical)\n             * - `none`, allows events to overlap\n             *\n             * You can also provide a configuration object accepted by\n             * {@link SchedulerPro.eventlayout.ProHorizontalLayout} to group events or even take control over the\n             * layout (i.e. vertical position and height):\n             *\n             * To group events:\n             *\n             * ```javascript\n             * new SchedulerPro({\n             *     eventLayout : {\n             *         type    : 'stack',\n             *         weights : {\n             *             high   : 100,\n             *             normal : 150,\n             *             low    : 200\n             *         },\n             *         groupBy : 'prio'\n             *     }\n             * });\n             * ```\n             *\n             * To take control over the layout:\n             *\n             * ```javascript\n             * new SchedulerPro({\n             *     eventLayout : {\n             *         layoutFn : items => {\n             *             items.forEach(item => {\n             *                 item.top = 100 * Math.random();\n             *                 item.height = 100 * Math.random();\n             *             });\n             *\n             *             return 100;\n             *         }\n             *     }\n             * });\n             * ```\n             *\n             * For more info on grouping and layout please refer to {@link SchedulerPro.eventlayout.ProHorizontalLayout}\n             * doc article.\n             *\n             * @prp {'stack'|'pack'|'mixed'|'none'|EventLayoutConfig}\n             * @default\n             * @category Scheduled events\n             */\n            eventLayout : 'stack',\n\n            /**\n             * The class responsible for the packing horizontal event layout process.\n             * Override this to take control over the layout process.\n             * @config {Scheduler.eventlayout.HorizontalLayout}\n             * @typings {typeof HorizontalLayout}\n             * @default\n             * @private\n             * @category Misc\n             */\n            horizontalLayoutPackClass : ProHorizontalLayoutPack,\n\n            /**\n             * The class name responsible for the stacking horizontal event layout process.\n             * Override this to take control over the layout process.\n             * @config {Scheduler.eventlayout.HorizontalLayout}\n             * @typings {typeof HorizontalLayout}\n             * @default\n             * @private\n             * @category Misc\n             */\n            horizontalLayoutStackClass : ProHorizontalLayoutStack\n        };\n    }\n\n    //region Config\n\n    updateInternalEventLayout(eventLayout, oldEventLayout) {\n        const me = this;\n\n        if (!me.isConfiguring) {\n            me.clearLayouts();\n        }\n\n        super.updateInternalEventLayout(eventLayout, oldEventLayout);\n    }\n\n    //endregion\n\n    getEventLayout(config) {\n        config = super.getEventLayout(config);\n\n        if ('layoutFn' in config) {\n            config.type = 'layoutFn';\n        }\n\n        return config;\n    }\n\n    clearLayouts() {\n        const me = this;\n\n        if (me.layouts) {\n            for (const key in me.layouts) {\n                me.layouts[key].destroy();\n                delete me.layouts[key];\n            }\n        }\n    }\n\n    /**\n     * Get event layout handler. The handler decides the vertical placement of events within a resource.\n     * Returns null if no eventLayout is used (if {@link #config-eventLayout} is set to \"none\")\n     * @internal\n     * @returns {Scheduler.eventlayout.HorizontalLayout}\n     * @readonly\n     * @category Scheduled events\n     */\n    getEventLayoutHandler(eventLayout) {\n        const me = this;\n\n        if (!me.isHorizontal) {\n            return null;\n        }\n\n        const { timeAxisViewModel, horizontal } = me;\n\n        if (!me.layouts) {\n            me.layouts = {};\n        }\n\n        const { layouts } = me;\n\n        switch (eventLayout.type) {\n            // stack, adjust row height to fit all events\n            case 'stack': {\n                if (!layouts.horizontalStack) {\n                    layouts.horizontalStack = me.horizontalLayoutStackClass.new({\n                        scheduler                   : me,\n                        timeAxisViewModel,\n                        bandIndexToPxConvertFn      : horizontal.layoutEventVerticallyStack,\n                        bandIndexToPxConvertThisObj : horizontal,\n                        groupByThisObj              : me\n                    }, eventLayout);\n                }\n\n                return layouts.horizontalStack;\n            }\n            // pack, fit all events in available height by adjusting their height\n            case 'pack': {\n                if (!layouts.horizontalPack) {\n                    layouts.horizontalPack = me.horizontalLayoutPackClass.new({\n                        scheduler                   : me,\n                        timeAxisViewModel,\n                        bandIndexToPxConvertFn      : horizontal.layoutEventVerticallyPack,\n                        bandIndexToPxConvertThisObj : horizontal,\n                        groupByThisObj              : me\n                    }, eventLayout);\n                }\n\n                return layouts.horizontalPack;\n            }\n            case 'layoutFn': {\n                // Both methods are called on a layout\n                return {\n                    type                : 'layoutFn',\n                    scheduler           : me,\n                    applyLayout         : eventLayout.layoutFn,\n                    layoutEventsInBands : eventLayout.layoutFn\n                };\n            }\n            default:\n                return null;\n        }\n    }\n\n    get widgetClass() {}\n};\n", "import HorizontalRendering from '../../../Scheduler/view/orientation/HorizontalRendering.js';\n\n/**\n * @module SchedulerPro/view/orientation/ProHorizontalRendering\n */\n\n/**\n * Handles event rendering in Scheduler Pro horizontal mode. Populates render data with buffer duration.\n *\n * @internal\n */\nexport default class ProHorizontalRendering extends HorizontalRendering {\n\n    static $name = 'ProHorizontalRendering';\n\n    /**\n     * Populates render data with buffer data rendering.\n     * @param {HorizontalRenderData} renderData\n     * @returns {Boolean}\n     * @private\n     */\n    fillInnerSpanHorizontalPosition(renderData) {\n        const\n            me              = this,\n            { eventRecord } = renderData,\n            {\n                startMS    : innerStartMS,\n                endMS      : innerEndMS,\n                durationMS : innerDurationMS\n            }               = me.calculateMS(eventRecord, 'startDate', 'endDate'),\n            position        = me.calculateHorizontalPosition(renderData, innerStartMS, innerEndMS, innerDurationMS);\n\n        if (position) {\n            const { left, width } = position;\n\n            Object.assign(renderData, {\n                innerStartMS,\n                innerEndMS,\n                innerDurationMS,\n                bufferBeforeWidth : Math.max(left - renderData.left, 0),\n                // This could yield a really small number due to floating point accuracy, we can round the result\n                bufferAfterWidth  : Math.max(Math.floor(renderData.left + renderData.width - left - width), 0)\n            });\n\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n\n    getTimeSpanRenderData(timeSpan, rowRecord, includeOutside = false) {\n        const data = super.getTimeSpanRenderData(timeSpan, rowRecord, includeOutside);\n\n        if (data?.useEventBuffer) {\n            if (!this.fillInnerSpanHorizontalPosition(data)) {\n                return null;\n            }\n        }\n\n        return data;\n    }\n}\n", "import VerticalRendering from '../../../Scheduler/view/orientation/VerticalRendering.js';\n\n/**\n * @module SchedulerPro/view/orientation/ProVerticalRendering\n */\n\n/**\n * Handles event rendering in Scheduler Pro horizontal mode. Populates render data with buffer duration.\n *\n * @internal\n */\nexport default class ProVerticalRendering extends VerticalRendering {\n\n    static $name = 'ProVerticalRendering';\n\n    /**\n     * Populates render data with buffer data rendering.\n     * @param {HorizontalRenderData} renderData\n     * @returns {Boolean}\n     * @private\n     */\n    fillInnerSpanVerticalPosition(renderData) {\n        const\n            me                  = this,\n            { scheduler }       = me,\n            { eventRecord }     = renderData,\n            { isBatchUpdating } = eventRecord,\n            startDate           = isBatchUpdating ? eventRecord.get('startDate') : eventRecord.startDate,\n            endDate             = isBatchUpdating ? eventRecord.get('endDate') : eventRecord.endDate,\n            top                 = scheduler.getCoordinateFromDate(startDate),\n            innerStartMS        = startDate.getTime(),\n            innerEndMS          = endDate.getTime(),\n            innerDurationMS     = innerEndMS - innerStartMS;\n\n        let bottom = scheduler.getCoordinateFromDate(endDate),\n            height = bottom - top;\n\n        // Below, estimate height\n        if (bottom === -1) {\n            height = Math.round(innerDurationMS * scheduler.timeAxisViewModel.getSingleUnitInPixels('millisecond'));\n            bottom = top + height;\n        }\n\n        Object.assign(renderData, {\n            innerStartMS,\n            innerEndMS,\n            innerDurationMS,\n            bufferBeforeWidth : top - renderData.top,\n            bufferAfterWidth  : renderData.top + renderData.height - top - height\n        });\n\n        return true;\n    }\n\n    getTimeSpanRenderData(timeSpan, rowRecord, includeOutside = false) {\n        const data = super.getTimeSpanRenderData(timeSpan, rowRecord, includeOutside);\n\n        if (data?.useEventBuffer) {\n            if (!this.fillInnerSpanVerticalPosition(data)) {\n                return null;\n            }\n        }\n\n        return data;\n    }\n}\n", "import '../localization/En.js';\nimport DomHelper from '../../Core/helper/DomHelper.js';\nimport VersionHelper from '../../Core/helper/VersionHelper.js';\nimport SchedulingIssueResolution from './mixin/SchedulingIssueResolution.js';\nimport ProjectProgressMixin from './mixin/ProjectProgressMixin.js';\nimport SchedulerBase from '../../Scheduler/view/SchedulerBase.js';\nimport ProjectModel from '../model/ProjectModel.js';\nimport SchedulerProEventRendering from './mixin/SchedulerProEventRendering.js';\nimport ProHorizontalRendering from './orientation/ProHorizontalRendering.js';\nimport ProVerticalRendering from './orientation/ProVerticalRendering.js';\n\n/**\n * @module SchedulerPro/view/SchedulerProBase\n */\n\n/**\n * A thin base class for {@link SchedulerPro/view/SchedulerPro}. Includes fewer features by default, allowing smaller\n * custom built bundles if used in place of {@link SchedulerPro/view/SchedulerPro}.\n *\n * **NOTE:** In most scenarios you should use SchedulerPro instead of SchedulerProBase.\n *\n * @mixes SchedulerPro/view/mixin/SchedulerProEventRendering\n * @mixes SchedulerPro/view/mixin/ProjectProgressMixin\n *\n * @features SchedulerPro/feature/CalendarHighlight\n * @features SchedulerPro/feature/DependencyEdit\n * @features SchedulerPro/feature/EventBuffer\n * @features SchedulerPro/feature/EventResize\n * @features SchedulerPro/feature/EventSegmentDrag\n * @features SchedulerPro/feature/EventSegmentResize\n * @features SchedulerPro/feature/EventSegments\n * @features SchedulerPro/feature/NestedEvents\n * @features SchedulerPro/feature/PercentBar\n * @features SchedulerPro/feature/ResourceNonWorkingTime\n * @features SchedulerPro/feature/TaskEdit\n * @features SchedulerPro/feature/TimeSpanHighlight\n * @features SchedulerPro/feature/Versions\n *\n * @extends Scheduler/view/SchedulerBase\n * @mixes SchedulerPro/view/mixin/SchedulingIssueResolution\n * @widget\n */\nexport default class SchedulerProBase extends SchedulerBase.mixin(\n    ProjectProgressMixin,\n    SchedulingIssueResolution,\n    SchedulerProEventRendering\n) {\n\n    //region Config\n\n    static get $name() {\n        return 'SchedulerProBase';\n    }\n\n    static get type() {\n        return 'schedulerprobase';\n    }\n\n    static get configurable() {\n        return {\n            projectModelClass : ProjectModel,\n\n            /**\n             * A task field (id, wbsCode, sequenceNumber etc) that will be used when displaying and editing linked tasks.\n             * @config {String} dependencyIdField\n             * @default 'id'\n             */\n            dependencyIdField : 'id'\n        };\n    }\n\n    static get isSchedulerPro() {\n        return true;\n    }\n\n    //endregion\n\n    //region Store & model docs\n\n    // Configs\n\n    /**\n     * A {@link SchedulerPro.model.ProjectModel} instance or a config object. The project holds all SchedulerPro data.\n     * @config {SchedulerPro.model.ProjectModel|ProjectModelConfig} project\n     * @category Data\n     */\n\n    /**\n     * Inline events, will be loaded into the backing project's EventStore.\n     * @config {SchedulerPro.model.EventModel[]|Object[]} events\n     * @category Data\n     */\n\n    /**\n     * The {@link SchedulerPro.data.EventStore} holding the events to be rendered into the scheduler.\n     * @config {SchedulerPro.data.EventStore|EventStoreConfig} eventStore\n     * @category Data\n     */\n\n    /**\n     * Inline resources, will be loaded into the backing project's ResourceStore.\n     * @config {SchedulerPro.model.ResourceModel[]|ResourceModelConfig[]} resources\n     * @category Data\n     */\n\n    /**\n     * The {@link SchedulerPro.data.ResourceStore} holding the resources to be rendered into the scheduler.\n     * @config {SchedulerPro.data.ResourceStore|ResourceStoreConfig} resourceStore\n     * @category Data\n     */\n\n    // For some reason Typings won't accept AssignmentModelConfig here. Object will be turned into it though\n    /**\n     * Inline assignments, will be loaded into the backing project's AssignmentStore.\n     * @config {SchedulerPro.model.AssignmentModel[]|Object[]} assignments\n     * @category Data\n     */\n\n    /**\n     * The optional {@link SchedulerPro.data.AssignmentStore}, holding assignments between resources and events.\n     * Required for multi assignments.\n     * @config {SchedulerPro.data.AssignmentStore|AssignmentStoreConfig} assignmentStore\n     * @category Data\n     */\n\n    /**\n     * Inline dependencies, will be loaded into the backing project's DependencyStore.\n     * @config {SchedulerPro.model.DependencyModel[]|DependencyModelConfig[]} dependencies\n     * @category Data\n     */\n\n    /**\n     * The optional {@link SchedulerPro.data.DependencyStore}.\n     * @config {SchedulerPro.data.DependencyStore|DependencyStoreConfig} dependencyStore\n     * @category Data\n     */\n\n    /**\n     * Inline calendars, will be loaded into the backing project's CalendarManagerStore.\n     * @config {SchedulerPro.model.CalendarModel[]|CalendarModelConfig[]} calendars\n     * @category Data\n     */\n\n    // Properties\n\n    /**\n     * Get/set ProjectModel instance, containing the data visualized by the SchedulerPro.\n     * @member {SchedulerPro.model.ProjectModel} project\n     * @typings {ProjectModel}\n     * @category Data\n     */\n\n    /**\n     * Get/set events, applies to the backing project's EventStore.\n     * @member {SchedulerPro.model.EventModel[]} events\n     * @accepts {SchedulerPro.model.EventModel[]|EventModelConfig[]}\n     * @category Data\n     */\n\n    /**\n     * Get/set the event store instance of the backing project.\n     * @member {SchedulerPro.data.EventStore} eventStore\n     * @typings Scheduler/view/SchedulerBase:eventStore -> {Scheduler.data.EventStore||SchedulerPro.data.EventStore}\n     * @category Data\n     */\n\n    /**\n     * Get/set resources, applies to the backing project's ResourceStore.\n     * @member {SchedulerPro.model.ResourceModel[]} resources\n     * @accepts {SchedulerPro.model.ResourceModel[]|ResourceModelConfig[]}\n     * @category Data\n     */\n\n    /**\n     * Get/set the resource store instance of the backing project\n     * @member {SchedulerPro.data.ResourceStore} resourceStore\n     * @typings Scheduler/view/SchedulerBase:resourceStore -> {Scheduler.data.ResourceStore||SchedulerPro.data.ResourceStore}\n     * @category Data\n     */\n\n    // For some reason Typings won't accept AssignmentModelConfig here. Object will be turned into it though\n    /**\n     * Get/set assignments, applies to the backing project's AssignmentStore.\n     * @member {SchedulerPro.model.AssignmentModel[]} assignments\n     * @accepts {SchedulerPro.model.AssignmentModel[]|Object[]}\n     * @category Data\n     */\n\n    /**\n     * Get/set the event store instance of the backing project.\n     * @member {SchedulerPro.data.AssignmentStore} assignmentStore\n     * @typings Scheduler/view/SchedulerBase:assignmentStore -> {Scheduler.data.AssignmentStore||SchedulerPro.data.AssignmentStore}\n     * @category Data\n     */\n\n    /**\n     * Get/set dependencies, applies to the backing projects DependencyStore.\n     * @member {SchedulerPro.model.DependencyModel[]} dependencies\n     * @accepts {SchedulerPro.model.DependencyModel[]|DependencyModelConfig[]}\n     * @category Data\n     */\n\n    /**\n     * Get/set the dependencies store instance of the backing project.\n     * @member {SchedulerPro.data.DependencyStore} dependencyStore\n     * @typings Scheduler/view/SchedulerBase:dependencyStore -> {Scheduler.data.DependencyStore||SchedulerPro.data.DependencyStore}\n     * @category Data\n     */\n\n    /**\n     * Get/set calendars, applies to the backing projects CalendarManagerStore.\n     * @member {SchedulerPro.model.CalendarModel[]} calendars\n     * @accepts {SchedulerPro.model.CalendarModel[]|CalendarModelConfig[]}\n     * @category Data\n     */\n\n    //endregion\n\n    //region Overrides\n\n    onPaintOverride() {\n        // Internal procedure used for paint method overrides\n        // Not used in onPaint() because it may be chained on instance and Override won't be applied\n    }\n\n    //endregion\n\n    //region Inline data\n\n    // Pro specific extension of SchedulerStores\n\n    set calendars(calendars) {\n        this.project.calendars = calendars;\n    }\n\n    get calendars() {\n        return this.project.calendars;\n    }\n\n    //endregion\n\n    //region Mode\n\n    /**\n     * Get mode (horizontal/vertical)\n     * @property {'horizontal'|'vertical'}\n     * @readonly\n     * @category Common\n     */\n    get mode() {\n        return this._mode;\n    }\n\n    set mode(mode) {\n        const me = this;\n\n        me._mode = mode;\n\n        if (!me[mode]) {\n            me.element.classList.add(`b-sch-${mode}`);\n\n            if (mode === 'horizontal') {\n                me.horizontal = new ProHorizontalRendering(me);\n\n                if (me.isPainted) {\n                    me.horizontal.init();\n                }\n\n            }\n            else if (mode === 'vertical') {\n                me.vertical = new ProVerticalRendering(me);\n\n                if (me.rendered) {\n                    me.vertical.init();\n                }\n            }\n        }\n    }\n\n    //endregion\n\n    //region Internal\n\n    // Overrides grid to take project loading into account\n    toggleEmptyText() {\n        const\n            me = this;\n\n        if (me.bodyContainer && me.rowManager) {\n            DomHelper.toggleClasses(me.bodyContainer, 'b-grid-empty', !(me.rowManager.rowCount || me.project.isLoadingOrSyncing));\n        }\n    }\n\n    // Needed to work with Gantt features\n    get taskStore() {\n        return this.project.eventStore;\n    }\n\n    //endregion\n\n    createEvent(startDate, resourceRecord, row) {\n        // For resources with a calendar, ensure the date is inside a working time range\n        if (!resourceRecord.isWorkingTime(startDate)) {\n            return;\n        }\n\n        // If task editor is active dblclick will trigger number of async actions:\n        // store add which would schedule project commit\n        // editor cancel on next animation frame\n        // editor hide\n        // rejecting previous transaction\n        // and there is also dependency feature listening to transitionend on scheduler to draw lines after\n        // It can happen that user dblclicks too fast, then event will be added, then dependency will schedule itself\n        // to render, and then event will be removed as part of transaction rejection from editor. So we cannot add\n        // event before active transaction is done.\n        if (this.taskEdit && this.taskEdit.isEditing) {\n            this.ion({\n                aftertaskedit : () => super.createEvent(startDate, resourceRecord, row),\n                once          : true\n            });\n        }\n        else {\n            return super.createEvent(startDate, resourceRecord, row);\n        }\n    }\n\n}\n\nSchedulerProBase.initClass();\nVersionHelper.setVersion('schedulerpro', '5.3.7');\n", "import StringHelper from '../../Core/helper/StringHelper.js';\nimport SchedulerProBase from './SchedulerProBase.js';\nimport '../column/ScaleColumn.js';\nimport '../../Scheduler/feature/NonWorkingTime.js';\n\nimport '../localization/En.js';\nimport '../../Scheduler/column/TimeAxisColumn.js';\n\n// Always required features\nimport '../../Grid/feature/Tree.js';\nimport '../../Grid/feature/RegionResize.js';\nimport Histogram from '../../Core/widget/graph/Histogram.js';\nimport { TimeUnit } from '../../Engine/scheduling/Types.js';\nimport { CalculatedValueGen } from '../../ChronoGraph/chrono/Identifier.js';\nimport DateHelper from '../../Core/helper/DateHelper.js';\nimport { BaseCalendarMixin } from '../../Engine/quark/model/scheduler_basic/BaseCalendarMixin.js';\nimport NumberFormat from '../../Core/helper/util/NumberFormat.js';\nimport Tooltip from '../../Core/widget/Tooltip.js';\n\n/**\n * @module SchedulerPro/view/ResourceHistogram\n */\n\nconst emptyFn = () => {};\n/**\n * An object representing a certain time interval.\n *\n * @typedef {Object} TickInfo\n * @property {Date} startDate The interval start date\n * @property {Date} endDate The interval end date\n */\n\n/**\n * An object containing info on the resource allocation in a certain time interval.\n *\n * The object is used when rendering interval bars and tooltips so it additionally provides a `rectConfig` property\n * which contains a configuration object for the `rect` SVG-element representing the interval bar.\n *\n * @typedef {Object} ResourceAllocationIntervalInfo\n * @property {SchedulerPro.model.ResourceModel} resource Resource model\n * @property {Set} assignments Set of ongoing assignments for the interval\n * @property {Map} assignmentIntervals Individual ongoing assignments allocation indexed by assignments\n * @property {Number} effort Resource effort in the interval (in milliseconds)\n * @property {Boolean} isOverallocated `true` if the interval contains a fact of the resource overallocation\n * @property {Boolean} isUnderallocated `true` if the resource is underallocated in the interval\n * @property {Number} maxEffort Maximum possible resource effort in the interval (in milliseconds)\n * @property {DomConfig} rectConfig The rectangle DOM configuration object\n * @property {TickInfo} tick The time interval\n * @property {Number} units Resource allocation in percents\n */\n\n/**\n * This widget displays a read-only timeline report of the workload for the resources in a\n * {@link SchedulerPro/model/ProjectModel project}. The resource allocation is visualized as bars along the time axis\n * with an optional line indicating the maximum available time for each resource. A {@link SchedulerPro/column/ScaleColumn}\n * is also added automatically.\n *\n * To create a standalone histogram, simply configure it with a Project instance:\n *\n * ```javascript\n * const project = new ProjectModel({\n *     autoLoad  : true,\n *     transport : {\n *         load : {\n *             url : 'examples/schedulerpro/view/data.json'\n *         }\n *     }\n * });\n *\n * const histogram = new ResourceHistogram({\n *     project,\n *     appendTo    : 'targetDiv',\n *     rowHeight   : 60,\n *     minHeight   : '20em',\n *     flex        : '1 1 50%',\n *     showBarTip  : true,\n *     columns     : [\n *         {\n *             width : 200,\n *             field : 'name',\n *             text  : 'Resource'\n *         }\n *     ]\n * });\n * ```\n *\n * {@inlineexample SchedulerPro/view/ResourceHistogram.js}\n *\n * ## Pairing the component\n *\n * You can also pair the histogram with other timeline views such as the Gantt or Scheduler,\n * using the {@link Scheduler/view/TimelineBase#config-partner} config.\n *\n * You can configure (or hide completely) the built-in scale column easily:\n *\n * ```javascript\n * const histogram = new ResourceHistogram({\n *    project,\n *    appendTo    : 'targetDiv',\n *    columns     : [\n *        {\n *            width : 200,\n *            field : 'name',\n *            text  : 'Resource'\n *        },\n *        // Hide the scale column (or add any other column configs)\n *        {\n *            type   : 'scale',\n *            hidden : true\n *        }\n *    ]\n * });\n * ```\n *\n * ## Changing displayed values\n *\n * To change the histogram bar texts, supply a {@link #config-getBarText} function.\n * Here for example the provided function displays resources time **left** instead of\n * allocated time\n *\n * ```javascript\n * new ResourceHistogram({\n *     getBarText(datum) {\n *         const resourceHistogram = this.owner;\n *\n *         // get default bar text\n *         let result = resourceHistogram.getBarTextDefault();\n *\n *         // and if some work is done in the tick\n *         if (result) {\n *\n *             const unit = resourceHistogram.getBarTextEffortUnit();\n *\n *             // display the resource available time\n *             result = resourceHistogram.getEffortText(datum.maxEffort - datum.effort, unit);\n *         }\n *\n *         return result;\n *     },\n * })\n * ```\n *\n * @extends SchedulerPro/view/SchedulerProBase\n * @classtype resourcehistogram\n * @widget\n */\nexport default class ResourceHistogram extends SchedulerProBase {\n\n    //region Config\n\n    static $name = 'ResourceHistogram';\n\n    static type = 'resourcehistogram';\n\n    /**\n     * @hideconfigs durationDisplayPrecision, resourceColumns, enableRecurringEvents, eventBarTextField,\n     * eventBodyTemplate, eventColor, eventLayout, eventRenderer, eventRendererThisObj, eventStyle,\n     * horizontalEventSorterFn, horizontalLayoutPackClass, horizontalLayoutStackClass, milestoneAlign,\n     * milestoneTextPosition, highlightPredecessors, highlightSuccessors, removeUnassignedEvent,\n     * eventAssignHighlightCls, eventCls, eventSelectedCls, fixedEventCls, overScheduledEventClass,\n     * timeZone\n     */\n\n    static configurable = {\n        sortFeatureStore      : 'store',\n        timeAxisColumnCellCls : 'b-sch-timeaxis-cell b-resourcehistogram-cell',\n\n        /**\n         * Effort value format string.\n         * Must be a template supported by {@link Core/helper/util/NumberFormat} class.\n         * @config {String}\n         * @default\n         */\n        effortFormat : '0.#',\n\n        /**\n         * Specifies whether effort values should display units or not.\n         * @config {Boolean}\n         * @default\n         */\n        showEffortUnit : true,\n\n        rowHeight : 50,\n\n        // <remove-on-release>\n        // TODO: docs + tests\n        // </remove-on-release>\n        useProjectTimeUnitsForScale : false,\n\n        /**\n         * Default time unit to display resources effort values.\n         * The value is used as default when displaying effort in tooltips and bars text.\n         * Yet the effective time unit used might change dynamically when zooming in the histogram\n         * so its ticks unit gets smaller than the default unit.\n         * Please use {@link #config-barTipEffortUnit} to customize default units for tooltips only\n         * and {@link #config-barTextEffortUnit} to customize default units in bar texts.\n         * @config {'millisecond'|'second'|'minute'|'hour'|'day'|'week'|'month'|'quarter'|'year'}\n         * @default hour\n         */\n        effortUnit : TimeUnit.Hour,\n\n        /**\n         * Default time unit used for displaying resources effort in bars.\n         * Yet the effective time unit used might change dynamically when zooming in the histogram\n         * so its ticks unit gets smaller than the default unit.\n         * Please use {@link #config-barTipEffortUnit} to customize default units for tooltips\n         * (or {@link #config-effortUnit} to customize both texts and tooltips default units).\n         * @config {'millisecond'|'second'|'minute'|'hour'|'day'|'week'|'month'|'quarter'|'year'}\n         * @default hour\n         */\n        barTextEffortUnit : null,\n\n        /**\n         * Default time unit used when displaying resources effort in tooltips.\n         * Yet the effective time unit used might change dynamically when zooming in the histogram\n         * so its ticks unit gets smaller than the default unit.\n         * Please use {@link #config-barTextEffortUnit} to customize default units for bar texts\n         * (or {@link #config-effortUnit} to customize both texts and tooltips default units).\n         * @config {'millisecond'|'second'|'minute'|'hour'|'day'|'week'|'month'|'quarter'|'year'}\n         * @default hour\n         */\n        barTipEffortUnit : null,\n\n        /**\n         * Set to `true` if you want to display the maximum resource allocation line.\n         * @config {Boolean}\n         * @default\n         */\n        showMaxEffort : true,\n\n        /**\n         * Set to `true` if you want to display resources effort values in bars\n         * (for example: `24h`, `7d`, `60min` etc.).\n         * The text contents can be changed by providing {@link #config-getBarText} function.\n         * @config {Boolean}\n         */\n        showBarText : false,\n\n        /**\n         * Set to `true` if you want to display a tooltip when hovering an allocation bar. You can also pass a\n         * {@link Core/widget/Tooltip} config object.\n         * Please use {@link #config-barTooltipTemplate} function to customize the tooltip contents.\n         * @config {Boolean|TooltipConfig}\n         */\n        showBarTip : false,\n\n        barTooltip : null,\n\n        barTooltipClass : Tooltip,\n\n        series : {\n            maxEffort : {\n                type  : 'outline',\n                field : 'maxEffort'\n            },\n            effort : {\n                type  : 'bar',\n                field : 'effort'\n            }\n        },\n\n        /**\n         * A Function which returns a CSS class name to add to a rectangle element.\n         * The following parameters are passed:\n         * @param {Object} series - The series being rendered\n         * @param {DomConfig} rectConfig - The rectangle configuration object\n         * @param {Object} datum - The datum being rendered\n         * @param {Number} index - The index of the datum being rendered\n         * @config {Function}\n         */\n        getRectClass : null,\n\n        createEventOnDblClick : false,\n        readOnly              : true,\n\n        // <remove-on-release>\n        // TODO: get rid of getBarTip in 6.0\n        // </remove-on-release>\n        /**\n         * A Function which returns the tooltip text to display when hovering a bar.\n         * The following parameters are passed:\n         * @param {Object} series - The series being rendered\n         * @param {DomConfig} rectConfig - The rectangle configuration object\n         * @param {Object} datum - The datum being rendered\n         * @param {Number} index - The index of the datum being rendered\n         * @deprecated Since 5.0.0. Please use {@link #config-barTooltipTemplate}\n         * @config {Function}\n         */\n        getBarTip : null,\n\n        /**\n         * A Function which returns the tooltip text to display when hovering a bar.\n         * The following parameters are passed:\n         * @param {Object} context The tooltip context info\n         * @param {ResourceAllocationIntervalInfo} context.datum The histogram bar being hovered info\n         * @param {Core.widget.Tooltip} context.tip The tooltip instance\n         * @param {HTMLElement} context.element The Element for which the Tooltip is monitoring mouse movement\n         * @param {HTMLElement} context.activeTarget The target element that triggered the show\n         * @param {Event} context.event The raw DOM event\n         * @config {Function}\n         */\n        barTooltipTemplate({ datum }) {\n            let result = '';\n\n            const { effort, isGroup } = datum;\n\n            if (effort) {\n                if (isGroup) {\n                    result = this.getGroupBarTip(...arguments);\n                }\n                else {\n                    result = this.getResourceBarTip(...arguments);\n                }\n            }\n\n            return result;\n        },\n\n        /**\n         * A Function which returns the text to render inside a bar.\n         *\n         * Here for example the provided function displays resources time **left** instead of\n         * allocated time\n         *\n         * ```javascript\n         * new ResourceHistogram({\n         *     getBarText(datum) {\n         *         const resourceHistogram = this.owner;\n         *\n         *         const { showBarText } = resourceHistogram;\n         *\n         *         let result = '';\n         *\n         *         // respect existing API - show bar texts only when \"showBarText\" is true\n         *         // and if some work is done in the tick\n         *         if (showBarText && datum.effort) {\n         *\n         *             const unit = resourceHistogram.getBarTextEffortUnit();\n         *\n         *             // display the resource available time\n         *             result = resourceHistogram.getEffortText(datum.maxEffort - datum.effort, unit);\n         *         }\n         *\n         *         return result;\n         *     },\n         * })\n         * ```\n         *\n         * **Please note** that the function will be injected into the underlying\n         * {@link Core/widget/graph/Histogram} component that is used under the hood\n         * to render actual charts.\n         * So `this` will refer to the {@link Core/widget/graph/Histogram} instance, not\n         * this class instance.\n         * To access the view please use `this.owner` in the function:\n         *\n         * ```javascript\n         * new ResourceHistogram({\n         *     getBarText(datum) {\n         *         // \"this\" in the method refers core Histogram instance\n         *         // get the view instance\n         *         const resourceHistogram = this.owner;\n         *\n         *         .....\n         *     },\n         * })\n         * ```\n         * The following parameters are passed:\n         * @param {ResourceAllocationIntervalInfo} datum The datum being rendered\n         * @param {Number} index The index of the datum being rendered\n         * @returns {String} Tdxt to render inside the bar\n         * @config {Function}\n         */\n        getBarText : null,\n\n        getBarTextRenderData : undefined,\n\n        groupBarTipAssignmentLimit : 5,\n\n        histogramWidgetClass : Histogram,\n\n        histogramWidgetConfig : null,\n\n        /**\n         * Set to `true` to include inactive tasks allocation and `false` to not take such tasks into account.\n         * @config {Boolean}\n         * @default\n         */\n        includeInactiveEvents : false,\n\n        fixedRowHeight : true\n    };\n\n    // Cannot use `static properties = {}`, new Map would pollute the prototype\n    static get properties() {\n        return {\n            allocationReportByRecord   : new Map(),\n            allocationDataByRecord     : new Map(),\n            allocationObserverByRecord : new Map(),\n            resourceGroupsToUpdate     : new Set(),\n            resourceGroupsAllocation   : new Map()\n        };\n    }\n    //endregion\n\n    //region Constructor/Destructor\n\n    construct(config) {\n        super.construct(config);\n\n        const me = this;\n\n        // debounce refreshRows calls\n        me.scheduleRefreshRows = me.createOnFrame(me.refreshRows, [], me, true);\n\n        // <remove-on-release>\n        // TODO: hack to get rid of \"Horizontal\" store tracking approach.\n        //  It seems there is no need to use 99% of the \"Horizontal\" mode for the histogram\n        //  so ideally we need to make a special class for it.\n        // </remove-on-release>\n        me.horizontal.refreshResourcesWhenReady = me.horizontal.onAssignmentStoreChange = me.horizontal.renderer = function() {};\n\n        me.rowManager.ion({\n            beforeRowHeight : 'onBeforeRowHeight',\n            renderRow       : 'onRowManagerRenderRow',\n            thisObj         : me\n        });\n    }\n\n    get timeAxis() {\n        return super.timeAxis;\n    }\n\n    set timeAxis(timeAxis) {\n        const currentTimeAxis = this._timeAxis;\n\n        super.timeAxis = timeAxis;\n\n        if (this.partner && !timeAxis || (currentTimeAxis && currentTimeAxis === timeAxis)) {\n            return;\n        }\n\n        this._timeAxis.ion({\n            name           : 'timeAxis',\n            endReconfigure : 'onTimeAxisEndReconfigure',\n            thisObj        : this\n        });\n    }\n\n    async onRowManagerRenderRow({ record }) {\n        // render group level histogram and scale (when project is calculated)\n        if (record.isSpecialRow) {\n            const me = this;\n\n            if (me.project.isDelayingCalculation) {\n                await me.project.commitAsync();\n\n                if (me.isDestroyed) {\n                    return;\n                }\n            }\n\n            me.renderGroupHistogram(record);\n            me.renderGroupScale(record);\n        }\n    }\n\n    onDestroy() {\n        const me = this;\n\n        for (const [record, observer] of me.allocationObserverByRecord?.entries()) {\n            if (record.removeObserver) {\n                record.removeObserver(observer);\n                me.allocationObserverByRecord.delete(record);\n            }\n        }\n\n        for (const [record, entity] of me.allocationReportByRecord?.entries()) {\n            if (record.removeEntity) {\n                record.removeEntity?.(entity);\n                me.allocationReportByRecord.delete(entity);\n            }\n        }\n\n        me.allocationDataByRecord.clear();\n\n        me._histogramWidget?.destroy();\n        me._groupHistogramWidget?.destroy();\n        me.barTooltip = null;\n    }\n\n    //endregion\n\n    //region Project\n\n    updateProject(project) {\n        this.detachListeners('resourceHistogramProject');\n\n        project.ion({\n            name                  : 'resourceHistogramProject',\n            refresh               : 'internalOnProjectRefresh',\n            delayCalculationStart : 'onProjectDelayCalculationStart',\n            delayCalculationEnd   : 'onProjectDelayCalculationEnd',\n            repopulateReplica     : 'onRepopulateReplica',\n\n            thisObj : this\n        });\n\n        this.store = project.resourceStore;\n    }\n\n    //endregion\n\n    //region Internal\n\n    scheduleRefreshRows() {}\n\n    // <remove-on-release>\n    // TODO: hack to get rid of \"HorizontalRendering\" events rendering logic\n    // </remove-on-release>\n    getEventsToRender() {}\n\n    getRowHeight() {\n        return this.rowHeight;\n    }\n\n    convertEffortUnit(value, unit, toUnit) {\n        return this.project.run('$convertDuration', value, unit, toUnit);\n    }\n\n    updateUseProjectTimeUnitsForScale() {\n        const me = this;\n        // Below this.scalePoints assignment of doesn't work until ResourceHistogram is painted\n        // since ScaleWidget being constructed tries to read its rootElement which results:\n        // \"Floating Widgets must have \"rootElement\" to be ...\"\n        if (me.isPainted) {\n            // we need to regenerate ScaleColumn points according to new unit values\n            const eventParams = { scalePoints : me.generateScalePoints() };\n\n            /**\n             * Fires when the component generates points for the {@link #property-scaleColumn scale column}.\n             *\n             * Use a listeners to override the generated scale points:\n             *\n             * ```javascript\n             * new ResourceHistogram({\n             *     ...\n             *     listeners : {\n             *         generateScalePoints(params) {\n             *             // provide text for each scale point (if not provided already)\n             *             params.scalePoints.forEach(point => {\n             *                 point.text = point.text || point.value;\n             *             });\n             *         }\n             *     }\n             * })\n             * ```\n             *\n             * @param {SchedulerPro.view.ResourceHistogram} source The component instance\n             * @param {ScalePoint[]} scalePoints Array of objects representing scale points. Each entry can have properties:\n             * - `value` - point value\n             * - `unit` - point value unit\n             * - `text` - label text (if not provided the point will not have a label displayed)\n             * @event generateScalePoints\n             */\n            me.trigger('generateScalePoints', eventParams);\n\n            // allow to override the points in a listener\n            me._generatedScalePoints = me.scalePoints = eventParams.scalePoints;\n\n            me.scheduleRefreshRows();\n        }\n    }\n\n    get eventStore() {\n        return this.project?.eventStore;\n    }\n\n    set eventStore(eventStore) {\n        super.eventStore = eventStore;\n    }\n\n    /**\n     * The locked grid scale column reference.\n     * @member {SchedulerPro.column.ScaleColumn} scaleColumn\n     * @readonly\n     */\n    get scaleColumn() {\n        return this.columns.query(column => column.isScaleColumn)[0];\n    }\n\n    get scalePoints() {\n        return this._scalePoints;\n    }\n\n    set scalePoints(scalePoints) {\n        const\n            { histogramWidget, scaleColumn } = this,\n            lastPoint                                 = scalePoints[scalePoints.length - 1],\n            { value : scaleMax, unit : scaleUnit }    = lastPoint;\n\n        this.scaleUnit    = scaleUnit;\n        this._scalePoints = scalePoints;\n\n        let maxInScaleUnits = scaleMax;\n\n        if (scaleColumn) {\n            const { scaleWidget } = scaleColumn;\n\n            maxInScaleUnits += scaleWidget.scaleMaxPadding * scaleMax;\n        }\n\n        // Applying new maximum value to the histogram.\n        // We have to convert scale units to milliseconds since allocation report provides values in milliseconds.\n        histogramWidget.topValue = this.useProjectTimeUnitsForScale\n            ? this.convertEffortUnit(maxInScaleUnits, scaleUnit, TimeUnit.Millisecond)\n            : DateHelper.asMilliseconds(maxInScaleUnits, scaleUnit);\n\n        // Applying new points to the scale column\n        if (scaleColumn) {\n            scaleColumn.scalePoints = scalePoints;\n        }\n    }\n\n    buildScalePointText(scalePoint) {\n        return `${scalePoint.value}${DateHelper.getShortNameOfUnit(scalePoint.unit)}`;\n    }\n\n    /**\n     * Generates points for the {@link #property-scaleColumn scale column}.\n     *\n     * **Override the method to customize the scale column points.**\n     *\n     * @param {Number} [scaleMax] Maximum value for the scale. Uses current timeaxis increment if not provided.\n     * @param {'millisecond'|'second'|'minute'|'hour'|'day'|'week'|'month'|'quarter'|'year'} [unit] Time\n     * unit `scaleMax` argument is expressed in.\n     * Uses current timeaxis unit if not provided.\n     * @returns {ScalePoint[]} Array of objects representing scale points. Each entry can have properties:\n     * - `value` - point value\n     * - `unit` - point value unit\n     * - `text` - label text (if not provided the point will not have a label displayed)\n     */\n    generateScalePoints(scaleMax, unit) {\n        // bail out if there is no project or it's not in the graph\n        if (!this.project?.graph) {\n            return;\n        }\n\n        const\n            { timeAxis } = this,\n            scalePoints           = [];\n\n        scaleMax = scaleMax || timeAxis.increment;\n        unit = unit || timeAxis.unit;\n\n        let scaleStep;\n\n        // If the ticks are defined as 1 unit let's break it down to smaller units\n        if (scaleMax === 1) {\n            // getting timeaxis tick sub-unit and number of them in a tick\n            unit     = DateHelper.getSmallerUnit(unit);\n            scaleMax = Math.round(\n                this.useProjectTimeUnitsForScale ? this.convertEffortUnit(scaleMax, timeAxis.unit, unit)\n                    : DateHelper.as(unit, scaleMax, timeAxis.unit)\n            );\n        }\n\n        // Let's try to guess how many points in the scale will work nicely\n        for (const factor of [7, 5, 4, 3, 2]) {\n            // unitsNumber is multiple of \"factor\" -> we generate \"factor\"-number of points\n            if (!(scaleMax % factor)) {\n                scaleStep = scaleMax / factor;\n                break;\n            }\n        }\n\n        // fallback to a single point equal to maximum value\n        if (!scaleStep) {\n            scaleStep = scaleMax;\n        }\n\n        for (let value = scaleStep; value <= scaleMax; value += scaleStep) {\n            scalePoints.push({\n                value\n            });\n        }\n\n        const lastPoint = scalePoints[scalePoints.length - 1];\n        // put unit and label to the last point\n        lastPoint.unit = unit;\n        lastPoint.text = this.buildScalePointText(lastPoint);\n\n        return scalePoints;\n    }\n\n    updateViewPreset(viewPreset) {\n        const me = this;\n\n        // Set a flag indicating that we're inside of `updateViewPreset` so our `onTimeAxisEndReconfigure` will skip its call.\n        // We call it here later.\n        me._updatingViewPreset = true;\n        super.updateViewPreset(...arguments);\n        me._updatingViewPreset = false;\n\n        // In `super,updateViewPreset` function `this.render` is called which checks if the engine is not dirty\n        // ..and we modify `ticksIdentifier` atom in `onTimeAxisEndReconfigure`\n        // so the engine state gets dirty and rendering gets delayed which ends up an exception.\n        // So we call `onTimeAxisEndReconfigure` after super `updateViewPreset` code\n        // to keep the engine non-dirty while zooming/setting a preset.\n        // This scenario is covered w/ SchedulerPro/tests/pro/view/ResourceHistogramZoom.t.js\n        if (me.project.isInitialCommitPerformed && me.isPainted) {\n            me.onTimeAxisEndReconfigure();\n        }\n    }\n\n    onPaint({ firstPaint }) {\n        super.onPaint({ firstPaint });\n\n        if (firstPaint && this.showBarTip) {\n            this.barTooltip = {};\n        }\n    }\n\n    updateGetBarTip(value) {\n        // reset barTooltipTemplate if custom getBarTip function is provided\n        if (value) {\n            this.barTooltipTemplate = null;\n        }\n\n        return value;\n    }\n\n    changeBarTooltip(tooltip, oldTooltip) {\n        oldTooltip?.destroy();\n\n        if (tooltip) {\n            return tooltip.isTooltip ? tooltip : this.barTooltipClass.new({\n                forElement  : this.timeAxisSubGridElement,\n                forSelector : '.b-histogram rect',\n                hoverDelay  : 0,\n                trackMouse  : false,\n                cls         : 'b-celltooltip-tip',\n                getHtml     : this.getTipHtml.bind(this)\n            }, this.showBarTip, tooltip);\n        }\n\n        return null;\n    }\n\n    onRepopulateReplica() {\n        this.ticksIdentifier = null;\n        this.allocationReportByRecord.clear();\n        this.allocationDataByRecord.clear();\n        this.allocationObserverByRecord.clear();\n    }\n\n    getTipHtml(args) {\n        const\n            { activeTarget } = args,\n            index         = activeTarget.dataset.index,\n            record        = this.getRecordFromElement(activeTarget),\n            histogramData = this.allocationDataByRecord.get(record);\n\n        args = Object.assign({}, args);\n\n        args.index = parseInt(index, 10);\n        args.datum = histogramData[args.index];\n\n        return this.barTooltipTemplate?.(args);\n    }\n\n    buildTicksIdentifier() {\n        const\n            me    = this,\n            graph = me.project.getGraph();\n\n        if (!me.ticksIdentifier) {\n            me.ticksIdentifier = graph.addIdentifier(CalculatedValueGen.new());\n        }\n\n        me.ticksIdentifier.writeToGraph(graph, new BaseCalendarMixin({\n            unspecifiedTimeIsWorking : false,\n            intervals                : me.timeAxis.ticks.map(tick => {\n                return {\n                    startDate : tick.startDate,\n                    endDate   : tick.endDate,\n                    isWorking : true\n                };\n            })\n        }));\n\n        // process ticks to detect if their widths are monotonous\n        // or some tick has a different width value\n        me.collectTicksWidth();\n\n        return me.ticksIdentifier;\n    }\n\n    collectTicksWidth() {\n        const\n            { ticks }     = this.timeAxis,\n            prevDuration  = ticks[0].endDate - ticks[0].startDate,\n            tickDurations = { 0 : prevDuration };\n\n        let\n            totalDuration = prevDuration,\n            isMonotonous  = true;\n\n        for (let i = 1, { length } = ticks; i < length; i++) {\n            const\n                tick   = ticks[i],\n                duration = tick.endDate - tick.startDate;\n\n            // the ticks width is different -> reset isMonotonous flag\n            if (prevDuration !== duration) {\n                isMonotonous = false;\n            }\n\n            totalDuration    += duration;\n            tickDurations[i] = duration;\n        }\n\n        // if the ticks widths are not monotonous we need to calculate\n        // each bar width to provide it to the histogram widget later\n        if (!isMonotonous) {\n            const ticksWidth = {};\n            for (let i = 0, { length } = ticks; i < length; i++) {\n                ticksWidth[i] = tickDurations[i] / totalDuration;\n            }\n            this.ticksWidth = ticksWidth;\n        }\n        else {\n            this.ticksWidth = null;\n        }\n    }\n\n    onProjectDelayCalculationStart() {\n        this.suspendRefresh();\n    }\n\n    onProjectDelayCalculationEnd() {\n        this.resumeRefresh(true);\n    }\n\n    projectUnitsHasChanged() {\n        const { project } = this;\n\n        return project.daysPerMonth !== this._projectDaysPerMonth ||\n            project.daysPerWeek !== this._projectDaysPerWeek ||\n            project.hoursPerDay !== this._projectHoursPerDay;\n    }\n\n    internalOnProjectRefresh({ source, isCalculated }) {\n        if (isCalculated) {\n            const me = this;\n\n            if (!me.ticksIdentifier) {\n                me.onTimeAxisEndReconfigure();\n            }\n\n            // if project units has changed and we use them for scale points\n            if (me.useProjectTimeUnitsForScale && me.projectUnitsHasChanged()) {\n                me._projectDaysPerMonth = source.daysPerMonth;\n                me._projectDaysPerWeek = source.daysPerWeek;\n                me._projectHoursPerDay = source.hoursPerDay;\n\n                // regenerate scale points\n                const eventParams = { scalePoints : me.generateScalePoints() };\n\n                me.trigger('generateScalePoints', eventParams);\n\n                // allow to override the points in a listener\n                me._generatedScalePoints = me.scalePoints = eventParams.scalePoints;\n            }\n        }\n    }\n\n    relayStoreDataChange(event) {\n        super.relayStoreDataChange(event);\n\n        if (this.store.count === 0) {\n            // To clear histogram when no rows to refresh\n            this.histogramWidget.data = [];\n            this.histogramWidget.refresh();\n        }\n    }\n\n    get columns() {\n        return super.columns;\n    }\n\n    set columns(columns) {\n        const me = this;\n\n        super.columns = columns;\n\n        if (!me.isDestroying) {\n            me.timeAxisColumn.renderer = me.renderResourceHistogram;\n            me.timeAxisColumn.cellCls = me.timeAxisColumnCellCls;\n\n            // Unless provided from outside, insert the scale column in the correct place\n            if (!columns.some(col => col.type === 'scale')) {\n                me.insertScaleColumn();\n            }\n        }\n    }\n\n    insertScaleColumn() {\n        this.columns.rootNode.insertChild({\n            type : 'scale'\n        }, this.timeAxisColumn);\n    }\n\n    buildHistogramWidget(config) {\n        const me = this;\n\n        if (me.getBarTextRenderData && !config.getBarTextRenderData) {\n            config.getBarTextRenderData = me.getBarTextRenderData;\n        }\n\n        const histogramWidget = me.histogramWidgetClass.new({\n            owner              : me,\n            appendTo           : me.element,\n            cls                : 'b-hide-offscreen b-resourcehistogram-histogram',\n            height             : me.rowHeight,\n            width              : me.timeAxisColumn?.width || 0,\n            omitZeroHeightBars : true,\n            data               : [],\n            getBarTip          : !me.barTooltipTemplate && me.getBarTip || emptyFn,\n            getRectClass       : me.getRectClass || me.getRectClassDefault,\n            getBarText         : me.getBarText || me.getBarTextDefault,\n            series             : me.series\n        }, me.histogramWidgetConfig, config);\n\n        me.getBarTextDefault.bind(histogramWidget);\n\n        return histogramWidget;\n    }\n\n    get histogramWidget() {\n        const me = this;\n\n        if (!me._histogramWidget) {\n\n            const series = me.series;\n\n            if (!me.showMaxEffort && series.maxEffort) {\n                series.maxEffort = false;\n            }\n\n            me._histogramWidget = me.buildHistogramWidget();\n        }\n\n        return me._histogramWidget;\n    }\n\n    // Injectable method.\n    getRectClassDefault(series, rectConfig, datum) {\n        if (series.id === 'effort') {\n            switch (true) {\n                case datum.isOverallocated :\n                    return 'b-overallocated';\n\n                case datum.isUnderallocated :\n                    return 'b-underallocated';\n            }\n        }\n\n        return '';\n    }\n\n    get effortFormatter() {\n        const\n            me     = this,\n            format = me.effortFormat;\n\n        let formatter = me._effortFormatter;\n\n        if (!formatter || me._effortFormat !== format) {\n            formatter = NumberFormat.get(me._lastFormat = format);\n\n            me._effortFormatter = formatter;\n        }\n\n        return formatter;\n    }\n\n    /**\n     * Formats effort value to display in the component bars and tooltips.\n     * @param {Number} effort Effort value\n     * @param {'millisecond'|'second'|'minute'|'hour'|'day'|'week'|'month'|'quarter'|'year'} unit Effort value unit\n     * @param {Boolean} [showEffortUnit=this.showEffortUnit] Provide `true` to include effort unit. If not provided\n     * uses {@link #config-showEffortUnit} value.\n     * @returns {String} Formatted effort value.\n     */\n    getEffortText(effort, unit, showEffortUnit = this.showEffortUnit) {\n        // bail out if there is no project or it's not in the graph\n        if (!this.project?.graph) {\n            return;\n        }\n\n        const { scaleUnit, effortFormatter } = this;\n\n        unit = unit || scaleUnit;\n\n        const\n            localizedUnit = DateHelper.getShortNameOfUnit(unit),\n            effortInUnits = this.convertEffortUnit(effort, TimeUnit.Millisecond, unit);\n\n        return effortFormatter.format(effortInUnits) + (showEffortUnit ? localizedUnit : '');\n    }\n\n    getBarTipEffortUnit() {\n        const\n            { effortUnit, barTipEffortUnit, timeAxis } = this,\n            defaultUnit                                = barTipEffortUnit || effortUnit;\n\n        return DateHelper.compareUnits(timeAxis.unit, defaultUnit) < 0 ? timeAxis.unit : defaultUnit;\n    }\n\n    getGroupBarTip({ datum }) {\n        const\n            me                       = this,\n            { showBarTip, timeAxis } = me;\n\n        let result = '';\n\n        if (showBarTip && datum.effort) {\n            const\n                unit          = me.getBarTipEffortUnit(...arguments),\n                allocated     = me.getEffortText(datum.effort, unit),\n                available     = me.getEffortText(datum.maxEffort, unit),\n                assignmentTpl = me.L('L{groupBarTipAssignment}');\n\n            let\n                dateFormat        = 'L',\n                resultFormat      = me.L('L{groupBarTipInRange}'),\n                assignmentsSuffix = '';\n\n            if (DateHelper.compareUnits(timeAxis.unit, TimeUnit.Day) === 0) {\n                resultFormat = me.L('L{groupBarTipOnDate}');\n            }\n            else if (DateHelper.compareUnits(timeAxis.unit, TimeUnit.Second) <= 0) {\n                dateFormat = 'HH:mm:ss A';\n            }\n            else if (DateHelper.compareUnits(timeAxis.unit, TimeUnit.Hour) <= 0) {\n                dateFormat = 'LT';\n            }\n\n            let assignmentsArray = [...datum.resourceAllocation.entries()]\n                .filter(([resource, data]) => data.effort)\n                .sort(([key1, value1], [key2, value2]) => value1.effort > value2.effort ? -1 : 1);\n\n            if (assignmentsArray.length > me.groupBarTipAssignmentLimit) {\n                assignmentsSuffix = '<br>' + me.L('L{plusMore}').replace('{value}', assignmentsArray.length - me.groupBarTipAssignmentLimit);\n                assignmentsArray = assignmentsArray.slice(0, this.groupBarTipAssignmentLimit);\n            }\n\n            const assignments = assignmentsArray.map(([resource, info]) => {\n\n                return assignmentTpl.replace('{resource}', StringHelper.encodeHtml(resource.name))\n                    .replace('{allocated}', me.getEffortText(info.effort, unit))\n                    .replace('{available}', me.getEffortText(info.maxEffort, unit))\n                    .replace('{cls}', info.isOverallocated ? 'b-overallocated' : info.isUnderallocated ? 'b-underallocated' : '');\n\n            }).join('<br>') + assignmentsSuffix;\n\n            // <remove-on-release>\n            // TODO: we need smth like sprintf(\"has {0} of {1} items\", cnt, total)\n            //  to be able to test localizable strings\n            // </remove-on-release>\n            result = resultFormat\n                .replace('{assignments}', assignments)\n                .replace('{startDate}', DateHelper.format(datum.tick.startDate, dateFormat))\n                .replace('{endDate}', DateHelper.format(datum.tick.endDate, dateFormat))\n                .replace('{allocated}', allocated)\n                .replace('{available}', available)\n                .replace('{cls}', datum.isOverallocated ? 'b-overallocated' : datum.isUnderallocated ? 'b-underallocated' : '');\n\n            result = `<div class=\"b-histogram-bar-tooltip\">${result}</div>`;\n        }\n\n        return result;\n    }\n\n    getResourceBarTip({ datum }) {\n        const\n            me                       = this,\n            { showBarTip, timeAxis } = me;\n\n        let result = '';\n\n        if (showBarTip && datum.effort) {\n            const\n                unit       = me.getBarTipEffortUnit(),\n                allocated  = me.getEffortText(datum.effort, unit),\n                available  = me.getEffortText(datum.maxEffort, unit);\n\n            let\n                dateFormat   = 'L',\n                resultFormat = me.L('L{barTipInRange}');\n\n            if (DateHelper.compareUnits(timeAxis.unit, TimeUnit.Day) === 0) {\n                resultFormat = me.L('L{barTipOnDate}');\n            }\n            else if (DateHelper.compareUnits(timeAxis.unit, TimeUnit.Second) <= 0) {\n                dateFormat = 'HH:mm:ss A';\n            }\n            else if (DateHelper.compareUnits(timeAxis.unit, TimeUnit.Hour) <= 0) {\n                dateFormat = 'LT';\n            }\n\n            // <remove-on-release>\n            // TODO: we need smth like sprintf(\"has {0} of {1} items\", cnt, total)\n            //  to be able to test localizable strings\n            // </remove-on-release>\n            result = resultFormat\n                .replace('{startDate}', DateHelper.format(datum.tick.startDate, dateFormat))\n                .replace('{endDate}', DateHelper.format(datum.tick.endDate, dateFormat))\n                .replace('{allocated}', allocated)\n                .replace('{available}', available)\n                .replace('{cls}', datum.isOverallocated ? 'b-overallocated' : datum.isUnderallocated ? 'b-underallocated' : '');\n\n            if (datum.resource) {\n                result = result\n                    .replace('{resource}', StringHelper.encodeHtml(datum.resource.name));\n            }\n\n            result = `<div class=\"b-histogram-bar-tooltip\">${result}</div>`;\n        }\n\n        return result;\n    }\n\n    /**\n     * Returns unit to display effort values in when rendering the histogram bars.\n     * The method by default returns {@link #config-barTextEffortUnit} value if provided\n     * and if not falls back to {@link #config-effortUnit} value.\n     * But it also takes zooming into account and when\n     * the timeaxis ticks unit gets smaller than the default value the ticks unit is returned.\n     *\n     * @returns {'millisecond'|'second'|'minute'|'hour'|'day'|'week'|'month'|'quarter'|'year'} Time unit to display\n     * effort values in.\n     */\n    getBarTextEffortUnit() {\n        const\n            { effortUnit, barTextEffortUnit, timeAxis } = this,\n            defaultUnit                                 = barTextEffortUnit || effortUnit;\n\n        return DateHelper.compareUnits(timeAxis.unit, defaultUnit) < 0 ? timeAxis.unit : defaultUnit;\n    }\n\n    /**\n     * The default method that returns the text to render inside a bar if no\n     * {@link #config-getBarText} function was provided.\n     *\n     * The method can be used in a {@link #config-getBarText} function\n     * to invoke the default implementation:\n     *\n     * ```javascript\n     * new ResourceHistogram({\n     *     getBarText(datum) {\n     *         const resourceHistogram = this.owner;\n     *\n     *         // get default bar text\n     *         let result = resourceHistogram.getBarTextDefault();\n     *\n     *         // if the resource is overallocated in that tick display \"Overallocated! \" string\n     *         // before the allocationvalue\n     *         if (result && datum.maxEffort < datum.effort) {\n     *             result = 'Overallocated! ' + result;\n     *         }\n     *\n     *         return result;\n     *     },\n     * })\n     * ```\n     * The following parameters are passed:\n     * @param {ResourceAllocationIntervalInfo} datum The data of the bar being rendered\n     * @param {Number} index The index of the datum being rendered\n     * @returns {String} Tdxt to render inside the bar\n     */\n    getBarTextDefault(datum, index) {\n        const { showBarText } = this.owner;\n\n        let result = '';\n\n        if (showBarText && datum.effort) {\n            const unit = this.owner.getBarTextEffortUnit();\n            result     = this.owner.getEffortText(datum.effort, unit);\n        }\n\n        return result;\n    }\n\n    updateShowBarText(value) {\n        this.scheduleRefreshRows();\n    }\n\n    updateShowBarTip(value) {\n        this.barTooltip = value;\n    }\n\n    updateShowMaxEffort(value) {\n        const me = this;\n\n        me._showMaxEffort = value;\n\n        let needsRefresh = false;\n\n        [me._histogramWidget, me._groupHistogramWidget].forEach(widget => {\n            // bail out in case there is no widget constructed yet\n            if (!widget) {\n                return;\n            }\n\n            const { series } = widget;\n\n            if (!value) {\n                if (series.maxEffort) {\n                    widget._seriesMaxEffort = series.maxEffort;\n                    delete series.maxEffort;\n                }\n            }\n            else if (typeof value === 'object') {\n                series.maxEffort = value;\n            }\n            else if (typeof widget._seriesMaxEffort === 'object') {\n                series.maxEffort = widget._seriesMaxEffort;\n            }\n            else {\n                series.maxEffort = {\n                    type  : 'outline',\n                    field : 'maxEffort'\n                };\n                series.maxEffort.id = 'maxEffort';\n            }\n\n            needsRefresh = true;\n        });\n\n        if (needsRefresh) {\n            me.scheduleRefreshRows();\n        }\n    }\n\n    updateIncludeInactiveEvents(value) {\n        // update collected reports wih new includeInactiveEvents flag state\n        this.allocationReportByRecord.forEach(allocationReport => allocationReport.includeInactiveEvents = value);\n    }\n\n    //endregion\n\n    //region Events\n\n    onTimeAxisEndReconfigureInternal() {\n        const me = this;\n\n        // Skip call triggered by viewPreset setting we have `updateViewPreset` method overridden where we call `onTimeAxisEndReconfigure` later\n        if (!me._updatingViewPreset) {\n            const { unit, increment } = me.timeAxis;\n\n            // re-generate scale point on zooming in/out\n            if (unit !== me._lastTimeAxisUnit || increment !== me._lastTimeAxisIncrement) {\n                // remember last used unit & increment to distinguish zooming from timespan changes\n                me._lastTimeAxisUnit = unit;\n                me._lastTimeAxisIncrement = increment;\n\n                // regenerate scale points\n                const\n                    scalePoints = me.generateScalePoints(),\n                    eventParams = { scalePoints };\n\n                // allow to override the points in a listener\n                me.trigger('generateScalePoints', eventParams);\n\n                me._generatedScalePoints = me.scalePoints = eventParams.scalePoints;\n            }\n\n            me.buildTicksIdentifier();\n        }\n    }\n\n    onTimeAxisEndReconfigure() {\n        const me = this;\n\n        // Skip call triggered by viewPreset setting we have `updateViewPreset` method overridden where we call `onTimeAxisEndReconfigure` later\n        if (!me._updatingViewPreset) {\n            if (me.project.graph) {\n                me.onTimeAxisEndReconfigureInternal();\n            }\n            // In delayed calculation mode (the default) we might not be in graph yet, postpone buildTicksIdentifier until we are\n            else {\n                me.project.ion({\n                    graphReady() {\n                        me.onTimeAxisEndReconfigureInternal();\n                    },\n                    thisObj : me,\n                    once    : true\n                });\n            }\n        }\n    }\n\n    onBeforeRowHeight({ height }) {\n        // <remove-on-release>\n        // TODO: histogramWidget getter requests timeAxisColumn column too early which causes an infinite cycle\n        // </remove-on-release>\n        if (this._timeAxisColumn) {\n            for (const widget of [this._histogramWidget, this._groupHistogramWidget]) {\n                if (!widget) continue;\n\n                widget.height = height;\n                widget.onElementResize(widget.element);\n            }\n        }\n    }\n\n    onTimeAxisViewModelUpdate() {\n        super.onTimeAxisViewModelUpdate(...arguments);\n\n        for (const widget of [this._histogramWidget, this._groupHistogramWidget]) {\n            if (!widget) continue;\n\n            widget.width = this.timeAxisViewModel.totalSize;\n            widget.onElementResize(widget.element);\n        }\n    }\n\n    //endregion\n\n    //region Render\n\n    getRecordAllocationInfoRenderData(record, allocation, cellElement, histogramWidget = null) {\n        allocation = Array.isArray(allocation) ? allocation : allocation.total;\n\n        // if ticks widths are not monotonous\n        // we provide width for each bar since in that case the histogram widget won't be able to calculate widths properly\n        if (this.ticksWidth) {\n            for (let i = 0, { length } = allocation; i < length; i++) {\n                allocation[i].width = this.ticksWidth[i];\n            }\n        }\n\n        return allocation;\n    }\n\n    renderRecordAllocationInfo(record, allocation, cellElement, histogramWidget = null) {\n        // histogram pattern\n        histogramWidget = histogramWidget || this.histogramWidget;\n\n        const data = this.getRecordAllocationInfoRenderData(record, allocation, cellElement, histogramWidget);\n\n        // skip render attempts if allocation is not collected yet\n        if (!data) {\n            return;\n        }\n\n        this.allocationDataByRecord.set(record, data);\n\n        histogramWidget.data = data;\n\n        histogramWidget.refresh();\n\n        const histogramCloneElement = histogramWidget.element.cloneNode(true);\n        histogramCloneElement.removeAttribute('id');\n        histogramCloneElement.classList.remove('b-hide-offscreen');\n\n        cellElement.innerHTML = '';\n        cellElement.appendChild(histogramCloneElement);\n    }\n\n    renderRows() {\n        const me = this;\n\n        if (!me.ticksIdentifier && me.project.isInitialCommitPerformed) {\n            // If we render rows but have no ticksIdentifier means data loading and 1st commit\n            // happened before the histogram was created.\n            // Handle timeaxis settings to build ticksIdentifier and scale column points.\n            me.onTimeAxisEndReconfigure();\n\n            // If timeView range is not defined then the timeaxis header looks empty so fill it in here (it triggers the column refresh)\n            if (!me.timeView.startDate || !me.timeView.endDate) {\n                me.timeView.range = {\n                    startDate : me.startDate,\n                    endDate   : me.endDate\n                };\n            }\n        }\n\n        return super.renderRows(...arguments);\n    }\n\n    onRecordAllocationCalculated(record, allocation, allocationReport) {\n        const me = this;\n\n        if (!me.isDestroying) {\n            const cell = me.getCell({ record, columnId : me.timeAxisColumn.id });\n\n            if (cell) {\n                me.renderRecordAllocationInfo(record, allocation, cell);\n            }\n\n            // announce resource allocation got calculated\n            me.trigger('allocationChange', { record, allocation });\n\n            const groupParent = me.getResourceGroupParent(record);\n\n            if (groupParent) {\n                // reset cached allocation for the resource group\n                me.resourceGroupsAllocation.delete(groupParent);\n\n                // schedule updating of resource group histograms\n                me.scheduleGroupRender(groupParent);\n            }\n        }\n    }\n\n    buildResourceAllocationReport(resource) {\n        return this.project.resourceAllocationInfoClass.new({\n            includeInactiveEvents : this.includeInactiveEvents,\n            ticks                 : this.ticksIdentifier,\n            resource\n        });\n    }\n\n    registerRecordAllocationReport(record) {\n        const\n            me               = this,\n            graph            = me.project.getGraph(),\n            allocationReport = me.buildResourceAllocationReport(record);\n\n        // store resource allocation report reference\n        me.allocationReportByRecord.set(record, allocationReport);\n\n        record.addEntity(allocationReport);\n\n        // track allocation report changes\n        const allocationObserver = graph.observe(\n            function * () {\n                return yield allocationReport.$.allocation;\n            },\n            allocation => me.onRecordAllocationCalculated(record, allocation, allocationReport)\n        );\n\n        me.allocationObserverByRecord.set(record, allocationObserver);\n\n        // trigger rendering on allocation report changes\n        record.addObserver(allocationObserver);\n\n        return allocationReport;\n    }\n\n    renderResourceHistogram({ grid : me, cellElement, record }) {\n        const { project } = me;\n\n        // No drawing before engine's initial commit\n        // Skip special rows, e.g. group records\n        if (me.ticksIdentifier && project.isInitialCommitPerformed && !record.isSpecialRow) {\n            const { allocationReportByRecord, allocationObserverByRecord } = me;\n\n            let allocationReport = allocationReportByRecord.get(record);\n\n            // If we have no allocation report built for the resource yet\n            // let's initialize it here\n            if (!allocationReport) {\n                allocationReport = me.registerRecordAllocationReport(record);\n            }\n\n            // rendering was triggered by not allocation report change so we render based on existing \"resource.allocation\"\n            if (allocationReport?.allocation) {\n                if (allocationReport.graph) {\n                    me.renderRecordAllocationInfo(record, allocationReport.allocation, cellElement);\n                }\n                // allocation data had left the graph probably after the resource was removed\n                else {\n                    allocationReportByRecord.delete(record);\n                    me.allocationDataByRecord.delete(record);\n                    allocationObserverByRecord.delete(record);\n                }\n\n                const groupParent = me.getResourceGroupParent(record);\n\n                // if grouped - schedule updating of the resource group histograms\n                if (groupParent && me.store.includes(groupParent)) {\n                    me.scheduleGroupRender(groupParent);\n                }\n            }\n        }\n    }\n\n    renderScheduledGroups() {\n        // Clone set to avoid infinite cycle when we add new entry to this.resourceGroupsToUpdate\n        // in this.renderGroupHistogram() call\n        for (const groupParent of Array.from(this.resourceGroupsToUpdate)) {\n            this.renderGroupHistogram(groupParent);\n        }\n        this.clearTimeout(this.renderScheduledGroupTimer);\n    }\n\n    scheduleGroupRender(groupParent) {\n        this.resourceGroupsToUpdate.add(groupParent);\n\n        this.renderScheduledGroupTimer = this.setTimeout({\n            fn                : 'renderScheduledGroups',\n            delay             : 10,\n            cancelOutstanding : true\n        });\n    }\n\n    getResourceGroupParent(resource) {\n        const instanceMeta = resource.instanceMeta(this.project.resourceStore.id);\n\n        return instanceMeta?.groupParent;\n    }\n\n    calculateResourceGroupAllocation(groupParent) {\n        const\n            me                           = this,\n            { allocationReportByRecord } = me,\n            { groupChildren }            = groupParent,\n            allocationReports            = groupChildren.map(resource => allocationReportByRecord.get(resource)),\n            newAllocation                = allocationReports[0]?.allocation?.total,\n            newAllocationLength          = newAllocation?.length;\n\n        // All child resource allocations are calculated (their lengths should be equal)\n        if (newAllocation && allocationReports.every(allocationInfo => allocationInfo?.allocation && allocationInfo.allocation.total.length === newAllocationLength)) {\n\n            const combinedAllocation = [];\n\n            // Iterate over the group resources\n            // and aggregate resource allocations to show the group level histogram\n            allocationReports.forEach(({ allocation }) => {\n                // iterate over ticks\n                allocation.total.forEach((a, index) => {\n                    let combined = combinedAllocation[index];\n\n                    if (!combined) {\n                        combined = combinedAllocation[index] = {\n                            tick               : a.tick,\n                            effort             : 0,\n                            maxEffort          : 0,\n                            units              : 0,\n                            isGroup            : true,\n                            resourceAllocation : new Map()\n                        };\n                    }\n\n                    combined.resourceAllocation.set(a.resource, {\n                        effort           : a.effort,\n                        maxEffort        : a.maxEffort,\n                        units            : a.units,\n                        isOverallocated  : a.effort > a.maxEffort,\n                        isUnderallocated : a.effort < a.maxEffort\n                    });\n\n                    combined.isOverallocated  = combined.isOverallocated || a.isOverallocated;\n                    combined.isUnderallocated = combined.isUnderallocated || a.isUnderallocated;\n                    combined.effort           += a.effort;\n                    combined.maxEffort        += a.maxEffort;\n\n                    if (a.assignments) {\n                        if (combined.assignments) {\n                            a.assignments.forEach(assignment => combined.assignments.add(assignment));\n                        }\n                        else {\n                            combined.assignments = new Set(a.assignments);\n                        }\n                    }\n                });\n            });\n\n            return combinedAllocation;\n        }\n    }\n\n    renderGroupHistogram(groupParent) {\n        const me = this;\n\n        me.resourceGroupsToUpdate.delete(groupParent);\n\n        // if the group is not in the store\n        if (!me.store.includes(groupParent)) {\n            me.resourceGroupsAllocation.delete(groupParent);\n        }\n\n        const combinedAllocation = me.resourceGroupsAllocation.get(groupParent) || me.calculateResourceGroupAllocation(groupParent);\n\n        if (combinedAllocation) {\n            // cache calculated allocation\n            me.resourceGroupsAllocation.set(groupParent, combinedAllocation);\n\n            const { groupChildren } = groupParent;\n\n            let scalePoints = me.generateScalePoints(me.timeAxis.increment * groupChildren.length);\n\n            const eventParams = { scalePoints, groupParent, isCalculatingTopValue : true };\n\n            me.trigger('generateScalePoints', eventParams);\n\n            scalePoints = eventParams.scalePoints;\n\n            const\n                lastPoint         = scalePoints[scalePoints.length - 1],\n                scaleMax          = me.useProjectTimeUnitsForScale\n                    ? me.convertEffortUnit(lastPoint.value, lastPoint.unit, TimeUnit.Millisecond)\n                    : DateHelper.asMilliseconds(lastPoint.value, lastPoint.unit),\n                topValue          = scaleMax + (me.scaleColumn?.scaleWidget.scaleMaxPadding || 0) * scaleMax,\n                widget            = me._groupHistogramWidget || me.buildHistogramWidget({ topValue }),\n                cellElement       = me.getCell({ id : groupParent.id, columnId : me.timeAxisColumn.id });\n\n            // if we have group level histogram widget cached - update its topValue\n            if (me._groupHistogramWidget) {\n                widget.topValue          = topValue;\n            }\n            // cache constructed histogram widget\n            else {\n                me._groupHistogramWidget = widget;\n            }\n\n            // render the group histogram\n            if (cellElement) {\n                me.renderRecordAllocationInfo(groupParent, combinedAllocation, cellElement, widget);\n                me.trigger('groupRendered', { groupParent });\n            }\n        }\n        // if some allocations are not recalculated yet - reschedule this group update\n        else if (me.store.includes(groupParent)) {\n            me.scheduleGroupRender(groupParent);\n        }\n    }\n\n    renderGroupScale(groupParent) {\n        const\n            me              = this,\n            { scaleColumn } = me;\n\n        // Render scale only if scale column is there\n        if (scaleColumn) {\n            const\n                { groupChildren } = groupParent,\n                scalePoints       = me.generateScalePoints(me.timeAxis.increment * groupChildren.length),\n                cellElement       = me.getCell({ id : groupParent.id, columnId : scaleColumn.id }),\n                eventParams       = { scalePoints, groupParent };\n\n            if (!cellElement) {\n                return;\n            }\n\n            let scaleWidget = me._groupScaleWidget;\n\n            if (!scaleWidget) {\n                scaleWidget = me._groupScaleWidget = scaleColumn.buildScaleWidget();\n            }\n\n            me.trigger('generateScalePoints', eventParams);\n\n            scaleWidget.scalePoints = eventParams.scalePoints;\n\n            return scaleColumn.renderer({ cellElement, scaleWidget });\n        }\n    }\n\n    //endregion\n\n    //region Localization\n\n    updateLocalization() {\n        const me = this;\n\n        // Translate scale points if we have them (update localization on construction step is called too early)\n        // and the scale points is generated by the histogram which means their labels use localized unit abbreviations\n        if (me._generatedScalePoints === me.scalePoints && me.scalePoints) {\n            me.scalePoints.forEach(scalePoint => {\n                // if the point is labeled let's rebuild its text using new locale\n                if (scalePoint.text && scalePoint.unit) {\n                    scalePoint.text = me.buildScalePointText(scalePoint);\n                }\n            });\n        }\n\n        super.updateLocalization(...arguments);\n    }\n\n    //endregion\n\n}\n\nResourceHistogram.initClass();\n", "import Model from '../../Core/data/Model.js';\n\n/**\n * @module SchedulerPro/model/ResourceUtilizationModel\n */\n\n/**\n * A model representing a {@link SchedulerPro/view/ResourceUtilization} view row.\n * The view rows are of two possible types __resources__ and __assignments__.\n * The model wraps either a resource or an assignment model. And each wrapped resource keeps its corresponding\n * wrapped assignments as its __children__.\n *\n * **NOTE:** You don't normally need to construct this class instances. The view does that automatically\n * by processing the project resources and assignments, wrapping them with this model instances and\n * putting them to its {@link SchedulerPro/view/ResourceUtilization#property-store}.\n *\n * The wrapped model is provided to {@link #config-origin} config and can be retrieved from it:\n *\n * ```javascript\n * // get the real resource representing the first row of the view\n * resourceUtilizationView.store.first.origin\n * ```\n *\n * @extends Core/data/Model\n */\n\nexport default class ResourceUtilizationModel extends Model {\n\n    static $name = 'ResourceUtilizationModel';\n\n    static fields = [\n        /**\n         * Name of the represented resource or the assigned event.\n         * If the model represents an assignment the field value is\n         * automatically set to the assigned event {@link SchedulerPro/model/EventModel#field-name}.\n         * @field {String} name\n         * @category Common\n         */\n        'name',\n        /**\n         * Icon for the corresponding row.\n         * If the model represents an assignment the field value is\n         * automatically set to the assigned event {@link SchedulerPro/model/EventModel#field-iconCls}.\n         * @field {String} iconCls\n         * @category Styling\n         */\n        'iconCls'\n    ];\n\n    /**\n     * A resource or an assignment wrapped by this model.\n     *\n     * ```javascript\n     * // get the real resource representing the first row of the view\n     * resourceUtilizationView.store.first.origin\n     * ```\n     * @config {SchedulerPro.model.ResourceModel|SchedulerPro.model.AssignmentModel} origin\n     */\n\n    construct(data, ...args) {\n        this._childrenIndex = new Map();\n\n        // copy some field values from origin to this model\n        if (data.origin) {\n            Object.assign(data, this.mapOriginValues(data.origin));\n        }\n\n        super.construct(data, ...args);\n\n        if (this.origin) {\n            this.fillChildren();\n        }\n    }\n\n    mapOriginValues(origin) {\n        const result = {};\n\n        if (origin.isResourceModel) {\n            result.name = origin.name;\n        }\n        else if (origin.isAssignmentModel) {\n            result.name    = origin.event?.name;\n            result.iconCls = origin.event?.iconCls;\n        }\n\n        return result;\n    }\n\n    fillChildren() {\n        const\n            me           = this,\n            { children } = me,\n            toRemove     = new Set(children),\n            toAdd        = [];\n\n        if (me.origin?.isResourceModel) {\n            const { assigned } = me.origin;\n\n            for (const assignment of assigned) {\n                if (!me._childrenIndex.has(assignment)) {\n                    toAdd.push(me.constructor.new({ origin : assignment }));\n                }\n                else {\n                    toRemove.delete(me._childrenIndex.get(assignment));\n                }\n            }\n        }\n\n        if (toRemove.size) {\n            this.removeChild([...toRemove]);\n        }\n\n        if (toAdd.length) {\n            this.appendChild(toAdd);\n        }\n    }\n\n    afterRemoveChild(records) {\n        records.forEach(record => this._childrenIndex.delete(record.origin));\n    }\n\n    insertChild(...args) {\n        let added = super.insertChild(...args);\n\n        if (added) {\n            const { stores } = this;\n\n            if (!Array.isArray(added)) {\n                added = [added];\n            }\n\n            if (this.origin?.isResourceModel) {\n                for (const record of added) {\n                    if (record.origin && !this._childrenIndex.has(record.origin)) {\n                        this._childrenIndex.set(record.origin, record);\n                    }\n                }\n            }\n\n            // if the model is already in a store\n            // fill the store real_model -> wrapper_model map\n            if (stores?.length) {\n                for (const store of stores) {\n                    for (const record of added) {\n                        record.traverse(node => store.setModelByOrigin(node.origin, node));\n                    }\n                }\n            }\n        }\n\n        return added;\n    }\n\n    getChildByOrigin(origin) {\n        return this._childrenIndex.get(origin);\n    }\n}\n\nResourceUtilizationModel.exposeProperties();\n", "import AjaxStore from '../../Core/data/AjaxStore.js';\nimport ResourceUtilizationModel from '../model/ResourceUtilizationModel.js';\nimport { AbstractPartOfProjectStoreMixin } from '../../Engine/quark/store/mixin/AbstractPartOfProjectStoreMixin.js';\n\n/**\n * @module SchedulerPro/data/ResourceUtilizationStore\n */\n\n/**\n * A store representing {@link SchedulerPro/view/ResourceUtilization} view records.\n * This store accepts a model class inheriting from {@link SchedulerPro/model/ResourceUtilizationModel}.\n *\n * The store is a tree of nodes representing resources on the root level with\n * sub-nodes representing corresponding resource assignments.\n * The store tracks changes made in the {@link #config-project} stores and rebuilds its content automatically.\n * Thus the project config is mandatory and has to be provided.\n *\n * @extends Core/data/AjaxStore\n */\nexport default class ResourceUtilizationStore extends AbstractPartOfProjectStoreMixin.derive(AjaxStore) {\n\n    static configurable = {\n        modelClass : ResourceUtilizationModel,\n\n        /**\n         * Project instance to retrieve resources and assignments data from.\n         * @config {SchedulerPro.model.ProjectModel} project\n         */\n        project : null,\n\n        tree : true\n    };\n\n    // Cannot use `static properties = {}`, new Map would pollute the prototype\n    static get properties() {\n        return {\n            _modelByOrigin : new Map()\n        };\n    }\n\n    updateProject(project) {\n        this.setResourceStore(project?.resourceStore);\n        this.setAssignmentStore(project?.assignmentStore);\n        this.setEventStore(project?.eventStore);\n\n        this.fillStoreFromProject();\n    }\n\n    setResourceStore(store) {\n        this.detachListeners('resourceStore');\n\n        // <remove-on-release>\n        // TODO: track assignments & events changes\n        // </remove-on-release>\n        store?.ion({\n            name    : 'resourceStore',\n            change  : this.onResourceStoreDataChanged,\n            thisObj : this\n        });\n    }\n\n    setEventStore(store) {\n        this.detachListeners('eventStore');\n\n        // <remove-on-release>\n        // TODO: track assignments & events changes\n        // </remove-on-release>\n        store?.ion({\n            name    : 'eventStore',\n            update  : this.onEventUpdate,\n            thisObj : this\n        });\n    }\n\n    setAssignmentStore(store) {\n        this.detachListeners('assignmentStore');\n\n        // <remove-on-release>\n        // TODO: track assignments & events changes\n        // </remove-on-release>\n        store?.ion({\n            name    : 'assignmentStore',\n            change  : this.onAssignmentsChange,\n            refresh : this.onAssignmentsRefresh,\n            add     : this.onAssignmentsAdd,\n            update  : this.onAssignmentUpdate,\n            remove  : this.onAssignmentsRemove,\n            thisObj : this\n        });\n    }\n\n    onResourceStoreDataChanged(event) {\n        // 'move' action triggers a remove event first, we wait for the 'add' - no need to fill twice\n        if (event.isMove && event.action === 'remove') {\n            return;\n        }\n\n        this.fillStoreFromProject();\n    }\n\n    onAssignmentsChange() {\n        this.forEach(resourceWrapper => resourceWrapper.fillChildren());\n    }\n\n    onAssignmentsRefresh(event) {\n        if (event.action === 'batch') {\n            this.forEach(resourceWrapper => resourceWrapper.fillChildren());\n        }\n    }\n\n    onAssignmentsAdd({ records }) {\n        records.forEach(record => {\n            const resourceWrapper = this.getModelByOrigin(record?.resource);\n\n            resourceWrapper?.fillChildren();\n        });\n    }\n\n    onAssignmentUpdate({ record, changes }) {\n        // if assignment moved to another resource\n        if ('resource' in changes) {\n            const\n                // get assignment wrapper record\n                assignmentWrapper = this.getModelByOrigin(record),\n                // get new resource wrapper record\n                newResourceWrapper = this.getModelByOrigin(record?.resource);\n\n            // move assignment wrapper to new resource wrapper\n            if (assignmentWrapper && newResourceWrapper) {\n                newResourceWrapper.appendChild(assignmentWrapper);\n            }\n        }\n    }\n\n    onAssignmentsRemove({ records }) {\n        this.remove(records.map(record => this.getModelByOrigin(record)));\n    }\n\n    onEventUpdate({ record, changes }) {\n        if ('name' in changes) {\n            for (const assignment of record.assigned) {\n                const assignmentWrapper = this.getModelByOrigin(assignment);\n\n                assignmentWrapper.set('name', record.name);\n            }\n        }\n    }\n\n    fillStoreFromProject() {\n        const toAdd = [];\n\n        this._project?.resourceStore.forEach(resource => {\n            if (!resource.isSpecialRow) {\n                toAdd.push(this.modelClass.new({ origin : resource }));\n            }\n        });\n\n        this.removeAll();\n        this.add(toAdd);\n\n        /**\n         * Fires when store completes synchronization with original (Event/Resource/Assignment) stores\n         * @event fillFromProject\n         * @internal\n         */\n        this.trigger('fillFromProject');\n    }\n\n    remove() {\n        const removed = super.remove(...arguments);\n\n        // sanitize internal origin->wrapper Map\n        removed?.forEach(record => {\n            this._modelByOrigin.delete(record.origin);\n        });\n\n        return removed;\n    }\n\n    removeAll() {\n        super.removeAll(...arguments);\n\n        this._modelByOrigin.clear();\n    }\n\n    getModelByOrigin(origin) {\n        return this._modelByOrigin.get(origin);\n    }\n\n    setModelByOrigin(origin, model) {\n        return this._modelByOrigin.set(origin, model);\n    }\n}\n", "import StringHelper from '../../Core/helper/StringHelper.js';\nimport ResourceHistogram from './ResourceHistogram.js';\nimport ResourceUtilizationStore from '../data/ResourceUtilizationStore.js';\nimport DateHelper from '../../Core/helper/DateHelper.js';\nimport { TimeUnit } from '../../Engine/scheduling/Types.js';\nimport '../../Grid/column/TreeColumn.js';\nimport GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\nimport Tree from '../../Grid/feature/Tree.js';\n\n/**\n * @module SchedulerPro/view/ResourceUtilization\n */\n\n/**\n * An object containing info on the assignment effort in a certain time interval.\n *\n * The object is used when rendering interval bars and tooltips so it additionally provides a `rectConfig` property\n * which contains a configuration object for the`rect` SVG-element representing the interval bar.\n *\n * @typedef {Object} AssignmentAllocationIntervalInfo\n * @property {SchedulerPro.model.AssignmentModel} assignment The assignment which allocation is displayed.\n * @property {Number} effort Amount of work performed by the assigned resource in the interval\n * @property {TickInfo} tick The interval of time the allocation is collected for\n * @property {Number} units Assignment {@link SchedulerPro.model.AssignmentModel#field-units} value\n * @property {Object} rectConfig The rectangle DOM configuration object\n */\n\n/**\n * Widget showing the utilization levels of the project resources.\n * The resources are displayed in a summary list where each row can\n * be expanded to show the events assigned for the resource.\n *\n * This demo shows the Resource utilization widget:\n * {@inlineexample SchedulerPro/view/ResourceUtilization.js}\n *\n * The view requires a {@link #config-project Project instance} to be provided:\n *\n * ```javascript\n * const project = new ProjectModel({\n *     autoLoad  : true,\n *     transport : {\n *         load : {\n *             url : 'examples/schedulerpro/view/data.json'\n *         }\n *     }\n * });\n *\n * const resourceUtilization = new ResourceUtilization({\n *     project,\n *     appendTo    : 'targetDiv',\n *     rowHeight   : 60,\n *     minHeight   : '20em',\n *     flex        : '1 1 50%',\n *     showBarTip  : true\n * });\n * ```\n *\n * ## Pairing the component\n *\n * You can also pair the view with other timeline views such as the Gantt or Scheduler,\n * using the {@link #config-partner} config.\n *\n  * ## Changing displayed values\n *\n * To change the displayed bar texts, supply a {@link #config-getBarText} function.\n * Here for example the provided function displays resources time **left** instead of\n * allocated time\n *\n * ```javascript\n * new ResourceUtilization({\n *     getBarText(datum) {\n *         const view = this.owner;\n *\n *         // get default bar text\n *         let result = view.getBarTextDefault();\n *\n *         // For resource records we will display the time left for allocation\n *         if (result && datum.resource) {\n *\n *             const unit = view.getBarTextEffortUnit();\n *\n *             // display the resource available time\n *             result = view.getEffortText(datum.maxEffort - datum.effort, unit);\n *         }\n *\n *         return result;\n *     },\n * })\n * ```\n *\n * @extends SchedulerPro/view/ResourceHistogram\n * @classtype resourceutilization\n * @widget\n */\n\nexport default class ResourceUtilization extends ResourceHistogram {\n\n    //region Config\n\n    static $name = 'ResourceUtilization';\n\n    static type = 'resourceutilization';\n\n    static configurable = {\n        /**\n         * @hideconfigs crudManager, crudManagerClass, assignments, resources, events, dependencies, assignmentStore,\n         * resourceStore, eventStore, dependencyStore, data, timeZone\n         */\n\n        /**\n         * A Function which returns the text to render inside a bar.\n         *\n         * Here for example the provided function displays resources time **left** instead of\n         * allocated time\n         *\n         * ```javascript\n         * new ResourceUtilization({\n         *     getBarText(datum) {\n         *         const resourceUtilization = this.owner;\n         *\n         *         // get default bar text\n         *         let result = view.getBarTextDefault();\n         *\n         *         // For resource records we will display the time left for allocation\n         *         if (result && datum.resource) {\n         *\n         *             const unit = resourceUtilization.getBarTextEffortUnit();\n         *\n         *             // display the resource available time\n         *             result = resourceUtilization.getEffortText(datum.maxEffort - datum.effort, unit);\n         *         }\n         *\n         *         return result;\n         *     },\n         * })\n         * ```\n         *\n         * **Please note** that the function will be injected into the underlying\n         * {@link Core/widget/graph/Histogram} component that is used under the hood\n         * to render actual charts.\n         * So `this` in the function will refer to the {@link Core/widget/graph/Histogram} instance.\n         * To access the `ResourceUtilization` instance please use `this.owner` in the function body:\n         *\n         * ```javascript\n         * new ResourceUtilization({\n         *     getBarText(datum) {\n         *         // \"this\" in the method refers core Histogram instance\n         *         // get the view instance\n         *         const view = this.owner;\n         *\n         *         .....\n         *     },\n         * })\n         * ```\n         * The following parameters are passed:\n         * @param {ResourceAllocationIntervalInfo|AssignmentAllocationIntervalInfo} datum The datum being rendered.\n         * Either {@link SchedulerPro.view.ResourceHistogram#typedef-ResourceAllocationIntervalInfo} object for resource records (root level records)\n         * or {@link #typedef-AssignmentAllocationIntervalInfo}object  for assignment records\n         * @param {Number} index - The index of the datum being rendered\n         * @returns {String} Tdxt to render inside the bar\n         * @config {Function} getBarText\n         */\n\n        /* */\n\n        timeAxisColumnCellCls : 'b-sch-timeaxis-cell b-resourceutilization-cell',\n\n        /**\n         * A ProjectModel instance (or a config object) to display resource allocation of.\n         *\n         * Note: This config is mandatory.\n         * @config {ProjectModelConfig|SchedulerPro.model.ProjectModel} project\n         */\n\n        rowHeight : 30,\n\n        showEffortUnit : false,\n\n        /**\n         * @config {Boolean} showMaxEffort\n         * @hide\n         */\n\n        showMaxEffort : false,\n\n        /**\n         * Set to `true` if you want to display resources effort values in bars\n         * (for example: `24h`, `7d`, `60min` etc.).\n         * The text contents can be changed by providing {@link #config-getBarText} function.\n         * @config {Boolean}\n         * @default\n         */\n        showBarText : true,\n\n        /**\n         * A Function which returns the tooltip text to display when hovering a bar.\n         * The following parameters are passed:\n         * @param {Object} data - The backing data of the histogram rectangle\n         * @param {Object} data.rectConfig - The rectangle configuration object\n         * @param {Object} data.datum - The datum being rendered\n         * @param {Number} data.index - The index of the datum being rendered\n         * @config {Function}\n         */\n        barTooltipTemplate({ effort, isGroup, resource, assignment }) {\n            let result = '';\n\n            // const barTip = this.callback('getBarTextTip', me, [renderData, data[index], index]);\n            if (effort) {\n                if (resource) {\n                    result = this.getResourceBarTip(...arguments);\n                }\n                else if (assignment) {\n                    result = this.getAssignmentBarTip(...arguments);\n                }\n                else if (isGroup) {\n                    result = this.getGroupBarTip(...arguments);\n                }\n            }\n\n            return result;\n        },\n\n        series : {\n            effort : {\n                type  : 'bar',\n                field : 'effort'\n            }\n        },\n\n        readOnly : true,\n\n        columns : [\n            {\n                type        : 'tree',\n                field       : 'name',\n                text        : 'L{nameColumnText}',\n                localeClass : this\n            }\n        ]\n    };\n\n    //endregion\n\n    /**\n     * @event generateScalePoints\n     * @hide\n     */\n\n    /**\n     * @function generateScalePoints\n     * @hide\n     */\n\n    /**\n     * @member {SchedulerPro.column.ScaleColumn} scaleColumn\n     * @hide\n     */\n\n    updateProject(project) {\n        super.updateProject(project);\n\n        this.store = this.buildStore(project);\n    }\n\n    buildStore(project) {\n        return ResourceUtilizationStore.new({ project });\n    }\n\n    insertScaleColumn() {}\n\n    //region Render\n\n    getTipHtml({ activeTarget }) {\n        const\n            index          = activeTarget.dataset.index,\n            record         = this.getRecordFromElement(activeTarget),\n            allocationData = this.allocationDataByRecord.get(record.origin),\n            data           = allocationData[parseInt(index, 10)];\n\n        return this.barTooltipTemplate(data);\n    }\n\n    registerRecordAllocationReport(record) {\n        if (record.isResourceModel) {\n            return super.registerRecordAllocationReport(record);\n        }\n\n        if (record.isAssignmentModel) {\n            return this.registerAssignmentAllocationReport(record);\n        }\n    }\n\n    onDestroy() {\n        const me = this;\n\n        // destroy observers & entities made for assignments displayed by this view\n\n        for (const [record, observer] of me.allocationObserverByRecord?.entries()) {\n            if (record.isAssignmentModel) {\n                record.resource.removeObserver(observer);\n                me.allocationObserverByRecord.delete(record);\n            }\n        }\n\n        for (const [record, entity] of me.allocationReportByRecord?.entries()) {\n            if (record.isAssignmentModel) {\n                record.resource.removeEntity(entity);\n                me.allocationReportByRecord.delete(entity);\n            }\n        }\n\n        if (me.destroyStores) {\n            me.store?.destroy();\n        }\n\n        super.onDestroy();\n    }\n\n    registerAssignmentAllocationReport(record) {\n        const\n            me               = this,\n            graph            = me.project.getGraph(),\n            allocationReport = me.allocationReportByRecord.get(record.resource);\n\n        if (allocationReport) {\n            // store resource allocation report reference\n            me.allocationReportByRecord.set(record, allocationReport);\n\n            // track allocation report changes\n            const allocationObserver = graph.observe(\n                function * () {\n                    return yield allocationReport.$.allocation;\n                },\n                allocation => me.onRecordAllocationCalculated(record, allocation, allocationReport)\n            );\n\n            me.allocationObserverByRecord.set(record, allocationObserver);\n\n            // trigger rendering on allocation report changes\n            record.resource.addObserver(allocationObserver);\n        }\n\n        return allocationReport;\n    }\n\n    onRecordAllocationCalculated(record, allocation, allocationReport) {\n        // if that's an assignment row\n        if (record.isAssignmentModel) {\n            if (allocation.byAssignments.get(record)) {\n                super.onRecordAllocationCalculated(record, allocation, allocationReport);\n            }\n            // If allocation report is calculated w/o the assignment\n            // it means that the assignment was moved to another resource.\n            // Then we drop linkage of that assignment to that allocation report\n            else {\n                // remove reference of the assignment to the allocation repoort\n                this.allocationReportByRecord.delete(record);\n\n                const observer = this.allocationObserverByRecord.get(record);\n\n                // remove the allcation report observer that tracks changes and refreshes the assignment row\n                if (observer) {\n                    allocationReport.resource.removeObserver(observer);\n                    this.allocationObserverByRecord.delete(record);\n                }\n            }\n        }\n        else {\n            super.onRecordAllocationCalculated(record, allocation, allocationReport);\n        }\n    }\n\n    onRowManagerRenderRow({ row, record }) {\n        // indicate row kinds\n        row.assignCls({\n            'b-resource-row'   : record.origin?.isResourceModel,\n            'b-assignment-row' : record.origin?.isAssignmentModel\n        });\n    }\n\n    getResourceGroupParent(resource) {\n        const instanceMeta = resource.instanceMeta(this.store);\n\n        return instanceMeta?.groupParent;\n    }\n\n    renderResourceHistogram(data) {\n        const { project } = data.grid;\n\n        if (project.isInitialCommitPerformed && !data.record.isSpecialRow) {\n            // renderResourceHistogram() expects a real resource model\n            // so get it from its wrapper model\n            data.record = data.record.origin;\n\n            return super.renderResourceHistogram(data);\n        }\n    }\n\n    getCell(data) {\n        // if real resource or assignment is provided\n        if (data.record?.isResourceModel || data.record?.isAssignmentModel) {\n            // use its wrapper record to find proper cell\n            data.record = this.store.getModelByOrigin(data.record);\n        }\n\n        return super.getCell(data);\n    }\n\n    buildHistogramWidget(config = {}, ...args) {\n        if (!this.getBarTextRenderData && !config?.getBarTextRenderData) {\n            config.getBarTextRenderData = this.getBarTextRenderDataDefault;\n        }\n\n        config.cls = 'b-hide-offscreen b-resourceutilization-histogram';\n\n        config.height = this.rowHeight;\n\n        return super.buildHistogramWidget(config, ...args);\n    }\n\n    getBarTextRenderDataDefault(renderData, datum, index) {\n        // place effort text centered vertically\n        renderData.y = '50%';\n\n        return renderData;\n    }\n\n    getRecordAllocationInfoRenderData(record, allocation, cellElement, histogramWidget = null) {\n        let data;\n\n        if (record.isResourceModel) {\n            data = allocation.total;\n        }\n        else if (record.isAssignmentModel) {\n            data = allocation.byAssignments.get(record);\n        }\n\n        // if allocation is collected\n        if (data) {\n            // we don't want the histogram bar heights based on effort\n            // so set heights to 1 here to fit row heights fully\n            for (let i = 0, { length } = data; i < length; i++) {\n                if (data[i].effort) data[i].height = 1;\n            }\n        }\n\n        return data;\n    }\n\n    //endregion\n\n    getResourceBarTip(datum) {\n        const\n            me                       = this,\n            { showBarTip, timeAxis } = me;\n\n        let result = '';\n\n        if (showBarTip && datum.effort) {\n            const\n                unit          = me.getBarTipEffortUnit(...arguments),\n                allocated     = me.getEffortText(datum.effort, unit, true),\n                available     = me.getEffortText(datum.maxEffort, unit, true),\n                assignmentTpl = me.L('L{groupBarTipAssignment}');\n\n            let\n                dateFormat        = 'L',\n                resultFormat      = me.L('L{groupBarTipInRange}'),\n                assignmentsSuffix = '';\n\n            if (DateHelper.compareUnits(timeAxis.unit, TimeUnit.Day) === 0) {\n                resultFormat = me.L('L{groupBarTipOnDate}');\n            }\n            else if (DateHelper.compareUnits(timeAxis.unit, TimeUnit.Second) <= 0) {\n                dateFormat = 'HH:mm:ss A';\n            }\n            else if (DateHelper.compareUnits(timeAxis.unit, TimeUnit.Hour) <= 0) {\n                dateFormat = 'LT';\n            }\n\n            let assignmentsArray = [...datum.assignmentIntervals.entries()]\n                .filter(([assignment, data]) => data.effort)\n                .sort(([key1, value1], [key2, value2]) => value1.effort > value2.effort ? -1 : 1);\n\n            if (assignmentsArray.length > me.groupBarTipAssignmentLimit) {\n                assignmentsSuffix = '<br>' + me.L('L{plusMore}').replace('{value}', assignmentsArray.length - me.groupBarTipAssignmentLimit);\n                assignmentsArray = assignmentsArray.slice(0, this.groupBarTipAssignmentLimit);\n            }\n\n            const assignments = assignmentsArray.map(([assignment, info]) => {\n\n                return assignmentTpl.replace('{event}', StringHelper.encodeHtml(assignment.event.name))\n                    .replace('{allocated}', me.getEffortText(info.effort, unit, true))\n                    .replace('{available}', me.getEffortText(info.maxEffort, unit, true))\n                    .replace('{cls}', info.isOverallocated ? 'b-overallocated' : info.isUnderallocated ? 'b-underallocated' : '');\n\n            }).join('<br>') + assignmentsSuffix;\n\n            // <remove-on-release>\n            // TODO: we need smth like sprintf(\"has {0} of {1} items\", cnt, total)\n            //  to be able to test localizable strings\n            // </remove-on-release>\n            result = resultFormat\n                .replace('{assignments}', assignments)\n                .replace('{startDate}', DateHelper.format(datum.tick.startDate, dateFormat))\n                .replace('{endDate}', DateHelper.format(datum.tick.endDate, dateFormat))\n                .replace('{allocated}', allocated)\n                .replace('{available}', available)\n                .replace('{cls}', datum.isOverallocated ? 'b-overallocated' : datum.isUnderallocated ? 'b-underallocated' : '');\n\n            result = `<div class=\"b-histogram-bar-tooltip\">${result}</div>`;\n        }\n\n        return result;\n    }\n\n    getAssignmentBarTip(datum) {\n        const\n            me                       = this,\n            { showBarTip, timeAxis } = me;\n\n        let result = '';\n\n        if (showBarTip && datum.effort) {\n            const\n                unit      = me.getBarTipEffortUnit(...arguments),\n                allocated = me.getEffortText(datum.effort, unit, true),\n                available = me.getEffortText(datum.maxEffort, unit, true);\n\n            let\n                dateFormat   = 'L',\n                resultFormat = me.L('L{barTipInRange}');\n\n            if (DateHelper.compareUnits(timeAxis.unit, TimeUnit.Day) === 0) {\n                resultFormat = me.L('L{barTipOnDate}');\n            }\n            else if (DateHelper.compareUnits(timeAxis.unit, TimeUnit.Second) <= 0) {\n                dateFormat = 'HH:mm:ss A';\n            }\n            else if (DateHelper.compareUnits(timeAxis.unit, TimeUnit.Hour) <= 0) {\n                dateFormat = 'LT';\n            }\n\n            // <remove-on-release>\n            // TODO: we need smth like sprintf(\"has {0} of {1} items\", cnt, total)\n            //  to be able to test localizable strings\n            // </remove-on-release>\n            result = resultFormat\n                .replace('{startDate}', DateHelper.format(datum.tick.startDate, dateFormat))\n                .replace('{endDate}', DateHelper.format(datum.tick.endDate, dateFormat))\n                .replace('{allocated}', allocated)\n                .replace('{available}', available)\n                .replace('{cls}', datum.cls || '');\n\n            if (datum.assignment) {\n                result = result.replace('{event}', StringHelper.encodeHtml(datum.assignment.event.name));\n            }\n\n            result = `<div class=\"b-histogram-bar-tooltip\">${result}</div>`;\n        }\n\n        return result;\n    }\n\n}\n\nResourceUtilization.initClass();\n\n// enable tree feature for the utilization panel by default\nGridFeatureManager.registerFeature(Tree, true, 'ResourceUtilization');\n", "import SchedulerProBase from './SchedulerProBase.js';\n\n// Since SchedulerPro is based on thin XXBase classes, default features needs to be pulled in here\nimport '../../Scheduler/feature/ColumnLines.js';\nimport '../../Scheduler/feature/Dependencies.js';\nimport '../../Scheduler/feature/EventCopyPaste.js';\nimport '../../Scheduler/feature/EventDrag.js';\nimport '../../Scheduler/feature/EventDragCreate.js';\nimport '../../Scheduler/feature/EventFilter.js';\nimport '../../Scheduler/feature/EventMenu.js';\nimport '../../Scheduler/feature/EventTooltip.js';\nimport '../../Scheduler/feature/NonWorkingTime.js';\nimport '../../Scheduler/feature/ScheduleMenu.js';\nimport '../../Scheduler/feature/ScheduleTooltip.js';\nimport '../../Scheduler/feature/StickyEvents.js';\nimport '../../Scheduler/feature/TimeAxisHeaderMenu.js';\n\nimport '../../Grid/feature/CellEdit.js';\nimport '../../Grid/feature/CellMenu.js';\nimport '../../Grid/feature/ColumnDragToolbar.js';\nimport '../../Grid/feature/ColumnPicker.js';\nimport '../../Grid/feature/ColumnReorder.js';\nimport '../../Grid/feature/ColumnResize.js';\nimport '../../Grid/feature/Filter.js';\nimport '../../Grid/feature/FilterBar.js';\nimport '../../Grid/feature/Group.js';\nimport '../../Grid/feature/HeaderMenu.js';\nimport '../../Grid/feature/Sort.js';\nimport '../../Grid/feature/Stripe.js';\n// For checkbox selection mode\nimport '../../Grid/column/CheckColumn.js';\n\nimport '../feature/DependencyEdit.js';\nimport '../feature/EventResize.js';\nimport '../feature/TaskEdit.js';\nimport '../feature/EventSegmentDrag.js';\nimport '../feature/EventSegmentResize.js';\nimport '../feature/EventSegments.js';\n\n/**\n * @module SchedulerPro/view/SchedulerPro\n */\n\n/**\n * ## Intro\n *\n * The Scheduler Pro is an extension of the [Bryntum Scheduler](#Scheduler/view/Scheduler), and combines the visualisation capabilities\n * of the Scheduler with the powerful scheduling engine from the Gantt. This means it can manage {@link SchedulerPro/model/ProjectModel project} data composed by\n * tasks, dependencies, resources, assignments and calendars (for working / non-working time). If you have inter-task dependencies,\n * task updates will be propagated to any successors after a task is moved. The engine will reschedule tasks\n * according to the constraints, dependencies and calendars defined in the project. To familiarize yourself with the various APIs and data structures\n * of the Scheduler Pro, we recommend starting with these resources:\n *\n * * [Project data model guide](#SchedulerPro/guides/basics/project_data.md)\n * * [Bryntum Scheduler API docs](#Scheduler/view/Scheduler)\n * * [Bryntum Grid API docs](#Grid/view/Grid)\n * * [Localization](#SchedulerPro/guides/customization/localization.md)\n *\n * ## Basic setup\n *\n * To create an instance of this class, simply configure it with:\n *\n * * The {@link Grid/column/Column columns} you want\n * * The {@link Grid/view/Grid#config-features} you want, quite a lot to choose from, and you can build your own too\n * * A {@link SchedulerPro/model/ProjectModel Project} instance:\n * * A {@link Scheduler/preset/ViewPreset viewPreset} identifier, specifying the granularity of the time axis.\n *\n * ```javascript\n * const scheduler = new SchedulerPro({\n *    // A Project holds the data and the calculation engine for Scheduler Pro. It also acts as a CrudManager, allowing\n *    // loading data into all stores at once\n *    project : {\n *        autoLoad  : true,\n *        transport : {\n *            load : {\n *                url : './data/data.json'\n *            }\n *       }\n *    },\n *\n *    adopt             : 'container',\n *    startDate         : '2020-05-01',\n *    endDate           : '2020-09-30',\n *    resourceImagePath : '../_shared/images/users/',\n *    viewPreset        : 'dayAndWeek'\n *    features : {\n *       columnLines  : false,\n *       dependencies : true\n *   },\n *\n *   columns : [\n *       {\n *           type           : 'resourceInfo',\n *           text           : 'Worker',\n *           showEventCount : true\n *       }\n *   ]\n * });\n * ```\n *\n * {@inlineexample SchedulerPro/view/SchedulerPro.js}\n *\n * ## Inheriting from Bryntum Grid\n * Bryntum Scheduler Pro inherits from Bryntum Grid, meaning that most features available in the grid are also available\n * for the scheduler. Common features include columns, cell editing, context menus, row grouping, sorting and more.\n * Note: If you want to use the Grid component standalone, e.g. to use drag-from-grid functionality, you need a separate\n * license for the Grid component.\n *\n * ## Customisation\n *\n * You can style any aspect of the Scheduler using plain CSS or modify our themes using our built-in SASS variables.\n * Using the {@link Scheduler/view/mixin/SchedulerEventRendering#config-eventRenderer} you can customize the HTML output for\n * each event bar. The Scheduler comes with a few different {@link #config-eventStyle event styles} which you can\n * define globally on the Scheduler, in the resource data, or on individual events.\n *\n * {@inlineexample SchedulerPro/view/EventStyles.js}\n *\n * For more information about styling, please refer to the [styling guide](#SchedulerPro/guides/customization/styling.md).\n *\n * ## Partnering with other timeline widgets\n *\n * You can also pair the Scheduler Pro with other timeline based widgets such as the {@link SchedulerPro/view/ResourceHistogram histogram widget}\n * to view resource allocation levels, using the {@link #config-partner} config.\n *\n * {@inlineexample SchedulerPro/view/ResourceHistogram.js}\n *\n * ### Differences between Scheduler and Scheduler Pro\n * Scheduler Pro extends Scheduler and schedules tasks based on the Project, Resource and Event calendars, while also taking into account\n * dependencies and constraints. Scheduler Pro also comes with more demos showing off advanced use cases. Below is a list\n * of technical differences between the two versions:\n *\n * - Scheduler uses an EventStore, ResourceStore (optionally an AssignmentStore and a DependencyStore), whereas Scheduler Pro always\n * uses an AssignmentStore to manage event assignments.\n * - Scheduler Pro uses the same data model as the Gantt and can visualise a Project side by side with the Gantt.\n * - Scheduler supports showing dependencies but they are just visual elements, they do not impact scheduling. In Scheduler Pro,\n * adding a dependency between two tasks will affect the scheduling of the successor task.\n * - Scheduler Pro supports visualising a task completion progress bar.\n * - Scheduler Pro includes a Timeline widget and a Resource Histogram widget.\n *\n * @extends SchedulerPro/view/SchedulerProBase\n * @classType schedulerpro\n * @widget\n */\nexport default class SchedulerPro extends SchedulerProBase {\n\n    //region Config\n\n    static get $name() {\n        return 'SchedulerPro';\n    }\n\n    static get type() {\n        return 'schedulerpro';\n    }\n\n    //endregion\n\n}\n\nSchedulerPro.initClass();\n", "import ObjectHelper from '../../Core/helper/ObjectHelper.js';\nimport SchedulerBase from '../../Scheduler/view/SchedulerBase.js';\nimport '../../Scheduler/feature/TimeRanges.js';\nimport Store from '../../Core/data/Store.js';\nimport { SchedulerProProjectMixin } from '../../Engine/quark/model/scheduler_pro/SchedulerProProjectMixin.js';\n\n/**\n * @module SchedulerPro/widget/Timeline\n */\n\n/**\n * A visual component showing an overview timeline of events having the {@link SchedulerPro.model.EventModel#field-showInTimeline showInTimeline}\n * field set to true. The timeline component subclasses the {@link Scheduler.view.Scheduler Scheduler} and to use it,\n * simply provide it with a {@link SchedulerPro.model.ProjectModel}:\n *\n * ```javascript\n * const timeline = new Timeline({\n *     appendTo  : 'container',\n *     project   : project\n * });\n * ```\n *\n * {@inlineexample SchedulerPro/widget/Timeline.js}\n *\n * @extends Scheduler/view/Scheduler\n * @classType timeline\n * @widget\n */\nexport default class Timeline extends SchedulerBase {\n\n    static get $name() {\n        return 'Timeline';\n    }\n\n    // Factoryable type name\n    static get type() {\n        return 'timeline';\n    }\n\n    static get configurable() {\n        return {\n            /**\n             * Project config object or a Project instance\n             *\n             * @config {SchedulerPro.model.ProjectModel|ProjectModelConfig} project\n             */\n\n            /**\n             * @hideconfigs timeZone\n             */\n\n            height      : '13em',\n            eventLayout : 'pack',\n            barMargin   : 1,\n\n            // We need timeline width to be exact, because with `overflow: visible` content will look awful.\n            // Flow is like this:\n            // 1. zoomToFit is trying to set timespan to eventStore total time span. Assume start in on tuesday and end is on friday\n            // 2. zooming mixin is calculating tick width, which is e.g. 37px to fit all the ticks to the available space\n            // 3. timeAxis is configured with this new time span. By default it adjusts start and end to monday.\n            // 4. since timespan was increased, it now overflows with original tick size of 37. It requires smth smaller, like 34.\n            // 5. timeAxisViewModel is calculating fitting size. Which is correct value of 34, but value is ignored unless `forceFit` is true\n            // But apparently forceFit + zoomToSpan IS NOT SUPPORTED. So alternative approach is to disable autoAdjust\n            // on time axis to prevent increased size in #3. But then time axis start/end won't be even date, it could be\n            // smth random like `Thu Feb 07 2019 22:13:20`.\n            //\n            // On the other hand, without force-fit content might overflow and timeline is styled to show overflowing content.\n            // And that would require more additional configs\n            forceFit : true,\n            timeAxis : { autoAdjust : false },\n\n            readOnly                  : true,\n            zoomOnMouseWheel          : false,\n            zoomOnTimeAxisDoubleClick : false,\n            // eventColor                : null,\n            // eventStyle                : null,\n            rowHeight                 : 48,\n            displayDateFormat         : 'L',\n\n            // A fake resource\n            resources : [\n                {\n                    id : 1\n                }\n            ],\n\n            columns : []\n        };\n    }\n\n    static get delayable() {\n        return {\n            fillFromTaskStore : 100\n        };\n    }\n\n    construct(config = {}) {\n        const me = this;\n\n        me.startDateLabel           = document.createElement('label');\n        me.startDateLabel.className = 'b-timeline-startdate';\n        me.endDateLabel             = document.createElement('label');\n        me.endDateLabel.className   = 'b-timeline-enddate';\n\n        let initialCommitPerformed = true;\n\n        if ('project' in config) {\n            if (!config.project) {\n                throw new Error('You need to configure the Timeline with a Project');\n            }\n            // In case instance of project is provided, just take store right away and delete config, falling back to\n            // default\n            else if (config.project instanceof SchedulerProProjectMixin) {\n                me.taskStore = config.project.eventStore;\n\n                if (!config.project.isInitialCommitPerformed) {\n                    initialCommitPerformed = false;\n\n                    // For schedulerpro it is important to listen to first project commit\n                    config.project.ion({\n                        name : 'initialCommit',\n                        refresh({ isInitialCommit }) {\n                            if (isInitialCommit) {\n                                me.fillFromTaskStore();\n                                me.detachListeners('initialCommit');\n                            }\n                        },\n                        thisObj : me\n                    });\n                }\n\n                delete config.project;\n            }\n        }\n\n        // Despite the fact Timeline extends SchedulerBase, we still need to disable all these features.\n        // Because in case timeline gets into the same scope as scheduler or gantt, some features might be enabled\n        // by default. SchedulerBase jut means that we don't import anything extra. But other components might.\n        config.features = ObjectHelper.assign({\n            cellEdit            : false,\n            cellMenu            : false,\n            columnAutoWidth     : false,\n            columnLines         : false,\n            columnPicker        : false,\n            columnReorder       : false,\n            columnResize        : false,\n            contextMenu         : false,\n            eventContextMenu    : false,\n            eventDrag           : false,\n            eventDragCreate     : false,\n            eventEdit           : false,\n            eventFilter         : false,\n            eventMenu           : false,\n            eventResize         : false,\n            eventTooltip        : false,\n            group               : false,\n            headerMenu          : false,\n            regionResize        : false,\n            scheduleContextMenu : false,\n            scheduleMenu        : false,\n            scheduleTooltip     : false,\n            sort                : false,\n            timeAxisHeaderMenu  : false,\n            timeRanges          : false\n        }, config.features);\n\n        super.construct(config);\n\n        if (me.features.timeRanges) {\n            // We don't want to show timeRanges relating to Project\n            me.features.timeRanges.store = new Store();\n        }\n\n        // If original project is not committed by this time, we should not try to fill timeline from the task store,\n        // because project listener will do it itself. And also to not do extra suspendRefresh which would break project\n        // refresh event listener behavior.\n        // https://github.com/bryntum/support/issues/2665\n        initialCommitPerformed && me.fillFromTaskStore.now();\n\n        me.taskStore.ion({\n            refreshPreCommit : me.fillFromTaskStore,\n            changePreCommit  : me.onTaskStoreChange,\n            thisObj          : me\n        });\n\n        me.ion({\n            resize  : me.onSizeChanged,\n            thisObj : me\n        });\n\n        me.bodyContainer.appendChild(me.startDateLabel);\n        me.bodyContainer.appendChild(me.endDateLabel);\n    }\n\n    onSizeChanged({ width, oldWidth }) {\n        const\n            me    = this,\n            reFit = width !== oldWidth;\n\n        // Save a refresh, will come from fit. Don't suspend if we won't re-fit, we need the refresh for events\n        // to not disappear (since updating row height clears cache)\n        reFit && me.suspendRefresh();\n\n        me.updateRowHeight();\n\n        if (reFit) {\n            me.resumeRefresh();\n\n            me.fitTimeline();\n        }\n    }\n\n    updateRowHeight() {\n        if (this.bodyContainer.isConnected) {\n            this.rowHeight = this.bodyContainer.offsetHeight;\n        }\n    }\n\n    fitTimeline() {\n        if (this.eventStore.count > 0) {\n            this.forceFit = false;\n            this.zoomToFit(\n                {\n                    leftMargin  : 50,\n                    rightMargin : 50\n                }\n            );\n            this.forceFit = true;\n        }\n\n        this.updateStartEndLabels();\n    }\n\n    updateStartEndLabels() {\n        const me                    = this;\n        me.startDateLabel.innerHTML = me.getFormattedDate(me.startDate);\n        me.endDateLabel.innerHTML   = me.getFormattedDate(me.endDate);\n    }\n\n    async onTaskStoreChange({ action, record, records, changes, isCollapse }) {\n        const\n            me         = this,\n            eventStore = me.eventStore;\n\n        let needsFit;\n\n        switch (action) {\n            case 'add':\n                records.forEach(task => {\n                    if (task.showInTimeline) {\n                        eventStore.add(me.cloneTask(task));\n                        needsFit = true;\n                    }\n                });\n                break;\n            case 'remove':\n                if (!isCollapse) {\n                    records.forEach(task => {\n                        if (task.showInTimeline) {\n                            eventStore.remove(task.id);\n                            needsFit = true;\n                        }\n                    });\n                }\n                break;\n            case 'removeall':\n                me.fillFromTaskStore.now();\n                break;\n\n            case 'update': {\n                const task = record;\n\n                if (changes.showInTimeline) {\n                    // Add or remove from our eventStore\n                    if (task.showInTimeline) {\n                        eventStore.add(me.cloneTask(task));\n                    }\n                    else {\n                        const timelineEvent = eventStore.getById(task.id);\n\n                        if (timelineEvent) {\n                            eventStore.remove(timelineEvent);\n                        }\n                    }\n                    needsFit = true;\n                }\n                else if (task.showInTimeline) {\n                    // Just sync with existing clone\n                    const clone = eventStore.getById(task.id);\n\n                    if (clone) {\n                        // Fields might have been remapped\n                        clone.set(me.cloneTask(task));\n                        needsFit = true;\n                    }\n                }\n                break;\n            }\n        }\n\n        if (needsFit) {\n            me.fitTimeline();\n        }\n    }\n\n    cloneTask(task) {\n        return {\n            id         : task.id,\n            resourceId : 1,\n            name       : task.name,\n            startDate  : task.startDate,\n            endDate    : task.endDate,\n            cls        : task.cls\n        };\n    }\n\n    render() {\n        super.render(...arguments);\n\n        this.updateRowHeight();\n    }\n\n    async fillFromTaskStore() {\n        const\n            me            = this,\n            timelineTasks = [];\n\n        me.taskStore.traverse(task => {\n            if (task.showInTimeline && task.isScheduled) {\n                timelineTasks.push(me.cloneTask(task));\n            }\n        });\n\n        me.events = timelineTasks;\n        await me.project.commitAsync();\n\n        if (me.isDestroyed) {\n            return;\n        }\n\n        me.fitTimeline();\n    }\n\n    onLocaleChange() {\n        this.updateStartEndLabels();\n        super.onLocaleChange();\n    }\n};\n\n// Register this widget type with its Factory\nTimeline.initClass();\n", "import StringHelper from '../../Core/helper/StringHelper.js';\nimport DateHelper from '../../Core/helper/DateHelper.js';\nimport GridRowModel from '../../Grid/data/GridRowModel.js';\nimport TreeGrid from '../../Grid/view/TreeGrid.js';\nimport ArrayHelper from '../../Core/helper/ArrayHelper.js';\nimport ObjectHelper from '../../Core/helper/ObjectHelper.js';\n\n/**\n * @module SchedulerPro/widget/VersionGrid\n */\n\nconst\n    EMPTY_ARRAY = [],\n    actionTypeOrder = { remove : 1, add : 2, update : 3 },\n    entityTypeOrder = { TaskModel : 1, DependencyModel : 2, AssignmentModel : 3, ProjectModel : 4 },\n    // For moves, describe the former and current locations\n    describePosition = ({ parent, index }) => `${parent.name}[${index}]`,\n    knownEntityTypes = {\n        AssignmentModel : 'Assignment',\n        DependencyModel : 'Dependency'\n    };\n\nclass VersionGridRow extends GridRowModel {\n    static fields = [\n        {\n            name : 'description',\n            type : 'string'\n        }, {\n            name : 'occurredAt',\n            type : 'date'\n        }, {\n            name : 'versionModel'\n        }, {\n            name : 'transactionModel'\n        }, {\n            name : 'propertyUpdate'\n        }, {\n            name : 'action'\n        }\n    ];\n}\n\n/**\n * Displays a list of versions and the transactions they contain. For use with the {@link SchedulerPro.feature.Versions}\n * feature.\n *\n * Configure the VersionGrid with a {@link SchedulerPro.model.ProjectModel} using the {@link #config-project} config.\n *\n * @extends Grid/view/TreeGrid\n * @classType versiongrid\n * @widget\n */\nexport default class VersionGrid extends TreeGrid {\n    static $name = 'VersionGrid';\n\n    static type = 'versiongrid';\n\n    static configurable = {\n\n        store : {\n            tree       : true,\n            modelClass : VersionGridRow,\n            sorters    : [\n                {\n                    field     : 'occurredAt',\n                    ascending : false\n                },\n                VersionGrid.sortActionRows\n            ],\n            reapplySortersOnAdd : true\n        },\n\n        /**\n         * The {@link SchedulerPro.model.ProjectModel} whose versions and changes are being observed in this grid.\n         * @config {SchedulerPro.model.ProjectModel}\n         */\n        project : null,\n\n        /**\n         * Whether to display transactions not yet associated with a version.\n         * @prp {Boolean}\n         */\n        showUnattachedTransactions : true,\n\n        /**\n         * Whether to show only versions that have been assigned a specific name.\n         * @prp {Boolean}\n         */\n        showNamedVersionsOnly : false,\n\n        /**\n         * Whether to include version rows in the display.\n         * @prp {Boolean}\n         */\n        showVersions : true,\n\n        /**\n         * The id of the version currently being compared, if any.\n         * @prp {Boolean}\n         */\n        comparingVersionId : null,\n\n        flex : 0,\n\n        features : {\n            group : {\n                field : 'id'\n            },\n\n            cellEdit : {\n                continueEditingOnCellClick : false,\n                editNextOnEnterPress       : false\n            },\n\n            cellMenu : {\n                items : {\n                    removeRow    : false,\n                    cut          : false,\n                    copy         : false,\n                    paste        : false,\n                    renameButton : {\n                        text   : 'L{VersionGrid.rename}',\n                        icon   : 'b-icon b-icon-edit',\n                        onItem : ({ record, source : grid }) => {\n                            grid.startEditing({\n                                id     : record.id,\n                                column : grid.columns.get('description')\n                            });\n                        }\n                    },\n                    restoreButton : {\n                        text   : 'L{VersionGrid.restore}',\n                        icon   : 'b-icon b-icon-undo',\n                        onItem : ({ record, source : grid }) => {\n                            grid.triggerRestore(record.versionModel);\n                        }\n                    },\n                    compareButton : {\n                        text   : 'L{VersionGrid.compare}',\n                        icon   : 'b-icon b-icon-compare',\n                        onItem : ({ record, source : grid }) => {\n                            grid.triggerCompare(record.versionModel);\n                        }\n                    },\n                    stopComparingButton : {\n                        text   : 'L{VersionGrid.stopComparing}',\n                        onItem : ({ record, source : grid }) => {\n                            grid.triggerStopCompare();\n                        }\n                    }\n                }\n            },\n\n            rowCopyPaste : false\n        },\n\n        columns : [\n            { type : 'tree', text : 'L{VersionGrid.description}', field : 'description', flex : 4, groupable : false, renderer : ({ grid, ...rest }) => grid.renderDescription({ grid, ...rest }), autoHeight : true },\n            { text : 'L{VersionGrid.occurredAt}', field : 'occurredAt', type : 'date', flex : 1, groupable : false }\n        ],\n\n        /**\n         * The date format used for displaying date values in change actions.\n         * @config {String}\n         */\n        dateFormat : 'M/D/YY h:mm a',\n\n        internalListeners : {\n            beforeCellEditStart({ editorContext : { column, record } }) {\n                // Only version descriptions are editable\n                if (!(column.field === 'description' && record.versionModel)) {\n                    return false;\n                }\n            },\n\n            finishCellEdit({ editorContext : { record, value } }) {\n                record.versionModel.name = (value != null && value.trim()) ? value : null;\n            },\n\n            cellMenuBeforeShow({ source, record, items }) {\n                items.stopComparingButton.disabled = !source.comparingVersionId;\n                return Boolean(record.versionModel);\n            },\n\n            toggleNode({ record, collapse }) {\n                this._expandedById.set(record.id, !collapse);\n            }\n        }\n    };\n\n    static delayable = {\n        processUpdates : {\n            type              : 'raf',\n            cancelOutstanding : true\n        }\n    };\n\n    // Bookkeeping fields\n    static get properties() {\n        return {\n            _rowsByUnderlyingRecord : new WeakMap(),\n            _expandedById           : new Map()\n        };\n    };\n\n    _transactionChanges = [];\n    _versionChanges = [];\n    comparingRowCls = `b-${VersionGrid.type}-comparing`;\n\n    construct(config) {\n        super.construct({\n            ...config,\n            features : ObjectHelper.merge({}, VersionGrid.configurable.features, config.features)\n        });\n    }\n\n    afterConstruct() {\n        if (!this.project) {\n            throw new Error(`${VersionGrid.$name} requires the project config.`);\n        }\n        this.refreshGrid();\n    }\n\n    updateDateFormat(newDateFormat) {\n        const occurredAtColumn = this.columns.get('occurredAt');\n        if (occurredAtColumn) {\n            occurredAtColumn.format = newDateFormat;\n        }\n    }\n\n    updateProject(newProject) {\n        const me = this;\n\n        me.detachListeners('storeChange');\n\n        me._versionStore = newProject.getCrudStore('versions');\n        me._transactionStore = newProject.getCrudStore('changelogs');\n\n        me._versionStore.ion({\n            name    : 'storeChange',\n            change  : me.onVersionStoreChange,\n            thisObj : me\n        });\n        me._transactionStore.ion({\n            name    : 'storeChange',\n            change  : me.onTransactionStoreChange,\n            thisObj : me\n        });\n    }\n\n    updateShowNamedVersionsOnly() {\n        if (this.isPainted) {\n            this.refreshGrid();\n        }\n    }\n\n    updateShowUnattachedTransactions() {\n        if (this.isPainted) {\n            this.refreshGrid();\n        }\n    }\n\n    updateShowVersions() {\n        if (this.isPainted) {\n            this.refreshGrid();\n        }\n    }\n\n    updateComparingVersionId(newVersionId, oldVersionId) {\n        const [oldHighlightedRow, newHighlightedRow] = [oldVersionId, newVersionId].map(versionId =>\n            this.store.getById(`v-${versionId}`));\n        if (oldHighlightedRow) {\n            oldHighlightedRow.cls = '';\n            oldHighlightedRow.iconCls = 'b-icon b-icon-version';\n        }\n        if (newHighlightedRow) {\n            newHighlightedRow.cls = this.comparingRowCls;\n            newHighlightedRow.iconCls = 'b-icon b-icon-compare';\n        }\n    }\n\n    onVersionStoreChange({ action, records }) {\n        this._versionChanges.push({ action, records });\n        this.processUpdates();\n    }\n\n    onTransactionStoreChange({ action, records }) {\n        this._transactionChanges.push({ action, records });\n        this.processUpdates();\n    }\n\n    /**\n     * This is an optimization to more efficiently replace grid rows when the underlying stores change.\n     * We wait a tick, then replace the set of rows corresponding to the modified records with the new\n     * projected rowset.\n     *\n     * The code below does not handle record remove, or updating transactions without their version in the\n     * same tick. (Versions can be updated without their transactions, as when renamed.)\n     * @private\n     */\n    processUpdates() {\n        const\n            me = this,\n            versions = ArrayHelper.unique(me._versionChanges.flatMap(({ records }) => records)),\n            // <remove-on-release>\n            // TODO: why is version.id integer but txn.versionId string using websockets?\n            // </remove-on-release>\n            versionIds = new Set(versions.map(version => String(version.id))),\n            transactions = ArrayHelper.unique(\n                me._transactionChanges.flatMap(({ records }) => records)\n                    // Expand to all transactions for incoming versions\n                    .concat(versions.length === 0 ? []\n                        : me._transactionStore.query(txn => versionIds.has(txn.versionId))));\n        // Expand to all versions for incoming transaction\n        for (const transaction of transactions) {\n            if (transaction.versionId && !versionIds.has(transaction.versionId)) {\n                versions.push(me._versionStore.getById(transaction.versionId));\n                versionIds.add(transaction.versionId);\n            }\n        }\n        me.replaceRows(ArrayHelper.unique(versions), transactions);\n        me._transactionChanges = [];\n        me._versionChanges = [];\n    }\n\n    replaceRows(versions, transactions) {\n        const\n            me = this,\n            { showNamedVersionsOnly, showUnattachedTransactions, store } = me,\n            rowsToReplaceSet = new Set(),\n            transactionsByVersionId = ArrayHelper.groupBy(transactions, 'versionId'),\n            allRecords = transactions.concat(versions),\n            versionsToShow = showNamedVersionsOnly\n                ? versions.filter(version => version.name != null)\n                : versions;\n        for (const record of allRecords) {\n            for (const row of me._rowsByUnderlyingRecord.get(record) ?? EMPTY_ARRAY) {\n                rowsToReplaceSet.add(row);\n            }\n        }\n\n        me.suspendRefresh();\n\n        store.remove(Array.from(rowsToReplaceSet));\n        for (const version of versionsToShow) {\n            const newRows = store.add(me.getGridRows(version, transactionsByVersionId[version.id]));\n            me._rowsByUnderlyingRecord.set(version, newRows);\n        }\n        if (showUnattachedTransactions) {\n            for (const transaction of transactions.filter(txn => txn.versionId == null)) {\n                const newRows = store.add(me.getGridRows(null, [transaction]));\n                me._rowsByUnderlyingRecord.set(transaction, newRows);\n            }\n        }\n\n        me.resumeRefresh();\n\n        store.sort(store.sorters);\n    }\n\n    /**\n     * Does a full replace of all rows in the grid using all records currently in the two stores.\n     * @private\n     */\n    refreshGrid() {\n        this.replaceRows(this._versionStore.records, this._transactionStore.records);\n    }\n\n    /**\n     * Transform a set of transactions (and optional parent version) into tree structure needed by grid\n     * @private\n     */\n    getGridRows(version, transactions) {\n        const\n            me = this,\n            { showVersions, comparingVersionId } = me,\n            transactionRows = transactions?.map(transaction => {\n                const id = `t-${transaction.id}`;\n                return {\n                    id,\n                    expanded         : Boolean(me._expandedById?.get(id)),\n                    description      : transaction.description,\n                    occurredAt       : transaction.occurredAt,\n                    transactionModel : transaction,\n                    rootVersionModel : version,\n                    children         : transaction.actions.map((action, index) => {\n                        const id = `a-${transaction.id}-${index}`;\n                        return {\n                            id,\n                            expanded         : Boolean(me._expandedById?.get(id)),\n                            action,\n                            rootVersionModel : version,\n                            children         : action.propertyUpdates?.map(propertyUpdate => ({\n                                rootVersionModel : version,\n                                propertyUpdate\n                            })) ?? []\n                        };\n                    })\n                };\n            }) || [],\n            id = `v-${version?.id}`;\n        return version && showVersions ? {\n            id,\n            expanded     : Boolean(me._expandedById.get(id)),\n            description  : version.description,\n            occurredAt   : version.savedAt,\n            children     : transactionRows,\n            versionModel : version,\n            iconCls      : 'b-icon-version',\n            cls          : version.id === comparingVersionId ? me.comparingRowCls : null\n        } : transactionRows;\n    }\n\n    renderDescription(event) {\n        const { record } = event;\n        if (record.propertyUpdate) {\n            return this.renderPropertyUpdate(record.propertyUpdate);\n        }\n        else if (record.action) {\n            return this.renderActionDescription(record.action);\n        }\n        return record.description;\n    }\n\n    renderPropertyUpdate(propertyUpdate) {\n        const\n            clsPrefix = VersionGrid.type,\n            { property, before, after } = propertyUpdate;\n        return {\n            children : [{\n                tag      : 'div',\n                class    : `b-${clsPrefix}-property-update-desc`,\n                children : [\n                    {\n                        tag   : 'span',\n                        class : `b-${clsPrefix}-property-name`,\n                        html  : `${this.formatPropertyName(property)}`\n                    },\n                    this.renderPropertyValue(before, 'before'),\n                    {\n                        tag   : 'i',\n                        class : 'b-icon b-icon-right'\n                    },\n                    this.renderPropertyValue(after, 'after')\n                ]\n            }]\n        };\n    }\n\n    /**\n     * Return DomConfig for an individual data value.\n     * @param {*} value\n     * @param {'before'|'after'} side\n     * @returns {DomConfig}\n     * @private\n     */\n    renderPropertyValue(value, side) {\n        return {\n            tag   : 'span',\n            class : [\n                `b-${VersionGrid.type}-property-${side}`,\n                value == null && `b-${VersionGrid.type}-empty-value`\n            ],\n            html : value == null ? this.L('L{Versions.nullValue}') : this.formatValueString(value) ?? ``\n        };\n    }\n\n    /**\n     * Convert an individual data value to a string.\n     * @param {*} value The raw data value\n     * @returns {String} A string representing the value, for display\n     * @private\n     */\n    formatValueString(value) {\n        if (DateHelper.isDate(value)) {\n            return DateHelper.format(value, this.dateFormat);\n        }\n        else if (typeof (value) === 'number') {\n            return value.toFixed(2);\n        }\n        return value;\n    }\n\n    /**\n     * Format a property name in the change log to a displayable string. By default,\n     * converts e.g. \"camelCase\" to \"Camel case\".\n     * @param {String} propertyName The raw field name\n     * @returns {String} A string formatted for display\n     * @private\n     */\n    formatPropertyName(propertyName) {\n        return StringHelper.separate(propertyName);\n    }\n\n    getAssignmentTextTokens(assignmentChange) {\n        return {\n            event    : assignmentChange.event.name,\n            resource : assignmentChange.resource.name\n        };\n    }\n\n    getDependencyTextTokens(dependencyChange) {\n        return {\n            from : dependencyChange.fromTask.name,\n            to   : dependencyChange.toTask.name\n        };\n    }\n\n    /**\n     * Produces a text description to show in the description column for an 'action' row.\n     * @param {SchedulerPro.model.changelog.ChangeLogAction} action The action to describe\n     * @returns DomConfig of description text with highlightable entity names\n     * @private\n     */\n    renderActionDescription(action) {\n        const\n            me = this,\n            { actionType, entity } = action,\n            entityNames = me.L(`L{Versions.entityNames}`);\n        let description,\n            tokens = {\n                type : entityNames[entity.type],\n                name : entity.name\n            };\n        if (actionType === 'move') {\n            tokens.from = describePosition(action.from);\n            tokens.to = describePosition(action.to);\n        }\n\n        // Concatenate action and entity type to get description pattern from localizations\n        // e.g. 'L{Versions.addDependency}' | 'L{Versions.updateEntity}'\n        description = me.L(`L{Versions.${actionType}${knownEntityTypes[entity.type] ?? 'Entity'}}`);\n\n        if (entity.type === 'DependencyModel') {\n            tokens = me.getDependencyTextTokens(entity);\n        }\n        else if (entity.type === 'AssignmentModel') {\n            tokens = me.getAssignmentTextTokens(entity);\n        }\n\n        description = description.replace(/\\{(\\w+)\\}/g, (_, variable) => tokens[variable] ?? variable);\n        if (action.isUser) {\n            description = `[!] ${description}`;\n        }\n        return me.renderHighlightedTextElements(StringHelper.capitalize(description), tokens);\n    }\n\n    /**\n     * Sorts the actions within a transaction using precedence heuristic to show most \"significant\"\n     * actions first.\n     * @param {SchedulerPro.model.changelog.ChangeLogAction[]} actions\n     */\n    static sortActionRows(row1, row2) {\n        if (row1.parent === row2.parent && row1.action && row2.action) {\n            const\n                isUser1 = Boolean(row1.action.isUser),\n                isUser2 = Boolean(row2.action.isUser),\n                { actionType : type1, entity : { type : entityType1 } } = row1.action,\n                { actionType : type2, entity : { type : entityType2 } } = row2.action;\n\n            // Initial user actions first\n            if (isUser1 !== isUser2) {\n                return isUser1 ? -1 : 1;\n            }\n\n            // Adds/removes first, then updates; within those groups, tasks first\n            return Math.sign(actionTypeOrder[type1] - actionTypeOrder[type2]) ||\n                Math.sign(entityTypeOrder[entityType1] - entityTypeOrder[entityType2]) ||\n                0;\n        }\n        return 0;\n    }\n\n    triggerRestore(version) {\n        /**\n         * Fires when the user chooses to restore a selected version.\n         * @event restore\n         * @param {SchedulerPro.model.VersionModel} version The {@link SchedulerPro.model.VersionModel} being restored\n         */\n        this.trigger('restore', { version });\n    }\n\n    triggerCompare(version) {\n        /**\n         * Fires when the user chooses to compare a selected version.\n         * @event compare\n         * @param {SchedulerPro.model.VersionModel} version The {@link SchedulerPro.model.VersionModel} being restored\n         */\n        this.trigger('compare', { version });\n    }\n\n    triggerStopCompare(version) {\n        /**\n         * Fires when the user chooses to stop comparing a currently compared version.\n         * @event stopCompare\n         */\n        this.trigger('stopCompare');\n    }\n\n    /**\n     * Produce a DomConfig for cell text where **-delimited tokens are replaced by specified values. Used to\n     * allow CSS styling of replaced tokens (e.g. task names) in the changelog.\n     *\n     * @param {String} text Text string containing optional **delimited tokens**, taken from localizations\n     * @returns {DomConfig} DomConfig with text string broken into <span>s and tokens replaced\n     * @internal\n     */\n    renderHighlightedTextElements(text) {\n        const clsPrefix = this.constructor.type;\n        return {\n            children : [{\n                tag      : 'span',\n                class    : `b-${clsPrefix}-highlighted-text`,\n                children : text.split(/\\*\\*/g).reduce((out, chunk) => {\n                    out.children.push({\n                        tag   : 'span',\n                        text  : chunk,\n                        class : out.isEntity ? `b-${clsPrefix}-highlighted-entity` : null\n                    });\n                    out.isEntity = !out.isEntity;\n                    return out;\n                }, { children : [], isEntity : false }).children\n            }]\n        };\n    }\n\n}\n\nVersionGrid.initClass();\n"],
  "mappings": "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",
  "names": ["ResourceCalendarColumn", "Column", "mixin", "AttachToProjectMixin", "$name", "type", "defaults", "field", "text", "editor", "CalendarField", "clearable", "allowInvalid", "attachToProject", "project", "defaultCalendar", "store", "calendarManagerStore", "attachToResourceStore", "resourceStore", "ion", "name", "update", "thisObj", "onResourceUpdate", "record", "changes", "change", "_change$value", "oldValue", "value", "id", "refreshCell", "renderer", "getById", "displayField", "ColumnStore", "registerColumnType", "_$name", "ScaleColumn", "isScaleColumn", "fields", "width", "minWidth", "cellCls", "sortable", "groupable", "filterable", "alwaysClearCell", "scalePoints", "onDestroy", "scaleWidget", "destroy", "applyValue", "useProp", "key", "arguments", "buildScaleWidget", "me", "Scale", "owner", "grid", "appendTo", "floatRoot", "cls", "align", "monitorResize", "Object", "defineProperties", "get", "set", "element", "style", "_width", "height", "_height", "_scaleWidget", "cellElement", "rowHeight", "refresh", "scaleCloneElement", "cloneNode", "removeAttribute", "classList", "remove", "innerHTML", "appendChild", "EventModel", "SchedulerProEvent", "derive", "TimeSpan", "RecurringTimeSpan", "PartOfProject", "EventModelMixin", "PercentDoneMixin", "defaultValue", "convert", "Duration", "getDefaultSegmentModelClass", "EventSegmentModel", "updateWrapDate", "date", "duration", "forward", "Date", "getTime", "milliseconds", "startDate", "dt", "isOccurrence", "_a", "_startDate", "allDay", "constructor", "getAllDayStartDate", "generation", "isParent", "$ignoreChange", "timeDiff", "DateHelper", "diff", "child", "children", "add", "batching", "preamble", "wrapStartDate", "wrapEndDate", "endDate", "_endDate", "getAllDayEndDate", "postamble", "fullEffort", "unit", "effortUnit", "magnitude", "effort", "setEffort", "_wrapStartDate", "result", "_wrapEndDate", "data", "isObject", "outerStartDate", "outerEndDate", "isEditable", "fieldName", "isLeaf", "manuallyScheduled", "stm", "_this$recurringEvent", "recurringEvent", "assigned", "isDelayingCalculation", "assignmentStore", "storage", "findItem", "getCurrentConfig", "options", "segments", "map", "segment", "__publicField", "isProEventModel", "EventStore", "SharedEventStoreMixin", "RecurringEventsMixin", "GetEventsMixin", "DayIndexMixin", "EventStoreMixin", "ChronoEventStoreMixin", "AjaxStore", "defaultConfig", "modelClass", "sortFn", "a", "b", "ProHorizontalLayout", "Target", "Base", "configurable", "weights", "groupBy", "groupByThisObj", "layoutFn", "grouped", "Boolean", "getGroupValue", "layoutData", "group", "eventRecord", "call", "Infinity", "getEventGroups", "events", "groups", "Set", "sort", "aValue", "bValue", "Array", "from", "ProHorizontalLayoutStack", "HorizontalLayoutStack", "layoutEventsInBands", "heightRun", "ProHorizontalLayoutPack", "HorizontalLayoutPack", "groupCount", "length", "packEventsInBands", "event", "j", "slot", "slotSize", "size", "groupIndex", "indexOf", "adjustedSlotStart", "top", "start", "inBandHeight", "inBandTop", "forEach", "assign", "bandIndexToPxConvertFn", "bandIndexToPxConvertThisObj", "resourceRecord", "counter", "CalendarHighlightModel", "ResourceTimeRangeModel", "generateId", "domIdPrefix", "CalendarHighlight", "ResourceTimeRangesBase", "calendar", "unhighlightOnDrop", "collectAvailableResources", "rangeCls", "resourceTimeRangeModelClass", "inflate", "pluginConfig", "config", "afterConstruct", "client", "eventDragStart", "eventDragReset", "eventResizeStart", "eventResizeEnd", "dragCreateStart", "afterDragCreate", "highlightCalendar", "eventRecords", "resourceRecords", "ArrayHelper", "asArray", "highlightEventCalendars", "highlightResourceCalendars", "clearExisting", "disabled", "unhighlightCalendars", "flatMap", "$linkedResources", "highlight", "Map", "_eventRecord$calendar", "timespans", "getWorkingTimeRanges", "timespan", "currentOrientation", "refreshEventsForResource", "onRenderDone", "_resourceRecord$calen", "resources", "keys", "resource", "onEventDragStart", "context", "_me$collectAvailableR", "availableResources", "features", "eventDrag", "constrainDragToResource", "scheduler", "records", "onEventResizeStart", "onDragCreateStart", "getEventsToRender", "_this$highlight", "push", "onEventDataGenerated", "renderData", "isCalendarHighlightModel", "fillSize", "isVertical", "wrapperCls", "className", "html", "dataset", "taskBarFeature", "left", "eventId", "generateElementId", "updateDisabled", "was", "shouldInclude", "featureClass", "GridFeatureManager", "registerFeature", "DependencyEdit", "SchedulerDependencyEdit", "showLagField", "editorConfig", "items", "activeField", "label", "EventBuffer", "InstancePlugin", "showDuration", "tooltipTemplate", "$config", "chain", "updateTooltipTemplate", "tooltip", "Tooltip", "new", "forElement", "timeAxisSubGridElement", "forSelector", "offset", "getHtml", "activeTarget", "resolveEventRecord", "before", "matches", "_me$tooltip", "useEventBuffer", "bufferBeforeWidth", "bufferAfterWidth", "wrapperChildren", "enabled", "isHorizontal", "sizeProp", "tag", "toString", "undefined", "updateShowDuration", "isConfiguring", "refreshWithTransition", "doDisable", "disable", "isPainted", "waitForAnimations", "then", "EventSegmentDrag", "EventDrag", "capitalizedEventName", "getTriggerParams", "dragData", "assignmentRecords", "browserEvent", "triggerEventDrag", "trigger", "triggerDragStart", "navigator", "skipNextClick", "triggerDragAbort", "triggerDragAbortFinalized", "triggerAfterDrop", "valid", "eventStore", "initialAssignmentsState", "find", "assignment", "i", "_this$dragData$assign", "includes", "resourceId", "updateRecords", "copyKeyPressed", "externalDropTarget", "suspendAutoCommit", "updateSegment", "resumeAutoCommit", "isCopy", "targetEventRecord", "targetResourceRecord", "newResource", "mode", "suspendRefresh", "updated", "draggedEvent", "eventBar", "eventBarEls", "instanceMeta", "hasTemporaryDragElement", "transient", "slice", "newStartDate", "adjustStartDate", "origStart", "isEqual", "_me$endBatchUpdate", "endListeningForBatchedUpdates", "cancelBatchUpdate", "commitAsync", "endBatchUpdate", "resumeRefresh", "fillTicks", "el", "lastDomConfig", "isEventElementDraggable", "eventElement", "isEventSegment", "closest", "drag", "targetSelector", "buildDragHelperConfig", "getMinimalDragData", "info", "getElementFromContext", "resolveResourceRecord", "assignmentRecord", "resolveAssignmentRecord", "beginBatchUpdate", "beginBatch", "_eventRecord$event", "endBatch", "_eventRecord$event2", "cancelBatch", "setupProductDragData", "_me$getDateConstraint", "mainEventElement", "getElementsFromEventRecord", "Error", "ignoreSamePositionDrop", "rtl", "nextSegment", "listenToBatchedUpdates", "beginListeningForBatchedUpdates", "dateConstraints", "getDateConstraints", "constrainRectangle", "getConstrainingRectangle", "eventRegion", "Rectangle", "foregroundCanvas", "mainEventRegion", "translate", "x", "setupConstraints", "timeAxisViewModel", "snapPixelAmount", "draggedEntities", "suspendRecordElementRedrawing", "suspendElementRedrawing", "minDate", "maxDate", "previousSegment", "end", "tipId", "internalSnapToPosition", "snapTo", "updateDragContext", "dirty", "_client$features$even", "enableEventAnimations", "eventBuffer", "borderWidths", "border", "hollow", "NestedEvents", "Delayable", "construct", "tree", "refreshClient", "updateEventLayout", "layout", "console", "warn", "updateBarMargin", "updateResourceMargin", "updateEventHeight", "updateHeaderHeight", "setProperty", "getEventLayout", "parentEventRecord", "eventLayout", "overridden", "getResourceMargin", "isRoot", "resourceMargin", "getBarMargin", "barMargin", "getAppliedResourceHeight", "eventHeight", "borderWidth", "getEventStyle", "currentParentsHeight", "headerHeight", "getResourceWidth", "currentParentsWidth", "attachToEventStore", "onEventStoreChange", "some", "r", "parent", "onEventStoreBatchedUpdate", "beforeEventDragStart", "parentElement", "isDraggingNestedEvent", "originalParentElement", "originalBounds", "getElementFromAssignmentRecord", "bounds", "constrainDragToParent", "constrainDragToTimeline", "relativeBounds", "DomSync", "addChild", "afterEventDragStart", "parentBounds", "getBoundingClientRect", "setYConstraint", "setXConstraint", "checkEventDragValidity", "allowDeNestingOnDrop", "message", "L", "allowNestingOnDrop", "processEventDrop", "toScheduler", "reassignedFrom", "eventsToAdd", "addedEvents", "draggedAssignment", "_eventRecord$children", "newParent", "targetResource", "rootNode", "existingAssignment", "assignments", "newParentElement", "getElementFromEventRecord", "syncIdMap", "nestedEventsContainer", "intersection", "syncId", "processCrossSchedulerEventDrop", "afterEventDragAbortFinalized", "animation", "getAnimations", "transitionProperty", "finished", "afterEventResizeStart", "constrainResizeToParent", "timespanRecord", "max", "min", "returnWrapper", "_assignmentRecord$eve", "getChild", "scheduleEvent", "eventRect", "DomHelper", "setTranslateXY", "setTopLeft", "y", "filter", "isEventModel", "assignedChildren", "e", "_e$$linkedResources", "layouts", "layoutEvents", "overlappingEventSorter", "nestedEvents", "eventsData", "values", "absoluteTop", "domConfig", "renderEvent", "syncOptions", "syncIdField", "releaseThreshold", "override", "delayable", "ResourceNonWorkingTime", "properties", "resourceMap", "timeAxis", "reconfigure", "prio", "changePreCommit", "attachToCalendarManagerStore", "onTimeAxisReconfigure", "clear", "onResourceChange", "action", "delete", "runWithTransition", "onCalendarChange", "shouldPaint", "maxTimeAxisUnit", "compareUnits", "effectiveCalendar", "has", "ranges", "getNonWorkingTimeRanges", "range", "iconCls", "isNonWorking", "resolveResourceNonWorkingTimeInterval", "rangeElement", "_rangeElement$closest", "elementData", "enableMouseEvents", "entityName", "timespanDefaults", "isHighlightConfig", "TimeSpanHighlight", "domConfigs", "configs", "padding", "rowManager", "renderDone", "onViewChanged", "highlightTimeSpan", "draw", "surround", "taskRecord", "isTimeSpan", "animationId", "addTemporaryClass", "surroundTimeSpan", "rect", "isGanttBase", "getScheduleRegion", "visualize", "class", "sync", "targetElement", "containerEl", "onlyChildren", "timeSpan", "highlightTimeSpans", "timeSpans", "setPrototypeOf", "unhighlightTimeSpans", "fadeOut", "opacity", "fadeOutDetacher", "EventHelper", "onTransitionEnd", "property", "handler", "_containerEl", "createElement", "retainElement", "onTimeAxisViewModelUpdate", "ChangeLogPropertyUpdate", "after", "freeze", "ProjectModel", "ProjectChangeHandlerMixin", "ProjectCrudManager", "ProjectModelMixin", "SchedulerProProjectMixin", "calendarModelClass", "CalendarModel", "dependencyModelClass", "DependencyModel", "eventModelClass", "assignmentModelClass", "AssignmentModel", "resourceModelClass", "ResourceModel", "calendarManagerStoreClass", "CalendarManagerStore", "dependencyStoreClass", "DependencyStore", "eventStoreClass", "assignmentStoreClass", "AssignmentStore", "resourceStoreClass", "ResourceStore", "calendarsData", "supportShortSyncResponseNote", "delayCalculation", "stmClass", "StateTrackingManager", "calendars", "taskStore", "allRecords", "updateCalendars", "SchedulerProEventRendering", "horizontalLayoutPackClass", "horizontalLayoutStackClass", "updateInternalEventLayout", "oldEventLayout", "clearLayouts", "getEventLayoutHandler", "horizontal", "horizontalStack", "layoutEventVerticallyStack", "horizontalPack", "layoutEventVerticallyPack", "applyLayout", "widgetClass", "ProHorizontalRendering", "HorizontalRendering", "fillInnerSpanHorizontalPosition", "startMS", "innerStartMS", "endMS", "innerEndMS", "durationMS", "innerDurationMS", "calculateMS", "position", "calculateHorizontalPosition", "Math", "floor", "getTimeSpanRenderData", "rowRecord", "includeOutside", "ProVerticalRendering", "VerticalRendering", "fillInnerSpanVerticalPosition", "isBatchUpdating", "getCoordinateFromDate", "bottom", "round", "getSingleUnitInPixels", "SchedulerProBase", "SchedulerBase", "ProjectProgressMixin", "SchedulingIssueResolution", "projectModelClass", "dependencyIdField", "isSchedulerPro", "onPaintOverride", "_mode", "init", "vertical", "rendered", "toggleEmptyText", "bodyContainer", "toggleClasses", "rowCount", "isLoadingOrSyncing", "createEvent", "row", "isWorkingTime", "taskEdit", "isEditing", "aftertaskedit", "once", "initClass", "VersionHelper", "setVersion", "emptyFn", "ResourceHistogram", "allocationReportByRecord", "allocationDataByRecord", "allocationObserverByRecord", "resourceGroupsToUpdate", "resourceGroupsAllocation", "scheduleRefreshRows", "createOnFrame", "refreshRows", "refreshResourcesWhenReady", "onAssignmentStoreChange", "beforeRowHeight", "renderRow", "currentTimeAxis", "_timeAxis", "partner", "endReconfigure", "onRowManagerRenderRow", "isSpecialRow", "isDestroyed", "renderGroupHistogram", "renderGroupScale", "_me$_histogramWidget", "_me$_groupHistogramWi", "observer", "_me$allocationObserve", "entries", "removeObserver", "entity", "_me$allocationReportB", "removeEntity", "_record$removeEntity", "_histogramWidget", "_groupHistogramWidget", "barTooltip", "updateProject", "detachListeners", "delayCalculationStart", "delayCalculationEnd", "repopulateReplica", "getRowHeight", "convertEffortUnit", "toUnit", "run", "updateUseProjectTimeUnitsForScale", "eventParams", "generateScalePoints", "_generatedScalePoints", "_this$project", "scaleColumn", "columns", "query", "column", "_scalePoints", "histogramWidget", "lastPoint", "scaleMax", "scaleUnit", "maxInScaleUnits", "scaleMaxPadding", "topValue", "useProjectTimeUnitsForScale", "TimeUnit", "Millisecond", "asMilliseconds", "buildScalePointText", "scalePoint", "getShortNameOfUnit", "_this$project2", "graph", "increment", "scaleStep", "getSmallerUnit", "as", "factor", "updateViewPreset", "viewPreset", "_updatingViewPreset", "isInitialCommitPerformed", "onTimeAxisEndReconfigure", "onPaint", "firstPaint", "showBarTip", "updateGetBarTip", "barTooltipTemplate", "changeBarTooltip", "oldTooltip", "isTooltip", "barTooltipClass", "hoverDelay", "trackMouse", "getTipHtml", "bind", "onRepopulateReplica", "ticksIdentifier", "args", "_this$barTooltipTempl", "index", "getRecordFromElement", "histogramData", "parseInt", "datum", "buildTicksIdentifier", "getGraph", "addIdentifier", "CalculatedValueGen", "writeToGraph", "BaseCalendarMixin", "unspecifiedTimeIsWorking", "intervals", "ticks", "tick", "isWorking", "collectTicksWidth", "prevDuration", "tickDurations", "totalDuration", "isMonotonous", "ticksWidth", "onProjectDelayCalculationStart", "onProjectDelayCalculationEnd", "projectUnitsHasChanged", "daysPerMonth", "_projectDaysPerMonth", "daysPerWeek", "_projectDaysPerWeek", "hoursPerDay", "_projectHoursPerDay", "internalOnProjectRefresh", "source", "isCalculated", "relayStoreDataChange", "count", "isDestroying", "timeAxisColumn", "renderResourceHistogram", "timeAxisColumnCellCls", "col", "insertScaleColumn", "insertChild", "buildHistogramWidget", "_me$timeAxisColumn", "getBarTextRenderData", "histogramWidgetClass", "omitZeroHeightBars", "getBarTip", "getRectClass", "getRectClassDefault", "getBarText", "getBarTextDefault", "series", "histogramWidgetConfig", "showMaxEffort", "maxEffort", "rectConfig", "isOverallocated", "isUnderallocated", "effortFormatter", "format", "effortFormat", "formatter", "_effortFormatter", "_effortFormat", "NumberFormat", "_lastFormat", "getEffortText", "showEffortUnit", "_this$project3", "localizedUnit", "effortInUnits", "getBarTipEffortUnit", "barTipEffortUnit", "defaultUnit", "getGroupBarTip", "allocated", "available", "assignmentTpl", "dateFormat", "resultFormat", "assignmentsSuffix", "Day", "Second", "Hour", "assignmentsArray", "resourceAllocation", "key1", "value1", "key2", "value2", "groupBarTipAssignmentLimit", "replace", "StringHelper", "encodeHtml", "join", "getResourceBarTip", "getBarTextEffortUnit", "barTextEffortUnit", "showBarText", "updateShowBarText", "updateShowBarTip", "updateShowMaxEffort", "_showMaxEffort", "needsRefresh", "widget", "_seriesMaxEffort", "updateIncludeInactiveEvents", "allocationReport", "includeInactiveEvents", "onTimeAxisEndReconfigureInternal", "_lastTimeAxisUnit", "_lastTimeAxisIncrement", "graphReady", "onBeforeRowHeight", "_timeAxisColumn", "onElementResize", "totalSize", "getRecordAllocationInfoRenderData", "allocation", "isArray", "total", "renderRecordAllocationInfo", "histogramCloneElement", "renderRows", "timeView", "onRecordAllocationCalculated", "cell", "getCell", "columnId", "groupParent", "getResourceGroupParent", "scheduleGroupRender", "buildResourceAllocationReport", "resourceAllocationInfoClass", "registerRecordAllocationReport", "addEntity", "allocationObserver", "observe", "$", "addObserver", "_allocationReport", "renderScheduledGroups", "clearTimeout", "renderScheduledGroupTimer", "setTimeout", "fn", "delay", "cancelOutstanding", "calculateResourceGroupAllocation", "_allocationReports$", "_allocationReports$$a", "groupChildren", "allocationReports", "newAllocation", "newAllocationLength", "every", "allocationInfo", "combinedAllocation", "combined", "units", "isGroup", "_me$scaleColumn", "isCalculatingTopValue", "_groupScaleWidget", "updateLocalization", "sortFeatureStore", "createEventOnDblClick", "readOnly", "Histogram", "fixedRowHeight", "ResourceUtilizationModel", "Model", "_childrenIndex", "origin", "mapOriginValues", "fillChildren", "isResourceModel", "isAssignmentModel", "_origin$event", "_origin$event2", "_me$origin", "toRemove", "toAdd", "removeChild", "afterRemoveChild", "added", "_this$origin", "stores", "traverse", "node", "setModelByOrigin", "getChildByOrigin", "exposeProperties", "ResourceUtilizationStore", "AbstractPartOfProjectStoreMixin", "_modelByOrigin", "setResourceStore", "setAssignmentStore", "setEventStore", "fillStoreFromProject", "onResourceStoreDataChanged", "onEventUpdate", "onAssignmentsChange", "onAssignmentsRefresh", "onAssignmentsAdd", "onAssignmentUpdate", "onAssignmentsRemove", "isMove", "resourceWrapper", "getModelByOrigin", "assignmentWrapper", "newResourceWrapper", "_this$_project", "_project", "removeAll", "removed", "model", "ResourceUtilization", "buildStore", "allocationData", "registerAssignmentAllocationReport", "destroyStores", "_me$store", "byAssignments", "_record$origin", "_record$origin2", "assignCls", "_data$record", "_data$record2", "getBarTextRenderDataDefault", "assignmentIntervals", "getAssignmentBarTip", "_ResourceUtilization", "localeClass", "Tree", "SchedulerPro", "Timeline", "forceFit", "autoAdjust", "zoomOnMouseWheel", "zoomOnTimeAxisDoubleClick", "displayDateFormat", "fillFromTaskStore", "startDateLabel", "document", "endDateLabel", "initialCommitPerformed", "isInitialCommit", "ObjectHelper", "cellEdit", "cellMenu", "columnAutoWidth", "columnLines", "columnPicker", "columnReorder", "columnResize", "contextMenu", "eventContextMenu", "eventDragCreate", "eventEdit", "eventFilter", "eventMenu", "eventResize", "eventTooltip", "headerMenu", "regionResize", "scheduleContextMenu", "scheduleMenu", "scheduleTooltip", "timeAxisHeaderMenu", "timeRanges", "Store", "now", "refreshPreCommit", "onTaskStoreChange", "resize", "onSizeChanged", "oldWidth", "reFit", "updateRowHeight", "fitTimeline", "isConnected", "offsetHeight", "zoomToFit", "leftMargin", "rightMargin", "updateStartEndLabels", "getFormattedDate", "isCollapse", "needsFit", "task", "showInTimeline", "cloneTask", "timelineEvent", "clone", "render", "timelineTasks", "isScheduled", "onLocaleChange", "EMPTY_ARRAY", "actionTypeOrder", "entityTypeOrder", "TaskModel", "describePosition", "knownEntityTypes", "VersionGridRow", "GridRowModel", "VersionGrid", "TreeGrid", "_transactionChanges", "_versionChanges", "comparingRowCls", "_rowsByUnderlyingRecord", "WeakMap", "_expandedById", "merge", "refreshGrid", "updateDateFormat", "newDateFormat", "occurredAtColumn", "newProject", "_versionStore", "getCrudStore", "_transactionStore", "onVersionStoreChange", "onTransactionStoreChange", "updateShowNamedVersionsOnly", "updateShowUnattachedTransactions", "updateShowVersions", "updateComparingVersionId", "newVersionId", "oldVersionId", "oldHighlightedRow", "newHighlightedRow", "versionId", "processUpdates", "versions", "unique", "versionIds", "version", "String", "transactions", "concat", "txn", "transaction", "replaceRows", "showNamedVersionsOnly", "showUnattachedTransactions", "rowsToReplaceSet", "transactionsByVersionId", "versionsToShow", "newRows", "getGridRows", "sorters", "showVersions", "comparingVersionId", "transactionRows", "_me$_expandedById", "expanded", "description", "occurredAt", "transactionModel", "rootVersionModel", "actions", "_me$_expandedById2", "_action$propertyUpdat", "propertyUpdates", "propertyUpdate", "savedAt", "versionModel", "renderDescription", "renderPropertyUpdate", "renderActionDescription", "clsPrefix", "formatPropertyName", "renderPropertyValue", "side", "formatValueString", "isDate", "toFixed", "propertyName", "separate", "getAssignmentTextTokens", "assignmentChange", "getDependencyTextTokens", "dependencyChange", "fromTask", "to", "toTask", "actionType", "entityNames", "tokens", "_", "variable", "isUser", "renderHighlightedTextElements", "capitalize", "sortActionRows", "row1", "row2", "isUser1", "isUser2", "type1", "entityType1", "type2", "entityType2", "sign", "triggerRestore", "triggerCompare", "triggerStopCompare", "split", "reduce", "out", "chunk", "isEntity", "_VersionGrid", "ascending", "reapplySortersOnAdd", "flex", "continueEditingOnCellClick", "editNextOnEnterPress", "removeRow", "cut", "copy", "paste", "renameButton", "icon", "onItem", "startEditing", "restoreButton", "compareButton", "stopComparingButton", "rowCopyPaste", "rest", "autoHeight", "internalListeners", "beforeCellEditStart", "editorContext", "finishCellEdit", "trim", "cellMenuBeforeShow", "toggleNode", "collapse"]
}
