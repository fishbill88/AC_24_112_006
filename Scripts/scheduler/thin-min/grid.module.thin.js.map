{
  "version": 3,
  "sources": ["../../../Grid/lib/Grid/column/ActionColumn.js", "../../../Grid/lib/Grid/column/AggregateColumn.js", "../../../Grid/lib/Grid/column/PercentColumn.js", "../../../Grid/lib/Grid/column/RatingColumn.js", "../../../Grid/lib/Grid/column/TemplateColumn.js", "../../../Grid/lib/Grid/column/TimeColumn.js", "../../../Grid/lib/Grid/feature/CellCopyPaste.js", "../../../Grid/lib/Grid/feature/CellTooltip.js", "../../../Grid/lib/Grid/feature/ColumnRename.js", "../../../Grid/lib/Grid/feature/FillHandle.js", "../../../Grid/lib/Grid/feature/MergeCells.js", "../../../Grid/lib/Grid/feature/QuickFind.js", "../../../Grid/lib/Grid/feature/RowExpander.js", "../../../Grid/lib/Grid/feature/Search.js", "../../../Grid/lib/Grid/feature/StickyCells.js", "../../../Grid/lib/Grid/widget/TreeCombo.js", "../../../Grid/bundle/entry.thin.js"],
  "sourcesContent": ["import Column from './Column.js';\nimport ColumnStore from '../data/ColumnStore.js';\nimport DomHelper from '../../Core/helper/DomHelper.js';\nimport Tooltip from '../../Core/widget/Tooltip.js';\n\n/**\n * @module Grid/column/ActionColumn\n */\n\n/**\n * Config object for an action in an ActionColumn.\n * @typedef {Object} ActionConfig\n * @property {String} cls CSS Class for action icon\n * @property {Function|String|TooltipConfig} tooltip Tooltip text, or a config object which can reconfigure the shared\n * tooltip by setting boolean, numeric and string config values, or a function to return the tooltip text, passed the\n * row's `record`\n * @property {Function|Boolean} visible Boolean to define the action icon visibility or a callback function, passed the\n * row's `record`, to change it dynamically\n * @property {Function} onClick Callback to handle click action item event, passed the row's `record`\n * @property {Boolean} showForGroup Set to true to have action icon visible in group headers only when using the `group`\n * feature\n * @property {Function|String} renderer A render function, or the name of a function in the Grid's ownership tree used\n * to define the action element. Passed the row's `record`, expected to return an HTML string or a DOM config object.\n * **Note**: when specified, the `cls` action config is ignored. Make sure you add an action icon manually, for example:\n * ```javascript\n * {\n *      type    : 'action',\n *      text    : 'Increase amount',\n *      actions : [{\n *          cls      : 'b-fa b-fa-plus', // this line will be ignored\n *          renderer : ({ record }) => '<i class=\"b-action-item b-fa b-fa-plus\"></i> ' + record.name,\n *          onClick  : ({ record }) => {}\n *      }]\n * }\n * ```\n *\n * or\n *\n * ```javascript\n * {\n *      type    : 'action',\n *      text    : 'Increase amount',\n *      actions : [{\n *          cls      : 'b-fa b-fa-plus', // this line will be ignored\n *          renderer : 'up.renderAction' // Defined on the Grid\n *          onClick  : ({ record }) => {}\n *      }]\n * }\n * ```\n */\n\n/**\n * A column that displays actions as clickable icons in the cell.\n *\n * {@inlineexample Grid/column/ActionColumn.js}\n *\n * ```javascript\n * new TreeGrid({\n *     appendTo : document.body,\n *     columns  : [{\n *         type    : 'action',\n *         text    : 'Increase amount',\n *         actions : [{\n *             cls      : 'b-fa b-fa-plus',\n *             renderer : ({ action, record }) => `<i class=\"b-action-item ${action.cls} b-${record.enabled ? \"green\" : \"red\"}-class\"></i>`,\n *             visible  : ({ record }) => record.canAdd,\n *             tooltip  : ({ record }) => `<p class=\"b-nicer-than-default\">Add to ${record.name}</p>`,\n *             onClick  : ({ record }) => console.log(`Adding ${record.name}`)\n *         }, {\n *             cls     : 'b-fa b-fa-pencil',\n *             tooltip : 'Edit note',\n *             onClick : ({ record }) => console.log(`Editing ${record.name}`)\n *         }]\n *     }]\n * });\n * ```\n *\n * Actions may be placed in {@link Grid/feature/Group} headers, by setting `action.showForGroup` to `true`. Those\n * actions will not be shown on normal rows.\n *\n * @extends Grid/column/Column\n * @classType action\n * @column\n */\nexport default class ActionColumn extends Column {\n\n    static type = 'action';\n\n    static fields = [\n        /**\n         * An array of action config objects, see {@link #typedef-ActionConfig} for details.\n         *\n         * ```javascript\n         * new Grid({\n         *     columns  : [{\n         *         type    : 'action',\n         *         text    : 'Actions',\n         *         actions : [{\n         *             cls      : 'b-fa b-fa-plus',\n         *             visible  : ({ record }) => record.canAdd,\n         *             onClick  : ({ record }) => console.log(`Adding ${record.name}`)\n         *         }, {\n         *             cls     : 'b-fa b-fa-pencil',\n         *             tooltip : 'Edit note',\n         *             onClick : ({ record }) => console.log(`Editing ${record.name}`)\n         *         }]\n         *     }]\n         * });\n         * ```\n         *\n         * @config {ActionConfig[]} actions List of action configs\n         * @category Common\n         */\n        { name : 'actions', type : 'array' },\n\n        /**\n         * Set true to hide disable actions in this column if the grid is {@link Core.widget.Widget#config-readOnly}\n         * @config {Boolean} disableIfGridReadOnly\n         * @default\n         * @category Common\n         */\n        { name : 'disableIfGridReadOnly', defaultValue : false }\n    ];\n\n    static defaults = {\n        /**\n         * Filtering by action column is not supported by default, because it has a custom renderer and uses HTML with icons as content.\n         * @config {Boolean} filterable\n         * @default false\n         * @category Interaction\n         * @hide\n         */\n        filterable : false,\n\n        /**\n         * Grouping by action column is not supported by default, because it has a custom renderer and uses HTML with icons as content.\n         * @config {Boolean} groupable\n         * @default false\n         * @category Interaction\n         * @hide\n         */\n        groupable : false,\n\n        /**\n         * Sorting by action column is not supported by default, because it has a custom renderer and uses HTML with icons as content.\n         * @config {Boolean} sortable\n         * @default false\n         * @category Interaction\n         * @hide\n         */\n        sortable : false,\n\n        /**\n         * Editor for action column is not supported by default, because it has a custom renderer and uses HTML with icons as content.\n         * @config {Boolean} editor\n         * @default false\n         * @category Interaction\n         * @hide\n         */\n        editor : false,\n\n        /**\n         * Searching by action column is not supported by default, because it has a custom renderer and uses HTML with icons as content.\n         * @config {Boolean} searchable\n         * @default false\n         * @category Interaction\n         * @hide\n         */\n        searchable : false,\n\n        /**\n         * By default, for action column this flag is switched to `true`, because the content of this column is always HTML.\n         * @config {Boolean} htmlEncode\n         * @default false\n         * @category Misc\n         * @hide\n         */\n        htmlEncode : false,\n\n        /**\n         * Set to `true` to allow the column to being drag-resized when the ColumnResize plugin is enabled.\n         * @config {Boolean} resizable\n         * @default false\n         * @category Interaction\n         */\n        resizable : false,\n\n        /**\n         * Column minimal width. If value is Number then minimal width is in pixels.\n         * @config {Number|String} minWidth\n         * @default 30\n         * @category Layout\n         */\n        minWidth : 30\n    };\n\n    get groupHeaderReserved() {\n        return true;\n    }\n\n    construct(config, store) {\n        const me = this;\n\n        super.construct(...arguments);\n\n        // use auto-size only as default behaviour\n        if (!config.width && !config.flex) {\n            me.grid.ion({ paint : 'updateAutoWidth', thisObj : me });\n        }\n\n        if (me.disableIfGridReadOnly) {\n            me.grid.element.classList.add('b-actioncolumn-readonly');\n        }\n\n        me.externalRenderer = me.renderer;\n        me.renderer = me.internalRenderer;\n    }\n\n    /**\n     * Renderer that displays action icon(s) in the cell.\n     * @private\n     */\n    internalRenderer({ grid, column, record, callExternalRenderer = true }) {\n        const\n            inGroupTitle = record && ('groupRowFor' in record.meta),\n            { subGrid }  = column;\n\n        if (callExternalRenderer) {\n            this.externalRenderer?.(...arguments);\n        }\n\n        return {\n            className : { 'b-action-ct' : 1 },\n            children  : column.actions?.map((actionConfig, index) => {\n                if ('visible' in actionConfig) {\n                    if ((typeof actionConfig.visible === 'function') && actionConfig.visible({ record }) === false) {\n                        return '';\n                    }\n                    if (actionConfig.visible === false) {\n                        return '';\n                    }\n                }\n\n                // check if an action allowed to be shown in case of using grouping\n                if ((inGroupTitle && !actionConfig.showForGroup) || (!inGroupTitle && actionConfig.showForGroup)) {\n                    return '';\n                }\n\n                const\n                    {\n                        tooltip,\n                        renderer\n                    }    = actionConfig,\n                    btip = (typeof tooltip === 'function' || tooltip?.startsWith?.('up.')) ? subGrid.callback(tooltip, subGrid, [{ record }]) : tooltip || '';\n\n                // handle custom renderer if it is specified\n                if (renderer) {\n                    const customRendererData = subGrid.callback(renderer, subGrid, [{\n                        index,\n                        record,\n                        column,\n                        tooltip : btip,\n                        action  : actionConfig\n                    }]);\n\n                    // take of set data-index to make onClick handler work stable\n                    if (typeof customRendererData === 'string') {\n                        return {\n                            tag     : 'span',\n                            dataset : {\n                                ...Tooltip.encodeConfig(btip),\n                                index\n                            },\n                            html : customRendererData\n                        };\n                    }\n                    else {\n                        customRendererData.dataset = customRendererData.dataset || {};\n                        customRendererData.dataset.index = index;\n                        return customRendererData;\n                    }\n                }\n                else {\n                    return {\n                        tag     : 'button',\n                        dataset : {\n                            ...Tooltip.encodeConfig(btip),\n                            index\n                        },\n                        'aria-label' : btip,\n                        className    : {\n                            'b-tool'           : 1,\n                            'b-action-item'    : 1,\n                            [actionConfig.cls] : actionConfig.cls\n                        }\n                    };\n                }\n            })\n        };\n    }\n\n    /**\n     * Handle icon click and call action handler.\n     * @private\n     */\n    onCellClick({ grid, column, record, target }) {\n        if (column !== this || !target.classList.contains('b-action-item')) {\n            return;\n        }\n\n        let actionIndex = target.dataset.index;\n        // index may be set in a parent node if user used an html string in his custom renderer\n        // and we take care to set this property to support onClick handler\n        if (!actionIndex) {\n            actionIndex = target.parentElement.dataset && target.parentElement.dataset.index;\n        }\n\n        const\n            action        = column.actions?.[actionIndex],\n            actionHandler = action && action.onClick;\n\n        if (actionHandler) {\n            this.callback(actionHandler, column, [{ record, action, target }]);\n        }\n    }\n\n    /**\n     * Update width for actions column to fit content.\n     * @private\n     */\n    updateAutoWidth() {\n        const\n            me           = this,\n            groupActions = [],\n            {\n                actions : oldActions\n            }            = me;\n\n        // header may be disabled, in that case we won't be able to calculate the width properly\n        if (!me.element) {\n            return;\n        }\n\n        const actions = me.actions = [];\n\n        // collect group and non group actions to check length later\n        oldActions?.forEach(actionOriginal => {\n            const action = { ...actionOriginal };\n\n            // remove possible visibility condition to make sure an action will exists in test HTML\n            delete action.visible;\n            // group actions shows in different row and never together with non group\n            if (action.showForGroup) {\n                delete action.showForGroup;\n                groupActions.push(action);\n            }\n            else {\n                actions.push(action);\n            }\n        });\n\n        // use longest actions length to calculate column width\n        if (groupActions.length > actions.length) {\n            me._actions = groupActions;\n        }\n\n        const actionsHtml = DomHelper.createElement(me.internalRenderer({ column : me, callExternalRenderer : false })).outerHTML;\n\n        me.width = DomHelper.measureText(actionsHtml, me.element, true, me.element.parentElement);\n        me.actions = oldActions;\n    }\n}\n\nColumnStore.registerColumnType(ActionColumn);\nActionColumn.exposeProperties();\n", "import ColumnStore from '../data/ColumnStore.js';\nimport NumberColumn from './NumberColumn.js';\n\n/**\n * @module Grid/column/AggregateColumn\n */\n\n/**\n * A column, which, when used as part of a {@link Grid.view.TreeGrid}, aggregates the values of this column's descendants using\n * a configured function which defaults to `sum`. The aggregate value is re-calculated after any change to the data,\n * and if you want aggregate values to be change-tracked, please set {@link #config-includeParentInChangeSet} to true.\n *\n * Default editor depends on the data field type. If it is a number, default editor is a {@link Core/widget/NumberField}.\n * Otherwise Default editor is a {@link Core/widget/TextField}.\n *\n * ```javascript\n * const grid = new TreeGrid({\n *     // Custom aggregation handler.\n *     // For test purposes, this just does \"sum\"\n *     myAggregator(...values) {\n *         let result = 0;\n *\n *         for (let i = 0, { length } = values; i < length; i++) {\n *             result += parseInt(args[i], 10);\n *         }\n *         return result;\n *     },\n *     columns : [\n *         { field : 'name', text : 'Name' },\n *\n *         // Will sum the ages of leaf nodes. This is the default.\n *         { type : 'aggregate', field : 'age', text : 'Age', renderer : ({ value }) => `<b>${value}<b>` },\n *\n *         // Will use AggregateColumn's built-in avg of scores of leaf nodes\n *         { type : 'aggregate', field : 'score', text : 'Score', function : 'avg' },\n *\n *         // Will use the grid's myAggregator function\n *         { type : 'aggregate', field : 'revenue', text : 'Revenue', function : 'up.myAggregator' },\n *     ]\n * });\n * ```\n *\n * @extends Grid/column/NumberColumn\n * @classType aggregate\n * @column\n */\nexport default class AggregateColumn extends NumberColumn {\n    //region Config\n\n    static type = 'aggregate';\n\n    static fields = [\n        'function',\n        'includeParentInChangeSet'\n    ];\n\n    static get defaults() {\n        return {\n            /**\n             * Math Function name, or function name prepended by `\"up.\"` that is resolvable in an\n             * ancestor component (such as the owning Grid, or a hight Container), or a function to\n             * use to aggregate child record values for this column, or a function.\n             *\n             * This Column is provided with a `sum` and `avg` function. The default function is `sum`\n             * which is used for the aggregation.\n             *\n             * The function is passed a set of child node values, each value in a separate argument\n             * and should return a single value based upon the value set passed.\n             * @config {Function|String}\n             * @category Common\n             */\n            function : 'sum',\n\n            /**\n             * Set to `true` to include changes to parent (aggregate) rows in the store's modification tracking.\n             * @config {Boolean} includeParentInChangeSet\n             * @category Common\n             */\n            includeParentInChangeSet : false\n        };\n    }\n\n    construct(data, columnStore) {\n        this.configuredAlign = 'align' in data;\n        this.configuredEditor = 'editor' in data;\n\n        super.construct(...arguments);\n\n        const { grid } = columnStore;\n\n        // 'sum' is reserved by Summary feature, so we use a different name\n        if (this.function === 'sum') {\n            this.function = 'sumChildren';\n        }\n\n        if (grid) {\n            this.store = grid.store;\n        }\n    }\n\n    set store(store) {\n        const\n            me             = this,\n            storeListeners = {\n                update  : 'onRecordUpdate',\n                thisObj : me,\n                prio    : 1000\n            },\n            oldStore = me._store;\n\n        if (store !== oldStore) {\n            if (oldStore) {\n                oldStore.un(storeListeners);\n            }\n\n            me._store = store;\n\n            const\n                { modelClass } = store,\n                field = modelClass.fieldMap[me.field];\n\n            // It's *likely*, but not certain that this will be used for a numeric field.\n            // Use numeric defaults unless configured otherwise if so.\n            if (field && field.type === 'number') {\n                if (!me.configuredAlign) {\n                    me.align = 'end';\n                }\n                if (!me.configuredEditor) {\n                    me.editor = 'number';\n                }\n            }\n\n            store.ion(storeListeners);\n        }\n    }\n\n    canEdit(record) {\n        return record.isLeaf;\n    }\n\n    get store() {\n        return this._store;\n    }\n\n    sumChildren(...args) {\n        let result = 0;\n\n        for (let i = 0, { length } = args; i < length; i++) {\n            result += parseFloat(args[i] || 0, 10);\n        }\n        return result;\n    }\n\n    avg(...args) {\n        let result = 0;\n        const { length } = args;\n\n        for (let i = 0; i < length; i++) {\n            result += parseFloat(args[i] || 0, 10);\n        }\n        return result / length;\n    }\n\n    onRecordUpdate({ record, changes }) {\n        const\n            me = this,\n            { rowManager } = me.grid;\n\n        if (me.field in changes) {\n            if (record.isLeaf) {\n                record.bubble(rec => {\n                    const row = rowManager.getRowFor(rec);\n\n                    if (row) {\n                        const cellElement = row.getCell(me.field);\n\n                        if (cellElement) {\n                            row.renderCell(cellElement);\n                        }\n                    }\n                }, true);\n            }\n        }\n    }\n\n    getRawValue(record) {\n        let value = 0;\n\n        if (record.children?.length) {\n            const\n                me       = this,\n                fn       = me.function,\n                isMathFn = typeof fn === 'string' && typeof Math[fn] === 'function',\n                {\n                    handler,\n                    thisObj\n                } = isMathFn ? {\n                    handler : Math[fn],\n                    thisObj : Math\n                } : me.resolveCallback(fn);\n\n            // Gather all child node values before passing them to the aggregator function.\n            value = handler.apply(thisObj, record.children.map(r => me.getRawValue(r)));\n            if (me.includeParentInChangeSet) {\n                record.set(me.field, value, true);\n            }\n            else {\n                record.setData(me.field, value);\n            }\n        }\n        else {\n            value = record[this.field];\n        }\n        return value;\n    }\n\n    canFillValue() {\n        return false;\n    }\n}\n\nColumnStore.registerColumnType(AggregateColumn, true);\nAggregateColumn.exposeProperties();\n", "import NumberColumn from './NumberColumn.js';\nimport ColumnStore from '../data/ColumnStore.js';\n\n/**\n * @module Grid/column/PercentColumn\n */\n\n/**\n * A column that display a basic progress bar.\n *\n * {@inlineexample Grid/column/PercentColumn.js}\n *\n * ```javascript\n * new Grid({\n *     appendTo : document.body,\n *\n *     columns : [\n *         { type: 'percent', text: 'Progress', data: 'progress' }\n *     ]\n * });\n * ```\n *\n * Default editor is a {@link Core.widget.NumberField NumberField}.\n *\n * @extends Grid/column/NumberColumn\n * @classType percent\n * @column\n */\nexport default class PercentColumn extends NumberColumn {\n\n    static type = 'percent';\n\n    // Type to use when auto adding field\n    static fieldType = 'number';\n\n    static fields = ['showValue', 'lowThreshold'];\n\n    static get defaults() {\n        return {\n            min : 0,\n            max : 100,\n\n            /**\n             * Set to `true` to render the number value inside the bar, for example \"15%\"\n             * @config {Boolean}\n             * @default\n             * @category Rendering\n             */\n            showValue : false,\n\n            /**\n             * When below this percentage the bar will have `b-low` CSS class added. By default it turns the bar red.\n             * @config {Number}\n             * @default\n             * @category Rendering\n             */\n            lowThreshold : 20,\n\n            htmlEncode      : false,\n            searchable      : false,\n            summaryRenderer : sum => `${sum}%`,\n            fitMode         : false\n        };\n    }\n\n    constructor(config, store) {\n        super(...arguments);\n\n        this.internalCellCls = 'b-percent-bar-cell';\n    }\n\n    /**\n     * Renderer that displays a progress bar in the cell. If you create a custom renderer, and want to include the\n     * default markup you can call `defaultRenderer` from it.\n     *\n     * ```javascript\n     * new Grid({\n     *     columns: [\n     *         {\n     *             type: 'percent',\n     *             text : 'Percent',\n     *             field : 'percent',\n     *             renderer({ value }) {\n     *                 const domConfig = this.defaultRenderer();\n     *\n     *                 if (value > 100) {\n     *                     domConfig.className = b-percent-bar-outer over-allocated';\n     *                 }\n     *\n     *                 return domConfig;\n     *             }\n     *         }\n     *     ]\n     * }\n     * ```\n     *\n     * @param {Object} rendererData The data object passed to the renderer\n     * @param {Number} rendererData.value The value to display\n     * @returns {DomConfig} DomConfig object representing the default markup for the cells content\n     */\n    defaultRenderer({ value }) {\n        value = value || 0;\n\n        return {\n            className       : 'b-percent-bar-outer',\n            role            : 'progressbar',\n            'aria-Valuemin' : 0,\n            'aria-Valuemax' : 100,\n            'aria-Valuenow' : value,\n            tabIndex        : 0,\n            children        : [\n                {\n                    tag       : 'div',\n                    className : {\n                        'b-percent-bar' : 1,\n                        'b-zero'        : value === 0,\n                        'b-low'         : value < this.lowThreshold\n                    },\n                    style : {\n                        width : value + '%'\n                    },\n                    children : [\n                        this.showValue ? {\n                            tag  : 'span',\n                            text : value + '%'\n                        } : undefined\n                    ]\n                }\n            ]\n        };\n    }\n\n    // Null implementation because the column width drives the width of its content.\n    // So the concept of sizing to content is invalid here.\n    resizeToFitContent() {}\n}\n\nPercentColumn.sum = 'average';\n\nColumnStore.registerColumnType(PercentColumn, true);\n", "import NumberColumn from './NumberColumn.js';\nimport ColumnStore from '../data/ColumnStore.js';\nimport ArrayHelper from '../../Core/helper/ArrayHelper.js';\n\n/**\n * @module Grid/column/RatingColumn\n */\n\n/**\n * A column that displays a star rating. Click a start to set a value, shift+click to unset a single start from the end.\n * Clicking the first and only star toggles it.\n *\n * This column uses a custom widget as its editor, and it is not intended to be changed.\n *\n * @extends Grid/column/NumberColumn\n *\n * @example\n * new Grid({\n *     appendTo : document.body,\n *\n *     columns : [\n *         { type: 'rating', max : 10, field: 'rating' }\n *     ]\n * });\n *\n * @classType rating\n * @inlineexample Grid/column/RatingColumn.js\n * @column\n */\nexport default class RatingColumn extends NumberColumn {\n\n    // <debug>\n    // region Localization test\n    static localization = [\n        'L{Column.cellLabel}'\n    ];\n    // endregion\n    // </debug>\n\n    static $name = 'RatingColumn';\n\n    static type = 'rating';\n\n    // Type to use when auto adding field\n    static fieldType = 'number';\n\n    static fields = ['emptyIcon', 'filledIcon', 'editable'];\n\n    static get defaults() {\n        return {\n            min : 0,\n            max : 5,\n\n            /**\n             * The empty rating icon to show\n             * @config {String}\n             * @category Rendering\n             */\n            emptyIcon : 'b-icon b-icon-star',\n\n            /**\n             * The filled rating icon to show\n             * @config {String}\n             * @category Rendering\n             */\n            filledIcon : 'b-icon b-icon-star',\n\n            /**\n             * Allow user to click an icon to change the value\n             * @config {Boolean}\n             * @category Interaction\n             */\n            editable : true,\n\n            filterType : 'number',\n            searchable : false,\n            width      : '11.2em',\n            htmlEncode : false,\n            minWidth   : '11.2em',\n            editor     : false,\n            fitMode    : 'value'\n        };\n    }\n\n    /**\n     * Renderer that displays a number of stars in the cell. Also adds CSS class 'b-rating-cell' to the cell.\n     * @private\n     */\n    renderer({ value }) {\n        return {\n            className : {\n                'b-rating-cell-inner' : 1,\n                'b-not-editable'      : !this.editable\n            },\n            children : ArrayHelper.populate(this.max, i => {\n                const filled = i < value;\n                return {\n                    tag       : 'i',\n                    className : {\n                        'b-rating-icon'                             : true,\n                        'b-filled'                                  : filled,\n                        'b-empty'                                   : !filled,\n                        [filled ? this.filledIcon : this.emptyIcon] : true\n                    }\n                };\n            })\n        };\n    }\n\n    onCellClick({ grid, column, record, target, event }) {\n        if (target.classList.contains('b-rating-icon') && !grid.readOnly && column.editable) {\n            let starIndex = [].indexOf.call(target.parentNode.childNodes, target);\n\n            if (target.classList.contains('b-filled') && (event.metaKey || event.shiftKey)) {\n                starIndex = starIndex - 1;\n            }\n\n            // Clicking first star when it is only one removes it\n            if (record.get(column.field) === 1 && starIndex === 0) {\n                starIndex = -1;\n            }\n\n            record.set(column.field, starIndex + 1);\n        }\n    }\n}\n\nColumnStore.registerColumnType(RatingColumn, true);\nRatingColumn.exposeProperties();\n", "import Column from './Column.js';\nimport ColumnStore from '../data/ColumnStore.js';\n\n/**\n * @module Grid/column/TemplateColumn\n */\n\n/**\n * A column that uses a template for cell content. Any function can be used as template, and the function is passed { value, record, field } properties.\n * It should return a string which will be rendered in the cell.\n *\n * Default editor is a {@link Core.widget.TextField TextField}.\n *\n * @extends Grid/column/Column\n *\n * @example\n * new Grid({\n *     appendTo : document.body,\n *\n *     columns : [\n *         { type: 'template', field: 'age', template: ({value}) => `${value} years old` }\n *     ]\n * });\n *\n * @classType template\n * @inlineexample Grid/column/TemplateColumn.js\n * @column\n */\nexport default class TemplateColumn extends Column {\n\n    static type = 'template';\n\n    static fields = [\n        /**\n         * Template function used to generate a value displayed in the cell. Called with arguments `{ value, record, field }`\n         * @config {Function} template\n         * @param {Object} data An object that contains data about the cell being rendered.\n         * @param {*} data.value The value (only present when you set a `field` on the column)\n         * @param {Core.data.Model} data.record The record representing the row\n         * @param {String} data.field The column field name\n         * @category Common\n         */\n        'template'\n    ];\n\n    static get defaults() {\n        return {\n            htmlEncode : false\n        };\n    }\n\n    constructor(config, store) {\n        super(...arguments);\n\n        const me = this;\n\n        if (!me.template) {\n            throw new Error('TemplateColumn needs a template');\n        }\n\n        if (typeof me.template !== 'function') {\n            throw new Error('TemplateColumn.template must be a function');\n        }\n    }\n\n    /**\n     * Renderer that uses a template for cell content.\n     * @private\n     */\n    renderer(renderData) {\n        // If it's a special row, such as a group row, we can't use the user's template\n        if (!renderData.record.isSpecialRow) {\n            return this.template({\n                value  : renderData.value,\n                record : renderData.record,\n                field  : renderData.column.field\n            });\n        }\n    }\n}\n\nColumnStore.registerColumnType(TemplateColumn, true);\nTemplateColumn.exposeProperties();\n", "import Column from './Column.js';\nimport ColumnStore from '../data/ColumnStore.js';\nimport DateHelper from '../../Core/helper/DateHelper.js';\n\n/**\n * @module Grid/column/TimeColumn\n */\n\n/**\n * A column that displays a time in the specified format (see {@link Core.helper.DateHelper#function-format-static} for formatting options).\n *\n * Default editor is a {@link Core.widget.TimeField TimeField}.\n *\n * @extends Grid/column/Column\n *\n * @example\n * new Grid({\n *     appendTo : document.body,\n *\n *     columns : [\n *          { type: 'time', text: 'Start time', format: 'HH:mm:ss', data: 'start' }\n *     ]\n * });\n *\n * @classType time\n * @inlineexample Grid/column/TimeColumn.js\n * @column\n */\nexport default class TimeColumn extends Column {\n\n    //region Config\n\n    static type = 'time';\n\n    // Type to use when auto adding field\n    static fieldType = 'date';\n\n    static fields = ['format'];\n\n    static get defaults() {\n        return {\n            /**\n             * Time format\n             * @config {String}\n             * @category Common\n             */\n            format : 'LT',\n\n            minWidth : 140,\n\n            filterType : 'time'\n        };\n    }\n\n    //endregion\n\n    //region Display\n\n    /**\n     * Renderer that displays the time with the specified format. Also adds cls 'b-time-cell' to the cell.\n     * @private\n     */\n    defaultRenderer({ value }) {\n        return value ? this.formatValue(value) : '';\n    }\n\n    /**\n     * Group renderer that displays the time with the specified format.\n     * @private\n     */\n    groupRenderer({ cellElement, groupRowFor }) {\n        cellElement.innerHTML = this.formatValue(groupRowFor);\n    }\n\n    //endregion\n\n    //region Formatter\n\n    /**\n     * Used by both renderer and groupRenderer to do the actual formatting of the time\n     * @private\n     * @param value\n     * @returns {String}\n     */\n    formatValue(value) {\n        // Ideally we should be served a time, but if not make it easier for the user by parsing\n        if (typeof value === 'string') {\n            value = DateHelper.parse(value, this.format);\n        }\n        return DateHelper.format(value, this.format);\n    }\n\n    //endregion\n\n    //region Getters/Setters\n    /**\n     * Get/Set format for time displayed in cell and editor (see {@link Core.helper.DateHelper#function-format-static} for formatting options)\n     * @property {String}\n     */\n    set format(value) {\n        const { editor } = this;\n\n        this.set('format', value);\n\n        if (editor) {\n            editor.format = value;\n        }\n    }\n\n    get format() {\n        return  this.get('format');\n    }\n\n    get defaultEditor() {\n        return {\n            name   : this.field,\n            type   : 'time',\n            format : this.format\n        };\n    }\n\n    //endregion\n}\n\nColumnStore.registerColumnType(TimeColumn, true);\nTimeColumn.exposeProperties();\n", "import InstancePlugin from '../../Core/mixin/InstancePlugin.js';\nimport BrowserHelper from '../../Core/helper/BrowserHelper.js';\nimport VersionHelper from '../../Core/helper/VersionHelper.js';\nimport GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\n\n/**\n * @module Grid/feature/CellCopyPaste\n */\n\n/**\n * Allows using `[Ctrl/CMD + C]`, `[Ctrl/CMD + X]` and `[Ctrl/CMD + V]` to cut, copy and paste cell or cell ranges. Also\n * makes cut, copy and paste actions available via the cell context menu.\n *\n * <div class=\"note\">\n * Requires {@link Grid/view/Grid#config-selectionMode selectionMode.cell} to be activated. Also, if the\n * {@link Grid/feature/CellEdit} feature is disabled, the {@link #config-copyOnly} config will default to `true` which\n * prevents cut and paste actions completely. Set {@link #config-copyOnly} to `false` to prevent this behaviour.\n * </div>\n *\n * This feature will work alongside with {@link Grid/feature/RowCopyPaste} but there is differences on functionality.\n * * When used together, context menu options will be detailed so the user will know to copy the cell or the row.\n * * They will also detect what type of selection is present at the moment. If there are only rows selected, only row\n *   alternatives are shown in the context menu and the keyboard shortcuts will be processed by RowCopyPaste.\n * * If there are only cells selected, there will be context menu options for both row and cell but keyboard shortcuts\n *   will be handled by CellCopyPaste.\n * * They do not share clipboard, so it is possible to have rows and cells copied or cut at the same time.\n *\n * If the {@link https://developer.mozilla.org/en-US/docs/Web/API/Clipboard_API Clipboard API} is available, that will\n * be used. This enables copying and pasting between different Bryntum products or completely different applications.\n * Please note that only string values are supported.\n *\n * This feature is **disabled** by default\n *\n * ```javascript\n * const grid = new Grid({\n *     features : {\n *         cellCopyPaste : true\n *     }\n * });\n * ```\n *\n * {@inlineexample Grid/feature/CellCopyPaste.js}\n *\n * ## Keyboard shortcuts\n * The feature has the following default keyboard shortcuts:\n *\n * | Keys       | Action  | Action description                                                                      |\n * |------------|---------|-----------------------------------------------------------------------------------------|\n * | `Ctrl`+`C` | *copy*  | Calls {@link #function-copy} which copies selected cell values into the clipboard.      |\n * | `Ctrl`+`X` | *cut*   | Calls {@link #function-cut} which cuts out selected cell values and saves in clipboard. |\n * | `Ctrl`+`V` | *paste* | Calls {@link #function-paste} which inserts string values from the clipboard.           |\n *\n * <div class=\"note\">Please note that <code>Ctrl</code> is the equivalent to <code>Command</code> and <code>Alt</code>\n * is the equivalent to <code>Option</code> for Mac users</div>\n *\n * For more information on how to customize keyboard shortcuts, please see\n * [this guide](#Grid/guides/customization/keymap.md).\n *\n * @extends Core/mixin/InstancePlugin\n * @classtype cellCopyPaste\n * @feature\n */\nexport default class CellCopyPaste extends InstancePlugin {\n    static $name = 'CellCopyPaste';\n\n    static pluginConfig = {\n        chain : [\n            'populateCellMenu', 'afterSelectionModeChange'\n        ]\n    };\n\n    static configurable = {\n\n        /**\n         * If `true` this prevents cutting and pasting. Will default to `true` if {@link Grid/feature/CellEdit} feature is disabled.\n         * Set to `false` to prevent this behaviour.\n         * @config {Boolean}\n         */\n        copyOnly : null,\n\n        /**\n         * If an empty value (null or empty string) is copied or cut, this config will replace that value.\n         * This allows for clipboard data to skip columns.\n         *\n         * For example, look at these two selections\n         * |  ROW  |   0  |      1       |       2      |   3  |\n         * |-------|------|--------------|--------------|------|\n         * | ROW 1 | SEL1 | not selected | not selected | SEL2 |\n         * | ROW 2 | SEL3 | SEL4 (empty) | SEL5 (empty) | SEL6 |\n         *\n         * The clipboardData for `ROW 1` will look like this:\n         `* SEL1\\t\\t\\SEl2\\nSEL3\\t\\t\\SEL4`\n         *\n         * And `ROW 2` will look like this:\n         * `SEL3\\t\\u{0020}\\t\\u{0020}\\tSEL6`\n         *\n         * `ROW 1` will set value `SEL1` at column index 0 and `SEL2` at column index 3. This leaves column index 1 and\n         * 2 untouched.\n         *\n         * `ROW 2` will set value `SEL3` at column index 0, `u{0020}` at column index 1 and 2, and `SEL`6 at column\n         * index 3.\n         *\n         * The default `u{0020}` is a blank space.\n         *\n         * @config {String}\n         * @default\n         */\n        emptyValueChar : '\\u{0020}',\n\n        /**\n         * See {@link #keyboard-shortcuts Keyboard shortcuts} for details\n         * @config {Object<String,String>}\n         */\n        keyMap : {\n            'Ctrl+C' : 'copy',\n            'Ctrl+X' : 'cut',\n            'Ctrl+V' : 'paste'\n        },\n\n        /**\n         * Set this to `false` to not use native Clipboard API even if it is available\n         * @config {Boolean}\n         * @default true\n         */\n        useNativeClipboard : !VersionHelper.isTestEnv,\n\n        /**\n         * Provide a function to be able to customize the string value which is copied.\n         *\n         * ````javascript\n         * new Grid({\n         *     features : {\n         *         cellCopyPaste : {\n         *             toCopyString({currentValue, column, record}) {\n         *                 if(record.isAvatar){\n         *                     return record.fullName;\n         *                 }\n         *                 return currentValue;\n         *             }\n         *         }\n         *     }\n         * });\n         * ````\n         *\n         * @param {Object} data\n         * @param {String} data.currentValue\n         * @param {Grid.column.Column} data.column\n         * @param {Core.data.Model} data.record\n         * @config {Function}\n         */\n        toCopyString : null,\n\n        /**\n         * Provide a function to be able to customize the value which will be set onto the record\n         *\n         * ````javascript\n         * new Grid({\n         *     features : {\n         *         cellCopyPaste : {\n         *             toPasteValue({currentValue, column, record, field}) {\n         *                 if(typeof currentValue === 'string'){\n         *                     return currentValue.replace('$', '');\n         *                 }\n         *                 return currentValue;\n         *             }\n         *         }\n         *     }\n         * });\n         * ````\n         *\n         * @param {Object} data\n         * @param {String} data.currentValue\n         * @param {Grid.column.Column} data.column\n         * @param {Core.data.Model} data.record\n         * @config {Function}\n         */\n        toPasteValue : null,\n\n        copyText  : 'L{copy}',\n        cutText   : 'L{cut}',\n        pasteText : 'L{paste}'\n    };\n\n    afterConstruct() {\n        super.afterConstruct();\n        this.afterSelectionModeChange();\n    }\n\n    afterSelectionModeChange() {\n        const me = this;\n\n        if (!me.client.selectionMode.cell) {\n            me.disabled = true;\n        }\n        else if (me._disabledBySelectionMode) {\n            me.disabled = false;\n            delete me._disabledBySelectionMode;\n        }\n    }\n\n    // Used in events to separate events from different features from each other\n    entityName = 'cell';\n\n    get copyOnly() {\n        // If celledit is disabled, cut and paste actions are disabled by default\n        if (this._copyOnly == null) {\n            return !this.client.features.cellEdit?.enabled;\n        }\n\n        return Boolean(this._copyOnly);\n    }\n\n    get canCopy() {\n        const { client } = this;\n\n        return Boolean(!this.disabled && client.selectedCells.length &&\n            (\n                !client._selectedRows.length ||\n                client.features.rowCopyPaste?.disabled ||\n                client.focusedCell && client.isCellSelected(client.focusedCell)\n            ));\n    }\n\n    get canCutPaste() {\n        return this.canCopy && !this.copyOnly && !this.client.features.cellEdit?.isEditing && !this.client.readOnly;\n    }\n\n    // Called from keyMap. Also used internally here\n    isActionAvailable({ actionName }) {\n        return this.canCopy && (actionName === 'copy' || this.canCutPaste);\n    }\n\n    // Takes cell locations and converts them to tab and new-line separated string values.\n    // Then stores them in native clipboard or the internal clipboard\n    async sendToClipboard(cells) {\n        const\n            me           = this;\n        let lastRowIndex = 0,\n            lastColIndex = 0,\n            stringData   = '';\n\n        // Sorted by rowIndex then by columnIndex\n        cells.sort((c1, c2) => c1.rowIndex === c2.rowIndex ? c1.columnIndex - c2.columnIndex : c1.rowIndex - c2.rowIndex);\n\n        for (const cell of cells) {\n            const { record, column, rowIndex, columnIndex } = cell;\n\n            // Separate with \\n if new row\n            if (rowIndex > lastRowIndex) {\n                if (stringData.length > 0) {\n                    stringData += '\\n'.repeat(rowIndex - lastRowIndex);\n                }\n                lastRowIndex = rowIndex;\n                lastColIndex = columnIndex;\n            }\n            // Separate with \\t if new column\n            else if (columnIndex > lastColIndex) {\n                if (stringData.length > 0) {\n                    stringData += '\\t'.repeat(columnIndex - lastColIndex);\n                }\n                lastColIndex = columnIndex;\n            }\n\n            // The column can provide its own toClipboardString\n            let cellValue = column.toClipboardString?.(cell);\n\n            // Or we use the raw value from the record\n            if (cellValue === undefined) {\n                cellValue = record.get(column.field)?.toString();\n            }\n\n            // The client can provide its own as well.\n            if (me.toCopyString) {\n                cellValue = me.toCopyString({ currentValue : cellValue, column, record });\n            }\n\n            cellValue = cellValue?.replace(/[\\n\\t]/, ' ');\n\n            stringData += cellValue || me.emptyValueChar;\n        }\n\n        await BrowserHelper.writeToClipboard(stringData, this.useNativeClipboard);\n\n        return stringData;\n    }\n\n    /**\n     * Cuts selected cells to clipboard (native if accessible) to paste later\n     * @async\n     */\n    async cut() {\n        await this.copy(true);\n    }\n\n    /**\n     * Copies selected cells to clipboard (native if accessible) to paste later\n     * @async\n     */\n    async copy(cut) {\n        const\n            me    = this,\n            {\n                client,\n                entityName\n            }     = me,\n            isCut = typeof cut === 'boolean' ? cut : false, // If called by keymap, arguments[0] will be an event\n            cells = isCut ? client.selectedCells.filter(r => !r.record?.readOnly) : client.selectedCells;\n\n        if (cells) {\n\n            /**\n             * Fires on the owning Grid before a copy action is performed, return `false` to prevent the action\n             * @event beforeCopy\n             * @preventable\n             * @on-owner\n             * @param {Grid.view.Grid} source Owner grid\n             * @param {Grid.util.Location[]} cells The cells about to be copied or cut\n             * @param {Boolean} isCut `true` if this is a cut action\n             * @param {String} entityName 'cell' to distinguish this event from other beforeCopy events\n             */\n            if ((isCut ? !me.canCutPaste : !me.canCopy) ||\n                client.trigger('beforeCopy', { cells, isCut, entityName }) === false\n            ) {\n                return;\n            }\n\n            const copiedDataString = await me.sendToClipboard(cells);\n\n            if (isCut === true) {\n                for (const cell of cells) {\n                    if (!cell.column.readOnly) {\n                        cell.record.set(cell.column.field, null);\n                    }\n                }\n            }\n\n            /**\n             * Fires on the owning Grid after a copy action is performed.\n             * @event copy\n             * @on-owner\n             * @param {Grid.view.Grid} source Owner grid\n             * @param {Grid.util.Location[]} cells The cells about to be copied or cut\n             * @param {String} copiedDataString The concatenated data string that was copied or cut\n             * @param {Boolean} isCut `true` if this was a cut action\n             * @param {String} entityName 'cell' to distinguish this event from other copy events\n             */\n            client.trigger('copy', { cells, copiedDataString, isCut, entityName });\n\n        }\n    }\n\n    /**\n     * Pastes string data into a cell or a range of cells. Either from native clipboard if that is accessible or from a\n     * fallback clipboard that is only available to the owner Grid.\n     *\n     * The string data will be split on `\\n` and `\\t` and put in different rows and columns accordingly.\n     *\n     * Note that there must be a selected cell to paste the data into.\n     * @async\n     */\n    async paste() {\n        const\n            me            = this,\n            {\n                client,\n                entityName\n            }             = me,\n            clipboardData = await BrowserHelper.readFromClipboard(me.useNativeClipboard),\n            targetCell    = client.selectedCells[0];\n\n        /**\n         * Fires on the owning Grid before a paste action is performed, return `false` to prevent the action\n         * @event beforePaste\n         * @preventable\n         * @on-owner\n         * @param {Grid.view.Grid} source Owner grid\n         * @param {String} clipboardData The clipboardData about to be pasted\n         * @param {Grid.util.Location} targetCell The cell from which the paste will be started\n         * @param {String} entityName 'cell' to distinguish this event from other beforePaste events\n         */\n        if (\n            !me.canCutPaste ||\n            !clipboardData?.length ||\n            !targetCell ||\n            client.trigger('beforePaste', { clipboardData, targetCell, entityName }) === false\n        ) {\n            return;\n        }\n\n        const\n            modifiedRecords       = new Set(),\n            // Converts the clipboard data into a 2-dimensional array of string values.\n            rows                  = me.stringAs2dArray(clipboardData),\n            targetCells           = [],\n            { _shiftSelectRange } = client;\n\n        // No valid clipboard data, break\n        if (!rows?.length) {\n            return;\n        }\n\n        // If there is a selected range, pasting should be repeated into that range\n        if (_shiftSelectRange?.some(cell => cell.equals(targetCell))) {\n            const cellRows = me.cellSelectorsAs2dArray(_shiftSelectRange);\n\n            // The selection must fit the whole paste content. If pasting 2 rows for example, a number of rows that is\n            // divisible by 2 is required. Same for columns.\n            if (cellRows?.length % rows.length === 0 && cellRows.columnCount % rows.columnCount === 0) {\n                // This code will calculate each cell target to repeat the pasting on\n                for (let curI = 0; curI < cellRows.length; curI += rows.length) {\n                    for (let curX = 0; curX < cellRows.columnCount; curX += rows.columnCount) {\n                        targetCells.push(cellRows[curI][curX]);\n                    }\n                }\n            }\n        }\n\n        // No valid range, just use one target\n        if (!targetCells.length) {\n            targetCells.push(targetCell);\n        }\n\n        for (const targetCell of targetCells) {\n            for (let rI = 0; rI < rows.length; rI++) {\n                const\n                    row          = rows[rI],\n                    targetRecord = client.store.getAt(targetCell.rowIndex + rI);\n\n                // Starts with targetCell rowIndex and columnIndex and applies values from the clipboard string.\n                if (targetRecord && !targetRecord.readOnly) {\n                    for (let cI = 0; cI < row.length; cI++) {\n                        const\n                            targetColumn = client.columns.visibleColumns[targetCell.columnIndex + cI],\n                            targetField  = targetColumn?.field;\n                        let value        = row[cI];\n\n                        // If no value, or readOnly, this column is skipped\n                        if (targetField && value && !targetColumn.readOnly) {\n                            if (value === me.emptyValueChar) {\n                                value = null;\n                            }\n\n                            // Column provided paste conversion function\n                            if (targetColumn.fromClipboardString) {\n                                value = targetColumn.fromClipboardString({\n                                    string : value,\n                                    record : targetRecord\n                                });\n                            }\n\n                            // Client provided paste customization function\n                            if (me.toPasteValue) {\n                                value = me.toPasteValue({\n                                    currentValue : value,\n                                    record       : targetRecord,\n                                    column       : targetColumn,\n                                    field        : targetField\n                                });\n                            }\n\n                            targetRecord.set(targetField, value, false, false, false, true);\n                            modifiedRecords.add(targetRecord);\n                        }\n                    }\n                }\n            }\n        }\n\n        /**\n         * Fires on the owning Grid after a paste action is performed.\n         * @event paste\n         * @on-owner\n         * @param {Grid.view.Grid} source Owner grid\n         * @param {String} clipboardData The clipboardData that was pasted\n         * @param {Core.data.Model[]} modifiedRecords The records which have been modified due to the paste action\n         * @param {Grid.util.Location} targetCell The cell from which the paste will be started\n         * @param {String} entityName 'cell' to distinguish this event from other paste events\n         */\n        client.trigger('paste', { clipboardData, targetCell, modifiedRecords : [...modifiedRecords], entityName });\n    }\n\n    /**\n     * Converts an array of Location objects to a two-dimensional array where first level is rows and second level is\n     * columns. If the array is inconsistent in the number of columns present for each row, the function will return\n     * false.\n     * @param {Grid.util.Location[]} locations\n     * @private\n     */\n    cellSelectorsAs2dArray(locations) {\n        const\n            rows = [];\n        let rId  = null,\n            columns;\n\n        for (const location of locations) {\n            // If new id (new record) create new \"row\"\n            if (location.id !== rId) {\n                rId = location.id;\n                columns = [];\n                rows.push(columns);\n            }\n            columns.push(location);\n        }\n\n        // Save number of \"columns\" for easier access\n        rows.columnCount = rows[0].length;\n\n        // All \"rows\" must have the same number of columns\n        if (rows.some(row => row.length !== rows.columnCount)) {\n            return false;\n        }\n\n        return rows;\n    }\n\n    /**\n     * Converts a new-line- and tab-separated string to a two-dimensional array where first level is rows and second\n     * level is columns. If the string is inconsistent in the number of columns present for each row, the function will\n     * return false.\n     * @param {String} string String values separated with new-line(\\n,\\r or similar) and tabs (\\t)\n     * @private\n     */\n    stringAs2dArray(string) {\n        const\n            rows       = [],\n            stringRows = string.split(/\\r\\n|(?!\\r\\n)[\\n-\\r\\x85\\u2028\\u2029]/);\n\n        for (const row of stringRows) {\n            const columns = row.split('\\t');\n\n            // All \"rows\" must have the same number of columns\n            if (rows.columnCount && columns.length !== rows.columnCount) {\n                return false;\n            }\n            // Save number of \"columns\" for easier access\n            rows.columnCount = columns.length;\n            rows.push(columns);\n        }\n        return rows;\n    }\n\n    populateCellMenu({ record, items }) {\n        const me = this;\n\n        if (me.canCopy) {\n            items.cutCell = {\n                text        : me.cutText,\n                localeClass : me,\n                icon        : 'b-icon b-icon-cut',\n                weight      : 115,\n                disabled    : record.readOnly || !me.canCutPaste,\n                onItem      : () => me.cut()\n            };\n\n            items.pasteCell = {\n                text        : me.pasteText,\n                localeClass : me,\n                icon        : 'b-icon b-icon-paste',\n                weight      : 120,\n                disabled    : record.readOnly || !me.canCutPaste,\n                onItem      : () => me.paste()\n            };\n\n            items.copyCell = {\n                text        : me.copyText,\n                localeClass : me,\n                cls         : 'b-separator',\n                icon        : 'b-icon b-icon-copy',\n                weight      : 110,\n                onItem      : () => me.copy()\n            };\n        }\n    }\n}\n\nGridFeatureManager.registerFeature(CellCopyPaste);\n", "import Objects from '../../Core/helper/util/Objects.js';\nimport Tooltip from '../../Core/widget/Tooltip.js';\nimport InstancePlugin from '../../Core/mixin/InstancePlugin.js';\nimport GridFeatureManager from '../feature/GridFeatureManager.js';\n\n/**\n * @module Grid/feature/CellTooltip\n */\n\n/**\n * Displays a tooltip when hovering cells.\n *\n * {@inlineexample Grid/feature/CellTooltip.js}\n *\n * To show contents when hovering a cell, you can specify a global {@link #config-tooltipRenderer} function for the\n * feature, you can also define a {@link Grid.column.Column#config-tooltipRenderer} for individual columns.\n *\n * ```javascript\n * // Column with its own tooltip renderer\n * {\n *   text            : 'Name',\n *   field           : 'name',\n *   tooltipRenderer : ({ record }) => `My name is\\xa0<b>${record.name}</b>`\n * }\n * ```\n *\n * Configuration properties passed into this feature are used to configure the {@link Core.widget.Tooltip} instance\n * used.\n *\n * This feature is <strong>disabled</strong> by default.\n *\n * ## Showing async content\n * Showing remotely loaded content is super easy using the {@link #config-tooltipRenderer}:\n *\n * ```javascript\n * // Async tooltip with some custom settings\n * const grid = new Grid({\n *   features: {\n *     cellTooltip: {\n *       // Time that mouse needs to be over cell before tooltip is shown\n *       hoverDelay : 4000,\n *       // Time after mouse out to hide the tooltip, 0 = instantly\n *       hideDelay  : 0,\n *       // Async tooltip renderer, return a Promise which yields the text content\n *       tooltipRenderer({ record, tip }) {\n *         return fetch(`tip.php?id=${record.id}`).then(response => response.text())\n *       }\n *     }\n *   }\n * });\n * ```\n *\n * @extends Core/mixin/InstancePlugin\n * @extendsconfigs Core/widget/Tooltip\n * @demo Grid/celltooltip\n * @classtype cellTooltip\n * @feature\n */\nexport default class CellTooltip extends InstancePlugin {\n    //region Config\n\n    static $name = 'CellTooltip';\n\n    static configurable = {\n        /**\n         * Function called to generate the HTML content for the cell tooltip.\n         * The function should return a string (your HTML), or a Promise yielding a string (for remotely loaded\n         * content)\n         * @prp {Function}\n         * @param {Object} context\n         * @param {HTMLElement} context.cellElement The cell element\n         * @param {Core.data.Model} context.record The row record\n         * @param {Grid.column.Column} context.column The column\n         * @param {Core.widget.Tooltip} context.tip The Tooltip instance\n         * @param {Grid.feature.CellTooltip} context.cellTooltip The feature\n         * @param {Event} context.event The raw DOM event\n         * @returns {String|Promise}\n         */\n        tooltipRenderer : null\n    };\n\n    //endregion\n\n    // region Init\n\n    construct(grid, config) {\n        super.construct(grid, this.processConfig(config));\n    }\n\n    initTip() {\n        const me = this;\n\n        me.tip = Tooltip.new({\n            forElement        : me.client.element,\n            forSelector       : '.b-grid-row:not(.b-group-row) .b-grid-cell, .b-grid-merged-cells',\n            hoverDelay        : 1000,\n            trackMouse        : false,\n            cls               : 'b-celltooltip-tip',\n            getHtml           : me.getTooltipContent.bind(me),\n            internalListeners : {\n                pointerOver : 'onPointerOver',\n                thisObj     : me\n            },\n            // eslint-disable-next-line bryntum/no-listeners-in-lib\n            listeners : me.configuredListeners\n        }, me.initialConfig);\n\n        me.relayEvents(me.tip, ['beforeShow', 'show']);\n    }\n\n    onPointerOver({ target }) {\n        const column = this.client.getColumnFromElement(target);\n\n        // Veto onPointerOver if column's tooltipRenderer is false\n        return column.tooltipRenderer !== false && Boolean(column.tooltipRenderer || this.tooltipRenderer);\n    }\n\n    // CellTooltip feature handles special config cases, where user can supply a function to use as tooltipRenderer\n    // instead of a normal config object\n    processConfig(config) {\n        if (typeof config === 'function') {\n            return {\n                tooltipRenderer : config\n            };\n        }\n\n        return config;\n    }\n\n    // override setConfig to process config before applying it (used mainly from ReactGrid)\n    setConfig(config) {\n        super.setConfig(this.processConfig(config));\n    }\n\n    doDestroy() {\n        this.tip && this.tip.destroy();\n        super.doDestroy();\n    }\n\n    doDisable(disable) {\n        if (!disable) {\n            this.initTip();\n        }\n        else if (this.tip) {\n            this.tip.destroy();\n            this.tip = null;\n        }\n\n        super.doDisable(disable);\n    }\n\n    //endregion\n\n    //region Content\n\n    /**\n     * Called from Tooltip to populate it with html.\n     * @private\n     */\n    getTooltipContent({ tip, activeTarget : cellElement, event }) {\n        const\n            me     = this,\n            record = me.client.getRecordFromElement(cellElement),\n            column = me.client.getColumnFromElement(cellElement),\n            arg    = { cellElement, record, column, event, tip, cellTooltip : me };\n\n        let result;\n\n        // If we have not changed context, we should not change content, unless we have a custom target selector (element within the cell)\n        if (!me.forSelector && record === me.lastRecord && record.generation === me.lastRecordGeneration && column === me.lastColumn) {\n            return me.tip._html;\n        }\n\n        me.lastRecord = record;\n        me.lastRecordGeneration = record.generation;\n        me.lastColumn = column;\n\n        // first, use columns tooltipRenderer if any\n        if (column.tooltipRenderer) {\n            result = column.tooltipRenderer(arg);\n        }\n        // secondly, try feature's renderer (specifying column.tooltipRenderer as false prevents tooltip in that column)\n        else if (me.tooltipRenderer && column.tooltipRenderer !== false) {\n            result = me.tooltipRenderer(arg);\n        }\n\n        // No caching of async requests\n        if (Objects.isPromise(result)) {\n            me.lastRecord = me.lastRecordGeneration = me.lastColumn = null;\n        }\n\n        // Tip should hide if no content is available\n        if (!result) {\n            tip.hide();\n        }\n\n        return result;\n    }\n\n    //endregion\n}\n\nGridFeatureManager.registerFeature(CellTooltip);\n", "import InstancePlugin from '../../Core/mixin/InstancePlugin.js';\nimport Editor from '../../Core/widget/Editor.js';\nimport GridFeatureManager from '../feature/GridFeatureManager.js';\n\n/**\n * @module Grid/feature/ColumnRename\n */\n\n/**\n * Allows user to rename columns by either right-clicking column header or using keyboard shortcuts when column header\n * is focused.\n *\n * To get notified about column renaming listen to `change` event on {@link Grid.data.ColumnStore columns} store.\n *\n * This feature is <strong>disabled</strong> by default.\n *\n * {@inlineexample Grid/feature/ColumnRename.js}\n *\n * ## Keyboard shortcuts\n * This feature has the following default keyboard shortcuts:\n *\n * | Keys          | Action           | Action description                        |\n * |---------------|------------------|-------------------------------------------|\n * | `F2`          | *startEdit*      | Starts editing focused column header text |\n *\n * <div class=\"note\">Please note that <code>Ctrl</code> is the equivalent to <code>Command</code> and <code>Alt</code>\n * is the equivalent to <code>Option</code> for Mac users</div>\n *\n * For more information on how to customize keyboard shortcuts, please see\n * [our guide](#Grid/guides/customization/keymap.md)\n *\n * @extends Core/mixin/InstancePlugin\n *\n * @demo Grid/columns\n * @classtype columnRename\n * @feature\n */\nexport default class ColumnRename extends InstancePlugin {\n\n    static $name = 'ColumnRename';\n\n    static configurable = {\n        /**\n         * See {@link #keyboard-shortcuts Keyboard shortcuts} for details\n         * @config {Object<String,String>}\n         */\n        keyMap : {\n            F2 : 'startEdit'\n        }\n    };\n\n    doDestroy() {\n        this.editor?.destroy();\n        super.doDestroy();\n    }\n\n    static get pluginConfig() {\n        return {\n            after : ['populateHeaderMenu']\n        };\n    }\n\n    populateHeaderMenu({ items, column }) {\n        items.rename = {\n            weight   : 215,\n            icon     : 'b-fw-icon b-icon-edit',\n            text     : this.L('L{rename}'),\n            disabled : column.readOnly,\n            onItem   : () => this.startEdit(column)\n        };\n    }\n\n    startEdit(column) {\n        if (column instanceof Event) {\n            // If started editing by key\n            column = this.client.getHeaderDataFromEvent(column)?.column;\n        }\n\n        if (column) {\n            if (column.readOnly) {\n                // return false to let keyMap know that we didn't handle this event\n                return false;\n            }\n\n            const { textWrapper } = column;\n            let { editor } = this;\n\n            if (!editor) {\n                this.editor = editor = new Editor({\n                    owner : this.client,\n                    align : {\n                        align : 't0-t0'\n                    }\n                });\n            }\n\n            editor.render(textWrapper);\n\n            editor.startEdit({\n                target : textWrapper,\n                record : column,\n                field  : 'text'\n            });\n        }\n    }\n}\n\nGridFeatureManager.registerFeature(ColumnRename, false);\n", "import InstancePlugin from '../../Core/mixin/InstancePlugin.js';\nimport Delayable from '../../Core/mixin/Delayable.js';\nimport GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\nimport DomHelper from '../../Core/helper/DomHelper.js';\nimport EventHelper from '../../Core/helper/EventHelper.js';\nimport Location from '../../Grid/util/Location.js';\nimport GlobalEvents from '../../Core/GlobalEvents.js';\nimport Rectangle from '../../Core/helper/util/Rectangle.js';\n\n/**\n * @module Grid/feature/FillHandle\n */\n\n/**\n * This features adds a fill handle to a Grid range selection, which when dragged, fills the cells being dragged over\n * with values based on the values in the original selected range. This is similar to functionality normally seen in\n * various spreadsheet applications.\n *\n * {@inlineexample Grid/feature/FillHandle.js}\n *\n * Requires {@link Grid/view/Grid#config-selectionMode selectionMode.cell} to be activated.\n *\n * This feature is **disabled** by default\n *\n * ```javascript\n * const grid = new Grid({\n *     features : {\n *         fillHandle : true\n *     }\n * });\n * ```\n *\n * @extends Core/mixin/InstancePlugin\n * @classtype fillHandle\n * @feature\n */\nexport default class FillHandle extends InstancePlugin.mixin(Delayable) {\n    static $name = 'FillHandle';\n\n    static configurable = {\n        /**\n         * Implement this function to be able to customize the value that cells will be filled with.\n         * Return `undefined` to use default calculations.\n         *\n         * ````javascript\n         * new Grid({\n         *    features : {\n         *        fillHandle : {\n         *           calculateFillValue({cell, column, range, record}) {\n         *              if(column.field === 'number') {\n         *                 return range.reduce(\n         *                    (sum, location) => sum + location.record[location.column.field]\n         *                 );\n         *              }\n         *           }\n         *        }\n         *    }\n         * });\n         * ````\n         *\n         * @param {Object} data Object containing information about current cell and fill value\n         * @param {Grid.util.Location} data.cell Current cell data\n         * @param {Grid.column.Column} data.column Current cell column\n         * @param {Grid.util.Location[]} data.range Range from where to calculate values\n         * @param {Core.data.Model} data.record Current cell record\n         * @returns {String|Number|Date} Value to fill current cell\n         * @config {Function}\n         */\n        calculateFillValue : null,\n\n        /**\n         * Set to `true` to enable the fill range to crop the original selected range. This clears the cells which were\n         * a part of the original selected range, but are no longer a part of the smaller range.\n         * @config {Boolean}\n         */\n        allowCropping : false\n\n    };\n\n    // Plugin configuration. This plugin chains/overrides some functions in Grid.\n    static pluginConfig = {\n        chain    : ['afterSelectionChange', 'onContentChange', 'afterColumnsChange', 'fixElementHeights'],\n        override : ['getCellDataFromEvent']\n    };\n\n    afterConstruct() {\n        super.afterConstruct();\n\n        if (!this.client.selectionMode.cell) {\n            this.disabled = true;\n        }\n\n        this._fillListeners = {};\n    }\n\n    delayable = {\n        handleSelection : 'raf'\n    };\n\n    onContentChange() {\n        this.handleSelection();\n    }\n\n    afterColumnsChange() {\n        this.handleSelection();\n    }\n\n    fixElementHeights() {\n        this.handleSelection();\n    }\n\n    getCellDataFromEvent(event, includeSingleAxisMatch) {\n        if (includeSingleAxisMatch) {\n            includeSingleAxisMatch = !event.target.classList.contains('b-fill-handle');\n        }\n        return this.overridden.getCellDataFromEvent(event, includeSingleAxisMatch);\n    }\n\n    // region Pattern recognition\n    findPatternsIn2dRange(range, horizontal, negative) {\n        const values = {};\n\n        // Converts a cellselector range to values per column or row\n        for (const cell of range) {\n            const\n                id    = horizontal ? cell.id : cell.columnId;\n            let value = cell.record[cell.column.field];\n\n            // If a number string, convert to number\n            if (value && typeof value === 'string' && !isNaN(value)) {\n                value = parseFloat(value);\n            }\n\n            if (!values[id]) {\n                values[id] = [];\n            }\n            values[id].push(value);\n        }\n\n        // Find patterns for each column or row in range\n        for (const rowOrCol in values) {\n            values[rowOrCol].pattern = this.findPatternsIn1dRange(values[rowOrCol], negative);\n        }\n\n        return values;\n    }\n\n    findPatternsIn1dRange(range, negative) {\n        const\n            lastValue = range[negative ? 0 : (range.length - 1)],\n            pattern   = {\n                next : () => lastValue,\n                lastValue\n            };\n\n        // If all values in same column/row is either number or date\n        if (range.every(val => typeof val === 'number') || range.every(val => val instanceof Date)) {\n            const diffs = range.map((val, ix) => val - range[ix - 1]);\n            diffs.shift(); // Removes initial NaN\n\n            // Found a repeating pattern\n            if (new Set(diffs).size === 1) {\n                pattern.increaseBy = diffs[0] * (negative ? -1 : 1);\n\n                pattern.next = () => {\n                    if (pattern.lastValue instanceof Date) {\n                        pattern.lastValue = new Date(pattern.lastValue.getTime() + pattern.increaseBy);\n                    }\n                    else {\n                        pattern.lastValue += pattern.increaseBy;\n                    }\n                    return pattern.lastValue;\n                };\n            }\n        }\n        // Else it's treated as a string value\n        else if (range.length > 1) {\n            pattern.stringPattern = [...range];\n            pattern.next = () => {\n                if (pattern.currentIndex === undefined) {\n                    pattern.currentIndex = 0;\n                }\n                else {\n                    pattern.currentIndex += 1;\n                    if (pattern.currentIndex >= pattern.stringPattern.length) {\n                        pattern.currentIndex = 0;\n                    }\n                }\n                return pattern.stringPattern[pattern.currentIndex];\n            };\n        }\n        return pattern;\n    }\n\n    // endregion\n\n    afterSelectionChange() {\n        const me = this;\n\n        if (me.client.readOnly) {\n            me.removeElements();\n            return;\n        }\n\n        // If selection isn't finished, wait for mouse up and then add fill elements\n        if (GlobalEvents.isMouseDown()) {\n            me.client.delayUntilMouseUp(() => me.handleSelection(true));\n            // Remove prev elements immediately in this case\n            me.removeElements();\n        }\n        // Otherwise, add fill elements immediately\n        else {\n            me.handleSelection(true);\n        }\n    }\n\n    /**\n     * Checks selection and sees to it that fill handle and border is drawn.\n     * Runs on next animation frame\n     * @internal\n     */\n    handleSelection() {\n        if (!this._isExtending) {\n            const range = this.rangeSelection;\n\n            if (range) {\n                this.drawFillHandleAndBorder(range[0], range[range.length - 1]);\n            }\n            else {\n                this.removeElements();\n            }\n        }\n    }\n\n    // region Mouse events\n\n    // On fillHandle mouse down only\n    onMouseDown(event) {\n        const { client } = this;\n\n        if (!client.readOnly) {\n            this._fillListeners.mouseMoveOrUp = EventHelper.on({\n                element   : globalThis,\n                mouseover : {\n                    handler : 'onMouseOver',\n                    element : client.selectionDragMouseEventListenerElement\n                },\n                mouseup : 'onMouseUp',\n                thisObj : this\n            });\n            event.preventDefault();\n            event.stopImmediatePropagation();\n            event.handled = true;\n        }\n    }\n\n    // Responsible for doing the filling\n    onMouseUp() {\n        const\n            me              = this,\n            {\n                client,\n                currentRange,\n                _isCropping\n            }               = me,\n            range           = me.rangeSelection,\n            selectionChange = range && currentRange && client.internalSelectRange(currentRange.from, currentRange.to),\n            selectedCells   = selectionChange?.selectedCells || [],\n            // For extending : Only modify cells that are not a part of original range\n            // For cropping  : Only clear cells that are not a part of new selection\n            extensionCells  = _isCropping ? me.croppingCells\n                : selectedCells.filter(cell => !range.some(sel => sel.equals(cell, true)));\n\n        delete me._isCropping; // Removing flag in case we bail out early\n\n        if (me._isExtending) {\n            client.disableScrollingCloseToEdges(client.items);\n            delete me._isExtending;\n        }\n\n        // If no extension, do nothing\n        if (!extensionCells?.length) {\n            me.handleSelection();\n            return;\n        }\n\n        client.suspendRefresh();\n\n        // If trimming (inverted extension), clear cells that where previously selected and not a part of new selection\n        if (_isCropping) {\n            extensionCells.forEach(cell => cell.record.set(cell.column.field, null, false, false, false, true));\n        }\n        // Extending cell values depending on pattern\n        else {\n            const\n                [firstCell] = extensionCells,\n                // If extensioncells has a record that is included in original selection, then we are dragging horizontally\n                horizontal  = range.some(sel => sel.record === firstCell.record),\n                // negative in this aspect, means dragging either upwards or to the left depending on horizontal or vertical\n                negative    = horizontal\n                    ? firstCell.columnIndex < range[0].columnIndex\n                    : firstCell.rowIndex < range[0].rowIndex,\n                patterns    = me.findPatternsIn2dRange(range, horizontal, negative),\n                changeMap   = new Map();\n\n            if (negative) {\n                extensionCells.reverse();\n            }\n\n            for (const cell of extensionCells) {\n                const { column, record } = cell;\n\n                if (!column.readOnly && column.canFillValue({ range, record, cell })) {\n                    let value   = me.calculateFillValue?.({ range, column, record, cell }),\n                        changed = changeMap.get(record);\n\n                    if (!changed) {\n                        changed = {};\n                        changeMap.set(record, changed);\n                    }\n\n                    if (value === undefined) {\n                        const pattern = patterns[horizontal ? cell.id : cell.columnId].pattern;\n                        value = pattern.next();\n                    }\n\n                    changed[column.field] = column.calculateFillValue?.({ value, record, range }) || value;\n                }\n            }\n\n            for (const [record, changes] of changeMap) {\n                record.set(changes, null, null, null, null, true);\n            }\n        }\n\n        client.resumeRefresh(true);\n\n        // Selects the extended area\n        client.performSelection(selectionChange);\n\n        delete me.currentRange;\n        me.handleSelection();\n    }\n\n    // The fill border and handle should refresh on mouse move\n    onMouseOver(event) {\n        const\n            me           = this,\n            {\n                client,\n                rangeSelection\n            }            = me,\n            first        = rangeSelection[0],\n            last         = rangeSelection[rangeSelection.length - 1],\n            cellData     = client.getCellDataFromEvent(event, true);\n        let cellSelector = cellData && client.normalizeCellContext(cellData.cellSelector);\n\n        if (cellSelector?._column?.region === first._column.region) {\n            const\n                equalOrSmaller = rangeSelection.some(cs => cs.equals(cellSelector, true));\n            let negative;\n\n            if (!me._isExtending) {\n                client.enableScrollingCloseToEdges(client.items);\n            }\n\n            if (equalOrSmaller) {\n                // If were smaller, were cropping (if it's allowed)\n                me._isCropping = me.allowCropping &&\n                    (cellSelector.rowIndex < last.rowIndex || cellSelector.columnIndex < last.columnIndex);\n            }\n            else {\n                // If cellSelector is on a row in range, endSelector should be current column but end/first row\n                if (cellSelector.rowIndex >= first.rowIndex && cellSelector.rowIndex <= last.rowIndex) {\n                    negative     = first.columnIndex > cellSelector.columnIndex;\n                    cellSelector = new Location({\n                        grid   : client,\n                        record : negative ? first.record : last.record,\n                        column : cellSelector.column\n                    });\n                }\n                // Else endSelector should be current row but end/first column\n                else {\n                    negative     = first.rowIndex > cellSelector.rowIndex;\n                    cellSelector = new Location({\n                        grid   : client,\n                        record : cellSelector.record,\n                        column : negative ? first.column : last.column\n                    });\n                }\n            }\n\n            // negative means that current mouse over cell is above or to the left\n            const\n                // If negative, draw from calculated mouse over cell\n                // otherwise, draw from top-left selection cell\n                from = negative ? cellSelector : first,\n                // If negative or were inside selection (but not cropping), draw to bottom-right selection cell\n                // otherwise, draw to calculated mouse over cell\n                to   = negative || (equalOrSmaller && !me._isCropping) ? last : cellSelector;\n\n            me.currentRange = { from, to };\n\n            // This flag is true even if were trimming\n            me._isExtending = true;\n\n            me.drawFillHandleAndBorder(from, to, true);\n        }\n    }\n\n    // endregion\n\n    // region Creating, updating and removing fillhandle and fillborder\n    drawFillHandleAndBorder(from, to, keepListeners = false) {\n        const\n            me        = this,\n            {\n                client,\n                currentRange,\n                _fillListeners\n            }         = me,\n            regionEl  = client.subGrids[from.column.region].element,\n            { x }     = Rectangle.from(from.cell || from.column.element, regionEl),\n            { right } = Rectangle.from(to.cell || to.column.element, regionEl),\n            { y }     = client.getRecordCoords(from.record, true),\n            bottom    = client.getRecordCoords(to.record, true).bottom - 1;\n        let {\n            borderElement,\n            handleElement\n        }             = me;\n\n        me.removeElements(keepListeners);\n\n        if (!borderElement) {\n            me.borderElement = borderElement = DomHelper.createElement({\n                className : 'b-fill-selection-border'\n            });\n\n            me.handleElement = handleElement = DomHelper.createElement({\n                className : 'b-fill-handle'\n            });\n        }\n\n        DomHelper.setRect(borderElement, { y, x, width : (right - x), height : (bottom - y) });\n        regionEl.appendChild(borderElement);\n\n        // If fill handle is drawn at right edge, put it to the left instead\n        DomHelper.setTopLeft(handleElement, bottom, right >= regionEl.scrollWidth ? x : right);\n        regionEl.appendChild(handleElement);\n\n        // Remove all previously cropping cls\n        me.toggleCroppingCls(false);\n        delete me.croppingCells;\n\n        // If were cropping, we should add cls class to the cells that will be \"shrunk\"\n        if (me._isCropping && me.rangeSelection?.length) {\n            const newCells = client.getRange(currentRange.from, currentRange.to);\n\n            me.croppingCells = me.rangeSelection.filter(sel => !newCells.some(cell => cell.equals(sel, true)));\n            me.toggleCroppingCls();\n        }\n\n        if (!_fillListeners.handleClick) {\n            _fillListeners.handleClick = EventHelper.on({\n                element   : client.rootElement,\n                delegate  : '.b-fill-handle',\n                mousedown : 'onMouseDown',\n                thisObj   : me\n            });\n        }\n\n        me.hasFillElements = true;\n    }\n\n    toggleCroppingCls(add = true) {\n        this.croppingCells?.forEach(sel => this.client.getCell(sel)?.classList.toggle('b-indicate-crop', add));\n    }\n\n    removeElements(keepListeners = false) {\n        const me = this;\n\n        me.handleElement?.remove();\n        me.borderElement?.remove();\n\n        if (!keepListeners) {\n            me.removeListeners();\n        }\n\n        me.hasFillElements = false;\n    }\n\n    // Detach listeners\n    removeListeners() {\n        const me = this;\n\n        for (const listener in me._fillListeners) {\n            me._fillListeners[listener]();\n        }\n        me._fillListeners = {};\n    }\n\n    // endregion\n\n    // Gets current selection range. Only allows for single range or single cell.\n    get rangeSelection() {\n        const\n            { client }        = this,\n            { selectedCells } = client,\n            range             = client._shiftSelectRange ?? (selectedCells.length === 1 && selectedCells);\n\n        // We only got one selected range, nothing else selected\n        // Only allow fill handle on single region selection\n        if (!client._selectedRows.length && range?.length && range.length === selectedCells.length &&\n            range.every(c1 => selectedCells.some(c2 => c1.equals(c2, true)) &&\n                c1._column.parent && c1._column.region === range[0]._column.region && client.store.isAvailable(c1.id)\n            )\n        ) {\n            return range;\n        }\n\n        return null;\n    }\n}\n\nGridFeatureManager.registerFeature(FillHandle);\n", "import ArrayHelper from '../../Core/helper/ArrayHelper.js';\nimport DomHelper from '../../Core/helper/DomHelper.js';\nimport DomSync from '../../Core/helper/DomSync.js';\nimport StringHelper from '../../Core/helper/StringHelper.js';\nimport Rectangle from '../../Core/helper/util/Rectangle.js';\nimport InstancePlugin from '../../Core/mixin/InstancePlugin.js';\nimport GridFeatureManager from './GridFeatureManager.js';\nimport DomClassList from '../../Core/helper/util/DomClassList.js';\n\n/**\n * @module Grid/feature/MergeCells\n */\n\n// Maps DOM events to relayed events that need correct casing\nconst camelCase = {\n    mousedown   : 'mouseDown',\n    mousemove   : 'mouseMove',\n    mouseup     : 'mouseUp',\n    touchdown   : 'touchDown',\n    touchmove   : 'touchMove',\n    touchup     : 'touchUp',\n    pointerover : 'mouseOver',\n    mouseout    : 'mouseOut',\n    dblclick    : 'dblClick',\n    keydown     : 'keyDown',\n    keypress    : 'keyPress',\n    keyup       : 'keyUp',\n    contextmenu : 'contextMenu'\n};\n\n/**\n * This feature merges cells that have the same value in sorted columns configured to\n * {@link Grid/column/Column#config-mergeCells}. The content of merged cells is sticky for Grids with a single subgrid\n * section when all columns fit in view (content stays in view until the cell is scrolled fully out of view).\n *\n * <div class=\"note\">Support for sticky content is limited because of how <code>position: sticky</code> works. Grid\n * scrolls vertically in one element, and horizontally in another (to support multiple regions in the grid), and this\n * setup is not supported by current browsers implementation of sticky positioning</div>\n *\n * Try scrolling in the demo below. Also try sorting by the other columns (\"City\" and \"Favorite food\" are configured\n * to merge cells):\n *\n * {@inlineexample Grid/feature/MergeCells.js}\n *\n * This feature is **disabled** by default.\n *\n * @extends Core/mixin/InstancePlugin\n * @classtype mergeCells\n * @feature\n */\nexport default class MergeCells extends InstancePlugin {\n    //region Config\n\n    static $name = 'MergeCells';\n\n    static configurable = {\n        /**\n         * By default merged cells allow pointer events to pass through to the underlying row/cell, to allow selecting a\n         * row and editing an individual cell even when they are merged. Configure as `false` to allow merged cells to\n         * catch and react to the pointer events instead.\n         *\n         * ```javascript\n         * const grid = new Grid({\n         *     features : {\n         *         mergeCells : {\n         *             // Let merged cells react to pointer events\n         *             passthrough : false\n         *         }\n         *     }\n         * });\n         * ```\n         *\n         * @config {Boolean}\n         */\n        passthrough : true\n    };\n\n    // All current ranges (once rendered)\n    mergedRanges = [];\n    // Ranges indexed by row index & column id -> Each range included multiple times, for easy lookup\n    mergedMap    = {};\n\n    static get pluginConfig() {\n        return {\n            chain : [\n                'beforeRenderCell',\n                'afterRenderRow',\n                'bindStore',\n                'afterColumnsChange',\n                'afterRemove',\n                'afterToggleGroup',\n                'afterToggleSubGrid',\n                'handleEvent',\n                'populateHeaderMenu',\n                // 'setHoveredRow'\n                'afterSelectionChange'\n            ],\n\n            // Grid must perform its update *after* we do.\n            before : [\n                'onInternalResize'\n            ],\n            override : [\n                'getColumnFromElement',\n                'getRecordFromElement'\n            ]\n        };\n    };\n\n    //endregion\n\n    //region Init\n\n    afterConstruct() {\n        const\n            me         = this,\n            { client } = me;\n\n        // Each subgrid gets a merged cells container\n        client.eachSubGrid(subGrid => me.setupSubGrid(subGrid));\n\n        // Merged cells are synced after rows are updated\n        client.rowManager.ion({\n            renderDone : 'onRenderDone',\n            thisObj    : me\n        });\n\n        me.bindStore(client.store);\n    }\n\n    setupSubGrid(subGrid) {\n        // Element that will contain the merged cells\n        subGrid.$mergedCellsElement = DomHelper.createElement({\n            parent    : subGrid.element,\n            className : {\n                'b-grid-merged-cells-container' : 1\n            }\n        });\n    }\n\n    doDisable(disable) {\n        if (!this.isConfiguring) {\n            // Flag to allow reset to redraw even though we are already disabled at this stage\n            this.isDisabling = true;\n            this.reset();\n            this.isDisabling = false;\n        }\n\n        super.doDisable(disable);\n    }\n\n    updatePassthrough(use) {\n        // Toggle CSS class that has `pointer-events : none`\n        this.client.element.classList.toggle('b-mergecells-passthrough', use);\n    }\n\n    //endregion\n\n    //region Grid hooks\n\n    bindStore(store) {\n        this.detachListeners('store');\n\n        store.ion({\n            name    : 'store',\n            change  : 'onStoreChange',\n            // Call our refresh logic before grids\n            refresh : {\n                prio : 1,\n                fn   : 'onStoreRefresh'\n            },\n            thisObj : this\n        });\n    }\n\n    // Refresh all ranges when grid is resized\n    onInternalResize() {\n        this.refreshBounds();\n    }\n\n    // Get / create ranges before cell contents are rendered, redirecting the contents to the range\n    beforeRenderCell(renderData) {\n        const\n            { column, record, cellElement } = renderData,\n            subGrid                         = this.client.subGrids[column.region];\n\n        // Only affect sorted columns configured to merge cells\n        if (!this.disabled && column.mergeCells && column.isSorted && !record.isSpecialRow && !subGrid.collapsed) {\n            const mergedRange = this.getMergeRange(record, column);\n            if (mergedRange?.use) {\n                // Flag the unmerged cell to allow styling it\n                cellElement.classList.add('b-merged-cell');\n                // Make sure it is empty\n                cellElement.innerHTML = '';\n                // Redirect output to the merged cell\n                renderData.cellElement = mergedRange.cellElement;\n\n                // <remove-on-release>\n                // TODO: Consider bailing out after rendering first available cell of a merge. It would help with\n                //  performance, but any side effects from the renderer would be lost (such as assigning classes to row)\n                // </remove-on-release>\n            }\n        }\n    }\n\n    afterRenderRow({ row, oldId, oldHeight }) {\n        // Row reused for same record changed height\n        if (oldId === row.id && oldHeight !== row.height) {\n            this.heightChanged = true;\n        }\n    }\n\n    // Refresh all ranges when a column is resized (since it might affect their position and size)\n    afterColumnsChange({ action, changes, column }) {\n        if (this.disabled) {\n            return;\n        }\n\n        if (action === 'update' && changes.mergeCells && !column.mergeCells) {\n            // Remove all ranges for the column when mergeCells is set to false\n            for (const range of this.mergedRanges.slice()) {\n                if (range.column === column) {\n                    this.removeRange(range);\n                }\n            }\n\n            this.syncDom();\n            return;\n        }\n\n        this.refreshBounds();\n    }\n\n    // Remove might be transitioned, wait until it finishes before resetting (in the afterRemove hook)\n    afterRemove() {\n        !this.disabled && this.reset();\n    }\n\n    // Group collapsed or expanded\n    afterToggleGroup() {\n        !this.disabled && this.reset();\n    }\n\n    // SubGrid collapsed or expanded\n    afterToggleSubGrid() {\n        !this.disabled && this.reset();\n    }\n\n    // setHoveredRow(row) {\n    //     this.$hovered = row && this.mergedRanges.find(r => r.fromIndex <= row.dataIndex && r.toIndex >= row.dataIndex);\n    //\n    //     this.syncDom();\n    // }\n\n    // Selection changed, range is considered selected when all of its rows are selected (only in passthrough mode)\n    afterSelectionChange() {\n        if (!this.passthrough) {\n            const\n                { client } = this,\n                indices    = client.selectedRecords.map(r => client.store.indexOf(r));\n            let changed    = false;\n\n            for (const range of this.mergedRanges) {\n                let allSelected = true;\n                // Check if all records in the range are selected\n                for (let i = range.fromIndex; i <= range.toIndex && allSelected; i++) {\n                    allSelected = indices.includes(i);\n                }\n\n                if (range.isSelected !== allSelected) {\n                    range.isSelected = allSelected;\n                    changed = true;\n                }\n            }\n\n            // Only redraw if a range selection status changed\n            changed && this.syncDom();\n        }\n    }\n\n    //endregion\n\n    //region Grid overrides\n\n    // Extract record from merged cells\n    getRecordFromElement(element) {\n        if (element.elementData?.range) {\n            return this.client.store.getAt(element.elementData.range.fromIndex);\n        }\n\n        return this.overridden.getRecordFromElement(element);\n    }\n\n    // Extract column from merged cells\n    getColumnFromElement(element) {\n        if (element.elementData?.range) {\n            return element.elementData.range.column;\n        }\n\n        return this.overridden.getColumnFromElement(element);\n    }\n\n    //endregion\n\n    //region Header menu\n\n    // Allow toggling merging cells from the column header menu (unless column is explicitly disallowing it)\n    populateHeaderMenu({ column, items }) {\n        if (column.mergeable !== false) {\n            items.mergeCells = {\n                text     : 'L{MergeCells.mergeCells}',\n                icon     : `b-fw-icon ${column.mergeCells ? 'b-icon-checked' : 'b-icon-unchecked'}`,\n                tooltip  : 'L{MergeCells.menuTooltip}',\n                cls      : 'b-separator',\n                weight   : 500,\n                disabled : this.disabled,\n                onItem   : () => column.mergeCells = !column.mergeCells\n            };\n        }\n    }\n\n    //endregion\n\n    //region Relaying events\n\n    // Relay pointer events from the merged cell on grid\n    async handleEvent(event) {\n        if (!this.passthrough) {\n            const mergedCellsElement = event.target.closest('.b-grid-merged-cells');\n\n            if (mergedCellsElement) {\n                const\n                    { client }   = this,\n                    { range }    = mergedCellsElement.elementData,\n                    { cellEdit } = client.features,\n                    { column }   = range,\n                    type         = StringHelper.capitalize(camelCase[event.type] ?? event.type),\n                    eventData    = {\n                        grid        : client,\n                        records     : [],\n                        column,\n                        cellElement : mergedCellsElement.firstElementChild,\n                        target      : event.target,\n                        event\n                    };\n\n                for (let i = range.fromIndex; i <= range.toIndex; i++) {\n                    eventData.records.push(client.store.getAt(i));\n                }\n\n                client.trigger(`mergedCell${type}`, eventData);\n\n                // Cell editing, pass through to cell underneath even when not using passthrough mode\n                if (cellEdit?.triggerEvent.toLowerCase() === `cell${type}`.toLowerCase()) {\n                    const row = client.rowManager.getRowAt(event.clientY);\n                    await cellEdit.startEditing({ id : row.id, columnId : column.id });\n                }\n                // Select ranges rows when clicking the merged cell\n                else if (event.type === 'click') {\n                    this.onRangeClick({ range });\n                }\n            }\n        }\n    }\n\n    //endregion\n\n    //region Event listeners\n\n    // Select ranges rows when clicking a merged cell\n    onRangeClick({ range }) {\n        const records = [];\n\n        for (let i = range.fromIndex; i <= range.toIndex; i++) {\n            records.push(this.client.store.getAt(i));\n        }\n\n        this.client.selectedRecords = records;\n    }\n\n    // Reset when data changes\n    onStoreChange() {\n        !this.disabled && this.reset();\n    }\n\n    // Reset before grids refresh listener come into play, grid will redraw\n    onStoreRefresh({ action }) {\n        // filter & dataset triggers change too, handled above\n        if (action !== 'filter' && action !== 'dataset') {\n            !this.disabled && this.reset(false);\n        }\n    }\n\n    //endregion\n\n    //region Render\n\n    // Element is needed early since it is passed to column renderers, and syncing for each rendered cell would give a\n    // lot of overhead. Thus creating element directly instead\n    createRangeElement(range) {\n        const\n            parent = this.client.getSubGridFromColumn(range.column).$mergedCellsElement,\n            syncId = `${range.fromIndex}-@-${range.column.id}`;\n\n        // If there is already an element for the range (also if previously released), we grab that one.\n        // We are bending the rules of DomSync here by spawning the element early\n        let element = parent.syncIdMap?.[syncId] ?? parent.releasedIdMap?.[syncId];\n\n        // No longer considered released\n        if (parent.releasedIdMap) {\n            delete parent.releasedIdMap[syncId];\n        }\n\n        if (!element) {\n            element = DomHelper.createElement(this.createRangeDomConfig(range));\n        }\n\n        // New element or reusing released one, DomSync need to be made aware\n        DomSync.addChild(parent, element, syncId);\n\n        range.element = element;\n        range.cellElement = element.firstElementChild;\n\n        return element;\n    }\n\n    // Create a DomConfig object for the supplied range, used initially with DomHelper and thereafter with DomSync\n    createRangeDomConfig(range) {\n        const\n            { column, fromIndex, toIndex, top, left, width, height } = range,\n            { type } = column,\n            record = this.client.store.getAt(fromIndex),\n            domConfig = {\n                className : {\n                    'b-grid-merged-cells' : 1,\n                    // 'b-hover'             : this.$hovered === range,\n                    'b-selected'          : range.isSelected\n                },\n                elementData : {\n                    range\n                },\n                style : {\n                    top,\n                    left,\n                    height,\n                    width\n                },\n                dataset : {\n                    syncId   : `${fromIndex}-@-${column.id}`,\n                    fromIndex,\n                    toIndex,\n                    column   : column.field,\n                    columnId : column.id\n                },\n                children : [\n                    // Div for an actual cell\n                    {\n                        className : new DomClassList(this.client.cellCls).assign({\n                            [`b-${type?.toLowerCase()}-cell`] : type,\n                            [column.cellCls]                  : column.cellCls,\n                            [column.internalCellCls]          : column.internalCellCls\n                        }).assign(column.autoCls),\n                        // Don't touch cell children that might have been added by renderer\n                        keepChildren : true,\n                        // Tag along the range for easy resolving later\n                        elementData  : {\n                            range\n                        },\n                        // Dataset expected on cells\n                        dataset : {\n                            column   : column.field,\n                            columnId : column.id\n                        },\n                        // Size using configured row height, to at least have a chance of lining up with surrounding cells\n                        style : {\n                            height : this.client.rowManager.rowHeight\n                        }\n                    }\n                ]\n            };\n\n        // Allow application code a chance to affect the merged cell (intended for styling)\n        column.mergedRenderer?.({ domConfig, value : column.getRawValue(record), record, column, fromIndex, toIndex });\n\n        return domConfig;\n    }\n\n    buildMergedCellsConfig(fromIndex, toIndex, rows) {\n        const\n            me             = this,\n            { client }     = me,\n            { rowManager } = client;\n\n        // When exporting content we render rows to a document fragment one by one without RowManager. In\n        // order to draw ranges correctly in this case we need provide some meta information - list of row-like\n        // objects from which we can size for merged cell element, i.e. top, bottom, height, dataIndex\n        // Match grids row buffer, drawing ranges from the topmost row to the bottommost\n        fromIndex = fromIndex ?? rowManager.topRow?.dataIndex;\n        toIndex = toIndex ?? rowManager.bottomRow?.dataIndex;\n\n        const\n            // { locked = [], normal = [] }\n            domConfigMap = client.regions.reduce((map, region) => {\n                map[region] = {\n                    className : {\n                        'b-grid-merged-cells-container' : 1\n                    },\n                    children : []\n                };\n                return map;\n            }, {});\n\n        // Determine and update visible ranges\n        for (const range of me.mergedRanges) {\n            if (range.use && range.fromIndex <= toIndex && range.toIndex >= fromIndex) {\n                // Update the range, in case more of it has been scrolled into view\n                me.updateRange(range, me.heightChanged, rows);\n                // Create a DomConfig for it\n                domConfigMap[range.column.region].children.push(me.createRangeDomConfig(range));\n            }\n        }\n\n        return domConfigMap;\n    }\n\n    syncDom(force = false) {\n        const\n            me             = this,\n            { client }     = me,\n            { rowManager } = client;\n\n        // Bail out if we get here too early (happens in Scheduler) or are disabled\n        if (!force && !rowManager.topRow || me.disabled && !me.isDisabling) {\n            return;\n        }\n\n        const domConfigMap = this.buildMergedCellsConfig();\n\n        // Sync per subgrid\n        client.eachSubGrid(subGrid => {\n            DomSync.sync({\n                targetElement : subGrid.$mergedCellsElement,\n                syncIdField   : 'syncId',\n                domConfig     : domConfigMap[subGrid.region]\n            });\n        });\n\n        me.heightChanged = false;\n    }\n\n    // Called after rows are updated, sync visible ranges per subgrid\n    onRenderDone() {\n        this.syncDom();\n    }\n\n    //endregion\n\n    //region Ranges\n\n    // Remove range from list and index/column map, leaving no trace it since we don't know if it will ever\n    // come back (element will be released by DomSync)\n    removeRange(range) {\n        ArrayHelper.remove(this.mergedRanges, range);\n        for (let index = range.fromIndex; index <= range.toIndex; index++) {\n            delete this.mergedMap[`${index}-@-${range.column.id}`];\n        }\n    }\n\n    // Full reset, regenerating all ranges\n    reset(redraw = true) {\n        const\n            me        = this,\n            columns   = me.client.columns.visibleColumns.filter(c => c.mergeCells && c.isSorted, true),\n            hadRanges = me.mergedRanges.length;\n\n        me.mergedRanges = [];\n        me.mergedMap = {};\n\n        if (redraw && !me.client.refreshSuspended) {\n            for (const row of me.client.rowManager.rows) {\n                for (const column of columns) {\n                    row.renderCell(row.getCell(column.id));\n                }\n            }\n\n            // Redraw, forcing it if all rows are gone\n            me.syncDom(hadRanges && !me.client.rowManager.rowCount);\n        }\n    }\n\n    // Refreshes existing ranges coords\n    refreshBounds() {\n        const\n            { mergedRanges } = this,\n            boundsMap        = new Map();\n\n        for (const range of mergedRanges.slice()) {\n            const\n                { column }  = range,\n                { element } = column;\n\n            // Column shown\n            if (element) {\n                let bounds = boundsMap.get(column);\n\n                if (!bounds) {\n                    // Temporarily cache bounds to avoid calculating them multiple times\n                    boundsMap.set(column, bounds = Rectangle.from(element, element.parentElement));\n                }\n\n                range.left = bounds.left;\n                range.width = bounds.width;\n            }\n            // Column hidden or removed\n            else {\n                this.removeRange(range);\n            }\n        }\n\n        this.syncDom();\n    }\n\n    // Updates the range as user scrolls, until its start and end coords are fully known\n    // Rows argument is required to render merged cells on export. We provide row-like objects there\n    updateRange(range, force, rows = null) {\n        const\n            { store, rowManager }           = this.client,\n            { topRendered, bottomRendered } = range,\n            { rowOffsetHeight }             = rowManager;\n\n        let { fromIndex, toIndex } = range,\n            topRow, bottomRow;\n\n        force = rows ? rows.length > 0 : force;\n\n        // No need to update anything if bounds are correct already\n        if (!force && topRendered && bottomRendered) {\n            return;\n        }\n\n        if (!topRendered || force) {\n            if (rows) {\n                const index = rows.findIndex(row => row.dataIndex >= fromIndex);\n                topRow = rows[index];\n                fromIndex = topRow.dataIndex;\n            }\n            else {\n                // <remove-on-release>\n                // TODO: Should not need to iterate here, calculate top instead\n                // </remove-on-release>\n                do {\n                    topRow = rowManager.getRowById(store.getAt(fromIndex));\n                }\n                while (!topRow && fromIndex++ < toIndex);\n            }\n\n            // topRow is the actual topmost row in the range\n            range.topRendered = (fromIndex === range.fromIndex);\n\n            const rowsAbove = fromIndex - range.fromIndex;\n\n            range.top = topRow.top - rowsAbove * (rows ? topRow.offsetHeight : rowOffsetHeight);\n        }\n\n        if (!bottomRendered || force) {\n            if (rows) {\n                // We need to find last index, so we can just pick max between -1 and whatever we find\n                const index = rows.findIndex(row => row.dataIndex === toIndex);\n                bottomRow = rows[index === -1 ? rows.length - 1 : index];\n                fromIndex = bottomRow.dataIndex;\n            }\n            else {\n                // <remove-on-release>\n                // TODO: Should not need to iterate here, calculate bottom instead\n                // </remove-on-release>\n                do {\n                    bottomRow = rowManager.getRowById(store.getAt(toIndex));\n                }\n                while (!bottomRow && toIndex-- > fromIndex);\n            }\n\n            // bottomRow is the actual bottommost row in the range\n            range.bottomRendered = (toIndex === range.toIndex);\n\n            const rowsBelow = range.toIndex - toIndex;\n\n            range.bottom = bottomRow.bottom + rowsBelow * (rows ? bottomRow.offsetHeight : rowOffsetHeight);\n        }\n\n        range.height = range.bottom - range.top;\n    }\n\n    // Retrieve a range for the specified record / column, creating a new one if none found by walking upwards and\n    // downwards until a deviating value is found\n    getMergeRange(record, column) {\n        if (record.isSpecialRow) {\n            return;\n        }\n\n        const\n            me            = this,\n            { mergedMap } = me,\n            { store }     = me.client,\n            columnId      = column.id,\n            index         = store.indexOf(record),\n            key           = `${index}-@-${columnId}`;\n\n        let range = mergedMap[key];\n\n        if (!range) {\n            const value = column.getRawValue(record);\n\n            range = mergedMap[key] = {\n                column\n            };\n\n            me.mergedRanges.push(range);\n\n            // Search up until encountering different value\n            let earlierRecord, earlierValue, earlierIndex = index;\n\n            do {\n                earlierRecord = store.getAt(--earlierIndex);\n                earlierValue  = earlierRecord && column.getRawValue(earlierRecord);\n\n                if (earlierValue === value) {\n                    mergedMap[`${earlierIndex}-@-${columnId}`] = range;\n                }\n\n            } while (earlierRecord && earlierValue === value);\n\n            // And down\n            let laterRecord, laterValue, laterIndex = index;\n\n            do {\n                laterRecord = store.getAt(++laterIndex);\n                laterValue  = laterRecord && column.getRawValue(laterRecord);\n\n                if (laterValue === value) {\n                    mergedMap[`${laterIndex}-@-${columnId}`] = range;\n                }\n            } while (laterRecord && laterValue === value);\n\n            range.fromIndex = earlierIndex + 1;\n            range.toIndex   = laterIndex - 1;\n\n            // We only care about ranges longer than 1 record\n            if (range.toIndex - range.fromIndex > 0) {\n                // <remove-on-release>\n                // TODO: get relative element with different approach, to work with grouped headers\n                // </remove-on-release>\n                const headerBounds = Rectangle.from(column.element, column.element.parentElement);\n                range.left  = headerBounds.left;\n                range.width = headerBounds.width;\n                range.use = true;\n            }\n        }\n\n        if (!range.element && range.use) {\n            me.createRangeElement(range);\n        }\n\n        return range;\n    }\n\n    //endregion\n}\n\nGridFeatureManager.registerFeature(MergeCells);\n", "import DomHelper from '../../Core/helper/DomHelper.js';\nimport InstancePlugin from '../../Core/mixin/InstancePlugin.js';\nimport GridFeatureManager from '../feature/GridFeatureManager.js';\nimport StringHelper from '../../Core/helper/StringHelper.js';\n\n// <remove-on-release>\n// TODO: Handle date columns\n// TODO: Icons to navigate between hits in the header? or in each cell?\n// TODO: Icon to clear quickfind in header\n// TODO: regex for valid key pressed?\n// </remove-on-release>\n\n/**\n * @module Grid/feature/QuickFind\n */\n\n/**\n * Feature that allows the user to search in a column by focusing a cell and typing. Navigate between hits using the\n * keyboard, [f3] or [ctrl]/[cmd] + [g] moves to next, also pressing [shift] moves to previous.\n *\n * This feature is <strong>disabled</strong> by default.\n *\n * ## Keyboard shortcuts\n * This feature has the following default keyboard shortcuts:\n *\n * | Keys                | Action             | Action description                |\n * |---------------------|--------------------|-----------------------------------|\n * | `F3`                | *goToNextHit*      | Move focus to next search hit     |\n * | `Shift`+F3`         | *goToPrevHit*      | Move focus to previous search hit |\n * | `Ctrl`+`G`          | *goToNextHit*      | Move focus to next search hit     |\n * | `Ctrl`+`Shift`+`G`  | *goToPrevHit*      | Move focus to previous search hit |\n * | `Ctrl`+`Shift`+`F3` | *showFilterEditor* | Shows the filter editor           |\n * | `Escape`            | *clearSearch*      | Removes the search completely     |\n *\n * <div class=\"note\">Please note that <code>Ctrl</code> is the equivalent to <code>Command</code> and <code>Alt</code>\n * is the equivalent to <code>Option</code> for Mac users</div>\n *\n * For more information on how to customize keyboard shortcuts, please see\n * [our guide](#Grid/guides/customization/keymap.md)\n *\n * @extends Core/mixin/InstancePlugin\n *\n * @example\n * // enable QuickFind\n * let grid = new Grid({\n *   features: {\n *     quickFind: true\n *   }\n * });\n *\n * // navigate to next hit programmatically\n * grid.features.quickFind.gotoNextHit();\n *\n * @demo Grid/quickfind\n * @classtype quickFind\n * @inlineexample Grid/feature/QuickFind.js\n * @feature\n */\nexport default class QuickFind extends InstancePlugin {\n    //region Config\n\n    static get $name() {\n        return 'QuickFind';\n    }\n\n    static configurable = {\n        mode : 'header',\n        find : '',\n\n        /**\n         * See {@link #keyboard-shortcuts Keyboard shortcuts} for details\n         * @config {Object<String,String>}\n         */\n        keyMap : {\n            F3             : 'gotoNextHit',\n            'Shift+F3'     : 'gotoPrevHit',\n            'Ctrl+g'       : 'gotoNextHit',\n            'Ctrl+Shift+g' : 'gotoPrevHit',\n            'Ctrl+Shift+f' : 'showFilterEditor',\n            Escape         : 'clearSearch',\n\n            //Private\n            Backspace : 'onBackspace'\n        }\n    };\n\n    // Plugin configuration. This plugin chains some of the functions in Grid.\n    static get pluginConfig() {\n        return {\n            chain : ['onElementKeyPress', 'onCellNavigate']\n        };\n    }\n\n    //endregion\n\n    //region Init\n\n    static get properties() {\n        return {\n            hitCls          : 'b-quick-hit',\n            hitCellCls      : 'b-quick-hit-cell',\n            hitCellBadgeCls : 'b-quick-hit-cell-badge',\n            hitTextCls      : 'b-quick-hit-text'\n        };\n    }\n\n    construct(grid, config) {\n        super.construct(grid, config);\n\n        Object.assign(this, {\n            grid,\n            treeWalker : grid.setupTreeWalker(grid.element, DomHelper.NodeFilter.SHOW_TEXT, () => DomHelper.NodeFilter.FILTER_ACCEPT)\n        });\n    }\n\n    isActionAvailable() {\n        const { focusedCell } = this.grid;\n        return !this.disabled && focusedCell?.record && !focusedCell.isActionable && this.find.length > 0;\n    }\n\n    doDisable(disable) {\n        if (disable) {\n            this.clear();\n        }\n\n        super.doDisable(disable);\n    }\n\n    get store() {\n        return this.grid.store;\n    }\n\n    //endregion\n\n    //region Show/hide QuickFind\n\n    /**\n     * Shows a \"searchfield\" in the header. Triggered automatically when you have a cell focused and start typing.\n     * @private\n     */\n    showQuickFind() {\n        const\n            me     = this,\n            header = me.grid.getHeaderElement(me.columnId);\n\n        if (header) {\n            if (!me.headerField) {\n                const [element, field, badge] = DomHelper.createElement({\n                    tag       : 'div',\n                    className : 'b-quick-hit-header',\n                    children  : [\n                        { tag : 'div', className : 'b-quick-hit-field' },\n                        { tag : 'div', className : 'b-quick-hit-badge' }\n                    ]\n                }, { returnAll : true });\n\n                if (me.mode === 'header') {\n                    header.appendChild(element);\n                }\n                else {\n                    element.className += ' b-quick-hit-mode-grid';\n                    me.grid.element.appendChild(element);\n                }\n\n                me.headerField = {\n                    header    : element,\n                    field,\n                    badge,\n                    colHeader : header\n                };\n            }\n\n            me.headerField.field.innerHTML = me.find;\n            me.headerField.badge.innerHTML = me.found.length;\n\n            header.classList.add('b-quick-find-header');\n\n            if (!me.renderListenerInitialized) {\n                me.grid.rowManager.ion({\n                    rendercell : me.renderCell,\n                    thisObj    : me\n                });\n                me.renderListenerInitialized = true;\n            }\n        }\n    }\n\n    /**\n     * Hide the \"searchfield\" and remove highlighted hits. Called automatically when pressing [esc] or backspacing away\n     * the keywords.\n     * @private\n     */\n    hideQuickFind() {\n        const\n            me                    = this,\n            { grid, headerField } = me;\n\n        // rerender cells to remove quick-find markup\n        for (const hit of (me.prevFound || me.found)) {\n            const row = grid.getRowById(hit.id);\n            if (row) {\n                // Need to force replace quick finds markup\n                row.forceInnerHTML = true;\n\n                const cellElement = row.getCell(me.columnId);\n                cellElement._content = null;\n                row.renderCell(cellElement);\n\n                row.forceInnerHTML = false;\n            }\n        }\n\n        if (headerField) {\n            headerField.header.parentNode.removeChild(headerField.header);\n            headerField.colHeader.classList.remove('b-quick-find-header');\n            me.headerField = null;\n        }\n\n        if (me.renderListenerInitialized) {\n            grid.rowManager.un({ rendercell : me.renderCell }, me);\n            me.renderListenerInitialized = false;\n        }\n\n        grid.trigger('hideQuickFind');\n    }\n\n    //endregion\n\n    //region Search\n\n    /**\n     * Performs a search and highlights hits. If find is empty, QuickFind is closed.\n     * @param {String} find Text to search for\n     * @param {String} columnFieldOrId Column to search\n     */\n    search(find, columnFieldOrId = this.columnId) {\n        const\n            me       = this,\n            { grid } = me,\n            column   = grid.columns.getById(columnFieldOrId) || grid.columns.get(columnFieldOrId),\n            found    = me.store.findByField(column.field, find, column.mergeCells && column.isSorted);\n\n        let i = 1;\n\n        Object.assign(me, {\n            foundMap  : {},\n            prevFound : me.found,\n            found,\n            find,\n            columnId  : column.id,\n            findRe    : new RegExp(`(\\\\s+)?(${StringHelper.escapeRegExp(String(find))})(\\\\s+)?`, 'ig')\n        });\n\n        if (find) {\n            me.showQuickFind();\n        }\n        else {\n            me.hideQuickFind();\n        }\n\n        // clear old hits\n        for (const cellElement of DomHelper.children(grid.element, `.${me.hitCls}`)) {\n            cellElement.classList.remove(me.hitCls, me.hitCellCls);\n\n            if (cellElement._originalContent) {\n                cellElement.innerHTML = cellElement._originalContent;\n                cellElement._originalContent = null;\n            }\n        }\n\n        if (!found) {\n            return;\n        }\n\n        if (found.length > 0) {\n            me.gotoClosestHit(grid.focusedCell, found);\n        }\n\n        // highlight hits for visible cells\n        for (const hit of found) {\n            me.foundMap[hit.id] = i++;\n\n            const row = grid.getRowById(hit.data.id);\n            row?.renderCell(row.getCell(column.id));\n\n            // limit highlighted hits\n            if (i > 1000) {\n                break;\n            }\n        }\n\n        grid.trigger('quickFind', { find, found });\n    }\n\n    /**\n     * Clears and closes QuickFind.\n     */\n    clear() {\n        if (this.find || this.found?.length) {\n            this.search('');\n        }\n    }\n\n    /**\n     * Number of results found\n     * @type {Number}\n     * @readonly\n     */\n    get foundCount() {\n        return this.found?.length ?? 0;\n    }\n\n    /**\n     * Found results (as returned by Store#findByField), an array in format { index: x, data: record }\n     * @member {StoreSearchResult[]} found\n     * @readonly\n     */\n\n    //endregion\n\n    //region Navigation\n\n    /**\n     * Go to specified hit.\n     * @param {Number} index\n     */\n    gotoHit(index) {\n        const nextHit = this.found[index];\n\n        if (nextHit) {\n            this.grid.focusCell({\n                columnId : this.columnId,\n                id       : nextHit.id\n            }, { doSelect : true });\n        }\n\n        return !!nextHit;\n    }\n\n    gotoClosestHit(focusedCell, found) {\n        const\n            focusedIndex = focusedCell ? this.grid.store.indexOf(focusedCell.id) : 0,\n            foundSorted  = found.slice().sort(\n                (a, b) => Math.abs(a.index - focusedIndex) - Math.abs(b.index - focusedIndex)\n            );\n\n        this.gotoHit(found.indexOf(foundSorted[0]));\n    }\n\n    /**\n     * Go to the first hit.\n     */\n    gotoFirstHit() {\n        this.gotoHit(0);\n    }\n\n    /**\n     * Go to the last hit.\n     */\n    gotoLastHit() {\n        this.gotoHit(this.found.length - 1);\n    }\n\n    /**\n     * Select the next hit, scrolling it into view. Triggered with [f3] or [ctrl]/[cmd] + [g].\n     */\n    gotoNextHit() {\n        const\n            me           = this,\n            { grid }     = me,\n            // start from focused cell, or if focus has left grid use lastFocusedCell\n            currentId    = grid._focusedCell?.id ?? grid.lastFocusedCell?.id,\n            currentIndex = grid.store.indexOf(currentId) || 0,\n            nextHit      = me.found.find(hit => hit.index > currentIndex);\n\n        if (nextHit) {\n            grid.focusCell({\n                columnId : me.columnId,\n                id       : nextHit.id\n            }, { doSelect : true });\n        }\n        else {\n            me.gotoFirstHit();\n        }\n    }\n\n    /**\n     * Select the previous hit, scrolling it into view. Triggered with [shift] + [f3] or [shift] + [ctrl]/[cmd] + [g].\n     */\n    gotoPrevHit() {\n        const\n            me              = this,\n            { grid, found } = me,\n            currentId       = grid._focusedCell?.id ?? grid.lastFocusedCell?.id,\n            currentIndex    = grid.store.indexOf(currentId) || 0;\n\n        let prevHit;\n\n        if (!found.length) {\n            return;\n        }\n\n        for (let i = found.length - 1; i--; i >= 0) {\n            if (found[i].index < currentIndex) {\n                prevHit = found[i];\n                break;\n            }\n        }\n\n        if (prevHit) {\n            grid.focusCell({\n                columnId : me.columnId,\n                id       : prevHit.id\n            }, { doSelect : true });\n        }\n        else {\n            me.gotoLastHit();\n        }\n    }\n\n    //endregion\n\n    //region Render\n\n    /**\n     * Called from SubGrid when a cell is rendered.\n     * @private\n     */\n    renderCell({ cellElement, column, record }) {\n        const\n            me           = this,\n            { classList } = cellElement,\n            {\n                treeWalker,\n                findRe,\n                hitTextCls\n            }           = me,\n            hitIndex    = me.columnId === column.id && me.foundMap?.[record.id];\n\n        if (hitIndex) {\n            // highlight cell\n            classList.add(me.hitCls);\n            cellElement.isQuickHit = true;\n            cellElement._originalContent = cellElement.innerHTML;\n\n            // if features have added other stuff to the cell, value is in div.b-grid-cell-value\n            // highlight in cell if found in innerHTML\n            const inner = treeWalker.currentNode = DomHelper.down(cellElement, '.b-grid-cell-value,.b-tree-cell-value') || cellElement;\n\n            for (let textNode = treeWalker.nextNode(); textNode && inner.contains(textNode);) {\n                const\n                    nodeToReplace = textNode,\n                    textContent   = textNode.nodeValue,\n                    newText       = ['<span>'];\n\n                // Move onto next text node before we replace the node with a highlight HTML sequence\n                textNode = treeWalker.nextNode();\n\n                let offset = findRe.lastIndex;\n\n                // Convert textContent into an innerHTML string which htmlEncodes the text and embeds\n                // a highlighting span which contains the target text.\n                for (let match = findRe.exec(textContent); match; match = findRe.exec(textContent)) {\n                    const\n                        preamble    = textContent.substring(offset, match.index),\n                        spaceBefore = match[1] ? '\\xa0' : '',\n                        v           = match[2],\n                        spaceAfter  = match[3] ? '\\xa0' : '';\n\n                    newText.push(`${StringHelper.encodeHtml(preamble)}${spaceBefore}<span class=\"${hitTextCls}\">${v}</span>${spaceAfter}`);\n                    offset = findRe.lastIndex;\n                }\n\n                newText.push(StringHelper.encodeHtml(textContent.substring(offset)), '</span>');\n\n                // Insert a fragment with each match wrapped with a span.\n                nodeToReplace.parentNode.insertBefore(DomHelper.createElementFromTemplate(newText.join(''), {\n                    fragment : true\n                }), nodeToReplace);\n                nodeToReplace.remove();\n            }\n            DomHelper.createElement({\n                parent    : cellElement,\n                className : me.hitCellBadgeCls,\n                text      : hitIndex\n            });\n        }\n    }\n\n    //endregion\n\n    //region Events\n\n    onBackspace(event) {\n        const me = this;\n        if (me.find) {\n            me.find = me.find.substr(0, me.find.length - 1);\n            me.search(me.find);\n            return true;\n        }\n        return false;\n    }\n\n    clearSearch() {\n        if (this.find) {\n            this.find = '';\n            this.search(this.find);\n            return true;\n        }\n        return false;\n    }\n\n    showFilterEditor() {\n        const\n            me = this,\n            { filter } = me.client.features;\n\n        if (filter && me.columnId && me.foundCount) {\n            me.clear();\n            filter.showFilterEditor(me.client.columns.getById(me.columnId), me.find);\n        }\n    }\n\n    /**\n     * Chained function called on grids keypress event. Handles input for \"searchfield\".\n     * @private\n     * @param event\n     */\n    onElementKeyPress(event) {\n        const\n            me              = this,\n            { grid }        = me,\n            { focusedCell } = grid;\n\n        // Only react to keystrokes on grid cell elements\n        if (!event.handled && !me.disabled && focusedCell?.record && !focusedCell.isActionable && event.key?.length === 1) {\n            const column = grid.columns.getById(grid._focusedCell.columnId);\n            // if trying to search in invalid column, it's a hard failure\n            //<debug>\n            console.assert(column, 'Focused cell column not found');\n            //</debug>\n            if (column && column.searchable !== false) {\n                me.columnId = grid._focusedCell.columnId;\n                me.find += event.key;\n                me.search(me.find);\n            }\n        }\n    }\n\n    onCellNavigate(grid, fromCellSelector, toCellSelector) {\n        const\n            me    = this;\n\n        if (me.find && (!toCellSelector || toCellSelector.columnId !== me.columnId)) {\n            me.clear();\n        }\n    }\n\n    //endregion\n}\n\nGridFeatureManager.registerFeature(QuickFind);\n", "import InstancePlugin from '../../Core/mixin/InstancePlugin.js';\nimport GridFeatureManager from '../feature/GridFeatureManager.js';\nimport DomHelper from '../../Core/helper/DomHelper.js';\nimport EventHelper from '../../Core/helper/EventHelper.js';\nimport Objects from '../../Core/helper/util/Objects.js';\nimport '../column/ActionColumn.js';\n\n/**\n * @module Grid/feature/RowExpander\n */\n\nconst storeRemoveActions = { remove : 1, filter : 1, dataset : 1, replace : 1 };\n\n/**\n * Enables expanding of Grid rows by either row click or double click, or by adding a separate Grid column which renders\n * a button that expands or collapses the row.\n *\n * {@inlineexample Grid/feature/RowExpander.js}\n *\n * The content of the expanded row body is rendered by providing a {@link #config-renderer} function to the\n * rowExpander feature config.\n *\n * ```javascript\n * new Grid({\n *    features : {\n *        rowExpander : {\n *            renderer({record, region, expanderElement}){\n *                return htmlToBeExpanded;\n *            }\n *        }\n *    }\n * });\n * ```\n *\n * <div class=\"note\">Note that if used in a Gantt, the Gant's `fixedRowHeight` must be set to `false`.</div>\n *\n * This feature is **disabled** by default\n *\n * ## Expand on click\n * Set {@link #config-triggerEvent} to a Grid cell event that should trigger row expanding and collapsing.\n *\n * ```javascript\n * new Grid({\n *    features : {\n *        rowExpander : {\n *            triggerEvent: 'celldblclick',\n *            renderer...\n *        }\n *    }\n * });\n * ```\n *\n * ## Expander column position\n * The expander column can either be inserted before or after the existing Grid columns. If the Grid has multiple\n * regions the column will be added to the first region.\n *\n * Adjust expander column position to last in a specific Grid region by setting {@link #config-columnPosition}\n * to `last` and configuring the {@link #config-column} with a region name.\n *\n * ```javascript\n * new Grid({\n *    features : {\n *        rowExpander : {\n *            column: {\n *                region: 'last'\n *            },\n *            columnPosition: 'last',\n *            renderer...\n *        }\n *    }\n * });\n * ```\n *\n * ## Record update\n * If the expander content depends on row record data, the expander can be re-rendered on record update by setting\n * {@link #config-refreshOnRecordChange} to `true`.\n * ```javascript\n * new Grid({\n *    features : {\n *        rowExpander : {\n *            refreshOnRecordChange: true,\n *            renderer...\n *        }\n *    }\n * });\n * ```\n *\n * ## Async\n * When the content of the row expander should be rendered async just see to it that you return a promise.\n * ```javascript\n * new Grid({\n *    features : {\n *        rowExpander : {\n *            async renderer({record, region, expanderElement}){\n *                return fetchFromBackendAndRenderData(record);\n *            }\n *        }\n *    }\n * });\n * ```\n *\n * @extends Core/mixin/InstancePlugin\n * @classtype rowExpander\n * @feature\n */\nexport default class RowExpander extends InstancePlugin {\n\n    //region Config\n    static $name = 'RowExpander';\n\n    // Cannot use `static properties = {}`, new Map/Set would pollute the prototype\n    static get properties() {\n        return {\n            // CSS classes\n            expanderBodyClass : 'b-rowexpander-body',\n            expandedRowClass  : 'b-rowexpander-row-expanded', // Map where the keys are the expanded records and values are an object {rowHeight, cellHeight, expandElements}\n            recordStateMap    : new Map(),\n            collapsingRecords : new Set()\n        };\n    }\n\n    static configurable = {\n\n        /**\n         * The implementation of this function is called each time the body of an expanded row is rendered. Either\n         * return an HTML string, or a {@link Core.helper.DomHelper#typedef-DomConfig} object describing the markup.\n         *\n         * ```javascript\n         * new Grid({\n         *    features : {\n         *        rowExpander : {\n         *            renderer({record, region, expanderElement}){\n         *                return htmlToBeExpanded;\n         *            }\n         *        }\n         *    }\n         * });\n         * ```\n         *\n         * Or return a {@link Core.helper.DomHelper#typedef-DomConfig} object.\n         *\n         * ```javascript\n         * new Grid({\n         *    features : {\n         *        rowExpander : {\n         *            renderer({record, region, expanderElement}){\n         *                return {\n         *                   tag       : 'form',\n         *                   className : 'expanded-row-form',\n         *                   children  : [\n         *                       {\n         *                           tag        : 'textarea',\n         *                           name       : 'description',\n         *                           className  : 'expanded-textarea'\n         *                       },\n         *                       {\n         *                           tag        : 'button',\n         *                           text       : 'Save',\n         *                           className  : 'expanded-save-button',\n         *                       }\n         *                   ]\n         *                };\n         *            }\n         *        }\n         *    }\n         * });\n         * ```\n         *\n         * It is also possible to add markup directly to the expanderElement.\n         *\n         * ```javascript\n         * new Grid({\n         *    features : {\n         *        rowExpander : {\n         *            renderer({record, region, expanderElement}){\n         *                new UIComponent({\n         *                    appendTo: expanderElement,\n         *                    ...\n         *                });\n         *            }\n         *        }\n         *    }\n         * });\n         * ```\n         * The renderer function can also be asynchronous.\n         *\n         * ```javascript\n         * new Grid({\n         *    features : {\n         *        rowExpander : {\n         *            async renderer({record, region, expanderElement}){\n         *                return await awaitAsynchronousOperation();\n         *            }\n         *        }\n         *    }\n         * });\n         * ```\n         * @param {Object} renderData Object containing renderer parameters\n         * @param {Core.data.Model} renderData.record Record for the row\n         * @param {HTMLElement} renderData.expanderElement Expander body element\n         * @param {HTMLElement} renderData.rowElement Row element\n         * @param {String} renderData.region Grid region name\n         * @returns {String|DomConfig} Row expander body content\n         * @config {Function}\n         * @async\n         */\n        renderer : null,\n\n        /**\n         * The name of the Grid event that will toggle expander. Defaults to `null` but can be set to any event such\n         * as {@link Grid.view.mixin.GridElementEvents#event-cellDblClick} or\n         * {@link Grid.view.mixin.GridElementEvents#event-cellClick}.\n         *\n         * ```javascript\n         * features : {\n         *     rowExpander : {\n         *         triggerEvent : 'cellclick'\n         *     }\n         * }\n         * ```\n         *\n         * @config {String}\n         */\n        triggerEvent : null,\n\n        /**\n         * Provide a column config object to display a button with expand/collapse functionality.\n         * Shown by default, set to `null` to not include.\n         *\n         * ```javascript\n         * new Grid({\n         *    features : {\n         *        rowExpander : {\n         *            column: {\n         *                // Use column config options here\n         *                region: 'last'\n         *            }\n         *        }\n         *    }\n         * });\n         * ```\n         *\n         * @config {ActionColumnConfig|Grid.column.ActionColumn}\n         */\n        column : { },\n\n        /**\n         * Makes the expand/collapse button column appear either as the first column (default or `first`) or as the\n         * last (set to `last`). Note that the column by default will be added to the first region, if the Grid\n         * has multiple regions. Use the {@link #config-column} config to change region.\n         * @config {String}\n         * @default\n         */\n        columnPosition : 'first',\n\n        /**\n         * If set to `true`, the RowExpander will, on record update, re-render an expanded row by calling the\n         * {@link #config-renderer} function.\n         * @config {Boolean}\n         * @default\n         */\n        refreshOnRecordChange : false,\n\n        /**\n         * Use this for customizing async {@link #config-renderer} loading indicator height.\n         * @config {Number}\n         * @defalt\n         */\n        loadingIndicatorHeight : 100,\n\n        /**\n         * Use this for customizing async {@link #config-renderer} loading indicator text.\n         * @config {String}\n         * @default Loading\n         */\n        loadingIndicatorText : 'L{loading}',\n\n        /**\n         * Use this to disable expand and collapse animations.\n         * @config {Boolean}\n         * @default\n         */\n        enableAnimations : true\n    };\n\n    // Plugin configuration. This plugin chains/overrides some of the functions in Grid.\n    static get pluginConfig() {\n        return {\n            chain    : ['afterColumnsChange', 'beforeRenderRow', 'processRowHeight', 'bindStore'],\n            override : ['onGridBodyFocusIn']\n        };\n    }\n\n    //endregion\n\n    //region Init\n\n    afterConstruct() {\n        const\n            me         = this,\n            { client } = me;\n        if (!me.renderer) {\n            console.warn('RowExpander requires implementing the renderer function.');\n            return;\n        }\n        if (client.isGanttBase && client.fixedRowHeight !== false) {\n            console.warn('When using RowExpander on a Gantt, the Gantt`s fixedRowHeight config must be set to false.');\n        }\n\n        // Bind initial store\n        me.bindStore(client.store);\n\n        if (me.triggerEvent) {\n            client.ion({ [me.triggerEvent] : 'onTriggerEvent', thisObj : me });\n        }\n\n        me.addColumn();\n    }\n\n    bindStore(store) {\n        const me = this;\n\n        me.recordStateMap.clear();\n        me.collapsingRecords.clear();\n        me.detachListeners('clientStoreChange');\n\n        store.ion({\n            name    : 'clientStoreChange',\n            change  : me.onStoreChange,\n            thisObj : me\n        });\n    }\n\n    doDisable(disable) {\n        const { client } = this;\n\n        if (disable) {\n            this.recordStateMap.clear();\n            this.collapsingRecords.clear();\n        }\n\n        if (!client.isConfiguring) {\n            client.rowManager.renderFromRow();\n        }\n        super.doDisable(disable);\n    }\n\n    changeLoadingIndicatorText(text) {\n        return text ? this.L(text) : text;\n    }\n\n    // Overrides onGridBodyFocusIn to ignore events on row expander body.\n    onGridBodyFocusIn(event) {\n        if (!this.client.lastMousedownEvent?.target?.closest('.b-rowexpander-body')) {\n            this.overridden.onGridBodyFocusIn(event);\n        }\n    }\n\n    get isAnimating() {\n        return this.client.isAnimating;\n    }\n\n    set isAnimating(value) {\n        const\n            { client }   = this,\n            wasAnimating = client.isAnimating;\n\n        client.isAnimating = value;\n\n        if (client.isAnimating !== wasAnimating) {\n            client.element.classList.toggle('b-rowexpander-animating');\n        }\n    }\n\n    //endregion\n\n    //region Events\n    /**\n     * This event fires before row expand is started.\n     *\n     * Returning `false` from a listener prevents the RowExpander to expand the row.\n     *\n     * Note that this event fires when the RowExpander toggles the row, not when the actual row expander body is\n     * rendered. Most of the time this is synchronous, but in the case of a row that is not yet rendered into view by\n     * scrolling, it can happen much later.\n     *\n     * @event beforeExpand\n     * @preventable\n     * @async\n     * @param {Core.data.Model} record Record\n     */\n\n    /**\n     * This event fires before row collapse is started.\n     *\n     * Returning `false` from a listener prevents the RowExpander to collapse the row.\n     *\n     * Note that this event fires when the RowExpander toggles the row, not when the actual row expander body is\n     * rendered. Most of the time this is synchronous, but in the case of a row that is not yet rendered into view by\n     * scrolling, it can happen much later.\n     *\n     * @event beforeCollapse\n     * @preventable\n     * @async\n     * @param {Core.data.Model} record Record\n     */\n    //endregion\n\n    //region ExpanderColumn\n    afterColumnsChange() {\n        this.addColumn();\n    }\n\n    changeColumn(config) {\n        if (config == null) {\n            return config;\n        }\n        return {\n            type    : 'action',\n            actions : [{\n                cls     : 'b-icon b-icon-collapse-down',\n                tooltip : ({ record }) => this.L(this.recordStateMap.has(record) ? 'L{RowExpander.collapse}' : 'L{RowExpander.expand}'),\n                onClick : ({ record }) => this.toggleExpand(record)\n            }],\n            width    : 40,\n            hideable : false,\n            align    : 'center',\n            region   : this.client.regions[0],\n            ...config,\n            field    : 'expanderActionColumn'\n        };\n    }\n\n    // Called in construct and if grid columns change\n    addColumn() {\n        const\n            me = this,\n            { column } = me,\n            { columns } = me.client;\n\n        if (!me._isAddingExpanderColumn && column && (!me._expander || !columns.includes(me._expander))) {\n            me._isAddingExpanderColumn = true;\n            if (me.columnPosition === 'last') {\n                [me._expander] = columns.add(column);\n            }\n            else {\n                [me._expander] = columns.insert(0, column);\n            }\n            me._isAddingExpanderColumn = false;\n        }\n    }\n    //endregion\n\n    //region UI events\n\n    onTriggerEvent({ target }) {\n        // Only grid cell event is handled. Action-cell event has its own handler.\n        if (this.disabled || target?.closest('.b-action-cell') || !target.closest('.b-grid-cell')) {\n            return;\n        }\n        this.toggleExpand(this.client.getRecordFromElement(target));\n    }\n\n    /**\n     * Toggles expander state.\n     * @private\n     * @param {Core.data.Model} record The record that should be toggled\n     * @category Internal\n     */\n    toggleExpand(record) {\n        if (record) {\n            if (this.recordStateMap.has(record)) {\n                this.collapse(record);\n            }\n            else {\n                this.expand(record);\n            }\n        }\n    }\n\n    //endregion\n\n    //region Rendering\n\n    /**\n     * Listens to changes in the Grid Store. Will remove expand State data on Store removal.\n     * If the refreshOnRecordChange config is `true`, it will trigger a re-render of the expander.\n     * @private\n     * @param {String} action\n     * @param {Core.data.Store} source\n     * @param {Core.data.Model[]} records\n     * @category Internal\n     */\n    onStoreChange({ action, source, records }) {\n        const\n            me = this,\n            { recordStateMap, collapsingRecords } = me;\n        if (me.disabled) {\n            return;\n        }\n        if (action === 'removeAll') {\n            recordStateMap.clear();\n            collapsingRecords.clear();\n        }\n        else if (storeRemoveActions[action]) {\n            for (const [record] of recordStateMap) {\n                if (!source.includes(record)) {\n                    recordStateMap.delete(record);\n                    collapsingRecords.delete(record);\n                }\n            }\n        }\n        else if (me.refreshOnRecordChange && records?.length) {\n            if (action === 'update') {\n                const recordState = recordStateMap.get(records[0]);\n                if (recordState?.isCreated) {\n                    recordState.isCreated = false;\n                    me.client.rowManager.renderFromRecord(records[0]);\n                }\n            }\n            else if (action === 'updatemultiple') {\n                let topRecordIndex,\n                    topRecord;\n                for (const rec of records) {\n                    const recordState = recordStateMap.get(rec);\n                    if (recordState?.isCreated) {\n                        recordState.isCreated = false;\n                        const index = source.records.indexOf(rec);\n                        if (!topRecord || topRecordIndex > index) {\n                            topRecordIndex = index;\n                            topRecord = rec;\n                        }\n                    }\n                }\n                if (topRecord) {\n                    me.client.rowManager.renderFromRecord(topRecord);\n                }\n            }\n        }\n    }\n\n    // Implements grid.processRowHeight hook\n    processRowHeight(record, height) {\n        const recordState = this.recordStateMap.get(record);\n        if (recordState) {\n            // If we are waiting for async rendering, height is calculated from a fixed loadingIndicatorHeight.\n            if (!recordState.isCreated && recordState.isRenderingAsync) {\n                return this.loadingIndicatorHeight + height;\n            }\n            // If we have a recordState but no expanderBodyHeight, we should recalculate height.\n            if (!recordState.expanderBodyHeight) {\n                for (const region of this.client.regions) {\n                    const height = recordState.expandElements[region].offsetHeight;\n                    if (height > recordState.expanderBodyHeight) {\n                        recordState.expanderBodyHeight = height;\n                    }\n                }\n            }\n        }\n        return (recordState?.expanderBodyHeight ?? 0) + height;\n    }\n\n    /**\n     * Hooks on before row render to render or remove row expander content depending on record state.\n     * @private\n     * @category Internal\n     */\n    beforeRenderRow({ row, record }) {\n        const\n            me = this,\n            { regions } = me.client,\n            { expandedRowClass } = me;\n\n        row.cls.toggle('b-rowexpander-disabled', me.disabled);\n\n        // If current row is expanded, always remove all expander content and settings.\n        if (row.cls[expandedRowClass]) {\n            // If animating a collapse, content should not be removed until animation is complete\n            if (me.enableAnimations && me.isAnimating && me.collapsingRecords.has(record)) {\n                me.waitForTransition(row, () => {\n                    // Make sure record still should be collapsed after animation is complete\n                    if (me.collapsingRecords.has(record)) {\n                        me.removeExpander(row);\n                    }\n                });\n            }\n            else {\n                me.removeExpander(row);\n            }\n        }\n        else {\n            // Makes sure record should collapse no longer\n            me.collapsingRecords.delete(record);\n        }\n\n        // The map only contains record that are expanded\n        const recordState = me.recordStateMap.get(record);\n        if (!me.disabled && recordState) {\n            // Expander content is created once, then reused.\n            if (!recordState.isCreated) {\n                me.renderExpander(record, row, recordState);\n            }\n            row.cls.add(expandedRowClass);\n            for (const region of regions) {\n                const rowElement = row.getElement(region);\n                if (recordState.isCreated) {\n                    rowElement.appendChild(recordState.expandElements[region]);\n                }\n                else {\n                    // If the renderer is async, we show a loading indicator.\n                    me.renderLoadingIndicator(rowElement, recordState);\n                }\n                me.lockCellHeight(rowElement, recordState.cellHeight, false);\n            }\n\n            // If expander body is rendered not fully in view, it will be scrolled into view\n            if (me._shouldScrollIntoView) {\n                me._shouldScrollIntoView = false;\n                if (!DomHelper.isInView(recordState.expandElements[regions[0]], true)) {\n                    // Waits for rendering to complete, then scrolls\n                    me.client.rowManager.ion({\n                        once       : true,\n                        thisObj    : me,\n                        renderDone : () => me.scrollRowIntoView(row, record)\n                    });\n                }\n            }\n        }\n    }\n\n    /**\n     * Scrolls expanded row into view. This function is called after rowManager has finished rendering.\n     * @private\n     * @category Internal\n     */\n    scrollRowIntoView(row, record) {\n        // If animating expand, need to wait for the animation to end before scrolling.\n        if (this.isAnimating) {\n            this.waitForTransition(row, () => this.client.scrollRowIntoView(record));\n        }\n        else {\n            this.client.scrollRowIntoView(record);\n        }\n    }\n\n    /**\n     * Waits for height transition on the provided rows element. Then calls provided function.\n     * @private\n     * @category Internal\n     */\n    waitForTransition(row, fn) {\n        EventHelper.onTransitionEnd({\n            element  : row.element,\n            property : 'height',\n            handler  : fn,\n            thisObj  : this\n        });\n    }\n\n    removeExpander(row) {\n        row.cls.remove(this.expandedRowClass);\n        for (const region of this.client.regions) {\n            const rowElement = row.getElement(region);\n            // If this function is called after animation finished, we need to remove class `manually`\n            rowElement.classList.remove(this.expandedRowClass);\n            DomHelper.removeEachSelector(rowElement, '.' + this.expanderBodyClass);\n            this.lockCellHeight(rowElement, null, false);\n        }\n    }\n\n    renderLoadingIndicator(rowElement, recordState) {\n        DomHelper.createElement({\n            parent    : rowElement,\n            className : this.expanderBodyClass + ' b-rowexpander-loading',\n            style     : {\n                top    : recordState.cellHeight,\n                height : this.loadingIndicatorHeight\n            },\n            children : [\n                {\n                    tag       : 'i',\n                    className : 'b-icon b-icon-spinner'\n                },\n                this.loadingIndicatorText\n            ]\n        });\n    }\n\n    /**\n     * Creates expander element for each grid region and calls the renderer, also for each grid region.\n     * @private\n     * @param {Core.data.Model} record\n     * @param {Grid.row.Row} row\n     * @param {Object} recordState\n     * @category Internal\n     */\n    renderExpander(record, row, recordState) {\n        const\n            me                = this,\n            cellHeight        = row.cells[0]?.offsetHeight,\n            expandElements    = {},\n            renderings        = [],\n            // Will be called sync or async depending on the implementation of the renderer function.\n            continueRendering = (content, expanderElement, region) => {\n                if (content != null) {\n                    if (typeof content === 'string') {\n                        expanderElement.innerHTML = content;\n                    }\n                    // Everything else will be treated as a dom config for now\n                    else {\n                        content = DomHelper.createElement(content);\n                        expanderElement.appendChild(content);\n                    }\n                }\n                expandElements[region] = expanderElement;\n            };\n\n        // If another rendering of the same record is made while waiting for async, we should ignore it.\n        if (recordState.isRenderingAsync) {\n            return;\n        }\n\n        Object.assign(recordState, { cellHeight, expandElements, expanderBodyHeight : 0 });\n\n        for (const region of me.client.regions) {\n            const rowElement = row.getElement(region);\n\n            // class needed at this point to give the expander container correct height\n            row.addCls(me.expandedRowClass);\n\n            // Create expand container\n            // Expander element needs to be in the DOM for appendTo to work correctly\n            const expanderElement = DomHelper.createElement({\n                parent    : rowElement,\n                tabIndex  : -1,\n                className : me.expanderBodyClass,\n                style     : {\n                    top : cellHeight + 'px'\n                }\n            });\n\n            // The renderer can be async or sync\n            const renderResponse = me.renderer({ record, expanderElement, rowElement, region });\n            if (Objects.isPromise(renderResponse)) {\n                renderings.push(renderResponse.then((content) => continueRendering(content, expanderElement, region)));\n            }\n            else {\n                continueRendering(renderResponse, expanderElement, region);\n            }\n        }\n\n        // If we have async renderer, wait for all to complete\n        if (renderings.length) {\n            recordState.isRenderingAsync = true;\n            Promise.all(renderings).then(() => {\n                // Flag that indicates the completion of expand rendering\n                recordState.isCreated = true;\n                // The rows need to refresh to recalculate row height\n                // (?. since we might have been destroyed while waiting for promises)\n                me.renderRowsWithAnimation?.(record);\n                recordState.isRenderingAsync = false;\n            });\n        }\n        else {\n            recordState.isCreated = true;\n        }\n    }\n\n    /**\n     * Called when grid rows needs to re-render, for example on expand or collapse.\n     * Activates animations on grid, and deactivates them when they are completed.\n     * @private\n     * @param {Core.data.Model} record Record whose row was toggled\n     * @category Internal\n     */\n    renderRowsWithAnimation(record) {\n        const me = this;\n        if (me.enableAnimations) {\n            const row = me.client.rowManager.getRowById(record);\n            if (row) {\n                me.isAnimating = true;\n                if (me.collapsingRecords.has(record)) {\n                    row.addCls('b-row-is-collapsing');\n                }\n                me.waitForTransition(row, () => {\n                    me.isAnimating = false;\n                    if (!row.isDestroyed) {\n                        row.removeCls?.('b-row-is-collapsing');\n                    }\n                });\n            }\n        }\n        me.client.rowManager.renderFromRecord(record);\n    }\n\n    /**\n     * Called when row is expanded. This function locks all cell's height to current height (before expanding).\n     * @private\n     * @param {HTMLElement} rowElement\n     * @param {Number} cellHeight The height to lock\n     * @param {Boolean} unlock To remove locked cell height when the row is collapsed\n     * @category Internal\n     */\n    lockCellHeight(rowElement, cellHeight, unlock) {\n        for (let a = 0; a < rowElement.children.length; a++) {\n            const child = rowElement.children[a];\n            // Should not lock expander element\n            if (!child.classList.contains(this.expanderBodyClass)) {\n                child.style.height = unlock ? '' : cellHeight + 'px';\n            }\n        }\n    }\n    //endregion\n\n    //region Public\n\n    /**\n     * Tells the RowExpander that the provided record should be expanded. If or when the record is rendered into view,\n     * the record will be expanded.\n     *\n     * @param {Core.data.Model} record Record whose row should be expanded\n     * @category Common\n     */\n    async expand(record) {\n        const me = this;\n        if (me.disabled) {\n            return;\n        }\n\n        if (await me.trigger('beforeExpand', { record }) === false) {\n            return;\n        }\n        // Tells renderer that this record should be expanded\n        me.recordStateMap.set(record, { isCreated : false });\n        // In the event that we have expanded a record which is in collapsing animation state\n        me.collapsingRecords.delete(record);\n        me._shouldScrollIntoView = true;\n        me.renderRowsWithAnimation(record);\n    }\n\n    /**\n     * Tells the RowExpander that the provided record should be collapsed. If the record is in view, it will be\n     * collapsed. If the record is not in view, it will simply not be expanded when rendered into view.\n     *\n     * @param {Core.data.Model} record Record whose row should be collapsed\n     * @category Common\n     */\n    async collapse(record) {\n        const me = this;\n        if (me.disabled) {\n            return;\n        }\n\n        if (await me.trigger('beforeCollapse', { record }) === false) {\n            return;\n        }\n        me.recordStateMap.delete(record);\n        me.collapsingRecords.add(record);\n        me.renderRowsWithAnimation(record);\n    }\n    //endregion\n}\n\nGridFeatureManager.registerFeature(RowExpander);\n", "import DomHelper from '../../Core/helper/DomHelper.js';\nimport InstancePlugin from '../../Core/mixin/InstancePlugin.js';\nimport DomDataStore from '../../Core/data/DomDataStore.js';\nimport GridFeatureManager from './GridFeatureManager.js';\nimport Delayable from '../../Core/mixin/Delayable.js';\nimport StringHelper from '../../Core/helper/StringHelper.js';\n\n// <remove-on-release>\n// TODO: Should listen for store search also, to work the other way around\n// TODO: Buggy sometimes, try searching for Barcelona tigers, navigate using buttons\n// TODO: Allow regex\n// TODO: Optional case sensitive\n// TODO: build in UI, popup with keyboard shortcut?\n// </remove-on-release>\n\n/**\n * @module Grid/feature/Search\n */\n\n/**\n * {@inlineexample Grid/feature/Search.js}\n *\n * Feature that allows the user to search the entire grid. Navigate between hits using the\n * keyboard, [F3] or [Ctrl/CMD + G] moves to next, also pressing [Shift] moves to previous.\n *\n * Note that this feature does not include a UI, please build your own and call appropriate methods in the feature.\n * For a demo implementation, see <a href=\"../examples/search/\" target=\"_blank\">Search example</a>.\n *\n * This feature is <strong>disabled</strong> by default.\n *\n * ## Keyboard shortcuts\n *\n * This feature has the following default keyboard shortcuts:\n *\n * | Keys               | Action        | Action description                |\n * |--------------------|---------------|-----------------------------------|\n * | `F3`               | *goToNextHit* | Move focus to next search hit     |\n * | `Shift`+`F3`       | *goToPrevHit* | Move focus to previous search hit |\n * | `Ctrl`+`G`         | *goToNextHit* | Move focus to next search hit     |\n * | `Ctrl`+`Shift`+`G` | *goToPrevHit* | Move focus to previous search hit |\n *\n * <div class=\"note\">Please note that <code>Ctrl</code> is the equivalent to <code>Command</code> and <code>Alt</code>\n * is the equivalent to <code>Option</code> for Mac users</div>\n *\n * For more information on how to customize keyboard shortcuts, please see\n * [our guide](#Grid/guides/customization/keymap.md)\n *\n * @extends Core/mixin/InstancePlugin\n *\n * @example\n * // enable Search\n * let grid = new Grid({\n *   features: {\n *     search: true\n *   }\n * });\n *\n * // perform search\n * grid.features.search.search('steve');\n *\n * @demo Grid/search\n * @classtype search\n * @feature\n */\nexport default class Search extends Delayable(InstancePlugin) {\n    //region Init\n\n    static get $name() {\n        return 'Search';\n    }\n\n    static get configurable() {\n        return {\n            /**\n             * The maximum amount of search hits\n             * @config {Number}\n             * @default\n             */\n            limit : 1000,\n\n            /**\n             * Set to false to not show the search hit index numbers\n             * @config {Boolean}\n             * @default\n             */\n            showHitIndex : true,\n\n            /**\n             * See {@link #keyboard-shortcuts Keyboard shortcuts} for details\n             * @config {Object<String,String>}\n             */\n            keyMap : {\n                F3             : 'gotoNextHit',\n                'Ctrl+g'       : 'gotoNextHit',\n                'Shift+F3'     : 'gotoPrevHit',\n                'Ctrl+Shift+g' : 'gotoPrevHit'\n            }\n        };\n    }\n\n    static get properties() {\n        return {\n            hitCls          : 'b-search-hit',\n            hitCellCls      : 'b-search-hit-cell',\n            hitCellBadgeCls : 'b-search-hit-cell-badge',\n            hitTextCls      : 'b-search-hit-text'\n        };\n    }\n\n    construct(grid, config) {\n        const me = this;\n\n        super.construct(grid, config);\n\n        Object.assign(me, {\n            grid,\n            text       : '',\n            hitEls     : [],\n            treeWalker : grid.setupTreeWalker(grid.element, DomHelper.NodeFilter.SHOW_TEXT, () => DomHelper.NodeFilter.FILTER_ACCEPT)\n        });\n\n        // When new nodes appear due to node expand, include them in the search\n        grid.ion({\n            expandNode : 'onTreeNodeExpand',\n            thisObj    : me\n        });\n    }\n\n    isActionAvailable() {\n        return Boolean(this.text);\n    }\n\n    onTreeNodeExpand() {\n        if (this.text) {\n            this.requestAnimationFrame(this.search, [this.text, false, true]);\n        }\n    }\n\n    doDestroy() {\n        this.clear(true);\n        super.doDestroy();\n    }\n\n    doDisable(disable) {\n        if (disable) {\n            this.clear();\n        }\n\n        super.doDisable(disable);\n    }\n\n    get store() {\n        return this.grid.store;\n    }\n\n    //endregion\n\n    //region Plugin config\n\n    // Plugin configuration. This plugin chains some of the functions in Grid.\n    static get pluginConfig() {\n        return {\n            chain : ['populateCellMenu']\n        };\n    }\n\n    //endregion\n\n    //region Search\n\n    /**\n     * Performs a search and highlights hits.\n     * @param {String} text Text to search for\n     * @param {Boolean} [gotoHit] Go to first hit after search\n     * @param {Boolean} [reapply] Pass true to force search\n     * @param {String[]} [fields] An array of the fields to search for the value in\n     */\n    async search(text, gotoHit = true, reapply = false, fields) {\n        const me = this;\n\n        // empty search considered a clear\n        if (!text) {\n            return me.clear();\n        }\n\n        // searching for same thing again, do nothing\n        if (!reapply && text === me.text || me.disabled) {\n            return;\n        }\n\n        const\n            { grid, store } = me,\n            // Only search columns in use\n            columns         = grid.columns.visibleColumns.filter(col => col.searchable !== false),\n            formatters      = [];\n\n        fields      = fields || columns.map(col => {\n            // For date / number columns\n            formatters.push(col.formatValue?.bind(col));\n            return col.field;\n        });\n        const found = store.search(text, fields, formatters);\n\n        if (store.isTree && found.length) {\n            await grid.expandTo(found.map(hit => hit.id));\n        }\n\n        // Only include first result for merged cells in the count\n        for (const column of columns) {\n            if (column.mergeCells && column.isSorted) {\n                let prevValue = null,\n                    belongsTo = null;\n\n                for (const hit of found) {\n                    if (hit.field === column.field) {\n                        const value = hit.data[hit.field];\n                        if (value === prevValue) {\n                            hit.belongsTo = belongsTo;\n                        }\n                        prevValue = value;\n                        belongsTo = `${hit.field}-${hit.id}`;\n                    }\n                }\n            }\n        }\n\n        let i = 1;\n\n        Object.assign(me, {\n            foundMap  : {},\n            prevFound : me.found,\n            found,\n            text,\n            findRe    : new RegExp(`(\\\\s+)?(${StringHelper.escapeRegExp(String(text))})(\\\\s+)?`, 'ig')\n        });\n\n        me.clearHits();\n\n        if (!found) {\n            return;\n        }\n\n        // highlight hits for visible cells\n        for (const hit of found) {\n            // merged cells reuse the index of the first hit in the range\n            me.foundMap[`${hit.field}-${hit.id}`] = hit.belongsTo ? me.foundMap[hit.belongsTo] : i++;\n            // limit hits\n            if (i > me.limit) {\n                break;\n            }\n        }\n\n        if (!me.listenersInitialized) {\n            grid.rowManager.ion({\n                name       : 'renderCell',\n                renderCell : 'renderCell',\n                thisObj    : me\n            });\n            store.ion({\n                name                                : 'storeRefresh',\n                [`refresh${grid.asyncEventSuffix}`] : 'onStoreRefresh',\n                thisObj                             : me\n            });\n            me.listenersInitialized = true;\n        }\n\n        grid.refreshRows();\n\n        grid.trigger('search', { grid, find : text, found });\n\n        if (gotoHit && !me.isHitFocused) {\n            me.gotoNextHit(true);\n        }\n\n        return found;\n    }\n\n    clearHits() {\n        // Clear old hits\n        for (const cellElement of DomHelper.children(this.grid.element, '.' + this.hitCls)) {\n            cellElement.classList.remove(this.hitCls, this.hitCellCls);\n\n            // Rerender cell to remove search-hit-text\n            const row = DomDataStore.get(cellElement).row;\n\n            // Merged cells have no row, but they will be cleared anyway by their own DomSync call\n            if (row) {\n                // Need to force replace the markup\n                row.forceInnerHTML = true;\n                row.renderCell(cellElement);\n                row.forceInnerHTML = false;\n            }\n        }\n    }\n\n    /**\n     * Clears search results.\n     */\n    clear(silent = false) {\n        const\n            me       = this,\n            { grid } = me;\n\n        if (me.foundMap) {\n            delete me.foundMap;\n        }\n\n        me.text = null;\n\n        me.clearHits();\n\n        if (me.listenersInitialized) {\n            this.detachListeners('renderCell');\n            this.detachListeners('storeRefresh');\n            me.listenersInitialized = false;\n        }\n\n        if (!silent) {\n            grid.trigger('clearSearch', { grid });\n        }\n    }\n\n    /**\n     * Number of results found\n     * @readonly\n     * @property {Number}\n     */\n    get foundCount() {\n        return this.found?.length ?? 0;\n    }\n\n    //endregion\n\n    //region Navigation\n\n    /**\n     * Returns true if focused row is a hit\n     * @property {Boolean}\n     * @readonly\n     */\n    get isHitFocused() {\n        const\n            me              = this,\n            { grid }        = me,\n            { focusedCell } = grid;\n\n        if (focusedCell?.cell?.contains(DomHelper.getActiveElement(grid.element))) {\n            const { rowIndex, column } = focusedCell;\n\n            return rowIndex !== -1 && me.found.some(hit =>\n                hit.index === rowIndex && column && hit.field === column.field\n            );\n        }\n    }\n\n    /**\n     * Select the next hit, scrolling it into view. Triggered with [f3] or [ctrl]/[cmd] + [g].\n     */\n    gotoNextHit(fromStart = false) {\n        const\n            me = this;\n\n        if (!me.found?.length) return;\n\n        const\n            { grid, store } = me,\n            fromCell        = grid.focusedCell || grid.lastFocusedCell,\n            currentIndex    = fromCell && fromStart !== true ? store.indexOf(fromCell.record, undefined, true) : -1,\n            nextHit         = me.found.findIndex(hit => hit.index > currentIndex);\n\n        if (nextHit !== -1) {\n            me.gotoHit(nextHit);\n        }\n    }\n\n    /**\n     * Select the previous hit, scrolling it into view. Triggered with [shift] + [f3] or [shift] + [ctrl]/[cmd] + [g].\n     */\n    gotoPrevHit() {\n        const\n            me        = this,\n            { store } = me;\n\n        if (!me.found?.length) return;\n\n        const\n            { grid, found } = me,\n            fromCell        = grid.focusedCell || grid.lastFocusedCell,\n            currentIndex    = fromCell ? store.indexOf(fromCell.record, undefined, true) : 0;\n\n        for (let i = found.length - 1; i--; i >= 0) {\n            const hit = found[i];\n            if (hit.index < currentIndex) {\n                me.gotoHit(i);\n                break;\n            }\n        }\n    }\n\n    /**\n     * Go to specified hit.\n     * @param {Number} index\n     */\n    gotoHit(index) {\n        const\n            { grid } = this,\n            nextHit  = this.found[index];\n\n        if (nextHit) {\n            grid.focusCell({\n                field : nextHit.field,\n                id    : nextHit.id\n            });\n        }\n\n        return Boolean(nextHit);\n    }\n\n    /**\n     * Go to the first hit.\n     */\n    gotoFirstHit() {\n        this.gotoHit(0);\n    }\n\n    /**\n     * Go to the last hit.\n     */\n    gotoLastHit() {\n        this.gotoHit(this.found.length - 1);\n    }\n\n    //endregion\n\n    //region Render\n\n    /**\n     * Called from SubGrid when a cell is rendered. Highlights search hits.\n     * @private\n     */\n    renderCell({ cellElement, column, record, value }) {\n        const\n            me       = this,\n            {\n                treeWalker,\n                findRe,\n                hitTextCls,\n                showHitIndex\n            }        = me,\n            hitIndex = me.foundMap?.[column.field + '-' + record.id];\n\n        if (hitIndex) {\n            // highlight cell\n            cellElement.classList.add(me.hitCls);\n\n            // Remove any previous hit badge\n            showHitIndex && cellElement.querySelector(`.${me.hitCellBadgeCls}`)?.remove();\n\n            // highlight in cell if found in innerHTML\n            const inner = DomHelper.down(cellElement, '.b-grid-cell-value,.b-tree-cell-value') || cellElement;\n\n            if (String(value).toLowerCase() === String(me.text).toLowerCase()) {\n                inner.innerHTML = `<span class=\"${me.hitTextCls}\">${inner.innerHTML}</span>${showHitIndex ? `<div class=\"${me.hitCellBadgeCls}\">${hitIndex}</div>` : ''}`;\n            }\n            // Replace every occurrence of the text in every descendant text node with a span\n            // encapsulating the matched string.\n            else {\n                treeWalker.currentNode = inner;\n                for (let textNode = treeWalker.nextNode(); textNode && inner.contains(textNode);) {\n                    const\n                        nodeToReplace = textNode,\n                        textContent   = textNode.nodeValue,\n                        newText       = ['<span>'];\n\n                    // Move onto next text node before we replace the node with a highlihght HTML sequence\n                    textNode = treeWalker.nextNode();\n\n                    let offset = findRe.lastIndex;\n\n                    // Convert textContent into an innerHTML string which htmlEncodes the text and embeds\n                    // a highlighting span which contains the target text.\n                    for (let match = findRe.exec(textContent); match; match = findRe.exec(textContent)) {\n                        const\n                            preamble    = textContent.substring(offset, match.index),\n                            spaceBefore = match[1] ? '\\xa0' : '',\n                            v           = match[2],\n                            spaceAfter  = match[3] ? '\\xa0' : '';\n\n                        newText.push(`${StringHelper.encodeHtml(preamble)}${spaceBefore}<span class=\"${hitTextCls}\">${v}</span>${spaceAfter}`);\n                        offset = findRe.lastIndex;\n                    }\n\n                    newText.push(StringHelper.encodeHtml(textContent.substring(offset)), '<span>');\n\n                    // Insert a fragment with each match wrapped with a span.\n                    nodeToReplace.parentNode.insertBefore(DomHelper.createElementFromTemplate(newText.join(''), {\n                        fragment : true\n                    }), nodeToReplace);\n                    nodeToReplace.remove();\n                }\n\n                if (showHitIndex) {\n                    DomHelper.createElement({\n                        parent    : cellElement,\n                        className : me.hitCellBadgeCls,\n                        text      : hitIndex\n                    });\n                }\n            }\n\n            me.hitEls.push(cellElement);\n        }\n    }\n\n    //endregion\n\n    //region Context menu\n\n    /**\n     * Add search menu item to cell context menu.\n     * @param {Object} options Contains menu items and extra data retrieved from the menu target.\n     * @param {Grid.column.Column} options.column Column for which the menu will be shown\n     * @param {Core.data.Model} options.record Record for which the menu will be shown\n     * @param {Object<String,MenuItemConfig|Boolean|null>} options.items A named object to describe menu items\n     * @internal\n     */\n    populateCellMenu({ column, record, items, cellElement }) {\n        const me = this;\n\n        if (column.searchable) {\n            items.search = {\n                text        : 'L{searchForValue}',\n                localeClass : me,\n                icon        : 'b-fw-icon b-icon-search',\n                cls         : 'b-separator',\n                weight      : 200,\n                disabled    : me.disabled,\n                onItem      : () => {\n                    // <remove-on-release>\n                    // TODO: Only extract selection from current cell instead? Lazy way for now\n                    // </remove-on-release>\n                    let sel = globalThis.getSelection().toString();\n\n                    if (!sel) {\n                        sel = cellElement.innerText;\n                    }\n\n                    me.search(sel);\n                }\n            };\n        }\n    }\n\n    //endregion\n\n    //region Events\n\n    onStoreRefresh() {\n        this.search(this.text, false, true);\n    }\n\n    //endregion\n}\n\nSearch.featureClass = 'b-search';\n\nGridFeatureManager.registerFeature(Search);\n", "import DomHelper from '../../Core/helper/DomHelper.js';\nimport InstancePlugin from '../../Core/mixin/InstancePlugin.js';\nimport GridFeatureManager from '../feature/GridFeatureManager.js';\nimport Rectangle from '../../Core/helper/util/Rectangle.js';\n\n/**\n * @module Grid/feature/StickyCells\n */\n\n/**\n * A feature which pins configurable content from a grid row to the top of the grid\n * while the row scrolls off the top but is still visible.\n *\n * As soon as the row becomes too small to contain the content, it is unpinned, and\n * scrolls out naturally, and the following row's configured content becomes pinned.\n *\n * For example:\n *\n * ```javascript\n *     new Grid({\n *         features : {\n *             stickyCells : {\n *                 // Identifies elements to clone and pin to the grid top.\n *                 contentSelector : '.myClassName'\n *             }\n *         }\n *     });\n * ```\n *\n * @extends Core/mixin/InstancePlugin\n * @classtype stickyCells\n * @feature\n */\nexport default class StickyCells extends InstancePlugin {\n    //region Config\n\n    static get $name() {\n        return 'StickyCells';\n    }\n\n    static get defaultConfig() {\n        return {\n            /**\n             * A CSS selector which must identify the content within your grid row which you\n             * require to be pinned to the grid while the row if the topmost row, and remains visible.\n             * @config {String}\n             */\n            contentSelector : null,\n\n            currentTopRowCls : 'b-sticky-cells-current-top-row'\n        };\n    }\n\n    // Plugin configuration. This plugin chains some of the functions in Grid.\n    static get pluginConfig() {\n        return {\n            before : ['renderRows']\n        };\n    }\n    //endregion\n\n    //region Init\n\n    construct(grid, config) {\n        super.construct(grid, config);\n\n        // We cannot chain our client's onGridScroll because that is now a delayable injected method.\n        grid.ion({\n            scroll  : 'onGridScroll',\n            thisObj : this\n        });\n        Object.assign(this, DomHelper.createElement({\n            reference : 'element',\n            parent    : grid.element,\n            className : 'b-grid-sticky-row',\n            children  : [{\n                reference : 'contentElement',\n                className : 'b-grid-cell'\n            }]\n        }));\n\n        // Clean these classes from copied cell and row classLists\n        this.removeClasses = {\n            'b-focused'             : false,\n            'b-hover'               : false,\n            'b-selected'            : false,\n            [this.currentTopRowCls] : false\n        };\n    }\n\n    renderRows() {\n        // Do not leave stranded sticky row visible on data change\n        this.element.classList.add('b-hide-visibility');\n    }\n\n    onGridScroll() {\n        const\n            me = this,\n            {\n                client : grid,\n                element,\n                contentElement\n            } = me,\n            gridViewport  = Rectangle.client(grid.bodyContainer).roundPx(),\n            currentTopRow = grid.rowManager.getRowAt(gridViewport.y),\n            topRowChanged = currentTopRow !== me.currentTopRow;\n\n        if (currentTopRow) {\n            if (topRowChanged) {\n                if (me.currentTopRow) {\n                    me.currentTopRow.removeCls(me.currentTopRowCls);\n                    me.currentTopRow.removeCls('b-not-enough-height');\n                }\n\n                me.currentTopRow = currentTopRow;\n                currentTopRow.addCls(me.currentTopRowCls);\n\n                contentElement.innerHTML = '';\n                contentElement.appendChild(me.updateStickyContent());\n            }\n\n            // If the outgoing row is not too tall, and doesn't *need* the content\n            // pinning to the top, hide the sticky row, and make the source sticky\n            // elements pin themselves to the bottom of the cell using the b-not-enough-height\n            // class to switch them to align-self: flex-end\n            const notEnoughHeight = me.currentTopRow.bottom - me.client.scrollable.y <= me.stickyContentHeight;\n            me.element.classList[notEnoughHeight ? 'add' : 'remove']('b-hide-visibility');\n            me.currentTopRow[notEnoughHeight ? 'addCls' : 'removeCls']('b-not-enough-height');\n\n            // Keep sticky row aligned while constrained to the viewport.\n            // This keeps it pinned to the top.\n            gridViewport.y += me.stickyContentTop;\n            DomHelper.alignTo(element, me.stickyEls[0], { align : 't0-t0', constrainTo : gridViewport }, true);\n        }\n\n        me.lastProcessedTopRow = currentTopRow;\n    }\n\n    updateStickyContent() {\n        const\n            me            = this,\n            {\n                currentTopRow,\n                removeClasses\n            }             = me,\n            rowClasses   = {\n                'b-grid-sticky-row' : 1\n            },\n            cellClasses  = {},\n            stickyContent = me.stickyContent || (me.stickyContent = document.createDocumentFragment()),\n            stickyEls     = me.stickyEls || (me.stickyEls = []);\n\n        // Release the sticky state on the previous row's sticky elements\n        stickyEls.forEach(e => {\n            e.classList.remove('b-sticky-content-el');\n        });\n\n        // Collect the elements we need to clone from the current top row\n        stickyEls.length = 0;\n        currentTopRow.eachElement(rowEl => {\n            stickyEls.push(...rowEl.querySelectorAll(me.contentSelector));\n        });\n\n        // Clear the documentFragment which we use to hold our clones\n        while (stickyContent.firstChild) {\n            stickyContent.remove(stickyContent.firstChild);\n        }\n\n        me.stickyContentHeight = 0;\n        me.stickyContentTop = 0;\n\n        // Clone the selected elements and measure them for alignment.\n        stickyEls.map(e => {\n            // Collect the app classes that may be necessary on the cell and row elements.\n            e.closest('.b-grid-cell').classList.forEach(cls => cellClasses[cls] = 1);\n            e.closest('.b-grid-row').classList.forEach(cls => rowClasses[cls] = 1);\n\n            // Clean out grid's classes from the class sets.\n            Object.assign(cellClasses, removeClasses);\n            Object.assign(rowClasses,  removeClasses);\n\n            const eTop = e.offsetTop;\n\n            me.stickyContentTop = Math.max(me.stickyContentTop, eTop);\n\n            // We need to know how tall the sticky content is\n            e.style.alignSelf = 'flex-end';\n            me.stickyContentHeight = Math.max(me.stickyContentHeight, me.currentTopRow.height - e.offsetTop + eTop);\n            e.style.alignSelf = '';\n\n            const result = e.cloneNode(true);\n\n            // Tag the content al *after* cloning it.\n            e.classList.add('b-sticky-content-el');\n\n            stickyContent.appendChild(result);\n\n            return result;\n        });\n\n        cellClasses['b-focused'] = false;\n        DomHelper.syncClassList(me.contentElement, cellClasses);\n        DomHelper.syncClassList(me.element, rowClasses);\n\n        return stickyContent;\n    }\n}\n\nGridFeatureManager.registerFeature(StickyCells, false);\n", "import Combo from '../../Core/widget/Combo.js';\nimport ObjectHelper from '../../Core/helper/ObjectHelper.js';\nimport StringHelper from '../../Core/helper/StringHelper.js';\nimport '../../Grid/view/TreeGrid.js';\n\n/**\n * @module Grid/widget/TreeCombo\n */\n\n/**\n * A powerful {@link Core/widget/Combo} box using a {@link Grid/view/TreeGrid} as its drop down widget. You can define\n * your own set of columns to display and use all the regular features of the Grid.\n *\n * {@inlineexample Grid/widget/TreeCombo.js}\n *\n * ```javascript\n * new TreeCombo({\n *     label    : 'Pick task(s)',\n *     width    : '30em',\n *     appendTo : document.body,\n *     picker   : {\n *         // Define the columns to show in the grid\n *         columns : [\n *             { type : 'tree', text : 'Tasks', field : 'name', flex : 1 },\n *             { text : 'Priority', field : 'prio' }\n *         ]\n *     },\n *     chipView : {\n *         // Render the chips in the combo field\n *         itemTpl(record) {\n *             return StringHelper.xss`${record.name}`;\n *         }\n *     },\n *     store : {\n *         fields     : [\n *             'prio'\n *         ],\n *         data : [\n *             {\n *                 name     : 'Development Tasks',\n *                 expanded : true,\n *                 children : [\n *                     { id : 1, name : 'Improve React docs', prio : 'High' },\n *                     { id : 2, name : 'Build Angular module', prio : 'Low' },\n *                     { id : 3, name : 'Creat Vue project', prio : 'Low' }\n *                 ]\n *             },\n *             { name : 'Customer meeting', prio : 'Normal' },\n *             {\n *                 name     : 'Customer Tasks',\n *                 expanded : true,\n *                 children : [\n *                     { id : 4, name : 'Intro meeting', prio : 'Normal' },\n *                     { id : 5, name : 'Build POC', prio : 'High' },\n *                     { id : 6, name : 'Documentation', prio : 'Low' }\n *                 ]\n *             }\n *         ]\n *     }\n * });\n * ```\n *\n * @extends Core/widget/Combo\n * @classtype treecombo\n * @inputfield\n */\nexport default class TreeCombo extends Combo {\n    static $name = 'TreeCombo';\n\n    static type = 'treecombo';\n\n    static configurable = {\n        multiSelect : true,\n        chipView    : {\n            itemTpl(record) {\n                return StringHelper.xss`${record.name}`;\n            },\n            scrollable : {\n                overflowX : 'hidden-scroll'\n            }\n        }\n    };\n\n    configure(config) {\n        super.configure(config);\n        const me = this;\n\n        me.ion({\n            change() {\n                me.picker.selectedRecords = me.value;\n            }\n        });\n    }\n\n    changePicker(picker, oldPicker) {\n        const me = this;\n        return super.changePicker(ObjectHelper.assign({}, picker, {\n            type                       : 'treegrid',\n            minWidth                   : '35em',\n            readOnly                   : me.readOnly,\n            disableGridRowModelWarning : true,\n            selectedRecords            : me.value.map(val => me.store.getById(val)),\n            selectionMode              : {\n                row                  : true,\n                multiSelect          : me.multiSelect,\n                rowCheckboxSelection : true\n            },\n            internalListeners : {\n                selectionChange({ selection }) {\n                    me.value = selection;\n                }\n            }\n        }), oldPicker);\n    }\n}\n\nTreeCombo.initClass();\n", "// column\nexport { default as ActionColumn } from '../lib/Grid/column/ActionColumn.js';\nexport { default as AggregateColumn } from '../lib/Grid/column/AggregateColumn.js';\nexport { default as CheckColumn } from '../lib/Grid/column/CheckColumn.js';\nexport { default as Column } from '../lib/Grid/column/Column.js';\nexport { default as DateColumn } from '../lib/Grid/column/DateColumn.js';\nexport { default as NumberColumn } from '../lib/Grid/column/NumberColumn.js';\nexport { default as PercentColumn } from '../lib/Grid/column/PercentColumn.js';\nexport { default as RatingColumn } from '../lib/Grid/column/RatingColumn.js';\nexport { default as RowNumberColumn } from '../lib/Grid/column/RowNumberColumn.js';\nexport { default as TemplateColumn } from '../lib/Grid/column/TemplateColumn.js';\nexport { default as TimeColumn } from '../lib/Grid/column/TimeColumn.js';\nexport { default as TreeColumn } from '../lib/Grid/column/TreeColumn.js';\nexport { default as WidgetColumn } from '../lib/Grid/column/WidgetColumn.js';\n\n// data\nexport { default as ColumnStore } from '../lib/Grid/data/ColumnStore.js';\nexport { default as GridRowModel } from '../lib/Grid/data/GridRowModel.js';\n\n// feature\nexport { default as CellCopyPaste } from '../lib/Grid/feature/CellCopyPaste.js';\nexport { default as CellEdit } from '../lib/Grid/feature/CellEdit.js';\nexport { default as CellMenu } from '../lib/Grid/feature/CellMenu.js';\nexport { default as CellTooltip } from '../lib/Grid/feature/CellTooltip.js';\nexport { default as ColumnAutoWidth } from '../lib/Grid/feature/ColumnAutoWidth.js';\nexport { default as ColumnDragToolbar } from '../lib/Grid/feature/ColumnDragToolbar.js';\nexport { default as ColumnPicker } from '../lib/Grid/feature/ColumnPicker.js';\nexport { default as ColumnRename } from '../lib/Grid/feature/ColumnRename.js';\nexport { default as ColumnReorder } from '../lib/Grid/feature/ColumnReorder.js';\nexport { default as ColumnResize } from '../lib/Grid/feature/ColumnResize.js';\nexport { default as FillHandle } from '../lib/Grid/feature/FillHandle.js';\nexport { default as Filter } from '../lib/Grid/feature/Filter.js';\nexport { default as FilterBar } from '../lib/Grid/feature/FilterBar.js';\nexport { default as GridFeatureManager } from '../lib/Grid/feature/GridFeatureManager.js';\nexport { default as Group } from '../lib/Grid/feature/Group.js';\nexport { default as GroupSummary } from '../lib/Grid/feature/GroupSummary.js';\nexport { default as HeaderMenu } from '../lib/Grid/feature/HeaderMenu.js';\nexport { default as MergeCells } from '../lib/Grid/feature/MergeCells.js';\nexport { default as QuickFind } from '../lib/Grid/feature/QuickFind.js';\nexport { default as RegionResize } from '../lib/Grid/feature/RegionResize.js';\nexport { default as RowCopyPaste } from '../lib/Grid/feature/RowCopyPaste.js';\nexport { default as RowExpander } from '../lib/Grid/feature/RowExpander.js';\nexport { default as RowReorder } from '../lib/Grid/feature/RowReorder.js';\nexport { default as Search } from '../lib/Grid/feature/Search.js';\nexport { default as Sort } from '../lib/Grid/feature/Sort.js';\nexport { default as StickyCells } from '../lib/Grid/feature/StickyCells.js';\nexport { default as Stripe } from '../lib/Grid/feature/Stripe.js';\nexport { default as Summary } from '../lib/Grid/feature/Summary.js';\nexport { default as Tree } from '../lib/Grid/feature/Tree.js';\nexport { default as TreeGroup } from '../lib/Grid/feature/TreeGroup.js';\n\n// export feature\nexport { default as ExportDialog } from '../lib/Grid/view/export/ExportDialog.js';\nexport { default as Exporter } from '../lib/Grid/feature/export/exporter/Exporter.js';\nexport { default as ExportOrientationCombo } from '../lib/Grid/view/export/field/ExportOrientationCombo.js';\nexport { default as ExportRowsCombo } from '../lib/Grid/view/export/field/ExportRowsCombo.js';\nexport { default as MultiPageExporter } from '../lib/Grid/feature/export/exporter/MultiPageExporter.js';\nexport { default as MultiPageVerticalExporter } from '../lib/Grid/feature/export/exporter/MultiPageVerticalExporter.js';\nexport { default as PdfExport } from '../lib/Grid/feature/export/PdfExport.js';\nexport { default as SinglePageExporter } from '../lib/Grid/feature/export/exporter/SinglePageExporter.js';\nexport { FileFormat, Orientation, PaperFormat, RowsRange } from '../lib/Grid/feature/export/Utils.js';\n\n// feature experimental\nexport { default as ExcelExporter } from '../lib/Grid/feature/experimental/ExcelExporter.js';\n\n// row\nexport { default as Row } from '../lib/Grid/row/Row.js';\n\n// util\nexport { default as Location } from '../lib/Grid/util/Location.js';\nexport { default as TableExporter } from '../lib/Grid/util/TableExporter.js';\n\n// view\nexport { default as Bar } from '../lib/Grid/view/Bar.js';\nexport { default as Footer } from '../lib/Grid/view/Footer.js';\nexport { default as Grid } from '../lib/Grid/view/Grid.js';\nexport { default as GridBase } from '../lib/Grid/view/GridBase.js';\nexport { default as Header } from '../lib/Grid/view/Header.js';\nexport { default as RowManager } from '../lib/Grid/row/RowManager.js';\nexport { default as SubGrid } from '../lib/Grid/view/SubGrid.js';\nexport { default as TreeGrid } from '../lib/Grid/view/TreeGrid.js';\n\n// view mixin\nexport { default as GridElementEvents } from '../lib/Grid/view/mixin/GridElementEvents.js';\nexport { default as GridFeatures } from '../lib/Grid/view/mixin/GridFeatures.js';\nexport { default as GridResponsive } from '../lib/Grid/view/mixin/GridResponsive.js';\nexport { default as GridSelection } from '../lib/Grid/view/mixin/GridSelection.js';\nexport { default as GridState } from '../lib/Grid/view/mixin/GridState.js';\nexport { default as GridSubGrids } from '../lib/Grid/view/mixin/GridSubGrids.js';\n\n// widget\nexport { default as GridFieldFilterPicker } from '../lib/Grid/widget/GridFieldFilterPicker.js';\nexport { default as GridFieldFilterPickerGroup } from '../lib/Grid/widget/GridFieldFilterPickerGroup.js';\nexport { default as TreeCombo } from '../lib/Grid/widget/TreeCombo.js';\n"],
  "mappings": "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",
  "names": ["ActionColumn", "Column", "groupHeaderReserved", "construct", "config", "store", "me", "arguments", "width", "flex", "grid", "ion", "paint", "thisObj", "disableIfGridReadOnly", "element", "classList", "add", "externalRenderer", "renderer", "internalRenderer", "column", "record", "callExternalRenderer", "_column$actions", "inGroupTitle", "meta", "subGrid", "_this$externalRendere", "call", "className", "children", "actions", "map", "actionConfig", "index", "_tooltip$startsWith", "visible", "showForGroup", "tooltip", "btip", "startsWith", "callback", "customRendererData", "action", "tag", "dataset", "Tooltip", "encodeConfig", "html", "cls", "onCellClick", "target", "_column$actions2", "contains", "actionIndex", "parentElement", "actionHandler", "onClick", "updateAutoWidth", "groupActions", "oldActions", "forEach", "actionOriginal", "push", "length", "_actions", "actionsHtml", "DomHelper", "createElement", "outerHTML", "measureText", "__publicField", "type", "fields", "name", "defaultValue", "defaults", "filterable", "groupable", "sortable", "editor", "searchable", "htmlEncode", "resizable", "minWidth", "ColumnStore", "registerColumnType", "exposeProperties", "_$name", "AggregateColumn", "NumberColumn", "function", "includeParentInChangeSet", "data", "columnStore", "configuredAlign", "configuredEditor", "storeListeners", "update", "prio", "oldStore", "_store", "un", "modelClass", "field", "fieldMap", "align", "canEdit", "isLeaf", "sumChildren", "args", "result", "i", "parseFloat", "avg", "onRecordUpdate", "changes", "rowManager", "bubble", "rec", "row", "getRowFor", "cellElement", "getCell", "renderCell", "getRawValue", "_record$children", "value", "fn", "isMathFn", "Math", "handler", "resolveCallback", "apply", "r", "set", "setData", "canFillValue", "PercentColumn", "min", "max", "showValue", "lowThreshold", "summaryRenderer", "sum", "fitMode", "constructor", "internalCellCls", "defaultRenderer", "role", "tabIndex", "style", "text", "undefined", "resizeToFitContent", "fieldType", "RatingColumn", "emptyIcon", "filledIcon", "editable", "filterType", "ArrayHelper", "populate", "filled", "event", "readOnly", "starIndex", "indexOf", "parentNode", "childNodes", "metaKey", "shiftKey", "get", "$name", "TemplateColumn", "template", "Error", "renderData", "isSpecialRow", "TimeColumn", "format", "formatValue", "groupRenderer", "groupRowFor", "innerHTML", "DateHelper", "parse", "defaultEditor", "CellCopyPaste", "InstancePlugin", "entityName", "afterConstruct", "afterSelectionModeChange", "client", "selectionMode", "cell", "_disabledBySelectionMode", "disabled", "copyOnly", "_copyOnly", "_this$client$features", "features", "cellEdit", "enabled", "Boolean", "canCopy", "_client$features$rowC", "selectedCells", "_selectedRows", "rowCopyPaste", "focusedCell", "isCellSelected", "canCutPaste", "_this$client$features2", "isEditing", "isActionAvailable", "actionName", "sendToClipboard", "cells", "lastRowIndex", "lastColIndex", "stringData", "sort", "c1", "c2", "rowIndex", "columnIndex", "_column$toClipboardSt", "_cellValue", "repeat", "cellValue", "toClipboardString", "_record$get", "toString", "toCopyString", "currentValue", "replace", "emptyValueChar", "BrowserHelper", "writeToClipboard", "useNativeClipboard", "cut", "copy", "isCut", "filter", "_r$record", "trigger", "copiedDataString", "paste", "clipboardData", "readFromClipboard", "targetCell", "modifiedRecords", "Set", "rows", "stringAs2dArray", "targetCells", "_shiftSelectRange", "some", "equals", "cellRows", "cellSelectorsAs2dArray", "columnCount", "curI", "curX", "rI", "targetRecord", "getAt", "cI", "targetColumn", "columns", "visibleColumns", "targetField", "fromClipboardString", "string", "toPasteValue", "locations", "rId", "location", "id", "stringRows", "split", "populateCellMenu", "items", "cutCell", "cutText", "localeClass", "icon", "weight", "onItem", "pasteCell", "pasteText", "copyCell", "copyText", "pluginConfig", "chain", "configurable", "keyMap", "VersionHelper", "isTestEnv", "GridFeatureManager", "registerFeature", "CellTooltip", "processConfig", "initTip", "tip", "new", "forElement", "forSelector", "hoverDelay", "trackMouse", "getHtml", "getTooltipContent", "bind", "internalListeners", "pointerOver", "listeners", "configuredListeners", "initialConfig", "relayEvents", "onPointerOver", "getColumnFromElement", "tooltipRenderer", "setConfig", "doDestroy", "destroy", "doDisable", "disable", "activeTarget", "getRecordFromElement", "arg", "cellTooltip", "lastRecord", "generation", "lastRecordGeneration", "lastColumn", "_html", "Objects", "isPromise", "hide", "ColumnRename", "_this$editor", "after", "populateHeaderMenu", "rename", "L", "startEdit", "Event", "_this$client$getHeade", "getHeaderDataFromEvent", "textWrapper", "Editor", "owner", "render", "F2", "FillHandle", "mixin", "Delayable", "delayable", "handleSelection", "_fillListeners", "onContentChange", "afterColumnsChange", "fixElementHeights", "getCellDataFromEvent", "includeSingleAxisMatch", "overridden", "findPatternsIn2dRange", "range", "horizontal", "negative", "values", "columnId", "isNaN", "rowOrCol", "pattern", "findPatternsIn1dRange", "lastValue", "next", "every", "val", "Date", "diffs", "ix", "shift", "size", "increaseBy", "getTime", "stringPattern", "currentIndex", "afterSelectionChange", "removeElements", "GlobalEvents", "isMouseDown", "delayUntilMouseUp", "_isExtending", "rangeSelection", "drawFillHandleAndBorder", "onMouseDown", "mouseMoveOrUp", "EventHelper", "on", "globalThis", "mouseover", "selectionDragMouseEventListenerElement", "mouseup", "preventDefault", "stopImmediatePropagation", "handled", "onMouseUp", "currentRange", "_isCropping", "selectionChange", "internalSelectRange", "from", "to", "extensionCells", "croppingCells", "sel", "disableScrollingCloseToEdges", "suspendRefresh", "firstCell", "patterns", "changeMap", "Map", "reverse", "_me$calculateFillValu", "_column$calculateFill", "calculateFillValue", "changed", "resumeRefresh", "performSelection", "onMouseOver", "_cellSelector", "_cellSelector$_column", "first", "last", "cellData", "cellSelector", "normalizeCellContext", "_column", "region", "equalOrSmaller", "cs", "enableScrollingCloseToEdges", "allowCropping", "Location", "keepListeners", "_me$rangeSelection", "regionEl", "subGrids", "x", "Rectangle", "right", "y", "getRecordCoords", "bottom", "borderElement", "handleElement", "setRect", "height", "appendChild", "setTopLeft", "scrollWidth", "toggleCroppingCls", "newCells", "getRange", "handleClick", "rootElement", "delegate", "mousedown", "hasFillElements", "_this$croppingCells", "_this$client$getCell", "toggle", "_me$handleElement", "_me$borderElement", "remove", "removeListeners", "listener", "parent", "isAvailable", "override", "camelCase", "mousemove", "touchdown", "touchmove", "touchup", "pointerover", "mouseout", "dblclick", "keydown", "keypress", "keyup", "contextmenu", "MergeCells", "mergedRanges", "mergedMap", "before", "eachSubGrid", "setupSubGrid", "renderDone", "bindStore", "$mergedCellsElement", "isConfiguring", "isDisabling", "reset", "updatePassthrough", "use", "detachListeners", "change", "refresh", "onInternalResize", "refreshBounds", "beforeRenderCell", "mergeCells", "isSorted", "collapsed", "mergedRange", "getMergeRange", "afterRenderRow", "oldId", "oldHeight", "heightChanged", "slice", "removeRange", "syncDom", "afterRemove", "afterToggleGroup", "afterToggleSubGrid", "passthrough", "indices", "selectedRecords", "allSelected", "fromIndex", "toIndex", "includes", "isSelected", "_element$elementData", "elementData", "_element$elementData2", "mergeable", "handleEvent", "mergedCellsElement", "closest", "StringHelper", "capitalize", "eventData", "records", "firstElementChild", "triggerEvent", "toLowerCase", "getRowAt", "clientY", "startEditing", "onRangeClick", "onStoreChange", "onStoreRefresh", "createRangeElement", "_parent$syncIdMap", "_parent$releasedIdMap", "getSubGridFromColumn", "syncId", "syncIdMap", "releasedIdMap", "createRangeDomConfig", "DomSync", "addChild", "_column$mergedRendere", "top", "left", "domConfig", "DomClassList", "cellCls", "assign", "autoCls", "keepChildren", "rowHeight", "mergedRenderer", "buildMergedCellsConfig", "_rowManager$topRow", "_rowManager$bottomRow", "topRow", "dataIndex", "bottomRow", "domConfigMap", "regions", "reduce", "updateRange", "force", "sync", "targetElement", "syncIdField", "onRenderDone", "redraw", "c", "hadRanges", "refreshSuspended", "rowCount", "boundsMap", "bounds", "topRendered", "bottomRendered", "rowOffsetHeight", "findIndex", "getRowById", "rowsAbove", "offsetHeight", "rowsBelow", "key", "earlierRecord", "earlierValue", "earlierIndex", "laterRecord", "laterValue", "laterIndex", "headerBounds", "QuickFind", "properties", "hitCls", "hitCellCls", "hitCellBadgeCls", "hitTextCls", "Object", "treeWalker", "setupTreeWalker", "NodeFilter", "SHOW_TEXT", "FILTER_ACCEPT", "isActionable", "find", "clear", "showQuickFind", "header", "getHeaderElement", "headerField", "badge", "returnAll", "mode", "colHeader", "found", "renderListenerInitialized", "rendercell", "hideQuickFind", "hit", "prevFound", "forceInnerHTML", "_content", "removeChild", "search", "columnFieldOrId", "getById", "findByField", "foundMap", "findRe", "RegExp", "escapeRegExp", "String", "_originalContent", "gotoClosestHit", "_this$found", "foundCount", "_this$found2", "gotoHit", "nextHit", "focusCell", "doSelect", "focusedIndex", "foundSorted", "a", "b", "abs", "gotoFirstHit", "gotoLastHit", "gotoNextHit", "_grid$_focusedCell", "_grid$lastFocusedCell", "currentId", "_focusedCell", "lastFocusedCell", "gotoPrevHit", "_grid$_focusedCell2", "_grid$lastFocusedCell2", "prevHit", "_me$foundMap", "hitIndex", "isQuickHit", "inner", "currentNode", "down", "textNode", "nextNode", "nodeToReplace", "textContent", "nodeValue", "newText", "offset", "lastIndex", "match", "exec", "preamble", "substring", "spaceBefore", "v", "spaceAfter", "encodeHtml", "insertBefore", "createElementFromTemplate", "join", "fragment", "onBackspace", "substr", "clearSearch", "showFilterEditor", "onElementKeyPress", "_event$key", "onCellNavigate", "fromCellSelector", "toCellSelector", "F3", "Escape", "Backspace", "storeRemoveActions", "RowExpander", "expanderBodyClass", "expandedRowClass", "recordStateMap", "collapsingRecords", "console", "warn", "isGanttBase", "fixedRowHeight", "addColumn", "renderFromRow", "changeLoadingIndicatorText", "onGridBodyFocusIn", "_this$client$lastMous", "_this$client$lastMous2", "lastMousedownEvent", "isAnimating", "wasAnimating", "changeColumn", "has", "toggleExpand", "hideable", "_isAddingExpanderColumn", "_expander", "columnPosition", "insert", "onTriggerEvent", "collapse", "expand", "source", "delete", "refreshOnRecordChange", "recordState", "isCreated", "renderFromRecord", "topRecordIndex", "topRecord", "processRowHeight", "isRenderingAsync", "loadingIndicatorHeight", "expanderBodyHeight", "expandElements", "beforeRenderRow", "enableAnimations", "waitForTransition", "removeExpander", "renderExpander", "rowElement", "getElement", "renderLoadingIndicator", "lockCellHeight", "cellHeight", "_shouldScrollIntoView", "isInView", "once", "scrollRowIntoView", "onTransitionEnd", "property", "removeEachSelector", "loadingIndicatorText", "_row$cells$", "renderings", "continueRendering", "content", "expanderElement", "addCls", "renderResponse", "then", "Promise", "all", "_me$renderRowsWithAni", "renderRowsWithAnimation", "isDestroyed", "_row$removeCls", "removeCls", "unlock", "child", "Search", "limit", "showHitIndex", "hitEls", "expandNode", "onTreeNodeExpand", "requestAnimationFrame", "reapply", "col", "formatters", "_col$formatValue", "isTree", "expandTo", "prevValue", "belongsTo", "clearHits", "listenersInitialized", "asyncEventSuffix", "refreshRows", "isHitFocused", "DomDataStore", "silent", "_focusedCell$cell", "getActiveElement", "fromStart", "_me$found", "fromCell", "_me$found2", "_cellElement$querySel", "querySelector", "getSelection", "innerText", "featureClass", "StickyCells", "defaultConfig", "contentSelector", "currentTopRowCls", "scroll", "reference", "removeClasses", "renderRows", "onGridScroll", "contentElement", "gridViewport", "bodyContainer", "roundPx", "currentTopRow", "topRowChanged", "updateStickyContent", "notEnoughHeight", "scrollable", "stickyContentHeight", "stickyContentTop", "alignTo", "stickyEls", "constrainTo", "lastProcessedTopRow", "rowClasses", "cellClasses", "stickyContent", "document", "createDocumentFragment", "e", "eachElement", "rowEl", "querySelectorAll", "firstChild", "eTop", "offsetTop", "alignSelf", "cloneNode", "syncClassList", "TreeCombo", "Combo", "configure", "picker", "changePicker", "oldPicker", "ObjectHelper", "disableGridRowModelWarning", "multiSelect", "rowCheckboxSelection", "selection", "chipView", "itemTpl", "xss", "overflowX", "initClass", "HOSTS", "EXPIRING_CLASSES", "host", "test", "href", "initialized", "initExpiryHelper", "baseClass", "ExpiryHelper", "widget", "__foo", "product", "productName", "version", "getVersion", "callHomeDelay", "blockUrl", "queryString", "Product", "verifyUrl", "blocked", "lastVersionCheck", "trialKey", "versionCheckKey", "log", "cacheTrialStartTime", "isExpired", "readyState", "onTrialExpired", "addEventListener", "setTimeout", "updateBlockedStatus", "timeString", "getLocalStorageItem", "time", "Number", "trialStartTime", "now", "setLocalStorageItem", "_window$bryntum", "_window$bryntum$this$", "ONE_DAY", "window", "bryntum", "expired", "saveVersionCheckKey", "url", "encodeURIComponent", "logUrl", "license", "img", "Image", "onload", "naturalWidth", "blockTrial", "onerror", "src", "rootEl", "expirationShown", "floatRoot", "Toast", "show", "timeout", "forEachSelector", "Widget", "fromElement", "maskExpiredWidget", "removeLocalStorageItem", "mask", "cover", "setWaterMark", "darkColor", "lightColor", "_DomHelper$themeInfo", "_DomHelper$themeInfo$", "thumb", "color", "themeInfo", "endsWith", "svgString", "backgroundImage", "btoa", "GridBase", "Override", "class", "onPaintOverride", "setWatermarks", "targets", "RowManager", "matchRowCount", "_this$grid", "isScheduler", "_overridden", "_this$grid2", "_this$grid3", "websiteUrls", "products", "frameworks", "splice", "prod", "framework", "concat", "flat", "newScript", "dataLayer", "gtag", "head"]
}
