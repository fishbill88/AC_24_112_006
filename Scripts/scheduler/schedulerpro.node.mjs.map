{
  "version": 3,
  "sources": ["../../Engine/lib/Engine/vendor/later/later.js", "../../chronograph/src/collection/Iterator.js", "../../chronograph/src/class/Mixin.js", "../../chronograph/src/class/Base.js", "../../Core/lib/Core/helper/BrowserHelper.js", "../../Core/lib/Core/helper/StringHelper.js", "../../Core/lib/Core/helper/util/Objects.js", "../../Core/lib/Core/helper/VersionHelper.js", "../../Core/lib/Core/Config.js", "../../Core/lib/Core/Base.js", "../../Core/lib/Core/helper/AjaxHelper.js", "../../Core/lib/Core/helper/ArrayHelper.js", "../../Core/lib/Core/helper/FunctionHelper.js", "../../Core/lib/Core/mixin/Events.js", "../../Core/lib/Core/localization/LocaleHelper.js", "../../Core/lib/Core/localization/LocaleManager.js", "../../Core/lib/Core/localization/Localizable.js", "../../Core/lib/Core/localization/En.js", "../../Core/lib/Core/helper/DateHelper.js", "../../Engine/lib/Engine/scheduling/Types.js", "../../Engine/lib/Engine/util/Constants.js", "../../Engine/lib/Engine/util/Types.js", "../../Engine/lib/Engine/calendar/CalendarCache.js", "../../Engine/lib/Engine/util/StripDuplicates.js", "../../Engine/lib/Engine/calendar/CalendarCacheInterval.js", "../../Engine/lib/Engine/calendar/CalendarCacheIntervalMultiple.js", "../../Engine/lib/Engine/util/BinarySearch.js", "../../Engine/lib/Engine/calendar/SortedMap.js", "../../Engine/lib/Engine/calendar/IntervalCache.js", "../../Engine/lib/Engine/calendar/CalendarCacheMultiple.js", "../../Core/lib/Core/helper/TimeZoneHelper.js", "../../Engine/lib/Engine/calendar/CalendarCacheSingle.js", "../../Engine/lib/Engine/quark/AbstractPartOfProjectGenericMixin.js", "../../Core/lib/Core/helper/ObjectHelper.js", "../../Core/lib/Core/mixin/InstancePlugin.js", "../../Core/lib/Core/mixin/Pluggable.js", "../../Core/lib/Core/mixin/Delayable.js", "../../Core/lib/Core/state/StateStorage.js", "../../Core/lib/Core/state/StateProvider.js", "../../Core/lib/Core/mixin/State.js", "../../Core/lib/Core/mixin/Identifiable.js", "../../Core/lib/Core/data/stm/mixin/ModelStm.js", "../../Core/lib/Core/data/mixin/TreeNode.js", "../../Core/lib/Core/data/mixin/ModelLink.js", "../../Core/lib/Core/mixin/Factoryable.js", "../../Core/lib/Core/data/field/DataField.js", "../../Core/lib/Core/data/field/ArrayDataField.js", "../../Core/lib/Core/data/field/BooleanDataField.js", "../../Core/lib/Core/data/field/DateDataField.js", "../../Core/lib/Core/data/field/StringDataField.js", "../../Core/lib/Core/data/field/DurationUnitDataField.js", "../../Core/lib/Core/data/field/IntegerDataField.js", "../../Core/lib/Core/data/field/ModelDataField.js", "../../Core/lib/Core/data/field/NumberDataField.js", "../../Core/lib/Core/data/field/ObjectDataField.js", "../../Core/lib/Core/data/field/StoreDataField.js", "../../Core/lib/Core/data/Model.js", "../../Core/lib/Core/data/Duration.js", "../../Core/lib/Core/util/CollectionFilter.js", "../../Core/lib/Core/helper/IdHelper.js", "../../Core/lib/Core/util/CollectionSorter.js", "../../Core/lib/Core/util/Collection.js", "../../Core/lib/Core/util/Bag.js", "../../Core/lib/Core/data/StoreBag.js", "../../Core/lib/Core/data/mixin/StoreCRUD.js", "../../Core/lib/Core/data/mixin/StoreChanges.js", "../../Core/lib/Core/data/mixin/StoreFilter.js", "../../Core/lib/Core/data/mixin/StoreGroup.js", "../../Core/lib/Core/data/mixin/StoreProxy.js", "../../Core/lib/Core/data/mixin/StoreRelation.js", "../../Core/lib/Core/data/mixin/StoreSum.js", "../../Core/lib/Core/data/mixin/StoreSearch.js", "../../Core/lib/Core/data/mixin/StoreSort.js", "../../Core/lib/Core/data/mixin/StoreChained.js", "../../Core/lib/Core/data/mixin/StoreState.js", "../../Core/lib/Core/data/Wbs.js", "../../Core/lib/Core/data/mixin/StoreTree.js", "../../Core/lib/Core/helper/WalkHelper.js", "../../Core/lib/Core/data/mixin/StoreSync.js", "../../Core/lib/Core/data/stm/mixin/StoreStm.js", "../../Core/lib/Core/data/Store.js", "../../Engine/lib/Engine/quark/store/mixin/AbstractPartOfProjectStoreMixin.js", "../../Engine/lib/Engine/quark/model/mixin/AbstractPartOfProjectModelMixin.js", "../../Engine/lib/Engine/calendar/CalendarIntervalMixin.js", "../../Engine/lib/Engine/calendar/CalendarIntervalStore.js", "../../Engine/lib/Engine/calendar/UnspecifiedTimeIntervalModel.js", "../../Engine/lib/Engine/quark/CorePartOfProjectGenericMixin.js", "../../Engine/lib/Engine/quark/model/AbstractCalendarMixin.js", "../../Engine/lib/Engine/quark/model/AbstractHasAssignmentsMixin.js", "../../Engine/lib/Engine/quark/model/mixin/CorePartOfProjectModelMixin.js", "../../Engine/lib/Engine/util/Functions.js", "../../Engine/lib/Engine/quark/store/AbstractAssignmentStoreMixin.js", "../../Engine/lib/Engine/quark/store/AbstractCalendarManagerStoreMixin.js", "../../Engine/lib/Engine/quark/store/AbstractDependencyStoreMixin.js", "../../Engine/lib/Engine/quark/store/AbstractEventStoreMixin.js", "../../Engine/lib/Engine/quark/store/AbstractResourceStoreMixin.js", "../../Engine/lib/Engine/quark/model/scheduler_core/CoreEventMixin.js", "../../Engine/lib/Engine/quark/model/scheduler_core/CoreResourceMixin.js", "../../Engine/lib/Engine/quark/model/scheduler_core/CoreAssignmentMixin.js", "../../Engine/lib/Engine/quark/store/mixin/CorePartOfProjectStoreMixin.js", "../../Engine/lib/Engine/quark/store/CoreAssignmentStoreMixin.js", "../../Engine/lib/Engine/quark/model/scheduler_core/CoreCalendarMixin.js", "../../Engine/lib/Engine/quark/store/CoreCalendarManagerStoreMixin.js", "../../Engine/lib/Engine/quark/model/scheduler_core/CoreDependencyMixin.js", "../../Engine/lib/Engine/quark/store/CoreDependencyStoreMixin.js", "../../Engine/lib/Engine/quark/model/scheduler_core/CoreHasAssignmentsMixin.js", "../../Engine/lib/Engine/quark/model/scheduler_core/CoreHasDependenciesMixin.js", "../../Engine/lib/Engine/quark/model/scheduler_core/SchedulerCoreEvent.js", "../../Engine/lib/Engine/quark/store/CoreEventStoreMixin.js", "../../Engine/lib/Engine/quark/store/CoreResourceStoreMixin.js", "../../Core/lib/Core/data/stm/state/StateBase.js", "../../Core/lib/Core/data/stm/Props.js", "../../Core/lib/Core/data/stm/state/Registry.js", "../../Core/lib/Core/data/stm/Helpers.js", "../../Core/lib/Core/data/stm/state/DisabledState.js", "../../Core/lib/Core/data/stm/Transaction.js", "../../Core/lib/Core/data/stm/state/ReadyState.js", "../../Core/lib/Core/data/stm/state/RecordingState.js", "../../Core/lib/Core/data/stm/state/RestoringState.js", "../../Core/lib/Core/data/stm/state/AutoReadyState.js", "../../Core/lib/Core/data/stm/state/AutoRecordingState.js", "../../Core/lib/Core/data/stm/action/ActionBase.js", "../../Core/lib/Core/data/stm/action/UpdateAction.js", "../../Core/lib/Core/data/stm/action/InsertChildAction.js", "../../Core/lib/Core/data/stm/action/RemoveChildAction.js", "../../Core/lib/Core/data/stm/action/AddAction.js", "../../Core/lib/Core/data/stm/action/InsertAction.js", "../../Core/lib/Core/data/stm/action/RemoveAction.js", "../../Core/lib/Core/data/stm/action/RemoveAllAction.js", "../../Core/lib/Core/data/stm/StateTrackingManager.js", "../../Engine/lib/Engine/quark/model/AbstractProjectMixin.js", "../../Engine/lib/Engine/quark/model/scheduler_core/SchedulerCoreProjectMixin.js", "../../chronograph/src/util/Helpers.js", "../../chronograph/src/environment/Debug.js", "../../chronograph/src/class/RequiredProperty.js", "../../chronograph/src/graph/WalkDepth.js", "../../chronograph/src/cycle_resolver/CycleResolver.js", "../../chronograph/src/chrono/Effect.js", "../../chronograph/src/chrono/CycleResolver.js", "../../chronograph/src/primitives/Calculation.js", "../../chronograph/src/chrono/Quark.js", "../../chronograph/src/chrono/Identifier.js", "../../chronograph/src/chrono/Revision.js", "../../chronograph/src/util/LeveledQueue.js", "../../chronograph/src/chrono/TransactionCycleDetectionWalkContext.js", "../../chronograph/src/chrono/TransactionWalkDepth.js", "../../chronograph/src/chrono/Transaction.js", "../../chronograph/src/chrono/Graph.js", "../../chronograph/src/schema/EntityMeta.js", "../../chronograph/src/replica/Replica.js", "../../chronograph/src/replica/Identifier.js", "../../chronograph/src/schema/Field.js", "../../chronograph/src/replica/Entity.js", "../../chronograph/src/replica/Reference.js", "../../chronograph/src/replica/ReferenceBucket.js", "../../chronograph/src/schema/Schema.js", "../../Engine/lib/Engine/chrono/ModelFieldAtom.js", "../../Engine/lib/Engine/chrono/ChronoModelMixin.js", "../../Engine/lib/Engine/localization/En.js", "../../Engine/lib/Engine/scheduling/DateInterval.js", "../../Engine/lib/Engine/chrono/SchedulingIssueEffect.js", "../../Engine/lib/Engine/chrono/Conflict.js", "../../Engine/lib/Engine/quark/ChronoPartOfProjectGenericMixin.js", "../../Engine/lib/Engine/quark/store/mixin/ChronoStoreMixin.js", "../../Engine/lib/Engine/quark/store/mixin/ChronoPartOfProjectStoreMixin.js", "../../Engine/lib/Engine/quark/model/mixin/ChronoPartOfProjectModelMixin.js", "../../Engine/lib/Engine/quark/model/scheduler_basic/BaseCalendarMixin.js", "../../Engine/lib/Engine/chrono/Replica.js", "../../Engine/lib/Engine/quark/model/scheduler_basic/BaseAssignmentMixin.js", "../../Engine/lib/Engine/quark/store/ChronoAssignmentStoreMixin.js", "../../Engine/lib/Engine/quark/store/ChronoCalendarManagerStoreMixin.js", "../../Engine/lib/Engine/quark/store/ChronoDependencyStoreMixin.js", "../../Engine/lib/Engine/quark/model/scheduler_basic/BaseEventDispatcher.js", "../../Engine/lib/Engine/quark/model/scheduler_basic/HasCalendarMixin.js", "../../Engine/lib/Engine/quark/model/scheduler_basic/BaseEventMixin.js", "../../Engine/lib/Engine/quark/model/scheduler_basic/BaseHasAssignmentsMixin.js", "../../Engine/lib/Engine/quark/model/scheduler_basic/HasDependenciesMixin.js", "../../Engine/lib/Engine/quark/model/scheduler_basic/SchedulerBasicEvent.js", "../../Engine/lib/Engine/quark/store/ChronoEventStoreMixin.js", "../../Engine/lib/Engine/quark/model/scheduler_basic/BaseResourceMixin.js", "../../Engine/lib/Engine/quark/store/ChronoResourceStoreMixin.js", "../../Engine/lib/Engine/scheduling/DurationConverterMixin.js", "../../Engine/lib/Engine/quark/model/scheduler_basic/BaseDependencyMixin.js", "../../Engine/lib/Engine/quark/model/scheduler_basic/ChronoAbstractProjectMixin.js", "../../Engine/lib/Engine/quark/model/scheduler_basic/HasSubEventsMixin.js", "../../Engine/lib/Engine/quark/model/scheduler_basic/HasChildrenMixin.js", "../../Engine/lib/Engine/quark/model/scheduler_basic/SchedulerBasicProjectMixin.js", "../../Engine/lib/Engine/quark/model/scheduler_pro/ConstrainedEarlyEventMixin.js", "../../Engine/lib/Engine/quark/model/scheduler_pro/HasDateConstraintMixin.js", "../../Engine/lib/Engine/quark/model/scheduler_pro/ScheduledByDependenciesEarlyEventMixin.js", "../../Engine/lib/Engine/quark/model/scheduler_pro/SchedulerProAssignmentMixin.js", "../../Engine/lib/Engine/quark/model/scheduler_pro/SchedulerProDependencyMixin.js", "../../Engine/lib/Engine/quark/model/scheduler_pro/HasPercentDoneMixin.js", "../../Engine/lib/Engine/quark/model/scheduler_pro/SchedulerProHasAssignmentsMixin.js", "../../Engine/lib/Engine/quark/model/scheduler_pro/SchedulerProEventSegment.js", "../../Engine/lib/Engine/quark/model/scheduler_pro/SplitEventMixin.js", "../../Engine/lib/Engine/quark/model/scheduler_pro/HasEffortMixin.js", "../../Engine/lib/Engine/quark/model/scheduler_pro/HasEffortDispatcher.js", "../../Engine/lib/Engine/quark/model/scheduler_pro/HasSchedulingModeMixin.js", "../../Engine/lib/Engine/quark/model/scheduler_pro/scheduling_modes/FixedDurationDispatcher.js", "../../Engine/lib/Engine/quark/model/scheduler_pro/scheduling_modes/FixedDurationMixin.js", "../../Engine/lib/Engine/quark/model/scheduler_pro/SchedulerProEvent.js", "../../Engine/lib/Engine/quark/model/scheduler_pro/SchedulerProResourceMixin.js", "../../Engine/lib/Engine/quark/model/scheduler_pro/SchedulerProProjectMixin.js", "../../Core/lib/Core/helper/util/DomClassList.js", "../../Core/lib/Core/data/AjaxStore.js", "../../Core/lib/Core/data/DomDataStore.js", "../lib/SchedulerPro/model/changelog/ChangeLogEntity.js", "../../Grid/lib/Grid/data/GridRowModel.js", "../../Scheduler/lib/Scheduler/crud/mixin/AbstractCrudManagerValidation.js", "../../Scheduler/lib/Scheduler/crud/AbstractCrudManagerMixin.js", "../../Scheduler/lib/Scheduler/crud/AbstractCrudManager.js", "../../Scheduler/lib/Scheduler/crud/transport/AjaxTransport.js", "../../Scheduler/lib/Scheduler/crud/encoder/JsonEncoder.js", "../../Scheduler/lib/Scheduler/model/mixin/TimeZonedDatesMixin.js", "../../Scheduler/lib/Scheduler/model/TimeSpan.js", "../../Scheduler/lib/Scheduler/data/util/recurrence/RecurrenceDayRuleEncoder.js", "../../Scheduler/lib/Scheduler/data/util/recurrence/AbstractRecurrenceIterator.js", "../../Scheduler/lib/Scheduler/data/util/recurrence/DailyRecurrenceIterator.js", "../../Scheduler/lib/Scheduler/data/util/recurrence/WeeklyRecurrenceIterator.js", "../../Scheduler/lib/Scheduler/data/util/recurrence/MonthlyRecurrenceIterator.js", "../../Scheduler/lib/Scheduler/data/util/recurrence/YearlyRecurrenceIterator.js", "../../Scheduler/lib/Scheduler/model/RecurrenceModel.js", "../../Scheduler/lib/Scheduler/model/mixin/RecurringTimeSpan.js", "../../Scheduler/lib/Scheduler/model/ResourceTimeRangeModel.js", "../../Scheduler/lib/Scheduler/data/mixin/RecurringTimeSpansMixin.js", "../../Scheduler/lib/Scheduler/data/ResourceTimeRangeStore.js", "../../Scheduler/lib/Scheduler/data/mixin/PartOfProject.js", "../../Scheduler/lib/Scheduler/model/mixin/AssignmentModelMixin.js", "../../Scheduler/lib/Scheduler/model/AssignmentModel.js", "../../Scheduler/lib/Scheduler/data/mixin/AssignmentStoreMixin.js", "../../Scheduler/lib/Scheduler/data/AssignmentStore.js", "../../Scheduler/lib/Scheduler/data/mixin/EventStoreMixin.js", "../../Scheduler/lib/Scheduler/data/mixin/GetEventsMixin.js", "../../Core/lib/Core/util/DayTime.js", "../../Scheduler/lib/Scheduler/data/util/EventDayIndex.js", "../../Scheduler/lib/Scheduler/data/mixin/DayIndexMixin.js", "../../Scheduler/lib/Scheduler/data/mixin/SharedEventStoreMixin.js", "../../Scheduler/lib/Scheduler/data/mixin/RecurringEventsMixin.js", "../../Scheduler/lib/Scheduler/model/mixin/EventModelMixin.js", "../../Scheduler/lib/Scheduler/model/EventModel.js", "../../Scheduler/lib/Scheduler/data/EventStore.js", "../../Scheduler/lib/Scheduler/data/mixin/ResourceStoreMixin.js", "../../Scheduler/lib/Scheduler/model/mixin/ResourceModelMixin.js", "../../Scheduler/lib/Scheduler/model/ResourceModel.js", "../../Scheduler/lib/Scheduler/data/ResourceStore.js", "../../Scheduler/lib/Scheduler/model/DependencyBaseModel.js", "../../Scheduler/lib/Scheduler/model/DependencyModel.js", "../../Scheduler/lib/Scheduler/data/mixin/DependencyStoreMixin.js", "../../Scheduler/lib/Scheduler/data/DependencyStore.js", "../../Scheduler/lib/Scheduler/data/mixin/ProjectCrudManager.js", "../../Scheduler/lib/Scheduler/model/mixin/ProjectModelCommon.js", "../../Scheduler/lib/Scheduler/model/mixin/ProjectModelTimeZoneMixin.js", "../../Scheduler/lib/Scheduler/model/mixin/ProjectModelMixin.js", "../../Scheduler/lib/Scheduler/model/mixin/ProjectCurrentConfig.js", "../../Scheduler/lib/Scheduler/data/util/ModelPersistencyManager.js", "../../Scheduler/lib/Scheduler/model/ProjectModel.js", "../lib/SchedulerPro/data/mixin/PartOfProject.js", "../lib/SchedulerPro/model/AssignmentModel.js", "../lib/SchedulerPro/data/AssignmentStore.js", "../lib/SchedulerPro/model/CalendarIntervalModel.js", "../lib/SchedulerPro/model/CalendarModel.js", "../lib/SchedulerPro/data/CalendarManagerStore.js", "../lib/SchedulerPro/model/DependencyModel.js", "../lib/SchedulerPro/data/DependencyStore.js", "../lib/SchedulerPro/model/mixin/PercentDoneMixin.js", "../lib/SchedulerPro/model/EventSegmentModel.js", "../lib/SchedulerPro/model/EventModel.js", "../lib/SchedulerPro/data/EventStore.js", "../lib/SchedulerPro/model/ResourceModel.js", "../lib/SchedulerPro/data/ResourceStore.js", "../lib/SchedulerPro/data/mixin/ProjectCrudManager.js", "../lib/SchedulerPro/model/mixin/ProjectChangeHandlerMixin.js", "../lib/SchedulerPro/data/stm/action/EventUpdateAction.js", "../lib/SchedulerPro/data/stm/StateTrackingManager.js", "../lib/SchedulerPro/model/ProjectModel.js"],
  "sourcesContent": ["// @ts-nocheck\nconst diffSecond = (date, diff) => {\n    return new Date(\n        date.getFullYear(),\n        date.getMonth(),\n        date.getDate(),\n        date.getHours(),\n        date.getMinutes(),\n        date.getSeconds() + diff,\n        date.getMilliseconds()\n    );\n};\n/**\n * The code just copy/pasted from pre-built later.js file and made exported\n *\n * @private\n */\nexport const later = (function () {\n    \"use strict\";\n    var later = {\n        version: \"1.2.0\"\n    };\n    if (!Array.prototype.indexOf) {\n        Array.prototype.indexOf = function (searchElement) {\n            \"use strict\";\n            if (this == null) {\n                throw new TypeError();\n            }\n            var t = Object(this);\n            var len = t.length >>> 0;\n            if (len === 0) {\n                return -1;\n            }\n            var n = 0;\n            if (arguments.length > 1) {\n                n = Number(arguments[1]);\n                if (n != n) {\n                    n = 0;\n                }\n                else if (n != 0 && n != Infinity && n != -Infinity) {\n                    n = (n > 0 || -1) * Math.floor(Math.abs(n));\n                }\n            }\n            if (n >= len) {\n                return -1;\n            }\n            var k = n >= 0 ? n : Math.max(len - Math.abs(n), 0);\n            for (; k < len; k++) {\n                if (k in t && t[k] === searchElement) {\n                    return k;\n                }\n            }\n            return -1;\n        };\n    }\n    if (!String.prototype.trim) {\n        String.prototype.trim = function () {\n            return this.replace(/^\\s+|\\s+$/g, \"\");\n        };\n    }\n    later.array = {};\n    later.array.sort = function (arr, zeroIsLast) {\n        arr.sort(function (a, b) {\n            return +a - +b;\n        });\n        if (zeroIsLast && arr[0] === 0) {\n            arr.push(arr.shift());\n        }\n    };\n    later.array.next = function (val, values, extent) {\n        var cur, zeroIsLargest = extent[0] !== 0, nextIdx = 0;\n        for (var i = values.length - 1; i > -1; --i) {\n            cur = values[i];\n            if (cur === val) {\n                return cur;\n            }\n            if (cur > val || cur === 0 && zeroIsLargest && extent[1] > val) {\n                nextIdx = i;\n                continue;\n            }\n            break;\n        }\n        return values[nextIdx];\n    };\n    later.array.nextInvalid = function (val, values, extent) {\n        var min = extent[0], max = extent[1], len = values.length, zeroVal = values[len - 1] === 0 && min !== 0 ? max : 0, next = val, i = values.indexOf(val), start = next;\n        while (next === (values[i] || zeroVal)) {\n            next++;\n            if (next > max) {\n                next = min;\n            }\n            i++;\n            if (i === len) {\n                i = 0;\n            }\n            if (next === start) {\n                return undefined;\n            }\n        }\n        return next;\n    };\n    later.array.prev = function (val, values, extent) {\n        var cur, len = values.length, zeroIsLargest = extent[0] !== 0, prevIdx = len - 1;\n        for (var i = 0; i < len; i++) {\n            cur = values[i];\n            if (cur === val) {\n                return cur;\n            }\n            if (cur < val || cur === 0 && zeroIsLargest && extent[1] < val) {\n                prevIdx = i;\n                continue;\n            }\n            break;\n        }\n        return values[prevIdx];\n    };\n    later.array.prevInvalid = function (val, values, extent) {\n        var min = extent[0], max = extent[1], len = values.length, zeroVal = values[len - 1] === 0 && min !== 0 ? max : 0, next = val, i = values.indexOf(val), start = next;\n        while (next === (values[i] || zeroVal)) {\n            next--;\n            if (next < min) {\n                next = max;\n            }\n            i--;\n            if (i === -1) {\n                i = len - 1;\n            }\n            if (next === start) {\n                return undefined;\n            }\n        }\n        return next;\n    };\n    later.day = later.D = {\n        name: \"day\",\n        range: 86400,\n        val: function (d) {\n            return d.D || (d.D = later.date.getDate.call(d));\n        },\n        isValid: function (d, val) {\n            return later.D.val(d) === (val || later.D.extent(d)[1]);\n        },\n        extent: function (d) {\n            if (d.DExtent)\n                return d.DExtent;\n            var month = later.M.val(d), max = later.DAYS_IN_MONTH[month - 1];\n            if (month === 2 && later.dy.extent(d)[1] === 366) {\n                max = max + 1;\n            }\n            return d.DExtent = [1, max];\n        },\n        start: function (d) {\n            return d.DStart || (d.DStart = later.date.next(later.Y.val(d), later.M.val(d), later.D.val(d)));\n        },\n        end: function (d) {\n            return d.DEnd || (d.DEnd = later.date.prev(later.Y.val(d), later.M.val(d), later.D.val(d)));\n        },\n        next: function (d, val) {\n            val = val > later.D.extent(d)[1] ? 1 : val;\n            var month = later.date.nextRollover(d, val, later.D, later.M), DMax = later.D.extent(month)[1];\n            val = val > DMax ? 1 : val || DMax;\n            return later.date.next(later.Y.val(month), later.M.val(month), val);\n        },\n        prev: function (d, val) {\n            var month = later.date.prevRollover(d, val, later.D, later.M), DMax = later.D.extent(month)[1];\n            return later.date.prev(later.Y.val(month), later.M.val(month), val > DMax ? DMax : val || DMax);\n        }\n    };\n    later.dayOfWeekCount = later.dc = {\n        name: \"day of week count\",\n        range: 604800,\n        val: function (d) {\n            return d.dc || (d.dc = Math.floor((later.D.val(d) - 1) / 7) + 1);\n        },\n        isValid: function (d, val) {\n            return later.dc.val(d) === val || val === 0 && later.D.val(d) > later.D.extent(d)[1] - 7;\n        },\n        extent: function (d) {\n            return d.dcExtent || (d.dcExtent = [1, Math.ceil(later.D.extent(d)[1] / 7)]);\n        },\n        start: function (d) {\n            return d.dcStart || (d.dcStart = later.date.next(later.Y.val(d), later.M.val(d), Math.max(1, (later.dc.val(d) - 1) * 7 + 1 || 1)));\n        },\n        end: function (d) {\n            return d.dcEnd || (d.dcEnd = later.date.prev(later.Y.val(d), later.M.val(d), Math.min(later.dc.val(d) * 7, later.D.extent(d)[1])));\n        },\n        next: function (d, val) {\n            val = val > later.dc.extent(d)[1] ? 1 : val;\n            var month = later.date.nextRollover(d, val, later.dc, later.M), dcMax = later.dc.extent(month)[1];\n            val = val > dcMax ? 1 : val;\n            var next = later.date.next(later.Y.val(month), later.M.val(month), val === 0 ? later.D.extent(month)[1] - 6 : 1 + 7 * (val - 1));\n            if (next.getTime() <= d.getTime()) {\n                month = later.M.next(d, later.M.val(d) + 1);\n                return later.date.next(later.Y.val(month), later.M.val(month), val === 0 ? later.D.extent(month)[1] - 6 : 1 + 7 * (val - 1));\n            }\n            return next;\n        },\n        prev: function (d, val) {\n            var month = later.date.prevRollover(d, val, later.dc, later.M), dcMax = later.dc.extent(month)[1];\n            val = val > dcMax ? dcMax : val || dcMax;\n            return later.dc.end(later.date.prev(later.Y.val(month), later.M.val(month), 1 + 7 * (val - 1)));\n        }\n    };\n    later.dayOfWeek = later.dw = later.d = {\n        name: \"day of week\",\n        range: 86400,\n        val: function (d) {\n            return d.dw || (d.dw = later.date.getDay.call(d) + 1);\n        },\n        isValid: function (d, val) {\n            return later.dw.val(d) === (val || 7);\n        },\n        extent: function () {\n            return [1, 7];\n        },\n        start: function (d) {\n            return later.D.start(d);\n        },\n        end: function (d) {\n            return later.D.end(d);\n        },\n        next: function (d, val) {\n            val = val > 7 ? 1 : val || 7;\n            return later.date.next(later.Y.val(d), later.M.val(d), later.D.val(d) + (val - later.dw.val(d)) + (val <= later.dw.val(d) ? 7 : 0));\n        },\n        prev: function (d, val) {\n            val = val > 7 ? 7 : val || 7;\n            return later.date.prev(later.Y.val(d), later.M.val(d), later.D.val(d) + (val - later.dw.val(d)) + (val >= later.dw.val(d) ? -7 : 0));\n        }\n    };\n    later.dayOfYear = later.dy = {\n        name: \"day of year\",\n        range: 86400,\n        val: function (d) {\n            return d.dy || (d.dy = Math.ceil(1 + (later.D.start(d).getTime() - later.Y.start(d).getTime()) / later.DAY));\n        },\n        isValid: function (d, val) {\n            return later.dy.val(d) === (val || later.dy.extent(d)[1]);\n        },\n        extent: function (d) {\n            var year = later.Y.val(d);\n            return d.dyExtent || (d.dyExtent = [1, year % 4 ? 365 : 366]);\n        },\n        start: function (d) {\n            return later.D.start(d);\n        },\n        end: function (d) {\n            return later.D.end(d);\n        },\n        next: function (d, val) {\n            val = val > later.dy.extent(d)[1] ? 1 : val;\n            var year = later.date.nextRollover(d, val, later.dy, later.Y), dyMax = later.dy.extent(year)[1];\n            val = val > dyMax ? 1 : val || dyMax;\n            return later.date.next(later.Y.val(year), later.M.val(year), val);\n        },\n        prev: function (d, val) {\n            var year = later.date.prevRollover(d, val, later.dy, later.Y), dyMax = later.dy.extent(year)[1];\n            val = val > dyMax ? dyMax : val || dyMax;\n            return later.date.prev(later.Y.val(year), later.M.val(year), val);\n        }\n    };\n    later.hour = later.h = {\n        name: \"hour\",\n        range: 3600,\n        val: function (d) {\n            return d.h || (d.h = later.date.getHour.call(d));\n        },\n        isValid: function (d, val) {\n            return later.h.val(d) === val;\n        },\n        extent: function () {\n            return [0, 23];\n        },\n        start: function (d) {\n            return d.hStart || (d.hStart = later.date.next(later.Y.val(d), later.M.val(d), later.D.val(d), later.h.val(d)));\n        },\n        end: function (d) {\n            return d.hEnd || (d.hEnd = later.date.prev(later.Y.val(d), later.M.val(d), later.D.val(d), later.h.val(d)));\n        },\n        next: function (d, val) {\n            val = val > 23 ? 0 : val;\n            var next = later.date.next(later.Y.val(d), later.M.val(d), later.D.val(d) + (val <= later.h.val(d) ? 1 : 0), val);\n            if (!later.date.isUTC && next.getTime() <= d.getTime()) {\n                next = later.date.next(later.Y.val(next), later.M.val(next), later.D.val(next), val + 1);\n            }\n            return next;\n        },\n        prev: function (d, val) {\n            val = val > 23 ? 23 : val;\n            return later.date.prev(later.Y.val(d), later.M.val(d), later.D.val(d) + (val >= later.h.val(d) ? -1 : 0), val);\n        }\n    };\n    later.minute = later.m = {\n        name: \"minute\",\n        range: 60,\n        val: function (d) {\n            return d.m || (d.m = later.date.getMin.call(d));\n        },\n        isValid: function (d, val) {\n            return later.m.val(d) === val;\n        },\n        extent: function (d) {\n            return [0, 59];\n        },\n        start: function (d) {\n            return d.mStart || (d.mStart = later.date.next(later.Y.val(d), later.M.val(d), later.D.val(d), later.h.val(d), later.m.val(d)));\n        },\n        end: function (d) {\n            return d.mEnd || (d.mEnd = later.date.prev(later.Y.val(d), later.M.val(d), later.D.val(d), later.h.val(d), later.m.val(d)));\n        },\n        next: function (d, val) {\n            var m = later.m.val(d), s = later.s.val(d), inc = val > 59 ? 60 - m : val <= m ? 60 - m + val : val - m, next = new Date(d.getTime() + inc * later.MIN - s * later.SEC);\n            if (!later.date.isUTC && next.getTime() <= d.getTime()) {\n                next = new Date(d.getTime() + (inc + 120) * later.MIN - s * later.SEC);\n            }\n            return next;\n        },\n        prev: function (d, val) {\n            val = val > 59 ? 59 : val;\n            return later.date.prev(later.Y.val(d), later.M.val(d), later.D.val(d), later.h.val(d) + (val >= later.m.val(d) ? -1 : 0), val);\n        }\n    };\n    later.month = later.M = {\n        name: \"month\",\n        range: 2629740,\n        val: function (d) {\n            return d.M || (d.M = later.date.getMonth.call(d) + 1);\n        },\n        isValid: function (d, val) {\n            return later.M.val(d) === (val || 12);\n        },\n        extent: function () {\n            return [1, 12];\n        },\n        start: function (d) {\n            return d.MStart || (d.MStart = later.date.next(later.Y.val(d), later.M.val(d)));\n        },\n        end: function (d) {\n            return d.MEnd || (d.MEnd = later.date.prev(later.Y.val(d), later.M.val(d)));\n        },\n        next: function (d, val) {\n            val = val > 12 ? 1 : val || 12;\n            return later.date.next(later.Y.val(d) + (val > later.M.val(d) ? 0 : 1), val);\n        },\n        prev: function (d, val) {\n            val = val > 12 ? 12 : val || 12;\n            return later.date.prev(later.Y.val(d) - (val >= later.M.val(d) ? 1 : 0), val);\n        }\n    };\n    later.second = later.s = {\n        name: \"second\",\n        range: 1,\n        val: function (d) {\n            return d.s || (d.s = later.date.getSec.call(d));\n        },\n        isValid: function (d, val) {\n            return later.s.val(d) === val;\n        },\n        extent: function () {\n            return [0, 59];\n        },\n        start: function (d) {\n            return d;\n        },\n        end: function (d) {\n            return d;\n        },\n        next: function (d, val) {\n            var s = later.s.val(d), inc = val > 59 ? 60 - s : val <= s ? 60 - s + val : val - s, next = new Date(d.getTime() + inc * later.SEC);\n            if (!later.date.isUTC && next.getTime() <= d.getTime()) {\n                next = new Date(d.getTime() + (inc + 7200) * later.SEC);\n            }\n            return next;\n        },\n        prev: function (d, val, cache) {\n            val = val > 59 ? 59 : val;\n            return later.date.prev(later.Y.val(d), later.M.val(d), later.D.val(d), later.h.val(d), later.m.val(d) + (val >= later.s.val(d) ? -1 : 0), val);\n        }\n    };\n    later.time = later.t = {\n        name: \"time\",\n        range: 1,\n        val: function (d) {\n            return d.t || (d.t = later.h.val(d) * 3600 + later.m.val(d) * 60 + later.s.val(d));\n        },\n        isValid: function (d, val) {\n            return later.t.val(d) === val;\n        },\n        extent: function () {\n            return [0, 86399];\n        },\n        start: function (d) {\n            return d;\n        },\n        end: function (d) {\n            return d;\n        },\n        next: function (d, val) {\n            val = val > 86399 ? 0 : val;\n            var next = later.date.next(later.Y.val(d), later.M.val(d), later.D.val(d) + (val <= later.t.val(d) ? 1 : 0), 0, 0, val);\n            if (!later.date.isUTC && next.getTime() < d.getTime()) {\n                next = later.date.next(later.Y.val(next), later.M.val(next), later.D.val(next), later.h.val(next), later.m.val(next), val + 7200);\n            }\n            return next;\n        },\n        prev: function (d, val) {\n            val = val > 86399 ? 86399 : val;\n            return later.date.next(later.Y.val(d), later.M.val(d), later.D.val(d) + (val >= later.t.val(d) ? -1 : 0), 0, 0, val);\n        }\n    };\n    later.weekOfMonth = later.wm = {\n        name: \"week of month\",\n        range: 604800,\n        val: function (d) {\n            return d.wm || (d.wm = (later.D.val(d) + (later.dw.val(later.M.start(d)) - 1) + (7 - later.dw.val(d))) / 7);\n        },\n        isValid: function (d, val) {\n            return later.wm.val(d) === (val || later.wm.extent(d)[1]);\n        },\n        extent: function (d) {\n            return d.wmExtent || (d.wmExtent = [1, (later.D.extent(d)[1] + (later.dw.val(later.M.start(d)) - 1) + (7 - later.dw.val(later.M.end(d)))) / 7]);\n        },\n        start: function (d) {\n            return d.wmStart || (d.wmStart = later.date.next(later.Y.val(d), later.M.val(d), Math.max(later.D.val(d) - later.dw.val(d) + 1, 1)));\n        },\n        end: function (d) {\n            return d.wmEnd || (d.wmEnd = later.date.prev(later.Y.val(d), later.M.val(d), Math.min(later.D.val(d) + (7 - later.dw.val(d)), later.D.extent(d)[1])));\n        },\n        next: function (d, val) {\n            val = val > later.wm.extent(d)[1] ? 1 : val;\n            var month = later.date.nextRollover(d, val, later.wm, later.M), wmMax = later.wm.extent(month)[1];\n            val = val > wmMax ? 1 : val || wmMax;\n            return later.date.next(later.Y.val(month), later.M.val(month), Math.max(1, (val - 1) * 7 - (later.dw.val(month) - 2)));\n        },\n        prev: function (d, val) {\n            var month = later.date.prevRollover(d, val, later.wm, later.M), wmMax = later.wm.extent(month)[1];\n            val = val > wmMax ? wmMax : val || wmMax;\n            return later.wm.end(later.date.next(later.Y.val(month), later.M.val(month), Math.max(1, (val - 1) * 7 - (later.dw.val(month) - 2))));\n        }\n    };\n    later.weekOfYear = later.wy = {\n        name: \"week of year (ISO)\",\n        range: 604800,\n        val: function (d) {\n            if (d.wy)\n                return d.wy;\n            var wThur = later.dw.next(later.wy.start(d), 5), YThur = later.dw.next(later.Y.prev(wThur, later.Y.val(wThur) - 1), 5);\n            return d.wy = 1 + Math.ceil((wThur.getTime() - YThur.getTime()) / later.WEEK);\n        },\n        isValid: function (d, val) {\n            return later.wy.val(d) === (val || later.wy.extent(d)[1]);\n        },\n        extent: function (d) {\n            if (d.wyExtent)\n                return d.wyExtent;\n            var year = later.dw.next(later.wy.start(d), 5), dwFirst = later.dw.val(later.Y.start(year)), dwLast = later.dw.val(later.Y.end(year));\n            return d.wyExtent = [1, dwFirst === 5 || dwLast === 5 ? 53 : 52];\n        },\n        start: function (d) {\n            return d.wyStart || (d.wyStart = later.date.next(later.Y.val(d), later.M.val(d), later.D.val(d) - (later.dw.val(d) > 1 ? later.dw.val(d) - 2 : 6)));\n        },\n        end: function (d) {\n            return d.wyEnd || (d.wyEnd = later.date.prev(later.Y.val(d), later.M.val(d), later.D.val(d) + (later.dw.val(d) > 1 ? 8 - later.dw.val(d) : 0)));\n        },\n        next: function (d, val) {\n            val = val > later.wy.extent(d)[1] ? 1 : val;\n            var wyThur = later.dw.next(later.wy.start(d), 5), year = later.date.nextRollover(wyThur, val, later.wy, later.Y);\n            if (later.wy.val(year) !== 1) {\n                year = later.dw.next(year, 2);\n            }\n            var wyMax = later.wy.extent(year)[1], wyStart = later.wy.start(year);\n            val = val > wyMax ? 1 : val || wyMax;\n            return later.date.next(later.Y.val(wyStart), later.M.val(wyStart), later.D.val(wyStart) + 7 * (val - 1));\n        },\n        prev: function (d, val) {\n            var wyThur = later.dw.next(later.wy.start(d), 5), year = later.date.prevRollover(wyThur, val, later.wy, later.Y);\n            if (later.wy.val(year) !== 1) {\n                year = later.dw.next(year, 2);\n            }\n            var wyMax = later.wy.extent(year)[1], wyEnd = later.wy.end(year);\n            val = val > wyMax ? wyMax : val || wyMax;\n            return later.wy.end(later.date.next(later.Y.val(wyEnd), later.M.val(wyEnd), later.D.val(wyEnd) + 7 * (val - 1)));\n        }\n    };\n    later.year = later.Y = {\n        name: \"year\",\n        range: 31556900,\n        val: function (d) {\n            return d.Y || (d.Y = later.date.getYear.call(d));\n        },\n        isValid: function (d, val) {\n            return later.Y.val(d) === val;\n        },\n        extent: function () {\n            return [1970, 2099];\n        },\n        start: function (d) {\n            return d.YStart || (d.YStart = later.date.next(later.Y.val(d)));\n        },\n        end: function (d) {\n            return d.YEnd || (d.YEnd = later.date.prev(later.Y.val(d)));\n        },\n        next: function (d, val) {\n            return val > later.Y.val(d) && val <= later.Y.extent()[1] ? later.date.next(val) : later.NEVER;\n        },\n        prev: function (d, val) {\n            return val < later.Y.val(d) && val >= later.Y.extent()[0] ? later.date.prev(val) : later.NEVER;\n        }\n    };\n    later.fullDate = later.fd = {\n        name: \"full date\",\n        range: 1,\n        val: function (d) {\n            return d.fd || (d.fd = d.getTime());\n        },\n        isValid: function (d, val) {\n            return later.fd.val(d) === val;\n        },\n        extent: function () {\n            return [0, 3250368e7];\n        },\n        start: function (d) {\n            return d;\n        },\n        end: function (d) {\n            return d;\n        },\n        next: function (d, val) {\n            return later.fd.val(d) < val ? new Date(val) : later.NEVER;\n        },\n        prev: function (d, val) {\n            return later.fd.val(d) > val ? new Date(val) : later.NEVER;\n        }\n    };\n    later.modifier = {};\n    later.modifier.after = later.modifier.a = function (constraint, values) {\n        var value = values[0];\n        return {\n            name: \"after \" + constraint.name,\n            range: (constraint.extent(new Date())[1] - value) * constraint.range,\n            val: constraint.val,\n            isValid: function (d, val) {\n                return this.val(d) >= value;\n            },\n            extent: constraint.extent,\n            start: constraint.start,\n            end: constraint.end,\n            next: function (startDate, val) {\n                if (val != value)\n                    val = constraint.extent(startDate)[0];\n                return constraint.next(startDate, val);\n            },\n            prev: function (startDate, val) {\n                val = val === value ? constraint.extent(startDate)[1] : value - 1;\n                return constraint.prev(startDate, val);\n            }\n        };\n    };\n    later.modifier.before = later.modifier.b = function (constraint, values) {\n        var value = values[values.length - 1];\n        return {\n            name: \"before \" + constraint.name,\n            range: constraint.range * (value - 1),\n            val: constraint.val,\n            isValid: function (d, val) {\n                return this.val(d) < value;\n            },\n            extent: constraint.extent,\n            start: constraint.start,\n            end: constraint.end,\n            next: function (startDate, val) {\n                val = val === value ? constraint.extent(startDate)[0] : value;\n                return constraint.next(startDate, val);\n            },\n            prev: function (startDate, val) {\n                val = val === value ? value - 1 : constraint.extent(startDate)[1];\n                return constraint.prev(startDate, val);\n            }\n        };\n    };\n    later.compile = function (schedDef) {\n        var constraints = [], constraintsLen = 0, tickConstraint;\n        for (var key in schedDef) {\n            var nameParts = key.split(\"_\"), name = nameParts[0], mod = nameParts[1], vals = schedDef[key], constraint = mod ? later.modifier[mod](later[name], vals) : later[name];\n            constraints.push({\n                constraint: constraint,\n                vals: vals\n            });\n            constraintsLen++;\n        }\n        constraints.sort(function (a, b) {\n            var ra = a.constraint.range, rb = b.constraint.range;\n            return rb < ra ? -1 : rb > ra ? 1 : 0;\n        });\n        tickConstraint = constraints[constraintsLen - 1].constraint;\n        function compareFn(dir) {\n            return dir === \"next\" ? function (a, b) {\n                return a.getTime() > b.getTime();\n            } : function (a, b) {\n                return b.getTime() > a.getTime();\n            };\n        }\n        return {\n            start: function (dir, startDate) {\n                var next = startDate, nextVal = later.array[dir], maxAttempts = 1e3, done;\n                while (maxAttempts-- && !done && next) {\n                    done = true;\n                    for (var i = 0; i < constraintsLen; i++) {\n                        var constraint = constraints[i].constraint, curVal = constraint.val(next), extent = constraint.extent(next), newVal = nextVal(curVal, constraints[i].vals, extent);\n                        if (!constraint.isValid(next, newVal)) {\n                            next = constraint[dir](next, newVal);\n                            done = false;\n                            break;\n                        }\n                    }\n                }\n                if (next !== later.NEVER) {\n                    next = dir === \"next\" ? tickConstraint.start(next) : tickConstraint.end(next);\n                }\n                return next;\n            },\n            end: function (dir, startDate) {\n                var result, nextVal = later.array[dir + \"Invalid\"], compare = compareFn(dir);\n                for (var i = constraintsLen - 1; i >= 0; i--) {\n                    var constraint = constraints[i].constraint, curVal = constraint.val(startDate), extent = constraint.extent(startDate), newVal = nextVal(curVal, constraints[i].vals, extent), next;\n                    if (newVal !== undefined) {\n                        next = constraint[dir](startDate, newVal);\n                        if (next && (!result || compare(result, next))) {\n                            result = next;\n                        }\n                    }\n                }\n                return result;\n            },\n            tick: function (dir, date) {\n                return new Date(dir === \"next\" ? tickConstraint.end(date).getTime() + later.SEC : tickConstraint.start(date).getTime() - later.SEC);\n            },\n            // PATCH\n            tickSafe: function (dir, date) {\n                return dir === \"next\"\n                    ? diffSecond(tickConstraint.end(date), 1)\n                    : diffSecond(tickConstraint.start(date), -1)\n                ;\n            },\n            // EOF PATCH\n            tickStart: function (date) {\n                return tickConstraint.start(date);\n            }\n        };\n    };\n    later.schedule = function (sched) {\n        if (!sched)\n            throw new Error(\"Missing schedule definition.\");\n        if (!sched.schedules)\n            throw new Error(\"Definition must include at least one schedule.\");\n        var schedules = [], schedulesLen = sched.schedules.length, exceptions = [], exceptionsLen = sched.exceptions ? sched.exceptions.length : 0;\n        for (var i = 0; i < schedulesLen; i++) {\n            schedules.push(later.compile(sched.schedules[i]));\n        }\n        for (var j = 0; j < exceptionsLen; j++) {\n            exceptions.push(later.compile(sched.exceptions[j]));\n        }\n        function getInstances(dir, count, startDate, endDate, isRange) {\n            var compare = compareFn(dir), loopCount = count, maxAttempts = 1e6, schedStarts = [], exceptStarts = [], next, end, results = [], isForward = dir === \"next\", lastResult, rStart = isForward ? 0 : 1, rEnd = isForward ? 1 : 0;\n            startDate = startDate ? new Date(startDate) : new Date();\n            if (!startDate || !startDate.getTime())\n                throw new Error(\"Invalid start date.\");\n            setNextStarts(dir, schedules, schedStarts, startDate);\n            setRangeStarts(dir, exceptions, exceptStarts, startDate);\n            while (maxAttempts-- && loopCount && (next = findNext(schedStarts, compare))) {\n                if (endDate && compare(next, endDate)) {\n                    break;\n                }\n                if (exceptionsLen) {\n                    updateRangeStarts(dir, exceptions, exceptStarts, next);\n                    if (end = calcRangeOverlap(dir, exceptStarts, next)) {\n                        updateNextStarts(dir, schedules, schedStarts, end);\n                        continue;\n                    }\n                }\n                if (isRange) {\n                    var maxEndDate = calcMaxEndDate(exceptStarts, compare);\n                    end = calcEnd(dir, schedules, schedStarts, next, maxEndDate);\n                    var r = isForward ? [new Date(Math.max(startDate, next)), end ? new Date(endDate ? Math.min(end, endDate) : end) : undefined] : [end ? new Date(endDate ? Math.max(endDate, end.getTime() + later.SEC) : end.getTime() + later.SEC) : undefined, new Date(Math.min(startDate, next.getTime() + later.SEC))];\n                    if (lastResult && r[rStart].getTime() === lastResult[rEnd].getTime()) {\n                        lastResult[rEnd] = r[rEnd];\n                        loopCount++;\n                    }\n                    else {\n                        lastResult = r;\n                        results.push(lastResult);\n                    }\n                    if (!end)\n                        break;\n                    updateNextStarts(dir, schedules, schedStarts, end);\n                }\n                else {\n                    results.push(isForward ? new Date(Math.max(startDate, next)) : getStart(schedules, schedStarts, next, endDate));\n                    tickStarts(dir, schedules, schedStarts, next);\n                }\n                loopCount--;\n            }\n            for (var i = 0, len = results.length; i < len; i++) {\n                var result = results[i];\n                results[i] = Object.prototype.toString.call(result) === \"[object Array]\" ? [cleanDate(result[0]), cleanDate(result[1])] : cleanDate(result);\n            }\n            return results.length === 0 ? later.NEVER : count === 1 ? results[0] : results;\n        }\n        function cleanDate(d) {\n            if (d instanceof Date && !isNaN(d.valueOf())) {\n                return new Date(d);\n            }\n            return undefined;\n        }\n        function setNextStarts(dir, schedArr, startsArr, startDate) {\n            for (var i = 0, len = schedArr.length; i < len; i++) {\n                startsArr[i] = schedArr[i].start(dir, startDate);\n            }\n        }\n        function updateNextStarts(dir, schedArr, startsArr, startDate) {\n            var compare = compareFn(dir);\n            for (var i = 0, len = schedArr.length; i < len; i++) {\n                if (startsArr[i] && !compare(startsArr[i], startDate)) {\n                    startsArr[i] = schedArr[i].start(dir, startDate);\n                }\n            }\n        }\n        function setRangeStarts(dir, schedArr, rangesArr, startDate) {\n            var compare = compareFn(dir);\n            for (var i = 0, len = schedArr.length; i < len; i++) {\n                var nextStart = schedArr[i].start(dir, startDate);\n                if (!nextStart) {\n                    rangesArr[i] = later.NEVER;\n                }\n                else {\n                    rangesArr[i] = [nextStart, schedArr[i].end(dir, nextStart)];\n                }\n            }\n        }\n        function updateRangeStarts(dir, schedArr, rangesArr, startDate) {\n            var compare = compareFn(dir);\n            for (var i = 0, len = schedArr.length; i < len; i++) {\n                if (rangesArr[i] && !compare(rangesArr[i][0], startDate)) {\n                    var nextStart = schedArr[i].start(dir, startDate);\n                    if (!nextStart) {\n                        rangesArr[i] = later.NEVER;\n                    }\n                    else {\n                        rangesArr[i] = [nextStart, schedArr[i].end(dir, nextStart)];\n                    }\n                }\n            }\n        }\n        function tickStarts(dir, schedArr, startsArr, startDate) {\n            for (var i = 0, len = schedArr.length; i < len; i++) {\n                if (startsArr[i] && startsArr[i].getTime() === startDate.getTime()) {\n                    // PATCH\n                    const newStart = schedArr[i].start(dir, schedArr[i].tick(dir, startDate));\n                    // if the calculated `newStart` is the same as previous, this is probably\n                    // an endless loop caused by the DST shift (the browser won't halt because later.js\n                    // has a limit of 100000 iterations, but the calculated schedules will be all wrong)\n                    if (newStart !== later.NEVER && newStart.getTime() === startsArr[i].getTime()) {\n                        // in such case we use our own \"safe\" implementation of the \"tick\" method\n                        // which performs symbolic date manipulation\n                        // (instead of advancing on milliseconds since epoch timeaxis)\n                        // the former seems to be slower, that's why we only switch to it\n                        // in the case of infinite loop\n                        startsArr[i] = schedArr[i].start(dir, schedArr[i].tickSafe(dir, startDate));\n                    } else {\n                        startsArr[i] = newStart\n                    }\n                    // EOF PATCH\n                }\n            }\n        }\n        function getStart(schedArr, startsArr, startDate, minEndDate) {\n            var result;\n            for (var i = 0, len = startsArr.length; i < len; i++) {\n                if (startsArr[i] && startsArr[i].getTime() === startDate.getTime()) {\n                    var start = schedArr[i].tickStart(startDate);\n                    if (minEndDate && start < minEndDate) {\n                        return minEndDate;\n                    }\n                    if (!result || start > result) {\n                        result = start;\n                    }\n                }\n            }\n            return result;\n        }\n        function calcRangeOverlap(dir, rangesArr, startDate) {\n            var compare = compareFn(dir), result;\n            for (var i = 0, len = rangesArr.length; i < len; i++) {\n                var range = rangesArr[i];\n                if (range && !compare(range[0], startDate) && (!range[1] || compare(range[1], startDate))) {\n                    if (!result || compare(range[1], result)) {\n                        result = range[1];\n                    }\n                }\n            }\n            return result;\n        }\n        function calcMaxEndDate(exceptsArr, compare) {\n            var result;\n            for (var i = 0, len = exceptsArr.length; i < len; i++) {\n                if (exceptsArr[i] && (!result || compare(result, exceptsArr[i][0]))) {\n                    result = exceptsArr[i][0];\n                }\n            }\n            return result;\n        }\n        function calcEnd(dir, schedArr, startsArr, startDate, maxEndDate) {\n            var compare = compareFn(dir), result;\n            for (var i = 0, len = schedArr.length; i < len; i++) {\n                var start = startsArr[i];\n                if (start && start.getTime() === startDate.getTime()) {\n                    var end = schedArr[i].end(dir, start);\n                    if (maxEndDate && (!end || compare(end, maxEndDate))) {\n                        return maxEndDate;\n                    }\n                    if (!result || compare(end, result)) {\n                        result = end;\n                    }\n                }\n            }\n            return result;\n        }\n        function compareFn(dir) {\n            return dir === \"next\" ? function (a, b) {\n                return !b || a.getTime() > b.getTime();\n            } : function (a, b) {\n                return !a || b.getTime() > a.getTime();\n            };\n        }\n        function findNext(arr, compare) {\n            var next = arr[0];\n            for (var i = 1, len = arr.length; i < len; i++) {\n                if (arr[i] && compare(next, arr[i])) {\n                    next = arr[i];\n                }\n            }\n            return next;\n        }\n        return {\n            isValid: function (d) {\n                return getInstances(\"next\", 1, d, d) !== later.NEVER;\n            },\n            next: function (count, startDate, endDate) {\n                return getInstances(\"next\", count || 1, startDate, endDate);\n            },\n            prev: function (count, startDate, endDate) {\n                return getInstances(\"prev\", count || 1, startDate, endDate);\n            },\n            nextRange: function (count, startDate, endDate) {\n                return getInstances(\"next\", count || 1, startDate, endDate, true);\n            },\n            prevRange: function (count, startDate, endDate) {\n                return getInstances(\"prev\", count || 1, startDate, endDate, true);\n            }\n        };\n    };\n    later.setTimeout = function (fn, sched) {\n        var s = later.schedule(sched), t;\n        if (fn) {\n            scheduleTimeout();\n        }\n        function scheduleTimeout() {\n            var now = Date.now(), next = s.next(2, now);\n            if (!next[0]) {\n                t = undefined;\n                return;\n            }\n            var diff = next[0].getTime() - now;\n            if (diff < 1e3) {\n                diff = next[1] ? next[1].getTime() - now : 1e3;\n            }\n            if (diff < 2147483647) {\n                t = setTimeout(fn, diff);\n            }\n            else {\n                t = setTimeout(scheduleTimeout, 2147483647);\n            }\n        }\n        return {\n            isDone: function () {\n                return !t;\n            },\n            clear: function () {\n                clearTimeout(t);\n            }\n        };\n    };\n    later.setInterval = function (fn, sched) {\n        if (!fn) {\n            return;\n        }\n        var t = later.setTimeout(scheduleTimeout, sched), done = t.isDone();\n        function scheduleTimeout() {\n            if (!done) {\n                fn();\n                t = later.setTimeout(scheduleTimeout, sched);\n            }\n        }\n        return {\n            isDone: function () {\n                return t.isDone();\n            },\n            clear: function () {\n                done = true;\n                t.clear();\n            }\n        };\n    };\n    later.date = {};\n    later.date.timezone = function (useLocalTime) {\n        later.date.build = useLocalTime ? function (Y, M, D, h, m, s) {\n            return new Date(Y, M, D, h, m, s);\n        } : function (Y, M, D, h, m, s) {\n            return new Date(Date.UTC(Y, M, D, h, m, s));\n        };\n        var get = useLocalTime ? \"get\" : \"getUTC\", d = Date.prototype;\n        later.date.getYear = d[get + \"FullYear\"];\n        later.date.getMonth = d[get + \"Month\"];\n        later.date.getDate = d[get + \"Date\"];\n        later.date.getDay = d[get + \"Day\"];\n        later.date.getHour = d[get + \"Hours\"];\n        later.date.getMin = d[get + \"Minutes\"];\n        later.date.getSec = d[get + \"Seconds\"];\n        later.date.isUTC = !useLocalTime;\n    };\n    later.date.UTC = function () {\n        later.date.timezone(false);\n    };\n    later.date.localTime = function () {\n        later.date.timezone(true);\n    };\n    later.date.UTC();\n    later.SEC = 1e3;\n    later.MIN = later.SEC * 60;\n    later.HOUR = later.MIN * 60;\n    later.DAY = later.HOUR * 24;\n    later.WEEK = later.DAY * 7;\n    later.DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n    later.NEVER = 0;\n    later.date.next = function (Y, M, D, h, m, s) {\n        return later.date.build(Y, M !== undefined ? M - 1 : 0, D !== undefined ? D : 1, h || 0, m || 0, s || 0);\n    };\n    later.date.nextRollover = function (d, val, constraint, period) {\n        var cur = constraint.val(d), max = constraint.extent(d)[1];\n        return (val || max) <= cur || val > max ? new Date(period.end(d).getTime() + later.SEC) : period.start(d);\n    };\n    later.date.prev = function (Y, M, D, h, m, s) {\n        var len = arguments.length;\n        M = len < 2 ? 11 : M - 1;\n        D = len < 3 ? later.D.extent(later.date.next(Y, M + 1))[1] : D;\n        h = len < 4 ? 23 : h;\n        m = len < 5 ? 59 : m;\n        s = len < 6 ? 59 : s;\n        return later.date.build(Y, M, D, h, m, s);\n    };\n    later.date.prevRollover = function (d, val, constraint, period) {\n        var cur = constraint.val(d);\n        return val >= cur || !val ? period.start(period.prev(d, period.val(d) - 1)) : period.start(d);\n    };\n    later.parse = {};\n    later.parse.cron = function (expr, hasSeconds) {\n        var NAMES = {\n            JAN: 1,\n            FEB: 2,\n            MAR: 3,\n            APR: 4,\n            MAY: 5,\n            JUN: 6,\n            JUL: 7,\n            AUG: 8,\n            SEP: 9,\n            OCT: 10,\n            NOV: 11,\n            DEC: 12,\n            SUN: 1,\n            MON: 2,\n            TUE: 3,\n            WED: 4,\n            THU: 5,\n            FRI: 6,\n            SAT: 7\n        };\n        var REPLACEMENTS = {\n            \"* * * * * *\": \"0/1 * * * * *\",\n            \"@YEARLY\": \"0 0 1 1 *\",\n            \"@ANNUALLY\": \"0 0 1 1 *\",\n            \"@MONTHLY\": \"0 0 1 * *\",\n            \"@WEEKLY\": \"0 0 * * 0\",\n            \"@DAILY\": \"0 0 * * *\",\n            \"@HOURLY\": \"0 * * * *\"\n        };\n        var FIELDS = {\n            s: [0, 0, 59],\n            m: [1, 0, 59],\n            h: [2, 0, 23],\n            D: [3, 1, 31],\n            M: [4, 1, 12],\n            Y: [6, 1970, 2099],\n            d: [5, 1, 7, 1]\n        };\n        function getValue(value, offset, max) {\n            return isNaN(value) ? NAMES[value] || null : Math.min(+value + (offset || 0), max || 9999);\n        }\n        function cloneSchedule(sched) {\n            var clone = {}, field;\n            for (field in sched) {\n                if (field !== \"dc\" && field !== \"d\") {\n                    clone[field] = sched[field].slice(0);\n                }\n            }\n            return clone;\n        }\n        function add(sched, name, min, max, inc) {\n            var i = min;\n            if (!sched[name]) {\n                sched[name] = [];\n            }\n            while (i <= max) {\n                if (sched[name].indexOf(i) < 0) {\n                    sched[name].push(i);\n                }\n                i += inc || 1;\n            }\n            sched[name].sort(function (a, b) {\n                return a - b;\n            });\n        }\n        function addHash(schedules, curSched, value, hash) {\n            if (curSched.d && !curSched.dc || curSched.dc && curSched.dc.indexOf(hash) < 0) {\n                schedules.push(cloneSchedule(curSched));\n                curSched = schedules[schedules.length - 1];\n            }\n            add(curSched, \"d\", value, value);\n            add(curSched, \"dc\", hash, hash);\n        }\n        function addWeekday(s, curSched, value) {\n            var except1 = {}, except2 = {};\n            if (value === 1) {\n                add(curSched, \"D\", 1, 3);\n                add(curSched, \"d\", NAMES.MON, NAMES.FRI);\n                add(except1, \"D\", 2, 2);\n                add(except1, \"d\", NAMES.TUE, NAMES.FRI);\n                add(except2, \"D\", 3, 3);\n                add(except2, \"d\", NAMES.TUE, NAMES.FRI);\n            }\n            else {\n                add(curSched, \"D\", value - 1, value + 1);\n                add(curSched, \"d\", NAMES.MON, NAMES.FRI);\n                add(except1, \"D\", value - 1, value - 1);\n                add(except1, \"d\", NAMES.MON, NAMES.THU);\n                add(except2, \"D\", value + 1, value + 1);\n                add(except2, \"d\", NAMES.TUE, NAMES.FRI);\n            }\n            s.exceptions.push(except1);\n            s.exceptions.push(except2);\n        }\n        function addRange(item, curSched, name, min, max, offset) {\n            var incSplit = item.split(\"/\"), inc = +incSplit[1], range = incSplit[0];\n            if (range !== \"*\" && range !== \"0\") {\n                var rangeSplit = range.split(\"-\");\n                min = getValue(rangeSplit[0], offset, max);\n                max = getValue(rangeSplit[1], offset, max) || max;\n            }\n            add(curSched, name, min, max, inc);\n        }\n        function parse(item, s, name, min, max, offset) {\n            var value, split, schedules = s.schedules, curSched = schedules[schedules.length - 1];\n            if (item === \"L\") {\n                item = min - 1;\n            }\n            if ((value = getValue(item, offset, max)) !== null) {\n                add(curSched, name, value, value);\n            }\n            else if ((value = getValue(item.replace(\"W\", \"\"), offset, max)) !== null) {\n                addWeekday(s, curSched, value);\n            }\n            else if ((value = getValue(item.replace(\"L\", \"\"), offset, max)) !== null) {\n                addHash(schedules, curSched, value, min - 1);\n            }\n            else if ((split = item.split(\"#\")).length === 2) {\n                value = getValue(split[0], offset, max);\n                addHash(schedules, curSched, value, getValue(split[1]));\n            }\n            else {\n                addRange(item, curSched, name, min, max, offset);\n            }\n        }\n        function isHash(item) {\n            return item.indexOf(\"#\") > -1 || item.indexOf(\"L\") > 0;\n        }\n        function itemSorter(a, b) {\n            return isHash(a) && !isHash(b) ? 1 : a - b;\n        }\n        function parseExpr(expr) {\n            var schedule = {\n                schedules: [{}],\n                exceptions: []\n            }, components = expr.replace(/(\\s)+/g, \" \").split(\" \"), field, f, component, items;\n            for (field in FIELDS) {\n                f = FIELDS[field];\n                component = components[f[0]];\n                if (component && component !== \"*\" && component !== \"?\") {\n                    items = component.split(\",\").sort(itemSorter);\n                    var i, length = items.length;\n                    for (i = 0; i < length; i++) {\n                        parse(items[i], schedule, field, f[1], f[2], f[3]);\n                    }\n                }\n            }\n            return schedule;\n        }\n        function prepareExpr(expr) {\n            var prepared = expr.toUpperCase();\n            return REPLACEMENTS[prepared] || prepared;\n        }\n        var e = prepareExpr(expr);\n        return parseExpr(hasSeconds ? e : \"0 \" + e);\n    };\n    later.parse.recur = function () {\n        var schedules = [], exceptions = [], cur, curArr = schedules, curName, values, every, modifier, applyMin, applyMax, i, last;\n        function add(name, min, max) {\n            name = modifier ? name + \"_\" + modifier : name;\n            if (!cur) {\n                curArr.push({});\n                cur = curArr[0];\n            }\n            if (!cur[name]) {\n                cur[name] = [];\n            }\n            curName = cur[name];\n            if (every) {\n                values = [];\n                for (i = min; i <= max; i += every) {\n                    values.push(i);\n                }\n                last = {\n                    n: name,\n                    x: every,\n                    c: curName.length,\n                    m: max\n                };\n            }\n            values = applyMin ? [min] : applyMax ? [max] : values;\n            var length = values.length;\n            for (i = 0; i < length; i += 1) {\n                var val = values[i];\n                if (curName.indexOf(val) < 0) {\n                    curName.push(val);\n                }\n            }\n            values = every = modifier = applyMin = applyMax = 0;\n        }\n        return {\n            schedules: schedules,\n            exceptions: exceptions,\n            on: function () {\n                values = arguments[0] instanceof Array ? arguments[0] : arguments;\n                return this;\n            },\n            every: function (x) {\n                every = x || 1;\n                return this;\n            },\n            after: function (x) {\n                modifier = \"a\";\n                values = [x];\n                return this;\n            },\n            before: function (x) {\n                modifier = \"b\";\n                values = [x];\n                return this;\n            },\n            first: function () {\n                applyMin = 1;\n                return this;\n            },\n            last: function () {\n                applyMax = 1;\n                return this;\n            },\n            time: function () {\n                for (var i = 0, len = values.length; i < len; i++) {\n                    var split = values[i].split(\":\");\n                    if (split.length < 3)\n                        split.push(0);\n                    values[i] = +split[0] * 3600 + +split[1] * 60 + +split[2];\n                }\n                add(\"t\");\n                return this;\n            },\n            second: function () {\n                add(\"s\", 0, 59);\n                return this;\n            },\n            minute: function () {\n                add(\"m\", 0, 59);\n                return this;\n            },\n            hour: function () {\n                add(\"h\", 0, 23);\n                return this;\n            },\n            dayOfMonth: function () {\n                add(\"D\", 1, applyMax ? 0 : 31);\n                return this;\n            },\n            dayOfWeek: function () {\n                add(\"d\", 1, 7);\n                return this;\n            },\n            onWeekend: function () {\n                values = [1, 7];\n                return this.dayOfWeek();\n            },\n            onWeekday: function () {\n                values = [2, 3, 4, 5, 6];\n                return this.dayOfWeek();\n            },\n            dayOfWeekCount: function () {\n                add(\"dc\", 1, applyMax ? 0 : 5);\n                return this;\n            },\n            dayOfYear: function () {\n                add(\"dy\", 1, applyMax ? 0 : 366);\n                return this;\n            },\n            weekOfMonth: function () {\n                add(\"wm\", 1, applyMax ? 0 : 5);\n                return this;\n            },\n            weekOfYear: function () {\n                add(\"wy\", 1, applyMax ? 0 : 53);\n                return this;\n            },\n            month: function () {\n                add(\"M\", 1, 12);\n                return this;\n            },\n            year: function () {\n                add(\"Y\", 1970, 2450);\n                return this;\n            },\n            fullDate: function () {\n                for (var i = 0, len = values.length; i < len; i++) {\n                    values[i] = values[i].getTime();\n                }\n                add(\"fd\");\n                return this;\n            },\n            customModifier: function (id, vals) {\n                var custom = later.modifier[id];\n                if (!custom)\n                    throw new Error(\"Custom modifier \" + id + \" not recognized!\");\n                modifier = id;\n                values = arguments[1] instanceof Array ? arguments[1] : [arguments[1]];\n                return this;\n            },\n            customPeriod: function (id) {\n                var custom = later[id];\n                if (!custom)\n                    throw new Error(\"Custom time period \" + id + \" not recognized!\");\n                add(id, custom.extent(new Date())[0], custom.extent(new Date())[1]);\n                return this;\n            },\n            startingOn: function (start) {\n                return this.between(start, last.m);\n            },\n            between: function (start, end) {\n                cur[last.n] = cur[last.n].splice(0, last.c);\n                every = last.x;\n                add(last.n, start, end);\n                return this;\n            },\n            and: function () {\n                cur = curArr[curArr.push({}) - 1];\n                return this;\n            },\n            except: function () {\n                curArr = exceptions;\n                cur = null;\n                return this;\n            }\n        };\n    };\n    later.parse.text = function (str) {\n        var recur = later.parse.recur, pos = 0, input = \"\", error;\n        var TOKENTYPES = {\n            eof: /^$/,\n            fullDate: /^(\\d\\d\\d\\d-\\d\\d-\\d\\dt\\d\\d:\\d\\d:\\d\\d)\\b/,\n            rank: /^((\\d\\d\\d\\d)|([2-5]?1(st)?|[2-5]?2(nd)?|[2-5]?3(rd)?|(0|[1-5]?[4-9]|[1-5]0|1[1-3])(th)?))\\b/,\n            time: /^((([0]?[1-9]|1[0-2]):[0-5]\\d(\\s)?(am|pm))|(([0]?\\d|1\\d|2[0-3]):[0-5]\\d))\\b/,\n            dayName: /^((sun|mon|tue(s)?|wed(nes)?|thu(r(s)?)?|fri|sat(ur)?)(day)?)\\b/,\n            monthName: /^(jan(uary)?|feb(ruary)?|ma((r(ch)?)?|y)|apr(il)?|ju(ly|ne)|aug(ust)?|oct(ober)?|(sept|nov|dec)(ember)?)\\b/,\n            yearIndex: /^(\\d\\d\\d\\d)\\b/,\n            every: /^every\\b/,\n            after: /^after\\b/,\n            before: /^before\\b/,\n            second: /^(s|sec(ond)?(s)?)\\b/,\n            minute: /^(m|min(ute)?(s)?)\\b/,\n            hour: /^(h|hour(s)?)\\b/,\n            day: /^(day(s)?( of the month)?)\\b/,\n            dayInstance: /^day instance\\b/,\n            dayOfWeek: /^day(s)? of the week\\b/,\n            dayOfYear: /^day(s)? of the year\\b/,\n            weekOfYear: /^week(s)?( of the year)?\\b/,\n            weekOfMonth: /^week(s)? of the month\\b/,\n            weekday: /^weekday\\b/,\n            weekend: /^weekend\\b/,\n            month: /^month(s)?\\b/,\n            year: /^year(s)?\\b/,\n            between: /^between (the)?\\b/,\n            start: /^(start(ing)? (at|on( the)?)?)\\b/,\n            at: /^(at|@)\\b/,\n            and: /^(,|and\\b)/,\n            except: /^(except\\b)/,\n            also: /(also)\\b/,\n            first: /^(first)\\b/,\n            last: /^last\\b/,\n            \"in\": /^in\\b/,\n            of: /^of\\b/,\n            onthe: /^on the\\b/,\n            on: /^on\\b/,\n            through: /(-|^(to|through)\\b)/\n        };\n        var NAMES = {\n            jan: 1,\n            feb: 2,\n            mar: 3,\n            apr: 4,\n            may: 5,\n            jun: 6,\n            jul: 7,\n            aug: 8,\n            sep: 9,\n            oct: 10,\n            nov: 11,\n            dec: 12,\n            sun: 1,\n            mon: 2,\n            tue: 3,\n            wed: 4,\n            thu: 5,\n            fri: 6,\n            sat: 7,\n            \"1st\": 1,\n            fir: 1,\n            \"2nd\": 2,\n            sec: 2,\n            \"3rd\": 3,\n            thi: 3,\n            \"4th\": 4,\n            \"for\": 4\n        };\n        function t(start, end, text, type) {\n            return {\n                startPos: start,\n                endPos: end,\n                text: text,\n                type: type\n            };\n        }\n        function peek(expected) {\n            var scanTokens = expected instanceof Array ? expected : [expected], whiteSpace = /\\s+/, token, curInput, m, scanToken, start, len;\n            scanTokens.push(whiteSpace);\n            start = pos;\n            while (!token || token.type === whiteSpace) {\n                len = -1;\n                curInput = input.substring(start);\n                token = t(start, start, input.split(whiteSpace)[0]);\n                var i, length = scanTokens.length;\n                for (i = 0; i < length; i++) {\n                    scanToken = scanTokens[i];\n                    m = scanToken.exec(curInput);\n                    if (m && m.index === 0 && m[0].length > len) {\n                        len = m[0].length;\n                        token = t(start, start + len, curInput.substring(0, len), scanToken);\n                    }\n                }\n                if (token.type === whiteSpace) {\n                    start = token.endPos;\n                }\n            }\n            return token;\n        }\n        function scan(expectedToken) {\n            var token = peek(expectedToken);\n            pos = token.endPos;\n            return token;\n        }\n        function parseThroughExpr(tokenType) {\n            var start = +parseTokenValue(tokenType), end = checkAndParse(TOKENTYPES.through) ? +parseTokenValue(tokenType) : start, nums = [];\n            for (var i = start; i <= end; i++) {\n                nums.push(i);\n            }\n            return nums;\n        }\n        function parseRanges(tokenType) {\n            var nums = parseThroughExpr(tokenType);\n            while (checkAndParse(TOKENTYPES.and)) {\n                nums = nums.concat(parseThroughExpr(tokenType));\n            }\n            return nums;\n        }\n        function parseEvery(r) {\n            var num, period, start, end;\n            if (checkAndParse(TOKENTYPES.weekend)) {\n                r.on(NAMES.sun, NAMES.sat).dayOfWeek();\n            }\n            else if (checkAndParse(TOKENTYPES.weekday)) {\n                r.on(NAMES.mon, NAMES.tue, NAMES.wed, NAMES.thu, NAMES.fri).dayOfWeek();\n            }\n            else {\n                num = parseTokenValue(TOKENTYPES.rank);\n                r.every(num);\n                period = parseTimePeriod(r);\n                if (checkAndParse(TOKENTYPES.start)) {\n                    num = parseTokenValue(TOKENTYPES.rank);\n                    r.startingOn(num);\n                    parseToken(period.type);\n                }\n                else if (checkAndParse(TOKENTYPES.between)) {\n                    start = parseTokenValue(TOKENTYPES.rank);\n                    if (checkAndParse(TOKENTYPES.and)) {\n                        end = parseTokenValue(TOKENTYPES.rank);\n                        r.between(start, end);\n                    }\n                }\n            }\n        }\n        function parseOnThe(r) {\n            if (checkAndParse(TOKENTYPES.first)) {\n                r.first();\n            }\n            else if (checkAndParse(TOKENTYPES.last)) {\n                r.last();\n            }\n            else {\n                r.on(parseRanges(TOKENTYPES.rank));\n            }\n            parseTimePeriod(r);\n        }\n        function parseScheduleExpr(str) {\n            pos = 0;\n            input = str;\n            error = -1;\n            var r = recur();\n            while (pos < input.length && error < 0) {\n                var token = parseToken([TOKENTYPES.every, TOKENTYPES.after, TOKENTYPES.before, TOKENTYPES.onthe, TOKENTYPES.on, TOKENTYPES.of, TOKENTYPES[\"in\"], TOKENTYPES.at, TOKENTYPES.and, TOKENTYPES.except, TOKENTYPES.also]);\n                switch (token.type) {\n                    case TOKENTYPES.every:\n                        parseEvery(r);\n                        break;\n                    case TOKENTYPES.after:\n                        if (peek(TOKENTYPES.time).type !== undefined) {\n                            r.after(parseTokenValue(TOKENTYPES.time));\n                            r.time();\n                        }\n                        else if (peek(TOKENTYPES.fullDate).type !== undefined) {\n                            r.after(parseTokenValue(TOKENTYPES.fullDate));\n                            r.fullDate();\n                        }\n                        else {\n                            r.after(parseTokenValue(TOKENTYPES.rank));\n                            parseTimePeriod(r);\n                        }\n                        break;\n                    case TOKENTYPES.before:\n                        if (peek(TOKENTYPES.time).type !== undefined) {\n                            r.before(parseTokenValue(TOKENTYPES.time));\n                            r.time();\n                        }\n                        else if (peek(TOKENTYPES.fullDate).type !== undefined) {\n                            r.before(parseTokenValue(TOKENTYPES.fullDate));\n                            r.fullDate();\n                        }\n                        else {\n                            r.before(parseTokenValue(TOKENTYPES.rank));\n                            parseTimePeriod(r);\n                        }\n                        break;\n                    case TOKENTYPES.onthe:\n                        parseOnThe(r);\n                        break;\n                    case TOKENTYPES.on:\n                        r.on(parseRanges(TOKENTYPES.dayName)).dayOfWeek();\n                        break;\n                    case TOKENTYPES.of:\n                        r.on(parseRanges(TOKENTYPES.monthName)).month();\n                        break;\n                    case TOKENTYPES[\"in\"]:\n                        r.on(parseRanges(TOKENTYPES.yearIndex)).year();\n                        break;\n                    case TOKENTYPES.at:\n                        r.on(parseTokenValue(TOKENTYPES.time)).time();\n                        while (checkAndParse(TOKENTYPES.and)) {\n                            r.on(parseTokenValue(TOKENTYPES.time)).time();\n                        }\n                        break;\n                    case TOKENTYPES.and:\n                        break;\n                    case TOKENTYPES.also:\n                        r.and();\n                        break;\n                    case TOKENTYPES.except:\n                        r.except();\n                        break;\n                    default:\n                        error = pos;\n                }\n            }\n            return {\n                schedules: r.schedules,\n                exceptions: r.exceptions,\n                error: error\n            };\n        }\n        function parseTimePeriod(r) {\n            var timePeriod = parseToken([TOKENTYPES.second, TOKENTYPES.minute, TOKENTYPES.hour, TOKENTYPES.dayOfYear, TOKENTYPES.dayOfWeek, TOKENTYPES.dayInstance, TOKENTYPES.day, TOKENTYPES.month, TOKENTYPES.year, TOKENTYPES.weekOfMonth, TOKENTYPES.weekOfYear]);\n            switch (timePeriod.type) {\n                case TOKENTYPES.second:\n                    r.second();\n                    break;\n                case TOKENTYPES.minute:\n                    r.minute();\n                    break;\n                case TOKENTYPES.hour:\n                    r.hour();\n                    break;\n                case TOKENTYPES.dayOfYear:\n                    r.dayOfYear();\n                    break;\n                case TOKENTYPES.dayOfWeek:\n                    r.dayOfWeek();\n                    break;\n                case TOKENTYPES.dayInstance:\n                    r.dayOfWeekCount();\n                    break;\n                case TOKENTYPES.day:\n                    r.dayOfMonth();\n                    break;\n                case TOKENTYPES.weekOfMonth:\n                    r.weekOfMonth();\n                    break;\n                case TOKENTYPES.weekOfYear:\n                    r.weekOfYear();\n                    break;\n                case TOKENTYPES.month:\n                    r.month();\n                    break;\n                case TOKENTYPES.year:\n                    r.year();\n                    break;\n                default:\n                    error = pos;\n            }\n            return timePeriod;\n        }\n        function checkAndParse(tokenType) {\n            var found = peek(tokenType).type === tokenType;\n            if (found) {\n                scan(tokenType);\n            }\n            return found;\n        }\n        function parseToken(tokenType) {\n            var t = scan(tokenType);\n            if (t.type) {\n                t.text = convertString(t.text, tokenType);\n            }\n            else {\n                error = pos;\n            }\n            return t;\n        }\n        function parseTokenValue(tokenType) {\n            return parseToken(tokenType).text;\n        }\n        function convertString(str, tokenType) {\n            var output = str;\n            switch (tokenType) {\n                case TOKENTYPES.time:\n                    var parts = str.split(/(:|am|pm)/), hour = parts[3] === \"pm\" && parts[0] < 12 ? parseInt(parts[0], 10) + 12 : parts[0], min = parts[2].trim();\n                    output = (hour.length === 1 ? \"0\" : \"\") + hour + \":\" + min;\n                    break;\n                case TOKENTYPES.rank:\n                    output = parseInt(/^\\d+/.exec(str)[0], 10);\n                    break;\n                case TOKENTYPES.monthName:\n                case TOKENTYPES.dayName:\n                    output = NAMES[str.substring(0, 3)];\n                    break;\n                case TOKENTYPES.fullDate:\n                    output = new Date(str.toUpperCase());\n                    break;\n                }\n            return output;\n        }\n        return parseScheduleExpr(str.toLowerCase());\n    };\n    return later;\n})();\n// Set the local time mode for \"later\" library\nlater.date.localTime();\nexport default later;\n", "//---------------------------------------------------------------------------------------------------------------------\n/**\n * Given a single `Iterable`, returns an array of 2 iterables, mirroring the original one (which should not be used anymore).\n *\n * For example:\n *\n *     const gen = function* () { yield 1; yield 2; yield 3 }\n *\n *     const [ iterable1, iterable2 ] = split(gen())\n *     const [ iter1, iter2 ] = [\n *         iterable1[ Symbol.iterator ](),\n *         iterable2[ Symbol.iterator ]()\n *     ]\n *\n *     iter1.next() // 1\n *     iter2.next() // 1\n *     iter2.next() // 2\n *     iter2.next() // 3\n *     iter1.next() // 2\n *     iter1.next() // 3\n *     iter1.next() // done\n *     iter2.next() // done\n *\n * @param iterable\n */\nexport function split(iterable) {\n    const gen1Pending = [];\n    const gen2Pending = [];\n    let iterator;\n    const gen1 = function* () {\n        if (!iterator)\n            iterator = iterable[Symbol.iterator]();\n        while (true) {\n            if (gen1Pending.length) {\n                yield* gen1Pending;\n                gen1Pending.length = 0;\n            }\n            if (!iterator)\n                break;\n            const { value, done } = iterator.next();\n            if (done) {\n                iterator = null;\n                iterable = null;\n                break;\n            }\n            gen2Pending.push(value);\n            yield value;\n        }\n    };\n    const gen2 = function* () {\n        if (!iterator)\n            iterator = iterable[Symbol.iterator]();\n        while (true) {\n            if (gen2Pending.length) {\n                yield* gen2Pending;\n                gen2Pending.length = 0;\n            }\n            if (!iterator)\n                break;\n            const { value, done } = iterator.next();\n            if (done) {\n                iterator = null;\n                iterable = null;\n                break;\n            }\n            gen1Pending.push(value);\n            yield value;\n        }\n    };\n    return [gen1(), gen2()];\n}\n//---------------------------------------------------------------------------------------------------------------------\nexport function* inBatchesBySize(iterator, batchSize) {\n    if (batchSize < 0)\n        throw new Error(\"Batch size needs to a natural number\");\n    batchSize = batchSize | 0;\n    const runningBatch = [];\n    for (const el of iterator) {\n        if (runningBatch.length === batchSize) {\n            yield runningBatch;\n            runningBatch.length = 0;\n        }\n        runningBatch.push(el);\n    }\n    if (runningBatch.length > 0)\n        yield runningBatch;\n}\n//---------------------------------------------------------------------------------------------------------------------\nexport function* filter(iterator, func) {\n    let i = 0;\n    for (const el of iterator) {\n        if (func(el, i++))\n            yield el;\n    }\n}\n//---------------------------------------------------------------------------------------------------------------------\nexport function* drop(iterator, howMany) {\n    let i = 0;\n    for (const el of iterator) {\n        if (++i > howMany)\n            yield el;\n    }\n}\n//---------------------------------------------------------------------------------------------------------------------\nexport function every(iterator, func) {\n    let i = 0;\n    for (const el of iterator) {\n        if (!func(el, i++))\n            return false;\n    }\n    return true;\n}\n//---------------------------------------------------------------------------------------------------------------------\nexport function some(iterator, func) {\n    let i = 0;\n    for (const el of iterator) {\n        if (func(el, i++))\n            return true;\n    }\n    return false;\n}\n//---------------------------------------------------------------------------------------------------------------------\nexport function* map(iterator, func) {\n    let i = 0;\n    for (const el of iterator)\n        yield func(el, i++);\n}\n//---------------------------------------------------------------------------------------------------------------------\nexport function reduce(iterator, func, initialAcc) {\n    let i = 0;\n    let acc = initialAcc;\n    for (const el of iterator) {\n        acc = func(acc, el, i++);\n    }\n    return acc;\n}\n//---------------------------------------------------------------------------------------------------------------------\nexport function* uniqueOnly(iterator) {\n    const seen = new Set();\n    for (const el of iterator) {\n        if (!seen.has(el)) {\n            seen.add(el);\n            yield el;\n        }\n    }\n}\n//---------------------------------------------------------------------------------------------------------------------\nexport function* uniqueOnlyBy(iterator, func) {\n    const seen = new Set();\n    for (const el of iterator) {\n        const uniqueBy = func(el);\n        if (!seen.has(uniqueBy)) {\n            seen.add(uniqueBy);\n            yield el;\n        }\n    }\n}\n//---------------------------------------------------------------------------------------------------------------------\nexport function* reverse(iterator) {\n    const all = Array.from(iterator);\n    for (let i = all.length - 1; i >= 0; i--)\n        yield all[i];\n}\n//---------------------------------------------------------------------------------------------------------------------\nexport function* takeWhile(iterator, func) {\n    let i = 0;\n    for (const el of iterator) {\n        if (func(el, i++))\n            yield el;\n        else\n            return;\n    }\n}\n//---------------------------------------------------------------------------------------------------------------------\nexport function* takeUntilIncluding(iterator, func) {\n    let i = 0;\n    for (const el of iterator) {\n        yield el;\n        if (func(el, i++))\n            return;\n    }\n}\n//---------------------------------------------------------------------------------------------------------------------\nexport function* takeUntilExcluding(iterator, func) {\n    let i = 0;\n    for (const el of iterator) {\n        if (func(el, i++))\n            return;\n        yield el;\n    }\n}\n//---------------------------------------------------------------------------------------------------------------------\nexport function* concat(...iterators) {\n    for (let i = 0; i < iterators.length; i++)\n        yield* iterators[i];\n}\n//---------------------------------------------------------------------------------------------------------------------\nexport function* concatIterable(iteratorsProducer) {\n    for (const iterator of iteratorsProducer)\n        yield* iterator;\n}\n//---------------------------------------------------------------------------------------------------------------------\n// just a chained syntax sugar class\n// note, that we either use a combination of `this.derive()` + this.iterable (which will clear the `this.iterable`)\n// or, use just `this` as iterable, which will also clear the iterator\n//\nexport class ChainedIteratorClass {\n    constructor(iterable) {\n        this.iterable = undefined;\n        if (!iterable)\n            throw new Error(\"Require an iterable instance for chaining\");\n        this.iterable = iterable;\n    }\n    derive(iterable) {\n        this.iterable = undefined;\n        return new ChainedIteratorClass(iterable);\n    }\n    copy() {\n        const [iter1, iter2] = split(this.iterable);\n        this.iterable = iter2;\n        return new ChainedIteratorClass(iter1);\n    }\n    split() {\n        const [iter1, iter2] = split(this.iterable);\n        return [new ChainedIteratorClass(iter1), this.derive(iter2)];\n    }\n    inBatchesBySize(batchSize) {\n        return this.derive(inBatchesBySize(this.iterable, batchSize));\n    }\n    filter(func) {\n        return this.derive(filter(this.iterable, func));\n    }\n    drop(howMany) {\n        return this.derive(drop(this.iterable, howMany));\n    }\n    map(func) {\n        return this.derive(map(this.iterable, func));\n    }\n    reduce(func, initialAcc) {\n        return reduce(this, func, initialAcc);\n    }\n    concat() {\n        //@ts-ignore\n        return this.derive(concatIterable(this.iterable));\n    }\n    uniqueOnly() {\n        return this.derive(uniqueOnly(this.iterable));\n    }\n    uniqueOnlyBy(func) {\n        return this.derive(uniqueOnlyBy(this.iterable, func));\n    }\n    every(func) {\n        return every(this, func);\n    }\n    some(func) {\n        return some(this, func);\n    }\n    takeWhile(func) {\n        return this.derive(takeWhile(this.iterable, func));\n    }\n    *[Symbol.iterator]() {\n        let iterable = this.iterable;\n        if (!iterable)\n            throw new Error(\"Chained iterator already exhausted or used to derive the new one\");\n        // practice shows, that cleaning up the iterable after yourself helps garbage collector a lot\n        this.iterable = undefined;\n        yield* iterable;\n        // yes, we really want to avoid memory leaks\n        iterable = undefined;\n    }\n    toArray() {\n        return Array.from(this);\n    }\n    sort(order) {\n        return Array.from(this).sort(order);\n    }\n    toSet() {\n        return new Set(this);\n    }\n    toMap() {\n        //@ts-ignore\n        return new Map(this);\n    }\n    // toMap<K, V> () : T extends [ K, V ] ? Map<K, V> : never  {\n    //     return new Map<K, V>(this.iterable as (T extends [ K, V ] ? Iterable<T> : never)) as (T extends [ K, V ] ? Map<K, V> : never)\n    // }\n    flush() {\n        for (const element of this) { }\n    }\n    memoize() {\n        return new MemoizedIteratorClass(this);\n    }\n}\nexport const ChainedIterator = (iterator) => new ChainedIteratorClass(iterator);\nexport const CI = ChainedIterator;\n//---------------------------------------------------------------------------------------------------------------------\nexport class MemoizedIteratorClass extends ChainedIteratorClass {\n    constructor() {\n        super(...arguments);\n        this.elements = [];\n        this.$iterator = undefined;\n    }\n    set iterable(iterable) {\n        this.$iterable = iterable;\n    }\n    get iterable() {\n        return this;\n    }\n    derive(iterable) {\n        return new ChainedIteratorClass(iterable);\n    }\n    *[Symbol.iterator]() {\n        const elements = this.elements;\n        if (this.$iterable) {\n            if (!this.$iterator)\n                this.$iterator = this.$iterable[Symbol.iterator]();\n            let iterator = this.$iterator;\n            let alreadyConsumed = elements.length;\n            // yield the 1st batch \"efficiently\"\n            if (alreadyConsumed > 0)\n                yield* elements;\n            while (true) {\n                if (elements.length > alreadyConsumed) {\n                    // wonder if `yield* elements.slice(alreadyConsumed)` is more performant or not\n                    for (let i = alreadyConsumed; i < elements.length; i++)\n                        yield elements[i];\n                    alreadyConsumed = elements.length;\n                }\n                if (!iterator)\n                    break;\n                const { value, done } = iterator.next();\n                if (done) {\n                    iterator = this.$iterator = null;\n                    this.$iterable = null;\n                }\n                else {\n                    elements.push(value);\n                    alreadyConsumed++;\n                    yield value;\n                }\n            }\n        }\n        else {\n            yield* elements;\n        }\n    }\n}\nexport const MemoizedIterator = (iterator) => new MemoizedIteratorClass(iterator);\nexport const MI = MemoizedIterator;\n", "import { CI, MI } from \"../collection/Iterator.js\";\n//---------------------------------------------------------------------------------------------------------------------\nconst MixinInstanceOfProperty = Symbol('MixinIdentity');\nconst MixinStateProperty = Symbol('MixinStateProperty');\n//---------------------------------------------------------------------------------------------------------------------\nclass MixinWalkDepthState {\n    constructor() {\n        this.baseEl = undefined;\n        this.sourceEl = undefined;\n        this.$elementsByTopoLevel = undefined;\n        this.$topoLevels = undefined;\n        this.linearizedByTopoLevelsSource = MI(this.linearizedByTopoLevels());\n    }\n    static new(props) {\n        const me = new this();\n        props && Object.assign(me, props);\n        return me;\n    }\n    get topoLevels() {\n        if (this.$topoLevels !== undefined)\n            return this.$topoLevels;\n        return this.$topoLevels = this.buildTopoLevels();\n    }\n    buildTopoLevels() {\n        return Array.from(this.elementsByTopoLevel.keys()).sort((level1, level2) => level1 - level2);\n    }\n    get elementsByTopoLevel() {\n        if (this.$elementsByTopoLevel !== undefined)\n            return this.$elementsByTopoLevel;\n        return this.$elementsByTopoLevel = this.buildElementsByTopoLevel();\n    }\n    getOrCreateLevel(map, topoLevel) {\n        let elementsAtLevel = map.get(topoLevel);\n        if (!elementsAtLevel) {\n            elementsAtLevel = [];\n            map.set(topoLevel, elementsAtLevel);\n        }\n        return elementsAtLevel;\n    }\n    buildElementsByTopoLevel() {\n        let maxTopoLevel = 0;\n        const baseElements = this.baseEl ? CI(this.baseEl.walkDepthState.elementsByTopoLevel.values()).concat().toSet() : new Set();\n        const map = CI(this.sourceEl.requirements)\n            .map(mixin => mixin.walkDepthState.elementsByTopoLevel)\n            .concat()\n            .reduce((elementsByTopoLevel, [topoLevel, mixins]) => {\n            if (topoLevel > maxTopoLevel)\n                maxTopoLevel = topoLevel;\n            this.getOrCreateLevel(elementsByTopoLevel, topoLevel).push(mixins);\n            return elementsByTopoLevel;\n        }, new Map());\n        this.getOrCreateLevel(map, maxTopoLevel + 1).push([this.sourceEl]);\n        return CI(map).map(([level, elements]) => {\n            return [level, CI(elements).concat().uniqueOnly().filter(mixin => !baseElements.has(mixin)).sort((mixin1, mixin2) => mixin1.id - mixin2.id)];\n        }).toMap();\n    }\n    *linearizedByTopoLevels() {\n        yield* CI(this.topoLevels).map(level => this.elementsByTopoLevel.get(level)).concat();\n    }\n}\n// Note: 65535 mixins only, because of the hashing function implementation (String.fromCharCode)\nlet MIXIN_ID = 1;\n//---------------------------------------------------------------------------------------------------------------------\n/**\n * @hidden\n */\nexport const identity = a => class extends a {\n};\n// export type IdentityMixin<Base extends object>         = < T extends AnyConstructor<Base>>(base : T) => T\n//\n// export const IdentityMixin             = <Base extends object>() : IdentityMixin<Base> => identity\n//---------------------------------------------------------------------------------------------------------------------\n/**\n * @hidden\n */\nexport class ZeroBaseClass {\n}\n//---------------------------------------------------------------------------------------------------------------------\nclass MixinState {\n    constructor() {\n        this.id = MIXIN_ID++;\n        this.requirements = [];\n        this.baseClass = ZeroBaseClass;\n        this.identitySymbol = undefined;\n        this.mixinLambda = identity;\n        this.walkDepthState = undefined;\n        // private $hash               : MixinHash             = ''\n        this.$minimalClass = undefined;\n        this.name = '';\n    }\n    static new(props) {\n        const me = new this();\n        props && Object.assign(me, props);\n        me.walkDepthState = MixinWalkDepthState.new({ sourceEl: me, baseEl: getMixinState(me.baseClass) });\n        //------------------\n        const mixinLambda = me.mixinLambda;\n        const symbol = me.identitySymbol = Symbol(mixinLambda.name);\n        const mixinLambdaWrapper = Object.assign(function (base) {\n            const extendedClass = mixinLambda(base);\n            extendedClass.prototype[symbol] = true;\n            return extendedClass;\n        }, {\n            [MixinInstanceOfProperty]: symbol,\n            [MixinStateProperty]: me\n        });\n        Object.defineProperty(mixinLambdaWrapper, Symbol.hasInstance, { value: isInstanceOfStatic });\n        me.mixinLambda = mixinLambdaWrapper;\n        return me;\n    }\n    get minimalClass() {\n        if (this.$minimalClass !== undefined)\n            return this.$minimalClass;\n        return this.$minimalClass = this.buildMinimalClass();\n    }\n    // get hash () : MixinHash {\n    //     if (this.$hash !== '') return this.$hash\n    //\n    //     return this.$hash = this.buildHash()\n    // }\n    // buildHash () : MixinHash {\n    //     return String.fromCharCode(...this.walkDepthState.linearizedByTopoLevelsSource.map(mixin => mixin.id))\n    // }\n    getBaseClassMixinId(baseClass) {\n        const constructor = this.constructor;\n        const mixinId = constructor.baseClassesIds.get(baseClass);\n        if (mixinId !== undefined)\n            return mixinId;\n        const newId = MIXIN_ID++;\n        constructor.baseClassesIds.set(baseClass, newId);\n        return newId;\n    }\n    buildMinimalClass() {\n        const self = this.constructor;\n        let baseCls = this.baseClass;\n        const minimalClassConstructor = this.walkDepthState.linearizedByTopoLevelsSource.reduce((acc, mixin) => {\n            const { cls, hash } = acc;\n            const nextHash = hash + String.fromCharCode(mixin.id);\n            let wrapperCls = self.minimalClassesByLinearHash.get(nextHash);\n            if (!wrapperCls) {\n                wrapperCls = mixin.mixinLambda(cls);\n                mixin.name = wrapperCls.name;\n                self.minimalClassesByLinearHash.set(nextHash, wrapperCls);\n            }\n            acc.cls = wrapperCls;\n            acc.hash = nextHash;\n            return acc;\n        }, { cls: baseCls, hash: String.fromCharCode(this.getBaseClassMixinId(baseCls)) }).cls;\n        const minimalClass = Object.assign(minimalClassConstructor, {\n            [MixinInstanceOfProperty]: this.identitySymbol,\n            [MixinStateProperty]: this,\n            mix: this.mixinLambda,\n            derive: (base) => Mixin([minimalClass, base], base => class extends base {\n            }),\n            $: this,\n            toString: this.toString.bind(this)\n        });\n        Object.defineProperty(minimalClass, Symbol.hasInstance, { value: isInstanceOfStatic });\n        return minimalClass;\n    }\n    toString() {\n        return this.walkDepthState.linearizedByTopoLevelsSource.reduce((acc, mixin) => `${mixin.name}(${acc})`, this.baseClass.name);\n    }\n}\nMixinState.minimalClassesByLinearHash = new Map();\nMixinState.baseClassesIds = new Map();\n//endregion type helpers\n//---------------------------------------------------------------------------------------------------------------------\nconst isMixinClass = (func) => {\n    return Object.getPrototypeOf(func.prototype).constructor.hasOwnProperty(MixinStateProperty);\n};\nconst getMixinState = (func) => {\n    return Object.getPrototypeOf(func.prototype).constructor[MixinStateProperty];\n};\n//---------------------------------------------------------------------------------------------------------------------\nconst mixin = (required, mixinLambda) => {\n    let baseClass;\n    if (required.length > 0) {\n        const lastRequirement = required[required.length - 1];\n        // absence of `[ MixinStateProperty ]` indicates its a regular class and not a mixin class\n        // avoid assigning ZeroBaseClass - it will be applied as default at the end\n        if (!isMixinClass(lastRequirement) && lastRequirement !== ZeroBaseClass)\n            baseClass = lastRequirement;\n    }\n    const requirements = [];\n    required.forEach((requirement, index) => {\n        const mixinState = requirement[MixinStateProperty];\n        if (mixinState !== undefined) {\n            const currentBaseClass = mixinState.baseClass;\n            // ignore ZeroBaseClass - since those are compatible with any other base class\n            if (currentBaseClass !== ZeroBaseClass) {\n                if (baseClass) {\n                    // already found a base class from requirements earlier\n                    if (baseClass !== currentBaseClass) {\n                        const currentIsSub = currentBaseClass.prototype.isPrototypeOf(baseClass.prototype);\n                        const currentIsSuper = baseClass.prototype.isPrototypeOf(currentBaseClass.prototype);\n                        if (!currentIsSub && !currentIsSuper)\n                            throw new Error(\"Base class mismatch\");\n                        baseClass = currentIsSuper ? currentBaseClass : baseClass;\n                    }\n                }\n                else\n                    // first base class from requirements\n                    baseClass = currentBaseClass;\n            }\n            requirements.push(mixinState);\n        }\n        else {\n            if (index !== required.length - 1)\n                throw new Error(\"Base class should be provided as the last element of the requirements array\");\n        }\n    });\n    //------------------\n    const mixinState = MixinState.new({\n        requirements,\n        mixinLambda: mixinLambda,\n        baseClass: baseClass || ZeroBaseClass\n    });\n    return mixinState.minimalClass;\n};\n//---------------------------------------------------------------------------------------------------------------------\n// this function works both with default mixin class and mixin application function\n// it supplied internally as [Symbol.hasInstance] for the default mixin class and mixin application function\nconst isInstanceOfStatic = function (instance) {\n    return Boolean(instance && instance[this[MixinInstanceOfProperty]]);\n};\n//---------------------------------------------------------------------------------------------------------------------\n/**\n * This is the `instanceof` analog for the classes created with [[Mixin]] helper. It also provides [typeguard](https://www.typescriptlang.org/docs/handbook/advanced-types.html#user-defined-type-guards).\n *\n * There's no strict need to use it, as the native `instanceof` is also supported for the mixins created with the [[Mixin]] helper and also provides\n * typeguarding.\n *\n * @param instance Any value, normally an instance of the mixin class\n * @param func The constructor function of the class, created with [[Mixin]]\n */\nexport const isInstanceOf = (instance, func) => {\n    return Boolean(instance && instance[func[MixinInstanceOfProperty]]);\n};\n//---------------------------------------------------------------------------------------\n/**\n * This function allows you to create mixin classes. Mixin classes solves the well-known problem with \"classical\" single-class inheritance,\n * in which class hierarchy must form a tree. When using mixins, class hierarchy becomes an arbitrary acyclic graph.\n *\n * Another view on mixins is that, if \"classical\" class is a point (a vertice of the graph), mixin class is an arrow between the points\n * (an edge in the graph, or rather, a description of the edge).\n *\n * Some background information about the mixin pattern can be found [here](https://mariusschulz.com/blog/typescript-2-2-mixin-classes)\n * and [here](https://www.bryntum.com/blog/the-mixin-pattern-in-typescript-all-you-need-to-know/).\n *\n * The pattern, being described here, is the evolution of the previous work, and main advantage is that it solves the compilation error\n * for circular references.\n *\n * Mixin definition. Requirements\n * ------------------------------\n *\n * The pattern looks like:\n *\n *     class Mixin1 extends Mixin(\n *         [],\n *         (base : AnyConstructor) =>\n *\n *         class Mixin1 extends base {\n *             prop1        : string\n *             method1 () : string {\n *                 return this.prop1\n *             }\n *             static static1 : number\n *         }\n *     ){}\n *\n * The core of the definition above is the mixin lambda - a function which receives a base class as its argument and returns a class,\n * extending the base class with additional properties.\n *\n * The example above creates a mixin `Mixin1` which has no requirements. Requirements are the other mixins,\n * which needs to be included in the base class of this mixin.\n *\n * There's also a special type of the requirement,\n * called \"base class requirement\". It is optional and can only appear as the last argument of the requirements\n * array. It does not have to be a mixin, created with the `Mixin` function, but can be any JS class. This requirement\n * specifies, that the base class of this mixin should be a subclass of the given class (or that class itself).\n *\n * The requirements of the mixin needs to be listed 3 times:\n * - as an array of constructor functions, in the 1st argument of the `Mixin` function\n * - as an instance type intersection, in the 1st type argument for the [[AnyConstructor]] type\n * - as an static type intersection, in the 2nd type argument for the [[AnyConstructor]] type\n *\n * For example, `Mixin2` requires `Mixin1`:\n *\n *     class Mixin2 extends Mixin(\n *         [ Mixin1 ],\n *         (base : AnyConstructor<Mixin1, typeof Mixin1>) =>\n *\n *         class Mixin2 extends base {\n *         }\n *     ){}\n *\n * And `Mixin3` requires both `Mixin1` and `Mixin2` (even that its redundant, since `Mixin2` already requires `Mixin1`,\n * but suppose we don't know the implementation details of the `Mixin2`):\n *\n *     class Mixin3 extends Mixin(\n *         [ Mixin1, Mixin2 ],\n *         (base : AnyConstructor<Mixin1 & Mixin2, typeof Mixin1 & typeof Mixin2>) =>\n *\n *         class Mixin3 extends base {\n *         }\n *     ){}\n *\n * Now, `Mixin4` requires `Mixin3`, plus, it requires the base class to be `SomeBaseClass`:\n *\n *     class SomeBaseClass {}\n *\n *     class Mixin4 extends Mixin(\n *         [ Mixin3, SomeBaseClass ],\n *         (base : AnyConstructor<\n *             Mixin3 & SomeBaseClass, typeof Mixin3 & typeof SomeBaseClass\n *         >) =>\n *\n *         class Mixin4 extends base {\n *         }\n *     ){}\n *\n * As already briefly mentioned, the requirements are \"scanned\" deep and included only once. Also all minimal classes are cached -\n * for example the creation of the Mixin3\u00A0will reuse the minimal class of the Mixin2\u00A0instead of creating a new intermediate class.\n * This means that all edges of the mixin dependencies graph are created only once (up to the base class).\n *\n * Requirements can not form cycles - that will generate both compilation error and run-time stack overflow.\n *\n * The typing for the `Mixin` function will provide a compilation error, if the requirements don't match, e.g. some requirement is\n * listed in the array, but missed in the types. This protects you from trivial mistakes. However, the typing is done up to 10 requirements only.\n * If you need more than 10 requirements for the mixin, use the [[MixinAny]] function, which is an exact analog of `Mixin`, but without\n * this type-level protection for requirements mismatch.\n *\n * It is possible to simplify the type of the `base` argument a bit, by using the [[ClassUnion]] helper. However, it seems in certain edge cases\n * it may lead to compilation errors. If your scenarios are not so complex you should give it a try. Using the [[ClassUnion]] helper, the\n * `Mixin3` can be defined as:\n *\n *     class Mixin3 extends Mixin(\n *         [ Mixin1, Mixin2 ],\n *         (base : ClassUnion<typeof Mixin1, typeof Mixin2>) =>\n *\n *         class Mixin3 extends base {\n *         }\n *     ){}\n *\n * Note, that due to this [issue](https://github.com/Microsoft/TypeScript/issues/7342), if you use decorators in your mixin class,\n * the declaration needs to be slightly more verbose (can not use compact notation for the arrow functions):\n *\n *     class Mixin2 extends Mixin(\n *         [ Mixin1 ],\n *         (base : AnyConstructor<Mixin1, typeof Mixin1>) => {\n *             class Mixin2 extends base {\n *                 @decorator\n *                 prop2 : string\n *             }\n *             return Mixin2\n *         }\n *     ){}\n *\n * As you noticed, the repeating listing of the requirements is somewhat verbose. Suggestions how the pattern can be improved\n * are [very welcomed](mailto:nickolay8@gmail.com).\n *\n * Mixin instantiation. Mixin constructor. `instanceof`\n * --------------------------------\n *\n * You can instantiate any mixin class just by using its constructor:\n *\n *     const instance1 = new Mixin1()\n *     const instance2 = new Mixin2()\n *\n * As explained in details [here](https://mariusschulz.com/blog/typescript-2-2-mixin-classes), mixin constructor should accept variable number of arguments\n * with the `any` type. This is simply because the mixin is supposed to be applicable to any other base class, which may have its own type\n * of the constructor arguments.\n *\n *     class Mixin2 extends Mixin(\n *         [ Mixin1 ],\n *         (base : AnyConstructor<Mixin1, typeof Mixin1>) => {\n *             class Mixin2 extends base {\n *                 prop2 : string\n *\n *                 constructor (...args: any[]) {\n *                     super(...args)\n *                     this.prop2 = ''\n *                 }\n *             }\n *             return Mixin2\n *         }\n *     ){}\n *\n * In other words, its not possible to provide any type-safety for mixin instantiation using regular class constructor.\n *\n * However, if we change the way we create class instances a little, we can get the type-safety back. For that,\n * we need to use a \"uniform\" class constructor - a constructor which has the same form for all classes. The [[Base]] class\n * provides such constructor as its static [[Base.new|new]] method. The usage of `Base` class is not required - you can use\n * any other base class.\n *\n * The `instanceof` operator works as expected for instances of the mixin classes. It also takes into account all the requirements.\n * For example:\n *\n *     const instance2 = new Mixin2()\n *\n *     const isMixin2 = instance2 instanceof Mixin2 // true\n *     const isMixin1 = instance2 instanceof Mixin1 // true, since Mixin2 requires Mixin1\n *\n * See also [[isInstanceOf]].\n *\n * \"Manual\" class derivation\n * --------------------------------\n *\n * You have defined a mixin using the `Mixin` function. Now you want to apply it to some base class to get the \"specific\" class to be able\n * to instantiate it. As described above - you don't have to, you can instantiate it directly.\n *\n * Sometimes however, you still want to derive the class \"manually\". For that, you can use static methods `mix` and `derive`, available\n * on all mixins.\n *\n * The `mix` method provides a direct access to the mixin lambda. It does not take requirements into account - that's the implementor's responsibility.\n * The `derive` method is something like \"accumulated\" mixin lambda - mixin lambda with all requirements.\n *\n * Both `mix` and `derive` provide the reasonably typed outcome.\n *\n *     class Mixin1 extends Mixin(\n *         [],\n *         (base : AnyConstructor) =>\n *\n *         class Mixin1 extends base {\n *             prop1        : string\n *         }\n *     ){}\n *\n *     class Mixin2 extends Mixin(\n *         [ Mixin1 ],\n *         (base : AnyConstructor<Mixin1, typeof Mixin1>) =>\n *\n *         class Mixin2 extends base {\n *             prop2        : string\n *         }\n *     ){}\n *\n *     const ManualMixin1 = Mixin1.mix(Object)\n *     const ManualMixin2 = Mixin2.mix(Mixin1.mix(Object))\n *\n *     const AnotherManualMixin1 = Mixin1.derive(Object)\n *     const AnotherManualMixin2 = Mixin2.derive(Object)\n *\n * Generics\n * --------\n *\n * Using generics with mixins is tricky because TypeScript does not have higher-kinded types and type inference for generics. Still some form\n * of generic arguments is possible, using the interface merging trick.\n *\n * Here's the pattern:\n *\n * ```ts\n * class Duplicator<Element> extends Mixin(\n *     [],\n *     (base : AnyConstructor) =>\n *\n *     class Duplicator extends base {\n *         Element                 : any\n *\n *         duplicate (value : this[ 'Element' ]) : this[ 'Element' ][] {\n *             return [ value, value ]\n *         }\n *     }\n * ){}\n *\n * interface Duplicator<Element> {\n *     Element : Element\n * }\n *\n * const dup = new Duplicator<boolean>()\n *\n * dup.duplicate('foo') // TS2345: Argument of type '\"foo\"' is not assignable to parameter of type 'boolean'.\n * ```\n *\n * In the example above, we've defined a generic argument `Element` for the outer mixin class, but in fact, that argument is not used anywhere in the\n * nested class definition in the mixin lambda. Instead, in the nested class, we define a property `Element`, which plays the role of the\n * generic argument.\n *\n * Mixin class methods then can refer to the generic type as `this[ 'Element' ]`.\n *\n * The generic arguments of the outer and nested classes are tied together in the additional interface declaration, which, by TypeScript rules\n * is merged together with the class definition. In this declaration, we specify that property `Element` has type of the `Element` generic argument.\n *\n * Limitations\n * ---------\n *\n * The most important limitation we found (which affect the old pattern as well) is the compilation error, which will be issued for\n * the private/protected methods, when compiling with declarations emitting (*.d.ts files generation).\n *\n * This is a [well-known problem](https://github.com/microsoft/TypeScript/issues/35822) in the TypeScript world \u2013 the *.d.ts files do not represent\n * the internal data structures of the TypeScript compiler well. Instead they use some simplified syntax, optimized for human editing.\n * This is why the compiler may generate false positives in the incremental compilation mode \u2013 it uses *.d.ts files internally.\n *\n * This can be a show-stopper for the people that use declaration files (usually for publishing). Keep in mind though, that you can always\n * publish actual TypeScript sources along with the generated JavaScript files, instead of publishing JavaScript + declarations files.\n *\n */\nexport const Mixin = mixin;\n/**\n * This is an exact analog of the [[Mixin]] function, but without type-level protection for requirements mismatch.\n * It supports unlimited number of requirements.\n */\nexport const MixinAny = mixin;\n", "//---------------------------------------------------------------------------------------------------------------------\n/**\n * This is a base class, providing the type-safe static constructor [[new]]. This is very convenient when using\n * [[Mixin|mixins]], as mixins can not have types in the constructors.\n */\nexport class Base {\n    /**\n     * This method applies its 1st argument (if any) to the current instance using `Object.assign()`.\n     *\n     * Supposed to be overridden in the subclasses to customize the instance creation process.\n     *\n     * @param props\n     */\n    initialize(props) {\n        props && Object.assign(this, props);\n    }\n    /**\n     * This is a type-safe static constructor method, accepting a single argument, with the object, corresponding to the\n     * class properties. It will generate a compilation error, if unknown property is provided.\n     *\n     * For example:\n     *\n     * ```ts\n     * class MyClass extends Base {\n     *     prop     : string\n     * }\n     *\n     * const instance : MyClass = MyClass.new({ prop : 'prop', wrong : 11 })\n     * ```\n     *\n     * will produce:\n     *\n     * ```plaintext\n     * TS2345: Argument of type '{ prop: string; wrong: number; }' is not assignable to parameter of type 'Partial<MyClass>'.\n     * Object literal may only specify known properties, and 'wrong' does not exist in type 'Partial<MyClass>'\n     * ```\n     *\n     * The only thing this constructor does is create an instance and call the [[initialize]] method on it, forwarding\n     * the first argument. The customization of instance is supposed to be performed in that method.\n     *\n     * @param props\n     */\n    static new(props) {\n        const instance = new this();\n        instance.initialize(props);\n        return instance;\n    }\n}\n", "/**\n * @module Core/helper/BrowserHelper\n */\n/**\n * Static helper class that does browser or platform detection and provides other helper functions.\n */\nexport default class BrowserHelper {\n    static  supportsPointerEvents = Boolean(globalThis.PointerEvent || globalThis.MSPointerEvent);\n    // Locker Service does not allow to instantiate PointerEvents. LWS apparently does, however.\n    // https://github.com/bryntum/support/issues/5578\n    static supportsPointerEventConstructor = typeof PointerEvent !== 'undefined';\n    static PointerEventConstructor = globalThis.PointerEvent || globalThis.CustomEvent;\n    //region Init\n    static cacheFlags(platform = navigator.platform, userAgent = navigator.userAgent) {\n        const me = this;\n        // os\n        me._isLinux = Boolean(platform.match(/Linux/));\n        me._isMac = Boolean(platform.match(/Mac/));\n        me._isWindows = Boolean(platform.match(/Win32/));\n        // Edge user agent contains webkit too.\n        // This is not a typo. Edge has \"Safari/537.36 Edg/96.0.1054.34\"\n        me._isWebkit = Boolean(userAgent.match(/WebKit/) && !userAgent.match(/Edg/));\n        me._firefoxVersion = me.getVersion(userAgent, /Firefox\\/(\\d+)\\./);\n        me._isFirefox = me._firefoxVersion > 0;\n        me._chromeVersion = me.getVersion(userAgent, /Chrom(?:e|ium)\\/(\\d+)\\./);\n        me._isChrome = me._chromeVersion > 0;\n        me._isSafari = Boolean(userAgent.match(/Safari/)) && !me._isChrome;\n        me._isMobileSafari = Boolean(userAgent.match(/Mobile.*Safari/));\n        me._safariVersion = me.getVersion(userAgent, /Version\\/(.*).Safari/);\n        me._isAndroid = Boolean(userAgent.match(/Android/g));\n    }\n    //endregion\n    //region Device\n    /**\n     * Yields `true` if the current browser supports CSS style `overflow:clip`.\n     * @property {Boolean}\n     * @readonly\n     * @internal\n     */\n    static get supportsOverflowClip() {\n        if (this._supportsOverflowClip == null) {\n            const div = document.createElement('div');\n            div.style.overflow = 'clip';\n            div.style.display = 'none';\n            // If we're called before DOMContentLoaded, body won't be available.\n            // HTML element works for style calcs.\n            document.documentElement.appendChild(div);\n            this._supportsOverflowClip = div.ownerDocument.defaultView.getComputedStyle(div).getPropertyValue('overflow') === 'clip';\n            div.remove();\n        }\n        return this._supportsOverflowClip;\n    }\n    /**\n     * Yields `true` if the current browser supports CSS style `position:sticky`.\n     * @property {Boolean}\n     * @readonly\n     * @internal\n     */\n    static get supportsSticky() {\n        return true;\n    }\n    /**\n     * Returns matched version for userAgent.\n     * @param {String} versionRe version match regular expression\n     * @returns {Number} matched version\n     * @readonly\n     * @internal\n     */\n    static getVersion(userAgent, versionRe) {\n        const match = userAgent.match(versionRe);\n        return match ? parseFloat(match[1]) : 0;\n    }\n    /**\n     * Determines if the user is using a touch device.\n     * @property {Boolean}\n     * @readonly\n     * @internal\n     */\n    static get isTouchDevice() {\n        // Allow tests or client code to set\n        if (this._isTouchDevice === undefined) {\n            this._isTouchDevice = globalThis.matchMedia('(pointer:coarse)').matches;\n        }\n        return this._isTouchDevice;\n    }\n    // Reports true by default for our tests\n    static get isHoverableDevice() {\n        if (this._isHoverableDevice === undefined) {\n            this._isHoverableDevice = globalThis.matchMedia('(any-hover: hover)').matches;\n        }\n        return this._isHoverableDevice;\n    }\n    //endregion\n    //region Platform\n    static get isBrowserEnv() {\n        // This window reference is left on purpose, globalThis is always defined\n        // eslint-disable-next-line bryntum/no-window-in-lib\n        return typeof window !== 'undefined';\n    }\n    /**\n     * Checks if platform is Mac.\n     * @property {Boolean}\n     * @readonly\n     * @category Platform\n     */\n    static get isMac() {\n        return this._isMac;\n    }\n    /**\n     * Checks if platform is Windows.\n     * @property {Boolean}\n     * @readonly\n     * @category Platform\n     */\n    static get isWindows() {\n        return this._isWindows;\n    }\n    /**\n     * Checks if platform is Linux.\n     * @property {Boolean}\n     * @readonly\n     * @category Platform\n     */\n    static get isLinux() {\n        return this._isLinux;\n    }\n    /**\n     * Checks if platform is Android.\n     * @property {Boolean}\n     * @readonly\n     * @category Platform\n     */\n    static get isAndroid() {\n        return this._isAndroid;\n    }\n    //endregion\n    //region Browser\n    /**\n     * Checks if browser is Webkit.\n     * @property {Boolean}\n     * @readonly\n     * @category Browser\n     */\n    static get isWebkit() {\n        return this._isWebkit;\n    }\n    /**\n     * Checks if browser is Chrome or Chromium based browser.\n     * Returns truthy value for Edge Chromium.\n     * @property {Boolean}\n     * @readonly\n     * @category Browser\n     */\n    static get isChrome() {\n        return this._isChrome;\n    }\n    /**\n     * Returns the major Chrome version or 0 for other browsers.\n     * @property {Number}\n     * @readonly\n     * @category Browser\n     */\n    static get chromeVersion() {\n        return this._chromeVersion;\n    }\n    /**\n     * Checks if browser is Firefox.\n     * @property {Boolean}\n     * @readonly\n     * @category Browser\n     */\n    static get isFirefox() {\n        return this._isFirefox;\n    }\n    /**\n     * Returns the major Firefox version or 0 for other browsers.\n     * @property {Number}\n     * @readonly\n     * @category Browser\n     */\n    static get firefoxVersion() {\n        return this._firefoxVersion;\n    }\n    /**\n     * Checks if browser is Safari.\n     * @property {Boolean}\n     * @readonly\n     * @category Browser\n     */\n    static get isSafari() {\n        return this._isSafari;\n    }\n    static get safariVersion() {\n        return this._safariVersion;\n    }\n    /**\n     * Checks if browser is mobile Safari\n     * @property {Boolean}\n     * @readonly\n     * @category Browser\n     */\n    static get isMobileSafari() {\n        return this._isMobileSafari;\n    }\n    static get platform() {\n        const me = this;\n        return me._isLinux ? 'linux'\n            : me._isMac ? 'mac'\n                : me._isWindows ? 'windows'\n                    : me._isAndroid ? 'android'\n                        : me._isMobileSafari ? 'ios'\n                            : null;\n    }\n    /**\n     * Returns `true` if the browser supports passive event listeners.\n     * @property {Boolean}\n     * @internal\n     * @deprecated Since 5.0. All modern browsers now support passive event listeners.\n     * @category Browser\n     */\n    static get supportsPassive() {\n        return true;\n    }\n    // Only works in secure contexts\n    static get supportsRandomUUID() {\n        if (this._supportsRandomUUID === undefined) {\n            try {\n                this._supportsRandomUUID = Boolean(globalThis.crypto.randomUUID().length > 0);\n            }\n            catch (e) {\n                this._supportsRandomUUID = false;\n            }\n        }\n        return this._supportsRandomUUID;\n    }\n    //endregion\n    //region Storage\n    // https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API/Using_the_Web_Storage_API\n    static get storageAvailable() {\n        let storage, x;\n        try {\n            storage = localStorage;\n            x = '__storage_test__';\n            storage.setItem(x, x);\n            storage.removeItem(x);\n            return true;\n        }\n        catch (e) {\n            return e instanceof DOMException && (\n            // everything except Firefox\n                e.code === 22 ||\n                // Firefox\n                e.code === 1014 ||\n                // test name field too, because code might not be present\n                // everything except Firefox\n                e.name === 'QuotaExceededError' ||\n                // Firefox\n                e.name === 'NS_ERROR_DOM_QUOTA_REACHED') &&\n                // acknowledge QuotaExceededError only if there's something already stored\n                storage.length !== 0;\n        }\n    }\n    static setLocalStorageItem(key, value) {\n        this.storageAvailable && localStorage.setItem(key, value);\n    }\n    static getLocalStorageItem(key) {\n        return this.storageAvailable && localStorage.getItem(key);\n    }\n    static removeLocalStorageItem(key) {\n        this.storageAvailable && localStorage.removeItem(key);\n    }\n    //endregion\n    //region Helpers\n    /**\n     * Returns parameter value from search string by parameter name.\n     * @param {String} paramName search parameter name\n     * @param {String} [defaultValue] default value if parameter not found\n     * @param {String} [search] search string. Defaults to `document.location.search`\n     * @returns {String} search parameter string value\n     * @category Helper\n     */\n    static searchParam(paramName, defaultValue = null, search = document.location.search) {\n        const\n            re    = new RegExp(`[?&]${paramName}=?([^&]*)`),\n            match = search.match(re);\n        return (match && match[1]) || defaultValue;\n    }\n    /**\n     * Returns cookie by name.\n     * @param {String} name cookie name\n     * @returns {String} cookie string value\n     * @category Helper\n     */\n    static getCookie(name) {\n        const\n            nameEq      = encodeURIComponent(name) + '=',\n            cookieItems = document.cookie.split(';');\n        for (let i = 0; i < cookieItems.length; i++) {\n            let c = cookieItems[i];\n            while (c.charAt(0) === ' ') {\n                c = c.substring(1, c.length);\n            }\n            if (c.indexOf(nameEq) === 0) {\n                return decodeURIComponent(c.substring(nameEq.length, c.length));\n            }\n        }\n        return '';\n    }\n    /**\n     * Triggers a download of a file with the specified name / URL.\n     * @param {String} filename The filename of the file to be downloaded\n     * @param {String} [url] The URL where the file is to be downloaded from\n     * @internal\n     * @category Download\n     */\n    static download(filename, url) {\n        const a = document.createElement('a');\n        a.download = filename;\n        a.href = url || filename;\n        a.style.cssText = 'display:none';\n        document.body.appendChild(a);\n        a.click();\n        document.body.removeChild(a);\n    }\n    /**\n     * Triggers a download of a Blob with the specified name.\n     * @param {Blob} blob The Blob to be downloaded\n     * @param {String} filename The filename of the file to be downloaded\n     * @internal\n     * @category Download\n     */\n    static downloadBlob(blob, filename) {\n        const url = globalThis.URL.createObjectURL(blob);\n        this.download(filename, url);\n        globalThis.URL.revokeObjectURL(url);\n    }\n    static get queryString() {\n        // new URLSearchParams throws in salesforce\n        // https://github.com/salesforce/lwc/issues/1812\n        const params = new URL(globalThis.location.href).searchParams;\n        // ?. to be nice to users with Chrome versions < 73\n        return Object.fromEntries?.(params.entries());\n    }\n    static copyToClipboard(code) {\n        let success = true;\n        const textArea = document.createElement('textarea');\n        textArea.value = code;\n        textArea.style.height = textArea.style.width = 0;\n        document.body.appendChild(textArea);\n        textArea.select();\n        try {\n            document.execCommand('copy');\n        }\n        catch (e) {\n            success = false;\n        }\n        textArea.remove();\n        return success;\n    }\n    static isBryntumOnline(searchStrings) {\n        searchStrings = Array.isArray(searchStrings) ? searchStrings : [searchStrings];\n        return Boolean(/^(www\\.)?bryntum\\.com/.test(globalThis.location.host) || searchStrings?.some(str => this.queryString[str] != null));\n    }\n    /**\n     * Returns truthy value if page contains Content Security Policy meta tag or globalThis.bryntum.CSP is truthy value\n     * @returns {Boolean}\n     * @internal\n     **/\n    static get isCSP() {\n        const { bryntum, document } =  globalThis;\n        if (bryntum.CSP == null) {\n            bryntum.CSP = Boolean(document.querySelector('meta[http-equiv=\"Content-Security-Policy\"]'));\n        }\n        return bryntum.CSP;\n    }\n    //endregion\n    // region Clipboard\n    /**\n     * This creates a global clipboard object that can be used by multiple Bryntum products on same page.\n     * This function is called each time BrowserHelper.writeToClipboard or BrowserHelper.readFromClipboard is called.\n     * @internal\n     */\n    static async setupClipboard() {\n        if (!globalThis.bryntum.clipboard) {\n            globalThis.bryntum.clipboard = {\n                // Defaults to true, so to\n                hasNativeAccess : true,\n                async writeText(text, allowNative) {\n                    if (allowNative && this.hasNativeAccess) {\n                        try {\n                            await navigator.clipboard.writeText(text);\n                        }\n                        catch (e) {\n                            this.hasNativeAccess = false;\n                        }\n                    }\n                    // Always writes to local clipboard\n                    this._content = text;\n                },\n                async readText(allowNative) {\n                    if (allowNative && this.hasNativeAccess) {\n                        try {\n                            return await navigator.clipboard.readText();\n                        }\n                        catch (e) {\n                            this.hasNativeAccess = false;\n                        }\n                    }\n                    return this._content;\n                }\n            };\n        }\n        return globalThis.bryntum.clipboard;\n    }\n    /**\n     * Will try to detect native clipboard access if not `allowNative` is `false`. If access to native clipboard is\n     * provided, it will try to store the string value there. Otherwise, it will use an internal storage instead.\n     * @param {String} text Only text value is supported\n     * @param {Boolean} allowNative `false` to only use internal clipboard. This is not a global setting, it has to be passed as\n     * an argument to each read/write call.\n     * @internal\n     */\n    static async writeToClipboard(text, allowNative = true) {\n        const clipboard = await this.setupClipboard();\n        return await clipboard.writeText(text, allowNative);\n    }\n    /**\n     * Will try to detect native clipboard access if not `allowNative` is `false`. If access to native clipboard is\n     * provided, it will try to read from there. Otherwise, it will read from an internal storage instead.\n     * @param {Boolean} allowNative `false` to only use internal clipboard. This is not a global setting, it has to be\n     * passed as an argument to each read/write call.\n     * @internal\n     */\n    static async readFromClipboard(allowNative = true) {\n        const clipboard = await this.setupClipboard();\n        return await clipboard.readText(allowNative);\n    }\n    // endregion\n}\nif (BrowserHelper.isBrowserEnv) {\n    BrowserHelper.cacheFlags();\n}\nBrowserHelper._$name = 'BrowserHelper';", "// IMPORTANT - adding imports here can create problems for Base class\nimport Objects from './util/Objects.js';\nimport BrowserHelper from './BrowserHelper.js';\n/**\n * @module Core/helper/StringHelper\n */\nlet charsToEncode, entitiesToDecode, htmlEncodeRe, htmlDecodeRe;\nconst\n    camelLettersRe = /([a-z])([A-Z])/g,\n    crlfRe         = /[\\n\\r]/g,\n    escapeRegExpRe = /[.*+?^${}()|[\\]\\\\]/g, // same as NPM escape-string-regexp\n    htmlRe         = /[&<]/,\n    idRe           = /(^[^a-z]+[^\\w]+)/gi,\n    whiteSpaceRe   = /\\s+/,\n    domIdRe        = /^[^a-z]+|[^\\w:.-]+/gi,\n    htmlDecoder = (m, captured) => entitiesToDecode[captured.toLowerCase()] || String.fromCharCode(parseInt(captured.substr(2), 10)),\n    htmlEncoder = (m, captured) => charsToEncode[captured],\n    hyphenateCamelLetters = (all, g1, g2) => {\n        return `${g1}-${g2.toLowerCase()}`;\n    },\n    separateCamelLetters = (all, g1, g2) => {\n        return `${g1} ${g2.toLowerCase()}`;\n    },\n    replaceNonIdChar    = c => {\n        if (c) {\n            return `_x${[...c].map((ch) => ch.charCodeAt(0).toString(16)).join('')}`;\n        }\n        return '__blank__';\n    },\n    hyphenateCache = {},\n    separatedCache = {};\n/**\n * Helper for string manipulation.\n */\nexport default class StringHelper {\n    //region Transform\n    /**\n     * Capitalizes the first letter of a string, \"myString\" -> \"MyString\".\n     * @param {String} string The string to capitalize\n     * @returns {String} The capitalized string or the value of `string` if falsy.\n     * @category String formatting\n     */\n    static capitalize(string) {\n        return string && (string[0].toUpperCase() + string.substr(1));\n    }\n    /**\n     * Makes the first letter of a string lowercase, \"MyString\" -> \"myString\".\n     * @param {String} string The string to un-capitalize.\n     * @returns {String} The un-capitalized string or the value of `string` if falsy.\n     * @category String formatting\n     */\n    static uncapitalize(string) {\n        return string && (string[0].toLowerCase() + string.substr(1));\n    }\n    /**\n     * Converts the passed camelCased string to a hyphen-separated string. eg \"minWidth\" -> \"min-width\"\n     * @param {String} string The string to convert.\n     * @returns {String} The string with adjoining lower and upper case letters\n     * separated by hyphens and converted to lower case.\n     * @category String formatting\n     * @internal\n     */\n    static hyphenate(string) {\n        // Cached since it is used heavily with DomHelper.sync()\n        const cached = hyphenateCache[string];\n        if (cached) {\n            return cached;\n        }\n        return hyphenateCache[string] = string.replace(camelLettersRe, hyphenateCamelLetters);\n    }\n    /**\n     * Converts the passed camelCased string to a capitalized, space-separated string. eg \"startDate\" -> \"Start date\".\n     * @param {String} string The string to convert.\n     * @returns {String} The string with spaces separating words.\n     * @category String formatting\n     * @internal\n     */\n    static separate(string) {\n        // Cached since it may be used heavily\n        const cached = separatedCache[string];\n        if (cached) {\n            return cached;\n        }\n        return separatedCache[string] = this.capitalize(string.replace(camelLettersRe, separateCamelLetters));\n    }\n    /**\n     * Creates an alphanumeric identifier from any passed string. Encodes spaces and non-alpha characters.\n     * @param {String} inString The string from which to strip non-identifier characters.\n     * @returns {String}\n     * @category Misc\n     * @internal\n     */\n    static createId(inString) {\n        return String(inString).replace(idRe, replaceNonIdChar);\n    }\n    static makeValidDomId(id, replaceValue = '') {\n        if (id == null) {\n            return null;\n        }\n        return String(id).replace(domIdRe, replaceValue);\n    }\n    //endregion\n    //region Html\n    static escapeRegExp(string, flags) {\n        // $& means the whole matched string\n        let ret = string.replace(escapeRegExpRe, '\\\\$&');\n        if (flags !== undefined) {\n            ret = new RegExp(ret, flags);\n        }\n        return ret;\n    }\n    /**\n     * This method decodes HTML entities and returns the original HTML.\n     *\n     * See also {@link #function-encodeHtml-static}.\n     * @param {String} str\n     * @returns {String}\n     * @category HTML\n     */\n    static decodeHtml(str) {\n        return str && String(str).replace(htmlDecodeRe, htmlDecoder);\n    }\n    /**\n     * This method encodes HTML entities and returns a string that can be placed in the document and produce the\n     * original text rather than be interpreted as HTML. Using this method with user-entered values prevents those\n     * values from executing as HTML (i.e., a cross-site scripting or \"XSS\" security issue).\n     *\n     * See also {@link #function-decodeHtml-static}.\n     * @param {String} str\n     * @returns {String}\n     * @category HTML\n     */\n    static encodeHtml(str = '') {\n        return str && String(str).replace(htmlEncodeRe, htmlEncoder);\n    }\n    /**\n     * This method is similar to {@link #function-encodeHtml-static} except that `\\n` and `\\r` characters in the\n     * given `str` are replaced by `<br>` tags _after_ first being encoded by {@link #function-encodeHtml-static}.\n     * @param {String} str\n     * @returns {String}\n     * @category HTML\n     * @internal\n     */\n    static encodeHtmlBR(str) {\n        return StringHelper.encodeHtml(str)?.replace(crlfRe, '<br>');\n    }\n    /**\n     * Returns `true` if the provided `text` contains special HTML characters.\n     * @param {String} text\n     * @returns {Boolean}\n     * @category HTML\n     * @internal\n     */\n    static isHtml(text) {\n        return typeof text === 'string' && htmlRe.test(text || '');\n    }\n    /**\n     * Initializes HTML entities used by {@link #function-encodeHtml-static} and {@link #function-decodeHtml-static}.\n     * @param {Object} [mappings] An object whose keys are characters that should be encoded and values are the HTML\n     * entity for the character.\n     * @private\n     */\n    static initHtmlEntities(mappings) {\n        mappings = mappings || {\n            '&' : '&amp;',\n            '>' : '&gt;',\n            '<' : '&lt;',\n            '\"' : '&quot;',\n            \"'\" : '&#39;'\n        };\n        const chars = Object.keys(mappings);\n        // Maps '<' to '&lt;'\n        charsToEncode = mappings;\n        // Inverts the mapping so we can convert '&lt;' to '<'\n        entitiesToDecode = chars.reduce((prev, val) => {\n            prev[mappings[val]] = val;\n            return prev;\n        }, {});\n        // Creates a regex char set like /([<&>])/g to match the characters that need to be encoded (escaping any of\n        // the regex charset special chars '[', ']' and '-'):\n        htmlEncodeRe = new RegExp(`([${chars.map(c => '[-]'.includes(c) ? '\\\\' + c : c).join('')}])`, 'g');\n        // Creates a regex like /(&lt;|&amp;|&gt;)/ig to match encoded entities... good news is that (valid) HTML\n        // entities do not contain any regex special characters:\n        htmlDecodeRe = new RegExp(`(${Object.values(mappings).join('|')}|&#[0-9]+;)`, 'ig');\n    }\n    //endregion\n    //region JSON\n    /**\n     * Parses JSON inside a try-catch block. Returns null if the string could not be parsed.\n     *\n     * @param {String} string String to parse\n     * @returns {Object} Resulting object or `null` if parse failed\n     * @category JSON\n     */\n    static safeJsonParse(string) {\n        let parsed = null;\n        try {\n            parsed = JSON.parse(string);\n        }\n        catch (e) {\n        }\n        return parsed;\n    }\n    /**\n     * Stringifies an object inside a try-catch block. Returns null if an exception is encountered.\n     *\n     * See [JSON.stringify on MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify)\n     * for more information on the arguments.\n     *\n     * @param {Object} object The object to stringify\n     * @param {Function|String[]|Number[]} [replacer] A function or array of string/number used to determine properties\n     * to include in the JSON string\n     * @param {String|Number} [space] Number of spaces to indent or string used as whitespace\n     * @returns {String} Resulting object or null if stringify failed\n     * @category JSON\n     */\n    static safeJsonStringify(object, replacer = null, space = null) {\n        let result = null;\n        try {\n            result = JSON.stringify(object, replacer, space);\n        }\n        catch (e) {\n        }\n        return result;\n    }\n    //endregion\n    //region Split & join\n    /**\n     * Joins all given paths together using the separator as a delimiter and normalizes the resulting path.\n     * @param paths {Array} array of paths to join\n     * @param pathSeparator [{String}] path separator. Default value is '/'\n     * @returns {String}\n     * @category Misc\n     * @internal\n     */\n    static joinPaths(paths, pathSeparator = '/') {\n        return paths.join(pathSeparator).replace(new RegExp('\\\\' + pathSeparator + '+', 'g'), pathSeparator);\n    }\n    /**\n     * Returns the provided string split on whitespace. If the string is empty or consists of only whitespace, the\n     * returned array will be empty. If `str` is not a string, it is simply returned. This allows `null` or already\n     * split strings (arrays) to be passed through.\n     *\n     * For example:\n     * ```\n     *  console.log(StringHelper.split(' abc def xyz   '));\n     *  > ['abc', 'def', 'xyz']\n     *  console.log(StringHelper.split(''));\n     *  > []\n     * ```\n     * Compare to the standard `split()` method:\n     * ```\n     *  console.log(' abc def xyz   '.split(/\\s+/));\n     *  > ['', 'abc', 'def', 'xyz', '']\n     *  console.log(''.split(/\\s+/));\n     *  > ['']\n     * ```\n     * @param {String} str\n     * @param {String|RegExp} delimiter\n     * @returns {String[]}\n     * @category Misc\n     * @internal\n     */\n    static split(str, delimiter = whiteSpaceRe) {\n        let ret = str;\n        if (typeof ret === 'string') {\n            ret = str.trim();  // w/o trim() whitespace on the ends will give us '' in the array\n            ret = ret ? ret.split(delimiter) : []; // also ''.split() = ['']\n        }\n        return ret;\n    }\n    //endregion\n    //region XSS\n    /**\n     * This is a tagged template function that performs HTML encoding on replacement values to avoid XSS (Cross-Site\n     * Scripting) attacks.\n     *\n     * For example:\n     *\n     * ```javascript\n     *  eventRenderer(eventRecord) {\n     *      return StringHelper.xss`<span class=\"${eventRecord.attrib}\">${eventRecord.name}</span>`;\n     *  }\n     * ```\n     *\n     * @param {TemplateStringsArray} strings The template string array\n     * @param {...any} values The interpolated values in the template string\n     * @returns {String} The encoded string\n     * See {@link Core.helper.StringHelper#function-encodeHtml-static}.\n     */\n    static xss(strings, ...values) {\n        const buf = [];\n        let i = values.length;\n        buf[i] = strings[i];\n        while (i-- > 0) {\n            buf[i] = strings[i] + StringHelper.encodeHtml(values[i]);\n        }\n        return buf.join('');\n    }\n    /**\n     * This is a tagged template function that performs HTML encoding on replacement values to avoid XSS (Cross-Site\n     * Scripting) attacks. Unlike {@link Core.helper.StringHelper#function-xss-static}, this method converts `\\n` and\n     * `\\r` characters into `<br>` tags.\n     *\n     * For example:\n     *\n     * ```javascript\n     *  eventRenderer(eventRecord) {\n     *      return StringHelper.xssBR`<span class=\"${eventRecord.attrib}\">${eventRecord.name}</span>`;\n     *  }\n     * ```\n     *\n     * See {@link Core.helper.StringHelper#function-encodeHtmlBR-static}.\n     * @internal\n     */\n    static xssBR(strings, ...values) {\n        const buf = [];\n        let i = values.length;\n        buf[i] = strings[i];\n        while (i-- > 0) {\n            buf[i] = strings[i] + StringHelper.encodeHtmlBR(values[i]);\n        }\n        return buf.join('');\n    }\n    //endregion\n    //region JavaScript string\n    /**\n     * Converts a value to a JavaScript string (not JSON).\n     *\n     * For example a date to `\"new Date(y, m, d)\"`, an array to `\"[...]\"` etc.\n     *\n     * @param {*} value\n     * @param {Object} [options]\n     * @returns {String}\n     * @internal\n     */\n    static toJavaScriptValue(value, options) {\n        const type = Objects.typeOf(value);\n        if (type === 'boolean' || type === 'string' || type === 'number' || value === null) {\n            return StringHelper.safeJsonStringify(value);\n        }\n        if (value === globalThis) {\n            return 'window';\n        }\n        if (type === 'date') {\n            return `new Date(${value.getFullYear()}, ${value.getMonth()}, ${value.getDate()}, ${value.getHours()}, ${value.getMinutes()}, ${value.getSeconds()}, ${value.getMilliseconds()})`;\n        }\n        if (type === 'array') {\n            return `[${value.map(v => StringHelper.toJavaScriptValue(v, options))}]`;\n        }\n        if (type === 'object' || type === 'instance') {\n            return this.toJavaScriptString(value, options);\n        }\n        if (type === 'function') {\n            let contents = value.toString();\n            // async myFunction() {} => async function() {}\n            if (contents.match(/^async (\\w+?)\\(/)) {\n                contents = contents.replace(/^async (\\w+?)\\(/, 'async function(');\n            }\n            // Not an arrow fn? Replace name with function since we always add prop name prior to getting here\n            // eventRenderer() {} -> function() {}\n            else if (!contents.startsWith('async(') && contents.match(/^(\\w+?)\\(/)) {\n                contents = contents.replace(/^(\\w+?)\\(/, 'function(');\n            }\n            return contents;\n        }\n        if (type === 'class') {\n            if (value.toJavaScriptValue) {\n                return value.toJavaScriptValue(options);\n            }\n            return Object.prototype.hasOwnProperty.call(value, '$name') ? value.$name : value.name;\n        }\n    }\n    /**\n     * Converts an object into a JavaScript string (not JSON).\n     *\n     * For example `{ a: 1, b: [2, 3] }` -> `\"'{ a: 1, b: [2, 3] }'\"`\n     *\n     * @param {Object} obj\n     * @param {Object} [options]\n     * @returns {String}\n     * @internal\n     */\n    static toJavaScriptString(obj, options = {}) {\n        const\n            level      = options.level ?? 0,\n            intendSize = 2;\n        // Not using template strings to have control over indentation\n        return '{\\n' +\n            Object.keys(obj).map(key =>\n                // All properties in an object are indented one step further than the object itself\n                ' '.repeat((level + 1) * intendSize) + (key.match(/[- *]/) ? `\"${key}\"` : key) + `: ${StringHelper.toJavaScriptValue(obj[key], { ...options, level : level + 1 })}`\n            ).join(',\\n') +\n            // Closing brace is indented to same level as the object\n            '\\n' + ' '.repeat((level) * intendSize) + '}';\n    }\n    /**\n     * Escapes \" and \\ in CSS attribute selectors, e.g. [data-id=\"somevalue\"]\n     *\n     * Usage:\n     * ```javascript\n     * document.querySelector(StringHelper.cssAttributeQuery('data-id', 'id with & \\\\ chars'))\n     * ```\n     *\n     * @param {String} attr\n     * @param {String|Number} value\n     * @returns {String}\n     */\n    static encodeAttributeSelector(attr, value) {\n        return `[${attr}=\"${String(value).replace(/[\"\\\\]/g, '\\\\$&')}\"]`;\n    }\n    //endregion\n    //region UUID\n    static fakeNodeUUIDIndex = 0;\n    /**\n     * Generates a UUID. Uses `Crypto.randomUUID()` if available, otherwise generates a random UUID using\n     * `Crypto.getRandomValues()`.\n     *\n     * @returns {String}\n     */\n    static generateUUID() {\n        if (BrowserHelper.supportsRandomUUID) {\n            return globalThis.crypto.randomUUID();\n        }\n        // Node does not have crypto built in\n        if (globalThis.crypto?.getRandomValues) {\n            // https://stackoverflow.com/questions/105034/how-do-i-create-a-guid-uuid\n            return ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, c =>\n                (c ^ globalThis.crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16)\n            );\n        }\n        // Node specific code, should never get here outside of node. Not actually a UUID, but should still be unique\n        // enough for our purposes, as long as value is not serialized\n        return `${Date.now()}-${++StringHelper.fakeNodeUUIDIndex}`;\n    }\n    //endregion\n}\nStringHelper.initHtmlEntities();\nStringHelper._$name = 'StringHelper';", "// IMPORTANT - adding imports here can create problems for Base class\n//  That is why this file was split from ObjectHelper\nimport StringHelper from '../StringHelper.js';\n/**\n * @module Core/helper/util/Objects\n */\nconst\n    { hasOwnProperty, toString } = Object.prototype,\n    { isFrozen } = Object,\n    afterRe      = /\\s*<\\s*/,\n    beforeRe     = /\\s*>\\s*/,\n    blendOptions = {},\n    typeCache    = {},\n    emptyObject  = Object.freeze({});\n// Static methods are not displayed in derived class documentation. Therefore, since this is an internal class, the\n// workaround is to copy method documentation to ObjectHelper (the public interface). Also tried making ObjectHelper\n// a singleton.\n/**\n * Helper for low-level Object manipulation.\n *\n * While documented on {@link Core.helper.ObjectHelper}, the following static methods are implemented by this class:\n *\n * - `{@link Core.helper.ObjectHelper#function-assign-static}`\n * - `{@link Core.helper.ObjectHelper#function-assignIf-static}`\n * - `{@link Core.helper.ObjectHelper#function-clone-static}`\n * - `{@link Core.helper.ObjectHelper#function-createTruthyKeys-static}`\n * - `{@link Core.helper.ObjectHelper#function-getPath-static}`\n * - `{@link Core.helper.ObjectHelper#function-getTruthyKeys-static}`\n * - `{@link Core.helper.ObjectHelper#function-getTruthyValues-static}`\n * - `{@link Core.helper.ObjectHelper#function-isEmpty-static}`\n * - `{@link Core.helper.ObjectHelper#function-isObject-static}`\n * - `{@link Core.helper.ObjectHelper#function-merge-static}`\n * - `{@link Core.helper.ObjectHelper#function-setPath-static}`\n * - `{@link Core.helper.ObjectHelper#function-typeOf-static}`\n * @internal\n */\nexport default class Objects {\n    static assign(dest, ...sources) {\n        for (let source, key, i = 0; i < sources.length; i++) {\n            source = sources[i];\n            if (source) {\n                for (key in source) {\n                    dest[key] = source[key];\n                }\n            }\n        }\n        return dest;\n    }\n    static assignIf(dest, ...sources) {\n        for (let source, key, i = 0; i < sources.length; i++) {\n            source = sources[i];\n            if (source) {\n                for (key in source) {\n                    if (!(key in dest) || dest[key] === undefined) {\n                        dest[key] = source[key];\n                    }\n                }\n            }\n        }\n        return dest;\n    }\n    static blend(dest, source, options) {\n        options = options || blendOptions;\n        dest = dest || {};\n        const { clone = Objects.clone, merge = Objects.blend } = options;\n        if (Array.isArray(source)) {\n            if (source.length > 1) {\n                source.forEach(s => {\n                    dest = Objects.blend(dest, s, options);\n                });\n                return dest;\n            }\n            source = source[0];\n        }\n        if (source) {\n            let destValue, key, value;\n            for (key in source) {\n                value = source[key];\n                if (value && Objects.isObject(value)) {\n                    destValue = dest[key];\n                    options.key = key;\n                    if (destValue && Objects.isObject(destValue)) {\n                        if (isFrozen(destValue)) {\n                            dest[key] = destValue = clone(destValue, options);\n                        }\n                        value = merge(destValue, value, options);\n                    }\n                    else {\n                        // We don't need to clone frozen objects, but we do clone mutable objects as they get\n                        // applied to the dest.\n                        value = isFrozen(value) ? value : clone(value, options);\n                    }\n                }\n                dest[key] = value;\n            }\n        }\n        return dest;\n    }\n    static clone(value, handler) {\n        let cloned = value,\n            key;\n        if (value && typeof value === 'object') {\n            const options = handler && typeof handler === 'object' && handler;\n            if (options) {\n                // When using blend(), the 2nd argument is the options object, so ignore that case\n                handler = null;\n            }\n            if (Objects.isObject(value)) {\n                // When using DomSync, DomConfigs are usually recreated from scratch on each sync, we allow opting out\n                // of cloning them (costly for many elements)\n                if (value.skipClone) {\n                    cloned = value;\n                }\n                else {\n                    cloned = {};\n                    for (key in value) {\n                        cloned[key] = Objects.clone(value[key]);\n                    }\n                }\n            }\n            else if (Array.isArray(value)) {\n                cloned = [];\n                // Loop backwards to:\n                //  1. read source.length once\n                //  2. get result array sized on first pass (avoid growing)\n                for (key = value.length; key-- > 0; /* empty */) {\n                    cloned[key] = Objects.clone(value[key]);\n                }\n            }\n            else if (Objects.isDate(value)) {\n                cloned = new Date(value.getTime());\n            }\n            else if (handler) {\n                // Allow other types to be handled (e.g., DOM nodes).\n                cloned = handler(value);\n            }\n        }\n        return cloned;\n    }\n    static createTruthyKeys(source) {\n        const\n            keys = StringHelper.split(source),\n            result = keys && {};\n        if (keys) {\n            for (const key of keys) {\n                // StringHelper.split won't return empty keys if passed a string, but we\n                // could have been passed a String[]\n                if (key) {\n                    result[key] = true;\n                }\n            }\n        }\n        return result;\n    }\n    /**\n     * Returns value for a given path in the object\n     * @param {Object} object Object to check path on\n     * @param {String} path Dot-separated path, e.g. 'object.childObject.someKey'\n     * @returns {*} Value associated with passed key\n     */\n    static getPath(object, path) {\n        return path.split('.').reduce((result, key) => {\n            return (result || emptyObject)[key];\n        }, object);\n    }\n    /**\n     * Returns value for a given path in the object, placing a passed default value in at the\n     * leaf property and filling in undefined properties all the way down.\n     * @param {Object} object Object to get path value for.\n     * @param {String|Number|String[]|Number[]} path Dot-separated path, e.g. 'firstChild.childObject.someKey',\n     * or the key path as an array, e.g. ['firstChild', 'childObject', 'someKey'].\n     * @param {*} [defaultValue] Optionally the value to put in as the `someKey` property.\n     * @returns {*} Value at the leaf position of the path.\n     */\n    static getPathDefault(object, path, defaultValue) {\n        const\n            keys   = Array.isArray(path) ? path : typeof path === 'string' ? path.split('.') : [path],\n            length = keys.length - 1;\n        return keys.reduce((result, key, index) => {\n            if (defaultValue && !(key in result)) {\n                // Can't use emptyObject here, we are creating a node in the object tree\n                result[key] = index === length ? defaultValue : {};\n            }\n            return (result || emptyObject)[key];\n        }, object);\n    }\n    /**\n     * Determines if the specified path exists\n     * @param {Object} object Object to check path on\n     * @param {String} path Dot-separated path, e.g. 'object.childObject.someKey'\n     * @returns {Boolean}\n     */\n    static hasPath(object, path) {\n        return path.split('.').every(key => {\n            if (key in object) {\n                object = object[key];\n                return true;\n            }\n            return false;\n        });\n    }\n    static getTruthyKeys(source) {\n        const keys = [];\n        for (const key in source) {\n            if (source[key]) {\n                keys.push(key);\n            }\n        }\n        return keys;\n    }\n    static getTruthyValues(source) {\n        const values = [];\n        for (const key in source) {\n            if (source[key]) {\n                values.push(source[key]);\n            }\n        }\n        return values;\n    }\n    static isClass(object) {\n        if (typeof object === 'function' && object.prototype?.constructor === object) {\n            return true;\n        }\n        return false;\n    }\n    static isDate(object) {\n        // A couple quick rejections but only sure way is typeOf:\n        return Boolean(object?.getUTCDate) && Objects.typeOf(object) === 'date';\n    }\n    /**\n     * Check if passed object is a Promise or contains `then` method.\n     * Used to fix problems with detecting promises in code with `instance of Promise` when\n     * Promise class is replaced with any other implementation like `ZoneAwarePromise` in Angular.\n     * Related to these issues:\n     * https://github.com/bryntum/support/issues/791\n     * https://github.com/bryntum/support/issues/2990\n     *\n     * @param {Object} object object to check\n     * @returns {Boolean} truthy value if object is a Promise\n     * @internal\n     */\n    static isPromise(object) {\n        if (Promise && Promise.resolve) {\n            return Promise.resolve(object) === object || typeof object?.then === 'function';\n        }\n        throw new Error('Promise not supported in your environment');\n    }\n    static isEmpty(object) {\n        if (object && typeof object === 'object') {\n            // noinspection LoopStatementThatDoesntLoopJS\n            for (const p in object) { // eslint-disable-line no-unused-vars,no-unreachable-loop\n                return false;\n            }\n        }\n        return true;\n    }\n    static isObject(value) {\n        const C = value?.constructor;\n        return Boolean(C\n            // Most things have a .constructor property\n            ? (\n                // An in-frame instance of Object\n                C === Object ||\n                // Detect cross-frame objects, but exclude instance of custom classes named Object. typeOf(value) is\n                // \"object\" even for instances of a class and typeOf(C) is \"function\" for all constructors. We'll have\n                // to settle for relying on the fact that getPrototypeOf(Object.prototype) === null.\n                // NOTE: this issue does come up in Scheduler unit tests at least.\n                (C.getPrototypeOf && C.prototype && !Object.getPrototypeOf(C.prototype))\n            )\n            // Since all classes have a constructor property, an object w/o one is likely from Object.create(null). Of\n            // course, primitive types do not have \".constructor\"\n            : (value && typeof value === 'object')\n        );\n    }\n    static isInstantiated(object) {\n        return object ? typeof object === 'object' && !Objects.isObject(object) : false;\n    }\n    static merge(dest, ...sources) {\n        return Objects.blend(dest, sources);\n    }\n    /**\n     * Merges two \"items\" objects. An items object is a simple object whose keys act as identifiers and whose values\n     * are \"item\" objects. An item can be any object type. This method is used to merge such objects while maintaining\n     * their property order. Special key syntax is used to allow a source object to insert a key before or after a key\n     * in the `dest` object.\n     *\n     * For example:\n     * ```javascript\n     *  let dest = {\n     *      foo : {},\n     *      bar : {},\n     *      fiz : {}\n     *  }\n     *\n     *  console.log(Object.keys(dest));\n     *  > [\"foo\", \"bar\", \"fiz\"]\n     *\n     *  dest = mergeItems(dest, {\n     *      'zip > bar' : {}    // insert \"zip\" before \"bar\"\n     *      'bar < zap' : {}    // insert \"zap\" after \"bar\"\n     *  });\n     *\n     *  console.log(Object.keys(dest));\n     *  > [\"foo\", \"zip\", \"bar\", \"zap\", \"fiz\"]\n     * ```\n     *\n     * @param {Object} dest The destination object.\n     * @param {Object|Object[]} src The source object or array of source objects to merge into `dest`.\n     * @param {Object} [options] The function to use to merge items.\n     * @param {Function} [options.merge] The function to use to merge items.\n     * @returns {Object} The merged object. This will be the `dest` object.\n     * @internal\n     */\n    static mergeItems(dest, src, options) {\n        options = options || blendOptions;\n        let anchor, delta, index, indexMap, key, shuffle, srcVal;\n        const { merge = Objects.blend } = options;\n        dest = dest || {};\n        if (Array.isArray(src)) {\n            src.forEach(s => {\n                dest = Objects.mergeItems(dest, s, options);\n            });\n        }\n        else if (src) {\n            // https://2ality.com/2015/10/property-traversal-order-es6.html\n            // Bottom line: Object keys are iterated in declared/insertion order... unless the key is an integer or\n            // Symbol, but we don't care about those generally.\n            for (key in src) {\n                srcVal = src[key];\n                anchor = null;\n                // Allow a key to be added before or after another:\n                //\n                //  {\n                //      'foo > bar' : {\n                //          ...\n                //      },\n                //      'bar < derp' : {\n                //          ...\n                //      }\n                //  }\n                //\n                // The goal above is to add a 'foo' key before the existing 'bar' key while adding a 'derp' key after\n                // 'bar'.\n                if (key.includes('>')) {\n                    [key, anchor] = key.split(beforeRe);\n                    delta = 0;\n                }\n                else if (key.includes('<')) {\n                    [anchor, key] = key.split(afterRe);\n                    delta = 1;\n                }\n                if (key in dest) {\n                    // Changing the value of a key does not change its iteration order. Since \"key in dest\" we can do\n                    // what we need directly.\n                    if (srcVal && dest[key] && merge) {\n                        options.key = key;\n                        srcVal = merge(dest[key], srcVal, options);\n                    }\n                    dest[key] = srcVal;\n                }\n                else if (!anchor) {\n                    dest[key] = srcVal;\n                    indexMap?.set(key, indexMap.size);\n                }\n                else {\n                    // Lazily sprout the item index map. When we first merge an item into an items object, we create this\n                    // Map to control the ordering. This is because any keys we add would necessarily be iterated after\n                    // the original properties.\n                    if (!indexMap) {\n                        indexMap = new Map();\n                        index = 0;\n                        for (const k in dest) {\n                            indexMap.set(k, index++);\n                        }\n                    }\n                    index = indexMap.get(anchor);\n                    dest[key] = srcVal;\n                    if (index == null && delta) {\n                        index = indexMap.size;\n                    }\n                    else {\n                        shuffle = shuffle || [];\n                        index = (index || 0) + delta;\n                        // Adjust all key indices >= index up by 1 to maintain integer indices (required by the above\n                        // use case).\n                        for (const item of indexMap) {\n                            const [k, v] = item;\n                            if (index <= v) {\n                                /*\n                                Consider object w/the following order:\n                                    {\n                                        foo : {}',\n                                        bar : {},\n                                        baz : {},\n                                        zip : {},\n                                        goo : {},\n                                        fiz : {}\n                                    }\n                                The indexMap is:\n                                    foo : 0\n                                    bar : 1\n                                    baz : 2\n                                    zip : 3\n                                    goo : 4\n                                    fiz : 5\n                                To insert before goo, we populate shuffle thusly (to set up for popping):\n                                    +-----+-----+\n                                    | fiz | goo |\n                                    +-----+-----+\n                                      0        1\n                                      =6-5-1   =6-4-1\n                                */\n                                shuffle && (shuffle[indexMap.size - v - 1] = k);\n                                indexMap.set(k, v + 1);\n                            }\n                        }\n                        // Delete and re-add the keys that should follow the new key to establish the iteration order\n                        // we need:\n                        if (shuffle) {\n                            while (shuffle.length) {\n                                const\n                                    k = shuffle.pop(),\n                                    v = dest[k];\n                                delete dest[k];\n                                dest[k] = v;\n                            }\n                        }\n                    }\n                    indexMap.set(key, index);\n                }\n            }\n        }\n        return dest;\n    }\n    /**\n     * Sets value for a given path in the object\n     * @param {Object} object Target object\n     * @param {String} path Dot-separated path, e.g. 'object.childObject.someKey'\n     * @param {*} value Value for a given path\n     * @returns {Object} Returns passed object\n     */\n    static setPath(object, path, value) {\n        path.split('.').reduce((result, key, index, array) => {\n            const isLast = index === array.length - 1;\n            if (isLast) {\n                return result[key] = value;\n            }\n            else if (!(result[key] instanceof Object)) {\n                result[key] = {};\n            }\n            return result[key];\n        }, object);\n        return object;\n    }\n    static typeOf(value) {\n        let trueType, type;\n        if (value === null) {\n            type = 'null';\n        }\n        // NaN is the only value that is !== to itself\n        else if (value !== value) { // eslint-disable-line no-self-compare\n            type = 'nan';\n        }\n        else {\n            type = typeof value;\n            if (type === 'object') {\n                if (value.isBase) {\n                    type = 'instance';\n                }\n                else if (Array.isArray(value)) {\n                    type = 'array';\n                }\n                else if (!(type = typeCache[trueType = toString.call(value)])) {\n                    typeCache[trueType] = type = trueType.slice(8, -1).toLowerCase();  // '[object Date]' => 'date'\n                }\n            }\n            else if (type === 'function' && value.isBase) {\n                type = 'class';\n            }\n        }\n        return type;\n    }\n}\nObject.defineProperty(Objects, 'hasOwn', {\n    // When available, this avoids an extra layer of function call around it:\n    value : Object.hasOwn || ((object, property) => hasOwnProperty.call(object, property))\n});\nObjects._$name = 'Objects';", "import BrowserHelper from './BrowserHelper.js';\nimport StringHelper from './StringHelper.js';\n/**\n * @module Core/helper/VersionHelper\n */\n/**\n * Helper for version handling\n * @private\n * @example\n *\n * VersionHelper.setVersion('grid', '1.5');\n *\n * if (VersionHelper.getVersion('grid').isNewerThan('1.0')) {\n *   ...\n * }\n */\nexport default class VersionHelper {\n    /**\n     * Set version for specified product\n     * @private\n     * @param {String} product\n     * @param {String} version\n     */\n    static setVersion(product, version) {\n        product = product.toLowerCase();\n        VH[product] = {\n            version,\n            isNewerThan(otherVersion) {\n                return VersionHelper.semanticCompareVersion(otherVersion, version, '<');\n            },\n            isOlderThan(otherVersion) {\n                return VersionHelper.semanticCompareVersion(otherVersion, version, '>');\n            }\n        };\n        let bundleFor = '';\n        // Var productName is only defined in bundles, it is internal to bundle so not available on window. Used to\n        // tell importing combinations of grid/scheduler/gantt bundles apart from loading same bundle twice\n        if (typeof productName !== 'undefined') {\n            // eslint-disable-next-line no-undef\n            bundleFor = productName;\n        }\n        // Set \"global\" flag to detect bundle being loaded twice\n        const globalKey = `${bundleFor}.${product}${version.replace(/\\./g, '-')}`;\n        if (BrowserHelper.isBrowserEnv && !globalThis.bryntum.silenceBundleException) {\n            if (globalThis.bryntum[globalKey] === true) {\n                if (this.isTestEnv) {\n                    globalThis.BUNDLE_EXCEPTION = true;\n                }\n                else {\n                    let errorProduct = bundleFor || product;\n                    if (errorProduct === 'core') {\n                        errorProduct = 'grid';\n                    }\n                    let capitalized  = StringHelper.capitalize(errorProduct);\n                    if (errorProduct === 'schedulerpro') {\n                        capitalized = 'SchedulerPro';\n                    }\n                    throw new Error(\n                        `The Bryntum ${capitalized} bundle was loaded multiple times by the application.\\n\\n` +\n                        `Common reasons you are getting this error includes:\\n\\n` +\n                        `* Imports point to different types of the bundle (e.g. *.module.js and *.umd.js)\\n` +\n                        `* Imports point to both sources and bundle\\n` +\n                        `* Imports do not use the shortest relative path, JS treats them as different files\\n` +\n                        `* Cache busters differ between imports, JS treats ${errorProduct}.module.js?1 and ${errorProduct}.module.js?2 as different files\\n` +\n                        `* Imports missing file type, verify they all end in .js\\n\\n` +\n                        `See https://bryntum.com/products/${errorProduct}/docs/guide/${capitalized}/gettingstarted/es6bundle#troubleshooting for more information\\n\\n`\n                    );\n                }\n            }\n            else {\n                globalThis.bryntum[globalKey] = true;\n            }\n        }\n    }\n    /**\n     * Get (previously set) version for specified product\n     * @private\n     * @param {String} product\n     */\n    static getVersion(product) {\n        product = product.toLowerCase();\n        if (!VH[product]) {\n            throw new Error('No version specified! Please check that you import VersionHelper correctly into the class from where you call `deprecate` function.');\n        }\n        return VH[product].version;\n    }\n    /**\n     * Checks the version1 against the passed version2 using the comparison operator.\n     * Supports `rc`, `beta`, `alpha` release states. Eg. `1.2.3-alpha-1`.\n     * State which is not listed above means some version below `alpha`.\n     * @param {String} version1 The version to test against\n     * @param {String} version2 The version to test against\n     * @param {String} [comparison] The comparison operator, `<=`, `<`, `=`, `>` or `>=`.\n     * @returns {Boolean} `true` if the test passes.\n     * @internal\n     */\n    static semanticCompareVersion(version1, version2, comparison = '=') {\n        version1 = version1 || '';\n        version2 = version2 || '';\n        const\n            version1Arr  = version1.split(/[-.]/),\n            version2Arr  = version2.split(/[-.]/),\n            isLower      = comparison.includes('<'),\n            normalizeArr = (arr, maxLength) => {\n                const\n                    states = ['rc', 'beta', 'alpha'],\n                    result = arr.map(v => {\n                        if (states.includes(v)) {\n                            return -states.indexOf(v) - 2;\n                        }\n                        const res = Number.parseInt(v);\n                        return Number.isNaN(res) ? -states.length : res;\n                    });\n                while (result.length < maxLength) {\n                    result.push(-1);\n                }\n                return result;\n            },\n            compareArr   = () => {\n                const\n                    maxLength = Math.max(version1Arr.length, version2Arr.length),\n                    arr1      = normalizeArr(version1Arr, maxLength),\n                    arr2      = normalizeArr(version2Arr, maxLength);\n                for (let i = 0; i < maxLength; i++) {\n                    if (arr1[i] !== arr2[i]) {\n                        return isLower ? arr1[i] < arr2[i] : arr1[i] > arr2[i];\n                    }\n                }\n                return true;\n            };\n        switch (comparison) {\n            case '=':\n                return version1 === version2;\n            case '<=':\n            case '>=':\n                return (version1 === version2) || compareArr();\n            case '<':\n            case '>':\n                return (version1 !== version2) && compareArr();\n        }\n        return false;\n    }\n    /**\n     * Checks the passed product against the passed version using the passed test.\n     * @param {String} product The name of the product to test the version of\n     * @param {String} version The version to test against\n     * @param {String} operator The test operator, `<=`, `<`, `=`, `>` or `>=`.\n     * @returns {Boolean} `true` if the test passes.\n     * @internal\n     */\n    static checkVersion(product, version, operator) {\n        return VersionHelper.semanticCompareVersion(VH.getVersion(product), version, operator);\n    }\n    /**\n     * Based on a comparison of current product version and the passed version this method either outputs a console.warn\n     * or throws an error.\n     * @param {String} product The name of the product\n     * @param {String} invalidAsOfVersion The version where the offending code is invalid (when any compatibility layer\n     * is actually removed).\n     * @param {String} message Required! A helpful warning message to show to the developer using a deprecated API.\n     * @internal\n     */\n    static deprecate(product, invalidAsOfVersion, message) {\n        const justWarn = VH.checkVersion(product, invalidAsOfVersion, '<');\n        if (justWarn) {\n            // During the grace period (until the next major release following the deprecated code), just show a console warning\n            console.warn(`Deprecation warning: You are using a deprecated API which will change in v${invalidAsOfVersion}. ${message}`);\n        }\n        else {\n            throw new Error(`Deprecated API use. ${message}`);\n        }\n    }\n    /**\n     * Returns truthy value if environment is in testing mode\n     * @returns {Boolean}\n     * @internal\n     **/\n    static get isTestEnv() {\n        const isTestEnv = Boolean(globalThis.bryntum?.isTestEnv);\n        try {\n            return isTestEnv || Boolean(globalThis.parent?.bryntum?.isTestEnv);\n        }\n        catch (e) {\n            // Accessing parent may cause CORS violation\n            return isTestEnv;\n        }\n    }\n    static get isDebug() {\n        let result = false;\n        return result;\n    }\n}\nconst VH = VersionHelper;\nif (BrowserHelper.isBrowserEnv) {\n    if (VH.isTestEnv) {\n        BrowserHelper._isHoverableDevice = true;\n    }\n    globalThis.bryntum = Object.assign(globalThis.bryntum || {}, {\n        getVersion   : VH.getVersion.bind(VH),\n        checkVersion : VH.checkVersion.bind(VH),\n        deprecate    : VH.deprecate.bind(VH),\n        license      : '%LICENSE%'\n    });\n}\nVersionHelper._$name = 'VersionHelper';", "import Objects from './helper/util/Objects.js';\n// We cannot import ObjectHelper because of the import cycle:\n//  ObjectHelper -> DateHelper -> LocaleManager -> Base -> us\n/**\n * @module Core/Config\n */\nconst\n    { defineProperty, getOwnPropertyDescriptor } = Reflect,\n    { hasOwnProperty, toString } = Object.prototype,\n    instancePropertiesSymbol     = Symbol('instanceProperties'),\n    configuringSymbol            = Symbol('configuring'),\n    lazyConfigValues             = Symbol('lazyConfigValues'),\n    DATE_TYPE                    = toString.call(new Date()),\n    whitespace                   = /\\s+/,\n    createClsProps               = (result, cls) => {\n        result[cls] = 1;\n        return result;\n    };\n/**\n * This class holds the description of a config property. Only one instance of this class is needed for each config\n * name (e.g., \"text\"). If config options are supplied, however, they also contribute to the cached instance.\n *\n * Instances should always be retrieved by calling `Config.get()`.\n *\n * The **Configs** of this class correspond to `options` that can be supplied to the `get()` method. These affect the\n * behavior of the config property in some way, as descried by their respective documentation.\n *\n * This class is not used directly.\n *\n * ## The Setter\n * The primary functionality provided by `Config` is its standard setter. This setter function ensures consistent\n * behavior when modifying config properties.\n *\n * The standard setter algorithm is as follows (using the `'text'` config for illustration):\n *\n *  - If the class defines a `changeText()` method, call it passing the new value and the current value:\n *    `changeText(newText, oldText)`.<br>\n *    Then:\n *    * If `changeText()` exits without returning a value (i.e., `undefined`), exit and do nothing further. The\n *      assumption is that the changer method has done all that is required.\n *    * Otherwise, the return value of `changeText()` replaces the incoming value passed to the setter.\n *  - If the new value (or the value returned by `changeText()`) is `!==` to the current value:\n *    * Update the stored config value in `this._text`.\n *    * If the class defines an `updateText()` method, call it passing the new value and the previous value.\n *      `updateText(newText, oldText)`\n *    * If the class defines an `onConfigChange()` method, call it passing an object with the following properties:\n *        - `name` - The config's name\n *        - `value` - The new value\n *        - `was` - The previous value\n *        - `config` - The `Config` instance.\n *\n * NOTE: unlike `changeText()` and `updateText()`, the name of the `onConfigChange()` method is unaffected by the\n * config's name.\n *\n * @internal\n */\nexport default class Config {\n    /**\n     * Returns the `Config` instance for the given `name` and `options`.\n     * @param {String} name The name of the config (e.g., 'text' for the text config).\n     * @param {Object} [options] Config behavior options.\n     * @returns {Core.Config}\n     * @internal\n     */\n    static get(name, options) {\n        const\n            { cache } = this,\n            baseCfg = cache[name] || (cache[name] = new Config(name));\n        let cfg = baseCfg,\n            key;\n        if (options) {\n            key = Config.makeCacheKey(name, options);\n            if (!(cfg = key && cache[key])) {\n                cfg = baseCfg.extend(options);\n                if (key) {\n                    cache[key] = cfg;\n                }\n            }\n        }\n        return cfg;\n    }\n    constructor(name) {\n        const\n            me = this,\n            cap = name[0].toUpperCase() + name.substr(1);\n        me.base = me;  // so extend()ed configs have a link to the base definition\n        me.name = name;\n        me.field = '_' + name;\n        me.capName = cap;\n        me.changer = 'change' + cap;\n        me.initializing = 'initializing' + cap;\n        me.updater = 'update' + cap;\n    }\n    /**\n     * The descriptor to use with `Reflect.defineProperty()` for defining this config's getter and setter.\n     * @property {Object}\n     * @private\n     */\n    get descriptor() {\n        let descriptor = this._descriptor;\n        if (!descriptor || !hasOwnProperty.call(this, '_descriptor')) {\n            // lazily make the descriptor\n            this._descriptor = descriptor = this.makeDescriptor();\n        }\n        return descriptor;\n    }\n    /**\n     * The descriptor to use with `Reflect.defineProperty()` for defining this config's initter.\n     * @property {Object}\n     * @private\n     */\n    get initDescriptor() {\n        let descriptor = this._initDescriptor;\n        if (!descriptor || !hasOwnProperty.call(this, '_initDescriptor')) {\n            // lazily make the descriptor\n            this._initDescriptor = descriptor = this.makeInitter();\n        }\n        return descriptor;\n    }\n    /**\n     * This method compares two values for semantic equality. By default, this is based on the `===` operator. This\n     * is often overridden for configs that accept `Date` or array values.\n     * @param {*} value1\n     * @param {*} value2\n     * @returns {Boolean}\n     * @internal\n     */\n    equal(value1, value2) {\n        return value1 === value2;\n    }\n    /**\n     * Extends this config with a given additional set of options. These objects are just prototype extensions of this\n     * instance.\n     * @param {Object} options\n     * @returns {Core.Config}\n     * @internal\n     */\n    extend(options) {\n        const\n            cfg = Object.assign(Object.create(this), options),\n            { equal, merge } = options,\n            { equalityMethods } = Config;\n        if (typeof equal === 'string') {\n            if (equal.endsWith('[]')) {\n                cfg.equal = Config.makeArrayEquals(equalityMethods[equal.substr(0, equal.length - 2)]);\n            }\n            else {\n                cfg.equal = equalityMethods[equal];\n            }\n        }\n        if (typeof merge === 'string') {\n            // Base uses { merge : 'replace' } for defaultConfig properties\n            cfg.merge = Config.mergeMethods[merge];\n        }\n        return cfg;\n    }\n    /**\n     * Defines the property on a given target object via `Reflect.defineProperty()`. If the object has its own getter,\n     * it will be preserved. It is invalid to define a setter.\n     * @param {Object} target\n     * @internal\n     */\n    define(target) {\n        const existing = getOwnPropertyDescriptor(target, this.name);\n        let descriptor = this.descriptor;\n        if (existing && existing.get) {\n            descriptor = Object.assign({}, descriptor);\n            descriptor.get = existing.get;\n        }\n        defineProperty(target, this.name, descriptor);\n    }\n    /**\n     * Defines the property initter on the `target`. This is a property getter/setter that propagates the configured\n     * value when the property is read.\n     * @param {Object} target\n     * @param {*} value\n     * @internal\n     */\n    defineInitter(target, value) {\n        const\n            { name } = this,\n            properties = target[instancePropertiesSymbol];\n        let lazyValues, prop;\n        // If there is an existing property with a getter/setter, *not* a value\n        // defined on the object for this config we must call it in our injected getter/setter.\n        if (!properties[name] && (/* assign */prop = getOwnPropertyDescriptor(target, name)) && !('value' in prop)) {\n            properties[name] = prop;\n        }\n        // Set up a temporary instance property which will pull in the value from the initialConfig if the getter\n        // is called first.\n        defineProperty(target, name, this.initDescriptor);\n        if (this.lazy) {\n            lazyValues = target[lazyConfigValues] || (target[lazyConfigValues] = new Map());\n            lazyValues.set(name, value);\n        }\n    }\n    /**\n     * Returns an equality function for arrays of a base type, for example `'date'`.\n     * @param {Function} [fn] The function to use to compare array elements. By default, operator `===` is used.\n     * @returns {Function}\n     * @private\n     */\n    static makeArrayEquals(fn) {\n        return (value1, value2) => {\n            let i,\n                equal = value1 && value2 && value1.length === (i = value2.length);\n            if (equal && Array.isArray(value1) && Array.isArray(value2)) {\n                if (fn) {\n                    while (equal && i-- > 0) {\n                        equal = fn(value1[i], value2[i]);\n                    }\n                }\n                else {\n                    while (equal && i-- > 0) {\n                        equal = value1[i] === value2[i];\n                    }\n                }\n            }\n            else {\n                equal = fn ? fn(value1, value2) : (value1 === value2);\n            }\n            return equal;\n        };\n    }\n    /**\n     * Returns the key to use in the Config `cache`.\n     * @param {String} name The name of the config property.\n     * @param {Object} options The config property options.\n     * @returns {String}\n     * @private\n     */\n    static makeCacheKey(name, options) {\n        const keys = Object.keys(options).sort();\n        for (let key, type, value, i = keys.length; i-- > 0; /* empty */) {\n            value = options[key = keys[i]];\n            if (value == null && value === false) {\n                keys.splice(i, 1);\n            }\n            else {\n                type = typeof value;\n                if (type === 'function') {\n                    return null;\n                }\n                if (type === 'string') {\n                    keys[i] = `${key}:\"${value}\"`;\n                }\n                else if (type === 'number') {\n                    keys[i] = `${key}:${value}`;\n                }\n                // that leaves bool and object, but there are no (valid) config options that are objects... so ignore\n            }\n        }\n        return keys.length ? `${name}>${keys.join('|')}` : name;  // eg: 'text>render|merge:v => v|bar'\n    }\n    /**\n     * Creates and returns a property descriptor for this config suitable to be passed to `Reflect.defineProperty()`.\n     * @returns {Object}\n     * @private\n     */\n    makeDescriptor() {\n        const\n            config = this,\n            { base, field, changer, updater, name } = config;\n        if (base !== config && base.equal === config.equal) {\n            // At present only the equal option affects the setter, so all configs can share the\n            // descriptor of the base-most config definition unless their equality test fns differ.\n            return base.descriptor;\n        }\n        return {\n            get() {\n                // Allow folks like Widget.compose() to monitor getter calls\n                this.configObserver?.get(name, this);\n                return this[field];\n            },\n            set(value) {\n                const me = this;\n                let was = me[field],\n                    applied, newValue;\n                // Resolve values starting with 'up.' by traversing owners to find it\n                if (typeof value === 'string') {\n                    let resolvedValue = value;\n                    if (value.startsWith('up.')) {\n                        resolvedValue = me.owner?.resolveProperty(value.substr(3));\n                    }\n                    else if (value.startsWith('this.')) {\n                        resolvedValue = me.resolveProperty(value.substr(5));\n                    }\n                    if (resolvedValue !== undefined && typeof resolvedValue !== 'function') {\n                        value = resolvedValue;\n                    }\n                }\n                // If the \"changeTitle()\" fellow falls off the end, it must have changed all the needful things.\n                // Otherwise, it returned the final config value (it may have changed it instead, for example, making\n                // an instance from a config object).\n                if (me[changer]) {\n                    applied = (newValue = me[changer](value, was)) === undefined;\n                    if (!applied) {\n                        value = newValue;\n                        was = me[field];  // in case it was modified by the changer fn...\n                    }\n                }\n                // inline the default equal() for better perf:\n                if (!applied && !((config.equal === equal) ? was === value : config.equal(was, value))) {\n                    me[field] = value;\n                    applied = true;\n                    // Check for a \"updateTitle()\" method and call it if present.\n                    me[updater]?.(value, was);\n                }\n                // Trigger config change if the value changed, and updater did not lead to our destruction\n                if (applied && !me.isDestroyed && !me.onConfigChange.$nullFn) {\n                    me.onConfigChange({ name, value, was, config });\n                }\n            }\n        };\n    }\n    /**\n     * Creates and returns a property descriptor for this config's initter suitable to pass to\n     * `Reflect.defineProperty()`.\n     * @returns {Object}\n     * @private\n     */\n    makeInitter() {\n        const config = this;\n        if (config !== config.base) {\n            if (config.lazy) {\n                return config.makeLazyInitter();\n            }\n            // At present no other options affect the setter, so all configs can share the descriptor of the base-most\n            // config definition.\n            return config.base.initDescriptor;\n        }\n        return config.makeBasicInitter();\n    }\n    makeBasicInitter() {\n        const\n            config = this,\n            { initializing, name } = config;\n        return {\n            configurable : true,\n            get() {\n                const me = this;\n                config.removeInitter(me);\n                // Set the value from the configuration.\n                me[initializing] = true;\n                me[name] = me[configuringSymbol][name];\n                me[initializing] = false;\n                // The property has been *pulled* from the configuration.\n                // Prevent the setting loop in configure from setting it again.\n                me.configDone[name] = true;\n                // Finally, allow the prototype getter to return the value.\n                return me[name];\n            },\n            set(value) {\n                config.removeInitter(this);\n                // The config has been set (some internal code may have called the setter)\n                // so prevent it from being called again and overwritten with data from initialConfig.\n                this.configDone[name] = true;\n                // Set the property normally (Any prototype setter will be invoked)\n                this[name] = value;\n            }\n        };\n    }\n    makeLazyInitter() {\n        const\n            config = this,\n            { initializing, name } = config;\n        return {\n            configurable : true,\n            get() {\n                const\n                    me    = this,\n                    value = me[lazyConfigValues].get(name);\n                config.removeInitter(me);\n                if (!me.isDestroying) {\n                    // Set the value from the lazy config object.\n                    me[initializing] = true;\n                    me[name] = value;\n                    me[initializing] = false;\n                }\n                // Finally, allow the prototype getter to return the value.\n                return me[name];\n            },\n            set(value) {\n                config.removeInitter(this);\n                // Set the property normally (Any prototype setter will be invoked)\n                this[name] = value;\n            }\n        };\n    }\n    /**\n     * Removes the property initter and restores the instance to its original form.\n     * @param {Object} instance\n     * @private\n     */\n    removeInitter(instance) {\n        const\n            { name } = this,\n            instanceProperty = instance[instancePropertiesSymbol][name],\n            lazyValues = instance[lazyConfigValues];\n        // If we took over from an instance property, replace it\n        if (instanceProperty) {\n            defineProperty(instance, name, instanceProperty);\n        }\n        // Otherwise just delete the instance property who's getter we are in.\n        else {\n            delete instance[name];\n        }\n        if (lazyValues?.delete(name) && !lazyValues.size) {\n            // we delete the keys so that we can tell if this particular lazy config has been initialized\n            delete instance[lazyConfigValues];\n        }\n    }\n    setDefault(cls, value) {\n        defineProperty(cls.prototype, this.field, {\n            configurable : true,\n            writable     : true,   // or else \"this._value = x\" will fail\n            value\n        });\n    }\n    /**\n     * This method combines (merges) two config values. This is called in two cases:\n     *\n     *  - When a derived class specifies the value of a config defined in a super class.\n     *  - When a value is specified in the instance config object.\n     *\n     * @param {*} newValue In the case of derived classes, this is the config value of the derived class. In the case\n     * of the instance config, this is the instance config value.\n     * @param {*} currentValue In the case of derived classes, this is the config value of the super class. In the case\n     * of the instance config, this is the class config value.\n     * @param {Object} metaNew The class meta object from which the `newValue` is coming. This parameter is `null` if\n     * the `newValue` is from an instance configuration.\n     * @param {Object} metaCurrent The class meta object from which the `currentValue` is coming. This parameter is\n     * `null` if the `currentValue` is not from a class configuration.\n     * @returns {*}\n     * @internal\n     */\n    merge(newValue, currentValue) {\n        if (currentValue && newValue && Objects.isObject(newValue)) {\n            // If existing value is a class instance, clone and merge won't work. Set the configs.\n            if (currentValue.isBase) {\n                return currentValue.setConfig(newValue);\n            }\n            if (Objects.isObject(currentValue)) {\n                newValue = Objects.merge(Objects.clone(currentValue), newValue);\n            }\n        }\n        return newValue;\n    }\n}\nconst\n    { prototype } = Config,\n    { equal } = prototype;\nConfig.symbols = {\n    configuring        : configuringSymbol,\n    instanceProperties : instancePropertiesSymbol,\n    lazyConfigs        : lazyConfigValues\n};\n/**\n * This object holds `Config` instances keyed by their name. For example:\n *\n * ```javascript\n *  Config.cache = {\n *      disabled : Config.get('disabled'),\n *      text     : Config.get('text'),\n *      title    : Config.get('title')\n *  };\n * ```\n *\n * @member {Object} cache\n * @static\n * @private\n */\nConfig.cache = Object.create(null);  // object w/no properties not even inherited ones\n/**\n * This object holds config value equality methods. By default, the `===` operator is used to compare config values for\n * semantic equality. When an `equal` option is specified as a string, that string is used as a key into this object.\n *\n * All equality methods in this object have the same signature as the {@link #function-equal equal()} method.\n *\n * This object has the following equality methods:\n *\n * - `array` : Compares arrays of values using `===` on each element.\n * - `date` : Compares values of `Date` type.\n * - `strict` : The default equal algorithm based on `===` operator.\n * @member {Object} equalityMethods\n * @static\n * @private\n */\nConfig.equalityMethods = {\n    array : Config.makeArrayEquals(),\n    date(value1, value2) {\n        if (value1 === value2) {\n            return true;\n        }\n        // see DateHelper.isDate() but cannot import due to circularity\n        if (value1 && value2 && toString.call(value1) === DATE_TYPE && toString.call(value2) === DATE_TYPE) {\n            // https://jsbench.me/ltkb3vk0ji/1 - getTime is >2x faster vs valueOf/Number/op+\n            return value1.getTime() === value2.getTime();\n        }\n        return false;\n    },\n    strict : Config.equal = equal\n};\n/**\n * This object holds config value merge methods. By default, {@link Core.helper.ObjectHelper#function-merge-static} is\n * used to merge object's by their properties. Config merge methods are used to combine config values from derived\n * classes with config values from super classes, as well as instance config values with those of the class.\n *\n * All merge methods in this object have the same signature as the {@link #function-merge merge()} method.\n *\n * This object has the following merge methods:\n *\n * - `distinct`   : Combines arrays of values ensuring that no value is duplicated. When given an object, its truthy\n *   keys are included, while its falsy keys are removed from the result.\n * - `merge`      : The default merge algorithm for `configurable()` properties, based on\n *   {@link Core.helper.ObjectHelper#function-merge-static}.\n * - `items`      : Similar to `merge`, but allows reordering (see `Objects.mergeItems`).\n * - `objects`    : The same as to `merge` except this method promotes `true` to an empty object.\n * - 'classList'  : Incoming strings are converted to an object where the string is a property name with a truthy value.\n * - `replace`    : Always returns `newValue` to replace the super class value with the derived class value, or the\n *   class value with the instance value.\n * @member {Object} mergeMethods\n * @static\n * @internal\n */\nConfig.mergeMethods = {\n    distinct(newValue, oldValue) {\n        let ret = oldValue ? oldValue.slice() : [];\n        if (newValue != null) {\n            if (Objects.isObject(newValue)) {\n                if (oldValue === undefined) {\n                    ret = newValue;\n                }\n                else {\n                    let key, index;\n                    for (key in newValue) {\n                        index = ret.indexOf(key);\n                        if (newValue[key]) {\n                            if (index < 0) {\n                                ret.push(key);\n                            }\n                        }\n                        else if (index > -1) {\n                            ret.splice(index, 1);\n                        }\n                    }\n                }\n            }\n            else if (Array.isArray(newValue)) {\n                newValue.forEach(v => !ret.includes(v) && ret.push(v));\n            }\n            else if (!ret.includes(newValue)) {\n                ret.push(newValue);\n            }\n        }\n        return ret;\n    },\n    merge : Config.merge = prototype.merge,\n    classList(newValue, oldValue) {\n        // 'foo bar' -> { foo : 1, bar : 1 }\n        if (typeof newValue === 'string') {\n            if (!newValue.length) {\n                return oldValue;\n            }\n            newValue = newValue.split(whitespace);\n        }\n        if (Array.isArray(newValue)) {\n            newValue = newValue.reduce(createClsProps, {});\n        }\n        return Config.merge(newValue, oldValue);\n    },\n    objects(newValue, oldValue) {\n        return (newValue === true) ? oldValue || {} : Config.merge(newValue, oldValue);\n    },\n    replace(newValue) {\n        return newValue;\n    },\n    items(newValue, oldValue, metaNew, metaCurrent) {\n        if (metaCurrent) {\n            // When we have metaCurrent, we are merging with a class config object, so we apply the smart merge algo\n            // only in that case. Merging instance configs would lose the 'clever > syntax' info needed when the\n            // time comes to actually configure an instance.\n            return Objects.mergeItems(oldValue, newValue, {\n                merge : (oldValue, newValue) => prototype.merge(newValue, oldValue)\n            });\n        }\n        return prototype.merge(newValue, oldValue);\n    }\n};\nObject.assign(prototype, {\n    _descriptor     : null,\n    _initDescriptor : null,\n    /**\n     * A function that compares values for equality. This test is used to determine if the `update` method should be\n     * called when the setter is invoked.\n     *\n     * To handle `Date` values:\n     * ```\n     *  class Foo extends Base {\n     *      static get configurable() {\n     *          return {\n     *              date : {\n     *                  $config : {\n     *                      equal : 'date'\n     *                  },\n     *\n     *                  value : null\n     *              }\n     *          }\n     *      }\n     *\n     *      updateDate(date) {\n     *          // date has changed\n     *      }\n     *  }\n     * ```\n     *\n     * Also useful for some configs:\n     * ```\n     *  class Foo extends Base {\n     *      static get configurable() {\n     *          return {\n     *              bar : {\n     *                  $config : {\n     *                      equal : ObjectHelper.isEqual\n     *                  },\n     *\n     *                  value : null\n     *              }\n     *          }\n     *      }\n     *\n     *      updateBar(value) {\n     *          // value has changed\n     *      }\n     *  }\n     * ```\n     * @config {Function} equal\n     * @internal\n     */\n    /**\n     * Indicates that this config property should not automatically initialize during construction. When this property\n     * is set to `true`, initialization is triggered by the first use of the config property's getter.\n     *\n     * This property can alternatively be set to a string, in which case it can be initialized as a group using the\n     * {@link Core.Base#function-triggerConfigs} method which will initialize all lazy configs with the same value for\n     * this property. Note: the config will still initialize on first use if that occurs prior to the call to\n     * `triggerConfigs`.\n     * @config {Boolean|String}\n     * @default\n     * @internal\n     */\n    lazy : false,\n    /**\n     * Indicates that this config property should automatically be set to `null` on destroy.\n     * @config {Boolean}\n     * @default\n     * @internal\n     */\n    nullify : false,\n    /**\n     * Indicates that this config participates in rendering. This has does not affect the behavior of the property\n     * directly, but allows classes that perform rendering to detect which config changes will affect the rendered\n     * result.\n     * @config {Boolean}\n     * @default\n     * @internal\n     */\n    render : false\n});\nConfig._$name = 'Config';", "/**\n * @module Core/Base\n */\nimport Objects from './helper/util/Objects.js';\nimport StringHelper from './helper/StringHelper.js';\nimport VersionHelper from './helper/VersionHelper.js';\nimport BrowserHelper from './helper/BrowserHelper.js';\nimport Config from './Config.js';\nclass MetaClass {\n    constructor(options) {\n        options && Object.assign(this, options);\n    }\n    getInherited(name, create = true) {\n        let ret = this[name];\n        // We use \"in this\" to allow the object to be set to null\n        if (!(name in this)) {\n            // If there is no object on this metaclass, but there may be one on a super class. If create=false, the\n            // idea is that a super class object will be \"properly\" inherited but otherwise no object will be created.\n            ret = this.super?.getInherited(name, create);\n            if (ret || create) {\n                this[name] = ret = Object.create(ret || null);\n            }\n        }\n        return ret;\n    }\n}\nconst\n    // Using Object.getPrototypeOf instead of Reflect.getPrototypeOf because:\n    // 1. They are almost the same, according to the MDN difference is handling getPrototypeOf('string')\n    // 2. It allows us to pass security check in SalesForce environment\n    { getPrototypeOf }       = Object,\n    { hasOwn }               = Objects,\n    { defineProperty }       = Reflect,\n    metaSymbol               = Symbol('classMetaData'),\n    mixinTagSymbol           = Symbol('mixinTag'),\n    originalConfigSymbol     = Symbol('originalConfig'),\n    createdAtSymbol          = Symbol('createdAt'),\n    configuringSymbol        = Config.symbols.configuring,\n    instancePropertiesSymbol = Config.symbols.instanceProperties,\n    lazyConfigsSymbol        = Config.symbols.lazyConfigs,\n    defaultConfigOptions     = { merge : 'replace', simple : true },\n    emptyFn                  = () => {},\n    newMeta                  = o => new MetaClass(o),\n    setupNames               = { /* foo : 'setupFoo' */ },\n    emptyObject              = Object.freeze({}),\n    emptyArray               = Object.freeze([]);\n/**\n * Base class for all configurable classes.\n *\n * Subclasses do not have to implement a constructor with its restriction of having to call super()\n * before there is a `this` reference. Subclasses instead implement a `construct` method which is\n * called by the `Base` constructor. This may call its `super` implementation at any time.\n *\n * The `Base` constructor applies all configs to properties of the new instance. The instance\n * will have been configured after the `super.construct(config)` is called.\n *\n * See the Class System documentation in the guides for more information.\n *\n * @abstract\n */\nexport default class Base {\n    static get isBase() {\n        return true;\n    }\n    get isBase() {\n        return true;\n    }\n    // defaultConfig & properties made private to not spam all other classes\n    /**\n     * A class property getter to add additional, special class properties.\n     *\n     * For example, a class adds a `declarable` class property like so:\n     * ```\n     *  class Something extends Base {\n     *      static get declarable() {\n     *          return ['extra'];\n     *      }\n     *\n     *      static setupExtra(cls, meta) {\n     *          // use cls.extra\n     *      }\n     *  }\n     * ```\n     * A derived class can then specify this property like so:\n     * ```\n     *  class Derived extends Something {\n     *      static get extra() {\n     *          // return extra information\n     *      }\n     *  }\n     * ```\n     * When the `Derived` class is initialized, the `setupExtra()` method is called and `Derived` is passed as the\n     * argument. It is also the `this` pointer, but the parameter is minifiable. The second argument passed is the\n     * `$meta` object for the class.\n     *\n     * Classes are initialized at the first occurrence of the following:\n     *\n     * - An instance is created\n     * - The class `$meta` property is accessed\n     *\n     * @member {String[]} declarable\n     * @static\n     * @category Configuration\n     * @internal\n     */\n    static get declarable() {\n        return [\n            'declarable',\n            /**\n             * A class property getter for the configuration properties of the class, which can be overridden by\n             * configurations passed at construction time.\n             *\n             * Unlike a normal `static` property, this property is only ever used for the class that defines it (as in,\n             * `hasOwnProperty`). It is retrieved for all classes in a class hierarchy, to gather their configs\n             * individually and then combine them with those of derived classes.\n             *\n             * For example, a `Label` might declare a `text` config like so:\n             * ```javascript\n             *  class Label extends Base {\n             *      static get configurable() {\n             *          return {\n             *              text : null\n             *          };\n             *      }\n             *  }\n             * ```\n             * The `text` config is automatically inherited by classes derived from Label. By implementing\n             * `get configurable()`, derived classes can change the default value of inherited configs, or define new\n             * configs, or both.\n             *\n             * When a config property is declared in this way, the class author can also implement either of two\n             * special methods that will be called when the config property is assigned a new value:\n             *\n             *  - `changeText()`\n             *  - `updateText()`\n             *\n             * In the example above, the `Label` class could implement a `changeText()` method, an `updateText()`\n             * method, or both. The generated property setter ensures these methods will be called when the `text`\n             * property is assigned.\n             *\n             * The generated setter (for `text` in this example) performs the following steps:\n             *\n             *  - If the class defines a `changeText()` method, call it passing the new value and the current value:\n             *    `changeText(newText, oldText)`.<br>\n             *    Then:\n             *    * If `changeText()` exits without returning a value (i.e., `undefined`), exit and do nothing\n             *      further. The assumption is that the changer method has done all that is required.\n             *    * Otherwise, the return value of `changeText()` replaces the incoming value passed to the setter.\n             *  - If the new value (or the value returned by `changeText()`) is `!==` to the current value:\n             *    * Update the stored config value in `this._text`.\n             *    * If the class defines an `updateText()` method, call it passing the new value and the previous value.\n             *      `updateText(newText, oldText)`\n             *\n             * #### Resolving a value from an owner\n             * By specifying a value starting with `'up.'` for a config, the config system will resolve that value by\n             * examining the ownership hierarchy. It will walk up the hierarchy looking for a property matching the name\n             * (or dot separated path) after 'up.'. If one is found, the value will be read and used as the initial\n             * value.\n             *\n             * ```javascript\n             * class Parent extends Base {\n             *     static get configurable() {\n             *         return [\n             *           'importantValue'\n             *         ]\n             *     }\n             * }\n             *\n             * class Child extends Base {\n             *     static get configurable() {\n             *         return [\n             *           'value'\n             *         ]\n             *     }\n             * }\n             *\n             * const parent = new Parent({\n             *     importantValue : 123\n             * });\n             *\n             * const child = new Child({\n             *     owner : parent,\n             *     // Will be resolved from the owner\n             *     value : 'up.importantValue'\n             * });\n             *\n             * console.log(child.value); // logs 123\n             * ```\n             * Please note that this is for now a one way one time binding, the value will only be read initially and\n             * not kept up to date on later changes.\n             *\n             * #### Value Merging\n             * When a config property value is an object, the value declared by the base class is merged with values\n             * declared by derived classes and the value passed to the constructor.\n             * ```javascript\n             *  class Example extends Base {\n             *      static get configurable() {\n             *          return {\n             *              config : {\n             *                  foo : 1,\n             *                  bar : 2\n             *              }\n             *          };\n             *      }\n             *  }\n             *\n             *  class Example2 extends Example {\n             *      static get configurable() {\n             *          return {\n             *              config : {\n             *                  bar : 42,\n             *                  zip : 'abc'\n             *              }\n             *          };\n             *      }\n             *  }\n             *\n             *  let ex = new Example2({\n             *      config : {\n             *          zip : 'xyz'\n             *      }\n             *  });\n             * ```\n             * The result of the merge would set `config` to:\n             * ```javascript\n             *  ex.foo = {\n             *      foo : 1,    // from Example\n             *      bar : 42,   // from Example2\n             *      zip : 'xyz' // from constructor\n             *  }\n             * ```\n             *\n             * #### Config Options\n             * Some config properties require additional options such as declarative information about the config that\n             * may be useful to automate some operation. Consider a `Button`. It could declare that its `text` config\n             * affects the rendered HTML by applying a `render` property to the config definition. Its base class could\n             * then examine the config definition to find this property.\n             *\n             * To support this, config options ca be declared like so:\n             * ```javascript\n             *  class Button extends Widget {\n             *      static get configurable() {\n             *          return {\n             *              text : {\n             *                  value   : null,\n             *                  $config : {\n             *                      render : true\n             *                  }\n             *              }\n             *          };\n             *      }\n             *  }\n             * ```\n             * The `$config` property can alternatively be just the names of the options that should be enabled (set\n             * to `true`).\n             *\n             * For example, the following is equivalent to the above:\n             * ```javascript\n             *  class Button extends Widget {\n             *      static get configurable() {\n             *          return {\n             *              text : {\n             *                  value   : null,\n             *                  $config : 'render'\n             *              }\n             *          };\n             *  }\n             * ```\n             *\n             * #### Default Value\n             * It is common to set a config to a `null` value to take advantage of internal optimizations for `null`\n             * values. In most cases the fact that this produces `undefined` as the actual initial value of the config\n             * is acceptable. When this is not acceptable, a config can be declared like so:\n             * ```javascript\n             *  class Widget {\n             *      static get configurable() {\n             *          return {\n             *              disabled : {\n             *                  $config : null,\n             *                  value   : null,\n             *                  default : false\n             *              }\n             *          };\n             *  }\n             * ```\n             * The `default` property above determines the value of the config while still gaining the benefits of\n             * minimal processing due to the `null` value of the `value` property.\n             * @member {Object} configurable\n             * @static\n             * @category Configuration\n             * @internal\n             */\n            'configurable',\n            /**\n             * A class property getter for the default configuration of the class, which can be overridden by\n             * configurations passed at construction time.\n             *\n             * Unlike a normal `static` property, this property is only ever used for the class that defines it (as in,\n             * `hasOwnProperty`). It is retrieved for all classes in a class hierarchy, to gather their configs\n             * individually and then combine them with those of derived classes.\n             *\n             * For example, a `Store` might declare its `url` config like so:\n             * ```\n             *  class Store extends Base {\n             *      static get defaultConfig() {\n             *          return {\n             *              url : null\n             *          };\n             *      }\n             *  }\n             * ```\n             * The `url` config is automatically inherited by classes derived from Store. By implementing\n             * `get defaultConfig()`, derived classes can change the default value of inherited configs, or define new\n             * configs, or both. When defining new configs, however, `configurable` is preferred.\n             *\n             * Config properties introduced to a class by this declaration do not participate in value merging and do\n             * not get a generated setter. Config properties introduced by a base class using `configurable` can be\n             * set to a different value using `defaultConfig` and in doing so, the values will be merged as appropriate\n             * for `configurable`.\n             *\n             * @member {Object} defaultConfig\n             * @static\n             * @category Configuration\n             * @internal\n             */\n            'defaultConfig',\n            /**\n             * A class property getter for the default values of internal properties for this class.\n             * @member {Object} properties\n             * @static\n             * @category Configuration\n             * @internal\n             */\n            'properties',\n            /**\n             * A class property getter for properties that will be applied to the class prototype.\n             * @member {Object} prototypeProperties\n             * @static\n             * @category Configuration\n             * @internal\n             */\n            'prototypeProperties'\n        ];\n    }\n    /**\n     * Base constructor, passes arguments to {@link #function-construct}.\n     * @param {...Object} [args] Usually called with a config object, but accepts any params\n     * @function constructor\n     * @category Lifecycle\n     */\n    constructor(...args) {\n        const\n            me = this,\n            C  = me.constructor;\n        if (me.$meta.class !== C) {\n            // This will happen only once for each class. We need to call the C.$meta getter which puts $meta on our\n            // prototype. Since that alone would be optimized away (and would generate IDE and lint warnings), we call\n            // emptyFn and simply pass the value.\n            emptyFn(C.$meta);\n        }\n        // Allow subclasses to have a pseudo constructor with \"this\" already set:\n        me.construct(...args);\n        me.afterConstruct();\n        me.isConstructing = false;\n    }\n    /**\n     * Factory version of the Base constructor. Merges all arguments to create a config object that is passed along to\n     * the constructor.\n     * @param {...Object} [configs] Allows passing multiple config objects\n     * @returns {Core.Base} New instance\n     * @private\n     */\n    static new(...configs) {\n        configs = configs.filter(c => c);\n        return new this(configs.length > 1 ? this.mergeConfigs(...configs) : configs[0]);\n    }\n    /**\n     * Base implementation applies configuration.\n     *\n     * Subclasses need only implement this if they have to initialize instance specific\n     * properties required by the class. Often a `construct` method is\n     * unnecessary. All initialization of incoming configuration properties can be\n     * done in a `set propName` implementation.\n     * @param {...Object} [args] Usually called with a config object, but accepts any params\n     * @category Lifecycle\n     */\n    construct(...args) {\n        // Passing null to base construct means bypass the config system and stack creation (to gain performance)\n        if (args[0] !== null) {\n            this.configure(...args);\n        }\n        this.afterConfigure();\n    }\n    /**\n     * Destroys the provided objects by calling their {@link #function-destroy} method.\n     * Skips empty values or objects that are already destroyed.\n     *\n     * ```javascript\n     * Base.destroy(myButton, toolbar1, helloWorldMessageBox);\n     * ```\n     * @param {...Object} [args] Objects to be destroyed\n     * @category Lifecycle\n     */\n    static destroy(...args) {\n        const shredder = object => {\n            if (object?.destroy) {\n                object.destroy();\n            }\n            else if (Array.isArray(object)) {\n                object.forEach(shredder);\n            }\n        };\n        shredder(args);\n    }\n    /**\n     * Destroys this object. This is primarily accomplished by calling {@link #function-doDestroy}, however, prior to\n     * calling `doDestroy`, {@link #property-isDestroying} is set to `true`. After {@link #function-doDestroy} returns,\n     * {@link #property-isDestroyed} is set to `true`.\n     *\n     * Do not override this method in subclasses. To provide class-specific cleanup, implement {@link #function-doDestroy}\n     * instead.\n     * @category Lifecycle\n     */\n    destroy() {\n        const\n            me = this,\n            { id } = me;\n        // Let everyone know the object is going inert:\n        me.isDestroying = true;\n        // Make calling destroy() harmless:\n        me.destroy = emptyFn;\n        me.doDestroy();\n        Object.setPrototypeOf(me, null);\n        // Clear all remaining instance properties.\n        for (const key in me) {\n            if (key !== 'destroy' && key !== 'isDestroying') {\n                delete me[key];\n            }\n        }\n        delete me[originalConfigSymbol];\n        // Let everyone know the object is inert:\n        me.isDestroyed = true;\n        me.id = id;  // for diagnostic reasons\n    }\n    /**\n     * This method is required to help `unused` getters to survive production build process. Some tools, like angular,\n     * will remove `unused` code in production build, making our side-effected getters behind, breaking code heavily.\n     * @internal\n     * @param getter Getter to evaluate\n     */\n    _thisIsAUsedExpression(getter) {}\n    static get $$name() {\n        return hasOwn(this, '$name') && this.$name ||\n            // _$name is filled by webpack for every class (cls._$name = '...')\n            hasOwn(this, '_$name') && this._$name ||\n            this.name;\n    }\n    get $$name() {\n        return this.constructor.$$name;\n    }\n    /**\n     * Base implementation so that all subclasses and mixins may safely call super.startConfigure.\n     *\n     * This is called by the Base class before setting configuration properties, but after\n     * the active initial getters have been set, so all configurations are available.\n     *\n     * This method allows all classes in the hierarchy to force some configs to be evaluated before others.\n     * @internal\n     * @category Lifecycle\n     * @params {Object} config The configuration object use to set the initial state.\n     */\n    startConfigure(config) {\n    }\n    /**\n     * Base implementation so that all subclasses and mixins may safely call super.finishConfigure.\n     *\n     * This is called by the Base class before exiting the {@link #function-configure} method.\n     *\n     * At this point, all configs have been applied, but the `isConfiguring` property is still set.\n     *\n     * This method allows all classes in the hierarchy to inject functionality\n     * into the config phase.\n     * @internal\n     * @category Lifecycle\n     * @params {Object} config The configuration object use to set the initial state.\n     */\n    finishConfigure(config) {\n    }\n    /**\n     * Base implementation so that all subclasses and mixins may safely call `super.afterConfigure`. This is called by the Base class after the {@link #function-configure} method has been\n     * called. At this point, all configs have been applied.\n     *\n     * This method allows all classes in the hierarchy to inject functionality\n     * either before or after the super.afterConstruct();\n     * @internal\n     * @category Lifecycle\n     */\n    afterConfigure() {\n    }\n    /**\n     * Base implementation so that all subclasses and mixins may safely call super.afterConstruct.\n     *\n     * This is called by the Base class after the {@link #function-construct} method has been\n     * called.\n     *\n     * At this point, all configs have been applied.\n     *\n     * This method allows all classes in the hierarchy to inject functionality\n     * either before or after the super.afterConstruct();\n     * @internal\n     * @function afterConstructor\n     * @category Lifecycle\n     */\n    afterConstruct() {\n    }\n    /**\n     * Provides a way of calling callbacks which may have been specified as the _name_ of a function\n     * and optionally adds scope resolution.\n     *\n     * For example, if the callback is specified as a string, then if it is prefixed with `'this.'`\n     * then the function is resolved in this object. This is useful when configuring listeners\n     * at the class level.\n     *\n     * If the callback name is prefixed with `'up.'` then the ownership hierarchy is queried\n     * using the `owner` property until an object with the named function is present, then the\n     * named function is called upon that object.\n     *\n     * If a named function is not found, an error is thrown. If the function should be only called when present,\n     * and may not be present, add a `?` as a suffix.\n     *\n     * @param {String|Function} fn The function to call, or the name of the function to call.\n     * @param {Object} thisObject The `this` object of the function.\n     * @param {Object[]} args The argument list to pass.\n     * @category Misc\n     */\n    callback(fn, thisObject, args = emptyArray) { // Maintainer: do not make args ...args. This method may acquire more arguments\n        const { handler, thisObj } = this.resolveCallback(fn, thisObject === 'this' ? this : thisObject) || emptyObject;\n        return handler?.apply(thisObj, args);\n    }\n    resolveProperty(propertyPath) {\n        let thisObj = this;\n        while (thisObj) {\n            if (Objects.hasPath(thisObj, propertyPath)) {\n                return Objects.getPath(thisObj, propertyPath);\n            }\n            thisObj = thisObj.owner;\n        }\n        return undefined;\n    }\n    /**\n     * Provides a way of locating callbacks which may have been specified as the _name_ of a function\n     * and optionally adds scope resolution.\n     *\n     * For example, if the callback is specified as a string, then if it is prefixed with `'this.'`\n     * then the function is resolved in this object. This is useful when configuring listeners\n     * at the class level.\n     *\n     * If the callback name is prefixed with `'up.'` then the ownership hierarchy is queried\n     * using the `owner` property until an object with the named function is present, then the\n     * named function is called upon that object.\n     * @param {String|Function} handler The function to call, or the name of the function to call.\n     * @param {Object} thisObj The `this` object of the function.\n     * @param {Boolean} [enforceCallability = true] Pass `false` if the function may not exist, and a null return value is acceptable.\n     * @returns {Object} `{ handler, thisObj }`\n     * @category Misc\n     */\n    resolveCallback(handler, thisObj = this, enforceCallability = true) {\n        // It's a string, we find it in its own thisObj\n        if (handler?.substring) {\n            if (handler.endsWith('?')) {\n                enforceCallability = false;\n                handler = handler.substring(0, handler.length - 1);\n            }\n            if (handler.startsWith('up.')) {\n                handler = handler.substring(3);\n                // Empty loop until we find the function owner\n                for (thisObj = this.owner; thisObj && !thisObj[handler]; thisObj = thisObj.owner);\n                if (!thisObj) {\n                    return;\n                }\n            }\n            else if (handler.startsWith('this.')) {\n                handler = handler.substring(5);\n                thisObj = this;\n            }\n            if (!thisObj || !(thisObj instanceof Object)) {\n                return;\n            }\n            handler = thisObj[handler];\n        }\n        // Any other type than string or function results in unresolved callback\n        if (typeof handler === 'function') {\n            return { handler, thisObj };\n        }\n        if (enforceCallability) {\n            throw new Error(`No method named ${handler} on ${thisObj.$$name || 'thisObj object'}`);\n        }\n    }\n    bindCallback(inHandler, inThisObj = this) {\n        if (inHandler) {\n            const { handler, thisObj } = this.resolveCallback(inHandler, inThisObj);\n            if (handler) {\n                return handler.bind(thisObj);\n            }\n        }\n    }\n    /**\n     * Delays the execution of the passed function by the passed time quantum, or if the time is omitted\n     * or not a number, delays until the next animation frame. Note that this will use\n     * {@link Core.mixin.Delayable#function-setTimeout} || {@link Core.mixin.Delayable#function-requestAnimationFrame}\n     * if this class mixes in `Delayable`, otherwise it uses the global methods. The function will\n     * be called using `this` object as its execution scope.\n     * @param {Function} fn The function to call on a delay.\n     * @param {Number} [delay] The number of milliseconds to delay.\n     * @param {String} [name] The name of delay\n     * @returns {Number} The created timeout id.\n     * @private\n     */\n    delay(fn, delay, name = fn.name || fn) {\n        // Force scope on the fn if we are not a Delayable\n        fn = this.setTimeout ? fn : fn.bind(this);\n        const invoker = this.setTimeout ? this : globalThis;\n        return invoker[typeof delay === 'number' ? 'setTimeout' : 'requestAnimationFrame'](fn, delay, name);\n    }\n    /**\n     * Classes implement this method to provide custom cleanup logic before calling `super.doDestroy()`. The general\n     * pattern is as follows:\n     *\n     * ```javascript\n     *  class Foo extends Base {\n     *      doDestroy() {\n     *          // perform custom cleanup\n     *\n     *          super.doDestroy();\n     *      }\n     *  }\n     * ```\n     *\n     * This method is called by {@link #function-destroy} which also prevents multiple calls from reaching `doDestroy`.\n     * Prior to calling `doDestroy`, {@link #property-isDestroying} is set to `true`. Upon return, the object is fully\n     * destructed and {@link #property-isDestroyed} is set to `true`.\n     *\n     * Do not call this method directly. Instead call {@link #function-destroy}.\n     * @category Lifecycle\n     */\n    doDestroy() {\n        const\n            me = this,\n            { nullify } = me.$meta;\n        if (nullify) {\n            for (let i = 0; i < nullify.length; ++i) {\n                if (me[nullify[i].field] != null) {     // if backing property is null/undefined then skip\n                    me[nullify[i].name] = null;         // else, call setter to run through change/update\n                }\n            }\n        }\n    }\n    /**\n     * Destroys the named properties if they have been initialized, and if they have a `destroy` method.\n     * Deletes the property from this object. For example:\n     *\n     *      this.destroyProperties('store', 'resourceStore', 'eventStore', 'dependencyStore', 'assignmentStore');\n     *\n     * @param {String} properties The names of the properties to destroy.\n     * @internal\n     * @category Lifecycle\n     */\n    destroyProperties(...properties) {\n        const me = this;\n        let key;\n        for (key of properties) {\n            // If the value has *not* been pulled in from the configuration object yet\n            // we must not try to access it, as that will cause the property to be initialized.\n            if (key in me && (!me[configuringSymbol] || !me[configuringSymbol][key])) {\n                me[key]?.destroy?.();\n                delete me[key];\n            }\n        }\n    }\n    /**\n     * Called by the Base constructor to apply configs to this instance. This must not be called.\n     * @param {Object} config The configuration object from which instance properties are initialized.\n     * @private\n     * @category Lifecycle\n     */\n    configure(config = {}) {\n        const\n            me                  = this,\n            meta                = me.$meta,\n            { beforeConfigure } = config,\n            configs             = meta.configs,\n            fullConfig          = me.getDefaultConfiguration();\n        let cfg, key, value;\n        me.initialConfig = config;\n        // Important flag for setters to know whether they are being called during\n        // configuration when this object is not fully alive, or whether it's being reconfigured.\n        me.isConfiguring = true;\n        // Assign any instance properties declared by the class.\n        Object.assign(me, me.getProperties());\n        // Apply configuration to default from class definition. This is safe because it's either chained from or a\n        // fork of the class values.\n        for (key in config) {\n            value = config[key];\n            cfg   = configs[key];\n            fullConfig[key] = cfg ? cfg.merge(value, fullConfig[key], null, meta) : value;\n        }\n        if (beforeConfigure) {\n            delete fullConfig.beforeConfigure;\n            // noinspection JSValidateTypes\n            beforeConfigure(me, fullConfig);\n        }\n        // Cache me.config for use by get config.\n        me.setConfig(me[originalConfigSymbol] = fullConfig, true);\n        me.isConfiguring = false;\n    }\n    /**\n     * Returns the value of the specified config property. This is a method to allow\n     * property getters to be explicitly called in a way that does not get optimized out.\n     *\n     * The following triggers the getter call, but optimizers will remove it:\n     *\n     *      inst.foo;   // also raises \"expression has no side-effects\" warning\n     *\n     * Instead, do the following to trigger a getter:\n     *\n     *      inst.getConfig('foo');\n     *\n     * @param {String} name\n     * @internal\n     * @category Configuration\n     */\n    getConfig(name) {\n        return this[name];\n    }\n    /**\n     * Sets configuration options this object with all the properties passed in the parameter object.\n     * Timing is taken care of. If the setter of one config is called first, and references\n     * the value of another config which has not yet been set, that config will be set just\n     * in time, and the *new* value will be used.\n     * @param {Object} config An object containing configurations to change.\n     * @category Lifecycle\n     */\n    setConfig(config, isConstructing) {\n        const\n            me             = this,\n            wasConfiguring = me[configuringSymbol],\n            configDone     = wasConfiguring ? me.configDone : (me.configDone = {}),\n            configs        = me.$meta.configs;\n        let cfg, key;\n        me[instancePropertiesSymbol] = {};\n        // Cache configuration for use by injected property initializers.\n        me[configuringSymbol] = wasConfiguring ? Object.setPrototypeOf(Object.assign({}, config), wasConfiguring) : config;\n        // For each incoming non-null configuration, create a temporary getter which will\n        // pull the value in from the initialConfig so that it doesn't matter in\n        // which order properties are set. You can access any property at any time.\n        for (key in config) {\n            // Don't default null configs in unless it's a direct property of the\n            // the passed configuration. When used at construct time, defaultConfigs\n            // will be prototype-chained onto the config.\n            if (config[key] != null || hasOwn(config, key)) {\n                cfg = configs[key] || Config.get(key);\n                cfg.defineInitter(me, config[key]);\n                if (!isConstructing) {\n                    configDone[key] = false;\n                }\n                // else if (cfg.lazy) {\n                //     // This was done originally to prevent our for-loop below from poking the value on the instance\n                //     // at this stage. It was removed since it confused triggerConfig, and it just isn't true that the\n                //     // lazy config is done...\n                //     configDone[key] = true;\n                // }\n            }\n            else {\n                configDone[key] = true;\n            }\n        }\n        if (isConstructing) {\n            me.startConfigure(config);\n        }\n        // Set all our properties from the config object.\n        // If one of the properties needs to access a property that has not\n        // yet been set, the above temporary property will pull it through.\n        // Can't use Object.assign because that only uses own properties.\n        // config value blocks are prototype chained subclass->superclass\n        for (key in config) {\n            // Only push the value through if the property initializer is still present.\n            // If it gets triggered to pull the configuration value in, it deleted itself.\n            if (!configDone[key] && !configs[key]?.lazy) {\n                me[key] = config[key];\n            }\n        }\n        if (wasConfiguring) {\n            me[configuringSymbol] = wasConfiguring;\n        }\n        else {\n            delete me[configuringSymbol];\n        }\n        if (isConstructing) {\n            me.finishConfigure(config);\n        }\n        return me;\n    }\n    /**\n     * Returns `true` if this instance has a non-null value for the specified config. This will not activate a lazy\n     * config.\n     *\n     * @param {String} name The name of the config property.\n     * @returns {Boolean}\n     * @internal\n     */\n    hasConfig(name) {\n        const\n            me     = this,\n            config = me[configuringSymbol];\n        return Boolean(\n            (me['_' + name] != null)                 ||     // value has been assigned to backing property\n            me[lazyConfigsSymbol]?.get(name) != null ||     // a lazy value is pending\n            (\n                // config value has not been assigned but will be\n                !me.configDone[name] &&\n                config && (config[name] != null || hasOwn(config, name))\n            )\n        );\n    }\n    /**\n     * Returns the value of an uningested config *without* ingesting the config or transforming\n     * it from its raw value using its `changeXxxxx` method.\n     *\n     * @param {String} name The name of the config property.\n     * @returns {*} The raw incoming config value.\n     * @internal\n     */\n    peekConfig(name) {\n        const\n            me             = this,\n            lazyConfig     = me[lazyConfigsSymbol],\n            config         = me[configuringSymbol];\n        // It's waiting in the lazy configs\n        if (lazyConfig?.has(name)) {\n            return lazyConfig.get(name);\n        }\n        if (config && (name in config)) {\n            // It's been read in, so use the current value\n            if (me.configDone[name]) {\n                return me[name];\n            }\n            if (config[name] != null || hasOwn(config, name)) {\n                return config[name];\n            }\n        }\n    }\n    /**\n     * Ensures that the specified config is initialized if it is needed. If there is a config value specified, and it\n     * was initialized by this call, this method returns `true`. If there was a config value specified, and it was\n     * already initialized, this method returns `false`. If there was no value specified for the given config, this\n     * method returns `null`.\n     *\n     * This is not the same as just reading the property, because some property getters exist that do not actually just\n     * read the config value back, but instead produce some result. Reading such properties to incidentally trigger a\n     * possible config initializer can lead to incorrect results. For example, the Combo items config.\n     *\n     * @param {String} name The name of the config property.\n     * @returns {Boolean}\n     * @internal\n     */\n    triggerConfig(name) {\n        const\n            me             = this,\n            { configDone } = me,\n            lazyConfig     = me[lazyConfigsSymbol],\n            config         = me[configuringSymbol],\n            triggered      = (lazyConfig?.has(name) || (config && (config[name] != null || hasOwn(config, name))))\n                ? !configDone[name] : null;\n        if (triggered) {\n            me.getConfig(name);\n        }\n        return triggered;\n    }\n    /**\n     * This call will activate any pending {@link Core.Config#config-lazy} configs that were assigned a string value\n     * equal to the `group` parameter.\n     *\n     * @param {String} group The config property group as defined by a matching {@link Core.Config#config-lazy} value.\n     * @returns {String[]} The names of any configs triggered by this call or `null` if no configs were triggered.\n     * @internal\n     */\n    triggerConfigs(group) {\n        const\n            me          = this,\n            configs     = me.$meta.configs,\n            lazyConfigs = me[lazyConfigsSymbol],\n            triggered   = lazyConfigs ? [...lazyConfigs.keys()].filter(k => configs[k].lazy === group) : emptyArray;\n        for (const key of triggered) {\n            me.triggerConfig(key);\n        }\n        return triggered.length ? triggered : null;\n    }\n    onConfigChange() {} // declared above because lint/IDE get angry about not declaring the args...\n    /**\n     * This method is called when any config changes.\n     * @param {Object} info Object containing information regarding the config change.\n     * @param {String} info.name The name of the config that changed.\n     * @param {*} info.value The new value of the config.\n     * @param {*} info.was The previous value of the config.\n     * @param {Core.Config} info.config The `Config` object for the changed config property.\n     * @method onConfigChange\n     * @internal\n     * @category Configuration\n     */\n    /**\n     * Returns a *copy* of the full configuration which was used to configure this object.\n     * @property {Object}\n     * @category Lifecycle\n     * @readonly\n     */\n    get config() {\n        const\n            result   = {},\n            myConfig = this[originalConfigSymbol];\n        // The configuration was created as a prototype chain of the class hierarchy's\n        // defaultConfig values hanging off a copy of the initialConfig object, so\n        // we must loop and copy since Object.assign only copies own properties.\n        for (const key in myConfig) {\n            result[key] = myConfig[key];\n        }\n        return result;\n    }\n    // region Extract config\n    static processConfigValue(currentValue, options) {\n        if (currentValue === globalThis) {\n            return globalThis;\n        }\n        else if (Array.isArray(currentValue)) {\n            return currentValue.map(v => Base.processConfigValue(v, options));\n        }\n        // Not using isBase to avoid classes (modelClass for example)\n        else if (currentValue instanceof Base) {\n            if (options.visited.has(currentValue)) {\n                return;\n            }\n            return currentValue.getCurrentConfig(options);\n        }\n        // appendTo, floatRoot etc\n        else if (currentValue instanceof HTMLElement || currentValue instanceof DocumentFragment) {\n            return null;\n        }\n        // Go deeply into objects, might have instances of our classes in them\n        else if (Objects.isObject(currentValue)) {\n            const result = {};\n            for (const key in currentValue) {\n                // Only step \"down\", not \"up\"\n                if (key !== 'owner') {\n                    result[key] = Base.processConfigValue(currentValue[key], options);\n                }\n            }\n            return result;\n        }\n        return currentValue;\n    };\n    // Recursively get the value of a config. Only intended to be called by getCurrentConfig()\n    getConfigValue(name, options) {\n        const\n            me = this,\n            lazyConfigs = me[lazyConfigsSymbol];\n        // Do not trigger lazy configs\n        if (!me.$meta.configs[name]?.lazy) {\n            return Base.processConfigValue(me[name], options);\n        }\n        // Instead pull their initial config in\n        if (lazyConfigs?.has(name)) {\n            return Base.processConfigValue(lazyConfigs.get(name), options);\n        }\n    }\n    // Allows removing / adding configs before values are extracted\n    preProcessCurrentConfigs() {}\n    // Extract the current values for all initially used configs, in a format that can be used to create a new instance.\n    // Not intended to be called by any other code than getConfigString()\n    getCurrentConfig(options = { }) {\n        const\n            me      = this,\n            configs = options.configs === 'all' ? me.config : Objects.clone(me.initialConfig),\n            visited = options.visited || (options.visited = new Set()),\n            depth   = options.depth || (options.depth = 0),\n            result  = {};\n        if (visited.has(me)) {\n            return undefined;\n        }\n        visited.add(me);\n        this.preProcessCurrentConfigs(configs);\n        for (const name in configs) {\n            const value = me.getConfigValue(name, { ...options, depth : depth + 1 });\n            if (value !== undefined) {\n                result[name] = value;\n            }\n        }\n        return result;\n    }\n    // Extract the current values for all initially used configs and convert them to a JavaScript string\n    getConfigString(options = {}) {\n        return StringHelper.toJavaScriptString(this.getCurrentConfig(options));\n    }\n    // Experimental helper function, extracts the currently used configs and wraps them as an app, returning code as a\n    // string.\n    //\n    // This function is intended to simplify creating test cases for issue reporting on Bryntum's support forum.\n    //\n    getTestCase(options = {}) {\n        //<remove-on-lwc-release>\n        const Product = this.isGantt ? 'Gantt' : this.isSchedulerPro ? 'SchedulerPro' : this.isCalendar ? 'Calendar' : this.isScheduler ? 'Scheduler' : this.isGrid ? 'Grid' : this.isTaskBoard ? 'TaskBoard' : null;\n        if (Product) {\n            const\n                product    = Product.toLowerCase(),\n                // bundlePath = `https://bryntum.com/dist/${product}/build/${product}.module.js`,\n                bundlePath = `../../build/${product}.module.js`;\n            let preamble, postamble;\n            if (options.import === 'static') {\n                preamble =\n                    `import * as module from \"${bundlePath}\";` +\n                    'Object.assign(window, module);'; // for (const c in module) window[c] = module[c];\n                postamble = '';\n            }\n            else {\n                preamble = `import(\"${bundlePath}\").then(module => { Object.assign(window, module);\\n`;\n                postamble = '});';\n            }\n            const version = VersionHelper.getVersion(product);\n            if (version) {\n                preamble += `\\nconsole.log('${Product} ${version}');\\n`;\n            }\n            // De-indented on purpose\n            return `${preamble}      \\nconst ${product} = new ${Product}(${this.getConfigString(options)});\\n${postamble}`;\n        }\n        //</remove-on-lwc-release>\n    }\n    /**\n     * Experimental helper function, extracts the currently used configs and wraps them as an app, downloading the\n     * resulting JS file.\n     *\n     * This function is intended to simplify creating test cases for issue reporting on Bryntum's support forum.\n     * @category Misc\n     */\n    downloadTestCase(options = {}) {\n        options.output = 'return';\n        const app = this.getTestCase(options);\n        BrowserHelper.download(`app.js`, 'data:application/javascript;charset=utf-8,' + escape(app));\n    }\n    //endregion\n    /**\n     * Registers this class type with its Factory\n     * @category Misc\n     */\n    static initClass() {\n        return this.$meta.class;\n    }\n    /**\n     * The class's {@link #property-$meta-static meta} object.\n     * @member {Object} $meta\n     * @internal\n     * @category Misc\n     */\n    /**\n     * An object owned by this class that does not share properties with its super class.\n     *\n     * This object may contain other properties which are added as needed and are not documented here.\n     *\n     * @property {Object} $meta The class meta object.\n     * @property {Function} $meta.class The class constructor that owns the meta object.\n     * @property {Object} $meta.super The `$meta` object for the super class. This is `null` for `Base`.\n     * @property {Object} $meta.config The object holding the default configuration values for this class.\n     * @property {Object} $meta.configs An object keyed by config name that holds the defined configs for the class.\n     * The value of each property is a {@link Core/Config} instance.\n     * @property {Boolean} $meta.forkConfigs This will be `true` if the default configuration values for this class\n     * (in the `config` property of the meta object) must be forked to avoid object sharing, or if the object can be\n     * passed to `Object.create()` for efficiency.\n     * @property {Function[]} $meta.hierarchy The array of classes in the ancestry of this class. This will start with\n     * `Base` at index 0 and ends with this class.\n     * @property {Function[]} $meta.properties The array of classes that define a \"static get properties()\" getter.\n     * @internal\n     * @static\n     * @category Misc\n     */\n    static get $meta() {\n        const me = this;\n        let meta = me[metaSymbol];\n        if (!hasOwn(me, metaSymbol)) {\n            me[metaSymbol] = meta = newMeta();\n            meta.class = me;\n            me.setupClass(meta);\n        }\n        return meta;\n    }\n    /**\n     * This optional class method is called when a class is mixed in using the {@link #function-mixin-static mixin()}\n     * method.\n     * @internal\n     */\n    static onClassMixedIn() {\n        // empty\n    }\n    /**\n     * Returns the merge of the `baseConfig` and `config` config objects based on the configs defined by this class.\n     * @param {Object} baseConfig The base config or defaults.\n     * @param {...Object} configs One or more config objects that takes priority over `baseConfig`.\n     * @returns {Object}\n     * @internal\n     */\n    static mergeConfigs(baseConfig, ...configs) {\n        const\n            classConfigs = this.$meta.configs,\n            result       = Objects.clone(baseConfig) || {};\n        let config, i, key, value;\n        for (i = 0; i < configs.length; ++i) {\n            config = configs[i];\n            if (config) {\n                for (key in config) {\n                    value = config[key];\n                    if (classConfigs[key]) {\n                        value = classConfigs[key].merge(value, result[key]);\n                    }\n                    else if (result[key] && value) {\n                        value = Config.merge(value, result[key]);\n                    }\n                    result[key] = value;\n                }\n            }\n        }\n        return result;\n    }\n    /**\n     * Applies one or more `mixins` to this class and returns the produced class constructor.\n     *\n     * For example, instead of writing this:\n     * ```\n     *  class A extends Delayable(Events(Localizable(Base))) {\n     *      // ...\n     *  }\n     * ```\n     *\n     * Using this method, one would write this:\n     * ```\n     *  class A extends Base.mixin(Localizable, Events, Delayable) {\n     *      // ...\n     *  }\n     * ```\n     * If one of the mixins specified has already been mixed into the class, it will be ignored and not mixed in a\n     * second time.\n     * @param {...Function} mixins\n     * @returns {Function}\n     * @category Misc\n     */\n    static mixin(...mixins) {\n        // Starting w/the first class C = this\n        let C = this,\n            i;\n        // wrap each class C using mixins[i] to produce the next class\n        for (i = 0; i < mixins.length; ++i) {\n            const\n                mixin = mixins[i],\n                // Grab or create a unique Symbol for this mixin so we can tell if we've already mixed it in\n                tag   = mixin[mixinTagSymbol] || (mixin[mixinTagSymbol] = Symbol('mixinTag'));\n            if (C[tag]) {\n                continue;\n            }\n            C      = mixin(C);\n            C[tag] = true;  // properties on the constructor are inherited to subclass constructors...\n            if (hasOwn(C, 'onClassMixedIn')) {\n                C.onClassMixedIn();\n            }\n        }\n        return C;\n    }\n    /**\n     * This method is called only once for any class. This can occur when the first instance is created or when the\n     * `$meta` object is first requested.\n     * @param {Object} meta The `$meta` object for the class.\n     * @internal\n     * @category Misc\n     */\n    static setupClass(meta) {\n        const\n            cls   = meta.class,\n            // Trigger setupClass on the super class (if it has yet to happen):\n            base  = getPrototypeOf(cls).$meta,\n            name  = cls.$$name,\n            names = base.names,\n            proto = cls.prototype;\n        defineProperty(proto, '$meta', {\n            value : meta\n        });\n        Object.assign(meta, {\n            super       : base,\n            config      : Object.create(base.config),\n            configs     : Object.create(base.configs),\n            declarables : base.declarables,\n            forkConfigs : base.forkConfigs,\n            hierarchy   : Object.freeze([...base.hierarchy, cls]),\n            names       : names.includes(name) ? names : Object.freeze([...names, name]),\n            properties  : base.properties,\n            nullify     : base.nullify?.slice()\n        });\n        if (names !== meta.names) {\n            const\n                isName = `is${name}`,\n                defineIsProperty = obj => {\n                    if (!hasOwn(obj, isName)) {\n                        defineProperty(obj, isName,  {\n                            get() {\n                                // This check is intended to verify correct class name for minified packages\n                                if (!hasOwn(typeof obj === 'object' ? obj.constructor : obj, '$name')) {\n                                    console.warn(\n                                        `$name static property or getter required for class ${name} to provide class name for minified sources.` +\n                                        (VersionHelper.isTestEnv ? '' : '\\nhttps://bryntum.com/products/grid/docs/api/Core/widget/Widget#property-$name-static')\n                                    );\n                                }\n                                return true;\n                            }\n                        });\n                    }\n                };\n            defineIsProperty(proto);\n            defineIsProperty(cls);\n        }\n        // NOTE: we always use meta.declarables because setupDeclarable() can replace the array on the meta object\n        // when new declarable properties are added...\n        for (let decl, setupName, i = 0; i < meta.declarables.length; ++i) {\n            decl = meta.declarables[i];\n            if (hasOwn(cls, decl)) {\n                setupName = setupNames[decl] || (setupNames[decl] = `setup${StringHelper.capitalize(decl)}`);\n                cls[setupName](cls, meta);\n            }\n        }\n        /*  Add slash to the front of this line to enable the diagnostic block:\n        /**/\n    }\n    /**\n     * This method is called as part of `setupClass()`. It will process the `configurable()` return object and the\n     * `defaultConfig` return object.\n     * @param {Object} meta The `meta` object for this class.\n     * @param {Object} configs The config definition object.\n     * @param {Boolean} simple `true` when processing `defaultConfig` and `false` when processing `configurable`.\n     * @private\n     * @category Configuration\n     */\n    static setupConfigs(meta, configs, simple) {\n        const\n            classConfigValues = meta.config,\n            classConfigs      = meta.configs,\n            cls               = meta.class,\n            superMeta         = meta.super;\n        let { nullify } = meta,\n            cfg, defaultValue, options, setDefault, value, wasNullify;\n        for (const name in configs) {\n            value = configs[name];\n            if (simple) {\n                // Using \"defaultConfig\"\n                if (!(cfg = classConfigs[name])) {\n                    cfg = Config.get(name, defaultConfigOptions);\n                }\n                else {\n                    // The property may be declared in a base class using configurable(), so it may have special\n                    // merge processing:\n                    value = cfg.merge(value, classConfigValues[name], meta, superMeta);\n                }\n                /*  Add slash to the front of this line to enable the diagnostic block:\n                /**/\n            }\n            else {\n                // Using \"configurable\"\n                defaultValue = options = setDefault = undefined;\n                if (value && typeof value === 'object' && '$config' in value) {\n                    options = value.$config;\n                    if (options && !Objects.isObject(options)) {\n                        options = Objects.createTruthyKeys(options);\n                    }\n                    setDefault = 'default' in value;\n                    defaultValue = setDefault ? value.default : defaultValue;\n                    value = value.value;\n                }\n                if (!(cfg = classConfigs[name])) {\n                    cfg = Config.get(name, options);\n                    cfg.define(cls.prototype);\n                    setDefault = !(cfg.field in cls.prototype);  // reduce object shape changes (helps JIT)\n                    wasNullify = false;\n                }\n                else {\n                    wasNullify = cfg.nullify;\n                    if (options) {\n                        // Defined by a base class, but maybe being adjusted by derived.\n                        cfg = cfg.extend(options);\n                        // In the future, we may need to redefine the property here if options affect the descriptor (such\n                        // as event firing)\n                    }\n                    value = cfg.merge(value, classConfigValues[name], meta, superMeta);\n                }\n                if (setDefault) {\n                    cfg.setDefault(cls, defaultValue);\n                }\n                if (cfg.nullify && !wasNullify) {\n                    (nullify || (nullify = (meta.nullify || (meta.nullify = [])))).push(cfg);\n                }\n            }\n            // If any default properties are *mutable* Objects or Array we need to clone them.\n            // so that instances do not share configured values.\n            if (value && (Objects.isObject(value) || Array.isArray(value)) && !Object.isFrozen(value)) {\n                meta.forkConfigs = true;\n            }\n            classConfigs[name]      = cfg;\n            classConfigValues[name] = value;\n        }\n    }\n    static setupConfigurable(cls, meta) {\n        cls.setupConfigs(meta, cls.configurable, false);\n    }\n    static setupDefaultConfig(cls, meta) {\n        cls.setupConfigs(meta, cls.defaultConfig, true);\n    }\n    static setupDeclarable(cls, meta) {\n        const declarable = cls.declarable;\n        let all = meta.declarables,\n            forked, i;\n        for (i = 0; i < declarable.length; ++i) {\n            if (!all.includes(declarable[i])) {\n                if (!forked) {\n                    meta.declarables = forked = all = all.slice();\n                }\n                all.push(declarable[i]);\n            }\n        }\n    }\n    static setupProperties(cls, meta) {\n        meta.properties = meta.super.properties.slice();\n        meta.properties.push(cls);\n        Object.freeze(meta.properties);\n    }\n    static setupPrototypeProperties(cls) {\n        Object.assign(cls.prototype, cls.prototypeProperties);\n    }\n    /**\n     * Gets the full {@link #property-defaultConfig-static} block for this object's entire inheritance chain\n     * all the way up to but not including {@link Core.Base}\n     * @returns {Object} All default config values for this class.\n     * @private\n     * @category Configuration\n     */\n    getDefaultConfiguration() {\n        return this.constructor.getDefaultConfiguration();\n    }\n    /**\n     * Gets the full {@link #property-defaultConfig-static} block for the entire inheritance chain for this class\n     * all the way up to but not including {@link Core.Base}\n     * @returns {Object} All default config values for this class.\n     * @private\n     * @category Configuration\n     */\n    static getDefaultConfiguration() {\n        const\n            meta   = this.$meta,\n            config = meta.forkConfigs ? Base.fork(meta.config) : Object.create(meta.config);\n        if (VersionHelper.isTestEnv && BrowserHelper.isBrowserEnv &&\n            config.testConfig && globalThis.__applyTestConfigs) {\n            for (const o in config.testConfig) {\n                config[o] = config.testConfig[o];\n            }\n        }\n        return config;\n    }\n    static fork(obj) {\n        let ret = obj,\n            key, value;\n        if (obj && Objects.isObject(obj) && !Object.isFrozen(obj)) {\n            ret = Object.create(obj);\n            for (key in obj) {\n                value = obj[key];\n                if (value) {\n                    if (Objects.isObject(value)) {\n                        ret[key] = Base.fork(value);\n                    }\n                    else if (Array.isArray(value)) {\n                        ret[key] = value.slice();\n                    }\n                }\n            }\n        }\n        return ret;\n    }\n    /**\n     * Gets the full {@link #property-properties-static} block for this class's entire inheritance chain\n     * all the way up to but not including {@link Core.Base}\n     * @returns {Object} All default config values for this class.\n     * @private\n     * @category Configuration\n     */\n    getProperties() {\n        const\n            // The meta.properties array is an array of classes that define \"static get properties()\"\n            hierarchy = this.$meta.properties,\n            result    = {};\n        for (let i = 0; i < hierarchy.length; i++) {\n            // Gather the class result in top-down order so that subclass properties override superclass properties\n            Object.assign(result, hierarchy[i].properties);\n        }\n        return result;\n    }\n    static get superclass() {\n        return getPrototypeOf(this);\n    }\n    /**\n     * Used by the Widget and GridFeatureManager class internally. Returns the class hierarchy of this object\n     * starting from the `topClass` class (which defaults to `Base`).\n     *\n     * For example `classHierarchy(Widget)` on a Combo would yield `[Widget, Field, TextField, PickerField, Combo]`\n     * @param {Function} [topClass] The topmost class constructor to start from.\n     * @returns {Function[]} The class hierarchy of this instance.\n     * @private\n     * @category Configuration\n     */\n    classHierarchy(topClass) {\n        const\n            hierarchy = this.$meta.hierarchy,\n            index     = topClass ? hierarchy.indexOf(topClass) : 0;\n        return (index > 0) ? hierarchy.slice(index) : hierarchy;\n    }\n    /**\n     * Checks if an obj is of type using object's $$name property and doing string comparison of the property with the\n     * type parameter.\n     *\n     * @param {String} type\n     * @returns {Boolean}\n     * @category Misc\n     */\n    static isOfTypeName(type) {\n        return this.$meta.names.includes(type);\n    }\n    /**\n     * Removes all event listeners that were registered with the given `name`.\n     * @param {String|Symbol} name The name of the event listeners to be removed.\n     * @category Events\n     */\n    detachListeners(name) {\n        let detachers = this.$detachers;\n        detachers = detachers?.[name];\n        if (detachers) {\n            while (detachers.length) {\n                detachers.pop()();\n            }\n        }\n    }\n    /**\n     * Tracks a detacher function for the specified listener name.\n     * @param {String} name The name assigned to the associated listeners.\n     * @param {Function} detacher The detacher function.\n     * @private\n     */\n    trackDetacher(name, detacher) {\n        const\n            detachers = this.$detachers || (this.$detachers = {}),\n            bucket    = detachers[name] || (detachers[name] = []);\n        bucket.push(detacher);\n    }\n    /**\n     * Removes all detacher functions for the specified `Events` object. This is called\n     * by the `removeAllListeners` method on that object which is typically called by its\n     * `destroy` invocation.\n     * @param {Core.mixin.Events} eventer The `Events` instance to untrack.\n     * @private\n     */\n    untrackDetachers(eventer) {\n        const detachers = this.$detachers;\n        if (detachers) {\n            for (const name in detachers) {\n                const bucket = detachers[name];\n                for (let i = bucket.length; i-- > 0; /* empty */) {\n                    if (bucket[i].eventer === eventer) {\n                        bucket.splice(i, 1);\n                    }\n                }\n            }\n        }\n    }\n}\nconst proto = Base.prototype;\n// Informs the standard config setter there is no need to call this fn:\nproto.onConfigChange.$nullFn = emptyFn.$nullFn = true;\nBase[metaSymbol] = proto.$meta = newMeta({\n    class       : Base,\n    config      : Object.freeze({}),\n    configs     : Object.create(null),\n    declarables : Base.declarable,\n    forkConfigs : false,\n    hierarchy   : Object.freeze([Base]),\n    names       : Object.freeze(['Base']),\n    nullify     : null,\n    properties  : Object.freeze([]),\n    super       : null\n});\n// Avoid some object shape changes:\nObject.assign(proto, {\n    $detachers : null,\n    configObserver : null,\n    /**\n     * This property is set to `true` before the `constructor` returns.\n     * @member {Boolean}\n     * @readonly\n     * @category Lifecycle\n     */\n    isConstructing : true,\n    /**\n     * This property is set to `true` by {@link #function-destroy} after the {@link #function-doDestroy} method returns.\n     * It is also one of the few properties that remains on the object after returning from `destroy()`. This property\n     * is often checked in code paths that may encounter a destroyed object (like some event handlers) or in the\n     * destruction path during cleanup.\n     * @member {Boolean}\n     * @readonly\n     * @category Lifecycle\n     */\n    isDestroyed : false,\n    /**\n     * This property is set to `true` on entry to the {@link #function-destroy} method. It remains on the objects after\n     * returning from `destroy()`. If {@link #property-isDestroyed} is `true`, this property will also be `true`, so\n     * there is no need to test for both (for example, `comp.isDestroying || comp.isDestroyed`).\n     * @member {Boolean}\n     * @readonly\n     * @category Lifecycle\n     */\n    isDestroying : false\n});\nBase.emptyFn = emptyFn;\nVersionHelper.setVersion('core', '5.3.7');\nBase._$name = 'Base';", "/**\n * @module Core/helper/AjaxHelper\n */\nimport Objects from './util/Objects.js';\n/**\n * Options for the requests. Please see\n * [fetch API](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch) for details\n *\n * To set default values for the options please use {@link #property-DEFAULT_FETCH_OPTIONS-static} property:\n *\n * ```javascript\n * // enable passing parameters in request body by default\n * AjaxHelper.DEFAULT_FETCH_OPTIONS = { addQueryParamsToBody : true };\n * ```\n *\n * @typedef {Object} FetchOptions\n * @property {'GET'|'POST'|'PUT'|'PATCH'|'DELETE'} [method] The request method, e.g., `GET`, `POST`\n * @property {Object} [queryParams] A key-value pair Object containing the params to add to the query string\n * @property {Object} [headers] Any headers you want to add to your request, contained within a `Headers` object or an\n * object literal with ByteString values\n * @property {Object} [body] Any body that you want to add to your request: this can be a `Blob`, `BufferSource`,\n * `FormData`, `URLSearchParams`, or `USVString` object. Note that a request using the `GET` or `HEAD` method cannot have a body.\n * @property {Boolean} [addQueryParamsToBody=false] Indicates whether `queryParams` should be passed in the request\n * body. Adding them to the body applies for `application/x-www-form-urlencoded` and `multipart/form-data`\n * content types only, so make sure to pass corresponding `Content-Type` header to `headers`.\n *\n * When the argument is `true` and:\n * - if `application/x-www-form-urlencoded` content-type header is passed\n *   the method will make a `URLSearchParams` instance with `queryParams` and set it as the request body.\n *   And if `body` already has a `URLSearchParams` instance provided the parameters will be set there.\n * - if `multipart/form-data` content-type header is passed\n *   the method will make a `FormData` instance with `queryParams` and set it as the request body.\n *   And if `body` already has a `FormData` instance provided the parameters will be set there.\n *\n * Otherwise, `queryParams` are added to the query string.\n * @property {'cors'|'no-cors'|'same-origin'} [mode] The mode you want to use for the request, e.g., `'cors'`, `'no-cors'`, or `'same-origin'`.\n * @property {'omit'|'same-origin'|'include'} [credentials] The request credentials you want to use for the request: `'omit'`, `'same-origin'`, or\n * `'include'`. To automatically send cookies for the current domain, this option must be provided\n * @property {Boolean} [parseJson] Specify `true` to parses the response and attach the resulting object to the\n * `Response` object as `parsedJson`\n */\nconst\n    paramValueRegExp = /^(\\w+)=(.*)$/,\n    parseParams      = function(paramString) {\n        const\n            result = {},\n            params = paramString.split('&');\n        // loop through each 'filter={\"field\":\"name\",\"operator\":\"=\",\"value\":\"Sweden\",\"caseSensitive\":true}' string\n        // So we cannot use .split('=')\n        for (const nameValuePair of params) {\n            const\n                [match, name, value] = paramValueRegExp.exec(nameValuePair),\n                decodedName          = decodeURIComponent(name),\n                decodedValue         = decodeURIComponent(value);\n            if (match) {\n                let paramValue = result[decodedName];\n                if (paramValue) {\n                    if (!Array.isArray(paramValue)) {\n                        paramValue = result[decodedName] = [paramValue];\n                    }\n                    paramValue.push(decodedValue);\n                }\n                else {\n                    result[decodedName] = decodedValue;\n                }\n            }\n        }\n        return result;\n    };\n/**\n * Simplifies Ajax requests. Uses fetch & promises.\n *\n * ```javascript\n * AjaxHelper.get('some-url').then(response => {\n *     // process request response here\n * });\n * ```\n *\n * Uploading file to server via FormData interface.\n * Please visit [FormData](https://developer.mozilla.org/en-US/docs/Web/API/FormData) for details.\n *\n * ```javascript\n * const formData = new FormData();\n * formData.append('file', 'fileNameToUpload');\n * AjaxHelper.post('file-upload-url', formData).then(response => {\n *     // process request response here\n * });\n * ```\n *\n */\nexport default class AjaxHelper {\n    /**\n     * Sets default options for {@link #function-fetch-static AjaxHelper#fetch()} calls. Please see\n     * {@link #typedef-FetchOptions} and\n     * [fetch API](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch) for details.\n     *\n     * ```javascript\n     * // default content-type for all requests will be \"application/json\"\n     * AjaxHelper.DEFAULT_FETCH_OPTIONS = {\n     *     headers : {\n     *         'content-type' : 'application/json'\n     *     }\n     * };\n     * ```\n     * @member {FetchOptions} DEFAULT_FETCH_OPTIONS\n     * @static\n     */\n    static DEFAULT_FETCH_OPTIONS = {};\n    /**\n     * Make a request (using GET) to the specified url.\n     * @param {String} url URL to `GET` from\n     * @param {FetchOptions} [options] The options for the `fetch` API\n     * @returns {Promise} The fetch Promise, which can be aborted by calling a special `abort` method\n     * @async\n     */\n    static get(url, options) {\n        return this.fetch(url, options);\n    }\n    /**\n     * POST data to the specified URL.\n     * @param {String} url URL to `POST` to\n     * @param {String|Object|FormData} payload The data to post. If an object is supplied, it will be stringified\n     * @param {FetchOptions} [options] The options for the `fetch` API\n     * @returns {Promise} The fetch Promise, which can be aborted by calling a special `abort` method\n     * @async\n     */\n    static post(url, payload, options = {}) {\n        if (!(payload instanceof FormData) && !(typeof payload === 'string')) {\n            payload = JSON.stringify(payload);\n            options.headers = options.headers || {};\n            options.headers['Content-Type'] = options.headers['Content-Type'] || 'application/json';\n        }\n        return this.fetch(url, Object.assign({\n            method : 'POST',\n            body   : payload\n        }, options));\n    }\n    /**\n     * Fetch the specified resource using the `fetch` API.\n     * @param {String} url URL to fetch from\n     * @param {FetchOptions} [options] The options for the `fetch` API\n     * @returns {Promise} The fetch Promise, which can be aborted by calling a special `abort` method\n     * @async\n     */\n    static fetch(url, options) {\n        let controller;\n        // inherit global options\n        options = Objects.merge({}, AjaxHelper.DEFAULT_FETCH_OPTIONS, options);\n        // AbortController is not supported by LockerService\n        // https://github.com/bryntum/support/issues/3689\n        if (typeof AbortController !== 'undefined') {\n            controller = options.abortController = new AbortController();\n            options.signal = controller.signal;\n        }\n        if (!('credentials' in options)) {\n            options.credentials = 'include';\n        }\n        if (options.queryParams) {\n            const params = Object.entries(options.queryParams);\n            if (params.length) {\n                let paramsAdded = false;\n                // for some content types we are going to add parameters to body (if that's not disabled)\n                if (options.headers && options.addQueryParamsToBody === true) {\n                    const contentType = new Headers(options.headers).get('Content-Type');\n                    let bodyClass;\n                    switch (contentType) {\n                        case 'application/x-www-form-urlencoded':\n                            bodyClass = URLSearchParams;\n                            break;\n                        case 'multipart/form-data':\n                            bodyClass = FormData;\n                            break;\n                    }\n                    // if that's one of supported content types\n                    if (bodyClass) {\n                        const body = options.body || (options.body = new bodyClass());\n                        // put parameters to body if it's of supported type\n                        if (body instanceof bodyClass) {\n                            params.forEach(([key, value]) => body.set(key, value));\n                            // remember parameters are already added\n                            paramsAdded = true;\n                        }\n                    }\n                }\n                // if parameters are not added yet append them to the query string\n                if (!paramsAdded) {\n                    url += (url.includes('?') ? '&' : '?') + params.map(([param, value]) =>\n                        `${param}=${encodeURIComponent(value)}`\n                    ).join('&');\n                }\n            }\n        }\n        // Promise that will be resolved either when network request is finished or when json is parsed\n        const promise = new Promise((resolve, reject) => {\n            fetch(url, options).then(\n                response => {\n                    if (options.parseJson) {\n                        response.json().then(json => {\n                            response.parsedJson = json;\n                            resolve(response);\n                        }).catch(error => {\n                            response.parsedJson = null;\n                            response.error = error;\n                            reject(response);\n                        });\n                    }\n                    else {\n                        resolve(response);\n                    }\n                }\n            ).catch(error => {\n                error.stack = promise.stack;\n                reject(error);\n            });\n        });\n        promise.stack = new Error().stack;\n        promise.abort = function() {\n            controller?.abort();\n        };\n        return promise;\n    }\n    /**\n     * Registers the passed URL to return the passed mocked up Fetch Response object to the\n     * AjaxHelper's promise resolve function.\n     * @param {String} url The url to return mock data for\n     * @param {Object|Function} response A mocked up Fetch Response object which must contain\n     * at least a `responseText` property, or a function to which the `url` and a `params` object\n     * and the `Fetch` `options` object is passed which returns that.\n     * @param {String} response.responseText The data to return.\n     * @param {Boolean} [response.synchronous] resolve the Promise immediately\n     * @param {Number} [response.delay=100] resolve the Promise after this number of milliseconds.\n     */\n    static mockUrl(url, response) {\n        const me = this;\n        (me.mockAjaxMap || (me.mockAjaxMap = {}))[url] = response;\n        // Inject the override into the AjaxHelper instance\n        if (!AjaxHelper.originalFetch) {\n            AjaxHelper.originalFetch = AjaxHelper.fetch;\n            AjaxHelper.fetch = me.mockAjaxFetch.bind(me);\n        }\n    }\n    static async mockAjaxFetch(url, options) {\n        const urlAndParams = url.split('?');\n        let result     = this.mockAjaxMap[urlAndParams[0]],\n            parsedJson = null;\n        if (result) {\n            if (typeof result === 'function') {\n                result = await result(urlAndParams[0], urlAndParams[1] && parseParams(urlAndParams[1]), options);\n            }\n            try {\n                parsedJson = options?.parseJson && JSON.parse(result.responseText);\n            }\n            catch (error) {\n                parsedJson   = null;\n                result.error = error;\n            }\n            result = Object.assign({\n                status     : 200,\n                ok         : true,\n                headers    : new Headers(),\n                statusText : 'OK',\n                url,\n                parsedJson,\n                text       : () => new Promise((resolve) => {\n                    resolve(result.responseText);\n                }),\n                json : () => new Promise((resolve) => {\n                    resolve(parsedJson);\n                })\n            }, result);\n            return new Promise(function(resolve, reject) {\n                if (result.synchronous) {\n                    resolve(result);\n                }\n                else {\n                    setTimeout(function() {\n                        resolve(result);\n                    }, ('delay' in result ? result.delay : 100));\n                }\n            });\n        }\n        else {\n            return AjaxHelper.originalFetch(url, options);\n        }\n    }\n}\nAjaxHelper._$name = 'AjaxHelper';", "/**\n * @module Core/helper/ArrayHelper\n */\n/**\n * Helper with useful functions for handling Arrays\n * @internal\n */\nexport default class ArrayHelper {\n    static clean(array) {\n        return array.reduce((res, item) => {\n            if (item !== null && item !== undefined && !(Array.isArray(item) && item.length === 0) && item !== '') res.push(item);\n            return res;\n        }, []);\n    }\n    /**\n     * Similar to [`Array.from()`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from)\n     * this method creates an array from an `iterable` object. Where `Array.from()` accepts a mapper function as the\n     * second argument, this method accepts a `filter` function as its second argument. If a mapper function is also\n     * needed, it can be passed as the third argument. Unlike `Array.from()`, if this method is passed `null`, it will\n     * return an empty array.\n     * @param {Array} iterable The iterable object to convert (must support `for-of` loop iteration).\n     * @param {Function} [filter] A function to apply to each item of the `iterable` which must return a truthy value\n     * to include that item in the resulting array.\n     * @param {Function} [map] A function to apply to each item of the `iterable` that returns the actual value to put\n     * into the returned array. If a `filter` is also supplied, this method is only called for those items that pass\n     * the filter test.\n     * @returns {Array}\n     */\n    static from(iterable, filter, map) {\n        const array = [];\n        if (iterable) {\n            for (const it of iterable) {\n                if (!filter || filter(it)) {\n                    array.push(map ? map(it) : it);\n                }\n            }\n        }\n        return array;\n    }\n    /**\n     * Remove one or more items from an array\n     * @param {Array} array Array to remove from\n     * @param {Object[]|Set} items One or more items to remove, or one Set containing items to remove\n     * @returns {Boolean} Returns true if any item was removed\n     */\n    static remove(array, ...items) {\n        let index,\n            item,\n            removed = false;\n        items = items[0] instanceof Set ? [...items[0]] : items;\n        for (let i = 0; i < items.length; i++) {\n            item = items[i];\n            if ((index = array.indexOf(item)) !== -1) {\n                array.splice(index, 1);\n                removed = true;\n            }\n        }\n        return removed;\n    }\n    /**\n     * Calculates the insertion index of a passed object into the passed Array according\n     * to the passed comparator function. Note that the passed Array *MUST* already be ordered.\n     * @param {Object} item The item to calculate the insertion index for.\n     * @param {Array} The array into which the item is to be inserted.\n     * @param {Function} comparatorFn The comparison function. Must return -1 or 0 or 1.\n     * @param {Object} comparatorFn.lhs The left object to compare.\n     * @param {Object} comparatorFn.rhs The right object to compare.\n     * @param {Number} index The possible correct index to try first before a binary\n     * search is instigated.\n     * @internal\n     */\n    static findInsertionIndex(item, array, comparatorFn = this.lexicalCompare, index) {\n        const len = array.length;\n        let beforeCheck, afterCheck;\n        if (index < len) {\n            beforeCheck = index > 0 ? comparatorFn(array[index - 1], item) : 0;\n            afterCheck = index < len - 1 ? comparatorFn(item, array[index]) : 0;\n            if (beforeCheck < 1 && afterCheck < 1) {\n                return index;\n            }\n        }\n        return this.binarySearch(array, item, comparatorFn);\n    }\n    /**\n     * Similar to the native `Array.find()` call, but this finds the *last* element in the array for which\n     * the passed function returns a truthy value.\n     * @param {Object[]} array The array to find in.\n     * @param {Function} fn The testing function.\n     * @param {Object} [thisObj] The scope (`this` reference) in which to call the function.\n     */\n    static findLast(array, fn, thisObj) {\n        for (let { length } = array, i = length - 1; i >= 0; i--) {\n            if (fn.call(thisObj, array[i], i, array)) {\n                return array[i];\n            }\n        }\n    }\n    /**\n     * This method returns the index that a given item would be inserted into the\n     * given (sorted) `array`. Note that the given `item` may or may not be in the\n     * array. This method will return the index of where the item *should* be.\n     *\n     * For example:\n     *\n     *      var array = [ 'A', 'D', 'G', 'K', 'O', 'R', 'X' ];\n     *      var index = ArrayHelper.binarySearch(array, 'E');\n     *\n     *      console.log('index: ' + index);\n     *      // logs \"index: 2\"\n     *\n     *      array.splice(index, 0, 'E');\n     *\n     *      console.log('array : ' + array.join(''));\n     *      // logs \"array: ADEGKORX\"\n     *\n     * @param {Object[]} array The array to search.\n     * @param {Object} item The item that you want to insert into the `array`.\n     * @param {Number} [begin=0] The first index in the `array` to consider.\n     * @param {Number} [end=array.length] The index that marks the end of the range\n     * to consider. The item at this index is *not* considered.\n     * @param {Function} [compareFn] The comparison function that matches the sort\n     * order of the `array`. The default `compareFn` compares items using less-than\n     * and greater-than operators.\n     * @returns {Number} The index for the given item in the given array based on\n     * the passed `compareFn`.\n     */\n    static binarySearch(array, item, begin = 0, end = array.length, compareFn = this.lexicalCompare) {\n        const length = array.length;\n        let middle, comparison;\n        if (begin instanceof Function) {\n            compareFn = begin;\n            begin = 0;\n        }\n        else if (end instanceof Function) {\n            compareFn = end;\n            end = length;\n        }\n        --end;\n        while (begin <= end) {\n            middle = (begin + end) >> 1;\n            comparison = compareFn(item, array[middle]);\n            if (comparison >= 0) {\n                begin = middle + 1;\n            }\n            else if (comparison < 0) {\n                end = middle - 1;\n            }\n        }\n        return begin;\n    }\n    magnitudeCompare(lhs, rhs) {\n        return (lhs < rhs) ? -1 : ((lhs > rhs) ? 1 : 0);\n    }\n    lexicalCompare(lhs, rhs) {\n        lhs = String(lhs);\n        rhs = String(rhs);\n        return (lhs < rhs) ? -1 : ((lhs > rhs) ? 1 : 0);\n    }\n    /**\n     * Similar to Array.prototype.fill(), but constructs a new array with the specified item count and fills it with\n     * clones of the supplied item.\n     * @param {Number} count Number of entries to create\n     * @param {Object|Array} itemOrArray Item or array of items to clone (uses object spread to create shallow clone)\n     * @param {Function} [fn] An optional function that is called for each item added, to allow processing\n     * @returns {Array} A new populated array\n     */\n    static fill(count, itemOrArray = {}, fn = null) {\n        const\n            result = [],\n            items  = Array.isArray(itemOrArray) ? itemOrArray : [itemOrArray];\n        for (let i = 0; i < count; i++) {\n            for (const item of items) {\n                // Using object spread here forces us to use more babel plugins and will make\n                // react_typescript demo very difficult to setup\n                const processedItem = Object.assign({}, item);\n                if (fn) {\n                    fn(processedItem, i);\n                }\n                result.push(processedItem);\n            }\n        }\n        return result;\n    }\n    /**\n     * Populates an array with the return value from `fn`.\n     * @param {Number} count Number of entries to create\n     * @param {Function} fn A function that is called `count` times, return value is added to array\n     * @param {Number} fn.index Current index in the array\n     * @privateparam {Boolean} [oneBased] Add 1 to the index before calling the fn (making it 1 based)\n     * @returns {Array} A new populated array\n     */\n    static populate(count, fn, oneBased = false) {\n        const items = [];\n        for (let i = 0; i < count; i++) {\n            items.push(fn(i + (oneBased ? 1 : 0)));\n        }\n        return items;\n    }\n    /**\n     * Pushes `item` on to the `array` if not already included\n     * @param {Array}  array Array to push to\n     * @param {...Object} items Item(s) to push if not already included\n     */\n    static include(array, ...items) {\n        for (const item of items) {\n            if (!array.includes(item)) {\n                array.push(item);\n            }\n        }\n    }\n    /**\n     * Returns a new array with the unique items from the supplied array.\n     * @param {Array} array Input array\n     * @returns {Array} New array with unique items\n     */\n    static unique(array) {\n        return [...new Set(array)];\n    }\n    // Kept for future reference : Wanted to create an indexer on Stores.\n    static allowNegative(array) {\n        // From https://github.com/sindresorhus/negative-array\n        return new Proxy(array, {\n            get(target, name, receiver) {\n                if (typeof name !== 'string') {\n                    return Reflect.get(target, name, receiver);\n                }\n                const index = Number(name);\n                if (Number.isNaN(index)) {\n                    return Reflect.get(target, name, receiver);\n                }\n                return target[index < 0 ? target.length + index : index];\n            },\n            set(target, name, value, receiver) {\n                if (typeof name !== 'string') {\n                    return Reflect.set(target, name, value, receiver);\n                }\n                const index = Number(name);\n                if (Number.isNaN(index)) {\n                    return Reflect.set(target, name, value, receiver);\n                }\n                target[index < 0 ? target.length + index : index] = value;\n                return true;\n            }\n        });\n    }\n    static delta(a, b, useRelativeNaming = false) {\n        // Nicer syntax but about 40% slower (an extra iteration)\n        // const\n        //     onlyInA = a.filter(item => !b.includes(item)),\n        //     onlyInB = b.filter(item => !a.includes(item)),\n        //     inBoth  = a.filter(item => b.includes(item));\n        // Quick bailout for nonexisting target array\n        if (!b) {\n            return useRelativeNaming\n                ? { toAdd : a, toRemove : [], toKeep : [] }\n                : { onlyInA : a, onlyInB : [], inBoth : [] };\n        }\n        const\n            onlyInA = [],\n            onlyInB = [],\n            inBoth  = new Set(),\n            bSet    = new Set(b);\n        for (let i = 0; i < a.length; i++) {\n            const item = a[i];\n            if (bSet.has(item)) {\n                inBoth.add(item);\n            }\n            else {\n                onlyInA.push(item);\n            }\n        }\n        for (let i = 0; i < b.length; i++) {\n            const item = b[i];\n            if (!inBoth.has(item)) {\n                onlyInB.push(item);\n            }\n        }\n        if (useRelativeNaming) {\n            return { toAdd : onlyInA, toRemove : onlyInB, toKeep : inBoth };\n        }\n        return { onlyInA, onlyInB, inBoth : [...inBoth] };\n    }\n    /**\n     * Returns the passed object wrapped in an array. Special handling of the following cases:\n     * * Passing an array returns it as is\n     * * Passing a `Set` returns it converted to an Array\n     * * Passing `null`/`undefined` returns the passed value\n     *\n     * ```javascript\n     * const records = ArrayHelper.asArray(record);\n     *\n     * // { id : 1 } -> [{ id : 1 }]\n     * // [{ id : 1 }] -> [{ id : 1 }]\n     * ```\n     *\n     * @param {*} arrayOrObject\n     * @returns {Array|null}\n     * @internal\n     */\n    static asArray(arrayOrObject) {\n        if (arrayOrObject == null) {\n            return arrayOrObject;\n        }\n        if (arrayOrObject instanceof Set) {\n            return Array.from(arrayOrObject);\n        }\n        return Array.isArray(arrayOrObject) ? arrayOrObject : [arrayOrObject];\n    }\n    /**\n     * Identity function that returns its input.\n     * @param {*} Any value\n     * @returns {*} The input value\n     * @internal\n     */\n    static identity(x) {\n        return x;\n    }\n    /**\n     * Transform an array into a key:value dictionary using the specified\n     * key and value getters. Does not group values, so only one result will\n     * appear in the output for a given key.\n     *\n     * ```javascript\n     * const input = [{\n     *   id: '1',\n     *   other: 'one'\n     * },{\n     *   id: '2',\n     *   other: 'two'\n     * }];\n     *\n     * keyBy(input, rec => rec.id)\n     *\n     * // {\n     * //    '1': { id: '1', other: 'one' },\n     * //    '2': { id: '2', other: 'two' }\n     * // }\n     * ```\n     *\n     * @param {Array} array Array from which to build dictionary\n     * @param {Function|String} getKey Function to produce the key for a given array entry, or a string property name to read\n     * @param {Function} getValue Optional function to transform array elements. Defaults to returning the element itself\n     * @returns {Object} A key->value dictionary with keys as returned by `getKey` and values returned by `getValue`\n     * @internal\n     */\n    static keyBy(array, keyGetter, valueGetter = ArrayHelper.identity) {\n        const\n            getKey = typeof keyGetter === 'string' ? o => o?.[keyGetter] : keyGetter,\n            getValue = typeof valueGetter === 'string' ? o => o?.[valueGetter] : valueGetter;\n        return array.reduce((dict, next) => {\n            dict[getKey(next)] = getValue(next);\n            return dict;\n        }, {});\n    }\n    /**\n     * Group an array by keys (either the values in a specified property name, or the results of a string-generating function accepting\n     * an array entry as input), returning an Object with those keys, whose values are arrays containing the array entries that\n     * produced that key.\n     *\n     * ```javascript\n     * const input = [{\n     *   id: 1,\n     *   color: 'red'\n     * },{\n     *   id: 2,\n     *   color: 'green'\n     * },{\n     *   id: 3,\n     *   color: 'green'\n     * }];\n     *\n     * groupBy(input, 'color')\n     *\n     * // {\n     * //    'red': [ { id: '1', color: 'red' } ],\n     * //    'green': [ { id: '2', color: 'green' }, { id: '3', color: 'green' } ]\n     * // }\n     *\n     * groupBy(input, rec => rec.color?.substr(0, 1))\n     *\n     * // {\n     * //    'r': [ { id: '1', color: 'red' } ],\n     * //    'g': [ { id: '2', color: 'green' }, { id: '3', color: 'green' } ]\n     * // }\n     * ```\n     *\n     * @param {Object} array Array from which to build dictionary\n     * @param {Function|String} getGroupKey Function to produce the key for a given array entry, or a string property name to read\n     * @returns {Object} A key->value[] dictionary with keys as returned by `getKey` and arrays of matching items in original order as values\n     * @internal\n     */\n    static groupBy(array, groupKeyGetter) {\n        const getKey = typeof groupKeyGetter === 'string' ? o => o?.[groupKeyGetter] : groupKeyGetter;\n        return array.reduce((grouped, value) => {\n            const key = getKey(value);\n            (grouped[key] = grouped[key] || []).push(value);\n            return grouped;\n        }, {});\n    }\n}\nArrayHelper._$name = 'ArrayHelper';", "/**\n * @module Core/helper/FunctionHelper\n */\nconst\n    commaSepRe = /,\\s*/,\n    decompiledSym = Symbol('decompiled'),\n    // [async] p => ...\n    fnRe1 = /^\\s*(async\\s+)?([a-z_]\\w*)\\s*=>([\\s\\S]+)$/i,\n    // [async] (p1?[, px]*) => ...\n    fnRe2 = /^\\s*(async\\s*)?\\s*\\(((?:[a-z_]\\w*(?:, [a-z_]\\w*)*)?)\\)\\s+=>([\\s\\S]+)$/i,\n    // [async] [function] [name] (p1?[, px]*) ...\n    fnRe3 = /^(\\s*async)?(?:\\s*function)?(?:\\s*([a-z_]\\w*))?\\s*\\(((?:[a-z_]\\w*(?:, [a-z_]\\w*)*)?)\\)([\\s\\S]+)$/i,\n    { hasOwnProperty } = Object.prototype;\n/**\n * Provides functionality for working with functions\n * @internal\n */\nexport default class FunctionHelper {\n    /**\n     * Inserts a function after the specified `method` is called on an `object`. To remove this hook, invoke the\n     * function returned by this method.\n     * ```\n     *  class A {\n     *      method() {\n     *          console.log('method');\n     *      }\n     *  }\n     *\n     *  let instance = new A();\n     *\n     *  let detach = FunctionHelper.after(instance, 'method', () => { console.log('after') });\n     *\n     *  instance.method();\n     *  > method\n     *  > after\n     *\n     *  detach();\n     *  instance.method();\n     *  > method\n     * ```\n     * The value returned by the original method is passed as the first argument to `fn` followed by all the arguments\n     * passed by the caller.\n     *\n     * If `fn` returns a value (not `undefined`), that value is returned from the method call instead of the value\n     * returned by the original method.\n     * ```\n     *  class A {\n     *      method(x) {\n     *          console.log('method', x);\n     *          return x * 2\n     *      }\n     *  }\n     *\n     *  let instance = new A();\n     *\n     *  let detach = FunctionHelper.after(instance, 'method', (ret, x) => {\n     *      console.log('after', ret, x);\n     *      return x / 2;\n     *  });\n     *\n     *  console.log(instance.method(50));\n     *  > method 50\n     *  > after 100 50\n     *  > 25\n     *\n     *  detach();\n     *  console.log(instance.method(50));\n     *  > method 50\n     *  > 100\n     * ```\n     *\n     * @param {Object} object The object to hook.\n     * @param {String} method The name of the method on `object` to hook.\n     * @param {Function|String} fn The function or method name (on `thisObj`) to call after `method`.\n     * @param {Object} [thisObj] The `this` pointer value for calling `fn`.\n     * @param {Object} [options] Additional options\n     * @param {Boolean} [options.return=true] Specify `false` to not include the return value of the hooked method as\n     * the first argument to `fn`.\n     * @returns {Function} The function to call to remove the hook.\n     */\n    static after(object, method, fn, thisObj, options) {\n        const\n            named = typeof fn === 'string',\n            withReturn = options?.return !== false,\n            hook = (...args) => {\n                const\n                    // if object.destroy() occurs, our hook will be removed, so this fn won't be called in that case\n                    origResult = hook.$nextHook.call(object, ...args),\n                    hookResult = thisObj?.isDestroyed ? undefined : (withReturn\n                        ? (named ? thisObj[fn](origResult, ...args) : fn.call(thisObj, origResult, ...args))\n                        : (named ? thisObj[fn](...args) : fn.call(thisObj, ...args))\n                    );\n                return (hookResult === undefined) ? origResult : hookResult;\n            };\n        return FunctionHelper.hookMethod(object, method, hook);\n    }\n    /**\n     * Inserts a function before the specified `method` is called on an `object`. To remove this hook, invoke the\n     * function returned by this method.\n     * ```\n     *  class A {\n     *      method() {\n     *          console.log('method');\n     *      }\n     *  }\n     *\n     *  let instance = new A();\n     *\n     *  let detach = FunctionHelper.before(instance, 'method', () => { console.log('before') });\n     *\n     *  instance.method();\n     *  > before\n     *  > method\n     *\n     *  detach();\n     *  instance.method();\n     *  > method\n     * ```\n     * If `fn` returns `false`, the original method is not invoked and `false` is returned to the caller.\n     * ```\n     *  class A {\n     *      method(x) {\n     *          console.log('method', x);\n     *          return x * 2;\n     *      }\n     *  }\n     *\n     *  let instance = new A();\n     *\n     *  let detach = FunctionHelper.before(instance, 'method', x => {\n     *      console.log('before', x);\n     *      return false;\n     *  });\n     *\n     *  console.log(instance.method(50));\n     *  > before 50\n     *  > false\n     *\n     *  detach();\n     *  console.log(instance.method(50));\n     *  > method 50\n     *  > 100\n     * ```\n     *\n     * @param {Object} object The object to hook.\n     * @param {String} method The name of the method on `object` to hook.\n     * @param {Function|String} fn The function or method name (on `thisObj`) to call before `method`.\n     * @param {Object} [thisObj] The `this` pointer value for calling `fn`.\n     * @returns {Function} The function to call to remove the hook.\n     */\n    static before(object, method, fn, thisObj) {\n        const\n            named = typeof fn === 'string',\n            hook = (...args) => {\n                const ret = (thisObj?.isDestroyed\n                    ? 0\n                    : (named ? thisObj[fn](...args) : fn.call(thisObj, ...args))\n                );\n                return (ret === false) ? ret : hook.$nextHook.call(object, ...args);\n            };\n        return FunctionHelper.hookMethod(object, method, hook);\n    }\n    static curry(func) {\n        return function curried(...args) {\n            if (args.length >= func.length) {\n                return func.apply(this, args);\n            }\n            else {\n                return function(...args2) {\n                    return curried.apply(this, args.concat(args2));\n                };\n            }\n        };\n    }\n    static bindAll(obj) {\n        for (const key in obj) {\n            if (typeof obj[key] === 'function') {\n                obj[key] = obj[key].bind(obj);\n            }\n        }\n    }\n    /**\n     * Returns a function which calls the passed `interceptor` function first, and the passed `original` after\n     * as long as the `interceptor` does not return `false`.\n     * @param {Function} original The function to call second.\n     * @param {Function} interceptor The function to call first.\n     * @param {Object} [thisObj] The `this` reference when the functions are called.\n     * @returns {Function} A function which yields the return value from the `original` function **if it was called**, else `false`.\n     */\n    static createInterceptor(original, interceptor, thisObj) {\n        return function(...args) {\n            const theThis = thisObj || this;\n            if (interceptor.call(theThis, ...args) !== false) {\n                return original.call(theThis, ...args);\n            }\n            return false;\n        };\n    }\n    /**\n     * Returns a function which calls the passed `sequence` function after calling\n     * the passed `original`.\n     * @param {Function} original The function to call first.\n     * @param {Function} sequence The function to call second.\n     * @param {Object} [thisObj] The `this` reference when the functions are called.\n     * @returns {Function} A function which yields the value returned from the sequence if it returned a value, else the return\n     * value from the original function.\n     */\n    static createSequence(original, sequence, thisObj) {\n        return (...args) => {\n            const origResult = original.call(thisObj, ...args),\n                sequenceResult = sequence.call(thisObj, ...args);\n            return (sequenceResult === undefined) ? origResult : sequenceResult;\n        };\n    }\n    /**\n     * Create a \"debounced\" function which will call on the \"leading edge\" of a timer period.\n     * When first invoked will call immediately, but invocations after that inside its buffer\n     * period will be rejected, and *one* invocation will be made after the buffer period has expired.\n     *\n     * This is useful for responding immediately to a first mousemove, but from then on, only\n     * calling the action function on a regular timer while the mouse continues to move.\n     *\n     * @param {Function} fn The function to call.\n     * @param {Number} buffer The milliseconds to wait after each execution before another execution takes place.\n     * @param {Object} [thisObj] `this` reference for the function.\n     * @param {Array} [extraArgs] The argument list to append to those passed to the function.\n     * @param {Function} [alt] A function to call when the invocation is rejected due to buffer time not having expired.\n     * @returns {Function} A function which calls the passed `fn` only if at least the passed `buffer`\n     * milliseconds has elapsed since its last invocation.\n     */\n    static createThrottled(fn, buffer, thisObj, extraArgs, alt) {\n        let lastCallTime = -Number.MAX_VALUE,\n            callArgs,\n            timerId;\n        const\n            invoke = () => {\n                timerId = 0;\n                lastCallTime = performance.now();\n                callArgs.push.apply(callArgs, extraArgs);\n                fn.apply(thisObj, callArgs);\n            },\n            result = function(...args) {\n                const elapsed = performance.now() - lastCallTime;\n                callArgs = args;\n                // If it's been more then the buffer period since we invoked, we can call it now\n                if (elapsed >= buffer) {\n                    clearTimeout(timerId);\n                    invoke();\n                }\n                // Otherwise, kick off a timer for the requested period.\n                else {\n                    if (!timerId) {\n                        timerId = setTimeout(invoke, buffer - elapsed);\n                    }\n                    if (alt) {\n                        callArgs.push.apply(callArgs, extraArgs);\n                        alt.apply(thisObj, callArgs);\n                    }\n                }\n            };\n        result.cancel = () => clearTimeout(timerId);\n        return result;\n    }\n    /**\n     * Create a \"debounced\" function which will call on the \"trailing edge\" of a timer period.\n     * When first invoked will wait until the buffer period has expired to call the function, and\n     * more calls within that time will restart the timer.\n     *\n     * This is useful for responding to keystrokes, but deferring action until the user pauses typing.\n     *\n     * @param {Function} fn The function to call.\n     * @param {Number} buffer The milliseconds to wait after each execution before another execution takes place.\n     * @param {Object} [thisObj] `this` reference for the function.\n     * @param {Array} [args] The argument list to append to those passed to the function.\n     * @returns {Function} A function which calls the passed `fn` when at least the passed `buffer`\n     * milliseconds has elapsed since its last invocation.\n     */\n    static createBuffered(fn, buffer, thisObj, args) {\n        let callArgs,\n            timerId;\n        const\n            invoke = () => {\n                timerId = 0;\n                result.isPending = false;\n                callArgs.push.apply(callArgs, args);\n                fn.apply(thisObj, callArgs);\n            },\n            result = function(...args) {\n                callArgs = args;\n                // Cancel any impending invocation. It's pushed out for <buffer> ms from each call\n                if (timerId) {\n                    clearTimeout(timerId);\n                }\n                result.isPending = true;\n                timerId = setTimeout(invoke, buffer);\n            };\n        result.cancel = () => {\n            result.isPending = false;\n            clearTimeout(timerId);\n        };\n        return result;\n    }\n    static decompile(fn) {\n        if (!(decompiledSym in fn)) {\n            const code = fn.toString();\n            let m = fnRe1.exec(code),\n                args, body, name, decompiled, t;\n            if (m) {\n                // [async] p => ...\n                //   [1]   [2]  [3]\n                args = [m[2]];\n                body = m[3];\n            }\n            else if ((m /* assignment */ = fnRe2.exec(code))) {\n                // [async] (p1?[, px]*) => ...\n                //   [1]   [2]             [3]\n                t = m[2].trim();\n                args = t ? t.split(commaSepRe) : [];\n                body = m[3];\n            }\n            else if ((m /* assignment */ = fnRe3.exec(code))) {\n                // [async] [function] [name] (p1?[, px]*) ...\n                //   [1]              [2]     [3]         [4]\n                name = m[2];\n                t = m[3].trim();\n                args = t ? t.split(commaSepRe) : [];\n                body = m[4];\n            }\n            body = body?.trim();\n            fn[decompiledSym] = decompiled = m && {\n                args,\n                async : Boolean(m[1]),\n                body  : body?.startsWith('{') ? body.substring(1, body.length - 1).trim() : body\n            };\n            if (name) {\n                decompiled.name = name;\n            }\n        }\n        return fn[decompiledSym];\n    }\n    static hookMethod(object, method, hook) {\n        hook.$nextHook = object[method];\n        object[method] = hook;\n        return () => {\n            // Object will have no hooks on the instance if it is destroyed (perhaps other reasons too)\n            if (hasOwnProperty.call(object, method)) {\n                let f = object[method],\n                    next;\n                if (f === hook) {\n                    // When this is the outermost hook, we may be the last hook. If $nextHook is found on the object's\n                    // prototype, simply delete the slot to expose it. Otherwise, there's another hook, so make it the\n                    // outermost.\n                    if (Object.getPrototypeOf(object)?.[method] === hook.$nextHook) {\n                        delete object[method];\n                    }\n                    else {\n                        object[method] = hook.$nextHook;\n                    }\n                }\n                else {\n                    // Not being the outermost hook means we have outer hooks that should chain to the one we want to\n                    // remove. Be cautious because the object could be destroyed.\n                    for (; (next = f?.$nextHook); f = next) {\n                        if (next === hook) {\n                            f.$nextHook = hook.$nextHook;\n                            break;\n                        }\n                    }\n                }\n            }\n        };\n    }\n    /**\n     * Protects the specified `method` on a given `object` such that calling it will not throw exceptions.\n     * @param {Object} object The object whose method is to be protected.\n     * @param {String} method The name of the method to protect.\n     * @param {Function} [handler] An optional function to call for any thrown exceptions.\n     * @internal\n     */\n    static noThrow(object, method, handler) {\n        const fn = object[method];\n        object[method] = (...args) => {\n            try {\n                return fn.apply(object, args);\n            }\n            catch (e) {\n                return handler?.(e);\n            }\n        };\n    }\n    static returnTrue() {\n        return true;\n    }\n    static animate(duration, fn, thisObj, easing = 'linear') {\n        let cancel = false;\n        const result = new Promise(resolve => {\n            const start = performance.now(),\n                iterate = () => {\n                    const progress = Math.min((performance.now() - start) / duration, 1),\n                        delayable = thisObj && thisObj.setTimeout ? thisObj : globalThis;\n                    if (!cancel) {\n                        if (fn.call(thisObj, this.easingFunctions[easing](progress)) === false) {\n                            resolve();\n                        }\n                    }\n                    if (cancel || progress === 1) {\n                        // Push resolution into the next animation frame so that\n                        // this frame completes before the resolution handler runs.\n                        delayable.requestAnimationFrame(() => resolve());\n                    }\n                    else {\n                        delayable.requestAnimationFrame(iterate);\n                    }\n                };\n            iterate();\n        });\n        result.cancel = () => {\n            cancel = true;\n            return false;\n        };\n        return result;\n    }\n}\nconst\n    half = 0.5,\n    e1 = 1.70158,\n    e2 = 7.5625,\n    e3 = 1.525,\n    e4 = 2 / 2.75,\n    e5 = 2.25 / 2.75,\n    e6 = 1 / 2.75,\n    e7 = 1.5 / 2.75,\n    e8 = 2.5 / 2.75,\n    e9 = 2.625 / 2.75,\n    e10 = 0.75,\n    e11 = 0.9375,\n    e12 = 0.984375,\n    s1 = 1.70158,\n    s2 = 1.70158;\nFunctionHelper.easingFunctions = {\n    linear         : t => t,\n    easeInQuad     : t => Math.pow(t, 2),\n    easeOutQuad    : t => -(Math.pow((t - 1), 2) - 1),\n    easeInOutQuad  : t => (t /= half) < 1 ? half * Math.pow(t, 2) : -half * ((t -= 2) * t - 2),\n    easeInCubic    : t => Math.pow(t, 3),\n    easeOutCubic   : t => Math.pow((t - 1), 3) + 1,\n    easeInOutCubic : t => (t /= half) < 1 ? half * Math.pow(t, 3) : half * (Math.pow((t - 2), 3) + 2),\n    easeInQuart    : t => Math.pow(t, 4),\n    easeOutQuart   : t => -(Math.pow((t - 1), 4) - 1),\n    easeInOutQuart : t => (t /= half) < 1 ? half * Math.pow(t, 4) : -half * ((t -= 2) * Math.pow(t, 3) - 2),\n    easeInQuint    : t => Math.pow(t, 5),\n    easeOutQuint   : t => (Math.pow((t - 1), 5) + 1),\n    easeInOutQuint : t => (t /= half) < 1 ? half * Math.pow(t, 5) : half * (Math.pow((t - 2), 5) + 2),\n    easeInSine     : t => -Math.cos(t * (Math.PI / 2)) + 1,\n    easeOutSine    : t => Math.sin(t * (Math.PI / 2)),\n    easeInOutSine  : t => -half * (Math.cos(Math.PI * t) - 1),\n    easeInExpo     : t => t === 0 ? 0 : Math.pow(2, 10 * (t - 1)),\n    easeOutExpo    : t => t === 1 ? 1 : -Math.pow(2, -10 * t) + 1,\n    easeInOutExpo  : t => (t === 0) ? 0 : (t === 1) ? 1 : ((t /= half) < 1) ? half * Math.pow(2, 10 * (t - 1)) : half * (-Math.pow(2, -10 * --t) + 2),\n    easeInCirc     : t => -(Math.sqrt(1 - (t * t)) - 1),\n    easeOutCirc    : t => Math.sqrt(1 - Math.pow((t - 1), 2)),\n    easeInOutCirc  : t => (t /= half) < 1 ? -half * (Math.sqrt(1 - t * t) - 1) : half * (Math.sqrt(1 - (t -= 2) * t) + 1),\n    easeOutBounce  : t => ((t) < e6) ? (e2 * t * t) : (t < e4) ? (e2 * (t -= e7) * t + e10) : (t < e8) ? (e2 * (t -= e5) * t + e11) : (e2 * (t -= e9) * t + e12),\n    easeInBack     : t => (t) * t * ((e1 + 1) * t - e1),\n    easeOutBack    : t => (t = t - 1) * t * ((e1 + 1) * t + e1) + 1,\n    easeInOutBack  : t => {\n        let v1 = s1;\n        return ((t /= half) < 1) ? half * (t * t * (((v1 *= (e3)) + 1) * t - v1)) : half * ((t -= 2) * t * (((v1 *= (e3)) + 1) * t + v1) + 2);\n    },\n    elastic     : t => -1 * Math.pow(4, -8 * t) * Math.sin((t * 6 - 1) * (2 * Math.PI) / 2) + 1,\n    swingFromTo : t => {\n        let v2 = s2;\n        return ((t /= half) < 1) ? half * (t * t * (((v2 *= (e3)) + 1) * t - v2)) : half * ((t -= 2) * t * (((v2 *= (e3)) + 1) * t + v2) + 2);\n    },\n    swingFrom  : t => t * t * ((e1 + 1) * t - e1),\n    swingTo    : t => (t -= 1) * t * ((e1 + 1) * t + e1) + 1,\n    bounce     : t => (t < e6) ? (e2 * t * t) : (t < e4) ? (e2 * (t -= e7) * t + e10) : (t < e8) ? (e2 * (t -= e5) * t + e11) : (e2 * (t -= e9) * t + e12),\n    bouncePast : t => (t < e6) ? (e2 * t * t) : (t < e4) ? 2 - (e2 * (t -= e7) * t + e10) : (t < e8) ? 2 - (e2 * (t -= e5) * t + e11) : 2 - (e2 * (t -= e9) * t + e12),\n    easeFromTo : t => (t /= half) < 1 ? half * Math.pow(t, 4) : -half * ((t -= 2) * Math.pow(t, 3) - 2),\n    easeFrom   : t => Math.pow(t, 4),\n    easeTo     : t => Math.pow(t, 0.25)\n};\nFunctionHelper._$name = 'FunctionHelper';", "/* eslint-disable bryntum/no-listeners-in-lib,bryntum/no-on-in-lib */\nimport Base from '../Base.js';\nimport ArrayHelper from '../helper/ArrayHelper.js';\nimport StringHelper from '../helper/StringHelper.js';\nimport VersionHelper from '../helper/VersionHelper.js';\nimport BrowserHelper from '../helper/BrowserHelper.js';\nimport FunctionHelper from '../helper/FunctionHelper.js';\nimport Objects from '../helper/util/Objects.js';\n/**\n * @module Core/mixin/Events\n */\n/**\n * @typedef {Object.<String,Function|Boolean|Object|Object[]|Number|String>} BryntumListenerConfig\n * @property {Object} [thisObj] The `this` reference for all listeners. May be overridden if a handler is specified in object form.\n * @property {Boolean} [once] Specify as `true` to remove the listener as soon as it is invoked.\n * @property {Number|Object} [expires] The listener only waits for a specified time before\n * being removed. The value may be a number or an object containing an expiry handler.\n * @property {Number} [expires.delay] How long to wait for the event for.\n * @property {String|Function} [expires.alt] The function to call when the listener expires **without having been triggered**.\n * @property {Object[]} [args] An array of arguments to be passed to the handler before the event object.\n * @property {Number} [prio] The priority for all listeners; higher priority listeners are called before lower.\n * @property {Number} [buffer] A buffer time in milliseconds to wait after last event trigger to call the handler, to reduce the amount of handler calls for frequent events.\n * @property {Number} [throttle] A millisecond timeout value to throttle event triggering. With it specified a handler\n * will be called once immediately and then all following calls during the timeout period will be grouped together into one call once per throttle period.\n */\nconst\n    // Used by the config system to flatten configs from the class hierarchy.\n    // In this case, a pure merge is not wanted. Listener definitions from\n    // every class level are collected up into an array.\n    // addListener iterates any passed array, adding each element.\n    { isArray }        = Array,\n    { hasOwnProperty } = Object.prototype,\n    // Used to distinguish event names from listener options in addListener object config.\n    specialProperties  = {\n        thisObj    : 1,\n        detachable : 1,\n        once       : 1,\n        detacher   : 1,\n        prio       : 1,\n        args       : 1,\n        expires    : 1,\n        buffer     : 1,\n        throttle   : 1,\n        name       : 1,\n        $internal  : 1\n    },\n    priorityComparator = (a, b) => b.prio - a.prio;\n/**\n * Mix this into another class to enable event handling.\n *\n * ## Basic usage\n * Listeners can be added either through config:\n *\n * ```javascript\n * let button = new Button({\n *   listeners: {\n *     click: () => {},\n *     press: () => {},\n *     ...\n *   }\n * });\n * ```\n *\n * *NOTE*: Do not reuse listeners config object, use new every time:\n * ```javascript\n * // wrong\n * let config = { click : () => {} }\n * new Button({\n *     listeners : config\n * })\n * new Button({\n *     listeners : config\n * })\n * // right\n * new Button({\n *     listeners : { click : () => {} }\n * })\n * new Button({\n *     listeners : { click : () => {} }\n * })\n * ```\n *\n * Or by calling on()/addListener():\n *\n * ```javascript\n * let button = new Button();\n *\n * button.addListener('press', () => {});\n * // on is an alias for addListener\n * button.on('click', () => {});\n * ```\n *\n * This style also accepts multiple listeners in same way as when using config:\n *\n * ```javascript\n * button.on({\n *   click: () => {},\n *   press: () => {},\n *   ...\n * });\n * ```\n *\n * ### Handlers as function name\n *\n * Event handlers may be specified as a function __name__. If a string is specified, it is the name\n * of the function in the `thisObj` object.\n *\n * If the string begins with `up.`, the owning object's ownership hierarchy\n * (if present) is scanned for an object which implements that function name:\n *\n * ```javascript\n * new Popup({\n *     tbar : {\n *         items : {\n *             myCombo : {\n *                 type      : 'combo',\n *                 editable  : false,\n *                 label     : 'Type',\n *                 listeners : {\n *                     // Look in owner chain for this function name\n *                     change : 'up.onFilterChange'\n *                 },\n *                 items     : [\n *                     'Event',\n *                     'Task',\n *                     'Appointment'\n *                 ]\n *             }\n *         }\n *     },\n *     items : {\n *         ...\n *     },\n *     onFilterChange({ value }) {\n *         // Handle event type selection here\n *     }\n * });\n *```\n *\n * ## Listener options\n * ### Once\n * Listeners can be configured to automatically deregister after first trigger by specifying config option `once`:\n *\n * ```javascript\n * button.on({\n *   click: () => {},\n *   once: true\n * });\n * ```\n *\n * ### Priority\n * Specifying priority affects the order in which listeners are called when triggering an event. Higher priorities will be\n * called before lower. Default value is 0.\n *\n * ```javascript\n * button.on({\n *   click: this.onClick,\n *   prio: 1\n * });\n * ```\n *\n * ### This reference\n * If desired, you can specify thisObj when configuring listeners. There is no need if you are using arrow functions as\n * listeners, but might be handy in other cases. Of course, you can also use bind to set `this` reference.\n *\n * ```javascript\n * button.on({\n *   click: this.onClick,\n *   thisObj: this\n * });\n *\n * // or\n *\n * button.on({\n *   click: this.onClick.bind(this)\n * });\n * ```\n *\n * ### Buffering\n * By specifying a `buffer` events that fire frequently can be grouped together and delayed. A handler for the event will be called once only, when no new event has been fired during the specified buffer time:\n *\n * ```javascript\n * button.on({\n *   click  : this.onClick,\n *   buffer : 200 // in milliseconds\n * });\n * ```\n *\n * In this example, if a user clicked the button 6 times very fast (<200ms between each click),\n * the `this.onClick` handler would be called only once 200 milliseconds after the last click.\n *\n * ### Throttling\n * Create a \"debounced\" function which will call on the \"leading edge\" of a timer period.\n * When first invoked will call immediately, but invocations after that inside its buffer\n * period will be rejected, and *one* invocation will be made after the buffer period has expired.\n *\n * This is useful for responding immediately to a first mousemove, but from then on, only\n * calling the action function on a regular timer while the mouse continues to move.\n * ```javascript\n * button.on({\n *   click    : this.onClick,\n *   throttle : 200 // in milliseconds\n * });\n * ```\n *\n * In this example, if a user clicked the button 6 times very fast, the `this.onClick` handler would be called once immediately on the first click and a second time 200 milliseconds after the **first** click.\n * So in reality the `click` event handler will be called every 200ms independent of amount of click in a middle, if the event was triggered at least once during the `throttle` timeout.\n *\n * ### Detacher\n * A convenient way of unregistering events is to use a detacher, a function returned when adding listeners that you\n * call later to deregister them. As of version 1.0, detachable defaults to true.\n *\n * ```javascript\n * let detacher = button.on({\n *   click: () => {},\n *   press: () => {},\n *   detachable: true\n * });\n *\n * // when you want to detach, for example in destroy()\n * detacher();\n * ```\n *\n * ### Auto detaching\n * When listeners are bound to a class instance using `thisObj`, the `thisObj`'s `doDestroy` method\n * is overridden to remove the listeners before calling the overridden doDestroy.\n *\n * ```javascript\n * class MyClass extends Base {\n *   construct() {\n *     let button = new Button({\n *       listeners: {\n *         click: () => {},\n *         thisObj: this\n *       }\n *     });\n *   }\n *\n *   doDestroy() {\n *     // clean up stuff\n *   }\n * }\n *\n * let myObj = new MyClass();\n * // clean up, also removes listeners\n * myObj.destroy();\n * ```\n *\n * ### On-functions\n * When mixing Events into another class it can be configured to call on-functions when events are triggered.\n * On-functions are functions named 'onEventName', for example 'onClick', 'onPress' declared on the class triggering\n * the event.\n *\n * ```javascript\n * // mix Events in with on-functions activated\n * let button = new Button({\n *   callOnFunctions: true,\n *\n *   onClick: () => {}\n * });\n *\n * // or add a getter in class declaration\n * ```\n *\n * Returning `false` from an on-function will prevent triggering listeners for the event.\n *\n * ### Catching all events\n * By specifying a listener for {@link #event-catchAll catchAll} a function can be notified when any event is triggered:\n *\n * ```javascript\n * const button = new Button({\n *    listeners : {\n *        catchAll(event) {\n *            // All events on the button will pass through here\n *        }\n *    }\n * });\n * ```\n *\n * ## Preventable events\n *\n * By returning `false` from a listener for an event documented as `preventable` the action that would otherwise be\n * executed after the event is prevented. These events are usually named `beforeXX`, for example `beforeRemove`,\n * `beforeDragStart` etc.\n *\n * <div class=\"note\">Note that Angular does not support return values from listeners. Instead, assign to\n * <code>event.returnValue</code> as shown in the Angular snippet below</div>\n *\n * {@frameworktabs}\n * {@js}\n * ```javascript\n * taskBoard.on({\n *     beforeColumnDrag({ columnRecord }) {\n *         if (columnRecord.locked) {\n *             return false;\n *         }\n *     }\n * });\n * ```\n *\n * {@endjs}\n * {@react}\n *\n * ```jsx\n * const App = props => {\n *     function onBeforeColumnDrag({ columnRecord }) {\n *         if (columnRecord.locked) {\n *             return false;\n *         }\n *     }\n *\n *     return (\n *         <>\n *             <BryntumTaskBoard onBeforeColumnDrag={onBeforeColumnDrag} />\n *         </>\n *     )\n * }\n * ```\n *\n * {@endreact}\n * {@vue}\n *\n * ```html\n * <bryntum-task-board @beforeColumnDrag=\"onBeforeColumnDrag\" />\n * ```\n *\n * ```javascript\n * export default {\n *     methods : {\n *         onBeforeColumnDrag({ columnRecord }) {\n *             if (columnRecord.locked) {\n *                 return false;\n *             }\n *         }\n *    }\n * }\n * ```\n *\n * {@endvue}\n * {@angular}\n *\n * ```html\n * <bryntum-task-board (onBeforeColumnDrag)=\"onBeforeColumnDrag({event : $event})\"></bryntum-task-board>\n * ```\n *\n * ```typescript\n * export class AppComponent {\n *     onBeforeColumnDrag({ event }: { event: any }): void {\n *         event.returnValue = !event.columnRecord.locked;\n *     }\n *  }\n * ```\n *\n * {@endangular}\n * {@endframeworktabs}\n *\n * @mixin\n */\nexport default Target => class Events extends (Target || Base) {\n    eventsSuspended = null;\n    static get $name() {\n        return 'Events';\n    }\n    //region Events\n    /**\n     * Fires before an object is destroyed.\n     * @event beforeDestroy\n     * @param {Core.Base} source The Object that is being destroyed.\n     */\n    /**\n     * Fires when an object is destroyed.\n     * @event destroy\n     * @param {Core.Base} source The Object that is being destroyed.\n     */\n    /**\n     * Fires when any other event is fired from the object.\n     *\n     * **Note**: `catchAll` is fired for both public and private events. Please rely on the public events only.\n     * @event catchAll\n     * @param {Object} event The Object that contains event details\n     * @param {String} event.type The type of the event which is caught by the listener\n     */\n    //endregion\n    static get declarable() {\n        return [\n            /**\n             * The list of deprecated events as an object, where `key` is an event name which is deprecated and\n             * `value` is an object which contains values for\n             * {@link Core.helper.VersionHelper#function-deprecate-static VersionHelper}:\n             * - product {String} The name of the product;\n             * - invalidAsOfVersion {String} The version where the offending code is invalid (when any compatibility\n             *   layer is actually removed);\n             * - message {String} Warning message to show to the developer using a deprecated API;\n             *\n             * For example:\n             *\n             * ```javascript\n             * return {\n             *     click : {\n             *         product            : 'Grid',\n             *         invalidAsOfVersion : '1.0.0',\n             *         message            : 'click is deprecated!'\n             *     }\n             * }\n             * ```\n             *\n             * @name deprecatedEvents\n             * @returns {Object}\n             * @static\n             * @internal\n             */\n            'deprecatedEvents'\n        ];\n    }\n    static setupDeprecatedEvents(cls, meta) {\n        const\n            all = meta.getInherited('deprecatedEvents'),\n            add = cls.deprecatedEvents;\n        for (const eventName in add) {\n            // Event names are case-insensitive so build our map using toLowerCased names (but keep true case too):\n            all[eventName.toLowerCase()] = all[eventName] = add[eventName];\n        }\n    }\n    //region Config\n    static get configurable() {\n        return {\n            /**\n             * Set to true to call onXXX method names (e.g. `onShow`, `onClick`), as an easy way to listen for events.\n             *\n             * ```javascript\n             * const container = new Container({\n             *     callOnFunctions : true\n             *\n             *     onHide() {\n             *          // Do something when the 'hide' event is fired\n             *     }\n             * });\n             * ```\n             *\n             * @config {Boolean} callOnFunctions\n             * @category Misc\n             * @default false\n             */\n            /**\n             * The listener set for this object.\n             *\n             * An object whose property names are the names of events to handle, or options which modifiy\n             * __how__ the handlers are called.\n             *\n             * See {@link #function-addListener} for details about the options.\n             *\n             * Listeners can be specified in target class config and they will be merged with any listeners specified in\n             * the instantiation config. Class listeners will be fired first:\n             *\n             * ```javascript\n             * class MyStore extends Store({\n             *     static get configurable() {\n             *         return {\n             *             listeners : {\n             *                 myCustomEvent() {\n             *                 },\n             *                 load : {\n             *                     prio : 10000,\n             *                     fn() { // this load listener handles things first }\n             *                 }\n             *             }\n             *         }\n             *     }\n             * });\n             *\n             * let store = new MyStore({\n             *   listeners: {\n             *     load: () => { // This load listener runs after the class's },\n             *     ...\n             *   }\n             * });\n             * ```\n             *\n             * ### Handlers as function name\n             *\n             * Object event handlers may be specified as a function __name__. If a string is specified, it is the name\n             * of the function in the `thisObj` object.\n             *\n             * If the string begins with `up.`, this object's ownership hierarchy\n             * (if present) is scanned for an object which implements that function name:\n             *\n             * ```javascript\n             * new Popup({\n             *     tbar : {\n             *         items : {\n             *             myCombo : {\n             *                 type      : 'combo',\n             *                 editable  : false,\n             *                 label     : 'Type',\n             *                 listeners : {\n             *                     // Look in owner chain for this function name\n             *                     change : 'up.onFilterChange'\n             *                 },\n             *                 items     : [\n             *                     'Event',\n             *                     'Task',\n             *                     'Appointment'\n             *                 ]\n             *             }\n             *         }\n             *     },\n             *     items : {\n             *         ...\n             *     },\n             *     onFilterChange({ value }) {\n             *         // Handle event type selection here\n             *     }\n             * });\n             *```\n             *\n             * @config {Object}\n             * @category Common\n             */\n            listeners : {\n                value : null,\n                $config : {\n                    merge(newValue, currentValue) {\n                        if (newValue !== null) {\n                            if (!newValue) {\n                                return currentValue;\n                            }\n                            if (currentValue) {\n                                newValue = newValue ? [newValue] : [];\n                                newValue.push[isArray(currentValue) ? 'apply' : 'call'](newValue, currentValue);\n                            }\n                        }\n                        return newValue;\n                    }\n                }\n            },\n            /**\n             * Internal listeners, that cannot be removed by the user.\n             * @config {Object}\n             * @internal\n             */\n            internalListeners : null,\n            /**\n             * An object where property names with a truthy value indicate which events should bubble up the ownership\n             * hierarchy when triggered.\n             *\n             * ```javascript\n             * const container = new Container({\n             *     items : [\n             *        { type : 'text', bubbleEvents : { change : true }}\n             *     ],\n             *\n             *     listeners : {\n             *         change() {\n             *             // Will catch change event from the text field\n             *         }\n             *     }\n             * });\n             * ```\n             *\n             * @config {Object}\n             * @category Misc\n             */\n            bubbleEvents : null\n        };\n    }\n    destroy() {\n        this.trigger('beforeDestroy');\n        super.destroy();\n    }\n    //endregion\n    //region Init\n    construct(config, ...args) {\n        // Configured listeners use this as the thisObj\n        if ((this.configuredListeners /* assignment */ = config?.listeners)) {\n            // We have to copy in case listeners have been forked\n            config = Objects.assign({}, config);\n            delete config.listeners;\n        }\n        super.construct(config, ...args);\n        // Apply configured listeners after construction.\n        // Note that some classes invoke this during parts of their construction.\n        // Store invokes this prior to setting data so that observers are notified of data load.\n        this.processConfiguredListeners();\n    }\n    processConfiguredListeners() {\n        // This can only happen once\n        if (this.configuredListeners) {\n            const\n                me                = this,\n                { isConfiguring } = me;\n            // If called from config ingestion during configuration, listeners must be added\n            // so temporarily clear the isConfiguring flag.\n            me.isConfiguring = false;\n            me.listeners = me.configuredListeners;\n            me.configuredListeners = null;\n            me.isConfiguring = isConfiguring;\n        }\n    }\n    /**\n     * Auto detaches listeners registered from start, if set as detachable\n     * @internal\n     */\n    doDestroy() {\n        this.trigger('destroy');\n        this.removeAllListeners(false);\n        super.doDestroy();\n    }\n    static setupClass(meta) {\n        super.setupClass(meta);\n        Events.prototype.onListen.$nullFn = true;\n        Events.prototype.onUnlisten.$nullFn = true;\n    }\n    //endregion\n    //region Listeners\n    /**\n     * Adds an event listener. This method accepts parameters in the following format:\n     *\n     * ```javascript\n     *  myObject.addListener({\n     *      thisObj    : this,          // The this reference for the handlers\n     *      eventname2 : 'functionName' // Resolved at invocation time using the thisObj,\n     *      otherevent : {\n     *          fn      : 'handlerFnName',\n     *          once    : true          // Just this handler is auto-removed on fire\n     *      },\n     *      yetanother  : {\n     *          fn      : 'yetAnotherHandler',\n     *          args    : [ currentState1, currentState2 ] // Capture info to be passed to handler\n     *      },\n     *      prio        : 100           // Higher prio listeners are called before lower\n     *  });\n     * ```\n     *\n     * When listeners have a `thisObj` option, they are linked to the lifecycle of that object.\n     * When it is destroyed, those listeners are removed.\n     *\n     * The `config` parameter allows supplying options for the listener(s), for available options see {@link #typedef-BryntumListenerConfig}.\n     *\n     * A simpler signature may be used when only adding a listener for one event and no extra options\n     * (such as `once` or `delay`) are required:\n     *\n     * ```javascript\n     * myObject.addListener('click', myController.handleClicks, myController);\n     * ```\n     *\n     * The args in this simple case are `eventName`, `handler` and `thisObj`\n     *\n     * @param {BryntumListenerConfig|String} config An object containing listener definitions, or the event name to listen for\n     * @param {Object|Function} [thisObj] Default `this` reference for all listeners in the config object, or the handler\n     * function to call if providing a string as the first arg.\n     * @param {Object} [oldThisObj] The `this` reference if the old signature starting with a string event name is used..\n     * @returns {Function} Returns a detacher function unless configured with `detachable: false`. Call detacher to remove listeners\n     */\n    addListener(config, thisObj, oldThisObj) {\n        if (isArray(config)) {\n            for (let i = 0, { length } = config; i < length; i++) {\n                this.addListener(config[i], thisObj);\n            }\n            return;\n        }\n        const\n            me               = this,\n            deprecatedEvents = me.$meta.getInherited('deprecatedEvents');\n        if (typeof config === 'string') {\n            // arguments[2] is thisObj if (eventname, handler, thisObj) form called.\n            // Note that the other side of the if compares to undefined, so this will work.\n            return me.addListener({\n                [config]   : thisObj,\n                detachable : thisObj.detachable !== false,\n                thisObj    : oldThisObj\n            });\n        }\n        else {\n            // Capture the default thisObj.\n            thisObj = config.thisObj = config.thisObj !== undefined ? config.thisObj : thisObj;\n            for (const key in config) {\n                // Skip special properties or events without handlers (convenient syntax with optional handlers)\n                if (!specialProperties[key] && config[key] != null) {\n                    // comparing should be case insensitive\n                    const\n                        // comparing should be case insensitive\n                        eventName       = key.toLowerCase(),\n                        deprecatedEvent = deprecatedEvents?.[eventName],\n                        events          = me.eventListeners || (me.eventListeners = {}),\n                        listenerSpec    = config[key],\n                        expires         = listenerSpec.expires || config.expires,\n                        listener        = {\n                            fn        : typeof listenerSpec === 'object' ? listenerSpec.fn : listenerSpec,\n                            thisObj   : listenerSpec.thisObj !== undefined ? listenerSpec.thisObj : thisObj,\n                            args      : listenerSpec.args || config.args,\n                            prio      : listenerSpec.prio !== undefined ? listenerSpec.prio : config.prio !== undefined ? config.prio : 0,\n                            once      : listenerSpec.once !== undefined ? listenerSpec.once : config.once !== undefined ? config.once : false,\n                            buffer    : listenerSpec.buffer || config.buffer,\n                            throttle  : listenerSpec.throttle || config.throttle,\n                            $internal : config.$internal,\n                            catchAll  : key === 'catchAll'\n                        };\n                    if (deprecatedEvent) {\n                        const { product, invalidAsOfVersion, message } = deprecatedEvent;\n                        VersionHelper.deprecate(product, invalidAsOfVersion, message);\n                    }\n                    if (expires) {\n                        // Extract expires : { delay : 100, alt : 'onExpireFn' }\n                        const\n                            { alt } = expires,\n                            delay   = alt ? expires.delay : expires,\n                            name    = config.name || key,\n                            fn      = () => {\n                                me.un(eventName, listener);\n                                // If we make it here and the handler has not been called, invoke the alt handler\n                                if (alt && !listener.called) {\n                                    me.callback(alt, thisObj);\n                                }\n                            };\n                        if (me.isDelayable) {\n                            me.setTimeout({ fn, name, cancelOutstanding : true, delay });\n                        }\n                        else {\n                            globalThis.setTimeout(fn, delay);\n                        }\n                    }\n                    let listeners = events[eventName] || (events[eventName] = []);\n                    if (listeners.$firing) {\n                        events[eventName] = listeners = listeners.slice();\n                    }\n                    // Insert listener directly in prio order\n                    listeners.splice(\n                        ArrayHelper.findInsertionIndex(listener, listeners, priorityComparator, listeners.length),\n                        0, listener);\n                    if (!me.onListen.$nullFn && listeners.length < 2) {\n                        me.onListen(eventName);\n                    }\n                }\n            }\n            if (config.relayAll) {\n                me.relayAll(config.relayAll);\n            }\n            // Hook into the thisObj's destruction sequence to remove these listeners.\n            // Pass the default thisObj in for use when it comes to destruction time.\n            if (thisObj && thisObj !== me) {\n                me.attachAutoDetacher(config, thisObj);\n            }\n            const\n                detachable = config.detachable !== false,\n                name       = config.name,\n                destroy    = (config.expires || detachable || name) ? () => {\n                    // drop listeners if not destroyed yet\n                    if (!me.isDestroyed) {\n                        me.removeListener(config, thisObj);\n                    }\n                } : null;\n            if (destroy) {\n                destroy.eventer = me;\n                destroy.listenerName = name;\n                if (name && thisObj?.trackDetacher) {\n                    thisObj.trackDetacher(name, destroy);\n                }\n                if (config.expires) {\n                    // handle expires : { alt : timeoutHandler, delay : 2000 }\n                    me.delay(destroy, isNaN(config.expires) ? config.expires.delay : config.expires, name);\n                }\n                if (detachable) {\n                    return destroy;\n                }\n            }\n        }\n    }\n    /**\n     * Alias for {@link #function-addListener}. Adds an event listener. This method accepts parameters in the following format:\n     *\n     * ```javascript\n     *  myObject.on({\n     *      thisObj    : this,          // The this reference for the handlers\n     *      eventname2 : 'functionName' // Resolved at invocation time using the thisObj,\n     *      otherevent : {\n     *          fn      : 'handlerFnName',\n     *          once    : true          // Just this handler is auto-removed on fire\n     *      },\n     *      yetanother  : {\n     *          fn      : 'yetAnotherHandler',\n     *          args    : [ currentState1, currentState2 ] // Capture info to be passed to handler\n     *      },\n     *      prio        : 100           // Higher prio listeners are called before lower\n     *  });\n     * ```\n     *\n     * When listeners have a `thisObj` option, they are linked to the lifecycle of that object.\n     * When it is destroyed, those listeners are removed.\n     *\n     * The `config` parameter allows supplying options for the listener(s), for available options see {@link #typedef-BryntumListenerConfig}.\n     *\n     * A simpler signature may be used when only adding a listener for one event and no extra options\n     * (such as `once` or `delay`) are required:\n     *\n     * ```javascript\n     * myObject.on('click', myController.handleClicks, myController);\n     * ```\n     *\n     * The args in this simple case are `eventName`, `handler` and `thisObj`\n     *\n     * @param {BryntumListenerConfig|String} config An object containing listener definitions, or the event name to listen for\n     * @param {Object|Function} [thisObj] Default `this` reference for all listeners in the config object, or the handler\n     * function to call if providing a string as the first arg.\n     * @param {Object} [oldThisObj] The `this` reference if the old signature starting with a string event name is used..\n     * @returns {Function} Returns a detacher function unless configured with `detachable: false`. Call detacher to remove listeners\n     */\n    on(config, thisObj, oldThisObj) {\n        return this.addListener(config, thisObj, oldThisObj);\n    }\n    /**\n     * Internal convenience method for adding an internal listener, that cannot be removed by the user.\n     *\n     * Alias for `on({ $internal : true, ... })`. Only supports single argument form.\n     *\n     * @internal\n     */\n    ion(config) {\n        config.$internal = true;\n        return this.on(config);\n    }\n    /**\n     * Shorthand for {@link #function-removeListener}\n     * @param {Object|String} config A config object or the event name\n     * @param {Object|Function} [thisObj] `this` reference for all listeners, or the listener function\n     * @param {Object} [oldThisObj] `this` The `this` object for the legacy way of adding listeners\n     */\n    un(...args) {\n        this.removeListener(...args);\n    }\n    updateInternalListeners(internalListeners, oldInternalListeners) {\n        oldInternalListeners?.detach();\n        if (internalListeners) {\n            internalListeners.detach = this.ion(internalListeners);\n        }\n    }\n    get listeners() {\n        return this.eventListeners;\n    }\n    changeListeners(listeners) {\n        // If we are receiving class listeners, add them early, and they do not become\n        // the configured listeners, and are not removed by setting listeners during the lifecycle.\n        if (this.isConfiguring) {\n            // Pull in internal listeners first\n            this.getConfig('internalListeners');\n            if (listeners) {\n                this.on(listeners, this);\n            }\n        }\n        // Setting listeners after config time clears the old set and adds the new.\n        // This will initially happen at the tail end of the constructor when config\n        // listeners are set.\n        else {\n            // Configured listeners use this as the thisObj by default.\n            // Flatten using Objects.assign because it may have been part of\n            // a prototype chained default configuration of another object.\n            // eg: the tooltip config of a Widget.\n            // listener object blocks from multiple configuration levels are pushed\n            // onto an array (see listeners merge function in configurable block above).\n            // If this has happened, each entry must be processed like this.\n            if (Array.isArray(listeners)) {\n                for (let i = 0, l = listeners[0], { length } = listeners; i < length; l = listeners[++i]) {\n                    if (!('thisObj' in l)) {\n                        listeners[i] = Objects.assign({ thisObj : this }, l);\n                    }\n                }\n            }\n            else if (listeners && !('thisObj' in listeners)) {\n                listeners = Objects.assign({ thisObj : this }, listeners);\n            }\n            return listeners;\n        }\n    }\n    updateListeners(listeners, oldListeners) {\n        // Only configured listeners get here. Class listeners are added by changeListeners.\n        oldListeners && this.un(oldListeners);\n        listeners && this.on(listeners);\n    }\n    /**\n     * Removes an event listener. Same API signature as {@link #function-addListener}\n     * @param {Object|String} config A config object or the event name\n     * @param {Object|Function} thisObj `this` reference for all listeners, or the listener function\n     * @param {Object} oldThisObj `this` The `this` object for the legacy way of adding listeners\n     */\n    removeListener(config, thisObj = config.thisObj, oldThisObj) {\n        const me = this;\n        if (typeof config === 'string') {\n            return me.removeListener({ [config] : thisObj }, oldThisObj);\n        }\n        Object.entries(config).forEach(([eventName, listenerToRemove]) => {\n            if (!specialProperties[eventName] && listenerToRemove != null) {\n                eventName = eventName.toLowerCase();\n                const\n                    eventListeners = me.eventListeners,\n                    index = me.findListener(eventName, listenerToRemove, thisObj);\n                if (index >= 0) {\n                    let listeners = eventListeners[eventName];\n                    if (listeners.length > 1) {\n                        if (listeners.$firing) {\n                            eventListeners[eventName] = listeners = listeners.slice();\n                        }\n                        // NOTE: we cannot untrack any detachers here because we may only be\n                        // removing some of its listeners\n                        listeners.splice(index, 1);\n                    }\n                    else {\n                        delete eventListeners[eventName];\n                        if (!me.onUnlisten.$nullFn) {\n                            me.onUnlisten(eventName);\n                        }\n                    }\n                }\n            }\n        });\n        if (config.thisObj && !config.thisObj.isDestroyed) {\n            me.detachAutoDetacher(config);\n        }\n    }\n    /**\n     * Finds the index of a particular listener to the named event. Returns `-1` if the passed\n     * function/thisObj listener is not present.\n     * @param {String} eventName The name of an event to find a listener for.\n     * @param {String|Function} listenerToFind The handler function to find.\n     * @param {Object} defaultThisObj The `thisObj` for the required listener.\n     * @internal\n     */\n    findListener(eventName, listenerToFind, defaultThisObj) {\n        const\n            eventListeners = this.eventListeners?.[eventName],\n            fn             = listenerToFind.fn || listenerToFind,\n            thisObj        = listenerToFind.thisObj || defaultThisObj;\n        if (eventListeners) {\n            for (let listenerEntry, i = 0, { length } = eventListeners; i < length; i++) {\n                listenerEntry = eventListeners[i];\n                if (listenerEntry.fn === fn && listenerEntry.thisObj === thisObj) {\n                    return i;\n                }\n            }\n        }\n        return -1;\n    }\n    /**\n     * Check if any listener is registered for the specified eventName\n     * @param {String} eventName\n     * @returns {Boolean} `true` if listener is registered, otherwise `false`\n     */\n    hasListener(eventName) {\n        return Boolean(this.eventListeners?.[eventName?.toLowerCase()]);\n    }\n    /**\n     * Relays all events through another object that also implements Events mixin. Adds a prefix to the event name\n     * before relaying, for example add -> storeAdd\n     * ```\n     * // Relay all events from store through grid, will make it possible to listen for store events prefixed on grid:\n     * 'storeLoad', 'storeChange', 'storeRemoveAll' etc.\n     * store.relayAll(grid, 'store');\n     *\n     * grid.on('storeLoad', () => console.log('Store loaded');\n     * ```\n     * @param {Core.mixin.Events} through Object to relay the events through, needs to mix Events mixin in\n     * @param {String} prefix Prefix to add to event name\n     * @param {Boolean} [transformCase] Specify false to prevent making first letter of event name uppercase\n     */\n    relayAll(through, prefix, transformCase = true) {\n        if (!this.relayAllTargets) {\n            this.relayAllTargets = [];\n        }\n        const relayAllTargets = this.relayAllTargets;\n        through.on({\n            beforeDestroy : ({ source }) => {\n                if (source === through) {\n                    const configs = relayAllTargets.filter(r => r.through === through);\n                    configs.forEach(config => ArrayHelper.remove(relayAllTargets, config));\n                }\n            }\n        });\n        relayAllTargets.push({ through, prefix, transformCase });\n    }\n    /**\n     * Removes all listeners registered to this object by the application.\n     */\n    removeAllListeners(preserveInternal = true) {\n        const listeners = this.eventListeners;\n        let i, thisObj;\n        for (const event in listeners) {\n            const bucket = listeners[event];\n            // We iterate backwards since we call removeListener which will splice out of\n            // this array as we go...\n            for (i = bucket.length; i-- > 0; /* empty */) {\n                const cfg = bucket[i];\n                if (!cfg.$internal || !preserveInternal) {\n                    this.removeListener(event, cfg);\n                    thisObj = cfg.thisObj;\n                    thisObj?.untrackDetachers?.(this);\n                }\n            }\n        }\n    }\n    relayEvents(source, eventNames, prefix = '') {\n        const listenerConfig = { detachable : true, thisObj : this };\n        eventNames.forEach(eventName => {\n            listenerConfig[eventName] = (event, ...params) => {\n                return this.trigger(prefix + eventName, event, ...params);\n            };\n        });\n        return source.on(listenerConfig);\n    }\n    /**\n     * This method is called when the first listener for an event is added.\n     * @param {String} eventName\n     * @internal\n     */\n    onListen() {}\n    /**\n     * This method is called when the last listener for an event is removed.\n     * @param {String} eventName\n     * @internal\n     */\n    onUnlisten() {}\n    destructorInterceptor() {\n        const { autoDetachers, target, oldDestructor } = this;\n        // Remove listeners first, so that they do not fire during destruction.\n        // The observable being listened to by the thisObj may already have\n        // been destroyed in a clean up sequence\n        for (let i = 0; i < autoDetachers.length; i++) {\n            const { dispatcher, config } = autoDetachers[i];\n            if (!dispatcher.isDestroyed) {\n                dispatcher.removeListener(config, target);\n            }\n        }\n        oldDestructor.call(target);\n    }\n    /**\n     * Internal function used to hook destroy() calls when using thisObj\n     * @private\n     */\n    attachAutoDetacher(config, thisObj) {\n        const\n            target         = config.thisObj || thisObj,\n            // If it's a Bryntum Base subclass, hook doDestroy, otherwise, destroy\n            destructorName = ('doDestroy' in target) ? 'doDestroy' : 'destroy';\n        if (destructorName in target) {\n            let { $autoDetachers } = target;\n            if (!$autoDetachers) {\n                target.$autoDetachers = $autoDetachers = [];\n            }\n            if (!target.$oldDestructor) {\n                target.$oldDestructor = target[destructorName];\n                // Binding instead of using closure (used to use FunctionHelper.createInterceptor) to not retain target\n                // when detaching manually\n                target[destructorName] = this.destructorInterceptor.bind({\n                    autoDetachers : $autoDetachers,\n                    oldDestructor : target.$oldDestructor,\n                    target\n                });\n            }\n            $autoDetachers.push({ config, dispatcher : this });\n        }\n        else {\n            target[destructorName] = () => {\n                this.removeListener(config);\n            };\n        }\n    }\n    /**\n     * Internal function used restore hooked destroy() calls when using thisObj\n     * @private\n     */\n    detachAutoDetacher(config) {\n        const target = config.thisObj;\n        // Restore old destructor and remove from auto detachers only if we are not called as part of destruction.\n        // (Altering $autoDetachers affects destruction iterating over them, breaking it. It is pointless to clean up\n        // during destruction anyway, since everything gets removed)\n        if (target.$oldDestructor && !target.isDestroying) {\n            ArrayHelper.remove(\n                target.$autoDetachers,\n                target.$autoDetachers.find(detacher => detacher.config === config && detacher.dispatcher === this)\n            );\n            if (!target.$autoDetachers.length) {\n                target['doDestroy' in target ? 'doDestroy' : 'destroy'] = target.$oldDestructor;\n                target.$oldDestructor = null;\n            }\n        }\n    }\n    //endregion\n    //region Promise based workflow\n    // experimental, used in tests to support async/await workflow\n    await(eventName, options = { checkLog : true, resetLog : true, args : null }) {\n        const me = this;\n        if (options === false) {\n            options = { checkLog : false };\n        }\n        const { args } = options;\n        return new Promise(resolve => {\n            // check if previously triggered?\n            if (options.checkLog && me._triggered?.[eventName]) {\n                // resolve immediately, no params though...\n                resolve();\n                // reset log to be able to await again\n                if (options.resetLog) {\n                    me.clearLog(eventName);\n                }\n            }\n            // This branch will listen for events until catches one with specific arguments\n            if (args) {\n                const detacher = me.on({\n                    [eventName] : (...params) => {\n                        const argsOk = Object.keys(args).every(key => {\n                            return key in params[0] && params[0][key] === args[key];\n                        });\n                        if (argsOk) {\n                            // resolve when event is fired with required arguments\n                            resolve(...params);\n                            // reset log to be able to await again\n                            if (options.resetLog) {\n                                me.clearLog(eventName);\n                            }\n                            detacher();\n                        }\n                    },\n                    prio : -10000 // Let others do their stuff first\n                });\n            }\n            else {\n                me.on({\n                    [eventName] : (...params) => {\n                        // resolve when event is caught\n                        resolve(...params);\n                        // reset log to be able to await again\n                        if (options.resetLog) {\n                            me.clearLog(eventName);\n                        }\n                    },\n                    prio : -10000, // Let others do their stuff first\n                    once : true // promises can only be resolved once anyway\n                });\n            }\n        });\n    }\n    clearLog(eventName) {\n        if (this._triggered) {\n            if (eventName) {\n                delete this._triggered[eventName];\n            }\n            else {\n                this._triggered = {};\n            }\n        }\n    }\n    //endregion\n    //region Trigger\n    /**\n     * Triggers an event, calling all registered listeners with the supplied arguments. Returning false from any listener\n     * makes function return false.\n     * @param {String} eventName Event name for which to trigger listeners\n     * @param {Object} [param] Single parameter passed on to listeners, source property will be added to it (this)\n     * @param {Boolean} [param.bubbles] Pass as `true` to indicate that the event will bubble up the widget\n     * ownership hierarchy. For example up a `Menu`->`parent` Menu tree, or a `Field`->`Container` tree.\n     * @typings param -> {{bubbles?: boolean, [key: string]: any}}\n     * @returns {Boolean|Promise} Returns false if any listener returned `false`, or a `Promise` yielding\n     * `true` / `false` based on what is returned from the async listener functions, otherwise `true`\n     * @async\n     */\n    trigger(eventName, param) {\n        const\n            me   = this,\n            name = eventName.toLowerCase(),\n            {\n                eventsSuspended,\n                relayAllTargets,\n                callOnFunctions\n            }   = me;\n        let listeners = me.eventListeners?.[name],\n            handlerPromises;\n        // log trigger, used by experimental promise support to resolve immediately when needed\n        if (!me._triggered) {\n            me._triggered = {};\n        }\n        me._triggered[eventName] = true;\n        if (eventsSuspended) {\n            if (eventsSuspended.shouldQueue) {\n                eventsSuspended.queue.push(arguments);\n            }\n            return true;\n        }\n        // Include catchall listener for all events.\n        // Do not push the catchAll listeners onto the events own listener array.\n        if (me.eventListeners?.catchall) {\n            (listeners = (listeners ? listeners.slice() : [])).push(...me.eventListeners.catchall);\n            // The catchAll listeners must honour their prio settings.\n            listeners.sort(priorityComparator);\n        }\n        if (!listeners && !relayAllTargets && !callOnFunctions) {\n            return true;\n        }\n        // default to include source : this in param\n        if (param) {\n            if (!('source' in param)) {\n                if (Object.isExtensible(param)) {\n                    param.source = me;\n                }\n                else {\n                    param = Object.setPrototypeOf({\n                        source : me\n                    }, param);\n                }\n            }\n        }\n        else {\n            param = {\n                source : me\n            };\n        }\n        // Lowercased event name should be the \"type\" property in keeping with DOM events.\n        if (param.type !== name) {\n            // Create instance property because \"type\" is read only\n            if (param.constructor !== Object) {\n                Reflect.defineProperty(param, 'type', { get : () => name });\n            }\n            else {\n                param.type = name;\n            }\n        }\n        param.eventName = eventName;\n        // Bubble according to `bubbleEvents` config if `bubbles` is not explicitly set\n        if (!('bubbles' in param) && me.bubbleEvents?.[eventName]) {\n            param.bubbles = me.bubbleEvents[eventName];\n        }\n        if (callOnFunctions) {\n            const fnName = 'on' + StringHelper.capitalize(eventName);\n            if (fnName in me) {\n                // Return true if the on[fnName] is not set to keep default behavior\n                const result = me[fnName] ? me.callback(me[fnName], me, [param]) : true;\n                let inhibit;\n                if (Objects.isPromise(result)) {\n                    (handlerPromises || (handlerPromises = [])).push(result);\n                }\n                else {\n                    inhibit = result === false || inhibit;\n                }\n                // See if the called function was injected into the instance\n                // masking an implementation in the prototype.\n                // we must call the class's implementation after the injected one.\n                // unless it's an injected chained function, in which case it will have been called above.\n                // Note: The handler may have resulted in destruction.\n                if (!me.isDestroyed && hasOwnProperty.call(me, fnName) && !me.pluginFunctionChain?.[fnName]) {\n                    const myProto = Object.getPrototypeOf(me);\n                    if (fnName in myProto) {\n                        const result = myProto[fnName].call(me, param);\n                        if (Objects.isPromise(result)) {\n                            (handlerPromises || (handlerPromises = [])).push(result);\n                        }\n                        else {\n                            inhibit = result === false || inhibit;\n                        }\n                        // A handler may have resulted in destruction.\n                        if (me.isDestroyed) {\n                            return;\n                        }\n                    }\n                }\n                // Returning false from an on-function prevents further triggering\n                if (inhibit) {\n                    return false;\n                }\n            }\n        }\n        let ret;\n        if (listeners) {\n            let i = 0, internalAbort = false;\n            // Let add/removeListener know that we're using the array to protect against a situation where an event\n            // listener changes the listeners when triggering the event.\n            listeners.$firing = true;\n            // If any listener resulted in our destruction, abort.\n            for (i; i < listeners.length && !me.isDestroyed && !internalAbort; i++) {\n                const listener = listeners[i];\n                // Previously, returning false would abort all further listeners. But now internal listeners\n                // are allowed to run anyway\n                if (ret === false && !listener.$internal) {\n                    continue;\n                }\n                let handler,\n                    thisObj = listener.thisObj;\n                // Listeners that have thisObj are auto removed when thisObj is destroyed. If thisObj is destroyed from\n                // a listener we might still end up here, since listeners are sliced and not affected by the removal\n                if (!thisObj || !thisObj.isDestroyed) {\n                    // Flag for the expiry timer\n                    listener.called = true;\n                    if (listener.once) {\n                        me.removeListener(name, listener);\n                    }\n                    // prepare handler function\n                    if (typeof listener.fn === 'string') {\n                        if (thisObj) {\n                            handler = thisObj[listener.fn];\n                        }\n                        // keep looking for the callback in the hierarchy\n                        if (!handler) {\n                            const result = me.resolveCallback(listener.fn);\n                            handler = result.handler;\n                            thisObj = result.thisObj;\n                        }\n                    }\n                    else {\n                        handler = listener.fn;\n                    }\n                    // if `buffer` option is provided, the handler will be wrapped into buffer function,\n                    // but only once on the first call\n                    if (listener.buffer) {\n                        if (!listener.bufferFn) {\n                            const buffer = Number(listener.buffer);\n                            if (typeof buffer !== 'number' || isNaN(buffer)) {\n                                throw new Error(`Incorrect type for buffer, got \"${buffer}\" (expected a Number)`);\n                            }\n                            listener.bufferFn = FunctionHelper.createBuffered(handler, buffer, thisObj, listener.args);\n                        }\n                        handler = listener.bufferFn;\n                    }\n                    // if `throttle` option is provided, the handler will be called immediately, but all the rest calls\n                    // that happened during time specified in `throttle`, will be delayed and glued into 1 call\n                    if (listener.throttle) {\n                        const throttle = Number(listener.throttle);\n                        if (typeof throttle !== 'number' || isNaN(throttle)) {\n                            throw new Error(`Incorrect type for throttle, got \"${throttle}\" (expected a Number)`);\n                        }\n                        if (!listener.throttledFn) {\n                            listener.throttledFn = FunctionHelper.createThrottled(handler, throttle, thisObj, listener.args);\n                        }\n                        handler = listener.throttledFn;\n                    }\n                    const result = handler.call(thisObj || me, ...(listener.args || []), param);\n                    // Store result until we get a false return value, to mimic the old behavior from before we carried\n                    // on with calling internal listeners\n                    if (ret !== false) {\n                        ret = result;\n                    }\n                    if (listener.$internal && result === false) {\n                        internalAbort = true;\n                    }\n                    if (Objects.isPromise(result)) {\n                        result.$internal = listener.$internal;\n                        // If a handler is async (returns a Promise), then collect all Promises.\n                        // At the end we return a Promise which encapsulates all returned Promises\n                        // or, if only one handler was async, *the* Promise.\n                        // Don't allocate an Array until we have to.\n                        (handlerPromises || (handlerPromises = [])).push(result);\n                    }\n                }\n            }\n            listeners.$firing = false;\n            // An internal listener returned `false`, abort before relaying events etc.\n            if (internalAbort) {\n                return false;\n            }\n        }\n        // relay all?\n        relayAllTargets?.forEach(config => {\n            let name = eventName;\n            if (config.transformCase) {\n                name = StringHelper.capitalize(name);\n            }\n            if (config.prefix) {\n                name = config.prefix + name;\n            }\n            if (config.through.trigger(name, param) === false) {\n                return false;\n            }\n        });\n        // Use DOM standard event property name to indicate that the event\n        // bubbles up the owner axis.\n        // False from any handler cancels the bubble.\n        // Must also avoid owner if any handlers destroyed the owner.\n        if (param.bubbles && me.owner && !me.owner.isDestroyed) {\n            return me.owner.trigger(eventName, param);\n        }\n        // Run internal promises even if external listener returned false\n        handlerPromises = handlerPromises?.filter(p => ret !== false || p.$internal);\n        // If any handlers were async functions (returned a Promise), then return a Promise\n        // which resolves when they all resolve.\n        if (handlerPromises?.length) {\n            return new Promise(resolve => {\n                Promise.all(handlerPromises).then(promiseResults => {\n                    const finalResult = !promiseResults.some(result => result === false);\n                    resolve(finalResult);\n                });\n            });\n        }\n        return ret !== false;\n    }\n    /**\n     * Prevents events from being triggered until {@link #function-resumeEvents()} is called. Optionally queues events that are triggered while\n     * suspended. Multiple calls stack to require matching calls to `resumeEvents()` before actually resuming.\n     * @param {Boolean} queue Specify true to queue events triggered while suspended\n     */\n    suspendEvents(queue = false) {\n        const eventsSuspended = this.eventsSuspended || (this.eventsSuspended = { shouldQueue : queue, queue : [], count : 0 });\n        eventsSuspended.count++;\n    }\n    /**\n     * Resume event triggering after a call to {@link #function-suspendEvents()}. If any triggered events were queued they will be triggered.\n     * @returns {Boolean} `true` if events have been resumed (multiple calls to suspend require an equal number of resume calls to resume).\n     */\n    resumeEvents() {\n        const suspended = this.eventsSuspended;\n        if (suspended) {\n            if (--suspended.count === 0) {\n                this.eventsSuspended = null;\n                if (suspended.shouldQueue) {\n                    for (const queued of suspended.queue) {\n                        this.trigger(...queued);\n                    }\n                }\n            }\n        }\n        return !Boolean(this.eventsSuspended);\n    }\n    //endregion\n};\n", "/**\n * @module Core/localization/LocaleHelper\n */\n/**\n * @typedef {Object} LocaleKeys\n * Object which contains `key: value` localization pairs.\n * Key value may have `String`, `Function`, `LocaleKeys` or `Object` type.\n *\n * Example:\n *\n * ```javascript\n * {\n *     title   : 'Title',\n *     count   : number => `Count is ${number}`,\n *     MyClass : {\n *        foo : 'bar'\n *     }\n * }\n * ```\n *\n * @property {String|Function|LocaleKeys|Object} key localization key\n * @typings {[key: string]}:{string|number|Function|LocaleKeys|object}\n */\n/**\n * @typedef {LocaleKeys} Locale\n * Locale configuration object which contains locale properties alongside with localization pairs.\n *\n * Example:\n *\n * ```javascript\n {\n *     localeName : 'En',\n *     localeDesc : 'English (US)',\n *     localeCode : 'en-US',\n *     ... (localization key:value pairs)\n * }\n * ```\n *\n * @property {String} localeName Locale name. For example: \"En\"\n * @property {String} localeDesc Locale description to be shown in locale picker list. For example: \"English (US)\"\n * @property {String} localeCode Locale code. Two letter locale code or two letter locale and two letter country code.\n * For example: \"en\" or 'en_US'\n * @property {String} [localePath] Locale path for asynchronous loading using\n * AjaxHelper {@link Core.helper.AjaxHelper#function-get-static} request\n */\n/**\n * @typedef {Object} Locales\n * Object which contains locales. Each object key represents published locale by its `localeName`.\n *\n * Example:\n *\n * ```javascript\n * // This returns English locale.\n * const englishLocale = LocaleHelper.locales.En;\n * ```\n *\n * @property {Locale} key localization object\n * @typings {[key: string]}:{Locale}\n */\n/**\n * Thin class which provides locale management methods.\n * Class doesn't import other API classes and can be used separately for publishing locales before importing product classes.\n *\n * Locale should be published with {@link ##function-publishLocale-static} method before it is available for localizing of Bryntum API classes and widgets.\n *\n * Example:\n *\n * ```javascript\n * LocaleHelper.publishLocale({\n *     localeName : 'En',\n *     localeDesc : 'English (US)',\n *     localeCode : 'en-US',\n *     ... (localization key:value pairs)\n * });\n * ```\n *\n * or for asynchronous loading from remote path on applying locale\n *\n * ```javascript\n *LocaleHelper.publishLocale({\n *     localeName : 'En',\n *     localeDesc : 'English (US)',\n *     localeCode : 'en-US',\n *     localePath : 'https://my-server/localization/en.js'\n * });\n * ```\n */\nexport default class LocaleHelper {\n    static skipLocaleIntegrityCheck = false;\n    /**\n     * Merges all properties of provided locale objects into new locale object.\n     * Locales are merged in order they provided and locales which go later replace\n     * same properties of previous locales.\n     * @param {...Object} locales Locales to merge\n     * @returns {Object} Merged locale\n     */\n    static mergeLocales(...locales) {\n        const result = {};\n        locales.forEach(locale => {\n            Object.keys(locale).forEach(key => {\n                if (typeof locale[key] === 'object') {\n                    result[key] = { ...result[key], ...locale[key] };\n                }\n                else {\n                    result[key] = locale[key];\n                }\n            });\n        });\n        return result;\n    }\n    /**\n     * Removes all properties from `locale` that are present in the provided `toTrim`.\n     * @param {Object} locale Locale to process\n     * @param {Object} toTrim Object enumerating properties that should be removed.\n     * When `false` throws exceptions in such cases.\n     */\n    static trimLocale(locale, toTrim) {\n        const remove = (key, subKey) => {\n            if (locale[key]) {\n                if (subKey) {\n                    if (locale[key][subKey]) {\n                        delete locale[key][subKey];\n                    }\n                }\n                else {\n                    delete locale[key];\n                }\n            }\n        };\n        Object.keys(toTrim).forEach(key => {\n            if (Object.keys(toTrim[key]).length > 0) {\n                Object.keys(toTrim[key]).forEach(subKey => remove(key, subKey));\n            }\n            else {\n                remove(key);\n            }\n        });\n    }\n    /**\n     * Normalizes locale object to {@link Locale} type.\n     *\n     * Supported configs:\n     *\n     * ```javascript\n     * LocaleHelper.normalizeLocale({\n     *     localeName : 'En',\n     *     localeDesc : 'English (US)',\n     *     localeCode : 'en-US',\n     *     ... (localization key:value pairs)\n     * });\n     * ```\n     *\n     * and for backward compatibility\n     *\n     * ```javascript\n     * LocaleHelper.normalizeLocale('En', {\n     *     name : 'En',\n     *     desc : 'English (US)',\n     *     code : 'en-US',\n     *     locale : {\n     *         ... (localization key:value pairs)\n     *     }\n     * });\n     * ```\n     * @param {String|Object} nameOrConfig String name of locale or locale object\n     * @param {Object} [config] Locale object\n     * @returns {Locale} Locale object\n     * @internal\n     */\n    static normalizeLocale(nameOrConfig, config) {\n        if (!nameOrConfig) {\n            throw new Error(`\"nameOrConfig\" parameter can not be empty`);\n        }\n        if (typeof nameOrConfig === 'string') {\n            if (!config) {\n                throw new Error(`\"config\" parameter can not be empty`);\n            }\n            if (config.locale) {\n                // Matches legacy locale type\n                config.name = nameOrConfig || config.name;\n            }\n            else {\n                config.localeName = nameOrConfig;\n            }\n        }\n        else {\n            config = nameOrConfig;\n        }\n        let locale = {};\n        if (config.name || config.locale) {\n            // Matches legacy locale type\n            locale = Object.assign({\n                localeName : config.name\n            }, config.locale);\n            config.desc && (locale.localeDesc = config.desc);\n            config.code && (locale.localeCode = config.code);\n            config.path && (locale.localePath = config.path);\n        }\n        else {\n            if (!config.localeName) {\n                throw new Error(`\"config\" parameter doesn't have \"localeName\" property`);\n            }\n            // Extract locale config from name object\n            locale = Object.assign({}, config);\n        }\n        // Cleanup result\n        for (const key of ['name', 'desc', 'code', 'path']) {\n            if (locale[key]) {\n                delete locale[key];\n            }\n        }\n        if (!locale.localeName) {\n            throw new Error(`Locale name can not be empty`);\n        }\n        return locale;\n    }\n    /**\n     * Get/set currently published locales.\n     * Returns an object with locales.\n     *\n     * Example:\n     *\n     * ```javascript\n     * const englishLocale = LocaleHelper.locales.En;\n     * ```\n     *\n     * `englishLocale` contains {@link Locale} object.\n     *\n     * @readonly\n     * @member {Locales} locales\n     * @static\n     */\n    static get locales() {\n        return globalThis.bryntum.locales || {};\n    }\n    static set locales(locales) {\n        globalThis.bryntum.locales = locales;\n    }\n    /**\n     * Get/set current locale name. Defaults to \"En\"\n     * @member {String} localeName\n     * @static\n     */\n    static get localeName() {\n        return globalThis.bryntum.locale || 'En';\n    }\n    static set localeName(localeName) {\n        globalThis.bryntum.locale = localeName || LocaleHelper.localeName;\n    }\n    /**\n     * Get current locale config specified by {@link ##property-localeName-static}.\n     * If no current locale specified, returns default `En` locale or first published locale\n     * or empty locale object if no published locales found.\n     * @readonly\n     * @member {Locales} locale\n     * @static\n     */\n    static get locale() {\n        return LocaleHelper.localeName && this.locales[LocaleHelper.localeName] || this.locales.En || Object.values(this.locales)[0] || { localeName : '', localeDesc : '', localeCoode : '' };\n    }\n    /**\n     * Publishes a locale to make it available for applying.\n     * Published locales are available in {@link ##property-locales-static}.\n     *\n     * Recommended usage:\n     *\n     * ```javascript\n     * LocaleHelper.publishLocale({\n     *     localeName : 'En',\n     *     localeDesc : 'English (US)',\n     *     localeCode : 'en-US',\n     *     ... (localization key:value pairs)\n     * });\n     * ```\n     *\n     * for backward compatibility (prior to `5.3.0` version):\n     *\n     * ```javascript\n     * LocaleHelper.publishLocale('En', {\n     *     name : 'En',\n     *     desc : 'English (US)',\n     *     code : 'en-US',\n     *     locale : {\n     *         ... (localization key:value pairs)\n     *     }\n     * });\n     * ```\n     *\n     * Publishing a locale will automatically merge it's localization keys with existing locale matching by locale name,\n     * replacing existing one with new. To replace existing locale entirely pass `true` to optional `config` parameter.\n     *\n     * Example:\n     *\n     * ```javascript\n     * LocaleHelper.publishLocale({\n     *     localeName : 'En',\n     *     localeDesc : 'English (US)',\n     *     localeCode : 'en-US',\n     *     ... (localization key:value pairs)\n     * }, true);\n     * ```\n     *\n     * @param {String|Locale} nameOrConfig String name of locale (for example `En` or `SvSE`) or locale object\n     * @param {Locale|Boolean} [config] Locale object.\n     * Not used if locale object is passed as first method parameter.\n     * Path `true` value and locale object as first method parameter to publish locale without merging with existing one.\n     * @returns {Locale} Locale object\n     */\n    static publishLocale(nameOrConfig, config) {\n        const\n            { locales }    = globalThis.bryntum,\n            locale         = LocaleHelper.normalizeLocale(nameOrConfig, config),\n            { localeName } = locale;\n        if (!locales[localeName] || config === true) {\n            locales[localeName] = locale;\n        }\n        else {\n            locales[localeName] = this.mergeLocales(locales[localeName] || {}, locale || {});\n        }\n        return locales[localeName];\n    }\n}\nglobalThis.bryntum = globalThis.bryntum || {};\nglobalThis.bryntum.locales = globalThis.bryntum.locales || {};\nLocaleHelper._$name = 'LocaleHelper';", "import Base from '../Base.js';\nimport AjaxHelper from '../helper/AjaxHelper.js';\nimport Events from '../mixin/Events.js';\nimport BrowserHelper from '../helper/BrowserHelper.js';\nimport LocaleHelper from '../localization/LocaleHelper.js';\nimport VersionHelper from '../helper/VersionHelper.js';\n/**\n * @module Core/localization/LocaleManager\n */\n// Documented at the export below, to work for singleton\nclass LocaleManager extends Events(Base) {\n    static get defaultConfig() {\n        return {\n            // Enable strict locale checking by default for tests\n            throwOnMissingLocale : VersionHelper.isTestEnv\n        };\n    }\n    construct(...args) {\n        const me = this;\n        super.construct(...args);\n        if (BrowserHelper.isBrowserEnv) {\n            // Try get locale name from script's `default-locale` tag\n            const scriptTag = document.querySelector('script[data-default-locale]');\n            if (scriptTag) {\n                me.applyLocale(scriptTag.dataset.defaultLocale);\n            }\n            else if (me.locale?.localeName) {\n                me.applyLocale(me.locale.localeName);\n            }\n        }\n    }\n    /**\n     * Get/set currently registered locales.\n     * Alias for {@link Core.localization.LocaleHelper#property-locales-static LocaleHelper.locales}.\n     * @readonly\n     * @member {Locales} locales\n     */\n    get locales() {\n        return LocaleHelper.locales;\n    }\n    set locales(locales) {\n        LocaleHelper.locales = locales;\n    }\n    /**\n     * Get/set currently used locale.\n     * Setter calls {@link #function-applyLocale}.\n     * @member {Locales} locale\n     * @accepts {String|Locale}\n     */\n    set locale(nameOrConfig) {\n        this.applyLocale(nameOrConfig);\n    }\n    get locale() {\n        return LocaleHelper.locale;\n    }\n    /**\n     * Publishes a locale to make it available for applying.\n     * @deprecated Since 5.3.0. Use {@link Core.localization.LocaleHelper#function-publishLocale-static LocaleHelper.publishLocale} instead.\n     *\n     * @param {String|Locale} nameOrConfig String name of locale (for example `En` or `SvSE`) or locale object.\n     * @param {Locale} [config] Locale object. Not used if object is passed as first method parameter\n     * @returns {Locale} published locale object is passed as first method parameter\n     * @function registerLocale\n     */\n    registerLocale(nameOrConfig, config) {\n        VersionHelper.deprecate('Core', '6.0.0', 'LocaleManager.registerLocale deprecated, use LocaleHelper.publishLocale instead');\n        LocaleHelper.publishLocale(nameOrConfig, config);\n    }\n    /**\n     * Extends locale specified by name to add additional translations and applies it.\n     * @deprecated Since 5.3.0. Use {@link ##function-applyLocale} instead.\n     *\n     * @param {String} name Name of locale (for example `En` or `SvSE`).\n     * @param {Locale} config Locale object\n     * @returns {Locale|Promise} locale object or Promise which resolves with locale object after it was loaded\n     * @function extendLocale\n     */\n    extendLocale(name, config) {\n        VersionHelper.deprecate('Core', '6.0.0', 'LocaleManager.extendLocale deprecated, use LocaleManager.applyLocale instead');\n        const locale = LocaleHelper.publishLocale(name, config);\n        return this.applyLocale(locale, true);\n    }\n    /**\n     * Applies a locale by string name or publishes new locale configuration with\n     * {@link Core.localization.LocaleHelper#function-publishLocale-static} and applies it.\n     * If locale is specified by string name, like 'En', it must be published before applying it.\n     *\n     * @param {String|Locale} nameOrConfig String name of locale (for example `En` or `SvSE`) or locale object\n     * @param {Locale|Boolean} [config] Locale object. Pass `true` to reapply locale which is passed as first method parameter.\n     * @returns {Locale|Promise} locale object or Promise which resolves with locale object after it was loaded\n     * @fires locale\n     * @async\n     * @function applyLocale\n     */\n    applyLocale(nameOrConfig, config, ignoreError = false) {\n        const me = this;\n        let localeConfig;\n        if (typeof nameOrConfig === 'string') {\n            if (typeof config !== 'object') {\n                localeConfig = me.locales[nameOrConfig];\n                if (!localeConfig) {\n                    if (ignoreError) {\n                        return true;\n                    }\n                    throw new Error(`Locale \"${nameOrConfig}\" is not published. Publish with LocaleHelper.publishLocale() before applying.`);\n                }\n            }\n            else {\n                localeConfig = LocaleHelper.publishLocale(nameOrConfig, config);\n            }\n        }\n        else {\n            localeConfig = LocaleHelper.publishLocale(nameOrConfig);\n        }\n        if (me.locale.localeName && me.locale.localeName === localeConfig.localeName && config !== true) {\n            // no need to apply same locale again\n            return me.locale;\n        }\n        // Set current locale name\n        LocaleHelper.localeName = localeConfig.localeName;\n        const triggerLocaleEvent = () => {\n            /**\n             * Fires when a locale is applied\n             * @event locale\n             * @param {Core.localization.LocaleManager} source The Locale manager instance.\n             * @param {Locale} locale Locale configuration\n             */\n            me.trigger('locale', localeConfig);\n        };\n        if (localeConfig.localePath) {\n            return new Promise((resolve, reject) => {\n                me.loadLocale(localeConfig.localePath).then(response => {\n                    response.text().then(text => {\n                        const parseLocale = new Function(text);\n                        parseLocale();\n                        if (BrowserHelper.isBrowserEnv) {\n                            localeConfig = me.locales[localeConfig.localeName];\n                            // Avoid loading next time\n                            if (localeConfig) {\n                                delete localeConfig.localePath;\n                            }\n                        }\n                        triggerLocaleEvent();\n                        resolve(localeConfig);\n                    });\n                }).catch(response => reject(response));\n            });\n        }\n        triggerLocaleEvent();\n        return localeConfig;\n    }\n    /**\n     * Loads a locale using AjaxHelper {@link Core.helper.AjaxHelper#function-get-static} request.\n     * @private\n     * @param {String} path Path to locale file\n     * @async\n     */\n    loadLocale(path) {\n        return AjaxHelper.get(path);\n    }\n    /**\n     * Specifies if {@link Core.localization.Localizable#function-L-static Localizable.L()} function would throw error if no localization found at runtime.\n     *\n     * @member {Boolean} throwOnMissingLocale\n     * @default false\n     */\n    set throwOnMissingLocale(value) {\n        this._throwOnMissingLocale = value;\n    }\n    get throwOnMissingLocale() {\n        return this._throwOnMissingLocale;\n    }\n}\nconst LocaleManagerSingleton = new LocaleManager();\n/**\n * Singleton that handles switching locale.\n * Locales can be included on page with `<script>` tags or loaded using ajax.\n * When using script tags the first locale loaded is used per default, if another should be used as\n * default specify it on any `<script>` tag with `data-default-locale=\"En\"`.\n *\n * Example for Grid (to use for other products replace grid with product name):\n *\n * index.html:\n *\n * ```html\n * // Using Ecma 6 modules and source\n * <script type=\"module\" src=\"lib/Core/localization/SvSE.js\">\n *\n * // Specify default locale when using bundled locales\n * <script data-default-locale=\"En\" src=\"build/locales/grid.locale.En.js\">\n * <script src=\"build/locales/grid.locale.SvSE.js\">\n * ```\n *\n * app.js:\n *\n * ```javascript\n * // Import using sources\n * import LocaleManager from 'lib/Core/localization/LocaleManager.js';\n * // Or using module bundle\n * import { LocaleManager } from 'build/grid.module.js';\n *\n * // Set locale using method\n * LocaleManager.applyLocale('SvSE');\n *\n * // Or set locale using string property\n * LocaleManager.locale = 'SvSE';\n *\n * // Or set locale using locale object property\n * LocaleManager.locale = LocaleManager.locales.SvSE;\n * ```\n *\n * @demo Grid/localization\n * @class\n * @singleton\n */\nexport default LocaleManagerSingleton;\n", "import Base from '../Base.js';\nimport LocaleManager from './LocaleManager.js';\nimport LocaleHelper from './LocaleHelper.js';\nimport Objects from '../helper/util/Objects.js';\n/**\n * @module Core/localization/Localizable\n */\nconst\n    ObjectProto     = Object.getPrototypeOf(Object),\n    localeRe        = /L{.*?}/g,\n    capturelocaleRe = /L{(.*?)}/g,\n    classMatchRe    = /((.*?)\\.)?(.+)/g,\n    escape          = (txt) => txt.replace(/{(\\d+)}/gm, '[[$1]]'),\n    unescape        = (txt) => txt.replace(/\\[\\[(\\d+)]]/gm, '{$1}'),\n    emptyObject     = Object.freeze(Object.create(null));\n/**\n * Mixin that provides localization functionality to a class.\n *\n * ```javascript\n * // Get localized string\n * grid.L('foo');\n * grid.L('L{foo}');\n * ```\n *\n * @mixin\n */\nexport default Target => class Localizable extends (Target || Base) {\n    static get $name() {\n        return 'Localizable';\n    }\n    static get configurable() {\n        return {\n            /**\n             * A class translations of which are used for translating this entity.\n             * This is often used when translations of an item are defined on its container class.\n             * For example:\n             *\n             * ```js\n             * // Toolbar class that has some predefined items\n             * class MyToolbar extends Toolbar {\n             *\n             *     static get $name() {\n             *         return 'MyToolbar';\n             *     }\n             *\n             *     static get defaultConfig() {\n             *         return {\n             *             // this specifies default configs for the items\n             *             defaults : {\n             *                 // will tell items to use the toolbar locale\n             *                 localeClass : this\n             *             },\n             *\n             *             items : [\n             *                 // The toolbar has 2 buttons and translation for their texts will be searched in\n             *                 // the toolbar locales\n             *                 { text : 'Agree' },\n             *                 { text : 'Disagree' }\n             *             ]\n             *         };\n             *     }\n             *\n             *    ...\n             * }\n             * ```\n             * So if one makes a locale for the `MyToolbar` class that will include `Agree` and `Disagree` string translations:\n             * ```js\n             *     ...\n             *     MyToolbar : {\n             *         Agree    : 'Yes, I agree',\n             *         Disagree : 'No, I do not agree'\n             *     }\n             * ```\n             * They will be used for the toolbar buttons and the button captions will say `Yes, I agree` and `No, I do not agree`.\n             *\n             * @config {Core.Base}\n             * @typings {typeof Base}\n             * @category Misc\n             */\n            localeClass : null,\n            /**\n             * Set to `false` to disable localization of this object.\n             * @config {Boolean}\n             * @default true\n             * @category Misc\n             */\n            localizable : null,\n            /**\n             * List of properties which values should be translated automatically upon a locale applying.\n             * In case there is a need to localize not typical value (not a String value or a field with re-defined setter/getter),\n             * you could use 'localeKey' meta configuration.\n             * Example:\n             * ```js\n             *  static get configurable() {\n             *     return {\n             *          localizableProperties : ['width'],\n             *\n             *          width : {\n             *              value   : '54em', // default value here\n             *              $config : {\n             *                  localeKey : 'L{editorWidth}' // name of the property that will be used in localization file\n             *              }\n             *          }\n             *      };\n             *  }\n             * ```\n             * @config {String[]}\n             * @category Misc\n             */\n            localizableProperties : {\n                value : [],\n                $config : {\n                    merge : 'distinct'\n                }\n            }\n        };\n    }\n    static clsName(cls) {\n        return typeof cls === 'string' ? cls : cls === ObjectProto ? 'Object' : cls.$$name || cls.name || cls.prototype?.$$name || cls.prototype?.name;\n    }\n    static parseLocaleString(text) {\n        const matches = [];\n        let m;\n        // Parse locale text in case it's wrapped with L{foo}\n        if (text?.includes('L{')) {\n            // Escape fix for {1}, {2} etc. in locale str\n            text = escape(text);\n            capturelocaleRe.lastIndex = 0;\n            while ((m = capturelocaleRe.exec(text)) != null) {\n                classMatchRe.lastIndex = 0;\n                // Support for parsing class namespace L{Class.foo}\n                const classMatch = classMatchRe.exec(m[1]);\n                matches.push({\n                    match       : unescape(m[0]),\n                    localeKey   : unescape(classMatch[3]),\n                    localeClass : classMatch[2]\n                });\n            }\n        }\n        return matches.length > 0\n            ? matches\n            : [{\n                match       : text,\n                localeKey   : text,\n                localeClass : undefined\n            }];\n    }\n    construct(config = {}, ...args) {\n        // Base class applies configs.\n        super.construct(config, ...args);\n        LocaleManager.ion({ locale : 'updateLocalization', thisObj : this });\n        this.updateLocalization();\n    }\n    get localeClass() {\n        return this._localeClass || null;\n    }\n    localizeProperty(property) {\n        const\n            me           = this,\n            currentValue = Objects.getPath(me, property),\n            // Grid.column.Column is Localizable too. It uses fields, not configs\n            localeKey    = me.$meta.configs[property]?.localeKey || me.fieldMap?.[property]?.defaultValue;\n        let localizedValue;\n        // check if localeKey is defined and try to translate it\n        if (localeKey) {\n            localizedValue = Localizable.localize(localeKey, me, me.localeClass || me);\n            // if a user set value directly in class definition, his value has a prio\n            if (localizedValue && !(property in (me.initialConfig || emptyObject))) {\n                Objects.setPath(me.isColumn ? me.data : me, property, localizedValue);\n            }\n        }\n        else if (typeof currentValue === 'string') {\n            me.originalLocales = me.originalLocales || {};\n            localizedValue = Objects.getPath(me.originalLocales, property);\n            // If we haven't saved original values yet let's do that\n            if (localizedValue === undefined) {\n                Objects.setPath(me.originalLocales, property, currentValue);\n                localizedValue = currentValue;\n            }\n            // Doing localization from the original values\n            if (localizedValue) {\n                Objects.setPath(me, property, localizedValue = me.optionalL(localizedValue, me));\n            }\n        }\n        return localizedValue || currentValue;\n    }\n    /**\n     * Method that is triggered when applying a locale to the instance\n     * (happens on the instance construction steps and when switching to another locale).\n     *\n     * The method can be overridden to dynamically translate the instance when locale is switched.\n     * When overriding the method please make sure you call `super.updateLocalization()`.\n     * @category Misc\n     */\n    updateLocalization() {\n        if (this.localizable !== false) {\n            this.localizableProperties?.forEach(this.localizeProperty, this);\n            this.trigger?.('localized');\n        }\n    }\n    static getTranslation(text, templateData, localeCls) {\n        const locale = LocaleManager.locale;\n        let result = null,\n            clsName,\n            cls;\n        if (locale) {\n            // Iterate over all found localization entries\n            for (const { match, localeKey, localeClass } of this.parseLocaleString(text)) {\n                const translate = (clsName) => {\n                    const translation = locale[clsName]?.[localeKey];\n                    if (translation) {\n                        if (typeof translation === 'function') {\n                            result = templateData != null ? translation(templateData) : translation;\n                        }\n                        else if (typeof translation === 'object' || text === match) {\n                            result = translation;\n                        }\n                        // Likely string\n                        else {\n                            result = (result || text).replace(match, translation);\n                        }\n                        // Might have nested L{, recurse\n                        if (typeof translation === 'string' && translation.includes('L{')) {\n                            result = this.getTranslation(translation, templateData, localeCls);\n                        }\n                    }\n                    return translation;\n                };\n                // Translate order\n                // 1. Try to translate for current class\n                // 2. Try to translate by Class hierarchy traversing prototypes\n                // 3. Try to translate if Class is in {Class.foo} format\n                let success = false;\n                for (cls = localeCls; cls && (clsName = Localizable.clsName(cls)); cls = Object.getPrototypeOf(cls)) {\n                    if ((success = translate(clsName))) {\n                        break;\n                    }\n                    else if (typeof cls === 'string') {\n                        break;\n                    }\n                }\n                if (!success && localeClass) {\n                    translate(localeClass);\n                }\n            }\n        }\n        return result;\n    }\n    /**\n     * Get localized string, returns `null` if no localized string found.\n     * @param {String} text String key\n     * @param {Object} [templateData] Data to supply to template if localized string is a function\n     * @returns {String}\n     * @internal\n     */\n    static localize(text, templateData = undefined, ...localeClasses) {\n        // In case this static method is called directly third argument is not provided\n        // just fallback to searching locales for the class itself\n        if (localeClasses?.length === 0) {\n            localeClasses = [this];\n        }\n        let translation = null;\n        localeClasses.some(cls => {\n            translation = Localizable.getTranslation(text, templateData, cls);\n            return translation != null;\n        });\n        return translation;\n    }\n    /**\n     * Get localized string, returns value of `text` if no localized string found.\n     *\n     * If {@link Core.localization.LocaleManager#property-throwOnMissingLocale LocaleManager.throwOnMissingLocale}\n     * is `true` then calls to `L()` will throw `Localization is not found for 'text' in 'ClassName'` exception when no\n     * localization is found.\n     *\n     * @param {String} text String key\n     * @param {Object} [templateData] Data to supply to template if localized string is a function\n     * @static\n     * @returns {String}\n     */\n    static L(text, templateData = undefined, ...localeClasses) {\n        // In case this static method is called directly third argument is not provided\n        // just fallback to searching locales for the class itself\n        if (localeClasses?.length === 0) {\n            localeClasses = [this];\n        }\n        const translation = this.localize(text, templateData, ...localeClasses);\n        // Throw error if not localized and text matches `L{foo}`\n        if (\n            translation == null &&\n            LocaleManager.throwOnMissingLocale &&\n            text.includes('L{')\n        ) {\n            throw new Error(`Localization is not found for '${text}' in '${localeClasses.map(cls => Localizable.clsName(cls)).join(', ')}'. ${LocaleManager.locale.localeName ? `Locale : ${LocaleManager.locale.localeName}` : ''}`);\n        }\n        return translation ?? text;\n    }\n    /**\n     * Convenience function that can be called directly on the class that mixes Localizable in\n     *\n     * ```javascript\n     * button.text = grid.L('L{group}');\n     * ```\n     *\n     * @param {String} text String key\n     * @param {Object} [templateData] Data to supply to template if localized string is a function\n     * @returns {String}\n     * @category Misc\n     */\n    L(text, templateData) {\n        const { localeClass, constructor } = this;\n        // If we have a different class set as translations provider\n        // pass it first and use the class being translated as a fallback provider\n        if (localeClass && Localizable.clsName(localeClass) !== Localizable.clsName(constructor)) {\n            return Localizable.L(text, templateData, localeClass, constructor);\n        }\n        else {\n            return Localizable.L(text, templateData, constructor);\n        }\n    }\n    /**\n     * Convenience function to get an optional translation. The difference compared to `L()` is that it won't throw\n     * an error when the translation is missing even if configured with `throwOnMissingLocale`\n     *\n     * ```javascript\n     * button.text = grid.optionalL('L{group}');\n     * ```\n     *\n     * @param {String} text String key\n     * @param {Object} [templateData] Data to supply to template if localized string is a function\n     * @returns {String}\n     * @static\n     * @category Misc\n     */\n    static optionalL(text, templateData = undefined, ...localeClasses) {\n        const shouldThrow = LocaleManager.throwOnMissingLocale;\n        LocaleManager.throwOnMissingLocale = shouldThrow && localeRe.test(text);\n        // In case this static method is called directly third argument is not provided\n        // just fallback to searching locales for the class itself\n        if (localeClasses?.length === 0) {\n            localeClasses = [this];\n        }\n        const result = Localizable.L(text, templateData, ...localeClasses);\n        LocaleManager.throwOnMissingLocale = shouldThrow;\n        return result;\n    }\n    /**\n     * Convenience function to get an optional translation. The difference compared to `L()` is that it won't throw\n     * an error when the translation is missing even if configured with `throwOnMissingLocale`\n     *\n     * ```javascript\n     * button.text = grid.optionalL('L{group}');\n     * ```\n     *\n     * @param {String} text String key\n     * @param {Object} [templateData] Data to supply to template if localized string is a function\n     * @param {Boolean} [preventThrow] Prevent throwing error even if localized text matches `L{foo}`\n     * @returns {String}\n     * @category Misc\n     * @internal\n     */\n    optionalL(text, templateData = this, preventThrow = false) {\n        const shouldThrow = LocaleManager.throwOnMissingLocale;\n        // Optional locale text should not include L{}\n        LocaleManager.throwOnMissingLocale = shouldThrow && localeRe.test(text) && !preventThrow;\n        const result = this.L(text, templateData);\n        LocaleManager.throwOnMissingLocale = shouldThrow;\n        return result;\n    }\n    /**\n     * Get the global LocaleManager\n     * @property {Core.localization.LocaleManager}\n     * @typings {typeof LocaleManager}\n     * @category Misc\n     * @readonly\n     */\n    get localeManager() {\n        return LocaleManager;\n    }\n    /**\n     * Get the global LocaleHelper\n     * @property {Core.localization.LocaleHelper}\n     * @typings {typeof LocaleHelper}\n     * @category Misc\n     * @readonly\n     */\n    get localeHelper() {\n        return LocaleHelper;\n    }\n};\n", "import LocaleHelper from '../../Core/localization/LocaleHelper.js';\nconst locale = {\n    localeName : 'En',\n    localeDesc : 'English (US)',\n    localeCode : 'en-US',\n    Object : {\n        Yes    : 'Yes',\n        No     : 'No',\n        Cancel : 'Cancel',\n        Ok     : 'OK',\n        Week   : 'Week'\n    },\n    Combo : {\n        noResults          : 'No results',\n        recordNotCommitted : 'Record could not be added',\n        addNewValue        : value => `Add ${value}`\n    },\n    FilePicker : {\n        file : 'File'\n    },\n    Field : {\n        badInput              : 'Invalid field value',\n        patternMismatch       : 'Value should match a specific pattern',\n        rangeOverflow         : value => `Value must be less than or equal to ${value.max}`,\n        rangeUnderflow        : value => `Value must be greater than or equal to ${value.min}`,\n        stepMismatch          : 'Value should fit the step',\n        tooLong               : 'Value should be shorter',\n        tooShort              : 'Value should be longer',\n        typeMismatch          : 'Value is required to be in a special format',\n        valueMissing          : 'This field is required',\n        invalidValue          : 'Invalid field value',\n        minimumValueViolation : 'Minimum value violation',\n        maximumValueViolation : 'Maximum value violation',\n        fieldRequired         : 'This field is required',\n        validateFilter        : 'Value must be selected from the list'\n    },\n    DateField : {\n        invalidDate : 'Invalid date input'\n    },\n    DatePicker : {\n        gotoPrevYear  : 'Go to previous year',\n        gotoPrevMonth : 'Go to previous month',\n        gotoNextMonth : 'Go to next month',\n        gotoNextYear  : 'Go to next year'\n    },\n    NumberFormat : {\n        locale   : 'en-US',\n        currency : 'USD'\n    },\n    DurationField : {\n        invalidUnit : 'Invalid unit'\n    },\n    TimeField : {\n        invalidTime : 'Invalid time input'\n    },\n    TimePicker : {\n        hour   : 'Hour',\n        minute : 'Minute',\n        second : 'Second'\n    },\n    List : {\n        loading : 'Loading...'\n    },\n    GridBase : {\n        loadMask : 'Loading...',\n        syncMask : 'Saving changes, please wait...'\n    },\n    PagingToolbar : {\n        firstPage         : 'Go to first page',\n        prevPage          : 'Go to previous page',\n        page              : 'Page',\n        nextPage          : 'Go to next page',\n        lastPage          : 'Go to last page',\n        reload            : 'Reload current page',\n        noRecords         : 'No records to display',\n        pageCountTemplate : data => `of ${data.lastPage}`,\n        summaryTemplate   : data => `Displaying records ${data.start} - ${data.end} of ${data.allCount}`\n    },\n    PanelCollapser : {\n        Collapse : 'Collapse',\n        Expand   : 'Expand'\n    },\n    Popup : {\n        close : 'Close'\n    },\n    UndoRedo : {\n        Undo           : 'Undo',\n        Redo           : 'Redo',\n        UndoLastAction : 'Undo last action',\n        RedoLastAction : 'Redo last undone action',\n        NoActions      : 'No items in the undo queue'\n    },\n    FieldFilterPicker : {\n        equals                 : 'equals',\n        doesNotEqual           : 'does not equal',\n        isEmpty                : 'is empty',\n        isNotEmpty             : 'is not empty',\n        contains               : 'contains',\n        doesNotContain         : 'does not contain',\n        startsWith             : 'starts with',\n        endsWith               : 'ends with',\n        isOneOf                : 'is one of',\n        isNotOneOf             : 'is not one of',\n        isGreaterThan          : 'is greater than',\n        isLessThan             : 'is less than',\n        isGreaterThanOrEqualTo : 'is greater than or equal to',\n        isLessThanOrEqualTo    : 'is less than or equal to',\n        isBetween              : 'is between',\n        isNotBetween           : 'is not between',\n        isBefore               : 'is before',\n        isAfter                : 'is after',\n        isToday                : 'is today',\n        isTomorrow             : 'is tomorrow',\n        isYesterday            : 'is yesterday',\n        isThisWeek             : 'is this week',\n        isNextWeek             : 'is next week',\n        isLastWeek             : 'is last week',\n        isThisMonth            : 'is this month',\n        isNextMonth            : 'is next month',\n        isLastMonth            : 'is last month',\n        isThisYear             : 'is this year',\n        isNextYear             : 'is next year',\n        isLastYear             : 'is last year',\n        isYearToDate           : 'is year to date',\n        isTrue                 : 'is true',\n        isFalse                : 'is false',\n        selectAProperty        : 'Select a property',\n        selectAnOperator       : 'Select an operator',\n        caseSensitive          : 'Case-sensitive',\n        and                    : 'and',\n        dateFormat             : 'D/M/YY',\n        selectOneOrMoreValues  : 'Select one or more values',\n        enterAValue            : 'Enter a value',\n        enterANumber           : 'Enter a number',\n        selectADate            : 'Select a date'\n    },\n    FieldFilterPickerGroup : {\n        addFilter : 'Add filter'\n    },\n    DateHelper : {\n        locale         : 'en-US',\n        weekStartDay   : 0,\n        nonWorkingDays : {\n            0 : true,\n            6 : true\n        },\n        weekends : {\n            0 : true,\n            6 : true\n        },\n        unitNames : [\n            { single : 'millisecond', plural : 'ms', abbrev : 'ms' },\n            { single : 'second', plural : 'seconds', abbrev : 's' },\n            { single : 'minute', plural : 'minutes', abbrev : 'min' },\n            { single : 'hour', plural : 'hours', abbrev : 'h' },\n            { single : 'day', plural : 'days', abbrev : 'd' },\n            { single : 'week', plural : 'weeks', abbrev : 'w' },\n            { single : 'month', plural : 'months', abbrev : 'mon' },\n            { single : 'quarter', plural : 'quarters', abbrev : 'q' },\n            { single : 'year', plural : 'years', abbrev : 'yr' },\n            { single : 'decade', plural : 'decades', abbrev : 'dec' }\n        ],\n        unitAbbreviations : [\n            ['mil'],\n            ['s', 'sec'],\n            ['m', 'min'],\n            ['h', 'hr'],\n            ['d'],\n            ['w', 'wk'],\n            ['mo', 'mon', 'mnt'],\n            ['q', 'quar', 'qrt'],\n            ['y', 'yr'],\n            ['dec']\n        ],\n        parsers : {\n            L   : 'MM/DD/YYYY',\n            LT  : 'HH:mm A',\n            LTS : 'HH:mm:ss A'\n        },\n        ordinalSuffix : number => {\n            const hasSpecialCase = ['11', '12', '13'].find((n) => number.endsWith(n));\n            let suffix = 'th';\n            if (!hasSpecialCase) {\n                const lastDigit = number[number.length - 1];\n                suffix = { 1 : 'st', 2 : 'nd', 3 : 'rd' }[lastDigit] || 'th';\n            }\n            return number + suffix;\n        }\n    }\n};\nexport default LocaleHelper.publishLocale(locale);\n", "import Localizable from '../localization/Localizable.js';\nimport LocaleManager from '../localization/LocaleManager.js';\nimport '../localization/En.js';\nimport StringHelper from './StringHelper.js';\nimport Objects from './util/Objects.js';\nconst\n    { toString }        = Object.prototype,\n    DATE_TYPE           = toString.call(new Date()),\n    tempDate            = new Date(),\n    MS_PER_HOUR         = 1000 * 60 * 60,\n    defaultValue        = (value, defValue) => isNaN(value) || value == null ? defValue : value,\n    rangeFormatPartRe   = /([ES]){([^}]+)}/g,\n    enOrdinalSuffix     = number => {\n        const hasSpecialCase = ['11', '12', '13'].find((n) => number.endsWith(n));\n        let suffix = 'th';\n        if (!hasSpecialCase) {\n            const lastDigit = number[number.length - 1];\n            suffix          = { 1 : 'st', 2 : 'nd', 3 : 'rd' }[lastDigit] || 'th';\n        }\n        return number + suffix;\n    },\n    useIntlFormat       = (name, options, date) => {\n        const formatter = intlFormatterCache[name] || (intlFormatterCache[name] = new Intl.DateTimeFormat(locale, options));\n        return formatter.format(date);\n    },\n    formatTime          = (name, options, date, isShort = false) => {\n        let strTime = useIntlFormat(name, options, date);\n        // remove '0' from time when has AM/PM (from 01:00 PM to 1:00 PM): https://github.com/bryntum/support/issues/1483\n        if (/am|pm/i.test(strTime)) {\n            // remove first character only if is 0\n            strTime = strTime.replace(/^0/, '');\n            // if isShort is true, remove minutes if is :00\n            if (isShort) {\n                strTime = strTime.replace(/:00/, '');\n            }\n        }\n        return strTime;\n    },\n    getDayDiff   = (end, start) => Math.floor((end.getTime() - start.getTime() -\n        (end.getTimezoneOffset() - start.getTimezoneOffset()) * validConversions.minute.millisecond) / validConversions.day.millisecond) + 1,\n    normalizeDay = day => day >= 0 ? day : day + 7,\n    msRegExp     = /([^\\w])(S+)/gm,\n    msReplacer   = (match, g1) => g1 + 'SSS',\n    splitRegExp  = /[:.\\-/\\s]/;\n// These vars are set when changing locale\nlet locale             = 'en-US',\n    ordinalSuffix      = enOrdinalSuffix,\n    // Used to cache used formats, to not have to parse format string each time\n    formatCache        = {},\n    formatRedirects    = {},\n    intlFormatterCache = {},\n    parserCache        = {};\nconst redirectFormat = (format) => {\n    const intlConfig = intlFormatConfigs[format];\n    if (!intlConfig) {\n        throw new Error('Only international formats should be used here');\n    }\n    if (formatRedirects[format] !== undefined) {\n        return formatRedirects[format];\n    }\n    const\n        intl = new Intl.DateTimeFormat(locale, intlConfig),\n        fmt = intl.formatToParts(new Date(2001, 1, 2, 3, 4, 5, 6)).map(part => {\n            const\n                type = part.type,\n                intlCfg = intlConfig[type];\n            if (type === 'literal') {\n                // here we cheat again, because our parser can not skip unknown separators\n                return part.value.replace(/,/g, '');\n            }\n            else if (type === 'day') {\n                return intlCfg === 'numeric' ? 'D' : 'DD';\n            }\n            else if (type === 'month') {\n                return intlCfg === 'short'\n                    ? 'MMM'\n                    : intlCfg === 'long'\n                        ? 'MMMM'\n                        : intlCfg === 'numeric'\n                            ? 'M'\n                            : 'MM';\n            }\n            else if (type === 'year') {\n                // here we cheat a little, using `YYYY` for numeric year in `ll`\n                // this is to simplify the fix for https://github.com/bryntum/support/issues/5179\n                // to be fixed if anyone complains\n                return intlCfg === 'numeric' ? 'YYYY' : 'YY';\n            }\n        }).join('');\n    return formatRedirects[format] = fmt;\n};\nconst\n    DEFAULT_YEAR               = 2020, // 2020 is the year that has no issues in Safari, see: https://github.com/bryntum/support/issues/554\n    DEFAULT_MONTH              = 0,\n    DEFAULT_DAY                = 1,\n    intlFormatConfigs          = {\n        l  : { year : 'numeric', month : 'numeric', day : 'numeric' },\n        ll : { year : 'numeric', month : 'short', day : 'numeric' }\n    },\n    formats                    = {\n        // 1, 2, ... 11, 12\n        M    : date => date.getMonth() + 1, //date.toLocaleDateString(locale, { month : 'numeric' }),\n        // 1st, 2nd, 3rd, 4th, ... 11th, 12th\n        Mo   : date => ordinalSuffix(formats.M(date).toString()),\n        // 01, 02, ...\n        MM   : date => (date.getMonth() + 1).toString().padStart(2, '0'), //date.toLocaleDateString(locale, { month : '2-digit' }),\n        // Jan, Feb, ...\n        MMM  : date => useIntlFormat('MMM', { month : 'short' }, date),\n        // January, February, ...\n        MMMM : date => useIntlFormat('MMMM', { month : 'long' }, date),\n        // 1, 2, ...\n        Q  : date => Math.ceil((date.getMonth() + 1) / 3),\n        // 1st, 2nd, ...\n        Qo : date => ordinalSuffix(formats.Q(date).toString()),\n        // 1, 2, ...\n        D  : date => date.getDate(), //date.toLocaleDateString(locale, { day : 'numeric' }),\n        // 1st, 2nd, ...\n        Do : date => ordinalSuffix(formats.D(date).toString()),\n        // 01, 02, ...\n        DD : date => date.getDate().toString().padStart(2, '0'), //date.toLocaleDateString(locale, { day : '2-digit' }),\n        // 1, 2, ..., 365, 365\n        DDD : date => Math.ceil(\n            (\n                new Date(date.getFullYear(), date.getMonth(), date.getDate(), 12, 0, 0) -\n                new Date(date.getFullYear(), 0, 0, 12, 0, 0)\n            ) / validConversions.day.millisecond),\n        // 1st, 2nd, ...\n        DDDo : date => ordinalSuffix(formats.DDD(date).toString()),\n        // 001, 002, ...\n        DDDD : date => formats.DDD(date).toString().padStart(3, '0'),\n        // 0, 1, ..., 6\n        d    : date => date.getDay(),\n        // 0th, 1st, ...\n        do   : date => ordinalSuffix(date.getDay().toString()),\n        // S, M, ...\n        d1   : date => useIntlFormat('d1', { weekday : 'narrow' }, date).substr(0, 1),\n        // Su, Mo, ...\n        dd   : date => formats.ddd(date).substring(0, 2),\n        // Sun, Mon, ...\n        ddd  : date => useIntlFormat('ddd', { weekday : 'short' }, date),\n        // Sunday, Monday, ...\n        dddd : date => useIntlFormat('dddd', { weekday : 'long' }, date),\n        u : date => {\n            const\n                formatter = intlFormatterCache.u || (intlFormatterCache.u = new Intl.DateTimeFormat('en-GB', {\n                    timeZone : 'UTC',\n                    year     : 'numeric',\n                    month    : '2-digit',\n                    day      : '2-digit'\n                })),\n                parts = formatter.formatToParts(date);\n            return `${parts[4].value}${parts[2].value}${parts[0].value}Z`;\n        },\n        uu : date => {\n            const\n                formatter = intlFormatterCache.uu || (intlFormatterCache.uu = new Intl.DateTimeFormat('en-GB', {\n                    timeZone : 'UTC',\n                    hour12   : false,\n                    year     : 'numeric',\n                    month    : '2-digit',\n                    day      : '2-digit',\n                    hour     : '2-digit',\n                    minute   : '2-digit',\n                    second   : '2-digit'\n                })),\n                parts = formatter.formatToParts(date);\n            return `${parts[4].value}${parts[2].value}${parts[0].value}T${parts[6].value}${parts[8].value}${parts[10].value}Z`;\n        },\n        e : date => date.getDay(),\n        E : date => date.getDay() + 1,\n        // ISO week, 1, 2, ...\n        W  : date => DateHelper.getWeekNumber(date)[1],\n        Wo : date => ordinalSuffix(formats.W(date).toString()),\n        WW : date => formats.W(date).toString().padStart(2, '0'),\n        // ISO week, 1, 2, ... with localized 'Week ' prefix\n        Wp   : date => `${DateHelper.localize('L{Week}')} ${formats.W(date)}`,\n        WWp  : date => `${DateHelper.localize('L{Week}')} ${formats.WW(date)}`,\n        Wp0  : date => `${DateHelper.localize('L{Week}')[0]}${formats.W(date)}`,\n        WWp0 : date => `${DateHelper.localize('L{Week}')[0]}${formats.WW(date)}`,\n        // 1979, 2018\n        Y    : date => date.getFullYear(), //date.toLocaleDateString(locale, { year : 'numeric' }),\n        // 79, 18\n        YY   : date => date.getFullYear() % 100, //date.toLocaleDateString(locale, { year : '2-digit' }),\n        // 1979, 2018\n        YYYY : date => date.getFullYear(), //date.toLocaleDateString(locale, { year : 'numeric' }),\n        // AM, PM\n        A : date => date.getHours() < 12 ? 'AM' : 'PM',\n        a : date => date.getHours() < 12 ? 'am' : 'pm',\n        // 0, 1, ... 23\n        H  : date => date.getHours(),\n        // 00, 01, ...\n        HH : date => date.getHours().toString().padStart(2, '0'),\n        // 1, 2, ... 12\n        h  : date => (date.getHours() % 12) || 12,\n        // 01, 02, ...\n        hh : date => formats.h(date).toString().padStart(2, '0'),\n        // 1, 2, ... 24\n        k  : date => date.getHours() || 24,\n        // 01, 02, ...\n        kk : date => formats.k(date).toString().padStart(2, '0'),\n        // Locale specific (0 -> 24 or 1 AM -> 12 PM)\n        K  : date => formatTime('K', { hour : 'numeric' }, date),\n        // Locale specific (00 -> 24 or 1 AM -> 12 PM)\n        KK : date => formatTime('KK', { hour : '2-digit' }, date),\n        // 0, 1, ... 59\n        m  : date => date.getMinutes(), //date.toLocaleTimeString(locale, { minute : 'numeric' }),\n        // 00, 01, ...\n        mm : date => formats.m(date).toString().padStart(2, '0'),\n        // 0, 1, ... 59\n        s  : date => date.getSeconds(), //date.toLocaleTimeString(locale, { second : 'numeric' }),\n        // 00, 01, ...\n        ss : date => formats.s(date).toString().padStart(2, '0'),\n        // 0, 1, ... 9 which are 000, 100, 200 ... 900 in milliseconds\n        S   : date => Math.floor(date.getMilliseconds() / 100).toString(),\n        // 00, 01, ... 99 which are 000, 010, 020 ... 990 in milliseconds\n        SS  : date => Math.floor(date.getMilliseconds() / 10).toString().padStart(2, '0'),\n        // 000, 001, ... 999 in milliseconds\n        SSS : date => date.getMilliseconds().toString().padStart(3, '0'),\n        z  : date => useIntlFormat('z', { timeZoneName : 'short' }, date),\n        zz : date => useIntlFormat('zz', { timeZoneName : 'long' }, date),\n        Z  : date => DH.getGMTOffset(date),\n        LT  : date => formatTime('LT', { hour : '2-digit', minute : '2-digit' }, date),\n        // if minutes is 0, doesn't show it\n        LST : date => formatTime('LST', { hour : 'numeric', minute : '2-digit' }, date, true),\n        LTS : date => formatTime('LTS', { hour : '2-digit', minute : '2-digit', second : '2-digit' }, date),\n        L   : date => useIntlFormat('L', { year : 'numeric', month : '2-digit', day : '2-digit' }, date),\n        l   : date => useIntlFormat('l', intlFormatConfigs.l, date),\n        LL  : date => useIntlFormat('LL', { year : 'numeric', month : 'long', day : 'numeric' }, date),\n        ll  : date => useIntlFormat('ll', intlFormatConfigs.ll, date),\n        LLL : date => useIntlFormat('LLL', {\n            year   : 'numeric',\n            month  : 'long',\n            day    : 'numeric',\n            hour   : 'numeric',\n            minute : '2-digit'\n        }, date),\n        lll : date => useIntlFormat('lll', {\n            year   : 'numeric',\n            month  : 'short',\n            day    : 'numeric',\n            hour   : 'numeric',\n            minute : '2-digit'\n        }, date),\n        LLLL : date => useIntlFormat('LLLL', {\n            year    : 'numeric',\n            month   : 'long',\n            day     : 'numeric',\n            hour    : 'numeric',\n            minute  : '2-digit',\n            weekday : 'long'\n        }, date),\n        llll : date => useIntlFormat('llll', {\n            year    : 'numeric',\n            month   : 'short',\n            day     : 'numeric',\n            hour    : 'numeric',\n            minute  : '2-digit',\n            weekday : 'short'\n        }, date)\n    },\n    // Want longest keys first, to not stop match at L of LTS etc.\n    formatKeys                 = Object.keys(formats).sort((a, b) => b.length - a.length),\n    formatRegexp               = `^(?:${formatKeys.join('|')})`,\n    // return empty object, meaning value cannot be processed to a valuable date part\n    emptyFn                    = () => ({}),\n    isNumber                   = (str) => numberRegex.test(str),\n    parseMilliseconds          = (str) => isNumber(str) && { milliseconds : parseInt(str.padEnd(3, '0').substring(0, 3)) },\n    parsers                    = {\n        YYYY : str => {\n            const year = parseInt(str);\n            return { year : year >= 1000 && year <= 9999 ? year : NaN };\n        },\n        Y  : str => ({ year : parseInt(str) }),\n        YY : str => {\n            const year = parseInt(str);\n            return { year : year + (year > 1968 ? 1900 : 2000) };\n        },\n        M   : str => ({ month : parseInt(str) - 1 }),\n        MM  : str => ({ month : parseInt(str) - 1 }),\n        Mo  : str => ({ month : parseInt(str) - 1 }),\n        MMM : str => {\n            const month = (str || '').toLowerCase();\n            for (const [name, entry] of Object.entries(DateHelper._monthShortNamesIndex)) {\n                if (month.startsWith(name)) {\n                    return { month : entry.value };\n                }\n            }\n        },\n        MMMM : str => {\n            const month = (str || '').toLowerCase();\n            for (const [name, entry] of Object.entries(DateHelper._monthNamesIndex)) {\n                if (month.startsWith(name)) {\n                    return { month : entry.value };\n                }\n            }\n        },\n        DD   : str => ({ date : parseInt(str) }),\n        D    : str => ({ date : parseInt(str) }),\n        Do   : str => ({ date : parseInt(str) }),\n        DDD  : emptyFn,\n        DDDo : emptyFn,\n        DDDD : emptyFn,\n        d    : emptyFn,\n        do   : emptyFn,\n        d1   : emptyFn,\n        dd   : emptyFn,\n        ddd  : emptyFn,\n        dddd : emptyFn,\n        Q    : emptyFn,\n        Qo   : emptyFn,\n        W    : emptyFn,\n        Wo   : emptyFn,\n        WW   : emptyFn,\n        e    : emptyFn,\n        E    : emptyFn,\n        HH   : str => ({ hours : parseInt(str) }),\n        hh   : str => ({ hours : parseInt(str) }),\n        mm   : str => ({ minutes : parseInt(str) }),\n        H    : str => ({ hours : parseInt(str) }),\n        m    : str => ({ minutes : parseInt(str) }),\n        ss   : str => ({ seconds : parseInt(str) }),\n        s    : str => ({ seconds : parseInt(str) }),\n        S    : parseMilliseconds,\n        SS   : parseMilliseconds,\n        SSS  : parseMilliseconds,\n        A : str => ({ amPm : str.toLowerCase() }),\n        a : str => ({ amPm : str.toLowerCase() }),\n        L   : 'MM/DD/YYYY',\n        LT  : 'HH:mm A',\n        LTS : 'HH:mm:ss A',\n        l  : { type : 'dynamic', parser : () => redirectFormat('l') },\n        ll : { type : 'dynamic', parser : () => redirectFormat('ll') },\n        // Can either be Z (=UTC, 0) or +-HH:MM\n        Z : str => {\n            if (!str || (!timeZoneRegEx.test(str) && str !== 'Z')) {\n                return null;\n            }\n            let timeZone = 0;\n            // If string being parsed is more detailed than the format specified we can have more chars left,\n            // thus check the last (for example HH:mmZ with input HH:mm:ssZ -> ssZ)\n            if (str !== 'Z') {\n                const matches = timeZoneRegEx.exec(str);\n                // If timezone regexp matches, sting has time zone offset like '+02:00'\n                if (matches) {\n                    const\n                        sign    = matches[1] === '+' ? 1 : -1,\n                        hours   = parseInt(matches[2]) || 0,\n                        minutes = parseInt(matches[3]) || 0;\n                    timeZone = sign * (hours * 60 + minutes);\n                }\n                // otherwise we just return current time zone, because there's a Z key in the input\n                else {\n                    timeZone = -1 * new Date().getTimezoneOffset();\n                }\n            }\n            return { timeZone };\n        }\n    },\n    parserKeys                 = Object.keys(parsers).sort((a, b) => b.length - a.length),\n    parserRegexp               = new RegExp(`(${parserKeys.join('|')})`),\n    // Following regexp includes all formats that should be handled by Date class\n    // !!! except `l|ll`, plus made all-string capturing, otherwise the left-most `l` pattern\n    // matches all `l*` formats\n    // localeStrRegExp            = new RegExp('(l|LL|ll|LLL|lll|LLLL|llll)'),\n    localeStrRegExp            = new RegExp('^(LL|LLL|lll|LLLL|llll)$'),\n    //    ISODateRegExp             = new RegExp('YYYY-MM-DD[T ]HH:mm:ss(.s+)?Z'),\n    // Some validConversions are negative to show that it's not an exact conversion, just an estimate.\n    validConversions           = {\n        // The units below assume:\n        // 30 days in a month, 91 days for a quarter and 365 for a year\n        // 52 weeks per year, 4 per month, 13 per quarter\n        // 3652 days per decade (assuming two of the years will be leap with 366 days)\n        decade : {\n            decade      : 1,\n            year        : 10,\n            quarter     : 40,\n            month       : 120,\n            week        : 520,\n            day         : 3652,\n            hour        : 24 * 3652,\n            minute      : 1440 * 3652,\n            second      : 86400 * 3652,\n            millisecond : 86400000 * 3652\n        },\n        year : {\n            decade      : 0.1,\n            year        : 1,\n            quarter     : 4,\n            month       : 12,\n            week        : 52,\n            day         : 365,\n            hour        : 24 * 365,\n            minute      : 1440 * 365,\n            second      : 86400 * 365,\n            millisecond : 86400000 * 365\n        },\n        quarter : {\n            decade      : 1 / 40,\n            year        : 1 / 4,\n            quarter     : 1,\n            month       : 3,\n            week        : 4,\n            day         : 91,\n            hour        : 24 * 91,\n            minute      : 1440 * 91,\n            second      : 86400 * 91,\n            millisecond : 86400000 * 91\n        },\n        month : {\n            decade      : 1 / 120,\n            year        : 1 / 12,\n            quarter     : 1 / 3,\n            month       : 1,\n            week        : 4,\n            day         : -30,\n            hour        : -24 * 30,\n            minute      : -1440 * 30,\n            second      : -86400 * 30,\n            millisecond : -86400000 * 30\n        },\n        week : {\n            decade      : -1 / 520,\n            year        : -1 / 52,\n            quarter     : -1 / 13,\n            month       : -1 / 4,\n            day         : 7,\n            hour        : 168,\n            minute      : 10080,\n            second      : 604800,\n            millisecond : 604800000\n        },\n        day : {\n            decade      : -1 / 3652,\n            year        : -1 / 365,\n            quarter     : -1 / 91,\n            month       : -1 / 30,\n            week        : 1 / 7,\n            hour        : 24,\n            minute      : 1440,\n            second      : 86400,\n            millisecond : 86400000\n        },\n        hour : {\n            decade      : -1 / (3652 * 24),\n            year        : -1 / (365 * 24),\n            quarter     : -1 / (91 * 24),\n            month       : -1 / (30 * 24),\n            week        : 1 / 168,\n            day         : 1 / 24,\n            minute      : 60,\n            second      : 3600,\n            millisecond : 3600000\n        },\n        minute : {\n            decade      : -1 / (3652 * 1440),\n            year        : -1 / (365 * 1440),\n            quarter     : -1 / (91 * 1440),\n            month       : -1 / (30 * 1440),\n            week        : 1 / 10080,\n            day         : 1 / 1440,\n            hour        : 1 / 60,\n            second      : 60,\n            millisecond : 60000\n        },\n        second : {\n            decade      : -1 / (3652 * 86400),\n            year        : -1 / (365 * 86400),\n            quarter     : -1 / (91 * 86400),\n            month       : -1 / (30 * 86400),\n            week        : 1 / 604800,\n            day         : 1 / 86400,\n            hour        : 1 / 3600,\n            minute      : 1 / 60,\n            millisecond : 1000\n        },\n        millisecond : {\n            decade  : -1 / (3652 * 86400000),\n            year    : -1 / (365 * 86400000),\n            quarter : -1 / (91 * 86400000),\n            month   : -1 / (30 * 86400000),\n            week    : 1 / 604800000,\n            day     : 1 / 86400000,\n            hour    : 1 / 3600000,\n            minute  : 1 / 60000,\n            second  : 1 / 1000\n        }\n    },\n    normalizedUnits            = {\n        ms           : 'millisecond',\n        milliseconds : 'millisecond',\n        s            : 'second',\n        seconds      : 'second',\n        m            : 'minute',\n        mi           : 'minute',\n        min          : 'minute',\n        minutes      : 'minute',\n        h            : 'hour',\n        hours        : 'hour',\n        d            : 'day',\n        days         : 'day',\n        w            : 'week',\n        weeks        : 'week',\n        M            : 'month',\n        mo           : 'month',\n        mon          : 'month',\n        months       : 'month',\n        q            : 'quarter',\n        quarters     : 'quarter',\n        y            : 'year',\n        years        : 'year',\n        dec          : 'decade',\n        decades      : 'decade'\n    },\n    withDecimalsDurationRegex  = /^\\s*([-+]?\\d+(?:[.,]\\d*)?|[-+]?(?:[.,]\\d+))\\s*([^\\s]+)?/i,\n    noDecimalsDurationRegex    = /^\\s*([-+]?\\d+)(?![.,])\\s*([^\\s]+)?/i,\n    canonicalUnitNames         = [\n        'millisecond',\n        'second',\n        'minute',\n        'hour',\n        'day',\n        'week',\n        'month',\n        'quarter',\n        'year',\n        'decade'\n    ],\n    canonicalUnitAbbreviations = [\n        ['mil'],\n        ['s', 'sec'],\n        ['m', 'min'],\n        ['h', 'hr'],\n        ['d'],\n        ['w', 'wk'],\n        ['mo', 'mon', 'mnt'],\n        ['q', 'quar', 'qrt'],\n        ['y', 'yr'],\n        ['dec']\n    ],\n    deltaUnits                 = [\n        'decade',\n        'year',\n        'month',\n        'week',\n        'day',\n        'hour',\n        'minute',\n        'second',\n        'millisecond'\n    ],\n    // Used when creating a date from an object, to fill in any blanks\n    dateProperties             = [\n        'milliseconds',\n        'seconds',\n        'minutes',\n        'hours',\n        'date',\n        'month',\n        'year'\n    ],\n    parseNumber                = (n) => {\n        const result = parseFloat(n);\n        return isNaN(result) ? null : result;\n    },\n    numberRegex                = /^[0-9]+$/,\n    timeZoneRegEx              = /([+-])(\\d\\d):*(\\d\\d)*$/,\n    unitMagnitudes             = {\n        millisecond : 0,\n        second      : 1,\n        minute      : 2,\n        hour        : 3,\n        day         : 4,\n        week        : 5,\n        month       : 6,\n        quarter     : 7,\n        year        : 8,\n        decade      : 9\n    },\n    snapFns = {\n        round(number, step = 1) {\n            return Math.round(number / step) * step;\n        },\n        floor(number, step = 1) {\n            return Math.floor(number / step) * step;\n        },\n        ceil(number, step = 1) {\n            return Math.ceil(number / step) * step;\n        }\n    },\n    keyCache = {};\nexport { unitMagnitudes };\n/**\n * @module Core/helper/DateHelper\n */\n/**\n * A static class offering date manipulation, comparison, parsing and formatting helper methods.\n *\n * ## Parsing strings\n * Use `DateHelper.parse()` to parse strings into dates. It accepts a date string and a format specifier.\n * The format specifier is string built up using the following tokens:\n *\n * | Unit        | Token | Description                       |\n * |-------------|-------|-----------------------------------|\n * | Year        | YYYY  | 4-digits year, like: 2018         |\n * |             | Y     | numeric, any number of digits     |\n * |             | YY    | < 68 -> 2000, > 68 -> 1900        |\n * | Month       | MM    | 01 - 12                           |\n * | Month       | MMM   | Short name of the month           |\n * | Date        | DD    | 01 - 31                           |\n * | Hour        | HH    | 00 - 23 or 1 - 12                 |\n * | Minute      | mm    | 00 - 59                           |\n * | Second      | ss    | 00 - 59                           |\n * | Millisecond | S     | 0 - 9 [000, 100, 200 .. 900 ]     |\n * |             | SS    | 00 - 99 [000, 010, 020 .. 990 ]   |\n * |             | SSS   | 000 - 999 [000, 001, 002 .. 999 ] |\n * | AM/PM       | A     | AM or PM                          |\n * |             | a     | am or pm                          |\n * | TimeZone    | Z     | Z for UTC or +-HH:mm              |\n * | Predefined  | L     | Long date, MM/DD/YYYY             |\n * |             | LT    | Long time, HH:mm A                |\n *\n * Default parse format is: `'YYYY-MM-DDTHH:mm:ss.SSSZ'` see {@link #property-defaultParseFormat-static}\n *\n * For example:\n *\n * ```javascript\n * DateHelper.parse('2018-11-06', 'YYYY-MM-DD');\n * DateHelper.parse('13:14', 'HH:mm');\n * DateHelper.parse('6/11/18', 'DD/MM/YY');\n * ```\n *\n * ## Formatting dates\n * Use `DateHelper.format()` to create a string from a date using a format specifier. The format specifier is similar to\n * that used when parsing strings. It can use the following tokens (input used for output below is\n * `new Date(2018,8,9,18,7,8,145)`):\n *\n * | Unit                  | Token | Description & output                  |\n * |-----------------------|-------|---------------------------------------|\n * | Year                  | YYYY  | 2018                                  |\n * |                       | YY    | 18                                    |\n * |                       | Y     | 2018                                  |\n * | Quarter               | Q     | 3                                     |\n * |                       | Qo    | 3rd                                   |\n * | Month                 | MMMM  | September                             |\n * |                       | MMM   | Sep                                   |\n * |                       | MM    | 09                                    |\n * |                       | Mo    | 9th                                   |\n * |                       | M     | 9                                     |\n * | Week (iso)            | WW    | 37 (2 digit, zero padded)             |\n * |                       | Wo    | 37th                                  |\n * |                       | W     | 37                                    |\n * |                       | WWp   | Week 37 (localized prefix, zero pad)  |\n * |                       | Wp    | Week 37 (localized prefix)            |\n * |                       | WWp0  | W37 (localized prefix)                |\n * |                       | Wp0   | W37 (localized prefix)                |\n * | Date                  | DDDD  | Day of year, 3 digits                 |\n * |                       | DDDo  | Day of year, ordinal                  |\n * |                       | DDD   | Day of year                           |\n * |                       | DD    | 09                                    |\n * |                       | Do    | 9th                                   |\n * |                       | D     | 9                                     |\n * | Weekday               | dddd  | Sunday                                |\n * |                       | ddd   | Sun                                   |\n * |                       | dd    | Su                                    |\n * |                       | d1    | S                                     |\n * |                       | do    | 0th                                   |\n * |                       | d     | 0                                     |\n * | Hour                  | HH    | 18 (00 - 23)                          |\n * |                       | H     | 18 (0 - 23)                           |\n * |                       | hh    | 06 (00 - 12)                          |\n * |                       | h     | 6 (0 - 12)                            |\n * |                       | KK    | 19 (01 - 24)                          |\n * |                       | K     | 19 (1 - 24)                           |\n * |                       | kk    | 06 or 18, locale determines           |\n * |                       | k     | 6 or 18, locale determines            |\n * | Minute                | mm    | 07                                    |\n * |                       | m     | 7                                     |\n * | Second                | ss    | 08                                    |\n * |                       | s     | 8                                     |\n * | Millisecond           | S     | 1 (100ms)                             |\n * |                       | SS    | 14 (140ms)                            |\n * |                       | SSS   | 145 (145ms)                           |\n * | AM/PM                 | A     | AM or PM                              |\n * |                       | a     | am or pm                              |\n * | Predefined            | LT    | H: 2-digit (2d), m: 2d                |\n * | (uses browser locale) | LTS   | H: 2d, m: 2d, s : 2d                  |\n * |                       | LST   | Depends on 12 or 24 hour clock        |\n * |                       |       | 12h, H : 1d, m : 0 or 2d              |\n * |                       |       | 24h, H : 2d, m : 2d                   |\n * |                       | L     | Y: numeric (n), M : 2d, D : 2d        |\n * |                       | l     | Y: n, M : n, D : n                    |\n * |                       | LL    | Y: n, M : long (l), D : n             |\n * |                       | ll    | Y: n, M : short (s), D : n            |\n * |                       | LLL   | Y: n, M : l, D : n, H: n, m: 2d       |\n * |                       | lll   | Y: n, M : s, D : n, H: n, m: 2d       |\n * |                       | LLLL  | Y: n, M : l, D : n, H: n, m: 2d, d: l |\n * |                       | llll  | Y: n, M : s, D : n, H: n, m: 2d, d: s |\n * |                       | u     | YYYYMMDDZ in UTC zone                 |\n * |                       | uu    | YYYYMMDDTHHMMSSZ in UTC zone          |\n *\n * Default format is: `'YYYY-MM-DDTHH:mm:ssZ'` see {@link #property-defaultFormat-static}\n *\n * For example:\n *\n * ```javascript\n * DateHelper.format(new Date(2018,10,6), 'YYYY-MM-DD'); // 2018-11-06\n * DateHelper.format(new Date(2018,10,6), 'M/D/YY'); // 11/6/18\n * ```\n *\n * Arbitrary text can be embedded in the format string by wrapping it with {}:\n *\n * ```javascript\n * DateHelper.format(new Date(2019, 7, 16), '{It is }dddd{, yay!}') -> It is Friday, yay!\n * ```\n *\n * ## Unit names\n * Many DateHelper functions (for example add, as, set) accepts a unit among their params. The following units are\n * available:\n *\n * | Unit        | Aliases                       |\n * |-------------|-------------------------------|\n * | millisecond | millisecond, milliseconds, ms |\n * | second      | second, seconds, s            |\n * | minute      | minute, minutes, m            |\n * | hour        | hour, hours, h                |\n * | day         | day, days, d                  |\n * | week        | week, weeks, w                |\n * | month       | month, months, mon, mo, M     |\n * | quarter     | quarter, quarters, q          |\n * | year        | year, years, y                |\n * | decade      | decade, decades, dec          |\n *\n * For example:\n * ```javascript\n * DateHelper.add(date, 2, 'days');\n * DateHelper.as('hour', 7200, 'seconds');\n * ```\n * @static\n */\nexport default class DateHelper extends Localizable() {\n    static MS_PER_DAY = MS_PER_HOUR * 24;\n    static get $name() {\n        return 'DateHelper';\n    }\n    //region Parse & format\n    /**\n     * Get/set the default format used by `format()` and `parse()`. Defaults to `'YYYY-MM-DDTHH:mm:ssZ'`\n     * (~ISO 8601 Date and time, `'1962-06-17T09:21:34Z'`).\n     * @member {String}\n     */\n    static set defaultFormat(format) {\n        DH._defaultFormat = format;\n    }\n    static get defaultFormat() {\n        return DH._defaultFormat || 'YYYY-MM-DDTHH:mm:ssZ';\n    }\n    /**\n     * Get/set the default format used by `parse()`. Defaults to `'YYYY-MM-DDTHH:mm:ss.SSSZ'` or {@link #property-defaultFormat-static}\n     * (~ISO 8601 Date and time, `'1962-06-17T09:21:34.123Z'`).\n     * @member {String}\n     */\n    static set defaultParseFormat(parseFormat) {\n        this._defaultParseFormat = parseFormat;\n    }\n    static get defaultParseFormat() {\n        return this._defaultParseFormat || this._defaultFormat || 'YYYY-MM-DDTHH:mm:ss.SSSZ';\n    }\n    static buildParser(format) {\n        // Split input format by regexp, which includes predefined patterns. Normally format would have some\n        // splitters, like 'YYYY-MM-DD' or 'D/M YYYY' so output will contain matched patterns as well as splitters\n        // which would serve as anchors. E.g. provided format is 'D/M!YYYY' and input is `11/6!2019` algorithm would work like:\n        // 1. split format by regexp                // ['', 'D', '/', 'M', '!', 'YYYY', '']\n        // 2. find splitters                        // ['/', '!']\n        // 3. split input by seps, step by step     // ['11', ['6', ['2019']]]\n        // Inputs like 'YYYYY' (5*Y) means 'YYYY' + 'Y', because it matches patterns from longer to shorter,\n        // but if few patterns describe same unit the last one is applied, for example\n        // DH.parse('20182015', 'YYYYY') equals to new Date(2015, 0, 0)\n        const\n            parts  = format.split(parserRegexp),\n            parser = [];\n        // if length of the parts array is 1 - there are no regexps in the input string. thus - no parsers\n        // do same if there are patterns matching locale strings (l, ll, LLLL etc.)\n        // returning empty array to use new Date() as parser\n        if (parts.length === 1 || localeStrRegExp.test(format)) {\n            return [];\n        }\n        else {\n            parts.reduce((prev, curr, index, array) => {\n                // ignore first and last empty string\n                if (index !== 0 || curr !== '') {\n                    // if current element matches parser regexp store it as a parser\n                    if (parserRegexp.test(curr)) {\n                        const\n                            localeParsers = this.localize('L{parsers}') || {},\n                            fn            = localeParsers[curr] || parsers[curr];\n                        // Z should be last element in the string that matches regexp. Last array element is always either\n                        // an empty string (if format ends with Z) or splitter (everything that doesn't match regexp after Z)\n                        // If there is a pattern after Z, then Z index will be lower than length - 2\n                        if (curr === 'Z' && index < array.length - 2) {\n                            throw new Error(`Invalid format ${format} TimeZone (Z) must be last token`);\n                        }\n                        const parserObj = (typeof fn === 'function') || (typeof fn === 'string')\n                            ? fn\n                            : fn.parser();\n                        // If fn is a string, we found an alias (L, LLL, l etc.).\n                        // Need to build parsers from mapped format and merge with existing\n                        if (typeof parserObj === 'string') {\n                            // we are going to merge nested parsers with current, some cleanup required:\n                            // 1. last element is no longer last\n                            // 2. need to pass last parser to the next step\n                            const\n                                nestedParsers = DH.buildParser(parserObj),\n                                lastItem      = nestedParsers.pop();\n                            delete lastItem.last;\n                            // elevate nested parsers\n                            parser.push(...nestedParsers);\n                            prev = lastItem;\n                        }\n                        else {\n                            prev.pattern = curr;\n                            prev.fn = parserObj;\n                        }\n                    }\n                    // if it doesn't match - we've found a splitter\n                    else {\n                        prev.splitter = curr;\n                        parser.push(prev);\n                        prev = {};\n                    }\n                }\n                else if (Object.prototype.hasOwnProperty.call(prev, 'pattern')) {\n                    parser.push(prev);\n                }\n                return prev;\n            }, {});\n        }\n        parser[parser.length - 1].last = true;\n        return parser;\n    }\n    /**\n     * A utility function to create a sortable string key for the passed date or ms timestamp using the `'YYYY-MM-DD'`\n     * format.\n     * @param {Number|Date} ms The Date instance or ms timestamp to generate a key for\n     * @returns {String} Date/timestamp as a string with `'YYYY-M-D'` format\n     * @internal\n     */\n    static makeKey(ms) {\n        // If an ten character string passed, assume it's already a key\n        if (ms.length === 10) {\n            return ms;\n        }\n        // Convert Date to ms timestamp\n        if (ms.getTime) {\n            ms = ms.getTime();\n        }\n        // Cache holds ms -> YYYY-MM-DD\n        const cached = keyCache[Math.trunc(ms / MS_PER_HOUR)];\n        if (cached) {\n            return cached;\n        }\n        tempDate.setTime(ms);\n        const\n            month = tempDate.getMonth() + 1,\n            date  = tempDate.getDate();\n        // Not using DateHelper.format to save some cycles, hit a lot\n        return keyCache[Math.trunc(ms / MS_PER_HOUR)] = `${tempDate.getFullYear()}-${month < 10 ? '0' + month : month}-${date < 10 ? '0' + date : date}`;\n    }\n    /**\n     * A utility function to parse a sortable string to a date using the `'YYYY-MM-DD'` format.\n     * @param {String} key The string to return a date for\n     * @returns {Date} new Date instance\n     * @internal\n     */\n    static parseKey(key) {\n        return DH.parse(key, 'YYYY-MM-DD');\n    }\n    /**\n     * Returns a date created from the supplied string using the specified format. Will try to create even if format\n     * is left out, by first using the default format (see {@link #property-defaultFormat-static}, by default\n     * `YYYY-MM-DDTHH:mm:ssZ`) and then using `new Date(dateString)`.\n     * Supported tokens:\n     *\n     * | Unit        | Token | Description                       |\n     * |-------------|-------|-----------------------------------|\n     * | Year        | YYYY  | 2018                              |\n     * |             | YY    | < 68 -> 2000, > 68 -> 1900        |\n     * | Month       | MM    | 01 - 12                           |\n     * | Date        | DD    | 01 - 31                           |\n     * | Hour        | HH    | 00 - 23 or 1 - 12                 |\n     * | Minute      | mm    | 00 - 59                           |\n     * | Second      | ss    | 00 - 59                           |\n     * | Millisecond | S     | 0 - 9 [000, 100, 200 .. 900 ]     |\n     * |             | SS    | 00 - 99 [000, 010, 020 .. 990 ]   |\n     * |             | SSS   | 000 - 999 [000, 001, 002 .. 999 ] |\n     * | AM/PM       | A     | AM or PM                          |\n     * |             | a     | am or pm                          |\n     * | TimeZone    | Z     | Z for UTC or +-HH:mm              |\n     * | Predefined  | L     | Long date, MM/DD/YYYY             |\n     * |             | LT    | Long time, HH:mm A                |\n     *\n     * Predefined formats and functions used to parse tokens can be localized, see for example the swedish locale SvSE.js\n     *\n     * NOTE: If no date parameters are provided then `Jan 01 2020` is used as a default date\n     *\n     * @param {String} dateString Date string\n     * @param {String} [format] Date format (or {@link #property-defaultParseFormat-static} if left out)\n     * @returns {Date} new Date instance parsed from the string\n     * @category Parse & format\n     */\n    static parse(dateString, format = DH.defaultParseFormat, strict = false) {\n        if (dateString instanceof Date) {\n            return dateString;\n        }\n        if (typeof dateString !== 'string' || !dateString) {\n            return null;\n        }\n        // // For ISO 8601 native is faster, but not very forgiving\n        // if (format === defaultFormat) {\n        //     const dt = new Date(dateString);\n        //     if (!isNaN(dt)) {\n        //         return dt;\n        //     }\n        // }\n        const config = {\n            year         : null,\n            month        : null,\n            date         : null,\n            hours        : null,\n            minutes      : null,\n            seconds      : null,\n            milliseconds : null\n        };\n        // Milliseconds parser is the same for S, SS, SSS\n        // We search for a string of 'S' characters *not* preceded by an alpha character.\n        // So that the formats such as 'LTS' do not get corrupted\n        format = format.replace(msRegExp, msReplacer);\n        let\n            parser = parserCache[format],\n            result;\n        if (!parser) {\n            parser = parserCache[format] = DH.buildParser(format);\n        }\n        // Since Unicode 15 standard arrived to browsers (Chrome 110+ and FF 109+) they add unicode \"thin\" space before AM/PM\n        // https://icu.unicode.org/download/72\n        // Convert unicode spaces to regular for parser\n        if (dateString.includes('\\u202f')) {\n            dateString = dateString.replace(/\\s/g, ' ');\n        }\n        // Each parser knows its pattern and splitter. It looks for splitter in the\n        // input string, takes first substring and tries to process it. Remaining string\n        // is passed to the next parser.\n        parser.reduce((dateString, parser) => {\n            if (parser.last) {\n                Object.assign(config, parser.fn(dateString));\n            }\n            else {\n                let splitAt;\n                // ISO 8601 says that T symbol can be replaced with a space\n                if (parser.splitter === 'T' && dateString.indexOf('T') === -1) {\n                    splitAt = dateString.indexOf(' ');\n                }\n                else {\n                    const timeZoneIndex = dateString.indexOf('+');\n                    let { splitter } = parser;\n                    // Use more forgiving regexp for parsing if strict mode is off\n                    if (!strict && splitRegExp.test(splitter)) {\n                        splitter = splitRegExp;\n                    }\n                    // If splitter specified find its position, otherwise try to determine pattern length\n                    splitAt = parser.splitter !== '' ? dateString.search(typeof splitter === 'string' ? StringHelper.escapeRegExp(splitter) : splitter) : parser.pattern?.length || -1;\n                    // Don't split in the time zone part\n                    if (timeZoneIndex > -1 && splitAt > timeZoneIndex) {\n                        splitAt = -1;\n                    }\n                }\n                let part, rest;\n                // If splitter is not found in the current string we may be dealing with\n                // 1. partial input - in that case we just feed all string to current parser and move on\n                // 2. time zone (ssZ - splitter is empty string) and pattern is not specified, see comment below\n                // 3. parse milliseconds before Z\n                if (splitAt === -1 || ((parser.pattern === 'SSS') && dateString.match(/^\\d+Z$/))) {\n                    // NOTE: parentheses are required here as + and - signs hold valuable information\n                    // with parentheses we get array like ['00','+','01:00'], omitting them we won't get\n                    // regexp match in result, loosing information\n                    const chunks = dateString.split(/([Z\\-+])/);\n                    // If splitter is not found in the string, we may be dealing with string that contains info about TZ.\n                    // For instance, if format contains Z as last arg which is not separated (normally it is not indeed),\n                    // like 'YYYY-MM-DD HH:mm:ssZ', then second to last parser will have string that it cannot just parse, like\n                    // '2010-01-01 10:00:00'        -> '00'\n                    // '2010-01-01 10:00:00Z'       -> '00Z'\n                    // '2010-01-01 10:00:00-01'     -> '00-01'\n                    // '2010-01-01 10:00:00+01:30'  -> '00+01:30'\n                    // this cannot be processed by date parsers, so we need to process that additionally. So we\n                    // split string by symbols that can be found around timezone info: Z,-,+\n                    if (chunks.length === 1) {\n                        part = dateString;\n                        rest = '';\n                    }\n                    else {\n                        part = chunks[0];\n                        rest = `${chunks[1]}${chunks[2]}`;\n                    }\n                }\n                else {\n                    part = dateString.substring(0, splitAt) || dateString;\n                    rest = dateString.substring(splitAt + parser.splitter.length);\n                }\n                if (parser.fn) {\n                    // Run parser and add result to config on successful parse otherwise continue parsing\n                    const res = parser.fn(part);\n                    if (res) {\n                        Object.assign(config, res);\n                    }\n                    else {\n                        rest = part + rest;\n                    }\n                }\n                return rest;\n            }\n        }, dateString);\n        // If year is specified date has to be greater than 0\n        if (config.year && !config.date) {\n            config.date = 1;\n        }\n        if (config.date > 31 || config.month > 12) {\n            return null;\n        }\n        const date = DH.create(config, strict);\n        if (date) {\n            result = date;\n        }\n        else if (!strict) {\n            // Last resort, try if native passing can do it\n            result = new Date(dateString);\n        }\n        return result;\n    }\n    /**\n     * Creates a date from a date definition object. The object can have the following properties:\n     * - year\n     * - month\n     * - date (day in month)\n     * - hours\n     * - minutes\n     * - seconds\n     * - milliseconds\n     * - amPm : 'am' or 'pm', implies 12-hour clock\n     * - timeZone : offset from UTC in minutes\n     * @param {Object} definition\n     * @param {Number} definition.year\n     * @param {Number} [definition.month]\n     * @param {Number} [definition.date]\n     * @param {Number} [definition.hours]\n     * @param {Number} [definition.minutes]\n     * @param {Number} [definition.seconds]\n     * @param {Number} [definition.milliseconds]\n     * @param {Number} [definition.amPm]\n     * @param {Number} [definition.timeZone]\n     * @returns {Date} new Date instance\n     * @category Parse & format\n     */\n    static create(definition, strict = false) {\n        // Shallow clone to not alter input\n        const def = { ...definition };\n        let invalid = isNaN(def.year) || (strict && (isNaN(def.month) || isNaN(def.date))),\n            useUTC  = false;\n        // Not much validation yet, only considered invalid if all properties are null\n        if (!invalid) {\n            let allNull = true;\n            dateProperties.forEach(property => {\n                if (!(property in def) || isNaN(def[property])) {\n                    def[property] = 0;\n                }\n                allNull = allNull && def[property] === null;\n            });\n            invalid = allNull;\n        }\n        if (invalid) {\n            return null;\n        }\n        if (def.amPm === 'am') {\n            def.hours = def.hours % 12;\n        }\n        else if (def.amPm === 'pm') {\n            def.hours = (def.hours % 12) + 12;\n        }\n        if ('timeZone' in def) {\n            useUTC = true;\n            def.minutes -= def.timeZone;\n        }\n        if (strict && (def.year == null || def.month == null || def.date == null)) {\n            return null;\n        }\n        const\n            args = [\n                defaultValue(def.year, DEFAULT_YEAR),\n                defaultValue(def.month, DEFAULT_MONTH),\n                defaultValue(def.date, DEFAULT_DAY),\n                def.hours,\n                def.minutes,\n                def.seconds,\n                def.milliseconds\n            ];\n        return useUTC ? new Date(Date.UTC(...args)) : new Date(...args);\n    }\n    static toUTC(date) {\n        return new Date(Date.UTC(\n            date.getUTCFullYear(),\n            date.getUTCMonth(),\n            date.getUTCDate(),\n            date.getUTCHours(),\n            date.getUTCMinutes(),\n            date.getUTCSeconds(),\n            date.getUTCMilliseconds()\n        ));\n    }\n    /**\n     * Converts a date to string with the specified format. Formats heavily inspired by https://momentjs.com.\n     * Available formats (input used for output below is `new Date(2018,8,9,18,7,8,145)`):\n     *\n     * | Unit                  | Token | Description & output                  |\n     * |-----------------------|-------|---------------------------------------|\n     * | Year                  | YYYY  | 2018                                  |\n     * |                       | YY    | 18                                    |\n     * |                       | Y     | 2018                                  |\n     * | Quarter               | Q     | 3                                     |\n     * |                       | Qo    | 3rd                                   |\n     * | Month                 | MMMM  | September                             |\n     * |                       | MMM   | Sep                                   |\n     * |                       | MM    | 09                                    |\n     * |                       | Mo    | 9th                                   |\n     * |                       | M     | 9                                     |\n     * | Week (iso)            | WW    | 37 (2 digit, zero padded)             |\n     * |                       | Wo    | 37th                                  |\n     * |                       | W     | 37                                    |\n     * |                       | WWp   | Week 37 (localized prefix, zero pad)  |\n     * |                       | Wp    | Week 37 (localized prefix)            |\n     * |                       | WWp0  | W37 (localized prefix)                |\n     * |                       | Wp0   | W37 (localized prefix)                |\n     * | Date                  | DDDD  | Day of year, 3 digits                 |\n     * |                       | DDDo  | Day of year, ordinal                  |\n     * |                       | DDD   | Day of year                           |\n     * |                       | DD    | 09                                    |\n     * |                       | Do    | 9th                                   |\n     * |                       | D     | 9                                     |\n     * | Weekday               | dddd  | Sunday                                |\n     * |                       | ddd   | Sun                                   |\n     * |                       | dd    | Su                                    |\n     * |                       | d1    | S                                     |\n     * |                       | do    | 0th                                   |\n     * |                       | d     | 0                                     |\n     * | Hour                  | HH    | 18 (00 - 23)                          |\n     * |                       | H     | 18 (0 - 23)                           |\n     * |                       | hh    | 06 (00 - 12)                          |\n     * |                       | h     | 6 (0 - 12)                            |\n     * |                       | KK    | 19 (01 - 24)                          |\n     * |                       | K     | 19 (1 - 24)                           |\n     * |                       | kk    | 06 or 18, locale determines           |\n     * |                       | k     | 6 or 18, locale determines            |\n     * | Minute                | mm    | 07                                    |\n     * |                       | m     | 7                                     |\n     * | Second                | ss    | 08                                    |\n     * |                       | s     | 8                                     |\n     * | Millisecond           | S     | 1 (100ms)                             |\n     * |                       | SS    | 14 (140ms)                            |\n     * |                       | SSS   | 145 (145ms)                           |\n     * | AM/PM                 | A     | AM or PM                              |\n     * |                       | a     | am or pm                              |\n     * | Predefined            | LT    | H: 2-digit (2d), m: 2d                |\n     * | (uses browser locale) | LTS   | H: 2d, m: 2d, s : 2d                  |\n     * |                       | LST   | Depends on 12 or 24 hour clock        |\n     * |                       |       | 12h, H : 1d, m : 0 or 2d              |\n     * |                       |       | 24h, H : 2d, m : 2d                   |\n     * |                       | L     | Y: numeric (n), M : 2d, D : 2d        |\n     * |                       | l     | Y: n, M : n, D : n                    |\n     * |                       | LL    | Y: n, M : long (l), D : n             |\n     * |                       | ll    | Y: n, M : short (s), D : n            |\n     * |                       | LLL   | Y: n, M : l, D : n, H: n, m: 2d       |\n     * |                       | lll   | Y: n, M : s, D : n, H: n, m: 2d       |\n     * |                       | LLLL  | Y: n, M : l, D : n, H: n, m: 2d, d: l |\n     * |                       | llll  | Y: n, M : s, D : n, H: n, m: 2d, d: s |\n     *\n     * Some examples:\n     *\n     * ```javascript\n     * DateHelper.format(new Date(2019, 7, 16), 'dddd') -> Friday\n     * DateHelper.format(new Date(2019, 7, 16, 14, 27), 'HH:mm') --> 14:27\n     * DateHelper.format(new Date(2019, 7, 16, 14, 27), 'L HH') --> 2019-07-16 14\n     * ```\n     *\n     * Arbitrary text can be embedded in the format string by wrapping it with {}:\n     *\n     * ```javascript\n     * DateHelper.format(new Date(2019, 7, 16), '{It is }dddd{, yay!}') -> It is Friday, yay!\n     * ```\n     *\n     * @param {Date} date Date\n     * @param {String} [format] Desired format (uses `defaultFormat` if left out)\n     * @returns {String} Formatted string\n     * @category Parse & format\n     */\n    static format(date, format = DH.defaultFormat) {\n        // Bail out if no date or invalid date\n        if (!date || isNaN(date)) {\n            return null;\n        }\n        let formatter = formatCache[format],\n            output    = '';\n        if (!formatter) {\n            formatter = formatCache[format] = [];\n            // Build formatter array with the steps needed to format the date\n            for (let i = 0; i < format.length; i++) {\n                // Matches a predefined format?\n                const\n                    formatMatch = format.slice(i).match(formatRegexp),\n                    predefined  = formatMatch?.[0];\n                if (predefined) {\n                    const\n                        localeFormats = this.localize('L{formats}') || {},\n                        fn            = localeFormats[predefined] || formats[predefined];\n                    formatter.push(fn);\n                    i += predefined.length - 1;\n                }\n                // Start of text block? Append it\n                else if (format[i] === '{') {\n                    // Find closing brace\n                    const index = format.indexOf('}', i + 1);\n                    // No closing brace, grab rest of string\n                    if (index === -1) {\n                        formatter.push(format.substr(i + 1));\n                        i = format.length;\n                    }\n                    // Closing brace found\n                    else {\n                        formatter.push(format.substring(i + 1, index));\n                        // Carry on after closing brace\n                        i = index;\n                    }\n                }\n                // Otherwise append to output (for example - / : etc)\n                else {\n                    formatter.push(format[i]);\n                }\n            }\n        }\n        formatter.forEach(step => {\n            if (typeof step === 'string') {\n                output += step;\n            }\n            else {\n                output += step(date);\n            }\n        });\n        return output;\n    }\n    /**\n     * Formats a range of `dates` using the specified `format`. Because two dates are involved, the `format` specifier\n     * uses the tokens `S{}` and `E{}`. The text contained between the `{}` is the {@link #function-format-static format}\n     * for the start date or end date, respectively. Text not inside these tokens is retained verbatim.\n     *\n     * For example:\n     *\n     * ```javascript\n     *  DateHelper.formatRange(dates, 'S{DD MMM YYYY} - E{DD MMM YYYY}');\n     * ```\n     *\n     * The above will format `dates[0]` based on the `S{DD MMM YYYY}` segment and `dates[1] using `E{DD MMM YYYY}`. The\n     * `' - '` between these will remain between the two formatted dates.\n     *\n     * @param {Date[]} dates An array of start date and end date (`[startDate, endDate]`)\n     * @param {String} format The format specifier\n     * @returns {String}\n     */\n    static formatRange(dates, format) {\n        return format.replace(rangeFormatPartRe,\n            (s, which, fmt) => DateHelper.format(dates[(which === 'S') ? 0 : 1], fmt));\n    }\n    /**\n     * Converts the specified amount of desired unit into milliseconds. Can be called by only specifying a unit as the\n     * first argument, it then uses `amount = 1`.\n     *\n     * For example:\n     *\n     * ```javascript\n     * asMilliseconds('hour') == asMilliseconds(1, 'hour')\n     * ```\n     *\n     * @param {Number|String} amount Amount, what of is decided by specifying unit (also takes a unit which implies an amount of 1)\n     * @param {String} [unit] Time unit (s, hour, months etc.)\n     * @returns {Number}\n     * @category Parse & format\n     */\n    static asMilliseconds(amount, unit = null) {\n        if (typeof amount === 'string') {\n            unit = amount;\n            amount = 1;\n        }\n        return DH.as('millisecond', amount, unit);\n    }\n    /**\n     * Converts the passed Date to an accurate number of months passed since the epoch start.\n     * @param {Date} time The Date to find the month value of\n     * @returns {Number} The number of months since the system time epoch start. May be a fractional value\n     */\n    static asMonths(time) {\n        const\n            monthLength = DH.as('ms', DH.daysInMonth(time), 'day'),\n            fraction = (time.valueOf() - DH.startOf(time, 'month').valueOf()) / monthLength;\n        return time.getYear() * 12 + time.getMonth() + fraction;\n    }\n    static monthsToDate(months) {\n        const\n            intMonths = Math.floor(months),\n            fraction = months - intMonths,\n            result = new Date(0, intMonths),\n            msInMonth = DH.as('ms', DH.daysInMonth(result), 'days');\n        result.setTime(result.getTime() + fraction * msInMonth);\n        return result;\n    }\n    /**\n     * Converts a millisecond time delta to a human-readable form. For example `1000 * 60 * 60 * 50`\n     * milliseconds would be rendered as `'2 days, 2 hours'`.\n     * @param {Number} delta The millisecond delta value\n     * @param {Object} [options] Formatting options\n     * @param {Boolean} [options.abbrev] Pass `true` to use abbreviated unit names, eg `'2d, 2h'` for the above example\n     * @param {String} [options.precision] The minimum precision unit\n     * @param {String} [options.separator] The separator to use\n     * @param {Boolean} [options.asString] Pass `false` to return the result as an array, eg ['2d', '2h'] for the above example\n     * @returns {String} Formatted string\n     * @category Parse & format\n     */\n    static formatDelta(delta, options) {\n        let abbrev, unitName;\n        if (typeof options === 'boolean') {\n            abbrev = options;\n        }\n        else if (options) {\n            abbrev    = options.abbrev;\n        }\n        const\n            deltaObj = this.getDelta(delta, options),\n            result   = [],\n            sep      = options?.separator || (abbrev ? '' : ' ');\n        for (unitName in deltaObj) {\n            result.push(`${deltaObj[unitName]}${sep}${unitName}`);\n        }\n        return options?.asString === false ? result : result.join(', ');\n    }\n    /**\n     * Converts a millisecond time delta to an object structure. For example `1000 * 60 * 60 * 50`\n     * milliseconds the result would be as:\n     *\n     * ```javascript\n     * {\n     *     day  : 2,\n     *     hour : 2\n     * }\n     *```\n     *\n     * @param {Number} delta The millisecond delta value\n     * @param {Object} [options] Formatting options\n     * @param {Boolean} [options.abbrev] Pass `true` to use abbreviated unit names, eg `{ d: 2, h: 2 }` for the above example\n     * @param {String} [options.precision] The minimum precision unit\n     * @param {Boolean} [options.ignoreLocale] Pass true to return unlocalized unit name. Requires `abbrev` to be false\n     * @param {String} [options.maxUnit] Name of the maximum unit in the output. e.g. if you pass `day` then you'll get\n     * `{ h: 25 }` instead of `{ d: 1, h: 1 }`\n     * @returns {Object} The object with the values for each unit\n     */\n    static getDelta(delta, options) {\n        let abbrev, d, done, precision, unitName, maxUnit, ignoreLocale;\n        if (typeof options === 'boolean') {\n            abbrev = options;\n        }\n        else if (options) {\n            abbrev = options.abbrev;\n            precision = DH.normalizeUnit(options.precision);\n            maxUnit = options.maxUnit;\n            ignoreLocale = !abbrev && options.ignoreLocale;\n        }\n        const\n            result  = {},\n            getUnit = abbrev ? DH.getShortNameOfUnit : DH.getLocalizedNameOfUnit;\n        const units = maxUnit ? deltaUnits.slice(deltaUnits.indexOf(maxUnit)) : deltaUnits;\n        // Loop downwards through the magnitude of units from year -> ms\n        for (unitName of units) {\n            d = DH.as(unitName, delta);\n            done = precision === unitName;\n            d = Math[done ? 'round' : 'floor'](d);\n            // If there's a non-zero integer quantity of this unit, add it to result\n            // and subtract from the delta, then go round to next unit down.\n            if (d || (done && !result.length)) {\n                result[ignoreLocale ? unitName : getUnit.call(DH, unitName, d !== 1)] = d;\n                delta -= DH.as('ms', d, unitName);\n            }\n            if (done || !delta) {\n                break;\n            }\n        }\n        return result;\n    }\n    /**\n     * Converts the specified amount of one unit (`fromUnit`) into an amount of another unit (`toUnit`).\n     * @param {String} toUnit The name of units to convert to, eg: `'ms'`\n     * @param {Number|String} amount The time to convert. Either the magnitude number form or a duration string such as '2d'\n     * @param {String} [fromUnit='ms'] If the amount was passed as a number, the units to use to convert from\n     * @returns {Number}\n     * @category Parse & format\n     */\n    static as(toUnit, amount, fromUnit = 'ms') {\n        // Allow DH.as('ms', '2d')\n        if (typeof amount === 'string') {\n            amount = DH.parseDuration(amount);\n        }\n        // Allow DH.as('ms', myDurationObject)\n        if (typeof amount === 'object') {\n            fromUnit = amount.unit;\n            amount = amount.magnitude;\n        }\n        if (toUnit === fromUnit) {\n            return amount;\n        }\n        toUnit = DH.normalizeUnit(toUnit);\n        fromUnit = DH.normalizeUnit(fromUnit);\n        if (toUnit === fromUnit) {\n            return amount;\n        }\n        // validConversions[][] can be negative to signal that conversion is not exact, ignore sign here\n        else if (unitMagnitudes[fromUnit] > unitMagnitudes[toUnit]) {\n            return amount * Math.abs(validConversions[fromUnit][toUnit]);\n        }\n        else {\n            return amount / Math.abs(validConversions[toUnit][fromUnit]);\n        }\n    }\n    static formatContainsHourInfo(format) {\n        const\n            stripEscapeRe = /(\\\\.)/g,\n            hourInfoRe    = /([HhKkmSsAa]|LT|L{3,}|l{3,})/;\n        return hourInfoRe.test(format.replace(stripEscapeRe, ''));\n    }\n    /**\n     * Returns `true` for 24-hour format.\n     * @param {String} format Date format\n     * @returns {Boolean} `true` for 24-hour format\n     * @category Parse & format\n     */\n    static is24HourFormat(format) {\n        return DH.format(DH.getTime(13, 0, 0), format).includes('13');\n    }\n    //endregion\n    //region Manipulate\n    /**\n     * Add days, hours etc. to a date. Always clones the date, original will be left unaffected.\n     * @param {Date|String} date Original date\n     * @param {Number|String|Core.data.Duration|DurationConfig} amount Amount of days, hours etc. or a string representation of a duration\n     * as accepted by {@link #function-parseDuration-static} or an object with `{ magnitude, unit }` properties\n     * @param {String} [unit='ms'] Unit for amount\n     * @privateparam {Boolean} [clone=true] Pass `false` to affect the original\n     * @returns {Date} New calculated date\n     * @category Manipulate\n     */\n    static add(date, amount, unit = 'ms', clone = true) {\n        let d;\n        if (typeof date === 'string') {\n            d = DH.parse(date);\n        }\n        else if (clone) {\n            d = new Date(date.getTime());\n        }\n        else {\n            d = date;\n        }\n        if (typeof amount === 'string') {\n            const duration = DateHelper.parseDuration(amount);\n            amount = duration.magnitude;\n            unit   = duration.unit;\n        }\n        else if (amount && typeof amount === 'object') {\n            unit = amount.unit;\n            amount = amount.magnitude;\n        }\n        if (!unit || amount === 0) {\n            return d;\n        }\n        unit = DH.normalizeUnit(unit);\n        switch (unit) {\n            case 'millisecond':\n                d.setTime(d.getTime() + amount);\n                break;\n            case 'second':\n                d.setTime(d.getTime() + (amount * 1000));\n                break;\n            case 'minute':\n                d.setTime(d.getTime() + (amount * 60000));\n                break;\n            case 'hour':\n                d.setTime(d.getTime() + (amount * 3600000));\n                break;\n            case 'day':\n                // Integer value added, do calendar calculation to correctly handle DST etc.\n                if (amount % 1 === 0) {\n                    d.setDate(d.getDate() + amount);\n                    // When crossing DST in Brazil, we expect hours to end up the same\n                    if (d.getHours() === 23 && date.getHours() === 0) {\n                        d.setHours(d.getHours() + 1);\n                    }\n                }\n                // No browsers support fractional values for dates any longer, do time based calculation\n                else {\n                    d.setTime(d.getTime() + (amount * 86400000));\n                }\n                break;\n            case 'week':\n                d.setDate(d.getDate() + amount * 7);\n                break;\n            case 'month': {\n                let day = d.getDate();\n                if (day > 28) {\n                    day = Math.min(day, DH.getLastDateOfMonth(DH.add(DH.getFirstDateOfMonth(d), amount, 'month')).getDate());\n                }\n                d.setDate(day);\n                d.setMonth(d.getMonth() + amount);\n                break;\n            }\n            case 'quarter':\n                DH.add(d, amount * 3, 'month', false);\n                break;\n            case 'year':\n                d.setFullYear(d.getFullYear() + amount);\n                break;\n            case 'decade':\n                d.setFullYear(d.getFullYear() + amount * 10);\n                break;\n        }\n        return d;\n    }\n    /**\n     * Calculates the difference between two dates, in the specified unit.\n     * @param {Date} start First date\n     * @param {Date} end Second date\n     * @param {String} [unit='ms'] Unit to calculate difference in\n     * @param {Boolean} [fractional=true] Specify false to round result\n     * @returns {Number} Difference in the specified unit\n     * @category Manipulate\n     */\n    static diff(start, end, unit = 'ms', fractional = true) {\n        unit = DH.normalizeUnit(unit);\n        if (!start || !end) return 0;\n        let amount;\n        switch (unit) {\n            case 'year':\n                amount = DH.diff(start, end, 'month') / 12;\n                break;\n            case 'quarter':\n                amount = DH.diff(start, end, 'month') / 3;\n                break;\n            case 'month':\n                amount = ((end.getFullYear() - start.getFullYear()) * 12) + (end.getMonth() - start.getMonth());\n                if (amount === 0 && fractional) {\n                    amount = DH.diff(start, end, 'day', fractional) / DH.daysInMonth(start);\n                }\n                break;\n            case 'week':\n                amount = DH.diff(start, end, 'day') / 7;\n                break;\n            case 'day': {\n                const dstDiff = start.getTimezoneOffset() - end.getTimezoneOffset();\n                amount = (end - start + dstDiff * 60 * 1000) / 86400000;\n                break;\n            }\n            case 'hour':\n                amount = (end - start) / 3600000;\n                break;\n            case 'minute':\n                amount = (end - start) / 60000;\n                break;\n            case 'second':\n                amount = (end - start) / 1000;\n                break;\n            case 'millisecond':\n                amount = (end - start);\n                break;\n        }\n        return fractional ? amount : Math.round(amount);\n    }\n    /**\n     * Sets the date to the start of the specified unit, by default returning a clone of the date instead of changing it\n     * in place.\n     * @param {Date} date Original date\n     * @param {String} [unit='day'] Start of this unit, `'day'`, `'month'` etc\n     * @param {Boolean} [clone=true] Manipulate a copy of the date\n     * @param {Number} [weekStartDay] The first day of week, `0-6` (Sunday-Saturday). Defaults to the {@link #property-weekStartDay-static}\n     * @returns {Date} Manipulated date\n     * @category Manipulate\n     */\n    static startOf(date, unit = 'day', clone = true, weekStartDay = DH.weekStartDay) {\n        if (!date) {\n            return null;\n        }\n        unit = DH.normalizeUnit(unit);\n        if (clone) {\n            date = DH.clone(date);\n        }\n        switch (unit) {\n            case 'year':\n                date.setMonth(0, 1);\n                date.setHours(0, 0, 0, 0);\n                return date;\n            case 'quarter':\n                date.setMonth((DH.get(date, 'quarter') - 1) * 3, 1);\n                date.setHours(0, 0, 0, 0);\n                return date;\n            case 'month':\n                date.setDate(1);\n                date.setHours(0, 0, 0, 0);\n                return date;\n            case 'week': {\n                const delta = date.getDay() - weekStartDay;\n                date.setDate(date.getDate() - delta);\n                date.setHours(0, 0, 0, 0);\n                return date;\n            }\n            case 'day':\n                date.setHours(0, 0, 0, 0);\n                return date;\n            // Cant use setMinutes(0, 0, 0) etc. for DST transitions\n            case 'hour':\n                date.getMinutes() > 0 && date.setMinutes(0);\n            // eslint-disable-next-line no-fallthrough\n            case 'minute':\n                date.getSeconds() > 0 && date.setSeconds(0);\n            // eslint-disable-next-line no-fallthrough\n            case 'second':\n                date.getMilliseconds() > 0 && date.setMilliseconds(0);\n            // eslint-disable-next-line no-fallthrough\n            case 'millisecond':\n                return date;\n        }\n    }\n    /**\n     * Returns the end point of the passed date, that is 00:00:00 of the day after the passed date.\n     * @param {Date} date The date to return the end point of\n     * @returns {Date} Manipulated date\n     */\n    static endOf(date) {\n        return new Date(date.getFullYear(), date.getMonth(), date.getDate() + 1);\n    }\n    /**\n     * Creates a clone of the specified date\n     * @param {Date} date Original date\n     * @returns {Date} Cloned date\n     * @category Manipulate\n     */\n    static clone(date) {\n        return new Date(date.getTime());\n    }\n    /**\n     * Removes time from a date (same as calling {@link #function-startOf-static startOf(date)}).\n     * @param {Date} date Date to remove time from\n     * @param {Boolean} [clone=true] Manipulate a copy of the date\n     * @returns {Date} Manipulated date\n     * @category Manipulate\n     */\n    static clearTime(date, clone = true) {\n        if (!date) {\n            return null;\n        }\n        if (clone) {\n            date = new Date(date.getTime());\n        }\n        date.setHours(0, 0, 0, 0);\n        return date;\n    }\n    static midnight(date, inclusive) {\n        let ret = DH.clearTime(date);\n        if (inclusive && ret < date) {\n            ret = DH.add(ret, 1, 'd');\n        }\n        return ret;\n    }\n    /**\n     * Returns the elapsed milliseconds from the start of the specified date.\n     * @param {Date} date Date to remove date from\n     * @param {String} [unit='ms'] The time unit to return\n     * @returns {Number} The elapsed milliseconds from the start of the specified date\n     * @category Manipulate\n     */\n    static getTimeOfDay(date, unit = 'ms') {\n        const t = (date.getHours() * validConversions.hour.millisecond) +\n            (date.getMinutes() * validConversions.minute.millisecond) +\n            (date.getSeconds() * validConversions.second.millisecond) +\n            date.getMilliseconds();\n        return (unit === 'ms') ? t : DH.as(unit, t, 'ms');\n    }\n    /**\n     * Sets a part of a date (in place).\n     * @param {Date} date Date to manipulate\n     * @param {String|Object} unit Part of date to set, for example `'minute'`. Or an object like `{ second: 1, minute: 1 }`\n     * @param {Number} amount Value to set\n     * @returns {Date} Passed date instance modified according to the arguments\n     * @category Manipulate\n     */\n    static set(date, unit, amount) {\n        if (!unit) {\n            return date;\n        }\n        if (typeof unit === 'string') {\n            switch (DH.normalizeUnit(unit)) {\n                case 'millisecond':\n                    // Setting value to 0 when it is 0 at DST crossing messes it up\n                    if (amount !== 0 || date.getMilliseconds() > 0) {\n                        date.setMilliseconds(amount);\n                    }\n                    break;\n                case 'second':\n                    // Setting value to 0 when it is 0 at DST crossing messes it up\n                    if (amount !== 0 || date.getSeconds() > 0) {\n                        date.setSeconds(amount);\n                    }\n                    break;\n                case 'minute':\n                    // Setting value to 0 when it is 0 at DST crossing messes it up\n                    if (amount !== 0 || date.getMinutes() > 0) {\n                        date.setMinutes(amount);\n                    }\n                    break;\n                case 'hour':\n                    date.setHours(amount);\n                    break;\n                case 'day':\n                case 'date':\n                    date.setDate(amount);\n                    break;\n                case 'week':\n                    throw new Error('week not implemented');\n                case 'month':\n                    date.setMonth(amount);\n                    break;\n                case 'quarter':\n                    // Setting quarter = first day of first month of that quarter\n                    date.setDate(1);\n                    date.setMonth((amount - 1) * 3);\n                    break;\n                case 'year':\n                    date.setFullYear(amount);\n                    break;\n            }\n        }\n        else {\n            Object.entries(unit)\n                // Make sure smallest unit goes first, to not change month before changing day\n                .sort((a, b) => unitMagnitudes[a[0]] - unitMagnitudes[b[0]])\n                .forEach(([unit, amount]) => {\n                    DH.set(date, unit, amount);\n                });\n        }\n        return date;\n    }\n    static setDateToMidday(date, clone = true) {\n        return DH.set(DH.clearTime(date, clone), 'hour', 12);\n    }\n    /**\n     * Constrains the date within a min and a max date.\n     * @param {Date} date The date to constrain\n     * @param {Date} [min] Min date\n     * @param {Date} [max] Max date\n     * @returns {Date} The constrained date\n     * @category Manipulate\n     */\n    static constrain(date, min, max) {\n        if (min != null) {\n            date = DH.max(date, min);\n        }\n        return max == null ? date : DH.min(date, max);\n    }\n    /**\n     * Returns time with default year, month, and day (Jan 1, 2020).\n     * @param {Number|Date} hours Hours value or the full date to extract the time of\n     * @param {Number} [minutes=0] Minutes value\n     * @param {Number} [seconds=0] Seconds value\n     * @param {Number} [ms=0] Milliseconds value\n     * @returns {Date} A new default date with the time extracted from the given date or from the time values provided individually\n     * @category Manipulate\n     */\n    static getTime(hours, minutes = 0, seconds = 0, ms = 0) {\n        if (hours instanceof Date) {\n            ms = hours.getMilliseconds();\n            seconds = hours.getSeconds();\n            minutes = hours.getMinutes();\n            hours = hours.getHours();\n        }\n        return new Date(DEFAULT_YEAR, DEFAULT_MONTH, DEFAULT_DAY, hours, minutes, seconds, ms);\n    }\n    /**\n     * Copies hours, minutes, seconds, milliseconds from one date to another.\n     *\n     * @param {Date} targetDate The target date\n     * @param {Date} sourceDate The source date\n     * @returns {Date} The adjusted target date\n     * @category Manipulate\n     * @static\n     */\n    static copyTimeValues(targetDate, sourceDate) {\n        targetDate.setHours(sourceDate.getHours());\n        targetDate.setMinutes(sourceDate.getMinutes());\n        targetDate.setSeconds(sourceDate.getSeconds());\n        targetDate.setMilliseconds(sourceDate.getMilliseconds());\n        return targetDate;\n    }\n    //endregion\n    //region Comparison\n    static get isDSTEnabled() {\n        const\n            year = new Date().getFullYear(),\n            jan  = new Date(year, 0, 1),\n            jul  = new Date(year, 6, 1);\n        return jan.getTimezoneOffset() !== jul.getTimezoneOffset();\n    }\n    static isDST(date) {\n        const\n            year = date.getFullYear(),\n            jan  = new Date(year, 0, 1),\n            jul  = new Date(year, 6, 1);\n        return date.getTimezoneOffset() < Math.max(jan.getTimezoneOffset(), jul.getTimezoneOffset());\n    }\n    /**\n     * Determines if a date precedes another.\n     * @param {Date} first First date\n     * @param {Date} second Second date\n     * @returns {Boolean} `true` if first precedes second, otherwise false\n     * @category Comparison\n     */\n    static isBefore(first, second) {\n        return first < second;\n    }\n    /**\n     * Determines if a date succeeds another.\n     * @param {Date} first First date\n     * @param {Date} second Second date\n     * @returns {Boolean} `true` if first succeeds second, otherwise false\n     * @category Comparison\n     */\n    static isAfter(first, second) {\n        return first > second;\n    }\n    /**\n     * Checks if two dates are equal.\n     * @param {Date} first First date\n     * @param {Date} second Second date\n     * @param {String} [unit] Unit to calculate difference in. If not given, the comparison will be done up to a millisecond\n     * @returns {Boolean} `true` if the dates are equal\n     * @category Comparison\n     */\n    static isEqual(first, second, unit = null) {\n        if (unit === null) {\n            // https://jsbench.me/3jk2bom2r3/1\n            // https://jsbench.me/ltkb3vk0ji/1 (more flavors) - getTime is >2x faster vs valueOf/Number/op+\n            return first && second && first.getTime() === second.getTime();\n        }\n        return DH.startOf(first, unit) - DH.startOf(second, unit) === 0;\n    }\n    /**\n     * Compares two dates using the specified precision.\n     * @param {Date} first First date\n     * @param {Date} second Second date\n     * @param {String} [unit] Unit to calculate difference in. If not given, the comparison will be done up to a millisecond\n     * @returns {Number} `0` = equal, `-1` = first before second, `1` = first after second\n     * @category Comparison\n     */\n    static compare(first, second, unit = null) {\n        // Unit specified, cut the rest out\n        if (unit) {\n            first = DH.startOf(first, unit);\n            second = DH.startOf(second, unit);\n        }\n        // Comparison on ms level\n        if (first < second) return -1;\n        if (first > second) return 1;\n        return 0;\n    }\n    /**\n     * Coerces the passed Date between the passed minimum and maximum values.\n     * @param {Date} date The date to clamp between the `min` and `max`\n     * @param {Date} min The minimum Date\n     * @param {Date} max The maximum Date\n     * @returns {Date} If the passed `date` is valid, a *new* Date object which is clamped between the `min` and `max`\n     */\n    static clamp(date, min, max) {\n        if (!isNaN(date)) {\n            if (min != null) {\n                date = Math.max(date, min);\n            }\n            if (max != null) {\n                date = Math.min(date, max);\n            }\n            return new Date(date);\n        }\n    }\n    static isSameDate(first, second) {\n        return DH.compare(first, second, 'd') === 0;\n    }\n    static isSameTime(first, second) {\n        return first.getHours() === second.getHours() &&\n            first.getMinutes() === second.getMinutes() &&\n            first.getSeconds() === second.getSeconds() &&\n            first.getMilliseconds() === second.getMilliseconds();\n    }\n    /**\n     * Checks if date is the start of specified unit.\n     * @param {Date} date Date\n     * @param {String} unit Time unit\n     * @returns {Boolean} `true` if date is the start of specified unit\n     * @category Comparison\n     */\n    static isStartOf(date, unit) {\n        return DH.isEqual(date, DH.startOf(date, unit));\n    }\n    /**\n     * Checks if this date is `>= start` and `< end`.\n     * @param {Date} date The source date\n     * @param {Date} start Start date\n     * @param {Date} end End date\n     * @returns {Boolean} `true` if this date falls on or between the given start and end dates\n     * @category Comparison\n     */\n    static betweenLesser(date, start, end) {\n        //return start <= date && date < end;\n        return start.getTime() <= date.getTime() && date.getTime() < end.getTime();\n    }\n    /**\n     * Checks if this date is `>= start` and `<= end`.\n     * @param {Date} date The source date\n     * @param {Date} start Start date\n     * @param {Date} end End date\n     * @returns {Boolean} `true` if this date falls on or between the given start and end dates\n     * @category Comparison\n     */\n    static betweenLesserEqual(date, start, end) {\n        return start.getTime() <= date.getTime() && date.getTime() <= end.getTime();\n    }\n    /**\n     * Returns `true` if dates intersect.\n     * @param {Date} date1Start Start date of first span\n     * @param {Date} date1End End date of first span\n     * @param {Date} date2Start Start date of second span\n     * @param {Date} date2End End date of second span\n     * @returns {Boolean} Returns `true` if dates intersect\n     * @category Comparison\n     */\n    static intersectSpans(date1Start, date1End, date2Start, date2End) {\n        return DH.betweenLesser(date1Start, date2Start, date2End) ||\n            DH.betweenLesser(date2Start, date1Start, date1End);\n    }\n    /**\n     * Compare two units. Returns `1` if first param is a greater unit than second param, `-1` if the opposite is true or `0` if they're equal.\n     * @param {String} unit1 The 1st unit\n     * @param {String} unit2 The 2nd unit\n     * @returns {Number} Returns `1` if first param is a greater unit than second param, `-1` if the opposite is true or `0` if they're equal\n     * @category Comparison\n     */\n    static compareUnits(unit1, unit2) {\n        return Math.sign(unitMagnitudes[DH.normalizeUnit(unit1)] - unitMagnitudes[DH.normalizeUnit(unit2)]);\n    }\n    /**\n     * Returns `true` if the first time span completely 'covers' the second time span.\n     *\n     * @example\n     * DateHelper.timeSpanContains(\n     *     new Date(2010, 1, 2),\n     *     new Date(2010, 1, 5),\n     *     new Date(2010, 1, 3),\n     *     new Date(2010, 1, 4)\n     * ) ==> true\n     * DateHelper.timeSpanContains(\n     *   new Date(2010, 1, 2),\n     *   new Date(2010, 1, 5),\n     *   new Date(2010, 1, 3),\n     *   new Date(2010, 1, 6)\n     * ) ==> false\n     *\n     * @param {Date} spanStart The start date for initial time span\n     * @param {Date} spanEnd The end date for initial time span\n     * @param {Date} otherSpanStart The start date for the 2nd time span\n     * @param {Date} otherSpanEnd The end date for the 2nd time span\n     * @returns {Boolean} `true` if the first time span completely 'covers' the second time span\n     * @category Comparison\n     */\n    static timeSpanContains(spanStart, spanEnd, otherSpanStart, otherSpanEnd) {\n        return (otherSpanStart - spanStart) >= 0 && (spanEnd - otherSpanEnd) >= 0;\n    }\n    //endregion\n    //region Query\n    /**\n     * Get the first day of week, 0-6 (Sunday-Saturday).\n     * This is determined by the current locale's `DateHelper.weekStartDay` parameter.\n     * @property {Number}\n     * @readonly\n     */\n    static get weekStartDay() {\n        // Cache is reset in applyLocale\n        if (DH._weekStartDay == null) {\n            // Defaults to 0, should not need to happen in real world scenarios when a locale is always loaded\n            DH._weekStartDay = this.localize('L{weekStartDay}') || 0;\n        }\n        return DH._weekStartDay;\n    }\n    /**\n     * Get non-working days as an object where keys are day indices, 0-6 (Sunday-Saturday), and the value is `true`.\n     * This is determined by the current locale's `DateHelper.nonWorkingDays` parameter.\n     *\n     * For example:\n     * ```javascript\n     * {\n     *     0 : true, // Sunday\n     *     6 : true  // Saturday\n     * }\n     * ```\n     *\n     * @property {Object<Number,Boolean>}\n     * @readonly\n     */\n    static get nonWorkingDays() {\n        return { ...this.localize('L{nonWorkingDays}') };\n    }\n    /**\n     * Get non-working days as an array of day indices, 0-6 (Sunday-Saturday).\n     * This is determined by the current locale's `DateHelper.nonWorkingDays` parameter.\n     *\n     * For example:\n     *\n     * ```javascript\n     * [ 0, 6 ] // Sunday & Saturday\n     * ```\n     *\n     * @property {Number[]}\n     * @readonly\n     * @internal\n     */\n    static get nonWorkingDaysAsArray() {\n        // transform string keys to integers\n        return Object.keys(this.nonWorkingDays).map(Number);\n    }\n    /**\n     * Get weekend days as an object where keys are day indices, 0-6 (Sunday-Saturday), and the value is `true`.\n     * Weekends are days which are declared as weekend days by the selected country and defined by the current locale's\n     * `DateHelper.weekends` parameter.\n     * To get non-working days see {@link #property-nonWorkingDays-static}.\n     *\n     * For example:\n     * ```javascript\n     * {\n     *     0 : true, // Sunday\n     *     6 : true  // Saturday\n     * }\n     * ```\n     * @property {Object<Number,Boolean>}\n     * @readonly\n     * @internal\n     */\n    static get weekends() {\n        return { ...this.localize('L{weekends}') };\n    }\n    /**\n     * Get the specified part of a date.\n     * @param {Date} date\n     * @param {String} unit Part of date, hour, minute etc.\n     * @returns {Number} The requested part of the specified date\n     * @category Query\n     */\n    static get(date, unit) {\n        switch (DH.normalizeUnit(unit)) {\n            case 'millisecond':\n                return date.getMilliseconds();\n            case 'second':\n                return date.getSeconds();\n            case 'minute':\n                return date.getMinutes();\n            case 'hour':\n                return date.getHours();\n            case 'date':\n            case 'day': // Scheduler has a lot of calculations expecting this to work\n                return date.getDate();\n            case 'week':\n                return formats.W(date);\n            case 'month':\n                return date.getMonth();\n            case 'quarter':\n                return Math.floor(date.getMonth() / 3) + 1;\n            case 'year':\n                return date.getFullYear();\n        }\n        return null;\n    }\n    /**\n     * Get number of days in the current year for the supplied date.\n     * @param {Date} date Date to check\n     * @returns {Number} Days in year\n     * @category Query\n     * @internal\n     */\n    static daysInYear(date) {\n        const\n            fullYear = date.getFullYear(),\n            duration = new Date(fullYear + 1, 0, 1) - new Date(fullYear, 0, 1);\n        return this.as('day', duration);\n    }\n    /**\n     * Get number of days in the current month for the supplied date.\n     * @param {Date} date Date which month should be checked\n     * @returns {Number} Days in month\n     * @category Query\n     */\n    static daysInMonth(date) {\n        return 32 - new Date(date.getFullYear(), date.getMonth(), 32).getDate();\n    }\n    /**\n     * Get number of hours in the current day for the supplied date.\n     * @param {Date} date Date to check\n     * @returns {Number} Hours in day\n     * @category Query\n     * @internal\n     */\n    static hoursInDay(date) {\n        const\n            fullYear = date.getFullYear(),\n            month    = date.getMonth(),\n            day      = date.getDate(),\n            duration = new Date(fullYear, month, day + 1) - new Date(fullYear, month, day);\n        return this.as('hour', duration);\n    }\n    /**\n     * Converts unit related to the date to actual amount of milliseconds in it. Takes into account leap years and\n     * different duration of months.\n     * @param {Date} date Date\n     * @param {String} unit Time unit\n     * @returns {Number} Returns amount of milliseconds\n     * @internal\n     */\n    static getNormalizedUnitDuration(date, unit) {\n        let result;\n        switch (unit) {\n            case 'month':\n                result = DH.asMilliseconds(DH.daysInMonth(date), 'day');\n                break;\n            case 'year':\n                result = DH.asMilliseconds(DH.daysInYear(date), 'day');\n                break;\n            case 'day':\n                result = DH.asMilliseconds(DH.hoursInDay(date), 'hour');\n                break;\n            default:\n                result = DH.asMilliseconds(unit);\n        }\n        return result;\n    }\n    /**\n     * Get the first date of the month for the supplied date.\n     * @param {Date} date Date\n     * @returns {Date} New Date instance\n     * @category Query\n     */\n    static getFirstDateOfMonth(date) {\n        return new Date(date.getFullYear(), date.getMonth(), 1);\n    }\n    /**\n     * Get the last date of the month for the supplied date.\n     * @param {Date} date Date\n     * @returns {Date} New Date instance\n     * @category Query\n     */\n    static getLastDateOfMonth(date) {\n        return new Date(date.getFullYear(), date.getMonth() + 1, 0);\n    }\n    /**\n     * Get the earliest of two dates.\n     * @param {Date} first First date\n     * @param {Date} second Second date\n     * @returns {Date} Earliest date\n     * @category Query\n     */\n    static min(first, second) {\n        return first.getTime() < second.getTime() ? first : second;\n    }\n    /**\n     * Get the latest of two dates.\n     * @param {Date} first First date\n     * @param {Date} second Second date\n     * @returns {Date} Latest date\n     * @category Query\n     */\n    static max(first, second) {\n        return first.getTime() > second.getTime() ? first : second;\n    }\n    /**\n     * Get an incremented date. Incrementation based on specified unit and optional amount.\n     * @param {Date} date Date\n     * @param {String} unit Time unit\n     * @param {Number} [increment=1] Increment amount\n     * @param {Number} [weekStartDay] Will default to what is set in locale\n     * @returns {Date} New Date instance\n     * @category Query\n     */\n    static getNext(date, unit, increment = 1, weekStartDay = DH.weekStartDay) {\n        if (unit === 'week') {\n            const\n                dt  = DH.clone(date),\n                day = dt.getDay();\n            DH.startOf(dt, 'day', false);\n            DH.add(dt, weekStartDay - day + 7 * (increment - (weekStartDay <= day ? 0 : 1)), 'day', false);\n            // For south american timezones, midnight does not exist on DST transitions, adjust...\n            if (dt.getDay() !== weekStartDay) {\n                DH.add(dt, 1, 'hour');\n            }\n            return dt;\n        }\n        return DH.startOf(DH.add(date, increment, unit), unit, false);\n    }\n    /**\n     * Checks if date object is valid.\n     *\n     * For example:\n     *\n     * ```javascript\n     * date = new Date('foo')\n     * date instanceof Date // true\n     * date.toString() // Invalid Date\n     * isNaN(date) // true\n     * DateHelper.isValidDate(date) // false\n     *\n     * date = new Date()\n     * date instanceof Date // true\n     * date.toString() // Mon Jan 13 2020 18:27:38 GMT+0300 (GMT+03:00)\n     * isNaN(date) // false\n     * DateHelper.isValidDate(date) // true\n     * ```\n     *\n     * @param {Date} date Date\n     * @returns {Boolean} `true` if date object is valid\n     */\n    static isValidDate(date) {\n        return DH.isDate(date) && !isNaN(date);\n    }\n    /**\n     * Checks if value is a date object. Allows to recognize date object even from another context,\n     * like the top frame when used in an iframe.\n     *\n     * @param {*} value Value to check\n     * @returns {Boolean} `true` if value is a date object\n     */\n    static isDate(value) {\n        // see https://jsbench.me/s7kb49w83j/1 (cannot use instanceof cross-frame):\n        return value && toString.call(value) === DATE_TYPE;\n    }\n    /**\n     * Get the start of the next day.\n     * @param {Date} date Date\n     * @param {Boolean} [clone=false] Clone date\n     * @param {Boolean} [noNeedToClearTime=false] Flag to not clear time from the result\n     * @returns {Date} Passed Date or new Date instance, depending on the `clone` flag\n     * @category Query\n     */\n    static getStartOfNextDay(date, clone = false, noNeedToClearTime = false) {\n        let nextDay = DH.add(noNeedToClearTime ? date : DH.clearTime(date, clone), 1, 'day');\n        // DST case\n        if (nextDay.getDate() === date.getDate()) {\n            const\n                offsetNextDay = DH.add(DH.clearTime(date, clone), 2, 'day').getTimezoneOffset(),\n                offsetDate    = date.getTimezoneOffset();\n            nextDay = DH.add(nextDay, offsetDate - offsetNextDay, 'minute');\n        }\n        return nextDay;\n    }\n    /**\n     * Get the end of previous day.\n     * @param {Date} date Date\n     * @param {Boolean} [noNeedToClearTime=false] Flag to not clear time from the result\n     * @returns {Date} New Date instance\n     * @category Query\n     */\n    static getEndOfPreviousDay(date, noNeedToClearTime = false) {\n        const dateOnly = noNeedToClearTime ? date : DH.clearTime(date, true);\n        // dates are different\n        if (dateOnly - date) {\n            return dateOnly;\n        }\n        else {\n            return DH.add(dateOnly, -1, 'day');\n        }\n    }\n    /**\n     * Returns a string describing the specified week. For example, `'39, September 2020'` or `'40, Sep - Oct 2020'`.\n     * @param {Date} startDate Start date\n     * @param {Date} [endDate] End date\n     * @returns {String} String describing the specified week\n     * @internal\n     */\n    static getWeekDescription(startDate, endDate = startDate) {\n        const\n            monthDesc  = startDate.getMonth() === endDate.getMonth()\n                ? DateHelper.format(startDate, 'MMMM')\n                : `${DateHelper.format(startDate, 'MMM')} - ${DateHelper.format(endDate, 'MMM')}`,\n            week = DateHelper.getWeekNumber(startDate);\n        return `${week[1]}, ${monthDesc} ${week[0]}`;\n    }\n    /**\n     * Get week number for the date.\n     * @param {Date} date The date\n     * @param {Number} [weekStartDay] The first day of week, 0-6 (Sunday-Saturday). Defaults to the {@link #property-weekStartDay-static}\n     * @returns {Number[]} year and week number\n     * @category Query\n     */\n    static getWeekNumber(date, weekStartDay = DateHelper.weekStartDay) {\n        const\n            jan01     = new Date(date.getFullYear(), 0, 1),\n            dec31     = new Date(date.getFullYear(), 11, 31),\n            firstDay  = normalizeDay(jan01.getDay() - weekStartDay),\n            lastDay   = normalizeDay(dec31.getDay() - weekStartDay),\n            dayNumber = getDayDiff(date, jan01);\n        let weekNumber;\n        // Check if the year starts before the middle of a week\n        if (firstDay < 4) {\n            weekNumber = Math.floor((dayNumber + firstDay - 1) / 7) + 1;\n        }\n        else {\n            weekNumber = Math.floor((dayNumber + firstDay - 1) / 7);\n        }\n        if (weekNumber) {\n            let year = date.getFullYear();\n            // Might be week 1 of next year if the year ends before day 3 (0 based)\n            if (weekNumber === 53 && lastDay < 3) {\n                year++;\n                weekNumber = 1;\n            }\n            return [year, weekNumber];\n        }\n        // We're in week zero which is the last week of the previous year, so ask what\n        // week encapsulates 31 Dec in the previous year.\n        const lastWeekOfLastYear = DateHelper.getWeekNumber(new Date(date.getFullYear() - 1, 11, 31))[1];\n        return [date.getFullYear() - 1, lastWeekOfLastYear];\n    }\n    //endregion\n    //region Unit helpers\n    /**\n     * Turns `(10, 'day')` into `'10 days'` etc.\n     * @param {Number} count Amount of unit\n     * @param {String} unit Unit, will be normalized (days, d -> day etc.)\n     * @returns {String} Amount formatted to string\n     * @category Unit helpers\n     */\n    static formatCount(count, unit) {\n        unit = DH.normalizeUnit(unit);\n        if (count !== 1) unit += 's';\n        return count + ' ' + unit;\n    }\n    /**\n     * Get the ratio between two units ( year, month -> 1/12 ).\n     * @param {String} baseUnit Base time unit\n     * @param {String} unit Time unit\n     * @param {Boolean} [acceptEstimate=false] If `true`, process negative values of validConversions\n     * @returns {Number} Ratio\n     * @category Unit helpers\n     */\n    static getUnitToBaseUnitRatio(baseUnit, unit, acceptEstimate = false) {\n        baseUnit = DH.normalizeUnit(baseUnit);\n        unit = DH.normalizeUnit(unit);\n        if (baseUnit === unit) return 1;\n        // Some validConversions have negative sign to signal that it is not an exact conversion.\n        // Ignore those here unless acceptEstimate is provided.\n        if (validConversions[baseUnit] && validConversions[baseUnit][unit] && (acceptEstimate || validConversions[baseUnit][unit] > 0)) {\n            return 1 / DH.as(unit, 1, baseUnit);\n        }\n        if (validConversions[unit] && validConversions[unit][baseUnit] && (acceptEstimate || validConversions[unit][baseUnit] > 0)) {\n            return DH.as(baseUnit, 1, unit);\n        }\n        return -1;\n    }\n    /**\n     * Returns a localized abbreviated form of the name of the duration unit.\n     * For example in the `EN` locale, for `'qrt'` it will return `'q'`.\n     * @param {String} unit Duration unit\n     * @returns {String} Localized abbreviated form of the name of the duration unit\n     * @category Unit helpers\n     */\n    static getShortNameOfUnit(unit) {\n        // Convert abbreviations to the canonical name.\n        // See locale file and the applyLocale method below.\n        unit = DH.parseTimeUnit(unit);\n        // unitLookup is keyed by eg 'DAY', 'day', 'MILLISECOND', 'millisecond' etc\n        return DH.unitLookup[unit].abbrev;\n    }\n    /**\n     * Returns a localized full name of the duration unit.\n     *\n     * For example in the `EN` locale, for `'d'` it will return either\n     * `'day'` or `'days'`, depending on the `plural` argument\n     *\n     * Preserves casing of first letter.\n     *\n     * @static\n     * @param {String} unit Time unit\n     * @param {Boolean} [plural=false] Whether to return a plural name or singular\n     * @returns {String} Localized full name of the duration unit\n     * @category Unit helpers\n     */\n    static getLocalizedNameOfUnit(unit, plural = false) {\n        const capitalize = unit.charAt(0) === unit.charAt(0).toUpperCase();\n        // Normalize to not have to have translations for each variation used in code\n        unit = DH.normalizeUnit(unit);\n        // Convert abbreviations to the canonical name.\n        // See locale file and the applyLocale method below.\n        unit = DH.parseTimeUnit(unit);\n        // Translate\n        // unitLookup is keyed by eg 'DAY', 'day', 'MILLISECOND', 'millisecond' etc\n        unit = DH.unitLookup[unit][plural ? 'plural' : 'single'];\n        // Preserve casing of first letter\n        if (capitalize) {\n            unit = StringHelper.capitalize(unit);\n        }\n        return unit;\n    }\n    /**\n     * Normalizes a unit for easier usage in conditionals. For example `'year'`, `'years'`, `'y'` -> `'year'`.\n     * @param {String} unit Time unit\n     * @returns {String} Normalized unit name\n     * @category Unit helpers\n     */\n    static normalizeUnit(unit) {\n        if (!unit) {\n            return null;\n        }\n        const unitLower = unit.toLowerCase();\n        if (unitLower === 'date') {\n            return unitLower;\n        }\n        return canonicalUnitNames.includes(unitLower)\n            // Already valid\n            ? unitLower\n            // Trying specified case first, since we have both 'M' for month and 'm' for minute\n            : normalizedUnits[unit] || normalizedUnits[unitLower];\n    }\n    static getUnitByName(name) {\n        // Allow either a canonical name to be passed, or, if that fails, parse it as a localized name or abbreviation.\n        return DH.normalizeUnit(name) || DH.normalizeUnit(DH.parseTimeUnit(name));\n    }\n    /**\n     * Returns a duration of the timeframe in the given unit.\n     * @param {Date} start The start date of the timeframe\n     * @param {Date} end The end date of the timeframe\n     * @param {String} unit Duration unit\n     * @privateparam {Boolean} [doNotRound]\n     * @returns {Number} The duration in the units\n     * @category Unit helpers\n     * @ignore\n     */\n    static getDurationInUnit(start, end, unit, doNotRound) {\n        return DH.diff(start, end, unit, doNotRound);\n    }\n    /**\n     * Checks if two date units align.\n     * @private\n     * @param {String} majorUnit Major time unit\n     * @param {String} minorUnit Minor time unit\n     * @returns {Boolean} `true` if two date units align\n     * @category Unit helpers\n     */\n    static doesUnitsAlign(majorUnit, minorUnit) {\n        return !(majorUnit !== minorUnit && minorUnit === 'week');\n    }\n    static getSmallerUnit(unit) {\n        return canonicalUnitNames[unitMagnitudes[DH.normalizeUnit(unit)] - 1] || null;\n    }\n    static getLargerUnit(unit) {\n        return canonicalUnitNames[unitMagnitudes[DH.normalizeUnit(unit)] + 1] || null;\n    }\n    /**\n     *\n     * Rounds the passed Date value to the nearest `increment` value.\n     *\n     * Optionally may round relative to a certain base time point.\n     *\n     * For example `DH.round(new Date('2020-01-01T09:35'), '30 min', new Date('2020-01-01T09:15'))`\n     * would round to 9:45 because that's the nearest integer number of 30 minute increments\n     * from the base.\n     *\n     * Note that `base` is ignored when rounding to weeks. The configured {@link #property-weekStartDay-static}\n     * dictates what the base of a week is.\n     *\n     * @param {Date} time The time to round\n     * @param {String|Number} increment A millisecond value by which to round the time\n     * May be specified in string form eg: `'15 minutes'`\n     * @param {Date} [base] The start from which to apply the rounding\n     * @param {Number} [weekStartDay] Will default to what is set in locale\n     * @returns {Date} New Date instance\n     */\n    static round(time, increment, base, weekStartDay) {\n        return DH.snap('round', time, increment, base, weekStartDay);\n    }\n    /**\n     *\n     * Floor the passed Date value to the nearest `increment` value.\n     *\n     * Optionally may floor relative to a certain base time point.\n     *\n     * For example `DH.floor(new Date('2020-01-01T09:35'), '30 min', new Date('2020-01-01T09:15'))`\n     * would floor to 9:15 because that's the closest lower integer number of 30 minute increments\n     * from the base.\n     *\n     * Note that `base` is ignored when flooring to weeks. The configured {@link #property-weekStartDay-static}\n     * dictates what the base of a week is.\n     *\n     * @param {Date} time The time to floor\n     * @param {String|Number|DurationConfig|Object} increment A numeric millisecond value by which to floor the time.\n     * or a duration in string form eg `'30 min'` or object form : `{unit: 'minute', magnitude: 30}`\n     * or `{unit: 'minute', increment: 30}`\n     * @param {Date} [base] The start from which to apply the flooring\n     * @param {Number} [weekStartDay] Will default to what is set in locale\n     * @returns {Date} New Date instance\n     */\n    static floor(time, increment, base, weekStartDay) {\n        return DH.snap('floor', time, increment, base, weekStartDay);\n    }\n    /**\n     *\n     * Ceils the passed Date value to the nearest `increment` value.\n     *\n     * Optionally may ceil relative to a certain base time point.\n     *\n     * For example `DH.ceil(new Date('2020-01-01T09:35'), '30 min', new Date('2020-01-01T09:15'))`\n     * would ceil to 9:45 because that's the closest higher integer number of 30 minute increments\n     * from the base.\n     *\n     * Note that `base` is ignored when ceiling to weeks. Use weekStartDay argument which default to the configured\n     * {@link #property-weekStartDay-static} dictates what the base of a week is\n     *\n     * @param {Date} time The time to ceil\n     * @param {String|Number|DurationConfig|Object} increment A numeric millisecond value by which to ceil the time\n     * or a duration in string form eg `'30 min'` or object form : `{unit: 'minute', magnitude: 30}`\n     * or `{unit: 'minute', increment: 30}`\n     * @param {Date} [base] The start from which to apply the ceiling\n     * @param {Number} [weekStartDay] Will default to what is set in locale\n     * @returns {Date} New Date instance\n     */\n    static ceil(time, increment, base, weekStartDay) {\n        return DH.snap('ceil', time, increment, base, weekStartDay);\n    }\n    /**\n     * Implementation for round, floor and ceil.\n     * @internal\n     */\n    static snap(operation, time, increment, base, weekStartDay = DH.weekStartDay) {\n        const snapFn = snapFns[operation];\n        if (typeof increment === 'string') {\n            increment = DH.parseDuration(increment);\n        }\n        if (Objects.isObject(increment)) {\n            // Allow {unit: 'minute', increment: 30} or {unit: 'minute', magnitude: 30}\n            // parseDuration produces 'magnitude'. The Scheduler's TimeAxis uses 'increment'\n            // in its resolution object, so we allow that too.\n            const magnitude = increment.magnitude || increment.increment;\n            // increment is in weeks, months, quarters or years, then it can't be handled\n            // using millisecond arithmetic.\n            switch (increment.unit) {\n                case 'week':\n                {\n                    const weekDay = time.getDay();\n                    // weekStartDay gives our base\n                    // Our base is the start of the week\n                    base = DH.add(\n                        DH.clearTime(time),\n                        weekDay >= weekStartDay ? weekStartDay - weekDay : -(weekDay - weekStartDay + 7),\n                        'day'\n                    );\n                    return DH[operation](time, `${magnitude * 7} days`, base);\n                }\n                case 'month':\n                {\n                    // Express the time as a number of months from epoch start.\n                    // May be a fraction, eg the 15th will be 0.5 through a month.\n                    time = DH.asMonths(time);\n                    let resultMonths;\n                    // Snap the month count in the way requested\n                    if (base) {\n                        base = DH.asMonths(base);\n                        resultMonths = time + snapFn(time - base, magnitude);\n                    }\n                    else {\n                        resultMonths = snapFn(time, magnitude);\n                    }\n                    // Convert resulting month value back to a date\n                    return DH.monthsToDate(resultMonths);\n                }\n                case 'quarter':\n                    return DH[operation](time, `${magnitude * 3} months`, base);\n                case 'year':\n                    return DH[operation](time, `${magnitude * 12} months`, base);\n                case 'decade':\n                    // We assume that decades begin with a year divisible by 10\n                    return DH[operation](time, `${magnitude * 10} years`, base);\n            }\n            // Convert to a millisecond value\n            increment = DH.as('ms', magnitude, increment.unit);\n        }\n        // It's a simple round to milliseconds\n        if (base) {\n            const tzChange = DH.as('ms', base.getTimezoneOffset() - time.getTimezoneOffset(), 'ms');\n            return new Date(base.valueOf() + snapFn(DH.diff(base, time, 'ms') + tzChange, increment));\n        }\n        else {\n            const offset = time.getTimezoneOffset() * 60 * 1000;\n            // Assuming current TZ is GMT+3\n            // new Date(2000, 0, 1) / 86400000      -> 10956.875\n            // new Date(2000, 0, 1, 3) / 86400000   -> 10957\n            // Before calculation we need to align time value of the current timezone to GMT+0\n            // And after calculate we need to adjust time back\n            return new Date(snapFn(time.valueOf() - offset, increment) + offset);\n        }\n    }\n    //endregion\n    //region Date picker format\n    /**\n     * Parses a typed duration value according to locale rules.\n     *\n     * The value is taken to be a string consisting of the numeric magnitude and the units:\n     * - The numeric magnitude can be either an integer or a float value. Both `','` and `'.'` are valid decimal separators.\n     * - The units may be a recognised unit abbreviation of this locale or the full local unit name.\n     *\n     * For example:\n     * `'2d'`, `'2 d'`, `'2 day'`, `'2 days'` will be turned into `{ magnitude : 2, unit : 'day' }`\n     * `'2.5d'`, `'2,5 d'`, `'2.5 day'`, `'2,5 days'` will be turned into `{ magnitude : 2.5, unit : 'day' }`\n     *\n     * **NOTE:** Doesn't work with complex values like `'2 days, 2 hours'`\n     *\n     * @param {String} value The value to parse\n     * @param {Boolean} [allowDecimals=true] Decimals are allowed in the magnitude\n     * @param {String} [defaultUnit] Default unit to use if only magnitude passed\n     * @returns {DurationConfig} If successfully parsed, the result contains two properties, `magnitude` being a number, and\n     * `unit` being the canonical unit name, *NOT* a localized name. If parsing was unsuccessful, `null` is returned\n     * @category Parse & format\n     */\n    static parseDuration(value, allowDecimals = true, defaultUnit) {\n        const\n            durationRegEx = allowDecimals ? withDecimalsDurationRegex : noDecimalsDurationRegex,\n            match         = durationRegEx.exec(value);\n        if (value == null || !match) {\n            return null;\n        }\n        const\n            magnitude = parseNumber(match[1]?.replace(',', '.')),\n            unit      = DH.parseTimeUnit(match[2]) || defaultUnit;\n        if (!unit) {\n            return null;\n        }\n        return {\n            magnitude,\n            unit\n        };\n    }\n    /**\n     * Parses a typed unit name, for example `'ms'` or `'hr'` or `'yr'` into the\n     * canonical form of the unit name which may be passed to {@link #function-add-static}\n     * or {@link #function-diff-static}.\n     * @param {*} unitName Time unit name\n     * @category Parse & format\n     */\n    static parseTimeUnit(unitName) {\n        // NOTE: In case you get a crash here when running tests, it is caused by missing locale. Build locales\n        // using `scripts/build.js locales` to resolve.\n        const unitMatch = unitName == null ? null : DH.durationRegEx.exec(unitName.toLowerCase());\n        if (!unitMatch) {\n            return null;\n        }\n        // See which group in the unitAbbrRegEx matched match[2]\n        for (let unitOrdinal = 0; unitOrdinal < canonicalUnitNames.length; unitOrdinal++) {\n            if (unitMatch[unitOrdinal + 1]) {\n                return canonicalUnitNames[unitOrdinal];\n            }\n        }\n    }\n    //endregion\n    //region Internal\n    static getGMTOffset(date = new Date()) {\n        if (!date) {\n            return;\n        }\n        const offsetInMinutes = date.getTimezoneOffset();\n        // return 'Z' for UTC\n        if (!offsetInMinutes) return 'Z';\n        return (offsetInMinutes > 0 ? '-' : '+') +\n            Math.abs(Math.trunc(offsetInMinutes / 60)).toString().padStart(2, '0') +\n            ':' +\n            Math.abs(offsetInMinutes % 60).toString().padStart(2, '0');\n    }\n    static fillDayNames() {\n        const\n            tempDate      = new Date('2000-01-01T12:00:00'),\n            dayNames      = DH._dayNames || [],\n            dayShortNames = DH._dayShortNames || [];\n        dayNames.length = 0;\n        dayShortNames.length = 0;\n        for (let day = 2; day < 9; day++) {\n            tempDate.setDate(day);\n            dayNames.push(DH.format(tempDate, 'dddd'));\n            dayShortNames.push(DH.format(tempDate, 'ddd'));\n        }\n        DH._dayNames = dayNames;\n        DH._dayShortNames = dayShortNames;\n    }\n    static getDayNames() {\n        return DH._dayNames;\n    }\n    static getDayName(day) {\n        return DH._dayNames[day];\n    }\n    static getDayShortNames() {\n        return DH._dayShortNames;\n    }\n    static getDayShortName(day) {\n        return DH._dayShortNames[day];\n    }\n    static fillMonthNames() {\n        const\n            tempDate        = new Date('2000-01-15T12:00:00'),\n            monthNames      = DH._monthNames || [],\n            monthShortNames = DH._monthShortNames || [],\n            monthNamesIndex = {},\n            monthShortNamesIndex = {};\n        monthNames.length = 0;\n        monthShortNames.length = 0;\n        for (let month = 0; month < 12; month++) {\n            tempDate.setMonth(month);\n            const monthName = DH.format(tempDate, 'MMMM');\n            monthNames.push(monthName);\n            const monthShortName = DH.format(tempDate, 'MMM');\n            monthShortNames.push(monthShortName);\n            monthNamesIndex[monthName.toLowerCase()] = { name : monthName, value : month };\n            monthShortNamesIndex[monthShortName.toLowerCase()] = { name : monthShortName, value : month };\n        }\n        DH._monthNames = monthNames;\n        DH._monthShortNames = monthShortNames;\n        DH._monthNamesIndex = monthNamesIndex;\n        DH._monthShortNamesIndex = monthShortNamesIndex;\n    }\n    static getMonthShortNames() {\n        return DH._monthShortNames;\n    }\n    static getMonthShortName(month) {\n        return DH._monthShortNames[month];\n    }\n    static getMonthNames() {\n        return DH._monthNames;\n    }\n    static getMonthName(month) {\n        return DH._monthNames[month];\n    }\n    static set locale(name) {\n        locale = name;\n        intlFormatterCache = {};\n        formatCache = {};\n        formatRedirects = {};\n    }\n    static get locale() {\n        return locale;\n    }\n    static setupDurationRegEx(unitNames = [], unitAbbreviations = []) {\n        const\n            me         = this,\n            unitLookup = {};\n        let unitAbbrRegEx = '';\n        for (let i = 0; i < unitAbbreviations.length; i++) {\n            const\n                // for example ['s', 'sec']\n                abbreviations = unitAbbreviations[i],\n                // for example { single : 'second', plural : 'seconds', abbrev : 's' }\n                unitNamesCfg  = unitNames[i];\n            unitNamesCfg.canonicalUnitName = canonicalUnitNames[i];\n            // Create a unitLookup object keyed by unit full names\n            // both lower and upper case to be able to look up plurals or abbreviations\n            // also always include english names, since those are used in sources\n            unitLookup[unitNamesCfg.single] =\n                unitLookup[unitNamesCfg.single.toUpperCase()] =\n                    unitLookup[unitNamesCfg.canonicalUnitName] =\n                        unitLookup[unitNamesCfg.canonicalUnitName.toUpperCase()] = unitNamesCfg;\n            unitAbbrRegEx += `${i ? '|' : ''}(`;\n            for (let j = 0; j < abbreviations.length; j++) {\n                unitAbbrRegEx += `${abbreviations[j]}|`;\n            }\n            locale = me.localize('L{locale}') || 'en-US';\n            if (locale !== 'en-US') {\n                // Add canonical values to be able to parse durations specified in configs\n                const canonicalAbbreviations = canonicalUnitAbbreviations[i];\n                for (let j = 0; j < canonicalAbbreviations.length; j++) {\n                    unitAbbrRegEx += `${canonicalAbbreviations[j]}|`;\n                }\n            }\n            unitAbbrRegEx += `${unitNamesCfg.single}|${unitNamesCfg.plural}|${unitNamesCfg.canonicalUnitName}|${unitNamesCfg.canonicalUnitName}s)`;\n        }\n        me.unitLookup = unitLookup;\n        me.durationRegEx = new RegExp(`^(?:${unitAbbrRegEx})$`);\n    }\n    static applyLocale() {\n        const\n            me                = this,\n            unitAbbreviations = me.localize('L{unitAbbreviations}') || [],\n            unitNames         = me.unitNames = me.localize('L{unitNames}');\n        // This happens when applying an incomplete locale, as done in Localizable.t.js.\n        // Invalid usecase, but return to prevent a crash in that test.\n        if (unitNames === 'unitNames') {\n            return;\n        }\n        locale = me.localize('L{locale}') || 'en-US';\n        if (locale === 'en-US') {\n            ordinalSuffix = enOrdinalSuffix;\n        }\n        else {\n            ordinalSuffix = me.localize('L{ordinalSuffix}') || ordinalSuffix;\n        }\n        formatCache = {};\n        formatRedirects = {};\n        parserCache = {};\n        intlFormatterCache = {};\n        DH._weekStartDay = null;\n        DH.setupDurationRegEx(unitNames, unitAbbreviations);\n        // rebuild day/month names cache\n        DH.fillDayNames();\n        DH.fillMonthNames();\n    }\n    //endregion\n}\nconst DH = DateHelper;\nDH.useIntlFormat = useIntlFormat; // to use on tests\n// Update when changing locale\nLocaleManager.ion({\n    locale  : 'applyLocale',\n    prio    : 1000,\n    thisObj : DH\n});\n// Apply default locale\nif (LocaleManager.locale) {\n    DH.applyLocale();\n}\nDateHelper._$name = 'DateHelper';", "/**\n * The enumeration for the time units\n */\nexport var TimeUnit;\n(function (TimeUnit) {\n    TimeUnit[\"Millisecond\"] = \"millisecond\";\n    TimeUnit[\"Second\"] = \"second\";\n    TimeUnit[\"Minute\"] = \"minute\";\n    TimeUnit[\"Hour\"] = \"hour\";\n    TimeUnit[\"Day\"] = \"day\";\n    TimeUnit[\"Week\"] = \"week\";\n    TimeUnit[\"Month\"] = \"month\";\n    TimeUnit[\"Quarter\"] = \"quarter\";\n    TimeUnit[\"Year\"] = \"year\";\n})(TimeUnit || (TimeUnit = {}));\n/**\n * The enumeration for the supported constraint types\n */\nexport var ConstraintType;\n(function (ConstraintType) {\n    /**\n     * \"Must start on\" constraint.\n     * Restricts an event to start on a [[HasDateConstraintMixin.constraintDate|specified date]].\n     * The constraint cannot be used for a summary event.\n     */\n    ConstraintType[\"MustStartOn\"] = \"muststarton\";\n    /**\n     * \"Must finish on\" constraint.\n     * Restricts an event to finish on a [[HasDateConstraintMixin.constraintDate|specified date]].\n     * The constraint cannot be used for a summary event.\n     */\n    ConstraintType[\"MustFinishOn\"] = \"mustfinishon\";\n    /**\n     * \"Start no earlier than\" constraint.\n     * Restricting an event to start on or after a [[HasDateConstraintMixin.constraintDate|specified date]].\n     */\n    ConstraintType[\"StartNoEarlierThan\"] = \"startnoearlierthan\";\n    /**\n     * \"Start no later than\" constraint.\n     * Restricting an event to start on or before a [[HasDateConstraintMixin.constraintDate|specified date]].\n     *\n     * The constraint cannot be used for a summary task.\n     */\n    ConstraintType[\"StartNoLaterThan\"] = \"startnolaterthan\";\n    /**\n     * \"Finish no earlier than\" constraint.\n     * Restricting an event to finish on or after a [[HasDateConstraintMixin.constraintDate|specified date]].\n     *\n     * The constraint cannot be used for a summary task.\n     */\n    ConstraintType[\"FinishNoEarlierThan\"] = \"finishnoearlierthan\";\n    /**\n     * \"Finish no later than\" constraint.\n     * Restricting an event to finish on or before a [[HasDateConstraintMixin.constraintDate|specified date]].\n     */\n    ConstraintType[\"FinishNoLaterThan\"] = \"finishnolaterthan\";\n})(ConstraintType || (ConstraintType = {}));\n/**\n * The enumeration for the supported scheduling modes\n */\nexport var SchedulingMode;\n(function (SchedulingMode) {\n    SchedulingMode[\"Normal\"] = \"Normal\";\n    SchedulingMode[\"FixedDuration\"] = \"FixedDuration\";\n    SchedulingMode[\"FixedEffort\"] = \"FixedEffort\";\n    SchedulingMode[\"FixedUnits\"] = \"FixedUnits\";\n})(SchedulingMode || (SchedulingMode = {}));\n/**\n * The enumeration for the dependency validation result\n */\nexport var DependencyValidationResult;\n(function (DependencyValidationResult) {\n    /**\n     * Dependency has no errors\n     */\n    DependencyValidationResult[DependencyValidationResult[\"NoError\"] = 0] = \"NoError\";\n    /**\n     * Indicates that the validated dependency builds a cycle\n     */\n    DependencyValidationResult[DependencyValidationResult[\"CyclicDependency\"] = 1] = \"CyclicDependency\";\n    /**\n     * Indicates that a dependency with the same predecessor and successor as validated one's already exists\n     */\n    DependencyValidationResult[DependencyValidationResult[\"DuplicatingDependency\"] = 2] = \"DuplicatingDependency\";\n})(DependencyValidationResult || (DependencyValidationResult = {}));\n/**\n * The enumeration for the supported dependency types\n */\nexport var DependencyType;\n(function (DependencyType) {\n    /**\n     * Start-to-Start (_SS_)\n     *\n     * With this dependency type, the succeeding event is delayed to start not earlier than the preceding event starts.\n     */\n    DependencyType[DependencyType[\"StartToStart\"] = 0] = \"StartToStart\";\n    /**\n     * Start-to-Finish (_SF_)\n     *\n     * The finish of the succeeding event is constrained by the start of the preceding event.\n     * So the successor cannot finish before the predecessor starts.\n     */\n    DependencyType[DependencyType[\"StartToEnd\"] = 1] = \"StartToEnd\";\n    /**\n     * Finish-to-Start (_FS_)\n     *\n     * This type of dependency, restricts the dependent event to not start earlier than the preceding event finishes.\n     */\n    DependencyType[DependencyType[\"EndToStart\"] = 2] = \"EndToStart\";\n    /**\n     * Finish-to-Finish (_FF_)\n     *\n     * The succeeding event cannot finish before the completion of the preceding event.\n     */\n    DependencyType[DependencyType[\"EndToEnd\"] = 3] = \"EndToEnd\";\n})(DependencyType || (DependencyType = {}));\n/**\n * The enumeration for the supported sources of the calendar for the dependency.\n */\nexport var DependenciesCalendar;\n(function (DependenciesCalendar) {\n    DependenciesCalendar[\"Project\"] = \"Project\";\n    DependenciesCalendar[\"FromEvent\"] = \"FromEvent\";\n    DependenciesCalendar[\"ToEvent\"] = \"ToEvent\";\n})(DependenciesCalendar || (DependenciesCalendar = {}));\n/**\n * Engine provides with different project types, the enumeration describes the types currently available\n */\nexport var ProjectType;\n(function (ProjectType) {\n    ProjectType[ProjectType[\"SchedulerBasic\"] = 1] = \"SchedulerBasic\";\n    ProjectType[ProjectType[\"SchedulerPro\"] = 2] = \"SchedulerPro\";\n    ProjectType[ProjectType[\"Gantt\"] = 3] = \"Gantt\";\n})(ProjectType || (ProjectType = {}));\n/**\n * The enumeration for the scheduling direction\n */\nexport var Direction;\n(function (Direction) {\n    /**\n     * Forward (or As Soon As Possible (ASAP)) scheduling.\n     */\n    Direction[\"Forward\"] = \"Forward\";\n    /**\n     * Backward (or As Late As Possible (ALAP)) scheduling.\n     */\n    Direction[\"Backward\"] = \"Backward\";\n    Direction[\"None\"] = \"None\";\n})(Direction || (Direction = {}));\nexport var ConstraintIntervalSide;\n(function (ConstraintIntervalSide) {\n    ConstraintIntervalSide[\"Start\"] = \"Start\";\n    ConstraintIntervalSide[\"End\"] = \"End\";\n})(ConstraintIntervalSide || (ConstraintIntervalSide = {}));\n", "// http://ecma-international.org/ecma-262/5.1/#sec-15.9.1.1\n/**\n * Minimal date representable with native Date class\n */\nexport const MIN_DATE = new Date(-8640000000000000);\n/**\n * Maximal date representable with native Date class\n */\nexport const MAX_DATE = new Date(8640000000000000);\nexport const isDateFinite = (date) => {\n    if (!date)\n        return false;\n    const time = date.getTime();\n    return time !== MIN_DATE.getTime() && time !== MAX_DATE.getTime();\n};\n", "/**\n * The date intervals in the scheduling engine are always inclusive on one end and opened on another.\n * The \"opened\" end is not considered to be a part of the interval.\n *\n * Depending from the scheduling direction (forward/backward) this property may need to be inverted.\n *\n * This enum specifies what edge of the interval is inclusive.\n */\nexport var EdgeInclusion;\n(function (EdgeInclusion) {\n    EdgeInclusion[EdgeInclusion[\"Left\"] = 0] = \"Left\";\n    EdgeInclusion[EdgeInclusion[\"Right\"] = 1] = \"Right\";\n})(EdgeInclusion || (EdgeInclusion = {}));\n", "import DateHelper from \"../../Core/helper/DateHelper.js\";\nimport { TimeUnit } from \"../scheduling/Types.js\";\nimport { MAX_DATE, MIN_DATE } from \"../util/Constants.js\";\nimport { EdgeInclusion } from \"../util/Types.js\";\n/**\n * The enum type for result of [[forEachAvailabilityInterval]].\n */\nexport var CalendarIteratorResult;\n(function (CalendarIteratorResult) {\n    /**\n     * Indicates the iteration has completed by iterating the whole given timespan or has reached the MAX_DATE or MIN_DATE.\n     */\n    CalendarIteratorResult[CalendarIteratorResult[\"FullRangeIterated\"] = 0] = \"FullRangeIterated\";\n    /**\n     * Indicates the iteration has been stopped by returning `false` from the iterator.\n     */\n    CalendarIteratorResult[CalendarIteratorResult[\"StoppedByIterator\"] = 1] = \"StoppedByIterator\";\n    /**\n     * Indicates the iteration has exceeded the `maxRange` option\n     */\n    CalendarIteratorResult[CalendarIteratorResult[\"MaxCacheExtendCyclesReached\"] = 2] = \"MaxCacheExtendCyclesReached\";\n    /**\n     * Indicates the iteration has exceeded the `maxRange` option\n     */\n    CalendarIteratorResult[CalendarIteratorResult[\"MaxRangeReached\"] = 3] = \"MaxRangeReached\";\n})(CalendarIteratorResult || (CalendarIteratorResult = {}));\n/**\n * Calendar cache.\n */\nexport class CalendarCache {\n    constructor(config) {\n        this.cacheFilledStartDate = MAX_DATE;\n        this.cacheFilledEndDate = MIN_DATE;\n        this.intervalsCachingChunkDuration = 30;\n        this.intervalsCachingChunkUnit = TimeUnit.Day;\n        this.maxCacheExtendCycles = 1000;\n        // max range for the iteration - 5 years\n        this.maxRange = 5 * 365 * 24 * 60 * 60 * 1000;\n        config && Object.assign(this, config);\n    }\n    includeWrappingRangeFrom(cache, startDate, endDate) {\n        cache.ensureCacheFilledForInterval(startDate, endDate);\n        this.intervalCache.includeWrappingRange(cache.intervalCache, startDate, endDate);\n    }\n    // after this method, we guarantee, that for every point between `startDate` and `endDate` (_inclusive_)\n    // we'll have a final representation of the cache, that is, we'll be able to get an interval to which this point belongs\n    // _both_ for forward and backward directions\n    ensureCacheFilledForInterval(startDate, endDate) {\n        const cacheFilledStartDateN = this.cacheFilledStartDate.getTime();\n        const cacheFilledEndDateN = this.cacheFilledEndDate.getTime();\n        if (cacheFilledStartDateN !== MAX_DATE.getTime()) {\n            const startDateN = startDate.getTime();\n            const endDateN = endDate.getTime();\n            if (cacheFilledStartDateN <= startDateN && endDateN <= cacheFilledEndDateN)\n                return;\n            // asked to cache an interval which is to the left from the cached area - extend to the right\n            if (endDateN <= cacheFilledStartDateN) {\n                endDate = new Date(cacheFilledStartDateN - 1);\n            }\n            else if (startDateN >= cacheFilledEndDateN) {\n                startDate = new Date(cacheFilledEndDateN);\n            }\n            else if (cacheFilledStartDateN <= startDateN && startDateN <= cacheFilledEndDateN) {\n                startDate = new Date(cacheFilledEndDateN + 1);\n            }\n            else if (cacheFilledStartDateN <= endDateN && endDateN <= cacheFilledEndDateN) {\n                endDate = new Date(cacheFilledStartDateN - 1);\n            }\n            else {\n                this.ensureCacheFilledForInterval(startDate, new Date(cacheFilledStartDateN - 1));\n                this.ensureCacheFilledForInterval(new Date(cacheFilledEndDateN + 1), endDate);\n                return;\n            }\n        }\n        if (cacheFilledStartDateN === MAX_DATE.getTime() || startDate.getTime() < cacheFilledEndDateN) {\n            this.cacheFilledStartDate = startDate;\n        }\n        if (cacheFilledEndDateN === MIN_DATE.getTime() || cacheFilledEndDateN < endDate.getTime()) {\n            this.cacheFilledEndDate = endDate;\n        }\n        this.fillCache(startDate, endDate);\n    }\n    fillCache(_1 /* startDate */, _2 /* endDate */) {\n        throw new Error(\"Abstract method\");\n    }\n    clear() {\n        this.cacheFilledStartDate = MAX_DATE;\n        this.cacheFilledEndDate = MIN_DATE;\n        this.intervalCache.clear();\n    }\n    /**\n     * The core iterator method of the calendar cache.\n     *\n     * @param options The options for iterator. Should contain at least one of the `startDate`/`endDate` properties\n     * which indicates what timespan to examine for availability intervals. If one of boundaries is not provided\n     * iterator function should return `false` at some point, to avoid infinite loops.\n     *\n     * Another recognized option is `isForward`, which indicates the direction in which to iterate through the timespan.\n     *\n     * Another recognized option is `maxRange`, which indicates the maximum timespan for this iterator (in milliseconds). When iterator\n     * exceeds this timespan, the iteration is stopped and [[CalendarIteratorResult.MaxRangeReached]] value is returned.\n     * Default value is 5 years.\n     *\n     * @param func The iterator function to call. It will be called for every distinct set of availability intervals, found\n     * in the given timespan. All the intervals, which are \"active\" for current interval are collected in the 3rd argument\n     * for this function. If iterator returns `false` (checked with `===`) the iteration stops.\n     *\n     * @param scope The scope (`this` value) to execute the iterator in.\n     */\n    forEachAvailabilityInterval(options, func, scope) {\n        scope = scope || this;\n        const startDate = options.startDate;\n        const endDate = options.endDate;\n        const startDateN = startDate && startDate.getTime();\n        const endDateN = endDate && endDate.getTime();\n        const maxRange = options.maxRange ?? this.maxRange;\n        // `isForward = true` by default\n        const isForward = options.isForward !== false;\n        if (isForward ? !startDate : !endDate) {\n            throw new Error(\"At least `startDate` or `endDate` is required, depending from the `isForward` option\");\n        }\n        const intervalCache = this.intervalCache;\n        let cacheCursorDate = isForward ? startDate : endDate;\n        let cursorDate = isForward ? startDate : endDate;\n        const rangeStart = cursorDate.getTime();\n        // this is generally an endless loop, but we artificially limit it to `maxCacheExtendCycles` iterations\n        // to avoid freezing in unforeseen edge cases\n        for (let cycle = 1; cycle < this.maxCacheExtendCycles; cycle++) {\n            if (isForward) {\n                this.ensureCacheFilledForInterval(cacheCursorDate, endDate || DateHelper.add(cacheCursorDate, this.intervalsCachingChunkDuration, this.intervalsCachingChunkUnit));\n            }\n            else {\n                this.ensureCacheFilledForInterval(startDate || DateHelper.add(cacheCursorDate, -this.intervalsCachingChunkDuration, this.intervalsCachingChunkUnit), cacheCursorDate);\n            }\n            let interval = intervalCache.getIntervalOf(cursorDate, isForward ? EdgeInclusion.Left : EdgeInclusion.Right);\n            while (interval) {\n                const intervalStartDate = interval.startDate;\n                const intervalEndDate = interval.endDate;\n                // out of requested range - all done\n                if ((isForward && endDateN && intervalStartDate.getTime() >= endDateN)\n                    ||\n                        (!isForward && startDateN && intervalEndDate.getTime() <= startDateN)) {\n                    return CalendarIteratorResult.FullRangeIterated;\n                }\n                if ((isForward && intervalStartDate.getTime() - rangeStart >= maxRange)\n                    ||\n                        (!isForward && rangeStart - intervalEndDate.getTime() >= maxRange)) {\n                    return CalendarIteratorResult.MaxRangeReached;\n                }\n                // we are out of cached area, need to extend the cache,\n                // using `>=, <=` here, because, as an edge case the cache can be filled exactly up to that interval\n                // and following interval will be infinity, which will trigger premature loop exit\n                // caused by the https://github.com/bryntum/support/issues/6406\n                if ((isForward && intervalStartDate.getTime() >= this.cacheFilledEndDate.getTime())\n                    ||\n                        (!isForward && intervalEndDate.getTime() <= this.cacheFilledStartDate.getTime())) {\n                    break;\n                }\n                // save the last processed point, from which we should start after cache will be extended\n                cursorDate = isForward ? intervalEndDate : intervalStartDate;\n                // adjust to start / end date limits in iterator\n                const countFrom = startDateN && intervalStartDate.getTime() < startDateN ? startDate : intervalStartDate;\n                const countTill = endDateN && intervalEndDate.getTime() > endDateN ? endDate : intervalEndDate;\n                if (func.call(scope, countFrom, countTill, interval.cacheInterval) === false) {\n                    // indicates premature exit if iterator returns `false`\n                    return CalendarIteratorResult.StoppedByIterator;\n                }\n                interval = isForward ? intervalCache.getNextInterval(interval) : intervalCache.getPrevInterval(interval);\n            }\n            if (isForward && cursorDate.getTime() === MAX_DATE.getTime() || !isForward && cursorDate.getTime() === MIN_DATE.getTime()) {\n                return CalendarIteratorResult.FullRangeIterated;\n            }\n            cacheCursorDate = isForward ? this.cacheFilledEndDate : this.cacheFilledStartDate;\n        }\n        return CalendarIteratorResult.MaxCacheExtendCyclesReached;\n    }\n}\n", "export const stripDuplicates = (array) => Array.from(new Set(array));\n", "import { stripDuplicates } from \"../util/StripDuplicates.js\";\n/**\n * A class, that represent a cached set of availability intervals. One can use the [[getIsWorking]] method\n * to determine if this set intervals represents working time or non-working.\n */\nexport class CalendarCacheInterval {\n    constructor(config) {\n        this.intervals = [];\n        config && Object.assign(this, config);\n        if (!this.calendar)\n            throw new Error(\"Required attribute `calendar` is missing\");\n    }\n    includeInterval(interval) {\n        if (this.intervals.indexOf(interval) == -1) {\n            const copy = this.intervals.slice();\n            copy.push(interval);\n            return new CalendarCacheInterval({ intervals: copy, calendar: this.calendar });\n        }\n        else\n            return this;\n    }\n    combineWith(interval) {\n        return new CalendarCacheInterval({ intervals: this.intervals.concat(interval.intervals), calendar: this.calendar });\n    }\n    /**\n     * Returns the working status of this intervals set. It is determined as a working status\n     * of the most prioritized interval (intervals are prioritized from child to parent)\n     */\n    getIsWorking() {\n        if (this.isWorking != null)\n            return this.isWorking;\n        const intervals = this.intervals = this.normalizeIntervals(this.intervals);\n        // return the value of the interval with the highest priority\n        return this.isWorking = intervals[0].isWorking;\n    }\n    normalizeIntervals(intervals) {\n        const filtered = stripDuplicates(intervals);\n        // sort in decreasing order\n        filtered.sort((interval1, interval2) => interval2.getPriorityField() - interval1.getPriorityField());\n        return filtered;\n    }\n}\n", "import { stripDuplicates } from \"../util/StripDuplicates.js\";\nexport class CalendarCacheIntervalMultiple {\n    constructor(config) {\n        this.intervalGroups = [];\n        config && Object.assign(this, config);\n    }\n    combineWith(interval) {\n        const copy = this.intervalGroups.slice();\n        copy.push([interval.calendar, interval]);\n        return new CalendarCacheIntervalMultiple({ intervalGroups: copy });\n    }\n    getIsWorkingForEvery() {\n        if (this.isWorkingForEvery != null)\n            return this.isWorkingForEvery;\n        for (let [_calendar, intervals] of this.getGroups()) {\n            if (!intervals[0].isWorking)\n                return this.isWorkingForEvery = false;\n        }\n        return this.isWorkingForEvery = true;\n    }\n    getIsWorkingForSome() {\n        if (this.isWorkingForSome != null)\n            return this.isWorkingForSome;\n        for (let [_calendar, intervals] of this.getGroups()) {\n            if (intervals[0].isWorking)\n                return this.isWorkingForSome = true;\n        }\n        return this.isWorkingForSome = false;\n    }\n    getCalendars() {\n        this.getGroups();\n        return this.calendars;\n    }\n    isCalendarWorking(calendar) {\n        return this.getCalendarsWorkStatus().get(calendar);\n    }\n    getCalendarsWorkStatus() {\n        if (this.calendarsWorkStatus)\n            return this.calendarsWorkStatus;\n        const res = new Map();\n        for (let [calendar, intervals] of this.getGroups()) {\n            res.set(calendar, intervals[0].isWorking);\n        }\n        return this.calendarsWorkStatus = res;\n    }\n    getCalendarsWorking() {\n        if (this.calendarsWorking)\n            return this.calendarsWorking;\n        const calendars = [];\n        for (let [calendar, intervals] of this.getGroups()) {\n            if (intervals[0].isWorking)\n                calendars.push(calendar);\n        }\n        return this.calendarsWorking = calendars;\n    }\n    getCalendarsNonWorking() {\n        if (this.calendarsNonWorking)\n            return this.calendarsNonWorking;\n        const calendars = [];\n        for (let [calendar, intervals] of this.getGroups()) {\n            if (!intervals[0].isWorking)\n                calendars.push(calendar);\n        }\n        return this.calendarsNonWorking = calendars;\n    }\n    getGroups() {\n        if (this.intervalsByCalendar)\n            return this.intervalsByCalendar;\n        const calendars = this.calendars = [];\n        const intervalsByCalendar = new Map();\n        this.intervalGroups.forEach(([calendar, interval]) => {\n            let data = intervalsByCalendar.get(calendar);\n            if (!data) {\n                calendars.push(calendar);\n                data = [];\n                intervalsByCalendar.set(calendar, data);\n            }\n            data.push.apply(data, interval.intervals);\n        });\n        intervalsByCalendar.forEach((intervals, calendar) => {\n            const unique = stripDuplicates(intervals);\n            unique.sort(\n            // sort in decreasing order\n            (interval1, interval2) => interval2.getPriorityField() - interval1.getPriorityField());\n            intervalsByCalendar.set(calendar, unique);\n        });\n        return this.intervalsByCalendar = intervalsByCalendar;\n    }\n}\n", "// Generic binary search\nexport const binarySearch = (value, array, comparator = (a, b) => a - b) => {\n    let left = 0;\n    let right = array.length;\n    while (left < right) {\n        // | 0 to make it integer, faster according to: https://jsperf.com/or-vs-floor/2\n        const mid = (left + right) / 2 | 0;\n        const compare = comparator(value, array[mid]);\n        if (compare === 0)\n            return { found: true, index: mid };\n        else if (compare < 0)\n            right = mid;\n        else\n            left = mid + 1;\n    }\n    return { found: false, index: right };\n};\n", "import { binarySearch } from \"../util/BinarySearch.js\";\nexport var IndexPosition;\n(function (IndexPosition) {\n    IndexPosition[IndexPosition[\"Exact\"] = 0] = \"Exact\";\n    IndexPosition[IndexPosition[\"Next\"] = 1] = \"Next\";\n})(IndexPosition || (IndexPosition = {}));\nexport class SortedMap {\n    constructor(comparator) {\n        this.keys = [];\n        this.values = [];\n        this.comparator = comparator || ((a, b) => a - b);\n    }\n    set(key, value) {\n        const search = binarySearch(key, this.keys, this.comparator);\n        if (search.found) {\n            this.values[search.index] = value;\n        }\n        else {\n            this.keys.splice(search.index, 0, key);\n            this.values.splice(search.index, 0, value);\n        }\n        return search.index;\n    }\n    // you need to know what you are doing when using this method\n    insertAt(index, key, value) {\n        this.keys.splice(index, 0, key);\n        this.values.splice(index, 0, value);\n    }\n    setValueAt(index, value) {\n        this.values[index] = value;\n    }\n    get(key) {\n        const search = binarySearch(key, this.keys, this.comparator);\n        return search.found ? this.values[search.index] : undefined;\n    }\n    getEntryAt(index) {\n        return index < this.keys.length ? { key: this.keys[index], value: this.values[index] } : undefined;\n    }\n    getKeyAt(index) {\n        return this.keys[index];\n    }\n    getValueAt(index) {\n        return this.values[index];\n    }\n    delete(key) {\n        const search = binarySearch(key, this.keys, this.comparator);\n        if (search.found)\n            this.deleteAt(search.index);\n    }\n    size() {\n        return this.keys.length;\n    }\n    deleteAt(index) {\n        this.keys.splice(index, 1);\n        this.values.splice(index, 1);\n    }\n    indexOfKey(key) {\n        const search = binarySearch(key, this.keys, this.comparator);\n        return {\n            found: search.found ? IndexPosition.Exact : IndexPosition.Next,\n            index: search.index\n        };\n    }\n    map(func) {\n        const keys = this.keys;\n        const values = this.values;\n        const result = [];\n        for (let i = 0; i < keys.length; i++)\n            result.push(func(values[i], keys[i], i));\n        return result;\n    }\n    getAllEntries() {\n        return this.map((value, key) => { return { value, key }; });\n    }\n    clear() {\n        this.keys.length = 0;\n        this.values.length = 0;\n    }\n}\n", "import { MAX_DATE, MIN_DATE } from \"../util/Constants.js\";\nimport { EdgeInclusion } from \"../util/Types.js\";\nimport { IndexPosition, SortedMap } from \"./SortedMap.js\";\nexport class IntervalCache {\n    constructor(config) {\n        this.points = new SortedMap((a, b) => a.getTime() - b.getTime());\n        this.leftInfinityKey = MIN_DATE;\n        this.rightInfinityKey = MAX_DATE;\n        Object.assign(this, config);\n        if (this.emptyInterval === undefined || !this.combineIntervalsFn)\n            throw new Error(\"All of `emptyPoint`, `combineIntervalsFn` are required\");\n        this.points.set(this.leftInfinityKey, this.emptyInterval);\n    }\n    size() {\n        return this.points.size();\n    }\n    indexOf(date) {\n        return this.points.indexOfKey(date);\n    }\n    getDateAt(index) {\n        return this.points.getKeyAt(index);\n    }\n    getPointAt(index) {\n        return this.points.getValueAt(index);\n    }\n    getIntervalOf(date, edgeInclusion = EdgeInclusion.Left) {\n        // the `index` here is guaranteed to be > 0, because at index 0 there's a `emptyPoint`\n        let { found, index } = this.indexOf(date);\n        let startDateIndex;\n        if (edgeInclusion === EdgeInclusion.Left) {\n            startDateIndex = found === IndexPosition.Exact ? index : index - 1;\n        }\n        else {\n            startDateIndex = index - 1;\n        }\n        return this.getIntervalWithStartDateIndex(startDateIndex);\n    }\n    getPrevInterval(interval) {\n        if (interval.startDateIndex === 0)\n            return null;\n        return this.getIntervalWithStartDateIndex(interval.startDateIndex - 1);\n    }\n    getNextInterval(interval) {\n        if (interval.startDateIndex >= this.size() - 1)\n            return null;\n        return this.getIntervalWithStartDateIndex(interval.startDateIndex + 1);\n    }\n    getIntervalWithStartDateIndex(startDateIndex) {\n        return {\n            startDateIndex: startDateIndex,\n            startDate: this.getDateAt(startDateIndex),\n            endDate: startDateIndex + 1 < this.size() ? this.getDateAt(startDateIndex + 1) : this.rightInfinityKey,\n            cacheInterval: this.getPointAt(startDateIndex)\n        };\n    }\n    addInterval(startDate, endDate, extendInterval) {\n        const points = this.points;\n        // there is always \"leftInfinityKey\" empty point, so `index >= 0`\n        const { found, index } = points.indexOfKey(startDate);\n        let curIndex;\n        let lastUpdatedPoint;\n        if (found == IndexPosition.Exact) {\n            const inclusion = extendInterval(lastUpdatedPoint = points.getValueAt(index));\n            points.setValueAt(index, inclusion);\n            curIndex = index + 1;\n        }\n        else {\n            const inclusion = extendInterval(lastUpdatedPoint = points.getValueAt(index - 1));\n            points.insertAt(index, startDate, inclusion);\n            curIndex = index + 1;\n        }\n        while (curIndex < points.size()) {\n            const curDate = points.getKeyAt(curIndex);\n            if (curDate.getTime() >= endDate.getTime())\n                break;\n            const inclusion = extendInterval(lastUpdatedPoint = points.getValueAt(curIndex));\n            points.setValueAt(curIndex, inclusion);\n            curIndex++;\n        }\n        if (curIndex === points.size()) {\n            points.insertAt(points.size(), endDate, this.emptyInterval);\n        }\n        else {\n            const curDate = points.getKeyAt(curIndex);\n            if (curDate.getTime() === endDate.getTime()) {\n                // we advanced till some point, which matches `endDate` config\n                // this point will setup a new label, no need to add an explicit end date point,\n                // we are done, do nothing\n            }\n            else {\n                points.insertAt(curIndex, endDate, lastUpdatedPoint);\n            }\n        }\n    }\n    includeWrappingRange(intervalCache, startDate, endDate) {\n        let interval = intervalCache.getIntervalOf(startDate);\n        while (interval) {\n            this.addInterval(interval.startDate, interval.endDate, existingInterval => this.combineIntervalsFn(existingInterval, interval.cacheInterval));\n            if (interval.endDate.getTime() > endDate.getTime())\n                break;\n            interval = intervalCache.getNextInterval(interval);\n        }\n    }\n    getSummary() {\n        return this.points.map((label, date) => { return { label, date }; });\n    }\n    clear() {\n        this.points.clear();\n        this.points.set(this.leftInfinityKey, this.emptyInterval);\n    }\n}\n", "import { stripDuplicates } from \"../util/StripDuplicates.js\";\nimport { CalendarCache } from \"./CalendarCache.js\";\nimport { CalendarCacheIntervalMultiple } from \"./CalendarCacheIntervalMultiple.js\";\nimport { IntervalCache } from \"./IntervalCache.js\";\n/**\n * The calendar cache for combination of multiple calendars\n */\nexport class CalendarCacheMultiple extends CalendarCache {\n    constructor(config) {\n        super(config);\n        this.calendarCaches = stripDuplicates(this.calendarCaches);\n        this.intervalCache = new IntervalCache({\n            emptyInterval: new CalendarCacheIntervalMultiple(),\n            combineIntervalsFn: (interval1, interval2) => {\n                return interval1.combineWith(interval2);\n            }\n        });\n    }\n    fillCache(startDate, endDate) {\n        this.calendarCaches.forEach(calendarCache => {\n            calendarCache.fillCache(startDate, endDate);\n            this.includeWrappingRangeFrom(calendarCache, startDate, endDate);\n        });\n    }\n}\nconst COMBINED_CALENDARS_CACHE = new Map();\nexport const combineCalendars = (calendars) => {\n    const uniqueOnly = stripDuplicates(calendars);\n    if (uniqueOnly.length === 0)\n        throw new Error(\"No calendars to combine\");\n    uniqueOnly.sort((calendar1, calendar2) => {\n        if (calendar1.internalId < calendar2.internalId)\n            return -1;\n        else\n            return 1;\n    });\n    const hash = uniqueOnly.map(calendar => calendar.internalId + '/').join('');\n    const versionsHash = uniqueOnly.map(calendar => calendar.version + '/').join('');\n    let cached = COMBINED_CALENDARS_CACHE.get(hash);\n    let res;\n    if (cached && cached.versionsHash === versionsHash)\n        res = cached.cache;\n    else {\n        res = new CalendarCacheMultiple({ calendarCaches: uniqueOnly.map(calendar => calendar.calendarCache) });\n        // COMBINED_CALENDARS_CACHE.set(hash, {\n        //     versionsHash    : versionsHash,\n        //     cache           : res\n        // })\n    }\n    return res;\n};\n", "/**\n * @module Core/helper/TimeZoneHelper\n */\n// region Internal\n// Used internally to save offset info\nclass TimeZoneOffsetInfo extends Array {\n    constructor(timeZone, year) {\n        super();\n        this.timeZone = timeZone;\n        this.year = year;\n    }\n}\n// Used internally to handle more info than possible with ordinary Date\nclass TimeZoneDate {\n    constructor(asString, timeZone) {\n        this.asString = asString;\n        this.timeZone = timeZone;\n        this.asArray = parseStringDate(asString);\n    }\n    // Lazy, used in TZH.toTimeZone\n    get asLocalDate() {\n        if (!this._asLocalDate) {\n            this._asLocalDate = new Date(...this.asArray);\n        }\n        return this._asLocalDate;\n    }\n    // Lazy, used when finding offsets\n    get asTicksUtc() {\n        if (!this._asTicksUtc) {\n            this._asTicksUtc = new Date(Date.UTC(...this.asArray)).getTime();\n        }\n        return this._asTicksUtc;\n    }\n}\n// Takes a local date and converts it to a TimeZoneDate by converting to string and parsing it\nconst\n    toTimeZoneInternal = (date, timeZone) => {\n        const tzDateString = date.toLocaleString('sv-SE', { timeZone });\n        return new TimeZoneDate(tzDateString, timeZone);\n    },\n    // Takes ticks (Date.getTime()) and a timezone and returns the difference\n    getOffsetUtc = (ticks, timeZone) => {\n        const { asTicksUtc, asString }  = toTimeZoneInternal(new Date(ticks), timeZone);\n        return { offset : (ticks - asTicksUtc) / 60000, tzTicksUtc : asTicksUtc, tzString : asString };\n    },\n    // Parse a 'YYYY-MM-DD HH:MM' formatted datetime into an array of numbers (month is zero-based)\n    parseStringDate = stringDate => {\n        const parsed = stringDate.split(/[\\s-:]/).map(i => i * 1);\n        parsed[1] -= 1;\n        return parsed;\n    },\n    min   = -60000,\n    hour  = 3600000,\n    day   = -86400000,\n    month = 2592000000,\n    // This function will take a IANA time zone and any year, and then loop through each month and test for UTC offsets\n    // If it finds more than one, that implies that current time zone has DST that actual year. The function will then go\n    // deeper and find the exact datetimes where DST changes occurs.\n    // All data is cached, so when same year is asked for later it's already calculated\n    findOffsetDates = (timeZone, year) => {\n        const cached = offsetDateCache.get(timeZone, year);\n        if (cached) {\n            return cached;\n        }\n        const\n            offsets        = new TimeZoneOffsetInfo(timeZone, year),\n            // The check runs with UTC ticks\n            startUtcTicks  = new Date(Date.UTC(year, 0, 1)).getTime();\n        let ticks          = startUtcTicks,\n            incr           = month,\n            monthIndex     = 0,\n            previousOffset = [],\n            currentOffset  = null,\n            tzTicksUtc, tzString, offset,  done;\n        // Loop is perhaps a bit difficult to understand. Basically, what it does is this:\n        // (1) Go forward month by month looking for changed offsets, if found continue reading (2), else no DST found.\n        // (2) Go backwards from date found in (1) day by day until offset changes back to the first one found.\n        // (3) Go forwards hour by hour from date found in (2) until offset changes again.\n        // (4) Go backwards minute by minute from date found in (3) until offset changes back to the first one found.\n        // (5) The offset we're looking for is the one previous to that found in (4).\n        // (6) Continue loop for next DST change date.\n        while (!done) {\n        // Gets UTC offset for current utc ticks\n            ({ offset, tzTicksUtc, tzString } = getOffsetUtc(ticks, timeZone));\n            // If first call, add that offset to the list of found offsets.\n            // Also save this offset as the current one found\n            if (currentOffset == null) {\n                currentOffset = offset;\n                offsets.push({ offset });\n            }\n            // If we are looping months or hours and the offset has changed from the one previously found\n            else if (incr > 0 && offset !== currentOffset) {\n            // Change to loop days or minutes\n                incr = incr === month ? day : min;\n            }\n            // If we are looping days or minutes and the offset again equals the one previously found\n            else if (incr < 0 && offset === currentOffset) {\n            // If we are looping days, change to loop hours\n                if (incr === day) {\n                    incr = hour;\n                }\n                // If we are looping minutes, that means that we have found the exact DST change position\n                else {\n                // Just one offset, add another\n                    if (offsets.length === 1) {\n                        offsets.push(previousOffset);\n                        currentOffset = previousOffset.offset;\n                    // Continue to find the ending of offset2/start of offset1\n                    }\n                    // Has two offset, found ending of offset2/start of offset1\n                    else {\n                        offsets[0].startTicks = previousOffset.startTicks;\n                        offsets[0].startDateString = previousOffset.startDateString;\n                        // We are done\n                        done = true;\n                    }\n                    // Change to loop months again\n                    incr = month;\n                }\n            }\n            // Always store previous offset as to easily be able to get back to it in loop\n            previousOffset = { offset, startDateString : tzString, startTicks : tzTicksUtc };\n            // If we're looping months, we need to ignore the day/hour/minute loop on ticks\n            if (incr === month) {\n                ticks = startUtcTicks;\n                ticks += monthIndex * month;\n                monthIndex += 1;\n            }\n            ticks += incr;\n            // If now DST, we are done after 12 months\n            if (monthIndex > 11) {\n                done = true;\n            }\n        }\n        // Save to cache\n        offsetDateCache.set(offsets);\n        return offsets;\n    },\n    offsetDateCache = {\n        _cache : {},\n        get(timeZone, year) {\n            return this._cache[timeZone]?.[year];\n        },\n        set(offsetInfo) {\n            const\n                { timeZone } = offsetInfo,\n                { _cache } = this;\n            if (!_cache[timeZone]) {\n                _cache[timeZone] = {};\n            }\n            _cache[timeZone][offsetInfo.year] = offsetInfo;\n        }\n    };\n// endregion\n/**\n * Helper for time zone manipulation.\n */\nexport default class TimeZoneHelper {\n    static get $name() {\n        return 'TimeZoneHelper';\n    }\n    /**\n     * Adjusts the time of the specified date to match the specified time zone. i.e. \"what time is it now in this\n     * timezone?\"\n     *\n     * JavaScript dates are always in the local time zone. This function adjusts the time to match the time in the\n     * specified time zone, without altering the time zone. Thus, it won't hold the same time as the original date.\n     *\n     * Note that this time zone calculation relies on the browsers built-in functionality to convert a local date to a\n     * string in a given time zone and then converting the string back into a date. If browsers time zone information\n     * or interpretation is inaccurate or lacks data, the conversion will probably be inaccurate as well.\n     *\n     * ```javascript\n     * const localDate = new Date(2020, 7, 31, 7); // UTC+2 ('Europe/Stockholm')\n     * const cstDate   = TimeZoneHelper.toTimezone(localDate, 'America/Chicago'); // 2020, 7, 31, 0 (still UTC+2, but\n     * // appear as UTC-6)\n     * ```\n     *\n     * @static\n     * @param {Date} date\n     * @param {String|Number} timeZone Timezone supported by `Intl.DateFormat` or a UTC offset in minutes\n     * @returns {Date}\n     */\n    static toTimeZone(date, timeZone) {\n        if (typeof timeZone === 'number') {\n            return this.toUtcOffset(date, timeZone);\n        }\n        const tzDate = toTimeZoneInternal(date, timeZone);\n        if (tzDate.asArray[3] !== tzDate.asLocalDate.getHours()) {\n            console.warn('Incorrect time zone conversion due to local DST-switch detected');\n        }\n        return tzDate.asLocalDate;\n    }\n    /**\n     * Adjusts the time of the specified date to match local system time zone in the specified time zone. i.e. \"what\n     * time in my timezone would match time in this timezone?\"\n     *\n     * JavaScript dates are always in the local time zone. This function adjusts the time to match the time in the\n     * specified time zone, without altering the time zone. Thus, it won't hold the same time as the original date.\n     *\n     * Note that this time zone calculation relies on the browsers built-in functionality to convert a date from a given\n     * timezone into a local date by calculating specified time zone UTC offsets and using those to perform the date\n     * conversion. If browsers time zone information or interpretation is inaccurate or lacks data, the conversion will\n     * probably be inaccurate as well.\n     *\n     * ```javascript\n     * const cstDate   = new Date(2022, 8, 27, 4); // CST 'America/Chicago'\n     * const localDate = TimeZoneHelper.fromTimeZone(cstDate, 'America/Chicago'); // 2022, 8, 27, 11 (UTC+2 Europe/Stockholm)\n     * ```\n     *\n     * @static\n     * @param {Date} date\n     * @param {String|Number} timeZone Timezone supported by Intl.DateFormat or a UTC offset in minutes\n     * @returns {Date}\n     */\n    static fromTimeZone(date, timeZone) {\n        if (typeof timeZone === 'number') {\n            return this.fromUtcOffset(date, timeZone);\n        }\n        const\n            dateArr     = this.dateAsArray(date),\n            offsetDates = findOffsetDates(timeZone, date.getUTCFullYear());\n        let useOffset = offsetDates[0].offset;\n        if (offsetDates.length === 2) {\n            const utcTicks = Date.UTC(...dateArr);\n            if (utcTicks >= offsetDates[1].startTicks && utcTicks < offsetDates[0].startTicks) {\n                useOffset = offsetDates[1].offset;\n            }\n        }\n        // Converting without having to deal with local time\n        dateArr[4] += useOffset; // Adds offset minutes\n        return new Date(Date.UTC(...dateArr));\n    }\n    /**\n     * Adjusts the time of the specified date with provided UTC offset in minutes\n     *\n     * JavaScript dates are always in the local time zone. This function adjusts the time to match the time in the\n     * specified time zone, without altering the time zone. Thus, it won't hold the same time as the original date.\n     *\n     * ```javascript\n     * const localDate = new Date(2020, 7, 31, 7); // UTC+2\n     * const utcDate   = TimeZoneHelper.toUtcOffset(localDate, 0); // 2020, 7, 31, 5 (still UTC+2, but appear as UTC+0)\n     * ```\n     *\n     * @static\n     * @private\n     * @param {Date} date\n     * @param {Number} utcOffset in minutes\n     * @returns {Date}\n     */\n    static toUtcOffset(date, utcOffset) {\n        const offset = date.getTimezoneOffset() + utcOffset;\n        return new Date(date.getTime() + offset * 60 * 1000);\n    }\n    /**\n     * Adjusts the time of the specified date by removing the provided UTC offset in minutes.\n     *\n     * JavaScript dates are always in the local time zone. This function adjusts the time to match the time in the\n     * specified time zone, without altering the time zone. Thus, it won't hold the same time as the original date.\n     *\n     * ```javascript\n     * const utcDate = new Date(2020, 7, 31, 7); // UTC\n     * const utcDate = TimeZoneHelper.fromUtcOffset(localDate, 0); // 2020, 7, 31, 9 (matches 2020-08-31 07:00+00:00)\n     * ```\n     *\n     * @static\n     * @private\n     * @param {Date} date\n     * @param {Number} utcOffset in minutes\n     * @returns {Date}\n     */\n    static fromUtcOffset(date, utcOffset) {\n        const offset = -date.getTimezoneOffset() - utcOffset;\n        return new Date(date.getTime() + offset * 60 * 1000);\n    }\n    // Converts a date into an array of its parts ([year, month, day, etc.]).\n    // Convenient as a date info bearer which is not affected by local time zone\n    static dateAsArray(date) {\n        return [date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds()];\n    }\n}\nTimeZoneHelper.findOffsetDates = findOffsetDates;\nTimeZoneHelper._$name = 'TimeZoneHelper';", "import later from \"../vendor/later/later.js\";\nimport { CalendarCache } from \"./CalendarCache.js\";\nimport { CalendarCacheInterval } from \"./CalendarCacheInterval.js\";\nimport { IntervalCache } from \"./IntervalCache.js\";\nimport DateHelper from \"../../Core/helper/DateHelper.js\";\nimport TimeZoneHelper from \"../../Core/helper/TimeZoneHelper.js\";\nexport class CalendarCacheSingle extends CalendarCache {\n    constructor(config) {\n        super(config);\n        this.staticIntervalsCached = false;\n        if (!this.unspecifiedTimeInterval)\n            throw new Error(\"Required attribute `unspecifiedTimeInterval` is missing\");\n        this.intervalCache = new IntervalCache({\n            emptyInterval: new CalendarCacheInterval({\n                intervals: [this.unspecifiedTimeInterval],\n                calendar: this.calendar\n            }),\n            combineIntervalsFn: (interval1, interval2) => {\n                return interval1.combineWith(interval2);\n            }\n        });\n    }\n    fillCache(startDate, endDate) {\n        if (!this.staticIntervalsCached) {\n            this.cacheStaticIntervals();\n            this.staticIntervalsCached = true;\n        }\n        if (this.parentCache)\n            this.includeWrappingRangeFrom(this.parentCache, startDate, endDate);\n        const startDateN = startDate.getTime();\n        const endDateN = endDate.getTime();\n        const timeZone = this.calendar.project?.timeZone;\n        if (startDateN > endDateN)\n            throw new Error(\"Invalid cache fill interval\");\n        this.forEachRecurrentInterval(interval => {\n            const startSchedule = interval.getStartDateSchedule();\n            const endSchedule = interval.getEndDateSchedule();\n            let wrappingStartDate = startSchedule.prev(1, startDate);\n            let wrappingEndDate;\n            if (endSchedule === 'EOD') {\n                const nextEndDate = startSchedule.next(1, endDate);\n                if (nextEndDate !== later.NEVER) {\n                    wrappingEndDate = DateHelper.getStartOfNextDay(nextEndDate, true);\n                }\n                else {\n                    wrappingEndDate = later.NEVER;\n                }\n            }\n            else {\n                wrappingEndDate = endSchedule.next(1, endDate);\n            }\n            // if the `startDate` is an occurrence in the interval's schedule, we need to advance one point prior\n            // this is to provide the backward-scheduling information for the `startDate` point\n            if (wrappingStartDate !== later.NEVER && wrappingStartDate.getTime() === startDateN) {\n                const wrappingStartDates = startSchedule.prev(2, startDate);\n                if (wrappingStartDates !== later.NEVER && wrappingStartDates.length === 2)\n                    wrappingStartDate = wrappingStartDates[1];\n            }\n            if (wrappingEndDate !== later.NEVER && wrappingEndDate.getTime() === endDateN) {\n                const wrappingEndDates = endSchedule.next(2, endDate);\n                if (wrappingEndDates !== later.NEVER && wrappingEndDates.length === 2)\n                    wrappingEndDate = wrappingEndDates[1];\n            }\n            const startDates = startSchedule.next(Infinity, wrappingStartDate !== later.NEVER ? wrappingStartDate : startDate, wrappingEndDate !== later.NEVER ? new Date(wrappingEndDate.getTime() - 1) : endDate);\n            // schedule is empty for the interval of interest, do nothing\n            if (startDates === later.NEVER)\n                return;\n            // at this point `startDates` is a non-empty array\n            const endDates = endSchedule === 'EOD' ? startDates.map(date => DateHelper.getStartOfNextDay(date, true)) : endSchedule.next(Infinity, new Date(startDates[0].getTime() + 1), wrappingEndDate !== later.NEVER ? wrappingEndDate : endDate);\n            if (endDates === later.NEVER)\n                return;\n            if (endDates.length > startDates.length) {\n                // safe to ignore \"extra\" end dates\n                endDates.length = startDates.length;\n            }\n            else if (endDates.length < startDates.length) {\n                // monkey patch\n                startDates.length = endDates.length;\n                // throw new Error(\"Recurrent interval inconsistency: \" + interval + \", caching startDate: \" + startDate + \", caching endDate: \" + endDate)\n            }\n            startDates.forEach((startDate, index) => {\n                let recStartDate = startDate;\n                let recEndDate = endDates[index];\n                // Adjust calendar intervals when changing time zone\n                if (timeZone != null) {\n                    recStartDate = TimeZoneHelper.toTimeZone(recStartDate, timeZone);\n                    recEndDate = TimeZoneHelper.toTimeZone(recEndDate, timeZone);\n                }\n                // if (recStartDate.getTime() > recEndDate.getTime())\n                //     throw new Error(\"Recurrent interval inconsistency: \" + interval + \", startDate: \" + startDate + \", endDate: \" + endDates[ index ])\n                this.intervalCache.addInterval(recStartDate, recEndDate, existingCacheInterval => existingCacheInterval.includeInterval(interval));\n            });\n        });\n    }\n    clear() {\n        this.staticIntervalsCached = false;\n        super.clear();\n    }\n    cacheStaticIntervals() {\n        this.forEachStaticInterval(interval => {\n            const timeZone = this.calendar.project?.timeZone;\n            let { startDate, endDate } = interval;\n            // Adjust calendar intervals when changing time zone\n            if (timeZone != null) {\n                startDate = TimeZoneHelper.toTimeZone(startDate, timeZone);\n                endDate = TimeZoneHelper.toTimeZone(endDate, timeZone);\n            }\n            this.intervalCache.addInterval(startDate, endDate, existingCacheInterval => existingCacheInterval.includeInterval(interval));\n        });\n    }\n    forEachStaticInterval(func) {\n        this.intervalStore.forEach((interval) => {\n            if (interval.isStatic())\n                func(interval);\n        });\n    }\n    forEachRecurrentInterval(func) {\n        this.intervalStore.forEach((interval) => {\n            if (interval.isRecurrent())\n                func(interval);\n        });\n    }\n}\n", "import { Mixin } from \"../../ChronoGraph/class/BetterMixin.js\";\n/**\n * This a base generic mixin for every class, that belongs to a project.\n *\n * It just provides getter/setter for the `project` property, along with some convenience methods\n * to access the project's stores.\n */\nexport class AbstractPartOfProjectGenericMixin extends Mixin([], (base) => {\n    const superProto = base.prototype;\n    class AbstractPartOfProjectGenericMixin extends base {\n        async commitAsync() {\n            return this.project.commitAsync();\n        }\n        set project(project) {\n            this.$project = project;\n        }\n        get project() {\n            return this.$project;\n        }\n        calculateProject() {\n            throw new Error(\"Implement me\");\n        }\n        /**\n         * The method to set the [[AbstractProjectMixin|project]] instance, this entity belongs to.\n         */\n        setProject(project) {\n            return this.project = project;\n        }\n        /**\n         * The method to get the [[AbstractProjectMixin|project]] instance, this entity belongs to.\n         */\n        getProject() {\n            if (this.project)\n                return this.project;\n            return this.setProject(this.calculateProject());\n        }\n        /**\n         * Convenience method to get the instance of the assignment store in the [[AbstractProjectMixin|project]] instance, this entity belongs to.\n         */\n        getAssignmentStore() {\n            const project = this.getProject();\n            return project?.assignmentStore;\n        }\n        /**\n         * Convenience method to get the instance of the dependency store in the [[AbstractProjectMixin|project]] instance, this entity belongs to.\n         */\n        getDependencyStore() {\n            const project = this.getProject();\n            return project?.dependencyStore;\n        }\n        /**\n         * Convenience method to get the instance of the event store in the [[AbstractProjectMixin|project]] instance, this entity belongs to.\n         */\n        getEventStore() {\n            const project = this.getProject();\n            return project?.eventStore;\n        }\n        /**\n         * Convenience method to get the instance of the resource store in the [[AbstractProjectMixin|project]] instance, this entity belongs to.\n         */\n        getResourceStore() {\n            const project = this.getProject();\n            return project?.resourceStore;\n        }\n        /**\n         * Convenience method to get the instance of the calendar manager store in the [[AbstractProjectMixin|project]] instance, this entity belongs to.\n         */\n        getCalendarManagerStore() {\n            const project = this.getProject();\n            return project?.calendarManagerStore;\n        }\n    }\n    return AbstractPartOfProjectGenericMixin;\n}) {\n}\n", "import Objects from './util/Objects.js';\n// NOTE: This import prevents this module from being imported by Base (or anything Base imports):\nimport DateHelper from './DateHelper.js';\nimport StringHelper from './StringHelper.js';\n/**\n * @module Core/helper/ObjectHelper\n */\n// Detect if browser has bad implementation of toFixed()\nconst\n    { hasOwn } = Objects,\n    toFixedFix = (1.005).toFixed(2) === '1.01' ? null : function(number, fractionDigits) {\n        const\n            split = number.toString().split('.'),\n            newNumber = +(!split[1] ? split[0] : split.join('.') + '1');\n        return number.toFixed.call(newNumber, fractionDigits);\n    };\n/**\n * Helper for Object manipulation.\n */\nexport default class ObjectHelper extends Objects {\n    // These methods are inherited from Objects (an internal class) but need to be documented here for public use.\n    // This is primarily because static methods, while inherited by JavaScript classes, are not displayed in derived\n    // classes in the docs.\n    /**\n     * Copies all enumerable properties from the supplied source objects to `dest`. Unlike `Object.assign`, this copy\n     * also includes inherited properties.\n     * @param {Object} dest The destination object.\n     * @param {...Object} sources The source objects.\n     * @returns {Object} The `dest` object.\n     * @method assign\n     * @static\n     */\n    /**\n     * Copies all enumerable properties from the supplied source objects to `dest`, only including properties that does\n     * not already exist on `dest`. Unlike `Object.assign`, this copy also includes inherited properties.\n     * @param {Object} dest The destination object.\n     * @param {...Object} sources The source objects.\n     * @returns {Object} The `dest` object.\n     * @method assignIf\n     * @static\n     */\n    /**\n     * Creates a deep copy of the `value`. Simple objects ({@link #function-isObject-static}, arrays and `Date` objects\n     * are cloned. The enumerable properties of simple objects and the elements of arrays are cloned recursively.\n     * @param {*} value The value to clone.\n     * @param {Function} [handler] An optional function to call for values of types other than simple object, array or\n     * `Date`. This function should return the clone of the `value` passed to it. It is only called for truthy values\n     * whose `typeof` equals `'object'`.\n     * @param {*} handler.value The value to clone.\n     * @returns {*} The cloned value.\n     * @method clone\n     * @static\n     */\n    /**\n     * Converts a list of names (either a space separated string or an array), into an object with those properties\n     * assigned truthy values. The converse of {@link #function-getTruthyKeys-static}.\n     * @param {String|String[]} source The list of names to convert to object form.\n     * @method createTruthyKeys\n     * @static\n     */\n    /**\n     * Gathers the names of properties which have truthy values into an array.\n     *\n     * This is useful when gathering CSS class names for complex element production.\n     * Instead of appending to an array or string which may already contain the\n     * name, and instead of contending with space separation and concatenation\n     * and conditional execution, just set the properties of an object:\n     *\n     *     cls = {\n     *         [this.selectedCls] : this.isSelected(thing),\n     *         [this.dirtyCls] : this.isDirty(thing)\n     *     };\n     *\n     * @param {Object} source Source of keys to gather into an array.\n     * @returns {String[]} The keys which had a truthy value.\n     * @method getTruthyKeys\n     * @static\n     */\n    /**\n     * Gathers the values of properties which are truthy into an array.\n     * @param {Object} source Source of values to gather into an array.\n     * @returns {String[]} The truthy values from the passed object.\n     * @method getTruthyValues\n     * @static\n     */\n    /**\n     * Tests whether a passed object has any enumerable properties.\n     * @param {Object} object\n     * @returns {Boolean} `true` if the passed object has no enumerable properties.\n     * @method isEmpty\n     * @static\n     */\n    /**\n     * Returns `true` if the `value` is a simple `Object`.\n     * @param {Object} value\n     * @returns {Boolean} `true` if the `value` is a simple `Object`.\n     * @method isObject\n     * @static\n     */\n    /**\n     * Copies all enumerable properties from the supplied source objects to `dest`, recursing when the properties of\n     * both the source and `dest` are objects.\n     * ```\n     *  const o = {\n     *      a : 1,\n     *      b : {\n     *          c : 2\n     *      }\n     *  };\n     *  const o2 = {\n     *      b : {\n     *          d : 3\n     *      }\n     *  }\n     *\n     *  console.log(merge(o, o2));\n     *\n     *  > { a : 1, b : { c : 2, d : 3 } }\n     * ```\n     * @param {Object} dest The destination object.\n     * @param {...Object} sources The source objects.\n     * @returns {Object} The `dest` object.\n     * @method merge\n     * @static\n     */\n    /**\n     * Returns the specific type of the given `value`. Unlike the `typeof` operator, this function returns the text\n     * from the `Object.prototype.toString` result allowing `Date`, `Array`, `RegExp`, and others to be differentiated.\n     * ```\n     *  console.log(typeOf(null));\n     *  > null\n     *\n     *  console.log(typeOf({}));\n     *  > object\n     *\n     *  console.log(typeOf([]));\n     *  > array\n     *\n     *  console.log(typeOf(new Date()));\n     *  > date\n     *\n     *  console.log(typeOf(NaN));\n     *  > nan\n     *\n     *  console.log(typeOf(/a/));\n     *  > regexp\n     * ```\n     * @param {*} value\n     * @returns {String}\n     * @method typeOf\n     * @static\n     */\n    /**\n     * Returns value for a given path in the object\n     * @param {Object} object Object to check path on\n     * @param {String} path Dot-separated path, e.g. 'object.childObject.someKey'\n     * @returns {*} Value associated with passed key\n     * @method getPath\n     * @static\n     */\n    /**\n     * Sets value for a given path in the object\n     * @param {Object} object Target object\n     * @param {String} path Dot-separated path, e.g. 'object.childObject.someKey'\n     * @param {*} value Value for a given path\n     * @returns {Object} Returns passed object\n     * @method setPath\n     * @static\n     */\n    /**\n     * Creates a new object where key is a property in array item (`ref` by default) or index in the array and value is array item.\n     *\n     * From:\n     * ```\n     * [\n     *     {\n     *          text : 'foo',\n     *          ref : 'fooItem'\n     *     },\n     *     {\n     *          text : 'bar'\n     *     }\n     * ]\n     * ```\n     *\n     * To:\n     * ```\n     * {\n     *     fooItem : {\n     *         text : 'foo',\n     *         ref  : 'fooItem'\n     *     },\n     *     1 : {\n     *         text : 'bar'\n     *     }\n     * }\n     * ```\n     *\n     * @param {Object[]} arrayOfItems Array to transform.\n     * @param {String} [prop] Property to read the key from. `ref` by default.\n     * @returns {Object} namedItems\n     */\n    static transformArrayToNamedObject(arrayOfItems, prop = 'ref') {\n        const namedItems = {};\n        arrayOfItems.forEach((item, index) => {\n            const\n                // 0 is valid value, but empty string in not valid\n                key = (item[prop] != null && item[prop].toString().length) ? item[prop] : index;\n            namedItems[key] = item;\n        });\n        return namedItems;\n    }\n    /**\n     * Creates a new array from object values and saves key in a property (`ref` by default) of each item.\n     *\n     * From:\n     * ```\n     * {\n     *     fooItem : {\n     *         text : 'foo'\n     *     },\n     *     1 : {\n     *         text : 'bar'\n     *     },\n     *     barItem : false // will be ignored\n     * }\n     * ```\n     *\n     * To:\n     * ```\n     * [\n     *     {\n     *          text : 'foo',\n     *          ref : 'fooItem'\n     *     },\n     *     {\n     *          text : 'bar',\n     *          ref : 1\n     *     }\n     * ]\n     * ```\n     *\n     * @param {Object} namedItems Object to transform.\n     * @param {String} [prop] Property to save the key to. `ref` by default.\n     * @returns {Object[]} arrayOfItems\n     */\n    static transformNamedObjectToArray(namedItems, prop = 'ref') {\n        return Object.keys(namedItems).filter(key => namedItems[key]).map(key => {\n            const item = namedItems[key];\n            item[prop] = key;\n            return item;\n        });\n    }\n    /**\n     * Checks if two values are equal. Basically === but special handling of dates.\n     * @param {*} a First value\n     * @param {*} b Second value\n     * @returns {*} true if values are equal, otherwise false\n     */\n    static isEqual(a, b, useIsDeeply = false) {\n        // Eliminate null vs undefined mismatch\n        if (\n            (a === null && b !== null) ||\n            (a === undefined && b !== undefined) ||\n            (b === null && a !== null) ||\n            (b === undefined && a !== undefined)\n        ) {\n            return false;\n        }\n        // Covers undefined === undefined and null === null, since mismatches are eliminated above\n        if (a == null && b == null) {\n            return true;\n        }\n        // The same instance should equal itself.\n        if (a === b) {\n            return true;\n        }\n        const\n            typeA = typeof a,\n            typeB = typeof b;\n        if (typeA === typeB) {\n            switch (typeA) {\n                case 'number':\n                case 'string':\n                case 'boolean':\n                    return a === b;\n            }\n            switch (true) {\n                case a instanceof Date && b instanceof Date:\n                    // faster than calling DateHelper.isEqual\n                    // https://jsbench.me/3jk2bom2r3/1\n                    return a.getTime() === b.getTime();\n                case Array.isArray(a) && Array.isArray(b):\n                    return a.length === b.length ? a.every((v, idx) => OH.isEqual(v, b[idx], useIsDeeply)) : false;\n                case typeA === 'object' && a.constructor.prototype === b.constructor.prototype:\n                    return useIsDeeply ? OH.isDeeplyEqual(a, b, useIsDeeply) : StringHelper.safeJsonStringify(a) === StringHelper.safeJsonStringify(b);\n            }\n        }\n        return String(a) === String(b);\n    }\n    /**\n     * Checks if two objects are deeply equal\n     * @param {Object} a\n     * @param {Object} b\n     * @param {Object} [options] Additional comparison options\n     * @param {Object} [options.ignore] Map of property names to ignore when comparing\n     * @param {Function} [options.shouldEvaluate] Function used to evaluate if a property should be compared or not.\n     * Return false to prevent comparison\n     * @param {Function} [options.evaluate] Function used to evaluate equality. Return `true`/`false` as evaluation\n     * result or anything else to let `isEqual` handle the comparison\n     * @returns {Boolean}\n     */\n    static isDeeplyEqual(a, b, options = {}) {\n        // Same object, equal :)\n        if (a === b) {\n            return true;\n        }\n        // Nothing to compare, not equal\n        if (!a || !b) {\n            return false;\n        }\n        // Property names excluding ignored\n        const\n            aKeys = OH.keys(a, options.ignore),\n            bKeys = OH.keys(b, options.ignore);\n        // Property count differs, not equal\n        if (aKeys.length !== bKeys.length) {\n            return false;\n        }\n        for (let i = 0; i < aKeys.length; i++) {\n            const\n                aKey = aKeys[i],\n                bKey = bKeys[i];\n            // Property name differs, not equal\n            if (aKey !== bKey) {\n                return false;\n            }\n            const\n                aVal = a[aKey],\n                bVal = b[bKey];\n            // Allow caller to determine if property values should be evaluated or not\n            if (options.shouldEvaluate) {\n                if (options.shouldEvaluate(\n                    aKey,\n                    {\n                        value  : aVal,\n                        object : a\n                    }, {\n                        value  : bVal,\n                        object : b\n                    }\n                ) === false) {\n                    continue;\n                }\n            }\n            // Allow caller to determine equality of properties\n            if (options.evaluate) {\n                const result = options.evaluate(aKey, {\n                    value  : aVal,\n                    object : a\n                }, {\n                    value  : bVal,\n                    object : b\n                });\n                // Not equal\n                if (result === false) {\n                    return false;\n                }\n                // Equal, skip isEqual call below\n                if (result === true) {\n                    continue;\n                }\n            }\n            // Values differ, not equal (also digs deeper)\n            if (!OH.isEqual(aVal, bVal, options)) {\n                return false;\n            }\n        }\n        // Found to be equal\n        return true;\n    }\n    /**\n     * Checks if value B is partially equal to value A.\n     * @param {*} a First value\n     * @param {*} b Second value\n     * @returns {Boolean} true if values are partially equal, false otherwise\n     */\n    static isPartial(a, b) {\n        a = String(a).toLowerCase();\n        b = String(b).toLowerCase();\n        return a.indexOf(b) !== -1;\n    }\n    /**\n     * Checks if value a is smaller than value b.\n     * @param {*} a First value\n     * @param {*} b Second value\n     * @returns {Boolean} true if a < b\n     */\n    static isLessThan(a, b) {\n        if (a instanceof Date && b instanceof Date) {\n            return DateHelper.isBefore(a, b);\n        }\n        return a < b;\n    }\n    /**\n     * Checks if value a is bigger than value b.\n     * @param {*} a First value\n     * @param {*} b Second value\n     * @returns {Boolean} true if a > b\n     */\n    static isMoreThan(a, b) {\n        if (a instanceof Date && b instanceof Date) {\n            return DateHelper.isAfter(a, b);\n        }\n        return a > b;\n    }\n    /**\n     * Used by the Base class to make deep copies of defaultConfig blocks\n     * @private\n     */\n    static fork(obj) {\n        let ret, key, value;\n        if (obj && obj.constructor === Object) {\n            ret = Object.setPrototypeOf({}, obj);\n            for (key in obj) {\n                value = obj[key];\n                if (value) {\n                    if (value.constructor === Object) {\n                        ret[key] = OH.fork(value);\n                    }\n                    else if (value instanceof Array) {\n                        ret[key] = value.slice();\n                    }\n                }\n            }\n        }\n        else {\n            ret = obj;\n        }\n        return ret;\n    }\n    /**\n     * Copies the named properties from the `source` parameter into the `dest` parameter.\n     * @param {Object} dest The destination into which properties are copied.\n     * @param {Object} source The source from which properties are copied.\n     * @param {String[]} props The list of property names.\n     * @returns {Object} The `dest` object.\n     */\n    static copyProperties(dest, source, props) {\n        let prop, i;\n        for (i = 0; i < props.length; i++) {\n            prop = props[i];\n            if (prop in source) {\n                dest[prop] = source[prop];\n            }\n        }\n        return dest;\n    }\n    /**\n     * Copies the named properties from the `source` parameter into the `dest` parameter\n     * unless the property already exists in the `dest`.\n     * @param {Object} dest The destination into which properties are copied.\n     * @param {Object} source The source from which properties are copied.\n     * @param {String[]} props The list of property names.\n     * @returns {Object} The `dest` object.\n     */\n    static copyPropertiesIf(dest, source, props) {\n        if (source) {\n            for (const prop of props) {\n                if (!(prop in dest)) {\n                    dest[prop] = source[prop];\n                }\n            }\n        }\n        return dest;\n    }\n    /**\n     * Returns an array containing the keys and values of all enumerable properties from every prototype level for the\n     * object. If `object` is `null`, this method returns an empty array.\n     * @param {Object} object Object from which to retrieve entries.\n     * @param {Object|Function} [ignore] Optional object of names to ignore or a function accepting the name and value\n     * which returns `true` to ignore the item.\n     * @returns {Array}\n     * @internal\n     */\n    static entries(object, ignore) {\n        const\n            result = [],\n            call = typeof ignore === 'function';\n        if (object) {\n            for (const p in object) {\n                if (call ? !ignore(p, object[p]) : !ignore?.[p]) {\n                    result.push([p, object[p]]);\n                }\n            }\n        }\n        return result;\n    }\n    /**\n     * Populates an `object` with the provided `entries`.\n     * @param {Array} entries The key/value pairs (2-element arrays).\n     * @param {Object} [object={}] The object onto which to add `entries`.\n     * @returns {Object} The passed `object` (by default, a newly created object).\n     * @internal\n     */\n    static fromEntries(entries, object) {\n        object = object || {};\n        if (entries) {\n            for (let i = 0; i < entries.length; ++i) {\n                object[entries[i][0]] = entries[i][1];\n            }\n        }\n        return object;\n    }\n    /**\n     * Returns an array containing all enumerable property names from every prototype level for the object. If `object`\n     * is `null`, this method returns an empty array.\n     * @param {Object} object Object from which to retrieve property names.\n     * @param {Object|Function} [ignore] Optional object of names to ignore or a function accepting the name and value\n     * which returns `true` to ignore the item.\n     * @param {Function} [mapper] Optional function to call for each non-ignored item. If provided, the result of this\n     * function is stored in the returned array. It is called with the array element as the first parameter, and the\n     * index in the result array as the second argument (0 for the first, non-ignored element, 1 for the second and so\n     * on).\n     * @returns {String[]}\n     */\n    static keys(object, ignore, mapper) {\n        const\n            result = [],\n            call = typeof ignore === 'function';\n        if (object) {\n            let index = 0;\n            for (const p in object) {\n                if (call ? !ignore(p, object[p]) : !ignore?.[p]) {\n                    result.push(mapper ? mapper(p, index) : p);\n                    ++index;\n                }\n            }\n        }\n        return result;\n    }\n    /**\n     * Returns an array containing the values of all enumerable properties from every prototype level for the object.\n     * If `object` is `null`, this method returns an empty array.\n     * @param {Object} object Object from which to retrieve values.\n     * @param {Object|Function} [ignore] Optional object of names to ignore or a function accepting the name and value\n     * which returns `true` to ignore the item.\n     * @param {Function} [mapper] Optional function to call for each non-ignored item. If provided, the result of this\n     * function is stored in the returned array. It is called with the array element as the first parameter, and the\n     * index in the result array as the second argument (0 for the first, non-ignored element, 1 for the second and so\n     * on).\n     * @returns {Array}\n     * @internal\n     */\n    static values(object, ignore, mapper) {\n        const\n            result = [],\n            call = typeof ignore === 'function';\n        if (object) {\n            let index = 0;\n            for (const p in object) {\n                if (call ? !ignore(p, object[p]) : !ignore?.[p]) {\n                    result.push(mapper ? mapper(object[p], index) : object[p]);\n                    ++index;\n                }\n            }\n        }\n        return result;\n    }\n    //region Path\n    /**\n     * Checks if a given path exists in an object\n     * @param {Object} object Object to check path on\n     * @param {String} path Dot-separated path, e.g. 'object.childObject.someKey'\n     * @returns {Boolean} Returns `true` if path exists or `false` if it does not\n     */\n    static pathExists(object, path) {\n        const properties = path.split('.');\n        return properties.every(property => {\n            if (!object || !(property in object)) {\n                return false;\n            }\n            object = object[property];\n            return true;\n        });\n    }\n    /**\n     * Creates a simple single level key-value object from complex deep object.\n     * @param {Object} object Object to extract path and values from\n     * @returns {Object} Key-value object where key is a path to the corresponding value\n     * @internal\n     *\n     * ```javascript\n     * // converts deep object\n     * {\n     *     foo : {\n     *         bar : {\n     *             test : 1\n     *         }\n     *     }\n     * }\n     * // into a single level object\n     * {\n     *     'foo.bar.test' : 1\n     * }\n     * ```\n     */\n    static pathifyKeys(object) {\n        const result = {};\n        for (const key in object) {\n            if (hasOwn(object, key)) {\n                if (Array.isArray(object[key])) {\n                    result[key] = object[key].slice();\n                }\n                else if (object[key] instanceof Object) {\n                    const paths = this.pathifyKeys(object[key]);\n                    for (const path in paths) {\n                        result[`${key}.${path}`] = paths[path];\n                    }\n                }\n                else {\n                    result[key] = object[key];\n                }\n            }\n        }\n        return result;\n    }\n    /**\n     * Removes value for a given path in the object. Doesn't cleanup empty objects.\n     * @param {Object} object\n     * @param {String} path Dot-separated path, e.g. `obj.child.someKey`\n     * @internal\n     */\n    static deletePath(object, path) {\n        path.split('.').reduce((result, key, index, array) => {\n            if (result == null) {\n                return null;\n            }\n            if (hasOwn(result, key)) {\n                if (index === array.length - 1) {\n                    delete result[key];\n                }\n                else {\n                    return result[key];\n                }\n            }\n        }, object);\n    }\n    //endregion\n    static coerce(from, to) {\n        const fromType = Objects.typeOf(from),\n            toType = Objects.typeOf(to),\n            isString = typeof from === 'string';\n        if (fromType !== toType) {\n            switch (toType) {\n                case 'string':\n                    return String(from);\n                case 'number':\n                    return Number(from);\n                case 'boolean':\n                    // See http://ecma262-5.com/ELS5_HTML.htm#Section_11.9.3 as to why '0'.\n                    // TL;DR => ('0' == 0), so if given string '0', we must return boolean false.\n                    return isString && (!from || from === 'false' || from === '0') ? false : Boolean(from);\n                case 'null':\n                    return isString && (!from || from === 'null') ? null : false;\n                case 'undefined':\n                    return isString && (!from || from === 'undefined') ? undefined : false;\n                case 'date':\n                    return isString && isNaN(from) ? DateHelper.parse(from) : Date(Number(from));\n            }\n        }\n        return from;\n    }\n    static wrapProperty(object, propertyName, newGetter, newSetter, deep = true) {\n        const newProperty = {};\n        let proto = Object.getPrototypeOf(object),\n            existingProperty = Object.getOwnPropertyDescriptor(proto, propertyName);\n        while (!existingProperty && proto && deep) {\n            proto = Object.getPrototypeOf(proto);\n            if (proto) {\n                existingProperty = Object.getOwnPropertyDescriptor(proto, propertyName);\n            }\n        }\n        if (existingProperty) {\n            if (existingProperty.set) {\n                newProperty.set = v => {\n                    existingProperty.set.call(object, v);\n                    // Must invoke the getter in case \"v\" has been transformed.\n                    newSetter && newSetter.call(object, existingProperty.get.call(object));\n                };\n            }\n            else {\n                newProperty.set = newSetter;\n            }\n            if (existingProperty.get) {\n                newProperty.get = () => {\n                    let result = existingProperty.get.call(object);\n                    if (newGetter) {\n                        result = newGetter.call(object, result);\n                    }\n                    return result;\n                };\n            }\n            else {\n                newProperty.get = newGetter;\n            }\n        }\n        else {\n            newProperty.set = v => {\n                object[`_${propertyName}`] = v;\n                newSetter && newSetter.call(object, v);\n            };\n            newProperty.get = () => {\n                let result = object[`_${propertyName}`];\n                if (newGetter) {\n                    result = newGetter.call(object, result);\n                }\n                return result;\n            };\n        }\n        Object.defineProperty(object, propertyName, newProperty);\n    }\n    /**\n     * Intercepts access to a `property` of a given `object`.\n     *\n     * ```javascript\n     *      ObjectHelper.hookProperty(object, 'prop', class {\n     *          get value() {\n     *              return super.value;\n     *          }\n     *          set value(v) {\n     *              super.value = v;\n     *          }\n     *      });\n     * ```\n     * The use of `super` allows the hook's getter and setter to invoke the object's existing get/set.\n     *\n     * @param {Object} object\n     * @param {String} property\n     * @param {Function} hook A `class` defining a `value` property getter and/or setter.\n     * @returns {Function} A function that removes the hook when called.\n     * @internal\n     */\n    static hookProperty(object, property, hook) {\n        const\n            desc = ObjectHelper.getPropertyDescriptor(hook.prototype, 'value'),\n            existingDesc = ObjectHelper.getPropertyDescriptor(object, property),\n            fieldName = `_${property}`,\n            base = class {\n                get value() {\n                    return existingDesc ? existingDesc.get.call(this) : this[fieldName];\n                }\n                set value(v) {\n                    if (existingDesc) {\n                        existingDesc.set.call(this, v);\n                    }\n                    else {\n                        this[fieldName] = v;\n                    }\n                }\n            },\n            baseDesc = ObjectHelper.getPropertyDescriptor(base.prototype, 'value');\n        Object.setPrototypeOf(hook.prototype, base.prototype);  // direct super calls to our \"base\" implementation\n        Object.defineProperty(object, property, {\n            configurable : true,\n            get : desc.get || baseDesc.get,\n            set : desc.set || baseDesc.set\n        });\n        return () => delete object[property];\n    }\n    /**\n     * Finds a property descriptor for the passed object from all inheritance levels.\n     * @param {Object} object The Object whose property to find.\n     * @param {String} propertyName The name of the property to find.\n     * @returns {Object} An ECMA property descriptor is the property was found, otherwise `null`\n     */\n    static getPropertyDescriptor(object, propertyName) {\n        let result = null;\n        for (let o = object; o && !result && !hasOwn(o, 'isBase'); o = Object.getPrototypeOf(o)) {\n            result = Object.getOwnPropertyDescriptor(o, propertyName);\n        }\n        return result;\n    }\n    /**\n     * Changes the passed object and removes all null and undefined properties from it\n     * @param {Object} object Target object\n     * @param {Boolean} [keepNull] Pass true to only remove undefined properties\n     * @returns {Object} Passed object\n     */\n    static cleanupProperties(object, keepNull = false) {\n        Object.entries(object).forEach(([key, value]) => {\n            if (keepNull) {\n                value === undefined && delete object[key];\n            }\n            else {\n                value == null && delete object[key];\n            }\n        });\n        return object;\n    }\n    /**\n     * Changes the passed object and removes all properties from it.\n     * Used while mutating when need to keep reference to the object but replace its properties.\n     * @param {Object} object Target object\n     * @returns {Object} Passed object\n     */\n    static removeAllProperties(obj) {\n        Object.keys(obj).forEach(key => delete obj[key]);\n        return obj;\n    }\n    //region Assert type\n    /**\n     * Checks that the supplied value is of the specified type.Throws if it is not\n     * @param {Object} value Value to check type of\n     * @param {String} type Expected type\n     * @param {String} name Name of the value, used in error message\n     * @param {Boolean} [allowNull] Accept `null` without throwing\n     */\n    static assertType(value, type, name) {\n        const valueType = Objects.typeOf(value);\n        if (value != null && valueType !== type) {\n            throw new Error(`Incorrect type \"${valueType}\" for ${name}, expected \"${type}\"`);\n        }\n    }\n    /**\n     * Checks that the supplied value is a plain object. Throws if it is not\n     * @param {Object} value Value to check type of\n     * @param {String} name Name of the value, used in error message\n     */\n    static assertObject(value, name) {\n        OH.assertType(value, 'object', name);\n    }\n    /**\n     * Checks that the supplied value is an instance of a Bryntum class. Throws if it is not\n     * @param {Object} value Value to check type of\n     * @param {String} name Name of the value, used in error message\n     */\n    static assertInstance(value, name) {\n        OH.assertType(value, 'instance', name);\n    }\n    /**\n     * Checks that the supplied value is a Bryntum class. Throws if it is not\n     * @param {Object} value Value to check type of\n     * @param {String} name Name of the value, used in error message\n     */\n    static assertClass(value, name) {\n        OH.assertType(value, 'class', name);\n    }\n    /**\n     * Checks that the supplied value is a function. Throws if it is not\n     * @param {Object} value Value to check type of\n     * @param {String} name Name of the value, used in error message\n     */\n    static assertFunction(value, name) {\n        if (typeof value !== 'function' || value.isBase || value.$$name) {\n            throw new Error(`Incorrect type for ${name}, got \"${value}\" (expected a function)`);\n        }\n    }\n    /**\n     * Checks that the supplied value is a number. Throws if it is not\n     * @param {Object} value Value to check type of\n     * @param {String} name Name of the value, used in error message\n     */\n    static assertNumber(value, name) {\n        const asNumber = Number(value);\n        if (typeof value !== 'number' || isNaN(asNumber)) {\n            throw new Error(`Incorrect type for ${name}, got \"${value}\" (expected a Number)`);\n        }\n    }\n    /**\n     * Checks that the supplied value is a boolean. Throws if it is not\n     * @param {Object} value Value to check type of\n     * @param {String} name Name of the value, used in error message\n     */\n    static assertBoolean(value, name) {\n        OH.assertType(value, 'boolean', name);\n    }\n    /**\n     * Checks that the supplied value is a string. Throws if it is not\n     * @param {Object} value Value to check type of\n     * @param {String} name Name of the value, used in error message\n     */\n    static assertString(value, name) {\n        OH.assertType(value, 'string', name);\n    }\n    /**\n     * Checks that the supplied value is an array. Throws if it is not\n     * @param {Object} value Value to check type of\n     * @param {String} name Name of the value, used in error message\n     */\n    static assertArray(value, name) {\n        OH.assertType(value, 'array', name);\n    }\n    //endregion\n    /**\n     * Number.toFixed(), with polyfill for browsers that needs it\n     * @param {Number} number\n     * @param {Number} digits\n     * @returns {String} A fixed point string representation of the passed number.\n     */\n    static toFixed(number, digits) {\n        if (toFixedFix) {\n            return toFixedFix(number, digits);\n        }\n        return number.toFixed(digits);\n    }\n    /**\n     * Round the passed number to closest passed step value.\n     * @param {Number} number The number to round.\n     * @param {Number} [step] The step value to round to.\n     * @returns {Number} The number rounded to the closest step.\n     */\n    static roundTo(number, step = 1) {\n        return Math.round(number / step) * step;\n    }\n    /**\n     * Round the passed number to the passed number of decimals.\n     * @param {Number} number The number to round.\n     * @param {Number} digits The number of decimal places to round to.\n     * @returns {Number} The number rounded to the passed number of decimal places.\n     */\n    static round(number, digits) {\n        // Undefined or null means do not round. NOT round to no decimals.\n        if (digits == null) {\n            return number;\n        }\n        const factor = 10 ** digits;\n        return Math.round(number * factor) / factor;\n    }\n    /**\n     * Returns a non-null entry from a Map for a given key path. This enables a specified defaultValue to be added \"just\n     * in time\" which is returned if the key is not already present.\n     * @param {Map} map The Map to find the key in (and potentially add to).\n     * @param {String|Number|String[]|Number[]} path Dot-separated path, e.g. 'firstChild.childObject.someKey',\n     * or the key path as an array, e.g. ['firstChild', 'childObject', 'someKey'].\n     * @param {Object} [defaultValue] Optionally the value to insert if the key is not found.\n     */\n    static getMapPath(map, path, defaultValue) {\n        const\n            keyPath   = Array.isArray(path) ? path : typeof path === 'string' ? path.split('.') : [path],\n            simpleKey = keyPath.length === 1,\n            topKey    = keyPath[0],\n            topValue  = map.has(topKey) ? map.get(topKey) : map.set(topKey, simpleKey ? defaultValue : {}).get(topKey);\n        // If it was a simple key, we are done.\n        if (simpleKey) {\n            return topValue;\n        }\n        // Go down the property path on the top Object, filling entries in until the leaf.\n        return OH.getPathDefault(topValue, keyPath.slice(1), defaultValue);\n    }\n}\nconst OH = ObjectHelper;\nObjectHelper._$name = 'ObjectHelper';", "import Base from '../Base.js';\nimport Events from '../mixin/Events.js';\nimport ObjectHelper from '../helper/ObjectHelper.js';\nimport StringHelper from '../helper/StringHelper.js';\nimport Localizable from '../localization/Localizable.js';\n/**\n * @module Core/mixin/InstancePlugin\n */\nfunction getDescriptor(me, fnName) {\n    const property = Object.getOwnPropertyDescriptor(Object.getPrototypeOf(me), fnName);\n    return (property && (property.get || property.set)) ? property : null;\n}\n/**\n * Base class for plugins. Published functions will be available from the other class. `this` in published functions is\n * referenced to the plugin, access the other class using `this.client`.\n *\n * Observe that plugin doesn't apply itself on class level but instead on instance level. Plugin is its own instance\n * that can have own functions and data that is not exposed to target class.\n *\n * Functions can be published in four ways:\n *\n * * `assign` (when function is not already available on target)\n * * `before` (when function is already available on target, will be called before original function)\n * * `after` (when function is already available on target, will be called after original function)\n * * `override` (replaces function on target, but old function can be reached)\n *\n * To configure which functions get published and in what way, specify `pluginConfig` getter on plugin:\n *\n * ```javascript\n * class Sort extends InstancePlugin {\n *   static get pluginConfig {\n *      return {\n *          before   : ['init'],\n *          after    : ['destroy', 'onElementClick'],\n *          override : ['render']\n *      };\n *   }\n * }\n * ```\n *\n * @extends Core/Base\n * @mixes Core/localization/Localizable\n * @mixes Core/mixin/Events\n * @plugin\n */\nexport default class InstancePlugin extends Base.mixin(Events, Localizable) {\n    static $name = 'InstancePlugin';\n    //region Config\n    static get configurable() {\n        return {\n            clientListeners : null,\n            /**\n             * Get/set the plugin/feature `disabled` state.\n             * @member {Boolean} disabled\n             * @category Common\n             */\n            /**\n             * The plugin/feature `disabled` state.\n             *\n             * For a feature that is **off** by default that you want to enable later during runtime,\n             * configure it with `disabled : true`.\n             * ```javascript\n             * const grid = new Grid({\n             *      features : {\n             *          featureName : {\n             *              disabled : true // on and disabled, can be enabled later\n             *          }\n             *      }\n             * });\n             *\n             * // enable the feature\n             * grid.features.featureName.disabled = false;\n             * ```\n             *\n             * If the feature is **off** by default, and you want to include and enable the feature, configure it as `true`:\n             * ```javascript\n             * const grid = new Grid({\n             *      features : {\n             *          featureName : true // on and enabled, can be disabled later\n             *      }\n             * });\n             *\n             * // disable the feature\n             * grid.features.featureName.disabled = true;\n             * ```\n             *\n             * If the feature is **on** by default, but you want to turn it **off**, configure it as `false`:\n             * ```javascript\n             * const grid = new Grid({\n             *      features : {\n             *          featureName : false // turned off, not included at all\n             *      }\n             * });\n             * ```\n             *\n             * If the feature is **enabled** by default and you have no need of reconfiguring it,\n             * you can omit the feature configuration.\n             *\n             * @config {Boolean}\n             * @default\n             * @category Common\n             */\n            disabled : false,\n            /**\n             * The Widget which was passed into the constructor,\n             * which is the Widget we are providing extra services for.\n             * @member {Core.widget.Widget} client\n             * @readonly\n             * @category Misc\n             */\n            /**\n             * The widget which this plugin is to attach to.\n             * @config {Core.widget.Widget}\n             * @category Misc\n             */\n            client : null,\n            // The plugins can define their own keyMap which will then be merged with their client's keyMap.\n            keyMap : null\n        };\n    }\n    //endregion\n    updateClient(client) {\n        // So that this.callback can reach the owning Widget when resolving function names.\n        if (!this.owner) {\n            this.owner = client;\n        }\n    }\n    /**\n     * This will merge a feature's (subclass of InstancePlugin) keyMap with it's client's keyMap.\n     * @private\n     */\n    updateKeyMap(keyMap) {\n        const { client } = this;\n        client.keyMap = client.mergeKeyMaps(client.keyMap, keyMap, StringHelper.uncapitalize(this.constructor.$name));\n    }\n    //region Init\n    /**\n     * Call from another instance to add plugins to it.\n     * @example\n     * InstancePlugin.initPlugins(this, Search, Stripe);\n     * @param plugInto Instance to mix into (usually this)\n     * @param plugins Classes to plug in\n     * @internal\n     */\n    static initPlugins(plugInto, ...plugins) {\n        const property = plugInto.plugins || (plugInto.plugins = {});\n        for (const PluginClass of plugins) {\n            property[PluginClass.$$name] = new PluginClass(plugInto);\n        }\n    }\n    /**\n     * Simple wrapper for {@link #property-disabled} to make optional chaining simple:\n     *\n     * ```javascript\n     * grid.features.myFeature?.enabled // returns true when feature exists and is enabled\n     * ```\n     * @returns {Boolean}\n     * @internal\n     */\n    get enabled() {\n        return !this.disabled;\n    }\n    // We can act as an owner of a widget, so must be able to participate in focus reversion\n    getFocusRevertTarget() {\n        return this.client?.getFocusRevertTarget();\n    }\n    construct(...args) {\n        const me = this;\n        let [plugInto, config] = args,\n            listeners;\n        // When called with one argument (a config object), grab the \"client\" from the config object.\n        if (args.length === 1) {\n            if (ObjectHelper.isObject(plugInto)) {\n                config = plugInto;\n                plugInto = config.client;\n            }\n        }\n        // Two args, so client is the first. Ensure the config doesn't contain a client property.\n        else {\n            config = ObjectHelper.assign({}, config);\n            delete config.client;\n        }\n        me.client = plugInto;\n        super.construct(config);\n        me.applyPluginConfig(plugInto);\n        listeners = me.clientListeners;\n        if (listeners) {\n            listeners = ObjectHelper.assign({}, listeners);\n            listeners.thisObj = me;\n            // NOTE: If clientListeners are ever made public, we need to separate internal clientListeners from app ones\n            plugInto.ion(listeners);\n        }\n    }\n    /**\n     * Applies config as found in plugInto.pluginConfig, or published all if no config found.\n     * @private\n     * @param plugInto Target instance to plug into\n     */\n    applyPluginConfig(plugInto) {\n        const\n            me     = this,\n            config = me.pluginConfig || me.constructor.pluginConfig;\n        if (config) {\n            const { assign, chain, after, before, override } = config;\n            assign && me.applyAssign(plugInto, assign);\n            (chain || after) && me.applyChain(plugInto, chain || after);\n            before && me.applyChain(plugInto, before, false);\n            override && me.applyOverride(plugInto, override);\n        }\n    }\n    /**\n     * Applies assigning for specified functions.\n     * @private\n     * @param plugInto\n     * @param fnNames\n     */\n    applyAssign(plugInto, fnNames) {\n        fnNames.forEach(fnName => this.assign(plugInto, fnName));\n    }\n    /**\n     * Applies chaining for specified functions.\n     * @private\n     * @param plugInto\n     * @param functions\n     * @param after\n     */\n    applyChain(plugInto, functions, after = true) {\n        if (Array.isArray(functions)) {\n            for (const fnName of functions) {\n                this.chain(plugInto, fnName, fnName, after);\n            }\n        }\n        else {\n            for (const intoName in functions) {\n                this.chain(plugInto, intoName, functions[intoName], after);\n            }\n        }\n    }\n    /**\n     * Applies override for specified functions.\n     * @private\n     * @param plugInto\n     * @param fnNames\n     */\n    applyOverride(plugInto, fnNames) {\n        const me = this;\n        if (!me.overridden) {\n            me.overridden = {};\n        }\n        fnNames.forEach(fnName => {\n            if (!me[fnName]) {\n                throw new Error(`Trying to chain fn ${plugInto.$$name}#${fnName}, but plugin fn ${me.$$name}#${fnName} does not exist`);\n            }\n            // override\n            if (typeof plugInto[fnName] === 'function') {\n                me.overridden[fnName] = plugInto[fnName].bind(plugInto);\n            }\n            plugInto[fnName] = me[fnName].bind(me);\n        });\n    }\n    /**\n     * Assigns specified functions.\n     * @private\n     * @param plugInto\n     * @param fnName\n     */\n    assign(plugInto, fnName) {\n        const\n            me       = this,\n            property = getDescriptor(me, fnName);\n        if (property) {\n            // getter/setter, define corresponding property on target\n            Object.defineProperty(plugInto, fnName, {\n                configurable : true,\n                enumerable   : true,\n                get          : property.get && property.get.bind(me),\n                set          : property.set && property.set.bind(me)\n            });\n        }\n        else {\n            plugInto[fnName] = me[fnName].bind(me);\n        }\n    }\n    //endregion\n    //region Chaining\n    /**\n     * Chains functions. When the function is called on the target class all functions in the chain will be called in\n     * the order they where added.\n     * @private\n     * @param plugInto\n     * @param intoName\n     * @param hookName\n     * @param after\n     */\n    chain(plugInto, intoName, hookName, after = true) {\n        // default hook prio\n        let prio = 0;\n        if (typeof intoName === 'object') {\n            intoName = intoName.fn;\n        }\n        // if hook is provided as an object\n        if (typeof hookName === 'object') {\n            // hook prio to order runs\n            prio     = hookName.prio || 0;\n            hookName = hookName.fn;\n        }\n        const\n            me    = this,\n            chains = plugInto.pluginFunctionChain || (plugInto.pluginFunctionChain = {}),\n            hookFn =\n                me[hookName] && me[hookName].bind(me),\n            // Grab the fn so that we won't need our this pointer to call it. This is due\n            // to this instance possibly being destroyed by the time a chain call is made.\n            functionChainRunner = me.functionChainRunner;\n        if (!hookFn) {\n            throw new Error(`Trying to chain fn ${plugInto.$$name}#${hookName}, but plugin fn ${me.$$name}#${hookName} does not exist`);\n        }\n        if (!chains[intoName]) {\n            let intoFn = plugInto[intoName];\n            if (intoFn) {\n                intoFn = intoFn.bind(plugInto);\n                intoFn.$this = plugInto;\n                // use default prio\n                intoFn.$prio = 0;\n            }\n            chains[intoName] = intoFn ? [intoFn] : [];\n            plugInto[intoName] = (...params) => functionChainRunner(chains[intoName], params);\n        }\n        hookFn.$this = me;\n        hookFn.$prio = prio;\n        chains[intoName][after ? 'push' : 'unshift'](hookFn);\n        chains[intoName].$sorted = false;\n    }\n    /**\n     * Used to run multiple plugged in functions with the same name, see chain above. Returning false from a\n     * function will abort chain.\n     * @private\n     * @param {Array} chain\n     * @param {Array} params\n     * @returns {*} value returned from last function in chain (or false if any returns false)\n     */\n    functionChainRunner(chain, params) {\n        // NOTE: even though we are an instance method, we must not use our \"this\" pointer\n        // since our instance may be destroyed. We cope with that by receiving parameters\n        // for everything we need (so we're just a pure function).\n        let fn, i, returnValue;\n        // sort hooks by prio before running them\n        if (!chain.$sorted) {\n            chain.sort((a, b) => b.$prio - a.$prio);\n            chain.$sorted = true;\n        }\n        for (i = 0; i < chain.length; i++) {\n            fn = chain[i];\n            // Feature hooks remain in place even after GridBase loops and destroys its\n            // features, so skip over any destroyed features on the chain. In particular,\n            // bindStore hooks will be called when GridBase sets store to null.\n            if (!fn.$this.isDestroyed) {\n                returnValue = fn(...params);\n                if (returnValue === false) {\n                    break;\n                }\n            }\n        }\n        return returnValue;\n    }\n    //endregion\n    /**\n     * Called when disabling/enabling the plugin/feature, not intended to be called directly. To enable or disable a\n     * plugin/feature, see {@link #property-disabled}.\n     *\n     * By default removes the cls of the plugin from its client. Override in subclasses to take any other actions necessary.\n     * @category Misc\n     */\n    doDisable(disable) {\n        const\n            me = this,\n            { constructor } = me,\n            cls = 'featureClass' in constructor ? constructor.featureClass : `b-${constructor.$$name.toLowerCase()}`;\n        // Some features do not use a cls\n        if (cls) {\n            // _element to not flush composable\n            me.client?._element?.classList[disable ? 'remove' : 'add'](cls);\n        }\n        if (!me.isConfiguring) {\n            if (disable) {\n                /**\n                 * Fired when the plugin/feature is disabled.\n                 * @event disable\n                 * @param {Core.mixin.InstancePlugin} source\n                 */\n                me.trigger('disable');\n            }\n            else {\n                /**\n                 * Fired when the plugin/feature is enabled.\n                 * @event enable\n                 * @param {Core.mixin.InstancePlugin} source\n                 */\n                me.trigger('enable');\n            }\n        }\n    }\n    updateDisabled(disabled) {\n        this.doDisable(disabled);\n    }\n    throwOverrideIsMissing(data) {\n        throw new Error(`Trying to override fn ${data.plugIntoName}#${data.fnName}, but plugin fn ${data.pluginName}#${data.fnName} does not exist`);\n    }\n    // Convenience method to read the rootElement from the owner widget\n    get rootElement() {\n        return this.client.rootElement;\n    }\n}\nInstancePlugin._$name = 'InstancePlugin';", "import Base from '../Base.js';\nimport InstancePlugin from './InstancePlugin.js';\n/**\n * @module Core/mixin/Pluggable\n */\n/**\n * Enables using plugins for a class by specifying property plugins as an array of plugin classes. If only a single plugin\n * is used, just give the plugin class instead of an array. This class isn't required for using plugins, just makes it\n * easier. Without mixin you can otherwise use `InstancePlugin.initPlugins(this, PluginClass)`.\n *\n * @example\n * new Store({\n *   plugins: [PluginClass, ...]\n * });\n *\n * @mixin\n */\nexport default Target => class Pluggable extends (Target || Base) {\n    static get $name() {\n        return 'Pluggable';\n    }\n    /**\n     * Specify plugins (an array of classes) in config\n     * @config {Function[]} plugins\n     * @category Misc\n     */\n    /**\n     * Map of applied plugins\n     * @property {Object<String,Core.mixin.InstancePlugin>}\n     * @readonly\n     * @category Misc\n     */\n    get plugins() {\n        if (!this._plugins) {\n            this._plugins = {};\n        }\n        return this._plugins;\n    }\n    set plugins(plugins) {\n        if (plugins) {\n            if (!Array.isArray(plugins)) plugins = [plugins];\n            InstancePlugin.initPlugins(this, ...plugins);\n        }\n        this.initPlugins();\n    }\n    /**\n     * Template method which may be implemented in subclasses to initialize any plugins.\n     * This method is empty in the `Pluggable` base class.\n     * @internal\n     */\n    initPlugins() {\n    }\n    /**\n     * Adds plugins to an instance.\n     * @param {Function[]} plugins The plugins to add\n     * @category Misc\n     */\n    addPlugins(...plugins) {\n        InstancePlugin.initPlugins(this, ...plugins);\n    }\n    /**\n     * Checks if instance has plugin.\n     * @param {String|Function} pluginClassOrName Plugin or name to check for\n     * @returns {Boolean}\n     * @category Misc\n     */\n    hasPlugin(pluginClassOrName) {\n        return this.getPlugin(pluginClassOrName) != null;\n    }\n    /**\n     * Get a plugin instance.\n     * @param {String|Function} pluginClassOrName\n     * @returns {Core.mixin.InstancePlugin}\n     * @category Misc\n     */\n    getPlugin(pluginClassOrName) {\n        if (typeof pluginClassOrName === 'function') {\n            pluginClassOrName = pluginClassOrName.$$name;\n        }\n        return this.plugins?.[pluginClassOrName];\n    }\n    // This does not need a className on Widgets.\n    // Each *Class* which doesn't need 'b-' + constructor.name.toLowerCase() automatically adding\n    // to the Widget it's mixed in to should implement thus.\n    get widgetClass() {}\n};\n", "import Base from '../Base.js';\nimport VersionHelper from '../helper/VersionHelper.js';\nimport BrowserHelper from '../helper/BrowserHelper.js';\nconst { defineProperty } = Reflect;\nlet performance;\nif (BrowserHelper.isBrowserEnv) {\n    performance = globalThis.performance;\n}\nelse {\n    performance = {\n        now() {\n            return new Date().getTime();\n        }\n    };\n}\n/**\n * @module Core/mixin/Delayable\n */\n// Global timeout collections for tests\nlet globalDelays = null;\nif (VersionHelper.isTestEnv) {\n    const bryntum = globalThis.bryntum || (globalThis.bryntum = {});\n    globalDelays = bryntum.globalDelays = {\n        timeouts        : new Map(),\n        intervals       : new Map(),\n        animationFrames : new Map(),\n        idleCallbacks   : new Map(),\n        isEmpty(includeIntervals = false) {\n            return globalDelays.timeouts.size + globalDelays.animationFrames.size + globalDelays.idleCallbacks.size + (includeIntervals ? globalDelays.intervals.size : 0) === 0;\n        },\n        /**\n         * Returns filtered delays array\n         * @param {Object} options\n         * @param {String[]} [options.ignoreTimeouts] array of delays names to ignore\n         * @param {Number} [options.maxDelay] maximum delay in milliseconds. Timeouts with bigger delay will be filtered out\n         * @param {Boolean} [options.includeIntervals] include intervals\n         * @returns {Object[]} array of filtered delays\n         * @internal\n         */\n        getFiltered({ ignoreTimeouts = [], maxDelay = 5000, includeIntervals = false }) {\n            const\n                result = [],\n                scopes = ['timeouts', 'animationFrames', 'idleCallbacks'];\n            if (includeIntervals) {\n                scopes.push('intervals');\n            }\n            // Filter delays\n            for (const scope of scopes) {\n                const map = globalDelays[scope];\n                for (const [, entry] of map.entries()) {\n                    if (!ignoreTimeouts.includes(entry.name) && (!Number.isInteger(entry.delay) || entry.delay < maxDelay)) {\n                        result.push(entry);\n                    }\n                }\n            }\n            return result;\n        }\n    };\n}\nconst\n    /**\n     * Creates and returns a function that will call the user-supplied `fn`.\n     *\n     * @param {Core.mixin.Delayable} me\n     * @param {Function} fn The user function to call when the timer fires.\n     * @param {Function} wrapFn The function the user will call to start the timer.\n     * @param {Object} options The invoke options.\n     * @param {Array} [options.appendArgs] The argument list to append to those passed to the function.\n     * @param {Object} [options.thisObj] The `this` reference for `fn`.\n     * @returns {Function}\n     * @private\n     */\n    makeInvoker = (me, fn, wrapFn, options) => {\n        const\n            named      = typeof fn === 'string',\n            appendArgs = options?.appendArgs || [],\n            // The invoker fn is intended to be wired directly to native setTimeout/requestAnimationFrame/etc. and so\n            // it does not receive any arguments worth passing on to the user's fn. Those come from the original call\n            // to the wrapFn.\n            invoker    = () => {\n                wrapFn.timerId = null;\n                wrapFn.lastCallTime = performance.now();\n                // Grab args now and null the stored args out (to avoid leaks):\n                const args = wrapFn.args;\n                wrapFn.args = null;\n                if (named) {\n                    me[fn](...args, ...appendArgs);\n                }\n                else {\n                    fn.call(me, ...args, ...appendArgs);\n                }\n                wrapFn.called = true;\n                ++wrapFn.calls;\n            };\n        if (options) {\n            me = options.thisObj || me;\n        }\n        // We put most everything as properties on the wrapFn so that it can all be inspected in the debugger (unlike\n        // closure variables) and expected in tests.\n        wrapFn.lastCallTime = -9e9;  // performance.now() = 0 at start...\n        wrapFn.calls = 0;\n        wrapFn.invoker = invoker;\n        invoker.wrapFn = wrapFn;\n        return invoker;\n    },\n    /**\n     * Decorates the supported `wrapFn` with additional methods and an `isPending` readonly\n     * property. These decorations are available to user code to help manage the scheduling\n     * behavior of the buffered function.\n     *\n     * @param {Core.mixin.Delayable} me\n     * @param {Function} wrapFn The function the user will call to start the timer.\n     * @param {String} cancelFn The name of the function that will cancel a timer.\n     * @returns {Function} The `wrapFn` is returned.\n     * @private\n     */\n    decorateWrapFn = (me, wrapFn, cancelFn = 'clearTimeout') => {\n        wrapFn.cancel = () => {\n            if (wrapFn.isPending) {\n                me[cancelFn](wrapFn.timerId);\n                // avoid leaks and cleanup:\n                wrapFn.args = wrapFn.timerId = null;\n            }\n        };\n        wrapFn.flush = () => {\n            if (wrapFn.isPending) {\n                me[cancelFn](wrapFn.timerId);\n                wrapFn.timerId = null;\n                // we don't call cancel() since it also sets args=null\n                wrapFn.invoker();\n            }\n        };\n        wrapFn.now = (...args) => {\n            wrapFn.cancel();\n            wrapFn.args = args;\n            wrapFn.invoker();\n        };\n        wrapFn.resume = all => {\n            const n = wrapFn.suspended;\n            wrapFn.suspended = (all || n < 1) ? 0 : (n - 1);\n        };\n        wrapFn.suspend = () => {\n            ++wrapFn.suspended;\n        };\n        wrapFn.immediate = false;\n        wrapFn.suspended = 0;\n        wrapFn.timerId = null;\n        defineProperty(wrapFn, 'isPending', {\n            get() {\n                return wrapFn.timerId !== null;\n            }\n        });\n        return wrapFn;\n    };\n/**\n * Configuration options available when defining a delayable function.\n *\n * @typedef {Object} DelayableConfig\n * @property {'buffer'|'raf'|'idle'|'throttle'} type Type of delay to use. `raf` is short for `requestAnimationFrame`,\n * 'idle' for `requestIdleCallback` (not supported in Safari)\n * @property {Number} [delay] Number of milliseconds to wait before (buffer) or after (throttle) calling the underlying\n * method. A value of 0 is equivalent to setting `immediate: true`.\n * @property {Boolean} [immediate] Set to `true` to call immediately (effectively disabling the buffer/throttle)\n * @property {Boolean} [cancelOutstanding] Set to `true` to cancel any pending animation frame requests and\n * schedule a new one on each call.\n */\n/**\n * Tracks setTimeout, setInterval and requestAnimationFrame calls and clears them on destroy.\n *\n * @example\n * someClass.setTimeout(() => console.log('hi'), 200);\n * someClass.setInterval(() => console.log('annoy'), 100);\n * // can also use named timeouts for easier tracking\n * someClass.setTimeout(() => console.log('named'), 300, 'named');\n * someClass.clearTimeout('named');\n *\n * @mixin\n */\nexport default Target => class Delayable extends (Target || Base) {\n    static get $name() {\n        return 'Delayable';\n    }\n    static get declarable() {\n        return [\n            /**\n             * This class property returns an object that specifies methods to wrap with configurable timer behaviors.\n             *\n             * It is used like so:\n             * ```javascript\n             *  class Foo extends Base.mixin(Delayable) {\n             *      static get delayable() {\n             *          return {\n             *              expensiveMethod : 500\n             *          };\n             *      }\n             *\n             *      expensiveMethod() {\n             *          this.things();\n             *          this.moreThings();\n             *          this.evenMoreThings();\n             *      }\n             *  }\n             * ```\n             * With the above in place, consider:\n             * ```javascript\n             *  let instance = new Foo();\n             *\n             *  instance.expensiveMethod();\n             * ```\n             * Instead of the above code immediately calling the `expensiveMethod()`, it will start a timer that will\n             * invoke the method 500ms later. Because `expensiveMethod()` is an instance method, each instance of `Foo`\n             * will have its own timer.\n             *\n             * NOTE: Only instance methods are currently supported (i.e., only non-`static` methods).\n             *\n             * #### Options\n             * The value of each key configures how the method will be scheduled. If the value is a number, it is\n             * promoted to a config object of `type='buffer'` as in the following:\n             * ```javascript\n             *  class Foo extends Base.mixin(Delayable) {\n             *      static get delayable() {\n             *          return {\n             *              expensiveMethod : {\n             *                  type  : 'buffer',\n             *                  delay : 500\n             *              }\n             *          };\n             *      }\n             *  }\n             * ```\n             * The `type` property of the config object must be one of three values. Other options can be provided\n             * depending on the `type`:\n             *\n             *  - `buffer`<br>\n             *    Other options:\n             *     - `delay` (Number) : The number of milliseconds to wait before calling the underlying method. A\n             *       value of 0 is equivalent to setting `immediate: true`.\n             *     - `immediate` (Boolean) : Set to `true` to call immediately (effectively disabling the buffer).\n             *  - `raf` (short for \"request animation frame\")<br>\n             *  - `idle` (short for \"request idle callback\") __Not available on Safari__ <br>\n             *    Other options:\n             *     - `cancelOutstanding` (Boolean) : Set to `true` to cancel any pending animation frame requests and\n             *       schedule a new one on each call.\n             *     - `immediate` (Boolean) : Set to `true` to call immediately.\n             *  - `throttle`<br>\n             *    Other options:\n             *     - `delay` (Number) : The number of milliseconds to wait after each execution before another\n             *       execution takes place. A value of 0 is equivalent to setting `immediate: true`.\n             *     - `immediate` (Boolean) : Set to `true` to call immediately (effectively disabling the throttle).\n             *\n             * While `immediate: true` can be specified at the class level, it is more typical to set it on the\n             * instance's method as described below.\n             *\n             * #### Delayable Method API\n             * Delayable methods have a consistent API to manage their scheduling. This API is added to the methods\n             * themselves.\n             *\n             * For example:\n             * ```javascript\n             *  let instance = new Foo();\n             *\n             *  instance.expensiveMethod();         // schedule a call in 500ms\n             *  instance.expensiveMethod.isPending; // true\n             *  instance.expensiveMethod.cancel();\n             *  instance.expensiveMethod.flush();\n             *  instance.expensiveMethod.now();\n             *\n             *  instance.expensiveMethod.delay = 10;\n             *  instance.expensiveMethod();         // schedule a call in 10ms\n             * ```\n             *\n             * ##### `isPending` (Boolean, readonly)\n             * This boolean property will be `true` if a call has been scheduled, and false otherwise.\n             *\n             * ##### `cancel()`\n             * Cancels a pending call if one has been scheduled. Otherwise this method does nothing.\n             *\n             * ##### `flush()`\n             * Cancels the timer and causes the pending call to execute immediately. If there is no pending call, this\n             * method does nothing.\n             *\n             * ##### `now()`\n             * Cancels the timer (if one is pending) and executes the method immediately. If there is no pending call,\n             * this method will still call the underlying method.\n             *\n             * @static\n             * @member {Object<String,'raf'|Number|DelayableConfig>} delayable\n             * @internal\n             */\n            'delayable'\n        ];\n    }\n    doDestroy() {\n        const me = this;\n        // Normally one would expect this call at the end of this method... but in this case we need to run cleanup\n        // of this stuff after config nullification since those can trigger delayable method calls.\n        super.doDestroy();\n        if (me.timeoutIds) {\n            me.timeoutIds.forEach((fn, id) => {\n                if (typeof fn === 'function') {\n                    fn();\n                }\n                clearTimeout(id);\n                globalDelays?.timeouts.delete(id);\n            });\n            me.timeoutIds = null;\n        }\n        if (me.timeoutMap) {\n            me.timeoutMap.forEach((name, id) => clearTimeout(id));\n            me.timeoutMap = null;\n        }\n        if (me.intervalIds) {\n            me.intervalIds.forEach(id => {\n                clearInterval(id);\n                globalDelays?.intervals.delete(id);\n            });\n            me.intervalIds = null;\n        }\n        if (me.animationFrameIds) {\n            me.animationFrameIds.forEach(id => {\n                cancelAnimationFrame(id);\n                globalDelays?.animationFrames.delete(id);\n            });\n            me.animationFrameIds = null;\n        }\n        if (me.idleCallbackIds) {\n            me.idleCallbackIds.forEach(id => {\n                cancelIdleCallback(id);\n                globalDelays?.idleCallbacks.delete(id);\n            });\n            me.idleCallbackIds = null;\n        }\n    }\n    /**\n     * Check if a named timeout is active\n     * @param name\n     * @internal\n     */\n    hasTimeout(name) {\n        return Boolean(this.timeoutMap?.has(name));\n    }\n    /**\n     * Same as native setTimeout, but will be cleared automatically on destroy. If a propertyName is supplied it will\n     * be used to store the timeout id.\n     * @param {Object} timeoutSpec An object containing the details about that function, and the time delay.\n     * @param {Function|String} timeoutSpec.fn The function to call, or name of function in this object to call. Used as the `name` parameter if a string.\n     * @param {Number} timeoutSpec.delay The milliseconds to delay the call by.\n     * @param {Object[]} timeoutSpec.args The arguments to pass.\n     * @param {String} [timeoutSpec.name] The name under which to register the timer. Defaults to `fn.name`.\n     * @param {Boolean} [timeoutSpec.runOnDestroy] Pass `true` if this function should be executed if the Delayable instance is destroyed while function is scheduled.\n     * @param {Boolean} [timeoutSpec.cancelOutstanding] Pass `true` to cancel any outstanding invocation of the passed function.\n     * @returns {Number}\n     * @internal\n     */\n    setTimeout({ fn, delay, name, runOnDestroy, cancelOutstanding, args }) {\n        if (arguments.length > 1 || typeof arguments[0] === 'function') {\n            [fn, delay, name, runOnDestroy] = arguments;\n        }\n        if (typeof fn === 'string') {\n            name = fn;\n        }\n        else if (!name) {\n            name = fn.name || fn;\n        }\n        if (cancelOutstanding) {\n            this.clearTimeout(name);\n        }\n        const\n            me         = this,\n            timeoutIds = me.timeoutIds || (me.timeoutIds = new Map()),\n            timeoutMap = me.timeoutMap || (me.timeoutMap = new Map()),\n            timeoutId  = setTimeout(() => {\n                if (typeof fn === 'string') {\n                    fn = me[name];\n                }\n                // Cleanup before invocation in case fn throws\n                timeoutIds?.delete(timeoutId);\n                timeoutMap?.delete(name);\n                globalDelays?.timeouts.delete(timeoutId);\n                fn.apply(me, args);\n            }, delay);\n        timeoutIds.set(timeoutId, runOnDestroy ? fn : true);\n        // Commented out code is helpful when debugging timeouts in tests\n        globalDelays?.timeouts.set(timeoutId, { fn, delay, name/*, stack : new Error().stack*/ });\n        if (name) {\n            timeoutMap.set(name, timeoutId);\n        }\n        return timeoutId;\n    }\n    /**\n     * clearTimeout wrapper, either call with timeout id as normal clearTimeout or with timeout name (if you specified\n     * a name to setTimeout())\n     * property to null.\n     * @param {Number|String} idOrName timeout id or name\n     * @internal\n     */\n    clearTimeout(idOrName) {\n        let id = idOrName;\n        if (typeof id === 'string') {\n            if (this.timeoutMap) {\n                id = this.timeoutMap.get(idOrName);\n                this.timeoutMap.delete(idOrName);\n            }\n            else {\n                return;\n            }\n        }\n        clearTimeout(id);\n        this.timeoutIds?.delete(id);\n        globalDelays?.timeouts.delete(id);\n    }\n    /**\n     * clearInterval wrapper\n     * @param {Number} id\n     * @internal\n     */\n    clearInterval(id) {\n        clearInterval(id);\n        this.intervalIds?.delete(id);\n        globalDelays?.intervals.delete(id);\n    }\n    /**\n     * Same as native setInterval, but will be cleared automatically on destroy\n     * @param {Function} fn callback method\n     * @param {Number} delay delay in milliseconds\n     * @param {String} name delay name for debugging\n     * @returns {Number}\n     * @internal\n     */\n    setInterval(fn, delay, name) {\n        const intervalId = setInterval(fn, delay);\n        (this.intervalIds || (this.intervalIds = new Set())).add(intervalId);\n        globalDelays?.intervals.set(intervalId, { fn, delay, name });\n        return intervalId;\n    }\n    /**\n     * Relays to native requestAnimationFrame and adds to tracking to have call automatically canceled on destroy.\n     * @param {Function} fn\n     * @param {Object[]} [extraArgs] The argument list to append to those passed to the function.\n     * @param {Object} [thisObj] `this` reference for the function.\n     * @returns {Number}\n     * @internal\n     */\n    requestAnimationFrame(fn, extraArgs = [], thisObj = this) {\n        const\n            animationFrameIds = this.animationFrameIds || (this.animationFrameIds = new Set()),\n            frameId           = requestAnimationFrame(() => {\n                globalDelays?.animationFrames.delete(frameId);\n                // [dongriffin 2022-01-19] It was observed that we can still be called even though we issued the\n                // cancelAnimationFrame call. Since delete() returns true if our frameId was present and is now\n                // removed, we can tell that we haven't been cancelled before we call our fn:\n                animationFrameIds.delete(frameId) && fn.apply(thisObj, extraArgs);\n            });\n        animationFrameIds.add(frameId);\n        globalDelays?.animationFrames.set(frameId, { fn, extraArgs, thisObj });\n        return frameId;\n    }\n    /**\n     * Relays to native requestIdleCallback and adds to tracking to have call automatically canceled on destroy.\n     * @param {Function} fn\n     * @param {Object[]} [extraArgs] The argument list to append to those passed to the function.\n     * @param {Object} [thisObj] `this` reference for the function.\n     * @returns {Number}\n     * @internal\n     */\n    requestIdleCallback(fn, extraArgs = [], thisObj = this) {\n        const\n            idleCallbackIds = this.idleCallbackIds || (this.idleCallbackIds = new Set()),\n            frameId           = requestIdleCallback(() => {\n                globalDelays?.idleCallbacks.delete(frameId);\n                // Since delete() returns true if our frameId was present and is now\n                // removed, we can tell that we haven't been cancelled before we call our fn:\n                idleCallbackIds.delete(frameId) && fn.apply(thisObj, extraArgs);\n            });\n        idleCallbackIds.add(frameId);\n        globalDelays?.idleCallbacks.set(frameId, { fn, extraArgs, thisObj });\n        return frameId;\n    }\n    /**\n     * Creates a function which will execute once, on the next animation frame. However many time it is\n     * called in one event run, it will only be scheduled to run once.\n     * @param {Function|String} fn The function to call, or name of function in this object to call.\n     * @param {Object[]} [args] The argument list to append to those passed to the function.\n     * @param {Object} [thisObj] `this` reference for the function.\n     * @param {Boolean} [cancelOutstanding] Cancel any outstanding queued invocation upon call.\n     * @internal\n     */\n    createOnFrame(fn, args = [], thisObj = this, cancelOutstanding) {\n        let rafId;\n        const result = (...callArgs) => {\n            // Cancel if outstanding if requested\n            if (rafId != null && cancelOutstanding) {\n                this.cancelAnimationFrame(rafId);\n                rafId = null;\n            }\n            if (rafId == null) {\n                rafId = this.requestAnimationFrame(() => {\n                    if (typeof fn === 'string') {\n                        fn = thisObj[fn];\n                    }\n                    rafId = null;\n                    callArgs.push(...args);\n                    fn.apply(thisObj, callArgs);\n                });\n            }\n        };\n        result.cancel = () => this.cancelAnimationFrame(rafId);\n        return result;\n    }\n    /**\n     * Relays to native cancelAnimationFrame and removes from tracking.\n     * @param {Number} handle\n     * @internal\n     */\n    cancelAnimationFrame(handle) {\n        cancelAnimationFrame(handle);\n        this.animationFrameIds?.delete(handle);\n        globalDelays?.animationFrames.delete(handle);\n    }\n    /**\n     * Relays to native cancelIdleCallback and removes from tracking.\n     * @param {Number} handle\n     * @internal\n     */\n    cancelIdleCallback(handle) {\n        cancelIdleCallback(handle);\n        this.idleCallbackIds?.delete(handle);\n        globalDelays?.idleCallbacks.delete(handle);\n    }\n    async nextAnimationFrame() {\n        return new Promise(resolve => this.requestAnimationFrame(resolve));\n    }\n    /**\n     * Wraps a function with another function that delays it specified amount of time, repeated calls to the wrapper\n     * resets delay.\n     * @param {Function|String} fn The function to call. If this is a string, it is looked up as a method on `this`\n     * instance (or `options.thisObj` instead, if provided).\n     * @param {Object|Number} options The delay in milliseconds or an options object.\n     * @param {Number} options.delay The delay in milliseconds.\n     * @param {Array} [options.appendArgs] The argument list to append to those passed to the function.\n     * @param {Object} [options.thisObj] The `this` reference for the function.\n     * @returns {Function} Wrapped function to call.\n     * @internal\n     */\n    buffer(fn, options) {\n        let delay = options;\n        if (options && typeof options !== 'number') {  // if (config object)\n            delay = options.delay;\n        }\n        else {\n            options = null;\n        }\n        const\n            bufferWrapFn = (...params) => {\n                if (bufferWrapFn.suspended) {\n                    return;\n                }\n                const { delay } = bufferWrapFn;\n                bufferWrapFn.cancel();\n                bufferWrapFn.called = false;\n                bufferWrapFn.args = params;\n                // If delay=0, the buffer has been disabled so always call immediately.\n                if (bufferWrapFn.immediate || !delay) {\n                    invoker();\n                }\n                else {\n                    bufferWrapFn.timerId = this.setTimeout(invoker, delay);\n                }\n            },\n            invoker = makeInvoker(this, fn, bufferWrapFn, options);\n        bufferWrapFn.delay = delay;\n        return decorateWrapFn(this, bufferWrapFn);\n    }\n    /**\n     * Returns a function that when called will schedule a call to `fn` on the next animation frame.\n     *\n     * @param {Function|String} fn The function to call. If this is a string, it is looked up as a method on `this`\n     * instance (or `options.thisObj` instead, if provided).\n     * @param {Boolean|Object} [options] An options object or the `cancelOutstanding` boolean property of it.\n     * @param {Boolean} [options.cancelOutstanding] Pass `true` to cancel any pending animation frame requests and\n     * schedule a new one on each call to the returned function.\n     * @param {Array} [options.appendArgs] The argument list to append to those passed to the function.\n     * @param {Object} [options.thisObj] The `this` reference for the function.\n     * @returns {Function}\n     * @internal\n     */\n    raf(fn, options) {\n        // NOTE: This method is only intended for use with `delayable`. It has a signature that is compatible\n        // with `buffer()` and `throttle()`. The name is 'raf' to make the following aesthetically pleasing:\n        //\n        //  class Foo extends Delayable() {\n        //      static get delayable() {\n        //          return {\n        //              bar : 'raf'\n        //          };\n        //      }\n        //  }\n        let cancelOutstanding = options;\n        if (options && typeof options !== 'boolean') {  // if (config object)\n            cancelOutstanding = options.cancelOutstanding;\n        }\n        else {\n            options = null;\n        }\n        const\n            rafWrapFn = (...params) => {\n                if (rafWrapFn.suspended) {\n                    return;\n                }\n                // Reschedule the frame on each call if requested\n                if (rafWrapFn.cancelOutstanding) {\n                    rafWrapFn.cancel();\n                }\n                rafWrapFn.called = false;\n                rafWrapFn.args = params;\n                if (rafWrapFn.immediate) {\n                    invoker();\n                }\n                else if (!rafWrapFn.isPending) {\n                    rafWrapFn.timerId = this.requestAnimationFrame(invoker);\n                }\n            },\n            invoker = makeInvoker(this, fn, rafWrapFn, options);\n        rafWrapFn.cancelOutstanding = cancelOutstanding;\n        return decorateWrapFn(this, rafWrapFn, 'cancelAnimationFrame');\n    }\n    idle(fn, options) {\n        let cancelOutstanding = options;\n        if (options && typeof options !== 'boolean') {  // if (config object)\n            cancelOutstanding = options.cancelOutstanding;\n        }\n        else {\n            options = null;\n        }\n        const\n            idleWrapFn = (...params) => {\n                if (idleWrapFn.suspended) {\n                    return;\n                }\n                // Reschedule the frame on each call if requested\n                if (idleWrapFn.cancelOutstanding) {\n                    idleWrapFn.cancel();\n                }\n                idleWrapFn.called = false;\n                idleWrapFn.args = params;\n                if (idleWrapFn.immediate) {\n                    invoker();\n                }\n                else if (!idleWrapFn.isPending) {\n                    idleWrapFn.timerId = this.requestIdleCallback(invoker);\n                }\n            },\n            invoker = makeInvoker(this, fn, idleWrapFn, options);\n        idleWrapFn.cancelOutstanding = cancelOutstanding;\n        // If the timer is still there in 100ms, then invoke it.\n        this.setTimeout(() => this.idleCallbackIds.delete(idleWrapFn.timerId) && idleWrapFn.now(), 100);\n        return decorateWrapFn(this, idleWrapFn, 'cancelIdleCallback');\n    }\n    /**\n     * Create a \"debounced\" function which will call on the \"leading edge\" of a timer period.\n     * When first invoked will call immediately, but invocations after that inside its buffer\n     * period will be rejected, and *one* invocation will be made after the buffer period has expired.\n     *\n     * This is useful for responding immediately to a first mousemove, but from then on, only\n     * calling the action function on a regular timer while the mouse continues to move.\n     *\n     * @param {Function|String} fn The function to call. If this is a string, it is looked up as a method on `this`\n     * instance (or `options.thisObj` instead, if provided).\n     * @param {Number|Object} options The milliseconds to wait after each execution before another execution takes place\n     * or a object containing options.\n     * @param {Object} [options.thisObj] `this` reference for the function.\n     * @param {Array} [options.appendArgs] The argument list to append to those passed to the function.\n     * @param {Function|String} [options.throttled] A function to call when the invocation is delayed due to buffer\n     * time not having expired. If this is a string, it is looked up as a method on `this` instance (or `options.thisObj`\n     * instead, if provided). When called, the same arguments are passed as would have been passed to `fn`, including\n     * any `options.appendArgs`.\n     * @internal\n     */\n    throttle(fn, options) {\n        let delay = options,\n            throttled;\n        if (options && typeof options !== 'number') {  // if (config object)\n            delay = options.delay;\n            throttled = options.throttled;\n        }\n        else {\n            options = null;\n        }\n        const\n            me = this,\n            throttleWrapFn = (...args) => {\n                if (throttleWrapFn.suspended) {\n                    return;\n                }\n                const\n                    { delay } = throttleWrapFn,\n                    elapsed = performance.now() - throttleWrapFn.lastCallTime;\n                throttleWrapFn.args = args;\n                // If it's been more then the delay period since we invoked, we can call it now.\n                // Setting delay=0 effectively disables the throttle (which is the goal)\n                if (throttleWrapFn.immediate || elapsed >= delay) {\n                    me.clearTimeout(throttleWrapFn.timerId);\n                    invoker();\n                }\n                else {\n                    // Kick off a timer for the requested period.\n                    if (!throttleWrapFn.isPending) {\n                        throttleWrapFn.timerId = me.setTimeout(invoker, delay - elapsed);\n                        throttleWrapFn.called = false;\n                    }\n                    if (throttled) {\n                        // Args have to be stored on the wrapFn for the invoker to pick them up:\n                        throttled.wrapFn.args = args;\n                        throttled();\n                    }\n                }\n            },\n            invoker = makeInvoker(me, fn, throttleWrapFn, options);\n        throttleWrapFn.delay = delay;\n        if (throttled) {\n            // Make an invoker for this callback to handle thisObj and typeof=string etc (pass a dud wrapFn):\n            throttled = makeInvoker(me, throttled, () => {}, options);\n        }\n        return decorateWrapFn(me, throttleWrapFn);\n    }\n    static setupDelayable(cls) {\n        cls.setupDelayableMethods(cls.delayable);\n    }\n    /**\n     * This method initializes the `delayable` methods on this class.\n     * @param {Object} delayable The `delayable` property.\n     * @param {Function} [cls] This parameter will be used internally to process static methods.\n     * @private\n     */\n    static setupDelayableMethods(delayable, cls = null) {\n        const\n            me = this,\n            statics = delayable.static,\n            target = cls || me.prototype;\n        if (statics) {\n            delete delayable.static;\n        }\n        for (const name in delayable) {\n            let options = delayable[name];\n            const\n                implName = name + 'Now',\n                type = typeof options;\n            if (!target[implName]) {\n                // Only move foo() -> fooNow() if a base class hasn't done so already\n                target[implName] = target[name];\n            }\n            if (type === 'number') {\n                options = {\n                    type  : 'buffer',\n                    delay : options\n                };\n            }\n            else if (type === 'string') {\n                options = {\n                    type : options\n                };\n            }\n            // For instance methods, we place a getter on the prototype. When the method is first accessed from the\n            // prototype, we create an instance-specific version by calling this.buffer()/throttle() (based on the type\n            // desired) and set that as the instance-level property.\n            defineProperty(target, name, {\n                get() {\n                    const value = this[options.type]((...params) => {\n                        this[implName](...params);\n                    }, options);\n                    defineProperty(this, name, { value });\n                    return value;\n                }\n            });\n        }\n    }\n    // This does not need a className on Widgets.\n    // Each *Class* which doesn't need 'b-' + constructor.name.toLowerCase() automatically adding\n    // to the Widget it's mixed in to should implement thus.\n    get widgetClass() {}\n};\n", "/**\n * @module Core/state/StateStorage\n */\n/**\n * Base class representing interface used by the {@link Core.state.StateProvider} to actually store the state data.\n * This class is not intended to be used directly.\n *\n * This class has an interface similar to the [Storage API](https://developer.mozilla.org/en-US/docs/Web/API/Storage).\n */\nexport default class StateStorage {\n    /**\n     * Returns an object with all stored keys and their values as its properties\n     * @member {Object}\n     */\n    get data() {\n        return Object.create(null);\n    }\n    /**\n     * Returns the stored keys as set by {@link #function-setItem}\n     * @member {String[]}\n     */\n    get keys() {\n        return [];\n    }\n    /**\n     * Remove all stored keys\n     */\n    clear() {}\n    /**\n     * Returns key value as set by {@link #function-setItem}\n     * @param {String} key\n     * @returns {*}\n     */\n    getItem(key) {\n        return null;\n    }\n    /**\n     * Removes the specified key\n     * @param {String} key\n     */\n    removeItem(key) {}\n    /**\n     * Sets the specified key to the given value\n     * @param {String} key\n     * @param {*} value The item value\n     */\n    setItem(key, value) {}\n}\nStateStorage._$name = 'StateStorage';", "import Base from '../Base.js';\nimport Delayable from '../mixin/Delayable.js';\nimport Events from '../mixin/Events.js';\nimport ObjectHelper from '../helper/ObjectHelper.js';\nimport StateStorage from './StateStorage.js';\n/**\n * @module Core/state/StateProvider\n */\nclass Local extends StateStorage {\n    constructor(stateProvider) {\n        super();\n        this.prefix = stateProvider.prefix || '';\n    }\n    get isLocal() {\n        return true;\n    }\n    get data() {\n        const\n            data = empty(),\n            keys = this.keys;\n        for (const key of keys) {\n            data[key] = this.getItem(key);\n        }\n        return data;\n    }\n    get keys() {\n        return getKeys(this.prefix, this.prefix.length);\n    }\n    clear() {\n        // It's important that we only clear our own StateProvider's keys, not all of localStorage. We get the\n        // full keys not the suffixes since we're just going to call removeItem() with them...\n        const keys = getKeys(this.prefix);\n        for (const key of keys) {\n            localStorage.removeItem(key);\n        }\n    }\n    getItem(key) {\n        const value = localStorage.getItem(this.prefix + key);\n        // We handle the JSON translation at this layer because the Memory storage does not do any such pickling\n        // of data but localStorage only handles strings\n        return (value === null) ? value : JSON.parse(value);\n    }\n    removeItem(key) {\n        return localStorage.removeItem(this.prefix + key);\n    }\n    setItem(key, value) {\n        return localStorage.setItem(this.prefix + key, JSON.stringify(value));\n    }\n}\nclass Memory extends StateStorage {\n    constructor() {\n        super();\n        this.clear();\n    }\n    get isMemory() {\n        return true;\n    }\n    get data() {\n        return ObjectHelper.clone(this._data);\n    }\n    get keys() {\n        return Object.keys(this._data);\n    }\n    clear() {\n        this._data = empty();\n    }\n    getItem(key) {\n        return (key in this._data) ? this._data[key] : null;\n    }\n    removeItem(key) {\n        delete this._data[key];\n    }\n    setItem(key, value) {\n        this._data[key] = value;\n    }\n}\nconst\n    empty = () => Object.create(null),\n    getKeys = (prefix, pos = 0) => {\n        const\n            keys = [],\n            count = localStorage.length;\n        for (let key, i = 0; i < count; ++i) {\n            key = localStorage.key(i);\n            key.startsWith(prefix) && keys.push(key.slice(pos));\n        }\n        return keys;\n    },\n    nullStorage = new StateStorage(),\n    storageTypes = {\n        local  : Local,\n        memory : Memory\n    };\n/**\n * Instances of this class are used to manage data storage for objects that use the {@link Core.mixin.State} mixin, i.e.\n * stateful components. When such components change their {@link Core.mixin.State#config-stateful} properties, they\n * notify the associated {@link Core.mixin.State#config-stateProvider}, which will save the changes after a short\n * delay (to allow multiple changes to coalesce into a single save operation).\n *\n * There are two (2) built-in types of storage supported by `StateProvider`:\n *\n *  - `local` : Stores data in the browser's `localStorage`. Because of this, all `StateProvider` instances share their\n *    state data if they have the same {@link #config-prefix}.\n *  - `memory` : Stores data in the provider's memory. Each instance has its own storage. This is typically used when\n *    the state data is saved to a backend server.\n *\n * ## Using `local` Storage\n *\n * The global `StateProvider` is typically to use `localStorage` for the page or application like so:\n *\n * ```javascript\n *  StateProvider.setup('local');\n * ```\n *\n * With this provider in place, all {@link Core.mixin.State stateful components} will save their\n * {@link Core.mixin.State#property-state} to this provider by default.\n *\n * This is the most typical, and recommended, strategy for proving data to stateful components. This approach allows\n * various widgets on the page to simply declare their {@link Core.mixin.State#config-stateId} to participate in the\n * saving and restoring of application state.\n *\n * Because this storage type uses `localStorage`, the `StateProvider` applies a string prefix to isolate its data from\n * other users of `localStorage`. The default prefix is `'bryntum-state:'`, but this can be configured to a different\n * value. This could be desired, for example, to isolate state data from multiple pages or for version changes.\n *\n * ```javascript\n *  StateProvider.setup({\n *      storage : 'local',\n *      prefix  : 'myApp-v1:'\n *  });\n * ```\n *\n * ## Using `memory` Storage\n *\n * In some applications it may be desirable to save state to a server and restore it on other devices for the user.\n * Because state data is consumed synchronously, and server I/O is asynchronous, the `StateProvider` can be configured\n * to use `'memory'` storage and the actual state data can be loaded/saved by the application.\n *\n * Two factors are important to consider before deciding to save application state on the server (beyond the async\n * adaptation):\n *\n * - State properties are often more of a reflection of the user's device than they are application preferences\n *   and, therefore, may not apply well on other devices.\n * - Potentially undesired application state will not be cleared by clearing local browser user data (a common\n *   troubleshooting strategy) and will follow the user to other browsers (another common troubleshooting technique).\n *\n * The use this type of storage, the global `StateProvider` is configured like so:\n *\n * ```javascript\n * StateProvider.setup('memory');\n * ```\n *\n * In this scenario, application code would download the user's state and use {@link #property-data} to populate\n * the {@link #property-instance-static StateProvider.instance}. In this case, the {@link #event-save} event is used\n * to save the data back to the server when it changes.\n *\n * See [state](https://bryntum.com/products/grid/examples/state/) demo for a usage example.\n * @mixes Core/mixin/Events\n */\nexport default class StateProvider extends Base.mixin(Delayable, Events) {\n    static get $name() {\n        return 'StateProvider';\n    }\n    static get configurable() {\n        return {\n            /**\n             * The key prefix applied when using the `'local'` {@link #config-storage} type.\n             * @config {String}\n             * @default\n             */\n            prefix : 'bryntum-state:',\n            /**\n             * Storage instance\n             * @member {Core.state.StateStorage} storage\n             */\n            /**\n             * One of the following storage types:\n             *  - `local` : Stores data in the browser's `localStorage` using the {@link #config-prefix}.\n             *  - `memory` : Stores data in the provider's memory.\n             *\n             * @config {'local'|'memory'|Core.state.StateStorage}\n             * @default\n             */\n            storage : 'local'\n        };\n    }\n    static get delayable() {\n        /*\n            The StateProvider uses a delayed write to save stateful components in batches. To illustrate, consider the\n            \"collapsed\" config for a Panel that has been marked as \"stateful\":\n                App                         Stateful                      State\n                Code                        Component                    Provider\n                  :                             :                           :\n                  | .collapsed=true             :                           :\n                  |---------------------------->|                           :\n                  |         onConfigChange() +--|                           :\n                  |                          |  |                           :\n                  |                          +->|                           :\n                  |              saveState() +--|                           :\n                  |                          |  |                           :\n                  |                          +->| saveStateful()            :\n                  |                             |-------------------------->|\n                  |                             |                           | pendingSaves.push()\n                  |                             |                           |----+ writeStatefuls()\n                  | .collapsed=true             |<..........................:    :\n                  |<............................:                           :    :  (maybe other changes)\n                  :                             :                           :    :\n                  :                             :                           |<---+ (50 ms later)\n                  :                             :                           | writeStatefuls()\n                  :                             :       saveState({         |\n                  :                             :         immediate:true})  | <---------------+\n                  :                             |<--------------------------|                  \\\n                  :                             | setValue()                |                   \\\n                  :                             |-------------------------->|                    \\\n                  :                             |                           | .trigger('set')     ) one or more of these\n                  :                             |<..........................|                    /\n                  :                             |              saveState()  |                   /\n                  :                             :..........................>|                  /\n                  :                             :                           | <---------------+\n                  :                             :                           |\n                  :                             :                           | .trigger('save')\n                  :                             :                           |\n                  :                             :                           :....> writeStatefuls()\n                  :                             :                           :\n        */\n        return {\n            writeStatefuls : 50\n        };\n    }\n    /**\n     * The default {@link Core.mixin.State#config-stateProvider} for stateful objects.\n     * @property {Core.state.StateProvider}\n     */\n    static get instance() {\n        return this._instance;\n    }\n    static set instance(inst) {\n        if (inst == null) {\n            inst = nullProvider;\n        }\n        else {\n            if (typeof inst === 'string' || ObjectHelper.isClass(inst) || (inst instanceof StateStorage)) {\n                inst = {\n                    storage : inst\n                };\n            }\n            if (ObjectHelper.isObject(inst)) {\n                inst = new StateProvider(inst);\n            }\n        }\n        this._instance = inst;\n    }\n    /**\n     * Initializes the default `StateProvider` instance for the page. This method can be passed an instance or one of\n     * the following type aliases:\n     *\n     *  - `'local'` : use `localStorage` to store application state (most common)\n     *  - `'memory'` : holds application state in the `StateProvider` instance (used when state is saved to a server)\n     *\n     * Once the `StateProvider` is initialized, components that use {@link Core.mixin.State} and assign components a\n     * {@link Core.mixin.State#config-stateId} will use this default provider to automatically save and restore their\n     * state.\n     *\n     * @param {'local'|'memory'|Core.state.StateProvider} inst The state provider storage type ('local' or 'memory') or\n     * the `StateProvider` instance.\n     * @returns {Core.state.StateProvider}\n     */\n    static setup(inst) {\n        this.instance = inst;  // use smart setter\n        return this.instance;\n    }\n    doDestroy() {\n        self.writeStatefuls.flush();\n        super.doDestroy();\n    }\n    /**\n     * On read, this property returns all state data stored in the provider. On write, this property _adds_ all the\n     * given values to the state provider's data. To replace the data, call {@link #function-clear} before assigning\n     * this property. This is used to bulk populate this `StateProvider` with data for stateful components.\n     * @member {Object}\n     */\n    get data() {\n        return this.storage.data;\n    }\n    set data(data) {\n        if (!data) {\n            this.clear();\n        }\n        else {\n            for (const key in data) {\n                this.setValue(key, data[key]);\n            }\n        }\n    }\n    /**\n     * Clears all state date\n     * @returns {Core.state.StateProvider} this instance\n     */\n    clear() {\n        this.storage.clear();\n        return this;\n    }\n    changeStorage(storage) {\n        if (storage == null) {\n            storage = nullStorage;\n        }\n        else {\n            if (typeof storage === 'string') {\n                if (!storageTypes[storage]) {\n                    throw new Error(`Invalid storage type \"${storage}\" (expected one of: \"${\n                        Object.keys(storageTypes).join('\", \"')}\")`);\n                }\n                storage = storageTypes[storage];\n            }\n            if (ObjectHelper.isClass(storage)) {\n                storage = new storage(this);\n            }\n        }\n        return storage;\n    }\n    /**\n     * This method is called to schedule saving the given `stateful` object.\n     * @param {Core.mixin.State} stateful The stateful object to save.\n     * @param {Object} [options] An object of options that affect the state saving process.\n     * @param {String} [options.id] The key for the saved state.\n     * @param {Boolean} [options.immediate] Pass `true` to save the data synchronously instead of on a delay.\n     * @internal\n     */\n    saveStateful(stateful, options) {\n        (this.pendingSaves || (this.pendingSaves = [])).push([stateful, options]);\n        this.writeStatefuls();\n    }\n    /**\n     * A delayable method that flushes pending stateful objects.\n     * @private\n     */\n    writeStatefuls() {\n        const\n            me = this,\n            { pendingSaves } = me,\n            n = pendingSaves?.length,\n            stateIds = [],\n            saved = [];\n        me.pendingSaves = null;\n        if (n) {\n            for (let options, stateful, stateId, i = 0; i < n; ++i) {\n                [stateful, options] = pendingSaves[i];\n                if (!stateful.isDestroying && stateful.isSaveStatePending) {\n                    stateId = stateful.saveState({\n                        ...options,\n                        immediate : true\n                    });\n                    if (stateId) {\n                        stateIds.push(stateId);\n                        saved.push(stateful);\n                    }\n                }\n            }\n            if (stateIds.length) {\n                /**\n                 * Triggered after one or more stateful objects save their state to the state provider. This event can\n                 * be used to save state to a backend server.\n                 *\n                 * For example, to save the page's state object as a single object on the server:\n                 *\n                 * ```javascript\n                 *  StateProvider.instance.on({\n                 *      save() {\n                 *          const data = StateProvider.instance.data;\n                 *          // Save \"data\" to server\n                 *      }\n                 *  });\n                 * ```\n                 *\n                 * Or, to save individual stateful components to the server:\n                 *\n                 * ```javascript\n                 *  StateProvider.instance.on({\n                 *      save({ stateIds }) {\n                 *          for (const stateId of stateIds) {\n                 *              const data = StateProvider.instance.getValue(stateId);\n                 *\n                 *              if (data == null) {\n                 *                  // Remove \"stateId\" from the server\n                 *              }\n                 *              else {\n                 *                  // Save new \"data\" for \"stateId\" to the server\n                 *              }\n                 *          }\n                 *      }\n                 *  });\n                 * ```\n                 *\n                 * Multi-page applications should probably include a page identifier in addition to the `stateId` to\n                 * prevent state from one page affecting other pages. If there are common components across all (or\n                 * many) pages, the `stateId` values would need to be assigned with all pages in mind.\n                 *\n                 * @event save\n                 * @param {Core.state.StateProvider} source The source of the event\n                 * @param {String[]} stateIds An array of `stateId` values that were saved to the state provider.\n                 * @param {Core.mixin.State[]} saved An array of stateful objects saved just saved to state provider\n                 * storage, in the same order as the `stateIds` array.\n                 */\n                me.trigger('save', {\n                    stateIds,\n                    saved\n                });\n            }\n        }\n    }\n    /**\n     * Returns the stored state given its `key`.\n     * @param {String} key The identifier of the state to return.\n     * @returns {Object}\n     */\n    getValue(key) {\n        this.writeStatefuls.flush();\n        return this.storage.getItem(key);\n    }\n    /**\n     * Stores the given state `value` under the specified `key`.\n     * @param {String} key The identifier of the state value.\n     * @param {Object} value The state value to set.\n     * @returns {Core.state.StateProvider} this instance\n     */\n    setValue(key, value) {\n        const\n            me = this,\n            { storage } = me,\n            was = me.getValue(key);\n        if (value != null) {\n            storage.setItem(key, value);\n            /**\n             * Triggered after an item is stored to the state provider.\n             * @event set\n             * @param {Core.state.StateProvider} source The source of the event\n             * @param {String} key The name of the stored item.\n             * @param {*} value The value of the stored item.\n             * @param {*} was The previous value of the stored item.\n             */\n            me.trigger('set', { key, value, was });\n        }\n        else if (was !== null) {\n            storage.removeItem(key);\n            /**\n             * Triggered after an item is removed from the state provider.\n             * @event remove\n             * @param {Core.state.StateProvider} source The source of the event\n             * @param {String} key The name of the removed item.\n             * @param {*} was The value of the removed item.\n             */\n            me.trigger('remove', { key, was });\n        }\n        return me;\n    }\n};\nconst nullProvider = new StateProvider({\n    storage : nullStorage\n});\nStateProvider._instance = nullProvider;\nStateProvider._$name = 'StateProvider';", "import Base from '../Base.js';\nimport DateHelper from '../helper/DateHelper.js';\nimport ObjectHelper from '../helper/ObjectHelper.js';\nimport StringHelper from '../helper/StringHelper.js';\nimport StateProvider from '../state/StateProvider.js';\n//import Config from '../Config.js';\n/**\n * @module Core/mixin/State\n */\nconst primitiveRe = /boolean|number|string/;\n/**\n * A mixin that handles accessing, saving, and restoring an object's persistent state.\n *\n * ## Using Stateful Components\n *\n * Instances of classes that use this mixin (i.e., \"stateful components\") have a {@link #property-state} property that\n * provides read/write access to their persistable state in the form of a simple object. These state objects can be\n * saved and restored under application control, e.g., using `localStorage`.\n *\n * This approach can be streamlined using a {@link Core.state.StateProvider} either by setting the\n * {@link Core.state.StateProvider#property-instance-static default state provider} or by using an instance-level\n * {@link #config-stateProvider} config.\n *\n * When using a state provider, stateful components with a {@link #config-stateId} or an\n * {@link Core.widget.Widget#config-id} will automatically save (see {@link #function-saveState}) and restore\n * (see {@link #function-loadState}) their `state`. This use of the `id` as a `stateId` can be disabled by assigning\n * the {@link #config-stateful} config to `false`. When using a `stateId` and a state provider, it is not necessary to\n * call the {@link #function-loadState} and {@link #function-saveState} methods directly.\n *\n * ### Simple vs Complex State\n *\n * Some stateful components (e.g., {@link Core.widget.Panel panels}) have state that can be described purely by their\n * config properties. For these components, the {@link #config-stateful} config can be used to control which config\n * properties to include in their persistent state. For example:\n *\n * ```javascript\n *  const mainPanel = new Panel({\n *      collapsible : true,\n *      stateId     : 'mainPanel',\n *      stateful    : ['collapsed']\n *  });\n * ```\n *\n * Other components have a complex state (e.g., `GridState`), and do not use the `stateful` config in this way. In all\n * other ways, however, these components behave the same as their simple state counterparts.\n *\n * ## Implementing Stateful Components\n *\n * Implementors of stateful components have two main design points to consider:\n *\n *  - Getting and setting their persistent {@link #property-state} object.\n *  - Initiating calls to {@link #function-saveState} when the object's persistent state changes.\n *\n * ### Persistent State\n *\n * For simple cases, the {@link #config-stateful} config can be set to the list of config property names that should be\n * saved:\n *\n * ```javascript\n *  class MyStatefulComponent extends Base.mixin(State) {\n *      static get configurable() {\n *          return {\n *              stateful : ['text', 'size']\n *          };\n *      }\n *  }\n * ```\n *\n * While the `stateful` config supports an object form (where keys with truthy values are the config names), this form\n * is typically reserved for configuring instances.\n *\n * Classes can choose to implement the {@link #function-getState} and {@link #function-applyState} methods to enhance\n * the `state` object with data not easily mapped to config properties. These method can call their `super` methods or\n * fully replace them.\n *\n * ```javascript\n *  class MyStatefulComponent extends Base.mixin(State) {\n *      getState() {\n *          return {\n *              text : this.text,\n *              size : this.size\n *          };\n *      }\n *\n *      applyState(state) {\n *          this.text = state.text;\n *          this.size = state.size;\n *      }\n *  }\n * ```\n *\n * ### Saving Dates\n *\n * A stateful property may be a `Date` property if the `changeDate` method of the class accepts an\n * ISO 8601 formatted date. Dates are saved in state using ISO 8601 format: `YYYY-MM-DDTHH:mm:ssZ`\n *\n * ### Saving State\n *\n * When the persistent state of a stateful component changes, it must call {@link #function-saveState}. This method\n * schedules an update of the component's persistence {@link #property-state} with the appropriate\n * {@link #config-stateProvider}. When a config property named in the {@link #config-stateful} config changes, this\n * call will be made automatically. This means that even if a component replaces {@link #function-getState} and\n * {@link #function-applyState}, it can still be helpful to specify a value for the `stateful` config.\n *\n * ```javascript\n *  class MyStatefulComponent extends Base.mixin(State) {\n *      static get configurable() {\n *          return {\n *              stateful : ['text', 'size']\n *          };\n *      }\n *\n *      getState() { ... }\n *      applyState(state) { ... }\n *  }\n * ```\n *\n * Another way to ensure {@link #function-saveState} is called when necessary is to use {@link #config-statefulEvents}.\n *\n * ```javascript\n *  class MyStatefulComponent extends Base.mixin(State) {\n *      static get configurable() {\n *          return {\n *              statefulEvents : ['change', 'resize']\n *          };\n *      }\n *  }\n * ```\n *\n * @mixin\n */\nexport default Target => class State extends (Target || Base) {\n    static $name = 'State';\n    static configurable = {\n        /**\n         * This value can be one of the following:\n         *\n         * - `false` to not use an explicitly assigned {@link Core.widget.Widget#config-id} as the component's\n         * {@link #config-stateId} (this is only necessary when there is a {@link #config-stateProvider}).\n         * - An array of strings naming the config properties to save in the component's {@link #property-state}\n         * object.\n         * - An object whose truthy keys are the config properties to save in the component's {@link #property-state}\n         * object.\n         *\n         * These last two uses of the `stateful` config property do not apply to components that have a complex\n         * state, as described in the {@link Core.mixin.State State mixin documentation}.\n         *\n         * This config property is typically set by derived classes to a value including any config property that\n         * the user can affect via the user interface. For example, the {@link Core.widget.Panel#config-collapsed}\n         * config property is listed for a {@link Core.widget.Panel} since the user can toggle this config property\n         * using the {@link Core.widget.panel.PanelCollapser#config-tool collapse tool}.\n         *\n         * @config {Boolean|Object|String[]}\n         * @category State\n         */\n        stateful : {\n            value   : null,\n            $config : {\n                merge : 'classList'\n            }\n        },\n        /**\n         * The events that, when fired by this component, should trigger it to save its state by calling\n         * {@link #function-saveState}.\n         *\n         * ```javascript\n         *  class MyStatefulComponent extends Base.mixin(State) {\n         *      static get configurable() {\n         *          return {\n         *              statefulEvents : [ 'change', 'resize' ]\n         *          };\n         *      }\n         *  }\n         * ```\n         * In the above example, {@link #function-saveState} will be called any time an instance of this class\n         * fires the `change` or `resize` event.\n         *\n         * This config is typically set by derived classes as a way to ensure {@link #function-saveState} is called\n         * whenever their persistent state changes.\n         *\n         * @config {Object|String[]}\n         * @category State\n         * @default\n         */\n        statefulEvents : {\n            $config : {\n                merge : 'classList'\n            },\n            value : ['stateChange']\n        },\n        /**\n         * The key to use when saving this object's state in the {@link #config-stateProvider}. If this config is\n         * not assigned, and {@link #config-stateful} is not set to `false`, the {@link Core.widget.Widget#config-id}\n         * (if explicitly specified) will be used as the `stateId`.\n         *\n         * If neither of these is given, the {@link #function-loadState} and {@link #function-saveState} methods\n         * will need to be called directly to make use of the `stateProvider`.\n         *\n         * For single page applications (SPA's), or multi-page applications (MPA's) that have common, stateful\n         * components on multiple pages, the `stateId` should be unique across all stateful components (similar to DOM\n         * element id's). MPA's that want each page to be isolated can more easily achieve that isolation using the\n         * {@link Core.state.StateProvider#config-prefix}.\n         *\n         * @config {String}\n         * @category State\n         */\n        stateId : null,\n        /**\n         * The `StateProvider` to use to save and restore this object's {@link #property-state}. By default, `state`\n         * will be saved using the {@link Core.state.StateProvider#property-instance-static default state provider}.\n         *\n         * This config is useful for multi-page applications that have a set of common components that want to share\n         * state across pages, as well as other components that want their state to be isolated. One of these groups\n         * of stateful components could be assigned an explicit `stateProvider` while the other group could use the\n         * default state provider.\n         *\n         * @config {Core.state.StateProvider}\n         * @category State\n         */\n        stateProvider : null\n    };\n    static prototypeProperties = {\n        statefulLoaded : false,\n        statefulSuspended : 0\n    };\n    afterConstruct() {\n        super.afterConstruct();\n        this.loadState();\n    }\n    finalizeInit() {\n        // For widgets, this should happen before rendering which happens in Widget.finalizeInit():\n        this.loadState();\n        super.finalizeInit();\n    }\n    /**\n     * Returns `true` if this instance implements the {@link Core.mixin.State} interface.\n     * @property {Boolean}\n     * @readonly\n     */\n    get isStateful() {\n        return true;\n    }\n    /**\n     * Returns `true` if this instance is ready to participate in state activities.\n     * @property {Boolean}\n     * @readonly\n     * @internal\n     */\n    get isStatefulActive() {\n        // If a widget is rendered via appendTo (for example), this happens inside construct(), before we are called\n        // in afterConstruct(). When the Widget uses Responsive mixin, that will trigger its initial responsive update.\n        // In short, when isResponsivePending, the Widget is Responsive _and_ has not yet determined its responsiveState.\n        // In this case we do NOT want to activate statefulness.\n        // Further, if we are updating configs from a responsiveUpdate, we do not want to save to state.\n        return !this.statefulSuspended && !this.isResponsivePending && !this.isResponsiveUpdating;\n    }\n    // state\n    /**\n     * Gets or sets a component's state\n     * @property {Object}\n     * @category State\n     */\n    get state() {\n        return this._state = this.getState();\n    }\n    set state(state) {\n        this._state = state;\n        if (state) {\n            this.applyState(state);\n        }\n    }\n    // statefulEvents\n    updateStatefulEvents(events) {\n        const\n            me        = this,\n            listeners = {\n                name    : 'statefulEvents',\n                thisObj : me\n            };\n        me.detachListeners(listeners.name);\n        if (events) {\n            if (typeof events === 'string') {\n                events = StringHelper.split(events);\n            }\n            else if (!Array.isArray(events)) {\n                events = ObjectHelper.getTruthyKeys(events);\n            }\n            if (events.length) {\n                for (const event of events) {\n                    listeners[event] = 'onStatefulEvent';\n                }\n                me.ion?.(listeners);\n            }\n        }\n    }\n    // statefulId\n    /**\n     * Returns the state key to use for this instance. This will be either the {@link #config-stateId} or the\n     * {@link Core.widget.Widget#config-id} (if explicitly specified and {@link #config-stateful} is not `false`).\n     * @property {String}\n     * @category State\n     * @internal\n     */\n    get statefulId() {\n        const\n            me = this,\n            { responsiveState } = me;\n        let statefulId = me.stateId;\n        if (statefulId == null && me.hasGeneratedId === false && me.stateful !== false) {\n            statefulId = me.id;\n        }\n        if (statefulId && responsiveState) {\n            statefulId = `${statefulId}[${responsiveState}]`;  // ex = 'foo[small]'\n        }\n        return statefulId;\n    }\n    // statefulness\n    /**\n     * Returns an object whose truthy keys are the config properties to include in this object's {@link #property-state}.\n     * @property {Object}\n     * @category State\n     * @readonly\n     * @private\n     */\n    get statefulness() {\n        const { stateful } = this;\n        return Array.isArray(stateful) ? ObjectHelper.createTruthyKeys(stateful) : stateful;\n    }\n    // stateProvider\n    get stateProvider() {\n        return this._stateProvider || StateProvider.instance;\n    }\n    //---------------------------------------------------------------------------------------------------------------\n    // Methods\n    /**\n     * Applies the given `state` to this instance.\n     *\n     * This method is not called directly, but is called when the {@link #property-state} property is assigned a value.\n     *\n     * This method is implemented by derived classes that have complex state which exceeds the simple list of config\n     * properties provided by {@link #config-stateful}. In these cases, the `super` method can be called to handle any\n     * config properties that are part of the complex state. The default implementation of this method will only assign\n     * those config properties listed in {@link #config-stateful} from the provided `state` object.\n     *\n     * @param {Object} state The state object to apply to this instance.\n     * @category State\n     */\n    applyState(state) {\n        state = this.pruneState(state);\n        if (state) {\n            this.setConfig(state);\n        }\n    }\n    /**\n     * Returns this object's state information.\n     *\n     * This method is not called directly, but is called to return the value of the {@link #property-state} property.\n     *\n     * This method is implemented by derived classes that have complex state which exceeds the simple list of config\n     * properties provided by {@link #config-stateful}. In these cases, the `super` method can be called to gather the\n     * config properties that are part of the complex state. The default implementation of this method will only copy\n     * those config properties listed in {@link #config-stateful} to the returned `state` object.\n     *\n     * @returns {Object}\n     * @category State\n     */\n    getState() {\n        const\n            me          = this,\n            {\n                initialConfig,\n                statefulness,\n                isConstructing : defaultState\n            }           = me,\n            { configs } = me.$meta,\n            // If we are reading state at construction time, we are collecting the defaultState, so\n            // we should read from the initial config and the defaults.\n            source      = defaultState ? Object.setPrototypeOf(initialConfig, me.$meta.config) : me;\n        let state = null,\n            key, value;\n        if (statefulness) {\n            state = {};\n            for (key in statefulness) {\n                if (statefulness[key]) {\n                    value = source[key];\n                    if (value?.isStateful) {\n                        value = value.state;  // e.g.: stateful : { store : true }\n                    }\n                    else if (!defaultState) {\n                        // Dates can be saved in state as ISO 8601 Date and time.\n                        // This class's changer must be able to ingest this format.\n                        if (ObjectHelper.isDate(value)) {\n                            value = DateHelper.format(value, 'YYYY-MM-DDTHH:mm:ssZ');\n                        }\n                        // If we are reading state to save, ignore configs that have their initial value or aren't primitives\n                        if (configs[key].equal(value, initialConfig?.[key]) || !primitiveRe.test(typeof value)) {\n                            continue;\n                        }\n                    }\n                    state[key] = value;\n                }\n            }\n        }\n        return state;\n    }\n    /**\n     * Loads this object's state from its {@link #config-stateProvider} and applies it to its {@link #property-state}.\n     *\n     * This method only acts upon its first invocation for a given instance (unless `true` is passed for the `reload`\n     * parameter). This allows for flexibility in the timing of that call during the early stages of the instances'\n     * lifecycle. To reload the state after this time, manually assign the desired value to the {@link #property-state}\n     * property or call this method and pass `reload` as `true`.\n     *\n     * This method is called automatically during construction when a {@link #config-stateId} or (in some cases) an\n     * explicit {@link Core.widget.Widget#config-id} is provided.\n     *\n     * @param {String} [stateId] An overriding key to use instead of this object's {@link #config-stateId}.\n     * @param {Boolean} [reload=false] Pass `true` to load the state even if previously loaded.\n     * @category State\n     */\n    loadState(stateId, reload) {\n        if (typeof stateId === 'boolean') {\n            reload = stateId;\n            stateId = null;\n        }\n        const\n            me = this,\n            { statefulLoaded } = me;\n        if (me.isStatefulActive && (reload || !statefulLoaded)) {\n            const state = me.loadStatefulData(stateId || (stateId = me.statefulId));\n            if (!statefulLoaded && stateId) {\n                // Whether we have state data or not, we attempted to load it, so track the defaults and load attempt.\n                // The state as gathered when statefulLoaded not set is gathered from the configuration, *not*\n                // the running state.\n                me.defaultState = me.state;\n                me.statefulLoaded = true;\n            }\n            if (state) {\n                me.state = state;\n            }\n        }\n    }\n    loadStatefulData(stateId) {\n        stateId = this.isStatefulActive ? stateId || this.statefulId : null;\n        return stateId && this.stateProvider?.getValue(stateId);\n    }\n    resetDefaultState() {\n        if (this.defaultState) {\n            this.state = this.defaultState;\n        }\n    }\n    resumeStateful(full = false) {\n        this.statefulSuspended = full ? 0 : Math.max(this.statefulSuspended - 1, 0);\n    }\n    /**\n     * Saves this object's state to its {@link #config-stateProvider}.\n     *\n     * When a {@link #config-stateId} or (in some cases) an explicit {@link Core.widget.Widget#config-id} is provided,\n     * this method will be called automatically any time a config property listed in {@link #config-stateful} changes or\n     * when a {@link #config-statefulEvents stateful event} is fired.\n     *\n     * Derived classes are responsible for calling this method whenever the persistent {@link #property-state} of the\n     * object changes.\n     *\n     * @param {Object|String} [options] Options that affect the state saving process or, if a string, the state `id`.\n     * @param {String} [options.id] The state id for the saved state (overrides {@link #config-stateId}).\n     * @param {Boolean} [options.immediate] Pass `true` to save the data synchronously instead of on a delay.\n     * @category State\n     */\n    saveState(options) {\n        if (typeof options === 'string') {\n            options = {\n                id : options\n            };\n        }\n        else {\n            options = options || {};\n        }\n        const\n            me                = this,\n            { stateProvider } = me,\n            statefulId        = options.id || (me.isStatefulActive && me.statefulId);\n        if (statefulId && stateProvider) {\n            if (options.immediate) {\n                me.isSaveStatePending = false;\n                stateProvider.setValue(statefulId, me.state);\n            }\n            else if (!me.isSaveStatePending) {\n                me.isSaveStatePending = true;\n                stateProvider.saveStateful(me, options);\n            }\n            return statefulId;\n        }\n    }\n    suspendStateful() {\n        ++this.statefulSuspended;\n    }\n    //---------------------------------------------------------------------------------------------------------------\n    // Private / Internal\n    onConfigChange({ name, value, was, config }) {\n        super.onConfigChange({ name, value, was, config });\n        if (!this.isConstructing && this.isStatefulActive && this.statefulId) {\n            const { stateful } = this;\n            if (Array.isArray(stateful) ? stateful.includes(name) : stateful?.[name]) {\n                this.saveState();\n            }\n        }\n    }\n    onStatefulEvent() {\n        if (!this.isConstructing) {\n            this.saveState();\n        }\n    }\n    /**\n     * Returns an object that copies the {@link #config-stateful} config properties from the provided `state` object.\n     *\n     * @param {Object} state A state object from which to copy stateful configs.\n     * @returns {Object}\n     * @category State\n     * @private\n     */\n    pruneState(state) {\n        const { statefulness } = this;\n        if (statefulness) {\n            const pruned = {};\n            for (const key in state) {\n                if (statefulness[key]) {\n                    pruned[key] = state[key];\n                }\n            }\n            state = pruned;\n        }\n        return state;\n    }\n    //---------------------------------------------------------------------------------------------------------------\n    // This does not need a className on Widgets.\n    // Each *Class* which doesn't need 'b-' + constructor.name.toLowerCase() automatically adding\n    // to the Widget it's mixed in to should implement thus.\n    get widgetClass() {}\n};\n", "import Base from '../Base.js';\nimport ObjectHelper from '../helper/ObjectHelper.js';\n/**\n * @module Core/mixin/Identifiable\n */\nconst\n    // Id generation should be on a per page basis, not per module\n    idCounts     = ObjectHelper.getPathDefault(globalThis, 'bryntum.idCounts', Object.create(null)),\n    idTypes      = {\n        string : 1,\n        number : 1\n    };\n/**\n * A mixin which provides identifier services such as auto-creation of `id`s and registration and\n * lookup of instances by `id`.\n *\n * @mixin\n * @internal\n */\nexport default Target => class Identifiable extends (Target || Base) {\n    static get $name() {\n        return 'Identifiable';\n    }\n    static get declarable() {\n        return [\n            'identifiable'\n        ];\n    }\n    static get configurable() {\n        return {\n            /**\n             * The id of this object.  If not specified one will be generated. Also used for lookups through the\n             * static `getById` of the class which mixes this in. An example being {@link Core.widget.Widget}.\n             *\n             * For a {@link Core.widget.Widget Widget}, this is assigned as the `id` of the DOM\n             * {@link Core.widget.Widget#config-element element} and must be unique across all elements\n             * in the page's `document`.\n             * @config {String}\n             * @category Common\n             */\n            id : ''\n        };\n    }\n    static setupIdentifiable(cls, meta) {\n        const { identifiable } = cls;\n        identifiable.idMap = Object.create(null);\n        Reflect.defineProperty(cls, 'identifiable', {\n            get() {\n                return identifiable;\n            }\n        });\n    }\n    doDestroy() {\n        this.constructor.unregisterInstance(this);\n        super.doDestroy();\n    }\n    changeId(id) {\n        return ((this.hasGeneratedId /* assignment */ = !id)) ? this.generateAutoId() : id;\n    }\n    updateId(id, oldId) {\n        const\n            me = this,\n            C = me.constructor;\n        oldId && C.unregisterInstance(me, oldId);\n        if (!me.hasGeneratedId || C.identifiable.registerGeneratedId !== false) {\n            C.registerInstance(me, id);\n        }\n    }\n    /**\n     * This method generates an id for this instance.\n     * @returns {String}\n     * @internal\n     */\n    generateAutoId() {\n        return this.constructor.generateId(`b-${this.$$name.toLowerCase()}-`);\n    }\n    static get all() {\n        // not documented here since type of array is not knowable... documented at mixin target class\n        return Object.values(this.identifiable.idMap);\n    }\n    /**\n     * Generate a new id, using an internal counter and a prefix.\n     * @param {String} prefix Id prefix\n     * @returns {String} Generated id\n     */\n    static generateId(prefix = 'generatedId') {\n        // This produces \"b-foo-1, b-foo-2, ...\" for each prefix independently of the others. In other words, it makes\n        // id's more stable since the counter is on a per-class basis.\n        return prefix + (idCounts[prefix] = (idCounts[prefix] || 0) + 1);\n    }\n    static registerInstance(instance, instanceId = instance.id) {\n        const { idMap } = this.identifiable;\n        // Code editor sets `disableThrow` to not get conflicts when loading the same module again\n        if (instanceId in idMap && !this.disableThrow) {\n            throw new Error('Id ' + instanceId + ' already in use');\n        }\n        idMap[instanceId] = instance;\n    }\n    /**\n     * Unregister Identifiable instance, normally done on destruction\n     * @param {Object} instance Object to unregister\n     * @param {String} id The id of the instance to unregister.\n     */\n    static unregisterInstance(instance, id = instance.id) {\n        const { idMap } = this.identifiable;\n        // ID may be passed, for example if the instance is destroyed and can no longer yield an id.\n        if (idTypes[typeof instance]) {\n            delete idMap[instance];\n        }\n        // Have to check for identity in case another instance by the same id has been created.\n        // Allow that to be overridden. Stores have always just evicted the previous owner of their IDs\n        else if (idMap[id] === instance) {\n            delete idMap[id];\n        }\n    }\n    static getById(id) {\n        const idMap = this.identifiable.idMap;\n        if (idMap) {\n            return idMap[id];\n        }\n    }\n    static get registeredInstances() {\n        const idMap = this.identifiable.idMap;\n        return idMap ? Object.values(idMap) : [];\n    }\n};\n", "/**\n * @module Core/data/stm/mixin/ModelStm\n */\nimport Base from '../../../Base.js';\nconst\n    STM_PROP         = Symbol('STM_PROP'),\n    unrecordedFields = {\n        // This field's value is a by product of node insertion and must not be recorded here.\n        // It's the node insertion operation which is recorded by STM.\n        parentIndex : 1\n    };\n/**\n * Mixin making a model compatible with {@link Core/data/stm/StateTrackingManager}\n *\n * @mixin\n */\nexport default Target => class ModelStm extends (Target || Base) {\n    static get $name() {\n        return 'ModelStm';\n    }\n    static get defaultConfig() {\n        return {\n            stm : null\n        };\n    }\n    joinStore(store) {\n        // No super on purpose, micro optimization of critical perf path\n        // super.joinStore && super.joinStore(store);\n        if (!this.stm) {\n            this.stm = store.stm;\n        }\n    }\n    unjoinStore(store) {\n        if (this.stm === store.stm) {\n            this.stm = null;\n        }\n        super.unjoinStore?.(store);\n    }\n    /**\n     * Reference to STM manager, if used\n     * @member {Core.data.stm.StateTrackingManager}\n     * @category Misc\n     */\n    get stm() {\n        return this[STM_PROP];\n    }\n    set stm(stm) {\n        this[STM_PROP] = stm;\n    }\n    // Hook for chronograph entity field accessors, for example; task.duration = 123.\n    // Triggers before setting the value.\n    beforeChronoFieldSet(fieldName, value) {\n        const me = this;\n        if (!me.inSetting && me.stm?.enabled && !unrecordedFields[fieldName] && !me.constructor.nonPersistableFields[fieldName]) {\n            // Do not record changes of identifiers that are not fields\n            if (me.getFieldDefinition(fieldName)) {\n                return { [fieldName] : { value, oldValue : me[fieldName] } };\n            }\n        }\n        return null;\n    }\n    // Hook for chronograph entity field accessors, for example; task.duration = 123\n    // Triggers after setting the value.\n    afterChronoFieldSet(fieldName, value, wasSet) {\n        wasSet && this.afterSet(fieldName, value, false, false, wasSet, true);\n    }\n    shouldRecordFieldChange(fieldName, oldValue, newValue) {\n        const store = this.firstStore;\n        // By default, we do not record:\n        // - not persistable field changes\n        // - null vs undefined changes\n        // - same value changes, compared by reference (by value for dates)\n        // - \"id\" changes\n        // - \"parentId\" changes caused by parent record idChange\n        return !(\n            this.constructor.nonPersistableFields[fieldName] ||\n            (oldValue == null && newValue == null) ||\n            (oldValue === newValue) ||\n            ((oldValue instanceof Date) && (newValue instanceof Date) && oldValue.getTime() === newValue.getTime()) ||\n            fieldName === 'id' ||\n            fieldName === '$PhantomId' ||\n            (fieldName === 'parentId' && store && store.oldIdMap[oldValue] === store.getById(newValue))\n        );\n    }\n    /**\n     * Overridden to store initial data of the changed fields and to notify STM\n     * manager about the change action if anything has been changed in result.\n     *\n     * The method is called from within {@link Core/data/Model#function-set} method.\n     *\n     * @private\n     */\n    afterSet(field, value, silent, fromRelationUpdate, wasSet, isChronoFieldSet) {\n        const\n            { stm }              = this,\n            nonPersistableFields = this.constructor.nonPersistableFields;\n        if (stm?.isBase && stm.enabled && !unrecordedFields[field] && !nonPersistableFields[field]) {\n            if (wasSet) {\n                let shouldRecord;\n                const [newData, oldData] = Object.keys(wasSet).reduce(\n                    (data, fieldName) => {\n                        const { value, oldValue } = wasSet[fieldName];\n                        if (this.shouldRecordFieldChange(fieldName, oldValue, value)) {\n                            shouldRecord       = true;\n                            data[0][fieldName] = value;\n                            data[1][fieldName] = oldValue;\n                        }\n                        return data;\n                    },\n                    [{}, {}]\n                );\n                if (shouldRecord) {\n                    stm.onModelUpdate(this, newData, oldData, isChronoFieldSet);\n                }\n            }\n        }\n        // No super on purpose, micro optimization of critical perf path\n        // super.afterSet?.afterSet(field, value, silent, fromRelationUpdate, wasSet, isChronoFieldSet);\n    }\n    /**\n     * Called from {@link Core/data/mixin/TreeNode#function-insertChild} to obtain inserted\n     * records initial parents and parent index, to be able to restore the state back upon undo.\n     *\n     * @param {Core.data.Model[]} childRecords\n     * @returns {Array} Array of results from this call and any of super calls if any.\n     *               This result is consumed by {@link #function-afterInsertChild} which pops\n     *               from the result array to take only results of this method call and leave\n     *               results from super calls untouched.\n     *\n     * @private\n     */\n    beforeInsertChild(childRecords) {\n        const\n            preResult = super.beforeInsertChild?.(childRecords) || [],\n            { stm }   = this;\n        if (stm?.enabled) {\n            preResult.push(\n                childRecords.reduce((result, childRecord) => {\n                    // We are interested only in records from the same root node.\n                    // Removing (which is done before insertion) of the records\n                    // from another root (and store) should\n                    // be handled by that store STM instance.\n                    if (childRecord.root === this.root) {\n                        result.set(childRecord, {\n                            parent : childRecord.parent,\n                            index  : childRecord.parent ? childRecord.parentIndex : undefined\n                        });\n                    }\n                    return result;\n                }, new Map())\n            );\n        }\n        return preResult;\n    }\n    /**\n     * Called from {@link Core/data/mixin/TreeNode#function-insertChild} to notify {@link Core/data/stm/StateTrackingManager}\n     * about children insertion. Provides it with all necessary context information collected\n     * in {@link #function-beforeInsertChild} required to undo/redo the action.\n     *\n     * @private\n     */\n    afterInsertChild(index, childRecords, beforeResult, inserted) {\n        const { stm } = this;\n        if (stm?.enabled) {\n            const context = beforeResult.pop();\n            if (inserted) {\n                stm.onModelInsertChild(this, index, inserted, context);\n            }\n        }\n        super.afterInsertChild?.(index, childRecords, beforeResult, inserted);\n    }\n    /**\n     * Called from {@link Core/data/mixin/TreeNode#function-removeChild} to obtain removed\n     * records initial parent index, to be able to restore the state back upon undo.\n     *\n     * @param {Core.data.Model[]} childRecords\n     * @param {Boolean} isMove\n     * @returns {Array} Array of results from this call and any of super calls if any.\n     *               This result is consumed by {@link #function-afterRemoveChild} which pops\n     *               from the result array to take only results of this method call and leave\n     *               results from super calls untouched.\n     *\n     * @private\n     */\n    beforeRemoveChild(childRecords, isMove) {\n        const\n            preResult = super.beforeRemoveChild ? super.beforeRemoveChild(childRecords, isMove) : [],\n            { stm }   = this;\n        // If it's move then InsertChildAction will handle this case\n        if (stm?.enabled && !isMove) {\n            // Child records we receive are guaranteed to be direct children\n            // of this node, see Core/data/mixin/TreeNode#removeChild method\n            // Here we interested in the original index for each child removed,\n            // we collect it and store for future use in RemoveChildAction\n            preResult.push(\n                childRecords.reduce((result, childRecord) => {\n                    result.set(childRecord, childRecord.parentIndex);\n                    return result;\n                }, new Map())\n            );\n        }\n        return preResult;\n    }\n    /**\n     * Called from {@link Core/data/mixin/TreeNode#function-removeChild} to notify {@link Core/data/stm/StateTrackingManager}\n     * about children removing. Provides it with all necessary context information collected\n     * in {@link #function-beforeRemoveChild} required to undo/redo the action.\n     *\n     * @private\n     */\n    afterRemoveChild(childRecords, beforeResult, isMove) {\n        const { stm } = this;\n        // If it's move then InsertChildAction will handle this case\n        if (stm?.enabled && !isMove) {\n            const context = beforeResult.pop();\n            if (childRecords && childRecords.length) {\n                stm.onModelRemoveChild(this, childRecords, context);\n            }\n        }\n        super.afterRemoveChild?.(childRecords, beforeResult, isMove);\n    }\n};\n", "import Base from '../../Base.js';\nimport ArrayHelper from '../../helper/ArrayHelper.js';\n/**\n * @module Core/data/mixin/TreeNode\n */\nconst\n    defaultTraverseOptions = {\n        includeFilteredOutRecords : false\n    },\n    fixTraverseOptions     = options => {\n        options = options || false;\n        if (typeof options === 'boolean') {\n            options = {\n                includeFilteredOutRecords : options\n            };\n        }\n        return options || defaultTraverseOptions;\n    };\n/**\n * Mixin for Model with tree node related functionality. This class is mixed into the {@link Core/data/Model} class.\n *\n * ## Adding and removing child nodes\n *\n * ```javascript\n * const parent = store.getById(1),\n *\n * firstBorn = parent.insertChild({\n *     name : 'Child node'\n * }, parent.children[0]); // Insert a child at a specific place in the children array\n *\n * parent.removeChild(parent.children[0]); // Removes a child node\n * parent.appendChild({ name : 'New child node' }); // Appends a child node\n * ```\n *\n * @mixin\n */\nexport default Target => class TreeNode extends (Target || Base) {\n    static get $name() {\n        return 'TreeNode';\n    }\n    /**\n     * This static configuration option allows you to control whether an empty parent task should be converted into a\n     * leaf. Enable/disable it for a whole class:\n     *\n     * ```javascript\n     * Model.convertEmptyParentToLeaf = false;\n     * ```\n     *\n     * By specifying `true`, all empty parents will be considered leafs. Can also be assigned a configuration object\n     * with the following Boolean properties to customize the behaviour:\n     *\n     * ```javascript\n     * Model.convertEmptyParentToLeaf = {\n     *     onLoad   : false,\n     *     onRemove : true\n     * }\n     * ```\n     *\n     * @member {Boolean|{ onLoad : Boolean, onRemove : Boolean }} convertEmptyParentToLeaf\n     * @property {Boolean} onLoad Apply the transformation on load to any parents without children (`children : []`)\n     * @property {Boolean} onRemove Apply the transformation when all children have been removed from a parent\n     * @default false\n     * @static\n     * @category Parent & children\n     * */\n    static set convertEmptyParentToLeaf(value) {\n        if (value === true) {\n            value = {\n                onLoad   : true,\n                onRemove : true\n            };\n        }\n        else if (value === false) {\n            value = {\n                onLoad   : false,\n                onRemove : false\n            };\n        }\n        this._convertEmptyParentToLeaf = value;\n    }\n    constructor(...args) {\n        super(...args);\n        if (this.children) {\n            this.orderedChildren = this.orderedChildren || [];\n        }\n    }\n    static get convertEmptyParentToLeaf() {\n        return this._convertEmptyParentToLeaf || { onLoad : false, onRemove : false };\n    }\n    /**\n     * This is a read-only property providing access to the parent node.\n     * @member {Core.data.Model} parent\n     * @readonly\n     * @category Parent & children\n     */\n    /**\n     * This is a read-only field provided in server synchronization packets to specify\n     * which record id is the parent of the record.\n     * @readonly\n     * @field {String|Number|null} parentId\n     * @category Tree\n     */\n    /**\n     * This is a read-only field provided in server synchronization packets to specify\n     * which position the node takes in the parent's children array.\n     * This index is set on load and gets updated automatically after row reordering, sorting, etc.\n     * To save the order, need to persist the field on the server and when data is fetched to be loaded,\n     * need to sort by this field.\n     * @readonly\n     * @field {Number} parentIndex\n     * @category Tree\n     */\n    /**\n     * This is a read-only field provided in server synchronization packets to specify\n     * which position the node takes in the parent's ordered children array.\n     * This index is set on load and gets updated on reordering nodes in tree. Sorting and filtering\n     * have no effect on it.\n     * @readonly\n     * @field {Number} orderedParentIndex\n     * @category Tree\n     */\n    ingestChildren(childRecord, stores = this.stores) {\n        const\n            { inProcessChildren, constructor : MyClass } = this,\n            store                                        = stores[0];\n        if (childRecord === true) {\n            if (inProcessChildren) {\n                return true;\n            }\n            return [];\n        }\n        if (childRecord) {\n            childRecord = ArrayHelper.asArray(childRecord);\n            const\n                len    = childRecord.length,\n                result = [];\n            for (let i = 0, child; i < len; i++) {\n                child = childRecord[i];\n                child = child.isModel ? child : (store ? store.createRecord(child, false, true) : new MyClass(child, null, null, true));\n                child = store ? store.processRecord(child) : child;\n                result.push(child);\n            }\n            if (this.children === true && store) {\n                const sorter = store.createSorterFn(store.sorters);\n                result.sort(sorter);\n            }\n            return result;\n        }\n    }\n    /**\n     * Child nodes. To allow loading children on demand, specify `children : true` in your data. Omit the field for leaf\n     * tasks.\n     *\n     * Note, if the tree store loads data from a remote origin, make sure {@link Core/data/AjaxStore#config-readUrl}\n     * is specified, and optionally {@link Core/data/AjaxStore#config-parentIdParamName} is set, otherwise\n     * {@link Core/data/Store#function-loadChildren} has to be implemented.\n     *\n     * @field {Boolean|Object[]|Core.data.Model[]} children\n     * @category Parent & children\n     */\n    /**\n     * Array of sorted tree nodes but without a filter applied\n     * @member {Core.data.Model[]|null} unfilteredChildren\n     * @category Parent & children\n     * @private\n     */\n    /**\n     * Array of children unaffected by sorting and filtering, keeps original tree structure\n     * @member {Core.data.Model[]|null} orderedChildren\n     * @category Parent & children\n     * @private\n     */\n    /**\n     * Called during creation to also turn any children into Models joined to the same stores as this model\n     * @internal\n     * @category Parent & children\n     */\n    processChildren(stores = this.stores) {\n        const\n            me       = this,\n            { meta } = me;\n        me.inProcessChildren = true;\n        const children = me.ingestChildren(me.data[me.constructor.childrenField], stores);\n        if (children) {\n            const\n                { convertEmptyParentToLeaf } = me.constructor,\n                shouldConvert                = convertEmptyParentToLeaf === true || convertEmptyParentToLeaf.onLoad;\n            if (shouldConvert ? children.length : Array.isArray(children)) {\n                meta.isLeaf = false;\n                // We are processing a remote load\n                if (me.children === true) {\n                    me.children = [];\n                }\n                else if (children.length === 0) {\n                    me.children = children;\n                    return;\n                }\n                me.insertChild(children);\n            }\n            // Flagged for load on demand\n            else if (children === true) {\n                meta.isLeaf = false;\n                me.children = true;\n            }\n            // Empty child array, flag is leaf if configured to do so\n            else if (!me.isRoot) {\n                meta.isLeaf = me.constructor.convertEmptyParentToLeaf.onLoad;\n            }\n        }\n        me.inProcessChildren = false;\n    }\n    /**\n     * This method returns `true` if this record has all expanded ancestors and is therefore\n     * eligible for inclusion in a UI.\n     * @param {Core.data.Store} [store] Optional store, defaults to nodes first store\n     * @returns {Boolean}\n     * @readonly\n     * @category Parent & children\n     * @returns {Boolean}\n     */\n    ancestorsExpanded(store = this.firstStore) {\n        const { parent } = this;\n        return !parent || (parent.isExpanded(store) && parent.ancestorsExpanded(store));\n    }\n    /**\n     * Used by stores to assess the record's collapsed/expanded state in that store.\n     * @param {Core.data.Store} store\n     * @category Parent & children\n     * @returns {Boolean}\n     */\n    isExpanded(store = this.firstStore) {\n        const mapMeta = this.instanceMeta(store.id);\n        // Default initial expanded/collapsed state when in the store\n        // to the record's original expanded property.\n        if (!Object.prototype.hasOwnProperty.call(mapMeta, 'collapsed')) {\n            mapMeta.collapsed = !this.expanded;\n        }\n        return !mapMeta.collapsed;\n    }\n    // A read-only property. It provides the initial state upon load\n    // The UI's expanded/collapsed state is in the store's meta map.\n    get expanded() {\n        return this.data.expanded;\n    }\n    /**\n     * Depth in the tree at which this node exists. First visual level of nodes are at level 0, their direct children at\n     * level 1 and so on.\n     * @property {Number}\n     * @readonly\n     * @category Parent & children\n     */\n    get childLevel() {\n        let node = this,\n            ret  = -1;\n        while (node && !node.isRoot) {\n            ++ret;\n            node = node.parent;\n        }\n        return ret;\n    }\n    /**\n     * Is a leaf node in a tree structure?\n     * @property {Boolean}\n     * @readonly\n     * @category Parent & children\n     */\n    get isLeaf() {\n        return this.meta.isLeaf !== false && !this.isRoot;\n    }\n    /**\n     * Returns `true` if this node is the root of the tree\n     * @member {Boolean} isRoot\n     * @readonly\n     * @category Parent & children\n     */\n    /**\n     * Is a parent node in a tree structure?\n     * @property {Boolean}\n     * @readonly\n     * @category Parent & children\n     */\n    get isParent() {\n        return !this.isLeaf;\n    }\n    /**\n     * Returns true for parent nodes with children loaded (there might still be no children)\n     * @property {Boolean}\n     * @readonly\n     * @category Parent & children\n     */\n    get isLoaded() {\n        return this.isParent && Array.isArray(this.children);\n    }\n    /**\n     * Count all children (including sub-children) for a node (in its `firstStore\u00B4)\n     * @member {Number}\n     * @category Parent & children\n     */\n    get descendantCount() {\n        return this.getDescendantCount();\n    }\n    /**\n     * Count visible (expanded) children (including sub-children) for a node (in its `firstStore`)\n     * @member {Number}\n     * @category Parent & children\n     */\n    get visibleDescendantCount() {\n        return this.getDescendantCount(true);\n    }\n    /**\n     * Count visible (expanded)/all children for this node, optionally specifying for which store.\n     * @param {Boolean} [onlyVisible] Specify `true` to only count visible (expanded) children.\n     * @param {Core.data.Store} [store] A Store to which this node belongs\n     * @returns {Number}\n     * @category Parent & children\n     */\n    getDescendantCount(onlyVisible = false, store = this.firstStore) {\n        const { children } = this;\n        if (!children || !Array.isArray(children) || (onlyVisible && !this.isExpanded(store))) {\n            return 0;\n        }\n        return children.reduce((count, child) => count + child.getDescendantCount(onlyVisible), children.length);\n    }\n    /**\n     * Retrieve all children (by traversing sub nodes)\n     * @property {Core.data.Model[]}\n     * @category Parent & children\n     */\n    get allChildren() {\n        const { children } = this;\n        if (!children || children === true) {\n            return [];\n        }\n        return children.reduce((all, child) => {\n            all.push(child);\n            // push.apply is faster than push with array spread:\n            // https://jsperf.com/push-apply-vs-push-with-array-spread/1\n            all.push.apply(all, child.allChildren);\n            return all;\n        }, []);\n    }\n    /**\n     * Get the first child of this node\n     * @property {Core.data.Model}\n     * @readonly\n     * @category Parent & children\n     */\n    get firstChild() {\n        const { children } = this;\n        return (children?.length && children[0]) || null;\n    }\n    /**\n     * Get the last child of this node\n     * @property {Core.data.Model}\n     * @readonly\n     * @category Parent & children\n     */\n    get lastChild() {\n        const { children } = this;\n        return (children?.length && children[children.length - 1]) || null;\n    }\n    /**\n     * Get the previous sibling of this node\n     * @member {Core.data.Model} previousSibling\n     * @readonly\n     * @category Parent & children\n     */\n    /**\n     * Get the next sibling of this node\n     * @member {Core.data.Model} nextSibling\n     * @readonly\n     * @category Parent & children\n     */\n    /**\n     * Returns count of all preceding sibling nodes (including their children).\n     * @property {Number}\n     * @category Parent & children\n     */\n    get previousSiblingsTotalCount() {\n        let task  = this.previousSibling,\n            count = this.parentIndex;\n        while (task) {\n            count += task.descendantCount;\n            task = task.previousSibling;\n        }\n        return count;\n    }\n    get previousOrderedSibling() {\n        return this.parent?.orderedChildren[this.orderedParentIndex - 1];\n    }\n    get nextOrderedSibling() {\n        return this.parent?.orderedChildren[this.orderedParentIndex + 1];\n    }\n    get root() {\n        return this.parent?.root || this;\n    }\n    /**\n     * Reading this property returns the id of the parent node, if this record is a child of a node.\n     *\n     * Setting this property appends this record to the record with the passed id **in the same store that this record\n     * is already in**.\n     *\n     * Note that setting this property is **only valid if this record is already part of a tree store**.\n     *\n     * This is not intended for general use. This is for when a server responds to a record mutation and the server\n     * decides to move a record to a new parent. If a `parentId` property is passed in the response data for a record,\n     * that record will be moved.\n     *\n     * @property {Number|String|null}\n     * @category Parent & children\n     */\n    get parentId() {\n        return this.parent && !this.parent.isAutoRoot ? this.parent.id : null;\n    }\n    set parentId(parentId) {\n        const\n            me         = this,\n            { parent } = me,\n            newParent  = parentId === null ? me.firstStore.rootNode : me.firstStore.getById(parentId);\n        // Handle exact equality of parent.\n        // Also handle one being null and the other being undefined meaning no change.\n        if (!(newParent === parent || (!parent && !newParent))) {\n            // If we are batching, we do not trigger a change immediately.\n            // endBatch will set the field which will set the property again.\n            if (me.isBatchUpdating) {\n                me.meta.batchChanges.parentId = parentId;\n            }\n            else {\n                if (newParent) {\n                    newParent.appendChild(me);\n                }\n                else {\n                    me.parent.removeChild(me);\n                }\n            }\n        }\n    }\n    static set parentIdField(parentIdField) {\n        // Maintainer: the \"this\" references in here reference two different contexts.\n        // Outside of the property definition, it's the Model Class.\n        // In the getter and setter, it's the record instance.\n        this._parentIdField = parentIdField;\n        Object.defineProperty(this.prototype, parentIdField, {\n            set : function(parentId) {\n                // no arrow functions here, need `this` to change to instance\n                // noinspection JSPotentiallyInvalidUsageOfClassThis\n                this.parentId = parentId;\n            },\n            get : function() {\n                // no arrow functions here, need `this` to change to instance\n                // noinspection JSPotentiallyInvalidUsageOfClassThis\n                return this.parentId;\n            }\n        });\n    }\n    static get parentIdField() {\n        return this._parentIdField || 'parentId';\n    }\n    getChildren(options) {\n        let result;\n        if (options.includeFilteredOutRecords) {\n            result = this.unfilteredChildren || this.children;\n        }\n        else if (options.useOrderedTree) {\n            result = this.orderedChildren;\n        }\n        else {\n            result = this.children;\n        }\n        return result;\n    }\n    /**\n     * Traverses all child nodes recursively calling the passed function\n     * on a target node **before** iterating the child nodes.\n     * @param {Function} fn The function to call\n     * @param {Boolean} [skipSelf=false] True to ignore self\n     * @param {Object|Boolean} [options] A boolean for includeFilteredOutRecords, or an options object\n     * @param {Boolean} [options.includeFilteredOutRecords] True to also include filtered out records\n     * @param {Boolean} [options.useOrderedTree] True to traverse unsorted/unfiltered tree\n     * @category Parent & children\n     */\n    traverse(fn, skipSelf, options) {\n        options = fixTraverseOptions(options);\n        const\n            me       = this,\n            children = me.getChildren(options);\n        if (!skipSelf) {\n            fn.call(me, me);\n        }\n        // Simply testing whether there is non-zero children length\n        // is 10x faster than using this.isLoaded\n        for (let i = 0, l = children?.length; i < l; i++) {\n            children[i].traverse(fn, false, options);\n        }\n    }\n    /**\n     * Traverses all child nodes recursively calling the passed function\n     * on child nodes of a target **before** calling it on the node.\n     * @param {Function} fn The function to call\n     * @param {Boolean} [skipSelf=false] True to skip this node in the traversal\n     * @param {Object|Boolean} [options] A boolean for includeFilteredOutRecords, or an options object\n     * @param {Boolean} [options.includeFilteredOutRecords] True to also include filtered out records\n     * @category Parent & children\n     */\n    traverseBefore(fn, skipSelf, options) {\n        options = fixTraverseOptions(options);\n        const\n            me       = this,\n            children = me.getChildren(options);\n        // Simply testing whether there is non-zero children length\n        // is 10x faster than using me.isLoaded\n        for (let i = 0, l = children?.length; i < l; i++) {\n            children[i].traverse(fn, false, options);\n        }\n        if (!skipSelf) {\n            fn.call(me, me);\n        }\n    }\n    /**\n     * Traverses child nodes recursively while fn returns true\n     * @param {Function} fn\n     * @param {Boolean} [skipSelf=false] True to skip this node in the traversal\n     * @param {Object|Boolean} [options] A boolean for includeFilteredOutRecords, or an options object\n     * @param {Boolean} [options.includeFilteredOutRecords] True to also include filtered out records\n     * @category Parent & children\n     * @returns {Boolean}\n     */\n    traverseWhile(fn, skipSelf, options) {\n        options = fixTraverseOptions(options);\n        const me = this;\n        let goOn = skipSelf || fn.call(me, me) !== false;\n        if (goOn) {\n            const children = me.getChildren(options);\n            // Simply testing whether there is non-zero children length\n            // is 10x faster than using me.isLoaded\n            if (children?.length) {\n                goOn = children.every(child => child.traverseWhile(fn, false, options));\n            }\n        }\n        return goOn;\n    }\n    /**\n     * Bubbles up from this node, calling the specified function with each node.\n     *\n     * @param {Function} fn The function to call for each node\n     * @param {Boolean} [skipSelf] True to skip this node in the traversal\n     * @category Parent & children\n     */\n    bubble(fn, skipSelf = false) {\n        let me = this;\n        if (!skipSelf) {\n            fn.call(me, me);\n        }\n        while (me.parent) {\n            me = me.parent;\n            fn.call(me, me);\n        }\n    }\n    /**\n     * Bubbles up from this node, calling the specified function with each node,\n     * while the function returns true.\n     *\n     * @param {Function} fn The function to call for each node\n     * @param {Boolean} [skipSelf] True to skip this node in the traversal\n     * @category Parent & children\n     * @returns {Boolean}\n     */\n    bubbleWhile(fn, skipSelf = false) {\n        let me   = this,\n            goOn = true;\n        if (!skipSelf) {\n            goOn = fn.call(me, me);\n        }\n        while (goOn && me.parent) {\n            me   = me.parent;\n            goOn = fn.call(me, me);\n        }\n        return goOn;\n    }\n    /**\n     * Checks if this model contains another model as one of it's descendants\n     *\n     * @param {Core.data.Model|String|Number} childOrId child node or id\n     * @param {Boolean} [skipSelf=false] True to ignore self in the traversal\n     * @category Parent & children\n     * @returns {Boolean}\n     */\n    contains(childOrId, skipSelf = false) {\n        if (childOrId && typeof childOrId === 'object') {\n            childOrId = childOrId.id;\n        }\n        return !this.traverseWhile(node => node.id != childOrId, skipSelf);\n    }\n    getTopParent(all) {\n        let result;\n        if (all) {\n            result = [];\n            this.bubbleWhile((t) => {\n                result.push(t);\n                return t.parent && !t.parent.isRoot;\n            });\n        }\n        else {\n            result = null;\n            this.bubbleWhile((t) => {\n                if (!t.parent) {\n                    result = t;\n                }\n                return t.parent && !t.parent.isRoot;\n            });\n        }\n        return result;\n    }\n    /**\n     * Append a child record(s) to any current children.\n     * @param {Core.data.Model|Core.data.Model[]|Object|Object[]} childRecord Array of records/data or a single\n     * record/data to append\n     * @param {Boolean} [silent] Pass `true` to not trigger events during append\n     * @returns {Core.data.Model|Core.data.Model[]|null}\n     * @category Parent & children\n     */\n    appendChild(childRecord, silent = false) {\n        return this.insertChild(childRecord, null, silent);\n    }\n    /**\n     * Insert a child record(s) before an existing child record.\n     * @param {Core.data.Model|Core.data.Model[]|Object|Object[]} childRecord Array of records/data or a single\n     * record/data to insert\n     * @param {Core.data.Model} [before] Optional record to insert before, leave out to append to the end\n     * @param {Boolean} [silent] Pass `true` to not trigger events during append\n     * @returns {Core.data.Model|Core.data.Model[]|null}\n     * @category Parent & children\n     */\n    insertChild(childRecord, before = null, silent = false, options = {}) {\n        const\n            me          = this,\n            returnArray = Array.isArray(childRecord);\n        childRecord = ArrayHelper.asArray(childRecord);\n        if (typeof before === 'number') {\n            before = me.children?.[before] ?? null;\n        }\n        if (!silent && !me.stores.every(s => s.trigger('beforeAdd', {\n            records : childRecord, parent : me\n        }) !== false)) {\n            return null;\n        }\n        // This call makes child record an array containing Models\n        childRecord = me.ingestChildren(childRecord);\n        // NOTE: see comment in Model::set() about before/in/after calls approach.\n        const\n            index     = before?.parentIndex ?? me.children?.length ?? 0,\n            preResult = me.beforeInsertChild?.(childRecord),\n            inserted  = me.internalAppendInsert(childRecord, before, silent, options);\n        // Turn into a parent if not already one\n        if (inserted.length) {\n            me.convertToParent(silent);\n        }\n        me.afterInsertChild?.(index, childRecord, preResult, inserted);\n        return (returnArray || !inserted) ? inserted : inserted[0];\n    }\n    /**\n     * Converts a leaf node to a parent node, assigning an empty array as its children\n     * @param {Boolean} [silent] Pass `true` to not trigger any event\n     * @category Parent & children\n     */\n    convertToParent(silent = false) {\n        const\n            me      = this,\n            wasLeaf = me.isLeaf;\n        me.meta.isLeaf = false;\n        if (!me.children) {\n            me.children = [];\n        }\n        // Signal a change event so that the UI updates, unless it is during load in which case StoreTree#onNodeAddChild\n        // will handle it\n        if (wasLeaf && !me.root.isLoading && !silent) {\n            me.signalNodeChanged({\n                isLeaf : {\n                    value    : false,\n                    oldValue : true\n                }\n            });\n        }\n    }\n    signalNodeChanged(changes, stores = this.stores) {\n        stores.forEach(s => {\n            s.trigger('update', { record : this, records : [this], changes });\n            s.trigger('change', { action : 'update', record : this, records : [this], changes });\n        });\n    }\n    tryInsertChild() {\n        return this.insertChild(...arguments);\n    }\n    internalAppendInsert(recordsToInsert, beforeRecord, silent, options) {\n        const\n            me                         = this,\n            { stores, root, children } = me,\n            { firstStore : rootStore } = root,\n            { parentIdField }          = me.constructor,\n            parentId                   = me.isAutoRoot ? null : me.id;\n        let isNoop, start, i, newRecordsCloned, oldParentIndices, isMove;\n        if (!root.isLoading && rootStore) {\n            // Only collect this info if not loading, to not produce garbage\n            isMove = {};\n            oldParentIndices = [];\n            for (i = 0; i < recordsToInsert.length; i++) {\n                const newRecord = recordsToInsert[i];\n                // Store added should not be modified for adds\n                // caused by moving.\n                isMove[newRecord.id] = newRecord.root === root;\n                oldParentIndices[i]  = newRecord.parentIndex;\n            }\n        }\n        // The reference node must be one of our children. If not, fall back to an append.\n        if (beforeRecord && beforeRecord.parent !== me) {\n            beforeRecord = null;\n        }\n        // If the records starting at insertAt or (insertAt - 1), are the same sequence\n        // that we are being asked to add, this is a no-op.\n        if (children) {\n            const insertAt = beforeRecord ? beforeRecord.parentIndex : children.length;\n            if (children[start = insertAt] === recordsToInsert[0] || children[start = insertAt - 1] === recordsToInsert[0]) {\n                for (isNoop = true, i = 0; isNoop && i < recordsToInsert.length; i++) {\n                    if (recordsToInsert[i] !== children[start + i]) {\n                        isNoop = false;\n                    }\n                }\n            }\n        }\n        // Fulfill the contract of appendChild/insertChild even if we did not have to do anything.\n        // Callers must be able to correctly postprocess the returned value as an array.\n        if (isNoop) {\n            return recordsToInsert;\n        }\n        // Remove incoming child nodes from any current parent.\n        for (i = 0; i < recordsToInsert.length; i++) {\n            const\n                newRecord = recordsToInsert[i],\n                oldParent = newRecord.parent;\n            // Check if any descendants of the added node are moves.\n            if (rootStore && !root.isLoading) {\n                newRecord.traverse(r => {\n                    if (r.root === root) {\n                        isMove[r.id] = true;\n                    }\n                });\n            }\n            // If the new record has a parent, remove from that parent.\n            // This operation may be vetoed by listeners.\n            // If it is vetoed, then remove from the newRecords and do not\n            // set the parent property\n            if (oldParent?.removeChild(newRecord, isMove?.[newRecord.id], silent, { isInserting : true, ...options }) === false) {\n                if (!newRecordsCloned) {\n                    recordsToInsert  = recordsToInsert.slice();\n                    newRecordsCloned = true;\n                }\n                recordsToInsert.splice(i--, 1);\n            }\n            else {\n                newRecord.parent = me;\n                // Set parentId directly to data, record.parentId uses a getter to return record.parent.id\n                newRecord.data[parentIdField] = parentId;\n                if (oldParent) {\n                    newRecord.meta.oldParentId = oldParent.id;\n                }\n            }\n        }\n        // Still records to insert after beforeRemove listeners may have vetoed some\n        if (recordsToInsert.length) {\n            if (!Array.isArray(children)) {\n                me.children = [];\n            }\n            if (!Array.isArray(me.orderedChildren)) {\n                me.orderedChildren = [];\n            }\n            // Add to the children\n            const insertAt = me.addToChildren(beforeRecord, recordsToInsert, options);\n            stores.forEach(store => {\n                if (!store.isChained) {\n                    recordsToInsert.forEach(record => {\n                        // Initialize context for newly added records\n                        record.joinStore(store);\n                    });\n                    // Add to store (will also add any child records and trigger events)\n                    store.onNodeAddChild(me, recordsToInsert, insertAt, isMove, silent);\n                    recordsToInsert.forEach((record, i) => {\n                        // If we are in the recursive inclusion of children at construction\n                        // time, or in a store load, that must not be a data modification.\n                        // Otherwise, we have to signal a change\n                        if (record.meta.oldParentId != null && !(me.inProcessChildren || me.isLoading)) {\n                            const\n                                toSet                     = {\n                                    [parentIdField]                   : parentId,\n                                    [me.getDataSource('parentIndex')] : record.parentIndex\n                                },\n                                wasSet                    = {},\n                                { modified, oldParentId } = record.meta,\n                                oldParentIndex            = oldParentIndices[i];\n                            delete record.meta.oldParentId;\n                            if (me.id !== oldParentId) {\n                                wasSet[parentIdField] = {\n                                    value    : parentId,\n                                    oldValue : oldParentId\n                                };\n                            }\n                            if (record.parentIndex !== oldParentIndex) {\n                                wasSet.parentIndex = {\n                                    value    : record.parentIndex,\n                                    oldValue : oldParentIndex\n                                };\n                            }\n                            // Changing back to its original value\n                            if (modified[parentIdField] === me.id) {\n                                Reflect.deleteProperty(modified, parentIdField);\n                            }\n                            // Cache its original value\n                            else if (!(parentIdField in modified)) {\n                                modified[parentIdField] = oldParentId;\n                            }\n                            if (isMove[record.id]) {\n                                const oldParent = store.getById(oldParentId);\n                                // If old parent transitioned to being a leaf node, signal a change event so that the UI\n                                // updates. Handled here and not on remove to get the correct order of events on move\n                                if (oldParent.isLeaf && !silent) {\n                                    oldParent.signalNodeChanged({\n                                        isLeaf : {\n                                            value    : true,\n                                            oldValue : false\n                                        }\n                                    }, [store]);\n                                }\n                            }\n                            record.afterChange(toSet, wasSet);\n                        }\n                    });\n                }\n            });\n        }\n        return recordsToInsert;\n    }\n    /**\n     * Remove a child record. Only direct children of this node can be removed, others are ignored.\n     * @param {Core.data.Model|Core.data.Model[]} childRecords The record(s) to remove.\n     * @param {Boolean} [isMove] Pass `true` if the record is being moved within the same store.\n     * @param {Boolean} [silent] Pass `true` to not trigger events during remove.\n     * @privateparam {Object} [options]\n     * @privateparam {Object} [options.isInserting] `true` is passed when removal is part of record inserting (acted on by\n     * ModelLink)\n     * @returns {Core.data.Model[]} All records (including nested children) removed\n     * @category Parent & children\n     */\n    removeChild(childRecords, isMove = false, silent = false, options = {}) {\n        const\n            me                = this,\n            allRemovedRecords = [],\n            wasLeaf           = me.isLeaf,\n            {\n                children,\n                stores\n            }                 = me;\n        childRecords = ArrayHelper.asArray(childRecords);\n        childRecords = childRecords.filter(r => r.parent === me);\n        if (!silent) {\n            // Allow store listeners to veto the beforeRemove event\n            for (const store of stores) {\n                if (!store.isChained && store.trigger('beforeRemove', {\n                    parent : me, records : childRecords, isMove\n                }) === false) {\n                    return false;\n                }\n            }\n        }\n        const preResult = me.beforeRemoveChild?.(childRecords, isMove);\n        for (const childRecord of childRecords) {\n            const\n                { parentIdField } = childRecord.constructor,\n                { modified }      = childRecord.meta,\n                oldParentId       = childRecord.parent ? childRecord.parent.id : null;\n            // Cache its original value (not if it is a link, that would pollute original)\n            if (!(parentIdField in modified) && !childRecord.isLinked) {\n                modified[parentIdField] = oldParentId;\n            }\n            const index = me.removeFromChildren(childRecord, options);\n            stores.forEach(store => {\n                if (!store.isChained) {\n                    const { isRemoving } = store;\n                    // Raise the store isRemoving flag (it's set in Store#remove() but not when we call record#removeChild() directly)\n                    store.isRemoving = true;\n                    allRemovedRecords.push(...store.onNodeRemoveChild(me, [childRecord], index, { isMove, silent }));\n                    // restore the flag initial state\n                    store.isRemoving = isRemoving;\n                }\n            });\n            // No need to clean up the node parent info and other meta data in case it is \"move\" operation. The info will be updated after \"insert\" operation.\n            if (!isMove) {\n                childRecord.parent = childRecord.parentIndex = childRecord.unfilteredIndex = childRecord.nextSibling = childRecord.previousSibling = null;\n                // Reset parentId in data, record.parentId uses a getter to return record.parent.id\n                childRecord.data[parentIdField] = null;\n            }\n        }\n        // Convert emptied parent into leaf if configured to do so\n        if ((me.unfilteredChildren || children).length === 0 && me.constructor.convertEmptyParentToLeaf.onRemove && !me.isRoot) {\n            me.meta.isLeaf = true;\n        }\n        // If we've transitioned to being a leaf node, signal a change event so that the UI updates\n        // (but not if part of move, will be signaled by insert)\n        if (me.isLeaf !== wasLeaf && !silent && !isMove) {\n            me.signalNodeChanged({\n                isLeaf : {\n                    value    : true,\n                    oldValue : false\n                }\n            });\n        }\n        me.afterRemoveChild?.(childRecords, preResult, isMove);\n        return allRemovedRecords;\n    }\n    clearParentId() {\n        const me = this;\n        Reflect.deleteProperty(me.data, me.parentIdField);\n        Reflect.deleteProperty(me.originalData, me.parentIdField);\n        if (me.meta.modified) {\n            Reflect.deleteProperty(me.meta.modified, me.parentIdField);\n        }\n    }\n    /**\n     * Replaces all child nodes with the new node set.\n     * @param {Core.data.Model|Core.data.Model[]} childRecords The new child record set.\n     * @returns {Core.data.Model[]}\n     * @category Parent & children\n     */\n    replaceChildren(newChildren) {\n        this.clearChildren();\n        this.data[this.constructor.childrenField] = newChildren;\n        this.processChildren();\n        return this.children;\n    }\n    /**\n     * Removes all child nodes from this node.\n     * @param {Boolean} [silent=false] Pass `true` to not fire Store events during the remove.\n     * @returns {Core.data.Model[]}\n     * @category Parent & children\n     */\n    clearChildren(silent = false) {\n        const\n            me         = this,\n            { stores } = me,\n            children   = me.unfilteredChildren || me.children;\n        me.children        = [];\n        me.orderedChildren = [];\n        if (children && children !== true) {\n            stores.forEach(store => {\n                if (!store.isChained) {\n                    // unfiltered:true to unregister children on filtered stores\n                    store.onNodeRemoveChild(me, children, 0, { unfiltered : true, silent });\n                }\n            });\n            // clear unfilteredChildren (must be after the above loop)\n            if (me.unfilteredChildren) {\n                me.unfilteredChildren = [];\n            }\n        }\n    }\n    /**\n     * Removes all records from the rootNode\n     * @private\n     */\n    clear() {\n        const\n            me         = this,\n            { stores } = me,\n            children   = me.children?.slice();\n        // Only allow for root node and if data is present\n        if (!me.isRoot || !children) {\n            return;\n        }\n        for (const store of stores) {\n            if (!store.isChained) {\n                if (store.trigger('beforeRemove', {\n                    parent : me, records : children, isMove : false, removingAll : true\n                }) === false) {\n                    return false;\n                }\n            }\n        }\n        me.children.length = 0;\n        if (me.unfilteredChildren) {\n            me.unfilteredChildren.length = 0;\n        }\n        stores.forEach(store => {\n            children.forEach(child => {\n                if (child.stores.includes(store)) {\n                    // this will drill down the child, unregistering whole branch\n                    child.unjoinStore(store);\n                }\n                child.parent = child.parentIndex = child.nextSibling = child.previousSibling = null;\n            });\n            store.storage.suspendEvents();\n            store.storage.clear();\n            store.storage.resumeEvents();\n            store.added.clear();\n            store.modified.clear();\n            store.trigger('removeAll');\n            store.trigger('change', { action : 'removeall' });\n        });\n    }\n    updateChildrenIndices(children, indexName, silent = false) {\n        let previousSibling = null;\n        for (let i = 0; i < children.length; i++) {\n            const\n                child    = children[i],\n                oldValue = child[indexName];\n            if (indexName === 'parentIndex' || indexName === 'orderedParentIndex') {\n                // Record should not be considered modified by initial assignment of parentIndex\n                if (oldValue === undefined || silent) {\n                    child.setData(indexName, i);\n                }\n                // Check to avoid pointless beforeUpdates from inSet\n                else if (oldValue !== i) {\n                    // Silent set, do not want to trigger events from updated indices\n                    child.set(indexName, i, true);\n                }\n            }\n            else {\n                child[indexName] = i;\n            }\n            if (indexName === 'parentIndex') {\n                child.previousSibling = previousSibling;\n                if (previousSibling) {\n                    previousSibling.nextSibling = child;\n                }\n                // Last child never has a nextSibling\n                if (i === children.length - 1) {\n                    child.nextSibling = null;\n                }\n                previousSibling = child;\n            }\n        }\n    }\n    addToChildren(beforeRecord, newRecords, options = {}) {\n        // children can be sorted and filtered\n        // unfilteredChildren can not be filtered\n        // orderedChildren can not be nor filtered nor sorted. it holds true tree hierarchy\n        const\n            me      = this,\n            configs = [\n                [me.children, 'parentIndex', beforeRecord],\n                [me.unfilteredChildren, 'unfilteredIndex', beforeRecord],\n                [me.orderedChildren, 'orderedParentIndex', options?.orderedBeforeNode ?? beforeRecord]\n            ];\n        for (const config of configs) {\n            const [children, indexName, beforeRecord] = config;\n            if (children) {\n                const index = beforeRecord ? beforeRecord[indexName] : children.length;\n                config.push(index);\n                children.splice(index, 0, ...newRecords);\n                if (!options?.[indexName]?.skip) {\n                    me.updateChildrenIndices(children, indexName);\n                }\n            }\n        }\n        // always return index of the record in the children array\n        return configs[0][3];\n    }\n    removeFromChildren(childRecord, options) {\n        const configs = [\n            [this.children, 'parentIndex'],\n            [this.unfilteredChildren, 'unfilteredIndex'],\n            [this.orderedChildren, 'orderedParentIndex']\n        ];\n        for (const config of configs) {\n            const [children, indexName] = config;\n            if (children) {\n                // parentIndex/orderedParentIndex might be changed when applying a remote changeset leading to\n                // record getting removed from the wrong position in the children array. Therefore, we should\n                // not rely on the index value, instead we query array itself\n                const index = children.indexOf(childRecord);\n                config.push(index);\n                if (index > -1) {\n                    children.splice(index, 1);\n                    if (!options?.[indexName]?.skip) {\n                        this.updateChildrenIndices(children, indexName);\n                    }\n                }\n            }\n        }\n        // always return index of the record in the children array\n        return configs[0][2];\n    }\n    /**\n     * Iterates orderedChildren array to apply sorting order according to `orderedParentIndex`.\n     * Normally sorting is not required because order is maintained on append/insert. But is useful\n     * when pasting number of records to restore their original order.\n     * @param {Boolean} [deep=true] True to dive into children. False to sort own children.\n     * @param {Boolean} [usePreviousOrder=false] Enable to use previous value of `orderedParentIndex`.\n     * @returns {Set} Returns Set of moved nodes which require WBS update\n     * @private\n     */\n    sortOrderedChildren(deep = true, usePreviousOrder = false) {\n        // Collect moved nodes, we need to recalculate WBS on them.\n        const movedNodes = [];\n        if (!this.isLeaf) {\n            this.orderedChildren.sort((a, b) => {\n                if (usePreviousOrder) {\n                    const\n                        aPrevIndex = a.meta.modified.orderedParentIndex ?? a.orderedParentIndex,\n                        bPrevIndex = b.meta.modified.orderedParentIndex ?? b.orderedParentIndex,\n                        result     = aPrevIndex - bPrevIndex;\n                    if (result !== 0) {\n                        movedNodes.push(a);\n                        movedNodes.push(b);\n                    }\n                    return result;\n                }\n                else {\n                    return a.orderedParentIndex - b.orderedParentIndex;\n                }\n            });\n            if (deep) {\n                this.orderedChildren.forEach(child => {\n                    movedNodes.push(...child.sortOrderedChildren(deep, usePreviousOrder));\n                });\n            }\n            this.updateChildrenIndices(this.orderedChildren, 'orderedParentIndex', true);\n        }\n        return new Set(movedNodes);\n    }\n};\n", "import Base from '../../Base.js';\nimport ArrayHelper from '../../helper/ArrayHelper.js';\nimport StringHelper from '../../helper/StringHelper.js';\n/**\n * @module Core/data/mixin/ModelLink\n */\nconst\n    // Properties set on the proxy instead of on the original\n    propertyOverrides = {\n        id              : 1,\n        stores          : 1,\n        parentIndex     : 1,\n        parent          : 1,\n        previousSibling : 1,\n        nextSibling     : 1,\n        unfilteredIndex : 1\n    },\n    proxyConfig = {\n        get(target, prop) {\n            // Proxy record has some additional meta\n            if (prop === 'proxyMeta') {\n                return this.proxyMeta;\n            }\n            // Accessing constructor in functions should lead to original records constructor\n            // (for static fns etc.)\n            if (prop === 'constructor') {\n                return target.constructor;\n            }\n            // Override setData / set to reroute parentIndex updates\n            if (prop === 'setData') {\n                return this.setDataOverride;\n            }\n            if (prop === 'set') {\n                return this.setOverride;\n            }\n            // Special properties not shared with the original record\n            if (propertyOverrides[prop]) {\n                return this.proxyMeta.data[prop];\n            }\n            // Everything else is scoped to the proxy record\n            return Reflect.get(target, prop, this.proxyRecord);\n        },\n        set(target, prop, value) {\n            // Special properties not shared with the original record\n            if (propertyOverrides[prop]) {\n                this.proxyMeta.data[prop] = value;\n            }\n            // Everything else is relayed to the original record\n            else {\n                target[prop] = value;\n            }\n            return true;\n        },\n        // Override setData & set to reroute parentIndex updates\n        setDataOverride(toSet, value) {\n            if (toSet === 'parentIndex') {\n                this.proxyMeta.data.parentIndex = value;\n            }\n            else {\n                this.proxyMeta.originalRecord.setData(toSet, value);\n            }\n        },\n        setOverride(field, value, ...args) {\n            if (field === 'parentIndex') {\n                this.proxyMeta.data.parentIndex = value;\n            }\n            else {\n                this.proxyMeta.originalRecord.set(field, value, ...args);\n            }\n        }\n    };\n/**\n * Mixin that allows creating proxy records linked to an original record. See {@link #function-link} for more\n * information.\n *\n * <div class=\"note\">Note that not all UI features support linked records</div>\n *\n * @mixin\n */\nexport default Target => class ModelLink extends (Target || Base) {\n    static $name = 'ModelLink';\n    /**\n     * Creates a proxy record (using native Proxy) linked to this record (the original). The proxy records shares most\n     * data with the original, except for its `id` (which is always generated), and ordering fields such as\n     * `parentIndex` and `parentId` etc.\n     *\n     * Any change to the proxy record will be reflected on the original, and vice versa. A proxy record is not meant to\n     * be persisted, only the original record should be persisted. Thus, proxy records are not added to stores change\n     * tracking (added, modified and removed records).\n     *\n     * Removing the original record removes all proxies.\n     *\n     * Creating a proxy record allows a Store to seemingly contain the record multiple times, something that is\n     * otherwise not possible. It also allows a record to be used in both a tree store and in a flat store.\n     *\n     * <div class=\"note\">Note that not all UI features support linked records</div>\n     *\n     * @returns {Proxy} Proxy record linked to the original record\n     * @category Misc\n     */\n    link() {\n        // Calling link on a link creates another link of the original record\n        if (this.isLinked) {\n            return this.$original.link();\n        }\n        const\n            me           = this,\n            useConfig    =  {\n                ...proxyConfig,\n                // Data not shared with the original record\n                proxyMeta : {\n                    originalRecord : me,\n                    data           : {\n                        id     : `${me.id}_link_${StringHelper.generateUUID()}`,\n                        stores : []\n                    }\n                }\n            },\n            proxyRecord = new Proxy(me, useConfig);\n        useConfig.proxyRecord = proxyRecord;\n        // Original record keeps tracks of all proxies\n        (me.meta.linkedRecords || (me.meta.linkedRecords = [])).push(proxyRecord);\n        return proxyRecord;\n    }\n    /**\n     * Is this record linked to another record?\n     * @member {Boolean}\n     * @readonly\n     * @category Misc\n     */\n    get isLinked() {\n        return Boolean(this.proxyMeta?.originalRecord);\n    }\n    /**\n     * Are other records linked to this record?\n     * @member {Boolean}\n     * @readonly\n     * @category Misc\n     */\n    get hasLinks() {\n        return Boolean(!this.proxyMeta && this.$links.length);\n    }\n    // Logic to remove a link shared between removing in a flat store and a tree store\n    removeLink(link, records = null, silent = false) {\n        // Removing original, also remove linked records\n        if (link.hasLinks) {\n            for (const linked of link.$links.slice()) {\n                // Flat\n                if (records) {\n                    ArrayHelper.include(records, linked);\n                }\n                // Tree\n                else {\n                    linked.remove(silent);\n                }\n            }\n        }\n        // Removing linked record, remove from originals link tracking\n        else if (link.isLinked) {\n            ArrayHelper.remove(link.$original.$links, link);\n        }\n    }\n    // Overrides beforeRemove in Model, to remove all linked records when original record is removed.\n    beforeRemove(records) {\n        this.removeLink(this, records);\n    }\n    // Overrides removeChild in TreeNode, to remove the original node and all linked nodes when either a linked or\n    // original node is removed.\n    removeChild(childRecords, isMove, silent, options) {\n        if (!options?.isInserting) {\n            childRecords = ArrayHelper.asArray(childRecords);\n            for (const child of childRecords) {\n                this.removeLink(child, null, silent);\n            }\n        }\n        return super.removeChild(childRecords, isMove, silent, options);\n    }\n    // Convenience getter for code keying by id that needs to work with both link and original\n    get $originalId() {\n        return this.$original.id;\n    }\n    // Convenience getter to retrieve linked records\n    get $links() {\n        return this.meta.linkedRecords ?? [];\n    }\n};\n", "import Base from '../Base.js';\nimport StringHelper from '../helper/StringHelper.js';\nimport ObjectHelper from '../helper/ObjectHelper.js';\n/**\n * @module Core/mixin/Factoryable\n */\nconst\n    { defineProperty } = Reflect,\n    ownerSymbol        = Symbol('owner'),\n    typeSplitRe        = /[\\s,]+/;\n/**\n * This mixin is applied to base classes of a type that will be dynamically created by type name aliases.\n *\n * ```javascript\n *  class Layout extends Base.mixin(Factoryable) {\n *      static get factoryable() {\n *          return {\n *              defaultType : 'default'\n *          };\n *      }\n *\n *      static get type() {\n *          return 'default';\n *      }\n *  }\n *\n *  class Fit extends Layout {\n *      static get type() {\n *          return 'fit';\n *      }\n *  }\n * ```\n *\n * Once a family of classes has been defined, instances are created using the `create()` method:\n *\n * ```javascript\n *  const layout = Layout.create(config);\n * ```\n *\n * In the above example, `config` can be a type name (such as \"fit\") or a config object with a `type` property that\n * holds the type name.\n *\n * Factories can also extend other factories. For example, one factory creates objects that are useful across a wide\n * range of consumers, and a second factory creates objects for a more specialized consumer. If that specialized\n * consumer can also consume objects from the first factory, then the second factory can specify this relationship:\n *\n * ```javascript\n *  class General extends Base.mixin(Factoryable) {\n *      ...\n *  }\n *\n *  class Specialized extends Base.mixin(Factoryable) {\n *      static get factoryable() {\n *          return {\n *              extends : General,\n *              ...\n *          };\n *      }\n *  }\n * ```\n *\n * The `extends` factoryable option can be either a class that mixes in `Factoryable` or an array of such classes.\n * @mixin\n * @internal\n */\nexport default Target => class Factoryable extends (Target || Base) {\n    static get $name() {\n        return 'Factoryable';\n    }\n    static get declarable() {\n        return [\n            /**\n             * This property getter returns options that control the factory process. This property getter must be\n             * defined by the class that mixes in `Factoryable` in order to initialize the factory properly.\n             * ```\n             *  static get factoryable() {\n             *      return {\n             *          defaultType : 'default'\n             *      };\n             *  }\n             * ```\n             * If there are no special options to provide, this method can return nothing (`undefined`):\n             * ```\n             *  static get factoryable() {\n             *      // initialize the factory with all default options\n             *  }\n             * ```\n             * @static\n             * @member {Object} factoryable\n             * @property {Boolean} [factoryable.caseless=true] Specify `false` to use case-sensitive type names. The\n             * default is to ignore case.\n             * @property {String} [factoryable.defaultType=null] The default type to create when a config object has\n             * no `typeKey` property.\n             * @property {Function|Function[]} [factoryable.extends] One or more classes that mix in `Factoryable` to\n             * use for resolving type names when a type name is not found in this factory.\n             * @property {String} [factoryable.typeKey='type'] The name of the property in a config object that holds\n             * the type name.\n             * @internal\n             */\n            'factoryable',\n            /**\n             * One or more additional type name aliases for this class. This can be useful for renaming and maintaining\n             * a previous type name.\n             * ```\n             *  class Fit extends Layout {\n             *      static get type() {\n             *          return 'fit';\n             *      }\n             *\n             *      static get alias() {\n             *          return 'fill';  // deprecated type name (now known as 'fit')\n             *      }\n             *  }\n             * ```\n             * @static\n             * @member {String|String[]} alias\n             * @internal\n             */\n            'alias',\n            /**\n             * The (canonical) type name for this class by which instances can be created using the static\n             * {@link #function-create-static create()} method.\n             * @static\n             * @member {String} type\n             */\n            'type'\n        ];\n    }\n    /**\n     * Registers a class (`cls`) associated with the given `type`.\n     * @param {String|String[]} type A string, array of strings or a comma-separated string containing the type names\n     * for the specified `cls` class.\n     * @param {Function} cls The class (constructor function)\n     * @param {Boolean} [replace] Pass `true` to overwrite existing registered types. Otherwise, this method will throw\n     * an exception if the `type` is already registered with this factory.\n     * @internal\n     */\n    static register(type, cls, replace = globalThis.__BRYNTUM_EXAMPLE) {\n        // `replace` default value is set to true while we are run inside a bryntum demo where code editor changes might\n        // lead to same widget class being registered over and over.\n        const\n            { factoryable }        = this.initClass(),\n            { caseless, registry } = factoryable,\n            types                  = StringHelper.split(type, typeSplitRe);  // if type is a string[] it will just be returned\n        for (let lower, name, i = 0; i < types.length; ++i) {\n            name = types[i];\n            lower = caseless ? name.toLowerCase() : name;\n            if (!replace && lower in registry) {\n                throw new Error(`Type \"${name}\" already registered with ${factoryable.class.name} factory`);\n            }\n            // Ensure class being registered is initialized. (initClass returns the class)\n            registry[name] = registry[lower] = cls.initClass();\n        }\n    }\n    /**\n     * Returns `true` if the passed instance is of the passed type or of a derived class.\n     * @param {Object} instance The object to test.\n     * @param {String} type The type to test against\n     */\n    static isA(instance, type) {\n        return this.isType(instance, type, true);\n    }\n    /**\n     * Returns `true` if the passed instance is of the passed type.\n     * @param {Object} instance The object to test.\n     * @param {String} type The type to test against\n     * @param {Boolean} [deep] Pass `true` to return `true` if the class is a subclass of the passed type.\n     */\n    static isType(instance, type, deep) {\n        const\n            { factoryable }        = this,\n            { caseless, registry } = factoryable,\n            typeCls                = registry[caseless ? type.toLowerCase() : type];\n        // If the type to be tested against maps to a class, see if the instance is an instanceof that\n        if (typeCls) {\n            if (deep) {\n                return instance instanceof typeCls;\n            }\n            return instance.constructor === typeCls;\n        }\n        return false;\n    }\n    static setupAlias(cls) {\n        cls.register(cls.alias, cls);\n    }\n    static setupFactoryable(cls, meta) {\n        const superClass = meta.super.class;\n        let { factoryable } = cls;\n        factoryable = {\n            caseless    : true,\n            defaultType : null,\n            extends     : superClass.factoryable ? [superClass] : null,\n            typeKey     : 'type',\n            ...factoryable\n        };\n        factoryable.class = cls;\n        factoryable.registry = Object.create(null);\n        if (factoryable.extends && !Array.isArray(factoryable.extends)) {\n            factoryable.extends = [factoryable.extends];\n        }\n        // Replace the class/static getter with a new one that returns the complete factoryable object:\n        defineProperty(cls, 'factoryable', {\n            get() {\n                return factoryable;\n            }\n        });\n    }\n    static setupType(cls, meta) {\n        const { type } = cls;\n        cls.register(type, cls, meta.replaceType);\n        // Copy the static type property onto the prototype as a readonly property:\n        defineProperty(cls.prototype, 'type', {\n            value : type\n        });\n    }\n    /**\n     * Creates an instance from this factory, given the type name or a config object.\n     * @param {String|Object} config The type name string or config object.\n     * @param {String|Function|Object} [options] Creation options (for details see {@link #function-reconfigure-static}).\n     * @returns {Object}\n     */\n    static create(config, options) {\n        return this.reconfigure(null, config, options);\n    }\n    /**\n     * Reconfigures an optional existing instance based on the provided config and returns the correctly configured\n     * instance. This will be the `existingInstance` if the `config` does not specify a different type.\n     *\n     * If `config` is `null` (or simply falsy), this method will destroy the `existingInstance` (if any) and return\n     * `null`.\n     *\n     * If there is no `existingInstance`, the config must specify a type. That is, it must be a string (the type name)\n     * or an object containing a `type` property, the `defaultType` must be provided or the factory itself must have\n     * a `defaultType` specified (see {@link #property-factoryable-static}).\n     *\n     * When an `existingInstance` is provided and a type is specified, the instance will be reconfigured via `setConfig`\n     * if it is of that type. Otherwise, the `existingInstance` is destroyed (if it is owned by the `options.owner`)\n     * and a new instance of the correct type is created.\n     *\n     * @param {Object} existingInstance The instance to reconfigure. This can be `null`.\n     *\n     * @param {String|Object} config The type name string or config object.\n     *\n     * @param {String|Function|Object} [options] Additional options to control the reconfiguration process. If this\n     * value is a string or a class constructor, it treated as `options.type`. If this value is a class instance, it\n     * is used as the `options.owner`. If this is a function, it is treated as `options.setup`. NOTE: functions declared\n     * using the `function` keyword are equivalent to class constructors. Use an arrow function or a class method to\n     * avoid this when a `setup` function is intended.\n     *\n     * @param {String|Function} [options.type] The default type to use if the `config` object does not specify a type.\n     *\n     * @param {Object} [options.owner] The owner of any created instances. If the `existingInstance` is being replaced,\n     * this value determines if the instance will be destroyed.\n     *\n     * @param {Object} [options.defaults] A config object of default values to use when creating a new instance.\n     *\n     * @param {Function|String} [options.setup] A function or the name of a method (on the `options.owner`) to call\n     * prior to creating a new instance. It is passed the config object that will be used to create the instance. If a\n     * truthy value is returned, that value is passed to the constructor instead of the provided config object.\n     *\n     * @param {Function|String} [options.transform] A function or the name of a method (on the `options.owner`) to call\n     * with the raw config object prior to processing and the value it returns replaces the raw value. This function is\n     * used to transform strings or arrays (for example) into proper config objects.\n     *\n     * @param {Function|String} [options.cleanup] A function or the name of a method (on the `options.owner`) to call\n     * prior to destroying the `existingInstance`. The `existingInstance` is passed as the sole argument.\n     *\n     * @returns {Object} The reconfigured instance (either `existingInstance` or a new instance of the desired type)\n     */\n    static reconfigure(existingInstance, config, options) {\n        const\n            me              = this,\n            { factoryable } = me,\n            { typeKey }     = factoryable;\n        let defaultType = options,\n            cleanup, defaults, mergeType, owner, prepared, setup, t, transform, type;\n        // Pick apart the options and set the vars accordingly\n        if (options && !ObjectHelper.isClass(options)) {  // if (options is not the defaultType)\n            defaultType = null;\n            t = typeof options;\n            if (t === 'function') {\n                setup = options;\n            }\n            else if (t === 'string') {\n                defaultType = options;\n            }\n            else if (ObjectHelper.isObject(options)) {\n                cleanup     = options.cleanup;\n                defaults    = options.defaults;\n                owner       = options.owner;\n                setup       = options.setup;\n                defaultType = options.type;\n                transform   = options.transform;\n            }\n            else {\n                owner = options;\n            }\n        }\n        if (transform) {\n            config = (typeof transform === 'string') ? owner[transform](config) : transform(config);\n        }\n        type = config;\n        // Figure out config... it's either a type (string), a config object or the actual instance.\n        if (typeof type === 'string') {\n            config = {};\n        }\n        else if (config) {\n            if (config === true) {\n                config = {};\n            }\n            if (!ObjectHelper.isObject(config)) {\n                // If we are being given an instance (not a config object), discard or destroy the existingInstance\n                if (owner && config !== existingInstance && existingInstance?.[ownerSymbol] === owner) {\n                    (typeof cleanup === 'string') ? owner[cleanup](existingInstance) : cleanup?.(existingInstance);\n                    existingInstance.destroy();\n                }\n                return config;\n            }\n            type = config[typeKey];\n        }\n        type = type && me.resolveType(type);\n        // We've got our orders... make it so...\n        if (existingInstance) {\n            // We can have a type-less config object when reconfiguring an existing instance, but if we have a type,\n            // the existingInstance must be of that type. If !config that means we are nulling out.\n            if (config && (!type || existingInstance.constructor === type)) {\n                if (typeKey in config) {\n                    config = ObjectHelper.assign({}, config);\n                    delete config[typeKey];  // so \"type\" won't be processed as a config property\n                }\n                existingInstance.setConfig(config);\n                return existingInstance;\n            }\n            if (owner && existingInstance[ownerSymbol] === owner) {\n                (typeof cleanup === 'string') ? owner[cleanup](existingInstance) : cleanup?.(existingInstance);\n                existingInstance.destroy();\n            }\n        }\n        if (config) {\n            if (defaults) {\n                if (!(mergeType = type)) {\n                    if (!(mergeType = defaults[typeKey] || defaultType || factoryable.defaultType)) {\n                        throw new Error(`No default mergeType defined for ${factoryable.class.name} factory`);\n                    }\n                    mergeType = me.resolveType(mergeType);\n                }\n                if (mergeType) {\n                    // Allow the merge fn of each config to perform the task:\n                    config = mergeType.mergeConfigs(defaults, config);\n                }\n            }\n            if (setup) {\n                prepared = (typeof setup === 'string') ? owner[setup](config, type, defaults) : setup(config, type, defaults);\n                if (prepared === null) {\n                    return prepared;\n                }\n                config = prepared || config;\n            }\n            if (!type) {\n                // One more check on config[typeKey] since the setup() function may have added it...\n                if (!(type = config[typeKey] || defaultType || factoryable.defaultType)) {\n                    throw new Error(`No default type defined for ${factoryable.class.name} factory`);\n                }\n                type = me.resolveType(type);\n            }\n            if (defaults && !mergeType) {\n                config = type.mergeConfigs(defaults, config);\n            }\n            if (typeKey in config) {\n                config = ObjectHelper.assign({}, config);\n                delete config[typeKey];  // so \"type\" won't be processed as a config property\n            }\n            config = new type(config);\n            if (owner) {\n                config[ownerSymbol] = owner;\n            }\n        }\n        return config || null;\n    }\n    /**\n     * This method returns the constructor of the class registered for the given type name.\n     * @param {String} type The type name to look up.\n     * @param {Boolean} [optional] Pass `true` to return `null` if `type` is not found instead of throwing an exception.\n     * @returns {Function}\n     */\n    static resolveType(type, optional) {\n        if (typeof type !== 'string') {\n            return type;\n        }\n        const\n            { factoryable } = this,\n            bases           = factoryable.extends;\n        let result = factoryable.registry[factoryable.caseless ? type.toLowerCase() : type],\n            i;\n        for (i = 0; !result && bases && i < bases.length; ++i) {\n            // Pass optional=true to base factory so the error is our own should the lookup fail:\n            result = bases[i].resolveType(type, /* optional = */true);\n        }\n        if (!result && !optional) {\n            throw new Error(`Invalid type name \"${type}\" passed to ${factoryable.class.name} factory`);\n        }\n        return result;\n    }\n};\n", "import Base from '../../Base.js';\nimport Factoryable from '../../mixin/Factoryable.js';\nimport ObjectHelper from '../../helper/ObjectHelper.js';\n/**\n * @module Core/data/field/DataField\n */\nconst { getOwnPropertyDescriptor } = Reflect;\n/**\n * This is the base class for Model field classes. A field class defines how to handle the data for a particular type\n * of field. Many of these behaviors can be configured on individual field instances.\n *\n * @extends Core/Base\n * @datafield\n */\nexport default class DataField extends Base.mixin(Factoryable) {\n    static get $name() {\n        return 'DataField';\n    }\n    static get type() {\n        return 'auto';\n    }\n    static get factoryable() {\n        return {\n            defaultType : 'auto'\n        };\n    }\n    static get prototypeProperties() {\n        return {\n            /**\n             * The name of the field.\n             * @config {String} name\n             */\n            /**\n             * The label text for a form item generated for this field. This is also used to create\n             * a column header for a {@link #config-column} for this field.\n             * @config {String} label\n             */\n            /**\n             * A column config object for a column to display this field in a grid. For simple, atomic\n             * data types, such as `date`, `string`, `boolean`, `number` and `integer`, this is optional\n             * and the appropriate column type can be inferred.\n             *\n             * This also provides default values for column configuration if a configured column definition\n             * for a grid lacks a property.\n             *\n             * For complex fields, such as identifiers which link to other records, a more capable\n             * column type may be specified, for example a `type : `number'` field may be configured\n             * with\n             *\n             * ```javascript\n             * column : 'percent'\n             * ```\n             * or\n             * ```javascript\n             * column : {\n             *     type : 'percent',\n             *     width : 100\n             * }\n             * ```\n             * if it represents a percentage vaue and needs appropriate rendering and editing.\n             * @config {String|Object} column\n             */\n            /**\n             * A config object for a widget to edit this field in a form. For simple, atomic\n             * data types, such as `date`, `string`, `boolean`, `number` and `integer`, this is optional\n             * and the appropriate input widget type can be inferred.\n             *\n             * For complex fields, such as identifiers which link to other records, a more capable\n             * widget may be specified.\n             * @config {String|InputFieldConfig} editor\n             * @private\n             */\n            /**\n             * A function that compares two values and returns a value < 0 if the first is less than the second, or 0\n             * if the values are equal, or a value > 0 if the first is greater than the second.\n             * @config {Function}\n             * @default\n             */\n            compare : null,\n            /**\n             * A function that compares two objects or records using the `compare` function on the properties of each\n             * objects based on the `name` of this field.\n             * @config {Function}\n             * @default\n             * @internal\n             */\n            compareItems : null,\n            /**\n             * The property in a record's data object that contains the field's value.\n             * Defaults to the field's `name`.\n             * @config {String}\n             */\n            dataSource : null,\n            /**\n             * The default value to assign to this field in a record if no value is provided.\n             * @config {*} defaultValue\n             */\n            /**\n             * Setting to `true` will ensure this field is included in any update/insert request payload\n             * when a Store / Project / CrudManager performs a request.\n             * @config {Boolean}\n             * @default\n             */\n            alwaysWrite : false,\n            /**\n             * Setting to `false` indicates that `null` is not a valid value.\n             * @config {Boolean}\n             * @default\n             */\n            nullable : true,\n            /**\n             * The value to return from {@link #function-print} for a `null` or `undefined` value.\n             * @config {String}\n             * @default\n             */\n            nullText : null,\n            /**\n             * The value to replace `null` when the field is not `nullable`.\n             * @config {*}\n             * @default\n             */\n            nullValue : undefined,\n            /**\n             * Set to `false` to exclude this field when saving records to a server.\n             * @config {Boolean}\n             * @default\n             */\n            persist : true,\n            /**\n             * Set to `true` for the field's set accessor to ignore attempts to set this field.\n             * @config {Boolean}\n             * @default\n             */\n            readOnly : false,\n            /**\n             * By default, defined {@link Core.data.Model} fields may be used to create a grid column\n             * suitable for diplaying that field in a grid cell. Some fields may not be suitable for\n             * features which automatically generate columns for view. These fields are created using\n             * `internal : true`. Some examples are the `expanded` and `rowHeight` fields which are used\n             * internally.\n             * @config {Boolean}\n             * @default\n             */\n            internal : false\n        };\n    }\n    /**\n     * The class that first defined this field. Derived classes that override a field do not change this property.\n     * @member {Core.data.Model} definedBy\n     * @private\n     * @readonly\n     */\n    /**\n     * The class that most specifically defined this field. Derived classes that override a field set this property to\n     * themselves.\n     * @member {Core.data.Model} owner\n     * @private\n     * @readonly\n     */\n    // NOTE: Since we create lots of instances, they have no life cycle (they are not destroyed) and are readonly after\n    // creation, this class does not use configurable.\n    construct(config) {\n        const me = this;\n        if (config) {\n            me.name = config.name;  // assign name first for diagnostic reasons\n            Object.assign(me, config);\n        }\n        if (me.compare) {\n            // We wrap in this way to allow compareItems() to be used as an array sorter fn (which gets no \"this\"):\n            me.compareItems = (itemA, itemB) => me.compare(itemA?.[me.name], itemB?.[me.name]);\n        }\n    }\n    /**\n     * This method transforms a data value into the desired form for storage in the record's data object.\n     *\n     * ```javascript\n     * export default class Task extends TaskModel {\n     *    static get fields() {\n     *        return [\n     *            {\n     *                name    : 'status',\n     *                convert : (value, data) => {\n     *                    if (value >= 100) {\n     *                        return 'done';\n     *                    }\n     *                    else if (value > 0) {\n     *                        return 'started';\n     *                    }\n     *                }\n     *            }\n     *        ];\n     *    }\n     * }\n     * ```\n     *\n     * @method convert\n     * @param {*} value The value to convert for storage in a record.\n     * @param {Object} data The raw record data object\n     * @returns {*} The converted value.\n     */\n    /**\n     * This method transforms a data value into the desired form for transmitting to a server.\n     * @method serialize\n     * @param {*} value The value to serialize\n     * @param {Core.data.Model} record The record that contains the value being serialized.\n     * @returns {*} The serialized value.\n     */\n    /**\n     * This optional method is called when setting a data value on a record.\n     * @method set\n     * @param {*} value The value to set\n     * @param {Object} data The records future or current data object to set value to\n     * @param {Core.data.Model} record The record that owns or will own the data object\n     * @internal\n     */\n    /**\n     * This optional method is called when a record using this field is created.\n     * @method init\n     * @param {Core.data.Model} record The record being created\n     * @internal\n     */\n    /**\n     * Create getter and setter functions for the specified field name under the specified key.\n     * @internal\n     */\n    defineAccessor(target, force) {\n        const { name, dataSource } = this;\n        // Bail out if trying to override an explicitly defined accessor\n        if (\n            !force &&\n            name in target &&\n            target.$meta.hierarchy.some(current => getOwnPropertyDescriptor(current.prototype, name)?.enumerable === false)\n        ) {\n            return;\n        }\n        Reflect.defineProperty(target, name, {\n            configurable : true, // To allow removing it later\n            enumerable   : true,\n            // no arrow functions here, need `this` to change to instance\n            get : this.complexMapping\n                ? function() {\n                    return this.complexGet(name, dataSource);\n                }\n                : function() {\n                    // Inlined copy of Model#flatGet, to save a fn call since this is hit very often\n                    // When changes are batched, they get stored by field name, not dataSource\n                    if (this.batching && name in this.meta.batchChanges) {\n                        return this.meta.batchChanges[name];\n                    }\n                    return dataSource in this.data ? this.data[dataSource] : this.data[name];\n                },\n            // no arrow functions here, need `this` to change to instance\n            set(value) {\n                // Since the accessor is defined on a base class, we dip into the fields map for the actual\n                // calling class to get the correct field definition\n                const field = this.$meta.fields.map[name];\n                // Only set if field is read/write. Privately, we use setData to set its value\n                if (!(field && field.readOnly)) {\n                    this.set(name, value);\n                }\n            }\n        });\n    }\n    /**\n     * Compares two values for this field and returns `true` if they are equal, and `false` if not.\n     * @param {*} first The first value to compare for equality.\n     * @param {*} second The second value to compare for equality.\n     * @returns {Boolean} `true` if `first` and `second` are equal.\n     */\n    isEqual(first, second) {\n        return ObjectHelper.isEqual(first, second);\n    }\n    /**\n     * Returns the given field value as a `String`. If `value` is `null` or `undefined`, the value specified by\n     * {@link #config-nullText} is returned.\n     * @param {*} value The value to convert to a string.\n     * @returns {String}\n     */\n    print(value) {\n        return (value == null) ? this.nullText : this.printValue(value);\n    }\n    /**\n     * Returns the given, non-null field value as a `String`.\n     * @param {*} value The value to convert to a string (will not be `null` or `undefined`).\n     * @returns {String}\n     * @protected\n     */\n    printValue(value) {\n        return String(value);\n    }\n}\nDataField._$name = 'DataField';", "import DataField from './DataField.js';\n/**\n * @module Core/data/field/ArrayDataField\n */\n/**\n * This field class handles fields that hold an array.\n *\n * ```javascript\n * class Task extends Model {\n *     static get fields() {\n *         return [\n *             'name',\n *             // Array field\n *             { name : 'todo', type : 'array' }\n *         ];\n *     }\n * }\n * ```\n *\n * A record can be constructed like this:\n *\n * ```javascript\n * const task = new Task({\n *     name : 'Task 1',\n *     todo : [\n *         { text : 'Something', done : false },\n *         { text : 'Some other thing', done : true }\n *     ]\n * };\n * ```\n *\n * Or by populating a store:\n *\n * ```javascript\n * const store = new Store({\n *     modelClass : Task,\n *     data : [\n *         {\n *             name : 'Task 1',\n *             todo : [\n *                 { text : 'Something', done : false },\n *                 { text : 'Some other thing', done : true }\n *             ]\n *         },\n *         ...\n *     ]\n * });\n * ```\n *\n * For the field to count as modified, the whole array has to be replaced:\n *\n * ```javascript\n * // This won't be detected as a modification\n * task.todo[0].done = true;\n * // task.isModified === false\n *\n * // But this will\n * const todo = task.todo.slice(); // Create a new array with same contents\n * todo[0].done = true;\n * task.todo = todo;\n * // task.isModified === true\n * ```\n *\n * @extends Core/data/field/DataField\n * @classtype array\n * @datafield\n */\nexport default class ArrayDataField extends DataField {\n    static get $name() {\n        return 'ArrayDataField';\n    }\n    static get type() {\n        return 'array';\n    }\n    isEqual(a, b) {\n        return a === b;\n    }\n}\nArrayDataField.initClass();\nArrayDataField._$name = 'ArrayDataField';", "import DataField from './DataField.js';\n/**\n * @module Core/data/field/BooleanDataField\n */\n/**\n * This field class handles field of type `Boolean`.\n *\n * ```javascript\n * class Person extends Model {\n *     static get fields() {\n *         return [\n *             'name',\n *             { name : 'active', type : 'boolean' }\n *         ];\n *     }\n * }\n * ```\n *\n * When a field is declared as a `'boolean'`, non-null values are promoted to `Boolean` type. This is seldom required,\n * but can be useful if a field value is received as a number but should be treated as a boolean.\n *\n * @extends Core/data/field/DataField\n * @classtype boolean\n * @datafield\n */\nexport default class BooleanDataField extends DataField {\n    static get $name() {\n        return 'BooleanDataField';\n    }\n    static get type() {\n        return 'boolean';\n    }\n    static get alias() {\n        return 'bool';\n    }\n    static get prototypeProperties() {\n        return {\n            /**\n             * The value to replace `null` when the field is not `nullable`.\n             * @config {Boolean}\n             * @default\n             */\n            nullValue : false\n        };\n    }\n    isEqual(first, second) {\n        if (first == null && second == null) {\n            return true;\n        }\n        return super.isEqual(first, second);\n    }\n    convert(value) {\n        if (value == null) {\n            return this.nullable ? value : this.nullValue;\n        }\n        // string 'false' will convert to false, other strings to true\n        if (value.toLowerCase?.() === 'false') {\n            return false;\n        }\n        return Boolean(value);\n    }\n}\nBooleanDataField.initClass();\nBooleanDataField._$name = 'BooleanDataField';", "import DataField from './DataField.js';\nimport DateHelper from '../../helper/DateHelper.js';\n/**\n * @module Core/data/field/DateDataField\n */\n/**\n * This field class handles field of type `Date`.\n *\n * ```javascript\n * class Person extends Model {\n *     static get fields() {\n *         return [\n *             'name',\n *             { name : 'birthday', type : 'date', format : 'YYYY-MM-DD' },\n *             { name : 'age', readOnly : true }\n *         ];\n *     }\n * }\n * ```\n *\n * When a field is declared as a `'date'`, non-null values are promoted to `Date` type. This is frequently needed due\n * to how date types are serialized to JSON strings.\n *\n * Date fields can have a special `defaultValue` of `'now'` which will convert to the current date/time.\n *\n * @extends Core/data/field/DataField\n * @classtype date\n * @datafield\n */\nexport default class DateDataField extends DataField {\n    static get $name() {\n        return 'DateDataField';\n    }\n    static get type() {\n        return 'date';\n    }\n    static get prototypeProperties() {\n        return {\n            /**\n             * The format of the date field.\n             *\n             * See {@link Core.helper.DateHelper DateHelper} for details.\n             * @config {String} format\n             * @default DateHelper.defaultFormat\n             */\n            format : null\n        };\n    }\n    convert(value) {\n        if (value == null) {\n            if (!this.nullable) {\n                value = this.nullValue;\n            }\n        }\n        else if (value === 'now') {\n            value = new Date();\n        }\n        else if (!(value instanceof Date)) {\n            // Use configured format, if null/undefined use DateHelpers default format\n            value = DateHelper.parse(value, this.format || DateHelper.defaultParseFormat);\n            // if parsing has failed, we would like to return `undefined` to indicate the \"absence\" of data\n            // instead of `null` (presence of \"empty\" data)\n            if (!value || isNaN(value)) {\n                value = undefined;\n            }\n        }\n        return value;\n    }\n    serialize(value) {\n        if (value instanceof Date) {\n            // Use configured format or DateHelpers default one\n            value = DateHelper.format(value, this.format || DateHelper.defaultFormat);\n        }\n        return value;\n    }\n    printValue(value) {\n        return DateHelper.format(value, this.format || DateHelper.defaultFormat);\n    }\n}\nDateDataField.initClass();\nDateDataField._$name = 'DateDataField';", "import DataField from './DataField.js';\n/**\n * @module Core/data/field/StringDataField\n */\n/**\n * This field class handles field of type `String`.\n *\n * ```javascript\n * class Person extends Model {\n *     static get fields() {\n *         return [\n *             { name : 'name', type : 'string' }\n *         ];\n *     }\n * }\n * ```\n *\n * When a field is declared as a `'string'`, non-null values are promoted to `String` type. This is seldom required, but\n * can be useful if a field value is received as a number but should be treated as a string.\n *\n * @extends Core/data/field/DataField\n * @classtype string\n * @datafield\n */\nexport default class StringDataField extends DataField {\n    static get $name() {\n        return 'StringDataField';\n    }\n    static get type() {\n        return 'string';\n    }\n    static get prototypeProperties() {\n        return {\n            /**\n             * The value to replace `null` when the field is not `nullable`.\n             * @config {String}\n             * @default\n             */\n            nullValue : ''\n        };\n    }\n    convert(value) {\n        return (value == null) ? (this.nullable ? value : this.nullValue) : String(value);\n    }\n}\nStringDataField.initClass();\nStringDataField._$name = 'StringDataField';", "import DateHelper from '../../helper/DateHelper.js';\nimport StringDataField from './StringDataField.js';\n/**\n * @module Core/data/field/DurationUnitDataField\n */\n/**\n * This field class handles field of type `durationunit` (string type). See {@link Core.data.Duration} for more information.\n *\n * ```javascript\n * class Event extends Model {\n *     static get fields() {\n *         return [\n *             { name : 'durationUnit', type : 'durationunit' }\n *         ];\n *     }\n * }\n * ```\n *\n * @extends Core/data/field/StringDataField\n * @classtype durationunit\n * @datafield\n */\nexport default class DurationUnitDataField extends StringDataField {\n    static get $name() {\n        return 'DurationUnitDataField';\n    }\n    static get type() {\n        return 'durationunit';\n    }\n    isEqual(first, second) {\n        return DateHelper.compareUnits(first, second) === 0;\n    }\n}\nDurationUnitDataField.initClass();\nDurationUnitDataField._$name = 'DurationUnitDataField';", "import DataField from './DataField.js';\n/**\n * @module Core/data/field/IntegerDataField\n */\n/**\n * This field class handles field of type `Number` with no decimal digits.\n *\n * ```javascript\n * class Person extends Model {\n *     static get fields() {\n *         return [\n *             'name',\n *             { name : 'age', type : 'int' }\n *         ];\n *     }\n * }\n * ```\n *\n * When a field is declared as a `'int'`, non-null values are promoted to `Number` type and decimals are removed using\n * a specified `rounding`. This field type can be useful if a field value is received as a string but should be stored\n * as a number or has a fractional component that must be rounded or truncated.\n *\n * @extends Core/data/field/DataField\n * @classtype integer\n * @datafield\n */\nexport default class IntegerDataField extends DataField {\n    static get $name() {\n        return 'IntegerDataField';\n    }\n    static get type() {\n        return 'integer';\n    }\n    static get alias() {\n        return 'int';\n    }\n    static get prototypeProperties() {\n        return {\n            /**\n             * The value to replace `null` when the field is not `nullable`.\n             * @config {Number}\n             * @default\n             */\n            nullValue : 0,\n            /**\n             * The `Math` method to use to ensure fractional component is removed.\n             * @config {'round'|'floor'|'ceil'}\n             * @default\n             */\n            rounding : 'round'\n        };\n    }\n    convert(value) {\n        return (value == null) ? (this.nullable ? value : this.nullValue) : Math[this.rounding](Number(value));\n    }\n}\nIntegerDataField.initClass();\nIntegerDataField._$name = 'IntegerDataField';", "import DataField from './DataField.js';\n/**\n * @module Core/data/field/ModelDataField\n */\n/**\n * This field class handles fields that hold other records.\n *\n * ```javascript\n * class Person extends Model {\n *     static get fields() {\n *         return [\n *             'name',\n *             { name : 'address', type : 'model' }\n *         ];\n *     }\n * }\n * ```\n *\n * @internal\n * @extends Core/data/field/DataField\n * @classtype model\n * @datafield\n */\nexport default class ModelDataField extends DataField {\n    static get $name() {\n        return 'ModelDataField';\n    }\n    static get type() {\n        return 'model';\n    }\n    static get prototypeProperties() {\n        return {\n            complexMapping : true\n        };\n    }\n    isEqual(first, second) {\n        // Check for semantic equality. An instance of the same Model class of the same ID is equal.\n        return (first && second) && (second instanceof first.constructor) && second.id == first.id;\n    }\n}\nModelDataField.initClass();\nModelDataField._$name = 'ModelDataField';", "import DataField from './DataField.js';\n/**\n * @module Core/data/field/NumberDataField\n */\n/**\n * This field class handles field of type `Number`.\n *\n * ```javascript\n * class Person extends Model {\n *     static get fields() {\n *         return [\n *             'name',\n *             { name : 'age', type : 'number' }\n *         ];\n *     }\n * }\n * ```\n *\n * When a field is declared as a `'number'`, non-null values are promoted to `Number` type. This is seldom required, but\n * can be useful if a field value is received as a string but should be treated as a number.\n *\n * @extends Core/data/field/DataField\n * @classtype number\n * @datafield\n */\nexport default class NumberDataField extends DataField {\n    static get $name() {\n        return 'NumberDataField';\n    }\n    static get type() {\n        return 'number';\n    }\n    static get alias() {\n        return 'float';\n    }\n    static get prototypeProperties() {\n        return {\n            /**\n             * The value to replace `null` when the field is not `nullable`.\n             * @config {Number}\n             * @default\n             */\n            nullValue : 0,\n            /**\n             * The numeric precision of this field. Values are rounded to the specified number of digits. If `null`,\n             * the default, no rounding is performed.\n             * @config {Number}\n             * @default\n             */\n            precision : null\n        };\n    }\n    isEqual(first, second) {\n        // NaN !== NaN in JS which results having a number field w/ such value always dirty\n        // Not sure having two NaN-s not equal each other makes any sense here to us ..so handle it\n        return (isNaN(Number(first)) && isNaN(Number(second))) || super.isEqual(first, second);\n    }\n    convert(value) {\n        if (value == null) {\n            return this.nullable ? value : this.nullValue;\n        }\n        value = Number(value);\n        // Returning undefined to let set know that this is a invalid value\n        if (isNaN(value)) {\n            return;\n        }\n        let scale = this.precision;\n        if (scale) {\n            scale = 10 ** scale;\n            value = Math.round(value * scale) / scale;\n        }\n        else if (scale === 0) {\n            value = Math.round(value);\n        }\n        return value;\n    }\n}\nNumberDataField.initClass();\nNumberDataField._$name = 'NumberDataField';", "import DataField from './DataField.js';\n/**\n * @module Core/data/field/ObjectDataField\n */\n/**\n * This field class handles fields that hold an object.\n *\n * ```javascript\n * class Person extends Model {\n *     static get fields() {\n *         return [\n *             'name',\n *             { name : 'address', type : 'object' }\n *         ];\n *     }\n * }\n * ```\n *\n * For the field to count as modified, the whole object has to be replaced:\n *\n * ```javascript\n * person.address = { ...address };\n * ```\n *\n * @extends Core/data/field/DataField\n * @classtype object\n * @datafield\n */\nexport default class ObjectDataField extends DataField {\n    static get $name() {\n        return 'ObjectDataField';\n    }\n    static get type() {\n        return 'object';\n    }\n    static get prototypeProperties() {\n        return {\n            complexMapping : true\n        };\n    }\n}\nObjectDataField.initClass();\nObjectDataField._$name = 'ObjectDataField';", "import DataField from './DataField.js';\nimport ObjectHelper from '../../helper/ObjectHelper.js';\nimport StringHelper from '../../helper/StringHelper.js';\n/**\n * @module Core/data/field/StoreDataField\n */\n/**\n * This field class handles fields that accepts an array that is then converted to a store.\n *\n * ```javascript\n * class Task extends Model {\n *     static fields = [\n *         'name',\n *         // Store field\n *         { name : 'subTasks', type : 'store', storeClass : Store }\n *     ];\n * }\n * ```\n *\n * A record can be constructed like this:\n *\n * ```javascript\n * const task = new Task({\n *     name : 'Task 1',\n *     subTasks : [\n *         { text : 'Something', done : false },\n *         { text : 'Some other thing', done : true }\n *     ]\n * };\n * ```\n *\n * Or by populating a store:\n *\n * ```javascript\n * const store = new Store({\n *     modelClass : Task,\n *     data : [\n *         {\n *             name : 'Task 1',\n *             subTasks : [\n *                 { text : 'Something', done : false },\n *                 { text : 'Some other thing', done : true }\n *             ]\n *         },\n *         ...\n *     ]\n * });\n * ```\n *\n * Whenever the store or its records are manipulated, the field will be marked as modified:\n *\n * ```javascript\n * // These will all be detected as modifications\n * task.subTasks.first.done = true;\n * task.subTasks.last.remove();\n * task.subTasks.add({ text : 'New task', done : false });\n * ```\n *\n * @extends Core/data/field/DataField\n * @classtype store\n * @datafield\n */\nexport default class StoreDataField extends DataField {\n    static $name = 'StoreDataField';\n    static type = 'store';\n    /**\n     * Store class to use when creating the store.\n     *\n     * ```javascript\n     * class TodoStore extends Store {\n     *     ...\n     * }\n     *\n     * const task = new Store({\n     *     static fields = [\n     *         { type : 'store', name: 'todoItems', storeClass : TodoStore }\n     *     ]\n     * });\n     * ```\n     *\n     * @config {Class} storeClass\n     * @typings {typeof Store}\n     */\n    /**\n     * Model class to use for the store (can also be configured as usual on the store class, this config is for\n     * convenience).\n     *\n     * ```javascript\n     * class TodoItem extends Model {\n     *   ...\n     * }\n     *\n     * const task = new Store({\n     *     static fields = [\n     *         { type : 'store', name: 'todoItems', storeClass : Store, modelClass : TodoItem }\n     *     ]\n     * });\n     * ```\n     *\n     * @config {Class} modelClass\n     * @typings {typeof Model}\n     */\n    // Initializer, called when creating a record. Sets up the store and populates it with any initial data\n    init(data, record) {\n        const\n            me        = this,\n            storeName = `${me.name}Store`,\n            config    = { skipStack : true }; // Optimization when used from sources, don't create a stack in Base\n        // Optionally apply modelClass, for convenient configuration\n        if (me.modelClass) {\n            config.modelClass = me.modelClass;\n        }\n        // Call optional initializer (initSubTasksStore for subTasks field) on the record, letting it manipulate the\n        // config before creating a store\n        record[`init${StringHelper.capitalize(storeName)}`]?.(config);\n        if (!config.storeClass && !me.storeClass) {\n            throw new Error(`Field '${me.name}' with type 'store' must have a storeClass configured`);\n        }\n        // Store has to be assigned on the record, field is shared\n        const store = record.meta[storeName] = new (config.storeClass || me.storeClass)(config);\n        if (me.complexMapping) {\n            ObjectHelper.setPath(data, me.dataSource, store);\n        }\n        else {\n            data[me.dataSource] = store;\n        }\n        // Don't warn about generated ids, responsibility lies elsewhere\n        store.verifyNoGeneratedIds = false;\n        // Keep track of if id should be included when serializing or not\n        store.usesId = !store.count || !store.every(record => record.hasGeneratedId);\n        // Cache value\n        store.$currentValue = me.getValue(store);\n        // Track changes to the store, applying them to the record and caching current value to be used when\n        // serializing and in comparisons (required, otherwise we would be comparing to already updated store\n        store.ion({\n            change : ({ action }) => {\n                const value = me.getValue(store);\n                if (!store.$isSettingStoreFieldData) {\n                    const oldPreserveCurrentDataset = store.$preserveCurrentDataset;\n                    store.$preserveCurrentDataset = me.subStore && (\n                        action === 'update' || action === 'remove' || action === 'add'\n                    );\n                    record.set(me.name, value);\n                    store.$preserveCurrentDataset = oldPreserveCurrentDataset;\n                }\n                // cache the field current value\n                store.$currentValue = value;\n            }\n        });\n    }\n    // Called when setting a new value to the field on a record\n    set(value, data, record) {\n        const\n            me        = this,\n            storeName = `${me.name}Store`,\n            { [storeName] : store } = record.meta;\n        // Lazy store might not be created yet, gets created on first access. Returning false keeps the value for later\n        // if called during init\n        if (!store) {\n            // Missing store suggests value was not yet initialized and future value resides\n            // in a special meta property. In which case we need to update it there\n            record.meta.initableValues.set(me, value);\n            return false;\n        }\n        // Prevent changes from leading to recursive calls\n        if (store.$isSettingStoreFieldData) {\n            return;\n        }\n        store.$isSettingStoreFieldData = true;\n        // Call optional processing fn (processSubTasksStoreData for subTasks field) on the record, letting it\n        // manipulate the data before creating records\n        value = record[`process${StringHelper.capitalize(storeName)}Data`]?.(value, record) ?? value;\n        // Apply incoming array to store\n        if (!store.$preserveCurrentDataset) {\n            store.data = value;\n        }\n        store.$isSettingStoreFieldData = false;\n        // Keep track of if id should be included when serializing or not\n        store.usesId = !store.count || !store.every(record => record.hasGeneratedId);\n    }\n    serialize(value, record) {\n        return record.meta[`${this.name}Store`].$currentValue;\n    }\n    // Extract persistable values, optionally including id depending on if ids are used\n    getValue(store) {\n        return store.allRecords.map(r => {\n            const data = r.persistableData;\n            if (!store.usesId) {\n                delete data.id;\n            }\n            return data;\n        });\n    }\n    isEqual(a, b) {\n        if (a?.isStore) {\n            a = a.$currentValue;\n        }\n        if (b?.isStore) {\n            b = b.$currentValue;\n        }\n        return ObjectHelper.isDeeplyEqual(a, b);\n    }\n    // Cloned value to be able to restore it later using STM\n    getOldValue(record) {\n        const store = record.meta[`${this.name}Store`];\n        return store ? ObjectHelper.clone(store.$currentValue) : null;\n    }\n}\nStoreDataField.initClass();\nStoreDataField._$name = 'StoreDataField';", "import Base from '../Base.js';\nimport ArrayHelper from '../helper/ArrayHelper.js';\nimport ObjectHelper from '../helper/ObjectHelper.js';\nimport StringHelper from '../helper/StringHelper.js';\nimport ModelStm from './stm/mixin/ModelStm.js';\nimport TreeNode from './mixin/TreeNode.js';\nimport ModelLink from './mixin/ModelLink.js';\nimport DataField from './field/DataField.js';\n// The built-in model field types:\nimport './field/ArrayDataField.js';\nimport './field/BooleanDataField.js';\nimport './field/DateDataField.js';\nimport './field/DurationUnitDataField.js';\nimport './field/IntegerDataField.js';\nimport './field/ModelDataField.js';\nimport './field/NumberDataField.js';\nimport './field/ObjectDataField.js';\nimport './field/StoreDataField.js';\nimport './field/StringDataField.js';\n/**\n * @module Core/data/Model\n */\n/**\n * Defines the properties of a relation between two stores.\n *\n * Used as the values of a Model's {@link Core.data.Model#property-relations-static} definition.\n *\n * This snippet will define a relation called `team`, allowing access to the foreign record via `player.team`. It will\n * point to a record in the `teamStore` (must be available as `record.firstStore.teamStore)` with an id matching the\n * players `teamId` field. The team record in turn, will have a field called `players` which is a collection of all\n * players in the team.\n *\n * ```javascript\n * class Player extends Model {\n *     static relations = {\n *         team : {\n *             foreignKey            : 'teamId',\n *             foreignStore          : 'teamStore',\n *             relatedCollectionName : 'players'\n *         }\n *     }\n * }\n * ```\n *\n * See {@link Core.data.Model#property-relations-static} for a more extensive example.\n *\n * @typedef {Object} RelationConfig\n * @property {String} foreignKey Name of a field on this model which holds the foreign key value.\n * @property {String|Core.data.Store} foreignStore Name of a property on the model's first store, which holds the\n * foreign store. Or the actual store instance\n * @property {String} [relatedCollectionName] Optionally, name of a property that will be added to the records of the\n * foreign store, which will hold all records from the model's store related to it.\n */\nconst\n    { defineProperty } = Reflect,\n    { hasOwn }         = ObjectHelper,\n    _undefined         = undefined,\n    internalProps      = {\n        children : 1,\n        data     : 1,\n        meta     : 1\n    },\n    abbreviationFields = [\n        'name',\n        'title',\n        'text',\n        'label',\n        'description'\n    ],\n    fieldDataTypes = {\n        boolean : 1,\n        number  : 1,\n        date    : 1,\n        object  : 1\n    },\n    fieldsOrder = {\n        parentId   : 1,\n        $PhantomId : 2,\n        id         : 3\n    };\n/**\n * A Model is the definition of a record which can be added to (or loaded into) a {@link Core.data.Store}. It defines\n * which fields the data contains and exposes an interface to access and manipulate that data. The Model data is\n * populated through simple a JSON object.\n *\n * By default, a Model stores a shallow copy of its raw json, but for records in stores configured with\n * `useRawData: true` it stores the supplied json object as is.\n *\n * ## Defining fields\n *\n * A Model can either define its fields explicitly (see {@link #property-fields-static}) or have them created from its\n * data (see {@link #property-autoExposeFields-static}). This snippet shows a model with 4 fields defined explicitly:\n *\n * ```javascript\n * class Person extends Model {\n *     static fields = [\n *         'name',\n *         { name : 'birthday', type : 'date', format : 'YYYY-MM-DD' },\n *         { name : 'shoeSize', type : 'number', defaultValue : 11 },\n *         { name : 'age', readOnly : true }\n *     ]\n * }\n * ```\n *\n * The first field (name) has an unspecified type, which means the field's value is held as received with no conversion\n * applied. The second field (birthday) is defined to be a date, which will make the model parse any supplied value into\n * an actual date. The parsing is handled by {@link Core/helper/DateHelper#function-parse-static DateHelper.parse()}\n * using the specified `format`, or if no format is specified using\n * {@link Core/helper/DateHelper#property-defaultFormat-static DateHelper.defaultFormat}.\n *\n * The set of standard field types is as follows:\n *\n *  - {@link Core.data.field.ArrayDataField `array`}\n *  - {@link Core.data.field.BooleanDataField `boolean`}\n *  - {@link Core.data.field.DateDataField `date`}\n *  - {@link Core.data.field.IntegerDataField `integer`}\n *  - {@link Core.data.field.ObjectDataField `object`}\n *  - {@link Core.data.field.NumberDataField `number`}\n *  - {@link Core.data.field.StoreDataField `store`}\n *  - {@link Core.data.field.StringDataField `string`}\n *\n * You can also set a `defaultValue` that will be used if the data does not contain a value for the field:\n *\n * ```javascript\n * { name : 'shoeSize', type : 'number', defaultValue : 11 }\n * ```\n *\n * To create a record from a Model, supply data to its constructor:\n *\n * ```javascript\n * let guy = new Person({\n *     id       : 1,\n *     name     : 'Dude',\n *     birthday : '2014-09-01'\n * });\n * ```\n *\n * If no id is specified, a temporary id based on a UUID will be generated. This id is not meant to be serialized, it\n * should instead be replaced by the backend with a proper id from the underlying database (or similar).\n *\n * Please avoid using reserved names for your fields (such as `parent`, `children` and others that are used as Model\n * properties) to avoid possible data collisions and bugs.\n *\n * ## Nested fields\n *\n * Model supports mapping fields to nested data structures using dot `.` separated paths as the `dataSource`. For\n * example given this JSON object:\n *\n * ```json\n * {\n *     name : 'Borje Salming',\n *     team : {\n *         name   : 'Toronto Maple Leafs',\n *         league : 'NHL'\n *     }\n * }\n * ```\n *\n * A field can be mapped to the nested team name by using `dataSource : 'team.name'`:\n *\n * ```javascript\n * class Player extends Model {\n *     static get fields() {\n *         return [\n *             'name',\n *             // Field mapped to a property on a nested object\n *             { name : 'teamName', dataSource : 'team.name' }\n *         ]\n *     }\n * }\n * ```\n *\n * Usage:\n *\n * ```javascript\n * const player = new Player(json);\n *\n * console.log(player.teamName); // > Toronto Maple Leafs\n * player.teamName = 'Minnesota Wild'; // Updates name property of the team object\n * ```\n *\n * ### Updating a nested object\n *\n * Note that directly altering a property of the nested object won't register as an update of the record, record does not\n * track changes deeply. If nested fields (as described above) is not enough for your usecase you can map a field\n * directly to the nested object and then assign a shallow copy of it to the record on changes:\n *\n * ```javascript\n * class Player extends Model {\n *     static get fields() {\n *         return [\n *             ...,\n *             // Field mapped directly to the nested object\n *             { name : 'team', type : 'object' }\n *         ]\n *     }\n * }\n *\n * // \"External object\" to nest\n * const team = {\n *     name   : 'Brynas',\n *     league : 'SHL'\n * }\n *\n * const player = new Player({\n *     name : 'Borje Salming',\n *     team\n * });\n *\n * // This will not flag player as dirty\n * team.league = 'CHL';\n *\n * // Instead you have to reassign the mapped field\n * player.team = { ...player.team };\n * ```\n *\n * ## Arrays of atomic types\n *\n * When a field holds an array of atomic types (strings, numbers etc.) we recommend using the\n * {@link Core/data/field/ArrayDataField `array`} type for the field:\n *\n * ```javascript\n * class GroceryList extends Model {\n *     static get fields() {\n *         return [\n *             'name',\n *             { name : 'items', type : 'array' }\n *         ];\n *     }\n * }\n *\n * const list = new GroceryList({\n *    name  : 'My list',\n *    items : ['Milk', 'Bread', 'Eggs']\n * });\n * ```\n *\n * <div class=\"note\">Modifying items in the array will not flag the field as updated, since the array itself does not\n * change. For it to register a change, you must assign it a new array (could be a copy of the old one). For more info,\n * see {@link Core/data/field/ArrayDataField}</div>\n *\n * ## Arrays of objects\n *\n * When a field holds an array of objects, we recommend using the {@link Core/data/field/StoreDataField `store`} type\n * for the field:\n *\n * ```javascript\n * class GroceryList extends Model {\n *     static fields = [\n *         'name',\n *         { name : 'items', type : 'store', storeClass : Store }\n *     ]\n * }\n *\n * const list = new GroceryList({\n *    name  : 'My list',\n *    items : [\n *        { name : 'Milk', quantity : 1 },\n *        { name : 'Bread', quantity : 2 },\n *        { name : 'Eggs', quantity : 12 }\n *    ]\n * });\n * ```\n *\n * The `items` field on the `list` above will be a {@link Core.data.Store} instance (because we passed that as\n * `storeClass`), which can be used to manipulate the items in the list. Doing so will flag the `list` as modified. For\n * more info, see {@link Core.data.field.StoreDataField}.\n *\n * ## Persisting fields\n *\n * By default, all fields are persisted. If you don't want particular field to get saved to the server, configure it\n * with `persist: false`. In this case field will not be among changes which are sent by\n * {@link Core/data/AjaxStore#function-commit store.commit()}, otherwise its behavior doesn't change.\n *\n * ```javascript\n * class Person extends Model {\n *     static get fields() {\n *         return [\n *             'name',\n *             { name : 'age', persist : false }\n *         ];\n *     }\n * }\n * ```\n *\n * ## The `id` field\n * By default Model expects its id field to be stored in a data source named \"id\". The data source for the id field can\n * be customized by setting {@link Core/data/field/DataField#config-dataSource} on the id field object configuration.\n *\n * ```javascript\n * class Person extends Model {\n *     static fields = [\n *         { name : 'id', dataSource: 'personId'},\n *         'name',\n *         { name : 'age', persist : false },\n *         { name : 'birthday', type : 'date' }\n *      ];\n * }\n *\n * let girl = new Person({\n *     personId : 2,\n *     name     : 'Lady',\n *     birthday : '2011-11-05'\n * });\n * ```\n *\n * Also, it is possible to change the id field data source by setting {@link #property-idField-static}:\n *\n * ```javascript\n * class Person extends Model {\n *     // Id drawn from 'id' property by default; use custom field here\n *     static idField = 'personId';\n *\n *     static fields = [\n *         'name',\n *         { name : 'age', persist : false },\n *         { name : 'birthday', type : 'date' }\n *     ];\n * }\n * ```\n *\n * ## Getting and setting values\n *\n * Fields are used to generate getters and setters on the records. Use them to access or modify values (they are\n * reactive):\n *\n * ```javascript\n * console.log(guy.name);\n * girl.birthday = new Date(2011,10,6);\n * ```\n *\n * NOTE: In an application with multiple different models you should subclass Model, since the prototype is decorated\n * with getters and setters. Otherwise, you might get unforeseen collisions.\n *\n * ## Field data mapping\n *\n * By default, fields are mapped to data using their name. If you for example have a \"name\" field it expects data to be\n * `{ name: 'Some name' }`. If you need to map it to some other property, specify `dataSource` in your field definition:\n *\n * ```javascript\n * class Person extends Model {\n *     static get fields {\n *         return [\n *             { name : 'name', dataSource : 'TheName' }\n *         ];\n *     }\n * }\n *\n * // This is now OK:\n * let dude = new Person({ TheName : 'Manfred' });\n * console.log(dude.name); // --> Manfred\n * ```\n *\n * ## Field inheritance\n *\n * Fields declared in a derived model class are added to those from its superclass. If a field declared by a derived\n * class has also been declared by its super class, the field properties of the super class are merged with those of\n * the derived class.\n *\n * For example:\n * ```javascript\n *  class Person extends Model {\n *      static get fields() {\n *          return [\n *              'name',\n *              { name : 'birthday', type : 'date', format : 'YYYY-MM-DD' }\n *          ];\n *      }\n *  }\n *\n *  class User extends Person {\n *      static get fields() {\n *          return [\n *              { name : 'birthday', dataSource : 'dob' },\n *              { name : 'lastLogin', type : 'date' }\n *          ];\n *      }\n *  }\n * ```\n *\n * In the above, the `Person` model declares the `birthday` field as a `date` with a specified `format`. The `User`\n * model extends `Person` and also declares the `birthday` field. This redeclared field only specifies `dataSource`, so\n * all the other fields are preserved from `Person`. The `User` model also adds a `lastLogin` field.\n *\n * The `User` from above could have been declared like so to achieve the same `fields`:\n *\n * ```javascript\n *  class User extends Model {\n *      static get fields() {\n *          return [\n *              'name',\n *              { name : 'birthday', type : 'date', format : 'YYYY-MM-DD', dataSource : 'dob' },\n *              { name : 'lastLogin', type : 'date' }\n *          ];\n *      }\n *  }\n * ```\n *\n * ## Override default values\n *\n * In case you need to define default value for a specific field, or override an existing default value, you can\n * define a new or re-define an existing field definition in {@link #property-fields-static} static getter:\n *\n * ```javascript\n * class Person extends Model {\n *     static get fields() {\n *         return [\n *             { name : 'username', defaultValue : 'New person' },\n *             { name : 'birthdate', type : 'date' }\n *         ];\n *     }\n * }\n *\n * class Bot extends Person {\n *     static get fields() {\n *         return [\n *             { name : 'username', defaultValue : 'Bot' } // default value of 'username' field is overridden\n *         ];\n *     }\n * }\n * ```\n *\n * ## Read-only records\n *\n * Model has a default field called {@link #field-readOnly}, which is used to make the record read-only in the UI while\n * still allowing programmatic changes to it. Setting it to `true` will prevent it from being edited by the built-in\n * editing features (cell editing in Grid, event draging in Scheduler, task editor in Gantt etc.). Please note that it\n * is not made read-only on the data level, the record can still be manipulated by application code.\n *\n * ```javascript\n * // Prevent record from being manipulated by the user\n * record.readOnly = true;\n *\n * // Programmatic manipulation is still allowed\n * record.remove();\n * ```\n *\n * ## Tree API\n *\n * This class mixes in the {@link Core/data/mixin/TreeNode TreeNode} mixin which provides an API for tree related\n * functionality (only relevant if your store is configured to be a {@link Core/data/Store#config-tree tree}).\n *\n * @mixes Core/data/mixin/ModelLink\n * @mixes Core/data/mixin/TreeNode\n * @mixes Core/data/stm/mixin/ModelStm\n */\nexport default class Model extends Base.mixin(ModelStm, TreeNode, ModelLink) {\n    static get $name() {\n        return 'Model';\n    }\n    static get declarable() {\n        return [\n            /**\n             * Array of defined fields for this model class. Subclasses add new fields by implementing this static\n             * getter:\n             *\n             * ```javascript\n             * // Model defining two fields\n             * class Person extends Model {\n             *     static get fields() {\n             *         return [\n             *             { name : 'username', defaultValue : 'New person' },\n             *             { name : 'birthdate', type : 'date' }\n             *         ];\n             *     }\n             * }\n             *\n             * // Subclass overriding one of the fields\n             * class Bot extends Person {\n             *     static get fields() {\n             *         return [\n             *             // Default value of 'username' field is overridden, any other setting from the parents\n             *             // definition is preserved\n             *             { name : 'username', defaultValue : 'Bot' }\n             *         ];\n             *     }\n             * }\n             * ```\n             *\n             * Fields in a subclass are merged with those from the parent class, making it easy to override mappings,\n             * formats etc.\n             *\n             * @member {Array<String|ModelFieldConfig|Core.data.field.DataField>} fields\n             * @readonly\n             * @static\n             * @category Fields\n             */\n            'fields'\n        ];\n    }\n    static get fields() {\n        return [\n            // The index of this item in its parent (respects filtering)\n            {\n                name     : 'parentIndex',\n                type     : 'number',\n                persist  : false,\n                internal : true\n            },\n            // The index of this item in its parent ghost (non-sortable) children array\n            {\n                name     : 'orderedParentIndex',\n                type     : 'number',\n                persist  : false,\n                internal : true\n            },\n            /**\n             * Flag the record as read-only on the UI level, preventing the end user from manipulating it using editing\n             * features such as cell editing and event dragging.\n             *\n             * Does not prevent altering the record programmatically, it can still be manipulated by application code.\n             *\n             * For more info, see the \"Read-only records\" section above.\n             *\n             * @field {Boolean} readOnly\n             * @category Common\n             */\n            {\n                name : 'readOnly',\n                type : 'boolean'\n            },\n            /**\n             * Start expanded or not (only valid for tree data)\n             * @readonly\n             * @field {Boolean} expanded\n             * @category Tree\n             */\n            {\n                name     : 'expanded',\n                internal : true\n            }\n        ];\n    }\n    /**\n     * Override in a subclass of Model to define relations to records in other stores.\n     *\n     * Always defined on the \"one\" side, not the \"many\" side.\n     *\n     * Expects an object where keys are relation names and values are {@link #typedef-RelationConfig relation configs}.\n     *\n     * This snippet will define a relation called `team`, allowing access to the foreign record via `player.team`. It\n     * will point to a record in the `teamStore` (must be available as `record.firstStore.teamStore)` with an id\n     * matching the players `teamId` field. The team record in turn, will have a field called `players` which is a\n     * collection of all players in the team.\n     *\n     * ```javascript\n     * class Player extends Model {\n     *     static relations = {\n     *         // Define a relation between a player and a team\n     *         team : {\n     *             foreignKey            : 'teamId',\n     *             foreignStore          : 'teamStore',\n     *             relatedCollectionName : 'players'\n     *         }\n     *     }\n     * }\n     *\n     * const teamStore = new Store({\n     *     data : [\n     *         { id : 1, name : 'Brynas' },\n     *         { id : 2, name : 'Leksand' }\n     *     ]\n     * });\n     *\n     * const playerStore = new Store({\n     *     modelClass : Player,\n     *     // Matches foreignStore, allowing records of playerStore to find the related store\n     *     teamStore,\n     *     data       : [\n     *         // teamId is specified as foreignKey, will be used to match the team\n     *         { id : 1, name : 'Nicklas Backstrom', teamId : 1  },\n     *         { id : 2, name : 'Elias Lindholm',   teamId : 1  },\n     *         { id : 3, name : 'Filip Forsberg',  teamId : 2  }\n     *     ],\n     * }\n     *\n     * playerStore.first.team.name // > Brynas\n     * playerStore.last.team.name // > Leksand\n     * teamStore.first.players // > [nick, elias]\n     * teamStore.last.players // > [filip]\n     * ```\n     *\n     * @member {Object<String,RelationConfig>} relations\n     * @static\n     */\n    static relations = null;\n    /**\n     * Template static getter which is supposed to be overridden to define default field values for the Model class.\n     * Overrides `defaultValue` config specified by the {@link #property-fields-static} getter.\n     * Returns a named object where key is a field name and value is a default value for the field.\n     *\n     * NOTE: This is a legacy way of defining default values, we recommend using {@link #property-fields-static} moving\n     * forward.\n     *\n     * ```javascript\n     * class Person extends Model {\n     *     static get fields() {\n     *         return [\n     *             { name : 'username', defaultValue : 'New person' }\n     *         ];\n     *     }\n     * }\n     *\n     * class Bot extends Person {\n     *     static get defaults() {\n     *         return {\n     *             username : 'Bot' // default value of 'username' field is overridden\n     *         };\n     *     }\n     * }\n     * ```\n     *\n     * @member {Object} defaults\n     * @static\n     * @category Fields\n     */\n    /**\n     * The data source for the id field which provides the ID of instances of this Model.\n     * @property {String}\n     * @category Fields\n     */\n    static set idField(idField) {\n        this._assignedIdField = true;\n        this._idField = idField;\n    }\n    static get idField() {\n        return this._idField;\n    }\n    /**\n     * The name of the data field which holds children of this Model when used in a tree structure\n     * ```javascript\n     * MyModel.childrenField = 'kids';\n     * const parent = new MyModel({\n     *     name : 'Dad',\n     *     kids : [\n     *         { name : 'Daughter' },\n     *         { name : 'Son' }\n     *     ]\n     * });\n     * ```\n     * @property {String}\n     * @category Fields\n     */\n    static set childrenField(childrenField) {\n        this._childrenField = childrenField;\n    }\n    static get childrenField() {\n        if (!this._childrenField) {\n            const dataField = this.fieldMap.children;\n            this._childrenField = dataField?.dataSource || 'children';\n        }\n        return this._childrenField;\n    }\n    /**\n     * Returns index path to this node. This is the index of each node in the node path\n     * starting from the topmost parent. (only relevant when its part of a tree store).\n     * @returns {Number[]} The index of each node in the path from the topmost parent to this node.\n     * @category Parent & children\n     * @private\n     */\n    get indexPath() {\n        const indices = [];\n        let node = this,\n            depth = node.childLevel;\n        for (node = this; node && !node.isRoot; node = node.parent) {\n            indices[depth--] = node.parentIndex + 1;\n        }\n        return indices;\n    }\n    /**\n     * Unique identifier for the record. Might be mapped to another dataSource using idField, but always exposed as\n     * record.id. Will get a generated value if none is specified in records data.\n     *\n     * <div class=\"note\">Note that generated ids are meant to be temporary (phantom ids), they should not be serialized\n     * but instead replaced by the backend on commit</div>\n     *\n     * @field {String|Number} id\n     * @category Common\n     */\n    //region Init\n    /**\n     * Constructs a new record from the supplied data.\n     * @param {Object} [data] Raw data\n     * @param {Core.data.Store} [store] Data store\n     * @param {Object} [meta] Meta data\n     * @privateparam {Boolean} [skipExpose] Skip exposing properties from data\n     * @privateparam {Boolean} [forceUseRaw] Force using raw data, used by copy to not clone data twice\n     * @function constructor\n     * @category Lifecycle\n     */\n    construct(data = {}, store = null, meta = null, skipExpose = false, forceUseRaw = false, rawData = false) {\n        const\n            me     = this,\n            stores = ArrayHelper.asArray(store) ?? [],\n            { constructor, fieldMap } = me;\n        // null passed to Base construct inhibits config processing.\n        let configs = null;\n        store = stores[0];\n        me.meta = {\n            modified : {},\n            ...constructor.metaConfig,\n            ...meta\n        };\n        // Should apply configs?\n        if (constructor.applyConfigs) {\n            // Extract from data and combine with defaultConfigs\n            for (const key in me.getDefaultConfiguration()) {\n                if (!configs) {  // if (first config)\n                    configs = {};\n                    if (!me.useRawData || !me.useRawData.enabled) {\n                        // Shallow copy of data to not mutate incoming object\n                        data = { ...data };\n                    }\n                }\n                // Loop through configs excluding fields\n                if (key in data) {\n                    // Let defaults override any config supplied with an `undefined` value\n                    if (data[key] !== undefined) {\n                        // Use as config\n                        configs[key] = data[key];\n                    }\n                    // Always remove config from data\n                    delete data[key];\n                }\n            }\n        }\n        super.construct(configs);\n        // make getters/setters for fields, needs to be done before processing data to make sure defaults are available\n        if (!skipExpose) {\n            constructor.exposeProperties(data, rawData);\n        }\n        // It's only valid to do this once, on construction of the first instance\n        if (!hasOwn(constructor, 'idFieldProcessed')) {\n            // idField can be overridden from meta, or from the store if we have not had an idField set programmatically\n            // and if we have not had an id field defined above the base Model class level.\n            let overriddenIdField = me.meta.idField;\n            if (!overriddenIdField) {\n                // Might have been set to Model after construction but before load\n                if (constructor._assignedIdField) {\n                    overriddenIdField = constructor.idField;\n                }\n                else if (store) {\n                    overriddenIdField = store.idField;\n                }\n            }\n            // If it's overridden to something different than we already have, replace the 'id' field in the fieldMap\n            if (overriddenIdField && overriddenIdField !== fieldMap.id.dataSource) {\n                constructor.addField({\n                    name       : 'id',\n                    dataSource : overriddenIdField,\n                    internal   : true\n                });\n            }\n            // Model.idField should always reflect the idField mapping\n            constructor._idField = fieldMap.id.dataSource;\n            constructor.idFieldProcessed = true;\n        }\n        // assign internalId, unique among all records\n        me._internalId = Model._internalIdCounter++;\n        // relation code expects store to be available for relation lookup, but actual join done below\n        me.stores = [];\n        me.unjoinedStores = [];\n        // Superclass constructors may set this in their own way before this is called.\n        if (!me.originalData) {\n            me.originalData = data;\n        }\n        me.data = constructor.processData(data, false, store, me, forceUseRaw);\n        // Assign any intiable value last, so that it can reference this record if needed\n        me.meta.initableValues?.size && me.assignInitables();\n        // Consider undefined and null as missing id and generate one\n        if (me.id == null) {\n            // Assign a generated id silently, record should not be considered modified\n            me.setData('id', me.generateId(store));\n        }\n        if (me.data[constructor.childrenField]) {\n            me.processChildren(stores);\n        }\n        me.generation = 0;\n    }\n    /**\n     * Set this property to `true` when adding a record on a conditional basis, that is, it is yet\n     * to be confirmed as an addition.\n     *\n     * When this is set, the {@link #property-isPersistable} value of the record is **false**, and upon being\n     * added to a Store it will *not* be eligible to be synced with the server as an added record.\n     *\n     * Subsequently, *clearing* this property means this record will become persistable and eligible\n     * for syncing as an added record.\n     * @property {Boolean}\n     * @category Editing\n     */\n    set isCreating(isCreating) {\n        const me = this;\n        // A no-change must not have any effect.\n        if (Boolean(me.meta.isCreating) !== isCreating) {\n            // This flag contributes to the evaluation of isPersistable.\n            // A record is not persistable if it isCreating.\n            me.meta.isCreating = isCreating;\n            // Owning Stores may have things to do at this lifecycle point\n            me.stores.forEach(s => {\n                s.onIsCreatingToggle(me, isCreating);\n            });\n        }\n    }\n    get isCreating() {\n        return Boolean(this.meta.isCreating);\n    }\n    /**\n     * Compares this Model instance to the passed instance. If they are of the same type, and all fields\n     * (except, obviously, `id`) are equal, this returns `true`.\n     * @param {Core.data.Model} other The record to compare this record with.\n     * @returns {Boolean} `true` if the other is of the same class and has all fields equal.\n     * @category Misc\n     */\n    equals(other) {\n        if (other instanceof this.constructor) {\n            for (let fields = this.$meta.fields.defs, i = 0, { length } = fields; i < length; i++) {\n                const\n                    field    = fields[i],\n                    { name } = field;\n                if (name !== 'id' && !field.isEqual(this[name], other[name])) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        return false;\n    }\n    get subclass() {\n        return new this.constructor(Object.setPrototypeOf({\n            id : _undefined\n        }, this.data), this.stores[0], null, true);\n    }\n    /**\n     * Processes raw data, converting values and setting defaults.\n     * @private\n     * @param {Object} data Raw data\n     * @param {Boolean} [ignoreDefaults] Ignore setting default values, used when updating\n     * @returns {Object} Processed data\n     * @category Fields\n     */\n    static processData(data, ignoreDefaults = false, store, record, forceUseRaw) {\n        const\n            { fieldMap, defaultValues } = this,\n            { useRawData = { enabled : false } } = store || { },\n            // Store configured with useRawData uses the supplied data object, polluting it. When not configured with\n            // useRawData it instead makes a copy (intentionally deep, in case data has a prototype chain or contains\n            // arrays or objects)\n            processed = (forceUseRaw || useRawData.enabled) ? data : ObjectHelper.clone(data);\n        let fieldName;\n        ignoreDefaults = ignoreDefaults || useRawData.disableDefaultValue || forceUseRaw;\n        if (!ignoreDefaults) {\n            for (fieldName in defaultValues) {\n                if (processed[fieldName] === _undefined) {\n                    let defaultValue = defaultValues[fieldName];\n                    // Avoid sharing arrays across instances\n                    if (Array.isArray(defaultValue)) {\n                        defaultValue = defaultValue.slice();\n                    }\n                    processed[fieldName] = defaultValue;\n                }\n            }\n        }\n        if (!useRawData.disableTypeConversion && !forceUseRaw) {\n            // Convert field types which need converting\n            for (fieldName in fieldMap) {\n                const\n                    field                = fieldMap[fieldName],\n                    { name, dataSource } = field,\n                    // Value might have been supplied either using mapped dataSource (when loading JSON etc. for example\n                    // event.myStartDate) or as field name (from internal code, for example event.startDate). If [name]\n                    // exists but not [dataSource], use it.\n                    hasSource            = dataSource !== name,\n                    complex              = field.complexMapping,\n                    sourceExists         = hasSource && (complex\n                        ? ObjectHelper.pathExists(data, dataSource)\n                        : dataSource in data),\n                    useNameForValue      = (name in data) && (!hasSource || !sourceExists),\n                    convert              = !useRawData.disableTypeConversion && field.convert;\n                // Only action field definitions which have a convert function or remap data\n                if (useNameForValue || convert) {\n                    // When ignoringDefaults, do not convert unspecified values\n                    if (!ignoreDefaults || useNameForValue || sourceExists) {\n                        const\n                            value     = useNameForValue\n                                ? processed[name]\n                                : complex\n                                    ? ObjectHelper.getPath(processed, dataSource)\n                                    : processed[dataSource],\n                            converted = convert ? field.convert(value, data, record) : value;\n                        if (complex) {\n                            ObjectHelper.setPath(processed, dataSource, converted);\n                        }\n                        else {\n                            processed[dataSource] = converted;\n                        }\n                        // Remove [startDate] from internal data holder, only keeping [myStartDate]\n                        if (hasSource) {\n                            delete processed[name];\n                        }\n                    }\n                }\n            }\n        }\n        // Fields that needs initializing\n        this.$meta.fields.initable.length && this.initInitables(record, processed);\n        return processed;\n    }\n    static setupClass(meta) {\n        super.setupClass(meta);\n        if (!meta.fields) {\n            // Normally setupFields will only run when a Model defines a fields getter, but we want to always run it:\n            this.setupFields(this, meta);\n        }\n    }\n    static setupFields(cls, meta) {\n        const\n            classFields = hasOwn(cls, 'fields') && cls.fields,\n            base        = meta.super.fields,\n            fieldsInfo  = meta.fields = {\n                defs : base?.defs.slice() ?? [],\n                // Set to true when an instance's data object is run through exposeProperties\n                exposedData : false,\n                // These objects are all keyed by field name:\n                defaults : base ? { ...base.defaults } : {}, // value=field.defaultValue\n                exposed  : Object.create(base?.exposed  ?? null),   // value=true if we've done defineProperty\n                ordinals : Object.create(base?.ordinals ?? null),   // value=index in the defs array\n                map      : Object.create(base?.map      ?? null),   // value=definition object\n                sources  : Object.create(base?.sources  ?? null)    // value=source definition object\n            };\n        // We use Object.create(null) as the base for these maps because some models declare \"constructor\" as a field\n        // NOTE: instead of chaining the defaults, we copy them so the defaults object can be used with Object.assign\n        // in other contexts (since it does not copy inherited properties from the prototype chain)\n        // Clone the superclass's defaults, and override that with our own defaults.\n        // As we find fields with a defaultValue, more defaults may be added\n        if (hasOwn(cls, 'defaults')) {\n            Object.assign(fieldsInfo.defaults, cls.defaults);\n        }\n        // Hook up our field maps with the class hierarchy's fieldMaps.\n        // We need to be able to look up field definitions by the name, or by the dataSource property name\n        // If the idField is overridden at this level, create a new field\n        if (hasOwn(cls, 'idField')) {\n            cls.addField({\n                name       : 'id',\n                dataSource : cls.idField,\n                internal   : true\n            });\n            fieldsInfo.exposed[cls.idField] = true;\n        }\n        // Process fields defined in the class definition\n        if (classFields?.length) {\n            classFields.map(cls.addField, cls);\n        }\n        // Collect fields that need to be initialized (StoreDataField for example)\n        fieldsInfo.initable = fieldsInfo.defs.filter(field => field.init);\n        cls.exposeRelations();\n    }\n    static get defaultValues() {\n        return this.$meta.fields.defaults;\n    }\n    /**\n     * An array containing all the _defined_ fields for this Model class. This will include all superclass's\n     * defined fields.\n     * @property {Core.data.field.DataField[]}\n     * @static\n     * @readonly\n     * @category Fields\n     */\n    static get allFields() {\n        return this.$meta.fields.defs;\n    }\n    /**\n     * Same as {@link #property-allFields-static}.\n     * @property {Core.data.field.DataField[]}\n     * @readonly\n     * @category Fields\n     */\n    get allFields() {\n        return this.$meta.fields.defs;\n    }\n    /**\n     * An object containing all the _defined_ fields for this Model class. This will include all superclass's\n     * defined fields through its prototype chain. So be aware that `Object.keys` and `Object.entries` will only\n     * access this class's defined fields.\n     * @property {Object<String,Core.data.field.DataField>}\n     * @static\n     * @readonly\n     * @category Fields\n     */\n    static get fieldMap() {\n        return this.$meta.fields.map;\n    }\n    /**\n     * Same as {@link #property-fieldMap-static}.\n     * @property {Object<String,Core.data.field.DataField>}\n     * @readonly\n     * @category Fields\n     */\n    get fieldMap() {\n        return this.$meta.fields.map;\n    }\n    static get fieldDataSourceMap() {\n        return this.$meta.fields.sources;\n    }\n    /**\n     * Makes getters and setters for fields (from definitions and data). Called once when class is defined and once when\n     * data is loaded first time.\n     * @internal\n     * @param {Object} [data] Raw data\n     * @param {Boolean} [raw=true] True if data is raw (contains data sources), False if data contains field names\n     * @category Fields\n     */\n    static exposeProperties(data, raw = true) {\n        const\n            me               = this,\n            fieldsInfo       = me.$meta.fields,\n            // exposeProperties method is called from two different places: from the model constructor which receives\n            // field names, and from store loadData method, which handles raw data. When loading data to store we need\n            // to use names as specified in the dataSource. And when calling a model constructor we need to use field\n            // names\n            fieldMapProperty = raw ? 'exposed' : 'map';\n        // Process the raw data properties and expose them as fields unless the property name\n        // has already been used by the \"dataSource\" of a defined field.\n        if (data && me.autoExposeFields && !fieldsInfo.exposedData) {\n            let dataProperty, fieldDef, type;\n            for (dataProperty in data) {\n                // We need to skip children field because it can be `true` and that would create boolean field.\n                // See https://github.com/bryntum/support/issues/2705\n                if (!fieldsInfo[fieldMapProperty][dataProperty] && dataProperty !== me.childrenField) {\n                    type = ObjectHelper.typeOf(data[dataProperty]);\n                    // Create a field definition in our fieldMap with the flag that it's from data\n                    fieldDef = {\n                        name       : dataProperty,\n                        dataSource : dataProperty,\n                        fromData   : true\n                    };\n                    if (fieldDataTypes[type]) {\n                        fieldDef.type = type;\n                    }\n                    me.addField(fieldDef);\n                }\n            }\n            fieldsInfo.exposedData = true;\n        }\n        me.exposeRelations();\n    }\n    /**\n     * Add a field definition in addition to those predefined in `fields`.\n     * @param {String|ModelFieldConfig} fieldDef A field name or definition\n     * @category Fields\n     */\n    static addField(fieldDef) {\n        if (fieldDef == null) {\n            return;\n        }\n        if (typeof fieldDef === 'string') {\n            fieldDef = {\n                name : fieldDef\n            };\n        }\n        const\n            me                = this.initClass(),\n            fieldsInfo        = me.$meta.fields,\n            { ordinals }      = fieldsInfo,\n            propertiesExposed = fieldsInfo.exposed,\n            { name }          = fieldDef,\n            existing          = fieldsInfo.map[name],\n            dataSource        = fieldDef.dataSource || (fieldDef.dataSource = name);\n        let field, key;\n        if (!existing || (fieldDef.type && fieldDef.type !== existing.type)) {\n            field = DataField.create(fieldDef);\n            field.definedBy = existing ? existing.definedBy : me;\n            field.ordinal = existing ? existing.ordinal : (ordinals[name] = fieldsInfo.defs.length);\n        }\n        else {\n            field = Object.create(existing);\n            for (key in fieldDef) {\n                if (key !== 'type') {\n                    field[key] = fieldDef[key];\n                }\n            }\n        }\n        field.owner = me;\n        fieldsInfo.defs[field.ordinal] = field;\n        fieldsInfo.map[name] = field;\n        if (!fieldsInfo.sources[dataSource]) {\n            fieldsInfo.sources[dataSource] = field;\n        }\n        // With complex mapping avoid exposing object as model field\n        if (dataSource.includes('.')) {\n            field.complexMapping = true;\n        }\n        if (field.complexMapping) {  // model fields have this set on their prototype...\n            propertiesExposed[dataSource.split('.')[0]] = true;\n        }\n        else {\n            // When iterating through the raw data, if autoExposeFields is set\n            // We do not need to create properties for raw property names we've processed here\n            propertiesExposed[dataSource] = true;\n        }\n        // Maintain an object of defaultValues for fields.\n        if ('defaultValue' in field) {\n            fieldsInfo.defaults[dataSource] = field.defaultValue;\n        }\n        // Create a property on this Model's prototype, named for the defined field name\n        // which reads the correct property out of the raw data object.\n        if (!internalProps[name]) {\n            // Either creates a new accessor or redefines an existing\n            field.defineAccessor(me.prototype);\n        }\n        me._nonPersistableFields = null;\n        me._alwaysWriteFields = null;\n        return field;\n    }\n    /**\n     * Remove a field definition by name.\n     * @param {String} fieldName Field name\n     * @category Fields\n     */\n    static removeField(fieldName) {\n        const\n            me = this.initClass(),\n            fieldsInfo = me.$meta.fields,\n            definition = fieldsInfo.map[fieldName],\n            { ordinals } = fieldsInfo,\n            index = ordinals[fieldName];\n        if (definition) {\n            fieldsInfo.defs.splice(index, 1);\n            delete ordinals[fieldName];\n            delete fieldsInfo.defaults[fieldName];\n            delete fieldsInfo.exposed[fieldName];\n            delete fieldsInfo.map[fieldName];\n            delete fieldsInfo.sources[definition.dataSource];\n            for (const name in ordinals) {\n                if (ordinals[name] > index) {\n                    --ordinals[name];\n                }\n            }\n            // Note: if field was exposed by superclass, this won't do anything...\n            delete me.prototype[fieldName];\n        }\n    }\n    /**\n     * Makes getters and setters for related records. Populates a Model#relation array with the relations, to allow it\n     * to be modified later when assigning stores.\n     * @internal\n     * @category Relations\n     */\n    static exposeRelations() {\n        const me = this;\n        if (hasOwn(me, 'exposedRelations')) {\n            return;\n        }\n        if (me.relations) {\n            me.exposedRelations = [];\n            for (const relationName in me.relations) {\n                const relation = me.relations[relationName];\n                relation.relationName = relationName;\n                me.exposedRelations.push(relation);\n                // getter and setter for related object\n                if (!Reflect.ownKeys(me.prototype).includes(relationName)) {\n                    defineProperty(me.prototype, relationName, {\n                        enumerable : true,\n                        get        : function() {\n                            // noinspection JSPotentiallyInvalidUsageOfClassThis\n                            return this.getForeign(relationName);\n                        },\n                        set : function(value) {\n                            // noinspection JSPotentiallyInvalidUsageOfClassThis\n                            this.setForeign(relationName, value, relation);\n                        }\n                    });\n                }\n            }\n        }\n    }\n    //endregion\n    //region Initable fields\n    // Initializes any fields using a data type that has an init method, and caches the value to assign to that field to\n    // be able to assign it after all others. That allows the initter to reference the records other data if needed\n    // (baselines use that to reference the task to get default values)\n    static initInitables(record, processedData) {\n        const laterValues = record.meta.initableValues = new Map();\n        // Initialize any initializable fields (only StoreDataField currently)\n        for (const field of this.$meta.fields.initable) {\n            // Set data (if any) later, in case it needs to reference this record\n            const value = ObjectHelper.getPath(processedData, field.dataSource);\n            value !== undefined && laterValues.set(field, value);\n            // Init field if not lazy, if lazy app is responsible for doing it\n            !field.lazy && field.init(processedData, record);\n        }\n    }\n    // Assigns values to the fields that were initialized earlier (see initInitables above)\n    assignInitables() {\n        const { initableValues } = this.meta;\n        for (const [field, value] of initableValues) {\n            if (field.set(value, this.data, this) !== false) {\n                initableValues.delete(field);\n            }\n        }\n    }\n    //endregion\n    //region Fields\n    /**\n     * Flag checked from Store when loading data that determines if fields found in first records should be exposed in\n     * same way as predefined fields.\n     *\n     * <div class=\"note\">Note that we for all but the most basic use cases recommend explicitly defining the fields.\n     * Having them auto exposed can lead to unexpected behavior, if the first record is not complete (fields missing,\n     * null etc).\n     * </div>\n     *\n     * @property {Boolean}\n     * @category Fields\n     */\n    static get autoExposeFields() {\n        return true;\n    }\n    /**\n     * This function forces correct field order. Correct order is parentId before id. If we process id field before\n     * parentId, idMap won't be updated and changing parent node will lead to duplicated records in storage\n     * @param {String} a\n     * @param {String} b\n     * @returns {number}\n     * @private\n     */\n    static fieldSorter(a, b) {\n        return (fieldsOrder[a] || 100) - (fieldsOrder[b] || 100);\n    }\n    /**\n     * Convenience getter to get field definitions from class.\n     * @property {Core.data.field.DataField[]}\n     * @readonly\n     * @category Fields\n     */\n    get fields() {\n        return this.$meta.fields.defs;\n    }\n    /**\n     * Convenience function to get the definition for a field from class.\n     * @param {String} fieldName Field name\n     * @returns {Core.data.field.DataField}\n     * @category Fields\n     */\n    getFieldDefinition(fieldName) {\n        return this.$meta.fields.map[fieldName];\n    }\n    getFieldDefinitionFromDataSource(dataSource) {\n        return this.$meta.fields.sources[dataSource];\n    }\n    /**\n     * Get the names of all fields in data.\n     * @property {String[]}\n     * @readonly\n     * @category Fields\n     */\n    get fieldNames() {\n        return Object.keys(this.data);\n    }\n    /**\n     * Get the definition for a field by name. Caches results.\n     * @param {String} fieldName Field name\n     * @returns {Core.data.field.DataField} Field definition or null if none found\n     * @category Fields\n     */\n    static getFieldDefinition(fieldName) {\n        return this.$meta.fields.map[fieldName];\n    }\n    /**\n     * Returns dataSource configuration for a given field name\n     * @param {String} fieldName\n     * @returns {String} Field `dataSource` mapping\n     * @internal\n     */\n    static getFieldDataSource(fieldName) {\n        return this.getFieldDefinition(fieldName).dataSource;\n    }\n    /**\n     * Get the data source used by specified field. Returns the fieldName if no data source specified.\n     * @param {String} fieldName Field name\n     * @returns {String}\n     * @category Fields\n     */\n    getDataSource(fieldName) {\n        const def = this.constructor.getFieldDefinition(fieldName);\n        return def?.dataSource || def?.name;\n    }\n    /**\n     * Processes input to a field, converting to expected type.\n     * @param {String} fieldName Field name\n     * @param {*} value Value to process\n     * @returns {*} Converted value\n     * @category Fields\n     */\n    static processField(fieldName, value, record) {\n        const field = this.fieldMap[fieldName];\n        return field?.convert ? field.convert(value, this.data, record) : value;\n    }\n    //endregion\n    //region Relations\n    /**\n     * Initializes model relations. Called from store when adding a record.\n     * @private\n     * @category Relations\n     */\n    initRelations() {\n        const\n            me        = this,\n            relations = me.constructor.exposedRelations;\n        if (!relations) {\n            return;\n        }\n        me.stores.forEach(store => {\n            if (!store.modelRelations) {\n                store.initRelations();\n            }\n            const relatedRecords = [];\n            store.modelRelations?.forEach(config => {\n                relatedRecords.push({ related : me.initRelation(config), config });\n            });\n            store.updateRecordRelationCache(me, relatedRecords);\n        });\n    }\n    /**\n     * Initializes/updates a single relation.\n     * @param config Relation config\n     * @returns {Core.data.Model} Related record\n     * @private\n     * @category Relations\n     */\n    initRelation(config) {\n        const\n            me            = this,\n            foreignId     = me.get(config.foreignKey),\n            foreign       = foreignId !== _undefined && typeof config.foreignStore !== 'string' && config.foreignStore.getById(foreignId),\n            relationCache = me.meta.relationCache || (me.meta.relationCache = {});\n        // apparently scheduler tests expect cache to work without matched related record, thus the placeholder\n        relationCache[config.relationName] = foreign || (foreignId != null ? { id : foreignId, placeHolder : true } : null);\n        return foreign;\n    }\n    removeRelation(config) {\n        const { relationName, foreignKey, nullFieldOnRemove } = config;\n        // (have to check for existence before deleting to work in Safari)\n        if (this.meta.relationCache[relationName]) {\n            delete this.meta.relationCache[relationName];\n            if (nullFieldOnRemove) {\n                // Setting to null silently, to not trigger additional relation behaviour\n                this.setData(foreignKey, null);\n            }\n        }\n    }\n    getForeign(name) {\n        return this.meta.relationCache?.[name];\n    }\n    setForeign(name, value, config) {\n        const id = Model.asId(value);\n        return this.set(config.foreignKey, id);\n    }\n    /**\n     * Get a relation config by name, from the first store.\n     * @param {String} name\n     * @returns {Object}\n     * @private\n     * @category Relations\n     */\n    getRelationConfig(name) {\n        //?\n        // Using first store for relations, might have to revise later...\n        return this.firstStore?.modelRelations?.find(r => r.foreignKey === name);\n    }\n    //endregion\n    //region Get/set values, data handling\n    flatGet(fieldName, dataSource) {\n        // NOTE: There is an inlined copy of this fn in DataField, when changing here make sure it is updated too\n        // When changes are batched, they get stored by field name, not dataSource\n        if (this.batching && fieldName in this.meta.batchChanges) {\n            return this.meta.batchChanges[fieldName];\n        }\n        return dataSource in this.data ? this.data[dataSource] : this.data[fieldName];\n    }\n    complexGet(fieldName, dataSource) {\n        // When changes are batched, they get stored by field name, not dataSource\n        if (this.batching && fieldName in this.meta.batchChanges) {\n            return this.meta.batchChanges[fieldName];\n        }\n        return ObjectHelper.getPath(this.data, dataSource);\n    }\n    /**\n     * Get value for specified field name. You can also use the generated getters if loading through a Store.\n     * If model is currently in batch operation this will return updated batch values which are not applied to Model\n     * until endBatch() is called.\n     * @param {String} fieldName Field name to get value from\n     * @returns {*} Fields value\n     * @category Fields\n     */\n    get(fieldName) {\n        if (!fieldName) {\n            return;\n        }\n        const field = this.fieldMap[fieldName];\n        // Getting property of nested record?\n        if (!field && fieldName.includes('.')) {\n            return this.complexGet(fieldName, fieldName);\n        }\n        if (field?.complexMapping) {\n            return this.complexGet(fieldName, field.dataSource);\n        }\n        return this.flatGet(fieldName, field?.dataSource || fieldName);\n    }\n    /**\n     * Internal function used to update a records underlying data block (record.data) while still respecting field\n     * mappings. Needed in cases where a field needs setting without triggering any associated behaviour and it has a\n     * dataSource with a different name.\n     *\n     * For example:\n     * ```javascript\n     * // startDate mapped to data.beginDate\n     * { name : 'startDate', dataSource : 'beginDate' }\n     *\n     * // Some parts of our code needs to update the data block without triggering any of the behaviour associated with\n     * // calling set. This would then not update \"beginDate\":\n     * record.data.startDate = xx;\n     *\n     * // But this would\n     * record.setData('startDate', xx);\n     * ```\n     * @internal\n     * @category Editing\n     */\n    setData(toSet, value) {\n        const { data, fieldMap } = this;\n        // Two separate paths for performance reasons\n        // setData('name', 'Quicksilver');\n        if (typeof toSet === 'string') {\n            const\n                field      = fieldMap[toSet],\n                dataSource = field?.dataSource ?? toSet;\n            if (field?.set) {\n                field.set(value, this.data, this);\n            }\n            else if (field?.complexMapping) {\n                ObjectHelper.setPath(data, dataSource, value);\n            }\n            else {\n                data[dataSource] = value;\n            }\n        }\n        // setData({ name : 'Magneto', power : 'Magnetism' });\n        else {\n            const keys = Object.keys(toSet);\n            for (let i = 0; i < keys.length; i++) {\n                const\n                    fieldName  = keys[i],\n                    field      = fieldMap[fieldName],\n                    dataSource = field?.dataSource ?? fieldName;\n                if (field?.set) {\n                    field.set(value, this.data, this);\n                }\n                else if (dataSource) {\n                    if (field?.complexMapping) {\n                        ObjectHelper.setPath(data, dataSource, toSet[fieldName]);\n                    }\n                    else {\n                        data[dataSource] = toSet[fieldName];\n                    }\n                }\n            }\n        }\n    }\n    /**\n     * Returns raw data from the encapsulated data object for the passed field name\n     * @param {String} fieldName The field to get data for.\n     * @returns {*} The raw data value for the field.\n     * @category Editing\n     */\n    getData(fieldName) {\n        const\n            field      = this.fieldMap[fieldName],\n            dataSource = field?.dataSource ?? fieldName;\n        if (dataSource) {\n            if (field?.complexMapping) {\n                return ObjectHelper.getPath(this.data, dataSource);\n            }\n            return this.data[dataSource];\n        }\n    }\n    /**\n     * Silently updates record's id with no flagging the property as modified.\n     * Triggers onModelChange event for changed id.\n     * @param {String|Number} value id value\n     * @private\n     */\n    syncId(value) {\n        const oldValue = this.id;\n        if (oldValue !== value) {\n            this.setData('id', value);\n            const data = { id : { value, oldValue } };\n            this.afterChange(data, data);\n        }\n    }\n    /**\n     * Set value for the specified field. You can also use the generated setters if loading through a Store.\n     *\n     * Setting a single field, supplying name and value:\n     *\n     * ```javascript\n     * record.set('name', 'Clark');\n     * ```\n     *\n     * Setting multiple fields, supplying an object:\n     *\n     * ```javascript\n     * record.set({\n     *     name : 'Clark',\n     *     city : 'Metropolis'\n     * });\n     * ```\n     *\n     * @param {String|Object} field The field to set value for, or an object with multiple values to set in one call\n     * @param {*} [value] Value to set\n     * @param {Boolean} [silent] Set to true to not trigger events. If event is recurring, occurrences won't be updated automatically.\n     * @privateparam {Boolean} [validOnly] If set to `true` it will ignore setting a `undefined` value, allowing conversion functions to invalidate a data input\n     * @privateparam {Boolean} [triggerBeforeUpdate]\n     * @fires Store#idChange\n     * @fires Store#update\n     * @fires Store#change\n     * @category Editing\n     */\n    set(field, value, silent = false, fromRelationUpdate = false, skipAccessors = false, validOnly = false, triggerBeforeUpdate = true) {\n        const me = this;\n        if (me.isBatchUpdating) {\n            me.inBatchSet(field, value, silent || me.$silenceBatch);\n            return null;\n        }\n        else {\n            // We use inSet/afterSet approach here because mixin interested in overriding set() method like STM, for\n            // example, might be mixed before Model class or after. In general, we have no control over this.\n            // STM mixed before, so the only option to wrap set() method body is actually to call afterSet().\n            const wasSet = me.inSet(field, value, silent, fromRelationUpdate, skipAccessors, validOnly, triggerBeforeUpdate);\n            me.afterSet?.(field, value, silent, fromRelationUpdate, wasSet);\n            return wasSet;\n        }\n    }\n    fieldToKeys(field, value) {\n        if (typeof field !== 'string') {\n            // will get in trouble when setting same field on multiple models without this\n            return ObjectHelper.assign({}, field);\n        }\n        return {\n            [field] : value\n        };\n    }\n    inBatchSet(field, value, silent) {\n        const\n            me     = this,\n            {\n                meta,\n                constructor,\n                fieldMap\n            }      = me,\n            wasSet = {};\n        let cmp, changed = false;\n        if (typeof field !== 'string') {\n            Object.keys(me.fieldToKeys(field, value)).forEach(key => {\n                cmp = fieldMap[key] || ObjectHelper;\n                value = constructor.processField(key, field[key], me);\n                // Store batch changes\n                if (!cmp.isEqual(meta.batchChanges[key], value)) {\n                    wasSet[key] = {\n                        value,\n                        oldValue : me.get(key)\n                    };\n                    meta.batchChanges[key] = value;\n                    changed = true;\n                }\n            });\n        }\n        else {\n            cmp = fieldMap[field] || ObjectHelper;\n            // Minor optimization for engine writing back a lot of changes\n            if (!cmp.isEqual(meta.batchChanges[field], value)) {\n                wasSet[field] = {\n                    value,\n                    oldValue : me.get(field)\n                };\n                meta.batchChanges[field] = value;\n                changed = true;\n            }\n        }\n        // Callers need to be able to detect changes\n        if (changed) {\n            me.generation++;\n            if (!silent) {\n                // Fire batched events for UIs which need to update themselves during batched updates.\n                // An example is evenResize feature which batches the changes to the endDate\n                // or startDate, but the UI must update during the drag.\n                const event = {\n                    action  : 'update',\n                    record  : me,\n                    records : [me],\n                    changes : wasSet\n                };\n                me.stores.forEach(store => {\n                    store.trigger('batchedUpdate', { ...event });\n                });\n                // Propagate to linked records\n                me.forEachLinked((store, record) =>\n                    store.trigger('batchedUpdate', { ...event, record, records : [record] })\n                );\n            }\n        }\n    }\n    inSet(field, value, silent, fromRelationUpdate, skipAccessors = false, validOnly = false, triggerBeforeUpdate = true) {\n        const\n            me       = this,\n            {\n                data,\n                meta,\n                fieldMap,\n                constructor\n            }        = me,\n            {\n                prototype : myProto,\n                childrenField\n            }        = constructor,\n            wasSet   = {},\n            toSet    = me.fieldToKeys(field, value),\n            // Sort fields to make sure parentId is processed before id\n            // https://github.com/bryntum/support/issues/6851\n            keys     = Object.keys(toSet).sort(this.constructor.fieldSorter);\n        let\n            changed  = false;\n        // Give a chance to cancel action before records are updated.\n        if (!silent && !me.triggerBeforeUpdate(toSet)) {\n            return null;\n        }\n        me.inSetting = true;\n        for (let i = 0; i < keys.length; i++) {\n            const key = keys[i];\n            // Currently not allowed to set children in a TreeNode this way, will be ignored\n            if (key === childrenField) {\n                continue;\n            }\n            const\n                field    = fieldMap[key],\n                cmp      = field || ObjectHelper,\n                readOnly = field?.readOnly,\n                mapping  = field?.dataSource ?? key,\n                useProp  = !skipAccessors && !field && key in myProto,\n                oldValue = useProp ? me[mapping] : field?.complexMapping ? ObjectHelper.getPath(data, mapping) : data[mapping],\n                value    = constructor.processField(key, toSet[key], me),\n                val      = toSet[key] = { value },\n                relation = me.getRelationConfig(key);\n            if (!readOnly && !cmp.isEqual(oldValue, value) && (!validOnly || value !== undefined)) {\n                // Indicate to observers that data has changed.\n                me.generation++;\n                // Give fields a shot at affecting the old value (used by StoreDataField)\n                val.oldValue = field?.getOldValue?.(me) ?? oldValue;\n                changed = true;\n                // Update `modified` state which is used in sync request\n                if (key in meta.modified && cmp.isEqual(meta.modified[key], value)) {\n                    // Remove changes if values are the same\n                    Reflect.deleteProperty(meta.modified, key);\n                    // Hack for when reverting record changes when using engine. If data is not made up to date here,\n                    // the write-back from engine coming later will detect the revert as a change. And round we go\n                    if (me.isReverting) {\n                        me.data[mapping] = value;\n                    }\n                }\n                else if (!me.ignoreBag) { // Private flag in engine, speeds initial commit up by not recording changes\n                    // Cache its original value\n                    if (!(key in meta.modified)) {\n                        me.storeFieldChange(key, oldValue);\n                    }\n                    if (val.oldValue === _undefined) {\n                        Reflect.deleteProperty(val, 'oldValue');\n                    }\n                }\n                // The wasSet object keys must be the field *name*, not its dataSource.\n                wasSet[key] = val;\n                me.applyValue(useProp, mapping, value, skipAccessors, field);\n                // changing foreign key\n                if (relation && !fromRelationUpdate) {\n                    me.initRelation(relation);\n                    me.stores.forEach(store => store.cacheRelatedRecord(me, value, relation.relationName, val.oldValue));\n                }\n            }\n        }\n        if (changed) {\n            me.afterChange(toSet, wasSet, silent, fromRelationUpdate, skipAccessors);\n        }\n        me.inSetting = false;\n        return changed ? wasSet : null;\n    }\n    // Provided as a hook for Engine to do what needs to be done which ever way a field value is changed\n    applyValue(useProp, key, value, skipAccessors, field) {\n        const me = this;\n        let complexMapping = field?.complexMapping;\n        // If we don't have a field, but we have a property define eg, the fullDuration property defined in TaskModel,\n        // then use the property.\n        // Setting parentId moves the node, always route through setter\n        if ((field?.name || key) === me.constructor.parentIdField) {\n            // key is the dataSource, if we use property we need to use field name\n            (me.firstStore.getById(value) || me.firstStore.rootNode).insertChild(me, null, false, {\n                orderedParentIndex : { skip : true }\n            });\n            return;\n        }\n        else if (useProp) {\n            // key is the dataSource, if we use property we need to use field name\n            me[field?.name || key] = value;\n            return;\n        }\n        if (field?.set) {\n            field.set(value, me.data, me);\n            return;\n        }\n        // Might be setting value of nested object\n        if (!field && key.includes('.')) {\n            const nestedName = key.split('.')[0];\n            field = me.constructor.fieldMap[nestedName];\n            // We use complex mapping if the field's dataSource was defined as such,\n            // OR if we are being asked to set using dot notation and field is of Object type.\n            complexMapping = field?.complexMapping || field?.type === 'object';\n        }\n        // Use complex mapping?\n        if (complexMapping) {\n            ObjectHelper.setPath(me.data, key, value);\n        }\n        // Otherwise, push the value through into the data.\n        else {\n            me.data[key] = value;\n        }\n    }\n    // skipAccessors argument is used in the engine override\n    afterChange(toSet, wasSet, silent, fromRelationUpdate, skipAccessors) {\n        for (const store of this.stores) {\n            store.onModelChange(this, toSet, wasSet, silent, fromRelationUpdate, skipAccessors);\n        }\n        // Propagate to linked records\n        this.forEachLinked((store, record) =>\n            store.onModelChange(record, toSet, wasSet, silent, fromRelationUpdate, skipAccessors)\n        );\n    }\n    // Run fn for each store on each linked record\n    forEachLinked(fn) {\n        for (const linked of this.$links) {\n            for (const store of linked.stores) {\n                fn(store, linked);\n            }\n        }\n    }\n    /**\n     * This yields `true` if this record is eligible for syncing with the server.\n     * It can yield `false` if the record is in the middle of a {@link #property-isBatchUpdating batched update},\n     * or if it is a {@link #property-isCreating tentative record} yet to be confirmed as a new addition.\n     * @property {Boolean}\n     * @readonly\n     */\n    get isPersistable() {\n        // Record is not persistable if the owning app is in the middle of a batch update\n        // and the record is not flagged as being in the middle of a creation sequence.\n        // This means that a \"new\" record can be added on a conditional basis with its\n        // isCreating property set which means it is examplt from being synced until\n        // the isCreating flag is cleared.\n        return !this.isBatchUpdating && !this.isCreating;\n    }\n    /**\n     * True if this model has any uncommitted changes.\n     * @property {Boolean}\n     * @readonly\n     * @category Editing\n     */\n    get isModified() {\n        return Boolean(this.meta.modified && Object.keys(this.meta.modified).length > 0);\n    }\n    get hasPersistableChanges() {\n        return this.isPersistable && !ObjectHelper.isEmpty(this.rawModificationData);\n    }\n    /**\n     * Returns true if this model has uncommitted changes for the provided field.\n     * @param {String} fieldName Field name\n     * @returns {Boolean} True if the field is changed\n     * @category Editing\n     */\n    isFieldModified(fieldName) {\n        return this.isModified && fieldName in this.meta.modified;\n    }\n    /**\n     * Returns field value that should be persisted, or `undefined` if field is configured with `persist: false`.\n     * @param {String|Core.data.field.DataField} nameOrField Name of the field to get value for, or its field definition\n     * @private\n     * @category Fields\n     */\n    getFieldPersistentValue(nameOrField) {\n        const\n            field = typeof nameOrField === 'string' ? this.getFieldDefinition(nameOrField) : nameOrField,\n            name  = field?.name || nameOrField;\n        let result;\n        if (!field || field.persist) {\n            result = this[name];\n            // if serialize function is provided we use it to prepare the persistent value\n            if (field?.serialize) {\n                result = field.serialize(result, this);\n            }\n        }\n        return result;\n    }\n    /**\n     * Get a map of the modified fields in form of an object. The field *names* are used as the property names\n     * in the returned object.\n     * @property {Object}\n     * @readonly\n     * @category Editing\n     */\n    get modifications() {\n        const data = this.rawModifications;\n        if (data && Object.keys(data).length) {\n            data[this.constructor.idField] = this.id;\n        }\n        return data;\n    }\n    get rawModifications() {\n        const\n            me = this,\n            data = {};\n        if (!me.isModified) {\n            return null;\n        }\n        let keySet = false;\n        Object.keys(me.meta.modified).forEach(key => {\n            const value = me.getFieldPersistentValue(key);\n            if (value !== _undefined) {\n                data[key] = value;\n                keySet = true;\n            }\n        });\n        return keySet ? data : null;\n    }\n    /**\n     * Get a map of the modified fields in form of an object. The field\u00B4s {@link Core.data.field.DataField#config-dataSource}\n     * is used as the property name in the returned object. The record\u00B4s id is always included.\n     * @property {Object}\n     * @readonly\n     * @category Editing\n     */\n    get modificationData() {\n        const data = this.rawModificationData;\n        // If there are some persistable field changes, append record id\n        if (data && Object.keys(data).length) {\n            ObjectHelper.setPath(data, this.constructor.idField, this.id);\n        }\n        return data;\n    }\n    /**\n     * Returns a map of the modified persistable fields\n     * @internal\n     * @property {Object}\n     * @category Editing\n     */\n    get rawModificationData() {\n        const\n            me = this,\n            { fieldMap } = me.constructor,\n            data = {};\n        if (!me.isModified) {\n            return null;\n        }\n        let keySet = false;\n        Object.keys(me.meta.modified).forEach(fieldName => {\n            const field = fieldMap[fieldName];\n            // No field definition means there's no original dataSource to update\n            if (field?.persist) {\n                const value = me.getFieldPersistentValue(fieldName);\n                if (value !== _undefined) {\n                    ObjectHelper.setPath(data, field.dataSource, value);\n                    keySet = true;\n                }\n            }\n        });\n        return keySet ? data : null;\n    }\n    /**\n     * Get a map of the modified data fields along with any {@link Core/data/field/DataField#config-alwaysWrite} fields,\n     * in form of an object. The field\u00B4s *dataSource* is used as the property name in the returned object.\n     * Used internally by AjaxStore / CrudManager when sending updates.\n     * @property {Object}\n     * @readonly\n     * @category Editing\n     */\n    get modificationDataToWrite() {\n        const\n            alwaysWriteFields = this.constructor.alwaysWriteFields,\n            recordData        = this.modificationData;\n        alwaysWriteFields.forEach(fieldName => {\n            recordData[this.getFieldDefinition(fieldName).dataSource] = this.getFieldPersistentValue(fieldName);\n        });\n        return recordData;\n    }\n    /**\n     * Returns data for **all** {@link Core.data.field.DataField#config-persist persistable} fields in form of an\n     * object, using dataSource if present.\n     * @property {Object}\n     * @internal\n     * @readonly\n     * @category Editing\n     */\n    get persistableData() {\n        const\n            me   = this,\n            data = {};\n        me.fields.forEach(field => {\n            const value = me.getFieldPersistentValue(field);\n            if (value !== _undefined) {\n                if (field?.complexMapping) {\n                    ObjectHelper.setPath(data, field.dataSource, value);\n                }\n                else {\n                    data[field.dataSource] = value;\n                }\n            }\n        });\n        return data;\n    }\n    get dataByFieldName() {\n        const { data } = this;\n        return this.fields.reduce((result, field) => {\n            if (ObjectHelper.hasPath(data, field.dataSource)) {\n                result[field.name] = data[field.dataSource];\n            }\n            return result;\n        }, {});\n    }\n    /**\n     * True if this models changes are currently being committed.\n     * @property {Boolean}\n     * @category Editing\n     */\n    get isCommitting() {\n        return Boolean(this.meta.committing);\n    }\n    /**\n     * Clear stored changes, used on commit. Does not revert changes.\n     * @param {Boolean} [includeDescendants] Supply `false` to not clear node descendants\n     * @privateparam {Boolean} [removeFromStoreChanges] Update related stores modified collection or not\n     * @privateparam {Object|null} [changes] Set of changes to clear on the record\n     * @category Editing\n     */\n    clearChanges(includeDescendants = true, removeFromStoreChanges = true, changes = null) {\n        const\n            me = this,\n            { meta } = me;\n        // If we've received an object with changes, we only need to clean that one up\n        if (changes) {\n            for (const key in changes) {\n                delete meta.modified[key];\n            }\n        }\n        else {\n            meta.modified = {};\n        }\n        // We can only remove record from changes if we no modified fields in meta\n        const noChanges = ObjectHelper.isEmpty(meta.modified);\n        meta.committing = false;\n        if (removeFromStoreChanges) {\n            me.stores.forEach(store => {\n                noChanges && store.modified.remove(me);\n                store.added.remove(me);\n                if (includeDescendants) {\n                    const descendants = store.collectDescendants(me).all;\n                    store.added.remove(descendants);\n                    noChanges && store.modified.remove(descendants);\n                }\n            });\n        }\n    }\n    storeFieldChange(key, oldValue) {\n        this.meta.modified[key] = oldValue;\n    }\n    /**\n     * Reverts changes in this back to their original values.\n     * @privateparam {Boolean} [silent] Specify `true` to not trigger events.\n     * @category Editing\n     */\n    revertChanges(silent = false) {\n        // Flag checked by engine to not set startDate constraint on revert\n        this.isReverting = true;\n        this.set(this.meta.modified, _undefined, silent);\n        this.isReverting = false;\n    }\n    applyChangeset(rawChanges, phantomIdField = '$PhantomId', remote = true) {\n        const\n            me                     = this,\n            modelClass             = me.constructor,\n            {\n                idField,\n                fieldDataSourceMap\n            } = modelClass,\n            rawChangesSimplePaths  = ObjectHelper.pathifyKeys(rawChanges),\n            ownChangesSimplePaths  = ObjectHelper.pathifyKeys(me.modificationData),\n            changes                = {},\n            // Value of id field cannot be changed, it can only be set. In which case phantom id field will be in the\n            // rawChanges objects\n            idChanged              = phantomIdField in rawChanges;\n        // Collect the changes into a change set for field names.\n        for (const dataSource in rawChangesSimplePaths) {\n            const\n                field    = fieldDataSourceMap[dataSource],\n                propName = field?.name ?? dataSource;\n            // Only apply change to the model:\n            // 1. if changes is remote\n            // 2. or local change is not outdated\n            // 3. we are setting id (in which case phantom id would be in raw changes). id value cannot be changed here,\n            // only assigned if record is phantom - because we use id from the raw data to resolve this record in the\n            // first place\n            if (\n                remote ||\n                (\n                    field?.name === idField\n                        ? idChanged\n                        : (rawChangesSimplePaths[dataSource] === ownChangesSimplePaths[dataSource])\n                )\n            ) {\n                changes[propName] = rawChangesSimplePaths[dataSource];\n            }\n        }\n        // Apply all changes in one go, making sure record is considered unmodified after\n        const wasSet = me.set(changes);\n        me.clearChanges(false, true, remote ? null : changes);\n        // wasSet has format { field : { oldValue, value }}, convert to { field : value }\n        return wasSet ? Object.entries(wasSet).reduce((result, [field, change]) => {\n            result[field] = change.value;\n            return result;\n        }, {}) : {};\n    }\n    //endregion\n    //region Id\n    /**\n     * Gets the records internalId. It is assigned during creation, guaranteed to be globally unique among models.\n     * @property {Number}\n     * @category Identification\n     */\n    get internalId() {\n        return this._internalId;\n    }\n    /**\n     * Returns true if the record is new and has not been persisted (and received a proper id).\n     * @property {Boolean}\n     * @readonly\n     * @category Identification\n     */\n    get isPhantom() {\n        return this.id === '' || this.id == null || this.hasGeneratedId;\n    }\n    get isModel() {\n        return true;\n    }\n    /**\n     * Checks if record has a generated id.\n     *\n     * New records are assigned a generated id based on a UUID (starting with `_generated`), which is intended to be\n     * temporary and should be replaced by the backend on commit.\n     *\n     * @property {Boolean}\n     * @category Identification\n     */\n    get hasGeneratedId() {\n        return typeof this.id === 'string' && this.id.startsWith('_generated');\n    }\n    static generateId(text = this.$$name) {\n        return `_generated${text}_${StringHelper.generateUUID()}`;\n    }\n    /**\n     * Generates an id for a new record (a phantom id), based on a UUID (starting with `_generated`).\n     *\n     * Generated ids are intended to be temporary and should be replaced by the backend on commit.\n     *\n     * @category Identification\n     * @returns {String}\n     */\n    generateId() {\n        return this.constructor.generateId();\n    }\n    /**\n     * Gets the id of specified model or model data object, or the value if passed string/number.\n     * @param {Core.data.Model|String|Number} model\n     * @returns {String|Number} id\n     * @category Identification\n     */\n    static asId(model) {\n        return model?.isModel ? model.id : ObjectHelper.isObject(model) ? model[this.fieldMap.id.dataSource] : model;\n    }\n    //endregion\n    //region JSON\n    /**\n     * Get the records data as a json string.\n     *\n     * ```javascript\n     * const record = new Model({\n     *     title    : 'Hello',\n     *     children : [\n     *         ...\n     *     ]\n     * });\n     *\n     * const jsonString = record.json;\n     *\n     * //jsonString:\n     * '{\"title\":\"Hello\",\"children\":[...]}'\n     * ```\n     *\n     * @member {String}\n     * @category JSON\n     */\n    get json() {\n        return StringHelper.safeJsonStringify(this);  // calls our toJSON() method\n    }\n    /**\n     * Used by `JSON.stringify()` to correctly convert this record to json.\n     *\n     * In most cases no point in calling it directly.\n     *\n     * ```\n     * // This will call `toJSON()`\n     * const json = JSON.stringify(record);\n     * ```\n     *\n     * If called manually, the resulting object is a clone of `record.data` + the data of any children:\n     *\n     * ```\n     * const record = new Model({\n     *     title    : 'Hello',\n     *     children : [\n     *         ...\n     *     ]\n     * });\n     *\n     * const jsonObject = record.toJSON();\n     *\n     * // jsonObject:\n     * {\n     *     title : 'Hello',\n     *     children : [\n     *         ...\n     *     ]\n     * }\n     * ```\n     *\n     * @returns {Object}\n     * @category JSON\n     */\n    toJSON() {\n        const\n            { children, unfilteredChildren } = this,\n            jsonData                         = this.persistableData;\n        if (unfilteredChildren || children) {\n            jsonData[this.constructor.childrenField] = (unfilteredChildren || children).map(c => c.toJSON());\n        }\n        return jsonData;\n    }\n    /**\n     * Represent the record as a string, by default as a JSON string. Tries to use an abbreviated version of the\n     * object's data, using id + name/title/text/label/description. If no such field exists, the full data is used.\n     *\n     * ```javascript\n     * const record = new Model({ id : 1, name : 'Steve Rogers', alias : 'Captain America' });\n     * console.log(record.toString()); // logs { \"id\" : 1, \"name\" : \"Steve Rogers\" }\n     * ```\n     *\n     * @returns {String}\n     * @category JSON\n     */\n    toString() {\n        const\n            me        = this,\n            nameField = abbreviationFields.find(field => field in me.constructor.fieldMap),\n            data      = nameField ? { [me.constructor.idField] : me.id, [nameField] : me[nameField] } : me.data;\n        return StringHelper.safeJsonStringify(data);\n    }\n    //endregion\n    //region Batch\n    /**\n     * True if this Model is currently batching its changes.\n     * @property {Boolean}\n     * @readonly\n     * @category Editing\n     */\n    get isBatchUpdating() {\n        return Boolean(this.batching);\n    }\n    /**\n     * Returns `true` if this Model currently has outstanding batched changes for the specified field name.\n     * @param {String} fieldName The field name to check for batched updates on.\n     * @returns {Boolean}\n     * @category Editing\n     */\n    hasBatchedChange(fieldName) {\n        return this.meta?.batchChanges?.[fieldName];\n    }\n    /**\n     * Begin a batch, which stores changes and commits them when the batch ends.\n     * Prevents events from being fired during batch.\n     *\n     * ```javascript\n     * record.beginBatch();\n     * record.name = 'Mr Smith';\n     * record.team = 'Golden Knights';\n     * record.endBatch();\n     * ```\n     *\n     * Please note that you can also set multiple fields in a single call using {@link #function-set}, which in many\n     * cases can replace using a batch:\n     *\n     * ```javascript\n     * record.set({\n     *   name : 'Mr Smith',\n     *   team : 'Golden Knights'\n     * });\n     * ```\n     * @category Editing\n     * @privateparam {Boolean} silentUpdates Suppress firing the `batchUpdatedEvent`\n     */\n    beginBatch(silentUpdates = false) {\n        const me = this;\n        if (!me.batching) {\n            me.batching = 0;\n            me.meta.batchChanges = {};\n        }\n        if (silentUpdates) {\n            me.$silenceBatch = (me.$silenceBatch || 0) + 1;\n        }\n        me.batching++;\n    }\n    /**\n     * End a batch, triggering events if data has changed.\n     * @param {Boolean} [silent] Specify `true` to not trigger events. If event is recurring, occurrences won't be updated automatically.\n     * @privateparam {Boolean} [silent=false] Specify `true` to not trigger events. If event is recurring, occurrences won't be updated automatically.\n     * @privateparam {Boolean} [triggerBeforeUpdate=true]\n     * @category Editing\n    */\n    endBatch(silent = false, skipAccessors = false, triggerBeforeUpdate = true) {\n        const\n            me                = this,\n            { parentIdField } = me.constructor;\n        if (!me.batching) {\n            return;\n        }\n        me.batching--;\n        // Ideally we should track which batch was silenced, but that will complicate code more than what avoiding a few\n        // triggered events is worth (this is private and we do not start batches while batches are ongoing in the\n        // critical code path in engine)\n        me.$silenceBatch && me.$silenceBatch--;\n        if (me.batching > 0) {\n            return;\n        }\n        // Set pending batch changes\n        if (!ObjectHelper.isEmpty(me.meta.batchChanges)) {\n            let { batchChanges } = me.meta;\n            me.meta.batchChanges = null;\n            // Move to its new parent before applying the other changes.\n            if (batchChanges[parentIdField]) {\n                batchChanges = { ...batchChanges };\n                me.parentId = batchChanges[parentIdField];\n                delete batchChanges[parentIdField];\n            }\n            me.set(batchChanges, _undefined, silent, false, skipAccessors, undefined, triggerBeforeUpdate);\n        }\n    }\n    /**\n     * Cancels current batch operation. Any changes during the batch are discarded.\n     * @category Editing\n     */\n    cancelBatch() {\n        if (this.batching) {\n            const\n                me               = this,\n                { batchChanges } = me.meta,\n                wasSet           = {};\n            me.batching = null;\n            me.meta.batchChanges = null;\n            me.generation++;\n            if (!me.$silenceBatch) {\n                // Create a wasSet describing the revert back from the batched values to the real values.\n                Object.entries(batchChanges).forEach(([key, oldValue]) => {\n                    wasSet[key] = {\n                        oldValue,\n                        value : me[key]\n                    };\n                });\n                // Fire batched events for UIs which need to update themselves during batched updates.\n                // An example is evenResize feature which batches the changes to the endDate\n                // or startDate, but the UI must update during the drag.\n                const event = {\n                    action  : 'update',\n                    record  : me,\n                    records : [me],\n                    changes : wasSet\n                };\n                me.stores.forEach(store => {\n                    // Cant use event directly, it will get polluted with `source` and then have that incorrect for\n                    // following calls\n                    store.trigger('batchedUpdate', { ...event });\n                });\n                // Propagate to linked records\n                me.forEachLinked((store, record) => {\n                    store.trigger('batchedUpdate', { ...event, record, records : [record] });\n                });\n            }\n            me.$silenceBatch && me.$silenceBatch--;\n        }\n    }\n    //endregion\n    //region Events\n    /**\n     * Triggers beforeUpdate event for each store and checks if changes can be made from event return value.\n     * @param {Object} changes Data changes\n     * @returns {Boolean} returns true if data changes are accepted\n     * @private\n     */\n    triggerBeforeUpdate(changes) {\n        return !this.stores?.some(s => s.trigger('beforeUpdate', { record : this, changes }) === false);\n    }\n    //endregion\n    //region Additional functionality\n    /**\n     * Makes a copy of this model, assigning the specified id or a generated id and also allowing you to pass field values to\n     * the created copy.\n     *\n     * ```\n     * const record = new Model({ name : 'Super model', hairColor : 'Brown' });\n     * const clone = record.copy({ name : 'Super model clone' });\n     * ```\n     * @param {Number|String|Object} [newId] The id for the copied instance, or any field values to apply\n     * (overriding the values from the source record). If no id provided, one will be auto-generated\n     * @param {Boolean} [deep] True to also clone children\n     * @returns {Core.data.Model} Copy of this model\n     * @category Editing\n     */\n    copy(newId = null, deep) {\n        const\n            me      = this,\n            data    = ObjectHelper.clone(me.data),\n            idField = me.constructor.idField,\n            // Chrono model is adding more logic to copy and that logic should be manageable from arguments. So there is\n            // option to pass object as a last argument to switch method behavior. Used internally only, shouldn't be public.\n            useDeep = ObjectHelper.isObject(deep) ?  deep.deep : deep;\n        let id;\n        if (newId && typeof newId === 'object') {\n            id = newId[idField];\n            Object.assign(data, newId);\n        }\n        else {\n            id = newId;\n        }\n        // Iterate over instance children, because data may not reflect actual children state.\n        // Copy's initial expanded state will be from the \"expanded\" property of the data object\n        // which is cloned from the source.\n        if (useDeep && me.children) {\n            data.children = me.children.map(child => child.copy(undefined, deep));\n        }\n        else {\n            delete data.children;\n            delete data.expanded;\n        }\n        if (me.$meta.fields.initable.length > 0) {\n            const json    = me.toJSON();\n            for (const field of me.$meta.fields.initable) {\n                data[field.name] = json[field.name];\n            }\n        }\n        if (newId !== false) {\n            // We can use the value from the 'id' property, but as a fallback, generate the id.\n            data[idField] = id || me.generateId(me.firstStore);\n        }\n        // Force using raw data when creating a copy, since data was cloned above anyway\n        const copy = new me.constructor(data, null, null, false, true);\n        // Store original record internal id to lookup from copy later\n        copy.originalInternalId = me.internalId;\n        return copy;\n    }\n    // Copies data using the real field names to trigger setters\n    copyData(fromRecord, raw, silent) {\n        const propertiesAndValues = {};\n        fromRecord.allFields.forEach(({ name : fieldName }) => {\n            if (fieldName !== fromRecord.constructor.idField) {\n                propertiesAndValues[fieldName] = raw ? fromRecord.get(fieldName) : fromRecord[fieldName];\n            }\n        });\n        this.set(propertiesAndValues, null, silent);\n    }\n    /**\n     * Removes this record from all stores (and in a tree structure, also from its parent if it has one).\n     * @param {Boolean} [silent] Specify `true` to not trigger events. If event is recurring, occurrences won't be updated automatically.\n     * @category Editing\n     */\n    remove(silent = false) {\n        const\n            me         = this,\n            { parent } = this;\n        // Remove from parent if we're in a tree structure.\n        // This informs the owning store(s)\n        if (parent) {\n            parent.removeChild(me);\n        }\n        // Store handles remove\n        // Not sure what should happen if you try to remove a special row (group row for example), bailing out\n        else if (me.stores.length && !me.isSpecialRow) {\n            me.stores.forEach(s => s.remove(me, silent, false, true));\n        }\n    }\n    // Called by stores before removing the record from the store. Returning false prevents the removal (overridden in\n    // ModelLink.js)\n    beforeRemove(stores, records) {\n        return super.beforeRemove(stores, records);\n    }\n    //endregion\n    //region Validation\n    /**\n     * Check if record has valid data. Default implementation returns true, override in your model to do actual validation.\n     * @property {Boolean}\n     * @category Editing\n     */\n    get isValid() {\n        return true;\n    }\n    //endregion\n    //region Store\n    /**\n     * Get the first store that this model is assigned to.\n     * @property {Core.data.Store}\n     * @readonly\n     * @category Misc\n     */\n    get firstStore() {\n        return this.stores.length > 0 && this.stores[0];\n    }\n    /**\n     * Joins this record and any children to specified store, if not already joined.\n     * @internal\n     * @param {Core.data.Store} store Store to join\n     * @category Misc\n     */\n    joinStore(store) {\n        const\n            me         = this,\n            { stores } = me;\n        if (!stores.includes(store)) {\n            const { unjoinedStores } = me;\n            super.joinStore(store);\n            store.register(me);\n            stores.push(store);\n            if (unjoinedStores.includes(store)) {\n                unjoinedStores.splice(unjoinedStores.indexOf(store), 1);\n            }\n            me.isLoaded && me.children.forEach(child => child.joinStore(store));\n            me.initRelations();\n            // do not change the collapsed state during stm restoring\n            if (store.tree && !me.isRoot && !store.stm?.isRestoring) {\n                me.instanceMeta(store.id).collapsed = !me.expanded;\n            }\n        }\n    }\n    /**\n     * Unjoins this record and any children from specified store, if already joined.\n     * @internal\n     * @param {Core.data.Store} store Store to join\n     * @param {Boolean} [isReplacing] `true` if this record is being replaced\n     * @category Misc\n     */\n    unjoinStore(store, isReplacing = false) {\n        const me = this,\n            { stores, unjoinedStores } = me;\n        if (stores.includes(store)) {\n            if (!store.isDestroying) {\n                store.unregister(me);\n                unjoinedStores.push(store);\n            }\n            // me.children may === true...\n            // If filtered, *all* children must be unjoined when we are.\n            (me.unfilteredChildren || me.children)?.forEach?.(child => child.unjoinStore(store, isReplacing));\n            stores.splice(stores.indexOf(store), 1);\n            // keep the cord to allow removed records to reach the store when needed\n            super.unjoinStore?.(store, isReplacing);\n            // remove from relation cache\n            store.uncacheRelatedRecord(me);\n        }\n    }\n    /**\n     * Returns true if this record is contained in the specified store, or in any store if store param is omitted.\n     * @internal\n     * @param {Core.data.Store} store Store to join\n     * @returns {Boolean}\n     * @category Misc\n     */\n    isPartOfStore(store) {\n        if (store) {\n            return store.includes(this);\n        }\n        return this.stores.length > 0;\n    }\n    /**\n     * Returns true if this record is not part of any store.\n     * @property {Boolean}\n     * @readonly\n     * @internal\n     */\n    get isRemoved() {\n        return !this.isPartOfStore();\n    }\n    //endregion\n    //region Per instance meta\n    /**\n     * Used to set per external instance meta data. For example useful when using a record in multiple grids to store some state\n     * per grid.\n     * @param {String|Object} instanceOrId External instance id or the instance itself, if it has id property\n     * @private\n     * @category Misc\n     */\n    instanceMeta(instanceOrId) {\n        const\n            { meta } = this,\n            id       = instanceOrId.id || instanceOrId;\n        if (!meta.map) {\n            meta.map = {};\n        }\n        return meta.map[id] || (meta.map[id] = {});\n    }\n    /**\n     * When called on a group header row returns list of records in that group. Returns `undefined` otherwise.\n     * @member {Core.data.Model[]|undefined} groupChildren\n     * @category Grouping\n     * @readonly\n     */\n    /**\n     * Returns true for a group header record\n     * @member {Boolean}\n     * @category Grouping\n     * @readonly\n     */\n    get isGroupHeader() {\n        return 'groupRowFor' in this.meta;\n    }\n    get isGroupFooter() {\n        return 'groupFooterFor' in this.meta;\n    }\n    get isSpecialRow() {\n        return Boolean(this.meta?.specialRow);\n    }\n    get $original() {\n        return this.isLinked ? this.proxyMeta.originalRecord : this;\n    }\n    //endregion\n    static get nonPersistableFields() {\n        const me = this;\n        if (!me._nonPersistableFields) {\n            me._nonPersistableFields = {};\n            me.allFields.forEach(field => {\n                if (!field.persist || field.calculated) {\n                    me._nonPersistableFields[field.name] = 1;\n                }\n            });\n        }\n        return me._nonPersistableFields;\n    }\n    static get alwaysWriteFields() {\n        const me = this;\n        if (!me._alwaysWriteFields) {\n            me._alwaysWriteFields = [];\n            me.allFields.forEach(field => {\n                if (field.alwaysWrite) {\n                    me._alwaysWriteFields.push(field.name);\n                }\n            });\n        }\n        return me._alwaysWriteFields;\n    }\n    // Id with spaces and dots replaced by -, for safe usage as an id in DOM\n    get domId() {\n        return typeof this.id === 'string' ? this.id.replace(/[ .]/g, '-') : this.id;\n    }\n    //region Extract config\n    // These functions are not meant to be called by any code other than Base#getCurrentConfig()\n    // Convert custom modelClass to string, keeping custom fields\n    static toJavaScriptValue(options) {\n        // Get name, skipping the automatically extended name that goes last (MyModel, not MyModelEx)\n        const\n            { names } = this.$meta,\n            className = names[names.length - 2],\n            superName =  names[names.length - 3];\n        return `class ${className} extends ${superName} { static fields = ${StringHelper.toJavaScriptValue(this.fields, options)}; }`;\n    }\n    // Get fields current values\n    getCurrentConfig(options) {\n        const\n            { data, children }              = this,\n            { defaultValues, applyConfigs } = this.constructor,\n            result                          = applyConfigs ? super.getCurrentConfig(options) : {};\n        if (result) {\n            for (const field of this.fields) {\n                if (field.persist) {\n                    const value = ObjectHelper.getPath(data, field.dataSource);\n                    if (!field.isEqual(value, defaultValues[field.name])) {\n                        ObjectHelper.setPath(result, field.dataSource, Base.processConfigValue(value, options));\n                    }\n                }\n            }\n            // Always include children\n            if (children) {\n                // Inline available children\n                if (Array.isArray(children)) {\n                    result.children = [];\n                    for (const child of children) {\n                        result.children.push(child.getCurrentConfig(options));\n                    }\n                }\n                // Load on demand\n                else {\n                    result.children = children;\n                }\n            }\n            if (this.hasGeneratedId) {\n                delete result.id;\n            }\n            delete result.parentId;\n            delete result.parentIndex;\n        }\n        return result;\n    }\n    //endregion\n}\nModel._idField = 'id';\nModel._internalIdCounter = 1;\nModel._assignedIdField = false;\nModel.exposeProperties();\nModel._$name = 'Model';", "import DateHelper from '../helper/DateHelper.js';\n/**\n * @module Core/data/Duration\n */\n/**\n * Object describing a duration.\n * @typedef {Object} DurationConfig\n * @property {Number} magnitude The magnitude of the duration\n * @property {String} unit The unit of the duration\n */\n/**\n * Class which represents a duration object. A duration consists of a `magnitude` and a `unit`.\n *\n * ```javascript\n * {\n *    unit      : String,\n *    magnitude : Number\n * }\n * ```\n *\n * Valid values are:\n * - \"millisecond\" - Milliseconds\n * - \"second\" - Seconds\n * - \"minute\" - Minutes\n * - \"hour\" - Hours\n * - \"day\" - Days\n * - \"week\" - Weeks\n * - \"month\" - Months\n * - \"quarter\" - Quarters\n * - \"year\"- Years\n */\nexport default class Duration {\n    /**\n     * Duration constructor.\n     * @param {Number|String} magnitude Duration magnitude value or a duration + magnitude string ('2h', '4d')\n     * @param {String} [unit] Duration unit value\n     */\n    constructor(magnitude, unit) {\n        // we treat `magnitude === null` specially, it indicates the user intention\n        // to unschedule the task\n        if (typeof magnitude === 'number' || magnitude === null) {\n            this._magnitude = magnitude;\n            this._unit = unit;\n        }\n        else {\n            if (typeof magnitude === 'string') {\n                Object.assign(this, DateHelper.parseDuration(magnitude));\n            }\n            if (typeof magnitude === 'object') {\n                Object.assign(this, magnitude);\n            }\n        }\n    }\n    /**\n     * Get/Set numeric magnitude `value`.\n     * @property {Number}\n     */\n    get magnitude() {\n        return this._magnitude;\n    }\n    set magnitude(value) {\n        this._magnitude = (typeof value === 'number') && value;\n    }\n    /**\n     * Get/Set duration unit to use with the current magnitude value.\n     * Valid values are:\n     * - \"millisecond\" - Milliseconds\n     * - \"second\" - Seconds\n     * - \"minute\" - Minutes\n     * - \"hour\" - Hours\n     * - \"day\" - Days\n     * - \"week\" - Weeks\n     * - \"month\" - Months\n     * - \"quarter\" - Quarters\n     * - \"year\"- Years\n     *\n     * @member {'millisecond'|'second'|'minute'|'hour'|'day'|'week'|'month'|'quarter'|'year'}\n     */\n    get unit() {\n        return this._unit;\n    }\n    set unit(value) {\n        this._unit = DateHelper.parseTimeUnit(value);\n    }\n    get isValid() {\n        return this._magnitude != null && Boolean(DateHelper.normalizeUnit(this._unit));\n    }\n    /**\n     * The `milliseconds` property is a read only property which returns the number of milliseconds in this Duration\n     * @property {Number}\n     * @readonly\n     */\n    get milliseconds() {\n        // There's no smaller time unit in the Date class than milliseconds, so round any divided values\n        return this.isValid ? Math.round(DateHelper.asMilliseconds(this._magnitude, this._unit)) : 0;\n    }\n    /**\n     * Returns truthy value if this Duration equals the passed value.\n     * @param {Core.data.Duration} value\n     * @returns {Boolean}\n     */\n    isEqual(value) {\n        return Boolean(value) && this._magnitude != null && value._magnitude != null && this.milliseconds === value.milliseconds;\n    }\n    toString(useAbbreviation) {\n        const\n            me             = this,\n            abbreviationFn = useAbbreviation ? 'getShortNameOfUnit' : 'getLocalizedNameOfUnit';\n        return me.isValid ? `${me._magnitude} ${DateHelper[abbreviationFn](me._unit, me._magnitude !== 1)}` : '';\n    }\n    toJSON() {\n        return this.toString();\n    }\n    valueOf() {\n        return this.milliseconds;\n    }\n};\nDuration._$name = 'Duration';", "import Base from '../Base.js';\nimport DateHelper from '../helper/DateHelper.js';\nimport ObjectHelper from '../helper/ObjectHelper.js';\nimport FunctionHelper from '../helper/FunctionHelper.js';\nimport Identifiable from '../mixin/Identifiable.js';\nimport Duration from '../data/Duration.js';\n/**\n * @module Core/util/CollectionFilter\n */\nconst\n    nestedValueReducer = (object, path) => object?.[path],\n    relativeDateUnitRegExp = /^is(this|next|last)(week|month|year)$/i,\n    relativeDateOperators = [\n        'isToday',\n        'isTomorrow',\n        'isYesterday',\n        'isThisWeek',\n        'isNextWeek',\n        'isLastWeek',\n        'isThisMonth',\n        'isNextMonth',\n        'isLastMonth',\n        'isThisYear',\n        'isNextYear',\n        'isLastYear',\n        'isYearToDate'\n    ];\n/**\n * A class which encapsulates a single filter operation which may be applied to any object to decide whether to\n * include or exclude it from a set.\n *\n * A CollectionFilter generally has at least three main properties:\n *\n * * `property` - The name of a property in candidate objects from which to extract the value to test\n * * `value` - The value which  this filter uses to test against.\n * * `operator` - The comparison operator, eg: `'='` or `'>'` etc.\n *\n * Given these three essential values, further configurations may affect how the filter is applied:\n *\n * * `caseSensitive` - If configured as `false`, string comparisons are case insensitive.\n * * `convert` - A function which, when passed the extracted value from the candidate object, returns the value to test.\n *\n * A filter may also be configured with a single `filterBy` property. This function is just passed the raw\n * candidate object and must return `true` or `false`.\n *\n * A CollectionFilter may be configured to encapsulate a single filtering function by passing that function as the sole\n * parameter to the constructor:\n *\n *     new CollectionFilter(candidate => candidate.title.contains('search string'));\n *\n */\nexport default class CollectionFilter extends Base.mixin(Identifiable) {\n    static $name = 'CollectionFilter';\n    static get defaultConfig() {\n        return {\n            /**\n             * The value against which to compare the {@link #config-property} of candidate objects.\n             * @config {*}\n             */\n            value : null,\n            /**\n             * The operator to use when comparing a candidate object's {@link #config-property} with this CollectionFilter's {@link #config-value}.\n             * May be:\n             * `'='`, `'!='`, `'>'`, `'>='`, `'<'`, `'<='`, `'*'`,\n             * `'startsWith'`, `'endsWith'`, `'isIncludedIn'`, `'includes'`, `'doesNotInclude'`,\n             * `'empty'`, `'notEmpty'`, `'between'`, `'notBetween'`, `'sameDay'`,\n             * `'isToday'`, `'isTomorrow'`, `'isYesterday'`, `'isThisWeek'`, `'isLastWeek'`, `'isNextWeek'`, `'isThisMonth'`,\n             * `'isLastMonth'`, `'isNextMonth'`, `'isThisYear'`, `'isLastYear'`, `'isNextYear'`, `'isYearToDate`',\n             * `'isTrue'`, `'isFalse'`\n             * @config {'='|'!='|'>'|'>='|'<'|'<='|'*'|'startsWith'|'endsWith'|'isIncludedIn'|'isNotIncludedIn'|'includes'|'doesNotInclude'|'empty'|'notEmpty'|'between'|'notBetween'|'sameDay'|'isToday'|'isTomorrow'|'isYesterday'|'isThisWeek'|'isLastWeek'|'isNextWeek'|'isThisMonth'|'isLastMonth'|'isNextMonth'|'isThisYear'|'isLastYear'|'isNextYear'|'isYearToDate'|'isTrue'|'isFalse'}\n             */\n            operator : null,\n            /**\n             * May be used in place of the {@link #config-property}, {@link #config-value} and {@link #config-property} configs. A function which\n             * accepts a candidate object and returns `true` or `false`\n             * @config {Function}\n             */\n            filterBy : null,\n            /**\n             * A function which accepts a value extracted from a candidate object using the {@link #config-property} name, and\n             * returns the value which the filter should use to compare against its {@link #config-value}.\n             * @config {Function}\n             */\n            convert : null,\n            /**\n             * Configure as `false` to have string comparisons case insensitive.\n             * @config {Boolean}\n             * @default\n             */\n            caseSensitive : true,\n            /**\n             * The `id` of this Filter for when used by a {@link Core.util.Collection} Collection.\n             * By default the `id` is the {@link #config-property} value.\n             * @config {String}\n             */\n            id : null,\n            // Type is required to process the Date value in State API. Store doesn't always know about field type to\n            // process filter value, when it applies it from the state, e.g. when you don't declare model field as `date`\n            // type but provide a Date instance there. When DateColumn is used to shows this field, it could add date\n            // filters to the store. When store is applying state it cannot just infer type, because model doesn't\n            // declare it. Only column knows. So to properly process the Date instance for the filter State API would\n            // have to process the field additionally, checking model field type and column type. So it is simpler to\n            // make Filter to put this information. That way when filter is instantiated by the store, it can gracefully\n            // handle value processing, converting date string to the Date instance.\n            // Date is the only known value type so far which requires this processing.\n            type : null,\n            /**\n             * Setting the `internal` config on a filter means that it is a fixed part of your store's operation.\n             *\n             * {@link Core.data.Store#function-clearFilters} does not remove `internal` filters. If you add an\n             * `internal` filter, you must explicitly remove it if it is no longer required.\n             *\n             * Grid features which offer column-based filtering do *not* ingest existing store filters on\n             * their data field if the filter is `internal`\n             * @config {Boolean}\n             * @default false\n             */\n            internal : null,\n            /**\n             * When `true`, the filter will not be applied.\n             * @config {Boolean}\n             * @default\n             */\n            disabled : false\n        };\n    }\n    static get configurable() {\n        return {\n            /**\n             * The name of a property of candidate objects which yields the value to compare against this CollectionFilter's {@link #config-value}.\n             * @member {String} property\n             */\n            /**\n             * The name of a property of candidate objects which yields the value to compare against this CollectionFilter's {@link #config-value}.\n             * @config {String}\n             */\n            property : null\n        };\n    }\n    construct(config) {\n        if (typeof config === 'function') {\n            config = {\n                filterBy : config\n            };\n        }\n        // If Filter is created without a type (yet everything except applying state) create one\n        if (!config.type) {\n            if (DateHelper.isDate(config.value) || (Array.isArray(config.value) && config.value.every(DateHelper.isDate))) {\n                config.type = 'date';\n            }\n            else if (config.value instanceof Duration) {\n                config.type = 'duration';\n            }\n        }\n        // If type already exist, it means we are applying state and should process value\n        else {\n            if (config.type === 'date' && config.value != null && !Array.isArray(config.value)) {\n                config.value = new Date(config.value);\n            }\n            else if (config.type === 'duration' && config.value != null && !Array.isArray(config.value)) {\n                config.value = new Duration(config.value);\n            }\n        }\n        super.construct(config);\n    }\n    /**\n     * When in a Collection (A Collection holds its Filters in a Collection), we need an id.\n     * @property {String}\n     * @private\n     */\n    get id() {\n        if (!this._id) {\n            // Internal filters get a special, unique property so that they cannot collide\n            // with default filters for a field.\n            if (this.internal) {\n                this._id = CollectionFilter.generateId(`b-internal-${this.property}-filter-`);\n            }\n            else {\n                this._id = this.property || CollectionFilter.generateId('b-filter-');\n            }\n        }\n        return this._id;\n    }\n    set id(id) {\n        this._id = id;\n    }\n    onChange(propertyChanged) {\n        const me = this;\n        // Inform any owner (eg a Store), that it has to reassess its CollectionFilters\n        if (!me.isConfiguring && me.owner?.onFilterChanged && !me.owner.isConfiguring) {\n            me.owner.onFilterChanged(me, propertyChanged);\n        }\n    }\n    get filterBy() {\n        return this._filterBy || this.defaultFilterBy;\n    }\n    /**\n     * May be used in place of the {@link #config-property}, {@link #config-value} and {@link #config-property} configs. A function which\n     * accepts a candidate object and returns `true` or `false`\n     * @type {Function}\n     */\n    set filterBy(filterBy) {\n        this._filterBy = filterBy;\n    }\n    defaultFilterBy(candidate) {\n        const me = this;\n        let candidateValue;\n        // check if is nested property\n        if (me._propertyItems.length > 1) {\n            // support nested props (https://github.com/bryntum/support/issues/1861)\n            candidateValue = me._propertyItems.reduce(nestedValueReducer, candidate);\n        }\n        else {\n            candidateValue = candidate[me.property];\n        }\n        return me[me.operator](me.convert(candidateValue));\n    }\n    updateProperty(property) {\n        this._propertyItems = property.split('.');\n        // Signal to owner about filter change\n        this.onChange('property');\n    }\n    /**\n     * The value against which to compare the {@link #config-property} of candidate objects.\n     * @type {*}\n     */\n    set value(value) {\n        const me = this;\n        me._value = value;\n        // Filter value is a processed value to be used by the comparators. Useful when value is object, like Duration field\n        if (Array.isArray(value) && (\n            { date : 1, duration : 1 }[me.type] ||\n            (value.length > 0 && typeof value[0] === 'string')\n        )) {\n            me._filterValue = value.map(v => me.convert(v));\n        }\n        else if (!me.caseSensitive && Array.isArray(value) && value.length > 0 && typeof value[0] === 'string') {\n            me._filterValue = value.map(s => s?.toLowerCase());\n        }\n        else if (!me.caseSensitive && typeof value === 'string') {\n            me._filterValue = value.toLowerCase();\n        }\n        else {\n            me._filterValue = me.convert(value);\n        }\n        // Signal to owner about filter change\n        me.onChange('value');\n    }\n    get value() {\n        return this._value;\n    }\n    get filterValue() {\n        return this._filterValue;\n    }\n    /**\n     * The operator to use when comparing a candidate object's {@link #config-property} with this CollectionFilter's {@link #config-value}.\n     * May be:\n     * `'='`, `'!='`, `'>'`, `'>='`, `'<'`, `'<='`, `'*'`,\n     * `'startsWith'`, `'endsWith'`, `'isIncludedIn'`, `'includes'`, `'doesNotInclude'`,\n     * `'empty'`, `'notEmpty'`, `'between'`, `'notBetween'`,\n     * `'isToday'`, `'isTomorrow'`, `'isYesterday'`, `'isThisWeek'`, `'isLastWeek'`, `'isNextWeek'`, `'isThisMonth'`,\n     * `'isLastMonth'`, `'isNextMonth'`, `'isThisYear'`, `'isLastYear'`, `'isNextYear'`, `'isYearToDate`',\n     * `'isTrue'`, `'isFalse'`\n     * @type {'='|'!='|'>'|'>='|'<'|'<='|'*'|'startsWith'|'endsWith'|'isIncludedIn'|'isNotIncludedIn'|'includes'|'doesNotInclude'|'empty'|'notEmpty'|'between'|'notBetween'|'isToday'|'isTomorrow'|'isYesterday'|'isThisWeek'|'isLastWeek'|'isNextWeek'|'isThisMonth'|'isLastMonth'|'isNextMonth'|'isThisYear'|'isLastYear'|'isNextYear'|'isYearToDate'|'isTrue'|'isFalse'}\n     */\n    set operator(operator) {\n        this._operator = operator;\n        // Signal to owner about filter change\n        this.onChange('operator');\n    }\n    get operator() {\n        const me = this;\n        if (me._operator) {\n            return me._operator;\n        }\n        if (Array.isArray(me.filterValue)) {\n            return 'isIncludedIn';\n        }\n        return typeof me.filterValue === 'string' ? '*' : '=';\n    }\n    convert(value) {\n        // This is a workaround for filterbar feature: it always converts input value to string. When date is typed,\n        // it is converted into string, and Date.valueOf() would return number. So if we are matching date against string\n        // type, we should not convert it.\n        if (this.operator !== 'sameTime' && !(typeof this.filterValue === 'string' && value instanceof Date)) {\n            if (this.operator === 'sameDay') {\n                value = DateHelper.clearTime(value);\n            }\n            // if value is a complex type, try to access `value` property to get primitive value\n            value = value?.valueOf() ?? value;\n        }\n        value = !this.caseSensitive && (typeof value === 'string') ? value.toLowerCase() : value;\n        return value;\n    }\n    filter(candidate) {\n        return this.filterBy(candidate);\n    }\n    startsWith(v) {\n        return String(v).startsWith(this.filterValue);\n    }\n    endsWith(v) {\n        return String(v).endsWith(this.filterValue);\n    }\n    isIncludedIn(v) {\n        return this.filterValue.length === 0 || this.filterValue.includes(v);\n    }\n    isNotIncludedIn(v) {\n        return !this.isIncludedIn(v);\n    }\n    includes(v) {\n        return this.filterValue.length === 0 || String(v).includes(this.filterValue);\n    }\n    doesNotInclude(v) {\n        return !this.includes(v);\n    }\n    sameTime(v) {\n        return DateHelper.isSameTime(v, this.filterValue);\n    }\n    sameDay(v) {\n        return v === this.filterValue;\n    }\n    '='(v) {\n        return ObjectHelper.isEqual(v, this.filterValue);\n    }\n    '!='(v) {\n        return !ObjectHelper.isEqual(v, this.filterValue);\n    }\n    '>'(v) {\n        return ObjectHelper.isMoreThan(v, this.filterValue);\n    }\n    '>='(v) {\n        return ObjectHelper.isMoreThan(v, this.filterValue) || ObjectHelper.isEqual(v, this.filterValue);\n    }\n    '<'(v) {\n        return ObjectHelper.isLessThan(v, this.filterValue);\n    }\n    '<='(v) {\n        return ObjectHelper.isLessThan(v, this.filterValue) || ObjectHelper.isEqual(v, this.filterValue);\n    }\n    '*'(v) {\n        return ObjectHelper.isPartial(v, this.filterValue);\n    }\n    between(v) {\n        const [start, end] = this._filterValue;\n        return (ObjectHelper.isMoreThan(v, start) || ObjectHelper.isEqual(v, start)) &&\n            (ObjectHelper.isLessThan(v, end) || ObjectHelper.isEqual(v, end));\n    }\n    notBetween(v) {\n        return !this.between(v);\n    }\n    empty(v) {\n        return v === undefined || v === null || String(v).length === 0;\n    }\n    notEmpty(v) {\n        return !this.empty(v);\n    }\n    isToday(v) {\n        // Values have already been converted to fixed date range\n        return this.between(v);\n    }\n    isTomorrow(v) {\n        return this.between(v);\n    }\n    isYesterday(v) {\n        return this.between(v);\n    }\n    isThisWeek(v) {\n        return this.between(v);\n    }\n    isNextWeek(v) {\n        return this.between(v);\n    }\n    isLastWeek(v) {\n        return this.between(v);\n    }\n    isThisMonth(v) {\n        return this.between(v);\n    }\n    isNextMonth(v) {\n        return this.between(v);\n    }\n    isLastMonth(v) {\n        return this.between(v);\n    }\n    isThisYear(v) {\n        return this.between(v);\n    }\n    isNextYear(v) {\n        return this.between(v);\n    }\n    isLastYear(v) {\n        return this.between(v);\n    }\n    isYearToDate(v) {\n        return this.between(v);\n    }\n    isTrue(v) {\n        return v === true;\n    }\n    isFalse(v) {\n        return v === false;\n    }\n    // Fill in actual dates relative to now\n    setRelativeDateValues() {\n        this._filterValue = CollectionFilter.getRelativeDateRange(this._operator)\n            .map(date => date.valueOf());\n    }\n    static getRelativeDateRange(relativeExpr, now = new Date()) {\n        let todayStart, tomorrowStart, parts, oneTimeUnit, unitStart, which, timeUnit;\n        switch (relativeExpr) {\n            case 'isYearToDate':\n                return [DateHelper.floor(now, '1 year'), now];\n            case 'isToday':\n                todayStart = DateHelper.floor(now, '1 day');\n                return [todayStart, DateHelper.add(todayStart, 1, 'day')];\n            case 'isYesterday':\n                todayStart = DateHelper.floor(now, '1 day');\n                return [DateHelper.add(todayStart, -1, 'day'), todayStart];\n            case 'isTomorrow':\n                tomorrowStart = DateHelper.getStartOfNextDay(now);\n                return [tomorrowStart, DateHelper.add(tomorrowStart, 1, 'day')];\n            case 'isThisWeek':\n            case 'isNextWeek':\n            case 'isLastWeek':\n            case 'isThisMonth':\n            case 'isNextMonth':\n            case 'isLastMonth':\n            case 'isThisYear':\n            case 'isNextYear':\n            case 'isLastYear':\n                parts = relativeExpr.toLowerCase().match(relativeDateUnitRegExp);\n                if (!parts) {\n                    throw new Error(`Unrecognized relative date expression: ${relativeExpr}`);\n                }\n                [, which, timeUnit] = parts;\n                oneTimeUnit = `1 ${timeUnit}`;\n                unitStart = DateHelper.floor(now, oneTimeUnit);\n                if (which === 'next') {\n                    unitStart = DateHelper.add(unitStart, 1, timeUnit);\n                }\n                else if (which === 'last') {\n                    unitStart = DateHelper.add(unitStart, -1, timeUnit);\n                }\n                return [unitStart, DateHelper.add(unitStart, 1, timeUnit)];\n        }\n    }\n    // Accepts an array or a Collection\n    static generateFiltersFunction(filters) {\n        if (!filters || (!filters.length && !filters.count)) {\n            return FunctionHelper.returnTrue;\n        }\n        for (const filter of filters) {\n            if (filter.type === 'date' && relativeDateOperators.includes(filter._operator)) {\n                filter.setRelativeDateValues();\n            }\n        }\n        return function(candidate) {\n            let match = true;\n            for (const filter of filters) {\n                // Skip disabled filters\n                if (!filter.disabled) {\n                    match = filter.filter(candidate);\n                }\n                if (!match) {\n                    break;\n                }\n            }\n            return match;\n        };\n    }\n}\nCollectionFilter._$name = 'CollectionFilter';", "import ObjectHelper from './ObjectHelper.js';\n/**\n * @module Core/helper/IdHelper\n */\n// Id generation should be on a per page basis, not per module\nconst idCounts = ObjectHelper.getPathDefault(globalThis, 'bryntum.idCounts', Object.create(null));\n/**\n * IdHelper provides unique ID generation.\n *\n * This class is not intended for application use, it is used internally by the Bryntum infrastructure.\n * @internal\n */\nexport default class IdHelper {\n    /**\n     * Generate a new id, using IdHelpers internal counter and a prefix\n     * @param {String} prefix Id prefix\n     * @returns {String} Generated id\n     */\n    static generateId(prefix = 'generatedId') {\n        // This produces \"b-foo-1, b-foo-2, ...\" for each prefix independently of the others. In other words, it makes\n        // id's more stable since the counter is on a per-class basis.\n        return prefix + (idCounts[prefix] = (idCounts[prefix] || 0) + 1);\n    }\n}\nIdHelper._$name = 'IdHelper';", "import Base from '../Base.js';\nimport IdHelper from '../helper/IdHelper.js';\n/**\n * @module Core/util/CollectionSorter\n */\n/**\n * A class which encapsulates a single sorter operation which may be applied to a {@link Core.util.Collection} to\n * order its elements in a specific way.\n *\n * A CollectionSorter generally has two properties:\n *\n * * `property` - The name of a property in collection objects by which to sort\n * * `direction` - The sort direction, `'ASC'` or `'DESC'`.\n *\n * It may also be configured with just a {@link #config-sortFn} function which returns the desired comparison\n * result when passed two objects to compare. Note that this does *not* require or use the\n * {@link #config-property} config. Two collection items are passed for comparison.\n *\n * Further configurations may affect how the sorter is applied:\n *\n * * `convert` - A function which, when passed the {@link #config-property} value from\n * a collection object, returns the value to sort by.\n *\n * A CollectionSorter may be configured to encapsulate a {@link #config-sortFn} by passing that function as the sole\n * parameter to the constructor:\n *\n *     new CollectionSorter((lhs, rhs) => {\n *         lhs = lhs.customerDetails.companyName.toLowerCase();\n *         rhs = rhs.customerDetails.companyName.toLowerCase();\n *\n *         if (lhs < rhs) {\n *             return -1;\n *         }\n *         else if (lhs > rhs) {\n *             return 1;\n *         }\n *         else {\n *             return 0;\n *         }\n *     });\n *\n */\nexport default class CollectionSorter extends Base {\n    static get defaultConfig() {\n        return {\n            /**\n             * The name of a property of collection objects which yields the value to sort by.\n             * @config {String}\n             */\n            property : null,\n            /**\n             * The direction to sort in, `'ASC'` or `'DESC'`\n             * @config {'ASC'|'DESC'}\n             * @default\n             */\n            direction : 'ASC',\n            /**\n             * A function which takes the place of using {@link #config-property} and {@link #config-direction}.\n             * The function is passed two objects from the collection to compare and must return the comparison result.\n             * @config {Function}\n             */\n            sortFn : null,\n            /**\n             * When using {@link #config-property}, this may be specified as a function which takes the raw\n             * property value and returns the value to actually sort by.\n             * @config {Function}\n             */\n            convert : null,\n            /**\n             * The `id` of this Sorter for when used by a {@link Core.util.Collection} Collection.\n             * By default the `id` is the {@link #config-property} value.\n             * @config {String}\n             */\n            id : null,\n            /**\n             * Use `localeCompare()` when sorting, which lets the browser sort in a locale specific order. Set to `true`,\n             * a locale string or a locale config to enable.\n             *\n             * Enabling this has big negative impact on sorting performance. For more info on `localeCompare()`, see\n             * [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare).\n             *\n             * ```javascript\n             * collection.addSorter({ field: 'name', useLocaleSort : 'sv-SE' });\n             * ```\n             *\n             * @config {Boolean|String|Object}\n             * @default false\n             */\n            useLocaleSort : null\n        };\n    }\n    construct(config) {\n        if (typeof config === 'function') {\n            config = {\n                sortFn : config\n            };\n        }\n        super.construct(config);\n    }\n    /**\n     * When in a Collection (A Collection holds its Sorters in a Collection), we need an id.\n     * @property {String}\n     * @private\n     */\n    get id() {\n        return this._id || (this._id = this.property || IdHelper.generateId('b-sorter'));\n    }\n    set id(id) {\n        this._id = id;\n    }\n    set sortFn(sortFn) {\n        this._sortFn = sortFn;\n    }\n    get sortFn() {\n        if (this._sortFn) {\n            return this._sortFn;\n        }\n        return this.defaultSortFn;\n    }\n    /**\n     * Default sortFn used when no sortFn specified. Uses the {@link #config-property},\n     * {@link #config-direction}, and {@link #config-convert}.\n     * @private\n    */\n    defaultSortFn(lhs, rhs) {\n        const\n            me                                   = this,\n            { convert, property, useLocaleSort } = me,\n            multiplier                           = me.direction.toLowerCase() === 'desc' ? -1 : 1;\n        lhs = lhs[property];\n        rhs = rhs[property];\n        if (convert) {\n            lhs = convert(lhs);\n            rhs = convert(rhs);\n        }\n        if (useLocaleSort && lhs != null && rhs != null && typeof lhs === 'string') {\n            // Use systems locale\n            if (useLocaleSort === true) {\n                return String(lhs).localeCompare(rhs);\n            }\n            // Use specified locale\n            if (typeof useLocaleSort === 'string') {\n                return String(lhs).localeCompare(rhs, useLocaleSort);\n            }\n            // Use locale config\n            if (typeof useLocaleSort === 'object') {\n                return String(lhs).localeCompare(rhs, useLocaleSort.locale, useLocaleSort);\n            }\n        }\n        return ((lhs > rhs) ? 1 : (lhs < rhs ? -1 : 0)) * multiplier;\n    }\n    static generateSortFunction(sorters, tieBreaker) {\n        const items = sorters.isCollection ? sorters.values : sorters,\n            n = items.length;\n        return (lhs, rhs) => {\n            let comp, i;\n            for (i = 0; i < n; ++i) {\n                comp = items[i].sortFn(lhs, rhs);\n                if (comp) {\n                    return comp;\n                }\n            }\n            return tieBreaker ? tieBreaker(lhs, rhs) : 0;\n        };\n    }\n}\nCollectionSorter._$name = 'CollectionSorter';", "import Base from '../Base.js';\nimport Events from '../mixin/Events.js';\nimport CollectionFilter from './CollectionFilter.js';\nimport CollectionSorter from './CollectionSorter.js';\nimport FunctionHelper from '../helper/FunctionHelper.js';\nimport ArrayHelper from '../helper/ArrayHelper.js';\n/**\n * @module Core/util/Collection\n */\nconst\n    return0                 = () => 0,\n    reverseNumericSortFn    = (a, b) => b - a,\n    filteredIndicesProperty = Symbol('filteredIndicesProperty'),\n    emptyArray              = Object.freeze([]),\n    sortEvent               = Object.freeze({\n        action   : 'sort',\n        added    : emptyArray,\n        removed  : emptyArray,\n        replaced : emptyArray\n    }),\n    filterEvent             = Object.freeze({\n        action   : 'filter',\n        added    : emptyArray,\n        removed  : emptyArray,\n        replaced : emptyArray\n    }),\n    keyTypes               = {\n        string : 1,\n        number : 1\n    };\n// Adds a single item to a single index using the specified key\nfunction addItemToIndex(item, index, key) {\n    // Unique holds a single entry\n    if (index.unique !== false) {\n        index.set(key, item);\n    }\n    // Non-unique index holds a Set\n    else {\n        let set = index.get(key);\n        // Add a set if this is the first entry\n        if (!set) {\n            set = new Set();\n            index.set(key, set);\n        }\n        // Add entry to the set\n        set.add(item);\n    }\n}\n// Removes a single item from a single index using the specified key\nfunction removeItemFromIndex(item, index, key) {\n    // Unique holds single entry, remove it\n    if (index.unique !== false) {\n        index.delete(key);\n    }\n    else if (index.has(key)) {\n        // Remove from set\n        index.get(key).delete(item);\n        // Remove turned empty set\n        if (!index.get(key).size) {\n            index.delete(key);\n        }\n    }\n}\n// Used to fully build the indices, normal and filtered (if used). Better to do full builds for performance reasons\n// when assigning new datasets. For other CRUD operations, indices are kept up to date elsewhere\nfunction doRebuildIndices(values, indices, keyProps, indexCount) {\n    for (let i = 0; i < values.length; i++) {\n        const item = values[i];\n        for (let j = 0; j < indexCount; j++) {\n            const\n                keyProp = keyProps[j],\n                key     = item[keyProp],\n                index   = indices[keyProp];\n            addItemToIndex(item, index, key);\n        }\n    }\n}\n/**\n * A class which encapsulates a {@link #function-get keyed},\n * {@link #function-addFilter filterable}, {@link #function-addSorter sortable}\n * collection of objects. Entries may not be atomic data types such as `string` or `number`.\n *\n * The entries are keyed by their `id` which is determined by interrogating the {@link #config-idProperty}.\n *\n * To filter a Collection, add a {@link Core.util.CollectionFilter CollectionFilter}\n * using the {@link #function-addFilter} method. A Filter config object may be specified here\n * which will be promoted to a CollectionFilter instance.\n *\n * To sort a Collection, add a {@link Core.util.CollectionSorter CollectionSorter}\n * using the {@link #function-addSorter} method. A Sorter config object may be specified here\n * which will be promoted to a CollectionSorter instance.\n */\nexport default class Collection extends Base.mixin(Events) {\n    _sortFunction = null;\n    _addedValues = null;\n    //region Config\n    static get configurable() {\n        return {\n            /**\n             * Specify the name of the property of added objects which provides the lookup key\n             * @config {String}\n             * @default\n             */\n            idProperty : 'id',\n            /**\n             * Specify the names or index configs of properties which are to be indexed for fast lookup.\n             *\n             * Index configs use the format `{ property : string, unique : boolean }`. Unique indices stores one index\n             * per entry, non-unique stores a `Set`. If left out, `unique` defaults to `true`\n             *\n             * @config {String[]|Object[]}\n             * @property {String} property Property to index by\n             * @property {Boolean} [unique=true] `true` for unique keys (~primary keys), `false` for non-unique keys\n             * (~foreign keys)\n             */\n            extraKeys : null,\n            /**\n             * Automatically apply filters on item add.\n             * @config {Boolean}\n             * @default\n             */\n            autoFilter : true,\n            /**\n             * Automatically apply sorters on item add.\n             * @config {Boolean}\n             * @default\n             */\n            autoSort : true,\n            /**\n             * A {@link Core.util.CollectionSorter Sorter}, or Sorter config object, or\n             * an array of these, to use to sort this Collection.\n             * @config {CollectionSorterConfig[]}\n             * @default\n             */\n            sorters : {\n                $config : ['lazy'],\n                value   : []\n            }\n        };\n    }\n    get isCollection() {\n        return true;\n    }\n    //endregion\n    //region Init & destroy\n    construct(config) {\n        /**\n         * A counter which is incremented whenever the Collection is mutated in a meaningful way.\n         *\n         * If a {@link #function-splice} call results in no net replacement, removal or addition,\n         * then the `generation` will not be incremented.\n         * @property {Number}\n         * @readonly\n         */\n        this.generation = 0;\n        this._values = [];\n        super.construct(config);\n    }\n    doDestroy() {\n        super.doDestroy();\n        const me = this;\n        me._values.length = 0;\n        if (me.isFiltered) {\n            me._filteredValues.length = 0;\n            me.filters.destroy();\n        }\n        me._sorters?.destroy();\n    }\n    //endregion\n    //region \"CRUD\"\n    /**\n     * Clears this collection.\n     */\n    clear() {\n        const\n            me      = this,\n            removed = me._values.slice();\n        if (me.totalCount) {\n            me._values.length = 0;\n            if (me._filteredValues) {\n                me._filteredValues.length = 0;\n            }\n            me._indicesInvalid = true;\n            // Indicate to observers that data has changed.\n            me.generation++;\n            me.trigger('change', {\n                action : 'clear',\n                removed\n            });\n        }\n    }\n    /**\n     * Compares the content of this Collection with the content of the passed Collection or\n     * with the passed array. Order insensitive. This returns `true` if the two objects passed\n     * contain the same set of items.\n     * @param {Core.util.Collection|Array} other The Collection or array to compare with.\n     * @param {Function} [map] Optionally a function to convert the items into a comparable object\n     * to compare. For example `item => item.id` could be used to compare the ids of the\n     * constituent items.\n     * @returns {Boolean} `true` if the two objects passed have the same content.\n     */\n    equals(other, map) {\n        if (other.isCollection) {\n            other = other.values;\n        }\n        if (other.length === this.count) {\n            let { values } = this;\n            if (map) {\n                other = other.map(map);\n                values = values.map(map);\n            }\n            return ArrayHelper.delta(other, values).inBoth.length === this.count;\n        }\n        return false;\n    }\n    /**\n     * Replaces the internal `values` array with the passed `values`, or `filteredValues` array with the passed `filteredValues`.\n     * If `filteredValues` are not passed explicitly, but storage is filtered, decides internally `values` or `filteredValues` should\n     * be replaced by passed `values`.\n     *\n     * Note that this takes ownership of the array, and the array must not be mutated by outside code.\n     *\n     * This is an internal utility method, not designed for use by application code.\n     *\n     * @param {Object} params Values and parameters to replace\n     * @param {Object[]} params.values The new `values` array\n     * @param {Object[]} [params.filteredValues] The new `filteredValues` array. Applicable only when storage is filtered.\n     * @param {Boolean} [params.silent=false] If true, `change` event will not be fired\n     * @param {Boolean} [params.isNewDataset=false] If true, `values` is a new dataset\n     * @fires change\n     * @internal\n     */\n    replaceValues({ values, filteredValues, silent = false, isNewDataset = false }) {\n        const me = this;\n        let replacedValues, replacedFilteredValues;\n        // The isNewDataset flag is passed by store#loadData to indicate that it's\n        // a new data load, and that local filters can be applied.\n        // Other use cases are for purely local updates of an existing dataset such as\n        // refreshing the visible data with a values array containing group headers.\n        if (me.isFiltered && !isNewDataset) {\n            const filteredPassed = Boolean(filteredValues);\n            // If `filteredValues` are missing, take `values` as a source of filtered values\n            if (!filteredPassed) {\n                filteredValues = values.slice();\n                values = null;\n            }\n            // otherwise check if non-filtered values are passed together with filtered, and replace them too\n            else if (values) {\n                replacedValues = me._values;\n                me._values = values.slice();\n            }\n            replacedFilteredValues = me._filteredValues;\n            me._filteredValues = filteredValues.slice();\n        }\n        else {\n            replacedValues = me._values;\n            me._values = values.slice();\n            filteredValues = null;\n            if (me.isFiltered && isNewDataset && me.autoFilter) {\n                me._filterFunction = null;\n                me._filteredValues = me._values.filter(me.filterFunction);\n            }\n            else if (me._filteredValues) {\n                me._filteredValues.length = 0;\n            }\n        }\n        me._indicesInvalid = true;\n        me._addedValues = undefined;\n        // Indicate to observers that data has changed.\n        me.generation++;\n        if (!silent) {\n            me.trigger('change', {\n                action : 'replaceValues',\n                replacedValues,\n                replacedFilteredValues,\n                values,\n                filteredValues\n            });\n        }\n    }\n    set values(values) {\n        // Want a full rebuild for new dataset, less costly than doing it per item\n        this.invalidateIndices();\n        this.splice(0, this._values.length, values);\n    }\n    /**\n     * The set of values of this Collection. If this Collection {@link #property-isFiltered},\n     * this yields the filtered data set.\n     *\n     * Setting this property replaces the data set.\n     * @property {Object[]}\n     */\n    get values() {\n        return this.isFiltered ? this._filteredValues : this._values;\n    }\n    /**\n     * The set of filtered values of this Collection (those matching the current filters).\n     * @property {Object[]}\n     * @private\n     */\n    get filteredValues() {\n        return this._filteredValues;\n    }\n    /**\n     * Iterator that allows you to do `for (const item of collection)`\n     */\n    [Symbol.iterator]() {\n        return this.values[Symbol.iterator]();\n    }\n    /**\n     * Executes the passed function for each item in this Collection, passing in the item,\n     * ths index, and the full item array.\n     * @param {Function} fn The function to execute.\n     * @param {Boolean} [ignoreFilters=false] Pass `true` to include all items, bypassing filters.\n     */\n    forEach(fn, ignoreFilters = false) {\n        (this.isFiltered && !ignoreFilters ? this._filteredValues : this._values).forEach(fn);\n    }\n    /**\n     * Extracts ths content of this Collection into an array based upon the passed\n     * value extraction function.\n     * @param {Function} fn A function, which, when passed an item, returns a value to place into the resulting array.\n     * @param {Boolean} [ignoreFilters=false] Pass `true` to process an item even if it is filtered out.\n     * @returns {Object[]} An array of values extracted from this Collection.\n     */\n    map(fn, ignoreFilters = false) {\n        return (this.isFiltered && !ignoreFilters ? this._filteredValues : this._values).map(fn);\n    }\n    /**\n     * Returns the first item in this Collection which elicits a *truthy* return value from the passed function.\n     * @param {Function} fn A function, which, when passed an item, returns `true` to select it as the item to return.\n     * @param {Boolean} [ignoreFilters=false] Pass `true` to include filtered out items.\n     * @returns {Object} The matched item, or `undefined`.\n     */\n    find(fn, ignoreFilters = false) {\n        return (this.isFiltered && !ignoreFilters ? this._filteredValues : this._values).find(fn);\n    }\n    get first() {\n        return this.values[0];\n    }\n    get last() {\n        return this.values[this.count - 1];\n    }\n    /**\n     * The set of all values of this Collection regardless of filters applied.\n     * @readonly\n     * @property {Object[]}\n     */\n    get allValues() {\n        return this._values;\n    }\n    /**\n     * The set of values added to this Collection since the last sort or replaceValues operation.\n     * @private\n     * @readonly\n     * @property {Object[]}\n     */\n    get addedValues() {\n        return this._addedValues;\n    }\n    /**\n     * This method ensures that every item in this Collection is replaced by the matched by\n     * `id` item in the other Collection.\n     *\n     * By default, any items in this Collection which are __not__ in the other Collection are removed.\n     *\n     * If the second parameter is passed as `false`, then items which are not in the other\n     * Collection are not removed.\n     *\n     * This can be used for example when updating a selected record Collection when a new\n     * Store or new store dataset arrives. The selected Collection must reference the latest\n     * versions of the selected record `id`s\n     * @param {Core.util.Collection} other The Collection whose items to match.\n     */\n    match(other, allowRemove = true) {\n        const\n            me          = this,\n            { _values } = me,\n            toRemove    = [];\n        // Update selected records collection\n        me.forEach(item => {\n            const newInstance = other.get(item.id, true);\n            // If item exists in other Collection, update this with a reference to the other version.\n            // This must happen silently, so splice the _values array\n            if (newInstance) {\n                const\n                    index       = me.indexOf(item, true),\n                    oldInstance = _values[index];\n                // Replace the instance directly into our values\n                _values[index] = newInstance;\n                // Ensure the indexes match\n                me.removeFromIndices(oldInstance);\n                me.addToIndices(newInstance);\n            }\n            else if (allowRemove) {\n                toRemove.push(item);\n            }\n        });\n        if (toRemove.length) {\n            me.remove(toRemove);\n        }\n        // The filtered set must match the new reality.\n        if (me.isFiltered) {\n            me._filteredValues = me._values.filter(me.filterFunction);\n        }\n        return toRemove;\n    }\n    /**\n     * Adds items to this Collection. Multiple new items may be passed.\n     *\n     * By default, new items are appended to the existing values.\n     *\n     * Any {@link #property-sorters} {@link #property-sorters} present are re-run.\n     *\n     * Any {@link #property-filters} {@link #property-filters} present are re-run.\n     *\n     * *Note that if application functionality requires add and remove, the\n     * {@link #function-splice} operation is preferred as it performs both\n     * operations in an atomic manner*\n     * @param  {...Object} items The item(s) to add.\n     */\n    add(...items) {\n        if (items.length === 1) {\n            this.splice(this._values.length, null, ...items);\n        }\n        else {\n            this.splice(this._values.length, null, items);\n        }\n    }\n    /**\n     * Removes items from this Collection. Multiple items may be passed.\n     *\n     * Any {@link #property-sorters} {@link #property-sorters} present are re-run.\n     *\n     * Any {@link #property-filters} {@link #property-filters} present are re-run.\n     *\n     * *Note that if application functionality requires add and remove, the\n     * {@link #function-splice} operation is preferred as it performs both\n     * operations in an atomic manner*\n     * @param  {...Object} items The item(s) to remove.\n     */\n    remove(...items) {\n        if (items.length === 1) {\n            this.splice(0, ...items);\n        }\n        else {\n            this.splice(0, items);\n        }\n    }\n    /**\n     * Moves an individual item, or a block of items to another location.\n     * @param {Object|Object[]} items The item/items to move.\n     * @param {Object} [beforeItem] the item to insert the first item before. If omitted, the `item`\n     * is moved to the end of the Collection.\n     * @returns {Number} The new index of the `item`.\n     */\n    move(items, beforeItem) {\n        items = ArrayHelper.asArray(items);\n        // Handle the case of move(myItem, myItem). It's a no-op\n        while (items.length && items[0] === beforeItem) {\n            items.shift();\n        }\n        if (!items.length) {\n            return;\n        }\n        const\n            me          = this,\n            { _values } = me,\n            itemIndex   = me.indexOf(items[0], true);\n        // move(record, followingrecord) is a no-op\n        if (items.length === 1 && _values[itemIndex + 1] === beforeItem) {\n            return;\n        }\n        // Silently remove the items that are to be inserted before the \"beforeItem\".\n        me.suspendEvents();\n        me.remove(items);\n        me.resumeEvents();\n        const beforeIndex = beforeItem ? me.indexOf(beforeItem, true) : _values.length;\n        if (beforeIndex === -1) {\n            throw new Error('Collection move beforeItem parameter must be present in Collection');\n        }\n        _values.splice(beforeIndex, 0, ...items);\n        me._indicesInvalid = 1;\n        me.trigger('change', {\n            action : 'move',\n            items,\n            from   : itemIndex,\n            to     : beforeIndex\n        });\n        return beforeIndex;\n    }\n    /**\n     * The core data set mutation method. Removes and adds at the same time. Analogous\n     * to the `Array` `splice` method.\n     *\n     * Note that if items that are specified for removal are also in the `toAdd` array,\n     * then those items are *not* removed then appended. They remain in the same position\n     * relative to all remaining items.\n     *\n     * @param {Number} index Index at which to remove a block of items. Only valid if the\n     * second, `toRemove` argument is a number.\n     * @param {Object[]|Number} [toRemove] Either the number of items to remove starting\n     * at the passed `index`, or an array of items to remove (If an array is passed, the `index` is ignored).\n     * @param  {Object[]|Object} [toAdd] An item, or an array of items to add.\n     */\n    splice(index = 0, toRemove, ...toAdd) {\n        const\n            me         = this,\n            idProperty = me.idProperty,\n            values     = me._values,\n            newIds     = {},\n            removed    = [],\n            replaced   = [],\n            oldCount   = me.totalCount;\n        let added,\n            mutated;\n        // Create an \"newIds\" map of the new items so remove ops know if it's really a replace\n        // {\n        //     1234 : true\n        // }\n        // And an \"added\" array of the items that need adding (there was not already an entry for the id)\n        //\n        if (me.trigger('beforeSplice', { index, toRemove, toAdd }) === false) {\n            return;\n        }\n        if (toAdd) {\n            if (toAdd.length === 1 && Array.isArray(toAdd[0])) {\n                toAdd = toAdd[0];\n            }\n            // Check for replacements if we contain any data\n            if (oldCount && toAdd.length) {\n                // Only risk rebuilding the indices if we are adding\n                const idIndex = me.indices[idProperty];\n                added = [];\n                for (let i = 0; i < toAdd.length; i++) {\n                    const\n                        newItem       = toAdd[i],\n                        id            = newItem[idProperty],\n                        existingItem  = idIndex.get(id),\n                        existingIndex = existingItem ? values.indexOf(existingItem) : -1;\n                    // Register incoming id so that removal leaves it be\n                    newIds[id] = true;\n                    // Incoming id is already present.\n                    // Replace it in place.\n                    if (existingIndex !== -1) {\n                        // If incoming is the same object, it's a no-op\n                        if (values[existingIndex] !== newItem) {\n                            replaced.push([values[existingIndex], newItem]);\n                            values[existingIndex] = newItem;\n                        }\n                    }\n                    else {\n                        added.push(newItem);\n                    }\n                }\n            }\n            // Empty Collection, we simply add what we're passed\n            else {\n                added = toAdd;\n            }\n        }\n        if (toRemove) {\n            // We're removing a chunk starting at index\n            if (typeof toRemove === 'number') {\n                // Ensure we don't walk off the end if the toRemove count exceeds what we contain\n                toRemove = Math.min(toRemove, values.length - index);\n                for (let removeIndex = index; toRemove; --toRemove) {\n                    const id = values[removeIndex][idProperty];\n                    // If the entry here is being replaced, skip the insertion index past it\n                    if (newIds[id]) {\n                        index++;\n                        removeIndex++;\n                    }\n                    // If the id is not among incoming items, remove it\n                    else {\n                        removed.push(values[removeIndex]);\n                        values.splice(removeIndex, 1);\n                        mutated = true;\n                    }\n                }\n            }\n            // We are removing an item/items\n            else {\n                let contiguous = added.length === 0,\n                    lastIdx;\n                toRemove = ArrayHelper.asArray(toRemove);\n                // Create array of index points to remove.\n                // They must be in reverse order so that removal leaves following remove indices stable\n                const removeIndices = toRemove.reduce((result, item) => {\n                    const\n                        isNumeric = typeof item === 'number',\n                        idx       = isNumeric ? item : me.indexOf(item, true);\n                    // Drop out of contiguous mode if we find a non-contiguous record, or a remove *index*\n                    if (contiguous && (lastIdx != null && idx !== lastIdx + 1 || isNumeric)) {\n                        contiguous = false;\n                    }\n                    // Do not include indices out of range in our removeIndices\n                    if (idx >= 0 && idx < oldCount) {\n                        result.push(idx);\n                    }\n                    lastIdx = idx;\n                    return result;\n                }, []).sort(reverseNumericSortFn);\n                // If it's a pure remove of contiguous items with no adds, fast track it.\n                if (contiguous) {\n                    // If reduced to zero by being asked to remove items we do not contain\n                    // then this is a no-op\n                    if (removeIndices.length) {\n                        removed.push.apply(removed, toRemove);\n                        values.splice(removeIndices[removeIndices.length - 1], removeIndices.length);\n                        mutated = true;\n                    }\n                }\n                else {\n                    // Loop through removeIndices splicing each index out of the values\n                    // unless there's an incoming identical id.\n                    for (let i = 0; i < removeIndices.length; i++) {\n                        const removeIndex = removeIndices[i];\n                        if (removeIndex !== -1) {\n                            const id = values[removeIndex][idProperty];\n                            // If the id is not among incoming items, remove it\n                            if (!newIds[id]) {\n                                removed.unshift(values[removeIndex]);\n                                values.splice(removeIndex, 1);\n                                mutated = true;\n                            }\n                        }\n                    }\n                }\n            }\n            // Update indices only if they have been used\n            if (removed.length && !me._indicesInvalid) {\n                removed.forEach(me.removeFromIndices, me);\n            }\n        }\n        // If we collected genuinely new entries, insert them at the splice index\n        if (added.length) {\n            values.splice(Math.min(index, values.length), 0, ...added);\n            mutated = true;\n            // Update indices only if they have been used\n            if (!me._indicesInvalid) {\n                added.forEach(me.addToIndices, me);\n            }\n            if (!me._addedValues) {\n                me._addedValues = new Set();\n            }\n            for (const value of added) {\n                me._addedValues.add(value);\n            }\n        }\n        if (removed.length && me._addedValues) {\n            for (const value of removed) {\n                me._addedValues.delete(value);\n            }\n        }\n        // Update indices only if they have been used\n        if (replaced.length && !me._indicesInvalid) {\n            replaced.forEach(rep => {\n                me.removeFromIndices(rep[0]);\n                me.addToIndices(rep[1]);\n            });\n        }\n        // If we either added or removed items, or we did an in-place replace operation\n        // then inform all interested parties.\n        if (mutated || replaced.length) {\n            // Ensure order of values matches the sorters\n            if (me.isSorted) {\n                me.onSortersChanged();\n            }\n            // The sort will also recreate the filteredValues so that it can be in correct sort order\n            else if (me.isFiltered) {\n                if (me.autoFilter) {\n                    me.onFiltersChanged({ action : 'splice', oldCount : 1 });\n                }\n                else {\n                    me._filteredValues.splice(Math.min(index, me._filteredValues.length), 0, ...added);\n                }\n            }\n            // Indicate to observers that data has changed.\n            me.generation++;\n            /**\n             * Fired when items are added, replace or removed\n             * @event change\n             * @param {'splice'|'clear'|'replaceValues'|'move'|'sort'|'filter'} action The underlying operation\n             * which caused data change. May be `'splice'` (meaning an atomic add/remove operation, `'sort'` or\n             * `'filter'`), `'clear'`, `'replaceValues'`, `'move'`, `'sort'` or `'filter'`.\n             * @param {Core.util.Collection} source This Collection.\n             * @param {Object[]} removed An array of removed items. If the `action` is `'filter'`, the\n             * removed property represents the records which were filtered out by the action.\n             * @param {Object[]} added An array of added items. If the `action` is `'filter'`, the\n             * added property represents the records which were filtered in by the action.\n             * @param {Object[]} replaced An array of replacements, each entry of which contains `[oldValue, newValue]`.\n             * @param {Number} oldCount The number of items in the full, unfiltered collection prior to the splice operation.\n             */\n            me.trigger('change', {\n                action : 'splice',\n                removed,\n                added,\n                replaced,\n                oldCount\n            });\n        }\n        else {\n            /**\n             * Fired when a {@link #function-splice} operation is requested but the operation\n             * is a no-op and has caused no change to this Collection's dataset. The splice\n             * method's parameters are passed for reference.\n             * @event noChange\n             * @param {Number} index Index at which to remove a block of items.\n             * @param {Object[]|Number} [toRemove] Either the number of items to remove starting\n             * at the passed `index`, or an array of items to remove (If an array is passed, the `index` is ignored).\n             * @param  {Object[]|Object} [toAdd] An item, or an array of items to add.\n             */\n            me.trigger('noChange', {\n                index,\n                toRemove,\n                toAdd\n            });\n        }\n    }\n    /**\n     * Change the id of an existing member by mutating its {@link #config-idProperty}.\n     * @param {String|Number|Object} item The item or id of the item to change.\n     * @param {String|Number} newId The id to set in the existing member.\n     */\n    changeId(item, newId) {\n        const\n            me             = this,\n            { idProperty } = me,\n            oldId          = keyTypes[typeof item] ? item : item[idProperty],\n            member         = me.get(oldId);\n        if (member) {\n            const existingMember = me.get(newId);\n            if (existingMember && member !== existingMember) {\n                throw new Error(`Attempt to set item ${oldId} to already existing member's id ${newId}`);\n            }\n            me.removeIndexEntry(item, idProperty, oldId);\n            me.addIndexEntry(item, idProperty, newId);\n            // Last on purpose, onItemMutation would fail to find the item if its id was changed prior to the call\n            member[idProperty] = newId;\n        }\n    }\n    /**\n     * Returns the item with the passed `id`. By default, filtered are honoured, and\n     * if the item with the requested `id` is filtered out, nothing will be returned.\n     *\n     * To return the item even if it has been filtered out, pass the second parameter as `true`.\n     * @param {*} id The `id` to find.\n     * @param {Boolean} [ignoreFilters=false] Pass `true` to return an item even if it is filtered out.\n     * @returns {Object} The found item, or `undefined`.\n     */\n    get(id, ignoreFilters = false) {\n        return this.getBy(this.idProperty, id, ignoreFilters);\n    }\n    getAt(index, ignoreFilters = false) {\n        if (this.isFiltered && !ignoreFilters) {\n            return this._filteredValues[index];\n        }\n        else {\n            return this._values[index];\n        }\n    }\n    /**\n     * Returns the item with passed property name equal to the passed value. By default,\n     * filtered are honoured, and if the item with the requested `id` is filtered out,\n     * nothing will be returned.\n     *\n     * To return the item even if it has been filtered out, pass the third parameter as `true`.\n     * @param {String} propertyName The property to test.\n     * @param {*} value The value to find.\n     * @param {Boolean} [ignoreFilters=false] Pass `true` to return an item even if it is filtered out.\n     * @returns {Object} The found item, or `undefined`.\n     */\n    getBy(propertyName, value, ignoreFilters = false) {\n        return this.findItem(propertyName, value, this.isFiltered && ignoreFilters);\n    }\n    /**\n     * The number of items in this collection. Note that this honours filtering.\n     * See {@link #property-totalCount};\n     * @property {Number}\n     * @readonly\n     */\n    get count() {\n        return this.values.length;\n    }\n    /**\n     * The number of items in this collection regardless of filtering.\n     * @property {Number}\n     * @readonly\n     */\n    get totalCount() {\n        return this._values.length;\n    }\n    /**\n     * The property name used to extract item `id`s from added objects.\n     * @member {String} idProperty\n     */\n    updateIdProperty(idProperty) {\n        this.addIndex({ property : idProperty, unique : true });\n    }\n    //endregion\n    //region Sorting\n    /**\n     * The Collection of {@link Core.util.CollectionSorter Sorters} for this Collection.\n     * @member {Core.util.Collection} sorters\n     */\n    changeSorters(sorters) {\n        return new Collection({\n            values            : ArrayHelper.asArray(sorters),\n            internalListeners : {\n                change  : 'onSortersChanged',\n                thisObj : this\n            }\n        });\n    }\n    /**\n     * Adds a Sorter to the Collection of Sorters which are operating on this Collection.\n     *\n     * A Sorter may be specified as an instantiated {@link Core.util.CollectionSorter}, or a config object for a\n     * CollectionSorter of the form\n     *\n     *     {\n     *         property  : 'age',\n     *         direction : 'desc'\n     *     }\n     *\n     * Note that by default, a Sorter *replaces* a Sorter with the same `property` to make\n     * it easy to change existing Sorters. A Sorter's `id` is its `property` by default. You\n     * can avoid this and add multiple Sorters for one property by configuring Sorters with `id`s.\n     *\n     * A Sorter may also be specified as a function which compares two objects eg:\n     *\n     *     (lhs, rhs) => lhs.customerDetails.age - rhs.customerDetails.age\n     *\n     * @param {CollectionSorterConfig} sorter A Sorter configuration object to add to the Collection\n     * of Sorters operating on this Collection.\n     * @returns {Core.util.CollectionSorter} The resulting Sorter to make it easy to remove Sorters.\n     */\n    addSorter(sorter) {\n        const result = (sorter instanceof CollectionSorter) ? sorter : new CollectionSorter(sorter);\n        this.sorters.add(result);\n        return result;\n    }\n    /**\n     * A flag which is `true` if this Collection has active {@link #property-sorters}.\n     * @property {Boolean}\n     * @readonly\n     */\n    get isSorted() {\n        return Boolean(this._sorters?.count);\n    }\n    onSortersChanged() {\n        const me = this;\n        me._sortFunction = null;\n        me._addedValues = null;\n        me._values.sort(me.sortFunction);\n        me.trigger('change', sortEvent);\n    }\n    /**\n     * A sorter function which encapsulates the {@link Core.util.CollectionSorter Sorters}\n     * for this Collection.\n     * @property {Function}\n     * @readonly\n     */\n    get sortFunction() {\n        if (!this._sortFunction) {\n            if (this.isSorted) {\n                this._sortFunction = CollectionSorter.generateSortFunction(this.sorters.values);\n            }\n            else {\n                this._sortFunction = return0;\n            }\n        }\n        return this._sortFunction;\n    }\n    //endregion\n    //region Filtering\n    /**\n     * The Collection of {@link Core.util.CollectionFilter Filters} for this Collection.\n     * @property {Core.util.Collection}\n     * @readonly\n     */\n    get filters() {\n        if (!this._filters) {\n            this._filters = new Collection({\n                internalListeners : {\n                    change  : 'onFiltersChanged',\n                    thisObj : this\n                }\n            });\n        }\n        return this._filters;\n    }\n    /**\n     * Adds a Filter to the Collection of Filters which are operating on this Collection.\n     *\n     * A Filter may be an specified as an instantiated {@link Core.util.CollectionFilter\n     * CollectionFilter}, or a config object for a CollectionFilter of the form\n     *\n     *     {\n     *         property : 'age',\n     *         operator : '>=',\n     *         value    : 21\n     *     }\n     *\n     * Note that by default, a Filter *replaces* a Filter with the same `property` to make\n     * it easy to change existing Filters. A Filter's `id` is its `property` by default. You\n     * can avoid this and add multiple Filters for one property by configuring Filters with `id`s.\n     *\n     * A Filter may also be specified as a function which filters candidate objects eg:\n     *\n     *     candidate => candidate.customerDetails.age >= 21\n     *\n     * @param {CollectionFilterConfig|Core.util.CollectionFilter} filter A Filter or Filter configuration object to add\n     * to the Collection of Filters operating on this Collection.\n     * @returns {Core.util.CollectionFilter} The resulting Filter to make it easy to remove Filters.\n     */\n    addFilter(filter) {\n        const result = (filter instanceof CollectionFilter) ? filter : new CollectionFilter(filter);\n        this.filters.add(result);\n        return result;\n    }\n    removeFilter(filter) {\n        const { filters } = this;\n        if (!filter.isCollectionFilter) {\n            filter = filters.get(filter);\n        }\n        filters.remove(filter);\n    }\n    clearFilters() {\n        this.filters.clear();\n    }\n    /**\n     * A flag which is `true` if this Collection has active {@link #property-filters}.\n     * @property {Boolean}\n     * @readonly\n     */\n    get isFiltered() {\n        return Boolean(this._filters && this._filters.count);\n    }\n    onFiltersChanged({ action, removed : gone, oldCount }) {\n        const\n            me          = this,\n            oldDataset  = oldCount || (action === 'clear' && gone.length) ? me._filteredValues : me._values;\n        me._filterFunction = null;\n        me._filteredValues = me._values.filter(me.filterFunction);\n        me._indicesInvalid = true;\n        const {\n            toAdd    : added,\n            toRemove : removed\n        } = ArrayHelper.delta(me._filteredValues, oldDataset, true);\n        me.trigger('change', { ...filterEvent, added, removed });\n    }\n    /**\n     * A filter function which encapsulates the {@link Core.util.CollectionFilter Filters}\n     * for this Collection.\n     * @property {Function}\n     * @readonly\n     */\n    get filterFunction() {\n        if (!this._filterFunction) {\n            if (this.isFiltered) {\n                this._filterFunction = CollectionFilter.generateFiltersFunction(this.filters.values);\n            }\n            else {\n                this._filterFunction = FunctionHelper.returnTrue;\n            }\n        }\n        return this._filterFunction;\n    }\n    //endregion\n    //region Indexing\n    changeExtraKeys(extraKeys) {\n        const keys = ArrayHelper.asArray(extraKeys);\n        // Normalize to always be an array of index configs\n        return keys.map(config => {\n            if (typeof config === 'string') {\n                return { property : config, unique : true };\n            }\n            return config;\n        });\n    }\n    updateExtraKeys(extraKeys) {\n        for (let i = 0; i < extraKeys.length; i++) {\n            this.addIndex(extraKeys[i]);\n        }\n    }\n    /**\n     * Adds a lookup index for the passed property name or index config. The index is built lazily when an index is\n     * searched\n     * @internal\n     * @param {Object} indexConfig An index config\n     * @param {String} indexConfig.property The property name to add an index for\n     * @param {Boolean} [indexConfig.unique] Specify `false` to allow multiple entries of the same index, turning\n     *   entries into sets\n     * @param {Object} [indexConfig.dependentOn] The properties that make the key\n     */\n    addIndex(indexConfig) {\n        const me = this;\n        // Combo without valueField used in some tests -> addIndex(undefined). Safeguarding here\n        if (indexConfig) {\n            (me._indices || (me._indices = {}))[indexConfig.property] = new Map();\n            // Piggyback the index config\n            Object.assign(me._indices[indexConfig.property], indexConfig);\n            // Indices need a rebuild now.\n            me.invalidateIndices();\n            if (indexConfig.dependentOn) {\n                me.hasCompositeIndex = true;\n            }\n            /**\n             * this.indices is keyed by the property name, and contains the keys linked to an item in the _values array.\n             * So collection.add({id : foo, name : 'Nige'}, {id : 'bar', name : 'Faye'}) where collection has had an index\n             * added for the \"name\" property would result in:\n             *\n             * {\n             *     id : Map({\n             *         foo : nige,\n             *         bar : faye\n             *     }),\n             *     name : Map({\n             *         Nige : nige,\n             *         Faye : faye\n             *     })\n             * }\n             */\n        }\n    }\n    /**\n     * Return the index of the item with the specified key having the specified value.\n     *\n     * By default, filtering is taken into account and this returns the index in the filtered dataset if present. To\n     * bypass this, pass the third parameter as `true`.\n     *\n     * Only useful for indices configured with `unique: true`.\n     *\n     * @param {String} propertyName The name of the property to test.\n     * @param {*} value The value to test for.\n     * @param {Boolean} [ignoreFilters=false] Pass `true` to return the index in\n     * the original data set if the item is filtered out.\n     * @returns {Number} The index of the item or `-1` if not found for unique indices\n     */\n    findIndex(propertyName, value, ignoreFilters = false) {\n        const item = this.findItem(propertyName, value, ignoreFilters);\n        if (!item) {\n            return -1;\n        }\n        const values = this.isFiltered && !ignoreFilters ? this._filteredValues : this._values;\n        return values.indexOf(item);\n    }\n    /**\n     * Return the item with the specified key having the specified value.\n     *\n     * By default, filtering is taken into account. To bypass this, pass the third parameter as `true`.\n     *\n     * For indices configured with `unique: false`, a Set of items will be returned.\n     *\n     * @param {String} propertyName The name of the property to test.\n     * @param {*} value The value to test for.\n     * @param {Boolean} [ignoreFilters=false] Pass `true` to return the index in\n     * the original data set if the item is filtered out.\n     * @returns {Object|Set} The found item or Set of items or null\n     */\n    findItem(propertyName, value, ignoreFilters = false) {\n        const\n            me             = this,\n            { isFiltered } = me,\n            index          = isFiltered && !ignoreFilters\n                ? me.indices[filteredIndicesProperty][propertyName]\n                : me.indices[propertyName];\n        if (index) {\n            // If the key is a numeric string, cast it to a number and find.\n            // Store's idRegister is an object which treats numeric keys as strings\n            // but Maps are more picky, so we have to work round that.\n            const item = index.get(value) ?? ((typeof value === 'string' && value.length && !isNaN(value) && index.get(Number(value))) || null);\n            if (item != null) {\n                return item;\n            }\n        }\n        else {\n            // Search the filtered values if we are filtered and not ignoring filters\n            const\n                values = isFiltered && !ignoreFilters ? me._filteredValues : me._values,\n                count  = values.length;\n            for (let i = 0; i < count; i++) {\n                const item = values[i];\n                if (item[propertyName] == value) {\n                    return item;\n                }\n            }\n        }\n        return null;\n    }\n    removeIndex(propertyName) {\n        delete this._indices[propertyName];\n        this.hasCompositeIndex = Object.values(this.indices).some(index => index.dependentOn);\n    }\n    /**\n     * Returns the index of the item with the same `id` as the passed item.\n     *\n     * By default, filtering is honoured, so if the item in question has been added, but is currently filtered out of\n     * visibility, `-1` will be returned.\n     *\n     * To find the index in the master, unfiltered dataset, pass the second parameter as `true`;\n     * @param {Object|String|Number} item The item to find, or an `id` to find.\n     * @param {Boolean} [ignoreFilters=false] Pass `true` to find the index in the master, unfiltered data set.\n     * @returns {Number} The index of the item, or `-1` if not found.\n     */\n    indexOf(item, ignoreFilters = false) {\n        return this.findIndex(this.idProperty, keyTypes[typeof item] ? item : item[this.idProperty], ignoreFilters);\n    }\n    /**\n     * Returns `true` if this Collection includes an item with the same `id` as the passed item.\n     *\n     * By default, filtering is honoured, so if the item in question has been added,\n     * but is currently filtered out of visibility, `false` will be returned.\n     *\n     * To query inclusion in the master, unfiltered dataset, pass the second parameter as `true`;\n     * @param {Object|String|Number} item The item to find, or an `id` to find.\n     * @param {Boolean} [ignoreFilters=false] Pass `true` to find the index in the master, unfiltered data set.\n     * @returns {Boolean} True if the passed item is found.\n     */\n    includes(item, ignoreFilters = false) {\n        if (Array.isArray(item)) {\n            return item.some(item => this.includes(item));\n        }\n        return Boolean(this.findItem(this.idProperty, keyTypes[typeof item] ? item : item[this.idProperty], ignoreFilters));\n    }\n    get indices() {\n        if (this._indicesInvalid) {\n            this.rebuildIndices();\n        }\n        return this._indices;\n    }\n    invalidateIndices() {\n        this._indicesInvalid = true;\n    }\n    /**\n     * Called when the Collection is mutated and the indices have been flagged as invalid.\n     *\n     * Rebuilds the indices object to allow lookup by keys.\n     * @internal\n     */\n    rebuildIndices() {\n        const\n            me         = this,\n            isFiltered = me.isFiltered,\n            indices    = (me._indices || (me._indices = {})),\n            keyProps   = Object.keys(indices),\n            indexCount = keyProps.length,\n            values     = me._values;\n        let filteredIndices;\n        if (isFiltered) {\n            filteredIndices = indices[filteredIndicesProperty] = {};\n        }\n        // First, clear indices.\n        for (let i = 0; i < indexCount; i++) {\n            const index = indices[keyProps[i]];\n            index.clear();\n            if (isFiltered) {\n                let filteredIndex = filteredIndices[keyProps[i]];\n                if (filteredIndex) {\n                    filteredIndex.clear();\n                }\n                else {\n                    filteredIndex = filteredIndices[keyProps[i]] = new Map();\n                    // Piggyback config\n                    filteredIndex.unique = index.unique;\n                }\n            }\n        }\n        doRebuildIndices(values, indices, keyProps, indexCount);\n        // Create a parallel lookup structure into the _filteredValues\n        if (isFiltered) {\n            doRebuildIndices(me._filteredValues, filteredIndices, keyProps, indexCount);\n        }\n        me._indicesInvalid = false;\n    }\n    // Returns an array with [indices] or [indices, filteredIndices] if filtering is used\n    getIndices(propertyName) {\n        const indices = [this.indices[propertyName]];\n        if (this.isFiltered) {\n            indices.push(this.indices[filteredIndicesProperty][propertyName]);\n        }\n        return indices;\n    }\n    /**\n     * Add an item to all indices\n     * @param {*} item Item already available in the Collection\n     * @private\n     */\n    addToIndices(item) {\n        Object.keys(this.indices).forEach(propertyName => {\n            this.addIndexEntry(item, propertyName, item[propertyName]);\n        });\n    }\n    /**\n     * Remove an item from all indices\n     * @param {*} item Item already available in the Collection\n     * @private\n     */\n    removeFromIndices(item) {\n        Object.keys(this.indices).forEach(propertyName => {\n            this.removeIndexEntry(item, propertyName, item[propertyName]);\n        });\n    }\n    /**\n     * Remove an entry from an index, and if filtering is used also from the filtered index.\n     * @param {*} item Item already available in the Collection\n     * @param {String} propertyName Property of the item, will be matched with configured indices\n     * @param {*} oldValue Value to remove\n     * @private\n     */\n    removeIndexEntry(item, propertyName, oldValue) {\n        this.getIndices(propertyName).forEach(index => removeItemFromIndex(item, index, oldValue));\n    }\n    /**\n     * Add a new entry to an index, and if filtering is used also to the filtered index.\n     * @param {*} item Item already available in the Collection\n     * @param {String} propertyName Property of the item, will be matched with configured indices\n     * @param {*} value Value to store\n     * @private\n     */\n    addIndexEntry(item, propertyName, value) {\n        this.getIndices(propertyName).forEach(index => addItemToIndex(item, index, value));\n    }\n    /**\n     * Call externally to update indices on item mutation (from Store)\n     * @param {*} item Item already available in the Collection\n     * @param {Object} wasSet Uses the `wasSet` format from Store, `{ field : { oldValue, newValue } }`\n     * @internal\n     */\n    onItemMutation(item, wasSet) {\n        const me = this;\n        // Iterate over changes if we have extra indices defined, keeping those indices up to date\n        if (!me._indicesInvalid && Object.keys(me.indices).length > 1) {\n            Object.keys(wasSet).forEach(propertyName => {\n                const indexConfig = me.indices[propertyName];\n                if (indexConfig) {\n                    const { value, oldValue } = wasSet[propertyName];\n                    me.removeIndexEntry(item, propertyName, oldValue);\n                    me.addIndexEntry(item, propertyName, value);\n                }\n                else if (me.hasCompositeIndex) {\n                    // Now check if any composite index depends on the property that was changed\n                    const dependentIndex = Object.values(me.indices).find(index => index.dependentOn?.[propertyName]);\n                    if (dependentIndex) {\n                        const keysAndOldValues = {};\n                        for (const o in dependentIndex.dependentOn) {\n                            keysAndOldValues[o] = wasSet[o]?.oldValue || item[o];\n                        }\n                        const oldIndex = item.buildIndexKey(keysAndOldValues);\n                        me.removeIndexEntry(item, dependentIndex.property, oldIndex);\n                        me.addIndexEntry(item, dependentIndex.property, item[dependentIndex.property]);\n                    }\n                }\n            });\n        }\n    }\n    //endregion\n}\n// These are used by Bag for the same purpose\nexport  { keyTypes };\nCollection._$name = 'Collection';", "import { keyTypes } from './Collection.js';\nimport ArrayHelper from '../helper/ArrayHelper.js';\nconst\n    nonPrimitives          = new WeakMap(),\n    safeIndexKey           = (value) => {\n        if (value && typeof value === 'object') {\n            let substitute = nonPrimitives.get(value);\n            if (substitute === undefined) {\n                substitute = Symbol('bscik'); // Bryntum safe collection index key\n                nonPrimitives.set(value, substitute);\n            }\n            value = substitute;\n        }\n        return value;\n    };\n/**\n * @module Core/util/Bag\n */\n/**\n * A simple collection class to contain unique, keyed items.\n * @internal\n */\nexport default class Bag {\n    constructor(config) {\n        const me = this;\n        me.generation = 0;\n        me.items = new Set();\n        me.idMap = {};\n        me.idProperty = 'id';\n        if (config) {\n            if (config.idProperty) {\n                me.idProperty = config.idProperty;\n            }\n            if (config.values) {\n                me.values = config.values;\n            }\n        }\n    }\n    /**\n     * Returns the item with the passed `id`.\n     *\n     * @param {*} id The `id` to find.\n     * @returns {Object} The found item, or `undefined`.\n     */\n    get(key) {\n        return this.idMap[safeIndexKey(key)];\n    }\n    /**\n     * The number of items in this Bag.\n     * @property {Number}\n     * @readonly\n     */\n    get count() {\n        return this.items.size;\n    }\n    /**\n     * Adds the passed item(s) to this Bag. Existing items with the same ID\n     * will be replaced.\n     * @param {Object|Object[]} toAdd Item(s) to add.\n     */\n    add(...toAdd) {\n        if (toAdd.length === 1 && Array.isArray(toAdd[0])) {\n            toAdd = toAdd[0];\n        }\n        const\n            me  = this,\n            {\n                items,\n                idMap,\n                idProperty\n            }   = me,\n            len = toAdd.length;\n        for (let i = 0; i < len; i++) {\n            const\n                item         = toAdd[i],\n                key          = keyTypes[typeof item] ? item : safeIndexKey(item[idProperty]),\n                existingItem = idMap[key];\n            // Not already present\n            if (existingItem == null) {\n                idMap[key] = item;\n                items.add(item);\n                me.generation++;\n            }\n            // Already present, replace it if different. No generational change.\n            // IDs rule.\n            else if (existingItem !== item) {\n                idMap[key] = item;\n                items.delete(existingItem);\n                items.add(item);\n            }\n        }\n    }\n    /**\n     * Returns `nth` item in this Bag.\n     * @param {Number} nth The index of the matching item. Negative numbers index for the last item. For example, -1\n     * returns the last item, -2 the 2nd to last item etc.\n     * @returns {Object} The matched item, or `undefined`.\n     */\n    at(nth) {\n        let item, ret;\n        if (nth < 0) {\n            nth += this.count;  // ex: count=10 ... -1 -> 9, -2 -> 8, -3 -> 7, ... -9 -> 1, -10 -> 0\n        }\n        for (item of this.items) {\n            if (!nth--) {\n                ret = item;\n                break;\n            }\n        }\n        return ret;\n    }\n    /**\n     * Removes the passed item(s) from this Bag.\n     * @param {Object|Object[]} toRemove Item(s) to remove.\n     */\n    remove(toRemove) {\n        toRemove = ArrayHelper.asArray(toRemove);\n        const\n            { items, idMap, idProperty } = this,\n            len = toRemove.length;\n        for (let i = 0; i < len; i++) {\n            const\n                item         = toRemove[i],\n                key          = keyTypes[typeof item] ? item : safeIndexKey(item[idProperty]),\n                existingItem = idMap[key];\n            // Found match, so delete it\n            if (existingItem != null) {\n                items.delete(existingItem);\n                delete idMap[key];\n                this.generation++;\n            }\n        }\n    }\n    clear() {\n        this.items.clear();\n        this.idMap = {};\n        this.generation++;\n    }\n    /**\n     * Returns the number of items in this Bag which elicits a truthy return value from the passed function.\n     * @param {Function} fn A function, which, when passed an item, returns `true` to select it as the item to return.\n     * @returns {Number} The number of matched items.\n     */\n    countOf(fn) {\n        let ret = 0,\n            item;\n        for (item of this.items) {\n            if (fn(item)) {\n                ++ret;\n            }\n        }\n        return ret;\n    }\n    /**\n     * Change the id of an existing member by mutating its idProperty.\n     * @param {String|Number|Object} item The item or id of the item to change.\n     * @param {String|Number} newId The id to set in the existing member.\n     */\n    changeId(item, newId) {\n        const\n            me                    = this,\n            { idMap, idProperty } = me,\n            oldId                 = keyTypes[typeof item] ? item : safeIndexKey(item[idProperty]),\n            member                = me.get(oldId);\n        if (member) {\n            const existingMember = me.get(newId);\n            if (existingMember && member !== existingMember) {\n                throw new Error(`Attempt to set item ${oldId} to already existing member's id ${newId}`);\n            }\n            member[idProperty] = newId;\n            delete idMap[oldId];\n            idMap[newId] = member;\n        }\n    }\n    /**\n     * Extracts the matching items from this Bag into an array based upon the passed value filter function.\n     * @param {Function} fn A function, which, when passed an item, returns a `true` to place into the resulting array.\n     * @param {Object} [thisObj] The `this` reference when the function is called.\n     * @returns {Object[]} An array of values extracted from this Bag.\n     */\n    filter(fn, thisObj) {\n        const\n            { items } = this,\n            result    = [];\n        let i = 0;\n        items.forEach(item => {\n            if (fn.call(thisObj, item, i++, items)) {\n                result.push(item);\n            }\n        });\n        return result;\n    }\n    /**\n     * Returns `true` if this Collection includes an item with the same `id` as the passed item.\n     *\n     * @param {Object|String|Number} item The item to find, or an `id` to find.\n     * @returns {Boolean} True if the passed item is found.\n     */\n    includes(item) {\n        const key = keyTypes[typeof item] ? item : safeIndexKey(item[this.idProperty]);\n        return Boolean(this.idMap[key]);\n    }\n    /**\n     * Extracts the content of this Bag into an array based upon the passed\n     * value extraction function.\n     * @param {Function} fn A function, which, when passed an item, returns a value to place into the resulting array.\n     * @param {Object} [thisObj] The `this` reference when the function is called.\n     * @returns {Object[]} An array of values extracted from this Bag.\n     */\n    map(fn, thisObj) {\n        const\n            { items } = this,\n            result    = new Array(items.size);\n        // Set has no map\n        let i = 0;\n        items.forEach(item => {\n            result[i] = fn.call(thisObj, item, i++, items);\n        });\n        return result;\n    }\n    /**\n     * Executes the passed function for each item in this Bag, passing in the item.\n     * @param {Function} fn The function to execute.\n     * @param {Object} [thisObj] The `this` reference when the function is called.\n     */\n    forEach(fn, thisObj) {\n        return this.items.forEach(fn, thisObj);\n    }\n    /**\n     * Returns `nth` item in this Bag which elicits a truthy return value from the provided matcher function `fn`.\n     * @param {Function} fn A function which, when passed an item, returns `true` to select the item as a match.\n     * @param {Number} [nth=0] The index of the matching item. By default, 0 returns the first item that matches\n     * according to `fn`. Negative numbers index for the last item. For example, -1 returns the last matching item,\n     * -2 the 2nd to last matching item etc..\n     * @returns {Object} The matched item, or `undefined`.\n     */\n    find(fn, nth = 0) {\n        let item, ret;\n        if (nth < 0) {\n            nth += this.countOf(fn);  // ex: count=10 ... -1 -> 9, -2 -> 8, -3 -> 7, ... -9 -> 1, -10 -> 0\n        }\n        for (item of this.items) {\n            if (fn(item) && !nth--) {\n                ret = item;\n                break;\n            }\n        }\n        return ret;\n    }\n    /**\n     * Iterator that allows you to do for (let item of bag)\n     */\n    [Symbol.iterator]() {\n        return this.items[Symbol.iterator]();\n    }\n    indexOf(item, matchFn) {\n        let index = -1,\n            it;\n        for (it of this.items) {\n            if (!matchFn || matchFn(it)) {\n                ++index;\n                if (it === item) {\n                    return index;\n                }\n            }\n        }\n        return -1;\n    }\n    /**\n     * The set of values of this Bag.\n     *\n     * Setting this property replaces the data set.\n     * @property {Object[]}\n     */\n    get values() {\n        return [...this.items];\n    }\n    set values(values) {\n        values = ArrayHelper.asArray(values);\n        this.clear();\n        this.add.apply(this, values);\n        this.generation++;\n    }\n    /**\n     * Sort the values of this Bag using the passed comparison function.\n     *\n     * Setting this property replaces the data set.\n     * @param {Function} fn Comparison function which returns -ve, 0, or +ve\n     */\n    sort(fn) {\n        this.values = this.values.sort(fn);\n    }\n    some(fn, thisObj) {\n        return this.values.some(fn, thisObj);\n    }\n}\nBag._$name = 'Bag';", "import Bag from '../util/Bag.js';\n/**\n * @module Core/data/StoreBag\n */\nexport default class StoreBag extends Bag {\n    add(...toAdd) {\n        if (toAdd.length === 1 && Array.isArray(toAdd[0])) {\n            toAdd = toAdd[0];\n        }\n        // ignore unpersistable records\n        return super.add(...toAdd.filter(record => record.isPersistable));\n    }\n};\nStoreBag._$name = 'StoreBag';", "import Base from '../../Base.js';\nimport ArrayHelper from '../../helper/ArrayHelper.js';\n/**\n * @module Core/data/mixin/StoreCRUD\n */\n/**\n * Mixin for Store that handles modifying records (add, remove etc).\n *\n * @example\n * // add new record to store\n * store.add({ id: 1, team: 'FC Krasnodar' });\n *\n * // remove a record from store, using id\n * store.remove(1);\n *\n * @mixin\n */\nexport default Target => class StoreCRUD extends (Target || Base) {\n    static get $name() {\n        return 'StoreCRUD';\n    }\n    //region Config\n    static get defaultConfig() {\n        return {\n            /**\n             * Commit changes automatically\n             * @config {Boolean}\n             * @default\n             * @category Common\n             */\n            autoCommit : false\n        };\n    }\n    static get properties() {\n        return {\n            isRemoving   : false,\n            suspendCount : 0\n        };\n    }\n    //endregion\n    //region Events\n    /**\n     * Fired after removing all records\n     * @event removeAll\n     * @param {Core.data.Store} source This Store\n     */\n    /**\n     * Fired before committing changes. Return false from handler to abort commit\n     * @event beforeCommit\n     * @param {Core.data.Store} source This Store\n     * @param {Object} changes Modification data\n     */\n    /**\n     * Fired after committing changes\n     * @event commit\n     * @param {Core.data.Store} source This Store\n     * @param {Object} changes Modification data\n     */\n    /**\n     * Fired before records are removed from this store by the {@link #function-remove} or {@link #function-removeAll}.\n     * Also fired when removing a child record in a tree store using {@link Core.data.mixin.TreeNode#function-removeChild}.\n     * The remove may be vetoed by returning `false` from a handler.\n     * @event beforeRemove\n     * @param {Core.data.Store} source This Store\n     * @param {Core.data.Model[]} records The records which are to be removed.\n     * @param {Core.data.Model} parent The record from which children are being removed when using a tree store. Only\n     * provided when removing a single node.\n     * @param {Boolean} isMove This flag is `true` if the child node is being removed by\n     * {@link Core.data.mixin.TreeNode#function-appendChild appendChild} to be moved\n     * _within the same tree_.\n     * @param {Boolean} removingAll This flag is `true` if the operation is removing the store's entire data set.\n     * @preventable\n     */\n    /**\n     * Fired before records are added to this store by the {@link #function-add} or {@link #function-insert}. In a tree\n     * store, also fired by {@link Core.data.mixin.TreeNode#function-appendChild} and\n     * {@link Core.data.mixin.TreeNode#function-insertChild}. The add or insert may be vetoed by returning `false`\n     * from a handler.\n     * @event beforeAdd\n     * @param {Core.data.Store} source This Store\n     * @param {Core.data.Model[]} records The records which are to be added\n     * @param {Core.data.Model} parent The parent node when using a tree store\n     * @preventable\n     */\n    /**\n     * Fired after adding/inserting record(s). If the record was added to a parent, the `isChild` flag is set on the\n     * event. If it was inserted, event contains `index`\n     * @event add\n     * @param {Core.data.Store} source This Store\n     * @param {Core.data.Model[]} records Added records. In case of tree store, if branch is added, only branch root\n     * is returned\n     * @param {Core.data.Model[]} [allRecords] Flat list of all added records. In case of tree store, if branch is\n     * added, all new records are returned, not only branch root\n     * @param {Core.data.Model} [parent] If due to an {@link Core/data/mixin/TreeNode#function-appendChild}\n     * call, this is the parent node added to.\n     * @param {Number} [index] Insertion point in the store's {@link Core.data.Store#config-storage Collection}.\n     * @param {Number} [oldIndex] Not used for tree stores. The index of the first record moved.\n     * @param {Boolean} [isChild] Flag which is set to true if the records are added to a parent record\n     * @param {Boolean} [isExpand] Flag which is set to true if records are added to the store by expanding parent\n     * @param {Object} [isMove] An object keyed by the ids of the records which were moved from another\n     * position in the store, or from another parent node in the store. The ids of moved records will be\n     * property names with a value `true`.\n     */\n    /**\n     * Fired when one or more records are removed\n     * @event remove\n     * @param {Core.data.Store} source This Store\n     * @param {Core.data.Model[]} records Array of removed records. In case of tree store, if branch is removed, only branch root\n     * is returned\n     * @param {Core.data.Model[]} [allRecords] Flat array of all removed records. In case of tree store, if branch is\n     * removed, all removed records are returned, not only branch root\n     * @param {Core.data.Model} [parent] If due to a {@link Core.data.mixin.TreeNode#function-removeChild removeChild}\n     * call, this is the parent node removed from. Only applicable when removing a single tree node.\n     * @param {Number} [index] Visible index at which record was removed. In case the record was removed from a collapsed\n     * branch, -1 is returned. For tree store, this is only provided when removing a single node.\n     * @param {Boolean} [isChild] Flag which is set to true if the record was removed from a parent record\n     * @param {Boolean} [isCollapse] Flag which is set to true if records were removed from the store by collapsing parent\n     * @param {Boolean} [isMove] Passed as `true` if the remove was part of a move operation within this Store.\n     */\n    //endregion\n    //region Add, insert & remove\n    /**\n     * Removes a record from this store. Fires a single {@link #event-remove} event passing the removed records.\n     * @param {String|String[]|Number|Number[]|Core.data.Model|Core.data.Model[]} records Record/array of records (or record ids) to remove\n     * @param {Boolean} [silent] Specify `true` to suppress events/autoCommit\n     * @returns {Core.data.Model[]} Removed records\n     * @fires beforeRemove\n     * @fires remove\n     * @fires change\n     * @category CRUD\n     */\n    remove(records, silent = false) {\n        const\n            me          = this,\n            { storage } = me;\n        // Ensure we have an array of records in case we are passed IDs\n        records = ArrayHelper.asArray(records).reduce((result, r) => {\n            r = me.getById(r);\n            if (r) {\n                result.push(r);\n            }\n            return result;\n        }, []);\n        if (records.length === 0) {\n            return records;\n        }\n        // Give chance to veto or take action before records disappear.\n        if (!me.tree && !silent && me.trigger('beforeRemove', { records }) === false) {\n            return [];\n        }\n        // Flag that can be checked in linked store to determine if removal is ongoing\n        me.isRemoving = true;\n        // Ensure that records in collapsed groups are removed and events fired.\n        if (me.isGrouped) {\n            const\n                oldCount                 = storage.count,\n                recordsInCollapsedGroups = [],\n                changedGroupParents      = new Set();\n            // Collect any records which are in collapsed groups which will not be in the storage\n            // Collection, and so will not cause a store change.\n            // If we find some, we must fire the event which the store will react to and update itself.\n            for (const rec of records) {\n                const { groupParent } = rec.instanceMeta(me);\n                if (groupParent.meta.collapsed) {\n                    recordsInCollapsedGroups.push(rec);\n                }\n                // Collect group header records which change so they can announce this to cause UI updates.\n                ArrayHelper.remove(groupParent.groupChildren, rec);\n                ArrayHelper.remove(groupParent.unfilteredGroupChildren, rec);\n                groupParent.meta.childCount--;\n                changedGroupParents.add(groupParent);\n            }\n            // The changed group parents must announce their changes, otherwise the group headers\n            // in a UI will not refresh to reflect the change.\n            for (const groupParent of changedGroupParents) {\n                if (groupParent.groupChildren.length > 0) {\n                    me.onModelChange(groupParent, {}, {});\n                }\n            }\n            // The store must react as if these records in collapsed groups have been removed from storage\n            if (recordsInCollapsedGroups.length) {\n                storage.trigger('change', {\n                    action   : 'splice',\n                    removed  : recordsInCollapsedGroups,\n                    added    : [],\n                    replaced : [],\n                    oldCount\n                });\n            }\n        }\n        else if (me.tree) {\n            const\n                allRemovedRecords = [],\n                removingMultiple  = records.length > 1,\n                firstRemoved      = records[0],\n                // index is only relevant when removing single node\n                index             = removingMultiple ? undefined : storage.indexOf(firstRemoved),\n                // Group all tree nodes by their parent since they might be out of order\n                removeChildArgs   = records.reduce((result, child) => {\n                    const { parent } = child;\n                    if (parent) {\n                        if (!result[parent.id]) {\n                            result[parent.id] = [parent, []];\n                        }\n                        result[parent.id][1].push(child);\n                    }\n                    return result;\n                }, {}),\n                removals          = Array.from(Object.values(removeChildArgs));\n            if (!silent && me.trigger('beforeRemove', { records, isMove : false, parent : removingMultiple ? undefined : firstRemoved.parent }) === false) {\n                me.isRemoving = false;\n                return [];\n            }\n            // need to process the removals starting from deep-most ones, otherwise if we start with removal\n            // from higher-level parent, then all its children are removed from the store as well\n            // when the order comes to remove from the child node, it is not in the store and does not have\n            // stm instance, so removal happens outside the stm context\n            // https://github.com/bryntum/support/issues/5436\n            removals.sort((a, b) => b[0].childLevel - a[0].childLevel);\n            // Remove the records each from their correct parent\n            for (const [parent, children] of removals) {\n                allRemovedRecords.push(...parent.removeChild(children, false, true));\n            }\n            if (!silent) {\n                me.trigger('remove', {\n                    // parent is only relevant when removing single node\n                    parent     : removingMultiple ? undefined : firstRemoved.parent,\n                    index,\n                    isChild    : true,\n                    allRecords : allRemovedRecords,\n                    isMove     : false,\n                    records\n                });\n                me.trigger('change', {\n                    action : 'remove',\n                    records\n                });\n            }\n            me.isRemoving = false;\n            return records;\n        }\n        if (records.length === 0) {\n            me.isRemoving = false;\n            return records;\n        }\n        // Call model hook to allow taking action before removal (used by ModelLink to remove linked records)\n        for (const record of records) {\n            record.beforeRemove(records);\n        }\n        if (silent) {\n            me.suspendEvents();\n        }\n        storage.remove(records);\n        if (silent) {\n            me.resumeEvents();\n        }\n        if (me.autoCommit) {\n            me.doAutoCommit();\n        }\n        me.isRemoving = false;\n        return records;\n    }\n    /**\n     * Clears store data. Used by removeAll, separate function for using with chained stores.\n     * @private\n     * @category CRUD\n     */\n    clear(isLoading = false) {\n        const\n            me          = this,\n            { storage } = me;\n        // For tree store, we have to check unfilteredChildren to see if store has contents\n        if (me.storage.totalCount || me.rootNode?.unfilteredChildren?.length) {\n            // Give chance to veto or take action before records disappear.\n            if (!isLoading && me.trigger('beforeRemove', { records : storage.allValues, removingAll : true }) === false) {\n                return null;\n            }\n            // For tree scenario, clean up root node too\n            if (me.rootNode) {\n                // A chained tree store shares root node with its master store\n                if (!me.isChained) {\n                    me.rootNode.clearChildren(isLoading);\n                }\n            }\n            else if (isLoading) {\n                // If we are loading, we suspend events, and Store#onDataChange won't get to\n                // do all this stuff.\n                const allRecords = me.registeredRecords;\n                for (let i = allRecords.length - 1, rec; i >= 0; i--) {\n                    rec = allRecords[i];\n                    if (rec && !rec.isDestroyed) {\n                        rec.unjoinStore(me);\n                    }\n                }\n            }\n            if (isLoading) {\n                me.removed.clear();\n                storage.suspendEvents();\n            }\n            // Clearing the storage will trigger 'removeAll' and 'change' if `removing`\n            storage.clear();\n            if (isLoading) {\n                storage.resumeEvents();\n            }\n            me.added.clear();\n            me.modified.clear();\n        }\n    }\n    /**\n     * Removes all records from the store.\n     * @param {Boolean} [silent] Specify `true` to suppress events\n     * @returns {Boolean} `true` unless the action was prevented, in which case it returns `false`\n     * @fires beforeRemove\n     * @fires removeAll\n     * @fires change\n     * @category CRUD\n     */\n    removeAll(silent = false) {\n        const\n            me      = this,\n            storage = me.storage;\n        let result;\n        me.isRemoving = true;\n        // No reaction to the storage Collection's change event.\n        if (silent) {\n            storage.suspendEvents();\n            // If silent, the storage Collection won't fire the event we react to\n            // to unjoin, and we allow the removing flag in remove() to be true,\n            // so *it* will not do the unJoin, so if silent, so do it here.\n            const allRecords = me.registeredRecords;\n            for (let i = allRecords.length - 1, rec; i >= 0; i--) {\n                rec = allRecords[i];\n                if (rec && !rec.isDestroyed && !rec.isRoot) {\n                    rec.unjoinStore(me);\n                }\n            }\n        }\n        if (me.tree) {\n            result = me.rootNode.clear() !== false;\n        }\n        else {\n            result = me.clear() !== null;\n        }\n        if (silent) {\n            storage.resumeEvents();\n        }\n        me.isRemoving = false;\n        return result;\n    }\n    /**\n     * Add records to store.\n     * @param {Core.data.Model|Core.data.Model[]|Object|Object[]} records Array of records/data or a single record/data to add to store\n     * @param {Boolean} [silent] Specify `true` to suppress events\n     * @returns {Core.data.Model[]} Added records\n     * @fires add\n     * @fires change\n     * @category CRUD\n     */\n    add(records, silent = false, options = {}) {\n        const\n            me          = this,\n            { storage } = me;\n        records = ArrayHelper.asArray(records);\n        if (!records?.length) {\n            // Adding zero records, bail out\n            return;\n        }\n        me.tree = me.tree || Boolean(me.autoTree && records[0].children);\n        if (me.tree) {\n            const\n                // Map and not Object to allow keys to keep their type\n                parentIdMap       = new Map(),\n                parentIndexField  = me.modelClass.getFieldDataSource('parentIndex'),\n                { parentIdField } = me.modelClass,\n                added             = [];\n            records.forEach(node => {\n                const parentId = node[parentIdField];\n                if (!parentIdMap.has(parentId)) {\n                    parentIdMap.set(parentId, { append : [], insert : [] });\n                }\n                const entry = parentIdMap.get(parentId);\n                // Allow inserting raw data at specific index when passing a parentIndex, used by\n                // ProjectChangeHandlerMixin\n                if (!node.isModel && parentIndexField in node) {\n                    entry.insert.push(node);\n                }\n                else {\n                    entry.append.push(node);\n                }\n            });\n            parentIdMap.forEach(({ append, insert }, parentId) => {\n                const parentNode = parentId == null ? me.rootNode : me.getById(parentId);\n                if (!parentNode) {\n                    throw new Error(`Parent node with id ${parentId} not found, cannot add children.`);\n                }\n                // Append all that needs appending in one go\n                if (append.length) {\n                    added.push(...parentNode.appendChild(append, silent));\n                }\n                // Insertions has to happen one at the time\n                if (insert.length) {\n                    for (const toInsert of insert) {\n                        added.push(parentNode.insertChild(toInsert, toInsert[parentIndexField], silent, options));\n                    }\n                }\n            });\n            // Sort if configured to do so on add, but not if syncing data on load since that will sort anyway\n            if (me.reapplySortersOnAdd && !me.isSyncingDataOnLoad) {\n                me.sort();\n            }\n            return added;\n        }\n        // Give chance to cancel action before records added.\n        if (!silent && me.trigger('beforeAdd', { records }) === false) {\n            return null;\n        }\n        me.tree = me.tree || Boolean(me.autoTree && records[0].children);\n        if (me.tree) {\n            return me.rootNode.appendChild(records);\n        }\n        const added = me.processRecords(records);\n        if (silent) {\n            me.suspendEvents();\n        }\n        storage.add(added);\n        if (silent) {\n            me.resumeEvents();\n        }\n        if (me.autoCommit) {\n            me.doAutoCommit();\n        }\n        return added;\n    }\n    processRecords(records, onRecordCreated) {\n        return records.map(data => {\n            const record = this.processRecord(data.isModel ? data : this.createRecord(data));\n            onRecordCreated?.call(this, record);\n            return record;\n        });\n    }\n    /**\n     * Insert records into the store.\n     * @param {Number} index Index to insert at\n     * @param {Core.data.Model|Core.data.Model[]|Object|Object[]} records Array of records/data or a single record/data to insert to store\n     * @param {Boolean} [silent] Specify `true` to suppress events\n     * @returns {Core.data.Model[]} Inserted records\n     * @fires add\n     * @fires change\n     * @category CRUD\n     */\n    insert(index, records, silent = false) {\n        const\n            me            = this,\n            storage       = me.storage,\n            insertBefore  = me.getAt(index),\n            _records      = storage.values,\n            removeIndices = [];\n        records = ArrayHelper.asArray(records);\n        if (me.tree) {\n            const root = me.rootNode;\n            return root.insertChild(records, root.children?.[index], silent);\n        }\n        // Give chance to cancel action before records added.\n        if (!silent && me.trigger('beforeAdd', { records }) === false) {\n            return null;\n        }\n        let isNoop, start, i;\n        // If the records starting at index or (index - 1), are the same sequence\n        // that we are being asked to add, this is a no-op.\n        if (_records[start = index] === records[0] || _records[start = index - 1] === records[0]) {\n            for (isNoop = true, i = 0; isNoop && i < records.length; i++) {\n                if (records[i] !== _records[start + i]) {\n                    isNoop = false;\n                }\n            }\n        }\n        if (isNoop) {\n            return null;\n        }\n        const added = me.processRecords(records, record => {\n            const\n                removedAtIndex = storage.indexOf(record);\n            if (record.children && record.children.length && me.autoTree) {\n                me.tree = true;\n            }\n            // already in store, do some cleanup\n            if (removedAtIndex > -1) {\n                if (removedAtIndex < index && insertBefore) index--;\n                removeIndices.push(removedAtIndex);\n            }\n            // Store previous index to be able to determine that it is a move, since Collection does not handle that\n            record.meta.previousIndex = removedAtIndex;\n        });\n        // Silently remove them, so that they will be inserted into place.\n        // Collection is stable by default, and inserting an existing item\n        // is a no-op.\n        me.suspendEvents();\n        me.storage.remove(removeIndices);\n        me.resumeEvents();\n        if (silent) {\n            me.suspendEvents();\n        }\n        storage.splice(index, 0, ...added);\n        if (silent) {\n            me.resumeEvents();\n        }\n        if (me.autoCommit) {\n            me.doAutoCommit();\n        }\n        return added;\n    }\n    /**\n     * Moves a record, or block of records to another location.\n     * @param {Core.data.Model|Core.data.Model[]} records The record(s) to move.\n     * @param {Core.data.Model} beforeRecord the record to insert the first record(s) before.\n     * @fires change\n     * @category CRUD\n     */\n    move(records, beforeRecord) {\n        if (this.isTree) {\n            beforeRecord.parent.insertChild(records, beforeRecord);\n        }\n        else {\n            this.storage.move(records, beforeRecord);\n        }\n    }\n    //endregion\n    //region Update multiple\n    setMultiple(filterFn, field, value) {\n        const\n            me      = this,\n            records = [],\n            changes = [];\n        me.forEach(r => {\n            if (filterFn(r)) {\n                changes.push(r.set(field, value, true));\n                records.push(r);\n            }\n        });\n        me.trigger('updateMultiple', { records, all : me.records.length === records.length });\n        me.trigger('change', { action : 'updatemultiple', records, all : me.records.length === records.length });\n        if (me.reapplyFilterOnUpdate && me.isFiltered) me.filter();\n    }\n    setAll(field, value) {\n        const\n            me      = this,\n            changes = [];\n        me.forEach(r => {\n            changes.push(r.set(field, value, true));\n        });\n        me.trigger('updateMultiple', { records : me.records, all : true });\n        me.trigger('change', { action : 'updatemultiple', records : me.records, all : true });\n        if (me.reapplyFilterOnUpdate && me.isFiltered) me.filter();\n    }\n    //endregion\n    //region Commit\n    /**\n     * Accepts all changes, resets the modification tracking:\n     * * Clears change tracking for all records\n     * * Clears added\n     * * Clears modified\n     * * Clears removed\n     * Leaves the store in an \"unmodified\" state.\n     * @internal\n     */\n    acceptChanges() {\n        const me = this;\n        // Clear record change tracking\n        me.added.forEach(r => r.clearChanges(true, false));\n        me.modified.forEach(r => r.clearChanges(true, false));\n        // Clear store change tracking\n        me.added.clear();\n        me.modified.clear();\n        me.removed.clear();\n    }\n    /**\n     * Commits changes, per default only returns changes and resets tracking.\n     * @param {Boolean} [silent] Specify `true` to suppress events\n     * @returns {Object} Changes, see {@link #property-changes}\n     * @fires beforeCommit\n     * @fires commit\n     * @category CRUD\n     */\n    commit(silent = false) {\n        // resets stores tracking of changed records, doesn't store changes, only returns them\n        const\n            { changes } = this;\n        if (!silent && this.trigger('beforeCommit', { changes }) === false) {\n            return false;\n        }\n        this.acceptChanges();\n        if (!silent) {\n            this.trigger('commit', { changes });\n        }\n        return changes;\n    }\n    /**\n     * Reverts all changes in the store (adds removed records back, and removes newly added records).\n     * @fires change\n     * @fires refresh\n     * @category CRUD\n     */\n    revertChanges() {\n        const\n            me          = this,\n            { changes } = me;\n        if (changes) {\n            const event = { action : 'clearchanges', changes };\n            me.add(me.removed.values, true);\n            me.remove(me.added.values, true);\n            me.modified.forEach(r => r.revertChanges(true));\n            me.added.clear();\n            me.modified.clear();\n            me.removed.clear();\n            me.trigger('change', event);\n            me.trigger('refresh', event);\n        }\n    }\n    /**\n     * Get uncommitted changes as an object of added/modified/removed arrays of records.\n     *\n     * ```javascript\n     * // Format:\n     * {\n     *      added: [], // array of Core.data.Model\n     *      modified: [], // array of Core.data.Model\n     *      removed: [] // array of Core.data.Model\n     * }\n     * ```\n     *\n     * @member {Object} changes\n     * @property {Core.data.Model[]} changes.added Records that have been added\n     * @property {Core.data.Model[]} changes.modified Records that have changes to persistable fields\n     * @property {Core.data.Model[]} changes.removed Records that have been removed\n     * @readonly\n     * @category Records\n     */\n    get changes() {\n        const\n            me       = this,\n            // Only include modified records that have persistable changes\n            modified = me.modified.values.filter(r => r.rawModifications);\n        return (me.added.count || modified.length || me.removed.count) ? {\n            // Slicing to have changes intact when triggering commit\n            added   : me.added.values.slice(),\n            modified,\n            removed : me.removed.values.slice()\n        } : null;\n    }\n    /**\n     * Setting autoCommit to true automatically commits changes to records.\n     * @property {Boolean}\n     * @category Records\n     */\n    get autoCommit() {\n        return this._autoCommit;\n    }\n    set autoCommit(auto) {\n        this._autoCommit = auto;\n        if (auto && this.changes) {\n            this.commit();\n        }\n    }\n    /**\n     * Suspends automatic commits upon store changes. Can be called multiple times (it uses an internal counter).\n     * @category Records\n     */\n    suspendAutoCommit() {\n        this.suspendCount++;\n    }\n    /**\n     * Resumes automatic commits upon store changes. Will trigger commit if the internal counter is 0.\n     * @category Records\n     */\n    resumeAutoCommit(doCommit = true) {\n        this.suspendCount--;\n        if (this.autoCommit && doCommit) {\n            this.doAutoCommit();\n        }\n    }\n    doAutoCommit() {\n        if (this.suspendCount <= 0) {\n            this.commit();\n        }\n    }\n    //endregion\n};\n", "import Base from '../../Base.js';\nimport ArrayHelper from '../../helper/ArrayHelper.js';\nimport ObjectHelper from '../../helper/ObjectHelper.js';\n/**\n * @module Core/data/mixin/StoreChanges\n */\n/**\n * Mixin for Store that handles applying changes (presumable from a backend)\n *\n * @mixin\n */\nexport default Target => class StoreChanges extends (Target || Base) {\n    static get $name() {\n        return 'StoreChanges';\n    }\n    static get configurable() {\n        return {\n            /**\n             * Specifies target to filter and sort after applying changeset:\n             * * `'changes'` - apply sort and filter to changeset only (see more below)\n             * * `'none'` - do not apply sort and filter\n             *\n             * ### `changes` behavior\n             * If the store has filters in effect when the changeset is applied, the following rules will determine how the\n             * filtered values are affected:\n             * - Among added records, only those that match the filter will be included in the filtered set\n             * - Among updated records, those that did not previously match the filter but now do will be added to the filtered set,\n             *   and those that did match but no longer do will also remain in the filtered set. This means that new records may\n             *   appear in the filtered set as a result of `applyChanges`, but records will not disappear until filters are\n             *   re-applied.\n             *\n             * @default\n             * @prp {'changes'|'none'}\n             */\n            applyChangesetFilterSortTarget : 'changes'\n        };\n    }\n    /**\n     * Applies changes from another store to this store. Useful if cloning records in one store to display in a\n     * grid in a popup etc. to reflect back changes.\n     * @param {Core.data.Store} otherStore\n     * @category CRUD\n     */\n    applyChangesFromStore(otherStore) {\n        const\n            me          = this,\n            { changes } = otherStore;\n        if (!changes) {\n            return;\n        }\n        if (changes.added) {\n            me.add(changes.added);\n        }\n        if (changes.removed) {\n            // Remove using id, otherwise indexOf in remove fn won't yield correct result\n            me.remove(changes.removed.map(r => r.id));\n        }\n        if (changes.modified) {\n            changes.modified.forEach(record => {\n                const localRecord = me.getById(record.id);\n                localRecord.set(record.modifications);\n            });\n        }\n    }\n    /**\n     * Applies a set of changes (presumable from a backend) expressed as an object matching the format outputted by the\n     * {@link Core/data/Store#property-changes} property: `{ added : [], modified/updated : [], removed : [] }`\n     *\n     * `added` is expected to be an array of raw data objects consumable by the stores model class for records to add to\n     * the store (see example snippet below).\n     *\n     * `modified` (or `updated` for compatibility with Schedulers CrudManager) is expected to have the same format as\n     * `added`, but should always include the `id` of the record to update.\n     *\n     * Records that have been created locally and gets assigned a proper id by the backend are expected to also pass a\n     * `phantomId` field (name of the field is configurable using the `phantomIdField` arg, more info on phantom ids\n     * below), to match it with the current id of a local record (`id` will contain the new id).\n     *\n     * Note that it is also possible to pass this `phantomId` -> `id` mapping in the `added` array. When encountering a\n     * record in that array that already exists in the local store, it will be treated the same was as a record in the\n     * `modified` array.\n     *\n     * `removed` is expected to be an array of objects with the `{ id : xx }` shape. Any matches on an id in the store\n     * will be removed, those and any non matches will also be cleared from the change tracking of the store.\n     *\n     * If the store has filters in effect when the changeset is applied, the following rules will determine how the\n     * filtered values are affected:\n     * - Among added records, only those that match the filter will be included in the filtered set\n     * - Among updated records, those that did not previously match the filter but now do will be added to the filtered set,\n     *   and those that did match but no longer do will also remain in the filtered set. This means that new records may\n     *   appear in the filtered set as a result of `applyChanges`, but records will not disappear until filters are\n     *   re-applied.\n     *\n     * As an example, consider a store with the following initial state and some operations performed on it:\n     *\n     * ```javascript\n     * // Load some data into the store\n     * store.data = [\n     *     { id : 1, name : 'Minerva' },\n     *     { id : 2, name : 'Mars' },\n     *     { id : 3, name : 'Jupiter' }\n     * ];\n     * // Add a new record. It gets assigned a generated id,\n     * // for example 'generated56'\n     * store.add({ name : 'Artemis' });\n     * // Remove Jupiter\n     * store.remove(3);\n     * ```\n     *\n     * After syncing those operations to a custom backend (however you chose to solve it in your application) we might\n     * get the following response (see \"Transforming a response to the correct format\" below if your backend responds\n     * in another format):\n     *\n     * ```javascript\n     * const serverResponse = {\n     *     added : [\n     *         // Added by the backend, will be added locally\n     *         { id : 5, name : 'Demeter' }\n     *     ],\n     *\n     *     updated : [\n     *         // Will change the name of Minerva -> Athena\n     *         { id : 1, name : 'Athena' },\n     *         // Will set proper id 4 for Artemis\n     *         { $PhantomId : 'generated56', id : 4 }\n     *     ],\n     *\n     *     removed : [\n     *         // Confirmed remove of Jupiter\n     *         { id : 3 },\n     *         // Removed by the backend, Mars will be removed locally\n     *         { id : 2 }\n     *     ]\n     * };\n     * ```\n     *\n     * If that response is then passed to this function:\n     *\n     * ```javascript\n     * store.applyChangeSet(serverResponse);\n     * ```\n     *\n     * The end result will be the following data in the store:\n     *\n     * ```javascript\n     * [\n     *     { id : 1, name : 'Athena' }, // Changed name\n     *     { id : 4, name : 'Artemis' }, // Got a proper id\n     *     { id : 5, name : 'Demeter' } // Added by the backend\n     * ]\n     * ```\n     *\n     * ### Phantom ids\n     *\n     * When a record is created locally, it is always assigned a generated id. That id is called a phantom id (note that\n     * it is assigned to the normal id field). When passing the new record to the backend, the id is sent with it. When\n     * the backend inserts the record into the database, it (normally) gets a proper id assigned. That id then needs to\n     * be passed back in the response, to update the local record with the correct id. Making sure that future updates\n     * match the correct row in the database.\n     *\n     * For example a newly created record should be passed similar to this to the backend (pseudo format, up to the\n     * application/backend to decide):\n     *\n     * ```json\n     * {\n     *     \"added\" : {\n     *         \"id\" : \"generated79\",\n     *         \"name\" : \"Hercules\",\n     *         ...\n     *     }\n     * }\n     * ```\n     *\n     * For the backend response to be applicable for this function, it should then respond with:\n     *\n     * ```json\n     * {\n     *     \"updated\" : {\n     *         {\n     *             \"$PhantomId\" : \"generated79\",\n     *             \"id\" : 465\n     *         }\n     *     }\n     * }\n     * ```\n     *\n     * (Or, as stated above, it can also be passed in the \"added\" array. Which ever suits your backend best).\n     *\n     * This function will then change the id of the local record using the phantom id `generated79` to `465`.\n     *\n     * ### Transforming a response to the correct format\n     *\n     * This function optionally accepts a `transformFn`, a function that will be called with the `changes`. It is\n     * expected to return a changeset in the format described above (`{ added : [], updated : [], removed : [] }`),\n     * which then will be used to apply the changes.\n     *\n     * Consider the following \"non standard\" (made up) changeset:\n     *\n     * ```javascript\n     * const changes = {\n     *     // Database ids for records previously added locally\n     *     assignedIds : {\n     *         'phantom1' : 10,\n     *         'phantom2' : 15\n     *     },\n     *     // Ids records removed by the backend\n     *     removed : [11, 27],\n     *     // Modified records, keyed by id\n     *     altered : {\n     *         12 : { name : 'Changed' }\n     *     },\n     *     // New records, keyed by id\n     *     inserted : {\n     *         20  : { name : 'New' }\n     *     }\n     * }\n     * ```\n     *\n     * Since it does not match the expected format it has to be transformed:\n     *\n     * ```javascript\n     * store.applyChangeset(changes, ({ assignedIds, inserted, altered, removed }) => ({\n     *    // Convert inserted to [{ id : 20, name : 'New' }]\n     *    added : Object.entries(inserted).map(([id, data] => ({ id, ...data }),\n     *    updated : [\n     *        // Convert assignedIds to [{ $PhantomId : 'phantom1', id : 10 }, ...]\n     *       ...Object.entries(assignedIds).map(([phantomId, id])) => ({ $PhantomId : phantomId, id }),\n     *       // Convert altered to [{ id : 12, name : 'Changed' }]\n     *       ...Object.entries(modified).map(([id, data] => ({ id, ...data })\n     *    ],\n     *    // Convert removed to [{ id : 11 }, ...]\n     *    removed : removed.map(id => ({ id }))\n     * }));\n     * ```\n     *\n     * The transform function above would output:\n     *\n     * ```javascript\n     * {\n     *     added : [\n     *         {  id : 20, name : 'New' }\n     *     ],\n     *     updated : [\n     *         { $PhantomId : 'phantom1', id : 10 },\n     *         { $PhantomId : 'phantom2', id : 15 },\n     *         {  id : 12, name : 'Changed' }\n     *     ],\n     *     removed : [\n     *        { id : 11 },\n     *        { id : 12 }\n     *     ]\n     * }\n     * ```\n     *\n     * And that format can then be applied.\n     *\n     * @param {Object} changes Changeset to apply to the store, see specification above\n     * @param {Function} [transformFn] Optional function used to preprocess a changeset in a different format,\n     * should return an object with the format expected by this function (see above)\n     * @param {String} [phantomIdField] Field used by the backend when communicating a record being assigned a proper id\n     * instead of a phantom id (see above)\n     * @privateparam {Boolean} [remote] Set to true to indicate changes are from the remote source. Remote changes have\n     * precedence over local.\n     * @privateparam {Boolean} [logChanges] Used by CrudManager to be able to revert specific changes later\n     * @category CRUD\n     */\n    applyChangeset(changes, transformFn = null, phantomIdField = '$PhantomId', remote = true, logChanges = false) {\n        const\n            me                                    = this,\n            { added, updated, modified, removed } = transformFn?.(changes, me) ?? changes,\n            // To support both updated & modified (store uses modified, CM updated)\n            altered                               = updated ?? modified ?? [],\n            idDataSource                          = me.modelClass.getFieldDataSource('id'),\n            log                                   = logChanges ? new Map() : null,\n            allAdded                              = [],\n            allAltered                            = [];\n        let rootUpdated = false, modifiedParents = [];\n        // Store currently visible records to keep records which no longer match filter in view\n        me._groupVisibleRecordIds = [];\n        // We only need this for grouped store which cannot be a tree store\n        me.isGrouped && me.forEach(record => {\n            me._groupVisibleRecordIds.push(record.id);\n        });\n        // Process added records\n        if (added?.length > 0) {\n            const\n                toUpdate = [],\n                toAdd    = [];\n            // Separate actually new records from added records that get a proper id set up, to match more backends\n            for (const data of added) {\n                if (me.getById(data[phantomIdField] ?? ObjectHelper.getPath(data, idDataSource))) {\n                    // we need to keep order of the added records\n                    // https://github.com/bryntum/support/issues/5189\n                    toUpdate.push(data);\n                }\n                else {\n                    toAdd.push(data);\n                }\n            }\n            altered.unshift.apply(altered, toUpdate);\n            // Create new records in the store, and clear them out of the added bag\n            // When applying remote changes we do not want to update ordered tree index until all\n            // add/update/remove action are finalized. After that we can sort it correctly.\n            const addedRecords = me.add(toAdd, false, { orderedParentIndex : { skip : true } }) ?? [];\n            allAdded.push(...addedRecords);\n            if (me.tree) {\n                // Go over added records and find all parents which children are modified in case\n                // we need to restore ordered tree\n                for (const record of addedRecords) {\n                    const { parent } = record;\n                    // If root WBS should be updated\n                    if (parent.isRoot) {\n                        rootUpdated = true;\n                        modifiedParents = [parent];\n                        break;\n                    }\n                    if (!parent.isRoot && modifiedParents.every(r => !r.contains(parent))) {\n                        modifiedParents.push(parent);\n                    }\n                }\n            }\n            for (const record of addedRecords) {\n                log?.set(record.id, record.data);\n                record.clearChanges();\n            }\n        }\n        // Process modified records\n        if (altered?.length > 0) {\n            for (const data of altered) {\n                const\n                    phantomId = data[phantomIdField],\n                    id        = ObjectHelper.getPath(data, idDataSource),\n                    record    = me.getById(phantomId ?? id);\n                // Matching an existing record -> update it\n                if (record) {\n                    const changes = record.applyChangeset(data, phantomIdField, remote);\n                    // If current record is not part of tree already scheduled to ordering, add it\n                    if (me.tree && !rootUpdated && modifiedParents.every(r => !r.contains(record))) {\n                        if (record.parent.isRoot) {\n                            rootUpdated = true;\n                            modifiedParents = [record.parent];\n                        }\n                        else {\n                            modifiedParents.push(record.parent);\n                        }\n                    }\n                    log?.set(id, changes);\n                    allAltered.push(record);\n                }\n            }\n        }\n        // Process removed records\n        if (removed?.length > 0) {\n            me.applyRemovals(removed);\n        }\n        if (me.applyChangesetFilterSortTarget === 'changes') {\n            const parentsModifiedByFilter = me.filterChangeset(allAdded, allAltered);\n            modifiedParents.push(...parentsModifiedByFilter);\n        }\n        me.afterChangesetApplied(modifiedParents);\n        me._groupVisibleRecordIds = null;\n        return log;\n    }\n    afterChangesetApplied(modifiedParents) {\n        // Can we always safely use ordered tree?\n        modifiedParents.forEach(parent => {\n            parent.traverse(record => {\n                record.sortOrderedChildren(false, false);\n                // Parent index from the remote source might have been applied, in which case\n                // we need to update local index because we do not want any movements in the tree\n                if (record.children) {\n                    record.updateChildrenIndices(record.children, 'parentIndex', true);\n                }\n                if (record.unfilteredChildren) {\n                    record.updateChildrenIndices(record.unfilteredChildren, 'unfilteredIndex', true);\n                }\n            });\n        });\n    }\n    // Apply removals, removing records and updating the `removed` bag to match.\n    //\n    // Accepts an array of objects containing an `id` property. Records in the store matching an entry in the array\n    // will be removed from the store and the `removed` bag. Unmatched entries will be removed from the `removed` bag.\n    applyRemovals(removals) {\n        const\n            me                         = this,\n            { removed : removedStash } = me,\n            idDataSource               = me.modelClass.idField,\n            toRemove                   = [];\n        for (const removedEntry of removals) {\n            const id = ObjectHelper.getPath(removedEntry, idDataSource);\n            // Removed locally and confirmed by server, just remove the record from the removed stash\n            if (removedStash.includes(id)) {\n                removedStash.remove(id);\n            }\n            // Server driven removal (most likely), collect for removal locally too\n            else  {\n                toRemove.push(id);\n            }\n        }\n        // Remove collected records in one go\n        me.remove(toRemove);\n        // Leave no trace of them at all\n        for (const record of toRemove) {\n            removedStash.remove(record);\n        }\n    }\n    /**\n     * Filters records that have been added/updated as part of a changeset. The `added` and `updated` parameters\n     * are arrays of values that have already been added/updated in the Collection's values. This method brings\n     * the Collection's `_filteredValues` in sync without performing a full sort or filter, using the following rules:\n     *\n     * - Added records that do not match the filter are removed from _filteredValues\n     *\n     * - Updated records that now match the filter are inserted at the correct position in _filteredValues\n     *   if they were not formerly included\n     *\n     * - Updated records that formerly matched the filter, but now do not, are NOT removed from _filteredValues\n     *\n     * If the collection is sorted, either on its own or via a sort applied at the store level, that sort order is\n     * respected when adding items to _filteredValues. If not, items are inserted in the same order they occur in\n     * _values.\n     *\n     * @param {Object[]} added An array of unique values that were added as part of the changeset.\n     * @param {Object[]} updated An array of unique values that were updated as part of the changeset.\n     * @returns {Object[]} Any records that were added or removed from view, or whose children were modified.\n     * @private\n     */\n    filterChangeset(added, updated) {\n        const\n            me = this,\n            {\n                isFiltered,\n                tree,\n                isGrouped,\n                filtersFunction\n            } = me,\n            storeSortFunction = me.isSorted ? me.createSorterFn(me.sorters) : undefined,\n            {\n                allValues,\n                addedValues,\n                isSorted\n            } = me.storage,\n            sorter = storeSortFunction != null || isSorted ? storeSortFunction ?? me.storage.sortFunction : null,\n            modifiedParents = new Set();\n        if (!isFiltered) {\n            return [];\n        }\n        let trigger = false, groupers;\n        // When groups are involved we always rebuild them entirely. We need to store groupers, remove them to get flat\n        // store, apply flat store logic regarding filtering changes, and then re-group store again\n        // https://github.com/bryntum/support/issues/6134\n        if (isGrouped) {\n            groupers = me.groupers;\n            me.clearGroupers(true);\n        }\n        if (tree) {\n            const nodesToInclude = new Set(updated.filter(filtersFunction));\n            // Tree store does not automatically include new filter-matching nested descendants inside\n            // collapsed branches; we must make sure they and their ancestors are all included in the filtered set\n            for (const matchingAdd of added.filter(filtersFunction)) {\n                nodesToInclude.add(matchingAdd);\n            }\n            // Expand to include all ancestors of included rows\n            nodesToInclude.forEach(node => node.bubble(ancestor => nodesToInclude.add(ancestor)));\n            nodesToInclude.delete(me.rootNode);\n            const nodesToIncludeByParent = ArrayHelper.groupBy(Array.from(nodesToInclude), 'parentId');\n            for (const siblingsToInclude of Object.values(nodesToIncludeByParent)) {\n                const { parent } = siblingsToInclude[0];\n                // If `unfilteredChildren` is null, we assume `children` already contains all available children\n                if (parent.unfilteredChildren) {\n                    // Ignore ordering here and just append non-duplicates to `children`\n                    parent.children.push(...siblingsToInclude.filter(child => !parent.children.includes(child)));\n                    modifiedParents.add(parent); // Remember that we modified this, to re-sort later\n                }\n            }\n        }\n        // If store is grouped, sorter will be applied anyway\n        else if (sorter && !isGrouped) {\n            // Non-tree, sorted store\n            // Current approach is to divide the filtered list into a \"sorted\" head and an unsorted tail (items added\n            // since last sort). Insert the newly-matching items into the sorted part, re-sort that, then re-append\n            // the unsorted tail\n            const\n                // Must wait to read filteredValues after clearGroupers\n                { filteredValues } = me.storage,\n                sortedLength = addedValues\n                    ? (filteredValues.findLastIndex(value => !addedValues.has(value)) + 1)\n                    : filteredValues.length,\n                sorted = filteredValues.slice(0, sortedLength),\n                updatedMatches = new Set(updated.filter(filtersFunction));\n            for (const value of filteredValues) {\n                if (updatedMatches.has(value)) {\n                    updatedMatches.delete(value);\n                }\n            }\n            for (const newMatch of updatedMatches) {\n                sorted.push(newMatch);\n            }\n            sorted.sort(sorter);\n            filteredValues.splice(0, sortedLength, ...sorted);\n            trigger = true;\n        }\n        else {\n            // Non-tree, non-sorted store\n            // Move through filtered and unfiltered lists in order, inserting raw value into filtered list whenever one\n            // is encountered that's in the set of matching, updated values\n            const updatedMatches = updated.filter(item =>\n                filtersFunction(item) && !me.storage.includes(item));\n            if (updatedMatches.length > 0) {\n                me.includeInSubset(allValues, me.storage.filteredValues, updatedMatches);\n                trigger = true;\n            }\n        }\n        // Un-show non-matching added records\n        const nonMatchingAdds = new Set(added.filter(value => !filtersFunction(value)));\n        if (nonMatchingAdds.size > 0) {\n            if (tree) {\n                for (const addedChild of nonMatchingAdds) {\n                    ArrayHelper.remove(addedChild.parent.children, addedChild);\n                    modifiedParents.add(addedChild.parent);\n                }\n            }\n            else {\n                ArrayHelper.remove(me.storage.filteredValues, nonMatchingAdds);\n            }\n            trigger = true;\n        }\n        if (groupers) {\n            me.group(groupers[0], null, false, true, true);\n            trigger = true;\n        }\n        if (tree && modifiedParents.size > 0) {\n            me.storage.replaceValues({\n                values : me.collectDescendants(me.rootNode).visible,\n                silent : true\n            });\n        }\n        else if (trigger) {\n            // Storage content has changed, clear idMap to rebuild it\n            me._idMap = null;\n            me.trigger('refresh');\n        }\n        return [...modifiedParents];\n    }\n    /**\n     * Given an array `all`, an array `subset` that is a subset of `all` in the same order, and another array\n     * `toInclude` that is a different subset of `all` disjoint with `subset`, add each item from `toInclude`\n     * to `subset`, in an order matching the order in `all`. The order of `subset` must match the order of `all`.\n     * The order of `toInclude` is unimportant.\n     *\n     * Modifies `subset` in-place.\n     *\n     * @param {Array} all An array of unique items (e.g. records)\n     * @param {Array} subset An array containing a subset of the items in `all` (same order as `all`)\n     * @param {Array} toInclude An array or items from `all` that should be included in `subset` (unordered)\n     * @returns {Array} The subset modified in-place.\n     * @private\n     */\n    includeInSubset(all, subset, toInclude) {\n        const toIncludeSet = new Set(toInclude);\n        let\n            subsetIndex = 0,\n            allIndex = 0,\n            done = toIncludeSet.size === 0;\n        while (allIndex < all.length && !done) {\n            const subsetItem = subset[subsetIndex];\n            let allItem = all[allIndex];\n            // Move ahead in raw list until we find the matching item, inserting new items along the way\n            while (subsetItem !== allItem) {\n                if (toIncludeSet.has(allItem)) {\n                    subset.splice(subsetIndex, 0, allItem);\n                    subsetIndex++;\n                    toIncludeSet.delete(allItem);\n                    done = toIncludeSet.size === 0;\n                }\n                allItem = all[++allIndex];\n            }\n            // Ignore \"to include\" items that are already in the subset (prevents duplicates)\n            if (toIncludeSet.has(subsetItem)) {\n                toIncludeSet.delete(subsetItem);\n            }\n            // Keep going in filtered list\n            if (subsetIndex < subset.length) {\n                subsetIndex++;\n            }\n        }\n        return subset;\n    }\n};\n", "import Base from '../../Base.js';\nimport Filter from '../../util/CollectionFilter.js';\nimport FunctionHelper from '../../helper/FunctionHelper.js';\nimport Collection from '../../util/Collection.js';\nimport ArrayHelper from '../../helper/ArrayHelper.js';\n/**\n * @module Core/data/mixin/StoreFilter\n */\n/**\n * Mixin for Store that handles filtering.\n * Filters are instances of {@link Core/util/CollectionFilter} class.\n *\n * - Adding a filter for the same property will replace the current one (unless a unique {@link Core.util.CollectionFilter#config-id} is specified),\n * but will not clear any other filters.\n * - Adding a filter through the {@link #function-filterBy} function is ultimate.\n * It will clear all the property based filters and replace the current filterBy function if present.\n * - Removing records from the store does not remove filters!\n * The filters will be reapplied if {@link #config-reapplyFilterOnAdd}/{@link #config-reapplyFilterOnUpdate} are true and you add new records or update current.\n *\n * ```javascript\n * // Add a filter\n * store.filter({\n *     property : 'score',\n *     value    : 10,\n *     operator : '>'\n * });\n *\n * // Add filter as a function\n * store.filter(record => record.score > 10);\n *\n * // Add named filter as a function\n * store.filter({\n *     id : 'my filter',\n *     filterBy : record => record.score > 10\n * });\n *\n * // Replace any filter set with new filters\n * store.filter({\n *     filters : {\n *         property : 'score',\n *         value    : 10,\n *         operator : '>'\n *     },\n *     replace : true\n * });\n *\n * // Remove this one specific filter, leaving any possible others in place.\n * // A filter's id defaults to the property name that it's filtering on.\n * store.removeFilter('score');\n *\n * // Reapply filters without firing an event.\n * // Use if making multiple data mutations with the\n * // intention of updating UIs when all finished.\n * store.filter({\n *     silent : true\n * });\n * ```\n *\n * @mixin\n */\nexport default Target => class StoreFilter extends (Target || Base) {\n    static get $name() {\n        return 'StoreFilter';\n    }\n    //region Config\n    static get defaultConfig() {\n        return {\n            /**\n             * Specify one or more {@link Core/util/CollectionFilter} config objects to apply initially.\n             *\n             * For example:\n             *\n             * ```javascript\n             *  // Configure the store to filter in clients over the age of 30\n             *  new Store({\n             *      ...,\n             *      filters : [{\n             *          property : 'age',\n             *          value    : 30,\n             *          operator : '>'\n             *      }],\n             *      ...\n             *  })\n             * ```\n             *\n             * or:\n             *\n             * ```javascript\n             *  // Configure the store to filter based on a complex operation\n             *  new Store({\n             *      ...,\n             *      filters : [{\n             *          filterBy(record) {\n             *              // Return true or false for filtering in or out\n             *              return shouldClientBeVisible(record);\n             *          }\n             *      }],\n             *      ...\n             *  })\n             * ```\n             *\n             * @config {CollectionFilterConfig|CollectionFilterConfig[]}\n             * @category Filtering\n             */\n            filters : null,\n            /**\n             * Specify true to reapply filters when a record is added to the store.\n             * @config {Boolean}\n             * @default\n             * @category Filtering\n             */\n            reapplyFilterOnAdd : false,\n            /**\n             * Specify true to reapply filters when a record is updated in the store.\n             * @config {Boolean}\n             * @default\n             * @category Filtering\n             */\n            reapplyFilterOnUpdate : false\n        };\n    }\n    //endregion\n    //region Events\n    /**\n     * Fired after applying filters to the store\n     * @event filter\n     * @param {Core.data.Store} source This Store\n     * @param {Core.util.Collection} filters Filters used by this Store\n     * @param {Core.data.Model[]} removed The records which were filtered out by the action.\n     * @param {Core.data.Model[]} added The records which were filtered back in by the action.\n     * @param {Core.data.Model[]} records Filtered records\n     */\n    //endregion\n    //region Properties\n    set reapplyFilterOnAdd(enable) {\n        this.storage.autoFilter = enable;\n    }\n    get reapplyFilterOnAdd() {\n        return this.storage.autoFilter;\n    }\n    /**\n     * Currently applied filters. A collection of {@link Core.util.CollectionFilter} instances.\n     * @type {Core.util.Collection}\n     * @readonly\n     * @category Sort, group & filter\n     */\n    set filters(filters) {\n        const\n            me         = this,\n            collection = me.filters;\n        collection.clear();\n        // Invalidate the filtersFunction so that it has to be recalculated upon next access\n        me._filtersFunction = null;\n        // If we are being asked to filter, parse the filters.\n        if (filters) {\n            if (filters.constructor.name === 'Object') {\n                for (const f of Object.entries(filters)) {\n                    // Entry keys are either a field name with its value being the filter value\n                    // or, there may be one filterBy property which specifies a filtering function.\n                    if (f[0] === 'filterBy' && typeof f[1] === 'function') {\n                        collection.add(new Filter({\n                            filterBy : f[1]\n                        }));\n                    }\n                    else {\n                        collection.add(new Filter(f[1].constructor.name === 'Object' ? Object.assign({\n                            property : f[0]\n                        }, f[1]) : {\n                            property : f[0],\n                            value    : f[1]\n                        }));\n                    }\n                }\n            }\n            else if (Array.isArray(filters)) {\n                // Make sure we are adding CollectionFilters\n                collection.add(...filters.map(filterConfig => {\n                    if (filterConfig instanceof Filter) {\n                        return filterConfig;\n                    }\n                    return new Filter(filterConfig);\n                }));\n            }\n            else if (filters.isCollection) {\n                // Use supplied collection? Opting to use items from it currently\n                collection.add(...filters.values);\n            }\n            else {\n                collection.add(new Filter({\n                    filterBy : filters\n                }));\n            }\n            collection.forEach(item => item.owner = me);\n        }\n    }\n    get filters() {\n        return this._filters || (this._filters = new Collection({ extraKeys : ['property'] }));\n    }\n    set filtersFunction(filtersFunction) {\n        this._filtersFunction = filtersFunction;\n    }\n    get filtersFunction() {\n        const\n            me                     = this,\n            { filters, isGrouped } = me;\n        if (!me._filtersFunction) {\n            if (filters.count) {\n                const generatedFilterFunction = Filter.generateFiltersFunction(filters);\n                me._filtersFunction = candidate => {\n                    // A group record is filtered in if it has passing groupChildren.\n                    if (isGrouped && candidate.isSpecialRow) {\n                        return candidate.groupChildren.some(generatedFilterFunction);\n                    }\n                    else {\n                        return generatedFilterFunction(candidate);\n                    }\n                };\n            }\n            else {\n                me._filtersFunction = FunctionHelper.returnTrue;\n            }\n        }\n        return me._filtersFunction;\n    }\n    /**\n     * Check if store is filtered\n     * @property {Boolean}\n     * @readonly\n     * @category Sort, group & filter\n     */\n    get isFiltered() {\n        return this.filters.values.some(filter => !filter.disabled);\n    }\n    //endregion\n    traverseFilter(record) {\n        const\n            me          = this,\n            hitsCurrent = !record.isRoot && me.filtersFunction(record),\n            children    = record.unfilteredChildren || record.children;\n        // leaf, bail out\n        if (!children || !children.length) {\n            return hitsCurrent;\n        }\n        if (!record.unfilteredChildren) {\n            record.unfilteredChildren = record.children.slice();\n        }\n        record.children = record.unfilteredChildren.filter(r => {\n            return me.traverseFilter(r);\n        });\n        // unfilteredIndex must be set for child elements\n        record.updateChildrenIndices(record.unfilteredChildren, 'unfilteredIndex', true);\n        // parentIndex must be set for visible child elements\n        record.updateChildrenIndices(record.children, 'parentIndex', true);\n        return hitsCurrent || Boolean(record.children.length);\n    }\n    traverseClearFilter(record) {\n        const me = this;\n        if (record.unfilteredChildren) {\n            record.children = record.unfilteredChildren.slice();\n            record.unfilteredChildren = null;\n        }\n        if (record.children) {\n            record.children.forEach(r => me.traverseClearFilter(r));\n            record.updateChildrenIndices(record.children, 'parentIndex', true);\n        }\n    }\n    get latestFilterField() {\n        return this.filters.last ? this.filters.last.property : null;\n    }\n    /**\n     * Adds a single filter to the {@link #config-filters} collection. By default, filters are reevaluated\n     * and a Store change event fired.\n     *\n     * If the `silent` parameter is passed as `true`, multiple filters can be added without causing data changes.\n     *\n     * When the filters are as required, call {@link #function-filter} with no parameters\n     * to apply the filters to the store.\n     *\n     * @param {CollectionFilterConfig|Function} newFilter A {@link Core.util.CollectionFilter filter} config,\n     * or a function to use for filtering.\n     * @param {Boolean} [silent] Pass `true` to *not* refilter the store immediately. Such as when\n     * adding multiple filters.\n     * @returns {Core.util.CollectionFilter} The Filter instance that was added.\n     * @returns {Promise|Core.util.CollectionFilter} If {@link Core/data/AjaxStore#config-filterParamName} is set on store, this method\n     * returns Collection filter inside a `Promise` which is resolved after data is loaded from remote server, otherwise it returns `null`\n     * @async\n     * @category Sort, group & filter\n     */\n    addFilter(filter, silent = false) {\n        const me = this;\n        filter = filter instanceof Filter ? filter : new Filter(filter);\n        // We want notification upon change of field, value or operator\n        filter.owner = me;\n        // Collection will replace any already existing filter on the field, unless it has id specified\n        me.filters.add(filter);\n        if (!silent) {\n            if (me.remoteFilter) {\n                return me.filter().then(() => filter);\n            }\n            else {\n                me.filter();\n            }\n        }\n        return filter;\n    }\n    /**\n     * Filters the store by **adding** the specified filter(s) to the existing filters collection applied to this Store.\n     * If a filter has an {@link Core.util.CollectionFilter#config-id id} specified,\n     * or a {@link Core.util.CollectionFilter#config-property property} specified,\n     * it will search for corresponding filter(s) in the existing filters first and replace it with a new filter.\n     * **It will not remove other filters applied to the store!**\n     *\n     * To **add** a new filter:\n     * ```\n     * // Filter using simple object\n     * store.filter({\n     *     property : 'age',\n     *     operator : '>',\n     *     value    : 90\n     * });\n     *\n     * // Filter using function\n     * store.filter(r => r.age < 90);\n     *\n     * // Filter using a named filter as a function\n     * store.filter({\n     *     id : 'my-filter',\n     *     filterBy : record => record.score > 10\n     * });\n     * ```\n     *\n     * To **remove** a specific filter, but keep other filters applied\n     * ```\n     * // Remove by filter `id` or `property`. Filter `id` defaults to the `property` name.\n     * store.removeFilter('age');\n     * store.removeFilter('my-filter');\n     * ```\n     *\n     * To **replace** all existing filters with a new filter\n     * ```\n     * // Remove all filters and filter using simple object\n     * store.filter({\n     *     filters : {\n     *         property : 'age',\n     *         operator : '<',\n     *         value    : 90\n     *     },\n     *     replace : true\n     * });\n     *\n     * // Remove all filters and filter using function\n     * store.filter({\n     *     filters : r => r.age > 90,\n     *     replace : true\n     * });\n     *\n     * // Remove all filters and filter using a named filter as a function\n     * store.filter({\n     *     filters : {\n     *         id : 'my-filter',\n     *         filterBy : record => record.score > 10\n     *     },\n     *     replace : true\n     * });\n     * ```\n     *\n     * Basically filters replacing is an equivalent of having two sequenced calls:\n     * {@link #function-clearFilters clearFilters} and {@link #function-filter filter}.\n     *\n     * Call without arguments to reapply filters.\n     * ```\n     * // Re-filter the store\n     * store.filter();\n     * ```\n     *\n     * @param {Object|CollectionFilterConfig|CollectionFilterConfig[]|Function} newFilters\n     *        A {@link Core.util.CollectionFilter filter} config,\n     *        or an array of {@link Core.util.CollectionFilter filter} configs,\n     *        or a function to use for filtering,\n     *        or a special object like: ```{ replace : true, filters : newFilters }```\n     * @param {Boolean} [newFilters.replace]\n     *        A flag, indicating whether or not the previous filters should be removed.\n     * @param {Boolean} [newFilters.silent]\n     *        Set as true to not fire events. UI will not be informed about the changes.\n     * @param {CollectionFilterConfig|CollectionFilterConfig[]|Function} [newFilters.filters]\n     *        If `newFilters` is an object and `replace` property is defined in the `newFilters`,\n     *        it means that special object is used and real filter configuration must be nested down to this `filters` property.\n     *        It can be:\n     *        A {@link Core.util.CollectionFilter filter} config,\n     *        or an array of {@link Core.util.CollectionFilter filter} configs,\n     *        or a function to use for filtering.\n     * @fires filter\n     * @fires change\n     * @returns {Promise|null} If {@link Core/data/AjaxStore#config-filterParamName} is set on store, this method returns Promise\n     * which is resolved after data is loaded from remote server, otherwise it returns null value\n     * @async\n     * @category Sort, group & filter\n     */\n    filter(newFilters) {\n        const me = this;\n        let silent = false, internal;\n        if (newFilters) {\n            let fieldType = typeof newFilters;\n            if (fieldType === 'object') {\n                if (('silent' in newFilters) || ('replace' in newFilters) || newFilters.filters) {\n                    silent = newFilters.silent;\n                    if (newFilters.replace) {\n                        // If replacing with empty filters (i.e. clearing filters), clearFilters should trigger a re-filter\n                        me.clearFilters(newFilters.filters.length === 0);\n                    }\n                    internal = newFilters.internal;\n                    newFilters = newFilters.filters;\n                    fieldType = typeof newFilters;\n                }\n            }\n            // If it was just a config object containing no filters, this will be null\n            if (newFilters) {\n                const wasFiltered = me.isFiltered;\n                // We will not be informed about Filter mutations while configuring.\n                me.isConfiguring = true;\n                // If we provide array of objects looking like :\n                //  {\n                //      property  : 'fieldName',\n                //      value     : 'someValue',\n                //      [operator : '>']\n                //  }\n                //  or ...\n                //  {\n                //      property : 'fieldName',\n                //      filterBy : function (value, record) {\n                //          return value > 50;\n                //      }\n                //  }\n                if (Array.isArray(newFilters)) {\n                    newFilters.forEach(f => me.addFilter(f, true), me);\n                }\n                else if (fieldType === 'function') {\n                    const filter = new Filter(newFilters);\n                    filter.internal = internal;\n                    me.addFilter(filter, true);\n                }\n                // Old signature of field name, value with implicit equality test.\n                // Not documented, but still tested.\n                else if (fieldType === 'string') {\n                    me.addFilter({\n                        property : newFilters,\n                        value    : arguments[1]\n                    }, true);\n                }\n                // An object-based filter definition\n                else {\n                    me.addFilter(newFilters, true);\n                }\n                // Open up to receiving Filter mutation notifications again\n                me.isConfiguring = false;\n                // We added a disabled filter to either no filters, or all disabled filters, so no change.\n                if (!me.isFiltered && !wasFiltered) {\n                    return null;\n                }\n            }\n        }\n        // Invalidate the filtersFunction so that it has to be recalculated upon next access\n        me.filtersFunction = null;\n        // Implemented here for local filtering.\n        // AjaxStore implements for remote and returns a Promise, so MUST return the call value.\n        const result = me.performFilter(silent);\n        // Force rebuild of idMap\n        me._idMap = null;\n        return result;\n    }\n    /**\n     * Perform filtering according to the {@link #property-filters} Collection.\n     * This is the internal implementation which is overridden in {@link Core.data.AjaxStore} and\n     * must not be overridden.\n     * @private\n     */\n    performFilter(silent) {\n        const\n            me                             = this,\n            { storage, filters, rootNode } = me,\n            oldCount                       = me.count;\n        // Private event, did not need it documented or preventable right now\n        me.trigger('beforeFilter', { filters });\n        let added, removed;\n        if (me.tree) {\n            const oldDataset = storage.values;\n            if (me.isFiltered) {\n                me.traverseFilter(rootNode);\n            }\n            else {\n                me.traverseClearFilter(rootNode);\n            }\n            const newDataset = me.collectDescendants(rootNode).visible;\n            storage.replaceValues({\n                values : newDataset,\n                silent : true\n            });\n            const delta = ArrayHelper.delta(newDataset, oldDataset, true);\n            added   = delta.toAdd;\n            removed = delta.toRemove;\n        }\n        else {\n            // Collect the added and removed deltas from the filter operation\n            storage.ion({\n                change({ removed : r, added : a }) {\n                    removed = r;\n                    added = a;\n                },\n                once : true\n            });\n            if (me.isFiltered) {\n                // Bring collapsed away records in, to be considered in filtering\n                me.isGrouped && me.includeCollapsed();\n                storage.addFilter({\n                    id       : 'primary-filter', \n                    filterBy : me.filtersFunction\n                });\n                // Take them back out again after filtering\n                me.isGrouped && me.excludeCollapsed();\n            }\n            else {\n                storage.filters.clear();\n            }\n        }\n        me.afterPerformFilter(silent || me.isRemoteDataLoading ? null : {\n            action  : 'filter',\n            filters,\n            oldCount,\n            added,\n            removed,\n            records : me.storage.values\n        });\n    }\n    afterPerformFilter(event) {\n        this.resetRelationCache();\n        if (event) {\n            this.triggerFilterEvent(event);\n        }\n    }\n    get filtered() {\n        return this.storage.isFiltered;\n    }\n    // Used from filter() and StoreCRUD when reapplying filters\n    triggerFilterEvent(event) {\n        this.trigger('filter', event);\n        // Only fire these events if it's a local filter.\n        // If we are configured with filterParamName, the loadData will fire them.\n        if (!this.remoteFilter) {\n            this.trigger('refresh', event);\n            this.trigger('change', event);\n        }\n    }\n    /**\n     * *Adds* a function used to filter the store. Alias for calling `filter(fn)`. Return `true` from the function to\n     * include record in filtered set\n     *\n     * ```javascript\n     * store.filterBy(record => record.age > 25 && record.name.startsWith('A'));\n     * ```\n     *\n     * @param {Function} fn Function used to test records\n     * @returns {Promise|null} If {@link Core/data/AjaxStore#config-filterParamName} is set on store, this method returns `Promise`\n     * which is resolved after data is loaded from remote server, otherwise it returns `null`\n     * @async\n     * @category Sort, group & filter\n     */\n    filterBy(fn) {\n        return this.filter(fn);\n    }\n    /**\n     * Removes the passed filter, or the filter by the passed ID from the {@link #config-filters} collection.\n     * By default, filters are reevaluated and a Store change event fired.\n     *\n     * If the `silent` parameter is passed as `true`, multiple filters can be removed without causing data changes.\n     *\n     * When the filters are as required, call {@link #function-filter} with no parameters\n     * to apply the filters to the store.\n     *\n     * ```javascript\n     * // Only view top priority events\n     * myEventStore.filter({\n     *     id       : 'priorityFilter',\n     *     property : 'priority',\n     *     value    : 1,\n     *     operator : '='\n     * });\n     *\n     * // That individual filter can be removed like this\n     * myEventStore.removeFilter('priorityFilter');\n     *\n     * // Add named filter as a function\n     * store.filter({\n     *     id : 'my filter',\n     *     filterBy : record => record.score > 10\n     * });\n     *\n     * // Remove named filter function\n     * store.removeFilter('my filter');\n     * ```\n     *\n     * @param {String|Core.util.CollectionFilter} idOrInstance Filter to remove, or ID of the filter to remove. By default,\n     * filters are reevaluated and a change event fired.\n     * @param {Boolean} [silent] Pass `true` to *not* refilter the store immediately. Such as when\n     * removing multiple filters.\n     * @returns {Promise|Core.util.CollectionFilter} If {@link Core/data/AjaxStore#config-filterParamName} is set on store, this method\n     * returns Collection filter inside a `Promise` which is resolved after data is loaded from remote server, otherwise it returns `null`\n     * @async\n     * @category Sort, group & filter\n     */\n    removeFilter(idOrInstance, silent = false) {\n        const\n            me     = this,\n            filter = idOrInstance instanceof Filter ? idOrInstance : me.filters.get(idOrInstance);\n        // If we have such a filter, remove it.\n        if (filter) {\n            me.filters.remove(filter);\n            // Invalidate the filtersFunction so that it has to be recalculated upon next access\n            me._filtersFunction = null;\n            if (!silent) {\n                if (me.remoteFilter) {\n                    return me.filter().then(() => filter);\n                }\n                else {\n                    me.filter();\n                }\n            }\n            return filter;\n        }\n    }\n    /**\n     * Removes all filters from the store.\n     * @returns {Promise|null} If {@link Core/data/AjaxStore#config-filterParamName} is set on store, this method returns `Promise`\n     * which is resolved after data is loaded from remote server, otherwise it returns `null`\n     * @async\n     * @category Sort, group & filter\n     */\n    clearFilters(apply = true) {\n        // Remove all non-internal filters (those have to be explicitly removed)\n        this.filters.remove(this.filters.values.filter(f => !f.internal));\n        if (apply) {\n            return this.filter();\n        }\n    }\n    convertFilterToString(field) {\n        const filter = this.filters.getBy('property', field);\n        return (filter && !filter.filterBy) ? String(filter) : '';\n    }\n    doDestroy() {\n        this._filters?.destroy();\n        super.doDestroy();\n    }\n};\n", "import Base from '../../Base.js';\nimport ObjectHelper from '../../helper/ObjectHelper.js';\nimport StringHelper from '../../helper/StringHelper.js';\n/**\n * @module Core/data/mixin/StoreGroup\n */\nconst resortActions = {\n    add     : 1,\n    replace : 1\n};\n/**\n * An immutable object representing a store grouper.\n *\n * @typedef {Object} Grouper\n * @property {String} field Field name\n * @property {Boolean} [ascending=true] `true` to group ascending, `false` to group descending\n */\n/**\n * Mixin for Store that handles grouping.\n *\n * ```javascript\n * // simple grouper\n * store.group('city');\n *\n * // grouper as object, descending order\n * store.group({ field : 'city', ascending : false });\n *\n * // using custom sorting function\n * store.group({\n *     field : 'city',\n *     fn : (recordA, recordB) => {\n *         // apply custom logic, for example:\n *         return recordA.city.length < recordB.city.length ? -1 : 1;\n *     }\n * });\n * ```\n *\n * Currently grouping is not supported when using pagination, the underlying store cannot group data that is split into pages.\n *\n * @mixin\n */\nexport default Target => class StoreGroup extends (Target || Base) {\n    static get $name() {\n        return 'StoreGroup';\n    }\n    //region Config\n    static get defaultConfig() {\n        return {\n            /**\n             * Initial groupers, specify to have store grouped automatically after initially setting data\n             * @config {Grouper[]}\n             * @category Common\n             */\n            groupers : null,\n            useGroupFooters : false,\n            /**\n             * To have all groups __initially loaded__ start collapsed, configure this as `true`.\n             *\n             * Note that this only affects the initial load of the store. Subsequent reloads maintain\n             * current group state where possible.\n             * @config {Boolean}\n             * @default false\n             */\n            startGroupsCollapsed : null\n        };\n    }\n    static get properties() {\n        return {\n            collapsedGroups : new Set()\n        };\n    }\n    //endregion\n    //region Init\n    construct(config) {\n        super.construct(config);\n        // For handling record mutation, *not* add/remove of records.\n        // Sorts dataset if necessary.\n        this.ion({ change : 'onDataChanged', thisObj : this });\n    }\n    /**\n     * Currently used groupers.\n     * To set groupers when remote sorting is enabled by {@link Core/data/AjaxStore#config-sortParamName} you should use\n     * {@link #function-setGroupers} instead to be able wait for operation to finish.\n     * @member {Grouper[]} groupers\n     * @category Sort, group & filter\n     */\n    get groupers() {\n        return this._groupers;\n    }\n    set groupers(groupers) {\n        this.setGroupers(groupers);\n    }\n    /**\n     * Set groupers.\n     * @param {Grouper[]} groupers Array of groupers to apply to store\n     * @returns {Promise|null} If {@link Core/data/AjaxStore#config-sortParamName} is set on store, this method returns\n     * `Promise` which is resolved after data is loaded from remote server, otherwise it returns `null`\n     * @async\n     * @category Sort, group & filter\n     */\n    setGroupers(groupers, options) {\n        const\n            me         = this,\n            { storage } = me;\n        let result;\n        if (groupers?.length) {\n            me._groupers = groupers;\n        }\n        else if (me.groupers) {\n            delete me._groupers;\n            me.includeCollapsed();\n            storage.replaceValues({\n                values         : me.removeHeadersAndFooters(storage._values),\n                filteredValues : storage.isFiltered ? me.removeHeadersAndFooters(storage._filteredValues) : null,\n                silent         : true\n            });\n            result = me.group(null, null, null, false, options?.silent);\n        }\n        // Need to clear the id map so it gets rebuilt next time its accessed\n        me._idMap = null;\n        return result;\n    }\n    // Collects group headers/footers on the fly. Not used in any performance sensitive code, but if that need arises\n    // it should be cached and invalidated on record remove, add, update, grouping changes, filter and sorting...\n    get groupRecords() {\n        const groupRecords = [];\n        if (this.isGrouped) {\n            for (const record of this) {\n                if (record.isSpecialRow) {\n                    groupRecords.push(record);\n                }\n            }\n        }\n        return groupRecords;\n    }\n    get unfilteredGroupRecords() {\n        const me = this;\n        if (me.isGrouped) {\n            const { generation } = me.storage;\n            if (me._unfilteredGroupRecords?.generation !== generation) {\n                me._unfilteredGroupRecords = me.storage.allValues.filter(r => r.isSpecialRow);\n                me._unfilteredGroupRecords.generation = generation;\n            }\n        }\n        return me._unfilteredGroupRecords || [];\n    }\n    /**\n     * Returns group header record for the passed record or last group header in the store\n     * @param {Core.data.Model} [targetRecord]\n     * @param {Boolean} [ignoreFilter] Pass true to search in the complete collection\n     * @returns {Core.data.Model}\n     * @internal\n     */\n    getGroupHeaderForRecord(targetRecord, ignoreFilter = false) {\n        if (this.isGrouped) {\n            let result;\n            const collection = ignoreFilter ? this.storage._values : this.storage.values;\n            for (const record of collection) {\n                if (record.isGroupHeader) {\n                    if (!targetRecord) {\n                        result = record;\n                    }\n                    else if (record === targetRecord || record.unfilteredGroupChildren.includes(targetRecord)) {\n                        result = record;\n                        break;\n                    }\n                }\n            }\n            return result;\n        }\n    }\n    // Temporarily include records from collapsed groups, for example prior to filtering\n    includeCollapsed() {\n        for (const groupId of this.collapsedGroups) {\n            this.expand(this.getById(groupId), false);\n        }\n    }\n    // Exclude records in collapsed groups, intended to be used after a call to includeCollapsed()\n    excludeCollapsed() {\n        for (const groupId of this.collapsedGroups) {\n            this.collapse(this.getById(groupId));\n        }\n    }\n    onDataChange({ source : storage, action, removed }) {\n        const\n            me           = this,\n            { groupers } = me;\n        // Only do grouping transformations if we have groupers to apply.\n        // In stores which never use grouping, this code is superfluous and will reduce performance.\n        // The else side will simply replace the ungrouped data with itself.\n        if (groupers) {\n            // When records are added or removed, re-evaluate the group records\n            // so that when the events are fired by the super call, the group\n            // records are in place.\n            if (groupers.length) {\n                if ((action === 'splice' && removed?.length) || action === 'move') {\n                    storage.replaceValues({\n                        ...me.prepareGroupRecords(),\n                        silent : true\n                    });\n                }\n            }\n            // Remove all group headers and footers\n            else {\n                storage.replaceValues({\n                    values         : me.removeHeadersAndFooters(storage._values),\n                    filteredValues : storage.isFiltered ? me.removeHeadersAndFooters(storage._filteredValues) : null,\n                    silent         : true\n                });\n            }\n        }\n        super.onDataChange?.(...arguments);\n    }\n    move(records, beforeRecord) {\n        const me = this;\n        if (me.isGrouped && !me.tree) {\n            let prevRecord = beforeRecord;\n            if (beforeRecord?.isSpecialRow) {\n                prevRecord = me.getPrev(beforeRecord, false, false);\n                if (!prevRecord) {\n                    // Trying to move above first group header, no-op\n                    return;\n                }\n            }\n            // Target group header always exists\n            const\n                targetGroupHeader         = me.getGroupHeaderForRecord(prevRecord),\n                groupField                = me.groupers[0].field,\n                newGroupValue             = targetGroupHeader.meta.groupRowFor,\n                { reapplyFilterOnUpdate } = me;\n            // Disable reapply filter on update because it will rebuild groups faster than we need. Groups will be\n            // updated in super.move call anyway\n            me.reapplyFilterOnUpdate = false;\n            me.beginBatch();\n            records.forEach(record => record[groupField] = newGroupValue);\n            me.endBatch();\n            me.reapplyFilterOnUpdate = reapplyFilterOnUpdate;\n            // If store is filtered, we might have hidden groups between target group header and `beforeRecord`. To\n            // make move safe we need to find new target group (visible) and find next group in the unfiltered\n            // collection. But only if `beforeRecord is a group header\n            if (me.isFiltered && beforeRecord?.isSpecialRow) {\n                const\n                    { unfilteredGroupRecords } = me,\n                    // Find index of the group header we're moving record into\n                    index = unfilteredGroupRecords.indexOf(targetGroupHeader);\n                // If `beforeRecord` exists, index cannot point to the last group in the store, meaning we can\n                // safely access element at index + 1\n                beforeRecord = unfilteredGroupRecords[index + 1];\n            }\n        }\n        super.move(records, beforeRecord);\n    }\n    collapse(groupRecord) {\n        if (groupRecord && !groupRecord.meta.collapsed) {\n            this.excludeGroupRecords(groupRecord);\n            groupRecord.meta.collapsed = true;\n            // Track which groups are collapsed\n            this.collapsedGroups.add(groupRecord.id);\n            return true;\n        }\n        return false;\n    }\n    expand(groupRecord, updateMap = true) {\n        if (groupRecord?.meta.collapsed) {\n            this.includeGroupRecords(groupRecord);\n            groupRecord.meta.collapsed = false;\n            // Optionally track which groups are collapsed (not done when expanding temporarily prior to filtering etc)\n            updateMap && this.collapsedGroups.delete(groupRecord.id);\n            return true;\n        }\n        return false;\n    }\n    removeHeadersAndFooters(records) {\n        return records.filter(r => {\n            if (r.isSpecialRow) {\n                this.unregister(r);\n                return false;\n            }\n            else {\n                return true;\n            }\n        });\n    }\n    prepareGroupRecords(sorter) {\n        const\n            me                = this,\n            {\n                isFiltered,\n                reapplyFilterOnUpdate,\n                startGroupsCollapsed\n            }                 = me,\n            toCollapse        = me.collapsedGroups,\n            { allValues }     = me.storage,\n            toExpand          = [],\n            // this property is set by StoreChanges mixin to keep in view records which were visible prior to\n            // `applyChangeset` call but after update no longer match the filter\n            visibleRecordsIds = me._groupVisibleRecordIds || [],\n            isVisible         = (record) => {\n                const matchesFilter = !isFiltered || me.filtersFunction(record);\n                return reapplyFilterOnUpdate ? matchesFilter : (matchesFilter || visibleRecordsIds.includes(record.id));\n            };\n        for (const record of allValues) {\n            if (record.isGroupHeader && (record.meta.collapsed || toCollapse.has(record.id))) {\n                toCollapse.add(record.id);\n                toExpand.push(record);\n            }\n        }\n        for (const record of toExpand) {\n            me.includeGroupRecords(record);\n        }\n        const records = me.removeHeadersAndFooters(me.storage._values);\n        if (sorter) {\n            records.sort(sorter);\n        }\n        // Update filters function\n        if (isFiltered) {\n            me.filtersFunction = null;\n        }\n        const\n            groupedRecords = [],\n            field          = me.groupers[0].field;\n        let curGroup       = null,\n            curGroupRecord = null,\n            childCount     = 0;\n        function addFooter() {\n            const\n                val    = curGroupRecord.meta.groupRowFor,\n                id     = `group-footer-${typeof val === 'number' ? val : StringHelper.createId(val)}`,\n                footer = me.getById(id) || new me.modelClass({ id }, me, {\n                    specialRow     : true,\n                    groupFooterFor : val,\n                    groupRecord    : curGroupRecord\n                });\n            // Used by indexOf to determine if part of store\n            footer.stores = [me];\n            me.register(footer);\n            footer.groupChildren = curGroupRecord.groupChildren;\n            if (!curGroupRecord.meta.collapsed) {\n                groupedRecords.push(footer);\n            }\n            me.allRecords.push(footer);\n            curGroupRecord.groupChildren.push(footer);\n            curGroupRecord.unfilteredGroupChildren.push(footer);\n            childCount++;\n            return footer;\n        }\n        records.forEach(record => {\n            const\n                val = record[field] == undefined ? '__novalue__' : record[field],\n                id  = `group-header-${typeof val === 'number' ? val : StringHelper.createId(val)}`;\n            // A group header or footer record of an empty group.\n            // Remove from the data\n            if (record.unfilteredGroupChildren?.length === 0) {\n                me.unregister(record);\n                return;\n            }\n            if (!ObjectHelper.isEqual(val, curGroup)) {\n                if (curGroupRecord) {\n                    // also add group footer? used by GroupSummary feature\n                    if (me.useGroupFooters) {\n                        addFooter(curGroupRecord);\n                    }\n                    curGroupRecord.meta.childCount = childCount;\n                }\n                curGroupRecord = me.getById(id);\n                if (!curGroupRecord) {\n                    curGroupRecord =  new me.modelClass({ id }, me, {\n                        specialRow  : true,\n                        groupRowFor : val,\n                        groupField  : field\n                    });\n                    // New groups start life collapsed\n                    if (startGroupsCollapsed) {\n                        toCollapse.add(id);\n                        // It only works the first time groups are created.\n                        me.startGroupsCollapsed = false;\n                    }\n                }\n                curGroupRecord.meta.collapsed = toCollapse.has(id);\n                // Used by indexOf to determine if part of store\n                curGroupRecord.stores = [me];\n                me.register(curGroupRecord);\n                curGroupRecord.groupChildren = [];\n                curGroupRecord.unfilteredGroupChildren = [];\n                groupedRecords.push(curGroupRecord);\n                me.allRecords.push(curGroupRecord);\n                curGroup = val;\n                childCount = 0;\n            }\n            record.instanceMeta(me.id).groupParent = curGroupRecord;\n            // Collapse groups that was collapsed earlier\n            if (!toCollapse.has(id)) {\n                groupedRecords.push(record);\n            }\n            if (isVisible(record)) {\n                curGroupRecord.groupChildren.push(record);\n                childCount++;\n            }\n            curGroupRecord.unfilteredGroupChildren.push(record);\n        });\n        // misses for last group without this\n        if (curGroupRecord) {\n            // footer for last group\n            if (me.useGroupFooters) {\n                addFooter();\n            }\n            curGroupRecord.meta.childCount = childCount;\n        }\n        me._idMap = null;\n        const result = {\n            values : groupedRecords\n        };\n        if (isFiltered) {\n            result.filteredValues = groupedRecords.filter(isVisible);\n        }\n        return result;\n    }\n    //endregion\n    //region Group and ungroup\n    /**\n     * Is store currently grouped?\n     * @property {Boolean}\n     * @readonly\n     * @category Sort, group & filter\n     */\n    get isGrouped() {\n        return Boolean(this.groupers?.length);\n    }\n    /**\n     * Group records, either by replacing current sorters or by adding to them.\n     * A grouper can specify a **_custom sorting function_** which will be called with arguments (recordA, recordB).\n     * Works in the same way as a standard array sorter, except that returning `null` triggers the stores\n     * normal sorting routine. Grouped store **must** always be sorted by the same field.\n     *\n     * ```javascript\n     * // simple grouper\n     * store.group('city');\n     *\n     * // grouper as object, descending order\n     * store.group({ field : 'city', ascending : false });\n     *\n     * // using custom sorting function\n     * store.group({\n     *     field : 'city',\n     *     fn : (recordA, recordB) => {\n     *         // apply custom logic, for example:\n     *         return recordA.city.length < recordB.city.length ? -1 : 1;\n     *     }\n     * });\n     * ```\n     *\n     * @param {String|Object} field Field to group by.\n     * Can also be a config containing a field to group by and a custom sorting function called `fn`.\n     * @param {Boolean} [ascending] Sort order of the group titles\n     * @param {Boolean} [add] Add a grouper (true) or use only this grouper (false)\n     * @param {Boolean} [performSort] Trigger sort directly, which does the actual grouping\n     * @param {Boolean} [silent] Set as true to not fire events\n     * @category Sort, group & filter\n     * @fires group\n     * @fires refresh\n     * @returns {Promise|null} If {@link Core/data/AjaxStore#config-sortParamName} is set on store, this method returns `Promise`\n     * which is resolved after data is loaded from remote server, otherwise it returns `null`\n     * @async\n     */\n    group(field, ascending, add = false, performSort = true, silent = false) {\n        const me = this;\n        let newGrouper, fn;\n        if (field && typeof field === 'object') {\n            ascending = field.ascending;\n            fn        = field.fn;\n            field     = field.field;\n        }\n        if (add) {\n            me.groupers.push(newGrouper = {\n                field,\n                ascending,\n                complexMapping : field.includes('.')\n            });\n        }\n        else if (field) {\n            if (ascending == null) {\n                ascending = me.groupInfo?.field === field && me.groupInfo?.fn === fn ? !me.groupInfo.ascending : true;\n            }\n            me.groupInfo = newGrouper = {\n                field,\n                ascending,\n                fn,\n                complexMapping : field.includes('.')\n            };\n            me.groupers = [me.groupInfo];\n        }\n        if (newGrouper) {\n            const { prototype } = me.modelClass;\n            // Create a getter for complex field names like \"get resource.city\"\n            if (newGrouper.complexMapping && !Object.prototype.hasOwnProperty.call(prototype, field)) {\n                Object.defineProperty(prototype, field, {\n                    get() {\n                        return ObjectHelper.getPath(this, field);\n                    }\n                });\n            }\n        }\n        // as far as the store is concerned, grouping is just more sorting. so trigger sort\n        if (performSort !== false) {\n            if (me.remoteSort && !me.isRemoteDataLoading) {\n                return me.sort(null, null, false, true).then(() => me.onAfterGrouping(silent));\n            }\n            else {\n                me.sort(null, null, false, true);\n            }\n        }\n        me.onAfterGrouping(silent);\n    }\n    onAfterGrouping(silent) {\n        if (silent) {\n            return;\n        }\n        const\n            me = this,\n            groupers = me.groupers || [];\n        /**\n         * Fired when grouping changes\n         * @event group\n         * @param {Core.data.Store} source This Store\n         * @param {Grouper[]} groupers Applied groupers\n         * @param {Core.data.Model[]} records Grouped records\n         */\n        me.trigger('group', { isGrouped : me.isGrouped, groupers, records : me.storage.values });\n        me.trigger('refresh', { action : 'group', isGrouped : me.isGrouped, groupers, records : me.storage.values });\n    }\n    // Internal since UI does not support multi grouping yet\n    /**\n     * Add a grouping level (a grouper).\n     * @param {String} field Field to group by\n     * @param {Boolean} ascending Group direction\n     * @category Sort, group & filter\n     * @returns {Promise|null} If {@link Core/data/AjaxStore#config-sortParamName} is set on store, this method returns `Promise`\n     * which is resolved after data is loaded from remote server, otherwise it returns `null`\n     * @async\n     * @internal\n     */\n    addGrouper(field, ascending = true) {\n        return this.group(field, ascending, true);\n    }\n    // Internal since UI does not support multi grouping yet\n    /**\n     * Removes a grouping level (a grouper)\n     * @param {String} field Grouper to remove\n     * @category Sort, group & filter\n     * @returns {Promise|null} If {@link Core/data/AjaxStore#config-sortParamName} is set on store, this method returns `Promise`\n     * which is resolved after data is loaded from remote server, otherwise it returns `null`\n     * @async\n     * @internal\n     */\n    removeGrouper(field) {\n        const\n            me           = this,\n            { groupers } = me;\n        if (!groupers) {\n            return;\n        }\n        const index = groupers.findIndex(grouper => grouper.field === field);\n        if (index > -1) {\n            groupers.splice(index, 1);\n            if (!groupers.length) {\n                return me.clearGroupers();\n            }\n            else {\n                return me.group();\n            }\n        }\n    }\n    /**\n     * Removes all groupers, turning store grouping off.\n     * @privateparam {Boolean} [silent=false] Pass true to suppress events.\n     * @returns {Promise|null} If {@link Core/data/AjaxStore#config-sortParamName} is set on store, this method returns `Promise`\n     * which is resolved after data is loaded from remote server, otherwise it returns `null`\n     * @async\n     * @category Sort, group & filter\n     */\n    clearGroupers(silent = false) {\n        return this.setGroupers(null, { silent });\n    }\n    //endregion\n    //region Get and check\n    /**\n     * Check if a record belongs to a certain group (only for the first grouping level)\n     * @param {Core.data.Model} record The Record\n     * @param {*} groupValue The group value\n     * @returns {Boolean} True if the record belongs to the group, otherwise false\n     * @category Sort, group & filter\n     */\n    isRecordInGroup(record, groupValue) {\n        if (!this.isGrouped) {\n            return null;\n        }\n        const groupField = this.groupers[0]?.field;\n        return record[groupField] === groupValue && !record.isSpecialRow;\n    }\n    isInCollapsedGroup(record) {\n        const parentGroupRec = record.instanceMeta(this).groupParent;\n        return parentGroupRec?.meta.collapsed;\n    }\n    /**\n     * Returns all records in the group with specified groupValue.\n     * @param {*} groupValue\n     * @returns {Core.data.Model[]} Records in specified group or null if store not grouped\n     * @category Sort, group & filter\n     */\n    getGroupRecords(groupValue) {\n        if (!this.isGrouped) {\n            return null;\n        }\n        return this.storage.values.filter(record => this.isRecordInGroup(record, groupValue));\n    }\n    /**\n     * Get all group titles.\n     * @returns {String[]} Group titles\n     * @category Sort, group & filter\n     */\n    getGroupTitles() {\n        if (!this.isGrouped) {\n            return null;\n        }\n        return this.getDistinctValues(this.groupers[0].field);\n    }\n    //endregion\n    onDataChanged({ changes, action }) {\n        if (\n            this.isGrouped && (\n                // If an action flagged as requiring resort is performed...\n                (!changes && resortActions[action]) ||\n                // ...or if the group field has changes...\n                (changes && this.groupers.some(grouper => grouper.field in changes))\n            )\n        ) {\n            // ...then re-sort\n            this.sort();\n        }\n    }\n    /**\n     * Adds or removes records in a group from storage. Used when expanding/collapsing groups.\n     * @private\n     * @param {Core.data.Model} groupRecord Group which records should be added or removed\n     * @param {Boolean} include Include (true) or exclude (false) records\n     * @category Grouping\n     */\n    internalIncludeExcludeGroupRecords(groupRecord, include) {\n        const\n            me                      = this,\n            index                   = me.indexOf(groupRecord),\n            allIndex                = me.allIndexOf(groupRecord),\n            { id : mapId, storage } = me,\n            {\n                _filteredValues,\n                _values\n            }                       = storage,\n            {\n                meta,\n                groupChildren,\n                unfilteredGroupChildren\n            }                       = groupRecord;\n        // Skip if group record is not found, otherwise it removes records from wrong position.\n        // Also prevent removing from already collapsed and vice versa\n        if (allIndex === -1 || (meta.collapsed && !include) || (!meta.collapsed && include)) {\n            return;\n        }\n        unfilteredGroupChildren.forEach(child =>\n            child.instanceMeta(mapId).hiddenByCollapse = !include\n        );\n        if (include) {\n            // Avoid adding record duplicates which may already have been reinserted by clearing filters\n            if (_filteredValues) {\n                _filteredValues.splice(index + 1, 0, ...groupChildren.filter(r => !me.isAvailable(r)));\n            }\n            storage._values.splice(allIndex + 1, 0, ...unfilteredGroupChildren.filter(r => !me.isAvailable(r)));\n        }\n        else {\n            if (_filteredValues) {\n                _filteredValues.splice(index + 1, groupChildren.length);\n            }\n            _values.splice(allIndex + 1, unfilteredGroupChildren.length);\n        }\n        storage._indicesInvalid = true;\n        me._idMap = null;\n    }\n    /**\n     * Removes records in a group from storage. Used when collapsing a group.\n     * @private\n     * @param groupRecord Group which records should be removed\n     * @category Grouping\n     */\n    excludeGroupRecords(groupRecord) {\n        this.internalIncludeExcludeGroupRecords(groupRecord, false);\n    }\n    /**\n     * Adds records in a group to storage. Used when expanding a group.\n     * @private\n     * @param groupRecord Group which records should be added\n     * @category Grouping\n     */\n    includeGroupRecords(groupRecord) {\n        this.internalIncludeExcludeGroupRecords(groupRecord, true);\n    }\n    /**\n     * Collects all group headers + children, whether expanded or not\n     * @private\n     * @param {Boolean} allRecords True to include filtered out records\n     * @param {Boolean} includeHeaders True to also include group headers\n     * @returns {Core.data.Model[]}\n     */\n    collectGroupRecords(allRecords, includeHeaders = true) {\n        const records = allRecords ? this.storage.allValues : this.storage.values;\n        return records.reduce((records, record) => {\n            if (record.isSpecialRow) {\n                if (includeHeaders && !record.isGroupFooter) {\n                    records.push(record);\n                }\n                if (record.isGroupHeader) {\n                    records.push.apply(records, record.groupChildren);\n                }\n            }\n            return records;\n        }, []);\n    }\n};\n", "import Base from '../../Base.js';\nimport StringHelper from '../../helper/StringHelper.js';\n/**\n * @module Core/data/mixin/StoreProxy\n */\n/**\n * Object-like interaction with a Store by using a Proxy. To enable, configure the store with `objectify : true`.\n *\n * ```javascript\n * const store = new Store({\n *    objectify : true,\n *    data      : [\n *        { id : 'batman', name : 'Bruce' }\n *    ]\n * });\n * ```\n *\n * Access records using their ids as Store properties:\n * ```javascript\n * console.log(store.batman.name); // logs Bruce\n * ```\n *\n * Add records by assigning properties to the Store:\n * ```javascript\n * store.superman = { name : 'Clark' }; // Id will be 'superman'\n * ```\n *\n * Remove records by removing their property:\n * ```javascript\n * delete store.batman;\n * ```\n *\n * Check if a certain id existing in the store by using `in`:\n * ```javascript\n * console.log('superman' in store): // logs true\n * ```\n *\n * Please note that this approach:\n * * Will affect performance slightly, not recommended for larger datasets.\n * * Uses native Proxy.\n * * Preserves predefined Store properties, records cannot use ids that match those.\n * * Might have other limitations preventing the use of it in some scenarios where a normal Store can be used.\n *\n * @mixin\n */\nexport default Target => class StoreProxy extends (Target || Base) {\n    static get configurable() {\n        return {\n            /**\n             * Allow object like interaction with the Store. For example:\n             *\n             * ```javascript\n             * const store = new Store({\n             *    objectify : true,\n             *    data      : [\n             *        { id : 'batman', name : 'Bruce' }\n             *    ]\n             * });\n             *\n             * // retrieve using id as property\n             * const record = store.batman;\n             *\n             * // add as property\n             * store.superman = { name : 'Clark' };\n             *\n             * // delete to remove\n             * delete store.batman;\n             * ``\n             *\n             * @config {Boolean}\n             * @default false\n             */\n            objectify : null\n        };\n    }\n    initProxy() {\n        if (!globalThis.Proxy) {\n            throw new Error('Proxy not supported');\n        }\n        const proxy = new Proxy(this, {\n            // Support getting records using `store[id/index]\n            get(target, property) {\n                // Stores own properties take precedence\n                if (property in target) {\n                    return target[property];\n                }\n                // To allow accessing the underlying store\n                if (property === '$store') {\n                    return target;\n                }\n                // Then ids\n                let record = target.getById(property);\n                // And finally index\n                if (!record && !isNaN(parseInt(property))) {\n                    record = target.getAt(parseInt(property));\n                }\n                return record;\n            },\n            // Support adding/replacing records using `store.id = { ...data }`\n            set(target, property, value) {\n                // Pass through when using names of existing properties or when destroyed/ing\n                if (property in target || target.isDestroying) {\n                    target[property] = value;\n                }\n                // Otherwise add/replace a record\n                else {\n                    target.add({ [target.modelClass.idField] : property, ...value });\n                }\n                return true;\n            },\n            // Support deleting records using `delete store.id`\n            deleteProperty(target, property) {\n                // Properties are deleted on destroy\n                if (target.isDestroying) {\n                    delete target[property];\n                    return true;\n                }\n                return Boolean(target.remove(property).length);\n            },\n            // Support `id in store`\n            has(target, property) {\n                // Actual property\n                if (property in target) {\n                    return true;\n                }\n                // Threat { ... } as JSON representation of a record (likely from toString())\n                if (property.startsWith('{') && property.endsWith('}')) {\n                    const data = StringHelper.safeJsonParse(property);\n                    property = data?.id;\n                }\n                return target.includes(property);\n            }\n        });\n        return proxy;\n    }\n};\n", "import Base from '../../Base.js';\nimport ArrayHelper from '../../helper/ArrayHelper.js';\nimport StringHelper from '../../helper/StringHelper.js';\nimport Model from '../Model.js';\n/**\n * @module Core/data/mixin/StoreRelation\n */\n/**\n * Mixin for Store that handles relations with other stores.\n *\n * The relation is defined in a Model subclass, see Model's {@link Core/data/Model#property-relations-static} property\n * for more information.\n *\n * @mixin\n */\nexport default Target => class StoreRelation extends (Target || Base) {\n    static $name = 'StoreRelation';\n    //region Init\n    /**\n     * Initialized relations, called from constructor\n     * @private\n     */\n    initRelations(reset) {\n        const\n            me        = this,\n            relations = me.modelClass.exposedRelations;\n        if (reset && me.modelRelations) {\n            // reset will reinit all relations, stop listening for store events on existing ones\n            me.modelRelations.forEach(relation => relation.storeDetacher?.());\n        }\n        if ((!me.modelRelations || me.modelRelations.length === 0 || reset) && relations) {\n            me.modelRelations = [];\n            // foreignKeys is filled when model exposes its properties\n            relations?.forEach(modelRelationConfig => {\n                const\n                    config       = { ...modelRelationConfig },\n                    {\n                        foreignStore,\n                        relationName,\n                        relatedCollectionName\n                    }            = config,\n                    relatedStore = typeof foreignStore === 'string' ? me[foreignStore] : foreignStore;\n                config.dependentStore = me;\n                me.modelRelations.push(config);\n                if (relatedStore) {\n                    config.foreignStoreProperty = config.foreignStore;\n                    config.foreignStore = relatedStore; // repeated from initRelationStores, needed if stored is assigned late\n                    const dependentStoreConfigs = relatedStore.dependentStoreConfigs;\n                    // Add link to dependent store\n                    if (dependentStoreConfigs.has(me)) {\n                        const dependentConfigs = dependentStoreConfigs.get(me);\n                        // Remove existing config on reset\n                        if (reset) {\n                            const existingConfig = dependentConfigs.find(c => c.relationName === relationName);\n                            if (existingConfig) {\n                                ArrayHelper.remove(dependentConfigs, existingConfig);\n                            }\n                        }\n                        dependentConfigs.push(config);\n                    }\n                    else {\n                        dependentStoreConfigs.set(me, [config]);\n                    }\n                    // if foreign key specifies relatedCollectionName the related store should also be configured\n                    if (relatedCollectionName) {\n                        relatedStore.initRelationCollection(config, me);\n                    }\n                    if (relatedStore.count > 0) {\n                        relatedStore.updateDependentStores('dataset', relatedStore.records);\n                    }\n                }\n            });\n        }\n    }\n    /**\n     * Called from other end of an relation when this store should hold a collection of related records.\n     * @private\n     * @param config\n     * @param collectionStore\n     */\n    initRelationCollection(config, collectionStore) {\n        const\n            me               = this,\n            name             = config.relatedCollectionName,\n            collectionStores = me.collectionStores || (me.collectionStores = {});\n        collectionStores[name] = {\n            store : collectionStore,\n            config\n        };\n        if (!me[name + 'Store']) {\n            me[name + 'Store'] = collectionStore;\n        }\n        if (me.count > 0) {\n            me.initModelRelationCollection(name, me.records);\n        }\n    }\n    initModelRelationCollection(name, records) {\n        const me = this;\n        // add collection getter to each model\n        records.forEach(record => {\n            // Needs to work in trees also, if not a tree traverse just calls fn on self\n            record.traverse(node => {\n                // Add/replace $relatedAssignments (or similar) if assignments already exists on target\n                const useName = name in node ? `$related${StringHelper.capitalize(name)}` : name;\n                Object.defineProperty(node, useName, {\n                    enumerable   : true,\n                    configurable : true,\n                    get          : function() {\n                        return me.getCollection(this, name);\n                    },\n                    set : function(value) {\n                        return me.setCollection(this, name, value);\n                    }\n                });\n            });\n        });\n    }\n    /**\n     * Updates relationCache for all records.\n     * @private\n     */\n    resetRelationCache() {\n        this.relationCache = {};\n        this.forEach(record => record.initRelations());\n    }\n    /**\n     * Caches related records from related store on the local store.\n     * @private\n     * @param record Local record\n     * @param relations Relations to related store\n     */\n    updateRecordRelationCache(record, relations) {\n        relations?.forEach(relation => {\n            const\n                { config } = relation,\n                // use related records id, or if called before \"binding\" is complete use foreign key\n                foreignId = relation.related ? relation.related.id : record.get(config.foreignKey);\n            // cache on that id, removing previously cached value if any\n            foreignId !== undefined && this.cacheRelatedRecord(record, foreignId, config.relationName, foreignId);\n        });\n    }\n    //endregion\n    //region Getters\n    /**\n     * Returns records the relation cache. Same result as if retrieving the collection on the dependent store, but\n     * without the need of accessing that store.\n     * @internal\n     * @param {String} name\n     * @param {Core.data.Model|String|Number} recordOrId\n     * @returns {Array}\n     */\n    getRelationCollection(name, recordOrId) {\n        const id = Model.asId(recordOrId);\n        return (this.relationCache[name] && this.relationCache[name][id]) || [];\n    }\n    /**\n     * Returns records from a collection of related records. Not to be called directly, called from Model getter.\n     * @private\n     * @param {Core.data.Model} record\n     * @param {String} name\n     * @returns {Array}\n     */\n    getCollection(record, name) {\n        const { config, store } = this.collectionStores[name];\n        return (store.relationCache[config.relationName] && store.relationCache[config.relationName][record.id]) || [];\n    }\n    /**\n     * Sets a collection of related records. Will updated the related store and trigger events from it. Not to be called\n     * directly, called from Model setter.\n     * @private\n     */\n    setCollection(model, name, records) {\n        const\n            { config, store } = this.collectionStores[name],\n            relationCache     = store.relationCache[config.relationName] || (store.relationCache[config.relationName] = {}),\n            old               = (relationCache[model.id] || []).slice(),\n            added             = [],\n            removed           = [];\n        store.suspendEvents();\n        // Remove any related records not in the new collection\n        old.forEach(record => {\n            if (!records.includes(record)) {\n                record[config.foreignKey] = null;\n                store.remove(record);\n                removed.push(record);\n            }\n        });\n        // Add records from the new collection not already in store\n        records.forEach(record => {\n            if (record.isModel instanceof Model) {\n                if (!record.stores.includes(store)) {\n                    store.add(record);\n                    added.push(record);\n                }\n            }\n            else {\n                [record] = store.add(record);\n                added.push(record);\n            }\n            // Init relation\n            record[config.foreignKey] = model.id;\n        });\n        store.resumeEvents();\n        if (removed.length) {\n            store.trigger('remove', { records : removed });\n            store.trigger('change', { action : 'remove', records : removed });\n        }\n        if (added.length) {\n            store.trigger('add', { records : added });\n            store.trigger('change', { action : 'add', records : added });\n        }\n    }\n    //endregion\n    //region Caching\n    /**\n     * Adds a record to relation cache, optionally removing it if already there.\n     * @private\n     * @param record\n     * @param id\n     * @param name\n     * @param uncacheId\n     */\n    cacheRelatedRecord(record, id, name, uncacheId = null) {\n        const\n            me    = this,\n            cache = me.relationCache[name] || (me.relationCache[name] = {});\n        if (uncacheId !== null) {\n            me.uncacheRelatedRecord(record, name, uncacheId);\n        }\n        if (id != null) {\n            // Only include of not already in relation cache, which might happen when removing and re-adding the same instance\n            ArrayHelper.include(cache[id] || (cache[id] = []), record);\n        }\n    }\n    /**\n     * Removes a record from relation cache, for a specific relation (specify relation name and id) or for all relations\n     * @private\n     * @param record Record to remove from cache\n     * @param name Optional, relation name\n     * @param id Optional, id\n     */\n    uncacheRelatedRecord(record, name = null, id = null) {\n        const me = this;\n        function remove(relationName, relatedId) {\n            const\n                cache    = me.relationCache[relationName],\n                oldCache = cache?.[relatedId];\n            // When unjoining a record from a filtered store the relationCache will also be filtered\n            // and might give us nothing, in which case we have nothing to clean up and bail out\n            if (oldCache) {\n                const uncacheIndex = oldCache.indexOf(record);\n                uncacheIndex >= 0 && oldCache.splice(uncacheIndex, 1);\n                if (oldCache.length === 0) {\n                    delete cache[relatedId];\n                }\n            }\n        }\n        if (id != null) {\n            remove(name, id);\n        }\n        else {\n            if (record.meta.relationCache) {\n                Object.entries(record.meta.relationCache).forEach(([relationName, relatedRecord]) =>\n                    remove(relationName, relatedRecord?.id)\n                );\n            }\n        }\n    }\n    /**\n     * Updates related stores when store is cleared, a record is removed or added.\n     * @private\n     * @param {String} action\n     * @param {Core.data.Model[]} records\n     */\n    updateDependentStores(action, records) {\n        this.dependentStoreConfigs.forEach(configs => {\n            configs.forEach(config => {\n                const\n                    {\n                        dependentStore,\n                        relatedCollectionName,\n                        relationName,\n                        foreignKey\n                    }     = config,\n                    cache = dependentStore.relationCache[relationName];\n                if (action === 'dataset') {\n                    relatedCollectionName && this.initModelRelationCollection(relatedCollectionName, records);\n                    dependentStore.forEach(record => {\n                        const foreign = record.initRelation(config);\n                        foreign && dependentStore.cacheRelatedRecord(record, foreign.id, relationName, foreign.id);\n                    });\n                    return;\n                }\n                if (action === 'removeall') {\n                    dependentStore.forEach(record => record.removeRelation(config));\n                    delete dependentStore.relationCache[relationName];\n                    return;\n                }\n                if (action === 'add') {\n                    relatedCollectionName && this.initModelRelationCollection(relatedCollectionName, records);\n                }\n                if (action === 'add' || action === 'remove') {\n                    records.forEach(record => {\n                        const dependentRecords = cache?.[record.id];\n                        switch (action) {\n                            case 'remove':\n                                // removing related record removes from cache on model and store\n                                if (dependentRecords) {\n                                    dependentRecords.forEach(dependentRecord => dependentRecord.removeRelation(config));\n                                    // Altered to not delete on self, simplifies taking actions on related records after remove if relation still lives\n                                    //delete cache[relatedRecord.id];\n                                }\n                                break;\n                            case 'add':\n                                // adding a new record in related store checks if any foreign keys match the new id,\n                                // and if so it sets up the relation\n                                dependentStore.forEach(dependentRecord => {\n                                    if (dependentRecord.get(foreignKey) == record.id) {\n                                        dependentRecord.initRelation(config);\n                                        dependentStore.cacheRelatedRecord(dependentRecord, record.id, relationName);\n                                    }\n                                });\n                                break;\n                        }\n                    });\n                }\n            });\n        });\n    }\n    /**\n     * Updates relation cache and foreign key value when a related objects id is changed.\n     * @private\n     */\n    updateDependentRecordIds(oldValue, value) {\n        this.dependentStoreConfigs?.forEach(configs => {\n            configs.forEach(config => {\n                const\n                    {\n                        dependentStore,\n                        relationName,\n                        foreignKey\n                    }            = config,\n                    cache        = dependentStore.relationCache[relationName],\n                    localRecords = cache?.[oldValue]?.slice();\n                localRecords?.forEach(localRecord => {\n                    // First update cache\n                    dependentStore.cacheRelatedRecord(localRecord, value, relationName, oldValue);\n                    // Then update & announce, otherwise relations won't be up-to-date in listeners\n                    localRecord.set(foreignKey, value, false, true);\n                });\n            });\n        });\n    }\n    //endregion\n};\n", "import Base from '../../Base.js';\n/**\n * @module Core/data/mixin/StoreSum\n */\n/**\n * Mixin for Store that handles summaries.\n *\n * @mixin\n */\nexport default Target => class StoreSum extends (Target || Base) {\n    static get $name() {\n        return 'StoreSum';\n    }\n    /**\n     * Returns sum calculated by adding value of specified field for specified records. Defaults to using all records\n     * in store\n     * @param {String} field Field to summarize by\n     * @param {Core.data.Model[]} records Records to summarize, uses all records if unspecified.\n     * @returns {Number}\n     * @category Sum\n     */\n    sum(field, records = this.storage.values) {\n        if (!records) return 0;\n        return records.reduce((sum, record) => {\n            if (record.isSpecialRow) return sum;\n            const v = Number(record[field]);\n            return isNaN(v) ? sum : sum + v;\n        }, 0);\n    }\n    /**\n     * Returns min value for the specified field, can be used with Date or Number values. Defaults to look through all records in store\n     * @param {String} field Field to find min value for\n     * @param {Core.data.Model[]} records Records to process, uses all records if unspecified\n     * @returns {Number|Date}\n     * @category Sum\n     */\n    min(field, records = this.storage.values) {\n        if (!records || !records.length) return 0;\n        return records.reduce((min, record) => {\n            const type = typeof record[field]?.valueOf();\n            if (type === 'number' && record[field] < min) min = record[field];\n            return min;\n        }, records[0][field]);\n    }\n    /**\n     * Returns max value for the specified field, can be used with Date or Number values. Defaults to look through all records in store\n     * @param {String} field Field to find max value for\n     * @param {Core.data.Model[]} records Records to process, uses all records if unspecified\n     * @returns {Number|Date}\n     * @category Sum\n     */\n    max(field, records = this.storage.values) {\n        if (!records || !records.length) return 0;\n        return records.reduce((max, record) => {\n            const type = typeof record[field]?.valueOf();\n            if (type === 'number' && record[field] > max) max = record[field];\n            return max;\n        }, records[0][field]);\n    }\n    /**\n     * Returns the average value for the specified field. Defaults to look through all records in store\n     * @param {String} field Field to calculate average value for\n     * @param {Core.data.Model[]} records Records to process, uses all records if unspecified\n     * @returns {Number}\n     * @category Sum\n     */\n    average(field, records = this.storage.values) {\n        if (!records || !records.length) return 0;\n        let count = 0;\n        const sum = records.reduce((sum, record) => {\n            if (record.isSpecialRow) return sum;\n            const v = parseFloat(record[field]);\n            if (!isNaN(v)) {\n                count++;\n                return sum + v;\n            }\n            else {\n                return sum;\n            }\n        }, 0);\n        return count > 0 ? sum / count : 0;\n    }\n    /**\n     * Returns sum by adding value of specified field for records in the group with the specified groupValue.\n     * @param {*} groupValue The group to summarize\n     * @param {String} field Field to summarize by\n     * @returns {Number} Sum or null if store not grouped\n     * @category Sum\n     */\n    groupSum(groupValue, field) {\n        return this.sum(field, this.getGroupRecords(groupValue));\n    }\n};\n", "import Base from '../../Base.js';\nimport ObjectHelper from '../../helper/ObjectHelper.js';\n/**\n * @module Core/data/mixin/StoreSearch\n */\nconst\n    findInString = (value, text) => String(value).toLowerCase().includes(text),\n    matchFns     = {\n        string  : findInString,\n        number  : findInString,\n        boolean : findInString,\n        date    : (value, text) => {\n            if (value instanceof Date && text instanceof Date) {\n                return value - text === 0;\n            }\n            return String(value.getMonth() + 1).includes(text) ||\n                String(value.getDate()).includes(text) ||\n                String(value.getFullYear()).includes(text);\n        },\n        object    : (value, text) => value === text, // typeof null === object\n        undefined : (value, text) => value === text\n    };\n/**\n * Format returned by Store#findByField().\n * @typedef {Object} StoreSearchResult\n * @property {Number} index Index of the record in the store\n * @property {Core.data.Model} data The record\n */\n/**\n * Mixin for Store that handles searching (multiple records) and finding (single record).\n *\n * @example\n * // find all records that has a field containing the string john\n * let hits = store.search('john');\n *\n * @mixin\n */\nexport default Target => class StoreSearch extends (Target || Base) {\n    static get $name() {\n        return 'StoreSearch';\n    }\n    //region Search (multiple hits)\n    /**\n     * Find all hits matching the specified input\n     * @param {String} text Value to search for\n     * @param {String[]} fields Fields to search value in\n     * @param {Function[]} [formatters] An array of field formatting functions to format the found value\n     * @param {Boolean} [searchAllRecords] True to ignore any applied filters when searching\n     * @returns {StoreSearchResult[]} Array of hits, in the format { index: x, data: record }\n     * @category Search\n     */\n    search(text, fields = null, formatters, searchAllRecords) {\n        const\n            records = this.isTree && !searchAllRecords ? this.rootNode.allChildren : this.getAllDataRecords(searchAllRecords),\n            len     = records.length,\n            found   = [];\n        if (text == null) {\n            return [];\n        }\n        if (typeof text === 'string') {\n            text = text.toLowerCase();\n        }\n        let i,\n            j,\n            record,\n            value,\n            valueType,\n            comparison;\n        for (i = 0; i < len; i++) {\n            record = records[i];\n            j      = 0;\n            for (const key of fields || record.fieldNames) {\n                value     = record[key];\n                valueType = (value instanceof Date) ? 'date' : typeof value;\n                const formatter = formatters?.[j];\n                if (formatter) {\n                    value     = formatter(value);\n                    valueType = 'string';\n                }\n                comparison = matchFns[valueType];\n                if (value && comparison?.(value, text)) {\n                    found.push({\n                        index : i,\n                        data  : record,\n                        field : key,\n                        id    : record.id\n                    });\n                }\n                j++;\n            }\n        }\n        return found;\n    }\n    /**\n     * Find occurrences of the specified `value` in the specified `field` on all records in the store\n     * @param {String} field The record field to search in\n     * @param {*} value Value to search for\n     * @param {Boolean} distinct True to only return distinct matches, no duplicates\n     * @param {Boolean} [searchAllRecords] True to ignore any applied filters when searching\n     * @returns {StoreSearchResult[]} Array of hits, in the format { index: x, data: record }\n     * @category Search\n     */\n    findByField(field, value, distinct = false, searchAllRecords = false) {\n        const\n            records    = this.getAllDataRecords(searchAllRecords),\n            len        = records.length,\n            usedValues = new Set(),\n            found      = [];\n        let i, record, fieldValue;\n        if (value != null) {\n            value = String(value).toLowerCase();\n        }\n        for (i = 0; i < len; i++) {\n            record     = records[i];\n            fieldValue = record[field];\n            if (!distinct || !usedValues.has(fieldValue)) {\n                const\n                    type    = fieldValue instanceof Date ? 'date' : typeof fieldValue,\n                    matchFn = matchFns[type];\n                if ((value == null && fieldValue === value) || value && matchFn(fieldValue, value)) {\n                    found.push({\n                        id    : record.id,\n                        index : i,\n                        data  : record\n                    });\n                    if (distinct) {\n                        usedValues.add(fieldValue);\n                    }\n                }\n            }\n        }\n        return found;\n    }\n    //endregion\n    //region Find (single hit)\n    /**\n     * Finds the first record for which the specified function returns true\n     * @param {Function} fn Comparison function, called with record as parameter\n     * @param {Boolean} [searchAllRecords] True to ignore any applied filters when searching\n     * @returns {Core.data.Model} Record or undefined if none found\n     *\n     * @example\n     * store.find(record => record.color === 'blue');\n     * @category Search\n     */\n    find(fn, searchAllRecords = false)  {\n        return this.getAllDataRecords(searchAllRecords).find(fn);\n    }\n    /**\n     * Finds the first record for which the specified field has the specified value\n     * @param {String} fieldName Field name\n     * @param {*} value Value to find\n     * @param {Boolean} [searchAllRecords] True to ignore any applied filters when searching\n     * @returns {Core.data.Model} Record or undefined if none found\n     * @category Search\n     */\n    findRecord(fieldName, value, searchAllRecords = false) {\n        const\n            matchFn = r => ObjectHelper.isEqual(r[fieldName], value);\n        if (this.isTree) {\n            return this.query(matchFn, searchAllRecords)[0];\n        }\n        return this.getAllDataRecords(searchAllRecords).find(matchFn);\n    }\n    /**\n     * Searches the Store records using the passed function.\n     * @param {Function} fn A function that is called for each record. Return true to indicate a match\n     * @param {Boolean} [searchAllRecords] True to ignore any applied filters when searching\n     * @returns {Core.data.Model[]} An array of the matching Records\n     * @category Search\n     */\n    query(fn, searchAllRecords = false) {\n        if (this.isTree) {\n            const matches = [];\n            this.traverse((node) => {\n                if (fn(node)) {\n                    matches.push(node);\n                }\n            }, undefined, undefined, searchAllRecords);\n            return matches;\n        }\n        return this.getAllDataRecords(searchAllRecords).filter(fn);\n    }\n    //endregion\n    //region Others\n    /**\n     * Returns true if the supplied function returns true for any record in the store\n     * @param {Function} fn A function that should return true to indicate a match\n     * @param {Boolean} [searchAllRecords] True to ignore any applied filters when searching\n     * @returns {Boolean}\n     *\n     * @example\n     * store.some(record => record.age > 95); // true if any record has age > 95\n     * @category Search\n     */\n    some(fn, searchAllRecords = false) {\n        return this.getAllDataRecords(searchAllRecords).some(fn);\n    }\n    //endregion\n};\n", "import Base from '../../Base.js';\nimport ObjectHelper from '../../helper/ObjectHelper.js';\n/**\n * @module Core/data/mixin/StoreSort\n */\nconst nestedRe = /\\./;\n/**\n * An immutable object representing a store sorter.\n *\n * @typedef {Object} Sorter\n * @property {String} field Field name\n * @property {Boolean} [ascending=true] `true` to sort ascending, `false` to sort descending\n */\n/**\n * Mixin for Store that handles simple sorting as well as multi-level sorting.\n *\n * ```javascript\n * // single sorter\n * store.sort('age');\n *\n * // single sorter as object, descending order\n * store.sort({ field : 'age', ascending : false });\n *\n * // multiple sorters\n * store.sort(['age', 'name']);\n *\n * // using custom sorting function\n * store.sort({\n *     fn : (recordA, recordB) => {\n *         // apply custom logic, for example:\n *         return recordA.name.length < recordB.name.length ? -1 : 1;\n *     }\n * });\n *\n * // using locale specific sort (slow)\n * store.sort({ field : 'name', useLocaleSort : 'sv-SE' });\n * ```\n *\n * @mixin\n */\nexport default Target => class StoreSort extends (Target || Base) {\n    static get $name() {\n        return 'StoreSort';\n    }\n    //region Config\n    static get defaultConfig() {\n        return {\n            /**\n             * Use `localeCompare()` when sorting, which lets the browser sort in a locale specific order. Set to `true`,\n             * a locale string or a locale config to enable.\n             *\n             * Enabling this has big negative impact on sorting\n             * performance. For more info on `localeCompare()`, see [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare).\n             *\n             * Examples:\n             *\n             * ```javascript\n             * const store = new Store({\n             *     // Swedish sorting\n             *     useLocaleSort : 'sv-SE'\n             * });\n             *\n             * const store = new Store({\n             *     // Swedish sorting with custom casing order\n             *     useLocaleSort : {\n             *         locale    : 'sv-SE',\n             *         caseFirst : 'upper'\n             *     }\n             * });\n             * ```\n             *\n             * Can also be configured on a per-sorter basis:\n             *\n             * ```javascript\n             * store.sort({ field: 'name', useLocaleSort : 'sv-SE' });\n             * ```\n             *\n             * @config {Boolean|String|Object}\n             * @default false\n             * @category Advanced\n             */\n            useLocaleSort : null\n        };\n    }\n    static get configurable() {\n        return {\n            /**\n             * Initial sorters, format is [{ field: 'name', ascending: false }, ...]\n             * @config {Sorter[]|String[]}\n             * @category Common\n             */\n            sorters : [],\n            /**\n             * Specify true to sort this store after records are added.\n             * @config {Boolean}\n             * @default\n             * @category Sorting\n             */\n            reapplySortersOnAdd : false\n        };\n    }\n    //endregion\n    //region Events\n    /**\n     * Fired before sorting\n     * @event beforeSort\n     * @param {Core.data.Store} source This Store\n     * @param {Sorter[]} sorters Sorter configs\n     * @param {Core.data.Model[]} records Records to sort\n     */\n    /**\n     * Fired after sorting\n     * @event sort\n     * @param {Core.data.Store} source This Store\n     * @param {Sorter[]} sorters Sorter configs\n     * @param {Core.data.Model[]} records Sorted records\n     */\n    //endregion\n    //region Properties\n    /**\n     * Currently applied sorters\n     * @member {Sorter[]} sorters\n     * @readonly\n     * @category Sort, group & filter\n     */\n    /**\n     * Is store sorted?\n     * @property {Boolean}\n     * @readonly\n     * @category Sort, group & filter\n     */\n    get isSorted() {\n        return Boolean(this.sorters.length) || this.isGrouped;\n    }\n    changeSorters(sorters) {\n        return sorters.map(sorter => this.normalizeSorterConfig(sorter, true));\n    }\n    updateReapplySortersOnAdd(enable) {\n        this.storage.autoSort = enable;\n    }\n    //endregion\n    //region Add & remove sorters\n    /**\n     * Sort records, either by replacing current sorters or by adding to them.\n     * A sorter can specify a **_custom sorting function_** which will be called with arguments (recordA, recordB).\n     * Works in the same way as a standard array sorter, except that returning `null` triggers the stores\n     * normal sorting routine.\n     *\n     * ```javascript\n     * // single sorter\n     * store.sort('age');\n     *\n     * // single sorter as object, descending order\n     * store.sort({ field : 'age', ascending : false });\n     *\n     * // multiple sorters\n     * store.sort(['age', 'name']);\n     *\n     * // using custom sorting function\n     * store.sort((recordA, recordB) => {\n     *     // apply custom logic, for example:\n     *     return recordA.name.length < recordB.name.length ? -1 : 1;\n     * });\n     *\n     * // using locale specific sort (slow)\n     * store.sort({ field : 'name', useLocaleSort : 'sv-SE' });\n     * ```\n     *\n     * @param {String|Sorter[]|Sorter|Function} field Field to sort by.\n     * Can also be an array of {@link Core.util.CollectionSorter sorter} config objects, or a sorting function, or a\n     * {@link Core.util.CollectionSorter sorter} config.\n     * @param {Boolean} [ascending] Sort order.\n     * Applicable when the `field` is a string (if not specified and already sorted by the field, reverts direction),\n     * or an object and `ascending` property is not specified for the object. `true` by default.\n     * Not applicable when `field` is a function. `ascending` is always `true` in this case.\n     * @param {Boolean} [add] If `true`, adds a sorter to the sorters collection.\n     * Not applicable when `field` is an array. In this case always replaces active sorters.\n     * @param {Boolean} [silent] Set as true to not fire events. UI will not be informed about the changes.\n     * @category Sort, group & filter\n     * @fires beforeSort\n     * @fires sort\n     * @fires refresh\n     * @returns {Promise|null} If {@link Core/data/AjaxStore#config-sortParamName} is set on store, this method returns `Promise`\n     * which is resolved after data is loaded from remote server, otherwise it returns `null`\n     * @async\n     */\n    sort(field, ascending, add = false, silent = false) {\n        const\n            me             = this,\n            records        = me.allRecords,\n            currentSorters = me.sorters ? me.sorters.slice() : [];\n        let currentDir = null,\n            curSort;\n        if (field) {\n            if (Array.isArray(field)) {\n                // array of strings make fields always be sorted ascending\n                me.sorters = field.map(sorter => me.normalizeSorterConfig(sorter, typeof sorter === 'string' ? true : ascending));\n            }\n            else {\n                const sorter = me.normalizeSorterConfig(field, ascending);\n                if (add) {\n                    curSort = me.getCurrentSorterByField(sorter.field);\n                    // Field already among sorters? change sort direction instead of adding new sorter\n                    if (curSort) {\n                        currentDir        = curSort.ascending;\n                        curSort.ascending = sorter.ascending;\n                    }\n                    else {\n                        me.sorters.push(sorter);\n                    }\n                }\n                else {\n                    me.sorters = [sorter];\n                }\n            }\n        }\n        if (!silent && me.trigger('beforeSort', { sorters : me.sorters, records, currentSorters }) === false) {\n            // Restore sorters\n            me.sorters = currentSorters;\n            // Restore sorting direction if toggled\n            if (currentDir !== null) {\n                curSort.ascending = currentDir;\n            }\n            return null;\n        }\n        return me.performSort(silent);\n    }\n    normalizeSorterConfig(field, ascending) {\n        const\n            me     = this,\n            sorter = { ascending };\n        if (typeof field === 'object') {\n            ObjectHelper.assign(sorter, field);\n            if (field.fn) {\n                delete sorter.fn;\n                sorter.sortFn = field.fn;\n            }\n            sorter.ascending = field.ascending ?? ascending;\n        }\n        else if (typeof field === 'function') {\n            sorter.sortFn = field;\n        }\n        else {\n            sorter.field = field;\n        }\n        // sort in opposite direction if not specified and already sorted, default to sorting ascending\n        if (sorter.ascending == null) {\n            const curSort = me.getCurrentSorterByField(sorter.field);\n            sorter.ascending = curSort ? !curSort.ascending : true;\n        }\n        if (sorter.sortFn == null) {\n            const compareItems = me.modelClass?.$meta.fields.map[sorter.field]?.compareItems;\n            if (compareItems) {\n                // These sorters will be ignored by AjaxStore when remoting...\n                sorter.sortFn = compareItems;\n            }\n        }\n        return sorter;\n    }\n    getCurrentSorterByField(field) {\n        return typeof field === 'string' && this.sorters.find(s => s.field === field) || null;\n    }\n    /**\n     * Add a sorting level (a sorter).\n     * @param {String|Sorter[]|Sorter|Function} field Field to sort by. Can also be an array of sorters, or a sorting\n     * function, or a {@link Core.util.CollectionSorter sorter} config.\n     * @param {Boolean} [ascending] Sort order (used only if field specified as string)\n     * @returns {Promise|null} If {@link Core/data/AjaxStore#config-sortParamName} is set on store, this method returns `Promise`\n     * which is resolved after data is loaded from remote server, otherwise it returns `null`\n     * @async\n     * @category Sort, group & filter\n     */\n    addSorter(field, ascending = true) {\n        return this.sort(field, ascending, true);\n    }\n    /**\n     * Remove a sorting level (a sorter)\n     * @param {String|Function} field Stop sorting by this field (or sorter function)\n     * @returns {Promise|null} If {@link Core/data/AjaxStore#config-sortParamName} is set on store, this method returns `Promise`\n     * which is resolved after data is loaded from remote server, otherwise it returns `null`\n     * @async\n     * @category Sort, group & filter\n     */\n    removeSorter(field) {\n        const\n            sorterIndex = this.sorters.findIndex(sorter => sorter.field === field || sorter.sortFn === field);\n        if (sorterIndex > -1) {\n            this.sorters.splice(sorterIndex, 1);\n            return this.sort();\n        }\n    }\n    /**\n     * Removes all sorters, turning store sorting off.\n     * @returns {Promise|null} If {@link Core/data/AjaxStore#config-sortParamName} is set on store, this method returns `Promise`\n     * which is resolved after data is loaded from remote server, otherwise it returns `null`\n     * @async\n     * @category Sort, group & filter\n     */\n    clearSorters(silent = false) {\n        if (this.sorters.length) {\n            this.sorters.length = 0;\n            return this.sort(undefined, undefined, undefined, silent);\n        }\n    }\n    //region\n    //region Sorting logic\n    /**\n     * Creates a function used with Array#sort when sorting the store. Override to use your own custom sorting logic.\n     * @param {Sorter[]} sorters An array of sorter config objects\n     * @returns {Function}\n     * @category Sort, group & filter\n     */\n    createSorterFn(sorters) {\n        const storeLocaleSort = this.useLocaleSort;\n        return (lhs, rhs) => {\n            for (let i = 0; i < sorters.length; i++) {\n                const\n                    sorter = sorters[i],\n                    { field, ascending = true, useLocaleSort = storeLocaleSort } = sorter,\n                    fn = sorter.fn || sorter.sortFn,\n                    direction = ascending ? 1 : -1;\n                if (fn) {\n                    const val = fn.call(sorter, lhs, rhs);\n                    if (val === 0) {\n                        // equal values, let next sorter define order\n                        continue;\n                    }\n                    if (val !== null) {\n                        return val * direction;\n                    }\n                }\n                const\n                    nested = nestedRe.test(field),\n                    lhsValue = nested ? lhs.get(field) : lhs[field],\n                    rhsValue = nested ? rhs.get(field) : rhs[field];\n                if (lhsValue === rhsValue) {\n                    continue;\n                }\n                if (lhsValue == null) {\n                    return -direction;\n                }\n                if (rhsValue == null) {\n                    return direction;\n                }\n                if (useLocaleSort && typeof lhsValue === 'string') {\n                    // Use systems locale\n                    if (useLocaleSort === true) {\n                        return String(lhsValue).localeCompare(rhsValue) * direction;\n                    }\n                    // Use specified locale\n                    if (typeof useLocaleSort === 'string') {\n                        return String(lhsValue).localeCompare(rhsValue, useLocaleSort) * direction;\n                    }\n                    // Use locale config\n                    if (typeof useLocaleSort === 'object') {\n                        return String(lhsValue).localeCompare(rhsValue, useLocaleSort.locale, useLocaleSort) * direction;\n                    }\n                }\n                if (lhsValue > rhsValue) {\n                    return direction;\n                }\n                if (lhsValue < rhsValue) {\n                    return -direction;\n                }\n            }\n            return 0;\n        };\n    }\n    /**\n     * The sorter function for sorting records in the store.\n     * @member {Function}\n     * @internal\n     * @readonly\n     */\n    get sorterFn() {\n        const\n            me = this,\n            { sorters } = me;\n        // When remoteSort is enabled then always sort by data order received from remote server\n        // _remoteSortIndex is set inside store.setStoreData() method\n        return me.createSorterFn(me.remoteSort ?  [{ field : '_remoteSortIndex' }] : (me.isGrouped ? me.groupers.concat(sorters) : sorters));\n    }\n    /**\n     * Perform sorting according to the {@link #config-sorters} configured.\n     * This is the internal implementation which is overridden in {@link Core.data.AjaxStore} and\n     * must not be overridden.\n     * @async\n     * @private\n     * @category Sort, group & filter\n     */\n    performSort(silent) {\n        const\n            me = this,\n            { rootNode, storage, sorterFn: sorter } = me;\n        if (me.tree) {\n            !me.isChained && rootNode.traverse(node => {\n                if (node.isLoaded && node.isParent) {\n                    node.children.sort(sorter);\n                    // Since child nodes change order their parentIndex needs to be updated.\n                    // Update is silent, records won't be considered modified because of the sort\n                    node.updateChildrenIndices(node.children, 'parentIndex', true);\n                }\n            });\n            storage.replaceValues({\n                values : me.collectDescendants(rootNode).visible,\n                silent : true\n            });\n        }\n        else if (me.isGrouped) {\n            storage.replaceValues({\n                ...me.prepareGroupRecords(sorter),\n                silent : true\n            });\n        }\n        else {\n            storage.replaceValues({\n                values : storage.values.sort(sorter),\n                silent : true\n            });\n        }\n        me.afterPerformSort(silent || me.isRemoteDataLoading);\n    }\n    afterPerformSort(silent) {\n        if (silent) {\n            return;\n        }\n        const me = this;\n        me._idMap = null;\n        const event = {\n            action  : 'sort',\n            sorters : me.sorters,\n            records : me.allRecords\n        };\n        me.trigger('sort', event);\n        me.trigger('refresh', event);\n    }\n    //endregion\n};\n", "import Base from '../../Base.js';\nimport ObjectHelper from '../../helper/ObjectHelper.js';\n/**\n * @module Core/data/mixin/StoreChained\n */\nconst returnTrue = () => true;\n/**\n * A chained Store contains a subset of records from a master store. Which records to include is determined by a\n * filtering function, {@link #config-chainedFilterFn}.\n *\n * ```javascript\n * masterStore.chain(record => record.percent < 10);\n *\n * // or\n *\n * new Store({\n *   masterStore     : masterStore,\n *   chainedFilterFn : record => record.percent < 10\n * });\n * ```\n *\n * @mixin\n */\nexport default Target => class StoreChained extends (Target || Base) {\n    static get $name() {\n        return 'StoreChained';\n    }\n    //region Config\n    static get defaultConfig() {\n        return {\n            /**\n             * Function used to filter records in the masterStore into a chained store. If not provided,\n             * all records from the masterStore will be included in the chained store.\n             * @config {Function}\n             * @category Chained store\n             */\n            chainedFilterFn : null,\n            /**\n             * Array of field names that should trigger filtering of chained store when the fields are updated.\n             * @config {String[]}\n             * @category Chained store\n             */\n            chainedFields : null,\n            /**\n             * Master store that a chained store gets its records from.\n             * @config {Core.data.Store}\n             * @category Chained store\n             */\n            masterStore : null,\n            /**\n             * Method names calls to which should be relayed to master store.\n             * @config {String[]}\n             * @category Chained store\n             */\n            doRelayToMaster : ['add', 'remove', 'insert'],\n            /**\n             * Method names calls to which shouldn't be relayed to master store.\n             * @config {String}\n             * @category Chained store\n             */\n            dontRelayToMaster : [],\n            /**\n             * If true, collapsed records in original tree will be excluded from the chained store.\n             * @config {Boolean}\n             * @category Chained store\n             */\n            excludeCollapsedRecords : true\n        };\n    }\n    // All props should be predefined to work properly with objectified stores\n    static get properties() {\n        return {\n            chainedStores : null\n        };\n    }\n    //endregion\n    construct(config) {\n        super.construct(config);\n        const\n            me              = this,\n            { masterStore } = me,\n            sort            = me.syncOrder ? 'sort' : '';\n        if (masterStore) {\n            me.methodNamesToRelay.forEach(fnName => me[fnName] = (...params) => me.relayToMaster(fnName, params));\n            me.removeAll = (...params) => {\n                masterStore.remove(me.getRange(), ...params);\n            };\n            masterStore.ion({\n                // HACK to have chained stores react early in a async events scenario (with engine). Could be turned\n                // into a config, but this way one does not have to think about it\n                changePreCommit : me.onMasterDataChangedPreCommit,\n                change          : me.onMasterDataChanged,\n                [sort]          : me.onMasterDataChanged,\n                prio            : 1,\n                thisObj         : me\n            });\n            if (!masterStore.chainedStores) {\n                masterStore.chainedStores = [];\n            }\n            masterStore.chainedStores.push(me);\n            me.fillFromMaster();\n        }\n    }\n    //region Properties\n    // For accessing the full set of records, whether chained or not\n    get $master() {\n        return this.masterStore || this;\n    }\n    /**\n     * Is this a chained store?\n     * @property {Boolean}\n     * @readonly\n     * @category Store\n     */\n    get isChained() {\n        return Boolean(this.masterStore);\n    }\n    set chainedFilterFn(chainedFilterFn) {\n        this._chainedFilterFn = this.thisObj ? chainedFilterFn.bind(this.thisObj) : chainedFilterFn;\n    }\n    get chainedFilterFn() {\n        return this._chainedFilterFn || returnTrue;\n    }\n    get methodNamesToRelay() {\n        const\n            doIsArray   = Array.isArray(this.doRelayToMaster),\n            dontIsArray = Array.isArray(this.dontRelayToMaster);\n        return doIsArray && this.doRelayToMaster.filter(name => !dontIsArray || !this.dontRelayToMaster.includes(name)) || [];\n    }\n    //endregion\n    //region Internal\n    updateChainedStores() {\n        if (this.chainedStores) {\n            this.chainedStores.forEach(store => store.fillFromMaster());\n        }\n    }\n    /**\n     * Updates records available in a chained store by filtering the master store records using\n     * {@link #config-chainedFilterFn}\n     * @category Chained store\n     */\n    fillFromMaster() {\n        const\n            me                      = this,\n            { masterStore, isTree } = me;\n        let records = [];\n        if (!me.isChained) {\n            throw new Error('fillFromMaster only allowed on chained store');\n        }\n        if (masterStore.isGrouped && masterStore.isFiltered) {\n            masterStore.forEach(r => records.push(r), masterStore, { includeFilteredOutRecords : true, includeCollapsedGroupRecords : true });\n        }\n        else {\n            records = masterStore.allRecords.filter(r => !r.isSpecialRow && me.chainedFilterFn(r));\n        }\n        if (isTree) {\n            // All nodes will be registered\n            me.idRegister = {};\n            me.internalIdRegister = {};\n            // *all* owned records have to join, as they would have done if they'd all gone through\n            // the appendChild route for this store.\n            records.forEach(r => {\n                if (r.stores.includes(me)) {\n                    me.register(r);\n                }\n                else {\n                    r.joinStore(me);\n                }\n            });\n            // We exclude collapsed records by default. It's used in Columns Store.\n            // Because grid columns is a tree store when subgrid columns is just a chained store of the columns store.\n            // And we don't need to include collapsed column.\n            // If we need to show collapsed nodes in Combo we need to chain tree store and set `excludeCollapsedRecords` to `false`.\n            if (me.excludeCollapsedRecords) {\n                const children = me.getChildren(me.rootNode);\n                records = me.doIncludeExclude(children, true);\n            }\n        }\n        me.isFillingFromMaster = true;\n        me.data = records;\n        me.isFillingFromMaster = false;\n    }\n    /**\n     * Commits changes back to master.\n     * - the records deleted from chained store and present in master will be deleted from master\n     * - the records added to chained store and missing in master will added to master\n     * Internally calls {Store#function-commit commit()}.\n     * @returns {Object} Changes, see Store#changes\n     * @internal\n     */\n    commitToMaster() {\n        const\n            me = this,\n            master = me.masterStore;\n        if (!me.isChained) {\n            throw new Error('commitToMaster only allowed on chained store');\n        }\n        master.beginBatch();\n        master.remove(me.removed.values);\n        master.add(me.added.values);\n        master.endBatch();\n        return me.commit();\n    }\n    /**\n     * Relays some function calls to the master store\n     * @private\n     */\n    relayToMaster(fnName, params) {\n        return this.masterStore[fnName](...params);\n    }\n    // HACK, when used with engine the chained store will catch events early (sync) and prevent late (async) listeners\n    onMasterDataChangedPreCommit(event) {\n        this.onMasterDataChanged(event);\n        this.$masterEventhandled = true;\n    }\n    /**\n     * Handles changes in master stores data. Updates the chained store accordingly\n     * @private\n     */\n    onMasterDataChanged({ action, changes, $handled, isMove }) {\n        // Handled early in engine store (above), bail out\n        if (this.$masterEventhandled) {\n            this.$masterEventhandled = false;\n            return;\n        }\n        // 'move' action triggers a remove event first, we wait for the 'add' - no need to fill twice\n        if (isMove && action === 'remove') {\n            return;\n        }\n        // if a field not defined in chainedFields is changed, ignore the change.\n        // there is no need to refilter the store in such cases, the change will be available anyhow since data is\n        // shared\n        if (action !== 'update' || this.chainedFields?.some(field => field in changes)) {\n            this.fillFromMaster();\n        }\n    }\n    //endregion\n    //region public API\n    /**\n     * Creates a chained store, a new Store instance that contains a subset of the records from current store.\n     * Which records is determined by a filtering function, which is reapplied when data in the base store changes.\n     *\n     * ```javascript\n     * const oldies = store.makeChained(record => record.age > 50);\n     * // or use a simple query\n     * const ages = store.makeChained(() => store.allRecords.distinct('age')));\n     * ```\n     *\n     * If this store is a {@link Core.data.mixin.StoreTree#property-isTree tree} store, then the resulting chained store\n     * will be a tree store sharing the same root node, but only child nodes which pass the `chainedFilterFn` will be\n     * considered when iterating the tree through the methods such as\n     * {@link Core.data.Store#function-traverse} or {@link Core.data.Store#function-forEach}.\n     *\n     * @param {Function} [chainedFilterFn] Either a filter function called for every record to determine if it should be\n     * included (return true / false), or a query function called with no arguments (see example below). Defaults to\n     * including all records (fn always returning true)\n     * @param {String[]} [chainedFields] Array of fields that trigger filtering when they are updated\n     * @param {StoreConfig} [config] Additional chained store configuration. See {@link Core.data.Store#configs}\n     * @param {Class} [config.storeClass] The Store class to use if this Store type is not required.\n     * @returns {Core.data.Store}\n     */\n    makeChained(chainedFilterFn = returnTrue, chainedFields, config) {\n        return new (config?.storeClass || this.constructor)({\n            ...config || {},\n            tree           : false,\n            autoTree       : false,\n            // If someone ever chains a chained store, chain master instead\n            masterStore    : this.$master,\n            modelClass     : this.modelClass,\n            // Chained store should never use syncDataOnLoad, that will create an infinite loop when they determine\n            // that a record is added and then add it to master, repopulating this store and round we go\n            syncDataOnLoad : false,\n            chainedFilterFn,\n            chainedFields\n        });\n    }\n    /**\n     * Alias for {@link Core.data.Store#function-makeChained}\n     *\n     * @param {Function} [chainedFilterFn] Either a filter function called for every record to determine if it should be\n     * included (return true / false), or a query function called with no arguments (see example below). Defaults to\n     * including all records (fn always returning true)\n     * @param {String[]} [chainedFields] Array of fields that trigger filtering when they are updated\n     * @param {StoreConfig} [config] Additional chained store configuration. See {@link Core.data.Store#configs}\n     * @param {Class} [config.storeClass] The Store class to use if this Store type is not required.\n     * @returns {Core.data.Store}\n     */\n    chain() {\n        return this.makeChained(...arguments);\n    }\n    //endregion\n    doDestroy() {\n        // Destroy chained store on master store destroy\n        this.chainedStores?.forEach(chainedStore => chainedStore.destroy());\n        // Events superclass fires destroy event.\n        super.doDestroy();\n    }\n};\n", "import Base from '../../Base.js';\nimport ObjectHelper from '../../helper/ObjectHelper.js';\n/**\n * @module Core/data/mixin/StoreState\n */\n/**\n * A Mixin for Store that manages its state.\n *  * **sorters**\n *  * **groupers**\n *  * **filters**: Only serializable filters are saved (filters defined with `property` and `value`).\n * @mixin\n */\nexport default Target => class StoreState extends (Target || Base) {\n    static get $name() {\n        return 'StoreState';\n    }\n    /**\n     * Get store state. Used by State-plugin to serialize state\n     * @private\n     * @returns {{ sorters, groupers }}\n     */\n    getState() {\n        const\n            { sorters, groupers, filters } = this,\n            state                          = {};\n        if (sorters?.length) {\n            state.sorters = sorters.map(sorter => {\n                const clone = ObjectHelper.cleanupProperties(ObjectHelper.clone(sorter));\n                // Remove sorting fns\n                delete clone.fn;\n                delete clone.sortFn;\n                return clone;\n            });\n        }\n        if (groupers?.length) {\n            state.groupers = groupers.map(grouper => {\n                const clone = ObjectHelper.cleanupProperties(ObjectHelper.clone(grouper));\n                // Remove grouping fns\n                delete clone.fn;\n                return clone;\n            });\n        }\n        if (filters?.values.length) {\n            state.filters = filters.values.map(filter => {\n                const clone = ObjectHelper.cleanupProperties(ObjectHelper.clone(filter.config));\n                // Apply value, needed because of filterable fn reusing instance (so not in config)\n                clone.value = filter.value;\n                // Remove default value, no need to store that in state\n                if (clone.caseSensitive) {\n                    delete clone.caseSensitive;\n                }\n                // Remove filtering fns\n                // delete clone.filterBy; // Cannot remove it, required by export feature\n                return clone;\n            });\n        }\n        return state;\n    }\n    /**\n     * Apply store state. Used by State-plugin to restore a previously serialized state\n     * @private\n     * @param {{ sorters, groupers }} state\n     */\n    applyState(state) {\n        const\n            me = this,\n            {\n                sorters  = [],\n                groupers = [],\n                filters  = []\n            }  = state,\n            {\n                sortParamName,\n                filterParamName\n            } = me;\n        // We cannot apply sorters with a sortFn if we are doing server-side sorting\n        me.sorters = sorters.filter(sorter => sorter.field || (sorter.sortFn && !sortParamName));\n        me.groupers = groupers.slice();\n        me.sort();\n        // We cannot apply filters with a filterBy if we are doing server-side filtering\n        me.filters = filters.filter(filter => filter.property || (filter.filterBy && !filterParamName));\n        me.filter();\n    }\n};\n", "/**\n * @module Core/data/Wbs\n */\nconst zeroPad = v => String(v).padStart(6, '0');\n/**\n * This class holds a WBS (Work Breakdown Structure) value (e.g., '1.2.1'). This class ensures that such values compare\n * correctly, for example, that '1.2' is less than '1.10' (which do not compare that way as simple text).\n */\nexport default class Wbs {\n    /**\n     * Wbs constructor.\n     * @param {String|Number} value The value of WBS\n     */\n    constructor(value) {\n        this.value = value;\n        this._padded = null;\n    }\n    /**\n     * The WBS value\n     * @readonly\n     * @member {String} value\n     */\n    set value(value) {\n        this._value = String(value ?? '');\n    }\n    get value() {\n        return this._value;\n    }\n    /**\n     * Returns a `Wbs` instance given a `value`. If the `value` is already a `Wbs` object, it is returned. Otherwise,\n     * a new `Wbs` is created. If `value` is `null` or `undefined`, that value is returned.\n     * @param {String|Number|Core.data.Wbs} value\n     * @returns {Core.data.Wbs}\n     */\n    static from(value) {\n        // this must preserve null to be useful as a data field, where a null value means no value present.\n        return (value == null) ? value : ((value instanceof Wbs) ? value : new Wbs(value));\n    }\n    /**\n     * Returns a WBS code where each component is 0-padded on the left to 6 digits. That is \"1.2\" is padded to be\n     * \"000001.000002\". These values can be compared for proper semantic order (e.g., Wbs.pad('1.2') < Wbs.pad('1.10')).\n     * @param {String|Number|Core.data.Wbs} value\n     * @returns {String}\n     * @private\n     */\n    static pad(value) {\n        return (value instanceof Wbs) ? value.valueOf() : Wbs.split(value).map(zeroPad).join('.');\n    }\n    /**\n     * Returns an array of digits from a given WBS code `value`. If the value cannot be converted, an empty array is\n     * returned.\n     * @param {String|Number|Core.data.Wbs} value\n     * @returns {Number[]}\n     * @private\n     */\n    static split(value) {\n        let i, ret;\n        if (value || value === 0) {\n            switch (typeof value) {\n                case 'object':\n                    value = String(value);\n                // noinspection FallThroughInSwitchStatementJS\n                case 'string': // eslint-disable-line no-fallthrough\n                    ret = value.split('.');\n                    for (i = ret.length; i-- > 0; /* empty */) {\n                        ret[i] = parseInt(ret[i], 10);\n                    }\n                    break;\n                case 'number':\n                    ret = [value];\n                    break;\n            }\n        }\n        return ret || [];\n    }\n    /**\n     * Compares two WBS values, returning 0 if equal, -1 if `lhs` is less than `rhs, or 1 if `lhs` is greater than `rhs`.\n     * @param {String|Core.data.Wbs} lhs\n     * @param {String|Core.data.Wbs} rhs\n     * @returns {Number}\n     */\n    static compare(lhs, rhs) {\n        if (lhs === rhs) {\n            return 0;\n        }\n        if (!lhs || !rhs) {\n            return lhs ? 1 : (rhs ? -1 : 0);\n        }\n        lhs = Wbs.pad(lhs);\n        rhs = Wbs.pad(rhs);\n        return (lhs < rhs) ? -1 : ((rhs < lhs) ? 1 : 0);\n    }\n    /**\n     * Appends a sub-level WBS value to this WBS code and returns a `Wbs` instance for it.\n     * @param {String|Number} value\n     * @returns {Core.data.Wbs}\n     */\n    append(value) {\n        const s = this.value;\n        return Wbs.from(s ? `${s}.${value}` : value);\n    }\n    /**\n     * Returns truthy value if this Wbs equals the passed value.\n     * @param {String|Core.data.Wbs} value\n     * @returns {Boolean}\n     */\n    isEqual(value) {\n        return !Wbs.compare(this, value);\n    }\n    /**\n     * Compares this WBS value with a specified pattern, returning `true` if they match. If the `pattern` is simply a\n     * sequence of digits and decimal points (e.g., \"1.2\"), it is a match if it is a substring of this WBS code (e.g.,\n     * \"3.1.2.4\"). If the `pattern` starts with `*` (e.g., \"*.1.2\"), it is a match if this WBS code ends with the text\n     * following the `*` (e.g., \"4.3.1.2\"). If the `pattern` ends with `*`, it is a match if this WBS code starts with\n     * the text up to the `*`.\n     *\n     * Some examples:\n     * ```\n     *  console.log(Wbs.from('1.2.3.4').match('2.3'));\n     *  > true\n     *  console.log(Wbs.from('1.2.3.4').match('*.4'));\n     *  > true\n     *  console.log(Wbs.from('1.2.3.4').match('1.2.*'));\n     *  > true\n     *\n     *  console.log(Wbs.from('1.2.3.4').match('2.4'));\n     *  > false\n     *  console.log(Wbs.from('1.2.3.4').match('*.3'));\n     *  > false\n     *  console.log(Wbs.from('1.2.3.4').match('2.*'));\n     *  > false\n     * ```\n     * @param {String} pattern A partial WBS code (e.g., \"1.2\"), optionally starting or ending with `*`.\n     * @returns {Boolean}\n     */\n    match(pattern) {\n        let ret = false;\n        if (pattern) {\n            const\n                wbs = this.value,\n                globLeft = pattern[0] === '*',\n                globRight = pattern.endsWith('*'),\n                n = pattern.length;\n            if (globLeft === globRight) {\n                // no globs behavior is the same as both globs ('1.2' is the same as '*1.2*')\n                ret = wbs.indexOf(globLeft ? pattern.substr(1, n - 2) : pattern) > -1;\n            }\n            else if (globLeft) {\n                ret = wbs.endsWith(pattern.substr(1));\n            }\n            else {\n                ret = wbs.startsWith(pattern.substr(0, n - 1));\n            }\n        }\n        return ret;\n    }\n    toString() {\n        return this.value;\n    }\n    toJSON() {\n        return this.toString();\n    }\n    valueOf() {\n        // the value we return is implicitly used by < and > operators when comparing instances of this type, so we\n        // need to return a value that makes \"1.2 < 1.10\" evaluate as true:\n        return this._padded ?? (this._padded = Wbs.pad(this.value));\n    }\n}\nWbs._$name = 'Wbs';", "import Base from '../../Base.js';\nimport StringHelper from '../../helper/StringHelper.js';\nimport VersionHelper from '../../helper/VersionHelper.js';\nimport Wbs from './../Wbs.js';\n/**\n * @module Core/data/mixin/StoreTree\n */\nconst emptyArray = Object.freeze([]);\n/**\n * Mixin for store with tree related functionality. To learn more about working with tree nodes please see the\n * {@link Core/data/mixin/TreeNode} class and [this guide](#Core/guides/data/treedata.md).\n * @mixin\n */\nexport default Target => class StoreTree extends (Target || Base) {\n    static $name = 'StoreTree';\n    static configurable = {\n        /**\n         * Set to `true` to on load transform a flat dataset with raw objects containing `parentId` into the format\n         * expected for tree data.\n         *\n         * Example input format:\n         *\n         * ```javascript\n         * [\n         *   { id : 1, name : 'Parent' },\n         *   { id : 2, name : 'Child', parentId : 1 }\n         * ]\n         * ```\n         *\n         * Will be transformed into:\n         *\n         * ```javascript\n         * [\n         *   {\n         *     id       : 1,\n         *     name     : 'Parent',\n         *     children : [\n         *       { id : 2, name : 'Child', parentId : 1 }\n         *     ]\n         *   }\n         * ]\n         * ```\n         *\n         * @config {Boolean}\n         * @category Tree\n         */\n        transformFlatData : null,\n        /**\n         * This flag prevents firing of 'remove' event when moving a node in the tree. In 6.0 this will be the default\n         * behavior and this flag will be removed.\n         * @config {Boolean}\n         * @category Tree\n         */\n        fireRemoveEventForMoveAction : VersionHelper.checkVersion('core', '6.0', '<')\n    };\n    //region Getters\n    /**\n     * True if this Store is configured to handle tree data (with `tree : true`) or if this is a\n     * {@link Core.data.Store#function-makeChained chained store} and the master store is a tree store.\n     * @property {Boolean}\n     * @readonly\n     * @category Tree\n     */\n    get isTree() {\n        return this.tree || (this.masterStore && this.masterStore.tree);\n    }\n    /**\n     * Returns all leaf records in a tree store\n     * @property {Core.data.Model[]}\n     * @category Tree\n     */\n    get leaves() {\n        const me = this,\n            result = [];\n        if (me.isTree) {\n            me.traverse(record => {\n                if (record.isLeaf) {\n                    result.push(record);\n                }\n            });\n            return result;\n        }\n        else {\n            me.allRecords.forEach(r => {\n                if (r.isLeaf) {\n                    result.push(r);\n                }\n                r.traverse(record => {\n                    if (record.isLeaf) {\n                        result.push(record);\n                    }\n                }, true);\n            });\n        }\n        return result;\n    }\n    //endregion\n    //region Children\n    /**\n     * Loads children for a parent node that uses load on demand (when expanding it). Base implementation does nothing,\n     * either use AjaxStore which implements it, create your own subclass with an implementation or listen for\n     * `toggleNode` and insert records when you have them available.\n     * @param {Core.data.Model} parentRecord\n     * @returns {Promise} A Promise which will be resolved if the load succeeds, and rejected if the load is\n     * vetoed by a {@link Core.data.AjaxStore#event-beforeLoadChildren} handler, or if an {@link Core.data.AjaxStore#event-exception} is detected.\n     * The resolved function is passed the event object passed to any event handlers.\n     * The rejected function is passed the {@link Core.data.AjaxStore#event-exception} event if an exception occurred,\n     * or `false` if the load was vetoed by a {@link Core.data.AjaxStore#event-beforeLoadChildren} handler.\n     * @category Tree\n     */\n    async loadChildren(parentRecord) {\n    }\n    /**\n     * Called from Model when adding children. Not to be called directly, use Model#appendChild() instead.\n     * @internal\n     * @param {Core.data.mixin.TreeNode} parent\n     * @param {Core.data.mixin.TreeNode[]} children\n     * @param {Number} index\n     * @param {Object} isMove\n     * @param {Boolean} [silent]\n     * @fires add\n     * @fires change\n     * @category Tree\n     */\n    onNodeAddChild(parent, children, index, isMove, silent = false) {\n        const\n            me                  = this,\n            isRootLoad          = parent === me.rootNode && parent.isLoading,\n            { storage }         = me,\n            toAddToUI           = [],\n            toAdd               = [],\n            { previousSibling } = children[0];\n        let storeInsertionPoint;\n        me.collectDescendants(children, toAddToUI, toAdd, { inCollapsedBranch : !(parent.isExpanded(me) && parent.ancestorsExpanded(me)) });\n        // Keep CRUD caches up to date unless it's a root load\n        if (!isRootLoad && toAdd.length) {\n            for (const record of toAdd) {\n                // Only considered an add if not modified or moved\n                if (!me.modified.includes(record) && !isMove[record.id]) {\n                    // If was removed, remove from `removed` list\n                    if (me.removed.includes(record)) {\n                        me.removed.remove(record);\n                    }\n                    // Else add to `added` list\n                    else if (!record.isLinked) {\n                        me.added.add(record);\n                    }\n                }\n            }\n        }\n        // Root node inserted first\n        if (isRootLoad && me.rootVisible) {\n            toAddToUI.unshift(parent);\n            toAdd.unshift(parent);\n        }\n        if (toAddToUI.length) {\n            // Calculate the insertion point into the flat store.\n            // If the new node is the first, then it goes after the parent node.\n            if (index === 0 || !previousSibling) {\n                storeInsertionPoint = storage.indexOf(parent);\n            }\n            // Otherwise it has to go after the previous visible node which has\n            // to be calculated. See indexOfPreviousVisibleNode for explanation.\n            else {\n                storeInsertionPoint = storage.indexOf(previousSibling) + previousSibling.getDescendantCount(true, me);\n            }\n            // Insert added child nodes at correct location in storage.\n            // We must not react to change - we fire the events here.\n            storage.suspendEvents();\n            me.storage.splice(++storeInsertionPoint, 0, toAddToUI);\n            storage.resumeEvents();\n            me._idMap = null;\n        }\n        else {\n            // Since storage is not updated, need to invalidate allRecords\n            me._allRecords = null;\n        }\n        // Since we do not pass through Store#onDataChange we have to handle relations manually here. And since they are\n        // not tied to flat part of store, use all children\n        me.updateDependentStores('add', children);\n        // If it's a root level set data op, then signal 'dataset'\n        if (isRootLoad && toAddToUI.length) {\n            // If we have initial sorters, perform a silent sort before triggering `dataset`\n            // NOTE: Records in toAddToUI will be in the original order, not affected by the sort\n            if (me.sorters.length) {\n                me.sort(null, null, false, true);\n            }\n            me.afterLoadData?.();\n            if (!silent) {\n                const event = { action : 'dataset', data : me._data, records : toAddToUI };\n                me.trigger('refresh', event);\n                me.trigger('change', event);\n            }\n        }\n        // Else, continue as before to signal an \"isChild\" add.\n        else if (!silent) {\n            const event = { action : 'add', parent, isChild : true, isMove, records : children, allRecords : toAdd, index : storeInsertionPoint };\n            me.trigger('add', event);\n            me.trigger('change', event);\n            // Check if any add is actually a move\n            if (Object.values(isMove).some(wasMoved => wasMoved)) {\n                const event = {\n                    newParent  : parent,\n                    records    : children.filter(record => isMove[record.id]),\n                    oldParents : children.map(child => {\n                        return me.getById(child.meta.oldParentId);\n                    })\n                };\n                me.trigger('move', event);\n            }\n        }\n    }\n    onNodeRemoveChild(parent, children, index, flags = { isMove : false, silent : false, unfiltered : false }) {\n        const\n            me                             = this,\n            { storage }                    = me,\n            toRemoveFromUI                 = [],\n            toRemove                       = [],\n            { isMove, silent, unfiltered } = flags,\n            removeUnfiltered               = unfiltered && me.isFiltered,\n            childrenToRemove               = removeUnfiltered && parent.unfilteredChildren ? parent.unfilteredChildren : children;\n        me.collectDescendants(childrenToRemove, toRemoveFromUI, toRemove, { inCollapsedBranch : !(parent.isExpanded(me) && parent.ancestorsExpanded(me)), unfiltered : removeUnfiltered });\n        // test StoreTree.t.js should fail if the next line replaces the above line\n        // me.collectDescendants(children, toRemoveFromUI, toRemove, { inCollapsedBranch : !(parent.isExpanded(me) && parent.ancestorsExpanded(me)) });\n        if (!isMove) {\n            // Unjoin is recursive, use flat children array\n            for (const record of children) {\n                record.unjoinStore(me);\n            }\n            // Keep CRUD caches up to date\n            for (const record of toRemove) {\n                if (record.stores.includes(me)) {\n                    record.unjoinStore(me);\n                }\n                // If was newly added, remove from `added` list\n                if (me.added.includes(record)) {\n                    me.added.remove(record);\n                }\n                // Else add to `removed` list\n                else if (!record.isLinked) {\n                    me.removed.add(record);\n                }\n            }\n            me.modified.remove(toRemove);\n        }\n        // Remove removed child nodes at correct location in storage\n        if (toRemoveFromUI.length) {\n            index = storage.indexOf(toRemoveFromUI[0]);\n            // We must not react to change - we fire the events here.\n            if (index > -1) {\n                storage.suspendEvents();\n                storage.splice(index, toRemoveFromUI.length);\n                storage.resumeEvents();\n                me._idMap = null;\n            }\n        }\n        else {\n            // If nothing is removed from UI (storage) return -1, showing that removed node was in a collapsed branch\n            index = -1;\n            // Since storage is not updated, need to invalidate allRecords\n            me._allRecords = null;\n        }\n        if (!silent && (me.fireRemoveEventForMoveAction || !isMove)) {\n            const event = {\n                action     : 'remove',\n                parent,\n                isChild    : true,\n                isMove,\n                records    : children,\n                allRecords : toRemove,\n                index\n            };\n            me.trigger('remove', event);\n            me.trigger('change', event);\n        }\n        return toRemove;\n    }\n    collectDescendants(node, visible = [], all = [], flags) {\n        const me = this,\n            { inCollapsedBranch = false, unfiltered = false } = flags || 0,\n            children = Array.isArray(node) ? node : me.getChildren(node, unfiltered);\n        if (children) {\n            for (let i = 0, len = children.length, child; i < len; i++) {\n                child = children[i];\n                if (!inCollapsedBranch) {\n                    visible.push(child);\n                }\n                all.push(child);\n                me.collectDescendants(child, visible, all, {\n                    inCollapsedBranch : inCollapsedBranch || !child.isExpanded(me),\n                    unfiltered\n                });\n            }\n        }\n        return { visible, all };\n    }\n    /**\n     * Returns the children of the passed branch node which this store owns. By default, this\n     * is the entire `children` array.\n     *\n     * **If this store {@link Core.data.mixin.StoreChained#property-isChained isChained}**, then\n     * this returns only the subset of children which are filtered into this store by the\n     * {@link Core.data.mixin.StoreChained#config-chainedFilterFn chainedFilterFn}.\n     * @param {Core.data.Model} parent The node to return the children of.\n     * @returns {Core.data.Model[]}\n     * @category Tree\n     */\n    getChildren(parent, unfiltered = false) {\n        const\n            me = this,\n            children = ((unfiltered || me.isChained) && parent.unfilteredChildren) || parent.children;\n        return !children?.length ? emptyArray : (\n            me.isChained\n                // In case of chained store we need to apply chainedFilterFn and sorter\n                ? children.filter(me.chainedFilterFn).sort(me.sorterFn)\n                : children\n        );\n    }\n    /**\n     * Includes or excludes all records beneath parentRecord in storage. Used when expanding or collapsing\n     * nodes.\n     * @private\n     * @param parentRecord Parent record\n     * @param include Include (true) or exclude (false)\n     * @category Tree\n     */\n    internalToggleTreeSubRecords(parentRecord, include) {\n        const\n            me          = this,\n            { storage } = me,\n            index       = storage.indexOf(parentRecord),\n            children    = me.doIncludeExclude(me.getChildren(parentRecord), include);\n        // When expanded a parent node while being filtered, need to update the hidden flag of its children\n        if (me.isFiltered && include && parentRecord.unfilteredChildren) {\n            me.updateChildrenHiddenState(parentRecord);\n        }\n        // If we expanded a node which is yet to load children, the collected children\n        // array will be empty, so do not broadcast any change event.\n        // If we are collapsing a record which isn't visible (because parent is collapsed) we won't get an index,\n        // which is fine since it is already removed from processedRecords\n        if (children.length && index !== false) {\n            // We must not react to change - we fire the events here with a flag\n            // to tell responders that it's due to an expand or collapse.\n            storage.suspendEvents();\n            if (include) {\n                storage.splice(index + 1, 0, ...children);\n                const event = { action : 'add', isExpand : true, records : children, index : index + 1 };\n                me.trigger('add', event);\n                me.trigger('change', event);\n            }\n            else {\n                storage.splice(index + 1, children.length);\n                const event = { action : 'remove', isCollapse : true, records : children, index : index + 1 };\n                me.trigger('remove', event);\n                me.trigger('change', event);\n            }\n            storage.resumeEvents();\n            me._idMap = null;\n        }\n    }\n    // Updates the hidden flag of its children while store is filtered\n    updateChildrenHiddenState(parentRecord) {\n        parentRecord.unfilteredChildren?.forEach(child => {\n            child.instanceMeta(this.id).hidden = false;\n            if (!child.isLeaf) {\n                this.updateChildrenHiddenState(child);\n            }\n        });\n    }\n    doIncludeExclude(children, include, result = []) {\n        const\n            me         = this,\n            childCount = children?.length || 0;\n        for (let i = 0; i < childCount; i++) {\n            const child = children[i];\n            // Only consider child nodes who we own.\n            // If we are a chained store, skip nodes that are not ours.\n            if (!me.isChained || me.chainedFilterFn(child)) {\n                const mapMeta = child.instanceMeta(me.id);\n                if (include || !mapMeta.hidden) {\n                    // if including sub-records, add those who are not hidden by a collapsed sub parent\n                    result.push(child);\n                }\n                mapMeta.hidden = !include;\n                if (child.isExpanded(me)) {\n                    me.doIncludeExclude(me.getChildren(child), include, result);\n                }\n            }\n        }\n        return result;\n    }\n    /**\n     * Collapse an expanded record or expand a collapsed. Optionally forcing a certain state.\n     * @param {String|Number|Core.data.Model} idOrRecord Record (the record itself) or id of a record to toggle\n     * @param {Boolean} [collapse] Force collapse (true) or expand (false)\n     * @category Tree\n     */\n    async toggleCollapse(idOrRecord, collapse) {\n        const\n            me                 = this,\n            record             = me.getById(idOrRecord),\n            meta               = record.instanceMeta(me);\n        if (collapse === undefined) {\n            collapse = !meta.collapsed;\n        }\n        // Reject if we're in the middle of loading children, or it's a leaf, or it's a no-op\n        if (!meta.isLoadingChildren && !record.isLeaf && record.isExpanded(me) === collapse) {\n            me.trigger('beforeToggleNode', { record, collapse });\n            meta.collapsed = collapse;\n            if (meta.collapsed) {\n                me.onNodeCollapse(record);\n                return true;\n            }\n            else {\n                me.onNodeExpand(record);\n                let success = true;\n                // Children not yet loaded, ask store for them.\n                // It will append them. Appending to a node which\n                // is expanded will insert the children into the UI.\n                if (!record.isLoaded) {\n                    meta.isLoadingChildren = true;\n                    try {\n                        await me.loadChildren(record);\n                    }\n                    catch (exception) {\n                        // Revert to being collapsed\n                        meta.collapsed = true;\n                        success = false;\n                        me.trigger('loadChildrenException', { record, exception });\n                    }\n                    finally {\n                        meta.isLoadingChildren = false;\n                    }\n                }\n                return success;\n            }\n        }\n    }\n    /**\n     * Remove all records beneath parentRecord from storage.\n     * @private\n     * @param parentRecord Parent record\n     * @category Tree\n     */\n    onNodeCollapse(parentRecord) {\n        // We don't care about collapse if it's inside a collapsed subtree\n        if (parentRecord.ancestorsExpanded(this)) {\n            return this.internalToggleTreeSubRecords(parentRecord, false);\n        }\n    }\n    /**\n     * Add all records beneath parentRecord from storage.\n     * @private\n     * @param parentRecord Parent record\n     * @category Tree\n     */\n    onNodeExpand(parentRecord) {\n        // We don't care about expand if it's inside a collapsed subtree\n        if (parentRecord.ancestorsExpanded(this)) {\n            return this.internalToggleTreeSubRecords(parentRecord, true);\n        }\n    }\n    //endregion\n    //region Transform flat data\n    /**\n     * Transforms flat data containing parent ids into tree data\n     * @param {Object[]} data Flat raw data\n     * @returns {Object[]} Tree data\n     * @private\n     */\n    transformToTree(data) {\n        const\n            { parentIdField, idField, childrenField } = this.modelClass,\n            parents                                   = new Map(),\n            transformed                               = [];\n        for (const node of data) {\n            const parentId = node[parentIdField];\n            // Child, find parent\n            if (parentId != null) {\n                // Detected parents are kept in a map to no have to iterate to find them each time\n                let parent = parents.get(parentId);\n                // Parent not in map, find it and add it (also adds unmatched parents, to not search for\n                // them again)\n                if (parent === undefined) {\n                    parent = data.find(node => node[idField] === parentId) ?? null;\n                    parents.set(parentId, parent);\n                }\n                // Parent found, add node as child of it\n                if (parent) {\n                    if (!parent[childrenField]) {\n                        parent[childrenField] = [];\n                    }\n                    parent[childrenField].push(node);\n                }\n            }\n            // Parent, keep\n            else {\n                transformed.push(node);\n            }\n        }\n        return transformed;\n    }\n    /**\n     * Transforms data into a tree with parent levels based on supplied fields.\n     *\n     * ```javascript\n     * const newRoot = store.treeify(['name', r => r.age % 10]);\n     * ```\n     *\n     * @param {Array<String|Function>} fields The field names, or a function to call to extract a value to create parent\n     * nodes for records with the same value.\n     * @param {Function} [parentTransform] A function which is called to allow the caller to transform the raw data\n     * object of any newly created parent nodes.\n     * @param {Boolean} [convertParents] Pass `true` to convert raw new parent data objects to this Store's\n     * {@link Core.data.Store#config-modelClass}.\n     * @returns {Core.data.Model} New root node\n     * @internal\n     */\n    treeify(fields, parentTransform, convertParents = false) {\n        const\n            { length } = fields,\n            parents    = [],\n            newRoot    = {};\n        let i, lastParent;\n        // New branch nodes are ID'd by their field values concatenated into\n        // string form.\n        //\n        // The key value that was used to create them is their \"key\" property.\n        //\n        // rootNode : {\n        //    children : [{\n        //        id       : 'p1',\n        //        name     : 'Parent 1',\n        //        expanded : true,\n        //        children : [\n        //            { id : 700, name : 'Task 700', startDate : '2021-11-26', duration : 3, percentDone : 20 },\n        //            { id : 500, name : 'Task 500', startDate : '2021-11-22', duration : 5, percentDone : 20 },\n        //            { id : 300, name : 'Task 300', startDate : '2021-11-24', duration : 3, percentDone : 10 },\n        //            { id : 100, name : 'Task 100', startDate : '2021-11-22', duration : 5, percentDone : 10 }\n        //       ]\n        //    },\n        //    {\n        //        id       : 'p2',\n        //        name     : 'Parent 2',\n        //        expanded : true,\n        //        children : [\n        //            { id : 600, name : 'Task 600', startDate : '2021-11-22', duration : 6, percentDone : 20 },\n        //            { id : 800, name : 'Task 800', startDate : '2021-11-26', duration : 2, percentDone : 20 },\n        //            { id : 400, name : 'Task 400', startDate : '2021-11-24', duration : 2, percentDone : 10 },\n        //            { id : 200, name : 'Task 200', startDate : '2021-11-22', duration : 6, percentDone : 10 }\n        //        ]\n        //    }]\n        // }\n        //\n        // Becomes the following. Note that all records are sorted into ascending\n        // order of their field values:\n        //\n        // rootNode : {\n        //    children : [{\n        //        id       : '10',\n        //        key      : 10,\n        //        expanded : true,\n        //        children : [\n        //            {\n        //                id       : '10Mon Nov 22 2021 00:00:00 GMT+0100 (Central European Standard Time)',\n        //                key      : new Date(2021, 10, 22),\n        //                expanded : true,\n        //                children : [\n        //                    { id : 100, name : 'Task 100', startDate : '2021-11-22', duration : 5, percentDone : 10 },\n        //                    { id : 200, name : 'Task 200', startDate : '2021-11-22', duration : 6, percentDone : 10 }\n        //                ]\n        //            },\n        //            {\n        //                id       : '10Wed Nov 24 2021 00:00:00 GMT+0100 (Central European Standard Time)',\n        //                key      : new Date(2021, 10, 24),\n        //                expanded : true,\n        //                children : [\n        //                    { id : 300, name : 'Task 300', startDate : '2021-11-24', duration : 3, percentDone : 10 },\n        //                    { id : 400, name : 'Task 400', startDate : '2021-11-24', duration : 2, percentDone : 10 }\n        //                ]\n        //            }\n        //        ]\n        //    },\n        //    {\n        //        id       : '20',\n        //        key      : 20,\n        //        expanded : true,\n        //        children : [\n        //            {\n        //                id       : '20Mon Nov 22 2021 00:00:00 GMT+0100 (Central European Standard Time)',\n        //                key      : new Date(2021, 10, 22),\n        //                expanded : true,\n        //                children : [\n        //                    { id : 500, name : 'Task 500', startDate : '2021-11-22', duration : 5, percentDone : 20 },\n        //                    { id : 600, name : 'Task 600', startDate : '2021-11-22', duration : 6, percentDone : 20 }\n        //                ]\n        //            },\n        //            {\n        //                id       : '20Fri Nov 26 2021 00:00:00 GMT+0100 (Central European Standard Time)',\n        //                key      : new Date(2021, 10, 26),\n        //                expanded : true,\n        //                children : [\n        //                    { id : 700, name : 'Task 700', startDate : '2021-11-26', duration : 3, percentDone : 20 },\n        //                    { id : 800, name : 'Task 800', startDate : '2021-11-26', duration : 2, percentDone : 20 }\n        //                ]\n        //            }\n        //        ]\n        //    }]\n        // }\n        //\n        // Convert field definitions to a function which extracts the field]\n        // for a simpler field value extraction.\n        for (i = 0; i < length; i++) {\n            if (!fields[i].call) {\n                const field = fields[i];\n                fields[i] = n => n[field];\n            }\n            parents[i] = new Map();\n        }\n        this.rootNode.traverse(n => {\n            lastParent = null;\n            if (n.isLeaf) {\n                for (i = 0; i < length; i++) {\n                    const\n                        lastParentPath = lastParent?.path || '',\n                        nodeMap        = parents[i],\n                        key            = fields[i](n),\n                        path           = `${lastParentPath + key}/`,\n                        id             = StringHelper.makeValidDomId(`generated_${path}`, '_'),\n                        parent         = nodeMap.get(id) || (nodeMap.set(id, {\n                            id,\n                            key,\n                            path,\n                            expanded        : true,\n                            readOnly        : true,\n                            children        : [],\n                            generatedParent : true\n                        })).get(id);\n                    if (lastParent && !lastParent.children.includes(parent)) {\n                        lastParent.children.push(parent);\n                    }\n                    lastParent = parent;\n                }\n                lastParent.children.push(n);\n            }\n        }, true);\n        // Call the optional transformer, and if we are configured to do so,\n        // convert the new branches into TreeNodes.\n        parents.forEach(p => p.forEach((p, id, map) => {\n            parentTransform?.(p);\n            if (convertParents) {\n                p = this.createRecord(p);\n                map.set(id, p);\n            }\n        }));\n        newRoot.children = [...parents[0].values()];\n        // Cascade a sort down so that all \"groups\" are in order.\n        const sort = (n) => {\n            if (n.children) {\n                n.children.sort((lhs, rhs) => {\n                    // If it's a leaf, sort by comparing all \"fields\"\n                    if (lhs.isLeaf) {\n                        let result;\n                        for (let i = 0; !result && i < length; i++) {\n                            const\n                                lv = fields[i](lhs),\n                                rv = fields[i](rhs);\n                            result = lv < rv ? -1 : rv > lv ? 1 : 0;\n                        }\n                        return result;\n                    }\n                    // Sort branch nodes by their key values\n                    else {\n                        // Sort numbers in strings nicely\n                        if (typeof lhs.key === 'string' || typeof rhs.key === 'string') {\n                            return lhs.key.localeCompare(rhs.key, undefined, { numeric : true });\n                        }\n                        return lhs.key < rhs.key ? -1 : lhs.key > rhs.key ? 1 : 0;\n                    }\n                });\n                n.children.forEach(sort);\n            }\n        };\n        sort(newRoot);\n        return newRoot;\n    }\n    //endregion\n    treeifyFlatData(data) {\n        const { childrenField, parentIdField } = this.modelClass;\n        let hasParentId     = false,\n            shouldTransform = true;\n        // Configured to transform flat data into tree data, make sure that we have:\n        // - raw data without children defined\n        // - parentIds\n        for (const node of data) {\n            if (node.isModel || Array.isArray(node[childrenField])) {\n                shouldTransform = false;\n                break;\n            }\n            if (node[parentIdField] != null) {\n                hasParentId = true;\n            }\n        }\n        if (shouldTransform && hasParentId) {\n            data = this.transformToTree(data);\n        }\n        return data;\n    }\n    /**\n     * Increase the indentation level of one or more nodes in the tree\n     * @param {Core.data.Model|Core.data.Model[]} nodes The nodes to indent.\n     * @fires indent\n     * @fires change\n     */\n    async indent(nodes) {\n        const me = this;\n        nodes = Array.isArray(nodes) ? nodes : [nodes];\n        // 2. Filtering out all nodes which parents are also to be indented as well as the ones having no previous\n        //    sibling since such nodes can't be indented\n        nodes = nodes.filter(node => {\n            let result = Boolean(node.previousSibling);\n            while (result && !node.isRoot) {\n                result = !nodes.includes(node.parent);\n                node   = node.parent;\n            }\n            return result;\n        });\n        /**\n         * Fired before nodes in the tree are indented. Return `false` from a listener to prevent the indent.\n         * @event beforeIndent\n         * @preventable\n         * @param {Core.data.Store} source The store\n         * @param {Core.data.Model|Core.data.Model[]} nodes The nodes to indent.\n         */\n        if (nodes.length && me.trigger('beforeIndent', { records : nodes }) !== false) {\n            // 3. Sorting nodes into tree walk order\n            nodes.sort((lhs, rhs) => Wbs.compare(lhs.wbsCode, rhs.wbsCode));\n            // No events should go to the UI until we have finished the operation successfully\n            me.beginBatch();\n            // Ask the project to try the indent operation\n            for (const node of nodes) {\n                const newParent = node.previousSibling;\n                newParent.appendChild(node);\n                me.toggleCollapse(newParent, false);\n            }\n            // Now show the successful result\n            me.endBatch();\n            /**\n             * Fired after tasks in the tree are indented\n             * @event indent\n             * @param {Core.data.Store} source The store\n             * @param {Core.data.Model[]} records Nodes that were indented\n             */\n            me.trigger('indent', { records : nodes });\n            me.trigger('change', {\n                action  : 'indent',\n                records : nodes\n            });\n        }\n    }\n    /**\n     * Decrease the indentation level of one or more nodes in the tree\n     * @param {Core.data.Model|Core.data.Model[]} nodes The nodes to outdent.\n     * @fires outdent\n     * @fires change\n     */\n    async outdent(nodes) {\n        const me = this;\n        nodes = Array.isArray(nodes) ? nodes : [nodes];\n        // 2. Filtering out all nodes which parents are also to be outdented as well as the ones having no previous sibling\n        //    since such nodes can't be indented\n        nodes = nodes.filter(node => {\n            const { parent } = node;\n            let result       = parent && !parent.isRoot;\n            while (result && !node.isRoot) {\n                result = !nodes.includes(parent);\n                node   = node.parent;\n            }\n            return result;\n        });\n        /**\n         * Fired before nodes in the tree are outdented. Return `false` from a listener to prevent the outdent.\n         * @event beforeOutdent\n         * @preventable\n         * @param {Core.data.Store} source This store\n         * @param {Core.data.Model[]} records Nodes to be outdented\n         */\n        if (nodes.length && me.trigger('beforeOutdent', { records : nodes }) !== false) {\n            // 3. Sorting nodes into reverse tree walk order\n            nodes.sort((lhs, rhs) => Wbs.compare(lhs.wbsCode, rhs.wbsCode));\n            // No events should go to the UI until we have finished the operation successfully\n            me.beginBatch();\n            for (const node of nodes) {\n                const\n                    { parent }  = node,\n                    newChildren = parent.children.slice(parent.children.indexOf(node) + 1);\n                parent.parent.insertChild(node, parent.nextSibling);\n                node.appendChild(newChildren);\n                me.toggleCollapse(node, false);\n            }\n            me.endBatch();\n            /**\n             * Fired after tasks in the tree are outdented\n             * @event outdent\n             * @param {Core.data.Store} source The store\n             * @param {Core.data.Model[]} records Nodes that were outdented\n             */\n            me.trigger('outdent', { records : nodes });\n            me.trigger('change', {\n                action  : 'outdent',\n                records : nodes\n            });\n        }\n    }\n};\n", "/**\n * @module Core/helper/WalkHelper\n */\n/**\n * Tree walking helper\n * @internal\n */\nexport default class WalkHelper {\n    /**\n     * Pre-walks any hierarchical data structure\n     *\n     * @param {Object} data Walking starting point\n     * @param {Function} childrenFn Function to return `data` children entries in an array\n     *                   or null if no children exists for the entry\n     * @param {Function} fn Function to call on each entry\n     */\n    static preWalk(data, childrenFn, fn) {\n        const walkStack = [data];\n        let node, children;\n        while (walkStack.length) {\n            node = walkStack.pop();\n            fn(node);\n            children = childrenFn(node);\n            if (children) {\n                walkStack.push.apply(walkStack, children.slice().reverse());\n            }\n        }\n    }\n    /**\n     * Pre-walks any hierarchical data structure, passing along a link to the parent node\n     *\n     * @param {Object} data Walking starting point\n     * @param {Function} childrenFn Function to return `data` children entries in an array\n     *                   or null if no children exists for the entry\n     * @param {Function} fn Function to call on each entry, called with `parent` and `node`\n     */\n    static preWalkWithParent(data, childrenFn, fn) {\n        const walkStack = [{ node : data, parent : null }];\n        while (walkStack.length) {\n            const { parent, node } = walkStack.pop();\n            fn(parent, node);\n            const children = childrenFn(node);\n            if (Array.isArray(children)) {\n                walkStack.push(...children.slice().reverse().map(child => ({ node : child, parent : node })));\n            }\n        }\n    }\n    /**\n     * Pre-walk unordered.\n     *\n     * Like {@link #function-preWalk-static} but doesn't reverse children before walk,\n     * thus children will be walked last child first - first child last\n     *\n     * @param {Object} data Walking starting point\n     * @param {Function} childrenFn Function to return `data` children entries in an array\n     *                   or null if no children exists for the entry\n     * @param {Function} fn Function to call on each entry\n     */\n    static preWalkUnordered(data, childrenFn, fn) {\n        const walkStack = [data];\n        let node, children;\n        while (walkStack.length) {\n            node = walkStack[walkStack.length - 1];\n            fn(node);\n            children = childrenFn(node);\n            if (children) {\n                walkStack.splice(walkStack.length - 1, 1, ...children);\n            }\n            else {\n                walkStack.length = walkStack.length - 1;\n            }\n        }\n    }\n    /**\n     * Post-walks any hierarchical data structure\n     *\n     * @param {Object} data Walking starting point\n     * @param {Function} childrenFn Function to return `data` children entries in an array\n     *                   or null if no children exists for the entry\n     * @param {Function} fn Function to call on each entry\n     */\n    static postWalk(data, childrenFn, fn) {\n        const\n            visited = new Map(),\n            walkStack = [data];\n        let node, children;\n        while (walkStack.length) {\n            node = walkStack[walkStack.length - 1];\n            if (visited.has(node)) {\n                fn(node);\n                walkStack.pop();\n            }\n            else {\n                children = childrenFn(node);\n                if (children) {\n                    walkStack.push(...children.slice().reverse());\n                }\n                visited.set(node, node);\n            }\n        }\n    }\n    /**\n     * Pre-/Post-walks any hierarchical data structure calling inFn each node when it walks in,\n     * and outFn when it walks out.\n     *\n     * @param {Object} data Walking starting point\n     * @param {Function} childrenFn Function to return `data` children entries in an array\n     *                   or null if no children exists for the entry\n     * @param {Function} inFn  Function to call on each entry upon enter\n     * @param {Function} outFn Function to call on each entry upon exit\n     */\n    static prePostWalk(data, childrenFn, inFn, outFn) {\n        const\n            visited = new Map(),\n            walkStack = [data];\n        let node, children;\n        while (walkStack.length) {\n            node = walkStack[walkStack.length - 1];\n            if (visited.has(node)) {\n                outFn(node);\n                walkStack.pop();\n            }\n            else {\n                inFn(node);\n                children = childrenFn(node);\n                if (children) {\n                    walkStack.push(...children.slice().reverse());\n                }\n                visited.set(node, node);\n            }\n        }\n    }\n}\nWalkHelper._$name = 'WalkHelper';", "import Base from '../../Base.js';\nimport WalkHelper from '../../helper/WalkHelper.js';\n/**\n * @module Core/data/mixin/StoreSync\n */\n/**\n * Options available when supplying a config object to the `syncDataOnLoad` config.\n * @typedef {Object} SyncDataOnLoadOptions\n * @property {Boolean} [keepMissingValues] How to handle values for missing fields, see\n * {@link Core/data/Store#config-syncDataOnLoad}\n * @property {String|Number} [threshold] Threshold above which events are batched, see\n * {@link Core/data/Store#config-syncDataOnLoad}\n */\n/**\n * Mixin that allows Store to sync a new dataset with its existing records, instead of fully replacing everything.\n * Configure Store with `syncDataOnLoad: true` to activate the functionality. Sync is performed when a new dataset\n * is loaded, either by directly assigning it to `store.data` or by loading it using Ajax (if using an AjaxStore).\n *\n * ```javascript\n * const store = new Store({\n *   syncDataOnLoad : true,\n *   data           : [\n *     { id : 1, name : 'Saitama' },\n *     { id : 2, name : 'Genos' },\n *     { id : 3, name : 'Mumen Rider' }\n *   ]\n * });\n *\n * // Sync a new dataset by assigning to data:\n * store.data = [\n *   { id : 1, name : 'Caped Baldy' },\n *   { id : 4, name : 'Horse-Bone' }\n * ];\n *\n *  // Result : Record 1 updated, record 2 & 3 removed, record 4 added\n * ```\n *\n * For more details, please see {@link #config-syncDataOnLoad}.\n *\n * @mixin\n */\nexport default Target => class StoreSync extends (Target || Base) {\n    static get $name() {\n        return 'StoreSync';\n    }\n    static get configurable() {\n        return {\n            /**\n             * Configure with `true` to sync loaded data instead of replacing existing with a new dataset.\n             *\n             * By default (or when configured with `false`) assigning to `store.data` replaces the entire dataset\n             * with a new one, creating all new records:\n             *\n             * ```javascript\n             * store.data = [ { id : 1, name : 'Saitama' } ];\n             *\n             * const first = store.first;\n             *\n             * store.data = [ { id : 1, name : 'One-Punch man' } ];\n             *\n             * // store.first !== first;\n             * ```\n             *\n             * When configured with `true` the new dataset is instead synced against the old, figuring out what was\n             * added, removed and updated:\n             *\n             * ```javascript\n             * store.data = [ { id : 1, name : 'Saitama' } ];\n             *\n             * const first = store.first;\n             *\n             * store.data = [ { id : 1, name : 'One-Punch man' } ];\n             *\n             * // store.first === first;\n             * ```\n             *\n             * After the sync, any configured sorters, groupers and filters will be reapplied.\n             *\n             * #### Threshold\n             *\n             * The sync operation has a configurable threshold, above which the operation will be treated as a\n             * batch/refresh and only trigger a single `refresh` event. If threshold is not reached, individual events\n             * will be triggered (single `add`, `remove` and possible multiple `update`). To enable the threshold,\n             * supply a config object with a `threshold` property instead of `true`:\n             *\n             * ```javascript\n             * const store = new Store({\n             *     syncDataOnLoad : {\n             *         threshold : '20%'\n             *     }\n             * });\n             * ```\n             *\n             * `threshold` accepts numbers or strings. A numeric threshold means number of affected records, while a\n             * string is used as a percentage of the whole dataset (appending `%` is optional). By default no threshold\n             * is used.\n             *\n             * #### Missing fields\n             *\n             * The value of any field not supplied in the new dataset is by default kept as is (if record is not removed\n             * by the sync). This behaviour is configurable, by setting `keepMissingValues : false` in a config object\n             * it will reset any unspecified field back to their default values:\n             *\n             * ```javascript\n             * const store = new Store({\n             *     syncDataOnLoad : {\n             *         keepMissingValues : false\n             *     }\n             * });\n             * ```\n             *\n             * Considering the following sync operation:\n             *\n             * ```javascript\n             * // Existing data\n             * { id : 1, name : 'Saitama', powerLevel : 100 }\n             * // Sync data\n             * { id : 1, name : 'One-Punch Man' }\n             * ```\n             *\n             * The result would by default (or when explicitly configured with `true`)  be:\n             *\n             * ```javascript\n             * { id : 1, name : 'One-Punch Man', powerLevel : 100 }\n             * ```\n             *\n             * If configured with `keepMissingValues : false` it would instead be:\n             *\n             * ```javascript\n             * { id : 1, name : 'One-Punch Man' }\n             * ```\n             *\n             * <div class=\"note\">Never enable `syncDataOnLoad` on a chained store, it will create an infinite loop when\n             * it is populated from the main store (the main store can use the setting)</div>\n             *\n             * @config {Boolean|SyncDataOnLoadOptions} syncDataOnLoad\n             * @default false\n             * @category Common\n             */\n            syncDataOnLoad : null,\n            shouldSyncDataset : null,\n            shouldSyncRecord  : null\n        };\n    }\n    /**\n     * Syncs a new dataset against the already loaded one, only applying changes.\n     * Not intended to be called directly, please configure store with `syncDataOnLoad: true` and assign to\n     * `store.data` as usual instead.\n     *\n     * ```\n     * const store = new Store({\n     *    syncDataOnLoad : true,\n     *    data : [\n     *        // initial data\n     *    ]\n     * });\n     *\n     * store.data = [ // new data ]; //  Difference between initial data and new data will be applied\n     * ```\n     *\n     * @param {Object[]|Core.data.Model[]} data New dataset, an array of records or data objects\n     * @private\n     */\n    syncDataset(data) {\n        const\n            me          = this,\n            { storage } = me,\n            // Allow app to determine if sync should be performed, and/or for which records. It might have better\n            // knowledge of the data to make a cheaper decision\n            idsToCheck  = me.shouldSyncDataset?.({ data });\n        if (idsToCheck === false) {\n            return;\n        }\n        me.isSyncingDataOnLoad = true;\n        const { toAdd, toRemove, toMove, updated, ids } = me.tree ? me.syncTreeDataset(data, idsToCheck) : me.syncFlatDataset(data, idsToCheck);\n        let { threshold } = me.syncDataOnLoad,\n            surpassed = false;\n        // Check if threshold is surpassed\n        if (threshold) {\n            // Any string is treated as a percentage\n            if (typeof threshold === 'string') {\n                threshold = parseInt(threshold, 10) / 100 * me.count;\n            }\n            surpassed = toAdd.length + toRemove.length + toMove.length + updated.length > threshold;\n        }\n        if (me.tree) {\n            // Flat data is spliced into/out of the collection, but in a tree it has to be added/removed from store\n            // to end up on correct parents\n            if (toAdd.length) {\n                // Add all new nodes in one go, will be added to correct parent using `parentId`. Triggering multiple times\n                const added = me.add(toAdd, surpassed);\n                // parentId was tucked on in syncTreeDataset() to allow the single flat add above, clean it out\n                added.forEach(node => node.clearParentId());\n            }\n            if (toMove.length) {\n                for (const { parent, node, index } of toMove) {\n                    const newParent = me.getById(parent.id);\n                    newParent.insertChild(node, index);\n                }\n            }\n            // Remove in one go, removing from each parent. Triggering multiple times\n            me.remove(toRemove, surpassed);\n        }\n        else {\n            if (surpassed) {\n                me.suspendEvents();\n            }\n            // Add and remove, will trigger if below threshold/no threshold\n            // We cannot simply splice into our Collection because of the extra\n            // processing various Store mixins do in add and remove implementations\n            me.remove(toRemove);\n            me.add(toAdd);\n            if (surpassed) {\n                me.resumeEvents();\n            }\n        }\n        // Trigger updates if using threshold, but have not surpassed it. If threshold is not used, the updates\n        // are triggered when data is set (avoiding another iteration)\n        if (threshold && !surpassed) {\n            updated.forEach(({ record, toSet, wasSet }) => me.onModelChange(record, toSet, wasSet));\n        }\n        // Clear change-tracking\n        me.acceptChanges();\n        const event = { added : toAdd, removed : toRemove, updated, thresholdSurpassed : surpassed };\n        if (me.isFiltered && !me.remoteFilter) {\n            // Apply filtering to the next dataset if filtering is local\n            me.filter({\n                silent : me.isRemoteDataLoading\n            });\n        }\n        if (me.isGrouped) {\n            // Announced group\n            me.group(null, null, false, true, me.isRemoteDataLoading);\n        }\n        else if (me.isSorted) {\n            // If we updated records in-place, the order may not match what we sent to\n            // the server, so silently sort the collection according to our sorters.\n            if (me.remoteSort) {\n                storage.replaceValues({\n                    values : storage.values.sort(me.createSorterFn(me.sorters)),\n                    silent : true\n                });\n            }\n            // If we are sorting locally, just do a normal sort\n            else {\n                me.sort();\n            }\n        }\n        // Neither grouped nor sorted, match order in incoming data\n        else if (!me.tree) {\n            // Only bother if data isn't already in order (to avoid unnecessary re-rendering)\n            if (storage.values.some((record, index) => record.id !== ids[index])) {\n                storage.replaceValues({\n                    values : storage.values.sort((a, b) => ids.indexOf(a.id) - ids.indexOf(b.id)),\n                    silent : true\n                });\n                // Announce the sort, unless we will refresh below\n                !surpassed && me.afterPerformSort();\n            }\n        }\n        // Ditto, but not flat data\n        else {\n            let unsorted = false,\n                i = 0;\n            WalkHelper.preWalk(\n                me.rootNode,\n                n => Array.isArray(n.children) && !unsorted ? n.children : null,\n                node => {\n                    if (node.id !== ids[i++]) {\n                        unsorted = true;\n                    }\n                }\n            );\n            // Only bother if data isn't already in order (to avoid unnecessary re-rendering)\n            if (unsorted) {\n                me.sort((a, b) => ids.indexOf(a.id) - ids.indexOf(b.id), undefined, undefined, true);\n                me.clearSorters(true);\n                // Announce the sort, unless we will refresh below\n                !surpassed && me.afterPerformSort();\n            }\n        }\n        // Trigger `batch` if threshold is surpassed, more similar to a batch than a full `dataset`\n        if (surpassed) {\n            me.trigger('refresh', {\n                action   : 'batch',\n                data,\n                records  : storage.values,\n                syncInfo : event\n            });\n        }\n        me.isSyncingDataOnLoad = false;\n        me.trigger('loadSync', event);\n    }\n    // Used by syncDataset()\n    syncFlatDataset(data, idsToCheck) {\n        if (!data) {\n            return {\n                toRemove : this.records\n            };\n        }\n        const\n            me                     = this,\n            { idField, allFields } = me.modelClass,\n            toRemove               = [],\n            toAdd                  = [],\n            updated                = [],\n            usedIds                = {},\n            ids                    = [],\n            limitedSet             = Array.isArray(idsToCheck);\n        const { threshold, keepMissingValues } = me.syncDataOnLoad;\n        let hitCount = 0;\n        data.forEach(rawData => {\n            rawData = rawData.isModel ? rawData.data : rawData;\n            const\n                id     = rawData[idField],\n                record = me.getById(id);\n            // Only bother checking for changes if not passed a specific set of ids to check, or if the id is in the set\n            if (!limitedSet || idsToCheck.includes(id)) {\n                // Record exists, might be an update\n                if (record) {\n                    // Allow app to determine if sync should be performed, it might have better knowledge of the data to\n                    // make a cheaper decision\n                    if (me.shouldSyncRecord?.({ record, data : rawData }) !== false) {\n                        // Apply default value for any missing fields if configured to do so\n                        if (keepMissingValues === false) {\n                            for (const field of allFields) {\n                                if (!(field.dataSource in rawData) && (field.dataSource in record.data)) {\n                                    rawData[field.dataSource] = field.defaultValue;\n                                }\n                            }\n                        }\n                        // Update silently if using threshold, otherwise trigger away\n                        const wasSet = record.set(rawData, null, Boolean(threshold));\n                        if (wasSet) {\n                            updated.push({\n                                record,\n                                wasSet,\n                                toSet : rawData\n                            });\n                        }\n                    }\n                }\n                // Does not exist, add\n                else {\n                    toAdd.push(me.processRecord(me.createRecord(rawData)));\n                }\n            }\n            if (record) {\n                hitCount++;\n            }\n            usedIds[id] = 1;\n            ids.push(id);\n        });\n        // Check removals, unless all records were visited above\n        if (hitCount < me.storage.totalCount) {\n            // If given a set of ids that should be checked, limit removals to those. Any id not represented in the new\n            // dataset will be removed\n            if (idsToCheck) {\n                for (const id of idsToCheck) {\n                    if (!usedIds[id]) {\n                        toRemove.push(me.getById(id));\n                    }\n                }\n            }\n            // Otherwise, check all records\n            else {\n                me.forEach(record => {\n                    if (!usedIds[record.id]) {\n                        toRemove.push(record);\n                    }\n                });\n            }\n        }\n        return { toAdd, toRemove, toMove : [], updated, ids };\n    }\n    // Used by syncDataset()\n    syncTreeDataset(data) {\n        if (!data) {\n            return {\n                toRemove : this.records\n            };\n        }\n        const\n            me           = this,\n            {\n                idField,\n                parentIdField,\n                childrenField,\n                allFields\n            }            = me.modelClass,\n            {\n                keepMissingValues,\n                threshold\n            }            = me.syncDataOnLoad,\n            toRemove     = [],\n            toAdd        = [],\n            toMove       = [],\n            updated      = [],\n            matchedNodes = new Set(),\n            ids          = [];\n        if (me.transformFlatData) {\n            data = me.treeifyFlatData(data);\n        }\n        WalkHelper.preWalkWithParent({ isRoot : true, id : me.rootNode.id, children : data }, n => n.children, (parent, rawData) => {\n            if (parent) {\n                const { id, node } = me.resolveSyncNode(rawData);\n                // Record exists, might be an update\n                if (node) {\n                    // Allow app to determine if sync should be performed, it might have better knowledge of the data to\n                    // make a cheaper decision\n                    if (me.shouldSyncRecord?.({ record : node, data : rawData }) !== false) {\n                        let childrenUpdated;\n                        const oldChildrenValue = node.children;\n                        // Edge case: Check for conversion from normal parent to lazy loaded\n                        if (oldChildrenValue !== true && rawData[childrenField] === true) {\n                            node.clearChildren();\n                            node.data[childrenField] = node.children = true;\n                            delete rawData[childrenField];\n                            me.toggleCollapse(node, true);\n                            childrenUpdated = true;\n                        }\n                        // Changed parent?\n                        if (node.parent.id !== parent[idField]) {\n                            toMove.push({\n                                node,\n                                parent,\n                                index : parent[childrenField].indexOf(rawData)\n                            });\n                        }\n                        // parentIdField has no default value to not pollute flat data,\n                        // assign to root here if no value specified\n                        // else if (parent.isRoot && !(parentIdField in rawData)) {\n                        //     rawData[parentIdField] = null;\n                        // }\n                        // Apply default value for any missing fields if configured to do so\n                        if (keepMissingValues === false) {\n                            for (const field of allFields) {\n                                // Ignore parentId, handled above since it has no default\n                                if (field.name !== 'parentId' && !(field.dataSource in rawData) && (field.dataSource in node.data)) {\n                                    rawData[field.dataSource] = field.defaultValue;\n                                }\n                            }\n                        }\n                        // Update silently if using threshold, otherwise trigger away\n                        const wasSet = node.set(rawData, null, Boolean(threshold));\n                        if (wasSet) {\n                            updated.push({\n                                record : node,\n                                wasSet,\n                                toSet  : rawData\n                            });\n                        }\n                        else if (childrenUpdated) {\n                            node.signalNodeChanged({\n                                [childrenField] : {\n                                    value    : true,\n                                    oldValue : oldChildrenValue\n                                }\n                            });\n                        }\n                    }\n                }\n                // Does not exist, add\n                else {\n                    rawData[parentIdField] = parent[idField];\n                    toAdd.push({ ...rawData, ...(Array.isArray(rawData[childrenField]) ? { children : [] } : undefined) });\n                }\n                matchedNodes.add(node);\n                ids.push(id);\n            }\n        });\n        if (matchedNodes.length !== data.length) {\n            me.traverse(node => {\n                if (!matchedNodes.has(node)) {\n                    toRemove.push(node);\n                }\n            });\n        }\n        return { toAdd, toRemove, toMove, updated, ids };\n    }\n    // ColumnStore overrides this fn to allow syncing by field & type\n    resolveSyncNode(rawData) {\n        const\n            id   = rawData[this.modelClass.idField],\n            node = this.getById(id);\n        return { id, node };\n    }\n};\n", "/**\n * @module Core/data/stm/mixin/StoreStm\n */\nimport Base from '../../../Base.js';\nimport Model from '../../../data/Model.js';\nconst STM_PROP = Symbol('STM_PROP');\n/**\n * Store mixin to make it compatible with {@link Core/data/stm/StateTrackingManager}.\n * @mixin\n */\nexport default Target => class StoreStm extends (Target || Base) {\n    static get $name() {\n        return 'StoreStm';\n    }\n    static get defaultConfig() {\n        return {\n            /**\n             * Reference to STM manager\n             *\n             * @config {Core.data.stm.StateTrackingManager}\n             * @default\n             * @category Advanced\n             */\n            stm : null,\n            /**\n             * Set false, to not record transaction during `applyChangeset` call\n             *\n             * @prp {Boolean}\n             * @default\n             */\n            ignoreRemoteChangesInSTM : false\n        };\n    }\n    get stm() {\n        return this[STM_PROP];\n    }\n    set stm(stm) {\n        const me = this;\n        if (me.stm !== stm) {\n            if (me.stm?.hasStore(me)) {\n                me.stm.removeStore(me);\n            }\n            me[STM_PROP] = stm;\n            if (me.stm && !me.stm.hasStore(me)) {\n                me.stm.addStore(me);\n            }\n        }\n    }\n    // Overridden to notify STM about flat add action\n    add(records, silent = false, options = {}) {\n        let result;\n        const { stm } = this;\n        // Tree adding is routed via rootNode.appendChild() it has it's own\n        // STM override thus if the store is tree we ignore the action\n        if (!this.tree && stm?.enabled) {\n            // Flat adding here only, the only data needed to undo/redo the action\n            // is the list of records added.\n            result = super.add(records, silent);\n            // If adding wasn't vetoed and something has been added then\n            // notifying the STM about the fact.\n            if (result?.length) {\n                stm.onStoreModelAdd(this, result, silent);\n            }\n        }\n        else {\n            result = super.add(records, silent, options);\n        }\n        return result;\n    }\n    // Overridden to notify STM about flat insert action\n    insert(index, records, silent = false) {\n        let result;\n        const { stm } = this;\n        // Tree inserting is routed via rootNode.insertChild() it has it's own\n        // STM override thus if the store is tree we ignore the action\n        if (!this.tree && stm?.enabled) {\n            // Flat inserting here only, the only data needed to undo/redo the action is:\n            // - the list of record inserted\n            // - index they are inserted at\n            // - index they have been at if they are part of this store already and are moved\n            // Here we are getting indices of records which are in this store already\n            // not all records might be from this store, some might be new or from another store\n            const context = (Array.isArray(records) ? records : [records]).reduce(\n                (context, r) => {\n                    const index = r instanceof Model ? this.indexOf(r) : undefined;\n                    if (index !== undefined && index !== -1) {\n                        context.set(r, index);\n                    }\n                    return context;\n                },\n                new Map()\n            );\n            // Result here is the array of Models inserted or undefined,\n            // and it might be different from `records` we received as argument.\n            result = super.insert(index, records);\n            // Here we check if anything has been actually inserted.\n            // The insertion action might be vetoed by event handler or something\n            if (result?.length) {\n                // We can't rely on `index` we've got as argument since `result` might\n                // differ from records.\n                index = this.indexOf(result[0]);\n                // Notifying STM manager about the insertion action providing all\n                // the required data to undo/redo.\n                stm.onStoreModelInsert(this, index, result, context, silent);\n            }\n        }\n        else {\n            result = super.insert(index, records, silent);\n        }\n        return result;\n    }\n    // Overridden to notify STM about flat removing action\n    remove(recordsOrIds, silent = false, fromRemoveChild) {\n        let result;\n        const { stm } = this;\n        // Tree removing is routed via rootNode.removeChild() it has it's own\n        // STM override thus if the store is tree we ignore the action\n        if (!this.tree && stm?.enabled) {\n            // Flat removing here only, the only date needed to undo/redo the actions is:\n            // - the list of records removed\n            // - their original index to re-insert them back correctly\n            const recordsOrIdsNormalized = (Array.isArray(recordsOrIds) ? recordsOrIds : [recordsOrIds]).map(r => this.getById(r)).filter(r => !!r);\n            const context = recordsOrIdsNormalized.reduce(\n                (context, r) => {\n                    const index = this.indexOf(r);\n                    if (index !== undefined && index !== -1) {\n                        context.set(r, index);\n                    }\n                    return context;\n                },\n                new Map()\n            );\n            // Calling original store method\n            result = super.remove(recordsOrIds, silent, fromRemoveChild);\n            // Here we check if anything has been actually removed.\n            // The removing action might be vetoed by event handler or something\n            if (result?.length) {\n                stm.onStoreModelRemove(this, result, context, silent);\n            }\n        }\n        else {\n            result = super.remove(recordsOrIds, silent, fromRemoveChild);\n        }\n        return result;\n    }\n    // Overridden to notify STM about flat clear action\n    removeAll(silent) {\n        const { stm } = this;\n        let result;\n        if (stm?.enabled) {\n            // Here we are to detect if anything has been removed\n            // the only way is to check if store has anything before removing all\n            // and has nothing after.\n            const\n                { tree, rootNode, allRecords } = this,\n                wasNotEmpty                    = allRecords.length,\n                // need to store children/records before super method call, otherwise those would report empty list\n                records                        = tree ? rootNode.children.slice() : allRecords.slice();\n            result = super.removeAll(silent);\n            // The trick here is to distinguish tree and flat case\n            // For the flat case it's simple we just store all records\n            // For the tree we are to store root node children only\n            // Upon restoring store.add() will do the right thing for the flat case and tree case regardless.\n            if (wasNotEmpty && this.count === 0) {\n                stm.onStoreRemoveAll(this, records, silent);\n            }\n        }\n        else {\n            result = super.removeAll(silent);\n        }\n        return result;\n    }\n    beforeApplyChangeset() {\n        const { stm, crudManager } = this;\n        let shouldResume = false;\n        if (!crudManager?.applyingChangeset && stm?.enabled) {\n            shouldResume = true;\n            // If stm is recording at the moment, we need to stash changes and reject them\n            if (stm.isRecording) {\n                stm.stash();\n            }\n            if (this.ignoreRemoteChangesInSTM) {\n                stm.disable();\n            }\n            else {\n                stm.startTransaction();\n            }\n        }\n        return shouldResume;\n    }\n    // When applying changes while STM is in the recording state, first we need to discard local changes, then apply\n    // changes from remote, then try to apply local changes. This would emulate starting transaction as if data was\n    // already in the correct state\n    applyChangeset(changes, transformFn, phantomIdField, remote, logChanges) {\n        const\n            shouldResume = this.beforeApplyChangeset(),\n            log          = super.applyChangeset(changes, transformFn, phantomIdField, remote, logChanges);\n        this.afterApplyChangeset(shouldResume);\n        return log;\n    }\n    afterApplyChangeset(shouldResume) {\n        if (shouldResume) {\n            const { stm } = this;\n            if (this.ignoreRemoteChangesInSTM) {\n                stm.enable();\n            }\n            else {\n                stm.stopTransaction();\n            }\n            stm.applyStash();\n        }\n    }\n};\n", "import Base from '../Base.js';\nimport Pluggable from '../mixin/Pluggable.js';\nimport Events from '../mixin/Events.js';\nimport State from '../mixin/State.js';\nimport Identifiable from '../mixin/Identifiable.js';\nimport Model from './Model.js';\nimport BrowserHelper from '../helper/BrowserHelper.js';\nimport ObjectHelper from '../helper/ObjectHelper.js';\nimport StringHelper from '../helper/StringHelper.js';\nimport StoreBag from './StoreBag.js';\nimport Collection from '../util/Collection.js';\nimport StoreCRUD from './mixin/StoreCRUD.js';\nimport StoreChanges from './mixin/StoreChanges.js';\nimport StoreFilter from './mixin/StoreFilter.js';\nimport StoreGroup from './mixin/StoreGroup.js';\nimport StoreProxy from './mixin/StoreProxy.js';\nimport StoreRelation from './mixin/StoreRelation.js';\nimport StoreSum from './mixin/StoreSum.js';\nimport StoreSearch from './mixin/StoreSearch.js';\nimport StoreSort from './mixin/StoreSort.js';\nimport StoreChained from './mixin/StoreChained.js';\nimport StoreState from './mixin/StoreState.js';\nimport StoreTree from './mixin/StoreTree.js';\nimport StoreSync from './mixin/StoreSync.js';\nimport StoreStm from './stm/mixin/StoreStm.js';\nimport Delayable from '../mixin/Delayable.js';\n/**\n * @module Core/data/Store\n */\nconst\n    dataAddRemoveActions   = {\n        splice : 1,\n        clear  : 1\n    },\n    defaultTraverseOptions = {\n        includeFilteredOutRecords    : false,\n        includeCollapsedGroupRecords : false\n    },\n    fixTraverseOptions     = (store, options) => {\n        // backward compatibility to support includeFilteredOutRecords parameter instead of options\n        options = options || false;\n        if (typeof options === 'boolean') {\n            options = {\n                includeFilteredOutRecords    : options,\n                includeCollapsedGroupRecords : false\n            };\n        }\n        return options || defaultTraverseOptions;\n    };\n/**\n * The Store represents a data container which holds flat data or tree structures. An item in the Store is often called\n * a \u00B4record\u00B4 and it is simply an instance of the {@link Core.data.Model} (or any subclass thereof).\n *\n * Typically you load data into a store to display it in a Grid or a ComboBox. The Store is the backing data component\n * for any component that is showing data in a list style UI.\n *\n * ## Data format\n * Data is store in a JSON array the Store offers an API to edit, filter, group and sort the records.\n *\n * ## Store with flat data\n * To create a flat store simply provide an array of objects that describe your records\n *\n * ```javascript\n * const store = new Store({\n *     data : [\n *         { id : 1, name : 'ABBA', country : 'Sweden' },\n *         { id : 2, name : 'Beatles', country : 'UK' }\n *     ]\n * });\n *\n * // retrieve record by id\n * const beatles = store.getById(2);\n * ```\n *\n * ## Store with tree data\n * To create a tree store use `children` property for descendant records\n *\n * ```javascript\n * const store = new Store({\n *     tree: true,\n *     data : [\n *         { id : 1, name : 'ABBA', country : 'Sweden', children: [\n *             { id: 2, name: 'Agnetha' },\n *             { id: 3, name: 'Bjorn' },\n *             { id: 4, name: 'Benny' },\n *             { id: 5, name: 'Anni-Frid' }\n *         ]},\n *     ]\n * });\n *\n * // retrieve record by id\n * let benny = store.getById(4);\n * ```\n *\n * Optionally a tree store can consume a flat dataset with nodes that have a `parentId` property. By configuring the\n * store with `tree : true` and `transformFlatData : true`, the flat data is transformed into tree data:\n *\n * ```javascript\n * const store = new Store({\n *     tree              : true,\n *     transformFlatData : true,\n *     data              : [\n *         { id : 1, name : 'ABBA', country : 'Sweden' },\n *         { id : 2, name : 'Agnetha', parentId : 1 },\n *         { id : 3, name : 'Bjorn', parentId : 1 },\n *         { id : 4, name : 'Benny', parentId : 1 },\n *         { id : 5, name : 'Anni-Frid', parentId : 1 }\n *     ]\n * });\n * ```\n *\n * ### Retrieving and consuming JSON\n * For both flat stores or tree stores it is possible to retrieve the data of all records in JSON format:\n *\n * ```javascript\n * const jsonString = store.json;\n *\n * // or\n *\n * const jsonArray = store.toJSON();\n * ```\n *\n * To plug the JSON data back in later:\n *\n * ```javascript\n * store.data = JSON.parse(jsonString);\n *\n * // or\n *\n * store.data = jsonArray;\n * ```\n *\n * ## Sharing stores\n * You cannot directly share a Store between widgets, but the data in a Store can be shared. There are two different\n * approaches depending on your needs, sharing data and chaining stores:\n *\n * ### Shared data\n * To create 2 widgets that share data, you can create 2 separate stores and pass records of the first store as the\n * dataset of the second store.\n *\n * ```javascript\n * let combo1 = new Combo({\n *     appendTo : document.body,\n *     store    : new Store({\n *         data : [\n *             { id : 1, name : 'ABBA', country : 'Sweden' },\n *             { id : 2, name : 'Beatles', country : 'UK' }\n *         ]\n *     }),\n *     valueField   : 'id',\n *     displayField : 'name'\n * });\n *\n * let combo2 = new Combo({\n *     appendTo : document.body,\n *     store    : new Store({\n *         data : combo1.store.records\n *     }),\n *     valueField   : 'id',\n *     displayField : 'name'\n * });\n *\n * combo1.store.first.name = 'foo';\n * combo2.store.first.name; // \"foo\"\n * ```\n *\n * ### Chained stores\n * Another more powerful option to share data between widgets is to create {@link Core.data.mixin.StoreChained chained}\n * stores. The easiest way to create a chained store is to call {@link #function-chain} function.\n *\n * ```javascript\n * let combo1 = new Combo({\n *     appendTo : document.body,\n *     store    : new Store({\n *         data : [\n *             { id : 1, name : 'ABBA', country : 'Sweden' },\n *             { id : 2, name : 'Beatles', country : 'UK' }\n *         ]\n *     }),\n *     valueField   : 'id',\n *     displayField : 'name'\n * });\n *\n * let combo2 = new Combo({\n *     appendTo     : document.body,\n *     store        : combo1.store.chain(),\n *     valueField   : 'id',\n *     displayField : 'name'\n * });\n *\n * combo1.store.first.name = 'foo';\n * combo2.store.first.name; // \"foo\"\n * ```\n *\n * A chained store can optionally be created with a filtering function, to only contain a subset of the records from\n * the main store. In addition, the chained store will reflect record removals/additions to the master store, something\n * the shared data approach will not.\n *\n * ## Non-homogeneous data structures\n *\n * You can use different Model classes to represent the records in the store by overriding the {@link #function-createRecord}\n * method:\n *\n * ```javascript\n * const store = new Store ({\n *     modelClass : Gate,\n *     readUrl    : 'data/the-airport.json',\n *     autoLoad   : true,\n *     // The default model is a Gate (see above) and in this createRecord method, we can decide at runtime based\n *     // on the data which model class to use. This is useful when your record types aren't homogenous.\n *     createRecord(data) {\n *         let modelClass = this.modelClass;\n *         if (data.type === 'terminal') {\n *             modelClass = Terminal;\n *         }\n *         return new modelClass(data, this);\n *     }\n * },\n * ```\n *\n * @mixes Core/mixin/Events\n * @mixes Core/data/mixin/StoreFilter\n * @mixes Core/data/mixin/StoreChanges\n * @mixes Core/data/mixin/StoreCRUD\n * @mixes Core/data/mixin/StoreSum\n * @mixes Core/data/mixin/StoreSearch\n * @mixes Core/data/mixin/StoreSort\n * @mixes Core/data/mixin/StoreGroup\n * @mixes Core/data/mixin/StoreChained\n * @mixes Core/data/mixin/StoreState\n * @mixes Core/data/mixin/StoreRelation\n * @mixes Core/data/mixin/StoreTree\n * @mixes Core/data/stm/mixin/StoreStm\n * @mixes Core/data/mixin/StoreSync\n *\n * @extends Core/Base\n */\nexport default class Store extends Base.mixin(\n    Delayable,\n    Identifiable,\n    Events,\n    Pluggable,\n    State,\n    StoreFilter,\n    StoreChanges,\n    StoreCRUD,\n    StoreRelation, // Private\n    StoreSum,\n    StoreSearch,\n    StoreSort,\n    StoreGroup,\n    StoreChained,\n    StoreState,\n    StoreTree,\n    StoreStm,\n    StoreSync,\n    StoreProxy // Private for now, thus not mentioned in @mixes block above\n) {\n    //region Config & properties\n    static get $name() {\n        return 'Store';\n    }\n    static get properties() {\n        return {\n            relationCache         : {},\n            dependentStoreConfigs : new Map()\n        };\n    }\n    static get configurable() {\n        return {\n            /**\n             * Store's unique identifier.\n             *\n             * @member {String|Number} id\n             * @readonly\n             * @category Common\n             */\n            /**\n             * Store's unique identifier. When set the store is added to a store map accessible through\n             * `Store.getStore(id)`.\n             *\n             * @config {String|Number}\n             * @category Common\n             */\n            id : true,\n            /**\n             * Class used to represent records in the store, should be a subclass of {@link Core.data.Model}. Only\n             * applies when supplying data to the store (load, add), any supplied record instances are kept as is.\n             *\n             * ```javascript\n             * class MyModel extends Model {\n             *     static get fields() {\n             *         return [\n             *             'name',\n             *             'city',\n             *             'company'\n             *         ]\n             *     }\n             * }\n             *\n             * const store = new Store({\n             *     modelClass : MyModel,\n             *     data : [\n             *         { id : 1, name : 'Mark', city : 'London', company : 'Cool inc' },\n             *         ...\n             *     ]\n             * });\n             * ```\n             *\n             * @config {Core.data.Model}\n             * @default\n             * @typings {typeof Model}\n             * @category Common\n             */\n            modelClass : Model,\n            /**\n             * Verify that loaded data does not contain any generated ids. If it does, a warning is logged on console.\n             *\n             * Set this to `false` to disable the check and give a very minor performance boost.\n             *\n             * @prp {Boolean}\n             * @default\n             */\n            verifyNoGeneratedIds : true\n        };\n    }\n    static get defaultConfig() {\n        return {\n            /**\n             * An array of field definitions used to create a {@link Core.data.Model} (modelClass) subclass. Optional.\n             * If the Model already has fields defined, these fields will extend those.\n             *\n             * ```javascript\n             * const store = new Store({\n             *     fields : ['name', 'city', 'company'],\n             *     data   : [\n             *         { id : 1, name : 'Mark', city : 'London', company : 'Cool inc' },\n             *         ...\n             *     ]\n             * });\n             * ```\n             *\n             * See {@link Core.data.Model} for more info on defining fields, changing data source and mapping fields to\n             * nested objects.\n             *\n             * Note that pre-created record instances supplied to the store are kept as is and thus these fields will\n             * not apply to them.\n             *\n             * @config {Array<String|ModelFieldConfig|Core.data.field.DataField>}\n             * @category Common\n             */\n            fields : null,\n            /**\n             * Automatically detect from set data if used as tree store or flat store\n             * @config {Boolean}\n             * @default\n             * @category Tree\n             */\n            autoTree : true,\n            /**\n             * Raw data to load initially.\n             *\n             * Expects an array of JavaScript objects, with properties matching store's fields (defined on its\n             * {@link #config-modelClass model} or in the {@link #config-fields} config).\n             *\n             * ```javascript\n             * const store = new Store({\n             *     data : [\n             *         { id : 1, name : 'Linda', city : 'NY' },\n             *         { id : 2, name : 'Olivia', city : 'Paris' },\n             *         ...\n             *     ]\n             * });\n             * ```\n             *\n             * @config {Object[]|Core.data.Model[]}\n             * @category Common\n             */\n            data : null,\n            /**\n             * `true` to act as a tree store.\n             * @config {Boolean}\n             * @category Tree\n             */\n            tree : false,\n            callOnFunctions : true,\n            /**\n             * A {@link Core/util/Collection}, or Collection config object\n             * to use to contain this Store's constituent records.\n             * @config {Core.util.Collection|CollectionConfig}\n             * @category Advanced\n             */\n            storage : null,\n            /**\n             * Retools the loaded data objects instead of making shallow copies of them. This increases performance but\n             * pollutes the incoming data and does not allow remapping of fields (dataSource).\n             *\n             * Also allows disabling certain steps in data loading, to further improve performance. Either accepts an\n             * object with the params described below or `true` which equals `disableDuplicateIdCheck` and\n             * `disableTypeConversion`.\n             *\n             * ```javascript\n             * // No duplicate id checking, no type conversions\n             * new Store({ useRawData : true });\n             *\n             * new Store({\n             *   // No type conversions only\n             *   useRawData : {\n             *     disableTypeConversion : true\n             *   }\n             * });\n             * ```\n             *\n             * @config {Boolean|Object}\n             * @param {Boolean} [disableDuplicateIdCheck] Data must not contain duplicate ids, check is bypassed.\n             * @param {Boolean} [disableDefaultValue] Default values will not be applied to record fields.\n             * @param {Boolean} [disableTypeConversion] No type conversions will be performed on record data.\n             * @category Advanced\n             */\n            useRawData : false,\n            /**\n             * Specify `false` to prevent loading records without ids, a good practise to enforce when syncing with a\n             * backend.\n             *\n             * By default Store allows loading records without ids, in which case a generated id will be assigned.\n             *\n             * @config {Boolean}\n             * @default true\n             * @category Advanced\n             */\n            allowNoId : true,\n            /**\n             * Prevent dynamically subclassing the modelClass. It does so by default to not pollute it when exposing\n             * properties. Should rarely need to be used.\n             * @config {Boolean}\n             * @default false\n             * @private\n             * @category Advanced\n             */\n            preventSubClassingModel : null\n        };\n    }\n    static get identifiable() {\n        return {\n            registerGeneratedId : false\n        };\n    }\n    /**\n     * Class used to represent records. Defaults to class Model.\n     * @member {Core.data.Model} modelClass\n     * @typings {typeof Model}\n     * @category Records\n     */\n    //endregion\n    //region Events\n    /**\n     * Fired when the id of a record has changed\n     * @event idChange\n     * @param {Core.data.Store} source This Store\n     * @param {Core.data.Model} record Modified record\n     * @param {String|Number} oldValue Old id\n     * @param {String|Number} value New id\n     */\n    /**\n     * Fired before record is modified in this store.\n     * Modification may be vetoed by returning `false` from a handler.\n     * @event beforeUpdate\n     * @param {Core.data.Store} source This Store\n     * @param {Core.data.Model} record Modified record\n     * @param {Object} changes Modification data\n     */\n    /**\n     * Fired when a record is modified\n     * @event update\n     * @param {Core.data.Store} source This Store\n     * @param {Core.data.Model} record Modified record\n     * @param {Object} changes Modification data\n     */\n    /**\n     * Fired when one of this Store's constituent records is modified while in\n     * {@link Core.data.Model#function-beginBatch batched} state. This may be used to keep\n     * UIs up to date while \"tentative\" changes are made to a record which must not be synced with a server.\n     * @event batchedUpdate\n     * @private\n     */\n    /**\n     * Fired when the root node is set\n     * @event rootChange\n     * @param {Core.data.Store} source This Store\n     * @param {Core.data.Model} oldRoot The old root node.\n     * @param {Core.data.Model} rootNode The new root node.\n     */\n    /**\n     * Data in the store was changed. This is a catch-all event which is fired for all changes\n     * which take place to the store's data.\n     *\n     * This includes mutation of individual records, adding and removal of records, as well as\n     * setting a new data payload using the {@link #property-data} property, sorting, filtering,\n     * and calling {@link Core.data.mixin.StoreCRUD#function-removeAll}.\n     *\n     * Simple databound widgets may use to the `change` event to refresh their UI without having to add multiple\n     * listeners to the {@link #event-update}, {@link Core.data.mixin.StoreCRUD#event-add},\n     * {@link Core.data.mixin.StoreCRUD#event-remove}, {@link #event-refresh} and\n     * {@link Core.data.mixin.StoreCRUD#event-removeAll} events.\n     *\n     * A more complex databound widget such as a grid may use the more granular events to perform less\n     * destructive updates more appropriate to each type of change. The properties will depend upon the value of the\n     * `action` property.\n     *\n     * @event change\n     * @param {Core.data.Store} source This Store.\n     * @param {'remove'|'removeAll'|'add'|'updatemultiple'|'clearchanges'|'filter'|'update'|'dataset'|'replace'} action\n     * Name of action which triggered the change. May be one of the options listed above\n     * @param {Core.data.Model} record Changed record, for actions that affects exactly one record (`'update'`)\n     * @param {Core.data.Model[]} records Changed records, passed for all actions except `'removeAll'`\n     * @param {Object} changes Passed for the `'update'` action, info on which record fields changed\n     */\n    // NOTE: When updating params above, also update change event in ProjectModelMixin and dataChange in ProjectConsumer\n    /**\n     * Data in the store has completely changed, such as by a filter, or sort or load operation.\n     * @event refresh\n     * @param {Core.data.Store} source This Store.\n     * @param {Boolean} batch Flag set to `true` when the refresh is triggered by ending a batch\n     * @param {'dataset'|'sort'|'clearchanges'|'filter'|'create'|'update'|'delete'|'group'} action Name of\n     * action which triggered the change. May be one of the options listed above.\n     */\n    //endregion\n    /* break doc comment from next method */\n    //region Init\n    constructor(...args) {\n        super(...args);\n        // When using a Proxy, the Proxy is returned instead of the actual Store\n        if (this.objectify) {\n            return this.initProxy();\n        }\n    }\n    construct(config = {}) {\n        const me = this;\n        Object.assign(me, {\n            added              : new StoreBag(),\n            removed            : new StoreBag(),\n            modified           : new StoreBag(),\n            idRegister         : {},\n            internalIdRegister : {},\n            oldIdMap           : {}\n        });\n        if (config.storeId) {\n            // avoid changing id when setting storeId:\n            config = ObjectHelper.assign({ id : config.storeId }, config);\n            // We cannot remove storeId since it can also be inherited and if so, it will override the id above:\n            // delete config.storeId;\n        }\n        super.construct(config);\n        me.initRelations();\n    }\n    /**\n     * Retrieves/creates a store based on the passed config.\n     *\n     * | Type              | Result                                                                 |\n     * |-------------------|------------------------------------------------------------------------|\n     * | Core.data.Store   | Returns supplied store as is                                           |\n     * | String            | Retrieves an existing store by id                                      |\n     * | Object            | Creates a new store using supplied config object                       |\n     * | Object[]          | Creates a new store, populated with records created from supplied data |\n     * | Core.data.Model[] | Creates a new store, populated with supplied records                   |\n     *\n     *\n     * @param {Core.data.Store|StoreConfig|String|StoreConfig[]|Core.data.Model[]} config\n     * @param {Object} [defaults] Config object to apply when creating a new store for passed data\n     * @param {Function} [converterFn] Function called for each data object prior to creating a record from it. The\n     * return value is used to create a record.\n     * @private\n     */\n    static from(config, defaults = {}, converterFn = null) {\n        // null and store instances pass through\n        if (config && !config.isStore) {\n            // Passed a string, get store by id\n            if (typeof config === 'string') {\n                config = Store.getStore(config);\n            }\n            // Passed something else, create a store using the input as its data\n            else {\n                // Array of records or data, pass to converterFn if one is supplied\n                if (Array.isArray(config)) {\n                    if (converterFn) {\n                        config = config.map(data => data.isModel ? data : converterFn(data));\n                    }\n                    config = ObjectHelper.assign({}, defaults, { data : config });\n                }\n                config = new Store(config);\n            }\n        }\n        return config;\n    }\n    doDestroy() {\n        const\n            me         = this,\n            allRecords = me.registeredRecords;\n        for (let i = allRecords.length - 1, rec; i >= 0; i--) {\n            rec = allRecords[i];\n            if (!rec?.isDestroyed) {\n                rec.unjoinStore(me);\n            }\n        }\n        me._storage?.destroy();\n        // Remove from STM if added there (STM might also have gotten destroyed before us)\n        me.stm?.removeStore?.(me);\n        if (!me.isChained) {\n            me.rootNode?.destroy();\n        }\n        // Events superclass fires destroy event.\n        super.doDestroy();\n    }\n    /**\n     * Stops this store from firing events until {@link #function-endBatch} is called. Multiple calls to `beginBatch`\n     * stack up, and will require an equal number of `endBatch` calls to resume events.\n     *\n     * Upon call of {@link #function-endBatch}, a {@link #event-refresh} event is triggered to allow UIs to\n     * update themselves based upon the new state of the store.\n     *\n     * This is extremely useful when making a large number of changes to a store. It is important not to trigger\n     * too many UI updates for performance reasons. Batching the changes ensures that UIs attached to this\n     * store are only updated once at the end of the updates.\n     */\n    beginBatch() {\n        this.suspendEvents();\n    }\n    /**\n     * Ends event suspension started by {@link #function-beginBatch}. Multiple calls to {@link #function-beginBatch}\n     * stack up, and will require an equal number of `endBatch` calls to resume events.\n     *\n     * Upon call of `endBatch`, a {@link #event-refresh} event with `action: batch` is triggered to allow UIs to update\n     * themselves based upon the new state of the store.\n     *\n     * This is extremely useful when making a large number of changes to a store. It is important not to trigger\n     * too many UI updates for performance reasons. Batching the changes ensures that UIs attached to this\n     * store are only updated once at the end of the updates.\n     */\n    endBatch() {\n        if (this.resumeEvents()) {\n            this.trigger('refresh', {\n                action  : 'batch',\n                data    : this.storage.values,\n                records : this.storage.values\n            });\n        }\n    }\n    set storage(storage) {\n        const me = this;\n        if (storage?.isCollection) {\n            me._storage = storage;\n        }\n        else {\n            me._storage = new Collection(storage);\n        }\n        me._storage.autoFilter = me.reapplyFilterOnAdd;\n        me._storage.autoSort = me.reapplySortersOnAdd;\n        // Join all the constituent records to this Store\n        for (const r of me._storage) {\n            r.joinStore(me);\n        }\n        me._storage.ion({\n            change  : 'onDataChange',\n            thisObj : me\n        });\n    }\n    get storage() {\n        if (!this._storage) {\n            this.storage = {};\n        }\n        return this._storage;\n    }\n    /**\n     * Returns all records (ignoring any filters) from the store.\n     * @property {Core.data.Model[]}\n     * @readonly\n     * @category Records\n     */\n    get allRecords() {\n        const me = this;\n        if (me._allRecords?.generation !== me.storage.generation) {\n            if (me.isTree) {\n                const result = me.collectDescendants(me.rootNode, undefined, undefined, { unfiltered : true }).all;\n                if (me.rootVisible) {\n                    result.unshift(me.rootNode);\n                }\n                me._allRecords = result;\n            }\n            else {\n                me._allRecords = me.isGrouped\n                    ? me.collectGroupRecords()\n                    : me.storage.allValues;\n            }\n            me._allRecords.generation = me.storage.generation;\n        }\n        return me._allRecords;\n    }\n    // All records except special rows such group headers etc\n    getAllDataRecords(searchAllRecords) {\n        return this.isGrouped ? this.collectGroupRecords(searchAllRecords, false) : (searchAllRecords ? this.storage.allValues : this.storage.values);\n    }\n    /**\n     * Called by owned record when the record has its {@link Core.data.Model#property-isCreating}\n     * property toggled.\n     * @param {Core.data.Model} record The record that is being changed.\n     * @param {Boolean} isCreating The new value of the {@link Core.data.Model#property-isCreating} property.\n     * @internal\n     */\n    onIsCreatingToggle(record, isCreating) {\n        const\n            me               = this,\n            newlyPersistable = record.isPersistable && !isCreating;\n        // If it's a transient \"isCreating\" record, waiting to be confirmed as a new entry\n        // into the store, then it should *not* be in the added Bag as a syncable record.\n        // If we are upgrading it to a permanent record, it *should* be in the added Bag.\n        me.added[newlyPersistable ? 'add' : 'remove'](record);\n        // If the record is newly persistable...\n        if (newlyPersistable) {\n            /**\n             * Fired when a temporary record with the {@link Core.data.Model#property-isCreating} property set\n             * has been confirmed as a part of this store by having its {@link Core.data.Model#property-isCreating}\n             * property cleared.\n             * @event addConfirmed\n             * @param {Core.data.Store} source This Store.\n             * @param {Core.data.Model} record The record confirmed as added.\n             */\n            me.trigger('addConfirmed', { record });\n            // AjaxStore to commit confirmed new record\n            if (me.autoCommit) {\n                me.doAutoCommit();\n            }\n        }\n    }\n    // Join added records to store, not called when loading\n    joinRecordsToStore(records) {\n        const { allCount } = this;\n        for (let i = 0; i < records.length; i++) {\n            const record = records[i];\n            // Set a parentIndex on newly added records, based on count prior to the add\n            record.setData('parentIndex', allCount + i - records.length);\n            record.joinStore(this);\n        }\n    }\n    /**\n     * Responds to mutations of the underlying storage Collection\n     * @param {Object} event\n     * @protected\n     */\n    onDataChange({ source : storage, action, added, removed, replaced, oldCount, items, from, to }) {\n        const\n            me           = this,\n            isAddRemove  = dataAddRemoveActions[action],\n            // The \"filter\" action's removed and added are not processed as adds and removes.\n            // In a filter operation the records are still members of the store.\n            addedCount   = isAddRemove && added?.length,\n            removedCount = isAddRemove && removed?.length;\n        let filtersWereReapplied,\n            sortersWereReapplied;\n        me._idMap = null;\n        if (addedCount) {\n            me.joinRecordsToStore(added);\n        }\n        replaced?.forEach(([oldRecord, newRecord]) => {\n            oldRecord.unjoinStore(me, true);\n            newRecord.joinStore(me);\n        });\n        // Allow mixins to mutate the storage before firing events.\n        // StoreGroup does this to introduce group records into the mix.\n        super.onDataChange(...arguments);\n        // Join/unjoin incoming/outgoing records unless its as a result of TreeNode operations.\n        // If we are a tree, joining is done when nodes are added/removed\n        // as child nodes of a joined parent.\n        if (!me.isTree) {\n            if (addedCount) {\n                for (const record of added) {\n                    // If was removed, remove from `removed` list\n                    if (me.removed.includes(record)) {\n                        me.removed.remove(record);\n                    }\n                    // Else add to `added` list\n                    else if (!record.isLinked) {\n                        me.added.add(record);\n                    }\n                }\n                // Re-evaluate the current *local* filter set silently so that the\n                // information we are broadcasting below is up to date.\n                filtersWereReapplied = !me.remoteFilter && me.filtered && me.reapplyFilterOnAdd;\n                if (filtersWereReapplied) {\n                    me.filter({\n                        silent : true\n                    });\n                }\n                // if sortParamName not defined, is not remote sort\n                sortersWereReapplied = !me.remoteSort && me.isSorted && me.reapplySortersOnAdd;\n                if (sortersWereReapplied) {\n                    me.sort(null, null, false, true);\n                }\n            }\n            if (removedCount) {\n                for (const record of removed) {\n                    // If app was in the middle of a batched update, cancel the update.\n                    record.cancelBatch();\n                    record.unjoinStore(me);\n                    // If was newly added, remove from `added` list\n                    if (me.added.includes(record)) {\n                        me.added.remove(record);\n                    }\n                    // Else add to `removed` list\n                    // Unless it's StateTrackingManager reverting the record insertion.\n                    // Also unless it's a record which was a transient record created by the UI\n                    // and then the create was canceled at the edit stage.\n                    else if (!record._undoingInsertion && !record.isCreating && !record.isLinked) {\n                        me.removed.add(record);\n                    }\n                }\n                me.modified.remove(removed);\n                // Re-evaluate the current *local* filter set silently so that the\n                // information we are broadcasting below is up to date.\n                filtersWereReapplied = !me.remoteFilter && me.filtered;\n                if (filtersWereReapplied) {\n                    me.filter({\n                        silent : true\n                    });\n                }\n            }\n        }\n        switch (action) {\n            case 'clear':\n                // Clear our own relationCache, since we will be empty\n                me.relationCache = {};\n                // Signal to stores that depend on us\n                me.updateDependentStores('removeall');\n                me.trigger('removeAll');\n                me.trigger('change', {\n                    action : 'removeall'\n                });\n                break;\n            case 'splice':\n                if (addedCount) {\n                    me.updateDependentStores('add', added);\n                    const\n                        // Collection does not handle moves, figure out if and where a record was moved from by checking\n                        // previous index value stored in meta\n                        oldIndex = added.reduce((lowest, record) => {\n                            const { previousIndex } = record.meta;\n                            if (previousIndex > -1 && previousIndex < lowest) lowest = previousIndex;\n                            return lowest;\n                        }, added[0].meta.previousIndex),\n                        index    = storage.indexOf(added[0], !storage.autoFilter),\n                        params   = {\n                            records : added,\n                            index\n                        };\n                    // Only include param oldIndex when used\n                    if (oldIndex > -1) {\n                        params.oldIndex = oldIndex;\n                    }\n                    me.trigger('add', params);\n                    me.trigger('change', Object.assign({ action : 'add' }, params));\n                    if (filtersWereReapplied) {\n                        me.triggerFilterEvent({\n                            action : 'filter', filters : me.filters, oldCount, records : me.storage.allValues\n                        });\n                    }\n                    if (sortersWereReapplied) {\n                        me.trigger('sort', { action : 'sort', sorters : me.sorters, records : me.storage.allValues });\n                    }\n                }\n                if (removed.length) {\n                    me.updateDependentStores('remove', removed);\n                    me.trigger('remove', {\n                        records : removed\n                    });\n                    me.trigger('change', {\n                        action  : 'remove',\n                        records : removed\n                    });\n                }\n                if (replaced.length) {\n                    me.trigger('replace', {\n                        records : replaced,\n                        all     : me.records.length === replaced.length\n                    });\n                    me.trigger('change', {\n                        action : 'replace',\n                        replaced,\n                        all    : me.records.length === replaced.length\n                    });\n                }\n                break;\n            case 'filter':\n                // Reapply grouping/sorting to make sure unfiltered records get sorted correctly\n                if (me.isGrouped || me.isSorted) {\n                    me.performSort(true);\n                }\n                break;\n            case 'move': {\n                // silently update parentIndex of records affected\n                const\n                    start = Math.min(from, to),\n                    // We need to constrain maximum index in case record gets removed due to moving to the\n                    // collapsed group\n                    end   = Math.min(me.storage.allValues.length - 1, Math.max(from, to));\n                for (let allRecords = me.storage.allValues, i = start; i <= end; i++) {\n                    allRecords[i].setData('parentIndex', i);\n                }\n                /**\n                 * Fired when a block of records has been moved within this Store\n                 * @event move\n                 * @param {Core.data.Store} source This Store\n                 * @param {Core.data.Model} record (DEPRECATED) The first record moved (The\n                 * {@link Core.data.mixin.StoreCRUD#function-move} API now accepts an array of records to move).\n                 * @param {Core.data.Model[]} records The records moved.\n                 * @param {Number} from The index from which the record was removed (applicable only for flat store).\n                 * @param {Number} to The index at which the record was inserted (applicable only for flat store).\n                 * @param {Core.data.Model} [newParent] The new parent record for the dragged records (applicable only for tree stores)\n                 * @param {Core.data.Model[]} [oldParents] The old parent records for the dragged records (applicable only for move operations in tree stores)\n                 */\n                me.trigger('move', {\n                    record  : items[0],\n                    records : items,\n                    from,\n                    to\n                });\n                // The move was in real data. If we are filtered, the\n                // filtered set has to be refreshed.\n                if (me.isFiltered) {\n                    me.performFilter();\n                }\n                me.trigger('change', {\n                    action,\n                    record  : items[0],\n                    records : items,\n                    from,\n                    to\n                });\n                break;\n            }\n        }\n    }\n    onDataReplaced(action, data) {\n        const\n            me          = this,\n            { storage } = me,\n            all         = storage.allValues,\n            sorted      = Boolean(me.sorters.length > 0);\n        for (let i = 0; i < all.length; i++) {\n            all[i].joinStore(me);\n        }\n        // The three operations below, filter, store and sort, all are passed\n        // the \"silent\" parameter meaning they do not fire their own events.\n        // The 'refresh' and 'change' events after are used to update UIs.\n        if (!me.remoteFilter && me.isFiltered) {\n            me.filter({\n                silent : true\n            });\n        }\n        if (me.remoteSort) {\n            if (me.isGrouped) {\n                storage.replaceValues({\n                    // Need to update group records info (headers and footers)\n                    ...me.prepareGroupRecords(),\n                    silent : true\n                });\n            }\n        }\n        else {\n            if (me.isGrouped) {\n                me.group(null, null, false, !sorted, true);\n            }\n            // Only request sorting of arriving data if sorting is not remote.\n            if (sorted) {\n                me.sort(null, null, false, true);\n            }\n        }\n        // Check for duplicate ids, unless user guarantees data validity\n        if (!me.useRawData.disableDuplicateIdCheck) {\n            const { idMap } = me;\n            if (Object.keys(idMap).length < storage.values.length) {\n                // idMap has fewer entries than expected, a duplicate id was used. pick idMap apart to find out which\n                const collisions = [];\n                storage.values.forEach(r => idMap[r.id] ? delete idMap[r.id] : collisions.push(r));\n                throw new Error(`Id collision on ${collisions.map(r => r.id)}`);\n            }\n        }\n        const event = { action, data, records : storage.values };\n        me.updateDependentStores(action, event.records);\n        // Allow subclasses to postprocess a new dataset\n        me.afterLoadData?.();\n        if (!me.isRemoteDataLoading) {\n            me.trigger('refresh', event);\n        }\n        me.trigger('change', event);\n    }\n    /**\n     * This is called from Model after mutating any fields so that Stores can take any actions necessary at that point,\n     * and distribute mutation event information through events.\n     * @param {Core.data.Model} record The record which has just changed\n     * @param {Object} toSet A map of the field names and values that were passed to be set\n     * @param {Object} wasSet A map of the fields that were set. Each property is a field name, and\n     * the property value is an object containing two properties: `oldValue` and `value` eg:\n     * ```javascript\n     *     {\n     *         name {\n     *             oldValue : 'Rigel',\n     *             value : 'Nigel'\n     *         }\n     *     }\n     *\n     * @param {Boolean} silent Do not trigger events\n     * @param {Boolean} fromRelationUpdate Update caused by a change in related model\n     * @private\n     */\n    onModelChange(record, toSet, wasSet, silent, fromRelationUpdate) {\n        const\n            me          = this,\n            event       = {\n                record,\n                records : [record],\n                changes : wasSet,\n                // Cannot use isBatching, since change is triggered when batching has reached 0\n                // (but before it is set to null)\n                batch   : record.batching != null,\n                fromRelationUpdate\n            },\n            committable = record.ignoreBag || record.isLinked ? false : me.updateModifiedBagForRecord(record);\n        // Inform underlying collection of the changes, allowing it to keep any indices up to date\n        me.storage.onItemMutation(record, wasSet);\n        // Always update indices, otherwise they will be left out of date (was previously skipped when silent)\n        if ('id' in wasSet) {\n            const { oldValue, value } = toSet.id;\n            me.updateDependentRecordIds(oldValue, value);\n            me.onRecordIdChange({ record, oldValue, value });\n        }\n        if (!silent) {\n            if ('id' in wasSet) {\n                const { oldValue, value } = toSet.id;\n                me.trigger('idChange', {\n                    store : me,\n                    record,\n                    oldValue,\n                    value\n                });\n            }\n            me.onUpdateRecord(record, wasSet);\n            me.trigger('update', event);\n            me.trigger('change', Object.assign({ action : 'update' }, event));\n        }\n        if (me.autoCommit && committable) {\n            me.doAutoCommit();\n        }\n    }\n    updateModifiedBagForRecord(record) {\n        const me       = this;\n        let addedToBag = false;\n        // Add or remove from our modified Bag\n        if (record.isModified) {\n            if (!me.modified.includes(record) && !me.added.includes(record) && record.isPartOfStore(me) && !record.isAutoRoot) {\n                // When we add a new model first time and the model is not persistable (for example when the model is not valid),\n                // it is not added to the \"added\" collection (StoreBag), but only joined to the store.\n                // So if the record is not added neither to \"modified\" nor \"added\",\n                // need to check if this record is phantom. If so, add it to the \"added\", otherwise to the \"modified\".\n                if (record.isPhantom) {\n                    me.added.add(record);\n                }\n                else {\n                    me.modified.add(record);\n                }\n                addedToBag = true;\n            }\n        }\n        else {\n            me.modified.remove(record);\n        }\n        return addedToBag;\n    }\n    get idMap() {\n        const\n            me           = this,\n            needsRebuild = !me._idMap,\n            idMap        = me._idMap || (me._idMap = {});\n        if (needsRebuild) {\n            const processedRecords = me.storage.values;\n            for (let record, index = 0, visibleIndex = 0; index < processedRecords.length; index++) {\n                record           = processedRecords[index];\n                idMap[record.id] = { index, visibleIndex, record };\n                if (!record.isSpecialRow) {\n                    visibleIndex++;\n                }\n            }\n            // If store is filtered and grouped, we often need to lookup record index in filtered and unfiltered\n            // collections\n            if (me.isFiltered) {\n                for (let index = 0, l = me.storage._values.length; index < l; index++) {\n                    const record = me.storage._values[index];\n                    if (record.id in idMap) {\n                        idMap[record.id].unfilteredIndex = index;\n                    }\n                    else {\n                        // If record is not in the idMap, set its index as -1 which allows\n                        // `store.includes` API work correctly\n                        idMap[record.id] = { index : -1, unfilteredIndex : index, record };\n                    }\n                }\n            }\n        }\n        return idMap;\n    }\n    changeModelClass(ClassDef) {\n        const { fields } = this;\n        this.originalModelClass = ClassDef;\n        let ClassDefEx = ClassDef;\n        // Ensure our modelClass is exchanged for an extended of modelClass decorated with any configured fields.\n        if (fields?.length) {\n            // angular prod build messes up \"Foo = class extends Base\" (https://github.com/bryntum/support/issues/6395)\n            class ModelClass extends ClassDef {\n                static get fields() {\n                    return fields;\n                }\n            }\n            ClassDefEx = ModelClass;\n        }\n        // If we expose properties on Model we will pollute all other models, use internal subclass instead\n        else if (!this.preventSubClassingModel) {\n            // angular prod build messes up \"Foo = class extends Base\" (https://github.com/bryntum/support/issues/6395)\n            class ModelClass extends ClassDef {}\n            ClassDefEx = ModelClass;\n        }\n        // Need to properly expose relations on this new subclass\n        ClassDefEx.initClass();\n        return ClassDefEx;\n    }\n    //endregion\n    //region Store id & map\n    set storeId(storeId) {\n        this.id = storeId;\n    }\n    get storeId() {\n        return this.id;\n    }\n    changeId(id, oldId) {\n        return super.changeId((id !== true) && id, oldId);\n    }\n    updateId(id, oldId) {\n        const duplicate = Store.getById(id);\n        duplicate && Store.unregisterInstance(duplicate);\n        super.updateId(id, oldId);\n    }\n    generateAutoId() {\n        return Store.generateId(`store-`);\n    }\n    get tree() {\n        return this._tree;\n    }\n    set tree(tree) {\n        this._tree = tree;\n        if (tree && !this.rootNode) {\n            this.rootNode            = this.buildRootNode();\n            this.rootNode.isAutoRoot = true;\n        }\n    }\n    // a hook to build a customized root node\n    buildRootNode() {\n        return {};\n    }\n    /**\n     * Get a store from the store map by id.\n     * @param {String|Number|Object[]} id The id of the store to retrieve, or an array of objects\n     * from which to create the contents of a new Store.\n     * @returns {Core.data.Store} The store with the specified id\n     */\n    static getStore(id, storeClass) {\n        if (id instanceof Store) {\n            return id;\n        }\n        if (this.getById(id)) {\n            return this.getById(id);\n        }\n        if (Array.isArray(id)) {\n            let storeModel;\n            const storeData = id.map(item => {\n                if (item instanceof Model) {\n                    storeModel = item.constructor;\n                }\n                else if (typeof item === 'string') {\n                    item = {\n                        text : item\n                    };\n                }\n                else {\n                }\n                return item;\n            });\n            if (!storeModel) {\n                // angular prod build messes up \"Foo = class extends Base\" (https://github.com/bryntum/support/issues/6395)\n                class ModelClass extends Model {}\n                storeModel = ModelClass;\n            }\n            id = {\n                autoCreated : true,\n                data        : storeData,\n                modelClass  : storeModel,\n                allowNoId   : true // String items have no id and are not guaranteed to be unique\n            };\n            if (!storeClass) {\n                storeClass = Store;\n            }\n        }\n        if (storeClass) {\n            return new storeClass(id);\n        }\n    }\n    /**\n     * Get all registered stores\n     * @property {Core.data.Store[]}\n     */\n    static get stores() {\n        return Store.registeredInstances;\n    }\n    //endregion\n    //region Data\n    /**\n     * The invisible root node of this tree.\n     * @property {Core.data.Model}\n     * @readonly\n     * @category Tree\n     */\n    get rootNode() {\n        return this.masterStore ? this.masterStore.rootNode : this._rootNode;\n    }\n    set rootNode(rootNode) {\n        const me      = this,\n            oldRoot = me._rootNode;\n        // No change\n        if (rootNode === oldRoot) {\n            return;\n        }\n        if (oldRoot) {\n            me.clear(true);\n        }\n        if (rootNode instanceof Model) {\n            // We insist that the rootNode is expanded otherwise no children will be added\n            rootNode.instanceMeta(me).collapsed = false;\n            me._rootNode = rootNode;\n        }\n        else {\n            me._rootNode = rootNode = new me.modelClass(Object.assign({\n                expanded                : true,\n                [me.modelClass.idField] : `${me.id}-rootNode`\n            }, rootNode), me, null, true);\n        }\n        me._tree        = true;\n        rootNode.isRoot = true;\n        rootNode.joinStore(me);\n        // If there are nodes to be inserted into the flat storage\n        // then onNodeAddChild knows how to do that and what events\n        // to fire based upon rootNode.isLoading.\n        if (rootNode.children?.length || me.rootVisible) {\n            rootNode.isLoading = true;\n            me.onNodeAddChild(rootNode, rootNode.children || [], 0);\n            rootNode.isLoading = false;\n        }\n        me.trigger('rootChange', { oldRoot, rootNode });\n    }\n    /**\n     * Sets data in the store.\n     *\n     * Expects an array of JavaScript objects, with properties matching store's fields (defined on its\n     * {@link #config-modelClass model} or in the {@link #config-fields} config).\n     *\n     * Called on initialization if data is in config otherwise call it yourself after ajax call etc. Can also be used to\n     * get the raw original data.\n     *\n     * ```javascript\n     * store.data = [\n     *     { id : 1, name : 'Linda', city : 'NY' },\n     *     { id : 2, name : 'Olivia', city : 'Paris' },\n     *     ...\n     * ];\n     * ```\n     *\n     * @property {Object[]}\n     * @fires refresh\n     * @fires change\n     * @category Records\n     */\n    set data(data) {\n        this.setStoreData(data);\n    }\n    // For overridability in engine\n    setStoreData(data) {\n        const\n            me                         = this,\n            { idField, childrenField } = me.modelClass;\n        // Take a peek at first data row, and clone data if we are provided immutable objects\n        if (me.transformFlatData && data?.length > 0 && !Object.isExtensible(data[0])) {\n            // Avoid cloning object again in Model\n            me.useRawData = me.useRawData || {\n                disableDuplicateIdCheck : false,\n                disableDefaultValue     : false,\n                disableTypeConversion   : false\n            };\n            data          = ObjectHelper.clone(data);\n        }\n        // Make sure that if the plugins have not been processed yet, we call\n        // the temporary property getter which configuration injects to\n        // process plugins at this point. Some plugins are required to\n        // operate on incoming data.\n        me.getConfig('plugins');\n        // In case data is loaded during configuration before configuredListeners have been processed\n        me.processConfiguredListeners();\n        // Allow data as a \"named object\", using keys as ids\n        if (data && !Array.isArray(data)) {\n            data = ObjectHelper.transformNamedObjectToArray(data, idField);\n        }\n        // Convert to being a tree store if any of the new rows have a children property\n        me.tree = !me.isChained && (me.tree || Boolean(me.autoTree && data?.some(r => r[childrenField])));\n        // Store received data order to preserve on sort if remote data loading enabled\n        if (data && (me.remoteSort || me.remoteFilter)) {\n            for (let i = 0; i < data.length; i++) {\n                data[i]._remoteSortIndex = i;\n            }\n        }\n        // Always load a new dataset initially\n        if (!me.syncDataOnLoad || !me._data) {\n            me._data = data;\n            // This means load the root node\n            if (me.tree) {\n                if (me.transformFlatData) {\n                    data = me.treeifyFlatData(data);\n                }\n                const root = me.rootNode;\n                root.isLoading = true;\n                // Remove data parentId before clearing\n                me._data.forEach(record => delete record.parentId);\n                // clear silently without marking as removed\n                me.clear(true);\n                // Append child will detect that this is a dataset operation and trigger sort + events needed\n                root.appendChild(data);\n                me.updateDependentStores('dataset', [root]);\n                root.isLoading = false;\n                if (data.length === 0) {\n                    const event = { action : 'dataset', data : [], records : [] };\n                    me.trigger('refresh', event);\n                    me.trigger('change', event);\n                }\n                // we must re-apply filters for the filtered tree store\n                else if (me.isFiltered) {\n                    me.filter();\n                }\n            }\n            else {\n                me.loadData(data);\n            }\n            // loading the store discards all tracked changes\n            me.added.clear();\n            me.removed.clear();\n            me.modified.clear();\n        }\n        // Sync dataset if configured to do so\n        else {\n            me.syncDataset(data);\n        }\n    }\n    loadData(data, action = 'dataset') {\n        const\n            me                     = this,\n            { storage, allowNoId } = me,\n            idField                = me.modelClass.fieldMap.id.dataSource,\n            creatingRecord         = me.find(rec => rec.isCreating);\n        if (creatingRecord) {\n            storage.values.splice(me.records.indexOf(creatingRecord), 1);\n        }\n        let warnGenerated = me.verifyNoGeneratedIds;\n        // Need to unregister all groups\n        me.removeHeadersAndFooters(me.storage.values);\n        me._idMap   = null;\n        me.oldIdMap = {};\n        if (data) {\n            const isRaw = !(data[0] instanceof Model);\n            if (isRaw) {\n                me.modelClass.exposeProperties(data[0]);\n                const\n                    count   = data.length,\n                    records = new Array(count);\n                for (let i = 0; i < count; i++) {\n                    const recordData = data[i];\n                    if (!allowNoId && recordData[idField] == null) {\n                        throw new Error(`Id required but not found on row ${i}`);\n                    }\n                    if (warnGenerated && recordData[idField]?.startsWith?.('_generated')) {\n                        console.warn(`Generated id found in data: ${recordData[idField]}. Generated ids are temporary and should be replaced with real ids by the backend`);\n                        warnGenerated = false;\n                    }\n                    records[i] = me.processRecord(me.createRecord(recordData, true), true);\n                    records[i].setData('parentIndex', i);\n                }\n                // clear without marking as removed\n                me.clear(true);\n                // Allow Collection's own filters to work on the Collection by\n                // passing the isNewDataset param as true.\n                // The storage Collection may have been set up with its own filters\n                // while we are doing remote filtering. An example is ComboBox\n                // with filterSelected: true. Records which are in the selection are\n                // filtered out of visibility using a filter directly in the Combobox's\n                // Store's Collection.\n                storage.replaceValues({\n                    values       : records,\n                    isNewDataset : true,\n                    silent       : true\n                });\n            }\n            else {\n                // clear without marking as removed\n                me.clear(true);\n                storage.replaceValues({\n                    values       : data.slice(),\n                    isNewDataset : true,\n                    silent       : true\n                });\n            }\n            if (creatingRecord) {\n                storage.values.push(creatingRecord);\n            }\n            me._data = data;\n            me.onDataReplaced(action, data);\n        }\n        else {\n            // clear without marking as removed\n            me.clear(true);\n            me._data = null;\n        }\n        me.isSyncingDataOnLoad = false;\n    }\n    get data() {\n        return this._data;\n    }\n    /**\n     * Creates an array of records from this store from the `start` to the `end' - 1\n     * @param {Number} [start] The index of the first record to return\n     * @param {Number} [end] The index *after* the last record to return `(start + length)`\n     * @returns {Core.data.Model[]} The requested records.\n     * @category Records\n     */\n    getRange(start, end, all = true) {\n        return (all ? this.storage.allValues : this.storage.values).slice(start, end);\n    }\n    /**\n     * Creates a model instance, used internally when data is set/added. Override this in a subclass to do your own custom\n     * conversion from data to record.\n     * @param {Object} data Json data\n     * @param {Boolean} [skipExpose=false] Supply true when batch setting to not expose properties multiple times\n     * @category Records\n     */\n    createRecord(data, skipExpose = false, rawData = false) {\n        return new this.modelClass(data, this, null, skipExpose, false, rawData);\n    }\n    processRecord(record, isDataset = false) {\n        return record;\n    }\n    refreshData() {\n        this.filter();\n        this.sort();\n    }\n    onRecordIdChange({ record, oldValue, value }) {\n        const\n            me                       = this,\n            idMap                    = me._idMap,\n            { idRegister, oldIdMap } = me;\n        me.storage._indicesInvalid = true;\n        // Remember the record used to have this identifier\n        // this is used by STM to understand when a foreign key\n        // value update really means targeting other record or\n        // it's just a reaction to the target record id change\n        oldIdMap[oldValue] = record;\n        // Update idMap to reflect the changed id. Some code paths (auto syncing changes with CrudManager) will lead to\n        // idMap already being up-to-date when we get here\n        if (idMap && !idMap[value]) {\n            const entry = idMap[oldValue];\n            delete idMap[oldValue];\n            idMap[value] = entry;\n        }\n        me.added.changeId(oldValue, value);\n        me.removed.changeId(oldValue, value);\n        me.modified.changeId(oldValue, value);\n        delete idRegister[oldValue];\n        idRegister[value] = record;\n        record.index = me.storage.indexOf(record);\n    }\n    onUpdateRecord(record, changes) {\n        const\n            me                     = this,\n            { internalId }         = changes,\n            { internalIdRegister } = me;\n        if (internalId) {\n            this.storage._indicesInvalid = true;\n            delete internalIdRegister[internalId.oldValue];\n            internalIdRegister[internalId.value] = record;\n        }\n        // Reapply filters when records change?\n        if (me.reapplyFilterOnUpdate && me.isFiltered) {\n            me.filter();\n        }\n    }\n    get useRawData() {\n        return this._useRawData;\n    }\n    set useRawData(options) {\n        if (options === true) {\n            this._useRawData = {\n                enabled                 : true,\n                disableDuplicateIdCheck : true,\n                disableTypeConversion   : true,\n                disableDefaultValue     : false\n            };\n        }\n        else {\n            this._useRawData = options ? Object.assign(options, { enabled : true }) : { enabled : false };\n        }\n    }\n    //endregion\n    //region Count\n    /**\n     * Number of records in the store\n     * @param {Boolean} [countProcessed] Count processed (true) or real records (false)\n     * @returns {Number} Record count\n     * @category Records\n     */\n    getCount(countProcessed = true) {\n        return countProcessed ? this.count : this.originalCount;\n    }\n    /**\n     * Record count, for data records. Not including records added for group headers etc.\n     * @property {Number}\n     * @readonly\n     * @category Records\n     */\n    get originalCount() {\n        return this.storage.totalCount - (this.groupRecords?.length || 0);\n    }\n    /**\n     * Record count, including records added for group headers etc.\n     * @property {Number}\n     * @readonly\n     * @category Records\n     */\n    get count() {\n        return this.storage.count;\n    }\n    /**\n     * Returns the complete dataset size regardless of tree node collapsing or filtering\n     * @property {Number}\n     * @readonly\n     * @category Records\n     */\n    get allCount() {\n        return this.isTree ? this.rootNode.descendantCount : this.storage.totalCount;\n    }\n    //endregion\n    //region Get record(s)\n    /**\n     * Returns all \"visible\" records.\n     * **Note:** The returned value **may not** be mutated!\n     * @property {Core.data.Model[]}\n     * @readonly\n     * @immutable\n     * @category Records\n     */\n    get records() {\n        return this.storage.values;\n    }\n    /**\n     * Get the first record in the store.\n     * @property {Core.data.Model}\n     * @readonly\n     * @category Records\n     */\n    get first() {\n        return this.storage.values[0];\n    }\n    /**\n     * Get the last record in the store.\n     * @property {Core.data.Model}\n     * @readonly\n     * @category Records\n     */\n    get last() {\n        return this.storage.values[this.storage.values.length - 1];\n    }\n    /**\n     * Get the record at the specified index\n     * @param {Number} index Index for the record\n     * @returns {Core.data.Model} Record at the specified index\n     * @category Records\n     */\n    getAt(index, all = false) {\n        // all means include filtered out records\n        return this.storage.getAt(index, all);\n    }\n    // These are called by Model#join and Model#unjoin\n    // register a record as a findable member keyed by id and internalId\n    register(record) {\n        const me = this;\n        if (!me.useRawData.disableDuplicateIdCheck) {\n            // Test for duplicate IDs on register only when a tree store.\n            // loadData does it in the case of a non-tree\n            const existingRec = me.isTree && me.idRegister[record.id];\n            if (existingRec && existingRec !== record) {\n                throw new Error(`Id collision on ${record.id}`);\n            }\n        }\n        me.idRegister[record.id]                 = record;\n        me.internalIdRegister[record.internalId] = record;\n    }\n    unregister(record) {\n        delete this.idRegister[record.id];\n        delete this.internalIdRegister[record.internalId];\n    }\n    get registeredRecords() {\n        return Object.values(this.idRegister);\n    }\n    /**\n     * Get a record by id. Find the record even if filtered out, part of collapsed group or collapsed node\n     * @param {Core.data.Model|String|Number} id Id of record to return.\n     * @returns {Core.data.Model} A record with the specified id\n     * @category Records\n     */\n    getById(id) {\n        // In case `id` is a record, we use its ID to try to find the record in the store,\n        // because if the record is removed from the store it shouldn't be found.\n        // if (id instanceof Model) {\n        //     id = id.id;\n        // }\n        if (id?.isModel) {\n            const record = id;\n            // When asking for a record that has links, we resolve first link if original is not found.\n            // This allows `linkedStore.isAvailable(original)` to return true and `linkedStore.getById(original)` to\n            // return the linked record.\n            if (record.hasLinks && !this.storage.allValues.includes(record)) {\n                return record.$links.find(r => this.storage.allValues.includes(r));\n            }\n            return record;\n        }\n        //return this.tree ? this.idRegister[id] : this.storage.get(id);\n        return this.idRegister[id];\n    }\n    /**\n     * Checks if a record is available, in the sense that it is not filtered out,\n     * hidden in a collapsed group or in a collapsed node.\n     * @param {Core.data.Model|String|Number} recordOrId Record to check\n     * @returns {Boolean}\n     * @category Records\n     */\n    isAvailable(recordOrId) {\n        const record = this.getById(recordOrId);\n        return record && this.storage.includes(record) || false;\n    }\n    /**\n     * Get a record by internalId.\n     * @param {Number} internalId The internalId of the record to return\n     * @returns {Core.data.Model} A record with the specified internalId\n     * @category Records\n     */\n    getByInternalId(internalId) {\n        return this.internalIdRegister[internalId];\n    }\n    /**\n     * Checks if the specified record is contained in the store\n     * @param {Core.data.Model|String|Number} recordOrId Record, or `id` of record\n     * @returns {Boolean}\n     * @category Records\n     */\n    includes(recordOrId) {\n        if (this.isTree) {\n            return this.idRegister[Model.asId(recordOrId)] != null;\n        }\n        return this.indexOf(recordOrId) > -1;\n    }\n    //endregion\n    //region Get index\n    /**\n     * Returns the index of the specified record/id, or `-1` if not found.\n     * @param {Core.data.Model|String|Number} recordOrId Record, or `id` of record to return the index of.\n     * @param {Boolean} [visibleRecords] Pass `true` to find the visible index.\n     * as opposed to the dataset index. This omits group header records.\n     * @param {Boolean} [allExceptFilteredOutRecords] For trees, when true this searches all except filtered out records\n     * in the flattened tree, similar to a flat store.\n     * @returns {Number} Index for the record/id, or `-1` if not found.\n     * @category Records\n     */\n    indexOf(recordOrId, visibleRecords = false, allExceptFilteredOutRecords = false) {\n        // Only check records actually in the store ($store is for objectify scenario)\n        if (recordOrId?.isModel && !recordOrId.stores.includes(this.$store || this)) {\n            // When asking for a record that has links, we resolve first link if original is not found.\n            // This allows finding index for links using relations to original records (dep -> event for example)\n            const linkedRecord = recordOrId.$links.find(r => this.storage.allValues.includes(r));\n            if (linkedRecord) {\n                return this.indexOf(linkedRecord, visibleRecords);\n            }\n            return -1;\n        }\n        // When a tree, indexOf is always in the visible records - filtering is different in trees.\n        if (this.isTree) {\n            // Cheaper than this.storage.indexOf() which takes a detour to result in the same call\n            return (allExceptFilteredOutRecords ? this.rootNode.allChildren : this.storage.values).indexOf(this.getById(recordOrId));\n        }\n        const id = Model.asId(recordOrId);\n        if (id == null) {\n            return -1;\n        }\n        const found = this.idMap[id];\n        return found ? found[visibleRecords ? 'visibleIndex' : 'index'] : -1;\n    }\n    allIndexOf(recordOrId) {\n        if (this.isTree) {\n            return this.allRecords.indexOf(this.getById(recordOrId));\n        }\n        else {\n            return this.storage.indexOf(recordOrId, true);\n        }\n    }\n    //endregion\n    //region Get values\n    /**\n     * Returns an array of distinct values for the specified field.\n     *\n     * ```javascript\n     * store.getDistinctValues('age'); // Returns an array of the unique age values\n     * ```\n     *\n     * @param {String} field Field to extract values for\n     * @param {Boolean} [searchAllRecords] True to ignore any applied filters\n     * @returns {Array} Array of values\n     * @category Values\n     */\n    getDistinctValues(field, searchAllRecords = false) {\n        const\n            me     = this,\n            values = [],\n            keys   = {};\n        let value;\n        me.forEach(r => {\n            if (!r.isSpecialRow && !r.isRoot) {\n                value                = r.get(field);\n                const primitiveValue = value instanceof Date ? value.getTime() : value;\n                if (!keys[primitiveValue]) {\n                    values.push(value);\n                    keys[primitiveValue] = 1;\n                }\n            }\n        }, me, searchAllRecords);\n        return values;\n    }\n    /**\n     * Counts how many times the specified value appears in the store\n     * @param {String} field Field to look in\n     * @param {*} value Value to look for\n     * @returns {Number} Found count\n     * @category Values\n     */\n    getValueCount(field, value) {\n        let count = 0;\n        this.forEach(r => {\n            if (ObjectHelper.isEqual(r.get(field), value)) count++;\n        });\n        return count;\n    }\n    //endregion\n    //region JSON & console\n    /**\n     * Retrieve or set the data of all records as a JSON string\n     *\n     * ```javascript\n     * const store = new Store({\n     *     data : [\n     *         { id : 1, name : 'Superman' },\n     *         { id : 2, name : 'Batman' }\n     *     ]\n     * });\n     *\n     * const jsonString = store.json;\n     *\n     * //jsonString:\n     * '[{\"id\":1,\"name\":\"Superman\"},{\"id\":2,\"name\":\"Batman\"}]\n     * ```\n     *\n     * @property {String}\n     */\n    set json(json) {\n        if (typeof json === 'string') {\n            json = StringHelper.safeJsonParse(json);\n        }\n        this.data = json;\n    }\n    get json() {\n        return StringHelper.safeJsonStringify(this);\n    }\n    /**\n     * Pretty printed version of {@link #property-json}\n     * @readonly\n     * @property {String}\n     */\n    get formattedJSON() {\n        return StringHelper.safeJsonStringify(this, null, 4);\n    }\n    /**\n     * Retrieve the data of all (unfiltered) records as an array of JSON objects.\n     *\n     * ```javascript\n     * const store = new Store({\n     *     data : [\n     *         { id : 1, name : 'Superman' },\n     *         { id : 2, name : 'Batman' }\n     *     ]\n     * });\n     *\n     * const jsonArray = store.toJSON();\n     *\n     * //jsonArray:\n     * [{id:1,name:\"Superman\"},{id:2,name:\"Batman\"}]\n     * ```\n     *\n     * @returns {Object[]}\n     */\n    toJSON() {\n        // extract entire structure.\n        // If we're a tree, then that consists of the payload of the rootNode.\n        return (this.isTree ? this.rootNode.unfilteredChildren || this.rootNode.children || [] : this.allRecords).map(record => record.toJSON());\n    }\n    //endregion\n    //region Extract config\n    // These functions are not meant to be called by any code other than Base#getCurrentConfig()\n    preProcessCurrentConfigs(configs) {\n        super.preProcessCurrentConfigs(configs);\n        delete configs.project;\n    }\n    // Extract current data for all accessible records\n    getInlineData(options) {\n        const data = [];\n        if (this.tree) {\n            this.rootNode.children?.forEach(r => data.push(r.getCurrentConfig(options)));\n        }\n        else {\n            this.forEach(r => data.push(r.getCurrentConfig(options)));\n        }\n        return data;\n    }\n    // Extract current configs and data\n    getCurrentConfig(options) {\n        const\n            result    = super.getCurrentConfig(options),\n            { state } = this;\n        if (result) {\n            // Replace initial data with values from current records\n            if (result.data) {\n                result.data = this.getInlineData(options);\n            }\n            // Never include project or stm\n            delete result.project;\n            delete result.stm;\n            delete result.asyncEvents;\n            // Exclude default modelClass, gets added to config by engine, spam\n            if (result.modelClass?.$meta.hierarchy[result.modelClass.$meta.hierarchy.length - 2] === this.constructor.defaultConfig.modelClass) {\n                delete result.modelClass;\n            }\n            // Pollution from grid\n            if (!this.tree) {\n                delete result.tree;\n            }\n            // Include current state\n            if (state) {\n                Object.assign(result, state);\n            }\n        }\n        return result;\n    }\n    //endregion\n    //region Iteration & traversing\n    /**\n     * Iterates over all normal records in store. Omits group header and footer records if this store is grouped.\n     * @param {Function} fn A function that is called for each record. Returning `false` from that function cancels\n     * iteration. It is called with the following arguments:\n     * @param {Core.data.Model} fn.record Current record\n     * @param {Number} fn.index Current index\n     * @param {Object} [thisObj] `this` reference for the function\n     * @param {Object|Boolean} [options] A boolean for `includeFilteredOutRecords`, or detailed options for\n     * exclude/include records\n     * @param {Boolean} [options.includeFilteredOutRecords] `true` to also include filtered out records\n     * @param {Boolean} [options.includeCollapsedGroupRecords] `true` to also include records from collapsed groups of\n     * grouped store\n     * @category Iteration\n     */\n    forEach(fn, thisObj = this, options) {\n        const\n            me       = this,\n            callback = (r, i) => {\n                if (!r.isRoot && !r.isSpecialRow) {\n                    return fn.call(thisObj, r, i);\n                }\n            };\n        options = fixTraverseOptions(me, options);\n        if (me.isTree) {\n            // forEach uses traverse() but is not perceived as a tree walk, so we want to apply our sorter\n            if (me.isChained) {\n                options = {\n                    ...options,\n                    sorterFn : me.sorterFn\n                };\n            }\n            me.rootNode.traverseWhile(callback, false, options);\n        }\n        else {\n            // native forEach cannot be aborted by returning false, have to loop \"manually\"\n            const records = options.includeFilteredOutRecords ? me.storage.allValues : me.storage.values;\n            // grouped store has own tree-like structure, but cannot be handled like a regular tree\n            if (me.isGrouped && options.includeCollapsedGroupRecords) {\n                for (let i = 0; i < records.length; i++) {\n                    const\n                        record        = records[i],\n                        groupChildren = options.includeFilteredOutRecords ? record.unfilteredGroupChildren : record.groupChildren;\n                    if (groupChildren && record.meta.collapsed === true) {\n                        for (let j = 0; j < groupChildren.length; j++) {\n                            const rec = groupChildren[j];\n                            if (callback(rec, j) === false) {\n                                return;\n                            }\n                        }\n                    }\n                    else if (callback(record, i) === false) {\n                        return;\n                    }\n                }\n            }\n            else {\n                for (let i = 0; i < records.length; i++) {\n                    if (callback(records[i], i) === false) {\n                        return;\n                    }\n                }\n            }\n        }\n    }\n    /**\n     * Equivalent to Array.map(). Creates a new array with the results of calling a provided function on every record\n     * @param {Function} fn\n     * @returns {Array}\n     * @category Iteration\n     */\n    map(fn, thisObj = this) {\n        return this.storage.values.map(fn, thisObj);\n    }\n    /**\n     * Equivalent to Array.every(). Returns `true` if every call of the provided function\n     * on each record yields a truthy value.\n     * @param {Function} fn\n     * @param {Function} fn.record The record to test.\n     * @param {Object} [thisObj] The `this` reference to call the function with. Defaults to this Store.\n     * @param {Boolean} [ignoreFilters] Pass `true` to iterate all records including filtered out ones.\n     * @returns {Array}\n     * @category Iteration\n     */\n    every(fn, thisObj = this, ignoreFilters) {\n        return this.storage[ignoreFilters ? 'allValues' : 'values'].every(fn, thisObj);\n    }\n    /**\n     * Equivalent to Array.reduce(). Applies a function against an accumulator and each record (from left to right) to\n     * reduce it to a single value.\n     * @param {Function} fn\n     * @param {*} initialValue\n     * @returns {*}\n     * @category Iteration\n     */\n    reduce(fn, initialValue = [], thisObj = this) {\n        if (thisObj !== this) {\n            fn = fn.bind(thisObj);\n        }\n        return this.storage.values.reduce(fn, initialValue, thisObj);\n    }\n    /**\n     * Iterator that allows you to do for (let record of store)\n     * @category Iteration\n     */\n    [Symbol.iterator]() {\n        return this.storage.values[Symbol.iterator]();\n    }\n    /**\n     * Traverse all tree nodes (only applicable for Tree Store)\n     * @param {Function} fn The function to call on visiting each node.\n     * @param {Core.data.Model} [topNode=this.rootNode] The top node to start the traverse at.\n     * @param {Boolean} [skipTopNode] Pass true to not call `fn` on the top node, but proceed directly to its children.\n     * @param {Object|Boolean} [options] A boolean for includeFilteredOutRecords, or detailed options for exclude/include records\n     * @param {Boolean} [options.includeFilteredOutRecords] True to also include filtered out records\n     * @param {Boolean} [options.includeCollapsedGroupRecords] True to also include records from collapsed groups of grouped store\n     * @param {Boolean} [options.useOrderedTree] True to traverse unsorted/unfiltered tree\n     * @category Traverse\n     */\n    traverse(fn, topNode = this.rootNode, skipTopNode = topNode === this.rootNode, options) {\n        const me = this;\n        options = fixTraverseOptions(me, options);\n        if (me.isTree) {\n            // Allow store.traverse(fn, true) to start from rootNode\n            if (typeof topNode === 'boolean') {\n                skipTopNode = topNode;\n                topNode     = me.rootNode;\n            }\n            if (me.isChained) {\n                const passedFn = fn;\n                fn = node => {\n                    if (me.chainedFilterFn(node)) {\n                        passedFn(node);\n                    }\n                };\n            }\n            topNode.traverse(fn, skipTopNode, options);\n        }\n        else {\n            me.forEach(rec => rec.traverse(fn, false, options), me, options);\n        }\n    }\n    /**\n     * Traverse all tree nodes while the passed `fn` returns true\n     * @param {Function} fn The function to call on visiting each node. Returning `false` from it stops the traverse.\n     * @param {Core.data.Model} [topNode=this.rootNode] The top node to start the traverse at.\n     * @param {Boolean} [skipTopNode] Pass true to not call `fn` on the top node, but proceed directly to its children.\n     * @param {Object} [options] An options object to exclude/include records\n     * @param {Boolean} [options.includeFilteredOutRecords] True to also include filtered out records\n     * @param {Boolean} [options.includeCollapsedGroupRecords] True to also include records from collapsed groups of grouped store\n     * @category Traverse\n     */\n    traverseWhile(fn, topNode = this.rootNode, skipTopNode = topNode === this.rootNode, options) {\n        const me = this;\n        options = fixTraverseOptions(me, options);\n        if (me.isTree) {\n            // Allow store.traverse(fn, true) to start from rootNode\n            if (typeof topNode === 'boolean') {\n                skipTopNode = topNode;\n                topNode     = me.rootNode;\n            }\n            if (me.isChained) {\n                const passedFn = fn;\n                fn = node => {\n                    if (me.chainedFilterFn(node)) {\n                        passedFn(node);\n                    }\n                };\n            }\n            topNode.traverseWhile(fn, skipTopNode, options);\n        }\n        else {\n            for (const record of me.storage) {\n                if (record.traverse(fn, false, options) === false) {\n                    break;\n                }\n            }\n        }\n    }\n    /**\n     * Finds the next record.\n     * @param {Core.data.Model|String|Number} recordOrId Current record or its id\n     * @param {Boolean} [wrap=false] Wrap at start/end or stop there\n     * @param {Boolean} [skipSpecialRows=false] True to not return specialRows like group headers\n     * @returns {Core.data.Model} Next record or null if current is the last one\n     * @category Traverse\n     */\n    getNext(recordOrId, wrap = false, skipSpecialRows = false) {\n        const\n            me      = this,\n            records = me.storage.values;\n        let idx     = me.indexOf(recordOrId);\n        if (idx >= records.length - 1) {\n            if (wrap) {\n                idx = -1;\n            }\n            else {\n                return null;\n            }\n        }\n        const record = records[idx + 1];\n        // Skip the result if it's a specialRow and we are told to skip them\n        if (skipSpecialRows && record && record.isSpecialRow) {\n            return me.getNext(records[idx + 1], wrap, true);\n        }\n        return record;\n    }\n    /**\n     * Finds the previous record.\n     * @param {Core.data.Model|String|Number} recordOrId Current record or its id\n     * @param {Boolean} [wrap=false] Wrap at start/end or stop there\n     * @param {Boolean} [skipSpecialRows=false] True to not return specialRows like group headers\n     * @returns {Core.data.Model} Previous record or null if current is the last one\n     * @category Traverse\n     */\n    getPrev(recordOrId, wrap = false, skipSpecialRows = false) {\n        const\n            me      = this,\n            records = me.storage.values;\n        let idx     = me.indexOf(recordOrId);\n        if (idx === 0) {\n            if (wrap) {\n                idx = records.length;\n            }\n            else {\n                return null;\n            }\n        }\n        const record = records[idx - 1];\n        // Skip the result if it's a specialRow and we are told to skip them\n        if (skipSpecialRows && record && record.isSpecialRow && idx > 0) {\n            return me.getPrev(records[idx - 1], wrap, true);\n        }\n        return record;\n    }\n    /**\n     * Gets the next or the previous record. Optionally wraps from first -> last and vice versa\n     * @param {String|Core.data.Model} recordOrId Record or records id\n     * @param {Boolean} next Next (true) or previous (false)\n     * @param {Boolean} wrap Wrap at start/end or stop there\n     * @param {Boolean} [skipSpecialRows=false] True to not return specialRows like group headers\n     * @returns {Core.data.Model}\n     * @category Traverse\n     * @internal\n     */\n    getAdjacent(recordOrId, next = true, wrap = false, skipSpecialRows = false) {\n        return next ? this.getNext(recordOrId, wrap, skipSpecialRows) : this.getPrev(recordOrId, wrap, skipSpecialRows);\n    }\n    /**\n     * Finds the next record among leaves (in a tree structure)\n     * @param {Core.data.Model|String|Number} recordOrId Current record or its id\n     * @param {Boolean} [wrap] Wrap at start/end or stop there\n     * @returns {Core.data.Model} Next record or null if current is the last one\n     * @category Traverse\n     * @internal\n     */\n    getNextLeaf(recordOrId, wrap = false) {\n        const\n            me      = this,\n            records = me.leaves,\n            record  = me.getById(recordOrId);\n        let idx     = records.indexOf(record);\n        if (idx >= records.length - 1) {\n            if (wrap) {\n                idx = -1;\n            }\n            else {\n                return null;\n            }\n        }\n        return records[idx + 1];\n    }\n    /**\n     * Finds the previous record among leaves (in a tree structure)\n     * @param {Core.data.Model|String|Number} recordOrId Current record or its id\n     * @param {Boolean} [wrap] Wrap at start/end or stop there\n     * @returns {Core.data.Model} Previous record or null if current is the last one\n     * @category Traverse\n     * @internal\n     */\n    getPrevLeaf(recordOrId, wrap = false) {\n        const\n            me      = this,\n            records = me.leaves,\n            record  = me.getById(recordOrId);\n        let idx     = records.indexOf(record);\n        if (idx === 0) {\n            if (wrap) {\n                idx = records.length;\n            }\n            else {\n                return null;\n            }\n        }\n        return records[idx - 1];\n    }\n    /**\n     * Gets the next or the previous record among leaves (in a tree structure). Optionally wraps from first -> last and\n     * vice versa\n     * @param {String|Core.data.Model} recordOrId Record or record id\n     * @param {Boolean} [next] Next (true) or previous (false)\n     * @param {Boolean} [wrap] Wrap at start/end or stop there\n     * @returns {Core.data.Model}\n     * @category Traverse\n     * @internal\n     */\n    getAdjacentLeaf(recordOrId, next = true, wrap = false) {\n        return next ? this.getNextLeaf(recordOrId, wrap) : this.getPrevLeaf(recordOrId, wrap);\n    }\n    //endregion\n}\nStore.initClass();\nStore._$name = 'Store';", "import { Mixin } from \"../../../../ChronoGraph/class/BetterMixin.js\";\nimport { AbstractPartOfProjectGenericMixin } from \"../../AbstractPartOfProjectGenericMixin.js\";\nimport Store from \"../../../../Core/data/Store.js\";\n/**\n * This an abstract mixin for every Store, that belongs to a project.\n *\n * The store with this mixin, supposes, that it will be \"joining\" the project, a reference to which is saved\n * and made available for all models.\n */\nexport class AbstractPartOfProjectStoreMixin extends Mixin([\n    AbstractPartOfProjectGenericMixin,\n    Store\n], (base) => {\n    const superProto = base.prototype;\n    class AbstractPartOfProjectStoreMixin extends base {\n        constructor() {\n            super(...arguments);\n            this.isLoadingData = false;\n            this.disableHasLoadedDataToCommitFlag = false;\n        }\n        //region Async event triggering\n        // NOTE: Tested in Scheduler (EventStore.t.js)\n        construct(config = {}) {\n            config.asyncEvents = {\n                add: true,\n                remove: true,\n                removeAll: true,\n                change: true,\n                refresh: true,\n                replace: true,\n                move: true,\n                update: true\n            };\n            return superProto.construct.call(this, config);\n        }\n        // Override for event triggering, to allow triggering events before and after some async operation.\n        // The \"before\" events are prefix, the \"after\" are not.\n        trigger(eventName, param) {\n            const me = this, { asyncEvents, project } = me, asyncEvent = asyncEvents?.[eventName], asyncAction = asyncEvent && (asyncEvent === true || asyncEvent[param.action]);\n            if (!asyncAction) {\n                // Trigger as usual\n                return superProto.trigger.call(me, eventName, param);\n            }\n            // Trigger prefixed before event\n            superProto.trigger.call(me, `${eventName}PreCommit`, { ...param });\n            // Event that did not invalidate engine, for example \"update\"\n            if (!project || project.isEngineReady() && !project.isWritingData) {\n                // Trigger \"original\" event\n                superProto.trigger.call(me, eventName, param);\n            }\n            else if (!me.eventsSuspended && project) {\n                // Instead of making n auto-destroying listeners (which takes enormous amount of time), we make a single\n                // one and queue all the events. When dataReady event is triggered we trigger those events\n                // https://github.com/bryntum/support/issues/3154\n                if (!project.dataReadyDetacher) {\n                    project.queuedDataReadyEvents = [];\n                    // Wait for commit without triggering one, otherwise we would affect commit scheduling\n                    project.dataReadyDetacher = project.ion({\n                        dataReady() {\n                            // Trigger \"original\" event\n                            this.queuedDataReadyEvents.forEach(([superProto, scope, eventName, param]) => {\n                                superProto.trigger.call(scope, eventName, param);\n                            });\n                            project.queuedDataReadyEvents = null;\n                            project.dataReadyDetacher();\n                            project.dataReadyDetacher = null;\n                        },\n                        once: true\n                    });\n                }\n                project.queuedDataReadyEvents.push([superProto, me, eventName, param]);\n            }\n            // No way of handling other return values in this scenario, won't work for preventable events\n            return true;\n        }\n        //endregion\n        calculateProject() {\n            // project is supposed to be provided for stores from outside\n            return this.project;\n        }\n        setStoreData(data) {\n            // Loading data sets hasLoadedDataToCommit flag.\n            // So we treat the 1st commit after data loading as the initial one\n            if (this.project && !(this.syncDataOnLoad || this.disableHasLoadedDataToCommitFlag)) {\n                this.project.hasLoadedDataToCommit = true;\n            }\n            this.isLoadingData = true;\n            superProto.setStoreData.call(this, data);\n            this.isLoadingData = false;\n            this.project?.trigger('storeRefresh', { store: this });\n        }\n        // Override to postpone auto commits to after project commit, makes sure records are unmodified after commit\n        async doAutoCommit() {\n            if (this.suspendCount <= 0 && this.project && !this.project.isEngineReady()) {\n                // @ts-ignore\n                await this.project.commitAsync();\n            }\n            superProto.doAutoCommit.call(this);\n        }\n        async addAsync(records, silent) {\n            const result = this.add(records, silent);\n            await this.project.commitAsync();\n            return result;\n        }\n        async insertAsync(index, records, silent) {\n            const result = this.insert(index, records, silent);\n            await this.project.commitAsync();\n            return result;\n        }\n        async loadDataAsync(data) {\n            this.data = data;\n            await this.project.commitAsync();\n        }\n        performFilter() {\n            if (this.project && (this.isLoadingData || this.rootNode?.isLoading)) {\n                // Reapply filters after calculations, in case filtering on some calculated field\n                this.project.commitAsync().then(() => this.filter());\n            }\n            return super.performFilter(...arguments);\n        }\n    }\n    return AbstractPartOfProjectStoreMixin;\n}) {\n}\n", "import { Mixin } from \"../../../../ChronoGraph/class/BetterMixin.js\";\nimport { AbstractPartOfProjectStoreMixin } from \"../../store/mixin/AbstractPartOfProjectStoreMixin.js\";\nimport { AbstractPartOfProjectGenericMixin } from \"../../AbstractPartOfProjectGenericMixin.js\";\nimport Model from \"../../../../Core/data/Model.js\";\nimport { isInstanceOf } from '../../../../ChronoGraph/class/BetterMixin.js';\n/**\n * This an abstract mixin for every Model that belongs to a project.\n *\n * The model with this mixin, supposes that it will be \"joining\" a store that is already part of a project,\n * so that such model can take a reference to the project from it.\n *\n * It provides 2 template methods [[joinProject]] and [[leaveProject]], which can be overridden in other mixins.\n */\nexport class AbstractPartOfProjectModelMixin extends Mixin([AbstractPartOfProjectGenericMixin, Model], (base) => {\n    const superProto = base.prototype;\n    class AbstractPartOfProjectModelMixin extends base {\n        joinStore(store) {\n            let joinedProject = null;\n            // Joining a store that is not part of project (for example a chained store) should not affect engine\n            if (isInstanceOf(store, AbstractPartOfProjectStoreMixin)) {\n                const project = store.getProject();\n                if (project && !this.getProject()) {\n                    this.setProject(project);\n                    joinedProject = project;\n                }\n            }\n            superProto.joinStore.call(this, store);\n            // Join directly only if not repopulating the store, in which case we will be joined later after\n            // graph has been recreated\n            if (joinedProject && !joinedProject.isRepopulatingStores)\n                this.joinProject();\n        }\n        unjoinStore(store, isReplacing = false) {\n            superProto.unjoinStore.call(this, store, isReplacing);\n            const { project } = this;\n            const isLeavingProjectStore = (isInstanceOf(store, AbstractPartOfProjectStoreMixin))\n                && !store.isFillingFromMaster && project === (store.isChained && store.project ?\n                store.masterStore.project\n                : store.project);\n            // Leave project when unjoining from store, but do not bother if the project is being destroyed or if\n            // the dataset is being replaced, or if store is chained into other project\n            if (project && !project.isDestroying && !project.isRepopulatingStores && isLeavingProjectStore) {\n                this.leaveProject(isReplacing);\n                this.setProject(null);\n            }\n            // @ts-ignore\n            if (isLeavingProjectStore)\n                this.graph = null;\n        }\n        /**\n         * Template method, which is called when model is joining the project (through joining some store that\n         * has already joined the project)\n         */\n        joinProject() { }\n        /**\n         * Template method, which is called when model is leaving the project (through leaving some store usually)\n         */\n        leaveProject(isReplacing = false) { }\n        calculateProject() {\n            const store = this.stores.find(s => (isInstanceOf(s, AbstractPartOfProjectStoreMixin)) && !!s.getProject());\n            return store?.getProject();\n        }\n        async setAsync(fieldName, value, silent) {\n            const result = this.set(fieldName, value, silent);\n            await this.project?.commitAsync();\n            return result;\n        }\n        async getAsync(fieldName) {\n            await this.project?.commitAsync();\n            return this.get(fieldName);\n        }\n        get isStmRestoring() {\n            const project = this.getProject();\n            return project?.isRestoringData || project?.stm.isRestoring || false;\n        }\n    }\n    return AbstractPartOfProjectModelMixin;\n}) {\n}\n", "import { Mixin } from \"../../ChronoGraph/class/BetterMixin.js\";\nimport later from \"../vendor/later/later.js\";\nimport { AbstractPartOfProjectModelMixin } from \"../quark/model/mixin/AbstractPartOfProjectModelMixin.js\";\n/**\n * This is a calendar interval mixin.\n *\n * Can be either a static time interval (if [[startDate]]/[[endDate]] are specified) or recurrent time interval\n * ([[recurrentStartDate]]/[[recurrentEndDate]]).\n *\n * By default it defines a non-working period ([[isWorking]] field has default value `false`),\n * but can also define an explicit working time, for example to override some previous period.\n *\n * You probably don't need to create instances of this mixin directly, instead you pass its configuration object to the [[AbstractCalendarMixin.addInterval]]\n */\nexport class CalendarIntervalMixin extends Mixin([AbstractPartOfProjectModelMixin], (base) => {\n    const superProto = base.prototype;\n    class CalendarIntervalMixin extends base {\n        static get fields() {\n            return [\n                'name',\n                { name: 'startDate', type: 'date' },\n                { name: 'endDate', type: 'date' },\n                'recurrentStartDate',\n                'recurrentEndDate',\n                'cls',\n                'iconCls',\n                { name: 'isWorking', type: 'boolean', defaultValue: false },\n                { name: 'priority', type: 'number' }\n            ];\n        }\n        getCalendar() {\n            return this.stores[0].calendar;\n        }\n        resetPriority() {\n            this.priorityField = null;\n            this.getCalendar().getDepth();\n        }\n        // not just `getPriority` to avoid clash with auto-generated getter in the subclasses\n        getPriorityField() {\n            if (this.priorityField != null)\n                return this.priorityField;\n            // 0 - 10000 interval is reserved for \"unspecified time\" intervals\n            // then 10000 - 10100, 10100-10200, ... etc intervals are for the calendars at depth 0, 1, ... etc\n            let base = 10000 + this.getCalendar().getDepth() * 100;\n            let priority = this.priority;\n            if (priority == null) {\n                // recurrent intervals are considered \"base\" and have lower priority\n                // static intervals are considered special case overrides and have higher priority\n                priority = this.isRecurrent() ? 20 : 30;\n            }\n            // intervals from parent calendars will have lower priority\n            return this.priorityField = base + priority;\n        }\n        /**\n         * Whether this interval is recurrent (both [[recurrentStartDate]] and [[recurrentEndDate]] are present and parsed correctly\n         * by the `later` library)\n         */\n        isRecurrent() {\n            return Boolean(this.recurrentStartDate && this.recurrentEndDate && this.getStartDateSchedule() && this.getEndDateSchedule());\n        }\n        /**\n         * Whether this interval is static - both [[startDate]] and [[endDate]] are present.\n         */\n        isStatic() {\n            return Boolean(this.startDate && this.endDate);\n        }\n        /**\n         * Helper method to parse [[recurrentStartDate]] and [[recurrentEndDate]] field values.\n         * @param {Object|String} schedule Recurrence schedule\n         * @returns {Object} Processed schedule ready to be used by later.schedule() method.\n         * @private\n         */\n        parseDateSchedule(value) {\n            let schedule = value;\n            if (value && value !== Object(value)) {\n                schedule = later.parse.text(value);\n                if (schedule !== Object(schedule) || schedule.error >= 0) {\n                    // can be provided as JSON text\n                    try {\n                        schedule = JSON.parse(value);\n                    }\n                    catch (e) {\n                        return null;\n                    }\n                }\n            }\n            return schedule;\n        }\n        getStartDateSchedule() {\n            if (this.startDateSchedule)\n                return this.startDateSchedule;\n            const schedule = this.parseDateSchedule(this.recurrentStartDate);\n            return this.startDateSchedule = later.schedule(schedule);\n        }\n        getEndDateSchedule() {\n            if (this.endDateSchedule)\n                return this.endDateSchedule;\n            if (this.recurrentEndDate === 'EOD')\n                return 'EOD';\n            const schedule = this.parseDateSchedule(this.recurrentEndDate);\n            return this.endDateSchedule = later.schedule(schedule);\n        }\n    }\n    return CalendarIntervalMixin;\n}) {\n}\n", "import { Mixin } from \"../../ChronoGraph/class/BetterMixin.js\";\nimport { CalendarIntervalMixin } from \"./CalendarIntervalMixin.js\";\nimport { AbstractPartOfProjectStoreMixin } from \"../quark/store/mixin/AbstractPartOfProjectStoreMixin.js\";\n/**\n * This a collection of [[CalendarIntervalMixin]] items. Its a dumb collection though, the \"real\" calendar\n * is a [[AbstractCalendarMixin]] model, which is part of the [[AbstractCalendarManagerStoreMixin]].\n */\nexport class CalendarIntervalStore extends Mixin([AbstractPartOfProjectStoreMixin], (base) => {\n    const superProto = base.prototype;\n    class CalendarIntervalStore extends base {\n        constructor() {\n            super(...arguments);\n            this.disableHasLoadedDataToCommitFlag = true;\n        }\n        static get defaultConfig() {\n            return {\n                modelClass: CalendarIntervalMixin\n            };\n        }\n    }\n    return CalendarIntervalStore;\n}) {\n}\n", "import { Mixin } from \"../../ChronoGraph/class/BetterMixin.js\";\nimport { CalendarIntervalMixin } from \"./CalendarIntervalMixin.js\";\n// Calendar interval model denoting unspecified interval\nexport class UnspecifiedTimeIntervalModel extends Mixin([CalendarIntervalMixin], (base) => {\n    const superProto = base.prototype;\n    class UnspecifiedTimeIntervalModel extends base {\n        getCalendar() {\n            return this.calendar;\n        }\n        // NOTE: See parent class implementation for further comments\n        getPriorityField() {\n            if (this.priorityField != null)\n                return this.priorityField;\n            return this.priorityField = this.getCalendar().getDepth();\n        }\n    }\n    return UnspecifiedTimeIntervalModel;\n}) {\n}\n", "import { Mixin } from \"../../ChronoGraph/class/BetterMixin.js\";\nimport { AbstractPartOfProjectGenericMixin } from \"./AbstractPartOfProjectGenericMixin.js\";\n/**\n * This a base generic mixin for every class, that belongs to a scheduler_core project.\n *\n * It just provides getter/setter for the `project` property, along with some convenience methods\n * to access the project's stores.\n */\nexport class CorePartOfProjectGenericMixin extends Mixin([AbstractPartOfProjectGenericMixin], (base) => {\n    const superProto = base.prototype;\n    class CorePartOfProjectGenericMixin extends base {\n        //region Store getters\n        get eventStore() {\n            return this.project?.eventStore;\n        }\n        get resourceStore() {\n            return this.project?.resourceStore;\n        }\n        get assignmentStore() {\n            return this.project?.assignmentStore;\n        }\n        get dependencyStore() {\n            return this.project?.dependencyStore;\n        }\n        get calendarManagerStore() {\n            return this.project?.calendarManagerStore;\n        }\n        //endregion\n        //region Entity getters\n        /**\n         * Convenience method to get the instance of event by its id.\n         */\n        getEventById(id) {\n            return this.eventStore?.getById(id);\n        }\n        /**\n         * Convenience method to get the instance of dependency by its id.\n         */\n        getDependencyById(id) {\n            return this.dependencyStore?.getById(id);\n        }\n        /**\n         * Convenience method to get the instance of resource by its id.\n         */\n        getResourceById(id) {\n            return this.resourceStore?.getById(id);\n        }\n        /**\n         * Convenience method to get the instance of assignment by its id.\n         */\n        getAssignmentById(id) {\n            return this.assignmentStore?.getById(id);\n        }\n        /**\n         * Convenience method to get the instance of calendar by its id.\n         */\n        getCalendarById(id) {\n            return this.calendarManagerStore?.getById(id);\n        }\n    }\n    return CorePartOfProjectGenericMixin;\n}) {\n}\n", "import { Mixin } from \"../../../ChronoGraph/class/BetterMixin.js\";\nimport { CalendarIntervalStore } from \"../../calendar/CalendarIntervalStore.js\";\nimport { CalendarIteratorResult } from \"../../calendar/CalendarCache.js\";\nimport { TimeUnit } from \"../../scheduling/Types.js\";\nimport { CalendarCacheSingle } from \"../../calendar/CalendarCacheSingle.js\";\nimport { UnspecifiedTimeIntervalModel } from \"../../calendar/UnspecifiedTimeIntervalModel.js\";\nimport DateHelper from \"../../../Core/helper/DateHelper.js\";\nimport { AbstractPartOfProjectModelMixin } from \"./mixin/AbstractPartOfProjectModelMixin.js\";\n/**\n * Calendar for project scheduling, mixed by CoreCalendarMixin and BaseCalendarMixin. It is used to mark certain time\n * intervals as \"non-working\" and ignore them during scheduling.\n *\n * The calendar consists from several [[CalendarIntervalMixin|intervals]]. The intervals can be either static or recurrent.\n */\nexport class AbstractCalendarMixin extends Mixin([AbstractPartOfProjectModelMixin], (base) => {\n    const superProto = base.prototype;\n    class CalendarMixin extends base {\n        constructor() {\n            super(...arguments);\n            this.version = 1;\n        }\n        // intervalStore            : CalendarIntervalStore\n        static get fields() {\n            return [\n                { name: 'version', type: 'number' },\n                'name',\n                { name: 'unspecifiedTimeIsWorking', type: 'boolean', defaultValue: true },\n                { name: 'intervals', type: 'store', subStore: true },\n                'cls',\n                'iconCls'\n            ];\n        }\n        get intervalStoreClass() {\n            return CalendarIntervalStore;\n        }\n        get intervalStore() {\n            // @ts-ignore\n            return this.meta.intervalsStore;\n        }\n        // Not a typo, name is generated from the fields name = intervals\n        initIntervalsStore(config) {\n            config.storeClass = this.intervalStoreClass;\n            // @ts-ignore\n            config.modelClass = this.getDefaultConfiguration().calendarIntervalModelClass || this.intervalStoreClass.defaultConfig.modelClass;\n            config.calendar = this;\n        }\n        // this method is called when the new value for the `intervals` field of this model is assigned\n        // the type of the `intervals` field is \"store\" that's why this magic\n        processIntervalsStoreData(intervals) {\n            this.bumpVersion();\n        }\n        isDefault() {\n            const project = this.getProject();\n            if (project) {\n                return this === project.defaultCalendar;\n            }\n            return false;\n        }\n        getDepth() {\n            return this.childLevel + 1;\n        }\n        /**\n         * The core iterator method of the calendar.\n         *\n         * @param options The options for iterator. Should contain at least one of the `startDate`/`endDate` properties\n         * which indicates what timespan to examine for availability intervals. If one of boundaries is not provided\n         * iterator function should return `false` at some point, to avoid infinite loops.\n         *\n         * Another recognized option is `isForward`, which indicates the direction in which to iterate through the timespan.\n         *\n         * @param func The iterator function to call. It will be called for every distinct set of availability intervals, found\n         * in the given timespan. All the intervals, which are \"active\" for current interval are collected in the 3rd argument\n         * for this function - [[CalendarCacheInterval|calendarCacheInterval]]. If iterator returns `false` (checked with `===`)\n         * the iteration stops.\n         *\n         * @param scope The scope (`this` value) to execute the iterator in.\n         */\n        forEachAvailabilityInterval(options, func, scope) {\n            const maxRange = this.getProject()?.maxCalendarRange;\n            if (maxRange) {\n                options = Object.assign({ maxRange }, options);\n            }\n            return this.calendarCache.forEachAvailabilityInterval(options, func, scope);\n        }\n        /**\n         * This method starts at the given `date` and moves forward or backward in time, depending on `isForward`.\n         * It stops moving as soon as it accumulates the `durationMs` milliseconds of working time and returns the date\n         * at which it has stopped and remaining duration - the [[AccumulateWorkingTimeResult]] object.\n         *\n         * Normally, the remaining duration will be 0, indicating the full `durationMs` has been accumulated.\n         * However, sometimes, calendar might not be able to accumulate enough working time due to various reasons,\n         * like if it does not contain enough working time - this case will be indicated with remaining duration bigger than 0.\n         *\n         * @param date\n         * @param durationMs\n         * @param isForward\n         */\n        accumulateWorkingTime(date, durationMs, isForward) {\n            // if duration is 0 - return the same date\n            if (durationMs === 0)\n                return { finalDate: new Date(date), remainingDurationInMs: 0 };\n            if (isNaN(durationMs))\n                throw new Error(\"Invalid duration\");\n            let finalDate = date;\n            const adjustDurationToDST = this.getProject()?.adjustDurationToDST ?? false;\n            this.forEachAvailabilityInterval(isForward ? { startDate: date, isForward: true } : { endDate: date, isForward: false }, (intervalStartDate, intervalEndDate, calendarCacheInterval) => {\n                let result = true;\n                if (calendarCacheInterval.getIsWorking()) {\n                    let diff = intervalEndDate.getTime() - intervalStartDate.getTime();\n                    if (durationMs <= diff) {\n                        if (adjustDurationToDST) {\n                            const dstDiff = isForward\n                                ? intervalStartDate.getTimezoneOffset() - (new Date(intervalStartDate.getTime() + durationMs)).getTimezoneOffset()\n                                : (new Date(intervalEndDate.getTime() - durationMs)).getTimezoneOffset() - intervalEndDate.getTimezoneOffset();\n                            durationMs -= dstDiff * 60 * 1000;\n                        }\n                        finalDate = isForward\n                            ? new Date(intervalStartDate.getTime() + durationMs)\n                            : new Date(intervalEndDate.getTime() - durationMs);\n                        durationMs = 0;\n                        result = false;\n                    }\n                    else {\n                        if (adjustDurationToDST) {\n                            const dstDiff = intervalStartDate.getTimezoneOffset() - intervalEndDate.getTimezoneOffset();\n                            diff += dstDiff * 60 * 1000;\n                        }\n                        finalDate = isForward ? intervalEndDate : intervalStartDate;\n                        durationMs -= diff;\n                    }\n                }\n                return result;\n            });\n            return { finalDate: new Date(finalDate), remainingDurationInMs: durationMs };\n        }\n        /**\n         * Calculate the working time duration between the 2 dates, in milliseconds.\n         *\n         * @param {Date} startDate\n         * @param {Date} endDate\n         * @param {Boolean} [allowNegative] Method ignores negative values by default, returning 0. Set to true to get\n         * negative duration.\n         */\n        calculateDurationMs(startDate, endDate, allowNegative = false) {\n            let duration = 0;\n            const multiplier = startDate.getTime() <= endDate.getTime() || !allowNegative ? 1 : -1;\n            if (multiplier < 0) {\n                [startDate, endDate] = [endDate, startDate];\n            }\n            const adjustDurationToDST = this.getProject().adjustDurationToDST;\n            this.forEachAvailabilityInterval({ startDate: startDate, endDate: endDate }, (intervalStartDate, intervalEndDate, calendarCacheInterval) => {\n                if (calendarCacheInterval.getIsWorking()) {\n                    duration += intervalEndDate.getTime() - intervalStartDate.getTime();\n                    if (adjustDurationToDST) {\n                        const dstDiff = intervalStartDate.getTimezoneOffset() - intervalEndDate.getTimezoneOffset();\n                        duration += dstDiff * 60 * 1000;\n                    }\n                }\n            });\n            return duration * multiplier;\n        }\n        /**\n         * Calculate the end date of the time interval which starts at `startDate` and has `durationMs` working time duration\n         * (in milliseconds).\n         *\n         * @param startDate\n         * @param durationMs\n         */\n        calculateEndDate(startDate, durationMs) {\n            // the method goes forward by default ..unless a negative duration provided\n            const isForward = durationMs >= 0;\n            const res = this.accumulateWorkingTime(startDate, Math.abs(durationMs), isForward);\n            return res.remainingDurationInMs === 0 ? res.finalDate : null;\n        }\n        /**\n         * Calculate the start date of the time interval which ends at `endDate` and has `durationMs` working time duration\n         * (in milliseconds).\n         *\n         * @param endDate\n         * @param durationMs\n         */\n        calculateStartDate(endDate, durationMs) {\n            // the method goes backwards by default ..unless a negative duration provided\n            const isForward = durationMs <= 0;\n            const res = this.accumulateWorkingTime(endDate, Math.abs(durationMs), isForward);\n            return res.remainingDurationInMs === 0 ? res.finalDate : null;\n        }\n        /**\n         * Returns the earliest point at which a working period of time starts, following the given date.\n         * Can be the date itself, if it comes on the working time.\n         *\n         * @param date The date after which to skip the non-working time.\n         * @param isForward Whether the \"following\" means forward in time or backward.\n         */\n        skipNonWorkingTime(date, isForward = true) {\n            let workingDate;\n            const res = this.forEachAvailabilityInterval(isForward ? { startDate: date, isForward: true } : { endDate: date, isForward: false }, (intervalStartDate, intervalEndDate, calendarCacheInterval) => {\n                if (calendarCacheInterval.getIsWorking()) {\n                    workingDate = isForward ? intervalStartDate : intervalEndDate;\n                    return false;\n                }\n            });\n            if (res === CalendarIteratorResult.MaxRangeReached || res === CalendarIteratorResult.FullRangeIterated)\n                return 'empty_calendar';\n            return workingDate ? new Date(workingDate) : new Date(date);\n        }\n        /**\n         * This method adds a single [[CalendarIntervalMixin]] to the internal collection of the calendar\n         */\n        addInterval(interval) {\n            return this.addIntervals([interval]);\n        }\n        /**\n         * This method adds an array of [[CalendarIntervalMixin]] to the internal collection of the calendar\n         */\n        addIntervals(intervals) {\n            this.bumpVersion();\n            return this.intervalStore.add(intervals);\n        }\n        /**\n         * This method removes a single [[CalendarIntervalMixin]] from the internal collection of the calendar\n         */\n        removeInterval(interval) {\n            return this.removeIntervals([interval]);\n        }\n        /**\n         * This method removes an array of [[CalendarIntervalMixin]] from the internal collection of the calendar\n         */\n        removeIntervals(intervals) {\n            this.bumpVersion();\n            return this.intervalStore.remove(intervals);\n        }\n        /**\n         * This method removes all intervals from the internal collection of the calendar\n         */\n        clearIntervals(silent) {\n            if (!silent) {\n                this.bumpVersion();\n            }\n            return this.intervalStore.removeAll(silent);\n        }\n        bumpVersion() {\n            this.clearCache();\n            this.version++;\n        }\n        get calendarCache() {\n            if (this.$calendarCache !== undefined)\n                return this.$calendarCache;\n            const unspecifiedTimeInterval = new UnspecifiedTimeIntervalModel({\n                isWorking: this.unspecifiedTimeIsWorking\n            });\n            unspecifiedTimeInterval.calendar = this;\n            return this.$calendarCache = new CalendarCacheSingle({\n                calendar: this,\n                unspecifiedTimeInterval: unspecifiedTimeInterval,\n                intervalStore: this.intervalStore,\n                parentCache: this.parent && !this.parent.isRoot ? this.parent.calendarCache : null\n            });\n        }\n        clearCache() {\n            // not strictly needed, we just help garbage collector\n            this.$calendarCache && this.$calendarCache.clear();\n            this.$calendarCache = undefined;\n        }\n        resetPriorityOfAllIntervals() {\n            this.traverse((calendar) => {\n                calendar.intervalStore.forEach((interval) => interval.resetPriority());\n            });\n        }\n        insertChild(child, before, silent) {\n            let res = superProto.insertChild.call(this, ...arguments);\n            if (!Array.isArray(res)) {\n                res = [res];\n            }\n            // invalidate cache of the child record, since now it should take parent into account\n            res.forEach((r) => {\n                r.bumpVersion();\n                r.resetPriorityOfAllIntervals();\n            });\n            return res;\n        }\n        joinProject() {\n            superProto.joinProject.call(this);\n            this.intervalStore.setProject(this.getProject());\n        }\n        leaveProject() {\n            superProto.leaveProject.call(this);\n            this.intervalStore.setProject(null);\n            this.clearCache();\n        }\n        doDestroy() {\n            this.leaveProject();\n            this.intervalStore.destroy();\n            super.doDestroy();\n        }\n        isDayHoliday(day) {\n            const startDate = DateHelper.clearTime(day), endDate = DateHelper.getNext(day, TimeUnit.Day);\n            let hasWorkingTime = false;\n            this.forEachAvailabilityInterval({ startDate, endDate, isForward: true }, (_intervalStartDate, _intervalEndDate, calendarCacheInterval) => {\n                hasWorkingTime = calendarCacheInterval.getIsWorking();\n                return !hasWorkingTime;\n            });\n            return !hasWorkingTime;\n        }\n        getDailyHolidaysRanges(startDate, endDate) {\n            const result = [];\n            startDate = DateHelper.clearTime(startDate);\n            while (startDate < endDate) {\n                if (this.isDayHoliday(startDate)) {\n                    result.push({\n                        startDate,\n                        endDate: DateHelper.getStartOfNextDay(startDate, true, true)\n                    });\n                }\n                startDate = DateHelper.getNext(startDate, TimeUnit.Day);\n            }\n            return result;\n        }\n        /**\n         * Returns working time ranges between the provided dates.\n         * @param startDate Start of the period to get ranges from.\n         * @param endDate End of the period to get ranges from.\n         *\n         * @param {Date} startDate\n         * @param {Date} endDate\n         */\n        getWorkingTimeRanges(startDate, endDate) {\n            const result = [];\n            this.forEachAvailabilityInterval({ startDate, endDate, isForward: true }, (intervalStartDate, intervalEndDate, calendarCacheInterval) => {\n                if (calendarCacheInterval.getIsWorking()) {\n                    const entry = calendarCacheInterval.intervals[0];\n                    result.push({\n                        name: entry.name,\n                        startDate: intervalStartDate,\n                        endDate: intervalEndDate\n                    });\n                }\n            });\n            return result;\n        }\n        /**\n         * Returns non-working time ranges between the provided dates.\n         * @param startDate Start of the period to get ranges from.\n         * @param endDate End of the period to get ranges from.\n         *\n         * @param {Date} startDate\n         * @param {Date} endDate\n         */\n        getNonWorkingTimeRanges(startDate, endDate) {\n            const result = [];\n            this.forEachAvailabilityInterval({ startDate, endDate, isForward: true }, (intervalStartDate, intervalEndDate, calendarCacheInterval) => {\n                if (!calendarCacheInterval.getIsWorking()) {\n                    const entry = calendarCacheInterval.intervals[0];\n                    result.push({\n                        name: entry.name,\n                        iconCls: entry.iconCls,\n                        cls: entry.cls,\n                        startDate: intervalStartDate,\n                        endDate: intervalEndDate\n                    });\n                }\n            });\n            return result;\n        }\n        /**\n         * Checks if there is a working time interval in the provided time range (or when just startDate is provided,\n         * checks if the date is contained inside a working time interval in this calendar)\n         * @param startDate\n         * @param [endDate]\n         * @param [fullyContained] Pass true to check if the range is fully covered by a single continuous working time block\n         */\n        isWorkingTime(startDate, endDate, fullyContained) {\n            if (fullyContained) {\n                let found;\n                const res = this.forEachAvailabilityInterval({ startDate, endDate, isForward: true }, (intervalStartDate, intervalEndDate, calendarCacheInterval) => {\n                    if (calendarCacheInterval.getIsWorking() && intervalStartDate <= startDate && intervalEndDate >= endDate) {\n                        found = true;\n                        return false;\n                    }\n                });\n                if (res === CalendarIteratorResult.MaxRangeReached || res === CalendarIteratorResult.FullRangeIterated)\n                    return false;\n                return found;\n            }\n            else {\n                // Can be Date | null | 'empty_calendar'\n                const workingTimeStart = this.skipNonWorkingTime(startDate);\n                return workingTimeStart && workingTimeStart !== 'empty_calendar' ? (endDate ? workingTimeStart < endDate : workingTimeStart.getTime() === startDate.getTime()) : false;\n            }\n        }\n    }\n    return CalendarMixin;\n}) {\n}\n", "import { Mixin } from \"../../../ChronoGraph/class/Mixin.js\";\nimport { AbstractPartOfProjectModelMixin } from './mixin/AbstractPartOfProjectModelMixin.js';\n/**\n * This is a mixin enabling events to handle assignments. It is mixed by CoreHasAssignmentsMixin and\n * BaseHasAssignmentsMixin. It provides a collection of all assignments, which reference this event.\n *\n * Doesn't affect scheduling.\n */\nexport class AbstractHasAssignmentsMixin extends Mixin([AbstractPartOfProjectModelMixin], (base) => {\n    const superProto = base.prototype;\n    class HasAssignmentsMixin extends base {\n        /**\n         * If a given resource is assigned to this task, returns a [[BaseAssignmentMixin]] instance for it.\n         * Otherwise returns `null`\n         */\n        getAssignmentFor(resource) {\n            // Bucket `assigned` might not be set up yet when using delayed calculations\n            for (const assignment of this.assigned ?? []) {\n                if (assignment.resource === resource)\n                    return assignment;\n            }\n            return null;\n        }\n        isAssignedTo(resource) {\n            return Boolean(this.getAssignmentFor(resource));\n        }\n        /**\n         * A method which assigns a resource to the current event\n         */\n        async assign(resource) {\n            const assignmentCls = this.project.assignmentStore.modelClass;\n            this.addAssignment(new assignmentCls({\n                event: this,\n                resource: resource\n            }));\n            return this.commitAsync();\n        }\n        /**\n         * A method which unassigns a resource from the current event\n         */\n        async unassign(resource) {\n            const assignment = this.getAssignmentFor(resource);\n            this.removeAssignment(assignment);\n            return this.commitAsync();\n        }\n        leaveProject() {\n            // `this.assigned` will be empty if model is added to project and then removed immediately\n            // w/o any propagations\n            // @ts-ignore\n            if (this.isInActiveTransaction && this.assigned) {\n                const eventStore = this.getEventStore();\n                // to batch the assignments removal, we don't remove the assignments right away, but instead\n                // add them for the batched removal to the `assignmentsForRemoval` property of the event store\n                this.assigned.forEach(assignment => eventStore.assignmentsForRemoval.add(assignment));\n            }\n            superProto.leaveProject.call(this, ...arguments);\n        }\n        remove() {\n            if (this.parent) {\n                // need to get the event store in advance, because after removal the project reference will be cleared (all that is what provide\n                // references to all stores\n                const eventStore = this.getEventStore();\n                superProto.remove.call(this);\n                eventStore && eventStore.afterEventRemoval();\n            }\n            else {\n                return superProto.remove.call(this);\n            }\n        }\n        // template methods, overridden in scheduling modes mixins\n        // should probably be named something like \"onEventAssignmentAdded\"\n        // should be a listener for the `add` event of the assignment store instead\n        addAssignment(assignment) {\n            this.getProject().assignmentStore.add(assignment);\n            return assignment;\n        }\n        // should be a listener for the `remove` event of the assignment store instead\n        removeAssignment(assignment) {\n            this.getProject().assignmentStore.remove(assignment);\n            return assignment;\n        }\n    }\n    return HasAssignmentsMixin;\n}) {\n}\n", "import { Mixin } from \"../../../../ChronoGraph/class/BetterMixin.js\";\nimport { CorePartOfProjectGenericMixin } from \"../../CorePartOfProjectGenericMixin.js\";\nimport Model from \"../../../../Core/data/Model.js\";\nimport { AbstractPartOfProjectModelMixin } from \"./AbstractPartOfProjectModelMixin.js\";\n/**\n * This a mixin for every Model that belongs to a scheduler_core project.\n *\n * It adds functions needed to calculate invalidated fields on project commit.\n */\nexport class CorePartOfProjectModelMixin extends Mixin([\n    AbstractPartOfProjectModelMixin,\n    CorePartOfProjectGenericMixin,\n    Model\n], (base) => {\n    const superProto = base.prototype;\n    class CorePartOfProjectModelMixin extends base {\n        constructor() {\n            super(...arguments);\n            // Flag set during calculation\n            this.$isCalculating = false;\n            // Proposed changes\n            this.$changed = {};\n            // Value before proposed change, for buckets that need to update data early\n            this.$beforeChange = {};\n        }\n        get isInActiveTransaction() {\n            return true;\n        }\n        // Invalidate record upon joining project, leads to a buffered commit\n        joinProject() {\n            this.invalidate();\n        }\n        // Trigger a buffered commit when leaving the project\n        leaveProject(isReplacing = false) {\n            superProto.leaveProject.call(this, isReplacing);\n            this.project?.bufferedCommitAsync();\n        }\n        /**\n         * Invalidates this record, queueing it for calculation on project commit.\n         */\n        invalidate() {\n            this.project?.invalidate(this);\n        }\n        /**\n         * Used to retrieve the proposed (before 'dataReady') or current (after 'dataReady') value for a field.\n         * If there is no proposed change, it is functionally equal to a normal `record.get()` call.\n         */\n        getCurrentOrProposed(fieldName) {\n            if (fieldName in this.$changed && this.$changed[fieldName] !== true) {\n                return this.$changed[fieldName];\n            }\n            return this.get(fieldName) ?? null;\n        }\n        /**\n         * Determines if the specified field has a value or not, value can be either current or proposed.\n         */\n        hasCurrentOrProposed(fieldName) {\n            return ((fieldName in this.$changed) && this.$changed[fieldName] != true) || this.get(fieldName) != null;\n        }\n        /**\n         * Propose changes, to be considered during calculation. Also invalidates the record.\n         */\n        propose(changes) {\n            // @ts-ignore\n            if (this.project || this.recurringTimeSpan?.project) {\n                const keys = Object.keys(changes);\n                for (let i = 0; i < keys.length; i++) {\n                    const key = keys[i];\n                    this.$changed[key] = changes[key];\n                }\n                this.invalidate();\n            }\n            else {\n                // If no project, behave as a normal model would\n                this.set(changes);\n            }\n        }\n        /**\n         * Similar to propose, but with more options. Mostly used by buckets, since they need data to update early.\n         */\n        setChanged(field, value, invalidate = true, setData = false) {\n            const me = this;\n            me.$changed[field] = value;\n            // Buckets need to keep data up to date immediately\n            if (setData) {\n                if (!(field in me.$beforeChange)) {\n                    me.$beforeChange[field] = me.get(field);\n                }\n                me.setData(field, value);\n            }\n            invalidate && me.invalidate();\n        }\n        /**\n         * Hook called before project refresh, override and calculate required changes in subclasses\n         */\n        calculateInvalidated() { }\n        /**\n         * Called after project refresh, before dataReady. Announce updated data\n         */\n        finalizeInvalidated(silent = false) {\n            const me = this;\n            me.$isCalculating = true;\n            if (!silent) {\n                // First silently revert any data change (used by buckets), otherwise it won't be detected by `set()`\n                me.setData(me.$beforeChange);\n                // Then do a proper set\n                me.set(me.$changed);\n            }\n            else {\n                me.setData(me.$changed);\n            }\n            me.$changed = {};\n            me.$beforeChange = {};\n            me.$isCalculating = false;\n        }\n    }\n    return CorePartOfProjectModelMixin;\n}) {\n}\n", "import { CI } from \"../../ChronoGraph/collection/Iterator.js\";\nexport const isNotNumber = (value) => Number(value) !== value;\nexport const CIFromSetOrArrayOrValue = (value) => {\n    if (value instanceof Set || value instanceof Array)\n        return CI(value);\n    return CI([value]);\n};\nexport const delay = (value) => new Promise(resolve => setTimeout(resolve, value));\nexport const format = (format, ...values) => {\n    return format.replace(/{(\\d+)}/g, (match, number) => typeof values[number] !== 'undefined' ? values[number] : match);\n};\n", "import { Mixin } from \"../../../ChronoGraph/class/Mixin.js\";\nimport { AbstractPartOfProjectStoreMixin } from \"./mixin/AbstractPartOfProjectStoreMixin.js\";\nimport { CIFromSetOrArrayOrValue } from \"../../util/Functions.js\";\n// Shared functionality for CoreAssignmentStore & ChronoAssignmentStore\nexport class AbstractAssignmentStoreMixin extends Mixin([AbstractPartOfProjectStoreMixin], (base) => {\n    const superProto = base.prototype;\n    class AbstractAssignmentStoreMixin extends base {\n        constructor() {\n            super(...arguments);\n            this.assignmentsForRemoval = new Set();\n            this.allAssignmentsForRemoval = false;\n        }\n        remove(records, silent) {\n            this.assignmentsForRemoval = CIFromSetOrArrayOrValue(records).toSet();\n            const res = superProto.remove.call(this, records, silent);\n            this.assignmentsForRemoval.clear();\n            return res;\n        }\n        removeAll(silent) {\n            this.allAssignmentsForRemoval = true;\n            const res = superProto.removeAll.call(this, silent);\n            this.allAssignmentsForRemoval = false;\n            return res;\n        }\n    }\n    return AbstractAssignmentStoreMixin;\n}) {\n}\n", "import { Mixin } from \"../../../ChronoGraph/class/Mixin.js\";\nimport { AbstractPartOfProjectStoreMixin } from \"./mixin/AbstractPartOfProjectStoreMixin.js\";\n/**\n * Shared functionality for [[CoreCalendarManagerStoreMixin]] and [[ChronoCalendarManagerStoreMixin]]\n */\nexport class AbstractCalendarManagerStoreMixin extends Mixin([AbstractPartOfProjectStoreMixin], (base) => {\n    const superProto = base.prototype;\n    class AbstractCalendarManagerStoreMixin extends base {\n        // special handling to destroy calendar models as part of destroying this store\n        doDestroy() {\n            const records = [];\n            // When chained, traverse can be called on destroyed nodes.\n            if (!this.rootNode?.isDestroyed) {\n                this.traverse(record => records.push(record));\n            }\n            super.doDestroy();\n            records.forEach(record => record.destroy());\n        }\n    }\n    return AbstractCalendarManagerStoreMixin;\n}) {\n}\n", "import { Mixin } from \"../../../ChronoGraph/class/Mixin.js\";\nimport { AbstractPartOfProjectStoreMixin } from \"./mixin/AbstractPartOfProjectStoreMixin.js\";\nimport { CIFromSetOrArrayOrValue } from '../../util/Functions.js';\n// Shared functionality for CoreDependencyStore & ChronoDependencyStore\nexport class AbstractDependencyStoreMixin extends Mixin([AbstractPartOfProjectStoreMixin], (base) => {\n    const superProto = base.prototype;\n    class AbstractDependencyStoreMixin extends base {\n        constructor() {\n            super(...arguments);\n            this.dependenciesForRemoval = new Set();\n            this.allDependenciesForRemoval = false;\n        }\n        remove(records, silent) {\n            this.dependenciesForRemoval = CIFromSetOrArrayOrValue(records).toSet();\n            const res = superProto.remove.call(this, records, silent);\n            this.dependenciesForRemoval.clear();\n            return res;\n        }\n        removeAll(silent) {\n            this.allDependenciesForRemoval = true;\n            const res = superProto.removeAll.call(this, silent);\n            this.allDependenciesForRemoval = false;\n            return res;\n        }\n    }\n    return AbstractDependencyStoreMixin;\n}) {\n}\n", "import { Mixin } from \"../../../ChronoGraph/class/Mixin.js\";\nimport { AbstractPartOfProjectStoreMixin } from \"./mixin/AbstractPartOfProjectStoreMixin.js\";\nconst dataAddRemoveActions = {\n    splice: 1,\n    clear: 1\n};\n// Shared functionality for CoreEventStore & ChronoEventStore\nexport class AbstractEventStoreMixin extends Mixin([AbstractPartOfProjectStoreMixin], (base) => {\n    const superProto = base.prototype;\n    class AbstractEventStoreMixin extends base {\n        constructor() {\n            super(...arguments);\n            this.assignmentsForRemoval = new Set();\n            this.dependenciesForRemoval = new Set();\n        }\n        // we need `onDataChange` for `syncDataOnLoad` option to work\n        onDataChange(event) {\n            // remove from a filter action must be ignored.\n            const isAddRemove = dataAddRemoveActions[event.action];\n            super.onDataChange(event);\n            if (isAddRemove && event.removed?.length)\n                this.afterEventRemoval();\n        }\n        // it seems `onDataChange` is not triggered for `remove` with `silent` flag\n        remove(records, silent) {\n            const res = superProto.remove.call(this, records, silent);\n            this.afterEventRemoval();\n            return res;\n        }\n        // it seems `onDataChange` is not triggered for `TreeStore#removeAll()`\n        removeAll(silent) {\n            const res = superProto.removeAll.call(this, silent);\n            this.afterEventRemoval();\n            return res;\n        }\n        onNodeRemoveChild(parent, children, index, flags) {\n            // @ts-ignore\n            const removed = superProto.onNodeRemoveChild.call(this, ...arguments);\n            this.afterEventRemoval();\n            return removed;\n        }\n        afterEventRemoval() {\n            const { assignmentsForRemoval, dependenciesForRemoval } = this;\n            // Can be called from `set data` during construction\n            if (!assignmentsForRemoval)\n                return;\n            // ORDER IS IMPORTANT!\n            // First remove assignments\n            const assignmentStore = this.getAssignmentStore();\n            if (assignmentStore && !assignmentStore.allAssignmentsForRemoval && assignmentsForRemoval.size) {\n                const toRemove = [...assignmentsForRemoval].filter(assignment => !assignmentStore.assignmentsForRemoval.has(assignment));\n                toRemove.length > 0 && assignmentStore.remove(toRemove);\n            }\n            assignmentsForRemoval.clear();\n            // Then remove dependencies\n            const dependencyStore = this.getDependencyStore();\n            if (dependencyStore && !dependencyStore.allDependenciesForRemoval && dependenciesForRemoval.size) {\n                const toRemove = [...dependenciesForRemoval].filter(dependency => !dependencyStore.dependenciesForRemoval.has(dependency));\n                toRemove.length > 0 && dependencyStore.remove(toRemove);\n            }\n            dependenciesForRemoval.clear();\n        }\n        processRecord(eventRecord, isDataset = false) {\n            if (!this.project?.isRepopulatingStores) {\n                const existingRecord = this.getById(eventRecord.id);\n                const isReplacing = existingRecord && existingRecord !== eventRecord;\n                //@ts-ignore\n                if (isReplacing && existingRecord.assigned) {\n                    //@ts-ignore\n                    for (const assignment of existingRecord.assigned) {\n                        assignment.event = eventRecord;\n                    }\n                }\n            }\n            return eventRecord;\n        }\n    }\n    return AbstractEventStoreMixin;\n}) {\n}\n", "import { Mixin } from \"../../../ChronoGraph/class/Mixin.js\";\nimport { AbstractPartOfProjectStoreMixin } from \"./mixin/AbstractPartOfProjectStoreMixin.js\";\nconst dataAddRemoveActions = {\n    splice: 1,\n    clear: 1\n};\n// Shared functionality for CoreResourceStore & ChronoResourceStore\nexport class AbstractResourceStoreMixin extends Mixin([AbstractPartOfProjectStoreMixin], (base) => {\n    const superProto = base.prototype;\n    class AbstractResourceStoreMixin extends base {\n        constructor() {\n            super(...arguments);\n            this.assignmentsForRemoval = new Set();\n        }\n        // we need `onDataChange` for `syncDataOnLoad` option to work\n        onDataChange(event) {\n            // remove from a filter action must be ignored.\n            const isAddRemove = dataAddRemoveActions[event.action];\n            super.onDataChange(event);\n            if (isAddRemove && event.removed?.length)\n                this.afterResourceRemoval();\n        }\n        // it seems `onDataChange` is not triggered for `remove` with `silent` flag\n        remove(records, silent) {\n            const res = superProto.remove.call(this, records, silent);\n            this.afterResourceRemoval();\n            return res;\n        }\n        // it seems `onDataChange` is not triggered for `TreeStore#removeAll()`\n        removeAll(silent) {\n            const res = superProto.removeAll.call(this, silent);\n            this.afterResourceRemoval();\n            return res;\n        }\n        afterResourceRemoval() {\n            const assignmentStore = this.getAssignmentStore();\n            if (assignmentStore && !assignmentStore.allAssignmentsForRemoval) {\n                const assignmentsForRemoval = [...this.assignmentsForRemoval].filter(assignment => !assignmentStore.assignmentsForRemoval.has(assignment));\n                assignmentsForRemoval.length > 0 && assignmentStore.remove(assignmentsForRemoval);\n            }\n            this.assignmentsForRemoval.clear();\n        }\n        processRecord(resourceRecord, isDataset = false) {\n            const existingRecord = this.getById(resourceRecord.id);\n            const isReplacing = existingRecord && existingRecord !== resourceRecord;\n            if (isReplacing) {\n                //@ts-ignore\n                for (const assignment of existingRecord.assigned || []) {\n                    assignment.resource = resourceRecord;\n                }\n            }\n            return resourceRecord;\n        }\n    }\n    return AbstractResourceStoreMixin;\n}) {\n}\n", "import { Mixin } from \"../../../../ChronoGraph/class/BetterMixin.js\";\nimport { CorePartOfProjectModelMixin } from \"../mixin/CorePartOfProjectModelMixin.js\";\nimport DateHelper from \"../../../../Core/helper/DateHelper.js\";\n/**\n * Core event entity mixin type.\n *\n * At this level event is only aware about its dates\n * The functionality, related to the assignments etc is provided in other mixins.\n */\nexport class CoreEventMixin extends Mixin([CorePartOfProjectModelMixin], (base) => {\n    const superProto = base.prototype;\n    class CoreEventMixin extends base {\n        constructor() {\n            super(...arguments);\n            this._startDate = null;\n            this._endDate = null;\n            this._duration = null;\n        }\n        // Proper engine defines these fields since they enter graph, thus we need them\n        static get fields() {\n            return [\n                { name: 'startDate', type: 'date' },\n                { name: 'endDate', type: 'date' },\n                { name: 'duration', type: 'number' },\n                { name: 'durationUnit', type: 'durationunit', defaultValue: 'day' }\n            ];\n        }\n        // Getters return current or proposed value\n        get startDate() { return this._startDate ?? this.get('startDate') ?? null; }\n        get endDate() { return this._endDate ?? this.get('endDate') ?? null; }\n        get duration() { return this._duration ?? this.get('duration') ?? null; }\n        // Route all setting through applyXX (setStartDate, startDate = , set('startDate'), batching)\n        set startDate(value) { this.proposeStartDate(value); }\n        set endDate(value) { this.proposeEndDate(value); }\n        set duration(value) { this.proposeDuration(value); }\n        //region Edge case normalization\n        inSet(field, value, silent, fromRelationUpdate, skipAccessors) {\n            const me = this;\n            // Catch \"normal\" set calls\n            if (me.project && !me.project.isWritingData && typeof field !== 'string' && !skipAccessors) {\n                // Flag fields as changed even if we are given a no-change value, to let calculations take decision on\n                // whether to keep duration or not\n                if ('startDate' in field && !('startDate' in me.$changed)) {\n                    me.$changed.startDate = true;\n                    me.invalidate();\n                }\n                if ('endDate' in field && !('endDate' in me.$changed)) {\n                    me.$changed.endDate = true;\n                    me.invalidate();\n                }\n            }\n            // @ts-ignore\n            return superProto.inSet.call(me, field, value, silent, fromRelationUpdate, skipAccessors);\n        }\n        //endregion\n        //region StartDate\n        getStartDate() {\n            return this.startDate;\n        }\n        proposeStartDate(startDate, keepDuration = !('endDate' in this.$changed)) {\n            if (this.inSetting || startDate?.getTime() !== this.startDate?.getTime()) {\n                this._startDate = startDate;\n                this.propose({ startDate, keepDuration });\n            }\n        }\n        async setStartDate(startDate, keepDuration = true) {\n            this.proposeStartDate(startDate, keepDuration);\n            return this.project?.commitAsync();\n        }\n        //endregion\n        //region EndDate\n        getEndDate() {\n            return this.endDate;\n        }\n        proposeEndDate(endDate, keepDuration = false) {\n            if (this.inSetting || endDate?.getTime() !== this.endDate?.getTime()) {\n                this._endDate = endDate;\n                this.propose({ endDate, keepDuration });\n            }\n        }\n        async setEndDate(endDate, keepDuration = false) {\n            this.proposeEndDate(endDate, keepDuration);\n            return this.project?.commitAsync();\n        }\n        //endregion\n        //region Duration\n        getDuration() {\n            return this.duration;\n        }\n        proposeDuration(duration, unit, keepStart = true) {\n            this._duration = duration;\n            this.propose({ duration, keepStart });\n            if (unit)\n                this.propose({ durationUnit: unit });\n        }\n        async setDuration(duration, unit, keepStart = true) {\n            this.proposeDuration(duration, unit, keepStart);\n            return this.project?.commitAsync();\n        }\n        getDurationUnit() {\n            return this.durationUnit;\n        }\n        //endregion\n        // When joining as part of inline data, store is available. If joining through load, it is passed\n        joinProject() {\n            const me = this;\n            const changed = me.$changed;\n            const startDate = me.getCurrentOrProposed('startDate');\n            const endDate = me.getCurrentOrProposed('endDate');\n            const duration = me.getCurrentOrProposed('duration');\n            // Initial values should be considered changed, to be normalized\n            if (startDate != null)\n                changed.startDate = me._startDate = startDate;\n            if (endDate != null)\n                changed.endDate = me._endDate = endDate;\n            if (duration != null)\n                changed.duration = me._duration = duration;\n            // Resolve assignments when event joins project after load\n            if (me.eventStore && !me.eventStore.isLoadingData) {\n                const unresolved = me.assignmentStore?.storage.findItem('event', null);\n                if (unresolved) {\n                    // To avoid n\u00B2 iterations over raw assignments we cache them by raw eventId, which saves us\n                    // some iterations over the storage\n                    // https://github.com/bryntum/support/issues/3141\n                    const cachedAssignments = me.assignmentStore?.storage.findItem('eventId', me.id);\n                    if (cachedAssignments) {\n                        for (const assignment of cachedAssignments) {\n                            assignment.setChanged('event', me);\n                        }\n                    }\n                    else {\n                        for (const assignment of unresolved) {\n                            if (assignment.getCurrentOrProposed('event') === me.id) {\n                                assignment.setChanged('event', me);\n                            }\n                        }\n                    }\n                }\n            }\n            superProto.joinProject.call(me);\n        }\n        // Mimic how proper engine applies values\n        applyValue(useProp, key, value, skipAccessors, field) {\n            // @ts-ignore\n            if ((this.project || this.recurringTimeSpan?.project) && field) {\n                const { name } = field;\n                if (name === 'startDate' || name == 'duration' || name === 'endDate') {\n                    useProp = true;\n                    // Update cached value\n                    this['_' + name] = value;\n                }\n                if (skipAccessors) {\n                    useProp = false;\n                }\n            }\n            superProto.applyValue.call(this, useProp, key, value, skipAccessors, field);\n        }\n        // Catch changes from batches etc. In which case it is sometimes expected for data to be available directly\n        afterChange(toSet, wasSet, silent, fromRelationUpdate, skipAccessors) {\n            if (!this.$isCalculating && !skipAccessors) {\n                // In certain scenarios data is expected to be available of the bat, messy!\n                this.setData({\n                    startDate: this.getCurrentOrProposed('startDate'),\n                    endDate: this.getCurrentOrProposed('endDate'),\n                    duration: this.getCurrentOrProposed('duration'),\n                    durationUnit: this.getCurrentOrProposed('durationUnit')\n                });\n            }\n            superProto.afterChange.call(this, toSet, wasSet, silent, fromRelationUpdate, skipAccessors);\n        }\n        // Normalizes dates & duration\n        calculateInvalidated() {\n            const me = this;\n            const changed = me.$changed;\n            const changedStart = 'startDate' in changed;\n            const changedEnd = 'endDate' in changed;\n            const changedDuration = 'duration' in changed;\n            const { startDate, endDate, duration, keepDuration, keepStart } = changed;\n            let calculate = null;\n            // Only start changed\n            if (changedStart && !changedEnd && !changedDuration) {\n                // Also null end when nulling start (keeping duration)\n                if (startDate === null) {\n                    changed.endDate = null;\n                }\n                // Start after end without keeping duration -> move end to start\n                else if (me.hasCurrentOrProposed('endDate') && startDate > me.getCurrentOrProposed('endDate') && !keepDuration) {\n                    changed.endDate = startDate;\n                    changed.duration = 0;\n                }\n                // Start changed and we either have a duration that we want to keep or no end -> calculate end\n                else if (me.hasCurrentOrProposed('duration') && (keepDuration || !me.hasCurrentOrProposed('endDate'))) {\n                    calculate = 'endDate';\n                }\n                // Start change and we have an end already -> calculate duration\n                else if (me.hasCurrentOrProposed('endDate')) {\n                    calculate = 'duration';\n                }\n            }\n            // Only end changed\n            else if (!changedStart && changedEnd && !changedDuration) {\n                // Also null start when nulling end (keeping duration)\n                if (endDate === null) {\n                    changed.startDate = null;\n                }\n                // End before start without keeping duration -> move start to end\n                else if (me.hasCurrentOrProposed('startDate') && !keepDuration && endDate !== true && endDate < me.getCurrentOrProposed('startDate')) {\n                    changed.startDate = endDate;\n                    changed.duration = 0;\n                }\n                // End changed and we either have a duration that we want to keep or no start -> calculate start\n                else if (me.hasCurrentOrProposed('duration') && (keepDuration || !me.hasCurrentOrProposed('startDate'))) {\n                    calculate = 'startDate';\n                }\n                // End changed and we have a start already -> calculate duration\n                else if (me.hasCurrentOrProposed('startDate')) {\n                    calculate = 'duration';\n                }\n            }\n            // Only duration changed\n            else if (!changedStart && !changedEnd && changedDuration) {\n                // Also null end when nulling duration (keeping start)\n                if (duration === null) {\n                    changed.endDate = null;\n                }\n                // Duration changed and we either have a start that we want to keep or no end -> calculate end\n                else if (me.hasCurrentOrProposed('startDate') && (keepStart || !me.hasCurrentOrProposed('endDate'))) {\n                    if (keepStart && changed.duration < 0) {\n                        changed.duration = 0;\n                    }\n                    calculate = 'endDate';\n                }\n                // Duration changed and we have an end already -> calculate start\n                else if (me.hasCurrentOrProposed('endDate')) {\n                    calculate = 'startDate';\n                }\n            }\n            // Start and end change, affect duration\n            else if (changedStart && changedEnd && !changedDuration) {\n                // Both nulled, null duration\n                if (startDate === null && endDate === null) {\n                    changed.duration = null;\n                }\n                // Other cases -> calculate duration\n                else {\n                    calculate = 'duration';\n                }\n            }\n            // Start and duration change -> calculate end\n            else if (changedStart && !changedEnd && changedDuration) {\n                calculate = 'endDate';\n            }\n            // End and duration changed -> calculate start\n            else if (!changedStart && changedEnd && changedDuration) {\n                calculate = 'startDate';\n            }\n            // All changed -> calculate whichever is null or by default end to be sure things add up\n            else if (changedStart && changedEnd && changedDuration) {\n                if (duration == null) {\n                    calculate = 'duration';\n                }\n                else if (startDate == null) {\n                    calculate = 'startDate';\n                }\n                else {\n                    calculate = 'endDate';\n                }\n            }\n            // Normalize if needed\n            const currentOrProposedStartDate = me.getCurrentOrProposed('startDate');\n            const currentOrProposedEndDate = me.getCurrentOrProposed('endDate');\n            const currentOrProposedDuration = me.getCurrentOrProposed('duration');\n            const currentOrProposedDurationUnit = me.getCurrentOrProposed('durationUnit');\n            let hourDuration, targetDuration;\n            switch (calculate) {\n                case 'startDate':\n                    changed.startDate = DateHelper.add(currentOrProposedEndDate, -currentOrProposedDuration, currentOrProposedDurationUnit);\n                    break;\n                case 'endDate':\n                    // convert proposed duration to hours to safely add over DST\n                    hourDuration = DateHelper.as('hour', currentOrProposedDuration, currentOrProposedDurationUnit);\n                    // convert calculated duration to task duration in task duration unit\n                    targetDuration = DateHelper.as(currentOrProposedDurationUnit, hourDuration, 'h');\n                    changed.endDate = DateHelper.add(currentOrProposedStartDate, targetDuration, currentOrProposedDurationUnit);\n                    break;\n                case 'duration':\n                    // convert proposed duration to hours to safely add over DST\n                    hourDuration = DateHelper.diff(currentOrProposedStartDate, currentOrProposedEndDate, 'h');\n                    // convert calculated duration to task duration in task duration unit\n                    changed.duration = DateHelper.as(currentOrProposedDurationUnit, hourDuration, 'h');\n                    break;\n            }\n            if ('startDate' in changed && changed.startDate !== true)\n                this._startDate = changed.startDate;\n            if ('endDate' in changed && changed.endDate !== true)\n                this._endDate = changed.endDate;\n            if ('duration' in changed && changed.duration !== true)\n                this._duration = changed.duration;\n            // Clean up flags, not intended to be actually set\n            if (changed.startDate === true)\n                delete changed.startDate;\n            if (changed.endDate === true)\n                delete changed.endDate;\n            delete changed.keepDuration;\n            delete changed.keepStart;\n        }\n    }\n    return CoreEventMixin;\n}) {\n}\n", "import { Mixin } from \"../../../../ChronoGraph/class/BetterMixin.js\";\nimport { CorePartOfProjectModelMixin } from \"../mixin/CorePartOfProjectModelMixin.js\";\n/**\n * Core resource model class.\n */\nexport class CoreResourceMixin extends Mixin([CorePartOfProjectModelMixin], (base) => {\n    const superProto = base.prototype;\n    class CoreResourceMixin extends base {\n        get assigned() {\n            return this.project?.assignmentStore.getResourcesAssignments(this);\n        }\n        joinProject() {\n            // Set up assignment -> resource mapping when joining store after assignment (skip during load)\n            // (note that there is no resourceStore yet when loading inline data, thus the first part of the condition)\n            if (this.resourceStore && !this.resourceStore.isLoadingData) {\n                this.assignmentStore?.query(a => a.get('resource') === this.id).forEach(unresolved => unresolved.setChanged('resource', this));\n            }\n            superProto.joinProject.call(this);\n        }\n        leaveProject(isReplacing = false) {\n            // `this.assigned` will be empty if model is added to project and then removed immediately\n            // w/o any propagations\n            // when replacing a resource or reloading the store, the assignments should be left intact\n            if (this.assigned && !isReplacing && !this.resourceStore?.isLoadingData) {\n                const resourceStore = this.resourceStore;\n                // to batch the assignments removal, we don't remove the assignments right away, but instead\n                // add them for the batched removal to the `assignmentsForRemoval` property of the event store\n                this.assigned.forEach(assignment => resourceStore.assignmentsForRemoval.add(assignment));\n            }\n            superProto.leaveProject.call(this);\n        }\n        applyValue(useProp, key, value, skipAccessor, field) {\n            // Changing id on a resource should update resourceId on its assignments\n            // (note that field might not exist, if user supplies data for undefined fields)\n            if (field?.name === 'id') {\n                this.assigned.forEach(assignment => {\n                    assignment.set('resourceId', value);\n                });\n            }\n            superProto.applyValue.call(this, useProp, key, value, skipAccessor, field);\n        }\n    }\n    return CoreResourceMixin;\n}) {\n}\n", "import { Mixin, isInstanceOf } from \"../../../../ChronoGraph/class/BetterMixin.js\";\nimport { CorePartOfProjectModelMixin } from \"../mixin/CorePartOfProjectModelMixin.js\";\nimport { CoreEventMixin } from \"./CoreEventMixin.js\";\nimport { CoreResourceMixin } from \"./CoreResourceMixin.js\";\nfunction asId(recordOrId) {\n    return recordOrId?.isModel ? recordOrId.id : recordOrId;\n}\n/**\n * Core assignment model class. It just contains references to the [[CoreEventMixin|event]] and [[CoreResourceMixin|resource]] being assigned.\n */\nexport class CoreAssignmentMixin extends Mixin([CorePartOfProjectModelMixin], (base) => {\n    const superProto = base.prototype;\n    class CoreAssignmentMixin extends base {\n        // Fields declared in the Model way, existing decorators all assume ChronoGraph is used\n        static get fields() {\n            return [\n                // isEqual required to properly detect changed resource / event\n                { name: 'resource', isEqual: (a, b) => a === b, persist: false },\n                { name: 'event', isEqual: (a, b) => a === b, persist: false }\n            ];\n        }\n        // Resolve early + update indices to have buckets ready before commit\n        setChanged(field, value, invalidate) {\n            const { assignmentStore, eventStore, resourceStore, project } = this;\n            let update = false;\n            if (field === 'event') {\n                const event = isInstanceOf(value, CoreEventMixin) ? value : eventStore?.$master.getById(value);\n                if (event)\n                    update = true;\n                value = event || value;\n            }\n            if (field === 'resource') {\n                const resource = isInstanceOf(value, CoreResourceMixin) ? value : resourceStore?.$master.getById(value);\n                if (resource)\n                    update = true;\n                value = resource || value;\n            }\n            // Passing true as last arg, bucket expected to work before commit\n            superProto.setChanged.call(this, field, value, invalidate, true);\n            // Update on resolve, if this is a single operation and record is part of project (might be standalone record)\n            if (assignmentStore && update && !project.isPerformingCommit && !assignmentStore.isLoadingData && !resourceStore.isLoadingData && !assignmentStore.skipInvalidateIndices) {\n                assignmentStore.invalidateIndices();\n            }\n        }\n        // Resolve event and resource when joining project\n        joinProject() {\n            superProto.joinProject.call(this);\n            this.setChanged('event', this.get('event'));\n            this.setChanged('resource', this.get('resource'));\n        }\n        // Resolved resource & event as part of commit\n        // Normally done earlier in setChanged, but stores might not have been available yet at that point\n        calculateInvalidated() {\n            // Changed values, should be used instead of current where available\n            let { event = this.event, resource = this.resource } = this.$changed;\n            if (event !== null && !(isInstanceOf(event, CoreEventMixin))) {\n                const resolved = this.eventStore?.getById(event);\n                if (resolved)\n                    this.setChanged('event', resolved, false);\n            }\n            if (resource !== null && !(isInstanceOf(resource, CoreResourceMixin))) {\n                const resolved = this.resourceStore?.getById(resource);\n                if (resolved)\n                    this.setChanged('resource', resolved, false);\n            }\n        }\n        // resourceId and eventId required to be available for new datasets\n        finalizeInvalidated(silent) {\n            const changed = this.$changed;\n            if ('resource' in changed) {\n                changed.resourceId = asId(changed.resource);\n            }\n            if ('event' in changed) {\n                changed.eventId = asId(changed.event);\n            }\n            superProto.finalizeInvalidated.call(this, silent);\n        }\n        //region Event\n        set event(event) {\n            this.setChanged('event', event);\n            this.setChanged('eventId', asId(event));\n        }\n        get event() {\n            const event = this.get('event');\n            // Engine returns null instead of id when unresolved\n            return event?.id != null ? event : null;\n        }\n        //endregion\n        //region Resource\n        set resource(resource) {\n            this.setChanged('resource', resource);\n            this.setChanged('resourceId', asId(resource));\n        }\n        get resource() {\n            const resource = this.get('resource');\n            // Engine returns null instead of id when unresolved\n            return resource?.id != null ? resource : null;\n        }\n    }\n    return CoreAssignmentMixin;\n}) {\n}\n", "import { Mixin } from \"../../../../ChronoGraph/class/BetterMixin.js\";\nimport { CorePartOfProjectGenericMixin } from \"../../CorePartOfProjectGenericMixin.js\";\nimport Store from \"../../../../Core/data/Store.js\";\nimport { AbstractPartOfProjectStoreMixin } from \"./AbstractPartOfProjectStoreMixin.js\";\n/**\n * This a mixin for every Store, that belongs to a scheduler_core project.\n */\nexport class CorePartOfProjectStoreMixin extends Mixin([\n    AbstractPartOfProjectStoreMixin,\n    CorePartOfProjectGenericMixin,\n    Store\n], (base) => {\n    const superProto = base.prototype;\n    class CorePartOfProjectStoreMixin extends base {\n        setProject(project) {\n            const result = superProto.setProject.call(this, project);\n            if (project)\n                this.joinProject(project);\n            return result;\n        }\n        joinProject(project) { }\n        onCommitAsync() { }\n    }\n    return CorePartOfProjectStoreMixin;\n}) {\n}\n", "import { CoreAssignmentMixin } from \"../model/scheduler_core/CoreAssignmentMixin.js\";\nimport { Mixin } from \"../../../ChronoGraph/class/BetterMixin.js\";\nimport { CorePartOfProjectStoreMixin } from \"./mixin/CorePartOfProjectStoreMixin.js\";\nimport { AbstractAssignmentStoreMixin } from \"./AbstractAssignmentStoreMixin.js\";\nconst emptySet = new Set();\n/**\n * A store mixin class, that represent collection of all assignments in the [[SchedulerCoreProjectMixin|project]].\n */\nexport class CoreAssignmentStoreMixin extends Mixin([AbstractAssignmentStoreMixin, CorePartOfProjectStoreMixin], (base) => {\n    const superProto = base.prototype;\n    class CoreAssignmentStoreMixin extends base {\n        constructor() {\n            super(...arguments);\n            this.skipInvalidateIndices = false;\n        }\n        static get defaultConfig() {\n            return {\n                modelClass: CoreAssignmentMixin,\n                storage: {\n                    extraKeys: [\n                        { property: 'event', unique: false },\n                        { property: 'resource', unique: false },\n                        { property: 'eventId', unique: false }\n                    ]\n                }\n            };\n        }\n        set data(value) {\n            this.allAssignmentsForRemoval = true;\n            super.data = value;\n            this.allAssignmentsForRemoval = false;\n        }\n        getEventsAssignments(event) {\n            return this.storage.findItem('event', event, true) || emptySet;\n        }\n        getResourcesAssignments(resource) {\n            return this.storage.findItem('resource', resource.$original, true) || emptySet;\n        }\n        updateIndices() {\n            this.storage.rebuildIndices();\n        }\n        invalidateIndices() {\n            this.storage.invalidateIndices();\n        }\n        afterLoadData() {\n            this.eventStore && this.linkAssignments(this.eventStore, 'event');\n            this.resourceStore && this.linkAssignments(this.resourceStore, 'resource');\n        }\n        // Link events/resources to assignments, called when those stores are populated or joined to project\n        linkAssignments(store, modelName) {\n            // If we are passed a chained store, the ultimate source of truth is the masterStore\n            store = store.masterStore || store;\n            const unresolved = this.count && this.storage.findItem(modelName, null, true);\n            if (unresolved) {\n                for (const assignment of unresolved) {\n                    const record = store.getById(assignment.getCurrentOrProposed(modelName));\n                    if (record)\n                        assignment.setChanged(modelName, record);\n                }\n                this.invalidateIndices();\n            }\n        }\n        // Unlink events/resources from assignments, called when those stores are cleared\n        unlinkAssignments(modelName) {\n            // Invalidate links to events/resources, need to link to new records so set it back to the id (might be resource or resourceId)\n            // As assignment.resource returns null if it's an id, need to check for that in data\n            this.forEach(assignment => assignment.setChanged(modelName, assignment[modelName]?.id ?? assignment?.getData(modelName) ?? assignment[modelName + 'Id']));\n            this.invalidateIndices();\n        }\n        onCommitAsync() {\n            this.updateIndices();\n        }\n    }\n    return CoreAssignmentStoreMixin;\n}) {\n}\n", "import { CorePartOfProjectModelMixin } from '../mixin/CorePartOfProjectModelMixin.js';\nimport { Mixin } from \"../../../../ChronoGraph/class/BetterMixin.js\";\nimport { AbstractCalendarMixin } from \"../AbstractCalendarMixin.js\";\n/**\n * The calendar for project scheduling, it is used to mark certain time intervals as \"non-working\" and ignore them during scheduling.\n *\n * The calendar consists from several [[CalendarIntervalMixin|intervals]]. The intervals can be either static or recurrent.\n */\nexport class CoreCalendarMixin extends Mixin([AbstractCalendarMixin, CorePartOfProjectModelMixin], (base) => {\n    const superProto = base.prototype;\n    class CoreCalendarMixin extends base {\n    }\n    return CoreCalendarMixin;\n}) {\n}\n", "import { Mixin } from \"../../../ChronoGraph/class/BetterMixin.js\";\nimport { CorePartOfProjectStoreMixin } from './mixin/CorePartOfProjectStoreMixin.js';\nimport { CoreCalendarMixin } from '../model/scheduler_core/CoreCalendarMixin.js';\nimport { AbstractCalendarManagerStoreMixin } from \"./AbstractCalendarManagerStoreMixin.js\";\n/**\n * A store mixin class, that represent collection of all calendars in the [[SchedulerCoreProjectMixin|project]].\n */\nexport class CoreCalendarManagerStoreMixin extends Mixin([AbstractCalendarManagerStoreMixin, CorePartOfProjectStoreMixin], (base) => {\n    const superProto = base.prototype;\n    class CoreCalendarManagerStoreMixin extends base {\n        static get defaultConfig() {\n            return {\n                tree: true,\n                modelClass: CoreCalendarMixin\n            };\n        }\n    }\n    return CoreCalendarManagerStoreMixin;\n}) {\n}\n", "import { CorePartOfProjectModelMixin } from \"../mixin/CorePartOfProjectModelMixin.js\";\nimport { Mixin } from \"../../../../ChronoGraph/class/BetterMixin.js\";\nimport { CoreEventMixin } from \"./CoreEventMixin.js\";\nimport { isInstanceOf } from '../../../../ChronoGraph/class/Mixin.js';\nexport class CoreDependencyMixin extends Mixin([CorePartOfProjectModelMixin], (base) => {\n    const superProto = base.prototype;\n    class CoreDependencyMixin extends base {\n        static get fields() {\n            return [\n                { name: 'fromEvent', isEqual: (a, b) => a === b, persist: false },\n                { name: 'toEvent', isEqual: (a, b) => a === b, persist: false }\n            ];\n        }\n        // Resolve early + update indices to have buckets ready before commit\n        setChanged(field, value, invalidate) {\n            let update = false;\n            if (field === 'fromEvent' || field === 'toEvent') {\n                const event = isInstanceOf(value, CoreEventMixin) ? value : this.eventStore?.getById(value);\n                if (event)\n                    update = true;\n                value = event || value;\n            }\n            superProto.setChanged.call(this, field, value, invalidate, true);\n            if (update && !this.project.isPerformingCommit && !this.dependencyStore?.isLoadingData) {\n                this.dependencyStore?.invalidateIndices();\n            }\n        }\n        // Resolve events when joining project\n        joinProject() {\n            superProto.joinProject.call(this);\n            // Initial values should be considered changed, to be normalized\n            // (needs to pass through setChanged for early normalization expected for buckets)\n            this.setChanged('fromEvent', this.get('fromEvent'));\n            this.setChanged('toEvent', this.get('toEvent'));\n        }\n        // Resolved events as part of commit\n        // Normally done earlier in setChanged, but stores might not have been available yet at that point\n        calculateInvalidated() {\n            // Changed values, should be used instead of current where available\n            let { fromEvent, toEvent } = this.$changed;\n            if (fromEvent !== null && !(isInstanceOf(fromEvent, CoreEventMixin))) {\n                const resolved = this.eventStore?.getById(fromEvent);\n                if (resolved)\n                    this.$changed.fromEvent = resolved;\n            }\n            if (toEvent !== null && !(isInstanceOf(toEvent, CoreEventMixin))) {\n                const resolved = this.eventStore?.getById(toEvent);\n                if (resolved)\n                    this.$changed.toEvent = resolved;\n            }\n        }\n        //region Events\n        // Not using \"propose\" mechanism from CoreEventMixin, because buckets are expected to be up to date right away\n        set fromEvent(fromEvent) {\n            this.setChanged('fromEvent', fromEvent);\n        }\n        get fromEvent() {\n            const fromEvent = this.get('fromEvent');\n            // Engine returns null instead of id when unresolved\n            return fromEvent?.id != null ? fromEvent : null;\n        }\n        set toEvent(toEvent) {\n            this.setChanged('toEvent', toEvent);\n        }\n        get toEvent() {\n            const toEvent = this.get('toEvent');\n            // Engine returns null instead of id when unresolved\n            return toEvent?.id != null ? toEvent : null;\n        }\n    }\n    return CoreDependencyMixin;\n}) {\n}\n", "import { Mixin } from \"../../../ChronoGraph/class/BetterMixin.js\";\nimport { CorePartOfProjectStoreMixin } from \"./mixin/CorePartOfProjectStoreMixin.js\";\nimport { CoreDependencyMixin } from \"../model/scheduler_core/CoreDependencyMixin.js\";\nimport { AbstractDependencyStoreMixin } from \"./AbstractDependencyStoreMixin.js\";\nconst emptySet = new Set();\n/**\n * A store mixin class, that represent collection of all dependencies in the [[SchedulerCoreProjectMixin|project]].\n */\nexport class CoreDependencyStoreMixin extends Mixin([AbstractDependencyStoreMixin, CorePartOfProjectStoreMixin], (base) => {\n    const superProto = base.prototype;\n    class CoreDependencyStoreMixin extends base {\n        constructor() {\n            super(...arguments);\n            this.dependenciesForRemoval = new Set();\n            this.allDependenciesForRemoval = false;\n        }\n        static get defaultConfig() {\n            return {\n                modelClass: CoreDependencyMixin,\n                storage: {\n                    extraKeys: [\n                        { property: 'fromEvent', unique: false },\n                        { property: 'toEvent', unique: false }\n                    ]\n                }\n            };\n        }\n        getIncomingDepsForEvent(event) {\n            return this.storage.findItem('toEvent', event) || emptySet;\n        }\n        getOutgoingDepsForEvent(event) {\n            return this.storage.findItem('fromEvent', event) || emptySet;\n        }\n        set data(value) {\n            this.allDependenciesForRemoval = true;\n            super.data = value;\n            this.allDependenciesForRemoval = false;\n        }\n        updateIndices() {\n            this.storage.rebuildIndices();\n        }\n        invalidateIndices() {\n            this.storage.invalidateIndices();\n        }\n        onCommitAsync() {\n            this.updateIndices();\n        }\n    }\n    return CoreDependencyStoreMixin;\n}) {\n}\n", "import { Mixin } from \"../../../../ChronoGraph/class/BetterMixin.js\";\nimport { CoreEventMixin } from \"./CoreEventMixin.js\";\nimport ObjectHelper from \"../../../../Core/helper/ObjectHelper.js\";\nimport { AbstractHasAssignmentsMixin } from '../AbstractHasAssignmentsMixin.js';\n/**\n * This is a mixin, which can be applied to the [[CoreEventMixin]]. It provides the collection of all assignments,\n * which reference this event.\n *\n * Doesn't affect scheduling.\n */\nexport class CoreHasAssignmentsMixin extends Mixin([CoreEventMixin, AbstractHasAssignmentsMixin], (base) => {\n    const superProto = base.prototype;\n    class CoreHasAssignmentsMixin extends base {\n        get assigned() {\n            return this.project?.assignmentStore.getEventsAssignments(this) ?? this.$cachedAssignments;\n        }\n        leaveProject(isReplacing = false) {\n            // Expected to still be able to return assignments when removed from project\n            this.$cachedAssignments = this.assigned;\n            super.leaveProject(isReplacing);\n        }\n        applyValue(useProp, key, value, skipAccessor, field) {\n            // Changing id on an event should update resourceId on its assignments\n            if (key === 'id') {\n                this.assigned?.forEach(assignment => assignment.set('eventId', value));\n            }\n            superProto.applyValue.call(this, useProp, key, value, skipAccessor, field);\n        }\n        copy(newId = null, deep = null) {\n            const copy = superProto.copy.call(this, newId, deep);\n            // If deep is everything but object - use default behavior, which is to invoke accessors\n            // If deep is an object, check if it has certain field disabled\n            if ((ObjectHelper.isObject(deep) && !deep.skipFieldIdentifiers) || !ObjectHelper.isObject(deep)) {\n                // Copy current assignments, used for occurrences\n                copy.$cachedAssignments = this.assigned;\n            }\n            return copy;\n        }\n    }\n    return CoreHasAssignmentsMixin;\n}) {\n}\n", "import { Mixin } from \"../../../../ChronoGraph/class/BetterMixin.js\";\nimport { CoreEventMixin } from \"./CoreEventMixin.js\";\n/**\n * This is a mixin, which can be applied to the [[CoreEventMixin]]. It provides the collection of all dependencies,\n * which reference this event.\n *\n * Doesn't affect scheduling.\n */\nexport class CoreHasDependenciesMixin extends Mixin([CoreEventMixin], (base) => {\n    const superProto = base.prototype;\n    class CoreHasDependenciesMixin extends base {\n        get outgoingDeps() {\n            return this.project.dependencyStore.getOutgoingDepsForEvent(this);\n        }\n        get incomingDeps() {\n            return this.project.dependencyStore.getIncomingDepsForEvent(this);\n        }\n        leaveProject() {\n            const eventStore = this.eventStore;\n            // the buckets may be empty if a model is removed from the project immediately after adding\n            // (without propagation)\n            if (this.outgoingDeps) {\n                this.outgoingDeps.forEach(dependency => eventStore.dependenciesForRemoval.add(dependency));\n            }\n            if (this.incomingDeps) {\n                this.incomingDeps.forEach(dependency => eventStore.dependenciesForRemoval.add(dependency));\n            }\n            superProto.leaveProject.call(this);\n        }\n    }\n    return CoreHasDependenciesMixin;\n}) {\n}\n", "import { Mixin } from '../../../../ChronoGraph/class/BetterMixin.js';\nimport { CoreEventMixin } from './CoreEventMixin.js';\nimport { CoreHasAssignmentsMixin } from \"./CoreHasAssignmentsMixin.js\";\nimport { CoreHasDependenciesMixin } from './CoreHasDependenciesMixin.js';\n/**\n * This is an event class, [[SchedulerCoreProjectMixin]] is working with.\n * It is constructed as [[CoreEventMixin]], enhanced with [[CoreHasAssignmentsMixin]] and [[CoreHasDependenciesMixin]]\n */\nexport class SchedulerCoreEvent extends Mixin([\n    CoreEventMixin,\n    CoreHasAssignmentsMixin,\n    CoreHasDependenciesMixin\n], (base) => {\n    const superProto = base.prototype;\n    class SchedulerCoreEvent extends base {\n    }\n    return SchedulerCoreEvent;\n}) {\n}\n", "import { Mixin } from \"../../../ChronoGraph/class/BetterMixin.js\";\nimport { SchedulerCoreEvent } from \"../model/scheduler_core/SchedulerCoreEvent.js\";\nimport { CorePartOfProjectStoreMixin } from \"./mixin/CorePartOfProjectStoreMixin.js\";\nimport { AbstractEventStoreMixin } from \"./AbstractEventStoreMixin.js\";\n/**\n * A store mixin class, that represent collection of all events in the [[SchedulerCoreProjectMixin|project]].\n */\nexport class CoreEventStoreMixin extends Mixin([AbstractEventStoreMixin, CorePartOfProjectStoreMixin], (base) => {\n    const superProto = base.prototype;\n    class CoreEventStoreMixin extends base {\n        static get defaultConfig() {\n            return {\n                modelClass: SchedulerCoreEvent\n            };\n        }\n        joinProject() {\n            this.assignmentStore?.linkAssignments(this, 'event');\n        }\n        afterLoadData() {\n            this.afterEventRemoval();\n            this.assignmentStore?.linkAssignments(this, 'event');\n        }\n    }\n    return CoreEventStoreMixin;\n}) {\n}\n// /**\n//  * The tree store version of [[EventStoreMixin]].\n//  */\n// export class EventTreeStoreMixin extends Mixin(\n//     [ EventStoreMixin ],\n//     (base : AnyConstructor<EventStoreMixin, typeof EventStoreMixin>) => {\n//\n//     const superProto : InstanceType<typeof base> = base.prototype\n//\n//\n//         class EventTreeStoreMixin extends base {\n//             rootNode            : SchedulerBasicProjectMixin\n//\n//             buildRootNode () : object {\n//                 return this.getProject() || {}\n//             }\n//\n//\n//             static get defaultConfig () : object {\n//                 return {\n//                     tree        : true\n//                 }\n//             }\n//         }\n//\n//         return EventTreeStoreMixin\n//     }){}\n//\n", "import { Mixin } from \"../../../ChronoGraph/class/BetterMixin.js\";\nimport { CorePartOfProjectStoreMixin } from \"./mixin/CorePartOfProjectStoreMixin.js\";\nimport { CoreResourceMixin } from \"../model/scheduler_core/CoreResourceMixin.js\";\nimport { AbstractResourceStoreMixin } from \"./AbstractResourceStoreMixin.js\";\n/**\n * A store mixin class, that represent collection of all resources in the [[SchedulerCoreProjectMixin|project]].\n */\nexport class CoreResourceStoreMixin extends Mixin([AbstractResourceStoreMixin, CorePartOfProjectStoreMixin], (base) => {\n    const superProto = base.prototype;\n    class CoreResourceStoreMixin extends base {\n        static get defaultConfig() {\n            return {\n                modelClass: CoreResourceMixin\n            };\n        }\n        joinProject() {\n            this.assignmentStore?.linkAssignments(this, 'resource');\n        }\n        afterLoadData() {\n            this.assignmentStore?.linkAssignments(this, 'resource');\n        }\n        clear(removing) {\n            superProto.clear.call(this, removing);\n            this.assignmentStore?.unlinkAssignments('resource');\n        }\n    }\n    return CoreResourceStoreMixin;\n}) {\n}\n", "/**\n * @module Core/data/stm/state/StateBase\n */\nimport Base from '../../../Base.js';\nexport const throwAbstractMethodCall = () => {\n    throw new Error('Abstract method call!');\n};\nexport const throwInvalidMethodCall = () => {\n    throw new Error('Method cannot be called at this state!');\n};\n/**\n * Abstract class for STM states\n *\n * Every on* method should return a state for the STM which it should switch to\n * or throw an exception that this call at this state is illegal.\n *\n * Interface of this class mirrors interface of {@link Core.data.stm.StateTrackingManager}.\n *\n * @abstract\n */\nexport default class StateBase extends Base {\n    canUndo(stm) {\n        throwAbstractMethodCall();\n    }\n    canRedo(stm) {\n        throwAbstractMethodCall();\n    }\n    onUndo(stm) {\n        throwAbstractMethodCall();\n    }\n    onRedo(stm) {\n        throwAbstractMethodCall();\n    }\n    onStartTransaction(stm) {\n        throwAbstractMethodCall();\n    }\n    onStopTransaction(stm) {\n        throwAbstractMethodCall();\n    }\n    onStopTransactionDelayed(stm) {\n        throwAbstractMethodCall();\n    }\n    onRejectTransaction(stm) {\n        throwAbstractMethodCall();\n    }\n    onEnable(stm) {\n        throwAbstractMethodCall();\n    }\n    onDisable(stm) {\n        throwAbstractMethodCall();\n    }\n    onAutoRecordOn(stm) {\n        throwAbstractMethodCall();\n    }\n    onAutoRecordOff(stm) {\n        throwAbstractMethodCall();\n    }\n    onResetQueue(stm) {\n        throwAbstractMethodCall();\n    }\n    onModelUpdate(stm) {\n        throwAbstractMethodCall();\n    }\n    onStoreModelAdd(stm) {\n        throwAbstractMethodCall();\n    }\n    onStoreModelInsert(stm) {\n        throwAbstractMethodCall();\n    }\n    onStoreModelRemove(stm) {\n        throwAbstractMethodCall();\n    }\n    onStoreModelRemoveAll(stm) {\n        throwAbstractMethodCall();\n    }\n    onModelInsertChild(stm) {\n        throwAbstractMethodCall();\n    }\n    onModelRemoveChild(stm) {\n        throwAbstractMethodCall();\n    }\n}\nStateBase._$name = 'StateBase';", "/**\n * @module Core/data/stm/Props.js\n * @internal\n */\nexport const STATE_PROP             = Symbol('STATE_PROP');\nexport const STORES_PROP            = Symbol('STORES_PROP');\nexport const QUEUE_PROP             = Symbol('QUEUE_PROP');\nexport const POS_PROP               = Symbol('POS_PROP');\nexport const TRANSACTION_PROP       = Symbol('TRANSACTION_PROP');\nexport const TRANSACTION_TIMER_PROP = Symbol('TRANSACTION_TIMER_PROP');\nexport const AUTO_RECORD_PROP       = Symbol('AUTO_RECORD_PROP');\nexport const PROPS                  = Object.freeze([\n    STATE_PROP,\n    STORES_PROP,\n    QUEUE_PROP,\n    POS_PROP,\n    TRANSACTION_PROP,\n    TRANSACTION_TIMER_PROP,\n    AUTO_RECORD_PROP\n]);\n", "import StateBase from './StateBase.js';\n/**\n * @module Core/data/stm/state/Registry\n *\n * Provides map of registered STM states.\n *\n * Needed to remove states circular dependency.\n *\n * @internal\n */\nconst registry = new Map();\n/**\n * Registers STM state class with the given name.\n *\n * @private\n *\n * @param {String} name\n * @param {Core.data.stm.state.StateBase} state\n */\nexport const registerStmState = (name, state) => {\n    registry.set(name, state);\n};\n/**\n * Resolves STM state class with the given name.\n *\n * @private\n *\n * @param {String} name\n * @returns {Core.data.stm.state.StateBase} state\n */\nexport const resolveStmState = (state) => {\n    if (typeof state === 'string') {\n        state = registry.get(state);\n    }\n    return state;\n};\n// UMD/module compatible export\n// NOTE: the most compatible way of exporting is:\n//       import registry from './Registry.js';\n//       { registerStmState, resolveStmState } = registry;\n//          or\n//       registry.registerStmState(...);\nexport default {\n    registerStmState,\n    resolveStmState\n};\n", "import { QUEUE_PROP, POS_PROP } from './Props.js';\nexport const resetQueue = (stm, options) => {\n    const { undo, redo } = options;\n    let newProps;\n    if (undo && !redo) {\n        newProps = {\n            [QUEUE_PROP] : stm[QUEUE_PROP].slice(stm.position),\n            [POS_PROP]   : 0\n        };\n    }\n    else if (redo && !undo) {\n        newProps = {\n            [QUEUE_PROP] : stm[QUEUE_PROP].slice(0, stm.position)\n        };\n    }\n    else {\n        newProps = {\n            [QUEUE_PROP] : [],\n            [POS_PROP]   : 0\n        };\n    };\n    return [\n        newProps,\n        () => {\n            stm.notifyStoresAboutQueueReset(options);\n        }\n    ];\n};\n", "/**\n * @module Core/data/stm/state/DisabledState\n */\nimport StateBase, { throwInvalidMethodCall } from './StateBase.js';\nimport { AUTO_RECORD_PROP } from '../Props.js';\nimport Registry from './Registry.js';\nimport { resetQueue } from '../Helpers.js';\n/**\n * STM disabled state class.\n *\n * @internal\n */\nexport class DisabledStateClass extends StateBase {\n    canUndo() {\n        return false;\n    }\n    canRedo() {\n        return false;\n    }\n    onUndo() {\n        throwInvalidMethodCall();\n    }\n    onRedo() {\n        throwInvalidMethodCall();\n    }\n    onEnable(stm) {\n        return stm.autoRecord ? 'autoreadystate' : 'readystate';\n    }\n    onDisable() {\n        throwInvalidMethodCall();\n    }\n    onAutoRecordOn() {\n        return {\n            [AUTO_RECORD_PROP] : true\n        };\n    }\n    onAutoRecordOff() {\n        return {\n            [AUTO_RECORD_PROP] : false\n        };\n    }\n    onStartTransaction() {\n        throwInvalidMethodCall();\n    }\n    onStopTransaction()  {\n        throwInvalidMethodCall();\n    }\n    onStopTransactionDelayed() {\n        throwInvalidMethodCall();\n    }\n    onRejectTransaction() {\n        throwInvalidMethodCall();\n    }\n    onResetQueue(stm, options) {\n        return resetQueue(stm, options);\n    }\n    onModelUpdate()      {}\n    onModelInsertChild() {}\n    onModelRemoveChild() {}\n    onStoreModelAdd()    {}\n    onStoreModelInsert() {}\n    onStoreModelRemove() {}\n    onStoreRemoveAll()   {}\n}\n/**\n * STM disabled state.\n *\n * @internal\n */\nconst DisabledState = new DisabledStateClass();\nexport default DisabledState;\nRegistry.registerStmState('disabledstate', DisabledState);\n", "/**\n * @module Core/data/stm/Transaction\n */\nimport Base from '../../Base.js';\nconst ACTION_QUEUE_PROP = Symbol('ACTION_QUEUE_PROP');\n/**\n * STM transaction class, holds list of actions constituting a transaction.\n *\n * A transaction can be undone and redone. Upon undo all the actions being held\n * are undone in reverse order. Upon redo all the actions being held are redone\n * in forward order.\n */\nexport default class Transaction extends Base {\n    get defaultConfig() {\n        return {\n            /**\n             * Transaction title\n             *\n             * @config {String}\n             */\n            title : null\n        };\n    }\n    construct(...args) {\n        this[ACTION_QUEUE_PROP] = [];\n        super.construct(...args);\n    }\n    /**\n     * Gets transaction's actions queue\n     *\n     * @property {Core.data.stm.action.ActionBase[]}\n     */\n    get queue() {\n        return this[ACTION_QUEUE_PROP].slice(0);\n    }\n    /**\n     * Gets transaction's actions queue length\n     *\n     * @property {Number}\n     */\n    get length() {\n        return this[ACTION_QUEUE_PROP].length;\n    }\n    /**\n     * Adds an action to the transaction.\n     *\n     * @param {Core.data.stm.action.ActionBase|Object} action\n     */\n    addAction(action) {\n        this[ACTION_QUEUE_PROP].push(action);\n    }\n    /**\n     * Undoes actions held\n     */\n    undo() {\n        const queue = this[ACTION_QUEUE_PROP];\n        for (let i = queue.length - 1; i >= 0; --i) {\n            queue[i].undo();\n        }\n    }\n    /**\n     * Redoes actions held\n     */\n    redo() {\n        const queue = this[ACTION_QUEUE_PROP];\n        for (let i = 0, len = queue.length; i < len; ++i) {\n            queue[i].redo();\n        }\n    }\n}\nTransaction._$name = 'Transaction';", "import StateBase, { throwInvalidMethodCall } from './StateBase.js';\nimport Transaction from '../Transaction.js';\nimport { STATE_PROP, QUEUE_PROP, POS_PROP, TRANSACTION_PROP, AUTO_RECORD_PROP } from '../Props.js';\nimport Registry from './Registry.js';\nimport { resetQueue } from '../Helpers.js';\n/**\n * @module Core/data/stm/state/ReadyState\n */\n/**\n * STM ready state class.\n *\n * @internal\n */\nexport class ReadyStateClass extends StateBase {\n    canUndo(stm) {\n        //      v\n        // |*|*|\n        return 0 < stm.position && stm.position <= stm.length;\n    }\n    canRedo(stm) {\n        //  v\n        // |*|*|\n        return 0 <= stm.position && stm.position < stm.length;\n    }\n    onUndo(stm, steps) {\n        let curPos = stm.position;\n        const\n            queue  = stm[QUEUE_PROP],\n            newPos = Math.max(0, curPos - steps),\n            next = () => {\n                stm.notifyStoresAboutStateRestoringStart();\n                const undoneTransactions = [];\n                while (curPos !== newPos) {\n                    const transaction = queue[--curPos];\n                    transaction.undo();\n                    undoneTransactions.push(transaction);\n                }\n                return [stm.autoRecord ? 'autoreadystate' : 'readystate', () => {\n                    stm.notifyStoresAboutStateRestoringStop({ cause : 'undo', transactions : undoneTransactions });\n                }];\n            };\n        return [{\n            [STATE_PROP] : 'restoringstate',\n            [POS_PROP]   : newPos\n        }, next];\n    }\n    onRedo(stm, steps) {\n        let curPos = stm.position;\n        const\n            queue  = stm[QUEUE_PROP],\n            newPos = Math.min(queue.length, curPos + steps);\n        const next = () => {\n            stm.notifyStoresAboutStateRestoringStart();\n            const redoneTransactions = [];\n            do {\n                const transaction = queue[curPos++];\n                transaction.redo();\n                redoneTransactions.push(transaction);\n            }\n            while (curPos !== newPos);\n            return [stm.autoRecord ? 'autoreadystate' : 'readystate', () => {\n                stm.notifyStoresAboutStateRestoringStop({ cause : 'redo', transactions : redoneTransactions });\n            }];\n        };\n        return [{\n            [STATE_PROP] : 'restoringstate',\n            [POS_PROP]   : newPos\n        }, next];\n    }\n    onEnable() {\n        throwInvalidMethodCall();\n    }\n    onDisable() {\n        return 'disabledstate';\n    }\n    onAutoRecordOn() {\n        return {\n            [STATE_PROP]       : 'autoreadystate',\n            [AUTO_RECORD_PROP] : true\n        };\n    }\n    onAutoRecordOff() {\n        throwInvalidMethodCall();\n    }\n    onStartTransaction(stm, title) {\n        const transaction = new Transaction({ title });\n        return [{\n            [STATE_PROP]       : 'recordingstate',\n            [TRANSACTION_PROP] : transaction\n        }, () => {\n            stm.notifyStoresAboutStateRecordingStart(transaction);\n        }];\n    }\n    onStopTransaction() {\n        throwInvalidMethodCall();\n    }\n    onStopTransactionDelayed() {\n        throwInvalidMethodCall();\n    }\n    onRejectTransaction() {\n        throwInvalidMethodCall();\n    }\n    onResetQueue(stm, options) {\n        return resetQueue(stm, options);\n    }\n    onModelUpdate()      {}\n    onModelInsertChild() {}\n    onModelRemoveChild() {}\n    onStoreModelAdd()    {}\n    onStoreModelInsert() {}\n    onStoreModelRemove() {}\n    onStoreRemoveAll()   {}\n}\n/**\n * STM ready state.\n *\n * @internal\n */\nconst ReadyState = new ReadyStateClass();\nexport default ReadyState;\nRegistry.registerStmState('readystate', ReadyState);\n", "/**\n * @module Core/data/stm/state/RecordingState\n */\nimport StateBase, { throwInvalidMethodCall } from './StateBase.js';\nimport { STATE_PROP, TRANSACTION_PROP, QUEUE_PROP, POS_PROP, AUTO_RECORD_PROP } from '../Props.js';\nimport Registry from './Registry.js';\nimport { resetQueue } from '../Helpers.js';\n/**\n * STM recording state class.\n *\n * @internal\n */\nexport class RecordingStateClass extends StateBase {\n    canUndo() {\n        return false;\n    }\n    canRedo() {\n        return false;\n    }\n    onEnable() {}\n    onDisable(stm) {\n        const transaction = stm[TRANSACTION_PROP];\n        stm.notifyStoresAboutStateRecordingStop(transaction, { disabled : true });\n        return {\n            [STATE_PROP]       : 'disabledstate',\n            [TRANSACTION_PROP] : null\n        };\n    }\n    onAutoRecordOn(stm) {\n        return [{\n            [STATE_PROP]       : 'autorecordingstate',\n            [AUTO_RECORD_PROP] : true\n        }, () => {\n            stm.stopTransactionDelayed();\n        }];\n    }\n    onAutoRecordOff() {\n        throwInvalidMethodCall();\n    }\n    onStartTransaction() {\n        throwInvalidMethodCall();\n    }\n    onStopTransaction(stm, title) {\n        const\n            transaction = stm[TRANSACTION_PROP],\n            queue       = stm[QUEUE_PROP];\n        let position = stm[POS_PROP];\n        if (transaction.length) {\n            if (!transaction.title && !title && stm.getTransactionTitle) {\n                transaction.title = stm.getTransactionTitle(transaction);\n            }\n            else if (title) {\n                transaction.title = title;\n            }\n            queue[position] = transaction;\n            queue.length    = ++position;\n        }\n        return [{\n            [STATE_PROP]       : 'readystate',\n            [POS_PROP]         : position,\n            [TRANSACTION_PROP] : null\n        }, () => {\n            stm.notifyStoresAboutStateRecordingStop(transaction, { stop : true });\n        }];\n    }\n    onRejectTransaction(stm) {\n        const transaction = stm[TRANSACTION_PROP];\n        return [{\n            [STATE_PROP]       : 'restoringstate',\n            [TRANSACTION_PROP] : null\n        }, () => {\n            if (transaction.length) {\n                transaction.undo();\n            }\n            return [\n                'readystate',\n                () => {\n                    stm.notifyStoresAboutStateRecordingStop(transaction, { rejected : true });\n                }\n            ];\n        }];\n    }\n    onStopTransactionDelayed() {\n        throwInvalidMethodCall();\n    }\n    onResetQueue(stm, options) {\n        return resetQueue(stm, options);\n    }\n    onModelUpdate(stm, model, newData, oldData, isInitialUserAction) {\n        const transaction = stm[TRANSACTION_PROP];\n        transaction.addAction(stm.makeModelUpdateAction(model, newData, oldData, isInitialUserAction));\n    }\n    onModelInsertChild(stm, parentModel, index, childModel, previousParent, previousIndex) {\n        const transaction = stm[TRANSACTION_PROP];\n        transaction.addAction(stm.makeModelInsertChildAction(parentModel, index, childModel, previousParent, previousIndex));\n    }\n    onModelRemoveChild(stm, parentModel, childModels, context) {\n        const transaction = stm[TRANSACTION_PROP];\n        transaction.addAction(stm.makeModelRemoveChildAction(parentModel, childModels, context));\n    }\n    onStoreModelAdd(stm, store, models, silent)    {\n        const transaction = stm[TRANSACTION_PROP];\n        transaction.addAction(stm.makeStoreModelAddAction(store, models, silent));\n    }\n    onStoreModelInsert(stm, store, index, models, context, silent) {\n        const transaction = stm[TRANSACTION_PROP];\n        transaction.addAction(stm.makeStoreModelInsertAction(store, index, models, context, silent));\n    }\n    onStoreModelRemove(stm, store, models, context, silent) {\n        const transaction = stm[TRANSACTION_PROP];\n        transaction.addAction(stm.makeStoreModelRemoveAction(store, models, context, silent));\n    }\n    onStoreRemoveAll(stm, store, allRecords, silent)   {\n        const transaction = stm[TRANSACTION_PROP];\n        transaction.addAction(stm.makeStoreRemoveAllAction(store, allRecords, silent));\n    }\n}\n/**\n * STM recording state.\n *\n * @internal\n */\nconst RecordingState = new RecordingStateClass();\nexport default RecordingState;\nRegistry.registerStmState('recordingstate', RecordingState);\n", "/**\n * @module Core/data/stm/state/RestoringState\n */\nimport StateBase, { throwInvalidMethodCall } from './StateBase.js';\nimport { AUTO_RECORD_PROP } from '../Props.js';\nimport Registry from './Registry.js';\n/**\n * STM restoring state class.\n *\n * @internal\n */\nexport class RestoringStateClass extends StateBase {\n    static get $name() {\n        return 'RestoringStateClass';\n    }\n    canUndo() {\n        return false;\n    }\n    canRedo() {\n        return false;\n    }\n    onUndo() {\n        throwInvalidMethodCall();\n    }\n    onRedo() {\n        throwInvalidMethodCall();\n    }\n    onEnable() {\n        throwInvalidMethodCall();\n    }\n    onDisable() {\n        throwInvalidMethodCall();\n    }\n    onAutoRecordOn() {\n        return {\n            [AUTO_RECORD_PROP] : true\n        };\n    }\n    onAutoRecordOff() {\n        return {\n            [AUTO_RECORD_PROP] : false\n        };\n    }\n    onStartTransaction() {\n        throwInvalidMethodCall();\n    }\n    onStopTransaction()  {\n        throwInvalidMethodCall();\n    }\n    onStopTransactionDelayed() {\n        throwInvalidMethodCall();\n    }\n    onRejectTransaction() {\n        throwInvalidMethodCall();\n    }\n    onQueueReset() {\n        throwInvalidMethodCall();\n    }\n    onModelUpdate()      {}\n    onModelInsertChild() {}\n    onModelRemoveChild() {}\n    onStoreModelAdd()    {}\n    onStoreModelInsert() {}\n    onStoreModelRemove() {}\n    onStoreRemoveAll()   {}\n}\n/**\n * STM restoring state.\n *\n * @internal\n */\nconst RestoringState = new RestoringStateClass();\nexport default RestoringState;\nRegistry.registerStmState('restoringstate', RestoringState);\n", "import { throwInvalidMethodCall } from './StateBase.js';\nimport Transaction from '../Transaction.js';\nimport { ReadyStateClass } from './ReadyState.js';\nimport { STATE_PROP, TRANSACTION_PROP, AUTO_RECORD_PROP } from '../Props.js';\nimport Registry from './Registry.js';\n/**\n * @module Core/data/stm/state/AutoReadyState\n */\n/**\n * STM transaction autostart ready state class.\n *\n * @internal\n */\nexport class AutoReadyStateClass extends ReadyStateClass {\n    onAutoRecordOn() {\n        throwInvalidMethodCall();\n    }\n    onAutoRecordOff() {\n        return {\n            [STATE_PROP]       : 'readystate',\n            [AUTO_RECORD_PROP] : false\n        };\n    }\n    onStartTransaction(stm, title) {\n        const transaction = new Transaction({ title });\n        return [{\n            [STATE_PROP]       : 'autorecordingstate',\n            [TRANSACTION_PROP] : transaction\n        }, () => {\n            stm.notifyStoresAboutStateRecordingStart(transaction);\n            stm.stopTransactionDelayed();\n        }];\n    }\n    onModelUpdate(stm, model, newData, oldData) {\n        stm.startTransaction();\n        stm.onModelUpdate(model, newData, oldData);\n    }\n    onModelInsertChild(stm, parentModel, index, childModels, context) {\n        stm.startTransaction();\n        stm.onModelInsertChild(parentModel, index, childModels, context);\n    }\n    onModelRemoveChild(stm, parentModel, childModels, context) {\n        stm.startTransaction();\n        stm.onModelRemoveChild(parentModel, childModels, context);\n    }\n    onStoreModelAdd(stm, store, models, silent) {\n        stm.startTransaction();\n        stm.onStoreModelAdd(store, models, silent);\n    }\n    onStoreModelInsert(stm, store, index, models, context, silent) {\n        stm.startTransaction();\n        stm.onStoreModelInsert(store, index, models, context, silent);\n    }\n    onStoreModelRemove(stm, store, models, context, silent) {\n        stm.startTransaction();\n        stm.onStoreModelRemove(store, models, context, silent);\n    }\n    onStoreRemoveAll(stm, store, allRecords, silent) {\n        stm.startTransaction();\n        stm.onStoreRemoveAll(store, allRecords, silent);\n    }\n}\n/**\n * STM transaction autostart ready state.\n *\n * @internal\n */\nconst AutoReadyState = new AutoReadyStateClass();\nexport default AutoReadyState;\nRegistry.registerStmState('autoreadystate', AutoReadyState);\n", "/**\n * @module Core/data/stm/state/AutoRecordingState\n */\nimport Delayable from '../../../mixin/Delayable.js';\nimport { throwInvalidMethodCall } from './StateBase.js';\nimport { RecordingStateClass } from './RecordingState.js';\nimport { STATE_PROP, TRANSACTION_PROP, TRANSACTION_TIMER_PROP, QUEUE_PROP, POS_PROP, AUTO_RECORD_PROP } from '../Props.js';\nimport Registry from './Registry.js';\nimport { resetQueue } from '../Helpers.js';\n/**\n * STM recording state class.\n *\n * @internal\n */\nexport class AutoRecordingStateClass extends RecordingStateClass.mixin(Delayable) {\n    onDisable(stm) {\n        const\n            transaction = stm[TRANSACTION_PROP],\n            timer       = stm[TRANSACTION_TIMER_PROP];\n        if (timer) {\n            this.clearTimeout(timer);\n        }\n        stm.notifyStoresAboutStateRecordingStop(transaction, { disabled : true });\n        return {\n            [STATE_PROP]             : 'disabledstate',\n            [TRANSACTION_PROP]       : null,\n            [TRANSACTION_TIMER_PROP] : null\n        };\n    }\n    onAutoRecordOn(stm) {\n        throwInvalidMethodCall();\n    }\n    onAutoRecordOff(stm) {\n        const timer       = stm[TRANSACTION_TIMER_PROP];\n        if (timer) {\n            this.clearTimeout(timer);\n        }\n        return {\n            [STATE_PROP]             : 'recordingstate',\n            [AUTO_RECORD_PROP]       : false,\n            [TRANSACTION_TIMER_PROP] : null\n        };\n    }\n    onStopTransaction(stm, title) {\n        const\n            transaction = stm[TRANSACTION_PROP],\n            timer       = stm[TRANSACTION_TIMER_PROP],\n            queue       = stm[QUEUE_PROP];\n        let position = stm[POS_PROP];\n        if (timer) {\n            this.clearTimeout(timer);\n        }\n        if (transaction.length) {\n            if (!transaction.title && !title && stm.getTransactionTitle) {\n                transaction.title = stm.getTransactionTitle(transaction);\n            }\n            else if (title) {\n                transaction.title = title;\n            }\n            queue[position] = transaction;\n            queue.length    = ++position;\n        }\n        return [{\n            [STATE_PROP]             : 'autoreadystate',\n            [POS_PROP]               : position,\n            [TRANSACTION_PROP]       : null,\n            [TRANSACTION_TIMER_PROP] : null\n        }, () => {\n            stm.notifyStoresAboutStateRecordingStop(transaction, { stop : true });\n        }];\n    }\n    onStopTransactionDelayed(stm) {\n        let timer = stm[TRANSACTION_TIMER_PROP];\n        if (timer) {\n            this.clearTimeout(timer);\n        }\n        timer = this.setTimeout(\n            () => {\n                stm.stopTransaction();\n            },\n            stm.autoRecordTransactionStopTimeout\n        );\n        return {\n            [STATE_PROP]             : AutoRecordingState,\n            [TRANSACTION_TIMER_PROP] : timer\n        };\n    }\n    onResetQueue(stm, options) {\n        return resetQueue(stm, options);\n    }\n    onRejectTransaction(stm) {\n        const\n            transaction = stm[TRANSACTION_PROP],\n            timer = stm[TRANSACTION_TIMER_PROP];\n        if (timer) {\n            this.clearTimeout(timer);\n        }\n        return [{\n            [STATE_PROP]             : 'restoringstate',\n            [TRANSACTION_PROP]       : null,\n            [TRANSACTION_TIMER_PROP] : null\n        }, () => {\n            if (transaction.length) {\n                transaction.undo();\n            }\n            return [\n                'autoreadystate',\n                () => {\n                    stm.notifyStoresAboutStateRecordingStop(transaction, { rejected : true });\n                }\n            ];\n        }];\n    }\n    onModelUpdate(stm, ...rest) {\n        super.onModelUpdate(stm, ...rest);\n        stm.stopTransactionDelayed();\n    }\n    onModelInsertChild(stm, ...rest) {\n        super.onModelInsertChild(stm, ...rest);\n        stm.stopTransactionDelayed();\n    }\n    onModelRemoveChild(stm, ...rest) {\n        super.onModelRemoveChild(stm, ...rest);\n        stm.stopTransactionDelayed();\n    }\n    onStoreModelAdd(stm, ...rest)    {\n        super.onStoreModelAdd(stm, ...rest);\n        stm.stopTransactionDelayed();\n    }\n    onStoreModelInsert(stm, ...rest) {\n        super.onStoreModelInsert(stm, ...rest);\n        stm.stopTransactionDelayed();\n    }\n    onStoreModelRemove(stm, ...rest) {\n        super.onStoreModelRemove(stm, ...rest);\n        stm.stopTransactionDelayed();\n    }\n    onStoreRemoveAll(stm, ...rest)   {\n        super.onStoreRemoveAll(stm, ...rest);\n        stm.stopTransactionDelayed();\n    }\n}\n/**\n * STM recording state.\n *\n * @internal\n */\nconst AutoRecordingState = new AutoRecordingStateClass();\nexport default AutoRecordingState;\nRegistry.registerStmState('autorecordingstate', AutoRecordingState);\n", "/**\n * @module Core/data/stm/action/ActionBase\n */\nimport Base from '../../../Base.js';\nconst throwAbstractMethodCall = () => {\n    throw new Error('Abstract method call!');\n};\n/**\n * Base class for STM actions.\n *\n * @abstract\n */\nexport default class ActionBase extends Base {\n    /**\n     * Gets the type of the action (stringified class name).\n     * @readonly\n     * @property {String}\n     */\n    get type() {\n        return this.constructor.name;\n    }\n    /**\n     * Undoes an action\n     */\n    undo() {\n        throwAbstractMethodCall();\n    }\n    /**\n     * Redoes an action\n     */\n    redo() {\n        throwAbstractMethodCall();\n    }\n}\nActionBase._$name = 'ActionBase';", "/**\n * @module Core/data/stm/action/UpdateAction\n */\nimport ActionBase from './ActionBase.js';\nconst\n    MODEL_PROP    = Symbol('MODEL_PROP'),\n    NEW_DATA_PROP = Symbol('NEW_DATA_PROP'),\n    OLD_DATA_PROP = Symbol('OLD_DATA_PROP');\n/**\n * Action to record the fact that a model has been updated.\n * @extends Core/data/stm/action/ActionBase\n */\nexport default class UpdateAction extends ActionBase {\n    static get defaultConfig() {\n        return {\n            /**\n             * Reference to a model which has been updated.\n             *\n             * @config {Core.data.Model}\n             * @default\n             */\n            model : undefined,\n            /**\n             * Map of updated properties with new values.\n             *\n             * @config {Object}\n             * @default\n             */\n            newData : undefined,\n            /**\n             * Map of updated properties with old values.\n             *\n             * @config {Object}\n             * @default\n             */\n            oldData : undefined,\n            isInitialUserAction : false\n        };\n    }\n    get type() {\n        return 'UpdateAction';\n    }\n    get model() {\n        return this[MODEL_PROP];\n    }\n    set model(value) {\n        this[MODEL_PROP] = value;\n    }\n    get newData() {\n        return this[NEW_DATA_PROP];\n    }\n    set newData(value) {\n        this[NEW_DATA_PROP] = { ...value };\n    }\n    get oldData() {\n        return this[OLD_DATA_PROP];\n    }\n    set oldData(value) {\n        this[OLD_DATA_PROP] = { ...value };\n    }\n    undo() {\n        const { model, oldData } = this;\n        // engine needs the setters to be activated, since there's some additional logic (for example, invalidate\n        // dispatcher)\n        if (model.$) {\n            Object.assign(model, oldData);\n        }\n        // it seems STM has to use `model.set()` because of `model.inSet` overrides or smth\n        // w/o this call, just with `Object.assign()` above, the view is not refreshed\n        // Since invoking accessor will just forward change to the engine, we need to pass `skipAccessors = true`\n        // to this call to make this change on data level.\n        // Covered by TaskEdit.t `autoSync` subtest\n        // but it seems, bypassing the setters puts the change in the `data` property and does not\n        // modify the engine-like caches, that Core uses\n        // this may lead to change being lost, overwritten by some other change, which does\n        model.set(oldData, null, null, null, Boolean(model.$));\n    }\n    redo() {\n        const { model, newData } = this;\n        // see comments above\n        if (model.$) {\n            Object.assign(model, newData);\n        }\n        model.set(newData, null, null, null, Boolean(model.$));\n    }\n}\nUpdateAction._$name = 'UpdateAction';", "/**\n * @module Core/data/stm/action/InsertChildAction\n */\nimport ActionBase from './ActionBase.js';\nconst\n    PARENT_MODEL_PROP = Symbol('PARENT_MODEL_PROP'),\n    CHILD_MODELS_PROP = Symbol('CHILD_MODELS_PROP'),\n    INSERT_INDEX_PROP = Symbol('INSERT_INDEX_PROP'),\n    CONTEXT_PROP      = Symbol('CONTEXT_PROP');\n/**\n * Action to record the fact of adding a children models into a parent model.\n * @extends Core/data/stm/action/ActionBase\n */\nexport default class InsertChildAction extends ActionBase {\n    static get defaultConfig() {\n        return {\n            /**\n             * Reference to a parent model a child model has been added to.\n             *\n             * @config {Core.data.Model}\n             * @default\n             */\n            parentModel : undefined,\n            /**\n             * Children models inserted.\n             *\n             * @config {Core.data.Model[]}\n             * @default\n             */\n            childModels : undefined,\n            /**\n             * Index a children models are inserted at\n             *\n             * @config {Number}\n             * @default\n             */\n            insertIndex : undefined,\n            /**\n             * Map having children models as keys and values containing previous parent\n             * of each model and index at the previous parent.\n             *\n             * @config {Object}\n             * @default\n             */\n            context : undefined\n        };\n    }\n    get type() {\n        return 'InsertChildAction';\n    }\n    get parentModel() {\n        return this[PARENT_MODEL_PROP];\n    }\n    set parentModel(model) {\n        this[PARENT_MODEL_PROP] = model;\n    }\n    get childModels() {\n        return this[CHILD_MODELS_PROP];\n    }\n    set childModels(models) {\n        this[CHILD_MODELS_PROP] = models.slice(0);\n    }\n    get insertIndex() {\n        return this[INSERT_INDEX_PROP];\n    }\n    set insertIndex(index) {\n        this[INSERT_INDEX_PROP] = index;\n    }\n    get context() {\n        return this[CONTEXT_PROP];\n    }\n    set context(ctx) {\n        this[CONTEXT_PROP] = ctx;\n    }\n    undo() {\n        const\n            { parentModel, context, childModels } = this,\n            byFromParent = new Map(),\n            newlyAdded = new Set();\n        for (const childModel of childModels) {\n            const ctx = context.get(childModel);\n            if (!ctx) {\n                newlyAdded.add(childModel);\n            }\n            else {\n                let undoTaskData = byFromParent.get(ctx.parent);\n                if (!undoTaskData) {\n                    undoTaskData = { moveRight : [], moveLeft : [], moveFromAnotherParent : [] };\n                    byFromParent.set(ctx.parent, undoTaskData);\n                }\n                if (ctx.parent === parentModel) {\n                    if (ctx.index > childModel.parentIndex) {\n                        undoTaskData.moveRight.push({ parent : ctx.parent, model : childModel, index : ctx.index + 1 });\n                    }\n                    else {\n                        undoTaskData.moveLeft.push({ parent : ctx.parent, model : childModel, index : ctx.index });\n                    }\n                }\n                else {\n                    undoTaskData.moveFromAnotherParent.push({ parent : ctx.parent, model : childModel, index : ctx.index });\n                }\n            }\n        }\n        for (const undoTaskData of byFromParent.values()) {\n            const { moveRight, moveLeft } = undoTaskData;\n            moveLeft.sort((a, b) => a.index - b.index);\n            moveRight.sort((a, b) => b.index - a.index);\n        }\n        newlyAdded.forEach(model => model.parent.removeChild(model));\n        for (const undoTaskData of byFromParent.values()) {\n            const { moveRight, moveLeft, moveFromAnotherParent } = undoTaskData;\n            moveLeft.forEach(task => {\n                task.parent.insertChild(task.model, task.index);\n            });\n            moveRight.forEach(task => {\n                task.parent.insertChild(task.model, task.index);\n            });\n            moveFromAnotherParent.forEach(task => {\n                task.parent.insertChild(task.model, task.index);\n            });\n        }\n    }\n    redo() {\n        const { parentModel, insertIndex, childModels } = this;\n        parentModel.insertChild(childModels, insertIndex);\n    }\n}\nInsertChildAction._$name = 'InsertChildAction';", "/**\n * @module Core/data/stm/action/RemoveChildAction\n */\nimport ActionBase from './ActionBase.js';\nconst\n    PARENT_MODEL_PROP = Symbol('PARENT_MODEL_PROP'),\n    CHILD_MODELS_PROP = Symbol('CHILD_MODELS_PROP'),\n    CONTEXT_PROP      = Symbol('CONTEXT_PROP');\n/**\n * Action to record store remove child operation.\n * @extends Core/data/stm/action/ActionBase\n */\nexport default class RemoveChildAction extends ActionBase {\n    static get defaultConfig() {\n        return {\n            /**\n             * Reference to a parent model a child model has been removed to.\n             *\n             * @config {Core.data.Model}\n             * @default\n             */\n            parentModel : undefined,\n            /**\n             * Children models removed.\n             *\n             * @config {Core.data.Model[]}\n             * @default\n             */\n            childModels : undefined,\n            /**\n             * Map having children models as keys and values containing previous parent\n             * index at the parent.\n             *\n             * @config {Object}\n             * @default\n             */\n            context : undefined\n        };\n    }\n    get type() {\n        return 'RemoveChildAction';\n    }\n    get parentModel() {\n        return this[PARENT_MODEL_PROP];\n    }\n    set parentModel(model) {\n        this[PARENT_MODEL_PROP] = model;\n    }\n    get childModels() {\n        return this[CHILD_MODELS_PROP];\n    }\n    set childModels(models) {\n        this[CHILD_MODELS_PROP] = models.slice(0);\n    }\n    get context() {\n        return this[CONTEXT_PROP];\n    }\n    set context(ctx) {\n        this[CONTEXT_PROP] = ctx;\n    }\n    undo() {\n        const { parentModel, context, childModels } = this;\n        // Let's sort models by parent index such that models with lesser index\n        // were inserted back first, thus making valid parent index of models following.\n        childModels.sort((lhs, rhs) => {\n            const\n                lhsIndex = context.get(lhs),\n                rhsIndex = context.get(rhs);\n            return (lhsIndex - rhsIndex);\n        });\n        // Now let's re-insert records back to where they were\n        childModels.forEach(m => {\n            parentModel.insertChild(m, context.get(m));\n        });\n    }\n    redo() {\n        this.parentModel.removeChild(this.childModels);\n    }\n}\nRemoveChildAction._$name = 'RemoveChildAction';", "import ActionBase from './ActionBase.js';\nimport Store from '../../Store.js';\n/**\n * @module Core/data/stm/action/AddAction\n */\nconst\n    STORE_PROP      = Symbol('STORE_PROP'),\n    MODEL_LIST_PROP = Symbol('MODEL_LIST_PROP');\n/**\n * Action to record the fact of models adding to a store.\n * @extends Core/data/stm/action/ActionBase\n */\nexport default class AddAction extends ActionBase {\n    static get defaultConfig() {\n        return {\n            /**\n             * Reference to a store models have been added into.\n             *\n             * @config {Core.data.Store}\n             * @default\n             */\n            store : undefined,\n            /**\n             * List of models added into the store.\n             *\n             * @config {Core.data.Model[]}\n             * @default\n             */\n            modelList : undefined,\n            /**\n             * Flag showing if undo/redo should be done silently i.e. with events suppressed\n             *\n             * @config {Boolean}\n             * @default\n             */\n            silent : false\n        };\n    }\n    get type() {\n        return 'AddAction';\n    }\n    get store() {\n        return this[STORE_PROP];\n    }\n    set store(store) {\n        this[STORE_PROP] = store;\n    }\n    get modelList() {\n        return this[MODEL_LIST_PROP];\n    }\n    set modelList(list) {\n        this[MODEL_LIST_PROP] = list.slice(0);\n    }\n    undo() {\n        this.store.remove(this.modelList, this.silent);\n    }\n    redo() {\n        this.store.add(this.modelList, this.silent);\n    }\n}\nAddAction._$name = 'AddAction';", "import ActionBase from './ActionBase.js';\nimport Store from '../../Store.js';\n/**\n * @module Core/data/stm/action/InsertAction\n */\nconst\n    STORE_PROP        = Symbol('STORE_PROP'),\n    MODEL_LIST_PROP   = Symbol('MODEL_LIST_PROP'),\n    INSERT_INDEX_PROP = Symbol('INSERT_INDEX_PROP'),\n    CONTEXT_PROP      = Symbol('CONTEXT_PROP');\n/**\n * Action to record the fact of models inserting into a store.\n * @extends Core/data/stm/action/ActionBase\n */\nexport default class InsertAction extends ActionBase {\n    static get defaultConfig() {\n        return {\n            /**\n             * Reference to a store models have been inserted into.\n             *\n             * @config {Core.data.Store}\n             * @default\n             */\n            store : undefined,\n            /**\n             * List of models inserted into the store.\n             *\n             * @config {Core.data.Model[]}\n             * @default\n             */\n            modelList : undefined,\n            /**\n             * Index the models have been inserted at.\n             *\n             * @config {Number}\n             * @default\n             */\n            insertIndex : undefined,\n            /**\n             * Models move context (if models has been moved), if any.\n             * Map this {@link Core/data/Model} instances as keys and their\n             * previous index as values\n             *\n             * @config {Map}\n             * @default\n             */\n            context : undefined,\n            /**\n             * Flag showing if undo/redo should be done silently i.e. with events suppressed\n             *\n             * @config {Boolean}\n             * @default\n             */\n            silent : false\n        };\n    }\n    get type() {\n        return 'InsertAction';\n    }\n    get store() {\n        return this[STORE_PROP];\n    }\n    set store(store) {\n        this[STORE_PROP] = store;\n    }\n    get modelList() {\n        return this[MODEL_LIST_PROP];\n    }\n    set modelList(list) {\n        this[MODEL_LIST_PROP] = list.slice(0);\n    }\n    get insertIndex() {\n        return this[INSERT_INDEX_PROP];\n    }\n    set insertIndex(index) {\n        this[INSERT_INDEX_PROP] = index;\n    }\n    get context() {\n        return this[CONTEXT_PROP];\n    }\n    set context(context) {\n        this[CONTEXT_PROP] = context;\n    }\n    undo() {\n        const { store, modelList, context, silent } = this;\n        // Let's sort models by index such that models with lesser index\n        // were inserted back first, thus making valid index of models following.\n        modelList.sort((lhs, rhs) => {\n            const\n                lhsIndex = context.get(lhs),\n                rhsIndex = context.get(rhs);\n            return lhsIndex !== undefined && rhsIndex !== undefined ? lhsIndex - rhsIndex : 0;\n        });\n        modelList.forEach(m => {\n            const index = context.get(m);\n            // Flag the inserted record that we undo to skip adding it to \"store.removed\"\n            m._undoingInsertion = true;\n            if (index !== undefined) {\n                // Insert at previous index\n                store.insert(index, m, silent);\n            }\n            else {\n                // Just remove\n                store.remove(m, silent);\n            }\n            m._undoingInsertion = false;\n        });\n    }\n    redo() {\n        const me = this;\n        me.store.insert(me.insertIndex, me.modelList, me.silent);\n    }\n}\nInsertAction._$name = 'InsertAction';", "/**\n * @module Core/data/stm/action/RemoveAction\n */\nimport ActionBase from './ActionBase.js';\nimport Store from '../../Store.js';\nconst\n    STORE_PROP      = Symbol('STORE_PROP'),\n    MODEL_LIST_PROP = Symbol('MODEL_LIST_PROP'),\n    CONTEXT_PROP    = Symbol('CONTEXT_PROP');\n/**\n * Action to record the fact of models removed from a store.\n * @extends Core/data/stm/action/ActionBase\n */\nexport default class RemoveAction extends ActionBase {\n    static get defaultConfig() {\n        return {\n            /**\n             * Reference to a store models have been removed from.\n             *\n             * @config {Core.data.Store}\n             * @default\n             */\n            store : undefined,\n            /**\n             * List of models removed from the store.\n             *\n             * @config {Core.data.Model[]}\n             * @default\n             */\n            modelList : undefined,\n            /**\n             * Models removing context.\n             *\n             * @config {Object}\n             * @default\n             */\n            context : undefined,\n            /**\n             * Flag showing if undo/redo should be done silently i.e. with events suppressed\n             *\n             * @config {Boolean}\n             * @default\n             */\n            silent : false\n        };\n    }\n    get type() {\n        return 'RemoveAction';\n    }\n    get store() {\n        return this[STORE_PROP];\n    }\n    set store(store) {\n        this[STORE_PROP] = store;\n    }\n    get modelList() {\n        return this[MODEL_LIST_PROP];\n    }\n    set modelList(list) {\n        this[MODEL_LIST_PROP] = list.slice(0);\n    }\n    get context() {\n        return this[CONTEXT_PROP];\n    }\n    set context(context) {\n        this[CONTEXT_PROP] = context;\n    }\n    undo() {\n        const { store, context, modelList, silent } = this;\n        // Let's sort models by index such that models with lesser index\n        // were inserted back first, thus making valid index of models following.\n        modelList.sort((lhs, rhs) => {\n            const\n                lhsIndex = context.get(lhs),\n                rhsIndex = context.get(rhs);\n            // Here, in contrast to InsertAction, index is always present\n            return lhsIndex - rhsIndex;\n        });\n        modelList.forEach(m => {\n            const index = context.get(m);\n            // Insert at previous index\n            store.insert(index, m, silent);\n        });\n    }\n    redo() {\n        this.store.remove(this.modelList, this.silent);\n    }\n}\nRemoveAction._$name = 'RemoveAction';", "/**\n * @module Core/data/stm/action/RemoveAllAction\n */\nimport ActionBase from './ActionBase.js';\nimport Store from '../../Store.js';\nconst\n    STORE_PROP       = Symbol('STORE_PROP'),\n    ALL_RECORDS_PROP = Symbol('ALL_RECORDS_PROP');\n/**\n * Action to record store remove all operation.\n * @extends Core/data/stm/action/ActionBase\n */\nexport default class RemoveAllAction extends ActionBase {\n    static get defaultConfig() {\n        return {\n            /**\n             * Reference to a store cleared.\n             *\n             * @config {Core.data.Store}\n             * @default\n             */\n            store : undefined,\n            /**\n             * All store records removed\n             *\n             * @config {Core.data.Model[]}\n             * @default\n             */\n            allRecords : undefined,\n            /**\n             * Flag showing if undo/redo should be done silently i.e. with events suppressed\n             *\n             * @config {Boolean}\n             * @default\n             */\n            silent : false\n        };\n    }\n    get type() {\n        return 'RemoveAllAction';\n    }\n    get store() {\n        return this[STORE_PROP];\n    }\n    set store(store) {\n        this[STORE_PROP] = store;\n    }\n    get allRecords() {\n        return this[ALL_RECORDS_PROP];\n    }\n    set allRecords(records) {\n        this[ALL_RECORDS_PROP] = records.slice(0);\n    }\n    undo() {\n        const { store, allRecords, silent } = this;\n        store.add(allRecords, silent);\n    }\n    redo() {\n        this.store.removeAll(this.silent);\n    }\n}\nRemoveAllAction._$name = 'RemoveAllAction';", "/**\n * @module Core/data/stm/StateTrackingManager\n */\nimport Base from '../../Base.js';\nimport Events from '../../mixin/Events.js';\nimport StateBase from './state/StateBase.js';\nimport DisabledState from './state/DisabledState.js';\nimport ReadyState from './state/ReadyState.js';\nimport RecordingState from './state/RecordingState.js';\nimport RestoringState from './state/RestoringState.js';\nimport AutoReadyState from './state/AutoReadyState.js';\nimport AutoRecordingState from './state/AutoRecordingState.js';\nimport Registry from './state/Registry.js';\nimport UpdateAction from './action/UpdateAction.js';\nimport InsertChildAction from './action/InsertChildAction.js';\nimport RemoveChildAction from './action/RemoveChildAction.js';\nimport AddAction from './action/AddAction.js';\nimport InsertAction from './action/InsertAction.js';\nimport RemoveAction from './action/RemoveAction.js';\nimport RemoveAllAction from './action/RemoveAllAction.js';\nimport { STATE_PROP, STORES_PROP, QUEUE_PROP, POS_PROP, TRANSACTION_PROP, TRANSACTION_TIMER_PROP, AUTO_RECORD_PROP } from './Props.js';\nexport const makeModelUpdateAction = (model, newData, oldData, isInitialUserAction) => {\n    return new UpdateAction({\n        model,\n        newData,\n        oldData,\n        isInitialUserAction\n    });\n};\nexport const makeModelInsertChildAction = (parentModel, insertIndex, childModels, context) => {\n    return new InsertChildAction({\n        parentModel,\n        childModels,\n        insertIndex,\n        context\n    });\n};\nexport const makeModelRemoveChildAction = (parentModel, childModels, context) => {\n    return new RemoveChildAction({\n        parentModel,\n        childModels,\n        context\n    });\n};\nexport const makeStoreModelAddAction = (store, modelList, silent) => {\n    return new AddAction({\n        store,\n        modelList,\n        silent\n    });\n};\nexport const makeStoreModelInsertAction = (store, insertIndex, modelList, context, silent) => {\n    return new InsertAction({\n        store,\n        insertIndex,\n        modelList,\n        context,\n        silent\n    });\n};\nexport const makeStoreModelRemoveAction = (store, modelList, context, silent) => {\n    return new RemoveAction({\n        store,\n        modelList,\n        context,\n        silent\n    });\n};\nexport const makeStoreRemoveAllAction = (store, allRecords, silent) => {\n    return new RemoveAllAction({\n        store,\n        allRecords,\n        silent\n    });\n};\nconst stateTransition = (stm, event, ...args) => {\n    const\n        oldState = stm.state,\n        newState = event.call(stm[STATE_PROP], stm, ...args);\n    if (typeof newState === 'string') {\n        stm[STATE_PROP] = Registry.resolveStmState(newState);\n    }\n    else if (newState instanceof StateBase) {\n        stm[STATE_PROP] = newState;\n    }\n    else if (Array.isArray(newState)) {\n        const [state, next] = newState;\n        if (typeof state === 'string') {\n            stm[STATE_PROP] = Registry.resolveStmState(state);\n        }\n        else if (state instanceof StateBase) {\n            stm[STATE_PROP] = state;\n        }\n        else if (state && typeof state === 'object') {\n            stm = Object.assign(stm, state);\n            stm[STATE_PROP] = Registry.resolveStmState(stm[STATE_PROP]);\n        }\n        if (typeof next === 'function') {\n            stateTransition(stm, next, ...args);\n        }\n    }\n    else if (newState && typeof newState === 'object') {\n        stm = Object.assign(stm, newState);\n        stm[STATE_PROP] = Registry.resolveStmState(stm[STATE_PROP]);\n    }\n    if (oldState !== ReadyState && oldState !== AutoReadyState && (newState !== ReadyState && newState !== AutoReadyState)) {\n        stm.trigger('ready');\n    }\n};\n/**\n * Tracks the state of every store registered via {@link #function-addStore}. It is {@link #config-disabled} by default\n * so remember to call {@link #function-enable} when your stores are registered and initial dataset is loaded.\n * Use {@link #function-undo} / {@link #function-redo} method calls to restore state to a particular\n * point in time\n *\n * ```javascript\n * stm = new StateTrackingManager({\n *     autoRecord : true,\n *     listeners  : {\n *        'recordingstop' : () => {\n *            // your custom code to update undo/redo GUI controls\n *            updateUndoRedoControls();\n *        },\n *        'restoringstop' : ({ stm }) => {\n *            // your custom code to update undo/redo GUI controls\n *            updateUndoRedoControls();\n *        }\n *    },\n *    getTransactionTitle : (transaction) => {\n *        // your custom code to analyze the transaction and return custom transaction title\n *        const lastAction = transaction.queue[transaction.queue.length - 1];\n *\n *        if (lastAction instanceof AddAction) {\n *            let title = 'Add new record';\n *        }\n *\n *        return title;\n *    }\n * });\n *\n * stm.addStore(userStore);\n * stm.addStore(companyStore);\n * stm.addStore(otherStore);\n *\n * stm.enable();\n * ```\n *\n * **Note:** STM currently does not support undoing server side added and saved records.\n * Therefore it's recommended to {@link #function-resetQueue reset the queue}\n * each time a tracked store(s) loads from or saves its changes to the server.\n * If Crud Manager is used it can be done like this:\n *\n * ```javascript\n * crudManager.on({\n *     requestDone() {\n *         stm.resetQueue();\n *     }\n * });\n * ```\n *\n * and in case individual stores are used:\n *\n * ```javascript\n * ajaxStore.on({\n *     afterRequest({ exception }) {\n *         if (!exception) {\n *             stm.resetQueue();\n *         }\n *     }\n * });\n * ```\n *\n * @mixes Core/mixin/Events\n * @extends Core/Base\n */\nexport default class StateTrackingManager extends Events(Base) {\n    static get defaultConfig() {\n        return {\n            /**\n             * Default manager disabled state\n             *\n             * @config {Boolean}\n             * @default\n             */\n            disabled : true,\n            /**\n             * Whether to start transaction recording automatically in case the Manager is enabled.\n             *\n             * In the auto recording mode, the manager waits for the first change in any store being managed and starts a transaction, i.e.\n             * records any changes in its monitored stores. The transaction lasts for {@link #config-autoRecordTransactionStopTimeout} and\n             * afterwards creates one undo/redo step, including all changes in the stores during that period of time.\n             *\n             * In non auto recording mode you have to call {@link #function-startTransaction} / {@link #function-stopTransaction} to start and end\n             * a transaction.\n             *\n             * @config {Boolean}\n             * @default\n             */\n            autoRecord : false,\n            /**\n             * The transaction duration (in ms) for the auto recording mode {@link #config-autoRecord}\n             *\n             * @config {Number}\n             * @default\n             */\n            autoRecordTransactionStopTimeout : 100,\n            /**\n             * Store model update action factory\n             *\n             * @config {Function}\n             * @default\n             * @private\n             */\n            makeModelUpdateAction,\n            /**\n             * Store insert child model action factory.\n             *\n             * @config {Function}\n             * @default\n             * @private\n             */\n            makeModelInsertChildAction,\n            /**\n             * Store remove child model action factory.\n             *\n             * @config {Function}\n             * @default\n             * @private\n             */\n            makeModelRemoveChildAction,\n            /**\n             * Store add model action factory.\n             *\n             * @config {Function}\n             * @default\n             * @private\n             */\n            makeStoreModelAddAction,\n            /**\n             * Store insert model action factory.\n             *\n             * @config {Function}\n             * @default\n             * @private\n             */\n            makeStoreModelInsertAction,\n            /**\n             * Store remove model action factory.\n             *\n             * @config {Function}\n             * @default\n             * @private\n             */\n            makeStoreModelRemoveAction,\n            /**\n             * Store remove all models action factory.\n             *\n             * @config {Function}\n             * @default\n             * @private\n             */\n            makeStoreRemoveAllAction,\n            /**\n             * Function to create a transaction title if none is provided.\n             *\n             * The function receives a transaction and should return a title.\n             *\n             * @config {Function}\n             * @default\n             */\n            getTransactionTitle : null\n        };\n    }\n    construct(...args) {\n        Object.assign(this, {\n            [STATE_PROP]             : ReadyState,\n            [STORES_PROP]            : [],\n            [QUEUE_PROP]             : [],\n            [POS_PROP]               : 0,\n            [TRANSACTION_PROP]       : null,\n            [TRANSACTION_TIMER_PROP] : null,\n            [AUTO_RECORD_PROP]       : false\n        });\n        super.construct(...args);\n    }\n    /**\n     * Gets current state of the manager\n     *\n     * @property {Core.data.stm.state.StateBase}\n     */\n    get state() {\n        return this[STATE_PROP];\n    }\n    /**\n     * Gets current undo/redo queue position\n     *\n     * @property {Number}\n     */\n    get position() {\n        return this[POS_PROP];\n    }\n    /**\n     * Gets current undo/redo queue length\n     *\n     * @property {Number}\n     */\n    get length() {\n        return this[QUEUE_PROP].length;\n    }\n    /**\n     * Gets all the stores registered in STM\n     *\n     * @property {Core.data.Store[]}\n     */\n    get stores() {\n        return Array.from(this[STORES_PROP]);\n    }\n    /**\n     * Checks if a store has been added to the manager\n     *\n     * @param  {Core.data.Store} store\n     * @returns {Boolean}\n     */\n    hasStore(store) {\n        return this[STORES_PROP].includes(store);\n    }\n    /**\n     * Adds a store to the manager\n     *\n     * @param {Core.data.Store} store\n     */\n    addStore(store) {\n        if (!this.hasStore(store)) {\n            this[STORES_PROP].push(store);\n            store.stm = this;\n        }\n    }\n    /**\n     * Removes a store from the manager\n     *\n     * @param {Core.data.Store} store\n     */\n    removeStore(store) {\n        if (this.hasStore(store)) {\n            this[STORES_PROP] = this[STORES_PROP].filter(s => s !== store);\n            store.stm = null;\n        }\n    }\n    /**\n     * Calls `fn` for each store registered in STM.\n     *\n     * @param {Function} fn (store, id) => ...\n     */\n    forEachStore(fn) {\n        this[STORES_PROP].forEach(s => fn(s, s.id));\n    }\n    //#region Disabled state\n    /**\n     * Get/set manager disabled state\n     *\n     * @property {Boolean}\n     */\n    get disabled() {\n        return this.state === DisabledState;\n    }\n    set disabled(val) {\n        const me = this;\n        if (me.disabled !== val) {\n            if (val) {\n                stateTransition(me, me.state.onDisable, me);\n            }\n            else {\n                stateTransition(me, me.state.onEnable, me);\n            }\n            me.trigger('stmDisabled', { disabled : val });\n            /**\n             * Fired when the disabled state of the STM changes\n             *\n             * @event disabled\n             * @param {Core.data.stm.StateTrackingManager} source\n             * @param {Boolean} disabled The current disabled state of the STM\n             */\n            me.trigger('disabled', { disabled : val });\n        }\n    }\n    get enabled() {\n        return !this.disabled;\n    }\n    /**\n     * Enables manager\n     */\n    enable() {\n        this.disabled = false;\n    }\n    /**\n     * Disables manager\n     */\n    disable() {\n        this.disabled = true;\n    }\n    //#endregion\n    /**\n     * Checks manager ready state\n     * @readonly\n     * @property {Boolean}\n     */\n    get isReady() {\n        return this.state === ReadyState || this.state === AutoReadyState;\n    }\n    waitForReadiness() {\n        return this.await('ready', false);\n    }\n    /**\n     * Checks manager recording state\n     * @readonly\n     * @property {Boolean}\n     */\n    get isRecording() {\n        return this.state === RecordingState || this.state === AutoRecordingState;\n    }\n    /**\n     * Gets/sets manager auto record option\n     *\n     * @property {Boolean}\n     */\n    get autoRecord() {\n        return this[AUTO_RECORD_PROP];\n    }\n    set autoRecord(value) {\n        const me = this;\n        if (me.autoRecord != value) {\n            if (value) {\n                stateTransition(me, me.state.onAutoRecordOn, me);\n            }\n            else {\n                stateTransition(me, me.state.onAutoRecordOff, me);\n            }\n        }\n    }\n    /**\n     * Starts undo/redo recording transaction.\n     *\n     * @param {String} [title]\n     */\n    startTransaction(title = null) {\n        stateTransition(this, this.state.onStartTransaction, title);\n    }\n    /**\n     * Stops undo/redo recording transaction\n     *\n     * @param {String} [title]\n     */\n    stopTransaction(title = null) {\n        stateTransition(this, this.state.onStopTransaction, title);\n    }\n    /**\n     * Stops undo/redo recording transaction after {@link #config-autoRecordTransactionStopTimeout} delay.\n     *\n     * @private\n     */\n    stopTransactionDelayed() {\n        stateTransition(this, this.state.onStopTransactionDelayed);\n    }\n    /**\n     * Rejects currently recorded transaction.\n     */\n    rejectTransaction() {\n        stateTransition(this, this.state.onRejectTransaction);\n    }\n    /**\n     * Gets currently recording STM transaction.\n     * @readonly\n     * @property {Core.data.stm.Transaction}\n     */\n    get transaction() {\n        return this[TRANSACTION_PROP];\n    }\n    /**\n     * Gets titles of all recorded undo/redo transactions\n     * @readonly\n     * @property {String[]}\n     */\n    get queue() {\n        return this[QUEUE_PROP].map((t) => t.title);\n    }\n    get rawQueue() {\n        return this[QUEUE_PROP];\n    }\n    /**\n     * Gets manager restoring state.\n     * @readonly\n     * @property {Boolean}\n     */\n    get isRestoring() {\n        return this.state === RestoringState;\n    }\n    /**\n     * Checks if the manager can undo.\n     *\n     * @property {Boolean}\n     */\n    get canUndo() {\n        return this.state.canUndo(this);\n    }\n    /**\n     * Checks if the manager can redo.\n     *\n     * @property {Boolean}\n     */\n    get canRedo() {\n        return this.state.canRedo(this);\n    }\n    /**\n     * Undoes current undo/redo transaction.\n     * @param {Number} [steps=1]\n     * @returns {Promise} A promise which is resolved when undo action has been performed\n     */\n    async undo(steps = 1) {\n        if (!this.isReady) {\n            await this.waitForReadiness();\n        }\n        stateTransition(this, this.state.onUndo, steps);\n    }\n    /**\n     * Undoes all transactions.\n     * @returns {Promise} A promise which is resolved when undo actions has been performed\n     */\n    async undoAll() {\n        if (!this.isReady) {\n            await this.waitForReadiness();\n        }\n        this.undo(this.length);\n    }\n    /**\n     * Redoes current undo/redo transaction.\n     *\n     * @param {Number} [steps=1]\n     * @returns {Promise} A promise which is resolved when redo action has been performed\n     */\n    async redo(steps = 1) {\n        if (!this.isReady) {\n            await this.waitForReadiness();\n        }\n        stateTransition(this, this.state.onRedo, steps);\n    }\n    /**\n     * Redoes all transactions.\n     * @returns {Promise} A promise which is resolved when redo actions has been performed\n     */\n    async redoAll() {\n        if (!this.isReady) {\n            await this.waitForReadiness();\n        }\n        this.redo(this.length);\n    }\n    /**\n     * Resets undo/redo queue.\n     */\n    resetQueue(/* private */options = { undo : true, redo : true }) {\n        stateTransition(this, this.state.onResetQueue, options);\n    }\n    /**\n     * Resets undo queue.\n     */\n    resetUndoQueue() {\n        this.resetQueue({ undo : true });\n    }\n    /**\n     * Resets redo queue.\n     */\n    resetRedoQueue() {\n        this.resetQueue({ redo : true });\n    }\n    notifyStoresAboutStateRecordingStart(transaction) {\n        this.forEachStore((store) => store.onStmRecordingStart?.(this, transaction));\n        /**\n         * Fired upon state recording operation starts.\n         *\n         * @event recordingStart\n         * @param {Core.data.stm.StateTrackingManager} stm\n         * @param {Core.data.stm.Transaction} transaction\n         */\n        this.trigger('recordingStart', { stm : this, transaction });\n    }\n    notifyStoresAboutStateRecordingStop(transaction, reason) {\n        this.forEachStore((store) => store.onStmRecordingStop?.(this, transaction, reason));\n        /**\n         * Fired upon state recording operation stops.\n         *\n         * @event recordingStop\n         * @param {Core.data.stm.StateTrackingManager} stm\n         * @param {Core.data.stm.Transaction} transaction\n         * @param {Object} reason Transaction stop reason\n         * @param {Boolean} reason.stop Transaction recording has been stopped in a normal way.\n         * @param {Boolean} reason.disabled Transaction recording has been stopped due to STM has been disabled.\n         * @param {Boolean} reason.rejected Transaction recording has been stopped due to transaction has been rejected.\n         */\n        this.trigger('recordingStop', { stm : this, transaction, reason });\n    }\n    notifyStoresAboutStateRestoringStart() {\n        this.forEachStore((store) => store.onStmRestoringStart?.(this));\n        /**\n         * Fired upon state restoration operation starts.\n         *\n         * @event restoringStart\n         * @param {Core.data.stm.StateTrackingManager} stm\n         */\n        this.trigger('restoringStart', { stm : this });\n    }\n    /**\n     * @param {'undo'|'redo'} cause The cause of the restore, if applicable\n     * @internal\n     */\n    notifyStoresAboutStateRestoringStop({ cause, transactions }) {\n        this.forEachStore((store) => store.onStmRestoringStop?.(this));\n        /**\n         * Fired upon state restoration operation stops.\n         *\n         * @event restoringStop\n         * @param {Core.data.stm.StateTrackingManager} stm\n         */\n        this.trigger('restoringStop', { stm : this, cause, transactions });\n    }\n    notifyStoresAboutQueueReset(options) {\n        this.forEachStore((store) => store.onStmQueueReset?.(this, options));\n        /**\n         * Fired upon state undo/redo queue reset.\n         *\n         * @event queueReset\n         * @param {Core.data.stm.StateTrackingManager} stm\n         */\n        this.trigger('queueReset', { stm : this, options });\n    }\n    /**\n     * Method to call from model STM mixin upon model update\n     *\n     * @param {Core.data.Model} model\n     * @param {Object} newData\n     * @param {Object} oldData\n     *\n     * @private\n     */\n    onModelUpdate(model, newData, oldData, isInitialUserAction) {\n        stateTransition(this, this.state.onModelUpdate, model, newData, oldData, isInitialUserAction);\n    }\n    /**\n     * Method to call from model STM mixin upon tree model child insertion\n     *\n     * @param {Core.data.Model} parentModel Parent model\n     * @param {Number} index Insertion index\n     * @param {Core.data.Model[]} childModels Array of models inserted\n     * @param {Map} context Map with inserted models as keys and objects with previous parent,\n     *                      and index at previous parent.\n     *\n     * @private\n     */\n    onModelInsertChild(parentModel, index, childModels, context) {\n        stateTransition(this, this.state.onModelInsertChild, parentModel, index, childModels, context);\n    }\n    /**\n     * Method to call from model STM mixin upon tree model child removal\n     *\n     * @param {Core.data.Model} parentModel\n     * @param {Core.data.Model[]} childModels\n     * @param {Map} context\n     *\n     * @private\n     */\n    onModelRemoveChild(parentModel, childModels, context) {\n        stateTransition(this, this.state.onModelRemoveChild, parentModel, childModels, context);\n    }\n    /**\n     * Method to call from store STM mixin upon store models adding\n     *\n     * @param {Core.data.Store} store\n     * @param {Core.data.Model[]} models\n     * @param {Boolean} silent\n     *\n     * @private\n     */\n    onStoreModelAdd(store, models, silent) {\n        stateTransition(this, this.state.onStoreModelAdd, store, models, silent);\n    }\n    /**\n     * Method to call from store STM mixin upon store models insertion\n     *\n     * @param {Core.data.Store} store\n     * @param {Number} index\n     * @param {Core.data.Model[]} models\n     * @param {Map} context\n     * @param {Boolean} silent\n     *\n     * @private\n     */\n    onStoreModelInsert(store, index, models, context, silent) {\n        stateTransition(this, this.state.onStoreModelInsert, store, index, models, context, silent);\n    }\n    /**\n     * Method to call from store STM mixin upon store models removal\n     *\n     * @param {Core.data.Store} store\n     * @param {Core.data.Model[]} models\n     * @param {Object} context\n     * @param {Boolean} silent\n     *\n     * @private\n     */\n    onStoreModelRemove(store, models, context, silent) {\n        stateTransition(this, this.state.onStoreModelRemove, store, models, context, silent);\n    }\n    /**\n     * Method to call from store STM mixin upon store clear\n     *\n     * @param {Core.data.Store} store\n     * @param {Core.data.Model[]} allRecords\n     * @param {Boolean} silent\n     *\n     * @private\n     */\n    onStoreRemoveAll(store, allRecords, silent) {\n        stateTransition(this, this.state.onStoreRemoveAll, store, allRecords, silent);\n    }\n    // UI key event handling\n    onUndoKeyPress(event) {\n        const me = this;\n        if (me.enabled) {\n            if (event.shiftKey) {\n                if (me.canRedo) {\n                    event.preventDefault();\n                    me.redo();\n                }\n            }\n            else if (me.canUndo) {\n                event.preventDefault();\n                me.undo();\n            }\n        }\n    }\n    stash() {\n        if (this.transaction) {\n            this.stashedTransaction = this.transaction;\n            this.rejectTransaction();\n        }\n    }\n    applyStash() {\n        if (this.stashedTransaction) {\n            this.startTransaction(this.stashedTransaction.title);\n            this.stashedTransaction.redo();\n            delete this.stashedTransaction;\n        }\n    }\n}\nStateTrackingManager._$name = 'StateTrackingManager';", "import { Mixin } from \"../../../ChronoGraph/class/BetterMixin.js\";\nimport Delayable from \"../../../Core/mixin/Delayable.js\";\nimport Events from \"../../../Core/mixin/Events.js\";\nimport Model from \"../../../Core/data/Model.js\";\nexport class EventsWrapper extends Mixin([], Events) {\n}\nexport class DelayableWrapper extends Mixin([], Delayable) {\n}\n/**\n * This is an abstract project, which just lists the available stores.\n *\n * The actual project classes are [[SchedulerCoreProjectMixin]], [[SchedulerBasicProjectMixin]],\n * [[SchedulerProProjectMixin]], [[GanttProjectMixin]].\n */\nexport class AbstractProjectMixin extends Mixin([\n    EventsWrapper,\n    DelayableWrapper,\n    Model\n], (base) => {\n    const superProto = base.prototype;\n    class AbstractProjectMixin extends base {\n        constructor() {\n            super(...arguments);\n            this.isRestoringData = false;\n        }\n        get isRepopulatingStores() {\n            return false;\n        }\n        get isInitialCommit() {\n            return !this.isInitialCommitPerformed || this.hasLoadedDataToCommit;\n        }\n        construct(config = {}) {\n            // Define default values for these flags here\n            // if defined where declared then TS compiles them this way:\n            // constructor() {\n            //     super(...arguments)\n            //     this.isInitialCommitPerformed   = false\n            //     this.isLoadingInlineData        = false\n            //     this.isWritingData              = false\n            //\n            // }\n            // which messes the flags values for inline data loading (since it's async)\n            this.isInitialCommitPerformed = false;\n            this.isLoadingInlineData = false;\n            this.isWritingData = false;\n            this.hasLoadedDataToCommit = false;\n            const silenceInitialCommit = ('silenceInitialCommit' in config) ? config.silenceInitialCommit : true;\n            const adjustDurationToDST = ('adjustDurationToDST' in config) ? config.adjustDurationToDST : false;\n            // 5 years roughly === 5 * 365 * 24 * 60 * 60 * 1000\n            this.maxCalendarRange = ('maxCalendarRange' in config) ? config.maxCalendarRange : 157680000000;\n            // delete configs otherwise super.construct() call treat them as fields and makes accessors for them\n            delete config.maxCalendarRange;\n            delete config.silenceInitialCommit;\n            delete config.adjustDurationToDST;\n            superProto.construct.call(this, config);\n            this.silenceInitialCommit = silenceInitialCommit;\n            this.adjustDurationToDST = adjustDurationToDST;\n        }\n        // Template method called when a stores dataset is replaced. Implemented in SchedulerBasicProjectMixin\n        repopulateStore(store) { }\n        // Template method called when replica should be repopulated. Implemented in SchedulerBasicProjectMixin\n        repopulateReplica() { }\n        deferUntilRepopulationIfNeeded(deferId, func, args) {\n            // no deferring at this level (happens in projects using engine)\n            func(...args);\n        }\n        // Template method called when a store is attached to the project\n        attachStore(store) { }\n        // Template method called when a store is detached to the project\n        detachStore(store) { }\n        async commitAsync() {\n            throw new Error(\"Abstract method called\");\n        }\n        // Different implementations for Core and Basic engines\n        isEngineReady() {\n            throw new Error(\"Abstract method called\");\n        }\n        getStm() {\n            throw new Error(\"Abstract method called\");\n        }\n    }\n    return AbstractProjectMixin;\n}) {\n}\n", "import { Mixin } from \"../../../../ChronoGraph/class/BetterMixin.js\";\nimport { SchedulerCoreEvent } from \"./SchedulerCoreEvent.js\";\nimport Store from \"../../../../Core/data/Store.js\";\nimport Model from \"../../../../Core/data/Model.js\";\nimport Delayable from \"../../../../Core/mixin/Delayable.js\";\nimport { CoreEventStoreMixin } from \"../../store/CoreEventStoreMixin.js\";\nimport { CoreAssignmentMixin } from \"./CoreAssignmentMixin.js\";\nimport { CoreAssignmentStoreMixin } from \"../../store/CoreAssignmentStoreMixin.js\";\nimport { CoreResourceMixin } from \"./CoreResourceMixin.js\";\nimport { CoreResourceStoreMixin } from \"../../store/CoreResourceStoreMixin.js\";\nimport { CorePartOfProjectGenericMixin } from \"../../CorePartOfProjectGenericMixin.js\";\nimport { CoreDependencyStoreMixin } from \"../../store/CoreDependencyStoreMixin.js\";\nimport { CoreDependencyMixin } from \"./CoreDependencyMixin.js\";\nimport { CoreCalendarMixin } from './CoreCalendarMixin.js';\nimport { CoreCalendarManagerStoreMixin } from '../../store/CoreCalendarManagerStoreMixin.js';\nimport { delay } from \"../../../util/Functions.js\";\nimport StateTrackingManager from \"../../../../Core/data/stm/StateTrackingManager.js\";\nimport { AbstractProjectMixin } from \"../AbstractProjectMixin.js\";\nimport ObjectHelper from \"../../../../Core/helper/ObjectHelper.js\";\nexport class DelayableWrapper extends Mixin([], Delayable) {\n}\n/**\n * This is a project, implementing _basic scheduling_ as [[SchedulerBasicProjectMixin]] does.\n * Yet this class does not use _chronograph_ based engine.\n */\nexport class SchedulerCoreProjectMixin extends Mixin([\n    AbstractProjectMixin,\n    CorePartOfProjectGenericMixin,\n    DelayableWrapper,\n    Model\n], (base) => {\n    const superProto = base.prototype;\n    class SchedulerCoreProjectMixin extends base {\n        static get configurable() {\n            return {\n                stm: {},\n                eventStore: {},\n                assignmentStore: {},\n                resourceStore: {},\n                dependencyStore: {},\n                calendarManagerStore: {},\n                eventModelClass: SchedulerCoreEvent,\n                assignmentModelClass: CoreAssignmentMixin,\n                resourceModelClass: CoreResourceMixin,\n                dependencyModelClass: CoreDependencyMixin,\n                calendarModelClass: CoreCalendarMixin,\n                eventStoreClass: CoreEventStoreMixin,\n                assignmentStoreClass: CoreAssignmentStoreMixin,\n                resourceStoreClass: CoreResourceStoreMixin,\n                dependencyStoreClass: CoreDependencyStoreMixin,\n                calendarManagerStoreClass: CoreCalendarManagerStoreMixin,\n                assignmentsData: null,\n                calendarsData: null,\n                dependenciesData: null,\n                eventsData: null,\n                resourcesData: null\n            };\n        }\n        //endregion\n        //region Init\n        construct(config = {}) {\n            const me = this;\n            // Cannot be created with declaration, because of how TS is compiled to JS. Ends up after `construct()`\n            me.$invalidated = new Set();\n            // Define default values for these flags here\n            // if defined where declared then TS compiles them this way:\n            // constructor() {\n            //     super(...arguments)\n            //     this.isPerformingCommit   = false\n            //     this.silenceInitialCommit = true\n            //     this.ongoing              = Promise.resolve()\n            // }\n            // which messes the flags values for inline data loading (since it's async)\n            me.isPerformingCommit = false;\n            me.silenceInitialCommit = true;\n            me.ongoing = Promise.resolve();\n            if (config.eventStore && !config.assignmentStore) {\n                const eventStore = config.eventStore.masterStore || config.eventStore;\n                // If chained from a CrudManager, the assignment store might not be part of a project, and we might\n                // need to ingest it from the CrudManager\n                // @ts-ignore\n                const assignmentStore = eventStore.assignmentStore || eventStore.crudManager?.assignmentStore;\n                // In this case we must ingest the assignment store from the eventStore\n                if (assignmentStore?.isAssignmentStore) {\n                    config.assignmentStore = assignmentStore;\n                    me.isSharingAssignmentStore = true;\n                }\n            }\n            superProto.construct.call(me, config);\n            // not part of the CalendarManagerStore intentionally, not persisted\n            me.defaultCalendar = new me.calendarManagerStore.modelClass({\n                unspecifiedTimeIsWorking: me.unspecifiedTimeIsWorking\n            });\n            me.defaultCalendar.project = me;\n            const { calendarsData, eventsData, dependenciesData, resourcesData, assignmentsData } = me;\n            const hasInlineData = Boolean(calendarsData || eventsData || dependenciesData || resourcesData || assignmentsData);\n            if (hasInlineData) {\n                me.loadInlineData({\n                    calendarsData,\n                    eventsData,\n                    dependenciesData,\n                    resourcesData,\n                    assignmentsData\n                });\n                delete me.calendarsData;\n                delete me.eventsData;\n                delete me.dependenciesData;\n                delete me.resourcesData;\n                delete me.assignmentsData;\n            }\n            else {\n                // Trigger initial commit\n                me.bufferedCommitAsync();\n            }\n        }\n        doDestroy() {\n            const me = this;\n            me.eventStore?.destroy();\n            me.dependencyStore?.destroy();\n            me.assignmentStore?.destroy();\n            me.resourceStore?.destroy();\n            me.calendarManagerStore?.destroy();\n            me.defaultCalendar.destroy();\n            me.stm?.destroy();\n            superProto.doDestroy.call(this);\n        }\n        /**\n         * This method loads the \"raw\" data into the project. The loading is basically happening by\n         * assigning the individual data entries to the `data` property of the corresponding store.\n         *\n         * @param data\n         */\n        async loadInlineData(data) {\n            const me = this;\n            me.isLoadingInlineData = true;\n            if (data.calendarsData) {\n                me.calendarManagerStore.data = data.calendarsData;\n            }\n            if (data.resourcesData) {\n                me.resourceStore.data = data.resourcesData;\n            }\n            if (data.assignmentsData) {\n                me.assignmentStore.data = data.assignmentsData;\n            }\n            if (data.eventsData) {\n                me.eventStore.data = data.eventsData;\n            }\n            if (data.tasksData) {\n                me.eventStore.data = data.tasksData;\n            }\n            if (data.dependenciesData) {\n                me.dependencyStore.data = data.dependenciesData;\n            }\n            await me.commitLoad();\n            me.isLoadingInlineData = false;\n            return;\n        }\n        //endregion\n        //region Join\n        async commitLoad() {\n            await this.commitAsync();\n            // Might have been destroyed during the async operation above\n            if (!this.isDestroyed)\n                this.trigger('load');\n        }\n        joinStoreRecords(store) {\n            const fn = (record) => {\n                record.setProject(this);\n                record.joinProject();\n            };\n            if (store.rootNode) {\n                store.rootNode.traverse(fn);\n            }\n            else {\n                store.forEach(fn);\n            }\n        }\n        unJoinStoreRecords(store) {\n            const fn = (record) => {\n                record.leaveProject();\n                record.setProject(this);\n            };\n            if (store.rootNode) {\n                store.rootNode.traverse(node => {\n                    // do not unjoin/leave project for the root node, which is the project itself\n                    if (node !== store.rootNode)\n                        fn(node);\n                });\n            }\n            else {\n                store.forEach(fn);\n            }\n        }\n        //endregion\n        //region EventStore\n        resolveStoreAndModelClass(name, config) {\n            // storeClass from supplied config or our properties\n            const storeClass = config?.storeClass || this[`${name}StoreClass`];\n            // modelClass from supplied config\n            let modelClass = config?.modelClass;\n            if (!modelClass) {\n                // or from storeClass.modelClass if customized\n                // @ts-ignore\n                if (this.getDefaultConfiguration()[`${name}ModelClass`] !== storeClass.getDefaultConfiguration().modelClass) {\n                    modelClass = storeClass.getDefaultConfiguration().modelClass;\n                }\n                // and if none of the above, use from our properties\n                else {\n                    modelClass = this[`${name}ModelClass`];\n                }\n            }\n            return { storeClass, modelClass };\n        }\n        setEventStore(eventStore) {\n            this.eventStore = eventStore;\n        }\n        changeEventStore(eventStore, oldStore) {\n            const me = this, { stm } = me;\n            me.detachStore(oldStore);\n            if (!(eventStore instanceof Store)) {\n                const { storeClass, modelClass } = me.resolveStoreAndModelClass('event', eventStore);\n                eventStore = new storeClass(ObjectHelper.assign({\n                    modelClass,\n                    project: me,\n                    stm\n                }, eventStore));\n            }\n            else {\n                eventStore.project = me;\n                stm.addStore(eventStore);\n                me.joinStoreRecords(eventStore);\n            }\n            if (oldStore && stm.hasStore(oldStore)) {\n                stm.removeStore(oldStore);\n                me.unJoinStoreRecords(oldStore);\n                const { assignmentsForRemoval } = oldStore;\n                // remap the assignment\n                assignmentsForRemoval.forEach(assignment => {\n                    const oldEvent = assignment.event;\n                    if (oldEvent) {\n                        const newEvent = eventStore.getById(oldEvent.id);\n                        if (newEvent) {\n                            assignment.event = newEvent;\n                            // keep the assignment\n                            assignmentsForRemoval.delete(assignment);\n                        }\n                    }\n                });\n                oldStore.afterEventRemoval();\n            }\n            eventStore.setProject(me);\n            return eventStore;\n        }\n        updateEventStore(eventStore, oldStore) {\n            this.attachStore(eventStore);\n            this.trigger('eventStoreChange', { store: eventStore });\n        }\n        //endregion\n        //region AssignmentStore\n        setAssignmentStore(assignmentStore) {\n            this.assignmentStore = assignmentStore;\n        }\n        changeAssignmentStore(assignmentStore, oldStore) {\n            const me = this, { stm } = me;\n            me.detachStore(oldStore);\n            if (oldStore && stm.hasStore(oldStore)) {\n                stm.removeStore(oldStore);\n                me.unJoinStoreRecords(oldStore);\n            }\n            if (!(assignmentStore instanceof Store)) {\n                const { storeClass, modelClass } = me.resolveStoreAndModelClass('assignment', assignmentStore);\n                assignmentStore = new storeClass(ObjectHelper.assign({\n                    modelClass,\n                    project: me,\n                    stm\n                }, assignmentStore));\n            }\n            else {\n                assignmentStore.project = me;\n                stm.addStore(assignmentStore);\n                me.joinStoreRecords(assignmentStore);\n            }\n            assignmentStore.setProject(me);\n            return assignmentStore;\n        }\n        updateAssignmentStore(assignmentStore, oldStore) {\n            this.attachStore(assignmentStore);\n            this.trigger('assignmentStoreChange', { store: assignmentStore });\n        }\n        //endregion\n        //region ResourceStore\n        setResourceStore(resourceStore) {\n            this.resourceStore = resourceStore;\n        }\n        changeResourceStore(resourceStore, oldStore) {\n            const me = this, { stm } = me;\n            me.detachStore(oldStore);\n            if (!(resourceStore instanceof Store)) {\n                const { storeClass, modelClass } = me.resolveStoreAndModelClass('resource', resourceStore);\n                resourceStore = new storeClass(ObjectHelper.assign({\n                    modelClass,\n                    project: me,\n                    stm\n                }, resourceStore));\n            }\n            else {\n                resourceStore.project = me;\n                stm.addStore(resourceStore);\n                me.joinStoreRecords(resourceStore);\n            }\n            if (oldStore && stm.hasStore(oldStore)) {\n                stm.removeStore(oldStore);\n                me.unJoinStoreRecords(oldStore);\n                const { assignmentsForRemoval } = oldStore;\n                // remap the assignment\n                assignmentsForRemoval.forEach(assignment => {\n                    const oldResource = assignment.resource;\n                    if (oldResource) {\n                        const newResource = resourceStore.getById(oldResource.id);\n                        if (newResource) {\n                            assignment.resource = newResource;\n                            // keep the assignment\n                            assignmentsForRemoval.delete(assignment);\n                        }\n                    }\n                });\n                oldStore.afterResourceRemoval();\n            }\n            resourceStore.setProject(me);\n            return resourceStore;\n        }\n        updateResourceStore(resourceStore, oldStore) {\n            this.attachStore(resourceStore);\n            this.trigger('resourceStoreChange', { store: resourceStore });\n        }\n        //endregion\n        //region DependencyStore\n        setDependencyStore(dependencyStore) {\n            this.dependencyStore = dependencyStore;\n        }\n        changeDependencyStore(dependencyStore, oldStore) {\n            const me = this;\n            me.detachStore(oldStore);\n            if (!(dependencyStore instanceof Store)) {\n                const { storeClass, modelClass } = me.resolveStoreAndModelClass('dependency', dependencyStore);\n                dependencyStore = new storeClass(ObjectHelper.assign({\n                    modelClass,\n                    project: me,\n                    stm: me.stm\n                }, dependencyStore));\n            }\n            else {\n                dependencyStore.project = me;\n                me.stm.addStore(dependencyStore);\n                me.joinStoreRecords(dependencyStore);\n            }\n            return dependencyStore;\n        }\n        updateDependencyStore(dependencyStore, oldStore) {\n            this.attachStore(dependencyStore);\n            this.trigger('dependencyStoreChange', { store: dependencyStore });\n        }\n        //endregion\n        //region CalendarManagerStore\n        setCalendarManagerStore(calendarManagerStore) {\n            this.calendarManagerStore = calendarManagerStore;\n        }\n        changeCalendarManagerStore(calendarManagerStore, oldStore) {\n            const me = this;\n            me.detachStore(oldStore);\n            if (!(calendarManagerStore instanceof Store)) {\n                // @ts-ignore\n                const storeClass = calendarManagerStore?.storeClass || me.calendarManagerStoreClass;\n                // @ts-ignore\n                const modelClass = calendarManagerStore?.modelClass || storeClass.getDefaultConfiguration().modelClass || me.calendarModelClass;\n                calendarManagerStore = new storeClass(ObjectHelper.assign({\n                    modelClass,\n                    project: me,\n                    stm: me.stm\n                }, calendarManagerStore));\n            }\n            else {\n                me.stm.addStore(calendarManagerStore);\n            }\n            calendarManagerStore.setProject(me);\n            return calendarManagerStore;\n        }\n        updateCalendarManagerStore(calendarManagerStore, oldStore) {\n            this.attachStore(calendarManagerStore);\n            this.trigger('calendarManagerStoreChange', { store: calendarManagerStore });\n        }\n        //endregion\n        //region Calendar\n        get calendar() {\n            return this.$calendar || this.defaultCalendar;\n        }\n        set calendar(calendar) {\n            this.$calendar = calendar;\n        }\n        get effectiveCalendar() {\n            return this.calendar;\n        }\n        //endregion\n        //region Add records\n        async addEvent(event) {\n            this.eventStore.add(event);\n            return this.commitAsync();\n        }\n        async addAssignment(assignment) {\n            this.assignmentStore.add(assignment);\n            return this.commitAsync();\n        }\n        async addResource(resource) {\n            this.resourceStore.add(resource);\n            return this.commitAsync();\n        }\n        async addDependency(dependency) {\n            this.dependencyStore.add(dependency);\n            return this.commitAsync();\n        }\n        //endregion\n        //region Auto commit\n        // Buffer commitAsync using setTimeout. Not using `buffer` on purpose, for performance reasons and to better\n        // mimic how graph does it\n        bufferedCommitAsync() {\n            if (!this.hasPendingAutoCommit) {\n                this.setTimeout({\n                    fn: 'commitAsync',\n                    delay: 10\n                });\n            }\n        }\n        get hasPendingAutoCommit() {\n            return this.hasTimeout('commitAsync');\n        }\n        unScheduleAutoCommit() {\n            this.clearTimeout('commitAsync');\n        }\n        //endregion\n        //region Commit\n        async commitAsync() {\n            if (this.isPerformingCommit)\n                return this.ongoing;\n            return this.ongoing = this.doCommitAsync();\n        }\n        async doCommitAsync() {\n            const me = this;\n            me.isPerformingCommit = true;\n            // Cancel any outstanding commit\n            me.unScheduleAutoCommit();\n            await delay(0);\n            if (!me.isDestroyed) {\n                // Calculate all invalidated records, updates their data silently\n                for (const record of me.$invalidated) {\n                    record.calculateInvalidated();\n                }\n                const { isInitialCommit, silenceInitialCommit } = me;\n                // apply changes silently if this is initial commit and \"silenceInitialCommit\" option is enabled\n                const silenceCommit = isInitialCommit && silenceInitialCommit;\n                // Notify stores that care about commit (internal)\n                me.assignmentStore.onCommitAsync();\n                me.dependencyStore.onCommitAsync();\n                me.isInitialCommitPerformed = true;\n                me.hasLoadedDataToCommit = false;\n                me.isPerformingCommit = false;\n                const stores = [me.assignmentStore, me.dependencyStore, me.eventStore, me.resourceStore, me.calendarManagerStore];\n                stores.forEach(store => store.suspendAutoCommit?.());\n                me.isWritingData = true;\n                // \"Real\" project triggers refresh before data is written back to records\n                me.trigger('refresh', { isInitialCommit, isCalculated: true });\n                // If we are not announcing changes, take a cheaper path\n                if (silenceCommit) {\n                    for (const record of me.$invalidated) {\n                        record.finalizeInvalidated(true);\n                    }\n                }\n                else {\n                    // Two loops looks a bit weird, but needed since editing assignment might affect event etc.\n                    // And we do only want a single update in the end\n                    // 1. Start batches and perform all calculations\n                    for (const record of me.$invalidated) {\n                        record.beginBatch(true);\n                        record.finalizeInvalidated();\n                    }\n                    // 2. End batches, announcing changes (unless initial commit)\n                    for (const record of me.$invalidated) {\n                        record.endBatch(false, true);\n                    }\n                }\n                me.isWritingData = false;\n                me.$invalidated.clear();\n                // Mimic real projects events\n                me.trigger('dataReady');\n                stores.forEach(store => store.resumeAutoCommit?.());\n                // Chrono version triggers \"dataReady\" only if there were no commit rejection\n                // (in case of a rejection it triggers \"commitRejected\" event)\n                // but in both cases it triggers \"commitFinalized\" afterwards\n                me.trigger('commitFinalized');\n                return true;\n            }\n        }\n        async propagateAsync() {\n            return this.commitAsync();\n        }\n        // Called when a record invalidates itself, queues it for calculation\n        invalidate(record) {\n            this.$invalidated.add(record);\n            this.bufferedCommitAsync();\n        }\n        // this does not account for possible scheduling conflicts\n        async isValidDependency() {\n            return true;\n        }\n        //endregion\n        //region STM\n        getStm() {\n            return this.stm;\n        }\n        /**\n         * State tracking manager instance the project relies on\n         */\n        set stm(stm) {\n            stm = this.$stm = new StateTrackingManager(ObjectHelper.assign({\n                disabled: true\n            }, stm));\n            stm.ion({\n                // Propagate on undo/redo\n                restoringStop: async () => {\n                    // Disable STM meanwhile to not pick it up as a new STM transaction\n                    stm.disable();\n                    await this.commitAsync();\n                    if (!this.isDestroyed) {\n                        stm.enable();\n                        this.trigger('stateRestoringDone');\n                    }\n                }\n            });\n        }\n        get stm() {\n            return this.$stm;\n        }\n        //endregion\n        isEngineReady() {\n            return !this.hasPendingAutoCommit && !this.isPerformingCommit && this.isInitialCommitPerformed;\n        }\n    }\n    //region Config\n    SchedulerCoreProjectMixin.applyConfigs = true;\n    return SchedulerCoreProjectMixin;\n}) {\n}\n", "//---------------------------------------------------------------------------------------------------------------------\n// assume 32-bit platform (https://v8.dev/blog/react-cliff)\nimport { CI } from \"../collection/Iterator.js\";\nexport const MIN_SMI = -Math.pow(2, 30);\nexport const MAX_SMI = Math.pow(2, 30) - 1;\n//---------------------------------------------------------------------------------------------------------------------\nexport const uppercaseFirst = (str) => str.slice(0, 1).toUpperCase() + str.slice(1);\n//---------------------------------------------------------------------------------------------------------------------\nexport const isAtomicValue = (value) => Object(value) !== value;\n//---------------------------------------------------------------------------------------------------------------------\nexport const typeOf = (value) => Object.prototype.toString.call(value).slice(8, -1);\n//---------------------------------------------------------------------------------------------------------------------\nexport const defineProperty = (target, property, value) => {\n    Object.defineProperty(target, property, { value, enumerable: true, configurable: true });\n    return value;\n};\n//---------------------------------------------------------------------------------------------------------------------\nexport const prototypeValue = (value) => {\n    return function (target, propertyKey) {\n        target[propertyKey] = value;\n    };\n};\n//---------------------------------------------------------------------------------------------------------------------\nexport const copyMapInto = (sourceMap, targetMap) => {\n    for (const [key, value] of sourceMap)\n        targetMap.set(key, value);\n    return targetMap;\n};\n//---------------------------------------------------------------------------------------------------------------------\nexport const copySetInto = (sourceSet, targetSet) => {\n    for (const value of sourceSet)\n        targetSet.add(value);\n    return targetSet;\n};\n//---------------------------------------------------------------------------------------------------------------------\nexport const delay = (timeout) => new Promise(resolve => setTimeout(resolve, timeout));\n//---------------------------------------------------------------------------------------------------------------------\nexport const matchAll = function* (regexp, testStr) {\n    let match;\n    while ((match = regexp.exec(testStr)) !== null) {\n        yield match;\n    }\n};\n//---------------------------------------------------------------------------------------------------------------------\nexport const allMatches = function (regexp, testStr) {\n    return CI(matchAll(regexp, testStr)).map(match => CI(match).drop(1)).concat().toArray();\n};\nlet isRegeneratorRuntime = null;\nexport const isGeneratorFunction = function (func) {\n    if (isRegeneratorRuntime === null)\n        isRegeneratorRuntime = typeof regeneratorRuntime !== 'undefined';\n    if (isRegeneratorRuntime === true) {\n        return regeneratorRuntime.isGeneratorFunction(func);\n    }\n    else {\n        return func.constructor.name === 'GeneratorFunction';\n    }\n};\n//---------------------------------------------------------------------------------------------------------------------\nexport const isPromise = function (obj) {\n    return obj && typeof obj.then === 'function';\n};\n", "import { Base } from \"../class/Base.js\";\nimport { CI } from \"../collection/Iterator.js\";\nimport { matchAll } from \"../util/Helpers.js\";\n//---------------------------------------------------------------------------------------------------------------------\nexport const DEBUG = false;\nconst emptyFn = (...args) => undefined;\nexport const DEBUG_ONLY = (func) => DEBUG ? func : emptyFn;\nexport const debug = DEBUG_ONLY((e) => {\n    debugger;\n});\n//---------------------------------------------------------------------------------------------------------------------\nexport const warn = DEBUG_ONLY((e) => {\n    if (typeof console !== 'undefined')\n        console.warn(e);\n});\n//---------------------------------------------------------------------------------------------------------------------\nexport class StackEntry extends Base {\n}\n//---------------------------------------------------------------------------------------------------------------------\nexport class SourceLinePoint extends Base {\n    constructor() {\n        super(...arguments);\n        this.stackEntries = [];\n    }\n    static fromError(e) {\n        const res = SourceLinePoint.new({\n            exception: e,\n            stackEntries: parseErrorStack(e.stack)\n        });\n        return res;\n    }\n    static fromThisCall() {\n        const sourceLinePoint = this.fromError(new Error());\n        sourceLinePoint.stackEntries.splice(0, 2);\n        return sourceLinePoint;\n    }\n}\n//---------------------------------------------------------------------------------------------------------------------\n// sample stack\n// Error\n//     at exceptionCatcher (http://lh/bryntum-suite/SchedulingEngine/lib/ChronoGraph/environment/Debug.js:15:11)\n//     at Function.fromCurrentCall (http://lh/bryntum-suite/SchedulingEngine/lib/ChronoGraph/environment/Debug.js:39:38)\n//     at Object.get (http://lh/bryntum-suite/SchedulingEngine/lib/ChronoGraph/replica/Entity.js:31:73)\n//     at MinimalGanttProject.set (http://lh/bryntum-suite/SchedulingEngine/lib/ChronoGraph/replica/Entity.js:222:23)\n//     at MinimalGanttProject.set data [as data] (http://lh/bryntum-suite/SchedulingEngine/lib/Engine/chrono/ChronoModelMixin.js:48:31)\n//     at MinimalGanttProject.construct (http://lh/bryntum-suite/SchedulingEngine/lib/Core/data/Model.js:290:17)\n//     at MinimalGanttProject.construct (http://lh/bryntum-suite/SchedulingEngine/lib/Core/mixin/Events.js:236:15)\n//     at MinimalGanttProject.construct (http://lh/bryntum-suite/SchedulingEngine/lib/Engine/chrono/ChronoModelMixin.js:21:19)\n//     at MinimalGanttProject.construct (http://lh/bryntum-suite/SchedulingEngine/lib/Engine/quark/model/scheduler_basic/SchedulerBasicProjectMixin.js:53:19)\n//     at new Base (http://lh/bryntum-suite/SchedulingEngine/lib/Core/Base.js:55:14)\"\nconst parseErrorStack = (stack) => {\n    return CI(matchAll(/^   +at\\s*(.*?)\\s*\\((https?:\\/\\/.*?):(\\d+):(\\d+)/gm, stack))\n        .map(match => StackEntry.new({\n        statement: match[1],\n        sourceFile: match[2],\n        sourceLine: Number(match[3]),\n        sourceCharPos: Number(match[4])\n    }))\n        .toArray();\n};\n", "import { DEBUG_ONLY } from \"../environment/Debug.js\";\nconst RequiredProperties = Symbol('RequiredProperties');\nconst emptyFn = () => undefined;\nexport const required = DEBUG_ONLY((proto, propertyKey) => {\n    let required = proto[RequiredProperties];\n    if (!required)\n        required = proto[RequiredProperties] = [];\n    required.push(propertyKey);\n});\nexport const validateRequiredProperties = DEBUG_ONLY((context) => {\n    const required = context[RequiredProperties];\n    if (required) {\n        for (let i = 0; i < required.length; i++)\n            if (context[required[i]] === undefined)\n                throw new Error(`Required attribute [${String(required[i])}] is not provided`);\n    }\n});\n", "import { Base } from \"../class/Base.js\";\nexport var OnCycleAction;\n(function (OnCycleAction) {\n    OnCycleAction[\"Cancel\"] = \"Cancel\";\n    OnCycleAction[\"Resume\"] = \"Resume\";\n})(OnCycleAction || (OnCycleAction = {}));\n//---------------------------------------------------------------------------------------------------------------------\nexport const WalkSource = Symbol('WalkSource');\nexport const NOT_VISITED = -1;\nexport const VISITED_TOPOLOGICALLY = -2;\n//---------------------------------------------------------------------------------------------------------------------\nexport class WalkContext extends Base {\n    constructor() {\n        super(...arguments);\n        this.visited = new Map();\n        this.toVisit = [];\n        this.currentEpoch = 0;\n    }\n    startFrom(sourceNodes) {\n        this.continueFrom(sourceNodes);\n    }\n    continueFrom(sourceNodes) {\n        this.toVisit.push.apply(this.toVisit, sourceNodes.map(node => { return { node: node, from: WalkSource, label: undefined }; }));\n        this.walkDepth();\n    }\n    onNode(node, walkStep) {\n    }\n    onTopologicalNode(node) {\n    }\n    onCycle(node, stack) {\n        return OnCycleAction.Cancel;\n    }\n    forEachNext(node, func) {\n        throw new Error(\"Abstract method called\");\n    }\n    collectNext(node, toVisit, visitInfo) {\n        throw new Error(\"Abstract method called\");\n    }\n    getVisitedInfo(node) {\n        return this.visited.get(node);\n    }\n    setVisitedInfo(node, visitedAt, info) {\n        if (!info) {\n            info = { visitedAt, visitEpoch: this.currentEpoch };\n            this.visited.set(node, info);\n        }\n        else {\n            info.visitedAt = visitedAt;\n            info.visitEpoch = this.currentEpoch;\n        }\n        return info;\n    }\n    walkDepth() {\n        const visited = this.visited;\n        const toVisit = this.toVisit;\n        let depth;\n        while (depth = toVisit.length) {\n            const node = toVisit[depth - 1].node;\n            const visitedInfo = this.getVisitedInfo(node);\n            // this supports the \"ahead-of-time\" creation of the \"visited\" entries, which actually lead to improved benchmarks,\n            // so it might be a default\n            if (visitedInfo && visitedInfo.visitedAt === VISITED_TOPOLOGICALLY && visitedInfo.visitEpoch === this.currentEpoch) {\n                toVisit.pop();\n                continue;\n            }\n            if (visitedInfo && visitedInfo.visitEpoch === this.currentEpoch && visitedInfo.visitedAt !== NOT_VISITED) {\n                // it is valid to find itself \"visited\", but only if visited at the current depth\n                // (which indicates stack unwinding)\n                // if the node has been visited at earlier depth - its a cycle\n                if (visitedInfo.visitedAt < depth) {\n                    // ONLY resume if explicitly returned `Resume`, cancel in all other cases (undefined, etc)\n                    if (this.onCycle(node, toVisit) !== OnCycleAction.Resume)\n                        break;\n                }\n                else {\n                    visitedInfo.visitedAt = VISITED_TOPOLOGICALLY;\n                    this.onTopologicalNode(node);\n                }\n                toVisit.pop();\n            }\n            else {\n                // if we break here, we can re-enter the loop later\n                if (this.onNode(node, toVisit[depth - 1]) === false)\n                    break;\n                // first entry to the node\n                const visitedInfo2 = this.setVisitedInfo(node, depth, visitedInfo);\n                const lengthBefore = toVisit.length;\n                this.collectNext(node, toVisit, visitedInfo2);\n                // if there's no outgoing edges, node is at topological position\n                // it would be enough to just continue the `while` loop and the `onTopologicalNode`\n                // would happen on next iteration, but with this \"inlining\" we save one call to `visited.get()`\n                // at the cost of length comparison\n                if (toVisit.length === lengthBefore) {\n                    visitedInfo2.visitedAt = VISITED_TOPOLOGICALLY;\n                    this.onTopologicalNode(node);\n                    toVisit.pop();\n                }\n            }\n        }\n    }\n}\n//---------------------------------------------------------------------------------------------------------------------\nexport function cycleInfo(stack) {\n    const length = stack.length;\n    if (length === 0)\n        return [];\n    const cycleSource = stack[length - 1].node;\n    const cycle = [cycleSource];\n    let current = length - 1;\n    let cursor = current;\n    while (current >= 0 && stack[current].from !== cycleSource) {\n        // going backward in steps, skipping the nodes with identical `from`\n        while (current >= 0 && stack[current].from === stack[cursor].from)\n            current--;\n        if (current >= 0) {\n            // the first node with different `from` will be part of the cycle path\n            cycle.push(stack[current].node);\n            cursor = current;\n        }\n    }\n    // no cycle\n    if (current < 0)\n        return [];\n    cycle.push(cycleSource);\n    return cycle.reverse();\n}\n", "var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Base } from \"../class/Base.js\";\nimport { Mixin } from \"../class/Mixin.js\";\nimport { required, validateRequiredProperties } from \"../class/RequiredProperty.js\";\nimport { CI, concatIterable, map, uniqueOnly } from \"../collection/Iterator.js\";\nimport { DEBUG } from \"../environment/Debug.js\";\nimport { OnCycleAction, WalkContext } from \"../graph/WalkDepth.js\";\nlet FORMULA_ID = 0;\n//---------------------------------------------------------------------------------------------------------------------\n/**\n * Pre-defined constant formula id. If assigned to some variable, specifies, that this variable should keep the value proposed by user\n * (user input), or, if there's none, its previous value.\n */\nexport const CalculateProposed = FORMULA_ID++;\n// export const CalculatePure : FormulaId          = FORMULA_ID++\n//---------------------------------------------------------------------------------------------------------------------\n/**\n * Class, describing a formula, which is part of the cyclic set. Formula just specifies its input variables and output variable,\n * it does not contain actual calculation.\n *\n * It is assumed that formula can only be \"activated\" if all of its inputs has value. It can be either a value from the previous iteration,\n * a value provided by user, or an output value of some other formula. See [[VariableInputState]] and [[CycleResolutionInput]].\n */\nexport class Formula extends Base {\n    constructor() {\n        super(...arguments);\n        /**\n         * The id of the formula. It is assigned automatically, should not be changed.\n         */\n        this.formulaId = FORMULA_ID++;\n        /**\n         * A set of the input variables for this formula.\n         */\n        this.inputs = new Set();\n    }\n}\n//---------------------------------------------------------------------------------------------------------------------\nexport class VariableWalkContext extends WalkContext {\n    collectNext(sourceNode, toVisit) {\n        if (sourceNode instanceof Formula) {\n            toVisit.push({ node: sourceNode.output, from: sourceNode, label: undefined });\n        }\n        else {\n            const formulas = this.cache.formulasByInput.get(sourceNode);\n            formulas && formulas.forEach(formula => toVisit.push({ node: formula, from: sourceNode, label: undefined }));\n        }\n    }\n}\n//---------------------------------------------------------------------------------------------------------------------\nexport class FormulasCache extends Mixin([Base], (base) => class FormulasCache extends base {\n    constructor() {\n        super(...arguments);\n        /**\n         * A set of variables, which forms cyclic computation\n         */\n        this.variables = new Set();\n        /**\n         * A set of formulas, which forms cyclic computation\n         */\n        this.formulas = new Set();\n        this.$formulasByInput = undefined;\n        this.$formulasByOutput = undefined;\n    }\n    get formulasByInput() {\n        if (this.$formulasByInput !== undefined)\n            return this.$formulasByInput;\n        this.fillCache();\n        return this.$formulasByInput;\n    }\n    get formulasByOutput() {\n        if (this.$formulasByOutput !== undefined)\n            return this.$formulasByOutput;\n        this.fillCache();\n        return this.$formulasByOutput;\n    }\n    add(formula) {\n        this.$formulasByInput = undefined;\n        this.$formulasByOutput = undefined;\n        this.formulas.add(formula);\n    }\n    has(formula) {\n        return this.formulas.has(formula);\n    }\n    fillCache() {\n        this.$formulasByInput = new Map();\n        this.$formulasByOutput = new Map();\n        this.formulas.forEach(formula => {\n            let formulasByOutput = this.$formulasByOutput.get(formula.output);\n            if (!formulasByOutput) {\n                formulasByOutput = new Set();\n                this.$formulasByOutput.set(formula.output, formulasByOutput);\n            }\n            formulasByOutput.add(formula);\n            formula.inputs.forEach(input => {\n                let formulasByInput = this.$formulasByInput.get(input);\n                if (!formulasByInput) {\n                    formulasByInput = new Set();\n                    this.$formulasByInput.set(input, formulasByInput);\n                }\n                formulasByInput.add(formula);\n            });\n        });\n    }\n    allInputVariables() {\n        return uniqueOnly(concatIterable(map(this.formulas, formula => formula.inputs.values())));\n    }\n    isCyclic() {\n        let isCyclic = false;\n        const walkContext = VariableWalkContext.new({ cache: this, onCycle: () => { isCyclic = true; return OnCycleAction.Cancel; } });\n        walkContext.startFrom(Array.from(this.allInputVariables()));\n        return isCyclic;\n    }\n}) {\n}\n//---------------------------------------------------------------------------------------------------------------------\n/**\n * Abstract description of the cycle. Does not include the default formula resolution, only variables and formulas. See also [[CycleResolution]].\n */\nexport class CycleDescription extends FormulasCache {\n}\n//---------------------------------------------------------------------------------------------------------------------\n/**\n * Class describing the cycle resolution process. Requires the abstract cycle [[description]] and a set of default formulas.\n *\n * The resolution is performed with [[CycleResolution.resolve]] method.\n *\n * Resolution are memoized, based on the input. You should generally have a single instance of this class for a single set of default formulas,\n * to accumulate the results and make resolution fast.\n */\nexport class CycleResolution extends Base {\n    constructor() {\n        super(...arguments);\n        /**\n         * Abstract cycle description for this resolution.\n         */\n        this.description = undefined;\n        /**\n         * A set of default formulas for this resolution. Default formulas specifies how the calculation should be performed, if there's no user input\n         * for any variable (or there's input for all of them). Also, default formulas are preferred, if several formulas can be chosen to continue the resolution.\n         */\n        this.defaultResolutionFormulas = new Set();\n        this.resolutionsByInputHash = new Map();\n    }\n    // the caching space is 3^var_num might need to clear the memory at some time\n    clear() {\n        this.resolutionsByInputHash.clear();\n    }\n    /**\n     * This method accepts an input object and returns a cycle resolution.\n     * Resolution are memoized, based on the input.\n     *\n     * @param input\n     */\n    resolve(input) {\n        const cached = this.resolutionsByInputHash.get(input.hash);\n        if (cached !== undefined)\n            return cached;\n        const resolution = this.buildResolution(input);\n        this.resolutionsByInputHash.set(input.hash, resolution);\n        return resolution;\n    }\n    buildResolution(input) {\n        const walkContext = WalkState.new({ context: this, input });\n        const allResolutions = Array.from(walkContext.next()).map(state => {\n            return {\n                resolution: state.asResolution(),\n                nbrOfDefaultFormulas: Array.from(state.activatedFormulas.formulas).reduce((count, formula) => state.formulaIsDefault(formula) ? count + 1 : count, 0),\n                unCoveredInputWeight: state.unCoveredInputWeight()\n            };\n        });\n        allResolutions.sort((res1, res2) => {\n            if (res1.unCoveredInputWeight < res2.unCoveredInputWeight)\n                return -1;\n            if (res1.unCoveredInputWeight > res2.unCoveredInputWeight)\n                return 1;\n            return res2.nbrOfDefaultFormulas - res1.nbrOfDefaultFormulas;\n        });\n        if (allResolutions.length > 0)\n            return allResolutions[0].resolution;\n        else\n            debugger; // return default? or all-proposed?\n    }\n}\n/**\n * Enumeration for various states of the input data for variables in the cycle. Individual members corresponds to binary bits and can be set simultaneously, like:\n *\n * ```ts\n * const input : VariableInputState = VariableInputState.HasPreviousValue | VariableInputState.HasProposedValue\n * ```\n */\nexport var VariableInputState;\n(function (VariableInputState) {\n    VariableInputState[VariableInputState[\"NoInput\"] = 0] = \"NoInput\";\n    /**\n     * This bit indicates that variable has some previous value, when resolution starts. It can be any non-`undefined` value, including `null`.\n     */\n    VariableInputState[VariableInputState[\"HasPreviousValue\"] = 1] = \"HasPreviousValue\";\n    /**\n     * This bit indicates that variable has user input, when resolution starts. It can be any non-`undefined` value, including `null`.\n     */\n    VariableInputState[VariableInputState[\"HasProposedValue\"] = 2] = \"HasProposedValue\";\n    /**\n     * This bit indicates, that user intention is to keep this variable unchanged, if that is possible (does not contradict to other user input).\n     */\n    VariableInputState[VariableInputState[\"KeepIfPossible\"] = 4] = \"KeepIfPossible\";\n})(VariableInputState || (VariableInputState = {}));\n//---------------------------------------------------------------------------------------------------------------------\n/**\n * Class, describing the input data for a set of variables during cycle resolution.\n */\nexport class CycleResolutionInput extends Base {\n    constructor() {\n        super(...arguments);\n        /**\n         * A cycle resolution instance this input corresponds to.\n         */\n        this.context = undefined;\n        this.input = undefined;\n        this.$hash = '';\n    }\n    get hash() {\n        if (this.$hash !== '')\n            return this.$hash;\n        return this.$hash = this.buildHash();\n    }\n    get description() { return this.context.description; }\n    /**\n     * Returns the same result as calling [[CycleResolution.resolve]] on this input instance\n     */\n    get resolution() {\n        return this.context.resolve(this);\n    }\n    initialize(...args) {\n        super.initialize(...args);\n        validateRequiredProperties(this);\n        this.input = new Map(CI(this.description.variables).map(variable => [variable, VariableInputState.NoInput]));\n    }\n    buildHash() {\n        return String.fromCharCode(...CI(this.description.variables).inBatchesBySize(5).map(batch => this.batchToCharCode(batch)));\n    }\n    batchToCharCode(batch) {\n        return batch.reduceRight((charCode, variable, index) => charCode | (this.input.get(variable) << index * 3), 0);\n    }\n    //---------------------\n    /**\n     * This method sets the [[HasProposedValue]] flag for the specified variable.\n     *\n     * @param variable\n     */\n    addProposedValueFlag(variable) {\n        if (DEBUG) {\n            if (!this.description.variables.has(variable))\n                throw new Error('Unknown variable');\n            if (this.$hash !== '')\n                throw new Error('Already hashed');\n        }\n        const input = this.input.get(variable);\n        this.input.set(variable, input | VariableInputState.HasProposedValue);\n    }\n    hasProposedValue(variable) {\n        return Boolean(this.input.get(variable) & VariableInputState.HasProposedValue);\n    }\n    hasProposedValueVars() {\n        return CI(this.description.variables).filter(variable => this.hasProposedValue(variable));\n    }\n    //---------------------\n    /**\n     * This method sets the [[HasPreviousValue]] flag for the specified variable.\n     *\n     * @param variable\n     */\n    addPreviousValueFlag(variable) {\n        if (DEBUG) {\n            if (!this.description.variables.has(variable))\n                throw new Error('Unknown variable');\n            if (this.$hash !== '')\n                throw new Error('Already hashed');\n        }\n        const input = this.input.get(variable);\n        this.input.set(variable, input | VariableInputState.HasPreviousValue);\n    }\n    hasPreviousValue(variable) {\n        return Boolean(this.input.get(variable) & VariableInputState.HasPreviousValue);\n    }\n    hasPreviousValueVars() {\n        return CI(this.description.variables).filter(variable => this.hasPreviousValue(variable));\n    }\n    //---------------------\n    /**\n     * This method sets the [[KeepIfPossible]] flag for the specified variable.\n     *\n     * @param variable\n     */\n    addKeepIfPossibleFlag(variable) {\n        if (DEBUG) {\n            if (!this.description.variables.has(variable))\n                throw new Error('Unknown variable');\n            if (this.$hash !== '')\n                throw new Error('Already hashed');\n        }\n        const input = this.input.get(variable);\n        this.input.set(variable, input | VariableInputState.KeepIfPossible);\n    }\n    keepIfPossible(variable) {\n        return Boolean(this.input.get(variable) & VariableInputState.KeepIfPossible);\n    }\n    keepIfPossibleVars() {\n        return CI(this.description.variables).filter(variable => this.keepIfPossible(variable));\n    }\n}\n__decorate([\n    required\n], CycleResolutionInput.prototype, \"context\", void 0);\n//---------------------------------------------------------------------------------------------------------------------\nexport class WalkState extends Base {\n    constructor() {\n        super(...arguments);\n        this.context = undefined;\n        this.input = undefined;\n        this.previous = undefined;\n        this.activatedFormula = undefined;\n        this.$activatedFormulas = undefined;\n    }\n    get activatedFormulas() {\n        if (this.$activatedFormulas !== undefined)\n            return this.$activatedFormulas;\n        const cache = FormulasCache.new({\n            variables: this.description.variables,\n            formulas: CI(this.thisAndPreviousStates()).map(state => state.activatedFormula).toSet()\n        });\n        return this.$activatedFormulas = cache;\n    }\n    get description() { return this.context.description; }\n    *thisAndPreviousStates() {\n        let current = this;\n        while (current && current.activatedFormula) {\n            yield current;\n            current = current.previous;\n        }\n    }\n    formulaHasProposedValueInInput(formula) {\n        return Array.from(formula.inputs).some(variable => this.input.hasProposedValue(variable));\n    }\n    // this method counts\n    unCoveredInputWeight() {\n        const proposedVars = map(this.input.hasProposedValueVars(), variable => { return { variable, isProposed: true }; });\n        const keepIfPossibleVars = map(this.input.keepIfPossibleVars(), variable => { return { variable, isProposed: false }; });\n        const allInputVars = CI([proposedVars, keepIfPossibleVars]).concat().uniqueOnlyBy(el => el.variable);\n        return allInputVars.reduce((totalWeight, { variable, isProposed }) => {\n            let weight = 0;\n            //-----------------\n            const isOverwrittenByFormulas = this.activatedFormulas.formulasByOutput.get(variable);\n            if (isOverwrittenByFormulas) {\n                const formula = isOverwrittenByFormulas.size === 1 ? Array.from(isOverwrittenByFormulas)[0] : null;\n                // the case, when some user input is overwritten with the default formula should be weighted less than\n                // its overwritten with regular formula\n                if (formula && this.formulaIsDefault(formula) && this.formulaHasProposedValueInInput(formula)) {\n                    if (isProposed)\n                        weight += 1e6;\n                    else\n                        weight += 1e4;\n                }\n                else {\n                    if (isProposed)\n                        weight += 1e7;\n                    else\n                        weight += 1e5;\n                }\n            }\n            //-----------------\n            const usedInFormulas = this.activatedFormulas.formulasByInput.get(variable);\n            if (!(usedInFormulas && usedInFormulas.size > 0)) {\n                if (isProposed)\n                    weight += 1e3;\n                else\n                    weight += 1e2;\n            }\n            return totalWeight + weight;\n        }, 0);\n    }\n    preferFormula(formula1, formula2) {\n        const allInputsHasProposed1 = this.formulaAllInputsHasProposed(formula1);\n        const allInputsHasProposed2 = this.formulaAllInputsHasProposed(formula2);\n        if (allInputsHasProposed1 && !allInputsHasProposed2)\n            return -1;\n        if (allInputsHasProposed2 && !allInputsHasProposed1)\n            return 1;\n        const countInputsWithProposedOrKeep1 = this.formulaCountInputsWithProposedOrKeep(formula1);\n        const countInputsWithProposedOrKeep2 = this.formulaCountInputsWithProposedOrKeep(formula2);\n        if (countInputsWithProposedOrKeep1 > countInputsWithProposedOrKeep2)\n            return -1;\n        if (countInputsWithProposedOrKeep1 < countInputsWithProposedOrKeep2)\n            return 1;\n        if (this.formulaIsDefault(formula1) && !this.formulaIsDefault(formula2))\n            return -1;\n        if (this.formulaIsDefault(formula2) && !this.formulaIsDefault(formula1))\n            return 1;\n        return 0;\n    }\n    formulaIsDefault(formula) {\n        return this.context.defaultResolutionFormulas.has(formula);\n    }\n    formulaCountInputsWithProposedOrKeep(formula) {\n        let count = 0;\n        Array.from(formula.inputs).forEach(variable => {\n            if (this.input.hasProposedValue(variable) || this.input.keepIfPossible(variable))\n                count++;\n        });\n        return count;\n    }\n    formulaAllInputsHasProposedOrKeep(formula) {\n        return Array.from(formula.inputs).every(variable => this.input.hasProposedValue(variable) || this.input.keepIfPossible(variable));\n    }\n    formulaAllInputsHasProposed(formula) {\n        return Array.from(formula.inputs).every(variable => this.input.hasProposedValue(variable));\n    }\n    formulaIsApplicable(formula) {\n        const everyFormulaInputHasValue = Array.from(formula.inputs).every(variable => this.input.hasProposedValue(variable)\n            || this.input.hasPreviousValue(variable)\n            || this.activatedFormulas.formulasByOutput.has(variable));\n        const cache = FormulasCache.new({ formulas: new Set(this.activatedFormulas.formulas) });\n        cache.add(formula);\n        return everyFormulaInputHasValue && !cache.isCyclic();\n    }\n    // in general the semantic of this method is very similar to `formulaIsApplicable`\n    formulaIsInsignificant(formula) {\n        const outputVariableAlreadyCalculated = this.activatedFormulas.formulasByOutput.has(formula.output);\n        const outputVariableHasPreviousValue = this.input.hasPreviousValue(formula.output);\n        return outputVariableAlreadyCalculated\n            || outputVariableHasPreviousValue && Array.from(formula.inputs).some(variable => {\n                // so we should ignore the formula, if some of its inputs\n                // does not have value provided (neither previous nor proposed)\n                return !this.input.hasPreviousValue(variable) && !this.input.hasProposedValue(variable)\n                    // ..and we haven't planned calculation of that input via another formula\n                    && !this.activatedFormulas.formulasByOutput.has(variable);\n            });\n    }\n    unvisitedFormulas() {\n        return Array.from(this.description.formulas).filter(formula => !this.activatedFormulas.has(formula));\n    }\n    *next() {\n        const unvisitedFormulas = this.unvisitedFormulas();\n        unvisitedFormulas.sort(this.preferFormula.bind(this));\n        let isFinal = true;\n        for (const formula of unvisitedFormulas) {\n            if (!this.formulaIsApplicable(formula) || this.formulaIsInsignificant(formula))\n                continue;\n            const nextState = WalkState.new({\n                previous: this,\n                context: this.context,\n                input: this.input,\n                activatedFormula: formula\n            });\n            yield* nextState.next();\n            isFinal = false;\n        }\n        if (isFinal)\n            yield this;\n    }\n    asResolution() {\n        return new Map(CI(this.description.variables).map(variable => {\n            const formulas = this.activatedFormulas.formulasByOutput.get(variable);\n            if (formulas) {\n                for (const firstFormula of formulas) {\n                    return [variable, firstFormula.formulaId];\n                }\n            }\n            return [variable, CalculateProposed];\n        }));\n    }\n}\n", "var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Base } from \"../class/Base.js\";\nimport { prototypeValue } from \"../util/Helpers.js\";\n//---------------------------------------------------------------------------------------------------------------------\nexport const BreakCurrentStackExecution = Symbol('BreakCurrentStackExecution');\n//---------------------------------------------------------------------------------------------------------------------\n/**\n * The base class for effect. Effect is some value, that can be send to the \"outer\" calculation context, using the\n * effect handler function. Effect handler then will process an effect and return some resulting value.\n *\n * ```ts\n * const identifier  = graph.identifier((Y : SyncEffectHandler) : number => {\n *     const proposedValue : number    = Y(ProposedOrPrevious)\n *\n *     const maxValue : number         = Y(max)\n *\n *     return proposedValue <= maxValue ? proposedValue : maxValue\n * })\n * ```\n */\nexport class Effect extends Base {\n}\n__decorate([\n    prototypeValue(true)\n], Effect.prototype, \"sync\", void 0);\n__decorate([\n    prototypeValue(true)\n], Effect.prototype, \"pure\", void 0);\n//---------------------------------------------------------------------------------------------------------------------\nexport const ProposedOrPreviousSymbol = Symbol('ProposedOrPreviousSymbol');\n/**\n * The constant that represents a request for either user input (proposed value) or previous value of the\n * identifier, currently being calculated.\n *\n * Important note, is that if an identifier yields a `ProposedOrPrevious` effect and its computed value does not match the value of this effect,\n * it will be re-calculated (computation function called) again on the next read. This is because the value of its `ProposedOrPrevious` input changes.\n *\n * ```ts\n * const graph4 = ChronoGraph.new()\n *\n * const max           = graph4.variable(100)\n *\n * const identifier15  = graph4.identifier((Y) : number => {\n *     const proposedValue : number    = Y(ProposedOrPrevious)\n *\n *     const maxValue : number         = Y(max)\n *\n *     return proposedValue <= maxValue ? proposedValue : maxValue\n * })\n *\n * graph4.write(identifier15, 18)\n *\n * const value15_1 = graph4.read(identifier15) // 18\n *\n * graph4.write(identifier15, 180)\n *\n * const value15_2 = graph4.read(identifier15) // 100\n *\n * graph4.write(max, 50)\n *\n * const value15_3 = graph4.read(identifier15) // 50\n * ```\n */\nexport const ProposedOrPrevious = Effect.new({ handler: ProposedOrPreviousSymbol });\n//---------------------------------------------------------------------------------------------------------------------\nexport const RejectSymbol = Symbol('RejectSymbol');\n/**\n * Class for [[Reject]] effect.\n */\nexport class RejectEffect extends Effect {\n    constructor() {\n        super(...arguments);\n        this.handler = RejectSymbol;\n    }\n}\n__decorate([\n    prototypeValue(false)\n], RejectEffect.prototype, \"pure\", void 0);\n/**\n * This is constructor for `RejectEffect` class. If this effect will be yielded during computation the current transaction\n * will be [[ChronoGraph.reject|rejected]].\n *\n * @param reason\n * @constructor\n */\nexport const Reject = (reason) => RejectEffect.new({ reason });\n//---------------------------------------------------------------------------------------------------------------------\nexport const TransactionSymbol = Symbol('TransactionSymbol');\nexport const GetTransaction = Effect.new({ handler: TransactionSymbol });\n//---------------------------------------------------------------------------------------------------------------------\nexport const OwnQuarkSymbol = Symbol('OwnQuarkSymbol');\nexport const OwnQuark = Effect.new({ handler: OwnQuarkSymbol });\n//---------------------------------------------------------------------------------------------------------------------\nexport const OwnIdentifierSymbol = Symbol('OwnIdentifierSymbol');\nexport const OwnIdentifier = Effect.new({ handler: OwnIdentifierSymbol });\n//---------------------------------------------------------------------------------------------------------------------\nexport const WriteSymbol = Symbol('WriteSymbol');\nexport class WriteEffect extends Effect {\n    constructor() {\n        super(...arguments);\n        this.handler = WriteSymbol;\n    }\n}\n__decorate([\n    prototypeValue(false)\n], WriteEffect.prototype, \"pure\", void 0);\nexport const Write = (identifier, proposedValue, ...proposedArgs) => WriteEffect.new({ identifier, proposedArgs: [proposedValue, ...proposedArgs] });\nexport const WriteSeveralSymbol = Symbol('WriteSeveralSymbol');\nexport class WriteSeveralEffect extends Effect {\n    constructor() {\n        super(...arguments);\n        this.handler = WriteSeveralSymbol;\n    }\n}\n__decorate([\n    prototypeValue(false)\n], WriteSeveralEffect.prototype, \"pure\", void 0);\nexport const WriteSeveral = (writes) => WriteSeveralEffect.new({ writes });\n//---------------------------------------------------------------------------------------------------------------------\nexport const PreviousValueOfSymbol = Symbol('PreviousValueOfSymbol');\nexport class PreviousValueOfEffect extends Effect {\n    constructor() {\n        super(...arguments);\n        this.handler = PreviousValueOfSymbol;\n    }\n}\nexport const PreviousValueOf = (identifier) => PreviousValueOfEffect.new({ identifier });\n//---------------------------------------------------------------------------------------------------------------------\nexport const ProposedValueOfSymbol = Symbol('ProposedValueOfSymbol');\nexport class ProposedValueOfEffect extends Effect {\n    constructor() {\n        super(...arguments);\n        this.handler = ProposedValueOfSymbol;\n    }\n}\nexport const ProposedValueOf = (identifier) => ProposedValueOfEffect.new({ identifier });\n//---------------------------------------------------------------------------------------------------------------------\nexport const HasProposedValueSymbol = Symbol('HasProposedValueSymbol');\nexport class HasProposedValueEffect extends Effect {\n    constructor() {\n        super(...arguments);\n        this.handler = HasProposedValueSymbol;\n    }\n}\nexport const HasProposedValue = (identifier) => HasProposedValueEffect.new({ identifier });\n//---------------------------------------------------------------------------------------------------------------------\nexport const HasProposedNotPreviousValueSymbol = Symbol('HasProposedNotPreviousValueSymbol');\nexport class HasProposedNotPreviousValueEffect extends Effect {\n    constructor() {\n        super(...arguments);\n        this.handler = HasProposedNotPreviousValueSymbol;\n    }\n}\nexport const HasProposedNotPreviousValue = (identifier) => HasProposedNotPreviousValueEffect.new({ identifier });\n//---------------------------------------------------------------------------------------------------------------------\nexport const ProposedOrPreviousValueOfSymbol = Symbol('ProposedOrPreviousValueOfSymbol');\nexport class ProposedOrPreviousValueOfEffect extends Effect {\n    constructor() {\n        super(...arguments);\n        this.handler = ProposedOrPreviousValueOfSymbol;\n    }\n}\nexport const ProposedOrPreviousValueOf = (identifier) => ProposedOrPreviousValueOfEffect.new({ identifier });\n//---------------------------------------------------------------------------------------------------------------------\nexport const ProposedArgumentsOfSymbol = Symbol('ProposedArgumentsOfSymbol');\nexport class ProposedArgumentsOfEffect extends Effect {\n    constructor() {\n        super(...arguments);\n        this.handler = ProposedArgumentsOfSymbol;\n    }\n}\nexport const ProposedArgumentsOf = (identifier) => ProposedArgumentsOfEffect.new({ identifier });\n//---------------------------------------------------------------------------------------------------------------------\nexport const UnsafeProposedOrPreviousValueOfSymbol = Symbol('UnsafeProposedOrPreviousValueOfSymbol');\nexport class UnsafeProposedOrPreviousValueOfEffect extends Effect {\n    constructor() {\n        super(...arguments);\n        this.handler = UnsafeProposedOrPreviousValueOfSymbol;\n    }\n}\nexport const UnsafeProposedOrPreviousValueOf = (identifier) => UnsafeProposedOrPreviousValueOfEffect.new({ identifier });\n//---------------------------------------------------------------------------------------------------------------------\nexport const UnsafePreviousValueOfSymbol = Symbol('UnsafePreviousValueOfSymbol');\nexport class UnsafePreviousValueOfEffect extends Effect {\n    constructor() {\n        super(...arguments);\n        this.handler = UnsafePreviousValueOfSymbol;\n    }\n}\nexport const UnsafePreviousValueOf = (identifier) => UnsafePreviousValueOfEffect.new({ identifier });\n", "import { CycleResolutionInput } from \"../cycle_resolver/CycleResolver.js\";\nimport { HasProposedNotPreviousValue, PreviousValueOf } from \"./Effect.js\";\n//---------------------------------------------------------------------------------------------------------------------\n/**\n * A subclass of [[CycleResolutionInput]] with additional convenience method [[collectInfo]].\n */\nexport class CycleResolutionInputChrono extends CycleResolutionInput {\n    /**\n     * This method, given an effect handler, identifier and a variable, will add [[CycleResolutionInput.addPreviousValueFlag|previous value]]\n     * and [[CycleResolutionInput.addProposedValueFlag|proposed value]] flags for that variable.\n     *\n     * @param Y An effect handler function, which is given as a 1st argument of every calculation function\n     * @param identifier\n     * @param symbol\n     */\n    collectInfo(Y, identifier, symbol) {\n        if (Y(PreviousValueOf(identifier)) != null)\n            this.addPreviousValueFlag(symbol);\n        if (Y(HasProposedNotPreviousValue(identifier)))\n            this.addProposedValueFlag(symbol);\n    }\n}\n", "import { Effect, Reject } from \"../chrono/Effect.js\";\nimport { Mixin } from \"../class/Mixin.js\";\nimport { isPromise } from \"../util/Helpers.js\";\n//---------------------------------------------------------------------------------------------------------------------\n/**\n * Symbol to denote the synchronous calculation context\n */\nexport const ContextSync = Symbol('ContextSync');\n/**\n * Symbol to denote the generator calculation context\n */\nexport const ContextGen = Symbol('ContextGen');\n//---------------------------------------------------------------------------------------------------------------------\nexport class CalculationGen extends Mixin([], (base) => class CalculationGen extends base {\n    constructor() {\n        super(...arguments);\n        this.iterator = undefined;\n        this.iterationResult = undefined;\n    }\n    isCalculationStarted() {\n        return Boolean(this.iterator || this.iterationResult);\n    }\n    isCalculationCompleted() {\n        return Boolean(this.iterationResult && this.iterationResult.done);\n    }\n    get result() {\n        return this.iterationResult && this.iterationResult.done ? this.iterationResult.value : undefined;\n    }\n    startCalculation(onEffect, ...args) {\n        const iterator = this.iterator = this.calculation.call(this.context || this, onEffect, ...args);\n        return this.iterationResult = iterator.next();\n    }\n    continueCalculation(value) {\n        return this.iterationResult = this.iterator.next(value);\n    }\n    cleanupCalculation() {\n        this.iterationResult = undefined;\n        this.iterator = undefined;\n    }\n    *calculation(onEffect, ...args) {\n        throw new Error(\"Abstract method `calculation` called\");\n    }\n    runSyncWithEffect(onEffect, ...args) {\n        this.startCalculation(onEffect, ...args);\n        while (!this.isCalculationCompleted()) {\n            this.continueCalculation(onEffect(this.iterationResult.value));\n        }\n        // help to garbage collector\n        this.iterator = undefined;\n        return this.result;\n    }\n    async runAsyncWithEffect(onEffect, ...args) {\n        this.startCalculation(onEffect, ...args);\n        while (!this.isCalculationCompleted()) {\n            this.continueCalculation(await onEffect(this.iterationResult.value));\n        }\n        // help to garbage collector\n        this.iterator = undefined;\n        return this.result;\n    }\n}) {\n}\n//---------------------------------------------------------------------------------------------------------------------\nexport const SynchronousCalculationStarted = Symbol('SynchronousCalculationStarted');\nconst calculationStartedConstant = { value: SynchronousCalculationStarted };\nexport class CalculationSync extends Mixin([], (base) => class CalculationSync extends base {\n    constructor() {\n        super(...arguments);\n        this.iterationResult = undefined;\n    }\n    isCalculationStarted() {\n        return Boolean(this.iterationResult);\n    }\n    isCalculationCompleted() {\n        return Boolean(this.iterationResult && this.iterationResult.done);\n    }\n    get result() {\n        return this.iterationResult && this.iterationResult.done ? this.iterationResult.value : undefined;\n    }\n    startCalculation(onEffect, ...args) {\n        // this assignment allows other code to observe, that calculation has started\n        this.iterationResult = calculationStartedConstant;\n        return this.iterationResult = {\n            done: true,\n            value: this.calculation.call(this.context || this, onEffect, ...args)\n        };\n    }\n    continueCalculation(value) {\n        throw new Error(\"Can not continue synchronous calculation\");\n    }\n    cleanupCalculation() {\n        this.iterationResult = undefined;\n    }\n    calculation(onEffect, ...args) {\n        throw new Error(\"Abstract method `calculation` called\");\n    }\n    runSyncWithEffect(onEffect, ...args) {\n        this.startCalculation(onEffect, ...args);\n        return this.result;\n    }\n    async runAsyncWithEffect(onEffect, ...args) {\n        throw new Error('Can not run synchronous calculation asynchronously');\n    }\n}) {\n}\n//---------------------------------------------------------------------------------------------------------------------\nexport function runGeneratorSyncWithEffect(effect, func, args, scope) {\n    const gen = func.apply(scope || null, args);\n    let iteration = gen.next();\n    while (!iteration.done) {\n        iteration = gen.next(effect(iteration.value));\n    }\n    return iteration.value;\n}\n//---------------------------------------------------------------------------------------------------------------------\nexport async function runGeneratorAsyncWithEffect(effect, func, args, scope) {\n    const gen = func.apply(scope || null, args);\n    let iteration = gen.next();\n    while (!iteration.done) {\n        let effectResolution;\n        let repeat = false;\n        do {\n            repeat = false;\n            try {\n                effectResolution = effect(iteration.value);\n            }\n            catch (e) {\n                // this is very bad, or even terrible - the high-level `Effect` class is mentioned in the \"primitives\",\n                // we compare 'resolution' with the magic string 'Cancel' (defined in Engine) and we also use `Reject`\n                // constructor\n                // but, we are trying to shove an async handling in sync computation (impossible by definition)\n                // so we are desperate, and even seems to work...\n                // other piece of this code is in `onComputationCycleHandlerSync` in `Engine/lib/Engine/chrono/Replica.ts`\n                if (e instanceof Effect) {\n                    // @ts-ignore\n                    let resolution = await effect(e);\n                    if (resolution === 'Cancel') {\n                        // @ts-ignore\n                        effect(Reject(e));\n                        return;\n                    }\n                    else {\n                        repeat = true;\n                    }\n                }\n            }\n        } while (repeat);\n        if (isPromise(effectResolution))\n            iteration = gen.next(await effectResolution);\n        else\n            iteration = gen.next(effectResolution);\n    }\n    return iteration.value;\n}\n", "import { MixinAny } from \"../class/Mixin.js\";\nimport { NOT_VISITED } from \"../graph/WalkDepth.js\";\nimport { MAX_SMI, MIN_SMI } from \"../util/Helpers.js\";\n//---------------------------------------------------------------------------------------------------------------------\nexport var EdgeType;\n(function (EdgeType) {\n    EdgeType[EdgeType[\"Normal\"] = 1] = \"Normal\";\n    EdgeType[EdgeType[\"Past\"] = 2] = \"Past\";\n})(EdgeType || (EdgeType = {}));\nlet ORIGIN_ID = 0;\n//---------------------------------------------------------------------------------------------------------------------\nexport class Quark extends MixinAny([Map], (base) => class Quark extends base {\n    constructor() {\n        super(...arguments);\n        // required\n        this.createdAt = undefined;\n        this.identifier = undefined;\n        // quark state\n        this.value = undefined;\n        this.proposedValue = undefined;\n        this.proposedIsPrevious = false;\n        this.proposedArguments = undefined;\n        this.usedProposedOrPrevious = false;\n        // eof quark state\n        this.previous = undefined;\n        this.origin = undefined;\n        this.originId = MIN_SMI;\n        this.needToBuildProposedValue = false;\n        this.edgesFlow = 0;\n        this.visitedAt = NOT_VISITED;\n        this.visitEpoch = 0;\n        this.promise = undefined;\n        this.$outgoingPast = undefined;\n    }\n    static new(props) {\n        const instance = new this();\n        props && Object.assign(instance, props);\n        return instance;\n    }\n    get level() {\n        return this.identifier.level;\n    }\n    get calculation() {\n        return this.identifier.calculation;\n    }\n    get context() {\n        return this.identifier.context || this.identifier;\n    }\n    forceCalculation() {\n        this.edgesFlow = MAX_SMI;\n    }\n    cleanup() {\n        this.cleanupCalculation();\n    }\n    isShadow() {\n        return Boolean(this.origin && this.origin !== this);\n    }\n    resetToEpoch(epoch) {\n        this.visitEpoch = epoch;\n        this.visitedAt = NOT_VISITED;\n        // we were clearing the edgeFlow on epoch change, however see `030_propagation_2.t.ts` for a counter-example\n        if (this.edgesFlow < 0)\n            this.edgesFlow = 0;\n        this.usedProposedOrPrevious = false;\n        this.cleanupCalculation();\n        // if there's no value, then generally should be no outgoing edges\n        // (which indicates that the value has been used somewhere else)\n        // but there might be outgoing \"past\" edges, created if `HasProposedValue`\n        // or similar effect has been used on the identifier\n        // if (this.value !== undefined) this.clearOutgoing()\n        // the `this.value !== undefined` condition above smells very \"monkey-patching\"\n        // it was probably solving some specific problem in Gantt/SchedulerPro\n        // (engine tests seems to pass w/o it)\n        // in general, should always clear the outgoing edges on new epoch\n        this.clearOutgoing();\n        this.promise = undefined;\n        if (this.origin && this.origin === this) {\n            this.proposedArguments = undefined;\n            // only overwrite the proposed value if the actual value has been already calculated\n            // otherwise, keep the proposed value as is\n            if (this.value !== undefined) {\n                this.proposedValue = this.value;\n            }\n            this.value = undefined;\n        }\n        else {\n            this.origin = undefined;\n            this.value = undefined;\n        }\n        if (this.identifier.proposedValueIsBuilt && this.proposedValue !== TombStone) {\n            this.needToBuildProposedValue = true;\n            this.proposedValue = undefined;\n        }\n    }\n    copyFrom(origin) {\n        this.value = origin.value;\n        this.proposedValue = origin.proposedValue;\n        this.proposedArguments = origin.proposedArguments;\n        this.usedProposedOrPrevious = origin.usedProposedOrPrevious;\n    }\n    clearProperties() {\n        this.value = undefined;\n        this.proposedValue = undefined;\n        this.proposedArguments = undefined;\n    }\n    mergePreviousOrigin(latestScope) {\n        const origin = this.origin;\n        if (origin !== this.previous)\n            throw new Error(\"Invalid state\");\n        this.copyFrom(origin);\n        const outgoing = this.getOutgoing();\n        for (const [identifier, quark] of origin.getOutgoing()) {\n            const ownOutgoing = outgoing.get(identifier);\n            if (!ownOutgoing) {\n                const latest = latestScope.get(identifier);\n                if (!latest || latest.originId === quark.originId)\n                    outgoing.set(identifier, latest || quark);\n            }\n        }\n        if (origin.$outgoingPast !== undefined) {\n            const outgoingPast = this.getOutgoingPast();\n            for (const [identifier, quark] of origin.getOutgoingPast()) {\n                const ownOutgoing = outgoingPast.get(identifier);\n                if (!ownOutgoing) {\n                    const latest = latestScope.get(identifier);\n                    if (!latest || latest.originId === quark.originId)\n                        outgoingPast.set(identifier, latest || quark);\n                }\n            }\n        }\n        // changing `origin`, but keeping `originId`\n        this.origin = this;\n        // some help for garbage collector\n        origin.clearProperties();\n        origin.clear();\n    }\n    setOrigin(origin) {\n        this.origin = origin;\n        this.originId = origin.originId;\n    }\n    getOrigin() {\n        if (this.origin)\n            return this.origin;\n        return this.startOrigin();\n    }\n    startOrigin() {\n        this.originId = ORIGIN_ID++;\n        return this.origin = this;\n    }\n    getOutgoing() {\n        return this;\n    }\n    getOutgoingPast() {\n        if (this.$outgoingPast !== undefined)\n            return this.$outgoingPast;\n        return this.$outgoingPast = new Map();\n    }\n    addOutgoingTo(toQuark, type) {\n        const outgoing = type === EdgeType.Normal ? this : this.getOutgoingPast();\n        outgoing.set(toQuark.identifier, toQuark);\n    }\n    clearOutgoing() {\n        this.clear();\n        if (this.$outgoingPast !== undefined)\n            this.$outgoingPast.clear();\n    }\n    getValue() {\n        const origin = this.origin;\n        return origin === this\n            ? this.value\n            : origin\n                ? origin.getValue()\n                : undefined;\n    }\n    setValue(value) {\n        if (this.origin && this.origin !== this)\n            throw new Error('Can not set value to the shadow entry');\n        this.getOrigin().value = value;\n        // // @ts-ignore\n        // if (value !== TombStone) this.identifier.DATA = value\n    }\n    hasValue() {\n        return this.getValue() !== undefined;\n    }\n    hasProposedValue() {\n        if (this.isShadow())\n            return false;\n        return this.hasProposedValueInner();\n    }\n    hasProposedValueInner() {\n        return this.proposedValue !== undefined;\n    }\n    getProposedValue(transaction) {\n        if (this.needToBuildProposedValue) {\n            this.proposedValue = this.identifier.buildProposedValue.call(this.identifier.context || this.identifier, this.identifier, this, transaction);\n            // setting this flag _after_ attempt to build the proposed value, because it might actually throw\n            // (if there's a cycle during sync computation, like during `effectiveDirection`)\n            // in such case, we need to re-enter this block\n            this.needToBuildProposedValue = false;\n        }\n        return this.proposedValue;\n    }\n    outgoingInTheFutureCb(revision, forEach) {\n        let current = this;\n        while (current) {\n            for (const outgoing of current.getOutgoing().values()) {\n                if (outgoing.originId === revision.getLatestEntryFor(outgoing.identifier).originId)\n                    forEach(outgoing);\n            }\n            if (current.isShadow())\n                current = current.previous;\n            else\n                current = null;\n        }\n    }\n    outgoingInTheFutureAndPastCb(revision, forEach) {\n        let current = this;\n        while (current) {\n            for (const outgoing of current.getOutgoing().values()) {\n                const latestEntry = revision.getLatestEntryFor(outgoing.identifier);\n                if (latestEntry && outgoing.originId === latestEntry.originId)\n                    forEach(outgoing);\n            }\n            if (current.$outgoingPast !== undefined) {\n                for (const outgoing of current.$outgoingPast.values()) {\n                    const latestEntry = revision.getLatestEntryFor(outgoing.identifier);\n                    if (latestEntry && outgoing.originId === latestEntry.originId)\n                        forEach(outgoing);\n                }\n            }\n            if (current.isShadow())\n                current = current.previous;\n            else\n                current = null;\n        }\n    }\n    outgoingInTheFutureAndPastTransactionCb(transaction, forEach) {\n        let current = this;\n        while (current) {\n            for (const outgoing of current.getOutgoing().values()) {\n                const latestEntry = transaction.getLatestStableEntryFor(outgoing.identifier);\n                if (latestEntry && outgoing.originId === latestEntry.originId)\n                    forEach(outgoing);\n            }\n            if (current.$outgoingPast !== undefined) {\n                for (const outgoing of current.$outgoingPast.values()) {\n                    const latestEntry = transaction.getLatestStableEntryFor(outgoing.identifier);\n                    if (latestEntry && outgoing.originId === latestEntry.originId)\n                        forEach(outgoing);\n                }\n            }\n            if (current.isShadow())\n                current = current.previous;\n            else\n                current = null;\n        }\n    }\n    // ignores the \"past\" edges by design, as they do not form cycles\n    outgoingInTheFutureTransactionCb(transaction, forEach) {\n        let current = this;\n        while (current) {\n            for (const outgoing of current.getOutgoing().values()) {\n                const latestEntry = transaction.getLatestEntryFor(outgoing.identifier);\n                if (latestEntry && outgoing.originId === latestEntry.originId)\n                    forEach(outgoing);\n            }\n            if (current.isShadow())\n                current = current.previous;\n            else\n                current = null;\n        }\n    }\n}) {\n}\n//---------------------------------------------------------------------------------------------------------------------\nexport const TombStone = Symbol('Tombstone');\n", "var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Base } from \"../class/Base.js\";\nimport { CalculationGen, CalculationSync } from \"../primitives/Calculation.js\";\nimport { prototypeValue } from \"../util/Helpers.js\";\nimport { ProposedOrPrevious } from \"./Effect.js\";\nimport { Quark } from \"./Quark.js\";\n//---------------------------------------------------------------------------------------------------------------------\n/**\nLevels of the [[Identifier|identifiers]] as simple integers. Defines the order of calculation, enforced by the following rule -\nall lower level identifiers should be already calculated before the calculation of the identifier with the higher level starts.\nBecause of this, the lower level identifiers can not depend on higher level identifiers.\nThis rule means that effects from all identifiers of the lower levels will be already processed, when calculating\nan identifier of the higher level.\nNormally you don't need to specify a level for your identifiers.\n*/\nexport var Levels;\n(function (Levels) {\n    // must be sync\n    Levels[Levels[\"UserInput\"] = 0] = \"UserInput\";\n    Levels[Levels[\"DependsOnlyOnUserInput\"] = 1] = \"DependsOnlyOnUserInput\";\n    Levels[Levels[\"DependsOnlyOnDependsOnlyOnUserInput\"] = 2] = \"DependsOnlyOnDependsOnlyOnUserInput\";\n    // asynchronicity starts from here\n    Levels[Levels[\"DependsOnSelfKind\"] = 3] = \"DependsOnSelfKind\";\n})(Levels || (Levels = {}));\n//---------------------------------------------------------------------------------------------------------------------\n/**\n * The base class for [[Identifier|identifiers]]. It contains only \"meta\" properties that describes \"abstract\" identifier.\n * The [[Field]] class inherit from this class.\n *\n * To understand the difference between the \"abstract\" identifier and the \"specific\" identifier,\n * imagine a set of instances of the same entity class. Lets say that class has a field \"name\".\n * All of those instances each will have different \"specific\" identifiers for the field \"name\".\n *\n * In the same time, some properties are common for all \"specific\" identifiers, like [[Meta.equality|equality]], [[Meta.lazy|lazy]] etc.\n * Such properties, that does not change between every \"specific\" identifier we will call \"meta\" properties.\n *\n * This class has 2 generic arguments - `ValueT` and `ContextT`. The 1st one defines the type of the identifier's value.\n * The 2nd - the identifier's computation context (synchronous of generator).\n */\nexport class Meta extends Base {\n    constructor() {\n        super(...arguments);\n        /**\n         * The name of the identifiers. Not an id, does not imply uniqueness.\n         */\n        this.name = undefined;\n        /**\n         * Whether this identifier is lazy (`true`) or strict (`false`).\n         *\n         * Lazy identifiers are calculated on-demand (when read from graph or used by another identifiers).\n         *\n         * Strict identifiers will be calculated on read or during the [[ChronoGraph.commit|commit]] call.\n         */\n        this.lazy = false;\n        // no cancels\n        this.total = true;\n        // no \"nested\" writes\n        this.pure = true;\n        this.proposedValueIsBuilt = false;\n    }\n    /**\n     * The calculation function of the identifier. Its returning value has a generic type, that is converted to a specific type,\n     * based on the generic attribute `ContextT`.\n     *\n     * This function will receive a single argument - current calculation context (effects handler).\n     *\n     * When using generators, there's no need to use this handler - one can \"yield\" the value directly, using the `yield` construct.\n     *\n     * Compare:\n     *\n     *     class Author extends Entity.mix(Base) {\n     *         @field()\n     *         firstName       : string\n     *         @field()\n     *         lastName        : string\n     *         @field()\n     *         fullName        : string\n     *\n     *         @calculate('fullName')\n     *         * calculateFullName () : ChronoIterator<string> {\n     *             return (yield this.$.firstName) + ' ' + (yield this.$.lastName)\n     *         }\n     *\n     *         @calculate('fullName')\n     *         calculateFullName (Y) : string {\n     *             return Y(this.$.firstName) + ' ' + Y(this.$.lastName)\n     *         }\n     *     }\n     *\n     * @param Y\n     */\n    calculation(Y) {\n        throw new Error(\"Abstract method `calculation` called\");\n    }\n    /**\n     * The equality check of the identifier. By default is performed with `===`.\n     *\n     * @param v1 First value\n     * @param v2 Second value\n     */\n    equality(v1, v2) {\n        return v1 === v2;\n    }\n}\n__decorate([\n    prototypeValue(Levels.DependsOnSelfKind)\n], Meta.prototype, \"level\", void 0);\n__decorate([\n    prototypeValue(true)\n], Meta.prototype, \"sync\", void 0);\n//---------------------------------------------------------------------------------------------------------------------\n/**\n * The generic \"specific\" identifier class (see [[Meta]] for \"abstract\" properties). This class is generic in the sense that it does not\n * specify the type of the calculation function - it can be either synchronous or generator-based.\n *\n * It is also low-level and generally not supposed to be used directly in the application. Instead, one should\n * declare identifiers as fields (decorated class properties) in the [[Replica|replica]].\n */\nexport class Identifier extends Meta {\n    constructor() {\n        super(...arguments);\n        /**\n         * The scope (`this` value) for the calculation function.\n         */\n        this.context = undefined;\n        // flag to set during the `write` inside the `addIdentifier` call\n        this.isWritingUndefined = false;\n    }\n    newQuark(createdAt) {\n        // micro-optimization - we don't pass a config object to the `new` constructor\n        // but instead assign directly to instance\n        const newQuark = this.quarkClass.new();\n        newQuark.createdAt = createdAt;\n        newQuark.identifier = this;\n        newQuark.needToBuildProposedValue = this.proposedValueIsBuilt;\n        return newQuark;\n    }\n    write(me, transaction, quark, proposedValue, ...args) {\n        quark = quark || transaction.getWriteTarget(me);\n        quark.proposedValue = proposedValue;\n        quark.proposedArguments = args.length > 0 ? args : undefined;\n        quark.proposedIsPrevious = transaction.graph.isWritingPreviousData;\n    }\n    writeToTransaction(transaction, proposedValue, ...args) {\n        transaction.write(this, proposedValue, ...args);\n    }\n    /**\n     * Write a value to this identifier, in the context of `graph`.\n     *\n     * @param graph\n     * @param proposedValue\n     * @param args\n     */\n    writeToGraph(graph, proposedValue, ...args) {\n        graph.write(this, proposedValue, ...args);\n    }\n    /**\n     * Read the value of this identifier, in the context of `graph`, asynchronously\n     * @param graph\n     */\n    readFromGraphAsync(graph) {\n        return graph.readAsync(this);\n    }\n    /**\n     * Read the value of this identifier, in the context of `graph`, synchronously\n     * @param graph\n     */\n    readFromGraph(graph) {\n        return graph.read(this);\n    }\n    readFromTransaction(transaction) {\n        return transaction.read(this);\n    }\n    readFromTransactionAsync(transaction) {\n        return transaction.readAsync(this);\n    }\n    // readFromGraphDirtySync (graph : CheckoutI) : ValueT {\n    //     return graph.readDirty(this)\n    // }\n    buildProposedValue(me, quark, transaction) {\n        return undefined;\n    }\n    /**\n     * Template method, which is called, when this identifier \"enters\" the graph.\n     *\n     * @param graph\n     */\n    enterGraph(graph) {\n    }\n    /**\n     * Template method, which is called, when this identifier \"leaves\" the graph.\n     *\n     * @param graph\n     */\n    leaveGraph(graph) {\n    }\n}\n/**\n * Constructor for the [[Identifier]] class. Used only for typization purposes, to be able to specify the generics arguments.\n */\nexport const IdentifierC = (config) => Identifier.new(config);\n//@ts-ignore\nexport const QuarkSync = Quark.mix(CalculationSync.mix(Map));\n//@ts-ignore\nexport const QuarkGen = Quark.mix(CalculationGen.mix(Map));\n//---------------------------------------------------------------------------------------------------------------------\n/**\n * Variable is a subclass of [[Identifier]], that does not perform any calculation and instead is always equal to a user-provided value.\n * It is a bit more light-weight\n */\nexport class Variable extends Identifier {\n    calculation(YIELD) {\n        throw new Error(\"The 'calculation' method of the variables should never be called. Instead, the value will be set directly to quark\");\n    }\n    write(me, transaction, quark, proposedValue, ...args) {\n        quark = quark || transaction.getWriteTarget(me);\n        quark.value = proposedValue;\n        quark.proposedArguments = args.length > 0 ? args : undefined;\n    }\n}\n__decorate([\n    prototypeValue(Levels.UserInput)\n], Variable.prototype, \"level\", void 0);\n__decorate([\n    prototypeValue(QuarkSync)\n], Variable.prototype, \"quarkClass\", void 0);\n/**\n * Constructor for the [[Variable]] class. Used only for typization purposes.\n */\nexport function VariableC(...args) {\n    return Variable.new(...args);\n}\n//---------------------------------------------------------------------------------------------------------------------\n/**\n * Subclass of the [[Identifier]], representing synchronous computation.\n */\nexport class CalculatedValueSync extends Identifier {\n    calculation(YIELD) {\n        return YIELD(ProposedOrPrevious);\n    }\n}\n__decorate([\n    prototypeValue(QuarkSync)\n], CalculatedValueSync.prototype, \"quarkClass\", void 0);\n/**\n * Constructor for the [[CalculatedValueSync]] class. Used only for typization purposes.\n */\nexport function CalculatedValueSyncC(...args) {\n    return CalculatedValueSync.new(...args);\n}\n//---------------------------------------------------------------------------------------------------------------------\n/**\n * Subclass of the [[Identifier]], representing generator-based computation.\n */\nexport class CalculatedValueGen extends Identifier {\n    *calculation(YIELD) {\n        return yield ProposedOrPrevious;\n    }\n}\n__decorate([\n    prototypeValue(QuarkGen)\n], CalculatedValueGen.prototype, \"quarkClass\", void 0);\n/**\n * Constructor for the [[CalculatedValueGen]] class. Used only for typization purposes.\n */\nexport function CalculatedValueGenC(...args) {\n    return CalculatedValueGen.new(...args);\n}\n//---------------------------------------------------------------------------------------------------------------------\nexport const throwUnknownIdentifier = (identifier) => { throw new Error(`Unknown identifier ${identifier}`); };\n", "import { Base } from \"../class/Base.js\";\nimport { TombStone } from \"./Quark.js\";\nlet CLOCK = 0;\nexport class Revision extends Base {\n    constructor() {\n        super(...arguments);\n        this.createdAt = CLOCK++;\n        this.name = 'revision-' + this.createdAt;\n        this.previous = undefined;\n        this.scope = new Map();\n        this.reachableCount = 0;\n        this.referenceCount = 0;\n        this.selfDependent = new Set();\n    }\n    getLatestEntryFor(identifier) {\n        let revision = this;\n        while (revision) {\n            const entry = revision.scope.get(identifier);\n            if (entry)\n                return entry;\n            revision = revision.previous;\n        }\n        return null;\n    }\n    hasIdentifier(identifier) {\n        const latestEntry = this.getLatestEntryFor(identifier);\n        return Boolean(latestEntry && latestEntry.getValue() !== TombStone);\n    }\n    *previousAxis() {\n        let revision = this;\n        while (revision) {\n            yield revision;\n            revision = revision.previous;\n        }\n    }\n}\n", "import { MAX_SMI } from \"./Helpers.js\";\n// Leveled LIFO queue\nexport class LeveledQueue {\n    constructor() {\n        this.length = 0;\n        this.levels = [];\n        this.lowestLevel = MAX_SMI;\n    }\n    getLowestLevel() {\n        for (let i = this.lowestLevel !== MAX_SMI ? this.lowestLevel : 0; i < this.levels.length; i++) {\n            if (this.levels[i])\n                return this.lowestLevel = i;\n        }\n        return this.lowestLevel = MAX_SMI;\n    }\n    takeLowestLevel() {\n        for (let i = this.lowestLevel !== MAX_SMI ? this.lowestLevel : 0; i < this.levels.length; i++) {\n            const level = this.levels[i];\n            if (level) {\n                this.length -= level.length;\n                this.levels[i] = null;\n                this.lowestLevel = i + 1;\n                return level;\n            }\n        }\n    }\n    // resetCachedPosition () {\n    //     this.lowestLevel               = MAX_SMI\n    // }\n    // last () {\n    //     for (let i = this.lowestLevel !== MAX_SMI ? this.lowestLevel : 0; i < this.levels.length; i++) {\n    //         const level     = this.levels[ i ]\n    //\n    //         if (level && level.length > 0) {\n    //             this.lowestLevel   = i\n    //\n    //             return level[ level.length - 1 ]\n    //         }\n    //     }\n    // }\n    pop() {\n        for (let i = this.lowestLevel !== MAX_SMI ? this.lowestLevel : 0; i < this.levels.length; i++) {\n            const level = this.levels[i];\n            this.lowestLevel = i;\n            if (level && level.length > 0) {\n                this.length--;\n                return level.pop();\n            }\n        }\n        this.lowestLevel = MAX_SMI;\n    }\n    push(el) {\n        const elLevel = el.level;\n        let level = this.levels[elLevel];\n        if (!level) {\n            // avoid holes in the array\n            for (let i = this.levels.length; i < elLevel; i++)\n                this.levels[i] = null;\n            level = this.levels[elLevel] = [];\n        }\n        level.push(el);\n        this.length++;\n        if (elLevel < this.lowestLevel)\n            this.lowestLevel = elLevel;\n    }\n    *[Symbol.iterator]() {\n        for (let i = 0; i < this.levels.length; i++) {\n            const level = this.levels[i];\n            if (level)\n                yield* level;\n        }\n    }\n}\n", "import { Base } from \"../class/Base.js\";\nimport { NOT_VISITED, OnCycleAction, WalkContext } from \"../graph/WalkDepth.js\";\n//---------------------------------------------------------------------------------------------------------------------\nexport class ComputationCycle extends Base {\n    toString() {\n        const cycleIdentifiers = [];\n        const cycleEvents = [];\n        this.cycle.forEach(({ name, context }) => {\n            cycleIdentifiers.push(name);\n            if (cycleEvents[cycleEvents.length - 1] !== context)\n                cycleEvents.push(context);\n        });\n        return 'events: \\n' +\n            cycleEvents.map(event => '#' + event.id).join(' => ') +\n            '\\n\\nidentifiers: \\n' +\n            cycleIdentifiers.join('\\n');\n        // return this.cycle.map(identifier => {\n        //     return identifier.name\n        //     // //@ts-ignore\n        //     // const sourcePoint : SourceLinePoint      = identifier.SOURCE_POINT\n        //     //\n        //     // if (!sourcePoint) return identifier.name\n        //     //\n        //     // const firstEntry       = sourcePoint.stackEntries[ 0 ]\n        //     //\n        //     // if (firstEntry) {\n        //     //     return `${identifier}\\n    yielded at ${firstEntry.sourceFile}:${firstEntry.sourceLine}:${firstEntry.sourceCharPos || ''}`\n        //     // } else\n        //     //     return identifier.name\n        // }).join(' => \\n')\n    }\n}\n//---------------------------------------------------------------------------------------------------------------------\nexport class TransactionCycleDetectionWalkContext extends WalkContext {\n    constructor() {\n        // baseRevision    : Revision                  = undefined\n        super(...arguments);\n        this.transaction = undefined;\n    }\n    onCycle(node, stack) {\n        return OnCycleAction.Cancel;\n    }\n    doCollectNext(from, to, toVisit) {\n        let visit = this.visited.get(to);\n        if (!visit) {\n            visit = { visitedAt: NOT_VISITED, visitEpoch: this.currentEpoch };\n            this.visited.set(to, visit);\n        }\n        toVisit.push({ node: to, from, label: undefined });\n    }\n    collectNext(from, toVisit) {\n        const latestEntry = this.transaction.getLatestEntryFor(from);\n        if (latestEntry) {\n            latestEntry.outgoingInTheFutureTransactionCb(this.transaction, outgoingEntry => {\n                this.doCollectNext(from, outgoingEntry.identifier, toVisit);\n            });\n        }\n        // for (const outgoingIdentifier of visitInfo.getOutgoing().keys()) {\n        //     this.doCollectNext(from, outgoingIdentifier, toVisit)\n        // }\n    }\n}\n", "import { Base } from \"../class/Base.js\";\nimport { NOT_VISITED, OnCycleAction, VISITED_TOPOLOGICALLY } from \"../graph/WalkDepth.js\";\nimport { Levels } from \"./Identifier.js\";\n//---------------------------------------------------------------------------------------------------------------------\nexport class TransactionWalkDepth extends Base {\n    constructor() {\n        super(...arguments);\n        this.visited = new Map();\n        this.transaction = undefined;\n        this.baseRevision = undefined;\n        this.pushTo = undefined;\n        this.toVisit = [];\n        this.currentEpoch = 0;\n    }\n    startFrom(sourceNodes) {\n        this.continueFrom(sourceNodes);\n    }\n    continueFrom(sourceNodes) {\n        this.toVisit.push.apply(this.toVisit, sourceNodes);\n        this.walkDepth();\n    }\n    startNewEpoch() {\n        if (this.toVisit.length)\n            throw new Error(\"Can not start new walk epoch in the middle of the walk\");\n        this.currentEpoch++;\n    }\n    onTopologicalNode(identifier, visitInfo) {\n        if (!identifier.lazy && identifier.level !== Levels.UserInput)\n            this.pushTo.push(visitInfo);\n    }\n    onCycle(node, stack) {\n        return OnCycleAction.Resume;\n    }\n    // it is more efficient (=faster) to create new quarks for yet unvisited identifiers\n    // in batches, using this method, instead of in normal flow in the `walkDepth` method\n    // this is probably because of the CPU context switch between the `this.visited` and `this.baseRevision.getLatestEntryFor`\n    doCollectNext(from, to, toVisit) {\n        let quark = this.visited.get(to);\n        if (!quark) {\n            quark = to.newQuark(this.baseRevision);\n            quark.visitEpoch = this.currentEpoch;\n            this.visited.set(to, quark);\n        }\n        toVisit.push(to);\n    }\n    collectNext(from, toVisit, visitInfo) {\n        const latestEntry = this.baseRevision.getLatestEntryFor(from);\n        if (latestEntry) {\n            // since `collectNext` is called exactly once for every node, all quarks\n            // will have the `previous` property populated\n            visitInfo.previous = latestEntry;\n            latestEntry.outgoingInTheFutureAndPastTransactionCb(this.transaction, outgoingEntry => {\n                this.doCollectNext(from, outgoingEntry.identifier, toVisit);\n            });\n        }\n        for (const outgoingIdentifier of visitInfo.getOutgoing().keys()) {\n            this.doCollectNext(from, outgoingIdentifier, toVisit);\n        }\n        if (visitInfo.$outgoingPast !== undefined)\n            for (const outgoingIdentifier of visitInfo.getOutgoingPast().keys()) {\n                this.doCollectNext(from, outgoingIdentifier, toVisit);\n            }\n    }\n    walkDepth() {\n        const visited = this.visited;\n        const toVisit = this.toVisit;\n        let depth;\n        while (depth = toVisit.length) {\n            const node = toVisit[depth - 1];\n            let visitInfo = visited.get(node);\n            if (visitInfo && visitInfo.visitedAt === VISITED_TOPOLOGICALLY && visitInfo.visitEpoch === this.currentEpoch) {\n                visitInfo.edgesFlow++;\n                toVisit.pop();\n                continue;\n            }\n            if (visitInfo && visitInfo.visitEpoch === this.currentEpoch && visitInfo.visitedAt !== NOT_VISITED) {\n                // it is valid to find itself \"visited\", but only if visited at the current depth\n                // (which indicates stack unwinding)\n                // if the node has been visited at earlier depth - its a cycle\n                if (visitInfo.visitedAt < depth) {\n                    // ONLY resume if explicitly returned `Resume`, cancel in all other cases (undefined, etc)\n                    if (this.onCycle(node, toVisit) !== OnCycleAction.Resume)\n                        break;\n                    visitInfo.edgesFlow++;\n                }\n                else {\n                    visitInfo.visitedAt = VISITED_TOPOLOGICALLY;\n                    this.onTopologicalNode(node, visitInfo);\n                }\n                toVisit.pop();\n            }\n            else {\n                const lengthBefore = toVisit.length;\n                if (!visitInfo) {\n                    visitInfo = node.newQuark(this.baseRevision);\n                    visitInfo.visitEpoch = this.currentEpoch;\n                    visited.set(node, visitInfo);\n                }\n                this.collectNext(node, toVisit, visitInfo);\n                if (visitInfo.visitEpoch < this.currentEpoch) {\n                    visitInfo.resetToEpoch(this.currentEpoch);\n                }\n                visitInfo.visitedAt = depth;\n                visitInfo.edgesFlow++;\n                // if there's no outgoing edges, node is at topological position\n                // it would be enough to just continue the `while` loop and the `onTopologicalNode`\n                // would happen on next iteration, but with this \"inlining\" we save one call to `visited.get()`\n                // at the cost of length comparison\n                if (toVisit.length === lengthBefore) {\n                    visitInfo.visitedAt = VISITED_TOPOLOGICALLY;\n                    this.onTopologicalNode(node, visitInfo);\n                    toVisit.pop();\n                }\n            }\n        }\n    }\n}\n", "import { Base } from \"../class/Base.js\";\nimport { DEBUG } from \"../environment/Debug.js\";\nimport { cycleInfo, OnCycleAction } from \"../graph/WalkDepth.js\";\nimport { runGeneratorAsyncWithEffect, SynchronousCalculationStarted } from \"../primitives/Calculation.js\";\nimport { delay, isPromise, MAX_SMI } from \"../util/Helpers.js\";\nimport { LeveledQueue } from \"../util/LeveledQueue.js\";\nimport { BreakCurrentStackExecution, RejectEffect } from \"./Effect.js\";\nimport { Identifier, Levels, throwUnknownIdentifier } from \"./Identifier.js\";\nimport { EdgeType, TombStone } from \"./Quark.js\";\nimport { Revision } from \"./Revision.js\";\nimport { ComputationCycle, TransactionCycleDetectionWalkContext } from \"./TransactionCycleDetectionWalkContext.js\";\nimport { TransactionWalkDepth } from \"./TransactionWalkDepth.js\";\n//---------------------------------------------------------------------------------------------------------------------\n// weird stack overflow on 1300 deep benchmark, when using `EdgeType.Normal` w/o aliasing it to constant first\nexport const EdgeTypeNormal = EdgeType.Normal;\nexport const EdgeTypePast = EdgeType.Past;\n//---------------------------------------------------------------------------------------------------------------------\nexport class Transaction extends Base {\n    constructor() {\n        super(...arguments);\n        this.baseRevision = undefined;\n        this.candidateClass = Revision;\n        this.candidate = undefined;\n        this.graph = undefined;\n        this.isClosed = false;\n        this.walkContext = undefined;\n        this.entries = new Map();\n        // // we use 2 different stacks, because they support various effects\n        // stackSync               : LeveledQueue<Quark>  = new LeveledQueue()\n        // the `stackGen` supports async effects notably\n        this.stackGen = new LeveledQueue();\n        // is used for tracking the active quark entry (quark entry being computed)\n        this.activeStack = [];\n        this.onEffectSync = undefined;\n        this.onEffectAsync = undefined;\n        //---------------------\n        this.propagationStartDate = 0;\n        this.lastProgressNotificationDate = 0;\n        this.startProgressNotificationsAfterMs = 500;\n        this.emitProgressNotificationsEveryMs = 200;\n        this.emitProgressNotificationsEveryCalculations = 100;\n        this.plannedTotalIdentifiersToCalculate = 0;\n        // writes                  : WriteInfo[]           = []\n        this.ongoing = Promise.resolve();\n        this.selfDependedMarked = false;\n        this.rejectedWith = undefined;\n        this.stopped = false;\n        this.hasEntryWithProposedValue = false;\n        this.hasVariableEntry = false;\n    }\n    initialize(...args) {\n        super.initialize(...args);\n        this.walkContext = TransactionWalkDepth.new({\n            visited: this.entries,\n            transaction: this,\n            baseRevision: this.baseRevision,\n            pushTo: this.stackGen\n        });\n        if (!this.candidate)\n            this.candidate = this.candidateClass.new({ previous: this.baseRevision });\n        // the `onEffectSync` should be bound to the `yieldSync` of course, and `yieldSync` should look like:\n        //     yieldSync (effect : YieldableValue) : any {\n        //         if (effect instanceof Identifier) return this.read(effect)\n        //     }\n        // however, the latter consumes more stack frames - every read goes through `yieldSync`\n        // since `read` is the most used effect anyway, we bind `onEffectSync` to `read` and\n        // instead inside of `read` delegate to `yieldSync` for non-identifiers\n        this.onEffectSync = /*this.onEffectAsync =*/ this.read.bind(this);\n        this.onEffectAsync = this.readAsync.bind(this);\n    }\n    get dirty() {\n        return this.entries.size > 0;\n    }\n    markSelfDependent() {\n        if (this.selfDependedMarked)\n            return;\n        this.selfDependedMarked = true;\n        for (const selfDependentIden of this.baseRevision.selfDependent) {\n            const existing = this.entries.get(selfDependentIden);\n            if (existing && existing.getValue() === TombStone)\n                continue;\n            this.touch(selfDependentIden);\n        }\n    }\n    // onNewWrite () {\n    //     this.writes.forEach(writeInfo => {\n    //         const identifier    = writeInfo.identifier\n    //\n    //         identifier.write.call(identifier.context || identifier, identifier, this, null, ...writeInfo.proposedArgs)\n    //     })\n    //\n    //     this.writes.length = 0\n    // }\n    getActiveEntry() {\n        return this.activeStack[this.activeStack.length - 1];\n        // // `stackSync` is always empty, except when the synchronous \"batch\" is being processed\n        // const activeStack   = this.stackSync.length > 0 ? this.stackSync : this.stackGen\n        //\n        // return activeStack.last()\n    }\n    yieldAsync(effect) {\n        if (isPromise(effect))\n            return effect;\n        return this.graph[effect.handler](effect, this);\n    }\n    // see the comment for the `onEffectSync`\n    yieldSync(effect) {\n        if (isPromise(effect)) {\n            throw new Error(\"Can not yield a promise in the synchronous context\");\n        }\n        return this.graph[effect.handler](effect, this);\n    }\n    // this seems to be an optimistic version\n    readAsync(identifier) {\n        // see the comment for the `onEffectSync`\n        if (!(identifier instanceof Identifier))\n            return this.yieldAsync(identifier);\n        let entry;\n        const activeEntry = this.getActiveEntry();\n        if (activeEntry) {\n            entry = this.addEdge(identifier, activeEntry, EdgeTypeNormal);\n        }\n        else {\n            entry = this.entries.get(identifier);\n            if (!entry) {\n                const previousEntry = this.baseRevision.getLatestEntryFor(identifier);\n                if (!previousEntry)\n                    throwUnknownIdentifier(identifier);\n                entry = previousEntry.hasValue() ? previousEntry : this.touch(identifier);\n            }\n        }\n        if (entry.hasValue())\n            return entry.getValue();\n        if (entry.promise)\n            return entry.promise;\n        //----------------------\n        // now need to repeat the logic\n        if (!entry.previous || !entry.previous.hasValue())\n            entry.forceCalculation();\n        return this.ongoing = entry.promise = this.ongoing.then(() => {\n            return (async () => {\n                //----------------------\n                while (this.stackGen.lowestLevel < identifier.level) {\n                    await runGeneratorAsyncWithEffect(this.onEffectAsync, this.calculateTransitionsStackGen, [this.onEffectAsync, this.stackGen.takeLowestLevel()], this);\n                }\n                this.markSelfDependent();\n                // entry might be already calculated (in the `ongoing` promise), so no need to calculate it\n                if (entry.getValue() === undefined)\n                    return runGeneratorAsyncWithEffect(this.onEffectAsync, this.calculateTransitionsStackGen, [this.onEffectAsync, [entry]], this);\n            })();\n        }).then(() => {\n            if (this.rejectedWith)\n                throw new Error(`Transaction rejected: ${String(this.rejectedWith.reason)}`);\n            // we clear the promise in the `resetToEpoch` should be enough?\n            // entry.promise = undefined\n            if (!entry.hasValue())\n                throw new Error('Computation cycle. Sync');\n            return entry.getValue();\n        });\n    }\n    // `ignoreActiveEntry` should be used when the atom needs to be read outside the currently ongoing transaction context\n    // in such case we still might need to calculate the atom, but should ignore any currently active\n    // calculation of the another atom\n    get(identifier) {\n        // see the comment for the `onEffectSync`\n        if (!(identifier instanceof Identifier))\n            return this.yieldSync(identifier);\n        let entry;\n        const activeEntry = this.getActiveEntry();\n        if (activeEntry) {\n            entry = this.addEdge(identifier, activeEntry, EdgeTypeNormal);\n        }\n        else {\n            entry = this.entries.get(identifier);\n            if (!entry) {\n                const previousEntry = this.baseRevision.getLatestEntryFor(identifier);\n                if (!previousEntry)\n                    throwUnknownIdentifier(identifier);\n                entry = previousEntry.hasValue() ? previousEntry : this.touch(identifier);\n            }\n        }\n        const value1 = entry.getValue();\n        if (value1 === TombStone)\n            throwUnknownIdentifier(identifier);\n        // the `&& entry.hasValue()` part was added to allow KEEP_TRYING_TO_RESOLVE feature for references\n        if (value1 !== undefined && entry.hasValue())\n            return value1;\n        if (entry.promise)\n            return entry.promise;\n        //----------------------\n        // now need to repeat the logic\n        if (!entry.previous || !entry.previous.hasValue())\n            entry.forceCalculation();\n        //----------------------\n        while (this.stackGen.getLowestLevel() < identifier.level) {\n            // here we force the computations for lower level identifiers should be sync\n            this.calculateTransitionsStackSync(this.onEffectSync, this.stackGen.takeLowestLevel());\n        }\n        this.markSelfDependent();\n        if (identifier.sync) {\n            this.calculateTransitionsStackSync(this.onEffectSync, [entry]);\n            const value = entry.getValue();\n            if (value === undefined)\n                throw new Error('Cycle during synchronous computation');\n            if (value === TombStone)\n                throwUnknownIdentifier(identifier);\n            return value;\n        }\n        else {\n            const promise = this.ongoing = entry.promise = this.ongoing.then(() => {\n                // entry might be already calculated (in the `ongoing` promise), so no need to calculate it\n                if (entry.getValue() === undefined)\n                    return runGeneratorAsyncWithEffect(this.onEffectAsync, this.calculateTransitionsStackGen, [this.onEffectAsync, [entry]], this);\n            }).then(() => {\n                if (this.rejectedWith)\n                    throw new Error(`Transaction rejected: ${String(this.rejectedWith.reason)}`);\n                // we clear the promise in the `resetToEpoch` should be enough?\n                // entry.promise   = undefined\n                const value = entry.getValue();\n                if (value === undefined)\n                    throw new Error('Computation cycle. Async get');\n                if (value === TombStone)\n                    throwUnknownIdentifier(identifier);\n                return value;\n                // \n                // if (!entry.hasValue()) throw new Error('Computation cycle. Async get')\n                //\n                // return entry.getValue()\n            });\n            if (DEBUG) {\n                // @ts-ignore\n                promise.quark = entry;\n            }\n            return promise;\n            // return runGeneratorAsyncWithEffect(this.onEffectAsync, this.calculateTransitionsStackGen, [ this.onEffectAsync, [ entry ] ], this).then(() => {\n            //     const value     = entry.getValue()\n            //\n            //     \n            //     if (value === undefined) throw new Error('Cycle during synchronous computation')\n            //     if (value === TombStone) throwUnknownIdentifier(identifier)\n            //\n            //     return value\n            // })\n        }\n    }\n    // this seems to be an optimistic version\n    read(identifier) {\n        // see the comment for the `onEffectSync`\n        if (!(identifier instanceof Identifier))\n            return this.yieldSync(identifier);\n        let entry;\n        const activeEntry = this.getActiveEntry();\n        if (activeEntry) {\n            entry = this.addEdge(identifier, activeEntry, EdgeTypeNormal);\n        }\n        else {\n            entry = this.entries.get(identifier);\n            if (!entry) {\n                const previousEntry = this.baseRevision.getLatestEntryFor(identifier);\n                if (!previousEntry)\n                    throwUnknownIdentifier(identifier);\n                entry = previousEntry.hasValue() ? previousEntry : this.touch(identifier);\n            }\n        }\n        const value1 = entry.getValue();\n        if (value1 === TombStone)\n            throwUnknownIdentifier(identifier);\n        if (value1 !== undefined)\n            return value1;\n        // if (!identifier.sync) throw new Error(\"Can not calculate asynchronous identifier synchronously\")\n        // now need to repeat the logic\n        if (!entry.previous || !entry.previous.hasValue())\n            entry.forceCalculation();\n        //----------------------\n        while (this.stackGen.getLowestLevel() < identifier.level) {\n            this.calculateTransitionsStackSync(this.onEffectSync, this.stackGen.takeLowestLevel());\n        }\n        //----------------------\n        this.markSelfDependent();\n        this.calculateTransitionsStackSync(this.onEffectSync, [entry]);\n        const value = entry.getValue();\n        if (value === undefined)\n            throw new Error('Cycle during synchronous computation');\n        if (value === TombStone)\n            throwUnknownIdentifier(identifier);\n        return value;\n    }\n    // semantic is actually - read the most-fresh value\n    readCurrentOrProposedOrPrevious(identifier) {\n        const dirtyQuark = this.entries.get(identifier);\n        if (dirtyQuark) {\n            const value = dirtyQuark.getValue();\n            if (value !== undefined)\n                return value;\n            if (dirtyQuark.proposedValue !== undefined)\n                return dirtyQuark.proposedValue;\n        }\n        return this.readPrevious(identifier);\n    }\n    readCurrentOrProposedOrPreviousAsync(identifier) {\n        const dirtyQuark = this.entries.get(identifier);\n        if (dirtyQuark) {\n            const value = dirtyQuark.getValue();\n            if (value !== undefined)\n                return value;\n            if (dirtyQuark.proposedValue !== undefined)\n                return dirtyQuark.proposedValue;\n        }\n        return this.readPreviousAsync(identifier);\n    }\n    readPrevious(identifier) {\n        const previousEntry = this.baseRevision.getLatestEntryFor(identifier);\n        if (!previousEntry)\n            return undefined;\n        const value = previousEntry.getValue();\n        return value !== TombStone ? (value === undefined && identifier.lazy ? this.read(identifier) : value) : undefined;\n    }\n    readPreviousAsync(identifier) {\n        const previousEntry = this.baseRevision.getLatestEntryFor(identifier);\n        if (!previousEntry)\n            return undefined;\n        const value = previousEntry.getValue();\n        return value !== TombStone ? (value !== undefined ? value : this.readAsync(identifier)) : undefined;\n    }\n    readProposedOrPrevious(identifier) {\n        const dirtyQuark = this.entries.get(identifier);\n        if (dirtyQuark && dirtyQuark.proposedValue !== undefined) {\n            return dirtyQuark.proposedValue;\n        }\n        else {\n            return this.readPrevious(identifier);\n        }\n    }\n    readProposedOrPreviousAsync(identifier) {\n        const dirtyQuark = this.entries.get(identifier);\n        if (dirtyQuark && dirtyQuark.proposedValue !== undefined) {\n            return dirtyQuark.proposedValue;\n        }\n        else {\n            return this.readPreviousAsync(identifier);\n        }\n    }\n    write(identifier, proposedValue, ...args) {\n        if (proposedValue === undefined)\n            proposedValue = null;\n        // this.writes.push(WriteEffect.new({\n        //     identifier      : identifier,\n        //     proposedArgs    : [ proposedValue, ...args ]\n        // }))\n        //\n        // this.onNewWrite()\n        identifier.write.call(identifier.context || identifier, identifier, this, null, /*this.getWriteTarget(identifier),*/ proposedValue, ...args);\n        const entry = this.entries.get(identifier);\n        this.hasVariableEntry = this.hasVariableEntry || (!entry.isShadow() && identifier.level === Levels.UserInput);\n        this.hasEntryWithProposedValue = this.hasEntryWithProposedValue || entry.hasProposedValue();\n    }\n    // acquireQuark<T extends Identifier> (identifier : T) : InstanceType<T[ 'quarkClass' ]> {\n    //     return this.touch(identifier).startOrigin() as InstanceType<T[ 'quarkClass' ]>\n    // }\n    getWriteTarget(identifier) {\n        return this.touch(identifier).startOrigin();\n    }\n    // return quark if it exists and is non-shadowing, otherwise undefined\n    acquireQuarkIfExists(identifier) {\n        const entry = this.entries.get(identifier);\n        return entry && entry.origin === entry ? entry.origin : undefined;\n    }\n    touch(identifier) {\n        const existingEntry = this.entries.get(identifier);\n        if (!existingEntry || existingEntry.visitEpoch < this.walkContext.currentEpoch)\n            this.walkContext.continueFrom([identifier]);\n        const entry = existingEntry || this.entries.get(identifier);\n        entry.forceCalculation();\n        return entry;\n    }\n    // touchInvalidate (identifier : Identifier) : Quark {\n    //     const existingEntry         = this.entries.get(identifier)\n    //\n    //     if (existingEntry && existingEntry.hasValue()) {\n    //         this.walkContext.startNewEpoch()\n    //     }\n    //\n    //     if (!existingEntry || existingEntry.visitEpoch < this.walkContext.currentEpoch) this.walkContext.continueFrom([ identifier ])\n    //\n    //     const entry                 = existingEntry || this.entries.get(identifier)\n    //\n    //     entry.forceCalculation()\n    //\n    //     return entry\n    // }\n    hasIdentifier(identifier) {\n        const activeEntry = this.entries.get(identifier);\n        if (activeEntry && activeEntry.getValue() === TombStone)\n            return false;\n        return Boolean(activeEntry || this.baseRevision.getLatestEntryFor(identifier));\n    }\n    // this is actually an optimized version of `write`, which skips the graph walk phase\n    // (since the identifier is assumed to be new, there should be no dependent quarks)\n    addIdentifier(identifier, proposedValue, ...args) {\n        // however, the identifier may be already in the transaction, for example if the `write` method\n        // of some other identifier writes to this identifier\n        let entry = this.entries.get(identifier);\n        const alreadyHadEntry = Boolean(entry);\n        const isVariable = identifier.level === Levels.UserInput;\n        if (!entry) {\n            entry = identifier.newQuark(this.baseRevision);\n            entry.previous = this.baseRevision.getLatestEntryFor(identifier);\n            entry.forceCalculation();\n            this.entries.set(identifier, entry);\n            if (!identifier.lazy && !isVariable)\n                this.stackGen.push(entry);\n            this.hasVariableEntry = this.hasVariableEntry || (!entry.isShadow() && isVariable);\n            this.hasEntryWithProposedValue = this.hasEntryWithProposedValue || entry.hasProposedValue();\n        }\n        if (proposedValue !== undefined || isVariable) {\n            entry.startOrigin();\n            // we should not write if there's already an entry with some values (and we are trying to add it again)\n            // this means there were some other identifier that has written into this one even before it was added\n            // (probably in its `write` method)\n            const shouldNotWrite = alreadyHadEntry && (entry.proposedValue !== undefined || entry.value !== undefined);\n            // however, if that entry contain TombStone marks, we should always write - means we are\n            // actually re-adding the identifier, which has been removed in the same transaction\n            if (!shouldNotWrite || entry.proposedValue === TombStone || entry.value === TombStone) {\n                identifier.isWritingUndefined = proposedValue === undefined;\n                identifier.write.call(identifier.context || identifier, identifier, this, entry, proposedValue === undefined && isVariable ? null : proposedValue, ...args);\n                identifier.isWritingUndefined = false;\n            }\n        }\n        // if we are re-adding the same identifier in the same transaction, clear the TombStone flag\n        if (entry.getValue() === TombStone)\n            entry.value = undefined;\n        if (entry.proposedValue === TombStone)\n            entry.proposedValue = undefined;\n        identifier.enterGraph(this.graph);\n        return entry;\n    }\n    removeIdentifier(identifier) {\n        identifier.leaveGraph(this.graph);\n        const entry = this.touch(identifier).startOrigin();\n        entry.setValue(TombStone);\n        // removing the identifier from self-dependent, otherwise there will be an attempt to evaluate it\n        this.candidate.selfDependent.delete(identifier);\n    }\n    populateCandidateScopeFromTransitions(candidate, scope) {\n        if (candidate.scope.size === 0) {\n            // in this branch we can overwrite the whole map\n            candidate.scope = scope;\n        }\n        else {\n            // in this branch candidate's scope already has some content - this is the case for calculating lazy values\n            // \n            // entries.forEach((entry : QuarkEntry, identifier : Identifier) => {\n            //     candidate.scope.set(identifier, entry)\n            // })\n            for (const [identifier, quark] of scope) {\n                if (quark.isShadow()) {\n                    const latestEntry = candidate.getLatestEntryFor(identifier);\n                    // and we iterate over the edges from \"origin\" anyway\n                    quark.getOutgoing().forEach((toQuark, toIdentifier) => latestEntry.getOutgoing().set(toIdentifier, toQuark));\n                }\n                else {\n                    candidate.scope.set(identifier, quark);\n                }\n            }\n        }\n    }\n    preCommit(args) {\n        if (this.isClosed)\n            throw new Error('Can not propagate closed revision');\n        this.markSelfDependent();\n        this.isClosed = true;\n        this.propagationStartDate = Date.now();\n        this.plannedTotalIdentifiersToCalculate = this.stackGen.length;\n    }\n    postCommit() {\n        this.populateCandidateScopeFromTransitions(this.candidate, this.entries);\n        // won't be available after next line\n        const entries = this.entries;\n        // for some reason need to cleanup the `walkContext` manually, otherwise the extra revisions hangs in memory\n        this.walkContext = undefined;\n        return { revision: this.candidate, entries, transaction: this };\n    }\n    commit(args) {\n        this.preCommit(args);\n        this.calculateTransitionsSync(this.onEffectSync);\n        // runGeneratorSyncWithEffect(this.onEffectSync, this.calculateTransitionsStackGen, [ this.onEffectSync, stack ], this)\n        return this.postCommit();\n    }\n    reject(rejection = RejectEffect.new()) {\n        this.rejectedWith = rejection;\n        this.walkContext = undefined;\n    }\n    // stops the calculations, but does not reject\n    stop() {\n        this.stopped = true;\n    }\n    clearRejected() {\n        for (const quark of this.entries.values()) {\n            quark.cleanup();\n            // quark.clearOutgoing()\n        }\n        this.entries.clear();\n    }\n    // // propagation that does not use generators at all\n    // propagateSync (args? : PropagateArguments) : TransactionPropagateResult {\n    //     const stack = this.prePropagate(args)\n    //\n    //     this.calculateTransitionsStackSync(this.onEffectSync, stack)\n    //     // runGeneratorSyncWithEffect(this.onEffectSync, this.calculateTransitionsStackGen, [ this.onEffectSync, stack ], this)\n    //\n    //     return this.postPropagate()\n    // }\n    async commitAsync(args) {\n        this.preCommit(args);\n        return this.ongoing = this.ongoing.then(() => {\n            return runGeneratorAsyncWithEffect(this.onEffectAsync, this.calculateTransitions, [this.onEffectAsync], this);\n        }).then(() => {\n            return this.postCommit();\n        });\n        // await runGeneratorAsyncWithEffect(this.onEffectAsync, this.calculateTransitions, [ this.onEffectAsync ], this)\n        //\n        // return this.postCommit()\n    }\n    getLatestEntryFor(identifier) {\n        let entry = this.entries.get(identifier) || this.baseRevision.getLatestEntryFor(identifier);\n        if (entry && entry.getValue() === TombStone)\n            return undefined;\n        return entry;\n    }\n    // check the transaction \"entries\" first, but only return an entry\n    // from that, if it is already calculated, otherwise - take it\n    // from the base revision\n    getLatestStableEntryFor(identifier) {\n        let entry = this.entries.get(identifier);\n        if (entry) {\n            const value = entry.getValue();\n            if (value === TombStone)\n                return undefined;\n            return value === undefined ? this.baseRevision.getLatestEntryFor(identifier) : entry;\n        }\n        else {\n            return this.baseRevision.getLatestEntryFor(identifier);\n        }\n    }\n    addEdge(identifierRead, activeEntry, type) {\n        const identifier = activeEntry.identifier;\n        if (identifier.level < identifierRead.level)\n            throw new Error('Identifier can not read from higher level identifier');\n        let entry = this.entries.get(identifierRead);\n        // creating \"shadowing\" entry, to store the new edges\n        if (!entry) {\n            const previousEntry = this.baseRevision.getLatestEntryFor(identifierRead);\n            if (!previousEntry)\n                throwUnknownIdentifier(identifierRead);\n            entry = identifierRead.newQuark(this.baseRevision);\n            entry.setOrigin(previousEntry);\n            entry.previous = previousEntry;\n            this.entries.set(identifierRead, entry);\n        }\n        entry.addOutgoingTo(activeEntry, type);\n        return entry;\n    }\n    onQuarkCalculationCompleted(entry, value) {\n        // cleanup the iterator\n        entry.cleanup();\n        const identifier = entry.identifier;\n        const previousEntry = entry.previous;\n        //--------------------\n        const sameAsPrevious = Boolean(previousEntry && previousEntry.hasValue() && identifier.equality(value, previousEntry.getValue()));\n        if (sameAsPrevious) {\n            previousEntry.outgoingInTheFutureAndPastTransactionCb(this, previousOutgoingEntry => {\n                const outgoingEntry = this.entries.get(previousOutgoingEntry.identifier);\n                if (outgoingEntry)\n                    outgoingEntry.edgesFlow--;\n            });\n            // this is a \"workaround\" for the following problem:\n            // there might be several copies of the same quark in the calculation stack, this is normal\n            // because if quark is requested by some other quark it is just pushed to the stack,\n            // which may already contain this quark\n            // then when the quark is calculated (this code) it propagates the `edgesFlow` decrease\n            // but next time it will be encountered in the stack, its `edgesFlow` might be decreased by other\n            // identifiers, which will trigger another round of `edgesFlow` decrease propagation\n            // so we set the `edgesFlow` to MAX_SMI after decrease been propagated to prevent repeated such propagation\n            entry.edgesFlow = MAX_SMI;\n            entry.setOrigin(previousEntry.origin);\n            // seems not needed anymore?\n            // this is to indicate that this entry should be recalculated (origin removed)\n            // see `resetToEpoch`\n            entry.value = value;\n        }\n        else {\n            entry.startOrigin();\n            entry.setValue(value);\n        }\n        //--------------------\n        let ignoreSelfDependency = false;\n        if (entry.usedProposedOrPrevious) {\n            if (entry.proposedValue !== undefined) {\n                if (identifier.equality(value, entry.proposedValue))\n                    ignoreSelfDependency = true;\n            }\n            else {\n                // ignore the uninitialized atoms (`proposedValue` === undefined && !previousEntry)\n                // which has been calculated to `null` - we don't consider this as a change\n                if (sameAsPrevious || (!previousEntry && value === null))\n                    ignoreSelfDependency = true;\n            }\n            if (!ignoreSelfDependency)\n                this.candidate.selfDependent.add(identifier);\n        }\n    }\n    onReadIdentifier(identifierRead, activeEntry, stack) {\n        const requestedEntry = this.addEdge(identifierRead, activeEntry, EdgeTypeNormal);\n        // this is a workaround for references with failed resolution problem in gantt\n        // those references return `hasValue() === false` even that they actually have value\n        // (which is `null` and needed to be recalculated)\n        if (requestedEntry.hasValue() || requestedEntry.value !== undefined) {\n            const value = requestedEntry.getValue();\n            if (value === TombStone)\n                throwUnknownIdentifier(identifierRead);\n            return activeEntry.continueCalculation(value);\n        }\n        else if (requestedEntry.isShadow()) {\n            // shadow entry is shadowing a quark w/o value - it is still transitioning or lazy\n            // in both cases start new calculation\n            requestedEntry.startOrigin();\n            requestedEntry.forceCalculation();\n            stack.push(requestedEntry);\n            return undefined;\n        }\n        else {\n            if (!requestedEntry.isCalculationStarted()) {\n                stack.push(requestedEntry);\n                if (!requestedEntry.previous || !requestedEntry.previous.hasValue())\n                    requestedEntry.forceCalculation();\n                return undefined;\n            }\n            else {\n                // cycle - the requested quark has started calculation (means it was encountered in the calculation loop before)\n                // but the calculation did not complete yet (even that requested quark is calculated before the current)\n                let cycle;\n                const walkContext = TransactionCycleDetectionWalkContext.new({\n                    transaction: this,\n                    onCycle(node, stack) {\n                        cycle = ComputationCycle.new({\n                            cycle: cycleInfo(stack),\n                            requestedEntry,\n                            activeEntry,\n                        });\n                        return OnCycleAction.Cancel;\n                    }\n                });\n                walkContext.startFrom([requestedEntry.identifier]);\n                return cycle;\n            }\n        }\n    }\n    *calculateTransitions(context) {\n        const queue = this.stackGen;\n        while (queue.length) {\n            // some identifiers from the queue??\n            yield* this.calculateTransitionsStackGen(context, queue.takeLowestLevel());\n        }\n    }\n    calculateTransitionsSync(context) {\n        const queue = this.stackGen;\n        while (queue.length) {\n            this.calculateTransitionsStackSync(context, queue.takeLowestLevel());\n        }\n    }\n    // this method is not decomposed into smaller ones intentionally, as that makes benchmarks worse\n    // it seems that overhead of calling few more functions in such tight loop as this outweighs the optimization\n    *calculateTransitionsStackGen(context, stack) {\n        if (this.rejectedWith || this.stopped)\n            return;\n        this.walkContext.startNewEpoch();\n        const entries = this.entries;\n        const propagationStartDate = this.propagationStartDate;\n        const enableProgressNotifications = this.graph ? this.graph.enableProgressNotifications : false;\n        let counter = 0;\n        const prevActiveStack = this.activeStack;\n        this.activeStack = stack;\n        while (stack.length && !this.rejectedWith && !this.stopped) {\n            if (enableProgressNotifications && !(counter++ % this.emitProgressNotificationsEveryCalculations)) {\n                const now = Date.now();\n                const elapsed = now - propagationStartDate;\n                if (elapsed > this.startProgressNotificationsAfterMs) {\n                    const lastProgressNotificationDate = this.lastProgressNotificationDate;\n                    if (!lastProgressNotificationDate || (now - lastProgressNotificationDate) > this.emitProgressNotificationsEveryMs) {\n                        this.lastProgressNotificationDate = now;\n                        this.graph.onPropagationProgressNotification({\n                            total: this.plannedTotalIdentifiersToCalculate,\n                            remaining: this.stackGen.length + stack.length,\n                            phase: 'propagating'\n                        });\n                        // need to \"exit\" the context of the current transaction for the time of the following `delay()`\n                        // otherwise, any reads from graph during that time will be recorded as the dependencies\n                        // of the currently active atom\n                        this.activeStack = prevActiveStack;\n                        yield delay(0);\n                        this.activeStack = stack;\n                    }\n                }\n            }\n            if (this.rejectedWith || this.stopped)\n                break;\n            const entry = stack[stack.length - 1];\n            const identifier = entry.identifier;\n            const ownEntry = entries.get(identifier);\n            if (ownEntry !== entry) {\n                entry.cleanup();\n                stack.pop();\n                continue;\n            }\n            if (entry.edgesFlow == 0) {\n                // even if we delete the entry there might be other copies in stack, so reduce the `edgesFlow` to -1\n                // to indicate that those are already processed\n                entry.edgesFlow--;\n                const previousEntry = entry.previous;\n                previousEntry && previousEntry.outgoingInTheFutureAndPastTransactionCb(this, outgoing => {\n                    const outgoingEntry = entries.get(outgoing.identifier);\n                    if (outgoingEntry)\n                        outgoingEntry.edgesFlow--;\n                });\n            }\n            // the \"edgesFlow < 0\" indicates that none of the incoming deps of this quark has changed\n            // thus we don't need to calculate it, moreover, we can remove the quark from the `entries`\n            // to expose the value from the previous revision\n            // however, we only do it, when there is a quark from previous revision and it has \"origin\" (some value)\n            if (entry.edgesFlow < 0 && entry.previous && entry.previous.origin) {\n                // even if the entry will be deleted from the transaction, we set the correct origin for it\n                // this is because there might be other references to this entry in the stack\n                // and also the entry may be referenced as dependency of some other quark\n                // in such case the correct `originId` will preserve dependency during revisions compactification\n                entry.setOrigin(entry.previous.origin);\n                // if there's no outgoing edges we remove the quark\n                if (entry.size === 0) {\n                    entries.delete(identifier);\n                }\n                // reduce garbage collection workload\n                entry.cleanup();\n                stack.pop();\n                continue;\n            }\n            if ( /*entry.isShadow() ||*/entry.hasValue() || entry.proposedValue === TombStone) {\n                entry.cleanup();\n                stack.pop();\n                continue;\n            }\n            const startedAtEpoch = entry.visitEpoch;\n            let iterationResult = entry.isCalculationStarted() ? entry.iterationResult : entry.startCalculation(this.onEffectSync);\n            while (iterationResult && !this.rejectedWith && !this.stopped) {\n                const value = iterationResult.value === undefined ? null : iterationResult.value;\n                if (entry.isCalculationCompleted()) {\n                    if (entry.visitEpoch == startedAtEpoch) {\n                        this.onQuarkCalculationCompleted(entry, value);\n                    }\n                    stack.pop();\n                    break;\n                }\n                else if (value instanceof Identifier) {\n                    const onReadIdentifierResult = this.onReadIdentifier(value, entry, stack);\n                    // handle the cycle\n                    if (onReadIdentifierResult instanceof ComputationCycle) {\n                        this.walkContext.startNewEpoch();\n                        yield* this.graph.onComputationCycleHandler(onReadIdentifierResult);\n                        entry.cleanupCalculation();\n                        iterationResult = undefined;\n                    }\n                    else {\n                        iterationResult = onReadIdentifierResult;\n                    }\n                }\n                else if (value === SynchronousCalculationStarted) {\n                    // the fact, that we've encountered `SynchronousCalculationStarted` constant can mean 2 things:\n                    // 1) there's a cycle during synchronous computation (we throw exception in `read` method)\n                    // 2) some other computation is reading synchronous computation, that has already started\n                    //    in such case its safe to just unwind the stack\n                    stack.pop();\n                    break;\n                }\n                else {\n                    // bypass the unrecognized effect to the outer context\n                    const effectResult = yield value;\n                    // the calculation can be interrupted (`cleanupCalculation`) as a result of the effect (WriteEffect)\n                    // in such case we can not continue calculation and just exit the inner loop\n                    if (effectResult === BreakCurrentStackExecution)\n                        break;\n                    // // the calculation can be interrupted (`cleanupCalculation`) as a result of the effect (WriteEffect)\n                    // // in such case we can not continue calculation and just exit the inner loop\n                    // if (entry.iterationResult)\n                    if (entry.visitEpoch === startedAtEpoch) {\n                        iterationResult = entry.continueCalculation(effectResult);\n                    }\n                    else {\n                        stack.pop();\n                        break;\n                    }\n                    // else\n                    //     iterationResult         = null\n                }\n            }\n        }\n        this.activeStack = prevActiveStack;\n    }\n    // THIS METHOD HAS TO BE KEPT SYNCED WITH THE `calculateTransitionsStackGen` !!!\n    calculateTransitionsStackSync(context, stack) {\n        if (this.rejectedWith || this.stopped)\n            return;\n        this.walkContext.startNewEpoch();\n        const entries = this.entries;\n        const prevActiveStack = this.activeStack;\n        this.activeStack = stack;\n        while (stack.length && !this.rejectedWith && !this.stopped) {\n            const entry = stack[stack.length - 1];\n            const identifier = entry.identifier;\n            const ownEntry = entries.get(identifier);\n            if (ownEntry !== entry) {\n                entry.cleanup();\n                stack.pop();\n                continue;\n            }\n            if (entry.edgesFlow == 0) {\n                // even if we delete the entry there might be other copies in stack, so reduce the `edgesFlow` to -1\n                // to indicate that those are already processed\n                entry.edgesFlow--;\n                const previousEntry = entry.previous;\n                previousEntry && previousEntry.outgoingInTheFutureAndPastTransactionCb(this, outgoing => {\n                    const outgoingEntry = entries.get(outgoing.identifier);\n                    if (outgoingEntry)\n                        outgoingEntry.edgesFlow--;\n                });\n            }\n            // the \"edgesFlow < 0\" indicates that none of the incoming deps of this quark has changed\n            // thus we don't need to calculate it, moreover, we can remove the quark from the `entries`\n            // to expose the value from the previous revision\n            // however, we only do it, when there is a quark from previous revision and it has \"origin\" (some value)\n            if (entry.edgesFlow < 0 && entry.previous && entry.previous.origin) {\n                // even if the entry will be deleted from the transaction, we set the correct origin for it\n                // this is because there might be other references to this entry in the stack\n                // and also the entry may be referenced as dependency of some other quark\n                // in such case the correct `originId` will preserve dependency during revisions compactification\n                entry.setOrigin(entry.previous.origin);\n                // if there's no outgoing edges we remove the quark\n                if (entry.size === 0) {\n                    entries.delete(identifier);\n                }\n                // reduce garbage collection workload\n                entry.cleanup();\n                stack.pop();\n                continue;\n            }\n            if ( /*entry.isShadow() ||*/entry.hasValue() || entry.proposedValue === TombStone) {\n                entry.cleanup();\n                stack.pop();\n                continue;\n            }\n            const startedAtEpoch = entry.visitEpoch;\n            let iterationResult = entry.isCalculationStarted() ? entry.iterationResult : entry.startCalculation(this.onEffectSync);\n            while (iterationResult && !this.rejectedWith && !this.stopped) {\n                const value = iterationResult.value === undefined ? null : iterationResult.value;\n                if (entry.isCalculationCompleted()) {\n                    if (entry.visitEpoch == startedAtEpoch) {\n                        this.onQuarkCalculationCompleted(entry, value);\n                    }\n                    stack.pop();\n                    break;\n                }\n                else if (value instanceof Identifier) {\n                    const onReadIdentifierResult = this.onReadIdentifier(value, entry, stack);\n                    // handle the cycle\n                    if (onReadIdentifierResult instanceof ComputationCycle) {\n                        this.walkContext.startNewEpoch();\n                        this.graph.onComputationCycleHandlerSync(onReadIdentifierResult, this);\n                        entry.cleanupCalculation();\n                        iterationResult = undefined;\n                    }\n                    else {\n                        iterationResult = onReadIdentifierResult;\n                    }\n                }\n                else if (value === SynchronousCalculationStarted) {\n                    // the fact, that we've encountered `SynchronousCalculationStarted` constant can mean 2 things:\n                    // 1) there's a cycle during synchronous computation (we throw exception in `read` method)\n                    // 2) some other computation is reading synchronous computation, that has already started\n                    //    in such case its safe to just unwind the stack\n                    stack.pop();\n                    break;\n                }\n                else {\n                    // bypass the unrecognized effect to the outer context\n                    const effectResult = context(value);\n                    if (isPromise(effectResult))\n                        throw new Error(\"Effect resolved to promise in the synchronous context, check that you marked the asynchronous calculations accordingly\");\n                    // the calculation can be interrupted (`cleanupCalculation`) as a result of the effect (WriteEffect)\n                    // in such case we can not continue calculation and just exit the inner loop\n                    if (effectResult === BreakCurrentStackExecution)\n                        break;\n                    // // the calculation can be interrupted (`cleanupCalculation`) as a result of the effect (WriteEffect)\n                    // // in such case we can not continue calculation and just exit the inner loop\n                    // if (entry.iterationResult)\n                    if (entry.visitEpoch === startedAtEpoch) {\n                        iterationResult = entry.continueCalculation(effectResult);\n                    }\n                    else {\n                        stack.pop();\n                        break;\n                    }\n                    // else\n                    //     iterationResult         = null\n                }\n            }\n        }\n        this.activeStack = prevActiveStack;\n    }\n}\n", "import { Base } from \"../class/Base.js\";\nimport { concat } from \"../collection/Iterator.js\";\nimport { warn } from \"../environment/Debug.js\";\nimport { copySetInto, isGeneratorFunction } from \"../util/Helpers.js\";\nimport { BreakCurrentStackExecution, HasProposedNotPreviousValueSymbol, HasProposedValueSymbol, OwnIdentifierSymbol, OwnQuarkSymbol, PreviousValueOfSymbol, ProposedArgumentsOfSymbol, ProposedOrPreviousSymbol, ProposedOrPreviousValueOfSymbol, ProposedValueOfSymbol, RejectEffect, RejectSymbol, TransactionSymbol, UnsafePreviousValueOfSymbol, UnsafeProposedOrPreviousValueOfSymbol, WriteSeveralSymbol, WriteSymbol } from \"./Effect.js\";\nimport { CalculatedValueGen, CalculatedValueGenC, CalculatedValueSyncC, VariableC } from \"./Identifier.js\";\nimport { TombStone } from \"./Quark.js\";\nimport { Revision } from \"./Revision.js\";\nimport { EdgeTypePast, Transaction } from \"./Transaction.js\";\n/**\n * A constant which will be used a commit result, when graph is not available.\n */\nexport const CommitZero = {\n    rejectedWith: null\n};\n//---------------------------------------------------------------------------------------------------------------------\nexport class Listener extends Base {\n    constructor() {\n        super(...arguments);\n        this.handlers = [];\n    }\n    trigger(value) {\n        for (let i = 0; i < this.handlers.length; i++)\n            this.handlers[i](value);\n    }\n}\n//---------------------------------------------------------------------------------------------------------------------\n/**\n * Generic reactive graph. Consists from [[Identifier]]s, depending on each other. This is a low-level representation\n * of the ChronoGraph dataset, it is not \"aware\" of the entity/relation framework and operates as \"just graph\".\n *\n * For higher-level (and more convenient) representation, please refer to [[Replica]].\n *\n * An example of usage:\n *\n *     const graph      = ChronoGraph.new({ historyLimit : 10 })\n *\n *     const var1       = graph.variable(1)\n *     const var2       = graph.variable(2)\n *     const iden1      = graph.identifier((Y) => Y(var1) + Y(var2))\n *\n *     graph.read(iden1) // 3\n *\n *     graph.commit()\n *\n *     graph.write(var1, 2)\n *\n *     graph.read(iden1) // 4\n *\n *     graph.reject()\n *\n *     graph.read(var1) // 1\n *     graph.read(iden1) // 3\n *\n */\nexport class ChronoGraph extends Base {\n    constructor() {\n        super(...arguments);\n        this.baseRevisionStable = undefined;\n        this.baseRevisionTentative = undefined;\n        this.baseRevision = Revision.new();\n        // the revision to follow to, when performing `redo` operation\n        this.topRevision = undefined;\n        /**\n         * Integer value, indicating how many transactions to keep in memory, to be available for [[undo]] call.\n         * Default value is 0 - previous transaction is cleared immediately.\n         *\n         * Increase this config to opt-in for the [[undo]]/[[redo]] functionality.\n         */\n        this.historyLimit = 0;\n        this.listeners = new Map();\n        // this flag is set when the data being written to the graph is \"undo/redo\" data\n        // in such case, we shouldn't treat it as user input, but instead as a side-effect free\n        // state restoration\n        // this flag is used in the CycleResolverChrono and in general is engine specific\n        this.isWritingPreviousData = false;\n        this.$activeTransaction = undefined;\n        this.isCommitting = false;\n        this.enableProgressNotifications = false;\n        this.ongoing = Promise.resolve();\n        this._isInitialCommit = true;\n        //-------------------------------------\n        // a \"cross-platform\" trick to avoid specifying the type of the `autoCommitTimeoutId` explicitly\n        this.autoCommitTimeoutId = null;\n        /**\n         * If this option is enabled with `true` value, all data modification calls ([[write]], [[addIdentifier]], [[removeIdentifier]]) will trigger\n         * a delayed [[commit]] call (or [[commitAsync]], depending from the [[autoCommitMode]] option).\n         */\n        this.autoCommit = false;\n        /**\n         * Indicates the default commit mode, which is used in [[autoCommit]].\n         */\n        this.autoCommitMode = 'sync';\n        this.autoCommitHandler = null;\n        this.onWriteDuringCommit = 'throw';\n        this.onComputationCycle = 'throw';\n        this.transactionClass = Transaction;\n        this.isJustCleared = false;\n        this.$followingRevision = undefined;\n    }\n    initialize(...args) {\n        super.initialize(...args);\n        if (!this.topRevision)\n            this.topRevision = this.baseRevision;\n        if (this.autoCommit) {\n            this.autoCommitHandler = this.autoCommitMode === 'sync' ? arg => this.commit(arg) : async (arg) => this.commitAsync(arg);\n        }\n        this.markAndSweep();\n    }\n    /**\n     * Returns boolean, indicating whether the auto-commit is pending.\n     */\n    hasPendingAutoCommit() {\n        return this.autoCommitTimeoutId !== null;\n    }\n    get dirty() {\n        return this.activeTransaction.dirty;\n    }\n    clear() {\n        this.reject();\n        this.unScheduleAutoCommit();\n        // some stale state - `clear` called at sensitive time\n        this.baseRevision.scope && this.baseRevision.scope.clear();\n        this.baseRevision.previous = null;\n        this.listeners.clear();\n        this.topRevision = this.baseRevision;\n        this.$followingRevision = undefined;\n        this.$activeTransaction = undefined;\n        this.markAndSweep();\n        this.isJustCleared = true;\n    }\n    *eachReachableRevision() {\n        let isBetweenTopBottom = true;\n        let counter = 0;\n        for (const revision of this.topRevision.previousAxis()) {\n            yield [revision, isBetweenTopBottom || counter < this.historyLimit];\n            if (revision === this.baseRevision) {\n                isBetweenTopBottom = false;\n            }\n            else {\n                if (!isBetweenTopBottom)\n                    counter++;\n            }\n        }\n    }\n    get isInitialCommit() {\n        return this._isInitialCommit;\n    }\n    set isInitialCommit(value) {\n        this._isInitialCommit = value;\n    }\n    markAndSweep() {\n        let lastReferencedRevision;\n        const unreachableRevisions = [];\n        for (const [revision, isReachable] of this.eachReachableRevision()) {\n            if (isReachable) {\n                revision.reachableCount++;\n                lastReferencedRevision = revision;\n            }\n            else\n                unreachableRevisions.push(revision);\n            revision.referenceCount++;\n        }\n        unreachableRevisions.unshift(lastReferencedRevision);\n        for (let i = unreachableRevisions.length - 1; i >= 1 && unreachableRevisions[i].reachableCount === 0; i--) {\n            this.compactRevisions(unreachableRevisions[i - 1], unreachableRevisions[i]);\n        }\n    }\n    compactRevisions(newRev, prevRev) {\n        if (prevRev.reachableCount > 0 || newRev.previous !== prevRev)\n            throw new Error(\"Invalid compact operation\");\n        // we can only shred revision if its being referenced maximum 1 time (from the current Checkout instance)\n        if (prevRev.referenceCount <= 1) {\n            for (const [identifier, entry] of newRev.scope) {\n                if (entry.getValue() === TombStone) {\n                    prevRev.scope.delete(identifier);\n                }\n                else {\n                    const prevQuark = prevRev.scope.get(identifier);\n                    if (entry.origin === entry) {\n                        if (prevQuark) {\n                            prevQuark.clear();\n                            prevQuark.clearProperties();\n                        }\n                    }\n                    else if (prevQuark && entry.origin === prevQuark) {\n                        entry.mergePreviousOrigin(newRev.scope);\n                    }\n                    else if (identifier.lazy && !entry.origin && prevQuark && prevQuark.origin) {\n                        // for lazy quarks, that depends on the `ProposedOrPrevious` effect, we need to save the value or proposed value\n                        // from the previous revision\n                        entry.startOrigin().proposedValue = prevQuark.origin.value !== undefined ? prevQuark.origin.value : prevQuark.origin.proposedValue;\n                    }\n                    entry.previous = undefined;\n                    prevRev.scope.set(identifier, entry);\n                }\n            }\n            copySetInto(newRev.selfDependent, prevRev.selfDependent);\n            // some help for garbage collector\n            // this clears the \"entries\" in the transaction commit result in the \"finalizeCommitAsync\"\n            // newRev.scope.clear()\n            newRev.scope = prevRev.scope;\n            // make sure the previous revision won't be used inconsistently\n            prevRev.scope = null;\n        }\n        // otherwise, we have to copy from it, and keep it intact\n        else {\n            newRev.scope = new Map(concat(prevRev.scope, newRev.scope));\n            newRev.selfDependent = new Set(concat(prevRev.selfDependent, newRev.selfDependent));\n            prevRev.referenceCount--;\n        }\n        // in both cases break the `previous` chain\n        newRev.previous = null;\n    }\n    get followingRevision() {\n        if (this.$followingRevision !== undefined)\n            return this.$followingRevision;\n        const revisions = Array.from(this.topRevision.previousAxis());\n        const entries = [];\n        for (let i = revisions.length - 1; i > 0; i--)\n            entries.push([revisions[i], revisions[i - 1]]);\n        return this.$followingRevision = new Map(entries);\n    }\n    get activeTransaction() {\n        if (this.$activeTransaction)\n            return this.$activeTransaction;\n        return this.$activeTransaction = this.transactionClass.new({\n            baseRevision: this.baseRevisionTentative || this.baseRevision,\n            graph: this\n        });\n    }\n    /**\n     * Creates a new branch of this graph. Only committed data will be \"visible\" in the new branch.\n     *\n     * ```ts\n     * const graph2 = ChronoGraph.new()\n     *\n     * const variable13 : Variable<number> = graph2.variable(5)\n     *\n     * const branch2 = graph2.branch()\n     *\n     * branch2.write(variable13, 10)\n     *\n     * const value13_1 = graph2.read(variable13)  // 5\n     * const value13_2 = branch2.read(variable13) // 10\n     * ```\n     *\n     * When using the branching feature in [[Replica]], you need to reference the field values by yielding their\n     * corresponding identifiers. This is because ChronoGraph need to know in context of which branch\n     * the calculation happens and this information is encoded in the outer context. This may improve in the future.\n     *\n     * ```ts\n     * class Author extends Entity.mix(Base) {\n     *     @calculate('fullName')\n     *     calculateFullName (Y) : string {\n     *         return Y(this.$.firstName) + ' ' + Y(this.$.lastName)\n     *     }\n     *\n     *     @calculate('fullName')\n     *     * calculateFullName (Y) : CalculationIterator<string> {\n     *         return (yield this.$.firstName) + ' ' + (yield this.$.lastName)\n     *     }\n     * }\n     * ```\n     *\n     * @param config Configuration object for the new graph instance.\n     */\n    branch(config) {\n        const Constructor = this.constructor;\n        return Constructor.new(Object.assign({}, config, { baseRevision: this.baseRevision }));\n    }\n    propagate(args) {\n        return this.commit(args);\n    }\n    /**\n     * Rejects the current changes in the graph and revert it to the state of the previous [[commit]].\n     *\n     * See also [[RejectEffect]].\n     *\n     * @param reason Any value, describing why reject has happened\n     */\n    reject(reason) {\n        this.activeTransaction.reject(RejectEffect.new({ reason }));\n        // reject resets the `ongoing` promise (which is possibly rejected because of cycle exception)\n        this.ongoing = Promise.resolve();\n        this.$activeTransaction = undefined;\n        this.baseRevisionTentative = undefined;\n        if (this.baseRevisionStable) {\n            this.baseRevision = this.baseRevisionStable;\n            this.baseRevisionStable = undefined;\n        }\n    }\n    /**\n     * Synchronously commit the state of the graph. All potentially changed [[Identifier.lazy|strict]] identifiers\n     * will be calculated during this call. If any of such identifiers will be [[Identifier.sync|async]], an exception\n     * will be thrown.\n     *\n     * This call marks a \"stable\" state of the graph and a transaction border. Using the [[undo]] call one can revert to the previous\n     * state.\n     *\n     * See also [[reject]].\n     *\n     * @param args\n     */\n    commit(args) {\n        this.isJustCleared = false;\n        this.unScheduleAutoCommit();\n        this.baseRevisionStable = this.baseRevision;\n        const activeTransaction = this.activeTransaction;\n        const transactionCommitResult = activeTransaction.commit(args);\n        this.$activeTransaction = undefined;\n        const result = this.finalizeCommit(transactionCommitResult);\n        this.baseRevisionStable = undefined;\n        this.isInitialCommit = false;\n        return result;\n    }\n    async propagateAsync(args) {\n        return this.commitAsync(args);\n    }\n    /**\n     * Asynchronously commit the state of the replica. All potentially changed strict identifiers (see [[Identifier.lazy]])\n     * will be calculated during this call.\n     *\n     * This call marks a \"stable\" state of the graph and a transaction border. Using the [[undo]] call one can revert to the previous\n     * state.\n     *\n     * See also [[reject]].\n     *\n     * @param args\n     */\n    async commitAsync(args) {\n        if (this.isCommitting)\n            return this.ongoing;\n        this.isJustCleared = false;\n        this.isCommitting = true;\n        this.baseRevisionStable = this.baseRevision;\n        let result;\n        return this.ongoing = this.ongoing.then(() => {\n            return this.doCommitAsync(args);\n        }).then(res => {\n            result = res;\n            return res;\n        }).finally(() => {\n            this.baseRevisionStable = undefined;\n            this.baseRevisionTentative = undefined;\n            this.isInitialCommit = false;\n            this.isCommitting = false;\n        });\n    }\n    async doCommitAsync(args) {\n        this.unScheduleAutoCommit();\n        const activeTransaction = this.activeTransaction;\n        const transactionResult = await activeTransaction.commitAsync(args);\n        const rejectedDuringCommit = Boolean(activeTransaction.rejectedWith);\n        const prevBaseTentative = this.baseRevisionTentative;\n        if (!rejectedDuringCommit)\n            this.baseRevisionTentative = activeTransaction.candidate;\n        this.$activeTransaction = undefined;\n        await this.finalizeCommitAsync(transactionResult);\n        if (this.isJustCleared)\n            return { rejectedWith: RejectEffect.new({ reason: 'Graph cleared' }) };\n        if (activeTransaction.rejectedWith && !rejectedDuringCommit) {\n            this.baseRevisionTentative = prevBaseTentative;\n            this.$activeTransaction = undefined;\n        }\n        const result = this.finalizeCommit(transactionResult);\n        if (activeTransaction.rejectedWith)\n            activeTransaction.clearRejected();\n        if (this.dirty && !activeTransaction.rejectedWith) {\n            await this.doCommitAsync(args);\n        }\n        return result;\n    }\n    finalizeCommit(transactionResult) {\n        const { revision, entries, transaction } = transactionResult;\n        if (!transaction.rejectedWith) {\n            if (revision.previous !== this.baseRevision)\n                throw new Error('Invalid revisions chain');\n            // dereference all revisions\n            for (const [revision, isReachable] of this.eachReachableRevision()) {\n                if (isReachable)\n                    revision.reachableCount--;\n                revision.referenceCount--;\n            }\n            this.baseRevision = this.topRevision = revision;\n            // activating listeners BEFORE the `markAndSweep`, because in that call, `baseRevision`\n            // might be already merged with previous\n            for (const [identifier, quarkEntry] of entries) {\n                quarkEntry.cleanup();\n                // ignore \"shadowing\" and lazy entries\n                if (quarkEntry.isShadow() || !quarkEntry.hasValue())\n                    continue;\n                const listener = this.listeners.get(identifier);\n                if (listener)\n                    listener.trigger(quarkEntry.getValue());\n            }\n            this.$followingRevision = undefined;\n            this.markAndSweep();\n        }\n        else {\n            // `baseRevisionStable` might be already cleared in the `reject` method of the graph\n            if (this.baseRevisionStable)\n                this.baseRevision = this.baseRevisionStable;\n            this.baseRevisionStable = undefined;\n            this.baseRevisionTentative = undefined;\n        }\n        return { rejectedWith: transaction.rejectedWith };\n    }\n    async finalizeCommitAsync(transactionResult) {\n    }\n    *onComputationCycleHandler(cycle) {\n        const exception = new Error(\"Computation cycle:\\n\" + cycle);\n        //@ts-ignore\n        exception.cycle = cycle;\n        switch (this.onComputationCycle) {\n            case 'ignore':\n                console.log(exception.message);\n                const { requestedEntry, activeEntry } = cycle;\n                // if we ignore the cycle we just continue the calculation with the best possible value\n                return activeEntry.continueCalculation(requestedEntry.proposedValue !== undefined ? requestedEntry.proposedValue : requestedEntry.value);\n            case 'throw':\n                throw exception;\n            case 'reject':\n                this.reject(exception);\n                break;\n            case 'warn':\n                warn(exception);\n                break;\n        }\n    }\n    onComputationCycleHandlerSync(cycle, transaction) {\n        const exception = new Error(\"Computation cycle:\\n\" + cycle);\n        //@ts-ignore\n        exception.cycle = cycle;\n        switch (this.onComputationCycle) {\n            case 'ignore':\n                console.log(exception.message);\n                const { requestedEntry, activeEntry } = cycle;\n                // if we ignore the cycle we just continue the calculation with the best possible value\n                return activeEntry.continueCalculation(requestedEntry.proposedValue !== undefined ? requestedEntry.proposedValue : requestedEntry.value);\n            case 'throw':\n                throw exception;\n            case 'reject':\n                this.reject(exception);\n                break;\n            case 'warn':\n                warn(exception);\n                break;\n        }\n    }\n    scheduleAutoCommit() {\n        // the `&& !this.isCommitting` part was added for the conflicts branch\n        // however, it seems to fail several tests\n        // commenting for now, to be reviewed later\n        if (this.autoCommitTimeoutId === null && !this.isCommitting) {\n            this.autoCommitTimeoutId = setTimeout(this.autoCommitHandler, 10);\n        }\n    }\n    unScheduleAutoCommit() {\n        if (this.autoCommitTimeoutId !== null) {\n            clearTimeout(this.autoCommitTimeoutId);\n            this.autoCommitTimeoutId = null;\n        }\n    }\n    /**\n     * Creates a variable identifier with the given initial value and adds it to graph.\n     *\n     * @param value The initial value. The `undefined` value will be converted to `null`\n     */\n    variable(value) {\n        const variable = VariableC();\n        // always initialize variables with `null`\n        return this.addIdentifier(variable, value === undefined ? null : value);\n    }\n    /**\n     * Creates a named variable identifier with the given initial value and adds it to graph.\n     *\n     * @param name The [[Variable.name]] property of the newly created variable\n     * @param value The initial value. The `undefined` value will be converted to `null`\n     */\n    variableNamed(name, value) {\n        const variable = VariableC({ name });\n        // always initialize variables with `null`\n        return this.addIdentifier(variable, value === undefined ? null : value);\n    }\n    /**\n     * Creates an identifier based on the given calculation function and adds it to this graph. Depending form the type of the function\n     * (sync/generator) either [[CalculatedValueGen]] or [[CalculatedValueSync]] will be created.\n     *\n     * To have full control on the identifier creation, instantiate it yourself and add to graph using the [[ChronoGraph.addIdentifier]] call.\n     *\n     * @param calculation The calculation function of the identifier.\n     * @param context The [[Identifier.context|context]] property of the newly created identifier\n     */\n    identifier(calculation, context) {\n        const identifier = isGeneratorFunction(calculation) ?\n            CalculatedValueGenC({ calculation, context })\n            :\n                CalculatedValueSyncC({ calculation, context });\n        return this.addIdentifier(identifier);\n    }\n    /**\n     * Creates a named identifier based on the given calculation function and adds it to this graph. Depending form the type of the function\n     * (sync/generator) either [[CalculatedValueGen]] or [[CalculatedValueSync]] will be created.\n     *\n     * To have full control on the identifier creation, instantiate it yourself and add to graph using the [[ChronoGraph.addIdentifier]] call.\n     *\n     * @param name The [[Identifier.name]] property of the newly created identifier\n     * @param calculation The calculation function of the identifier.\n     * @param context The [[Identifier.context]] property of the newly created identifier\n     */\n    identifierNamed(name, calculation, context) {\n        const identifier = calculation.constructor.name === 'GeneratorFunction' ?\n            CalculatedValueGenC({ name, calculation, context })\n            :\n                CalculatedValueSyncC({ name, calculation, context });\n        return this.addIdentifier(identifier);\n    }\n    /**\n     * Adds an identifier to this graph. Optionally [[write|writes]] the `proposedValue` to it afterwards.\n     *\n     * @param identifier\n     * @param proposedValue\n     * @param args\n     */\n    addIdentifier(identifier, proposedValue, ...args) {\n        if (this.isCommitting) {\n            if (this.onWriteDuringCommit === 'throw')\n                throw new Error('Adding identifier during commit');\n            else if (this.onWriteDuringCommit === 'warn')\n                warn(new Error('Adding identifier during commit'));\n        }\n        this.activeTransaction.addIdentifier(identifier, proposedValue, ...args);\n        if (this.autoCommit)\n            this.scheduleAutoCommit();\n        return identifier;\n    }\n    /**\n     * Removes an identifier from this graph.\n     *\n     * @param identifier\n     */\n    removeIdentifier(identifier) {\n        if (this.isCommitting) {\n            if (this.onWriteDuringCommit === 'throw')\n                throw new Error('Removing identifier during commit');\n            else if (this.onWriteDuringCommit === 'warn')\n                warn(new Error('Removinfg identifier during commit'));\n        }\n        this.activeTransaction.removeIdentifier(identifier);\n        this.listeners.delete(identifier);\n        if (this.autoCommit)\n            this.scheduleAutoCommit();\n    }\n    /**\n     * Tests, whether this graph has given identifier.\n     *\n     * @param identifier\n     */\n    hasIdentifier(identifier) {\n        return this.activeTransaction.hasIdentifier(identifier);\n    }\n    /**\n     * Writes a value to the given `identifier`.\n     *\n     * @param identifier\n     * @param proposedValue\n     * @param args\n     */\n    write(identifier, proposedValue, ...args) {\n        if (this.isCommitting) {\n            if (this.onWriteDuringCommit === 'throw')\n                throw new Error('Write during commit');\n            else if (this.onWriteDuringCommit === 'warn')\n                warn(new Error('Write during commit'));\n        }\n        this.activeTransaction.write(identifier, proposedValue, ...args);\n        if (this.autoCommit)\n            this.scheduleAutoCommit();\n    }\n    // keep if possible?\n    // pin (identifier : Identifier) : Quark {\n    //     return this.activeTransaction.pin(identifier)\n    // }\n    // Synchronously read the \"previous\", \"stable\" value from the graph. If its a lazy entry, it will be calculated\n    // Synchronous read can not calculate lazy asynchronous identifiers and will throw exception\n    // Lazy identifiers supposed to be \"total\" (or accept repeating observes?)\n    readPrevious(identifier) {\n        return this.activeTransaction.readPrevious(identifier);\n    }\n    // Asynchronously read the \"previous\", \"stable\" value from the graph. If its a lazy entry, it will be calculated\n    // Asynchronous read can calculate both synchornous and asynchronous lazy identifiers.\n    // Lazy identifiers supposed to be \"total\" (or accept repeating observes?)\n    readPreviousAsync(identifier) {\n        return this.activeTransaction.readPreviousAsync(identifier);\n    }\n    /**\n     * Synchronously read the value of the given identifier from the graph.\n     *\n     * Synchronous read can not calculate asynchronous identifiers and will throw exception\n     *\n     * @param identifier\n     */\n    read(identifier) {\n        return this.activeTransaction.read(identifier);\n    }\n    /**\n     * Asynchronously read the value of the given identifier from the graph.\n     *\n     * Asynchronous read can calculate both synchronous and asynchronous identifiers\n     *\n     * @param identifier\n     */\n    readAsync(identifier) {\n        return this.activeTransaction.readAsync(identifier);\n    }\n    /**\n     * Read the value of the identifier either synchronously or asynchronously, depending on its type (see [[Identifier.sync]])\n     *\n     * @param identifier\n     */\n    get(identifier) {\n        return this.activeTransaction.get(identifier);\n    }\n    // // read the identifier value, return the proposed value if no \"current\" value is calculated yet\n    // readDirty<T> (identifier : Identifier<T>) : T {\n    //     return this.activeTransaction.readDirty(identifier)\n    // }\n    //\n    //\n    // // read the identifier value, return the proposed value if no \"current\" value is calculated yet\n    // readDirtyAsync<T> (identifier : Identifier<T>) : Promise<T> {\n    //     return this.activeTransaction.readDirtyAsync(identifier)\n    // }\n    observe(observerFunc, onUpdated) {\n        const identifier = this.addIdentifier(CalculatedValueGen.new({\n            // observers are explicitly eager\n            lazy: false,\n            calculation: observerFunc,\n        }));\n        this.addListener(identifier, onUpdated);\n        return identifier;\n    }\n    observeContext(observerFunc, context, onUpdated) {\n        const identifier = this.addIdentifier(CalculatedValueGen.new({\n            // observers are explicitly eager\n            lazy: false,\n            calculation: observerFunc,\n            context: context,\n        }));\n        this.addListener(identifier, onUpdated);\n        return identifier;\n    }\n    addListener(identifier, onUpdated) {\n        let listener = this.listeners.get(identifier);\n        if (!listener) {\n            listener = Listener.new();\n            this.listeners.set(identifier, listener);\n        }\n        listener.handlers.push(onUpdated);\n    }\n    /**\n     * Revert the replica to the state of previous transaction (marked with the [[commit]] call).\n     *\n     * To enable this feature, you need to opt-in using the [[ChronoGraph.historyLimit|historyLimit]] configuration property.\n     *\n     * Returns boolean, indicating whether the state transition actually happened.\n     */\n    undo() {\n        const baseRevision = this.baseRevision;\n        const previous = baseRevision.previous;\n        if (!previous)\n            return false;\n        this.baseRevision = previous;\n        // note: all unpropagated \"writes\" are lost\n        this.$activeTransaction = undefined;\n        return true;\n    }\n    /**\n     * Advance the replica to the state of next transaction (marked with the [[commit]] call). Only meaningful\n     * if a [[ChronoGraph.undo|undo]] call has been made earlier.\n     *\n     * To enable this feature, you need to opt-in using the [[historyLimit]] configuration property.\n     *\n     * Returns boolean, indicating whether the state transition actually happened.\n     */\n    redo() {\n        const baseRevision = this.baseRevision;\n        if (baseRevision === this.topRevision)\n            return false;\n        const nextRevision = this.followingRevision.get(baseRevision);\n        this.baseRevision = nextRevision;\n        // note: all unpropagated \"writes\" are lost\n        this.$activeTransaction = undefined;\n        return true;\n    }\n    onPropagationProgressNotification(notification) {\n    }\n    [ProposedOrPreviousSymbol](effect, transaction) {\n        const activeEntry = transaction.getActiveEntry();\n        activeEntry.usedProposedOrPrevious = true;\n        const proposedValue = activeEntry.getProposedValue(transaction);\n        if (proposedValue !== undefined)\n            return proposedValue;\n        // newly added identifier\n        if (!activeEntry.previous)\n            return undefined;\n        const identifier = activeEntry.identifier;\n        if (identifier.lazy) {\n            if (activeEntry.previous.hasValue())\n                return activeEntry.previous.getValue();\n            if (activeEntry.previous.hasProposedValue())\n                return activeEntry.previous.getProposedValue(transaction);\n            return null;\n        }\n        return transaction.readPrevious(activeEntry.identifier);\n    }\n    [RejectSymbol](effect, transaction) {\n        this.reject(effect.reason);\n        return BreakCurrentStackExecution;\n    }\n    [TransactionSymbol](effect, transaction) {\n        return transaction;\n    }\n    [OwnQuarkSymbol](effect, transaction) {\n        return transaction.getActiveEntry();\n    }\n    [OwnIdentifierSymbol](effect, transaction) {\n        const activeEntry = transaction.getActiveEntry();\n        return activeEntry.identifier;\n    }\n    [WriteSymbol](effect, transaction) {\n        const activeEntry = transaction.getActiveEntry();\n        if (activeEntry.identifier.lazy)\n            throw new Error('Lazy identifiers can not use `Write` effect');\n        const writeToHigherLevel = effect.identifier.level > activeEntry.identifier.level;\n        if (!writeToHigherLevel)\n            transaction.walkContext.startNewEpoch();\n        transaction.write(effect.identifier, ...effect.proposedArgs);\n        // // transaction.writes.push(effect)\n        //\n        // // const writeTo   = effect.identifier\n        // //\n        // // writeTo.write.call(writeTo.context || writeTo, writeTo, transaction, null, ...effect.proposedArgs)\n        //\n        // transaction.onNewWrite()\n        return writeToHigherLevel ? undefined : BreakCurrentStackExecution;\n    }\n    [WriteSeveralSymbol](effect, transaction) {\n        const activeEntry = transaction.getActiveEntry();\n        if (activeEntry.identifier.lazy)\n            throw new Error('Lazy identifiers can not use `Write` effect');\n        let writeToHigherLevel = true;\n        // effect.writes.forEach(writeInfo => {\n        effect.writes.forEach(writeInfo => {\n            if (writeInfo.identifier.level <= activeEntry.identifier.level && writeToHigherLevel) {\n                transaction.walkContext.startNewEpoch();\n                writeToHigherLevel = false;\n            }\n            transaction.write(writeInfo.identifier, ...writeInfo.proposedArgs);\n        });\n        // const identifier    = writeInfo.identifier\n        //\n        // identifier.write.call(identifier.context || identifier, identifier, transaction, null, ...writeInfo.proposedArgs)\n        // })\n        // transaction.onNewWrite()\n        return writeToHigherLevel ? undefined : BreakCurrentStackExecution;\n    }\n    [PreviousValueOfSymbol](effect, transaction) {\n        const activeEntry = transaction.getActiveEntry();\n        const source = effect.identifier;\n        transaction.addEdge(source, activeEntry, EdgeTypePast);\n        return transaction.readPrevious(source);\n    }\n    [ProposedValueOfSymbol](effect, transaction) {\n        const activeEntry = transaction.getActiveEntry();\n        const source = effect.identifier;\n        transaction.addEdge(source, activeEntry, EdgeTypePast);\n        const quark = transaction.entries.get(source);\n        const proposedValue = quark && !quark.isShadow() ? quark.getProposedValue(transaction) : undefined;\n        return proposedValue;\n    }\n    [HasProposedValueSymbol](effect, transaction) {\n        const activeEntry = transaction.getActiveEntry();\n        const source = effect.identifier;\n        transaction.addEdge(source, activeEntry, EdgeTypePast);\n        const quark = transaction.entries.get(source);\n        return quark ? quark.hasProposedValue() : false;\n    }\n    [HasProposedNotPreviousValueSymbol](effect, transaction) {\n        const activeEntry = transaction.getActiveEntry();\n        const source = effect.identifier;\n        transaction.addEdge(source, activeEntry, EdgeTypePast);\n        const quark = transaction.entries.get(source);\n        return quark ? quark.hasProposedValue() && !quark.proposedIsPrevious : false;\n    }\n    [ProposedOrPreviousValueOfSymbol](effect, transaction) {\n        const activeEntry = transaction.getActiveEntry();\n        const source = effect.identifier;\n        transaction.addEdge(source, activeEntry, EdgeTypePast);\n        return transaction.readProposedOrPrevious(source);\n    }\n    [UnsafeProposedOrPreviousValueOfSymbol](effect, transaction) {\n        return transaction.readProposedOrPrevious(effect.identifier);\n    }\n    [UnsafePreviousValueOfSymbol](effect, transaction) {\n        return transaction.readPrevious(effect.identifier);\n    }\n    [ProposedArgumentsOfSymbol](effect, transaction) {\n        const activeEntry = transaction.getActiveEntry();\n        const source = effect.identifier;\n        transaction.addEdge(source, activeEntry, EdgeTypePast);\n        const quark = transaction.entries.get(source);\n        return quark && !quark.isShadow() ? quark.proposedArguments : undefined;\n    }\n}\n", "import { Base } from \"../class/Base.js\";\n//---------------------------------------------------------------------------------------------------------------------\n/**\n * This class describes an entity. Entity is simply a collection of [[Field]]s. Entity also may have a parent entity,\n * from which it inherit the fields.\n */\nexport class EntityMeta extends Base {\n    constructor() {\n        super(...arguments);\n        /**\n         * The name of the entity\n         */\n        this.name = undefined;\n        this.ownFields = new Map();\n        this.schema = undefined;\n        this.$skeleton = {};\n        this.$allFields = undefined;\n    }\n    /**\n     * Checks whether the entity has a field with given name (possibly inherited from parent entity).\n     *\n     * @param name\n     */\n    hasField(name) {\n        return this.getField(name) !== undefined;\n    }\n    /**\n     * Returns a field with given name (possibly inherited) or `undefined` if there's none.\n     *\n     * @param name\n     */\n    getField(name) {\n        return this.allFields.get(name);\n    }\n    /**\n     * Adds a field to this entity.\n     *\n     * @param field\n     */\n    addField(field) {\n        const name = field.name;\n        if (!name)\n            throw new Error(`Field must have a name`);\n        if (this.ownFields.has(name))\n            throw new Error(`Field with name [${name}] already exists`);\n        field.entity = this;\n        this.ownFields.set(name, field);\n        return field;\n    }\n    forEachParent(func) {\n        let entity = this;\n        while (entity) {\n            func(entity);\n            entity = entity.parentEntity;\n        }\n    }\n    get allFields() {\n        if (this.$allFields !== undefined)\n            return this.$allFields;\n        const allFields = new Map();\n        const visited = new Set();\n        this.forEachParent(entity => {\n            entity.ownFields.forEach((field, name) => {\n                if (!visited.has(name)) {\n                    visited.add(name);\n                    allFields.set(name, field);\n                }\n            });\n        });\n        return this.$allFields = allFields;\n    }\n    /**\n     * Iterator for all fields of this entity (including inherited).\n     *\n     * @param func\n     */\n    forEachField(func) {\n        this.allFields.forEach(func);\n    }\n}\n", "import { ChronoGraph } from \"../chrono/Graph.js\";\nimport { Mixin } from \"../class/Mixin.js\";\nexport var ReadMode;\n(function (ReadMode) {\n    ReadMode[ReadMode[\"Current\"] = 0] = \"Current\";\n    ReadMode[ReadMode[\"Previous\"] = 1] = \"Previous\";\n    ReadMode[ReadMode[\"ProposedOrPrevious\"] = 2] = \"ProposedOrPrevious\";\n    ReadMode[ReadMode[\"CurrentOrProposedOrPrevious\"] = 3] = \"CurrentOrProposedOrPrevious\";\n})(ReadMode || (ReadMode = {}));\n//---------------------------------------------------------------------------------------------------------------------\n/**\n * Reactive graph, operating on the set of entities (see [[Entity]] and [[EntityMeta]]), each having a set of fields (see [[Field]]).\n *\n * Entities are mapped to JS classes and fields - to their properties, decorated with [[field]].\n *\n * The calculation function for some field can be mapped to the class method, using the [[calculate]] decorator.\n *\n * An example of usage:\n *\n * ```ts\n * class Author extends Entity.mix(Base) {\n *     @field()\n *     firstName       : string\n *     @field()\n *     lastName        : string\n *     @field()\n *     fullName        : string\n *\n *     @calculate('fullName')\n *     calculateFullName () : string {\n *         return this.firstName + ' ' + this.lastName\n *     }\n * }\n * ```\n */\nexport class Replica extends Mixin([ChronoGraph], (base) => class Replica extends base {\n    constructor() {\n        super(...arguments);\n        /**\n         * Replica re-defines the default value of the `autoCommit` property to `true`.\n         */\n        this.autoCommit = true;\n        this.readMode = ReadMode.Current;\n    }\n    /**\n     * Add entity instance to the replica\n     *\n     * @param entity\n     */\n    addEntity(entity) {\n        entity.enterGraph(this);\n    }\n    /**\n     * Add several entity instances to the replica\n     *\n     * @param entity\n     */\n    addEntities(entities) {\n        entities.forEach(entity => this.addEntity(entity));\n    }\n    /**\n     * Remove entity instance from the replica\n     *\n     * @param entity\n     */\n    removeEntity(entity) {\n        entity.leaveGraph(this);\n    }\n    /**\n     * Remove several entity instances from the replica\n     *\n     * @param entity\n     */\n    removeEntities(entities) {\n        entities.forEach(entity => this.removeEntity(entity));\n    }\n}) {\n}\n", "import { CalculatedValueGen, CalculatedValueSync, Identifier, Variable } from \"../chrono/Identifier.js\";\nimport { Mixin } from \"../class/Mixin.js\";\nimport { ReadMode } from \"./Replica.js\";\n//---------------------------------------------------------------------------------------------------------------------\n/**\n * Mixin, for the identifier that represent a field of the entity. Requires the [[Identifier]] (or its subclass)\n * as a base class. See more about mixins: [[Mixin]]\n */\nexport class FieldIdentifier extends Mixin([Identifier], (base) => class FieldIdentifier extends base {\n    constructor() {\n        super(...arguments);\n        /**\n         * Reference to the [[Field]] this identifier represents\n         */\n        this.field = undefined;\n        /**\n         * Reference to the [[Entity]] this identifier represents\n         */\n        this.self = undefined;\n        // temp storage for value for the phase, when identifier is created, but has not joined any graph\n        // is cleared during the 1st join to the graph\n        this.DATA = undefined;\n    }\n    // standaloneQuark     : InstanceType<this[ 'quarkClass' ]>\n    // readFromGraphDirtySync (graph : Checkout) {\n    //     if (graph)\n    //         return graph.readDirty(this)\n    //     else\n    //         return this.DATA\n    // }\n    // returns the value itself if there were no affecting writes for it\n    // otherwise - promise\n    getFromGraph(graph) {\n        if (graph) {\n            if (graph.readMode === ReadMode.Current)\n                return graph.get(this);\n            if (graph.readMode === ReadMode.Previous)\n                return graph.activeTransaction.readPrevious(this);\n            if (graph.readMode === ReadMode.ProposedOrPrevious)\n                graph.activeTransaction.readProposedOrPrevious(this);\n            return graph.activeTransaction.readCurrentOrProposedOrPrevious(this);\n        }\n        else\n            return this.DATA;\n    }\n    readFromGraph(graph) {\n        if (graph)\n            return graph.read(this);\n        else\n            return this.DATA;\n    }\n    writeToGraph(graph, proposedValue, ...args) {\n        if (graph)\n            graph.write(this, proposedValue, ...args);\n        else\n            this.DATA = proposedValue;\n    }\n    leaveGraph(graph) {\n        const entry = graph.activeTransaction.getLatestStableEntryFor(this);\n        if (entry)\n            this.DATA = entry.getValue();\n        super.leaveGraph(graph);\n    }\n    toString() {\n        return this.name;\n    }\n}) {\n}\nexport class MinimalFieldIdentifierSync extends FieldIdentifier.mix(CalculatedValueSync) {\n}\nexport class MinimalFieldIdentifierGen extends FieldIdentifier.mix(CalculatedValueGen) {\n}\nexport class MinimalFieldVariable extends FieldIdentifier.mix(Variable) {\n}\n//---------------------------------------------------------------------------------------------------------------------\n/**\n * Mixin, for the identifier that represent an entity as a whole. Requires the [[Identifier]] (or its subclass)\n * as a base class. See more about mixins: [[Mixin]]\n */\nexport class EntityIdentifier extends Mixin([Identifier], (base) => class EntityIdentifier extends base {\n    constructor() {\n        super(...arguments);\n        /**\n         * [[EntityMeta]] instance of the entity this identifier represents\n         */\n        this.entity = undefined;\n        /**\n         * Reference to the [[Entity]] this identifier represents\n         */\n        this.self = undefined;\n    }\n    // entity atom is considered changed if any of its incoming atoms has changed\n    // this just means if it's calculation method has been called, it should always\n    // assign a new value\n    equality() {\n        return false;\n    }\n    toString() {\n        return `Entity identifier [${this.self}]`;\n    }\n}) {\n}\nexport class MinimalEntityIdentifier extends EntityIdentifier.mix(CalculatedValueGen) {\n}\n", "import { Meta } from \"../chrono/Identifier.js\";\nimport { MinimalFieldIdentifierGen, MinimalFieldIdentifierSync, MinimalFieldVariable } from \"../replica/Identifier.js\";\nimport { isGeneratorFunction } from \"../util/Helpers.js\";\n//---------------------------------------------------------------------------------------------------------------------\n/**\n * This class describes a field of some [[EntityMeta]].\n */\nexport class Field extends Meta {\n    constructor() {\n        super(...arguments);\n        /**\n         * Boolean flag, indicating whether this field should be persisted\n         */\n        this.persistent = true;\n    }\n    getIdentifierClass(calculationFunction) {\n        if (this.identifierCls)\n            return this.identifierCls;\n        if (!calculationFunction)\n            return MinimalFieldVariable;\n        return isGeneratorFunction(calculationFunction) ? MinimalFieldIdentifierGen : MinimalFieldIdentifierSync;\n    }\n}\n", "import { CommitZero } from \"../chrono/Graph.js\";\nimport { Identifier } from \"../chrono/Identifier.js\";\nimport { Mixin } from \"../class/Mixin.js\";\nimport { DEBUG, debug, SourceLinePoint } from \"../environment/Debug.js\";\nimport { runGeneratorSyncWithEffect } from \"../primitives/Calculation.js\";\nimport { EntityMeta } from \"../schema/EntityMeta.js\";\nimport { Field } from \"../schema/Field.js\";\nimport { defineProperty, uppercaseFirst } from \"../util/Helpers.js\";\nimport { MinimalEntityIdentifier } from \"./Identifier.js\";\nconst isEntityMarker = Symbol('isEntity');\n//---------------------------------------------------------------------------------------------------------------------\n/**\n * Entity [[Mixin|mixin]]. When applied to some base class (recommended one is [[Base]]), turns it into entity.\n * Entity may have several fields, which are properties decorated with [[field]] decorator.\n *\n * To apply this mixin use the `Entity.mix` property, which represents the mixin lambda.\n *\n * Another decorator, [[calculate]], marks the method, that will be used to calculate the value of field.\n *\n * Example:\n *\n * ```ts\n * class Author extends Entity.mix(Base) {\n *     @field()\n *     firstName       : string\n *     @field()\n *     lastName        : string\n *     @field()\n *     fullName        : string\n *\n *     @calculate('fullName')\n *     calculateFullName () : string {\n *         return this.firstName + ' ' + this.lastName\n *     }\n * }\n * ```\n *\n */\nexport class Entity extends Mixin([], (base) => {\n    class Entity extends base {\n        // marker in the prototype to identify whether the parent class is Entity mixin itself\n        // it is not used for `instanceof` purposes and not be confused with the [MixinInstanceOfProperty]\n        // (though it is possible to use MixinInstanceOfProperty for this purpose, that would require to\n        // make it public\n        [isEntityMarker]() { }\n        /**\n         * An [[EntityMeta]] instance, representing the \"meta\" information about the entity class. It is shared among all instances\n         * of the class.\n         */\n        get $entity() {\n            // this will lazily create an EntityData instance in the prototype\n            return createEntityOnPrototype(this.constructor.prototype);\n        }\n        /**\n         * An object, which properties corresponds to the ChronoGraph [[Identifier]]s, created for every field.\n         *\n         * For example:\n         *\n         * ```ts\n         * class Author extends Entity.mix(Base) {\n         *     @field()\n         *     firstName       : string\n         *     @field()\n         *     lastName        : string\n         * }\n         *\n         * const author = Author.new()\n         *\n         * // identifier for the field `firstName`\n         * author.$.firstName\n         *\n         * const firstName = replica.read(author.$.firstName)\n         * ```\n         */\n        get $() {\n            const $ = {};\n            this.$entity.forEachField((field, name) => {\n                $[name] = this.createFieldIdentifier(field);\n            });\n            if (DEBUG) {\n                const proxy = new Proxy($, {\n                    get(entity, property, receiver) {\n                        if (!entity[property])\n                            debug(new Error(`Attempt to read a missing field ${String(property)} on ${entity}`));\n                        entity[property].SOURCE_POINT = SourceLinePoint.fromThisCall();\n                        return entity[property];\n                    }\n                });\n                return defineProperty(this, '$', proxy);\n            }\n            else {\n                return defineProperty(this, '$', $);\n            }\n        }\n        /**\n         * A graph identifier, that represents the whole entity.\n         */\n        get $$() {\n            return defineProperty(this, '$$', MinimalEntityIdentifier.new({\n                name: this.$entityName,\n                entity: this.$entity,\n                calculation: this.calculateSelf,\n                context: this,\n                self: this,\n            }));\n        }\n        get $entityName() {\n            return this.constructor.name || this.$entity.name;\n        }\n        *calculateSelf() {\n            return this;\n        }\n        createFieldIdentifier(field) {\n            const name = field.name;\n            const entity = this.$entity;\n            const constructor = this.constructor;\n            const skeleton = entity.$skeleton;\n            if (!skeleton[name])\n                skeleton[name] = constructor.getIdentifierTemplateClass(this, field);\n            const identifier = new skeleton[name]();\n            identifier.context = this;\n            identifier.self = this;\n            identifier.name = `${this.$$.name}.$.${field.name}`;\n            return identifier;\n        }\n        forEachFieldIdentifier(func) {\n            this.$entity.forEachField((field, name) => func(this.$[name], name, field));\n        }\n        /**\n         * This method is called when entity is added to some replica.\n         *\n         * @param replica\n         */\n        enterGraph(replica) {\n            if (this.graph)\n                throw new Error('Already entered replica');\n            this.graph = replica;\n            replica.addIdentifier(this.$$);\n            this.$entity.forEachField((field, name) => {\n                const identifier = this.$[name];\n                replica.addIdentifier(identifier, identifier.DATA);\n                identifier.DATA = undefined;\n            });\n        }\n        /**\n         * This method is called when entity is removed from the replica it's been added to.\n         */\n        leaveGraph(graph) {\n            const ownGraph = this.graph;\n            const removeFrom = graph || ownGraph;\n            if (!removeFrom)\n                return;\n            this.$entity.forEachField((field, name) => removeFrom.removeIdentifier(this.$[name]));\n            removeFrom.removeIdentifier(this.$$);\n            if (removeFrom === ownGraph)\n                this.graph = undefined;\n        }\n        // isPropagating () {\n        //     return this.getGraph().isPropagating\n        // }\n        propagate(arg) {\n            return this.commit(arg);\n        }\n        /**\n         * This is a convenience method, that just delegates to the [[ChronoGraph.commit]] method of this entity's graph.\n         *\n         * If there's no graph (entity has not been added to any replica) a [[CommitZero]] constant will be returned.\n         */\n        commit(arg) {\n            const graph = this.graph;\n            if (!graph)\n                return CommitZero;\n            return graph.commit(arg);\n        }\n        async propagateAsync() {\n            return this.commitAsync();\n        }\n        /**\n         * This is a convenience method, that just delegates to the [[ChronoGraph.commitAsync]] method of this entity's graph.\n         *\n         * If there's no graph (entity has not been added to any replica) a resolved promise with [[CommitZero]] constant will be returned.\n         */\n        async commitAsync(arg) {\n            const graph = this.graph;\n            if (!graph)\n                return Promise.resolve(CommitZero);\n            return graph.commitAsync(arg);\n        }\n        /**\n         * An [[EntityMeta]] instance, representing the \"meta\" information about the entity class. It is shared among all instances\n         * of the class.\n         */\n        static get $entity() {\n            return ensureEntityOnPrototype(this.prototype);\n        }\n        static getIdentifierTemplateClass(me, field) {\n            const name = field.name;\n            const config = {\n                name: `${me.$$.name}.$.${name}`,\n                field: field\n            };\n            //------------------\n            if (field.hasOwnProperty('sync'))\n                config.sync = field.sync;\n            if (field.hasOwnProperty('lazy'))\n                config.lazy = field.lazy;\n            if (field.hasOwnProperty('equality'))\n                config.equality = field.equality;\n            //------------------\n            const calculationFunction = me.$calculations && me[me.$calculations[name]];\n            if (calculationFunction)\n                config.calculation = calculationFunction;\n            //------------------\n            const writeFunction = me.$writes && me[me.$writes[name]];\n            if (writeFunction)\n                config.write = writeFunction;\n            //------------------\n            const buildProposedFunction = me.$buildProposed && me[me.$buildProposed[name]];\n            if (buildProposedFunction) {\n                config.buildProposedValue = buildProposedFunction;\n                config.proposedValueIsBuilt = true;\n            }\n            //------------------\n            const template = field.getIdentifierClass(calculationFunction).new(config);\n            const TemplateClass = function () { };\n            TemplateClass.prototype = template;\n            return TemplateClass;\n        }\n        // unfortunately, the better typing:\n        // run <Name extends AllowedNames<this, AnyFunction>> (methodName : Name, ...args : Parameters<this[ Name ]>)\n        //     : ReturnType<this[ Name ]> extends CalculationIterator<infer Res> ? Res : ReturnType<this[ Name ]>\n        // yields \"types are exceedingly long and possibly infinite on the application side\n        run(methodName, ...args) {\n            const onEffect = (effect) => {\n                if (effect instanceof Identifier)\n                    return this.graph.read(effect);\n                throw new Error(\"Helper methods can not yield effects during computation\");\n            };\n            const transaction = this.graph.activeTransaction;\n            const prevActiveStack = transaction.activeStack;\n            transaction.activeStack = [];\n            const res = runGeneratorSyncWithEffect(onEffect, this[methodName], args, this);\n            transaction.activeStack = prevActiveStack;\n            return res;\n        }\n        static createPropertyAccessorsFor(fieldName) {\n            // idea is to indicate to the v8, that `propertyKey` is a constant and thus\n            // it can optimize access by it\n            const propertyKey = fieldName;\n            const target = this.prototype;\n            Object.defineProperty(target, propertyKey, {\n                get: function () {\n                    return this.$[propertyKey].getFromGraph(this.graph);\n                },\n                set: function (value) {\n                    this.$[propertyKey].writeToGraph(this.graph, value);\n                }\n            });\n        }\n        static createMethodAccessorsFor(fieldName) {\n            // idea is to indicate to the v8, that `propertyKey` is a constant and thus\n            // it can optimize access by it\n            const propertyKey = fieldName;\n            const target = this.prototype;\n            const getterFnName = `get${uppercaseFirst(propertyKey)}`;\n            const setterFnName = `set${uppercaseFirst(propertyKey)}`;\n            const putterFnName = `put${uppercaseFirst(propertyKey)}`;\n            if (!(getterFnName in target)) {\n                target[getterFnName] = function () {\n                    return this.$[propertyKey].getFromGraph(this.graph);\n                };\n            }\n            if (!(setterFnName in target)) {\n                target[setterFnName] = function (value, ...args) {\n                    this.$[propertyKey].writeToGraph(this.graph, value, ...args);\n                    return this.graph\n                        ?\n                            (this.graph.autoCommitMode === 'sync' ? this.graph.commit() : this.graph.commitAsync())\n                        :\n                            Promise.resolve(CommitZero);\n                };\n            }\n            if (!(putterFnName in target)) {\n                target[putterFnName] = function (value, ...args) {\n                    this.$[propertyKey].writeToGraph(this.graph, value, ...args);\n                };\n            }\n        }\n    }\n    return Entity;\n}) {\n}\n//---------------------------------------------------------------------------------------------------------------------\nexport const createEntityOnPrototype = (proto) => {\n    let parent = Object.getPrototypeOf(proto);\n    // the `hasOwnProperty` condition will be `true` for the `Entity` mixin itself\n    // if the parent is `Entity` mixin, then this is a top-level entity\n    return defineProperty(proto, '$entity', EntityMeta.new({\n        parentEntity: parent.hasOwnProperty(isEntityMarker) ? null : parent.$entity,\n        name: proto.constructor.name\n    }));\n};\n//---------------------------------------------------------------------------------------------------------------------\nexport const ensureEntityOnPrototype = (proto) => {\n    if (!proto.hasOwnProperty('$entity'))\n        createEntityOnPrototype(proto);\n    return proto.$entity;\n};\n/*\n * The \"generic\" field decorator, in the sense, that it allows specifying both field config and field class.\n * This means it can create any field instance.\n */\nexport const generic_field = (fieldConfig, fieldCls = Field) => {\n    return function (target, fieldName) {\n        const entity = ensureEntityOnPrototype(target);\n        const field = entity.addField(fieldCls.new(Object.assign(fieldConfig || {}, {\n            name: fieldName\n        })));\n        const cons = target.constructor;\n        cons.createPropertyAccessorsFor(fieldName);\n        cons.createMethodAccessorsFor(fieldName);\n    };\n};\n//---------------------------------------------------------------------------------------------------------------------\n/**\n * Field decorator. The type signature is:\n *\n * ```ts\n * field : <T extends typeof Field = typeof Field> (fieldConfig? : Partial<InstanceType<T>>, fieldCls : T | typeof Field = Field) => PropertyDecorator\n * ```\n * Its a function, that accepts field config object and optionally a field class (default is [[Field]]) and returns a property decorator.\n *\n * Example:\n *\n * ```ts\n * const ignoreCaseCompare = (a : string, b : string) : boolean => a.toUpperCase() === b.toUpperCase()\n *\n * class MyField extends Field {}\n *\n * class Author extends Entity.mix(Base) {\n *     @field({ equality : ignoreCaseCompare })\n *     firstName       : string\n *\n *     @field({ lazy : true }, MyField)\n *     lastName       : string\n * }\n * ```\n *\n * For every field, there are generated get and set accessors, with which you can read/write the data:\n *\n * ```ts\n * const author     = Author.new({ firstName : 'Mark' })\n *\n * author.firstName // Mark\n * author.lastName  = 'Twain'\n * ```\n *\n * The getters are basically using [[Replica.get]] and setters [[Replica.write]].\n *\n * Note, that if the identifier is asynchronous, reading from it will return a promise. But, immediately after the [[Replica.commit]] call, getter will return\n * plain value. This is a compromise between the convenience and correctness and this behavior may change (or made configurable) in the future.\n *\n * Additionally to the accessors, the getter and setter methods are generated. The getter method's name is formed as `get` followed by the field name\n * with upper-cased first letter. The setter's name is formed in the same way, with `set` prefix.\n *\n * The getter method is an exact equivalent of the get accessor. The setter method, in addition to data write, immediately after that\n * performs a call to [[Replica.commit]] (or [[Replica.commitAsync]], depending from the [[Replica.autoCommitMode]] option)\n * and return its result.\n *\n * ```ts\n * const author     = Author.new({ firstName : 'Mark' })\n *\n * author.getFirstName() // Mark\n * await author.setLastName('Twain') // issues asynchronous commit\n * ```\n */\nexport const field = generic_field;\n//---------------------------------------------------------------------------------------------------------------------\n/**\n * Decorator for the method, that calculates a value of some field\n *\n * ```ts\n *\n * @entity()\n * class Author extends Entity.mix(Base) {\n *     @field()\n *     firstName       : string\n *     @field()\n *     lastName        : string\n *     @field()\n *     fullName        : string\n *\n *     @calculate('fullName')\n *     calculateFullName () : string {\n *         return this.firstName + ' ' + this.lastName\n *     }\n * }\n * ```\n *\n * @param fieldName The name of the field the decorated method should be \"tied\" to.\n */\nexport const calculate = function (fieldName) {\n    // `target` will be a prototype of the class with Entity mixin\n    return function (target, propertyKey, _descriptor) {\n        ensureEntityOnPrototype(target);\n        let calculations;\n        if (!target.$calculations) {\n            calculations = target.$calculations = {};\n        }\n        else {\n            if (!target.hasOwnProperty('$calculations')) {\n                calculations = target.$calculations = Object.create(target.$calculations);\n            }\n            else\n                calculations = target.$calculations;\n        }\n        calculations[fieldName] = propertyKey;\n    };\n};\n//---------------------------------------------------------------------------------------------------------------------\nexport const write = function (fieldName) {\n    // `target` will be a prototype of the class with Entity mixin\n    return function (target, propertyKey, _descriptor) {\n        ensureEntityOnPrototype(target);\n        let writes;\n        if (!target.$writes) {\n            writes = target.$writes = {};\n        }\n        else {\n            if (!target.hasOwnProperty('$writes')) {\n                writes = target.$writes = Object.create(target.$writes);\n            }\n            else\n                writes = target.$writes;\n        }\n        writes[fieldName] = propertyKey;\n    };\n};\n//---------------------------------------------------------------------------------------------------------------------\nexport const build_proposed = function (fieldName) {\n    // `target` will be a prototype of the class with Entity mixin\n    return function (target, propertyKey, _descriptor) {\n        ensureEntityOnPrototype(target);\n        let buildProposed;\n        if (!target.$buildProposed) {\n            buildProposed = target.$buildProposed = {};\n        }\n        else {\n            if (!target.hasOwnProperty('$buildProposed')) {\n                buildProposed = target.$buildProposed = Object.create(target.$buildProposed);\n            }\n            else\n                buildProposed = target.$buildProposed;\n        }\n        buildProposed[fieldName] = propertyKey;\n    };\n};\n", "var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { CalculatedValueSync, Levels, QuarkSync } from \"../chrono/Identifier.js\";\nimport { isInstanceOf, Mixin } from \"../class/Mixin.js\";\nimport { Field } from \"../schema/Field.js\";\nimport { prototypeValue } from \"../util/Helpers.js\";\nimport { Entity, generic_field } from \"./Entity.js\";\nimport { FieldIdentifier } from \"./Identifier.js\";\n//---------------------------------------------------------------------------------------------------------------------\n/**\n * Mixin, for the identifier that represent a reference field of the entity. Requires the [[Field]] (or its subclass)\n * as a base class. See more about mixins: [[Mixin]]\n */\nexport class ReferenceField extends Mixin([Field], (base) => class ReferenceField extends base {\n    constructor() {\n        super(...arguments);\n        this.identifierCls = MinimalReferenceIdentifier;\n    }\n}) {\n}\n//---------------------------------------------------------------------------------------------------------------------\n/**\n * Specialized version of the [field](_replica_entity_.html#field) decorator, which should be used to mark the references.\n * All it does is replace the default value of the second argument to the [[ReferenceField]].\n *\n * ```ts\n * class Author extends Person {\n *     @bucket()\n *     books           : Set<Book>\n * }\n *\n * class Book extends Entity.mix(Base) {\n *     @reference({ bucket : 'books' })\n *     writtenBy       : Author\n * }\n * ```\n *\n * @param fieldConfig Object with the configuration properties\n * @param fieldCls Optional. Default value has been changed to [[ReferenceField]]\n */\nexport const reference = (fieldConfig, fieldCls = ReferenceField) => generic_field(fieldConfig, fieldCls);\n//---------------------------------------------------------------------------------------------------------------------\nexport class ReferenceIdentifier extends Mixin([FieldIdentifier], (base) => {\n    class ReferenceIdentifier extends base {\n        constructor() {\n            super(...arguments);\n            this.field = undefined;\n            this.proposedValueIsBuilt = true;\n        }\n        hasBucket() {\n            return Boolean(this.field.bucket);\n        }\n        getBucket(entity) {\n            return entity.$[this.field.bucket];\n        }\n        buildProposedValue(me, quark, transaction) {\n            const proposedValue = quark.proposedValue;\n            if (proposedValue === null)\n                return null;\n            const value = isInstanceOf(proposedValue, Entity) ? proposedValue : me.resolve(proposedValue);\n            if (value && me.hasBucket()) {\n                me.getBucket(value).addToBucket(transaction, me.self);\n            }\n            return value;\n        }\n        resolve(locator) {\n            const resolver = this.field.resolver;\n            return resolver ? resolver.call(this.self, locator) : null;\n        }\n        enterGraph(graph) {\n            if (this.hasBucket()) {\n                const value = graph.activeTransaction.readProposedOrPrevious(this);\n                if (value instanceof Entity) {\n                    // should probably involve `touchInvalidate` here\n                    this.getBucket(value).addToBucket(graph.activeTransaction, this.self);\n                }\n            }\n            super.enterGraph(graph);\n        }\n        leaveGraph(graph) {\n            if (this.hasBucket()) {\n                // here we only need to remove from the \"previous\", \"stable\" bucket, because\n                // the calculation for the removed reference won't be called - the possible `proposedValue` of reference will be ignored\n                const value = graph.activeTransaction.readProposedOrPrevious(this);\n                if (value instanceof Entity) {\n                    this.getBucket(value).removeFromBucket(graph.activeTransaction, this.self);\n                }\n            }\n            super.leaveGraph(graph);\n        }\n        write(me, transaction, q, proposedValue, ...args) {\n            const quark = q || transaction.acquireQuarkIfExists(me);\n            if (me.hasBucket()) {\n                if (quark) {\n                    const prevValue = quark.getValue();\n                    if (prevValue instanceof Entity) {\n                        me.getBucket(prevValue).removeFromBucket(transaction, me.self);\n                    }\n                }\n                else if (transaction.baseRevision.hasIdentifier(me)) {\n                    const value = transaction.readPrevious(me);\n                    if (value instanceof Entity) {\n                        me.getBucket(value).removeFromBucket(transaction, me.self);\n                    }\n                }\n            }\n            // we pass the `q` to super and not `quark`, because we don't do `getWriteTarget` (which increment the epoch)\n            // but only `acquireQuarkIfExists` (which does not)\n            super.write(me, transaction, q, proposedValue);\n        }\n    }\n    __decorate([\n        prototypeValue(Levels.DependsOnlyOnUserInput)\n    ], ReferenceIdentifier.prototype, \"level\", void 0);\n    __decorate([\n        prototypeValue(QuarkSync)\n    ], ReferenceIdentifier.prototype, \"quarkClass\", void 0);\n    return ReferenceIdentifier;\n}) {\n}\nexport class MinimalReferenceIdentifier extends ReferenceIdentifier.mix(FieldIdentifier.mix(CalculatedValueSync)) {\n}\n", "var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { CalculatedValueSync, Levels, QuarkSync } from \"../chrono/Identifier.js\";\nimport { Quark, TombStone } from \"../chrono/Quark.js\";\nimport { Mixin } from \"../class/Mixin.js\";\nimport { Field } from \"../schema/Field.js\";\nimport { prototypeValue } from \"../util/Helpers.js\";\nimport { generic_field } from \"./Entity.js\";\nimport { FieldIdentifier } from \"./Identifier.js\";\n//---------------------------------------------------------------------------------------------------------------------\n/**\n * Mixin, for the identifier that represent a reference bucket field of the entity. Requires the [[Field]] (or its subclass)\n * as a base class. See more about mixins: [[Mixin]]\n */\nexport class ReferenceBucketField extends Mixin([Field], (base) => class ReferenceBucketField extends base {\n    constructor() {\n        super(...arguments);\n        this.persistent = false;\n        this.identifierCls = MinimalReferenceBucketIdentifier;\n        // see comment for `ReferenceBucketIdentifier` declaration\n        // identifierCls       : FieldIdentifierConstructor    = ReferenceBucketIdentifier\n    }\n}) {\n}\n//---------------------------------------------------------------------------------------------------------------------\n/**\n * Specialized version of the [field](_replica_entity_.html#field) decorator, which should be used to mark the reference buckets.\n * All it does is replace the default value of the second argument to the [[ReferenceBucketField]].\n *\n * ```ts\n * class Author extends Person {\n *     @bucket()\n *     books           : Set<Book>\n * }\n *\n * class Book extends Entity.mix(Base) {\n *     @reference({ bucket : 'books' })\n *     writtenBy       : Author\n * }\n * ```\n *\n * @param fieldConfig Object with the field configuration properties\n * @param fieldCls Optional. Default value has been changed to [[ReferenceBucketField]]\n */\nexport const bucket = (fieldConfig, fieldCls = ReferenceBucketField) => generic_field(fieldConfig, fieldCls);\nvar BucketMutationType;\n(function (BucketMutationType) {\n    BucketMutationType[\"Add\"] = \"Add\";\n    BucketMutationType[\"Remove\"] = \"Remove\";\n})(BucketMutationType || (BucketMutationType = {}));\n//---------------------------------------------------------------------------------------------------------------------\nexport class ReferenceBucketQuark extends Mixin([Quark], (base) => class ReferenceBucketQuark extends base {\n    constructor() {\n        super(...arguments);\n        this.mutations = [];\n        this.previousValue = undefined;\n    }\n    hasProposedValueInner() {\n        return this.mutations.length > 0;\n    }\n}) {\n}\nexport const MinimalReferenceBucketQuark = ReferenceBucketQuark.mix(QuarkSync);\n//---------------------------------------------------------------------------------------------------------------------\nexport class ReferenceBucketIdentifier extends Mixin([FieldIdentifier], (base) => {\n    // Base class mismatch - should allow subclasses for base class requirements\n    // [ FieldIdentifier, CalculatedValueSync ],\n    // (base : AnyConstructor<FieldIdentifier & CalculatedValueSync, typeof FieldIdentifier & typeof CalculatedValueSync>) => {\n    class ReferenceBucketIdentifier extends base {\n        constructor() {\n            super(...arguments);\n            this.proposedValueIsBuilt = true;\n        }\n        addToBucket(transaction, entity) {\n            const quark = transaction.getWriteTarget(this);\n            quark.mutations.push({ type: BucketMutationType.Add, entity });\n            const baseRevision = transaction.baseRevision;\n            if (!quark.previousValue && baseRevision.hasIdentifier(this))\n                quark.previousValue = transaction.readPrevious(this);\n        }\n        removeFromBucket(transaction, entity) {\n            const preQuark = transaction.entries.get(this);\n            // if bucket is already removed - no need to remove from it\n            if (preQuark && preQuark.getValue() === TombStone)\n                return;\n            const quark = transaction.getWriteTarget(this);\n            quark.mutations.push({ type: BucketMutationType.Remove, entity });\n            const baseRevision = transaction.baseRevision;\n            if (!quark.previousValue && baseRevision.hasIdentifier(this))\n                quark.previousValue = transaction.readPrevious(this);\n        }\n        buildProposedValue(me, quarkArg, transaction) {\n            const quark = quarkArg;\n            const newValue = new Set(quark.previousValue);\n            for (let i = 0; i < quark.mutations.length; i++) {\n                const { type, entity } = quark.mutations[i];\n                if (type === BucketMutationType.Remove) {\n                    newValue.delete(entity);\n                }\n                else if (type === BucketMutationType.Add) {\n                    newValue.add(entity);\n                }\n            }\n            return newValue;\n        }\n        leaveGraph(graph) {\n            super.leaveGraph(graph);\n            this.DATA = undefined;\n        }\n    }\n    __decorate([\n        prototypeValue(Levels.DependsOnlyOnDependsOnlyOnUserInput)\n    ], ReferenceBucketIdentifier.prototype, \"level\", void 0);\n    __decorate([\n        prototypeValue(MinimalReferenceBucketQuark)\n    ], ReferenceBucketIdentifier.prototype, \"quarkClass\", void 0);\n    return ReferenceBucketIdentifier;\n}) {\n}\n//---------------------------------------------------------------------------------------------------------------------\nexport class MinimalReferenceBucketIdentifier extends ReferenceBucketIdentifier.mix(FieldIdentifier.mix(CalculatedValueSync)) {\n}\n// export class MinimalReferenceBucketIdentifier extends ReferenceBucketIdentifier.derive(CalculatedValueSync) {}\n", "import { Base } from \"../class/Base.js\";\nimport { ensureEntityOnPrototype } from \"../replica/Entity.js\";\n//---------------------------------------------------------------------------------------------------------------------\n/**\n * This class describes a schema. Schemas are not used yet in ChronoGraph.\n *\n * Schema is just a collection of entities ([[EntityMeta]])\n */\nexport class Schema extends Base {\n    constructor() {\n        super(...arguments);\n        this.entities = new Map();\n    }\n    /**\n     * Checks whether the schema has an entity with the given name.\n     *\n     * @param name\n     */\n    hasEntity(name) {\n        return this.entities.has(name);\n    }\n    /**\n     * Returns an entity with the given name or `undefined` if there's no such in this schema\n     *\n     * @param name\n     */\n    getEntity(name) {\n        return this.entities.get(name);\n    }\n    /**\n     * Adds an entity to the schema.\n     * @param entity\n     */\n    addEntity(entity) {\n        const name = entity.name;\n        if (!name)\n            throw new Error(`Entity must have a name`);\n        if (this.hasEntity(name))\n            throw new Error(`Entity with name [${String(name)}] already exists`);\n        entity.schema = this;\n        this.entities.set(name, entity);\n        return entity;\n    }\n    /**\n     * Returns a class decorator which can be used to decorate classes as entities.\n     */\n    getEntityDecorator() {\n        // @ts-ignore : https://github.com/Microsoft/TypeScript/issues/29828\n        return (target) => {\n            const entity = entityDecoratorBody(target);\n            this.addEntity(entity);\n            return target;\n        };\n    }\n}\nexport const entityDecoratorBody = (target) => {\n    const name = target.name;\n    if (!name)\n        throw new Error(`Can't add entity - the target class has no name`);\n    return ensureEntityOnPrototype(target.prototype);\n};\n/**\n * Entity decorator. It is required to be applied only if entity declares no field.\n * If record declares any field, there no strict need to apply this decorator.\n * Its better to do this anyway, for consistency.\n *\n * ```ts\n * @entity()\n * class Author extends Entity.mix(Base) {\n * }\n *\n * @entity()\n * class SpecialAuthor extends Author {\n * }\n * ```\n */\nexport const entity = () => {\n    // @ts-ignore : https://github.com/Microsoft/TypeScript/issues/29828\n    return (target) => {\n        entityDecoratorBody(target);\n        return target;\n    };\n};\n", "var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { TombStone } from \"../../ChronoGraph/chrono/Quark.js\";\nimport { isInstanceOf, Mixin } from \"../../ChronoGraph/class/BetterMixin.js\";\nimport { Entity, generic_field } from \"../../ChronoGraph/replica/Entity.js\";\nimport { FieldIdentifier, MinimalFieldIdentifierGen, MinimalFieldIdentifierSync, MinimalFieldVariable } from \"../../ChronoGraph/replica/Identifier.js\";\nimport { ReferenceField, ReferenceIdentifier } from \"../../ChronoGraph/replica/Reference.js\";\nimport { ReferenceBucketField, ReferenceBucketIdentifier } from \"../../ChronoGraph/replica/ReferenceBucket.js\";\nimport { ReadMode } from \"../../ChronoGraph/replica/Replica.js\";\nimport { Field } from \"../../ChronoGraph/schema/Field.js\";\nimport { isGeneratorFunction, prototypeValue } from \"../../ChronoGraph/util/Helpers.js\";\nimport DateHelper from \"../../Core/helper/DateHelper.js\";\nimport { QuarkSync } from \"../../ChronoGraph/chrono/Identifier.js\";\nexport const isSerializableEqual = function (oldValue, newValue) {\n    return oldValue === newValue ||\n        (newValue?.isBase ? this.serialize(newValue) : newValue) === (oldValue?.isBase ? this.serialize(oldValue) : oldValue);\n};\n//---------------------------------------------------------------------------------------------------------------------\nexport class ModelField extends Field {\n    constructor() {\n        super(...arguments);\n        this.modelFieldConfig = {};\n    }\n    getIdentifierClass(calculationFunction) {\n        if (this.identifierCls)\n            return this.identifierCls;\n        if (!calculationFunction)\n            return MinimalChronoModelFieldVariable;\n        return isGeneratorFunction(calculationFunction) ? MinimalChronoModelFieldIdentifierGen : MinimalChronoModelFieldIdentifierSync;\n    }\n}\n//---------------------------------------------------------------------------------------------------------------------\nexport class ModelReferenceField extends ReferenceField.mix(ModelField) {\n    constructor() {\n        super(...arguments);\n        this.identifierCls = ChronoModelReferenceFieldIdentifier;\n    }\n}\n//---------------------------------------------------------------------------------------------------------------------\n// it seems we don't need the buckets as Core fields, the `ModelBucketField` can be removed completely\nexport class ModelBucketField extends ReferenceBucketField.mix(Field) {\n    constructor() {\n        super(...arguments);\n        this.identifierCls = ChronoModelReferenceBucketFieldIdentifier;\n        // initialize (...args) {\n        //     super.initialize(...args)\n        //\n        //     // the default value is actually shared among all instances (which is ok, since its assumed to be immutable)\n        //     this.modelFieldConfig   = Object.assign({ isEqual : () => false, defaultValue : new Set(), persist : false }, this.modelFieldConfig)\n        // }\n    }\n}\n// eof Fields\n// Atoms\nexport const IsChronoModelSymbol = Symbol('IsChronoModelSymbol');\n//---------------------------------------------------------------------------------------------------------------------\nexport class ChronoModelFieldIdentifier extends Mixin([FieldIdentifier], (base) => {\n    const superProto = base.prototype;\n    class ChronoModelFieldIdentifier extends base {\n        [IsChronoModelSymbol]() { }\n        getFromGraph(graph) {\n            if (graph) {\n                if (graph.readMode === ReadMode.CurrentOrProposedOrPrevious) {\n                    const higherLevel = graph.isCommitting && this.level > (graph.activeTransaction.getActiveEntry()?.level ?? Number.MAX_SAFE_INTEGER);\n                    if (this.sync && !this.context.project.isDelayingCalculation && !higherLevel)\n                        return graph.get(this);\n                    else\n                        return graph.activeTransaction.readCurrentOrProposedOrPrevious(this);\n                }\n                return superProto.getFromGraph.call(this, graph);\n            }\n            else\n                return this.DATA;\n        }\n        writeToGraph(graph, proposedValue, ...args) {\n            if (graph) {\n                superProto.writeToGraph.call(this, graph, proposedValue, ...args);\n            }\n            else {\n                this.DATA = proposedValue;\n                // Avoid calling set if we are already setting, or if this is the initial assign of data\n                // (in both cases the underlying data will be correct already)\n                //@ts-ignore\n                if (!this.self.inSetting && !this.self.isConstructing) {\n                    //@ts-ignore\n                    this.self.set(this.field.name, proposedValue, false, false, true);\n                }\n            }\n        }\n        write(me, transaction, quark, proposedValue, ...args) {\n            // convert proposed value if needed\n            proposedValue = me.convert(proposedValue);\n            superProto.write.call(this, me, transaction, quark, proposedValue, ...args);\n        }\n        convert(value) {\n            const field = this.field;\n            const fieldDefinition = this.self.getFieldDefinition(field.name);\n            // use field definition provided \"convert\" function\n            if (fieldDefinition?.convert) {\n                value = fieldDefinition.convert(value, this.context.data, this.context);\n                // fallback to atom defined \"converter\"\n            }\n            else if (field.converter) {\n                value = field.converter(value, field);\n            }\n            return value;\n        }\n        equality(v1, v2) {\n            if ((v1 instanceof Date) && (v2 instanceof Date))\n                return v1.getTime() === v2.getTime();\n            return v1 === v2;\n        }\n    }\n    __decorate([\n        prototypeValue(false)\n    ], ChronoModelFieldIdentifier.prototype, \"sync\", void 0);\n    return ChronoModelFieldIdentifier;\n}) {\n}\n//---------------------------------------------------------------------------------------------------------------------\nexport class ChronoModelReferenceFieldQuark extends Mixin([QuarkSync], (base) => {\n    const superProto = base.prototype;\n    class ChronoModelReferenceFieldQuark extends base {\n        setValue(value) {\n            superProto.setValue.call(this, value);\n            // keep the copy of value on the identifier itself, to make it available\n            // after the identifier is removed from the graph\n            //@ts-ignore\n            if (value !== TombStone)\n                this.identifier.DATA = value;\n        }\n    }\n    return ChronoModelReferenceFieldQuark;\n}) {\n}\nexport class ChronoModelReferenceFieldIdentifier extends ReferenceIdentifier.mix(ChronoModelFieldIdentifier.mix(MinimalFieldIdentifierSync)) {\n    buildProposedValue(me, q, transaction) {\n        const quark = q;\n        const proposedValue = quark.proposedValue;\n        if (proposedValue === null || proposedValue === undefined) {\n            transaction.candidate.failedResolutionReferences.delete(quark.identifier);\n            return null;\n        }\n        // ignore the given Entity, if it's not in the graph\n        // (should be treated as unresolved id)\n        if (isInstanceOf(proposedValue, Entity) && proposedValue.graph) {\n            if (me.hasBucket())\n                me.getBucket(proposedValue).addToBucket(transaction, me.self);\n            transaction.candidate.failedResolutionReferences.delete(quark.identifier);\n            return proposedValue;\n        }\n        const resolved = me.resolve(proposedValue);\n        // ignore the given Entity, if it's not in the graph\n        // (should be treated as unresolved id)\n        if (isInstanceOf(resolved, Entity) && resolved.graph) {\n            if (me.hasBucket())\n                me.getBucket(resolved).addToBucket(transaction, me.self);\n            transaction.candidate.failedResolutionReferences.delete(quark.identifier);\n            return resolved;\n        }\n        else {\n            transaction.candidate.failedResolutionReferences.set(quark.identifier, proposedValue);\n            return null;\n        }\n    }\n}\n__decorate([\n    prototypeValue(true)\n], ChronoModelReferenceFieldIdentifier.prototype, \"sync\", void 0);\n__decorate([\n    prototypeValue(ChronoModelReferenceFieldQuark)\n], ChronoModelReferenceFieldIdentifier.prototype, \"quarkClass\", void 0);\n//---------------------------------------------------------------------------------------------------------------------\nexport class ChronoModelReferenceBucketFieldIdentifier extends ReferenceBucketIdentifier.mix(ChronoModelFieldIdentifier.mix(MinimalFieldIdentifierSync)) {\n}\n__decorate([\n    prototypeValue(true)\n], ChronoModelReferenceBucketFieldIdentifier.prototype, \"sync\", void 0);\nexport class MinimalChronoModelFieldIdentifierSync extends ChronoModelFieldIdentifier.mix(MinimalFieldIdentifierSync) {\n}\nexport class MinimalChronoModelFieldIdentifierGen extends ChronoModelFieldIdentifier.mix(MinimalFieldIdentifierGen) {\n}\nexport class MinimalChronoModelFieldVariable extends ChronoModelFieldIdentifier.mix(MinimalFieldVariable) {\n}\n// eof Atoms\nexport const model_field = function (modelFieldConfig = {}, chronoFieldConfig = {}, chronoFieldClass = ModelField) {\n    return function (target, propertyKey) {\n        const decoratorFn = generic_field({ modelFieldConfig, ...chronoFieldConfig }, chronoFieldClass);\n        decoratorFn(target, propertyKey);\n        injectStaticFieldsProperty(target.constructor);\n    };\n};\nexport const injectStaticFieldsProperty = (prototype) => {\n    if (!prototype.hasOwnProperty('fields')) {\n        Object.defineProperty(prototype, 'fields', {\n            get: function () {\n                return getDecoratedModelFields(this);\n            }\n        });\n    }\n};\nexport const getDecoratedModelFields = (constr) => {\n    const proto = constr.prototype;\n    const result = [];\n    if (proto.hasOwnProperty('$entity')) {\n        proto.$entity.ownFields.forEach((field) => {\n            if (field instanceof ModelField) {\n                const config = field.modelFieldConfig || {};\n                if (!config.convert && field.converter && field.converter !== dateConverter) {\n                    config.convert = field.converter;\n                }\n                result.push(Object.assign(config, {\n                    $chrono: field,\n                    name: field.name\n                }));\n            }\n        });\n    }\n    return result;\n};\nexport const dateConverter = (date, field) => {\n    if (date === null) {\n        return null;\n    }\n    if (!(date instanceof Date)) {\n        date = DateHelper.parse(date, field.modelFieldConfig?.format || field.modelFieldConfig?.dateFormat ||\n            DateHelper.defaultParseFormat);\n    }\n    // if parsing has failed, we would like to return `undefined` to indicate the \"absence\" of data\n    // instead of `null` (presence of \"empty\" data)\n    return date || undefined;\n};\n", "import { Mixin } from \"../../ChronoGraph/class/BetterMixin.js\";\nimport { Entity } from \"../../ChronoGraph/replica/Entity.js\";\nimport Model from \"../../Core/data/Model.js\";\nimport ObjectHelper from \"../../Core/helper/ObjectHelper.js\";\nimport { ProposedOrPrevious } from \"../../ChronoGraph/chrono/Effect.js\";\nimport { ChronoModelReferenceBucketFieldIdentifier, ChronoModelReferenceFieldIdentifier } from \"./ModelFieldAtom.js\";\n/**\n * This is a base mixin, which mixes together the ChronoGraph's [Entity](https://bryntum.com/products/gantt/docs/engine/modules/_lib_chronograph_replica_entity_.html)\n * and the Bryntum Core [Model](https://bryntum.com/products/grid/docs/api/Core/data/Model)\n *\n * It is used as a very base mixin for all other entities in the project.\n */\nexport class ChronoModelMixin extends Mixin([Entity, Model], (base) => {\n    const superProto = base.prototype;\n    class ChronoModelMixin extends base {\n        // This is a marker for Models which have the Engine API available.\n        get isEntity() {\n            return true;\n        }\n        construct(config, ...args) {\n            // this is to force the fields creation, because we need all fields to be created\n            // for the `this.getFieldDefinition()` to return correct result\n            // @ts-ignore\n            this.constructor.exposeProperties();\n            // Cache original data before we recreate the incoming data here.\n            this.originalData = (config = config || {});\n            // Populate record with all data, it will sort the configs out.\n            // By doing this first, we can feed engine the converted values right away. Needed to satisfy tests that\n            // use standalone stores, otherwise they will be getting the unconverted values since there is no graph.\n            superProto.construct.call(this, config, ...args);\n            // assign Chronograph fields that are not Model fields\n            for (const fieldName in this.originalData) {\n                if (this.$[fieldName] && !this.getFieldDefinition(fieldName)) {\n                    this[fieldName] = config[fieldName];\n                }\n            }\n        }\n        /**\n         * Calculation function that simply returns current ([[ProposedOrPrevious|proposed or previous]]) value of\n         * an identifier.\n         */\n        *userProvidedValue() {\n            return yield ProposedOrPrevious;\n        }\n        copy(newId = null, deep = null) {\n            const copy = superProto.copy.call(this, newId, deep);\n            const { creatingOccurrence } = deep ?? {};\n            // If deep is everything but object - use default behavior, which is to invoke accessors\n            // If deep is an object, check if it has certain field disabled\n            if ((ObjectHelper.isObject(deep) && !deep.skipFieldIdentifiers) || !ObjectHelper.isObject(deep)) {\n                this.forEachFieldIdentifier((identifier, fieldName, field) => {\n                    if (!field.lazy &&\n                        // @ts-ignore\n                        this.getFieldDefinition(fieldName)?.type !== 'store' && (!creatingOccurrence\n                        // Only include buckets and references for occurrences, they will not be part of graph and\n                        // will handle their own dates etc\n                        || identifier instanceof ChronoModelReferenceBucketFieldIdentifier\n                        || identifier instanceof ChronoModelReferenceFieldIdentifier)) {\n                        copy[fieldName] = this[fieldName];\n                    }\n                });\n            }\n            return copy;\n        }\n        applyValue(useProp, key, value, skipAccessors, field) {\n            // key is the dataSource, we need to check for the field name instead\n            const chronoField = this.$entity.getField(field?.name || key);\n            if (chronoField)\n                useProp = true;\n            if (skipAccessors)\n                useProp = false;\n            superProto.applyValue.call(this, useProp, useProp ? field?.name ?? key : key, value, skipAccessors, field);\n        }\n        get isInActiveTransaction() {\n            // Might not have joined graph when using delayed calculation\n            const activeTransaction = this.graph?.activeTransaction;\n            return Boolean(activeTransaction?.getLatestEntryFor(this.$$));\n        }\n        get data() {\n            return this._data;\n        }\n        set data(data) {\n            this._data = data;\n            // Have to iterate over defined fields and not keys in supplied data, in case nested mappings are used\n            const { fields, $, graph, generation } = this;\n            for (let i = 0; i < fields.length; i++) {\n                const { name, dataSource, complexMapping } = fields[i];\n                const identifier = $[name];\n                if (identifier) {\n                    const value = complexMapping\n                        ? ObjectHelper.getPath(data, dataSource)\n                        : data[dataSource];\n                    // Avoid hitting setter for fields that have no value in supplied data, or are undefined on initial set\n                    if ((complexMapping || dataSource in data) && (generation != null || value !== undefined)) {\n                        // Use the predefined name for engine (name, startDate)\n                        identifier.writeToGraph(graph, value);\n                    }\n                }\n            }\n        }\n        get $entityName() {\n            const className = this.constructor.name || this.$entity.name;\n            const id = this.id;\n            return `${className}${id != null ? '-' + String(id) : ''}`;\n        }\n    }\n    return ChronoModelMixin;\n}) {\n}\n", "import LocaleHelper from '../../Core/localization/LocaleHelper.js';\nconst locale = {\n    localeName: 'En',\n    localeDesc: 'English (US)',\n    localeCode: 'en-US',\n    RemoveDependencyCycleEffectResolution: {\n        descriptionTpl: 'Remove dependency'\n    },\n    DeactivateDependencyCycleEffectResolution: {\n        descriptionTpl: 'Deactivate dependency'\n    },\n    CycleEffectDescription: {\n        descriptionTpl: 'A cycle has been found, formed by: {0}'\n    },\n    EmptyCalendarEffectDescription: {\n        descriptionTpl: '\"{0}\" calendar does not provide any working time intervals.'\n    },\n    Use24hrsEmptyCalendarEffectResolution: {\n        descriptionTpl: 'Use 24 hours calendar with non-working Saturdays and Sundays.'\n    },\n    Use8hrsEmptyCalendarEffectResolution: {\n        descriptionTpl: 'Use 8 hours calendar (08:00-12:00, 13:00-17:00) with non-working Saturdays and Sundays.'\n    },\n    ConflictEffectDescription: {\n        descriptionTpl: 'A scheduling conflict has been found: {0} is conflicting with {1}'\n    },\n    ConstraintIntervalDescription: {\n        dateFormat: 'LLL'\n    },\n    ProjectConstraintIntervalDescription: {\n        startDateDescriptionTpl: 'Project start date {0}',\n        endDateDescriptionTpl: 'Project end date {0}'\n    },\n    DependencyType: {\n        long: [\n            'Start-to-Start',\n            'Start-to-Finish',\n            'Finish-to-Start',\n            'Finish-to-Finish'\n        ]\n    },\n    ManuallyScheduledParentConstraintIntervalDescription: {\n        startDescriptionTpl: 'Manually scheduled \"{2}\" forces its children to start no earlier than {0}',\n        endDescriptionTpl: 'Manually scheduled \"{2}\" forces its children to finish no later than {1}'\n    },\n    DisableManuallyScheduledConflictResolution: {\n        descriptionTpl: 'Disable manual scheduling for \"{0}\"'\n    },\n    DependencyConstraintIntervalDescription: {\n        descriptionTpl: 'Dependency ({2}) from \"{3}\" to \"{4}\"'\n    },\n    RemoveDependencyResolution: {\n        descriptionTpl: 'Remove dependency from \"{1}\" to \"{2}\"'\n    },\n    DeactivateDependencyResolution: {\n        descriptionTpl: 'Deactivate dependency from \"{1}\" to \"{2}\"'\n    },\n    DateConstraintIntervalDescription: {\n        startDateDescriptionTpl: 'Task \"{2}\" {3} {0} constraint',\n        endDateDescriptionTpl: 'Task \"{2}\" {3} {1} constraint',\n        constraintTypeTpl: {\n            startnoearlierthan: 'Start-No-Earlier-Than',\n            finishnoearlierthan: 'Finish-No-Earlier-Than',\n            muststarton: 'Must-Start-On',\n            mustfinishon: 'Must-Finish-On',\n            startnolaterthan: 'Start-No-Later-Than',\n            finishnolaterthan: 'Finish-No-Later-Than'\n        }\n    },\n    RemoveDateConstraintConflictResolution: {\n        descriptionTpl: 'Remove \"{1}\" constraint of task \"{0}\"'\n    }\n};\nexport default LocaleHelper.publishLocale(locale);\n", "import { MAX_DATE, MIN_DATE } from '../util/Constants.js';\nimport { EdgeInclusion } from \"../util/Types.js\";\nimport { Base } from '../../ChronoGraph/class/Base.js';\n/**\n * General purpose date interval. Contains just 2 properties - [[startDate]] and [[endDate]].\n */\nexport class DateInterval extends Base {\n    initialize(...args) {\n        super.initialize(...args);\n        if (!this.startDate)\n            this.startDate = MIN_DATE;\n        if (!this.endDate)\n            this.endDate = MAX_DATE;\n    }\n    equalTo(another) {\n        return this.startDate.getTime() === another.startDate.getTime() && this.endDate.getTime() === another.endDate.getTime();\n    }\n    isInfinite() {\n        return this.startDate.getTime() === MIN_DATE.getTime() && this.endDate.getTime() === MAX_DATE.getTime();\n    }\n    startDateIsFinite() {\n        return !this.isIntervalEmpty() && this.startDate.getTime() !== MIN_DATE.getTime();\n    }\n    endDateIsFinite() {\n        return !this.isIntervalEmpty() && this.endDate.getTime() !== MAX_DATE.getTime();\n    }\n    /**\n     * Test whether the given time point is within this interval. By default interval is considered to be\n     * inclusive on the left side and opened on the right (controlled with `edgeInclusion`).\n     *\n     * @param date\n     * @param edgeInclusion\n     */\n    containsDate(date, edgeInclusion = EdgeInclusion.Left) {\n        return ((edgeInclusion === EdgeInclusion.Left && (date >= this.startDate && date < this.endDate))\n            ||\n                (edgeInclusion === EdgeInclusion.Right && (date > this.startDate && date <= this.endDate)));\n    }\n    isIntervalEmpty() {\n        return this.startDate > this.endDate;\n    }\n    /**\n     * Intersect this interval with another in the immutable way - returns a new interval.\n     * @param another\n     */\n    intersect(another) {\n        const anotherStart = another.startDate;\n        const anotherEnd = another.endDate;\n        const start = this.startDate;\n        const end = this.endDate;\n        // No intersection found\n        if ((end < anotherStart) || (start > anotherEnd)) {\n            // return an empty interval\n            return EMPTY_INTERVAL;\n        }\n        const newStart = new Date(Math.max(start.getTime(), anotherStart.getTime()));\n        const newEnd = new Date(Math.min(end.getTime(), anotherEnd.getTime()));\n        return this.constructor.new({ startDate: newStart, endDate: newEnd });\n    }\n    /**\n     * Intersect this interval with another in the mutable way - updates current interval.\n     * @param another\n     */\n    intersectMut(another, collectIntersectionMeta = false) {\n        const anotherStart = another.startDate;\n        const anotherEnd = another.endDate;\n        const start = this.startDate;\n        const end = this.endDate;\n        // If another interval is an intersection result we keep track of the\n        // initial intersected intervals\n        if (collectIntersectionMeta) {\n            if (!this.intersectionOf)\n                this.intersectionOf = new Set();\n            if (another.intersectionOf?.size > 0) {\n                // this.intersectionOf = new Set([ ...this.intersectionOf, ...another.intersectionOf ])\n                another.intersectionOf.forEach(this.intersectionOf.add, this.intersectionOf);\n                this.intersectedAsEmpty = another.intersectedAsEmpty;\n            }\n            // keep track if the intervals we intersect with\n            else {\n                this.intersectionOf.add(another);\n            }\n        }\n        // Bail out if we are an empty interval\n        if (!this.isIntervalEmpty()) {\n            // No intersection found\n            if ((end < anotherStart) || (start > anotherEnd)) {\n                // return an empty interval\n                this.startDate = MAX_DATE;\n                this.endDate = MIN_DATE;\n                // remember the interval resulted an empty intersection\n                if (collectIntersectionMeta) {\n                    this.intersectedAsEmpty = another;\n                }\n                return this;\n            }\n            this.startDate = new Date(Math.max(start.getTime(), anotherStart.getTime()));\n            this.endDate = new Date(Math.min(end.getTime(), anotherEnd.getTime()));\n        }\n        return this;\n    }\n    getCopyProperties(data) {\n        return data;\n    }\n    copyWith(data) {\n        const copyData = this.getCopyProperties(data);\n        // @ts-ignore\n        return this.constructor.new(copyData);\n    }\n}\nexport const EMPTY_INTERVAL = DateInterval.new({ startDate: MAX_DATE, endDate: MIN_DATE });\n/**\n * Intersects the array of intervals. Returns a new interval with result.\n *\n * @param dateIntervals\n */\nexport const intersectIntervals = (dateIntervals, collectIntersectionMeta = false) => {\n    return dateIntervals.reduce((acc, currentInterval) => acc.intersectMut(currentInterval, collectIntersectionMeta), DateInterval.new());\n};\n", "var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Effect } from \"../../ChronoGraph/chrono/Effect.js\";\nimport { prototypeValue } from \"../../ChronoGraph/util/Helpers.js\";\nimport Base from \"../../Core/Base.js\";\n/**\n * Type for an effect resolution process.\n */\nexport var EffectResolutionResult;\n(function (EffectResolutionResult) {\n    /**\n     * A chosen resolution is \"do nothing\" so changes should be cancelled.\n     */\n    EffectResolutionResult[\"Cancel\"] = \"Cancel\";\n    /**\n     * A resolution is applied and current transaction should be continued.\n     */\n    EffectResolutionResult[\"Resume\"] = \"Resume\";\n})(EffectResolutionResult || (EffectResolutionResult = {}));\n/**\n * Class implementing a [[SchedulingIssueEffect|scheduling issue]] resolution.\n */\nexport class SchedulingIssueEffectResolution extends Base {\n    /**\n     * Returns the resolution description.\n     */\n    getDescription() {\n        throw new Error('Abstract method');\n    }\n    /**\n     * Resolves the [[SchedulingIssueEffect|scheduling issue]].\n     */\n    resolve(...args) {\n        throw new Error('Abstract method');\n    }\n}\n/**\n * Base class for an [[Effect|effect]] signalizing of a scheduling issue\n * that should be resolved by some application logic or the user.\n * The class provides an array of the case possible [[getResolutions|resolutions]]\n * and the case [[getDescription|description]].\n */\nexport class SchedulingIssueEffect extends Effect {\n    /**\n     * Returns the list of possible effect resolutions.\n     */\n    getResolutions() {\n        return this._resolutions;\n    }\n    getDescriptionBuilderClass() {\n        return this._descriptionBuilderClass;\n    }\n    setDescriptionBuilderClass(cls) {\n        this._descriptionBuilderClass = cls;\n    }\n    /**\n     * Returns the effect human readable description.\n     */\n    getDescription() {\n        return this.getDescriptionBuilderClass().getDescription(this);\n    }\n}\n__decorate([\n    prototypeValue('schedulingIssueEffect')\n], SchedulingIssueEffect.prototype, \"type\", void 0);\n__decorate([\n    prototypeValue(false)\n], SchedulingIssueEffect.prototype, \"sync\", void 0);\n", "var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { prototypeValue } from \"../../ChronoGraph/util/Helpers.js\";\nimport Base from \"../../Core/Base.js\";\nimport DateHelper from \"../../Core/helper/DateHelper.js\";\nimport Localizable from \"../../Core/localization/Localizable.js\";\nimport \"../localization/En.js\";\nimport { DateInterval, intersectIntervals } from \"../scheduling/DateInterval.js\";\nimport { format } from \"../util/Functions.js\";\nimport { SchedulingIssueEffect, SchedulingIssueEffectResolution } from \"./SchedulingIssueEffect.js\";\n//---------------------------------------------------------------------------------------------------------------------\nexport const ConflictSymbol = Symbol('ConflictSymbol');\n/**\n * Description builder for a [[ConflictEffect|scheduling conflict]].\n */\nexport class ConflictEffectDescription extends Localizable(Base) {\n    static get $name() {\n        return 'ConflictEffectDescription';\n    }\n    /**\n     * Returns the scheduling conflict localized description.\n     * @param conflict Scheduling conflict\n     */\n    static getDescription(conflict) {\n        return format(this.L('L{descriptionTpl}'), conflict.intervals[0].getDescription(), conflict.intervals[1].getDescription());\n    }\n}\n/**\n * Special [[Effect|effect]] indicating a _scheduling conflict_ happened.\n */\nexport class ConflictEffect extends SchedulingIssueEffect {\n    constructor() {\n        super(...arguments);\n        this.handler = ConflictSymbol;\n    }\n    initialize(props) {\n        super.initialize(props);\n        // filter the provided intervals to keep only the conflicting ones\n        this.intervals = this.filterConflictingIntervals(this.intervals);\n    }\n    /**\n     * Returns possible resolutions for the _conflict_.\n     */\n    getResolutions() {\n        if (!this._resolutions) {\n            // collect all possible resolutions\n            this._resolutions = [].concat(...this.intervals.map(interval => interval.getResolutions()));\n        }\n        return this._resolutions;\n    }\n    filterConflictingIntervals(intervals) {\n        const result = [];\n        // filter out infinite intervals ..they don't really restrict anything\n        const intervalsArray = [...intervals].filter(interval => !interval.isInfinite());\n        const affectedInterval = intervalsArray.find(interval => interval.isAffectedByTransaction());\n        // If we've managed to detect the interval being changed in this transaction\n        if (affectedInterval) {\n            // Sort intervals so the one we've found go first..\n            const sorted = intervalsArray.sort((a, b) => a === affectedInterval ? -1 : 0);\n            // ..so when intersecting intervals we find another interval resulting an empty intersection\n            const intersection = intersectIntervals(sorted, true);\n            const conflictingInterval = intersection.intersectedAsEmpty;\n            result.push(conflictingInterval, affectedInterval);\n        }\n        else {\n            result.push(intersectIntervals(intervalsArray, true).intersectedAsEmpty, intersectIntervals(intervalsArray.reverse(), true).intersectedAsEmpty);\n        }\n        return result;\n    }\n}\n__decorate([\n    prototypeValue('schedulingConflict')\n], ConflictEffect.prototype, \"type\", void 0);\n__decorate([\n    prototypeValue(ConflictEffectDescription)\n], ConflictEffect.prototype, \"_descriptionBuilderClass\", void 0);\n/**\n * An abstract class for implementing a certain way of resolving a scheduling conflict.\n */\nexport class ConflictResolution extends SchedulingIssueEffectResolution {\n    /**\n     * Resolves the scheduling conflict.\n     */\n    resolve() {\n        throw new Error('Abstract method');\n    }\n}\n/**\n * Base class for an interval _description builder_ - s special class that returns\n * a human readable localized description for a provided interval.\n */\nexport class ConstraintIntervalDescription extends Localizable(Base) {\n    static get $name() {\n        return 'ConstraintIntervalDescription';\n    }\n    /**\n     * Returns the provided interval description.\n     * @param interval Interval to get description of\n     */\n    static getDescription(interval) {\n        return format(this.L('L{descriptionTpl}'), ...this.getDescriptionParameters(interval));\n    }\n    /**\n     * Returns additional parameters to put into the description.\n     * @param interval Interval to get description of\n     */\n    static getDescriptionParameters(interval) {\n        return [\n            DateHelper.format(interval.startDate, this.L('L{dateFormat}')),\n            DateHelper.format(interval.endDate, this.L('L{dateFormat}'))\n        ];\n    }\n}\n/**\n * Base class for implementing an interval that applies a certain constraint on event(s).\n */\nexport class ConstraintInterval extends DateInterval {\n    constructor() {\n        super(...arguments);\n        this.owner = undefined;\n        this.reflectionOf = undefined;\n        this.side = undefined;\n        this.resolutions = undefined;\n    }\n    get isConstraintInterval() {\n        return true;\n    }\n    /**\n     * Returns the interval description.\n     */\n    getDescription() {\n        return this.descriptionBuilderClass.getDescription(this);\n    }\n    /**\n     * Returns possible resolution for the interval when it takes part in a _scheduling conflict_.\n     */\n    getResolutions() {\n        return [];\n    }\n    isAffectedByTransaction(transaction) {\n        return false;\n    }\n    getCopyProperties(data) {\n        const { owner, reflectionOf, side } = this;\n        return Object.assign({ owner, reflectionOf, side }, data);\n    }\n}\n__decorate([\n    prototypeValue(ConstraintIntervalDescription)\n], ConstraintInterval.prototype, \"descriptionBuilderClass\", void 0);\n", "import { Mixin } from \"../../ChronoGraph/class/BetterMixin.js\";\nimport { AbstractPartOfProjectGenericMixin } from \"./AbstractPartOfProjectGenericMixin.js\";\n/**\n * This a base generic mixin for every class, that belongs to a chronograph powered project.\n *\n * It just provides getter/setter for the `project` property, along with some convenience methods\n * to access the project's stores.\n */\nexport class ChronoPartOfProjectGenericMixin extends Mixin([AbstractPartOfProjectGenericMixin], (base) => {\n    const superProto = base.prototype;\n    class ChronoPartOfProjectGenericMixin extends base {\n        /**\n         * The method to get the `ChronoGraph` instance, this entity belongs to.\n         */\n        getGraph() {\n            const project = this.getProject();\n            return project?.getGraph();\n        }\n        //region Entity getters\n        /**\n         * Convenience method to get the instance of event by its id.\n         */\n        getEventById(id) {\n            return this.getEventStore()?.getById(id);\n        }\n        /**\n         * Convenience method to get the instance of dependency by its id.\n         */\n        getDependencyById(id) {\n            return this.getDependencyStore()?.getById(id);\n        }\n        /**\n         * Convenience method to get the instance of resource by its id.\n         */\n        getResourceById(id) {\n            return this.getResourceStore()?.getById(id);\n        }\n        /**\n         * Convenience method to get the instance of assignment by its id.\n         */\n        getAssignmentById(id) {\n            return this.getAssignmentStore()?.getById(id);\n        }\n        /**\n         * Convenience method to get the instance of calendar by its id.\n         */\n        getCalendarById(id) {\n            return this.getCalendarManagerStore()?.getById(id);\n        }\n    }\n    return ChronoPartOfProjectGenericMixin;\n}) {\n}\n", "import { Mixin } from \"../../../../ChronoGraph/class/BetterMixin.js\";\nimport Store from \"../../../../Core/data/Store.js\";\nexport class ChronoStoreMixin extends Mixin([Store], (base) => class ChronoStoreMixin extends base {\n}) {\n}\n", "import { Mixin } from \"../../../../ChronoGraph/class/BetterMixin.js\";\nimport { ChronoPartOfProjectGenericMixin } from \"../../ChronoPartOfProjectGenericMixin.js\";\nimport { ChronoStoreMixin } from \"./ChronoStoreMixin.js\";\nimport { AbstractPartOfProjectStoreMixin } from \"./AbstractPartOfProjectStoreMixin.js\";\n/**\n * This a base mixin for every Store, that belongs to a ChronoGraph powered project.\n */\nexport class ChronoPartOfProjectStoreMixin extends Mixin([\n    AbstractPartOfProjectStoreMixin,\n    ChronoPartOfProjectGenericMixin,\n    ChronoStoreMixin\n], (base) => {\n    const superProto = base.prototype;\n    class ChronoPartOfProjectStoreMixin extends base {\n        constructor() {\n            super(...arguments);\n            this.removalOrder = 0;\n        }\n        setStoreData(data) {\n            // Inform project that a store is being repopulated, to avoid expensive unjoins.\n            // Should not repopulate when using syncDataOnLoad\n            this.project?.repopulateStore(this);\n            superProto.setStoreData.call(this, data);\n        }\n        register(record) {\n            superProto.register.call(this, record);\n            // NOTE: Remove check for `this.project.graph` if we want records added after the initial calculations to also have\n            //       delayed entry into the replica\n            // @ts-ignore\n            !record.isRoot && !this.project?.graph && this.project?.scheduleDelayedCalculation();\n        }\n        onModelChange(record, toSet, wasSet, silent, fromRelationUpdate, skipAccessors) {\n            // 1. call will forward value to the chrono, leaving model.data intact\n            // 2. value was changed, so model.afterChange is called too, triggering `update` event on store\n            // 3. autoCommit is scheduled\n            // 4. autoCommit finalizes, calling endBatch\n            // 5. endBatch calls `set` again, passing argument `skipAccessors = true`, which means data will be set to\n            // the `model.data` now\n            // 6. since value differs in chrono and in model.data, `afterChange` will be called once again\n            // Naturally this leads to two identical events being fired for this call:\n            // `dependency.set('type', 0)\n            //\n            // Idea of the fix is to mute events for the first call IF chrono field is in the `wasSet` object\n            // Covered by DependencyEdit.t.js\n            if (!skipAccessors && !(this.syncDataOnLoad && this.isLoadingData) && Object.keys(wasSet).some(key => key !== 'intervals' && record.$entity.getField(key))) {\n                silent = true;\n            }\n            //@ts-ignore\n            super.onModelChange(record, toSet, wasSet, silent, fromRelationUpdate, skipAccessors);\n        }\n    }\n    return ChronoPartOfProjectStoreMixin;\n}) {\n}\n", "import { Mixin } from \"../../../../ChronoGraph/class/BetterMixin.js\";\nimport { ChronoModelMixin } from \"../../../chrono/ChronoModelMixin.js\";\nimport { ChronoPartOfProjectGenericMixin } from \"../../ChronoPartOfProjectGenericMixin.js\";\nimport { ChronoPartOfProjectStoreMixin } from \"../../store/mixin/ChronoPartOfProjectStoreMixin.js\";\nimport { AbstractPartOfProjectModelMixin } from \"./AbstractPartOfProjectModelMixin.js\";\nimport { isInstanceOf } from '../../../../ChronoGraph/class/Mixin.js';\n/**\n * This a base mixin for every Model that belongs to a ChronoGraph powered project.\n *\n * The model with this mixin, supposes that it will be \"joining\" a store that is already part of a project,\n * so that such model can take a reference to the project from it.\n *\n * It provides 2 template methods [[joinProject]] and [[leaveProject]], which can be overridden in other mixins\n * (they should always call `super` implementation, because it adds/remove the model to/from the ChronoGraph instance)\n */\nexport class ChronoPartOfProjectModelMixin extends Mixin([\n    AbstractPartOfProjectModelMixin,\n    ChronoPartOfProjectGenericMixin,\n    ChronoModelMixin\n], (base) => {\n    const superProto = base.prototype;\n    class ChronoPartOfProjectModelMixin extends base {\n        /**\n         * Template method, which is called when model is joining the project (through joining some store that\n         * has already joined the project)\n         */\n        joinProject() {\n            if (!this.project?.delayEnteringReplica) {\n                if (this.graph && this.graph != this.getGraph()) {\n                    this.graph = null;\n                }\n                this.getGraph().addEntity(this);\n            }\n        }\n        /**\n         * Template method, which is called when model is leaving the project (through leaving some store usually)\n         */\n        leaveProject(isReplacing = false) {\n            superProto.leaveProject.call(this, isReplacing);\n            const replica = this.getGraph();\n            // Because of delayCalculation it might not have joined the graph at all\n            replica?.removeEntity(this);\n            // @ts-ignore\n            this.graph = null;\n        }\n        /**\n         * Returns a [[SchedulerBasicProjectMixin|project]] instance\n         */\n        getProject() {\n            return superProto.getProject.call(this);\n        }\n        calculateProject() {\n            const store = this.stores.find(s => (isInstanceOf(s, ChronoPartOfProjectStoreMixin)) && !!s.getProject());\n            return store?.getProject();\n        }\n        // Report that there is no graph when delaying calculations, to not let anything enter it on reloads\n        get graph() {\n            return this.project?.delayEnteringReplica ? null : this._graph;\n        }\n        set graph(graph) {\n            this._graph = graph;\n        }\n    }\n    return ChronoPartOfProjectModelMixin;\n}) {\n}\n", "var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Mixin } from \"../../../../ChronoGraph/class/BetterMixin.js\";\nimport { model_field } from \"../../../chrono/ModelFieldAtom.js\";\nimport { ChronoPartOfProjectModelMixin } from \"../mixin/ChronoPartOfProjectModelMixin.js\";\nimport { AbstractCalendarMixin } from \"../AbstractCalendarMixin.js\";\nimport { SchedulingIssueEffect, SchedulingIssueEffectResolution } from \"../../../chrono/SchedulingIssueEffect.js\";\nimport Localizable from \"../../../../Core/localization/Localizable.js\";\nimport Base from \"../../../../Core/Base.js\";\nimport { prototypeValue } from \"../../../../ChronoGraph/util/Helpers.js\";\nimport { format } from \"../../../util/Functions.js\";\nconst hasMixin = Symbol('CalendarMixin');\nexport const EmptyCalendarSymbol = Symbol('EmptyCalendarSymbol');\n/**\n * The calendar for project scheduling, it is used to mark certain time intervals as \"non-working\" and ignore them during scheduling.\n *\n * The calendar consists from several [[CalendarIntervalMixin|intervals]]. The intervals can be either static or recurrent.\n */\nexport class BaseCalendarMixin extends Mixin([\n    AbstractCalendarMixin,\n    ChronoPartOfProjectModelMixin\n], (base) => {\n    class BaseCalendarMixin extends base {\n        constructor() {\n            super(...arguments);\n            // this field intentionally made \"model field\", so that its updates are going through\n            // all the Core's fields processing (and fires the appropriate events on the store)\n            this.version = 1;\n        }\n        [hasMixin]() { }\n    }\n    __decorate([\n        model_field({}, { persistent: false })\n    ], BaseCalendarMixin.prototype, \"version\", void 0);\n    __decorate([\n        model_field({ type: 'boolean', defaultValue: true })\n    ], BaseCalendarMixin.prototype, \"unspecifiedTimeIsWorking\", void 0);\n    __decorate([\n        model_field()\n    ], BaseCalendarMixin.prototype, \"intervals\", void 0);\n    return BaseCalendarMixin;\n}) {\n}\n/**\n * Class providing a human readable localized description of an [[EmptyCalendarEffect]] instance.\n */\nexport class EmptyCalendarEffectDescription extends Localizable(Base) {\n    static get $name() {\n        return 'EmptyCalendarEffectDescription';\n    }\n    static getDescription(effect) {\n        const calendar = effect.getCalendar();\n        return format(this.L('L{descriptionTpl}'), calendar.name || calendar.id);\n    }\n}\n/**\n * Special effect indicating that some calendar or calendars group is misconfigured\n * and do not provide any working period of time which makes its usage\n * impossible.\n */\nexport class EmptyCalendarEffect extends SchedulingIssueEffect {\n    constructor() {\n        super(...arguments);\n        this.handler = EmptyCalendarSymbol;\n    }\n    getResolutions() {\n        const calendar = this.getCalendar();\n        return this._resolutions || (this._resolutions = [\n            Use24hrsEmptyCalendarEffectResolution.new({ calendar }),\n            Use8hrsEmptyCalendarEffectResolution.new({ calendar })\n        ]);\n    }\n    /**\n     * Returns the calendar that does not have any working periods specified.\n     */\n    getCalendar() {\n        const { calendars } = this;\n        if (calendars?.length > 1) {\n            for (const calendar of calendars) {\n                const skippingRes = calendar.skipNonWorkingTime(this.date, this.isForward);\n                if (!(skippingRes instanceof Date)) {\n                    return calendar;\n                }\n            }\n        }\n        return calendars[0];\n    }\n}\n__decorate([\n    prototypeValue('emptyCalendar')\n], EmptyCalendarEffect.prototype, \"type\", void 0);\n__decorate([\n    prototypeValue(EmptyCalendarEffectDescription)\n], EmptyCalendarEffect.prototype, \"_descriptionBuilderClass\", void 0);\n/**\n * Base class for [[EmptyCalendarEffect]] resolutions.\n * The class has [[fixCalendarData]] method that pushes preconfigured `calendarData`\n * to the given [[calendar]]. The method is called in [[resolve]] method so for a subclass\n * it's enough just providing [[fixCalendarData|proper data]].\n */\nexport class BaseEmptyCalendarEffectResolution extends Localizable(SchedulingIssueEffectResolution) {\n    static get $name() {\n        return 'BaseEmptyCalendarEffectResolution';\n    }\n    static get configurable() {\n        return {\n            /**\n             * Correct calendar data.\n             * @property calendarData\n             */\n            calendarData: {\n                intervals: [\n                    { isWorking: true }\n                ]\n            }\n        };\n    }\n    getDescription() {\n        const { calendar } = this;\n        return format(this.L('L{descriptionTpl}'), calendar.name || calendar.id);\n    }\n    /**\n     * Fixes the provided calendar data by clearing its intervals\n     * amd then applying data specified in `calendarData` config.\n     * @param calendar\n     */\n    fixCalendarData(calendar) {\n        calendar.clearIntervals(true);\n        // @ts-ignore\n        Object.assign(calendar, this.calendarData);\n        if (calendar.intervals?.length) {\n            calendar.addIntervals(calendar.intervals);\n        }\n    }\n    /**\n     * Resolves the [[calendar]] by removing all its intervals and adding new `calendarData`.\n     */\n    resolve() {\n        const { calendar } = this;\n        this.fixCalendarData(calendar);\n    }\n}\n/**\n * Resolution option for [[EmptyCalendarEffect]] that fixes a specified calendar by\n * replacing its data with standard __24 hours/day__ calendar (__Saturday__ and __Sunday__ are non-working days) data.\n */\nexport class Use24hrsEmptyCalendarEffectResolution extends BaseEmptyCalendarEffectResolution {\n    static get $name() {\n        return 'Use24hrsEmptyCalendarEffectResolution';\n    }\n    static get configurable() {\n        return {\n            calendarData: {\n                unspecifiedTimeIsWorking: false,\n                intervals: [\n                    {\n                        recurrentStartDate: 'on Mon at 0:00',\n                        recurrentEndDate: 'on Sat at 0:00',\n                        isWorking: true\n                    }\n                ]\n            }\n        };\n    }\n}\n/**\n * Resolution option for [[EmptyCalendarEffect]] that fixes a specified calendar by\n * replacing its data with standard __8 hours/day__ calendar (__Saturday__ and __Sunday__ are non-working days) data.\n */\nexport class Use8hrsEmptyCalendarEffectResolution extends BaseEmptyCalendarEffectResolution {\n    static get $name() {\n        return 'Use8hrsEmptyCalendarEffectResolution';\n    }\n    static get configurable() {\n        return {\n            calendarData: {\n                unspecifiedTimeIsWorking: false,\n                intervals: [\n                    {\n                        recurrentStartDate: 'every weekday at 08:00',\n                        recurrentEndDate: 'every weekday at 12:00',\n                        isWorking: true\n                    },\n                    {\n                        recurrentStartDate: 'every weekday at 13:00',\n                        recurrentEndDate: 'every weekday at 17:00',\n                        isWorking: true\n                    }\n                ]\n            }\n        };\n    }\n}\n", "var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Reject, RejectSymbol } from \"../../ChronoGraph/chrono/Effect.js\";\nimport { TombStone } from \"../../ChronoGraph/chrono/Quark.js\";\nimport { Revision } from \"../../ChronoGraph/chrono/Revision.js\";\nimport { Transaction } from \"../../ChronoGraph/chrono/Transaction.js\";\nimport { Mixin } from \"../../ChronoGraph/class/BetterMixin.js\";\nimport { Replica } from \"../../ChronoGraph/replica/Replica.js\";\nimport { prototypeValue } from \"../../ChronoGraph/util/Helpers.js\";\nimport Base from \"../../Core/Base.js\";\nimport Localizable from \"../../Core/localization/Localizable.js\";\nimport { EmptyCalendarSymbol } from \"../quark/model/scheduler_basic/BaseCalendarMixin.js\";\nimport { format } from \"../util/Functions.js\";\nimport { ConflictSymbol } from \"./Conflict.js\";\nimport { IsChronoModelSymbol, ModelBucketField } from \"./ModelFieldAtom.js\";\nimport { EffectResolutionResult, SchedulingIssueEffect, SchedulingIssueEffectResolution } from \"./SchedulingIssueEffect.js\";\nexport const CycleSymbol = Symbol('CycleSymbol');\n//---------------------------------------------------------------------------------------------------------------------\nexport class EngineRevision extends Revision {\n    constructor() {\n        super(...arguments);\n        this.failedResolutionReferences = new Map();\n    }\n}\n//---------------------------------------------------------------------------------------------------------------------\nexport class EngineTransaction extends Transaction {\n    constructor() {\n        super(...arguments);\n        this.candidateClass = EngineRevision;\n    }\n    initialize(props) {\n        // Emit progress earlier and more frequently when using delayCalculation mode, to not lock up UI as much and to\n        // have smoother progress bar updates.\n        // Transactions created to validate deps does not reference project\n        if (props.graph.project?.delayCalculation) {\n            props.startProgressNotificationsAfterMs = 0;\n            props.emitProgressNotificationsEveryMs = 100;\n        }\n        super.initialize(props);\n        this.candidate.failedResolutionReferences = new Map(this.baseRevision.failedResolutionReferences);\n    }\n    addIdentifier(identifier, proposedValue, ...args) {\n        if (this.candidate.failedResolutionReferences.size) {\n            this.candidate.failedResolutionReferences.forEach((failedResolutionValue, identifier) => {\n                this.write(identifier, failedResolutionValue);\n            });\n            this.candidate.failedResolutionReferences.clear();\n        }\n        return super.addIdentifier(identifier, proposedValue, ...args);\n    }\n}\n//---------------------------------------------------------------------------------------------------------------------\n/**\n * An extension of [[Replica]], specialized for interaction with [[AbstractProjectMixin|project]].\n */\nexport class EngineReplica extends Mixin([Replica], (base) => {\n    const superProto = base.prototype;\n    class EngineReplica extends base {\n        constructor() {\n            super(...arguments);\n            this.baseRevision = EngineRevision.new();\n            this.transactionClass = EngineTransaction;\n            this.autoCommitMode = 'async';\n            this.onComputationCycle = 'effect';\n            this.cycleEffectClass = CycleEffect;\n            this.silenceInitialCommit = true;\n            this.ignoreInitialCommitComputationCycles = false;\n        }\n        get dirty() {\n            const activeTransaction = this.activeTransaction;\n            return activeTransaction.entries.size > 0 && (activeTransaction.hasVariableEntry || activeTransaction.hasEntryWithProposedValue);\n        }\n        onPropagationProgressNotification(notification) {\n            if (this.enableProgressNotifications && this.project)\n                this.project.trigger?.('progress', notification);\n        }\n        async commitAsync(args) {\n            if (!this.project || this.project.isDestroyed)\n                return;\n            this.project.trigger('beforeCommit');\n            if (this.isInitialCommit && this.ignoreInitialCommitComputationCycles) {\n                // backup onComputationCycle value to restore it after the commit\n                this._onComputationCycle = this._onComputationCycle || this.onComputationCycle;\n                // toggle onComputationCycle to ignore cycles to let the data get into the graph\n                this.onComputationCycle = 'ignore';\n            }\n            const replacedReplicaResult = this.project.beforeCommitAsync();\n            if (replacedReplicaResult)\n                return replacedReplicaResult;\n            return superProto.commitAsync.call(this, args);\n        }\n        get isInitialCommit() {\n            // let the project defined which commit is \"initial\"\n            return this.project.isInitialCommit || super.isInitialCommit;\n        }\n        set isInitialCommit(value) {\n            super.isInitialCommit = value;\n        }\n        write(identifier, proposedValue, ...args) {\n            const fieldName = identifier.field?.name;\n            const record = identifier.self;\n            if (fieldName && record) {\n                // @ts-ignore\n                const beforeHookResult = record.beforeChronoFieldSet?.(fieldName, proposedValue);\n                superProto.write.call(this, identifier, proposedValue, ...args);\n                // @ts-ignore\n                record.afterChronoFieldSet?.(fieldName, proposedValue, beforeHookResult);\n            }\n            else {\n                superProto.write.call(this, identifier, proposedValue, ...args);\n            }\n        }\n        async finalizeCommitAsync(transactionResult) {\n            // the `this.project` may be empty for the branch, where we validate the dependency\n            // because if asyncness project might be destroyed when we get here\n            const { project } = this;\n            if (!project || project.isDestroyed)\n                return;\n            const { entries } = transactionResult;\n            const autoCommitStores = new Set();\n            if (globalThis.DEBUG)\n                console.timeEnd('Time to visible');\n            const { isInitialCommit, silenceInitialCommit } = this;\n            // apply changes silently if this is initial commit and \"silenceInitialCommit\" option is enabled\n            const silenceCommit = isInitialCommit && silenceInitialCommit;\n            if (isInitialCommit) {\n                project.isInitialCommitPerformed = true;\n                // restore onComputationCycle back if we toggled it before committing\n                if (this.ignoreInitialCommitComputationCycles)\n                    this.onComputationCycle = this._onComputationCycle;\n            }\n            project.isWritingData = true;\n            project.hasLoadedDataToCommit = false;\n            // Let progress listeners know we are finalizing\n            if (this.enableProgressNotifications) {\n                project.trigger('progress', {\n                    total: transactionResult.entries.size,\n                    remaining: 0,\n                    phase: 'finalizing'\n                });\n            }\n            const transaction = transactionResult.transaction;\n            // need to reject the data before the `refresh` event, otherwise\n            // the UI will try to refresh the stale data\n            if (transaction.rejectedWith) {\n                project.trigger('commitRejected', { transactionResult, isInitialCommit, silenceCommit });\n            }\n            // It is triggered earlier because on that stage engine is ready and UI can be drawn.\n            // dataReady happens up to like a second later in big datasets. We do not want to wait that long\n            project.trigger('refresh', { isInitialCommit, isCalculated: true });\n            // console.timeEnd('rendered')\n            await new Promise(resolve => {\n                setTimeout(() => {\n                    if (!project.isDestroyed) {\n                        if (!transactionResult.transaction.rejectedWith) {\n                            // @ts-ignore\n                            project.suspendChangesTracking?.();\n                            if (globalThis.DEBUG)\n                                console.time('Finalize propagation');\n                            const records = new Set();\n                            for (const quark of entries.values()) {\n                                const identifier = quark.identifier;\n                                const quarkValue = quark.getValue();\n                                const { field } = identifier;\n                                if (quark.isShadow() || !identifier[IsChronoModelSymbol] || quarkValue === TombStone || field instanceof ModelBucketField)\n                                    continue;\n                                const record = identifier.self;\n                                const store = record.firstStore;\n                                // Begin batch once\n                                if (!records.has(record)) {\n                                    record.beginBatch(true);\n                                    records.add(record);\n                                }\n                                // Avoid committing changes during refresh, commit below instead. Suspend once\n                                if (store?.autoCommit && !autoCommitStores.has(store)) {\n                                    store.suspendAutoCommit();\n                                    autoCommitStores.add(store);\n                                }\n                                // Cheapest possible set\n                                // @ts-ignore\n                                record.meta.batchChanges[field.name] = quarkValue;\n                            }\n                            let prevented = false;\n                            for (const record of records) {\n                                if (!record.triggerBeforeUpdate({ ...record.meta.batchChanges })) {\n                                    prevented = true;\n                                    break;\n                                }\n                            }\n                            if (prevented) {\n                                for (const record of records) {\n                                    record.cancelBatch();\n                                }\n                                transactionResult.transaction.reject();\n                                project.trigger('commitRejected', { transactionResult, isInitialCommit, silenceCommit });\n                                project.trigger('refresh', { isInitialCommit, isCalculated: true });\n                            }\n                            else {\n                                for (const record of records) {\n                                    //@ts-ignore\n                                    record.ignoreBag = silenceCommit || project.ignoreRecordChanges;\n                                    record.generation++;\n                                    record.endBatch(silenceCommit, true, true);\n                                    //@ts-ignore\n                                    record.ignoreBag = false;\n                                }\n                            }\n                            project.ignoreRecordChanges = false;\n                            if (globalThis.DEBUG)\n                                console.timeEnd('Finalize propagation');\n                            // Calendar expects flag to be cleared before dataReady, was mismatch with engine stub\n                            project.isWritingData = false;\n                            if (!prevented) {\n                                project.trigger('dataReady', { records, isInitialCommit });\n                            }\n                            // @ts-ignore\n                            project.resumeChangesTracking?.(silenceCommit);\n                            autoCommitStores.forEach(store => store.resumeAutoCommit());\n                            // clear all changes of the first graph commit\n                            if (silenceCommit) {\n                                project.eventStore.acceptChanges();\n                                project.dependencyStore.acceptChanges();\n                                project.resourceStore.acceptChanges();\n                                project.assignmentStore.acceptChanges();\n                                project.calendarManagerStore.acceptChanges();\n                                project.acceptChanges();\n                            }\n                        }\n                        // transaction rejected\n                        else {\n                            project.isWritingData = false;\n                        }\n                        project.trigger('commitFinalized', { isInitialCommit, transactionResult });\n                    }\n                    resolve();\n                }, 0);\n            });\n        }\n        *onComputationCycleHandler(cycle) {\n            if (this.onComputationCycle === 'effect') {\n                const effect = this.project.cycleEffectClass.new({ cycle });\n                if ((yield effect) === EffectResolutionResult.Cancel) {\n                    yield Reject(effect);\n                }\n            }\n            else {\n                return yield* super.onComputationCycleHandler(cycle);\n            }\n        }\n        async [CycleSymbol](effect, transaction) {\n            // delegate to project\n            return this.project.onCycleSchedulingIssue(effect, transaction);\n        }\n        async [EmptyCalendarSymbol](effect, transaction) {\n            transaction.walkContext.startNewEpoch();\n            // delegate to project\n            return this.project.onEmptyCalendarSchedulingIssue(effect, transaction);\n        }\n        async [ConflictSymbol](effect, transaction) {\n            transaction.walkContext.startNewEpoch();\n            // delegate to project\n            return this.project.onConflictSchedulingIssue(effect, transaction);\n        }\n        [RejectSymbol](effect, transaction) {\n            return super[RejectSymbol](effect, transaction);\n        }\n    }\n    return EngineReplica;\n}) {\n}\n/**\n * A cycle resolution removing one of the [[getDependencies|related dependencies]].\n * The dependency instance should be passed to [[resolve]] method:\n *\n * ```typescript\n * // this call will remove dependencyRecord\n * removalResolution.resolve(dependencyRecord)\n * ```\n */\nexport class RemoveDependencyCycleEffectResolution extends Localizable(SchedulingIssueEffectResolution) {\n    static get $name() {\n        return 'RemoveDependencyCycleEffectResolution';\n    }\n    getDescription() {\n        return this.L('L{descriptionTpl}');\n    }\n    resolve(dependency) {\n        dependency.remove();\n    }\n}\n/**\n * Class providing a human readable localized description ofr a [[CycleEffect]] instance.\n */\nexport class CycleEffectDescription extends Localizable(Base) {\n    static get $name() {\n        return 'CycleEffectDescription';\n    }\n    static getDescription(effect) {\n        return format(this.L('L{descriptionTpl}'), this.getShortDescription(effect));\n    }\n    static getShortDescription(effect) {\n        const events = effect.getEvents().slice();\n        events.push(events[0]);\n        return '\"' + events.map(event => event.name || '#' + event.id).join('\" -> \"') + '\"';\n    }\n}\n/**\n * Class implementing a special effect signalizing of a computation cycle.\n * The class suggests the only [[getResolutions|resolution]] option - removing one of the\n * [[getDependencies|related dependencies]].\n */\nexport class CycleEffect extends SchedulingIssueEffect {\n    constructor() {\n        super(...arguments);\n        this.handler = CycleSymbol;\n    }\n    /**\n     * Returns list of events building the cycle.\n     */\n    getEvents() {\n        if (!this._events) {\n            const result = new Set();\n            this.cycle.cycle.forEach(({ context }) => result.add(context));\n            this._events = [...result];\n        }\n        return this._events;\n    }\n    matchDependencyBySourceAndTargetEvent(dependency, from, to) {\n        return dependency.fromEvent === from && dependency.toEvent === to;\n    }\n    getDependencyForSourceAndTargetEvents(from, to) {\n        const events = this.getEvents();\n        const project = events[0].project;\n        const dependencyStore = project.getDependencyStore();\n        return dependencyStore.find((dependency) => this.matchDependencyBySourceAndTargetEvent(dependency, from, to));\n    }\n    /**\n     * Returns list of dependencies building the cycle.\n     */\n    getDependencies() {\n        if (!this._dependencies) {\n            const result = new Set();\n            const events = this.getEvents();\n            const numberOfEvents = events.length;\n            let prevEvent = events[0], dependency;\n            if (numberOfEvents === 1) {\n                if ((dependency = this.getDependencyForSourceAndTargetEvents(prevEvent, prevEvent))) {\n                    result.add(dependency);\n                }\n            }\n            else {\n                for (const event1 of events) {\n                    for (const event2 of events) {\n                        if ((dependency = this.getDependencyForSourceAndTargetEvents(event1, event2))) {\n                            result.add(dependency);\n                        }\n                        if ((dependency = this.getDependencyForSourceAndTargetEvents(event2, event1))) {\n                            result.add(dependency);\n                        }\n                    }\n                }\n            }\n            this._dependencies = [...result];\n        }\n        return this._dependencies;\n    }\n    /**\n     * Returns list of the cycle possible resolutions.\n     *\n     * The class provides a single parameterized [[RemoveDependencyCycleEffectResolution]] resolution\n     * which implement removal of one of the [[getDependencies|dependencies]].\n     */\n    getResolutions() {\n        if (!this._resolutions) {\n            this._resolutions = [this.removeDependencyCycleEffectResolutionClass.new()];\n        }\n        return this._resolutions;\n    }\n}\n__decorate([\n    prototypeValue('cycle')\n], CycleEffect.prototype, \"type\", void 0);\n__decorate([\n    prototypeValue(CycleEffectDescription)\n], CycleEffect.prototype, \"_descriptionBuilderClass\", void 0);\n__decorate([\n    prototypeValue(RemoveDependencyCycleEffectResolution)\n], CycleEffect.prototype, \"removeDependencyCycleEffectResolutionClass\", void 0);\n", "var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Mixin } from '../../../../ChronoGraph/class/BetterMixin.js';\nimport { generic_field } from '../../../../ChronoGraph/replica/Entity.js';\nimport { ModelReferenceField, injectStaticFieldsProperty, isSerializableEqual } from '../../../chrono/ModelFieldAtom.js';\nimport { ChronoPartOfProjectModelMixin } from '../mixin/ChronoPartOfProjectModelMixin.js';\n/**\n * Base assignment model class. It just contains references to the [[BaseEventMixin|event]] and [[BaseResourceMixin|resource]] being assigned.\n */\nexport class BaseAssignmentMixin extends Mixin([ChronoPartOfProjectModelMixin], (base) => {\n    const superProto = base.prototype;\n    class BaseAssignmentMixin extends base {\n    }\n    __decorate([\n        generic_field({\n            bucket: 'assigned',\n            resolver: function (id) { return this.getEventById(id); },\n            modelFieldConfig: {\n                serialize: event => event?.id,\n                isEqual: isSerializableEqual,\n                persist: false\n            }\n        }, ModelReferenceField)\n    ], BaseAssignmentMixin.prototype, \"event\", void 0);\n    __decorate([\n        generic_field({\n            bucket: 'assigned',\n            resolver: function (id) { return this.getResourceById(id); },\n            modelFieldConfig: {\n                serialize: resource => resource?.id,\n                isEqual: isSerializableEqual,\n                persist: false\n            }\n        }, ModelReferenceField)\n    ], BaseAssignmentMixin.prototype, \"resource\", void 0);\n    // inject \"fields\" getter override to apply \"modelFieldConfig\" to \"event\" & \"resource\" fields\n    injectStaticFieldsProperty(BaseAssignmentMixin);\n    return BaseAssignmentMixin;\n}) {\n}\n", "import { Mixin } from \"../../../ChronoGraph/class/BetterMixin.js\";\nimport { BaseAssignmentMixin } from \"../model/scheduler_basic/BaseAssignmentMixin.js\";\nimport { ChronoPartOfProjectStoreMixin } from \"./mixin/ChronoPartOfProjectStoreMixin.js\";\nimport { AbstractAssignmentStoreMixin } from \"./AbstractAssignmentStoreMixin.js\";\n/**\n * A store mixin class, that represent collection of all assignments in the [[SchedulerBasicProjectMixin|project]].\n */\nexport class ChronoAssignmentStoreMixin extends Mixin([AbstractAssignmentStoreMixin, ChronoPartOfProjectStoreMixin], (base) => {\n    const superProto = base.prototype;\n    class ChronoAssignmentStoreMixin extends base {\n        constructor() {\n            super(...arguments);\n            this.removalOrder = 100;\n        }\n        static get defaultConfig() {\n            return {\n                modelClass: BaseAssignmentMixin\n            };\n        }\n        set data(value) {\n            this.allAssignmentsForRemoval = true;\n            super.data = value;\n            this.allAssignmentsForRemoval = false;\n        }\n    }\n    return ChronoAssignmentStoreMixin;\n}) {\n}\n", "import { Mixin } from \"../../../ChronoGraph/class/BetterMixin.js\";\nimport { BaseCalendarMixin } from \"../model/scheduler_basic/BaseCalendarMixin.js\";\nimport { ChronoPartOfProjectStoreMixin } from \"./mixin/ChronoPartOfProjectStoreMixin.js\";\nimport { AbstractCalendarManagerStoreMixin } from \"./AbstractCalendarManagerStoreMixin.js\";\n/**\n * A store mixin class, that represent collection of all calendars in the [[SchedulerBasicProjectMixin|project]].\n */\nexport class ChronoCalendarManagerStoreMixin extends Mixin([AbstractCalendarManagerStoreMixin, ChronoPartOfProjectStoreMixin], (base) => {\n    const superProto = base.prototype;\n    class ChronoCalendarManagerStoreMixin extends base {\n        constructor() {\n            super(...arguments);\n            this.removalOrder = 500;\n        }\n        static get defaultConfig() {\n            return {\n                tree: true,\n                modelClass: BaseCalendarMixin\n            };\n        }\n    }\n    return ChronoCalendarManagerStoreMixin;\n}) {\n}\n", "import { Mixin } from \"../../../ChronoGraph/class/BetterMixin.js\";\nimport { ChronoPartOfProjectStoreMixin } from \"./mixin/ChronoPartOfProjectStoreMixin.js\";\nimport { AbstractDependencyStoreMixin } from \"./AbstractDependencyStoreMixin.js\";\n/**\n * A store mixin class, that represent collection of all dependencies in the [[SchedulerBasicProjectMixin|project]].\n */\nexport class ChronoDependencyStoreMixin extends Mixin([AbstractDependencyStoreMixin, ChronoPartOfProjectStoreMixin], (base) => {\n    const superProto = base.prototype;\n    class ChronoDependencyStoreMixin extends base {\n        constructor() {\n            super(...arguments);\n            this.removalOrder = 200;\n        }\n        set data(value) {\n            this.allDependenciesForRemoval = true;\n            super.data = value;\n            this.allDependenciesForRemoval = false;\n        }\n    }\n    return ChronoDependencyStoreMixin;\n}) {\n}\n", "import { CycleResolutionInputChrono } from \"../../../../ChronoGraph/chrono/CycleResolver.js\";\nimport { CalculatedValueGen } from \"../../../../ChronoGraph/chrono/Identifier.js\";\nimport { CalculateProposed, CycleDescription, CycleResolution, Formula } from \"../../../../ChronoGraph/cycle_resolver/CycleResolver.js\";\nimport { FieldIdentifier } from \"../../../../ChronoGraph/replica/Identifier.js\";\n//---------------------------------------------------------------------------------------------------------------------\nexport var Instruction;\n(function (Instruction) {\n    Instruction[\"KeepDuration\"] = \"KeepDuration\";\n    Instruction[\"KeepStartDate\"] = \"KeepStartDate\";\n    Instruction[\"KeepEndDate\"] = \"KeepEndDate\";\n})(Instruction || (Instruction = {}));\n//---------------------------------------------------------------------------------------------------------------------\nexport const StartDateVar = Symbol('StartDate');\nexport const EndDateVar = Symbol('EndDate');\nexport const DurationVar = Symbol('Duration');\n//---------------------------------------------------------------------------------------------------------------------\nexport const startDateFormula = Formula.new({\n    output: StartDateVar,\n    inputs: new Set([DurationVar, EndDateVar])\n});\nexport const endDateFormula = Formula.new({\n    output: EndDateVar,\n    inputs: new Set([DurationVar, StartDateVar])\n});\nexport const durationFormula = Formula.new({\n    output: DurationVar,\n    inputs: new Set([StartDateVar, EndDateVar])\n});\n//---------------------------------------------------------------------------------------------------------------------\nexport const SEDGraphDescription = CycleDescription.new({\n    variables: new Set([StartDateVar, EndDateVar, DurationVar]),\n    formulas: new Set([startDateFormula, endDateFormula, durationFormula])\n});\nexport const SEDForwardCycleResolutionContext = CycleResolution.new({\n    description: SEDGraphDescription,\n    defaultResolutionFormulas: new Set([endDateFormula])\n});\nexport const SEDBackwardCycleResolutionContext = CycleResolution.new({\n    description: SEDGraphDescription,\n    defaultResolutionFormulas: new Set([startDateFormula])\n});\n//---------------------------------------------------------------------------------------------------------------------\nexport class SEDDispatcher extends CycleResolutionInputChrono {\n    addInstruction(instruction) {\n        if (instruction === Instruction.KeepStartDate)\n            this.addKeepIfPossibleFlag(StartDateVar);\n        if (instruction === Instruction.KeepEndDate)\n            this.addKeepIfPossibleFlag(EndDateVar);\n        if (instruction === Instruction.KeepDuration)\n            this.addKeepIfPossibleFlag(DurationVar);\n    }\n}\n//---------------------------------------------------------------------------------------------------------------------\nexport class SEDDispatcherIdentifier extends FieldIdentifier.mix(CalculatedValueGen) {\n    equality(v1, v2) {\n        const resolution1 = v1.resolution;\n        const resolution2 = v2.resolution;\n        const res = resolution1.get(StartDateVar) === resolution2.get(StartDateVar)\n            && resolution1.get(EndDateVar) === resolution2.get(EndDateVar)\n            && resolution1.get(DurationVar) === resolution2.get(DurationVar)\n            || (\n            // https://github.com/bryntum/support/issues/6262\n            // for the unscheduled tasks (missing all 3 values), resolution of the `v1` will be \"keep all proposed\"\n            // which is always different from the default resolution\n            // this leads to the dispatcher identifiers remaining \"self-dependent\" and re-calculated at every commit\n            // process this case specially\n            // note, that this is more a patch, a proper solution would probably be to change this line:\n            // chronograph/src/chrono/CycleResolver.ts\n            //      if (Y(PreviousValueOf(identifier)) != null) this.addPreviousValueFlag(symbol)\n            // to\n            //      if (Y(PreviousValueOf(identifier)) !== undefined) this.addPreviousValueFlag(symbol)\n            // however this breaks normalization tests\n            resolution1.get(StartDateVar) === CalculateProposed\n                && resolution1.get(EndDateVar) === CalculateProposed\n                && resolution1.get(DurationVar) === CalculateProposed);\n        return res;\n    }\n}\n", "var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Mixin } from \"../../../../ChronoGraph/class/BetterMixin.js\";\nimport { calculate, field, generic_field, write } from \"../../../../ChronoGraph/replica/Entity.js\";\nimport { CalendarCacheMultiple } from \"../../../calendar/CalendarCacheMultiple.js\";\nimport { injectStaticFieldsProperty, isSerializableEqual, ModelReferenceField } from '../../../chrono/ModelFieldAtom.js';\nimport { stripDuplicates } from \"../../../util/StripDuplicates.js\";\nimport { ChronoPartOfProjectModelMixin } from \"../mixin/ChronoPartOfProjectModelMixin.js\";\nimport { BaseCalendarMixin } from \"./BaseCalendarMixin.js\";\n/**\n * This mixin provides the calendar to any [[ChronoPartOfProjectModelMixin]] it is mixed in.\n *\n * If user provides no calendar, the calendar is taken from the project.\n */\nexport class HasCalendarMixin extends Mixin([ChronoPartOfProjectModelMixin], (base) => {\n    class HasCalendarMixin extends base {\n        writeCalendar(me, transaction, quark, calendar) {\n            const calendarManagerStore = this.getCalendarManagerStore();\n            const cal = calendar;\n            // add calendar to the calendar manager - if the calendar is not there yet\n            if (calendar && calendarManagerStore && calendar instanceof BaseCalendarMixin && !calendarManagerStore.includes(cal)) {\n                calendarManagerStore.add(calendar);\n            }\n            me.constructor.prototype.write.call(this, me, transaction, quark, calendar);\n        }\n        resolveCalendar(locator) {\n            return this.getCalendarManagerStore()?.getById(locator);\n        }\n        /**\n         * Calculation method of the [[effectiveCalendar]]. Takes the calendar from the project, if not provided to the entity explicitly.\n         */\n        *calculateEffectiveCalendar() {\n            let calendar = yield this.$.calendar;\n            if (!calendar) {\n                const project = this.getProject();\n                calendar = yield project.$.effectiveCalendar;\n            }\n            // this will create an incoming edge from the calendar's version atom, which changes on calendar's data update\n            yield calendar.$.version;\n            return calendar;\n        }\n        //region STM hooks\n        shouldRecordFieldChange(fieldName, oldValue, newValue) {\n            if (!super.shouldRecordFieldChange(fieldName, oldValue, newValue)) {\n                return false;\n            }\n            const { project } = this;\n            // If that's a \"calendar\" field change - make sure it does refer to some other record\n            // and not just reacts to old record idChange\n            if (fieldName === 'calendar' && project) {\n                const { calendarManagerStore } = project;\n                return calendarManagerStore.oldIdMap[oldValue] !== calendarManagerStore.getById(newValue);\n            }\n            return true;\n        }\n    }\n    __decorate([\n        field({\n            equality: () => false\n        })\n    ], HasCalendarMixin.prototype, \"effectiveCalendar\", void 0);\n    __decorate([\n        generic_field({\n            modelFieldConfig: {\n                persist: true,\n                // we don't use calendar?.id here since we need to preserve calendar==null value\n                // while optional chaining will result undefined in this case\n                serialize: calendar => calendar === undefined ? undefined : (calendar?.id || null),\n                isEqual: isSerializableEqual\n            },\n            resolver: function (locator) {\n                return this.resolveCalendar(locator);\n            },\n            sync: true\n        }, ModelReferenceField)\n    ], HasCalendarMixin.prototype, \"calendar\", void 0);\n    __decorate([\n        write('calendar')\n    ], HasCalendarMixin.prototype, \"writeCalendar\", null);\n    __decorate([\n        calculate('effectiveCalendar')\n    ], HasCalendarMixin.prototype, \"calculateEffectiveCalendar\", null);\n    // inject \"fields\" getter override to apply \"modelFieldConfig\" to \"event\" & \"resource\" fields\n    injectStaticFieldsProperty(HasCalendarMixin);\n    return HasCalendarMixin;\n}) {\n}\n/**\n * This mixin provides the consuming class with the [[combineCalendars]] method, which can combine several calendars.\n */\nexport class CanCombineCalendarsMixin extends Mixin([], (base) => {\n    class CanCombineCalendars extends base {\n        constructor() {\n            super(...arguments);\n            this.combinedcalendarscache = new Map();\n        }\n        /**\n         * Combines an array of calendars into a single [[CalendarCacheMultiple]], which provides an API similar (but not exactly the same) to [[BaseCalendarMixin]]\n         *\n         * @param calendars\n         */\n        combineCalendars(calendars) {\n            const uniqueOnly = stripDuplicates(calendars);\n            if (uniqueOnly.length === 0)\n                throw new Error(\"No calendars to combine\");\n            uniqueOnly.sort((calendar1, calendar2) => {\n                if (calendar1.internalId < calendar2.internalId)\n                    return -1;\n                else\n                    return 1;\n            });\n            const hash = uniqueOnly.map(calendar => calendar.internalId + '/').join('');\n            const versionsHash = uniqueOnly.map(calendar => calendar.version + '/').join('');\n            const cached = this.combinedcalendarscache.get(hash);\n            let res;\n            if (cached && cached.versionsHash === versionsHash)\n                res = cached.cache;\n            else {\n                res = new CalendarCacheMultiple({ calendarCaches: uniqueOnly.map(calendar => calendar.calendarCache) });\n                this.combinedcalendarscache.set(hash, {\n                    versionsHash: versionsHash,\n                    cache: res\n                });\n            }\n            return res;\n        }\n    }\n    return CanCombineCalendars;\n}) {\n}\n", "var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { ProposedArgumentsOf, ProposedOrPrevious, ProposedOrPreviousValueOf, Reject, Write } from \"../../../../ChronoGraph/chrono/Effect.js\";\nimport { Mixin } from \"../../../../ChronoGraph/class/BetterMixin.js\";\nimport { CalculateProposed } from \"../../../../ChronoGraph/cycle_resolver/CycleResolver.js\";\nimport { build_proposed, calculate, field, write } from \"../../../../ChronoGraph/replica/Entity.js\";\nimport DateHelper from \"../../../../Core/helper/DateHelper.js\";\nimport { dateConverter, model_field } from \"../../../chrono/ModelFieldAtom.js\";\nimport { Direction, TimeUnit } from \"../../../scheduling/Types.js\";\nimport { isNotNumber } from \"../../../util/Functions.js\";\nimport { EmptyCalendarEffect } from \"./BaseCalendarMixin.js\";\nimport { durationFormula, DurationVar, endDateFormula, EndDateVar, Instruction, SEDBackwardCycleResolutionContext, SEDDispatcher, SEDDispatcherIdentifier, SEDForwardCycleResolutionContext, startDateFormula, StartDateVar } from \"./BaseEventDispatcher.js\";\nimport { HasCalendarMixin } from \"./HasCalendarMixin.js\";\nimport { EffectResolutionResult } from \"../../../chrono/SchedulingIssueEffect.js\";\n//---------------------------------------------------------------------------------------------------------------------\n/**\n * Base event entity mixin type.\n *\n * At this level event is only aware about its calendar (which is inherited from project, if not provided).\n * The functionality, related to the dependencies, constraints etc is provided in other mixins.\n *\n * A time interval will be \"counted\" into the event duration, only if the event's calendar has that interval\n * as working. Otherwise the time is skipped and not counted into event's duration.\n *\n */\nexport class BaseEventMixin extends Mixin([HasCalendarMixin], (base) => {\n    const superProto = base.prototype;\n    class BaseEventMixin extends base {\n        *calculateDispatcher(YIELD) {\n            // this value is not used directly, but it contains a default cycle resolution\n            // if we calculate different resolution, dispatcher will be marked dirty\n            // on next revision\n            const proposed = yield ProposedOrPrevious;\n            const cycleDispatcher = yield* this.prepareDispatcher(YIELD);\n            //--------------\n            const startDateProposedArgs = yield ProposedArgumentsOf(this.$.startDate);\n            const startInstruction = startDateProposedArgs ? (startDateProposedArgs[0] ? Instruction.KeepDuration : Instruction.KeepEndDate) : undefined;\n            if (startInstruction)\n                cycleDispatcher.addInstruction(startInstruction);\n            //--------------\n            const endDateProposedArgs = yield ProposedArgumentsOf(this.$.endDate);\n            const endInstruction = endDateProposedArgs ? (endDateProposedArgs[0] ? Instruction.KeepDuration : Instruction.KeepStartDate) : undefined;\n            if (endInstruction)\n                cycleDispatcher.addInstruction(endInstruction);\n            //--------------\n            const directionValue = yield this.$.direction;\n            const durationProposedArgs = yield ProposedArgumentsOf(this.$.duration);\n            let durationInstruction;\n            if (durationProposedArgs) {\n                switch (durationProposedArgs[0]) {\n                    case true:\n                        durationInstruction = Instruction.KeepStartDate;\n                        break;\n                    case false:\n                        durationInstruction = Instruction.KeepEndDate;\n                        break;\n                }\n            }\n            if (!durationInstruction && cycleDispatcher.hasProposedValue(DurationVar)) {\n                durationInstruction = directionValue === Direction.Forward || directionValue === Direction.None ? Instruction.KeepStartDate : Instruction.KeepEndDate;\n            }\n            if (durationInstruction)\n                cycleDispatcher.addInstruction(durationInstruction);\n            return cycleDispatcher;\n        }\n        *prepareDispatcher(Y) {\n            const dispatcherClass = this.dispatcherClass(Y);\n            const cycleDispatcher = dispatcherClass.new({\n                context: this.cycleResolutionContext(Y)\n            });\n            cycleDispatcher.collectInfo(Y, this.$.startDate, StartDateVar);\n            cycleDispatcher.collectInfo(Y, this.$.endDate, EndDateVar);\n            cycleDispatcher.collectInfo(Y, this.$.duration, DurationVar);\n            return cycleDispatcher;\n        }\n        cycleResolutionContext(Y) {\n            const direction = Y(this.$.direction);\n            return direction === Direction.Forward || direction === Direction.None ? SEDForwardCycleResolutionContext : SEDBackwardCycleResolutionContext;\n        }\n        dispatcherClass(Y) {\n            return SEDDispatcher;\n        }\n        buildProposedDispatcher(me, quark, transaction) {\n            const dispatcher = this.dispatcherClass(transaction.onEffectSync).new({\n                context: this.cycleResolutionContext(transaction.onEffectSync)\n            });\n            dispatcher.addPreviousValueFlag(StartDateVar);\n            dispatcher.addPreviousValueFlag(EndDateVar);\n            dispatcher.addPreviousValueFlag(DurationVar);\n            return dispatcher;\n        }\n        /**\n         * The method skips the event non working time starting from the provided `date` and\n         * going either _forward_ or _backward_ in time.\n         * It uses the event [[effectiveCalendar|effective calendar]] to detect which time is not working.\n         * @param date Date to start skipping from\n         * @param isForward Skip direction (`true` to go forward in time, `false` - backwards)\n         */\n        *skipNonWorkingTime(date, isForward) {\n            const calendar = yield this.$.effectiveCalendar;\n            if (!date)\n                return null;\n            const skippingRes = calendar.skipNonWorkingTime(date, isForward);\n            if (skippingRes instanceof Date) {\n                return skippingRes;\n            }\n            else {\n                const effect = EmptyCalendarEffect.new({\n                    calendars: [calendar],\n                    event: this,\n                    date,\n                    isForward\n                });\n                if ((yield effect) === EffectResolutionResult.Cancel) {\n                    yield Reject(effect);\n                }\n                else {\n                    return null;\n                }\n            }\n        }\n        /**\n         * The method skips the provided amount of the event _working time_\n         * starting from the `date` and going either _forward_ or _backward_ in time.\n         * It uses the event [[effectiveCalendar|effective calendar]] to detect which time is not working.\n         * @param date Date to start skipping from\n         * @param isForward Skip direction (`true` to go forward in time, `false` - backwards)\n         * @param duration Amount of working time to skip\n         * @param unit Units the `duration` value in (if not provided then duration is considered provided in [[durationUnit]])\n         */\n        *skipWorkingTime(date, isForward, duration, unit) {\n            const durationUnit = yield this.$.durationUnit;\n            // Convert duration to duration unit if needed\n            if (unit && unit !== durationUnit) {\n                duration = yield* this.getProject().$convertDuration(duration, unit, durationUnit);\n            }\n            return yield* this.calculateProjectedXDateWithDuration(date, isForward, duration);\n        }\n        // copied generated method, to avoid compilation error when it is overridden in HasDateConstraintMixin\n        /**\n         * Sets the event [[startDate|start date]]\n         *\n         * @param date The new start date to set\n         * @param keepDuration Whether the intention is to keep the `duration` field (`keepDuration = true`) or `endDate` (`keepDuration = false`)\n         */\n        setStartDate(date, keepDuration = true) {\n            const { graph, project } = this;\n            if (graph) {\n                graph.write(this.$.startDate, date, keepDuration);\n                return graph.commitAsync();\n            }\n            else {\n                this.$.startDate.DATA = date;\n                // Possibly about to enter replica, wait for that\n                return project?.delayedCalculationPromise;\n            }\n        }\n        writeStartDate(me, transaction, quark, date, keepDuration = true) {\n            // we use the approach, that when user sets some atom to `null`\n            // that `null` is propagated as a normal valid value through all calculation formulas\n            // turning the result of all calculations to `null`\n            // this works well, except the initial data load case, when don't want to do such propagation\n            // but instead wants to \"normalize\" the data\n            // because of that we ignore the `null` writes, for the initial data load case\n            if (!transaction.baseRevision.hasIdentifier(me) && date == null)\n                return;\n            if (!this.getProject().isStmRestoring) {\n                // this is basically: this.unscheduled = date == null, however it will work with branches\n                this.$.unscheduled.write(this.$.unscheduled, transaction, undefined, date == null);\n            }\n            me.constructor.prototype.write.call(this, me, transaction, quark, date, keepDuration);\n        }\n        /**\n         * The main calculation method for the [[startDate]] field. Delegates to either [[calculateStartDateProposed]]\n         * or [[calculateStartDatePure]], depending on the information from [[dispatcher]]\n         */\n        *calculateStartDate() {\n            const dispatch = yield this.$.dispatcher;\n            const formulaId = dispatch.resolution.get(StartDateVar);\n            if (formulaId === CalculateProposed) {\n                return yield* this.calculateStartDateProposed();\n            }\n            else if (formulaId === startDateFormula.formulaId) {\n                return yield* this.calculateStartDatePure();\n            }\n            else {\n                throw new Error(\"Unknown formula for `startDate`\");\n            }\n        }\n        /**\n         * The \"pure\" calculation function of the [[startDate]] field. It should calculate the [[startDate]] as if\n         * there's no user input for it and no previous value - \"purely\" based on the values of other fields.\n         *\n         * At this level it delegates to [[calculateProjectedXDateWithDuration]]\n         *\n         * See also [[calculateStartDateProposed]].\n         */\n        *calculateStartDatePure() {\n            return yield* this.calculateProjectedXDateWithDuration(yield this.$.endDate, false, yield this.$.duration);\n        }\n        /**\n         * The \"proposed\" calculation function of the [[startDate]] field. It should calculate the [[startDate]] as if\n         * there's a user input for it or a previous value. It can also use the values of other fields to \"validate\"\n         * the \"proposed\" value.\n         *\n         * See also [[calculateStartDatePure]]\n         */\n        *calculateStartDateProposed() {\n            const project = this.getProject();\n            const startDate = yield ProposedOrPrevious;\n            const manuallyScheduled = yield this.$.manuallyScheduled;\n            return (!manuallyScheduled || project.skipNonWorkingTimeWhenSchedulingManually) ? yield* this.skipNonWorkingTime(startDate, true) : startDate;\n        }\n        /**\n         * This method calculates the opposite date of the event.\n         *\n         * @param baseDate The base date of the event (start or end date)\n         * @param isForward Boolean flag, indicating whether the given `baseDate` is start date (`true`) or end date (`false`)\n         * @param duration Duration of the event, in its [[durationUnit|durationUnits]]\n         */\n        *calculateProjectedXDateWithDuration(baseDate, isForward, duration) {\n            const durationUnit = yield this.$.durationUnit;\n            const calendar = yield this.$.effectiveCalendar;\n            const project = this.getProject();\n            if (!baseDate || isNotNumber(duration))\n                return null;\n            // calculate forward by default\n            isForward = isForward === undefined ? true : isForward;\n            if (isForward) {\n                return calendar.calculateEndDate(baseDate, yield* project.$convertDuration(duration, durationUnit, TimeUnit.Millisecond));\n            }\n            else {\n                return calendar.calculateStartDate(baseDate, yield* project.$convertDuration(duration, durationUnit, TimeUnit.Millisecond));\n            }\n        }\n        // copied generated method, to specify the default value for `keepDuration`\n        // and to avoid compilation error when it is overridden in HasDateConstraintMixin\n        /**\n         * Sets the event [[endDate|end date]].\n         *\n         * @param date The new end date to set\n         * @param keepDuration Whether the intention is to keep the `duration` field (`keepDuration = true`) or `startDate` (`keepDuration = false`)\n         */\n        setEndDate(date, keepDuration = false) {\n            const { graph, project } = this;\n            if (graph) {\n                graph.write(this.$.endDate, date, keepDuration);\n                return graph.commitAsync();\n            }\n            else {\n                this.$.endDate.DATA = date;\n                // Possibly about to enter replica, wait for that\n                return project?.delayedCalculationPromise;\n            }\n        }\n        writeEndDate(me, transaction, quark, date, keepDuration = false) {\n            if (!transaction.baseRevision.hasIdentifier(me) && date == null)\n                return;\n            if (!this.getProject().isStmRestoring) {\n                // this is basically: this.unscheduled = date == null, however it will work with branches\n                this.$.unscheduled.write(this.$.unscheduled, transaction, undefined, date == null);\n            }\n            me.constructor.prototype.write.call(this, me, transaction, quark, date, keepDuration);\n        }\n        /**\n         * The main calculation method for the [[endDate]] field. Delegates to either [[calculateEndDateProposed]]\n         * or [[calculateEndDatePure]], depending on the information from [[dispatcher]]\n         */\n        *calculateEndDate() {\n            const dispatch = yield this.$.dispatcher;\n            const formulaId = dispatch.resolution.get(EndDateVar);\n            if (formulaId === CalculateProposed) {\n                return yield* this.calculateEndDateProposed();\n            }\n            else if (formulaId === endDateFormula.formulaId) {\n                return yield* this.calculateEndDatePure();\n                // the \"new way\" would be\n                // return yield* this.calculateProjectedEndDateWithDuration(yield this.$.startDate, yield this.$.duration)\n            }\n            else {\n                throw new Error(\"Unknown formula for `endDate`\");\n            }\n        }\n        /**\n         * The \"pure\" calculation function of the [[endDate]] field. It should calculate the [[endDate]] as if\n         * there's no user input for it and no previous value - \"purely\" based on the values of other fields.\n         *\n         * At this level it delegates to [[calculateProjectedXDateWithDuration]]\n         *\n         * See also [[calculateEndDateProposed]].\n         */\n        *calculateEndDatePure() {\n            return yield* this.calculateProjectedXDateWithDuration(yield this.$.startDate, true, yield this.$.duration);\n        }\n        /**\n         * The \"proposed\" calculation function of the [[endDate]] field. It should calculate the [[endDate]] as if\n         * there's a user input for it or a previous value. It can also use the values of other fields to \"validate\"\n         * the \"proposed\" value.\n         *\n         * See also [[calculateEndDatePure]]\n         */\n        *calculateEndDateProposed() {\n            const project = this.getProject();\n            const endDate = yield ProposedOrPrevious;\n            const manuallyScheduled = yield this.$.manuallyScheduled;\n            return (!manuallyScheduled || project.skipNonWorkingTimeWhenSchedulingManually) ? yield* this.skipNonWorkingTime(endDate, false) : endDate;\n        }\n        //endregion\n        //region duration\n        /**\n         * Duration getter. Returns the duration of the event, in the given unit. If unit is not given, returns duration in [[durationUnit]].\n         *\n         * @param unit\n         */\n        getDuration(unit) {\n            const duration = this.duration;\n            return unit !== undefined ? this.getProject().convertDuration(duration, this.durationUnit, unit) : duration;\n        }\n        /**\n         * Duration setter.\n         *\n         * @param duration The new duration to set.\n         * @param unit The unit for new duration. Optional, if missing the [[durationUnit]] value will be used.\n         * @param keepStart A boolean flag, indicating, whether the intention is to keep the start date (`true`) or end date (`false`)\n         */\n        setDuration(duration, unit, keepStart) {\n            const { graph, project } = this;\n            if (graph) {\n                // this check is performed just because the duration editor tries to apply `undefined` when\n                // an input is invalid (and we want to filter that out)\n                // in the same time, we want to allow input of empty string - (task \"unscheduling\")\n                // so for unscheduling case, the editor will apply a `null` value, for invalid - `undefined`\n                // this is a mess of course (if the value is invalid, editor should not be applying anything at all),\n                // but so is life\n                if (duration !== undefined) {\n                    graph.write(this.$.duration, duration, unit, keepStart);\n                    return graph.commitAsync();\n                }\n            }\n            else {\n                const toSet = { duration };\n                this.$.duration.DATA = duration;\n                if (unit != null)\n                    toSet.durationUnit = this.$.durationUnit.DATA = unit;\n                // Also has to make sure record data is updated in case this detached record is displayed elsewhere\n                this.set(toSet);\n                // Possibly about to enter replica, wait for that\n                return project?.delayedCalculationPromise;\n            }\n        }\n        setDurationUnit(_value) {\n            throw new Error(\"Use `setDuration` instead\");\n        }\n        writeDuration(me, transaction, quark, duration, unit, keepStart = undefined) {\n            if (duration < 0)\n                duration = 0;\n            if (!transaction.baseRevision.hasIdentifier(me) && duration == null)\n                return;\n            if (!this.getProject().isStmRestoring) {\n                // this is basically: this.unscheduled = date == null, however it will work with branches\n                this.$.unscheduled.write(this.$.unscheduled, transaction, undefined, duration == null);\n            }\n            me.constructor.prototype.write.call(this, me, transaction, quark, duration, keepStart);\n            if (unit != null)\n                transaction.write(this.$.durationUnit, unit);\n        }\n        /**\n         * The main calculation method for the [[duration]] field. Delegates to either [[calculateDurationProposed]]\n         * or [[calculateDurationPure]], depending on the information from [[dispatcher]]\n         */\n        *calculateDuration() {\n            const dispatch = yield this.$.dispatcher;\n            const formulaId = dispatch.resolution.get(DurationVar);\n            if (formulaId === CalculateProposed) {\n                return yield* this.calculateDurationProposed();\n            }\n            else if (formulaId === durationFormula.formulaId) {\n                return yield* this.calculateDurationPure();\n                // the \"new way\" would be\n                // return yield* this.calculateProjectedDuration(yield this.$.startDate, yield this.$.endDate)\n            }\n            else {\n                throw new Error(\"Unknown formula for `duration`\");\n            }\n        }\n        /**\n         * The \"pure\" calculation function of the [[duration]] field. It should calculate the [[duration]] as if\n         * there's no user input for it and no previous value - \"purely\" based on the values of other fields.\n         *\n         * If start date of event is less or equal then end date (normal case) it delegates to [[calculateProjectedDuration]].\n         * Otherwise, duration is set to 0.\n         *\n         * See also [[calculateDurationProposed]].\n         */\n        *calculateDurationPure() {\n            const startDate = yield this.$.startDate;\n            const endDate = yield this.$.endDate;\n            if (!startDate || !endDate)\n                return null;\n            if (startDate > endDate) {\n                yield Write(this.$.duration, 0, null);\n            }\n            else {\n                return yield* this.calculateProjectedDuration(startDate, endDate);\n            }\n        }\n        /**\n         * The \"proposed\" calculation function of the [[duration]] field. It should calculate the [[duration]] as if\n         * there's a user input for it or a previous value. It can also use the values of other fields to \"validate\"\n         * the \"proposed\" value.\n         *\n         * See also [[calculateDurationPure]]\n         */\n        *calculateDurationProposed() {\n            return yield ProposedOrPrevious;\n        }\n        /**\n         * This method calculates the duration of the given time span, in the provided `durationUnit` or in the [[durationUnit]].\n         *\n         * @param startDate\n         * @param endDate\n         * @param durationUnit\n         */\n        *calculateProjectedDuration(startDate, endDate, durationUnit) {\n            if (!startDate || !endDate)\n                return null;\n            if (!durationUnit)\n                durationUnit = yield this.$.durationUnit;\n            const calendar = yield this.$.effectiveCalendar;\n            const project = this.getProject();\n            return yield* project.$convertDuration(calendar.calculateDurationMs(startDate, endDate), TimeUnit.Millisecond, durationUnit);\n        }\n        // effective duration is either a \"normal\" duration, or, if the duration itself is being calculated\n        // (so that yielding it will cause a cycle)\n        // an \"estimated\" duration, calculated based on proposed/previous start/end date values\n        *calculateEffectiveDuration() {\n            const dispatch = yield this.$.dispatcher;\n            let effectiveDurationToUse;\n            const durationResolution = dispatch.resolution.get(DurationVar);\n            if (durationResolution === CalculateProposed) {\n                effectiveDurationToUse = yield this.$.duration;\n            }\n            else if (durationResolution === durationFormula.formulaId) {\n                effectiveDurationToUse = yield* this.calculateProjectedDuration(yield ProposedOrPreviousValueOf(this.$.startDate), yield ProposedOrPreviousValueOf(this.$.endDate));\n            }\n            return effectiveDurationToUse;\n        }\n        //endregion\n        *calculateEffectiveCalendar() {\n            const manuallyScheduled = yield this.$.manuallyScheduled;\n            const project = this.getProject();\n            return manuallyScheduled && !project.skipNonWorkingTimeInDurationWhenSchedulingManually\n                ? project.defaultCalendar\n                : yield* super.calculateEffectiveCalendar();\n        }\n    }\n    __decorate([\n        model_field({ type: 'date' }, { converter: dateConverter })\n    ], BaseEventMixin.prototype, \"startDate\", void 0);\n    __decorate([\n        model_field({ type: 'date' }, { converter: dateConverter })\n    ], BaseEventMixin.prototype, \"endDate\", void 0);\n    __decorate([\n        model_field({ type: 'number', allowNull: true })\n    ], BaseEventMixin.prototype, \"duration\", void 0);\n    __decorate([\n        model_field({ type: 'string', defaultValue: TimeUnit.Day }, { converter: (unit) => DateHelper.normalizeUnit(unit) || TimeUnit.Day })\n    ], BaseEventMixin.prototype, \"durationUnit\", void 0);\n    __decorate([\n        model_field({ type: 'string', defaultValue: Direction.Forward }, { sync: true })\n    ], BaseEventMixin.prototype, \"direction\", void 0);\n    __decorate([\n        field({ identifierCls: SEDDispatcherIdentifier })\n    ], BaseEventMixin.prototype, \"dispatcher\", void 0);\n    __decorate([\n        model_field({ type: 'boolean', defaultValue: false })\n    ], BaseEventMixin.prototype, \"manuallyScheduled\", void 0);\n    __decorate([\n        model_field({ type: 'boolean', defaultValue: false })\n    ], BaseEventMixin.prototype, \"unscheduled\", void 0);\n    __decorate([\n        calculate('dispatcher')\n    ], BaseEventMixin.prototype, \"calculateDispatcher\", null);\n    __decorate([\n        build_proposed('dispatcher')\n    ], BaseEventMixin.prototype, \"buildProposedDispatcher\", null);\n    __decorate([\n        write('startDate')\n    ], BaseEventMixin.prototype, \"writeStartDate\", null);\n    __decorate([\n        calculate('startDate')\n    ], BaseEventMixin.prototype, \"calculateStartDate\", null);\n    __decorate([\n        write('endDate')\n    ], BaseEventMixin.prototype, \"writeEndDate\", null);\n    __decorate([\n        calculate('endDate')\n    ], BaseEventMixin.prototype, \"calculateEndDate\", null);\n    __decorate([\n        write('duration')\n    ], BaseEventMixin.prototype, \"writeDuration\", null);\n    __decorate([\n        calculate('duration')\n    ], BaseEventMixin.prototype, \"calculateDuration\", null);\n    return BaseEventMixin;\n}) {\n}\n", "var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Mixin } from \"../../../../ChronoGraph/class/BetterMixin.js\";\nimport { generic_field } from \"../../../../ChronoGraph/replica/Entity.js\";\nimport { ModelBucketField } from \"../../../chrono/ModelFieldAtom.js\";\nimport { BaseEventMixin } from \"./BaseEventMixin.js\";\nimport { AbstractHasAssignmentsMixin } from '../AbstractHasAssignmentsMixin.js';\n/**\n * This is a mixin, which can be applied to the [[BaseEventMixin]]. It provides the collection of all assignments,\n * which reference this event.\n *\n * Doesn't affect scheduling.\n */\nexport class BaseHasAssignmentsMixin extends Mixin([BaseEventMixin, AbstractHasAssignmentsMixin], (base) => {\n    const superProto = base.prototype;\n    class BaseHasAssignmentsMixin extends base {\n        get assignments() {\n            return this.assigned ? [...this.assigned] : [];\n        }\n    }\n    __decorate([\n        generic_field({}, ModelBucketField)\n    ], BaseHasAssignmentsMixin.prototype, \"assigned\", void 0);\n    return BaseHasAssignmentsMixin;\n}) {\n}\n", "var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Mixin } from \"../../../../ChronoGraph/class/BetterMixin.js\";\nimport { generic_field } from \"../../../../ChronoGraph/replica/Entity.js\";\nimport { ModelBucketField } from \"../../../chrono/ModelFieldAtom.js\";\nimport { BaseEventMixin } from \"./BaseEventMixin.js\";\n/**\n * This is a mixin, providing dependencies \"awareness\" for the event.\n *\n * Doesn't affect scheduling.\n */\nexport class HasDependenciesMixin extends Mixin([BaseEventMixin], (base) => {\n    const superProto = base.prototype;\n    class HasDependenciesMixin extends base {\n        leaveProject() {\n            // if the model is in the graph, so we are able to read its identifiers\n            if (this.isInActiveTransaction) {\n                const activeTransaction = this.graph.activeTransaction;\n                const dependencyStore = this.getDependencyStore();\n                const toRemove = [];\n                // https://github.com/bryntum/support/issues/6099\n                // use only calculated values, avoid triggering calculations\n                // (if calculation is needed, that probably means, that a dependency from the opposite side\n                // has been removed earlier in this transaction)\n                // trigger calculation will start a new epoch in the graph walker\n                // so large part of the graph will be repeatedly marked as dirty\n                // also filter to only existing, not yet removed records, otherwise STM records those as\n                // valid removes(?) and \"excessive rendering\" appears in the \"examples/advanced.t.js\" Gantt test\n                // (also not clear how that is related)\n                for (const dep of activeTransaction.readCurrentOrProposedOrPrevious(this.$.outgoingDeps) ?? [])\n                    if (dependencyStore.includes(dep))\n                        toRemove.push(dep);\n                for (const dep of activeTransaction.readCurrentOrProposedOrPrevious(this.$.incomingDeps) ?? [])\n                    if (dependencyStore.includes(dep))\n                        toRemove.push(dep);\n                this.project.dependencyStore.remove(toRemove);\n            }\n            superProto.leaveProject.call(this);\n        }\n    }\n    __decorate([\n        generic_field({}, ModelBucketField)\n    ], HasDependenciesMixin.prototype, \"outgoingDeps\", void 0);\n    __decorate([\n        generic_field({}, ModelBucketField)\n    ], HasDependenciesMixin.prototype, \"incomingDeps\", void 0);\n    return HasDependenciesMixin;\n}) {\n}\n", "import { Mixin } from '../../../../ChronoGraph/class/BetterMixin.js';\nimport { BaseEventMixin } from './BaseEventMixin.js';\nimport { BaseHasAssignmentsMixin } from \"./BaseHasAssignmentsMixin.js\";\nimport { HasDependenciesMixin } from './HasDependenciesMixin.js';\n/**\n * This is an event class, [[SchedulerBasicProjectMixin]] is working with.\n * It is constructed as [[BaseEventMixin]], enhanced with [[BaseHasAssignmentsMixin]] and [[HasDependenciesMixin]]\n */\nexport class SchedulerBasicEvent extends Mixin([\n    BaseEventMixin,\n    BaseHasAssignmentsMixin,\n    HasDependenciesMixin\n], (base) => {\n    const superProto = base.prototype;\n    class SchedulerBasicEvent extends base {\n    }\n    return SchedulerBasicEvent;\n}) {\n}\n", "import { Mixin } from \"../../../ChronoGraph/class/BetterMixin.js\";\nimport { SchedulerBasicEvent } from \"../model/scheduler_basic/SchedulerBasicEvent.js\";\nimport { ChronoPartOfProjectStoreMixin } from \"./mixin/ChronoPartOfProjectStoreMixin.js\";\nimport { AbstractEventStoreMixin } from \"./AbstractEventStoreMixin.js\";\n/**\n * A store mixin class, that represent collection of all events in the [[SchedulerBasicProjectMixin|project]].\n */\nexport class ChronoEventStoreMixin extends Mixin([AbstractEventStoreMixin, ChronoPartOfProjectStoreMixin], (base) => {\n    class ChronoEventStoreMixin extends base {\n        constructor() {\n            super(...arguments);\n            this.removalOrder = 400;\n        }\n        static get defaultConfig() {\n            return {\n                modelClass: SchedulerBasicEvent\n            };\n        }\n        set data(value) {\n            super.data = value;\n            this.afterEventRemoval();\n        }\n    }\n    return ChronoEventStoreMixin;\n}) {\n}\n/**\n * The tree store version of [[ChronoEventStoreMixin]].\n */\nexport class ChronoEventTreeStoreMixin extends Mixin([ChronoEventStoreMixin], (base) => {\n    class ChronoEventTreeStoreMixin extends base {\n        buildRootNode() {\n            return this.getProject() || {};\n        }\n        static get defaultConfig() {\n            return {\n                tree: true\n            };\n        }\n    }\n    return ChronoEventTreeStoreMixin;\n}) {\n}\n", "var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Mixin } from '../../../../ChronoGraph/class/BetterMixin.js';\nimport { generic_field } from \"../../../../ChronoGraph/replica/Entity.js\";\nimport { ModelBucketField } from '../../../chrono/ModelFieldAtom.js';\nimport { ChronoPartOfProjectModelMixin } from '../mixin/ChronoPartOfProjectModelMixin.js';\nimport { HasCalendarMixin } from './HasCalendarMixin.js';\n/**\n * This is a base resource entity.\n */\nexport class BaseResourceMixin extends Mixin([HasCalendarMixin, ChronoPartOfProjectModelMixin], (base) => {\n    const superProto = base.prototype;\n    class BaseResourceMixin extends base {\n        get assignments() {\n            return [...this.assigned];\n        }\n        leaveProject(isReplacing = false) {\n            // `this.assigned` will be empty if model is added to project and then removed immediately\n            // w/o any propagations\n            // when replacing a resource, the assignments should be left intact\n            if (!this.isStmRestoring && this.assigned && !isReplacing) {\n                const resourceStore = this.getResourceStore();\n                // to batch the assignments removal, we don't remove the assignments right away, but instead\n                // add them for the batched removal to the `assignmentsForRemoval` property of the event store\n                this.assigned.forEach(assignment => resourceStore.assignmentsForRemoval.add(assignment));\n            }\n            superProto.leaveProject.call(this);\n        }\n        // resource model should support the \"tree mode\" in the same way as event model\n        static get fields() {\n            return [\n                { name: 'parentId' },\n                { name: 'children', persist: false }\n            ];\n        }\n    }\n    __decorate([\n        generic_field({}, ModelBucketField)\n    ], BaseResourceMixin.prototype, \"assigned\", void 0);\n    return BaseResourceMixin;\n}) {\n}\n", "import { Mixin } from \"../../../ChronoGraph/class/BetterMixin.js\";\nimport { BaseResourceMixin } from \"../model/scheduler_basic/BaseResourceMixin.js\";\nimport { ChronoPartOfProjectStoreMixin } from \"./mixin/ChronoPartOfProjectStoreMixin.js\";\nimport { AbstractResourceStoreMixin } from \"./AbstractResourceStoreMixin.js\";\n/**\n * A store mixin class, that represent collection of all resources in the [[SchedulerBasicProjectMixin|project]].\n */\nexport class ChronoResourceStoreMixin extends Mixin([AbstractResourceStoreMixin, ChronoPartOfProjectStoreMixin], (base) => {\n    const superProto = base.prototype;\n    class ChronoResourceStoreMixin extends base {\n        constructor() {\n            super(...arguments);\n            this.removalOrder = 300;\n        }\n        static get defaultConfig() {\n            return {\n                modelClass: BaseResourceMixin\n            };\n        }\n    }\n    return ChronoResourceStoreMixin;\n}) {\n}\n", "var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Mixin } from \"../../ChronoGraph/class/BetterMixin.js\";\nimport { calculate, field } from \"../../ChronoGraph/replica/Entity.js\";\nimport { ChronoModelMixin } from \"../chrono/ChronoModelMixin.js\";\nimport { model_field } from \"../chrono/ModelFieldAtom.js\";\n/**\n * This mixin provides the duration converting functionality - the [[convertDuration]] method. It requires (inherit from) [[ChronoModelMixin]].\n */\nexport class DurationConverterMixin extends Mixin([ChronoModelMixin], (base) => {\n    const superProto = base.prototype;\n    class DurationConverterMixin extends base {\n        *calculateUnitsInMs() {\n            const hoursPerDay = yield this.$.hoursPerDay;\n            const daysPerWeek = yield this.$.daysPerWeek;\n            const daysPerMonth = yield this.$.daysPerMonth;\n            return {\n                millisecond: 1,\n                second: 1000,\n                minute: 60 * 1000,\n                hour: 60 * 60 * 1000,\n                day: hoursPerDay * 60 * 60 * 1000,\n                week: daysPerWeek * hoursPerDay * 60 * 60 * 1000,\n                month: daysPerMonth * hoursPerDay * 60 * 60 * 1000,\n                quarter: 3 * daysPerMonth * hoursPerDay * 60 * 60 * 1000,\n                year: 4 * 3 * daysPerMonth * hoursPerDay * 60 * 60 * 1000\n            };\n        }\n        /**\n         * Converts duration value from one time unit to another\n         * @param duration Duration value\n         * @param fromUnit Duration value time unit\n         * @param toUnit   Target time unit to convert the value to\n         */\n        convertDuration(duration, fromUnit, toUnit) {\n            let result = duration;\n            if (fromUnit !== toUnit) {\n                result = duration * this.unitsInMs[fromUnit] / this.unitsInMs[toUnit];\n            }\n            return result;\n        }\n        *$convertDuration(duration, fromUnit, toUnit) {\n            if (!fromUnit || !toUnit)\n                throw new Error(\"Conversion unit not provided\");\n            const unitsInMs = yield this.$.unitsInMs;\n            let result = duration;\n            if (fromUnit !== toUnit) {\n                result = duration * unitsInMs[fromUnit] / unitsInMs[toUnit];\n            }\n            return result;\n        }\n    }\n    __decorate([\n        field()\n    ], DurationConverterMixin.prototype, \"unitsInMs\", void 0);\n    __decorate([\n        model_field({ type: 'number', defaultValue: 24 })\n    ], DurationConverterMixin.prototype, \"hoursPerDay\", void 0);\n    __decorate([\n        model_field({ type: 'number', defaultValue: 7 })\n    ], DurationConverterMixin.prototype, \"daysPerWeek\", void 0);\n    __decorate([\n        model_field({ type: 'number', defaultValue: 30 })\n    ], DurationConverterMixin.prototype, \"daysPerMonth\", void 0);\n    __decorate([\n        calculate('unitsInMs')\n    ], DurationConverterMixin.prototype, \"calculateUnitsInMs\", null);\n    return DurationConverterMixin;\n}) {\n}\n", "var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Mixin } from '../../../../ChronoGraph/class/BetterMixin.js';\nimport { generic_field } from '../../../../ChronoGraph/replica/Entity.js';\nimport { model_field, ModelReferenceField, isSerializableEqual } from '../../../chrono/ModelFieldAtom.js';\nimport { DependencyType } from '../../../scheduling/Types.js';\nimport { ChronoPartOfProjectModelMixin } from '../mixin/ChronoPartOfProjectModelMixin.js';\n/**\n * Base dependency entity mixin type\n */\nexport class BaseDependencyMixin extends Mixin([ChronoPartOfProjectModelMixin], (base) => {\n    const superProto = base.prototype;\n    class BaseDependencyMixin extends base {\n        get isValid() {\n            const { $, graph } = this;\n            // In case the dependency is added but causes a conflict, fromEvent/toEvent are not in the graph. Thus\n            // reading them causes an exception which we want to avoid.\n            // This is caught sporadically by 10_handling.t.js in SchedulerPro\n            if (graph && (!graph.hasIdentifier($.fromEvent) || !graph.hasIdentifier($.toEvent))) {\n                return false;\n            }\n            return super.isValid;\n        }\n    }\n    __decorate([\n        generic_field({\n            bucket: 'outgoingDeps',\n            resolver: function (id) { return this.getEventById(id); },\n            modelFieldConfig: {\n                persist: true,\n                serialize: event => event?.id,\n                isEqual: isSerializableEqual\n            },\n        }, ModelReferenceField)\n    ], BaseDependencyMixin.prototype, \"fromEvent\", void 0);\n    __decorate([\n        generic_field({\n            bucket: 'incomingDeps',\n            resolver: function (id) { return this.getEventById(id); },\n            modelFieldConfig: {\n                persist: true,\n                serialize: event => event?.id,\n                isEqual: isSerializableEqual\n            },\n        }, ModelReferenceField)\n    ], BaseDependencyMixin.prototype, \"toEvent\", void 0);\n    __decorate([\n        model_field({ type: 'int', defaultValue: DependencyType.EndToStart })\n    ], BaseDependencyMixin.prototype, \"type\", void 0);\n    __decorate([\n        model_field({ type: 'string' })\n    ], BaseDependencyMixin.prototype, \"fromSide\", void 0);\n    __decorate([\n        model_field({ type: 'string' })\n    ], BaseDependencyMixin.prototype, \"toSide\", void 0);\n    return BaseDependencyMixin;\n}) {\n}\n", "import { Mixin } from \"../../../../ChronoGraph/class/BetterMixin.js\";\nimport { ChronoModelMixin } from \"../../../chrono/ChronoModelMixin.js\";\nimport { ConflictEffect } from \"../../../chrono/Conflict.js\";\nimport { AbstractProjectMixin } from \"../AbstractProjectMixin.js\";\nimport { EffectResolutionResult } from \"../../../chrono/SchedulingIssueEffect.js\";\n/**\n * This is an abstract project, which just lists the available stores.\n *\n * The actual project classes are [[SchedulerBasicProjectMixin]], [[SchedulerProProjectMixin]], [[GanttProjectMixin]].\n */\nexport class ChronoAbstractProjectMixin extends Mixin([ChronoModelMixin, AbstractProjectMixin], (base) => {\n    const superProto = base.prototype;\n    class ChronoAbstractProjectMixin extends base {\n        // External flag, toggled late in finalization when already entered replica\n        get isDelayingCalculation() {\n            return Boolean(this.delayEnteringReplica || this.delayedCalculationPromise);\n        }\n        getGraph() {\n            return this.replica;\n        }\n        beforeCommitAsync() { return null; }\n        enterReplica(enterRecords) { }\n        acceptChanges() { }\n        // If we are delaying calculations, return its promise which will be resolved when calculations are finished.\n        // As part of that process it will commit replica\n        async commitAsync() {\n            return this.delayedCalculationPromise || this.replica?.commitAsync();\n        }\n        getSchedulingIssueEventArguments(schedulingIssue, transaction, resolve, reject) {\n            const result = [\n                schedulingIssue.type,\n                {\n                    continueWithResolutionResult: resolve,\n                    schedulingIssue\n                }\n            ];\n            // For scheduling conflict public API expects to have \"conflict\" property w/ the ConflictEffect instance\n            if (schedulingIssue instanceof ConflictEffect)\n                result[1].conflict = schedulingIssue;\n            return result;\n        }\n        async onSchedulingIssueCall(schedulingIssue, transaction) {\n            // is there is a \"schedulingConflict\" event listener we expect resolution option will be picked there\n            if (schedulingIssue.type && this.hasListener(schedulingIssue.type)) {\n                return new Promise((resolve, reject) => {\n                    this.trigger(...this.getSchedulingIssueEventArguments(schedulingIssue, transaction, resolve, reject));\n                });\n            }\n            // by default we cancel the committed changes\n            return EffectResolutionResult.Cancel;\n        }\n        async onCycleSchedulingIssue(schedulingIssue, transaction) {\n            return this.onSchedulingIssueCall(schedulingIssue, transaction);\n        }\n        async onEmptyCalendarSchedulingIssue(schedulingIssue, transaction) {\n            return this.onSchedulingIssueCall(schedulingIssue, transaction);\n        }\n        async onConflictSchedulingIssue(schedulingIssue, transaction) {\n            return this.onSchedulingIssueCall(schedulingIssue, transaction);\n        }\n        setModelCalculations(model, calculations) {\n            if (!calculations)\n                return;\n            const oldValues = {};\n            // backup current calculations\n            for (const field in calculations) {\n                oldValues[field] = model.prototype.$calculations[field];\n            }\n            // Patch model prototype settings\n            Object.assign(model.prototype.$calculations, calculations);\n            return oldValues;\n        }\n        setRecordCalculations(record, calculations) {\n            const oldValues = this.setModelCalculations(record.constructor, calculations);\n            const skeleton = record.$entity.$skeleton;\n            Object.keys(calculations).forEach(field => {\n                skeleton[field].prototype.calculation = record[calculations[field]];\n            });\n            return oldValues;\n        }\n        setStoreCalculations(store, calculations) {\n            if (!calculations)\n                return;\n            // Rebuild corresponding identifiers\n            const record = store.first;\n            if (record) {\n                return this.setRecordCalculations(record, calculations);\n            }\n            else {\n                return this.setModelCalculations(store.modelClass, calculations);\n            }\n        }\n        /**\n         * Overrides the project owned store identifiers calculation.\n         * @param calculations Object providing new identifier calculation function names.\n         * The object is grouped by store identifiers. For example below code\n         * overrides event `startDate`, `endDate` and `duration` calculation so\n         * the fields will always simply return their current values:\n         *\n         * ```typescript\n         * // event startDate, endDate and duration will use their userProvidedValue method\n         * // which simply returns their current values as-is\n         * const oldCalculations = await project.setCalculations({\n         *     events : {\n         *         startDate : \"userProvidedValue\",\n         *         endDate   : \"userProvidedValue\",\n         *         duration  : \"userProvidedValue\"\n         *     }\n         * })\n         * ```\n         * @returns Promise that resolves with an object having the overridden calculations.\n         * The object can be used to toggle the calculations back in the future:\n         * ```typescript\n         * // override event duration calculation\n         * const oldCalculations = await project.setCalculations({\n         *     events : {\n         *         duration  : \"userProvidedValue\"\n         *     }\n         * })\n         * // revert the duration calculation back\n         * project.setCalculations(oldCalculations)\n         * ```\n         */\n        async setCalculations(calculations) {\n            // Graph might not be created if using delayed calculations\n            this.replica && await this.commitAsync();\n            const oldCalculations = {};\n            const stores = {\n                tasks: this.eventStore,\n                events: this.eventStore,\n                dependencies: this.dependencyStore,\n                resources: this.resourceStore,\n                assignments: this.assignmentStore,\n                calendars: this.calendarManagerStore\n            };\n            Object.keys(stores).forEach(id => {\n                // Apply calculation change to every owned store\n                if (calculations[id]) {\n                    oldCalculations[id] = this.setStoreCalculations(stores[id], calculations[id]);\n                }\n            });\n            // Apply calculation changes to the project if provided\n            let projectCalculations = calculations.project;\n            if (projectCalculations) {\n                oldCalculations.project = this.setRecordCalculations(this, projectCalculations);\n            }\n            // Repopulate replica w/ updated identifiers\n            //@ts-ignore\n            this.replica && this.repopulateReplica.now();\n            this.replica && await this.commitAsync();\n            // return previous calculation settings\n            return oldCalculations;\n        }\n    }\n    return ChronoAbstractProjectMixin;\n}) {\n}\n", "import { Mixin } from \"../../../../ChronoGraph/class/BetterMixin.js\";\nimport { MAX_DATE, MIN_DATE } from \"../../../util/Constants.js\";\nimport { BaseEventMixin } from \"./BaseEventMixin.js\";\n// this mixin can be better named `ScheduledBySubEvents`\n// it can also be defined as \"HasChildrenOnly\" - ie has child events, but does not have parent (not part of the tree structure)\n// then the `HasChildrenMixin` would be `HasParent`\n/**\n * This mixin provides the notion of \"sub events\" for the [[BaseEventMixin]], which is a bit more general concept\n * of the \"child\" events. This special notion is required, because the event store can be a flat store, not providing\n * any tree structuring. In the same time, we treat the project instance as a \"parent\" event for all events in the flat\n * event store - so it accumulates the same aggregation information as other \"regular\" parent events.\n *\n * The event with this mixin is scheduled according to the \"sub events\" information - it starts at the earliest date\n * among all sub events and ends at the latest. If there's no \"sub events\" - it delegates to previous behaviour.\n *\n * Scheduling by children can be disabled by setting [[manuallyScheduled]] flag to `true` which will\n * result [[startDate]] and [[endDate]] fields will keep their provided values.\n */\nexport class HasSubEventsMixin extends Mixin([BaseEventMixin], (base) => {\n    const superProto = base.prototype;\n    class HasSubEventsMixin extends base {\n        static get $name() {\n            return 'HasSubEventsMixin';\n        }\n        /**\n         * The abstract method which should indicate whether this event has sub events\n         */\n        *hasSubEvents() {\n            throw new Error(\"Abstract method `hasSubEvents` has been called\");\n        }\n        /**\n         * The abstract method which should return an Iterable of [[BaseEventMixin]]\n         */\n        *subEventsIterable() {\n            throw new Error(\"Abstract method `subEventsIterable` has been called\");\n        }\n        *calculateStartDatePure() {\n            const manuallyScheduled = yield this.$.manuallyScheduled;\n            const hasSubEvents = yield* this.hasSubEvents();\n            if (!manuallyScheduled && hasSubEvents) {\n                return yield* this.calculateMinChildrenStartDate();\n            }\n            else {\n                return yield* superProto.calculateStartDatePure.call(this);\n            }\n        }\n        *calculateEndDatePure() {\n            const manuallyScheduled = yield this.$.manuallyScheduled;\n            const hasSubEvents = yield* this.hasSubEvents();\n            if (!manuallyScheduled && hasSubEvents) {\n                return yield* this.calculateMaxChildrenEndDate();\n            }\n            else {\n                return yield* superProto.calculateEndDatePure.call(this);\n            }\n        }\n        *calculateStartDateProposed() {\n            const manuallyScheduled = yield this.$.manuallyScheduled;\n            const hasSubEvents = yield* this.hasSubEvents();\n            if (!manuallyScheduled && hasSubEvents) {\n                return yield* this.calculateStartDatePure();\n            }\n            else {\n                return yield* superProto.calculateStartDateProposed.call(this);\n            }\n        }\n        *calculateEndDateProposed() {\n            const manuallyScheduled = yield this.$.manuallyScheduled;\n            const hasSubEvents = yield* this.hasSubEvents();\n            if (!manuallyScheduled && hasSubEvents) {\n                return yield* this.calculateEndDatePure();\n            }\n            else {\n                return yield* superProto.calculateEndDateProposed.call(this);\n            }\n        }\n        *calculateDurationProposed() {\n            const manuallyScheduled = yield this.$.manuallyScheduled;\n            const hasSubEvents = yield* this.hasSubEvents();\n            if (!manuallyScheduled && hasSubEvents) {\n                return yield* this.calculateDurationPure();\n            }\n            else {\n                return yield* superProto.calculateDurationProposed.call(this);\n            }\n        }\n        /**\n         * The method defines wether the provided child event should be\n         * taken into account when calculating this summary event [[startDate]].\n         * Child events roll up their [[startDate]] values to their summary tasks.\n         * So a summary task [[startDate|start]] date gets equal to\n         * its minimal child [[startDate|start]].\n         *\n         * If the method returns `true` the child event is taken into account\n         * and if the method returns `false` it's not.\n         * By default the method returns `true` to include all child events data.\n         * @param childEvent Child event to consider.\n         * @returns `true` if the provided event should be taken into account, `false` if not.\n         */\n        *shouldRollupChildStartDate(child) {\n            return true;\n        }\n        /**\n         * Calculates the minimal sub-events [[startDate]].\n         * The method is used for calculating the event [[startDate]].\n         */\n        *calculateMinChildrenStartDate() {\n            const children = yield* this.subEventsIterable();\n            let timestamp = MAX_DATE.getTime();\n            for (const child of children) {\n                if (yield* this.shouldRollupChildStartDate(child)) {\n                    let date = yield child.$.startDate;\n                    // if the child has endDate only - use that value\n                    if (!date) {\n                        date = yield child.$.endDate;\n                    }\n                    if (date && date.getTime() < timestamp) {\n                        timestamp = date.getTime();\n                    }\n                }\n            }\n            if (timestamp === MIN_DATE.getTime() || timestamp === MAX_DATE.getTime())\n                return null;\n            return new Date(timestamp);\n        }\n        /**\n         * The method defines wether the provided child event should be\n         * taken into account when calculating this summary event [[endDate]].\n         * Child events roll up their [[endDate]] values to their summary tasks.\n         * So a summary task [[endDate|end]] gets equal to its maximal child [[endDate|end]].\n         *\n         * If the method returns `true` the child event is taken into account\n         * and if the method returns `false` it's not.\n         * By default the method returns `true` to include all child events data.\n         * @param childEvent Child event to consider.\n         * @returns `true` if the provided event should be taken into account, `false` if not.\n         */\n        *shouldRollupChildEndDate(child) {\n            return true;\n        }\n        /**\n         * Calculates the maximum sub-events [[endDate]].\n         * The method is used for calculating the event [[endDate]].\n         */\n        *calculateMaxChildrenEndDate() {\n            const children = yield* this.subEventsIterable();\n            let timestamp = MIN_DATE.getTime();\n            for (const child of children) {\n                if (yield* this.shouldRollupChildEndDate(child)) {\n                    let date = yield child.$.endDate;\n                    if (!date) {\n                        date = yield child.$.startDate;\n                    }\n                    if (date && date.getTime() > timestamp) {\n                        timestamp = date.getTime();\n                    }\n                }\n            }\n            if (timestamp === MIN_DATE.getTime() || timestamp === MAX_DATE.getTime())\n                return null;\n            return new Date(timestamp);\n        }\n    }\n    return HasSubEventsMixin;\n}) {\n}\n", "var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Mixin } from \"../../../../ChronoGraph/class/BetterMixin.js\";\nimport { reference } from \"../../../../ChronoGraph/replica/Reference.js\";\nimport { bucket } from \"../../../../ChronoGraph/replica/ReferenceBucket.js\";\nimport { HasSubEventsMixin } from \"./HasSubEventsMixin.js\";\n/**\n * Specialized version of the [[HasSubEventsMixin]]. The event becomes part of the tree structure.\n * It now has reference to the [[parentEvent]] and a collection of [[childEvents]].\n *\n * The abstract methods from the [[HasSubEventsMixin]] are defined to operate on the [[childEvents]] collection.\n */\nexport class HasChildrenMixin extends Mixin([HasSubEventsMixin], (base) => {\n    const superProto = base.prototype;\n    class HasChildrenMixin extends base {\n        /**\n         * Returns `true` if the event has nested sub-events.\n         */\n        *hasSubEvents() {\n            const childEvents = yield this.$.childEvents;\n            return childEvents.size > 0;\n        }\n        /**\n         * Returns iterable object listing the event nested sub-events.\n         * ```typescript\n         * const subEventsIterator : Iterable<HasChildrenMixin> = yield* event.subEventsIterable()\n         *\n         * for (let childEvent of subEventsIterator) {\n         *     // ..do something..\n         * }\n         * ```\n         */\n        *subEventsIterable() {\n            return yield this.$.childEvents;\n        }\n        get parent() {\n            return this._parent;\n        }\n        set parent(value) {\n            this._parent = value;\n            this.parentEvent = value;\n        }\n    }\n    __decorate([\n        reference({ bucket: 'childEvents' })\n    ], HasChildrenMixin.prototype, \"parentEvent\", void 0);\n    __decorate([\n        bucket()\n    ], HasChildrenMixin.prototype, \"childEvents\", void 0);\n    return HasChildrenMixin;\n}) {\n}\n", "var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { MixinAny } from \"../../../../ChronoGraph/class/BetterMixin.js\";\nimport { ReadMode, Replica } from \"../../../../ChronoGraph/replica/Replica.js\";\nimport { Schema } from \"../../../../ChronoGraph/schema/Schema.js\";\nimport { delay } from \"../../../../ChronoGraph/util/Helpers.js\";\nimport StateTrackingManager from \"../../../../Core/data/stm/StateTrackingManager.js\";\nimport Store from \"../../../../Core/data/Store.js\";\nimport { model_field, ModelReferenceField, IsChronoModelSymbol, ModelBucketField } from \"../../../chrono/ModelFieldAtom.js\";\nimport { EngineReplica, CycleEffect } from \"../../../chrono/Replica.js\";\nimport { DurationConverterMixin } from \"../../../scheduling/DurationConverterMixin.js\";\nimport { ProjectType } from \"../../../scheduling/Types.js\";\nimport { ChronoAssignmentStoreMixin } from \"../../store/ChronoAssignmentStoreMixin.js\";\nimport { ChronoCalendarManagerStoreMixin } from \"../../store/ChronoCalendarManagerStoreMixin.js\";\nimport { ChronoDependencyStoreMixin } from \"../../store/ChronoDependencyStoreMixin.js\";\nimport { ChronoEventStoreMixin } from \"../../store/ChronoEventStoreMixin.js\";\nimport { ChronoResourceStoreMixin } from \"../../store/ChronoResourceStoreMixin.js\";\nimport { ChronoAbstractProjectMixin } from \"./ChronoAbstractProjectMixin.js\";\nimport { BaseAssignmentMixin } from \"./BaseAssignmentMixin.js\";\nimport { BaseCalendarMixin } from \"./BaseCalendarMixin.js\";\nimport { BaseDependencyMixin } from \"./BaseDependencyMixin.js\";\nimport { BaseEventMixin } from \"./BaseEventMixin.js\";\nimport { BaseResourceMixin } from \"./BaseResourceMixin.js\";\nimport { CanCombineCalendarsMixin, HasCalendarMixin } from \"./HasCalendarMixin.js\";\nimport { HasSubEventsMixin } from \"./HasSubEventsMixin.js\";\nimport { SchedulerBasicEvent } from \"./SchedulerBasicEvent.js\";\nimport ObjectHelper from \"../../../../Core/helper/ObjectHelper.js\";\n/**\n * Basic Scheduler project mixin type. At this level, events have assignments and dependencies, which both are, however,\n * only visual and do not affect the scheduling.\n */\nexport class SchedulerBasicProjectMixin extends MixinAny([\n    ChronoAbstractProjectMixin,\n    BaseEventMixin,\n    HasSubEventsMixin,\n    HasCalendarMixin,\n    DurationConverterMixin,\n    CanCombineCalendarsMixin\n], (base) => {\n    const superProto = base.prototype;\n    class SchedulerBasicProjectMixin extends base {\n        construct(config = {}) {\n            this.delayCalculation = config.delayCalculation !== false;\n            this.enableProgressNotifications = config.enableProgressNotifications || config.delayCalculation !== false;\n            // Expand project by default to make getRange to work\n            if (!('expanded' in config)) {\n                // @ts-ignore\n                config.expanded = true;\n            }\n            if (this.delayCalculation) {\n                this.delayEnteringReplica = true;\n            }\n            if (!('skipNonWorkingTimeWhenSchedulingManually' in config)) {\n                config.skipNonWorkingTimeWhenSchedulingManually = false;\n            }\n            superProto.construct.call(this, config);\n            this.repopulateStores = new Set();\n            this.ignoreInitialCommitComputationCycles = ('ignoreInitialCommitComputationCycles' in config) ? config.ignoreInitialCommitComputationCycles : false;\n            if (this.ignoreInitialCommitComputationCycles) {\n                console.warn('Project \"ignoreInitialCommitComputationCycles\" option is deprecated and will be dropped in the next major release');\n            }\n            if (!this.eventModelClass)\n                this.eventModelClass = this.getDefaultEventModelClass();\n            if (!this.eventStoreClass)\n                this.eventStoreClass = this.getDefaultEventStoreClass();\n            if (!this.dependencyModelClass)\n                this.dependencyModelClass = this.getDefaultDependencyModelClass();\n            if (!this.dependencyStoreClass)\n                this.dependencyStoreClass = this.getDefaultDependencyStoreClass();\n            if (!this.resourceModelClass)\n                this.resourceModelClass = this.getDefaultResourceModelClass();\n            if (!this.resourceStoreClass)\n                this.resourceStoreClass = this.getDefaultResourceStoreClass();\n            if (!this.assignmentModelClass)\n                this.assignmentModelClass = this.getDefaultAssignmentModelClass();\n            if (!this.assignmentStoreClass)\n                this.assignmentStoreClass = this.getDefaultAssignmentStoreClass();\n            if (!this.calendarModelClass)\n                this.calendarModelClass = this.getDefaultCalendarModelClass();\n            if (!this.calendarManagerStoreClass)\n                this.calendarManagerStoreClass = this.getDefaultCalendarManagerStoreClass();\n            if (!this.cycleEffectClass)\n                this.cycleEffectClass = this.getDefaultCycleEffectClass();\n            this.initializeStm();\n            // NOTE, default calendar is assumed to be 24/7/365, because it is used for manually scheduled events\n            // not part of the CalendarManagerStore intentionally, not persisted\n            this.defaultCalendar = new this.calendarModelClass({\n                unspecifiedTimeIsWorking: this.unspecifiedTimeIsWorking\n            });\n            this.defaultCalendar.project = this;\n            if (!this.delayEnteringReplica)\n                this.enterReplica(false);\n            this.setCalendarManagerStore(this.calendarManagerStore);\n            this.setEventStore(this.eventStore);\n            this.setDependencyStore(this.dependencyStore);\n            this.setResourceStore(this.resourceStore);\n            this.setAssignmentStore(this.assignmentStore);\n            const hasInlineData = Boolean(this.calendarsData || this.eventsData || this.dependenciesData || this.resourcesData || this.assignmentsData);\n            if (hasInlineData) {\n                // this branch has `scheduleDelayedCalculation` call inside `loadInlineData`\n                this.loadInlineData({\n                    calendarsData: this.calendarsData,\n                    eventsData: this.eventsData,\n                    dependenciesData: this.dependenciesData,\n                    resourcesData: this.resourcesData,\n                    assignmentsData: this.assignmentsData\n                });\n                delete this.calendarsData;\n                delete this.eventsData;\n                delete this.dependenciesData;\n                delete this.resourcesData;\n                delete this.assignmentsData;\n            }\n            else {\n                // on this branch need to call it manually\n                // avoid calling `scheduleDelayedCalculation` unless absolutely necessary\n                // this is to avoid having 2 commits in the project - 1st with empty data\n                // 2nd with real data\n                // we have special behavior tied to the 1st commit, like state restoring (previously selected record)\n                if (this.delayCalculation && this.hasDataInStores)\n                    this.scheduleDelayedCalculation();\n            }\n        }\n        get hasDataInStores() {\n            return [\n                this.calendarManagerStore,\n                this.eventStore,\n                this.dependencyStore,\n                this.resourceStore,\n                this.assignmentStore\n            ].some(store => store.allCount > 0);\n        }\n        enterReplica(enterRecords) {\n            const me = this;\n            if (!me.replica) {\n                me.replica = me.createReplica();\n                me.replica.addEntity(me);\n                me.replica.addEntity(me.defaultCalendar);\n                me.trigger('graphReady');\n            }\n            // In delayCalculation mode no records entered the graph on construction,\n            // instead we enter them now after first draw\n            if (enterRecords && !me.isRepopulatingStores) {\n                // Only enter \"new\" records, we are called when records are added later on\n                me.calendarManagerStore.forEach(r => { !r.graph && r.joinProject(); }, undefined, { includeFilteredOutRecords: true });\n                me.eventStore.forEach(r => { !r.graph && r.joinProject(); }, undefined, { includeFilteredOutRecords: true });\n                me.resourceStore.forEach(r => { !r.graph && r.joinProject(); }, undefined, { includeFilteredOutRecords: true });\n                me.dependencyStore.forEach(r => { !r.graph && r.joinProject(); }, undefined, { includeFilteredOutRecords: true });\n                me.assignmentStore.forEach(r => { !r.graph && r.joinProject(); }, undefined, { includeFilteredOutRecords: true });\n            }\n        }\n        resetStmQueue() {\n            const wasDisabled = this.stm.disabled;\n            this.stm.disable();\n            this.stm.resetQueue();\n            if (!wasDisabled) {\n                this.stm.enable();\n            }\n        }\n        doDestroy() {\n            const me = this;\n            me.eventStore?.destroy();\n            me.dependencyStore?.destroy();\n            me.assignmentStore?.destroy();\n            me.resourceStore?.destroy();\n            me.calendarManagerStore?.destroy();\n            me.defaultCalendar?.destroy();\n            me.replica?.clear();\n            me.stm?.destroy();\n            superProto.doDestroy.call(this);\n        }\n        getReplicaConfig() {\n            return {\n                project: this,\n                schema: Schema.new(),\n                enableProgressNotifications: this.enableProgressNotifications,\n                silenceInitialCommit: this.silenceInitialCommit,\n                ignoreInitialCommitComputationCycles: this.ignoreInitialCommitComputationCycles,\n                cycleEffectClass: this.cycleEffectClass,\n                onWriteDuringCommit: 'ignore',\n                readMode: ReadMode.CurrentOrProposedOrPrevious\n            };\n        }\n        // Creates a new Replica, used during construction and when repopulating\n        createReplica() {\n            return EngineReplica.mix(Replica).new(this.getReplicaConfig());\n        }\n        *hasSubEvents() {\n            return this.getEventStore().count > 0;\n        }\n        *subEventsIterable() {\n            return this.getEventStore().getRange();\n        }\n        getType() {\n            return ProjectType.SchedulerBasic;\n        }\n        get enableProgressNotifications() {\n            return this._enableProgressNotifications;\n        }\n        /**\n         * Enables/disables the calculation progress notifications.\n         */\n        set enableProgressNotifications(value) {\n            this._enableProgressNotifications = value;\n            if (this.replica)\n                this.replica.enableProgressNotifications = value;\n        }\n        getDefaultCycleEffectClass() {\n            return CycleEffect;\n        }\n        /**\n         * Returns the default event model class to use\n         */\n        getDefaultEventModelClass() {\n            return SchedulerBasicEvent;\n        }\n        /**\n         * Returns the default event store class to use\n         */\n        getDefaultEventStoreClass() {\n            return ChronoEventStoreMixin;\n        }\n        /**\n         * Returns the default dependency model class to use\n         */\n        getDefaultDependencyModelClass() {\n            return BaseDependencyMixin;\n        }\n        /**\n         * Returns the default dependency store class to use\n         */\n        getDefaultDependencyStoreClass() {\n            return ChronoDependencyStoreMixin;\n        }\n        /**\n         * Returns the default resource model class to use\n         */\n        getDefaultResourceModelClass() {\n            return BaseResourceMixin;\n        }\n        /**\n         * Returns the default resource store class to use\n         */\n        getDefaultResourceStoreClass() {\n            return ChronoResourceStoreMixin;\n        }\n        /**\n         * Returns the default assignment model class to use\n         */\n        getDefaultAssignmentModelClass() {\n            return BaseAssignmentMixin;\n        }\n        /**\n         * Returns the default assignment store class to use\n         */\n        getDefaultAssignmentStoreClass() {\n            return ChronoAssignmentStoreMixin;\n        }\n        /**\n         * Returns the default calendar model class to use\n         */\n        getDefaultCalendarModelClass() {\n            return BaseCalendarMixin;\n        }\n        /**\n         * Returns the default calendar manager store class to use\n         */\n        getDefaultCalendarManagerStoreClass() {\n            return ChronoCalendarManagerStoreMixin;\n        }\n        usingSyncDataOnLoad() {\n            return [this.eventStore, this.resourceStore, this.dependencyStore, this.assignmentStore].some(s => s.syncDataOnLoad);\n        }\n        /**\n         * This method loads the \"raw\" data into the project. The loading is basically happening by\n         * assigning the individual data entries to the `data` property of the corresponding store.\n         *\n         * @param data\n         */\n        async loadInlineData(data) {\n            const { calendarManagerStore, eventStore, dependencyStore, assignmentStore, resourceStore, replica } = this;\n            if (!this.isInitialCommitPerformed) {\n                // Prevent initial commit from happening before inline data is loaded\n                replica?.unScheduleAutoCommit();\n            }\n            else {\n                // We want to be very sure that calculations are complete before we plug new data in.\n                // For a scenario where a client plugged new datasets in on every store change, thus multiple times\n                // during a single commit()\n                while (this.replica.isCommitting) {\n                    await this.commitAsync();\n                }\n            }\n            if (replica?.enableProgressNotifications && !this.delayCalculation) {\n                // First delay needed to allow assignment of Project -> Gantt to happen before carrying on,\n                // to make sure progress listener is in place\n                await delay(0);\n                // wait till the current propagation completes (if any)\n                // otherwise the mask shown due to the next line call will be\n                // destroyed as the propagation gets done\n                await this.commitAsync();\n                replica.onPropagationProgressNotification({ total: 0, remaining: 0, phase: 'storePopulation' });\n                // Second delay needed to allow mask to appear, not clear why delay(0) is not enough, it works in other\n                // places\n                await delay(50);\n            }\n            this.isInitialCommitPerformed = false;\n            this.isLoadingInlineData = true;\n            if (globalThis.DEBUG) {\n                console.log(`%cInitializing project`, 'font-weight:bold;color:darkgreen;text-transform:uppercase;margin-top: 2em');\n                console.time('Time to visible');\n                console.time('Populating project');\n            }\n            // Prevent records from entering replica on reload, schedule delayed entering / calculation\n            if (this.delayCalculation && !this.delayedCalculationPromise && !this.usingSyncDataOnLoad()) {\n                this.scheduleDelayedCalculation();\n            }\n            if (data.calendarsData) {\n                this.repopulateStore(calendarManagerStore);\n                calendarManagerStore.data = data.calendarsData;\n            }\n            if (data.eventsData || data.tasksData) {\n                this.repopulateStore(eventStore);\n                eventStore.data = data.eventsData || data.tasksData;\n            }\n            if (data.dependenciesData) {\n                this.repopulateStore(dependencyStore);\n                dependencyStore.data = data.dependenciesData;\n            }\n            if (data.resourcesData) {\n                this.repopulateStore(resourceStore);\n                resourceStore.data = data.resourcesData;\n            }\n            if (data.assignmentsData) {\n                this.repopulateStore(assignmentStore);\n                assignmentStore.data = data.assignmentsData;\n            }\n            if (data.project) {\n                //@ts-ignore\n                this.applyProjectResponse(data.project);\n            }\n            if (globalThis.DEBUG)\n                console.timeEnd('Populating project');\n            const result = await this.commitLoad();\n            this.isLoadingInlineData = false;\n            return result;\n        }\n        // Called from scheduleDelayedCalculation() & setAssignmentStore to set up indices used to look events and\n        // resources up before calculations has finished\n        setupTemporaryIndices() {\n            const { storage } = this.assignmentStore || {};\n            // First delayed calculation starts before assignmentStore is created => no storage\n            if (storage) {\n                // Set up indices to mimic buckets (removed again in below)\n                storage.addIndex({ property: 'event', unique: false });\n                storage.addIndex({ property: 'resource', unique: false });\n            }\n        }\n        removeTemporaryIndices() {\n            const { storage } = this.assignmentStore;\n            // Indices mimicking buckets are no longer needed now, get rid of them\n            storage.removeIndex('event');\n            storage.removeIndex('resource');\n        }\n        async internalDelayCalculation(resolve) {\n            const me = this;\n            me.delayEnteringReplica = true;\n            me.setupTemporaryIndices();\n            // If listeners are defined on project, we have to wait until after construction before they can\n            // catch any events\n            await delay(0);\n            if (me.isDestroyed) {\n                resolve();\n                return;\n            }\n            me.trigger('delayCalculationStart');\n            // In delayCalculation mode, we trigger refresh before calculating to let UI draw early\n            me.trigger('refresh', { isCalculated: false });\n            await delay(0);\n            if (me.isDestroyed) {\n                resolve();\n                return;\n            }\n            me.delayEnteringReplica = false;\n            // After triggering (and thus drawing) we let everything enter the graph, either by repopulating\n            // a new replica or by entering the existing (or a new from scratch the first time)\n            if (me.isRepopulatingStores) {\n                // @ts-ignore\n                me.repopulateReplica.now();\n            }\n            else {\n                // this triggers the re-application of the `responseData.project`\n                // to the project instance, which might be delayed due to the\n                // `delayEnteringReplica` flag\n                me.trigger('recordsUnlinked');\n                me.enterReplica(true);\n            }\n            const result = await me.replica.commitAsync();\n            if (me.isDestroyed) {\n                resolve();\n                return;\n            }\n            resolve(result);\n            me.delayedCalculationPromise = null;\n            me.trigger('delayCalculationEnd');\n            me.removeTemporaryIndices();\n        }\n        scheduleDelayedCalculation() {\n            if (this.delayedCalculationPromise) {\n                return this.delayedCalculationPromise;\n            }\n            if (this.delayCalculation !== false) {\n                return this.delayedCalculationPromise = new Promise(resolve => \n                // Cannot use async code directly in Promise executor, because it hides errors\n                this.internalDelayCalculation(resolve).then());\n            }\n        }\n        async commitLoad() {\n            // if (globalThis.DEBUG) console.time('Initial propagation')\n            const result = await this.commitAsync();\n            // Might have been destroyed during the async operation above\n            if (!this.isDestroyed)\n                this.trigger('load');\n            return result;\n        }\n        initializeStm() {\n            const stmClass = this.stmClass || StateTrackingManager;\n            // @ts-ignore\n            if (!(this.stm instanceof StateTrackingManager))\n                this.setStm(stmClass.new({ disabled: true }, this.stm));\n            if (this.resetUndoRedoQueuesAfterLoad) {\n                this.ion({\n                    load: this.resetStmQueue,\n                    thisObj: this\n                });\n            }\n            this.ion({\n                beforeCommit: this.onCommitInitialization,\n                commitFinalized: this.onCommitFinalization,\n                commitRejected: this.onCommitRejection,\n                thisObj: this\n            });\n        }\n        removeRejectedRecordsAdd({ transactionResult, silenceCommit }) {\n            const recordsToDrop = new Map();\n            for (const quark of transactionResult.entries.values()) {\n                const identifier = quark.identifier;\n                const { field } = identifier;\n                if (quark.isShadow() || !identifier[IsChronoModelSymbol] || field instanceof ModelBucketField)\n                    continue;\n                const record = identifier.self;\n                const store = record.firstStore;\n                // collect records w/ atoms not having a previous value\n                if (store && !quark.previous && !transactionResult.transaction.getLatestStableEntryFor(record.$$)?.previous) {\n                    if (!recordsToDrop.has(store)) {\n                        recordsToDrop.set(store, new Set([record]));\n                    }\n                    else if (!recordsToDrop.get(store).has(record)) {\n                        recordsToDrop.get(store).add(record);\n                    }\n                }\n            }\n            // @ts-ignore\n            this.suspendChangesTracking?.();\n            const stores = Array.from(recordsToDrop.keys()).sort((a, b) => a.removalOrder - b.removalOrder);\n            // remove the collected records\n            stores.forEach(store => store.remove(recordsToDrop.get(store)));\n            // @ts-ignore\n            this.resumeChangesTracking?.(silenceCommit);\n            if (silenceCommit) {\n                this.eventStore.acceptChanges();\n                this.dependencyStore.acceptChanges();\n                this.resourceStore.acceptChanges();\n                this.assignmentStore.acceptChanges();\n                this.calendarManagerStore.acceptChanges();\n            }\n        }\n        onCommitRejection(event) {\n            // if STM is disabled we're trying to revert changes w/o it\n            if (this._stmDisabled) {\n                this.replica.isWritingPreviousData = true;\n                this.isRestoringData = true;\n                this.removeRejectedRecordsAdd(event);\n                this.isRestoringData = false;\n                this.replica.isWritingPreviousData = false;\n            }\n            // reject last transaction STM has\n            else {\n                this.rejectStmTransaction();\n            }\n        }\n        // https://github.com/bryntum/support/issues/1270\n        onCommitInitialization() {\n            const { stm } = this;\n            this._stmDisabled = stm.disabled;\n            if (stm.isRecording && stm.autoRecord) {\n                this._stmAutoRecord = true;\n                // If auto recording is enabled when we are entering a commit, we need to move autoRecording\n                // state to Recording in order to make sure all changes from the project will become a single\n                // transaction\n                stm.autoRecord = false;\n            }\n        }\n        onCommitFinalization() {\n            if (this._stmAutoRecord) {\n                // This will restore autoRecording state and trigger timer to stop transaction after a delay\n                this.stm.autoRecord = true;\n                this._stmAutoRecord = false;\n            }\n        }\n        onSTMRestoringStart({ source: stm }) {\n            if (this.replica)\n                this.replica.isWritingPreviousData = true;\n        }\n        // Propagate on undo/redo\n        async onSTMRestoringStop({ source }) {\n            if (this.replica)\n                this.replica.isWritingPreviousData = false;\n            const stm = source;\n            // Disable STM meanwhile to not pick it up as a new STM transaction\n            stm.disable();\n            await this.commitAsync();\n            if (!this.isDestroyed) {\n                stm.enable();\n                this.trigger('stateRestoringDone');\n            }\n        }\n        //region Repopulate\n        // defers the call to given function with given arguments until the `repopulateReplica` event\n        // (if replica is scheduled for repopulation, otherwise calls immediately)\n        // between the multiple defers with the same `deferId`, only the latest one is called\n        deferUntilRepopulationIfNeeded(deferId, func, args) {\n            if (this.isRepopulatingStores) {\n                this.detachListeners(deferId);\n                this.ion({\n                    name: deferId,\n                    repopulateReplica: {\n                        fn: async () => {\n                            await this.commitAsync();\n                            if (!this.isDestroyed) {\n                                func(...args);\n                            }\n                        },\n                        once: true\n                    }\n                });\n            }\n            else {\n                func(...args);\n            }\n        }\n        get isRepopulatingStores() {\n            return Boolean(this.repopulateStores?.size);\n        }\n        // Remember which stores are being repopulated, they don't have to care about un-joining the graph later\n        repopulateStore(store) {\n            const me = this;\n            if (me.repopulateOnDataset && store.allCount && !store.syncDataOnLoad) {\n                me.replica?.activeTransaction.stop();\n                if (!me.repopulateStores)\n                    me.repopulateStores = new Set();\n                me.repopulateStores.add(store);\n                // Trigger buffered repopulate of replica\n                me.repopulateReplica();\n            }\n        }\n        // Creates a new replica, populating it with data from the stores\n        repopulateReplica() {\n            const me = this;\n            // Will repopulate as part of scheduled delayed calculations\n            if (me.delayEnteringReplica) {\n                return;\n            }\n            const { calendarManagerStore, eventStore, dependencyStore, assignmentStore, resourceStore, replica: oldReplica } = me;\n            if (oldReplica) {\n                // Unlink all old records that are going to be re-entered into new replica\n                me.unlinkStoreRecords(calendarManagerStore, eventStore, dependencyStore, resourceStore, assignmentStore);\n                me.unlinkRecord(me);\n                me.unlinkRecord(me.defaultCalendar);\n                me.trigger('recordsUnlinked');\n                oldReplica.clear();\n            }\n            else {\n                me.trigger('recordsUnlinked');\n            }\n            const replica = me.replica = me.createReplica();\n            // Now enter all new and old reused records into the new replica\n            replica.addEntity(me);\n            replica.addEntity(me.defaultCalendar);\n            me.joinStoreRecords(calendarManagerStore, true);\n            me.joinStoreRecords(eventStore, true);\n            me.joinStoreRecords(dependencyStore, true);\n            me.joinStoreRecords(resourceStore, true);\n            me.joinStoreRecords(assignmentStore, true);\n            me.repopulateStores.clear();\n            me.trigger('repopulateReplica');\n        }\n        // If there is a commit when we are supposed to replace the replica, we hijack that and commit the new replica\n        beforeCommitAsync() {\n            //@ts-ignore\n            if (this.repopulateReplica.isPending && !this.isDelayingCalculation) {\n                //@ts-ignore\n                this.repopulateReplica.now();\n                return this.replica.commitAsync();\n            }\n            return null;\n        }\n        // Unlinks a single record from the graph, writing back identifiers values from the graph to DATA to allow them\n        // to enter another replica\n        unlinkRecord(record) {\n            // Might not have entered replica yet when using delayed calculation\n            if (record?.graph) {\n                const { activeTransaction } = this.replica;\n                const { $ } = record;\n                const keys = Object.keys($);\n                // Write current values to identifier.DATA, to have correct value entering new replica later\n                for (let i = 0; i < keys.length; i++) {\n                    const key = keys[i];\n                    const identifier = $[key];\n                    const entry = activeTransaction.getLatestEntryFor(identifier);\n                    if (entry) {\n                        let value = entry.getValue();\n                        if (value === undefined)\n                            value = entry.proposedValue;\n                        if (value !== undefined) {\n                            identifier.DATA = identifier.field instanceof ModelReferenceField\n                                ? value?.id ?? value\n                                : value;\n                        }\n                    }\n                }\n                // Cut the link, to enable joining another replica\n                record.graph = null;\n            }\n        }\n        // Unlinks all records from a store, unless the store has been repopulated\n        unlinkStoreRecords(...stores) {\n            stores.forEach(store => {\n                // Unlink records only in stores that are not repopulated\n                // or if store has syncDataOnLoad (in this case records stay in the store so need to unlink them)\n                if (!this.repopulateStores.has(store) || store.syncDataOnLoad) {\n                    store.traverse((record) => {\n                        this.unlinkRecord(record);\n                    }, false, false, {\n                        // Must pass includeFilteredOutRecords and includeCollapsedGroupRecords as true\n                        // so that we work on full, unfiltered dataset\n                        includeFilteredOutRecords: true,\n                        includeCollapsedGroupRecords: true\n                    });\n                }\n            });\n        }\n        //endregion\n        getGraph() {\n            return this.replica;\n        }\n        // keep this private\n        async addEvents(events) {\n            this.eventStore.add(events);\n            return this.commitAsync();\n        }\n        // keep this private\n        async addEvent(event) {\n            this.eventStore.add(event);\n            return this.commitAsync();\n        }\n        // keep this private\n        includeEvent(event) {\n            this.eventStore.add(event);\n        }\n        // keep this private\n        async removeEvents(events) {\n            this.eventStore.remove(events);\n            return this.commitAsync();\n        }\n        // keep this private\n        excludeEvent(event) {\n            this.eventStore.remove(event);\n        }\n        // keep this private\n        async removeEvent(event) {\n            this.eventStore.remove(event);\n            return this.commitAsync();\n        }\n        getStm() {\n            return this.stm;\n        }\n        setStm(stm) {\n            this.stm = stm;\n            this.stm.ion({\n                restoringStart: this.onSTMRestoringStart,\n                restoringStop: this.onSTMRestoringStop,\n                thisObj: this\n            });\n        }\n        calculateProject() {\n            return this;\n        }\n        *calculateEffectiveCalendar() {\n            let calendar = yield this.$.calendar;\n            if (calendar) {\n                // this will create an incoming edge from the calendar's version atom, which changes on calendar's data update\n                yield calendar.$.version;\n            }\n            else {\n                calendar = this.defaultCalendar;\n            }\n            return calendar;\n        }\n        joinStoreRecords(store, skipRoot = false) {\n            const fn = (record) => {\n                record.setProject(this);\n                record.joinProject();\n            };\n            // Both iteration methods must pass includeFilteredOutRecords as true\n            // so that we work on full, unfiltered dataset\n            if (store.rootNode) {\n                store.rootNode.traverse(fn, skipRoot, true);\n            }\n            else {\n                store.forEach(fn, null, {\n                    includeFilteredOutRecords: true,\n                    includeCollapsedGroupRecords: true\n                });\n            }\n        }\n        unjoinStoreRecords(store) {\n            const fn = (record) => {\n                record.leaveProject();\n                record.setProject(this);\n            };\n            // Both iteration methods must pass includeFilteredOutRecords as true\n            // so that we work on full, unfiltered dataset\n            if (store.rootNode) {\n                store.rootNode.traverse(node => {\n                    // do not unjoin/leave project for the root node, which is the project itself\n                    if (node !== store.rootNode)\n                        fn(node);\n                }, false, true);\n            }\n            else {\n                store.forEach(fn, null, {\n                    includeFilteredOutRecords: true,\n                    includeCollapsedGroupRecords: true\n                });\n            }\n        }\n        /**\n         * This method sets the event store instance for the project.\n         * @param store\n         */\n        setEventStore(store) {\n            const oldEventStore = this.eventStore;\n            if (oldEventStore && this.stm.hasStore(oldEventStore)) {\n                this.stm.removeStore(oldEventStore);\n                this.unjoinStoreRecords(oldEventStore);\n                this.detachStore(oldEventStore);\n                const assignmentsForRemoval = oldEventStore.assignmentsForRemoval;\n                // remap the assignment\n                assignmentsForRemoval.forEach(assignment => {\n                    const oldEvent = assignment.event;\n                    if (oldEvent) {\n                        const newEvent = store.getById(oldEvent.id);\n                        if (newEvent) {\n                            assignment.event = newEvent;\n                            // keep the assignment\n                            assignmentsForRemoval.delete(assignment);\n                        }\n                    }\n                });\n                oldEventStore.afterEventRemoval();\n            }\n            if (!store || !(store instanceof Store)) {\n                const storeClass = store?.storeClass || this.eventStoreClass;\n                this.eventStore = new storeClass(ObjectHelper.assign({\n                    modelClass: this.eventModelClass,\n                    project: this,\n                    stm: this.stm\n                }, store || {}));\n            }\n            else {\n                this.eventStore = store;\n                store.setProject(this);\n                this.stm.addStore(store);\n                // we've been given an event store from the outside\n                // need to change its root node to be the project\n                if (store.tree && store.rootNode !== this) {\n                    this.appendChild(store.rootNode.children || []);\n                    // Assigning a new root will make all children join store\n                    store.rootNode = this;\n                }\n                else {\n                    this.joinStoreRecords(store);\n                }\n            }\n            this.attachStore(this.eventStore);\n            this.trigger('eventStoreChange', { store: this.eventStore });\n        }\n        /**\n         * This method sets the dependency store instance for the project.\n         * @param store\n         */\n        setDependencyStore(store) {\n            const oldDependencyStore = this.dependencyStore;\n            if (oldDependencyStore && this.stm.hasStore(oldDependencyStore)) {\n                this.stm.removeStore(oldDependencyStore);\n                this.detachStore(oldDependencyStore);\n            }\n            if (!store || !(store instanceof Store)) {\n                const storeClass = store?.storeClass || this.dependencyStoreClass;\n                this.dependencyStore = new storeClass(ObjectHelper.assign({\n                    modelClass: this.dependencyModelClass,\n                    project: this,\n                    stm: this.stm\n                }, store || {}));\n            }\n            else {\n                this.dependencyStore = store;\n                store.setProject(this);\n                this.stm.addStore(store);\n                this.joinStoreRecords(store);\n            }\n            this.attachStore(this.dependencyStore);\n            this.trigger('dependencyStoreChange', { store: this.dependencyStore });\n        }\n        /**\n         * This method sets the resource store instance for the project.\n         * @param store\n         */\n        setResourceStore(store) {\n            const oldResourceStore = this.resourceStore;\n            if (oldResourceStore && this.stm.hasStore(oldResourceStore)) {\n                this.stm.removeStore(oldResourceStore);\n                this.unjoinStoreRecords(oldResourceStore);\n                this.detachStore(oldResourceStore);\n                const assignmentsForRemoval = oldResourceStore.assignmentsForRemoval;\n                // remap the assignment\n                assignmentsForRemoval.forEach(assignment => {\n                    const oldResource = assignment.resource;\n                    if (oldResource) {\n                        const newResource = store.getById(oldResource.id);\n                        if (newResource) {\n                            assignment.resource = newResource;\n                            // keep the assignment\n                            assignmentsForRemoval.delete(assignment);\n                        }\n                    }\n                });\n                oldResourceStore.afterResourceRemoval();\n            }\n            if (!store || !(store instanceof Store)) {\n                const storeClass = store?.storeClass || this.resourceStoreClass;\n                this.resourceStore = new storeClass(ObjectHelper.assign({\n                    modelClass: this.resourceModelClass,\n                    project: this,\n                    stm: this.stm\n                }, store || {}));\n            }\n            else {\n                this.resourceStore = store;\n                store.setProject(this);\n                this.stm.addStore(store);\n                this.joinStoreRecords(store);\n            }\n            this.attachStore(this.resourceStore);\n            this.trigger('resourceStoreChange', { store: this.resourceStore });\n        }\n        /**\n         * This method sets the assignment store instance for the project.\n         * @param store\n         */\n        setAssignmentStore(store) {\n            const oldAssignmentStore = this.assignmentStore;\n            if (oldAssignmentStore && this.stm.hasStore(oldAssignmentStore)) {\n                this.stm.removeStore(oldAssignmentStore);\n                this.unjoinStoreRecords(oldAssignmentStore);\n                this.detachStore(oldAssignmentStore);\n            }\n            if (!store || !(store instanceof Store)) {\n                const storeClass = store?.storeClass || this.assignmentStoreClass;\n                this.assignmentStore = new storeClass(ObjectHelper.assign({\n                    modelClass: this.assignmentModelClass,\n                    project: this,\n                    stm: this.stm\n                }, store || {}));\n            }\n            else {\n                this.assignmentStore = store;\n                store.setProject(this);\n                this.stm.addStore(store);\n                this.joinStoreRecords(store);\n            }\n            this.isDelayingCalculation && this.setupTemporaryIndices();\n            this.attachStore(this.assignmentStore);\n            this.trigger('assignmentStoreChange', { store: this.assignmentStore });\n        }\n        /**\n         * This method sets the calendar manager store instance for the project.\n         * @param store\n         */\n        setCalendarManagerStore(store) {\n            const oldCalendarManagerStore = this.calendarManagerStore;\n            if (oldCalendarManagerStore && this.stm.hasStore(oldCalendarManagerStore)) {\n                this.stm.removeStore(oldCalendarManagerStore);\n                this.detachStore(oldCalendarManagerStore);\n            }\n            if (!store || !(store instanceof Store)) {\n                const storeClass = store?.storeClass || this.calendarManagerStoreClass;\n                this.calendarManagerStore = new storeClass(ObjectHelper.assign({\n                    modelClass: this.calendarModelClass,\n                    project: this,\n                    stm: this.stm\n                }, store || {}));\n            }\n            else {\n                this.calendarManagerStore = store;\n                if (store) {\n                    store.setProject(this);\n                    this.stm.addStore(store);\n                    this.joinStoreRecords(store);\n                }\n            }\n            this.attachStore(this.calendarManagerStore);\n            this.trigger('calendarManagerStoreChange', { store: this.calendarManagerStore });\n        }\n        // this does not account for possible scheduling conflicts\n        async isValidDependency(...args) {\n            return true;\n        }\n        rejectStmTransaction(stm) {\n            stm = stm || this.stm;\n            if (stm.transaction) {\n                if (stm.transaction.length) {\n                    stm.forEachStore(s => s.beginBatch());\n                    stm.rejectTransaction();\n                    stm.forEachStore(s => s.endBatch());\n                }\n                else {\n                    stm.stopTransaction();\n                }\n            }\n        }\n        async tryPropagateWithChanges(changerFn) {\n            const stm = this.stm, \n            // remember STM initial settings\n            stmInitiallyDisabled = stm.disabled, stmInitiallyAutoRecord = stm.autoRecord;\n            // if STM is disabled we turn it on so we could revert changes later\n            if (stmInitiallyDisabled) {\n                stm.enable();\n            }\n            // if it's enabled\n            else {\n                // if auto-recording is enabled - disable it\n                if (stmInitiallyAutoRecord) {\n                    stm.autoRecord = false;\n                }\n                // stop the current transaction to not mess it\n                if (stm.isRecording) {\n                    stm.stopTransaction();\n                }\n            }\n            // start a new transaction\n            stm.startTransaction();\n            // In case anything in, or called by the changerFn attempts to propagate.\n            // We must only propagate after the changes have been made.\n            // this.suspendPropagate()\n            changerFn();\n            // Resume propagation, but do *not* propagate if any propagate calls were attempted during suspension.\n            // this.resumePropagate(false)\n            let result = true;\n            try {\n                const commitResult = await this.commitAsync();\n                // setting \"result\" to false if the propagation was rejected\n                result = !commitResult.rejectedWith;\n            }\n            catch (e) {\n                // rethrow non-cycle exception\n                if (!/cycle/i.test(e))\n                    throw e;\n                result = false;\n            }\n            // if the transaction succeed\n            if (result) {\n                stm.stopTransaction();\n                // if STM is not used - reset its queue\n                if (stmInitiallyDisabled) {\n                    stm.resetQueue();\n                }\n            }\n            // reject the failed transaction changes\n            else {\n                this.replica.reject();\n                this.rejectStmTransaction(stm);\n            }\n            // restore STM settings\n            stm.disabled = stmInitiallyDisabled;\n            stm.autoRecord = stmInitiallyAutoRecord;\n            return result;\n        }\n        isEngineReady() {\n            const { replica } = this;\n            return this.delayEnteringReplica\n                || (!this.isRepopulatingStores\n                    && (replica\n                        ? !(replica.dirty && (replica.hasPendingAutoCommit() || replica.isCommitting))\n                        : true));\n        }\n        // Needed to separate configs from data, for tests to pass. Normally handled in ProjectModel outside of engine\n        static get defaultConfig() {\n            return {\n                assignmentsData: null,\n                calendarsData: null,\n                dependenciesData: null,\n                eventsData: null,\n                resourcesData: null,\n                // need to distinguish the stores from fields\n                // https://bryntum.com/products/gantt/examples/advanced/\n                // bryntum.gantt.ObjectHelper.isEqual({}, new bryntum.gantt.Store()) // true\n                eventStore: null,\n                resourceStore: null,\n                assignmentStore: null,\n                dependencyStore: null,\n                calendarManagerStore: null,\n                eventModelClass: null,\n                resourceModelClass: null,\n                assignmentModelClass: null,\n                dependencyModelClass: null,\n                calendarModelClass: null,\n                repopulateOnDataset: true\n            };\n        }\n        static get delayable() {\n            return {\n                repopulateReplica: 10\n            };\n        }\n    }\n    SchedulerBasicProjectMixin.applyConfigs = true;\n    __decorate([\n        model_field({ type: 'boolean', defaultValue: true })\n    ], SchedulerBasicProjectMixin.prototype, \"unspecifiedTimeIsWorking\", void 0);\n    __decorate([\n        model_field({ type: 'boolean', defaultValue: false })\n    ], SchedulerBasicProjectMixin.prototype, \"skipNonWorkingTimeWhenSchedulingManually\", void 0);\n    __decorate([\n        model_field({ type: 'boolean', defaultValue: true })\n    ], SchedulerBasicProjectMixin.prototype, \"skipNonWorkingTimeInDurationWhenSchedulingManually\", void 0);\n    return SchedulerBasicProjectMixin;\n}) {\n}\n", "var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Reject } from \"../../../../ChronoGraph/chrono/Effect.js\";\nimport { Mixin } from '../../../../ChronoGraph/class/BetterMixin.js';\nimport { calculate, field } from '../../../../ChronoGraph/replica/Entity.js';\nimport { ConflictEffect, ConstraintInterval } from \"../../../chrono/Conflict.js\";\nimport { dateConverter, model_field } from '../../../chrono/ModelFieldAtom.js';\nimport { intersectIntervals } from '../../../scheduling/DateInterval.js';\nimport { Direction, ConstraintIntervalSide } from '../../../scheduling/Types.js';\nimport { isDateFinite, MAX_DATE, MIN_DATE } from \"../../../util/Constants.js\";\nimport { HasSubEventsMixin } from \"../scheduler_basic/HasSubEventsMixin.js\";\nimport { EffectResolutionResult } from \"../../../chrono/SchedulingIssueEffect.js\";\n//---------------------------------------------------------------------------------------------------------------------\nexport const calculateEffectiveStartDateConstraintInterval = function* (event, startDateIntervalIntersection, endDateIntervalIntersection, duration, collectIntersectionMeta) {\n    if (endDateIntervalIntersection.isIntervalEmpty())\n        return endDateIntervalIntersection; //EMPTY_INTERVAL\n    // If intersection details collecting is enabled (need this when preparing a scheduling conflict info)\n    if (collectIntersectionMeta && endDateIntervalIntersection.intersectionOf) {\n        const reflectedIntervals = new Set();\n        // Iterate over the intervals that took part in \"endDateIntervalIntersection\" building\n        // and reflect each of them to task \"End\" side.\n        // So we could compare each interval one by one.\n        for (const interval of endDateIntervalIntersection.intersectionOf) {\n            if (interval.isInfinite()) {\n                reflectedIntervals.add(interval);\n            }\n            else {\n                const startDate = interval.startDateIsFinite()\n                    ?\n                        yield* event.calculateProjectedXDateWithDuration(interval.startDate, false, duration)\n                    :\n                        interval.startDate;\n                const endDate = interval.endDateIsFinite()\n                    ?\n                        yield* event.calculateProjectedXDateWithDuration(interval.endDate, false, duration)\n                    :\n                        interval.endDate;\n                const originInterval = interval;\n                reflectedIntervals.add(originInterval.copyWith({\n                    reflectionOf: originInterval,\n                    side: originInterval.side === ConstraintIntervalSide.Start ? ConstraintIntervalSide.End : ConstraintIntervalSide.Start,\n                    startDate,\n                    endDate,\n                }));\n            }\n        }\n        // override intersectionOf with reflected intervals\n        endDateIntervalIntersection.intersectionOf = reflectedIntervals;\n    }\n    const startDate = endDateIntervalIntersection.startDateIsFinite()\n        ?\n            yield* event.calculateProjectedXDateWithDuration(endDateIntervalIntersection.startDate, false, duration)\n        :\n            null;\n    const endDate = endDateIntervalIntersection.endDateIsFinite()\n        ?\n            yield* event.calculateProjectedXDateWithDuration(endDateIntervalIntersection.endDate, false, duration)\n        :\n            null;\n    return intersectIntervals([\n        startDateIntervalIntersection,\n        ConstraintInterval.new({\n            intersectionOf: endDateIntervalIntersection.intersectionOf,\n            startDate,\n            endDate\n        })\n    ], collectIntersectionMeta);\n};\nexport const calculateEffectiveEndDateConstraintInterval = function* (event, startDateIntervalIntersection, endDateIntervalIntersection, duration, collectIntersectionMeta) {\n    if (startDateIntervalIntersection.isIntervalEmpty())\n        return startDateIntervalIntersection; //EMPTY_INTERVAL\n    // If intersection details collecting is enabled (need this when preparing a scheduling conflict info)\n    if (collectIntersectionMeta) {\n        const reflectedIntervals = new Set();\n        // Iterate over the intervals that took part in \"startDateIntervalIntersection\" building\n        // and reflect each of them to task \"End\" side.\n        // So we could compare each interval one by one.\n        for (const interval of startDateIntervalIntersection.intersectionOf) {\n            // no need to reflect infinite intervals\n            if (interval.isInfinite()) {\n                reflectedIntervals.add(interval);\n            }\n            // reflect finite interval\n            else {\n                const startDate = interval.startDateIsFinite()\n                    ?\n                        yield* event.calculateProjectedXDateWithDuration(interval.startDate, true, duration)\n                    :\n                        interval.startDate;\n                const endDate = interval.endDateIsFinite()\n                    ?\n                        yield* event.calculateProjectedXDateWithDuration(interval.endDate, true, duration)\n                    :\n                        interval.endDate;\n                const originInterval = interval;\n                // Make a reflection of the interval\n                reflectedIntervals.add(originInterval.copyWith({\n                    reflectionOf: originInterval,\n                    side: originInterval.side === ConstraintIntervalSide.Start ? ConstraintIntervalSide.End : ConstraintIntervalSide.Start,\n                    startDate,\n                    endDate,\n                }));\n            }\n        }\n        // override intersectionOf with reflected intervals\n        startDateIntervalIntersection.intersectionOf = reflectedIntervals;\n    }\n    const startDate = startDateIntervalIntersection.startDateIsFinite()\n        ?\n            yield* event.calculateProjectedXDateWithDuration(startDateIntervalIntersection.startDate, true, duration)\n        :\n            null;\n    const endDate = startDateIntervalIntersection.endDateIsFinite()\n        ?\n            yield* event.calculateProjectedXDateWithDuration(startDateIntervalIntersection.endDate, true, duration)\n        :\n            null;\n    return intersectIntervals([\n        endDateIntervalIntersection,\n        ConstraintInterval.new({\n            reflectionOf: startDate || endDate ? startDateIntervalIntersection : undefined,\n            intersectionOf: startDate || endDate ? startDateIntervalIntersection.intersectionOf : undefined,\n            startDate,\n            endDate\n        }),\n    ], collectIntersectionMeta);\n};\nexport const EarlyLateLazyness = true;\n//---------------------------------------------------------------------------------------------------------------------\n/**\n * This mixin provides the constraint-based scheduling. Event is scheduled according to the set of _constraints_\n * which can be applied to start date or end date.\n *\n * Scheduling by constraints for an event can be disabled by setting its [[manuallyScheduled]] flag to `true`, which will delegate to previous behavior.\n *\n * The constraint is represented with the [[DateInterval]] class, which indicates the \"allowed\" interval for the\n * point being constrained.\n *\n * Scheduling by constraints algorithm\n * ---------------------------------\n *\n * Constraints for start date are accumulated in the [[earlyStartDateConstraintIntervals]] and [[startDateConstraintIntervals]] fields.\n * Constraints for end date are accumulated in the [[earlyEndDateConstraintIntervals]] and [[endDateConstraintIntervals]] fields.\n *\n * This mixin does not define where the constraints for the event comes from. The constraints are calculated in the field\n * calculation methods, (like [[calculateEarlyStartDateConstraintIntervals]]) which just return empty arrays. Some other mixins\n * may override those methods and can generate actual constraints (the [[ScheduledByDependenciesEarlyEventMixin]] is an example).\n * The \"early\" fields contains the constraints which are related to scheduling event in the as-soon-as-possible manner.\n * The fields w/o \"early\" prefix contains the constraints which do not related to the ASAP scheduling.\n *\n * \"Early\" and \"normal\" constraints for every date are combined, then intersected, which gives \"combined\" constraining interval.\n *\n * So at this point we have a \"combined\" constraining interval for start date and for end date.\n *\n * Then, the interval for start date is shifted on the event duration to the right and this gives an additional constraint for the\n * end date. The similar operation is done with the interval for the end date.\n *\n * After intersection with those additional intervals we receive the final constraining interval for both dates. Since we\n * are using the ASAP scheduling, we just pick the earliest possible date.\n *\n * If any of intervals is empty then we consider it as scheduling conflict, and [[EngineReplica.reject|reject]] the transaction.\n *\n */\nexport class ConstrainedEarlyEventMixin extends Mixin([HasSubEventsMixin], (base) => {\n    const superProto = base.prototype;\n    class ConstrainedEarlyEventMixin extends base {\n        // Skips non-working time if it's needed to the event\n        *maybeSkipNonWorkingTime(date, isForward = true) {\n            // We don't really need to skip non-working time for a summary task start/end dates.\n            // It just reflects corresponding min/max values of its children\n            if (yield* this.hasSubEvents())\n                return date;\n            let duration = yield* this.calculateEffectiveDuration();\n            return date && duration > 0 ? yield* this.skipNonWorkingTime(date, isForward) : date;\n        }\n        *calculateEffectiveConstraintInterval(isStartDate, startDateConstraintIntervals, endDateConstraintIntervals, collectIntersectionMeta = false) {\n            const effectiveDurationToUse = yield* this.calculateEffectiveDuration();\n            if (effectiveDurationToUse == null) {\n                return null;\n            }\n            const calculateIntervalFn = (isStartDate ? calculateEffectiveStartDateConstraintInterval : calculateEffectiveEndDateConstraintInterval);\n            const effectiveInterval = yield* calculateIntervalFn(this, intersectIntervals(startDateConstraintIntervals, collectIntersectionMeta), intersectIntervals(endDateConstraintIntervals, collectIntersectionMeta), effectiveDurationToUse, collectIntersectionMeta);\n            return effectiveInterval;\n        }\n        /**\n         * Calculation method for the [[startDateConstraintIntervals]]. Returns empty array by default.\n         * Override this method to return some extra constraints for the start date.\n         */\n        *calculateStartDateConstraintIntervals() {\n            return [];\n        }\n        /**\n         * Calculation method for the [[endDateConstraintIntervals]]. Returns empty array by default.\n         * Override this method to return some extra constraints for the end date.\n         */\n        *calculateEndDateConstraintIntervals() {\n            return [];\n        }\n        /**\n         * Calculation method for the [[earlyStartDateConstraintIntervals]]. Returns empty array by default.\n         * Override this method to return some extra constraints for the start date during the ASAP scheduling.\n         */\n        *calculateEarlyStartDateConstraintIntervals() {\n            return [];\n        }\n        /**\n         * Calculation method for the [[earlyEndDateConstraintIntervals]]. Returns empty array by default.\n         * Override this method to return some extra constraints for the end date during the ASAP scheduling.\n         */\n        *calculateEarlyEndDateConstraintIntervals() {\n            return [];\n        }\n        *doCalculateEarlyEffectiveStartDateInterval(collectIntersectionMeta = false) {\n            const startDateConstraintIntervals = yield this.$.earlyStartDateConstraintIntervals;\n            const endDateConstraintIntervals = yield this.$.earlyEndDateConstraintIntervals;\n            return yield* this.calculateEffectiveConstraintInterval(true, \n            // need to use concat instead of directly mutating the `startDateConstraintIntervals` since that is\n            // used as storage for `this.$.earlyStartDateConstraintIntervals`\n            startDateConstraintIntervals.concat(yield this.$.startDateConstraintIntervals), endDateConstraintIntervals.concat(yield this.$.endDateConstraintIntervals), collectIntersectionMeta);\n        }\n        *calculateEarlyEffectiveStartDateInterval() {\n            return yield* this.doCalculateEarlyEffectiveStartDateInterval();\n        }\n        *doCalculateEarlyEffectiveEndDateInterval(collectIntersectionMeta = false) {\n            const startDateConstraintIntervals = yield this.$.earlyStartDateConstraintIntervals;\n            const endDateConstraintIntervals = yield this.$.earlyEndDateConstraintIntervals;\n            return yield* this.calculateEffectiveConstraintInterval(false, \n            // need to use concat instead of directly mutating the `startDateConstraintIntervals` since that is\n            // used as storage for `this.$.earlyStartDateConstraintIntervals`\n            startDateConstraintIntervals.concat(yield this.$.startDateConstraintIntervals), endDateConstraintIntervals.concat(yield this.$.endDateConstraintIntervals), collectIntersectionMeta);\n        }\n        *calculateEarlyEffectiveEndDateInterval() {\n            return yield* this.doCalculateEarlyEffectiveEndDateInterval();\n        }\n        /**\n         * The method defines whether the provided child event should be\n         * taken into account when calculating this summary event [[earlyStartDate]].\n         * Child events roll up their [[earlyStartDate]] values to their summary tasks.\n         * So a summary task [[earlyStartDate]] date gets equal to its minimal child [[earlyStartDate]].\n         *\n         * If the method returns `true` the child event is taken into account\n         * and if the method returns `false` it's not.\n         * By default, the method returns `true` to include all child events data.\n         * @param child Child event to consider.\n         * @returns `true` if the provided event should be taken into account, `false` if not.\n         */\n        *shouldRollupChildEarlyStartDate(child) {\n            return true;\n        }\n        *calculateMinChildrenEarlyStartDate() {\n            let result = MAX_DATE;\n            const subEventsIterator = yield* this.subEventsIterable();\n            for (let childEvent of subEventsIterator) {\n                let childDate;\n                if (!(yield* this.shouldRollupChildEarlyStartDate(childEvent)))\n                    continue;\n                if ((yield childEvent.$.manuallyScheduled) && (yield* childEvent.hasSubEvents())) {\n                    childDate = yield childEvent.$.minChildrenEarlyStartDate;\n                }\n                childDate = childDate || (yield childEvent.$.earlyStartDate);\n                if (childDate && childDate < result)\n                    result = childDate;\n            }\n            return result.getTime() - MAX_DATE.getTime() ? result : null;\n        }\n        /**\n         * The method defines whether the provided child event should be\n         * taken into account when calculating this summary event [[earlyEndDate]].\n         * Child events roll up their [[earlyEndDate]] values to their summary tasks.\n         * So a summary task [[earlyEndDate]] gets equal to its maximal child [[earlyEndDate]].\n         *\n         * If the method returns `true` the child event is taken into account\n         * and if the method returns `false` it's not.\n         * By default, the method returns `true` to include all child events data.\n         * @param child Child event to consider.\n         * @returns `true` if the provided event should be taken into account, `false` if not.\n         */\n        *shouldRollupChildEarlyEndDate(child) {\n            return true;\n        }\n        *calculateMaxChildrenEarlyEndDate() {\n            let result = MIN_DATE;\n            const subEventsIterator = yield* this.subEventsIterable();\n            for (let childEvent of subEventsIterator) {\n                let childDate;\n                if (!(yield* this.shouldRollupChildEarlyEndDate(childEvent)))\n                    continue;\n                if ((yield childEvent.$.manuallyScheduled) && (yield* childEvent.hasSubEvents())) {\n                    childDate = yield childEvent.$.maxChildrenEarlyEndDate;\n                }\n                childDate = childDate || (yield childEvent.$.earlyEndDate);\n                if (childDate && childDate > result)\n                    result = childDate;\n            }\n            return result.getTime() - MIN_DATE.getTime() ? result : null;\n        }\n        *calculateEarlyStartDateRaw() {\n            // Manually scheduled task treat its current start date as its early start date\n            // in case of forward scheduling.\n            // Late dates in that case are calculated the same way it happens for automatic tasks\n            if ((yield this.$.manuallyScheduled) && (yield this.$.direction) === Direction.Forward) {\n                return yield this.$.startDate;\n            }\n            // Parent task calculate its early start date as minimal early start date of its children\n            if (yield* this.hasSubEvents()) {\n                return yield this.$.minChildrenEarlyStartDate;\n            }\n            if (!(yield* this.isConstrainedEarly())) {\n                return yield this.$.startDate;\n            }\n            let effectiveInterval = yield this.$.earlyEffectiveStartDateInterval;\n            if (effectiveInterval === null) {\n                return null;\n            }\n            else if (effectiveInterval.isIntervalEmpty()) {\n                // re-calculate effective resulting interval gathering intersection history\n                effectiveInterval = yield* this.doCalculateEarlyEffectiveStartDateInterval(true);\n                const conflict = ConflictEffect.new({\n                    intervals: [...effectiveInterval.intersectionOf]\n                });\n                if ((yield conflict) === EffectResolutionResult.Cancel) {\n                    yield Reject(conflict);\n                }\n                else {\n                    return null;\n                }\n            }\n            return isDateFinite(effectiveInterval.startDate) ? effectiveInterval.startDate : null;\n        }\n        *calculateEarlyStartDate() {\n            const date = yield this.$.earlyStartDateRaw;\n            return yield* this.maybeSkipNonWorkingTime(date, true);\n        }\n        *calculateEarlyEndDateRaw() {\n            // Manually scheduled task treat its current end date as its early end date\n            // in case of forward scheduling.\n            // Late dates in that case are calculated the same way it happens for automatic tasks\n            if ((yield this.$.manuallyScheduled) && (yield this.$.direction) === Direction.Forward) {\n                return yield this.$.endDate;\n            }\n            // Parent task calculate its early end date as maximum early end date of its children\n            if (yield* this.hasSubEvents()) {\n                return yield this.$.maxChildrenEarlyEndDate;\n            }\n            if (!(yield* this.isConstrainedEarly())) {\n                return yield this.$.endDate;\n            }\n            let effectiveInterval = yield this.$.earlyEffectiveEndDateInterval;\n            if (effectiveInterval === null) {\n                return null;\n            }\n            else if (effectiveInterval.isIntervalEmpty()) {\n                // re-calculate effective resulting interval gathering intersection history\n                effectiveInterval = yield* this.doCalculateEarlyEffectiveEndDateInterval(true);\n                const conflict = ConflictEffect.new({\n                    intervals: [...effectiveInterval.intersectionOf]\n                });\n                if ((yield conflict) === EffectResolutionResult.Cancel) {\n                    yield Reject(conflict);\n                }\n                else {\n                    return null;\n                }\n            }\n            return isDateFinite(effectiveInterval.startDate) ? effectiveInterval.startDate : null;\n        }\n        *calculateEarlyEndDate() {\n            return yield this.$.earlyEndDateRaw;\n        }\n        *isConstrainedEarly() {\n            const startDateIntervals = yield this.$.startDateConstraintIntervals;\n            const endDateIntervals = yield this.$.endDateConstraintIntervals;\n            const earlyStartDateConstraintIntervals = yield this.$.earlyStartDateConstraintIntervals;\n            const earlyEndDateConstraintIntervals = yield this.$.earlyEndDateConstraintIntervals;\n            return Boolean(startDateIntervals?.length || endDateIntervals?.length || earlyStartDateConstraintIntervals?.length || earlyEndDateConstraintIntervals?.length);\n        }\n        *calculateStartDatePure() {\n            const direction = yield this.$.direction;\n            if (direction === Direction.Forward) {\n                // early exit if this mixin is not applicable, but only after(!) the direction check\n                // this is because the `isConstrainedEarly` yield early constraint intervals, which are generally lazy,\n                // depending on the direction\n                if (!(yield* this.isConstrainedEarly()) || (yield this.$.manuallyScheduled) || (yield this.$.unscheduled)) {\n                    return yield* superProto.calculateStartDatePure.call(this);\n                }\n                return (yield this.$.earlyStartDate) || (yield* superProto.calculateStartDatePure.call(this));\n            }\n            else {\n                return yield* superProto.calculateStartDatePure.call(this);\n            }\n        }\n        *calculateStartDateProposed() {\n            const direction = yield this.$.direction;\n            switch (direction) {\n                case Direction.Forward:\n                    // early exit if this mixin is not applicable, but only after(!) the direction check\n                    // this is because the `isConstrainedEarly` yield early constraint intervals, which are generally lazy,\n                    // depending on the direction\n                    if (!(yield* this.isConstrainedEarly()) || (yield this.$.manuallyScheduled) || (yield this.$.unscheduled)) {\n                        return yield* superProto.calculateStartDateProposed.call(this);\n                    }\n                    const autoStartDate = yield this.$.earlyStartDate;\n                    if (autoStartDate) {\n                        if (isDateFinite(autoStartDate))\n                            return autoStartDate;\n                        const baseSchedulingStartDate = yield* superProto.calculateStartDateProposed.call(this);\n                        const earlyEffectiveStartDateInterval = yield this.$.earlyEffectiveStartDateInterval;\n                        if (earlyEffectiveStartDateInterval.containsDate(baseSchedulingStartDate))\n                            return baseSchedulingStartDate;\n                        return isDateFinite(earlyEffectiveStartDateInterval.endDate) ? earlyEffectiveStartDateInterval.endDate : baseSchedulingStartDate;\n                    }\n                    else {\n                        return yield* superProto.calculateStartDateProposed.call(this);\n                    }\n                default:\n                    return yield* superProto.calculateStartDateProposed.call(this);\n            }\n        }\n        *calculateEndDatePure() {\n            const direction = yield this.$.direction;\n            if (direction === Direction.Forward) {\n                // early exit if this mixin is not applicable, but only after(!) the direction check\n                // this is because the `isConstrainedEarly` yield early constraint intervals, which are generally lazy,\n                // depending on the direction\n                if (!(yield* this.isConstrainedEarly()) || (yield this.$.manuallyScheduled) || (yield this.$.unscheduled)) {\n                    return yield* superProto.calculateEndDatePure.call(this);\n                }\n                return (yield this.$.earlyEndDate) || (yield* superProto.calculateEndDatePure.call(this));\n            }\n            else {\n                return yield* superProto.calculateEndDatePure.call(this);\n            }\n        }\n        *calculateEndDateProposed() {\n            const direction = yield this.$.direction;\n            switch (direction) {\n                case Direction.Forward:\n                    // early exit if this mixin is not applicable, but only after(!) the direction check\n                    // this is because the `isConstrainedEarly` yield early constraint intervals, which are generally lazy,\n                    // depending on the direction\n                    if (!(yield* this.isConstrainedEarly()) || (yield this.$.manuallyScheduled) || (yield this.$.unscheduled)) {\n                        return yield* superProto.calculateEndDateProposed.call(this);\n                    }\n                    const autoEndDate = yield this.$.earlyEndDate;\n                    if (autoEndDate) {\n                        if (isDateFinite(autoEndDate))\n                            return autoEndDate;\n                        const baseSchedulingEndDate = yield* superProto.calculateEndDateProposed.call(this);\n                        const earlyEffectiveEndDateInterval = yield this.$.earlyEffectiveEndDateInterval;\n                        if (earlyEffectiveEndDateInterval.containsDate(baseSchedulingEndDate))\n                            return baseSchedulingEndDate;\n                        return isDateFinite(earlyEffectiveEndDateInterval.endDate) ? earlyEffectiveEndDateInterval.endDate : baseSchedulingEndDate;\n                    }\n                    else {\n                        return yield* superProto.calculateEndDateProposed.call(this);\n                    }\n                default:\n                    return yield* superProto.calculateEndDateProposed.call(this);\n            }\n        }\n        *calculateDirection() {\n            const project = this.getProject();\n            return yield project.$.direction;\n        }\n    }\n    __decorate([\n        field({ lazy: EarlyLateLazyness })\n    ], ConstrainedEarlyEventMixin.prototype, \"minChildrenEarlyStartDate\", void 0);\n    __decorate([\n        field({ lazy: EarlyLateLazyness })\n    ], ConstrainedEarlyEventMixin.prototype, \"earlyStartDateRaw\", void 0);\n    __decorate([\n        model_field({ type: 'date', persist: false }, { lazy: EarlyLateLazyness, converter: dateConverter, persistent: false })\n    ], ConstrainedEarlyEventMixin.prototype, \"earlyStartDate\", void 0);\n    __decorate([\n        field({ lazy: EarlyLateLazyness })\n    ], ConstrainedEarlyEventMixin.prototype, \"maxChildrenEarlyEndDate\", void 0);\n    __decorate([\n        field({ lazy: EarlyLateLazyness })\n    ], ConstrainedEarlyEventMixin.prototype, \"earlyEndDateRaw\", void 0);\n    __decorate([\n        model_field({ type: 'date', persist: false }, { lazy: EarlyLateLazyness, converter: dateConverter, persistent: false })\n    ], ConstrainedEarlyEventMixin.prototype, \"earlyEndDate\", void 0);\n    __decorate([\n        field()\n    ], ConstrainedEarlyEventMixin.prototype, \"startDateConstraintIntervals\", void 0);\n    __decorate([\n        field()\n    ], ConstrainedEarlyEventMixin.prototype, \"endDateConstraintIntervals\", void 0);\n    __decorate([\n        field({ lazy: EarlyLateLazyness })\n    ], ConstrainedEarlyEventMixin.prototype, \"earlyStartDateConstraintIntervals\", void 0);\n    __decorate([\n        field({ lazy: EarlyLateLazyness })\n    ], ConstrainedEarlyEventMixin.prototype, \"earlyEndDateConstraintIntervals\", void 0);\n    __decorate([\n        field()\n    ], ConstrainedEarlyEventMixin.prototype, \"earlyEffectiveStartDateInterval\", void 0);\n    __decorate([\n        field()\n    ], ConstrainedEarlyEventMixin.prototype, \"earlyEffectiveEndDateInterval\", void 0);\n    __decorate([\n        calculate('startDateConstraintIntervals')\n    ], ConstrainedEarlyEventMixin.prototype, \"calculateStartDateConstraintIntervals\", null);\n    __decorate([\n        calculate('endDateConstraintIntervals')\n    ], ConstrainedEarlyEventMixin.prototype, \"calculateEndDateConstraintIntervals\", null);\n    __decorate([\n        calculate('earlyStartDateConstraintIntervals')\n    ], ConstrainedEarlyEventMixin.prototype, \"calculateEarlyStartDateConstraintIntervals\", null);\n    __decorate([\n        calculate('earlyEndDateConstraintIntervals')\n    ], ConstrainedEarlyEventMixin.prototype, \"calculateEarlyEndDateConstraintIntervals\", null);\n    __decorate([\n        calculate('earlyEffectiveStartDateInterval')\n    ], ConstrainedEarlyEventMixin.prototype, \"calculateEarlyEffectiveStartDateInterval\", null);\n    __decorate([\n        calculate('earlyEffectiveEndDateInterval')\n    ], ConstrainedEarlyEventMixin.prototype, \"calculateEarlyEffectiveEndDateInterval\", null);\n    __decorate([\n        calculate('minChildrenEarlyStartDate')\n    ], ConstrainedEarlyEventMixin.prototype, \"calculateMinChildrenEarlyStartDate\", null);\n    __decorate([\n        calculate('maxChildrenEarlyEndDate')\n    ], ConstrainedEarlyEventMixin.prototype, \"calculateMaxChildrenEarlyEndDate\", null);\n    __decorate([\n        calculate('earlyStartDateRaw')\n    ], ConstrainedEarlyEventMixin.prototype, \"calculateEarlyStartDateRaw\", null);\n    __decorate([\n        calculate('earlyStartDate')\n    ], ConstrainedEarlyEventMixin.prototype, \"calculateEarlyStartDate\", null);\n    __decorate([\n        calculate('earlyEndDateRaw')\n    ], ConstrainedEarlyEventMixin.prototype, \"calculateEarlyEndDateRaw\", null);\n    __decorate([\n        calculate('earlyEndDate')\n    ], ConstrainedEarlyEventMixin.prototype, \"calculateEarlyEndDate\", null);\n    __decorate([\n        calculate('direction')\n    ], ConstrainedEarlyEventMixin.prototype, \"calculateDirection\", null);\n    return ConstrainedEarlyEventMixin;\n}) {\n}\n", "var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { ProposedOrPrevious, ProposedOrPreviousValueOf } from '../../../../ChronoGraph/chrono/Effect.js';\nimport { Mixin } from '../../../../ChronoGraph/class/BetterMixin.js';\nimport { calculate } from '../../../../ChronoGraph/replica/Entity.js';\nimport DateHelper from '../../../../Core/helper/DateHelper.js';\nimport Localizable from '../../../../Core/localization/Localizable.js';\nimport { ConflictResolution, ConstraintInterval, ConstraintIntervalDescription } from '../../../chrono/Conflict.js';\nimport { dateConverter, model_field } from '../../../chrono/ModelFieldAtom.js';\nimport { ConstraintIntervalSide, ConstraintType, Direction } from '../../../scheduling/Types.js';\nimport { format } from '../../../util/Functions.js';\nimport { HasChildrenMixin } from '../scheduler_basic/HasChildrenMixin.js';\nimport { ConstrainedEarlyEventMixin } from './ConstrainedEarlyEventMixin.js';\nimport \"../../../localization/En.js\";\nimport { prototypeValue } from '../../../../ChronoGraph/util/Helpers.js';\n/**\n * This mixin implements a date-based based constraint for the event.\n * It provides the following constraint types:\n *\n * - _Start no earlier than (SNET)_ - restricts the event to start on or after the specified date.\n * - _Finish no earlier than (FNET)_ - restricts the event to finish on or after the specified date.\n * - _Start no later than (SNLT)_ - restricts the event to start before (or on) the specified date.\n * - _Finish no later than (FNLT)_ - restricts the event to finish before (or on) the specified date.\n * - _Must start on (MSO)_ - restricts the event to start on the specified date.\n * - _Must finish on (MFO)_ - restricts the event to finish on the specified date.\n *\n * The type of constraint is defined by the [[constraintType]] property. Types has self-descriptive names.\n * There's also [[constraintDate]] with a constraint date.\n *\n * **Please note** that [[manuallyScheduled|manually scheduled]] events ignore their constraints.\n */\nexport class HasDateConstraintMixin extends Mixin([ConstrainedEarlyEventMixin, HasChildrenMixin], (base) => {\n    const superProto = base.prototype;\n    class HasDateConstraint extends base {\n        constructor() {\n            super(...arguments);\n            // This flag allows to ignore setting pinning constraint when writing start date\n            this.ignorePinningConstraint = false;\n        }\n        writeStartDate(me, transaction, quark, date, keepDuration = true) {\n            // get constraint type that should be used to enforce start date or\n            // null if the change cannot be enforced (happens when the task is manually scheduled so no need for enforcement or\n            // some constraint is already set)\n            const project = this.getProject();\n            // `writeStartDate` will be called for initial write to the `startDate` at the point of adding it to graph\n            // at that time there possibly be no `direction` identifier yet\n            // it seems this line relies on the fact, that `direction` field is declared after the `startDate`\n            if (project?.addConstraintOnDateSet\n                && transaction.graph.hasIdentifier(this.$.direction)\n                && !project?.eventStore.isSyncingDataOnLoad\n                && !this.isReverting\n                && !project?.getStm().isRestoring) {\n                const constrainType = this.getStartDatePinConstraintType();\n                if (constrainType) {\n                    this.constraintType = constrainType;\n                    this.constraintDate = date;\n                }\n            }\n            return superProto.writeStartDate.call(this, me, transaction, quark, date, keepDuration);\n        }\n        writeEndDate(me, transaction, quark, date, keepDuration = false) {\n            // get constraint type that should be used to enforce End date or\n            // null if the change cannot be enforced (happens when the task is manually scheduled so no need for enforcement or\n            // some constraint is already set)\n            const project = this.getProject();\n            if (project?.addConstraintOnDateSet\n                && transaction.graph.hasIdentifier(this.$.direction)\n                && keepDuration\n                && !project?.eventStore.isSyncingDataOnLoad\n                && !project?.getStm().isRestoring) {\n                const constrainType = this.getEndDatePinConstraintType();\n                if (constrainType) {\n                    this.constraintType = constrainType;\n                    this.constraintDate = date;\n                }\n            }\n            return superProto.writeEndDate.call(this, me, transaction, quark, date, keepDuration);\n        }\n        *calculateConstraintType() {\n            let constraintType = yield ProposedOrPrevious;\n            // use proposed constraint type if provided and is applicable to the event\n            if (!(yield* this.isConstraintTypeApplicable(constraintType))) {\n                constraintType = null;\n            }\n            return constraintType;\n        }\n        *calculateConstraintDate(Y) {\n            let constraintDate = yield ProposedOrPrevious;\n            const constraintType = yield this.$.constraintType;\n            if (!constraintType) {\n                constraintDate = null;\n            }\n            // use proposed constraint date if provided\n            else if (!constraintDate) {\n                // fill constraint date based on constraint type provided\n                constraintDate = this.getConstraintTypeDefaultDate(Y, constraintType);\n            }\n            return constraintDate;\n        }\n        getStartDatePinConstraintType() {\n            const { direction } = this;\n            if (!this.isTaskPinnableWithConstraint())\n                return null;\n            switch (direction) {\n                case Direction.Forward: return ConstraintType.StartNoEarlierThan;\n                case Direction.Backward: return ConstraintType.StartNoLaterThan;\n            }\n        }\n        getEndDatePinConstraintType() {\n            const { direction } = this;\n            if (!this.isTaskPinnableWithConstraint())\n                return null;\n            switch (direction) {\n                case Direction.Forward: return ConstraintType.FinishNoEarlierThan;\n                case Direction.Backward: return ConstraintType.FinishNoLaterThan;\n            }\n        }\n        /**\n         * Indicates if the task can be pinned with a constraint\n         * to enforce its start/end date changes.\n         * @private\n         */\n        isTaskPinnableWithConstraint() {\n            const { manuallyScheduled, ignorePinningConstraint, constraintType } = this;\n            let result = false;\n            // we should not pin manually scheduled tasks\n            if (!manuallyScheduled && !ignorePinningConstraint) {\n                if (constraintType) {\n                    switch (constraintType) {\n                        case ConstraintType.StartNoEarlierThan:\n                        case ConstraintType.StartNoLaterThan:\n                        case ConstraintType.FinishNoEarlierThan:\n                        case ConstraintType.FinishNoLaterThan:\n                            result = true;\n                    }\n                }\n                // no constraints -> we can pin\n                else {\n                    result = true;\n                }\n            }\n            return result;\n        }\n        applyChangeset(rawChanges, phantomIdField, remote) {\n            // Raise a flag on the record to avoid engine setting pinning constraint when writing start date. We need to\n            // avoid pinning constraint in case remote dataset only contains start date for the parent record. If local\n            // parent record start date is different, start date will be written to the engine and constraint will be set.\n            // We don't need to do that here, dataset is supposed to complete so parent ends up with the same start date\n            // without unnecessary constraint\n            // https://github.com/bryntum/support/issues/5086\n            this.ignorePinningConstraint = remote;\n            //@ts-ignore\n            const result = super.applyChangeset(rawChanges, phantomIdField, remote);\n            this.ignorePinningConstraint = false;\n            return result;\n        }\n        /**\n         * Returns default constraint date value for the constraint type provided\n         * (either start or end date of the event).\n         */\n        getConstraintTypeDefaultDate(Y, constraintType) {\n            switch (constraintType) {\n                case ConstraintType.StartNoEarlierThan:\n                case ConstraintType.StartNoLaterThan:\n                case ConstraintType.MustStartOn:\n                    return Y(ProposedOrPreviousValueOf(this.$.startDate));\n                case ConstraintType.FinishNoEarlierThan:\n                case ConstraintType.FinishNoLaterThan:\n                case ConstraintType.MustFinishOn:\n                    return Y(ProposedOrPreviousValueOf(this.$.endDate));\n            }\n            return null;\n        }\n        /**\n         * Returns true if the provided constraint type is applicable to the event.\n         *\n         * @param {ConstraintType} constraintType Constraint type.\n         * @returns `True` if the provided constraint type is applicable (`false` otherwise).\n         */\n        *isConstraintTypeApplicable(constraintType) {\n            // Take into account if the event is leaf\n            const hasSubEvents = yield* this.hasSubEvents();\n            switch (constraintType) {\n                // these constraints are applicable to leaves only\n                case ConstraintType.FinishNoEarlierThan:\n                case ConstraintType.StartNoLaterThan:\n                case ConstraintType.MustFinishOn:\n                case ConstraintType.MustStartOn:\n                    return !hasSubEvents;\n            }\n            return true;\n        }\n        /**\n         * Sets the constraint type (if applicable) and constraining date to the task.\n         * @param {ConstraintType}  constraintType   Constraint type.\n         * @param {Date}            [constraintDate] Constraint date.\n         * @returns Promise<PropagateResult>\n         */\n        async setConstraint(constraintType, constraintDate) {\n            this.constraintType = constraintType;\n            if (constraintDate !== undefined) {\n                this.constraintDate = constraintDate;\n            }\n            return this.commitAsync();\n        }\n        *calculateEndDateConstraintIntervals() {\n            const intervals = yield* superProto.calculateEndDateConstraintIntervals.call(this);\n            const manuallyScheduled = yield this.$.manuallyScheduled;\n            const constraintType = yield this.$.constraintType;\n            const constraintDate = yield this.$.constraintDate;\n            const dateConstraintIntervalClass = this.project.dateConstraintIntervalClass;\n            // manually scheduled task ignores its constraints\n            if (!manuallyScheduled && constraintType && constraintDate) {\n                // if constraint type is\n                switch (constraintType) {\n                    case ConstraintType.MustFinishOn:\n                        intervals.unshift(dateConstraintIntervalClass.new({\n                            owner: this,\n                            side: ConstraintIntervalSide.End,\n                            startDate: constraintDate,\n                            endDate: constraintDate\n                        }));\n                        break;\n                    case ConstraintType.FinishNoEarlierThan:\n                        intervals.unshift(dateConstraintIntervalClass.new({\n                            owner: this,\n                            side: ConstraintIntervalSide.End,\n                            startDate: constraintDate\n                        }));\n                        break;\n                    case ConstraintType.FinishNoLaterThan:\n                        intervals.unshift(dateConstraintIntervalClass.new({\n                            owner: this,\n                            side: ConstraintIntervalSide.End,\n                            endDate: constraintDate\n                        }));\n                        break;\n                }\n            }\n            return intervals;\n        }\n        *calculateStartDateConstraintIntervals() {\n            const intervals = yield* superProto.calculateStartDateConstraintIntervals.call(this);\n            const manuallyScheduled = yield this.$.manuallyScheduled;\n            const constraintType = yield this.$.constraintType;\n            const constraintDate = yield this.$.constraintDate;\n            const dateConstraintIntervalClass = this.project.dateConstraintIntervalClass;\n            // manually scheduled task ignores its constraints\n            if (!manuallyScheduled && constraintType && constraintDate) {\n                // if constraint type is\n                switch (constraintType) {\n                    case ConstraintType.MustStartOn:\n                        intervals.unshift(dateConstraintIntervalClass.new({\n                            owner: this,\n                            side: ConstraintIntervalSide.Start,\n                            startDate: constraintDate,\n                            endDate: constraintDate\n                        }));\n                        break;\n                    case ConstraintType.StartNoEarlierThan:\n                        intervals.unshift(dateConstraintIntervalClass.new({\n                            owner: this,\n                            side: ConstraintIntervalSide.Start,\n                            startDate: constraintDate\n                        }));\n                        break;\n                    case ConstraintType.StartNoLaterThan:\n                        intervals.unshift(dateConstraintIntervalClass.new({\n                            owner: this,\n                            side: ConstraintIntervalSide.Start,\n                            endDate: constraintDate\n                        }));\n                        break;\n                }\n            }\n            return intervals;\n        }\n    }\n    __decorate([\n        model_field({ type: 'string' }, { sync: true })\n    ], HasDateConstraint.prototype, \"constraintType\", void 0);\n    __decorate([\n        model_field({ type: 'date' }, { converter: dateConverter, sync: true })\n    ], HasDateConstraint.prototype, \"constraintDate\", void 0);\n    __decorate([\n        calculate('constraintType')\n    ], HasDateConstraint.prototype, \"calculateConstraintType\", null);\n    __decorate([\n        calculate('constraintDate')\n    ], HasDateConstraint.prototype, \"calculateConstraintDate\", null);\n    return HasDateConstraint;\n}) {\n}\n/**\n * Class implements resolving a scheduling conflict happened due to a task constraint.\n * It resolves the conflict by removing the constraint.\n */\nexport class RemoveDateConstraintConflictResolution extends Localizable(ConflictResolution) {\n    static get $name() {\n        return 'RemoveDateConstraintConflictResolution';\n    }\n    construct() {\n        super.construct(...arguments);\n        this.event = this.interval.owner;\n    }\n    getDescription() {\n        const { event } = this;\n        return format(this.L('L{descriptionTpl}'), event.name || event.id, this.interval.getConstraintName(event.constraintType));\n    }\n    /**\n     * Resolves the conflict by removing the event constraint.\n     */\n    resolve() {\n        this.event.constraintType = null;\n    }\n}\n/**\n * Description builder for an [[DateConstraintInterval|event constraint interval]].\n */\nexport class DateConstraintIntervalDescription extends ConstraintIntervalDescription {\n    static get $name() {\n        return 'DateConstraintIntervalDescription';\n    }\n    /**\n     * Returns description for the provided event constraint interval.\n     * @param interval Constraint interval\n     */\n    static getDescription(interval) {\n        let tpl;\n        switch (interval.owner.constraintType) {\n            case ConstraintType.StartNoEarlierThan:\n            case ConstraintType.FinishNoEarlierThan:\n            case ConstraintType.MustStartOn:\n            case ConstraintType.MustFinishOn:\n                tpl = this.L('L{startDateDescriptionTpl}');\n                break;\n            case ConstraintType.StartNoLaterThan:\n            case ConstraintType.FinishNoLaterThan:\n                tpl = this.L('L{endDateDescriptionTpl}');\n                break;\n        }\n        return format(tpl, ...this.getDescriptionParameters(interval));\n    }\n    /**\n     * Returns localized constraint name.\n     * @param constraintType Type of constraint\n     */\n    static getConstraintName(constraintType) {\n        return this.L('L{constraintTypeTpl}')[constraintType];\n    }\n    static getDescriptionParameters(interval) {\n        const event = interval.owner;\n        return [\n            DateHelper.format(interval.startDate, this.L('L{dateFormat}')),\n            DateHelper.format(interval.endDate, this.L('L{dateFormat}')),\n            event.name || event.id,\n            this.getConstraintName(event.constraintType)\n        ];\n    }\n}\n/**\n * Class implements an interval applied by an event [[constraintType|constraint]].\n * The interval suggests the only resolution option - removing the constraint.\n */\nexport class DateConstraintInterval extends ConstraintInterval {\n    getConstraintName(constraintType) {\n        return this.descriptionBuilderClass.getConstraintName(constraintType || this.owner.constraintType);\n    }\n    getDescription() {\n        return this.descriptionBuilderClass.getDescription(this);\n    }\n    isAffectedByTransaction(transaction) {\n        const event = this.owner;\n        transaction = transaction || event.graph.activeTransaction;\n        const constraintDateQuark = transaction.entries.get(event.$.constraintDate), constraintTypeQuark = transaction.entries.get(event.$.constraintType);\n        // new constrained event or modified constraint\n        return !transaction.baseRevision.hasIdentifier(event.$$) ||\n            constraintDateQuark && !constraintDateQuark.isShadow() ||\n            constraintTypeQuark && !constraintTypeQuark.isShadow();\n    }\n    /**\n     * Returns possible resolution options for cases when\n     * the interval takes part in a conflict.\n     *\n     * The interval suggests the only resolution option - removing the constraint.\n     */\n    getResolutions() {\n        return this.resolutions || (this.resolutions = [\n            this.removeDateConstraintConflictResolutionClass.new({ interval: this })\n        ]);\n    }\n}\n__decorate([\n    prototypeValue(RemoveDateConstraintConflictResolution)\n], DateConstraintInterval.prototype, \"removeDateConstraintConflictResolutionClass\", void 0);\n__decorate([\n    prototypeValue(DateConstraintIntervalDescription)\n], DateConstraintInterval.prototype, \"descriptionBuilderClass\", void 0);\n", "var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Mixin } from '../../../../ChronoGraph/class/BetterMixin.js';\nimport { isAtomicValue, prototypeValue } from '../../../../ChronoGraph/util/Helpers.js';\nimport { DependencyType, TimeUnit } from '../../../scheduling/Types.js';\nimport { HasDependenciesMixin } from \"../scheduler_basic/HasDependenciesMixin.js\";\nimport { ConstrainedEarlyEventMixin } from './ConstrainedEarlyEventMixin.js';\nimport { ConstraintInterval, ConflictResolution, ConstraintIntervalDescription } from '../../../chrono/Conflict.js';\nimport DateHelper from '../../../../Core/helper/DateHelper.js';\nimport { format } from '../../../util/Functions.js';\nimport Localizable from '../../../../Core/localization/Localizable.js';\nimport \"../../../localization/En.js\";\nimport { model_field } from '../../../chrono/ModelFieldAtom.js';\n//---------------------------------------------------------------------------------------------------------------------\n/**\n * This mixin adds support for scheduling event ASAP, by dependencies. All it does is\n * create the constraint interval for every incoming dependency. See [[ConstrainedEarlyEventMixin]] for\n * more details about constraint-based scheduling.\n *\n * The supported dependency types are listed in this enum: [[DependencyType]]\n */\nexport class ScheduledByDependenciesEarlyEventMixin extends Mixin([ConstrainedEarlyEventMixin, HasDependenciesMixin], (base) => {\n    const superProto = base.prototype;\n    class ScheduledByDependenciesEarlyEventMixin extends base {\n        /**\n         * The method defines wether the provided dependency should constrain the successor or not.\n         * If the method returns `true` the dependency constrains the successor and does not do that when `false` returned.\n         * By default the method returns `true` if the dependency is [[SchedulerProDependencyMixin.active|active]]\n         * and if this event is [[inactive|active]] (or both this event and the successor are [[inactive]]).\n         *\n         * This is used when calculating [[earlyStartDateConstraintIntervals]].\n         * @param dependency Dependency to consider.\n         * @returns `true` if the dependency should constrain successor, `false` if not.\n         */\n        *shouldPredecessorAffectScheduling(dependency) {\n            const fromEvent = yield dependency.$.fromEvent;\n            // ignore missing from events and inactive dependencies\n            return fromEvent && !isAtomicValue(fromEvent) && (yield dependency.$.active)\n                // ignore inactive predecessor (unless we both are inactive)\n                && (!(yield fromEvent.$.inactive) || (yield this.$.inactive));\n        }\n        *calculateEarlyStartDateConstraintIntervals() {\n            const intervals = yield* superProto.calculateEarlyStartDateConstraintIntervals.call(this);\n            const project = this.getProject();\n            const dependencyConstraintIntervalClass = project.dependencyConstraintIntervalClass;\n            for (const dependency of (yield this.$.incomingDeps)) {\n                // ignore missing from events and inactive predecessors/dependencies\n                if (!(yield* this.shouldPredecessorAffectScheduling(dependency)))\n                    continue;\n                const predecessor = yield dependency.$.fromEvent;\n                let predecessorDate;\n                switch (yield dependency.$.type) {\n                    case DependencyType.EndToStart:\n                        predecessorDate = yield predecessor.$.earlyEndDateRaw;\n                        break;\n                    case DependencyType.StartToStart:\n                        predecessorDate = yield predecessor.$.earlyStartDateRaw;\n                        break;\n                }\n                if (predecessorDate) {\n                    const lag = yield dependency.$.lag;\n                    const lagUnit = yield dependency.$.lagUnit;\n                    const calendar = yield dependency.$.calendar;\n                    // this \"subscribes\" on the calendar's `version` field (which is incremented\n                    // every time when the intervals of the calendar changes)\n                    yield calendar.$.version;\n                    const interval = dependencyConstraintIntervalClass.new({\n                        owner: dependency,\n                        startDate: calendar.calculateEndDate(predecessorDate, yield* project.$convertDuration(lag, lagUnit, TimeUnit.Millisecond)),\n                        endDate: null\n                    });\n                    intervals.unshift(interval);\n                }\n            }\n            return intervals;\n        }\n        *calculateEarlyEndDateConstraintIntervals() {\n            const intervals = yield* superProto.calculateEarlyEndDateConstraintIntervals.call(this);\n            const project = this.getProject();\n            const dependencyConstraintIntervalClass = project.dependencyConstraintIntervalClass;\n            for (const dependency of (yield this.$.incomingDeps)) {\n                // ignore missing from events and inactive dependencies\n                if (!(yield* this.shouldPredecessorAffectScheduling(dependency)))\n                    continue;\n                const predecessor = yield dependency.$.fromEvent;\n                let predecessorDate;\n                switch (yield dependency.$.type) {\n                    case DependencyType.EndToEnd:\n                        predecessorDate = yield predecessor.$.earlyEndDateRaw;\n                        break;\n                    case DependencyType.StartToEnd:\n                        predecessorDate = yield predecessor.$.earlyStartDateRaw;\n                        break;\n                }\n                if (predecessorDate) {\n                    const lag = yield dependency.$.lag;\n                    const lagUnit = yield dependency.$.lagUnit;\n                    const calendar = yield dependency.$.calendar;\n                    // this \"subscribes\" on the calendar's `version` field (which is incremented\n                    // every time when the intervals of the calendar changes)\n                    yield calendar.$.version;\n                    const interval = dependencyConstraintIntervalClass.new({\n                        owner: dependency,\n                        startDate: calendar.calculateEndDate(predecessorDate, yield* project.$convertDuration(lag, lagUnit, TimeUnit.Millisecond)),\n                        endDate: null\n                    });\n                    intervals.unshift(interval);\n                }\n            }\n            return intervals;\n        }\n    }\n    __decorate([\n        model_field({ type: 'boolean' })\n    ], ScheduledByDependenciesEarlyEventMixin.prototype, \"inactive\", void 0);\n    return ScheduledByDependenciesEarlyEventMixin;\n}) {\n}\n/**\n * Base class for dependency interval resolutions.\n */\nexport class BaseDependencyResolution extends Localizable(ConflictResolution) {\n    static get $name() {\n        return 'BaseDependencyResolution';\n    }\n    getDescription() {\n        const { dependency } = this, { type, fromEvent, toEvent } = dependency;\n        return format(this.L('L{descriptionTpl}'), this.L('L{DependencyType.long}')[type], fromEvent.name || fromEvent.id, toEvent.name || toEvent.id);\n    }\n}\n/**\n * Dependency resolution removing the dependency.\n */\nexport class RemoveDependencyResolution extends BaseDependencyResolution {\n    static get $name() {\n        return 'RemoveDependencyResolution';\n    }\n    /**\n     * Resolves the conflict by removing the dependency.\n     */\n    resolve() {\n        this.dependency.remove();\n    }\n}\n/**\n * Dependency resolution deactivating the dependency.\n */\nexport class DeactivateDependencyResolution extends BaseDependencyResolution {\n    static get $name() {\n        return 'DeactivateDependencyResolution';\n    }\n    /**\n     * Resolves the conflict by deactivating the dependency.\n     */\n    resolve() {\n        this.dependency.active = false;\n    }\n}\n/**\n * Description builder for a [[DependencyConstraintInterval|dependency constraint interval]].\n */\nexport class DependencyConstraintIntervalDescription extends ConstraintIntervalDescription {\n    static get $name() {\n        return 'DependencyConstraintIntervalDescription';\n    }\n    static getDescriptionParameters(interval) {\n        const dependency = interval.owner;\n        return [\n            DateHelper.format(interval.startDate, this.L('L{dateFormat}')),\n            DateHelper.format(interval.endDate, this.L('L{dateFormat}')),\n            this.L('L{DependencyType.long}')[dependency.type],\n            dependency.fromEvent.name,\n            dependency.toEvent.name\n        ];\n    }\n}\n/**\n * Constraint interval applied by a dependency.\n *\n * In case for a conflict the class [[getResolutions|suggests]] two resolution options:\n * either [[RemoveDependencyResolution|removing]] or [[DeactivateDependencyResolution|deactivating]] the dependency.\n */\nexport class DependencyConstraintInterval extends ConstraintInterval {\n    isAffectedByTransaction(transaction) {\n        const dependency = this.owner;\n        transaction = transaction || dependency.graph.activeTransaction;\n        const { entries } = transaction, \n        // dependency identifiers to check\n        { fromEvent, toEvent, lag, lagUnit, type } = dependency.$, fromEventQuark = entries.get(fromEvent), toEventQuark = entries.get(toEvent), lagQuark = entries.get(lag), lagUnitQuark = entries.get(lagUnit), typeQuark = entries.get(type);\n        // new or modified dependency\n        return !transaction.baseRevision.hasIdentifier(dependency.$$) ||\n            fromEventQuark && !fromEventQuark.isShadow() ||\n            toEventQuark && !toEventQuark.isShadow() ||\n            lagQuark && !lagQuark.isShadow() ||\n            lagUnitQuark && !lagUnitQuark.isShadow() ||\n            typeQuark && !typeQuark.isShadow();\n    }\n    /**\n     * Returns the interval resolution options.\n     * There are two resolutions:\n     * - [[RemoveDependencyResolution|removing the dependency]]\n     * - [[DeactivateDependencyResolution|deactivating the dependency]].\n     */\n    getResolutions() {\n        return this.resolutions || (this.resolutions = [\n            this.deactivateDependencyConflictResolutionClass.new({ dependency: this.owner }),\n            this.removeDependencyConflictResolutionClass.new({ dependency: this.owner })\n        ]);\n    }\n}\n__decorate([\n    prototypeValue(RemoveDependencyResolution)\n], DependencyConstraintInterval.prototype, \"removeDependencyConflictResolutionClass\", void 0);\n__decorate([\n    prototypeValue(DeactivateDependencyResolution)\n], DependencyConstraintInterval.prototype, \"deactivateDependencyConflictResolutionClass\", void 0);\n__decorate([\n    prototypeValue(DependencyConstraintIntervalDescription)\n], DependencyConstraintInterval.prototype, \"descriptionBuilderClass\", void 0);\n", "var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { ProposedOrPrevious } from '../../../../ChronoGraph/chrono/Effect.js';\nimport { Mixin } from '../../../../ChronoGraph/class/BetterMixin.js';\nimport { model_field } from '../../../chrono/ModelFieldAtom.js';\nimport { BaseAssignmentMixin } from '../scheduler_basic/BaseAssignmentMixin.js';\nimport { calculate, field } from '../../../../ChronoGraph/replica/Entity.js';\n//---------------------------------------------------------------------------------------------------------------------\n/**\n * A mixin for the assignment entity at the Scheduler Pro level.\n */\nexport class SchedulerProAssignmentMixin extends Mixin([BaseAssignmentMixin], (base) => {\n    const superProto = base.prototype;\n    class SchedulerProAssignmentMixin extends base {\n        *calculateUnits() {\n            const event = yield this.$.event;\n            // if event of assignment presents - we always delegate to it\n            // (so that various assignment logic can be overridden by single event mixin)\n            if (event)\n                return yield* event.calculateAssignmentUnits(this);\n            // otherwise use proposed or current consistent value\n            return yield ProposedOrPrevious;\n        }\n        *calculateEffort() {\n            const event = yield this.$.event;\n            if (event) {\n                const startDate = yield event.$.startDate;\n                const endDate = yield event.$.endDate;\n                const calendar = yield event.$.effectiveCalendar;\n                if (startDate && endDate) {\n                    const map = new Map();\n                    map.set(calendar, [this]);\n                    return yield* event.calculateProjectedEffort(startDate, endDate, map);\n                }\n            }\n            return null;\n        }\n        *calculateActualDate() {\n            const event = yield this.$.event;\n            if (event) {\n                const startDate = yield event.$.startDate;\n                const duration = yield event.$.duration;\n                const percentDone = yield event.$.percentDone;\n                return yield* event.calculateProjectedXDateWithDuration(startDate, true, duration * 0.01 * percentDone);\n            }\n            return null;\n        }\n        *calculateActualEffort() {\n            const event = yield this.$.event;\n            if (event) {\n                const startDate = yield event.$.startDate;\n                const calendar = yield event.$.effectiveCalendar;\n                const actualDate = yield this.$.actualDate;\n                const assignmentsByCalendar = new Map();\n                assignmentsByCalendar.set(calendar, [this]);\n                return yield* event.calculateProjectedEffort(startDate, actualDate, assignmentsByCalendar);\n            }\n            return null;\n        }\n    }\n    __decorate([\n        model_field({ type: 'number', defaultValue: 100 })\n    ], SchedulerProAssignmentMixin.prototype, \"units\", void 0);\n    __decorate([\n        calculate('units')\n    ], SchedulerProAssignmentMixin.prototype, \"calculateUnits\", null);\n    __decorate([\n        field({ lazy: true })\n    ], SchedulerProAssignmentMixin.prototype, \"effort\", void 0);\n    __decorate([\n        field({ lazy: true })\n    ], SchedulerProAssignmentMixin.prototype, \"actualDate\", void 0);\n    __decorate([\n        field({ lazy: true })\n    ], SchedulerProAssignmentMixin.prototype, \"actualEffort\", void 0);\n    __decorate([\n        calculate('effort')\n    ], SchedulerProAssignmentMixin.prototype, \"calculateEffort\", null);\n    __decorate([\n        calculate('actualDate')\n    ], SchedulerProAssignmentMixin.prototype, \"calculateActualDate\", null);\n    __decorate([\n        calculate('actualEffort')\n    ], SchedulerProAssignmentMixin.prototype, \"calculateActualEffort\", null);\n    return SchedulerProAssignmentMixin;\n}) {\n}\n", "var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Mixin } from \"../../../../ChronoGraph/class/BetterMixin.js\";\nimport { calculate, field, write } from '../../../../ChronoGraph/replica/Entity.js';\nimport { isAtomicValue } from '../../../../ChronoGraph/util/Helpers.js';\nimport DateHelper from '../../../../Core/helper/DateHelper.js';\nimport { model_field } from '../../../chrono/ModelFieldAtom.js';\nimport { DependenciesCalendar, TimeUnit } from '../../../scheduling/Types.js';\nimport { BaseDependencyMixin } from '../scheduler_basic/BaseDependencyMixin.js';\n//---------------------------------------------------------------------------------------------------------------------\n/**\n * A mixin for the dependency entity at the Scheduler Pro level. It adds [[lag]] and [[lagUnit]] fields.\n *\n * The calendar according to which the lag time is calculated is defined with the\n * [[SchedulerProProjectMixin.dependenciesCalendar|dependenciesCalendar]] config of the project.\n */\nexport class SchedulerProDependencyMixin extends Mixin([BaseDependencyMixin], (base) => {\n    const superProto = base.prototype;\n    class SchedulerProDependencyMixin extends base {\n        *calculateCalendar() {\n            const project = this.getProject();\n            const dependenciesCalendar = yield project.$.dependenciesCalendar;\n            let calendar;\n            switch (dependenciesCalendar) {\n                case DependenciesCalendar.Project:\n                    calendar = yield project.$.effectiveCalendar;\n                    break;\n                case DependenciesCalendar.FromEvent:\n                    const fromEvent = yield this.$.fromEvent;\n                    calendar = fromEvent && !isAtomicValue(fromEvent) ? yield fromEvent.$.effectiveCalendar : null;\n                    break;\n                case DependenciesCalendar.ToEvent:\n                    const toEvent = yield this.$.toEvent;\n                    calendar = toEvent && !isAtomicValue(toEvent) ? yield toEvent.$.effectiveCalendar : null;\n                    break;\n            }\n            // the only case when there will be no calendar is when there's no either from/to event\n            // what to return in such case? use project calendar as \"defensive\" approach\n            if (!calendar)\n                calendar = yield project.$.effectiveCalendar;\n            return calendar;\n        }\n        /**\n         * Setter for the [[lag]]. Can also set [[lagUnit]] if second argument is provided.\n         *\n         * @param lag\n         * @param unit\n         */\n        async setLag(lag, unit) {\n            if (this.graph) {\n                this.graph.write(this.$.lag, lag, unit);\n                return this.graph.commitAsync();\n            }\n            else {\n                this.$.lag.DATA = lag;\n                if (unit != null)\n                    this.$.lagUnit.DATA = unit;\n            }\n        }\n        writeLag(me, transaction, quark, lag, unit = undefined) {\n            me.constructor.prototype.write.call(this, me, transaction, quark, lag);\n            if (unit != null)\n                transaction.write(this.$.lagUnit, unit);\n        }\n    }\n    __decorate([\n        model_field({ type: 'number', defaultValue: 0 })\n    ], SchedulerProDependencyMixin.prototype, \"lag\", void 0);\n    __decorate([\n        model_field({ type: 'string', defaultValue: TimeUnit.Day }, { converter: DateHelper.normalizeUnit })\n    ], SchedulerProDependencyMixin.prototype, \"lagUnit\", void 0);\n    __decorate([\n        field()\n    ], SchedulerProDependencyMixin.prototype, \"calendar\", void 0);\n    __decorate([\n        model_field({ type: 'boolean', defaultValue: true, persist: true })\n    ], SchedulerProDependencyMixin.prototype, \"active\", void 0);\n    __decorate([\n        calculate('calendar')\n    ], SchedulerProDependencyMixin.prototype, \"calculateCalendar\", null);\n    __decorate([\n        write('lag')\n    ], SchedulerProDependencyMixin.prototype, \"writeLag\", null);\n    return SchedulerProDependencyMixin;\n}) {\n}\n// /**\n//  * Dependency entity mixin type\n//  */\n// export type SchedulerProDependencyMixin = Mixin<typeof SchedulerProDependencyMixin>\n//\n// export interface SchedulerProDependencyMixinI extends Mixin<typeof SchedulerProDependencyMixin> {}\n//\n// export const BuildSchedulerProDependency = (base) => SchedulerProDependencyMixin(BuildMinimalBaseDependency(base))\n//\n// export class MinimalSchedulerProDependency extends SchedulerProDependencyMixin(MinimalBaseDependency) {}\n", "var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { ProposedOrPrevious } from \"../../../../ChronoGraph/chrono/Effect.js\";\nimport { Mixin } from \"../../../../ChronoGraph/class/BetterMixin.js\";\nimport { calculate, field } from \"../../../../ChronoGraph/replica/Entity.js\";\nimport { model_field } from \"../../../chrono/ModelFieldAtom.js\";\nimport { TimeUnit } from \"../../../scheduling/Types.js\";\nimport { HasChildrenMixin } from \"../scheduler_basic/HasChildrenMixin.js\";\n/**\n * This mixin provides [[percentDone]] field for the event and methods for its calculation.\n *\n * For the parent events percent done is calculated based on the child events (ignores user input).\n * This behavior is controlled with the [[SchedulerProProjectMixin.autoCalculatePercentDoneForParentTasks]] config option.\n * The calculation is implemented in [[calculatePercentDone]] method.\n */\nexport class HasPercentDoneMixin extends Mixin([HasChildrenMixin], (base) => {\n    const superProto = base.prototype;\n    class HasPercentDoneMixin extends base {\n        /**\n         * Method calculates the task [[percentDone]] field value.\n         * For a summary task it calculates the value based on the task children if the project\n         * [[SchedulerProProjectMixin.autoCalculatePercentDoneForParentTasks|autoCalculatePercentDoneForParentTasks]] is true (default).\n         * And for a regular (leaf) task it just returns the field provided value as-is.\n         */\n        *calculatePercentDone() {\n            const childEvents = yield this.$.childEvents;\n            const project = this.getProject();\n            const autoCalculatePercentDoneForParentTasks = yield project.$.autoCalculatePercentDoneForParentTasks;\n            if (childEvents.size && autoCalculatePercentDoneForParentTasks) {\n                const summaryData = yield this.$.percentDoneSummaryData;\n                if (summaryData.totalDuration > 0) {\n                    return summaryData.completedDuration / summaryData.totalDuration;\n                }\n                else if (summaryData.milestonesNum > 0) {\n                    return summaryData.milestonesTotalPercentDone / summaryData.milestonesNum;\n                }\n                else {\n                    return null;\n                }\n            }\n            else {\n                return yield ProposedOrPrevious;\n            }\n        }\n        /**\n         * The method defines whether the provided child event should be\n         * taken into account when calculating this summary event [[percentDone]].\n         *\n         * If the method returns `true` the child event is taken into account\n         * and if the method returns `false` it's not.\n         * By default the method returns `true` to include all child events data.\n         * @param childEvent Child event to consider.\n         * @returns `true` if the provided event should be taken into account, `false` if not.\n         */\n        *shouldRollupChildPercentDoneSummaryData(childEvent) {\n            return true;\n        }\n        *calculatePercentDoneSummaryData() {\n            const childEvents = yield this.$.childEvents;\n            if (childEvents.size) {\n                let summary = {\n                    totalDuration: 0,\n                    completedDuration: 0,\n                    milestonesNum: 0,\n                    milestonesTotalPercentDone: 0\n                };\n                for (const childEvent of childEvents) {\n                    if (!(yield* this.shouldRollupChildPercentDoneSummaryData(childEvent)))\n                        continue;\n                    const childSummaryData = yield childEvent.$.percentDoneSummaryData;\n                    if (childSummaryData) {\n                        summary.totalDuration += childSummaryData.totalDuration;\n                        summary.completedDuration += childSummaryData.completedDuration;\n                        summary.milestonesNum += childSummaryData.milestonesNum;\n                        summary.milestonesTotalPercentDone += childSummaryData.milestonesTotalPercentDone;\n                    }\n                }\n                return summary;\n            }\n            else {\n                const duration = yield this.$.duration;\n                if (typeof duration == 'number') {\n                    const durationInMs = yield* this.getProject().$convertDuration(duration, yield this.$.durationUnit, TimeUnit.Millisecond);\n                    const percentDone = yield this.$.percentDone;\n                    return {\n                        totalDuration: durationInMs,\n                        completedDuration: durationInMs * percentDone,\n                        milestonesNum: durationInMs === 0 ? 1 : 0,\n                        milestonesTotalPercentDone: durationInMs === 0 ? percentDone : 0,\n                    };\n                    // we can't calculate w/o duration\n                }\n                else {\n                    return null;\n                }\n            }\n        }\n    }\n    __decorate([\n        model_field({ type: 'number', defaultValue: 0 })\n    ], HasPercentDoneMixin.prototype, \"percentDone\", void 0);\n    __decorate([\n        field()\n    ], HasPercentDoneMixin.prototype, \"percentDoneSummaryData\", void 0);\n    __decorate([\n        calculate('percentDone')\n    ], HasPercentDoneMixin.prototype, \"calculatePercentDone\", null);\n    __decorate([\n        calculate('percentDoneSummaryData')\n    ], HasPercentDoneMixin.prototype, \"calculatePercentDoneSummaryData\", null);\n    return HasPercentDoneMixin;\n}) {\n}\n", "var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { HasProposedValue } from \"../../../../ChronoGraph/chrono/Effect.js\";\nimport { Reject } from \"../../../../ChronoGraph/chrono/Effect.js\";\nimport { Mixin } from \"../../../../ChronoGraph/class/BetterMixin.js\";\nimport { calculate, field } from \"../../../../ChronoGraph/replica/Entity.js\";\nimport { CalendarIteratorResult } from \"../../../calendar/CalendarCache.js\";\nimport { TimeUnit } from \"../../../scheduling/Types.js\";\nimport { EmptyCalendarEffect } from \"../scheduler_basic/BaseCalendarMixin.js\";\nimport { BaseHasAssignmentsMixin } from \"../scheduler_basic/BaseHasAssignmentsMixin.js\";\nimport { EffectResolutionResult } from \"../../../chrono/SchedulingIssueEffect.js\";\nimport { model_field } from \"../../../chrono/ModelFieldAtom.js\";\n//---------------------------------------------------------------------------------------------------------------------\n/**\n * This mixins enhances the purely visual [[BaseHasAssignmentsMixin]] with scheduling according\n * to the calendars of the assigned resources.\n *\n * A time interval will be \"counted\" into the event duration, only if at least one assigned\n * resource has that interval as working time, and the event's own calendar also has that interval\n * as working. Otherwise the time is skipped and not counted into event's duration.\n */\nexport class SchedulerProHasAssignmentsMixin extends Mixin([BaseHasAssignmentsMixin], (base) => {\n    const superProto = base.prototype;\n    class SchedulerProHasAssignmentsMixin extends base {\n        *hasProposedValueForUnits() {\n            const assignments = yield this.$.assigned;\n            for (const assignment of assignments) {\n                const resource = yield assignment.$.resource;\n                if (resource && (yield HasProposedValue(assignment.$.units)))\n                    return true;\n            }\n            return false;\n        }\n        /**\n         * A method which assigns a resource to the current event\n         */\n        async assign(resource, units = 100) {\n            const assignmentCls = this.getProject().assignmentStore.modelClass;\n            this.addAssignment(new assignmentCls({\n                event: this,\n                resource: resource,\n                units: units\n            }));\n            return this.commitAsync();\n        }\n        *forEachAvailabilityInterval(options, func) {\n            const calendar = yield this.$.effectiveCalendar;\n            const assignmentsByCalendar = yield this.$.assignmentsByCalendar;\n            const effectiveCalendarsCombination = yield this.$.effectiveCalendarsCombination;\n            const ignoreResourceCalendar = (yield this.$.ignoreResourceCalendar) || options.ignoreResourceCalendar || !assignmentsByCalendar.size;\n            const maxRange = this.getProject().maxCalendarRange;\n            if (maxRange) {\n                options = Object.assign({ maxRange }, options);\n            }\n            return effectiveCalendarsCombination.forEachAvailabilityInterval(options, (startDate, endDate, calendarCacheIntervalMultiple) => {\n                const calendarsStatus = calendarCacheIntervalMultiple.getCalendarsWorkStatus();\n                const workCalendars = calendarCacheIntervalMultiple.getCalendarsWorking();\n                if (calendarsStatus.get(calendar)\n                    &&\n                        (ignoreResourceCalendar || workCalendars.some((calendar) => assignmentsByCalendar.has(calendar)))) {\n                    return func(startDate, endDate, calendarCacheIntervalMultiple);\n                }\n            });\n        }\n        *calculateEffectiveCalendarsCombination() {\n            const manuallyScheduled = yield this.$.manuallyScheduled;\n            const project = this.getProject();\n            const calendars = [yield this.$.effectiveCalendar];\n            if (!manuallyScheduled || project.skipNonWorkingTimeInDurationWhenSchedulingManually) {\n                const assignmentsByCalendar = yield this.$.assignmentsByCalendar;\n                calendars.push(...assignmentsByCalendar.keys());\n            }\n            return this.getProject().combineCalendars(calendars);\n        }\n        *calculateAssignmentsByCalendar() {\n            const assignments = yield this.$.assigned;\n            const result = new Map();\n            for (const assignment of assignments) {\n                const resource = yield assignment.$.resource;\n                if (resource) {\n                    const resourceCalendar = yield resource.$.effectiveCalendar;\n                    let assignments = result.get(resourceCalendar);\n                    if (!assignments) {\n                        assignments = [];\n                        result.set(resourceCalendar, assignments);\n                    }\n                    assignments.push(assignment);\n                }\n            }\n            return result;\n        }\n        *getBaseOptionsForDurationCalculations() {\n            return { ignoreResourceCalendar: false };\n        }\n        *useEventAvailabilityIterator() {\n            const assignmentsByCalendar = yield this.$.assignmentsByCalendar;\n            return assignmentsByCalendar.size > 0;\n        }\n        *skipNonWorkingTime(date, isForward = true, iteratorOptions) {\n            if (!date)\n                return null;\n            const assignmentsByCalendar = yield this.$.assignmentsByCalendar;\n            const ignoreResourceCalendar = yield this.$.ignoreResourceCalendar;\n            if (yield* this.useEventAvailabilityIterator()) {\n                const options = Object.assign(yield* this.getBaseOptionsForDurationCalculations(), isForward ? { startDate: date, isForward } : { endDate: date, isForward }, iteratorOptions);\n                let workingDate;\n                const skipRes = yield* this.forEachAvailabilityInterval(options, (startDate, endDate, calendarCacheIntervalMultiple) => {\n                    workingDate = isForward ? startDate : endDate;\n                    return false;\n                });\n                if (skipRes === CalendarIteratorResult.MaxRangeReached || skipRes === CalendarIteratorResult.FullRangeIterated) {\n                    const calendars = [yield this.$.effectiveCalendar];\n                    // if we take resource calendars into account collect them\n                    // and provide to EmptyCalendarEffect instance\n                    if (!options.ignoreResourceCalendar && !ignoreResourceCalendar) {\n                        calendars.push(...assignmentsByCalendar.keys());\n                    }\n                    const effect = EmptyCalendarEffect.new({\n                        event: this,\n                        calendars,\n                        date,\n                        isForward\n                    });\n                    if ((yield effect) === EffectResolutionResult.Cancel) {\n                        yield Reject(effect);\n                    }\n                    else {\n                        return null;\n                    }\n                }\n                return new Date(workingDate);\n            }\n            else {\n                return yield* superProto.skipNonWorkingTime.call(this, date, isForward);\n            }\n        }\n        *calculateProjectedDuration(startDate, endDate, durationUnit, iteratorOptions) {\n            if (!startDate || !endDate) {\n                return null;\n            }\n            if (yield* this.useEventAvailabilityIterator()) {\n                const options = Object.assign(yield* this.getBaseOptionsForDurationCalculations(), { startDate, endDate, isForward: true }, iteratorOptions);\n                const adjustDurationToDST = this.getProject().adjustDurationToDST;\n                let result = 0;\n                yield* this.forEachAvailabilityInterval(options, (startDate, endDate) => {\n                    result += endDate.getTime() - startDate.getTime();\n                    if (adjustDurationToDST) {\n                        const dstDiff = startDate.getTimezoneOffset() - endDate.getTimezoneOffset();\n                        result += dstDiff * 60 * 1000;\n                    }\n                });\n                if (!durationUnit)\n                    durationUnit = yield this.$.durationUnit;\n                return yield* this.getProject().$convertDuration(result, TimeUnit.Millisecond, durationUnit);\n            }\n            else {\n                return yield* superProto.calculateProjectedDuration.call(this, startDate, endDate, durationUnit);\n            }\n        }\n        *calculateProjectedXDateWithDuration(baseDate, isForward = true, duration, durationUnit, iteratorOptions) {\n            if (duration == null || isNaN(duration) || baseDate == null)\n                return null;\n            if (duration == 0)\n                return baseDate;\n            durationUnit = durationUnit || (yield this.$.durationUnit);\n            const durationMS = yield* this.getProject().$convertDuration(duration, durationUnit, TimeUnit.Millisecond);\n            let resultN = baseDate.getTime();\n            let leftDuration = durationMS;\n            const calendar = yield this.$.effectiveCalendar;\n            if (yield* this.useEventAvailabilityIterator()) {\n                const options = Object.assign(yield* this.getBaseOptionsForDurationCalculations(), isForward ? { startDate: baseDate, isForward } : { endDate: baseDate, isForward }, iteratorOptions);\n                const adjustDurationToDST = this.getProject().adjustDurationToDST;\n                const iterationRes = yield* this.forEachAvailabilityInterval(options, (intervalStart, intervalEnd, calendarCacheIntervalMultiple) => {\n                    const intervalStartN = intervalStart.getTime(), intervalEndN = intervalEnd.getTime(), intervalDuration = intervalEndN - intervalStartN;\n                    if (intervalDuration >= leftDuration) {\n                        if (adjustDurationToDST) {\n                            const dstDiff = isForward\n                                ? intervalStart.getTimezoneOffset() - (new Date(intervalStartN + leftDuration)).getTimezoneOffset()\n                                : (new Date(intervalEndN - leftDuration)).getTimezoneOffset() - intervalEnd.getTimezoneOffset();\n                            leftDuration -= dstDiff * 60 * 1000;\n                        }\n                        resultN = isForward ? intervalStartN + leftDuration : intervalEndN - leftDuration;\n                        return false;\n                    }\n                    else {\n                        leftDuration -= intervalDuration;\n                        if (adjustDurationToDST) {\n                            const dstDiff = intervalStart.getTimezoneOffset() - intervalEnd.getTimezoneOffset();\n                            leftDuration -= dstDiff * 60 * 1000;\n                        }\n                    }\n                });\n                // this will cause the method to return `null` if there's some problem with iterator\n                // easier to debug than a wrong number\n                return iterationRes === CalendarIteratorResult.StoppedByIterator ? new Date(resultN) : null;\n            }\n            else {\n                return calendar.accumulateWorkingTime(baseDate, durationMS, isForward).finalDate;\n            }\n        }\n    }\n    __decorate([\n        field()\n    ], SchedulerProHasAssignmentsMixin.prototype, \"effectiveCalendarsCombination\", void 0);\n    __decorate([\n        field()\n    ], SchedulerProHasAssignmentsMixin.prototype, \"assignmentsByCalendar\", void 0);\n    __decorate([\n        model_field({ type: 'boolean' })\n    ], SchedulerProHasAssignmentsMixin.prototype, \"ignoreResourceCalendar\", void 0);\n    __decorate([\n        calculate('effectiveCalendarsCombination')\n    ], SchedulerProHasAssignmentsMixin.prototype, \"calculateEffectiveCalendarsCombination\", null);\n    __decorate([\n        calculate('assignmentsByCalendar')\n    ], SchedulerProHasAssignmentsMixin.prototype, \"calculateAssignmentsByCalendar\", null);\n    return SchedulerProHasAssignmentsMixin;\n}) {\n}\n", "var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { HasProposedValue, PreviousValueOf, ProposedArgumentsOf, ProposedOrPrevious, ProposedOrPreviousValueOf } from \"../../../../ChronoGraph/chrono/Effect.js\";\nimport { CalculatedValueGen } from \"../../../../ChronoGraph/chrono/Identifier.js\";\nimport { Mixin } from \"../../../../ChronoGraph/class/BetterMixin.js\";\nimport { CalculateProposed, CycleDescription, CycleResolution, Formula } from \"../../../../ChronoGraph/cycle_resolver/CycleResolver.js\";\nimport { calculate, field, write } from \"../../../../ChronoGraph/replica/Entity.js\";\nimport { FieldIdentifier } from \"../../../../ChronoGraph/replica/Identifier.js\";\nimport { model_field } from \"../../../chrono/ModelFieldAtom.js\";\nimport { TimeUnit } from \"../../../scheduling/Types.js\";\nimport { DurationVar, EndDateVar, StartDateVar } from \"../scheduler_basic/BaseEventDispatcher.js\";\nimport { BaseEventMixin } from \"../scheduler_basic/BaseEventMixin.js\";\nexport const MasterStartDateVar = Symbol('MasterStartDateVar');\nexport const MasterEndDateVar = Symbol('MasterEndDateVar');\nexport const MasterDurationVar = Symbol('MasterDurationVar');\nexport const MasterTotalDurationVar = Symbol('MasterTotalDurationVar');\nexport const StartOffsetVar = Symbol('StartOffsetVar');\nexport const EndOffsetVar = Symbol('EndOffsetVar');\nexport const durationByOffsetsFormula = Formula.new({\n    output: DurationVar,\n    inputs: new Set([StartOffsetVar, EndOffsetVar])\n});\nexport const startDateByMasterStartAndStartOffsetFormula = Formula.new({\n    output: StartDateVar,\n    inputs: new Set([StartOffsetVar, MasterStartDateVar])\n});\nexport const endDateByMasterStartAndEndOffsetFormula = Formula.new({\n    output: EndDateVar,\n    inputs: new Set([EndOffsetVar, MasterStartDateVar])\n});\nexport const startOffsetByMasterStartAndStartDateFormula = Formula.new({\n    output: StartOffsetVar,\n    inputs: new Set([StartDateVar, MasterStartDateVar])\n});\nexport const endOffsetByMasterStartAndEndDateFormula = Formula.new({\n    output: EndOffsetVar,\n    inputs: new Set([EndDateVar, MasterStartDateVar])\n});\nexport const startOffsetByEndOffsetAndDurationFormula = Formula.new({\n    output: StartOffsetVar,\n    inputs: new Set([EndOffsetVar, DurationVar])\n});\nexport const endOffsetByStartOffsetAndDurationFormula = Formula.new({\n    output: EndOffsetVar,\n    inputs: new Set([StartOffsetVar, DurationVar])\n});\nexport const endOffsetByMasterTotalDurationAndStartOffsetFormula = Formula.new({\n    output: EndOffsetVar,\n    inputs: new Set([StartOffsetVar, MasterTotalDurationVar])\n});\nexport const endOffsetByMasterDurationAndStartOffsetFormula = Formula.new({\n    output: EndOffsetVar,\n    inputs: new Set([StartOffsetVar, MasterDurationVar])\n});\n// export const endOffsetByMasterEndDateAndStartOffsetFormula = Formula.new({\n//     output      : EndOffsetVar,\n//     inputs      : new Set([ StartOffsetVar, MasterEndDateVar ])\n// })\nexport const durationByMasterEndDateFormula = Formula.new({\n    output: DurationVar,\n    inputs: new Set([StartOffsetVar, MasterEndDateVar])\n});\nexport const segmentCycleDescription = CycleDescription.new({\n    variables: new Set([\n        StartDateVar,\n        EndDateVar,\n        DurationVar,\n        MasterStartDateVar,\n        MasterEndDateVar,\n        MasterDurationVar,\n        MasterTotalDurationVar,\n        StartOffsetVar,\n        EndOffsetVar\n    ]),\n    formulas: new Set([\n        // the order of formulas is important here - the earlier ones are preferred\n        durationByOffsetsFormula,\n        startDateByMasterStartAndStartOffsetFormula,\n        endDateByMasterStartAndEndOffsetFormula,\n        startOffsetByEndOffsetAndDurationFormula,\n        startOffsetByMasterStartAndStartDateFormula,\n        endOffsetByStartOffsetAndDurationFormula,\n        endOffsetByMasterTotalDurationAndStartOffsetFormula,\n        endOffsetByMasterDurationAndStartOffsetFormula,\n        // endOffsetByMasterEndDateAndStartOffsetFormula,\n        endOffsetByMasterStartAndEndDateFormula,\n        durationByMasterEndDateFormula\n    ])\n});\nexport const segmentCycleResolution = CycleResolution.new({\n    description: segmentCycleDescription,\n    defaultResolutionFormulas: new Set([\n        endDateByMasterStartAndEndOffsetFormula,\n        endOffsetByMasterStartAndEndDateFormula,\n        endOffsetByStartOffsetAndDurationFormula\n    ])\n});\nexport class SegmentSEDDispatcherIdentifier extends FieldIdentifier.mix(CalculatedValueGen) {\n    equality(v1, v2) {\n        const resolution1 = v1.resolution;\n        const resolution2 = v2.resolution;\n        return resolution1.get(StartDateVar) === resolution2.get(StartDateVar)\n            && resolution1.get(EndDateVar) === resolution2.get(EndDateVar)\n            && resolution1.get(DurationVar) === resolution2.get(DurationVar)\n            && resolution1.get(MasterStartDateVar) === resolution2.get(MasterStartDateVar)\n            && resolution1.get(MasterEndDateVar) === resolution2.get(MasterEndDateVar)\n            && resolution1.get(MasterDurationVar) === resolution2.get(MasterDurationVar)\n            && resolution1.get(MasterTotalDurationVar) === resolution2.get(MasterTotalDurationVar)\n            && resolution1.get(StartOffsetVar) === resolution2.get(StartOffsetVar)\n            && resolution1.get(EndOffsetVar) === resolution2.get(EndOffsetVar);\n    }\n}\n/**\n * This is the segment class [[SchedulerProProjectMixin]] works with.\n */\nexport class SchedulerProEventSegment extends Mixin([BaseEventMixin], (base) => {\n    class SchedulerProEventSegment extends base {\n        get isEventSegment() {\n            return true;\n        }\n        get stm() {\n            // use main event StateTrackingManager\n            return this.event?.stm;\n        }\n        set stm(value) {\n        }\n        writeStartDate(me, transaction, quark, date, keepDuration = true) {\n            const event = this.event;\n            const project = this.getProject();\n            // if it's the very first segment and it's not data loading or part of STM undo/redo\n            if (event && !this.previousSegment && transaction.baseRevision.hasIdentifier(me) && !(project && project.getStm().isRestoring)) {\n                event.$.startDate.constructor.prototype.write.call(this, event.$.startDate, transaction, null, date, keepDuration);\n            }\n            else {\n                me.constructor.prototype.write.call(this, me, transaction, quark, date, keepDuration);\n            }\n            // if we have next segment(s) and we have to respect and not overlap them\n            if (keepDuration && this.nextSegment) {\n                const shift = this.endOffset - this.nextSegment.startOffset;\n                if (shift > 0) {\n                    let segment = this;\n                    // push next segments forward by the lag duration\n                    while ((segment = segment.nextSegment)) {\n                        segment.startOffset += shift;\n                        segment.endOffset += shift;\n                    }\n                }\n            }\n        }\n        shouldRecordFieldChange(fieldName, oldValue, newValue) {\n            return (fieldName === 'startOffset' || fieldName === 'endOffset') || super.shouldRecordFieldChange(fieldName, oldValue, newValue);\n        }\n        *calculateStartOffset() {\n            const dispatcher = yield this.$.dispatcher;\n            const resolution = dispatcher.resolution.get(StartOffsetVar);\n            // return last value if the segment is detached\n            if (!this.event) {\n                return yield ProposedOrPrevious;\n            }\n            let result;\n            if (resolution === CalculateProposed) {\n                result = yield ProposedOrPrevious;\n            }\n            else if (resolution === startOffsetByEndOffsetAndDurationFormula.formulaId) {\n                result = yield* this.calculateStartOffsetByEndOffsetAndDuration();\n            }\n            else if (resolution === startOffsetByMasterStartAndStartDateFormula.formulaId) {\n                const masterStartDate = yield ProposedOrPreviousValueOf(this.event.$.startDate);\n                const startDate = yield ProposedOrPreviousValueOf(this.$.startDate);\n                result = yield* this.event.calculateProjectedDuration(masterStartDate, startDate, TimeUnit.Millisecond, { ignoreSegments: true });\n            }\n            return result;\n        }\n        *calculateEndOffset() {\n            const dispatcher = yield this.$.dispatcher;\n            const resolution = dispatcher.resolution.get(EndOffsetVar);\n            // return last value if the segment is detached\n            if (!this.event) {\n                return yield ProposedOrPrevious;\n            }\n            let result;\n            if (resolution === CalculateProposed) {\n                result = yield ProposedOrPrevious;\n            }\n            else if (resolution === endOffsetByStartOffsetAndDurationFormula.formulaId) {\n                result = yield* this.calculateEndOffsetByStartOffsetAndDuration();\n            }\n            else if (resolution === endOffsetByMasterStartAndEndDateFormula.formulaId) {\n                const masterStartDate = yield ProposedOrPreviousValueOf(this.event.$.startDate);\n                const endDate = yield ProposedOrPreviousValueOf(this.$.endDate);\n                result = yield* this.event.calculateProjectedDuration(masterStartDate, endDate, TimeUnit.Millisecond, { ignoreSegments: true });\n            }\n            else if (resolution === endOffsetByMasterDurationAndStartOffsetFormula.formulaId) {\n                result = yield* this.calculateEndOffsetByMasterDurationAndStartOffset();\n            }\n            else if (resolution === endOffsetByMasterTotalDurationAndStartOffsetFormula.formulaId) {\n                result = yield* this.calculateEndOffsetByMasterTotalDurationAndStartOffset();\n            }\n            return result;\n        }\n        *calculateStartDate() {\n            const dispatcher = yield this.$.dispatcher;\n            const formula = dispatcher.resolution.get(StartDateVar);\n            // return last value if the segment is detached\n            if (!this.event) {\n                return yield ProposedOrPrevious;\n            }\n            let result;\n            if (formula === startDateByMasterStartAndStartOffsetFormula.formulaId) {\n                result = yield* this.calculateStartDateByMasterStartAndStartOffset();\n            }\n            else {\n                result = yield* super.calculateStartDate();\n            }\n            return result;\n        }\n        *calculateEndDate() {\n            const dispatcher = yield this.$.dispatcher;\n            const formula = dispatcher.resolution.get(EndDateVar);\n            // return last value if the segment is detached\n            if (!this.event) {\n                return yield ProposedOrPrevious;\n            }\n            let result;\n            if (formula === endDateByMasterStartAndEndOffsetFormula.formulaId) {\n                result = yield* this.calculateEndDateByMasterStartAndEndOffset();\n            }\n            else {\n                result = yield* super.calculateEndDate();\n            }\n            return result;\n        }\n        *calculateDuration() {\n            const dispatcher = yield this.$.dispatcher;\n            const formula = dispatcher.resolution.get(DurationVar);\n            // return last value if the segment is detached\n            if (!this.event) {\n                return yield ProposedOrPrevious;\n            }\n            let result;\n            if (formula === durationByOffsetsFormula.formulaId) {\n                result = yield* this.calculateDurationByOffsets();\n            }\n            else if (formula === durationByMasterEndDateFormula.formulaId) {\n                result = yield* this.calculateDurationByOffsets();\n            }\n            else {\n                result = yield* super.calculateDuration();\n            }\n            return result;\n        }\n        buildProposedDispatcher(me, quark, transaction) {\n            const dispatcher = super.buildProposedDispatcher(me, quark, transaction);\n            dispatcher.addPreviousValueFlag(MasterStartDateVar);\n            dispatcher.addPreviousValueFlag(StartOffsetVar);\n            dispatcher.addPreviousValueFlag(EndOffsetVar);\n            return dispatcher;\n        }\n        *prepareDispatcher(YIELD) {\n            const dispatcher = yield* super.prepareDispatcher(YIELD);\n            // return last value if the segment is detached\n            if (!this.event) {\n                return dispatcher; //yield ProposedOrPrevious\n            }\n            // ProposedValueOf(this.event.$.startDate)\n            if (YIELD(PreviousValueOf(this.event.$.startDate)) != null)\n                dispatcher.addPreviousValueFlag(MasterStartDateVar);\n            if (YIELD(HasProposedValue(this.event.$.startDate)))\n                dispatcher.addProposedValueFlag(MasterStartDateVar);\n            if (!YIELD(HasProposedValue(this.event.$.segments))) {\n                dispatcher.collectInfo(YIELD, this.event.$.duration, MasterDurationVar);\n                if (YIELD(HasProposedValue(this.event.$.endDate))) {\n                    const masterEndDateArgs = YIELD(ProposedArgumentsOf(this.event.$.endDate));\n                    if (!masterEndDateArgs?.[0]) {\n                        dispatcher.addProposedValueFlag(MasterEndDateVar);\n                    }\n                }\n                const masterDispatcher = YIELD(this.event.$.dispatcher);\n                if (masterDispatcher.resolution.get(StartDateVar) === CalculateProposed &&\n                    masterDispatcher.resolution.get(EndDateVar) === CalculateProposed) {\n                    dispatcher.addProposedValueFlag(MasterTotalDurationVar);\n                }\n            }\n            dispatcher.collectInfo(YIELD, this.$.startOffset, StartOffsetVar);\n            dispatcher.collectInfo(YIELD, this.$.endOffset, EndOffsetVar);\n            return dispatcher;\n        }\n        cycleResolutionContext(Y) {\n            return segmentCycleResolution;\n        }\n        // endOffsetByMasterDurationAndStartOffsetFormula\n        *calculateEndOffsetByMasterDurationAndStartOffset() {\n            const masterDuration = yield ProposedOrPreviousValueOf(this.event.$.duration); //yield this.event.$.duration\n            const masterDurationUnit = yield this.event.$.durationUnit;\n            const startOffset = yield this.$.startOffset;\n            const nextSegment = this.nextSegment;\n            let result;\n            let masterDurationMs = yield* this.getProject().$convertDuration(masterDuration, masterDurationUnit, TimeUnit.Millisecond);\n            const segments = [];\n            let segment = this;\n            while ((segment = segment.previousSegment)) {\n                segments.push(segment);\n            }\n            for (let i = segments.length - 1; i >= 0; i--) {\n                const segment = segments[i];\n                const segmentStartOffset = yield ProposedOrPreviousValueOf(segment.$.startOffset);\n                const segmentEndOffset = yield ProposedOrPreviousValueOf(segment.$.endOffset);\n                const segmentDurationMs = segmentEndOffset - segmentStartOffset;\n                masterDurationMs -= segmentDurationMs;\n            }\n            if (masterDurationMs > 0) {\n                if (!nextSegment) {\n                    result = startOffset + masterDurationMs;\n                }\n                else {\n                    result = startOffset + Math.min(masterDurationMs, (yield ProposedOrPreviousValueOf(this.$.endOffset)) - startOffset);\n                }\n            }\n            // return start offset in case we have no duration left for this segment\n            // then it will have start offset === end offset\n            else {\n                result = startOffset;\n            }\n            return result;\n        }\n        // endOffsetByMasterDurationAndStartOffsetFormula\n        *calculateEndOffsetByMasterTotalDurationAndStartOffset() {\n            const masterStartDate = yield ProposedOrPreviousValueOf(this.event.$.startDate);\n            const masterEndDate = yield ProposedOrPreviousValueOf(this.event.$.endDate);\n            const masterTotalDurationMs = yield* this.event.calculateProjectedDuration(masterStartDate, masterEndDate, TimeUnit.Millisecond, { ignoreSegments: true });\n            const startOffset = yield ProposedOrPreviousValueOf(this.$.startOffset);\n            let endOffset = yield ProposedOrPreviousValueOf(this.$.endOffset);\n            let nextSegment = this.nextSegment;\n            if (startOffset <= masterTotalDurationMs) {\n                // if the segment is inside master event time span\n                if (endOffset <= masterTotalDurationMs) {\n                    // if that's the last one (either by index or by the fact the next segment is ouside of the event range)\n                    // make its end === master end\n                    if (!nextSegment || (yield ProposedOrPreviousValueOf(nextSegment.$.startOffset)) >= masterTotalDurationMs) {\n                        return masterTotalDurationMs;\n                    }\n                    // otherwise keep existing value\n                    return endOffset;\n                }\n                // if the segment finishes later than the master event - make its end === master end\n                else {\n                    return masterTotalDurationMs;\n                }\n            }\n            // if the segment is outside of the master event - make its duration zero\n            return yield this.$.startOffset;\n        }\n        // startOffsetByEndOffsetAndDurationFormula\n        *calculateStartOffsetByEndOffsetAndDuration() {\n            const duration = yield this.$.duration;\n            const durationUnit = yield this.$.durationUnit;\n            const endOffset = yield this.$.endOffset;\n            return endOffset - (yield* this.event.getProject().$convertDuration(duration, durationUnit, TimeUnit.Millisecond));\n        }\n        // endOffsetByStartOffsetAndDurationFormula\n        *calculateEndOffsetByStartOffsetAndDuration() {\n            const duration = yield this.$.duration;\n            const durationUnit = yield this.$.durationUnit;\n            const startOffset = yield this.$.startOffset;\n            return startOffset + (yield* this.event.getProject().$convertDuration(duration, durationUnit, TimeUnit.Millisecond));\n        }\n        // endDateByMasterStartAndEndOffsetFormula\n        *calculateEndDateByMasterStartAndEndOffset() {\n            const masterStartDate = yield this.event.$.startDate;\n            const endOffset = yield this.$.endOffset;\n            const rawDate = yield* this.event.calculateProjectedXDateWithDuration(masterStartDate, true, endOffset, TimeUnit.Millisecond, { ignoreSegments: true });\n            const manuallyScheduled = yield this.$.manuallyScheduled;\n            return manuallyScheduled && !this.getProject().skipNonWorkingTimeWhenSchedulingManually\n                ? rawDate\n                : yield* this.event.skipNonWorkingTime(rawDate, false);\n        }\n        // startDateByMasterStartAndStartOffsetFormula\n        *calculateStartDateByMasterStartAndStartOffset() {\n            const masterStartDate = yield this.event.$.startDate;\n            const startOffset = yield this.$.startOffset;\n            const rawDate = yield* this.event.calculateProjectedXDateWithDuration(masterStartDate, true, startOffset, TimeUnit.Millisecond, { ignoreSegments: true });\n            const manuallyScheduled = yield this.$.manuallyScheduled;\n            return manuallyScheduled && !this.getProject().skipNonWorkingTimeWhenSchedulingManually\n                ? rawDate\n                : yield* this.event.skipNonWorkingTime(rawDate);\n        }\n        // durationByOffsetsFormula\n        *calculateDurationByOffsets() {\n            const startOffset = yield this.$.startOffset;\n            const endOffset = yield this.$.endOffset;\n            const durationUnit = yield this.$.durationUnit;\n            return yield* this.getProject().$convertDuration(endOffset - startOffset, TimeUnit.Millisecond, durationUnit);\n        }\n        *calculatePercentDone() {\n            let result = 0;\n            // return last value if the segment is detached\n            if (!this.event) {\n                return yield ProposedOrPrevious;\n            }\n            const segments = yield this.event.$.segments;\n            if (segments) {\n                const masterPercentDone = yield this.event.$.percentDone;\n                const masterDuration = yield this.event.$.duration;\n                const masterDurationUnit = yield this.event.$.durationUnit;\n                let masterDurationMs = yield* this.getProject().$convertDuration(masterDuration, masterDurationUnit, TimeUnit.Millisecond);\n                let completeMasterDurationMs = masterPercentDone * 0.01 * masterDurationMs;\n                for (const segment of segments) {\n                    const segmentStartOffset = segment.startOffset;\n                    const segmentEndOffset = segment.endOffset;\n                    const segmentDurationMs = segmentEndOffset - segmentStartOffset;\n                    if (segment === this) {\n                        if (completeMasterDurationMs >= segmentDurationMs)\n                            return 100;\n                        else if (completeMasterDurationMs > 0)\n                            return 100 * completeMasterDurationMs / segmentDurationMs;\n                        else\n                            return 0;\n                    }\n                    completeMasterDurationMs -= segmentDurationMs;\n                }\n            }\n            return result;\n        }\n        *calculateMinPercent() {\n            const previousSegment = this.previousSegment;\n            if (!this.event) {\n                return yield ProposedOrPrevious;\n            }\n            if (previousSegment) {\n                return yield previousSegment.$.endPercentDone;\n            }\n            return 0;\n        }\n        *calculateMaxPercent() {\n            if (!this.event) {\n                return yield ProposedOrPrevious;\n            }\n            const masterDuration = yield this.event.$.duration;\n            const masterDurationUnit = yield this.event.$.durationUnit;\n            let masterDurationMs = yield* this.getProject().$convertDuration(masterDuration, masterDurationUnit, TimeUnit.Millisecond);\n            const startOffset = yield this.$.startOffset;\n            const endOffset = yield this.$.endOffset;\n            const minPercent = yield this.$.startPercentDone;\n            return minPercent + 100 * (endOffset - startOffset) / masterDurationMs;\n        }\n        // @override\n        *calculateProjectedXDateWithDuration(baseDate, isForward, duration, durationUnit) {\n            if (!durationUnit)\n                durationUnit = yield this.$.durationUnit;\n            return yield* this.event.calculateProjectedXDateWithDuration(baseDate, isForward, duration, durationUnit, { ignoreSegments: true });\n        }\n        // @override\n        *calculateProjectedDuration(startDate, endDate, durationUnit) {\n            if (!durationUnit)\n                durationUnit = yield this.$.durationUnit;\n            return yield* this.event.calculateProjectedDuration(startDate, endDate, durationUnit, { ignoreSegments: true });\n        }\n        *calculateManuallyScheduled() {\n            if (this.event) {\n                return yield this.event.$.manuallyScheduled;\n            }\n            else {\n                return yield ProposedOrPrevious;\n            }\n        }\n    }\n    __decorate([\n        field({ identifierCls: SegmentSEDDispatcherIdentifier })\n    ], SchedulerProEventSegment.prototype, \"dispatcher\", void 0);\n    __decorate([\n        model_field({ persist: false })\n    ], SchedulerProEventSegment.prototype, \"startOffset\", void 0);\n    __decorate([\n        model_field({ persist: false })\n    ], SchedulerProEventSegment.prototype, \"endOffset\", void 0);\n    __decorate([\n        field()\n    ], SchedulerProEventSegment.prototype, \"percentDone\", void 0);\n    __decorate([\n        field()\n    ], SchedulerProEventSegment.prototype, \"startPercentDone\", void 0);\n    __decorate([\n        field()\n    ], SchedulerProEventSegment.prototype, \"endPercentDone\", void 0);\n    __decorate([\n        write('startDate')\n    ], SchedulerProEventSegment.prototype, \"writeStartDate\", null);\n    __decorate([\n        calculate('startOffset')\n    ], SchedulerProEventSegment.prototype, \"calculateStartOffset\", null);\n    __decorate([\n        calculate('endOffset')\n    ], SchedulerProEventSegment.prototype, \"calculateEndOffset\", null);\n    __decorate([\n        calculate('percentDone')\n    ], SchedulerProEventSegment.prototype, \"calculatePercentDone\", null);\n    __decorate([\n        calculate('startPercentDone')\n    ], SchedulerProEventSegment.prototype, \"calculateMinPercent\", null);\n    __decorate([\n        calculate('endPercentDone')\n    ], SchedulerProEventSegment.prototype, \"calculateMaxPercent\", null);\n    __decorate([\n        calculate('manuallyScheduled')\n    ], SchedulerProEventSegment.prototype, \"calculateManuallyScheduled\", null);\n    return SchedulerProEventSegment;\n}) {\n}\n", "var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { HasProposedValue, PreviousValueOf, ProposedArgumentsOf, ProposedOrPrevious, ProposedOrPreviousValueOf, ProposedValueOf, WriteSeveral } from \"../../../../ChronoGraph/chrono/Effect.js\";\nimport { CalculatedValueGen } from \"../../../../ChronoGraph/chrono/Identifier.js\";\nimport { TombStone } from \"../../../../ChronoGraph/chrono/Quark.js\";\nimport { Mixin } from '../../../../ChronoGraph/class/Mixin.js';\nimport { CycleDescription, CycleResolution, Formula } from \"../../../../ChronoGraph/cycle_resolver/CycleResolver.js\";\nimport { calculate, field, write } from '../../../../ChronoGraph/replica/Entity.js';\nimport { FieldIdentifier } from \"../../../../ChronoGraph/replica/Identifier.js\";\nimport DateHelper from \"../../../../Core/helper/DateHelper.js\";\nimport { model_field } from \"../../../chrono/ModelFieldAtom.js\";\nimport { Direction, TimeUnit } from '../../../scheduling/Types.js';\nimport { MAX_DATE } from \"../../../util/Constants.js\";\nimport { durationFormula, DurationVar, endDateFormula, EndDateVar, startDateFormula, StartDateVar } from \"../scheduler_basic/BaseEventDispatcher.js\";\nimport { HasPercentDoneMixin } from \"./HasPercentDoneMixin.js\";\nimport { SchedulerProEventSegment } from './SchedulerProEventSegment.js';\nimport { SchedulerProHasAssignmentsMixin } from \"./SchedulerProHasAssignmentsMixin.js\";\nexport const SegmentsVar = Symbol('SegmentsVar');\nexport const segmentsConverter = (value, data, record) => record.processSegmentsValue(value);\nexport const startDateByEndDateAndSegmentsFormula = Formula.new({\n    output: StartDateVar,\n    inputs: new Set([EndDateVar, SegmentsVar])\n});\nexport const endDateByStartDateAndSegmentsFormula = Formula.new({\n    output: EndDateVar,\n    inputs: new Set([StartDateVar, SegmentsVar])\n});\nexport const durationByStartDateAndEndDateAndSegmentsFormula = Formula.new({\n    output: DurationVar,\n    inputs: new Set([StartDateVar, EndDateVar, SegmentsVar])\n});\nexport const SEDSGGraphDescription = CycleDescription.new({\n    variables: new Set([StartDateVar, EndDateVar, DurationVar, SegmentsVar]),\n    formulas: new Set([\n        endDateByStartDateAndSegmentsFormula,\n        startDateByEndDateAndSegmentsFormula,\n        // durationByStartDateAndEndDateAndSegmentsFormula,\n        startDateFormula,\n        endDateFormula,\n        durationFormula\n    ])\n});\nexport const SEDSGForwardCycleResolution = CycleResolution.new({\n    description: SEDSGGraphDescription,\n    defaultResolutionFormulas: new Set([endDateFormula, endDateByStartDateAndSegmentsFormula])\n});\nexport const SEDSGBackwardCycleResolution = CycleResolution.new({\n    description: SEDSGGraphDescription,\n    defaultResolutionFormulas: new Set([startDateFormula, startDateByEndDateAndSegmentsFormula])\n});\nexport class SEDSGDispatcherIdentifier extends FieldIdentifier.mix(CalculatedValueGen) {\n    equality(v1, v2) {\n        const resolution1 = v1.resolution;\n        const resolution2 = v2.resolution;\n        return resolution1.get(StartDateVar) === resolution2.get(StartDateVar)\n            && resolution1.get(EndDateVar) === resolution2.get(EndDateVar)\n            && resolution1.get(DurationVar) === resolution2.get(DurationVar)\n            && resolution1.get(SegmentsVar) === resolution2.get(SegmentsVar);\n    }\n}\nexport function compareSegmentsArray(a, b) {\n    if (!a && !b)\n        return true;\n    if (this._skipSegmentsIsEqual)\n        return false;\n    if (!a && b || a && !b)\n        return false;\n    if (a.length !== b.length)\n        return false;\n    return a.every((segment, index) => compareSegments(segment, b[index]));\n}\nexport const compareSegments = (a, b) => {\n    if (a === b)\n        return true;\n    const segmentModel = a.isModel ? a : b;\n    const fieldMap = segmentModel.fieldMap;\n    const aStart = a.startDate instanceof Date ? a.startDate.getTime() : fieldMap.startDate.convert(a.startDate).getTime();\n    const bStart = b.startDate instanceof Date ? b.startDate.getTime() : fieldMap.startDate.convert(b.startDate).getTime();\n    const aEnd = a.endDate instanceof Date ? a.endDate.getTime() : fieldMap.endDate.convert(a.endDate).getTime();\n    const bEnd = b.endDate instanceof Date ? b.endDate.getTime() : fieldMap.endDate.convert(b.endDate).getTime();\n    return aStart === bStart && aEnd === bEnd;\n};\nexport class SplitEventMixin extends Mixin([SchedulerProHasAssignmentsMixin, HasPercentDoneMixin], (base) => {\n    class SplitEventMixin extends base {\n        constructor() {\n            super(...arguments);\n            this._segmentGeneration = {};\n        }\n        static get $name() {\n            return 'SplitEventMixin';\n        }\n        construct() {\n            this.segmentModelClass = this.getDefaultSegmentModelClass();\n            super.construct(...arguments);\n        }\n        get rawModifications() {\n            let data = super.rawModifications;\n            // include segment changes\n            if (this.segments && (!data || !('segments' in data))) {\n                for (const segment of this.segments) {\n                    if (segment.rawModifications) {\n                        data = data || {};\n                        data.segments = this.getFieldPersistentValue('segments');\n                        break;\n                    }\n                }\n            }\n            return data;\n        }\n        clearChanges(includeDescendants, removeFromStoreChanges, changes) {\n            for (const segment of this.segments || []) {\n                segment.clearChanges(includeDescendants, removeFromStoreChanges, null);\n            }\n            super.clearChanges(includeDescendants, removeFromStoreChanges, changes);\n        }\n        getDefaultSegmentModelClass() {\n            return SchedulerProEventSegment;\n        }\n        *prepareDispatcher(YIELD) {\n            const dispatcher = yield* super.prepareDispatcher(YIELD);\n            if (yield* this.hasSegmentChangesProposed()) {\n                dispatcher.addProposedValueFlag(SegmentsVar);\n            }\n            return dispatcher;\n        }\n        cycleResolutionContext(Y) {\n            const direction = Y(this.$.direction);\n            return direction === Direction.Forward || direction === Direction.None ? SEDSGForwardCycleResolution : SEDSGBackwardCycleResolution;\n        }\n        *hasSegmentChangesProposed() {\n            const proposedSegments = yield ProposedValueOf(this.$.segments);\n            let result = false;\n            if (yield HasProposedValue(this.$.segments)) {\n                result = Boolean(proposedSegments);\n            }\n            const segments = yield ProposedOrPreviousValueOf(this.$.segments);\n            if (!segments)\n                return false;\n            for (const segment of segments) {\n                const startDateProposed = yield HasProposedValue(segment.$.startDate);\n                const endDateProposed = yield HasProposedValue(segment.$.endDate);\n                const durationProposed = yield HasProposedValue(segment.$.duration);\n                if (startDateProposed || endDateProposed || durationProposed)\n                    result = true;\n            }\n            return result;\n        }\n        writeSegments(me, transaction, quark, value) {\n            // if (!transaction.baseRevision.hasIdentifier(me) && value == null) return\n            const oldSegmentsQuarkValue = transaction.getLatestEntryFor(me)?.getValue();\n            const oldSegments = oldSegmentsQuarkValue !== TombStone ? oldSegmentsQuarkValue ?? [] : [];\n            const oldSegmentsSet = new Set(oldSegments);\n            const newSegments = value ?? [];\n            const newSegmentsSet = new Set(newSegments);\n            this.project.ion({\n                // remove them from the graph, only the ones not listed in the new segments array,\n                // and only after commit finalization, otherwise test fails\n                // we don't know why, possibly because in the `calculateSegments` we use `previousValue` of `segments` atom\n                commitFinalized: () => graph.removeEntities(oldSegments.filter(segment => !newSegmentsSet.has(segment))),\n                once: true\n            });\n            me.constructor.prototype.write.call(this, me, transaction, quark, value);\n            this.$.isSegmented.write.call(this, this.$.isSegmented, transaction, null, Boolean(value?.length));\n            const project = this.project;\n            const graph = project.replica;\n            for (const newSegment of newSegments) {\n                if (!oldSegmentsSet.has(newSegment) && newSegment.graph !== graph) {\n                    newSegment.setProject(project);\n                    graph.addEntity(newSegment);\n                }\n            }\n        }\n        *doWriteSegments(segments, writes) {\n            writes = writes || [];\n            // if one or zero segments left after above merging\n            if (segments.length <= 1) {\n                // calculate the segment duration\n                const duration = segments.length\n                    ? yield* this.getProject().$convertDuration(segments[0].endOffset - segments[0].startOffset, TimeUnit.Millisecond, yield this.$.durationUnit)\n                    : 0;\n                // Apply the event \"duration\" taken from the segment and \"segments\" field as NULL\n                // (w/o pushing the duration value the code will tend to recalculate end date instead\n                // using exiting duration value on the event)\n                writes.push({\n                    identifier: this.$.duration,\n                    proposedArgs: [duration, null]\n                });\n                segments = null;\n            }\n            writes.push({\n                identifier: this.$.segments,\n                proposedArgs: [segments]\n            });\n            yield WriteSeveral(writes);\n        }\n        *calculateSegments() {\n            const dispatcher = yield this.$.dispatcher;\n            const { graph, project } = this;\n            const previousValue = yield PreviousValueOf(this.$.segments);\n            let segments = yield ProposedOrPrevious;\n            const toRemove = [];\n            let hasChanges = false;\n            if (segments) {\n                const result = new Set();\n                let previousSegment = null;\n                let keepDuration = false;\n                const { baseRevision } = graph.$activeTransaction;\n                for (const segment of segments) {\n                    const startOffset = yield segment.$.startOffset;\n                    const endOffset = yield segment.$.endOffset;\n                    // detect segment moving ..but ignore data loading stage\n                    const startDateProposedArgs = baseRevision.hasIdentifier(segment.$.startDate)\n                        && (yield ProposedArgumentsOf(segment.$.startDate));\n                    const endDateProposedArgs = baseRevision.hasIdentifier(segment.$.endDate)\n                        && (yield ProposedArgumentsOf(segment.$.endDate));\n                    keepDuration = keepDuration || startDateProposedArgs?.[0] || endDateProposedArgs?.[0];\n                    // get rid of zero duration segment\n                    if (startOffset === endOffset) {\n                        toRemove.push(segment);\n                    }\n                    // if a segment overlaps the previous one\n                    else if (previousSegment && startOffset <= (previousSegment.endOffset)) {\n                        const prevEndOffset = previousSegment.endOffset;\n                        // remove the segment we'll make a new one representing the segments union\n                        toRemove.push(segment);\n                        // if previous one is in the graph (not a \"union\" we just made)\n                        if (previousSegment.graph) {\n                            // remove it\n                            toRemove.push(previousSegment);\n                            const previousSegmentStartOffset = previousSegment.startOffset;\n                            const previousSegmentEndOffset = keepDuration\n                                // if moving a segment then move its further neighbours\n                                ? endOffset + prevEndOffset - startOffset\n                                // otherwise just combine intersected segments by building a new [min start, max end] segment\n                                : Math.max(endOffset, prevEndOffset);\n                            // @ts-ignore\n                            const cls = previousSegment.cls;\n                            // make a new segment\n                            previousSegment = this.segmentModelClass.new({\n                                event: this,\n                                cls: cls,\n                                startOffset: previousSegmentStartOffset,\n                                endOffset: previousSegmentEndOffset\n                            });\n                        }\n                        else {\n                            previousSegment.endOffset = keepDuration\n                                // if moving a segment then move its further neighbours\n                                ? endOffset + previousSegment.endOffset - startOffset\n                                // otherwise just combine intersected segments by building a new [min start, max end] segment\n                                : Math.max(endOffset, previousSegment.endOffset);\n                        }\n                    }\n                    // a valid segment\n                    else {\n                        if (previousSegment) {\n                            result.add(previousSegment);\n                        }\n                        previousSegment = segment;\n                    }\n                }\n                if (previousSegment) {\n                    result.add(previousSegment);\n                }\n                if (result.size === 1) {\n                    toRemove.push(...result);\n                }\n                hasChanges = toRemove.length > 0;\n                if (hasChanges) {\n                    segments = Array.from(result);\n                }\n                // fill previousSegment/nextSegment properties\n                segments.reduce((previousSegment, segment, index) => {\n                    if (previousSegment) {\n                        previousSegment.nextSegment = segment;\n                    }\n                    segment.previousSegment = previousSegment;\n                    segment.segmentIndex = index;\n                    return segment;\n                }, null);\n                if (segments.length) {\n                    segments[segments.length - 1].nextSegment = null;\n                }\n            }\n            // If we used to have segments - need to remove them from the graph\n            else if (previousValue) {\n                toRemove.push(...previousValue);\n            }\n            // if we got segments to cleanup\n            if (toRemove.length) {\n                // detach segments that are meant to get removed from the graph\n                toRemove.forEach(segment => segment.event = null);\n                project.ion({\n                    commitFinalized: () => graph.removeEntities(toRemove),\n                    once: true\n                });\n            }\n            // If we have changed segments\n            if (hasChanges) {\n                yield* this.doWriteSegments(segments);\n            }\n            segments = segments?.length > 1 ? segments : null;\n            return segments;\n        }\n        *calculateAdjustedSegments() {\n            const dispatcher = yield this.$.dispatcher;\n            let segments = yield this.$.segments;\n            const startDate = yield this.$.startDate;\n            const endDate = yield this.$.endDate;\n            const duration = yield this.$.duration;\n            let value = yield ProposedOrPrevious;\n            if (segments) {\n                const project = this.project;\n                const graph = this.graph;\n                const toRemove = [];\n                const toWrite = [];\n                let spliceIndex = -1;\n                // Iterate segments starting from trailing ones\n                for (let i = segments.length - 1; i >= 0; i--) {\n                    const segment = segments[i];\n                    const segmentStartDate = yield segment.$.startDate;\n                    const segmentEndDate = yield segment.$.endDate;\n                    // If the segment starts after the event finishes - cut the segment\n                    if (segmentStartDate > endDate) {\n                        toRemove.push(segment);\n                        spliceIndex = i;\n                    }\n                    else {\n                        // If last segment end is not aligned with the event end - adjust it\n                        if (segmentEndDate.getTime() !== endDate.getTime()) {\n                            const durationMs = segment.endOffset + (endDate.getTime() - segmentEndDate.getTime()) - segment.startOffset;\n                            const duration = yield* project.$convertDuration(durationMs, TimeUnit.Millisecond, yield segment.$.durationUnit);\n                            // write new duration, endDate and endOffset to the segment\n                            toWrite.push({\n                                identifier: segment.$.duration,\n                                proposedArgs: [duration, null]\n                            }, {\n                                identifier: segment.$.endDate,\n                                proposedArgs: [endDate, false]\n                            }, {\n                                identifier: segment.$.endOffset,\n                                proposedArgs: [segment.endOffset + (endDate.getTime() - segmentEndDate.getTime())]\n                            });\n                        }\n                        // stop iteration\n                        break;\n                    }\n                }\n                let hasChanges = false;\n                // if we have trailing segment(s) to cut\n                if (spliceIndex > -1) {\n                    hasChanges = true;\n                    segments.splice(spliceIndex);\n                    if (segments.length) {\n                        segments[segments.length - 1].nextSegment = null;\n                    }\n                    // Will remove the segment(s) from the graph later ..to avoid exceptions\n                    project.ion({\n                        commitFinalized: () => graph.removeEntities(toRemove),\n                        once: true\n                    });\n                }\n                let segmentsSnapshot = '';\n                if (segments) {\n                    segmentsSnapshot = this.getSegmentsSnapshot(segments);\n                }\n                if ( /*this._lastSegmentsSnapshot &&*/segmentsSnapshot !== this._lastSegmentsSnapshot) {\n                    hasChanges = true;\n                    segments = segments ? segments.slice() : segments;\n                    this._lastSegmentsSnapshot = segmentsSnapshot;\n                }\n                // this._lastSegmentsSnapshot  = segmentsSnapshot\n                // If we have changes to write\n                if (hasChanges) {\n                    yield* this.doWriteSegments(segments, toWrite);\n                }\n            }\n            return value;\n        }\n        getSegmentsSnapshot(segments) {\n            segments = segments || this.segments;\n            return segments?.map(segment => '' + segment.startOffset + '-' + segment.startDate?.getTime() + '-' + segment.endOffset + '-' + segment.endDate?.getTime()).join(';');\n        }\n        processSegmentsValue(value) {\n            // by default return the value as is\n            let result = value;\n            // if segments are specified for the task\n            if (value) {\n                // for (let segment of value) {\n                for (let i = 0; i < value.length; i++) {\n                    const segment = value[i];\n                    const record = (segment.isModel ? segment : this.segmentModelClass.new(segment));\n                    // don't overwrite the existing property, because this method\n                    // is called as part of the `copy()` call, where\n                    //     copy['segments'] = this['segments']\n                    // happens and `copy` event is assigned back to segments from the source\n                    if (!record.event)\n                        record.event = this;\n                    value[i] = record;\n                }\n            }\n            return result;\n        }\n        *calculateStartDate() {\n            const dispatcher = yield this.$.dispatcher;\n            const resolution = dispatcher.resolution.get(StartDateVar);\n            let result;\n            if (resolution === startDateByEndDateAndSegmentsFormula.formulaId) {\n                result = yield* this.calculateStartDateBySegments();\n            }\n            else {\n                result = yield* super.calculateStartDate();\n            }\n            return result;\n        }\n        *calculateStartDateBySegments() {\n            const dispatcher = yield this.$.dispatcher;\n            const segments = yield this.$.segments;\n            const endDate = yield this.$.endDate;\n            let result;\n            if (segments) {\n                const lastSegment = segments[segments.length - 1];\n                const lastSegmentEndOffset = yield lastSegment.$.endOffset;\n                const rawDate = yield* this.calculateProjectedXDateWithDuration(endDate, false, lastSegmentEndOffset, TimeUnit.Millisecond, { ignoreSegments: true });\n                const manuallyScheduled = yield this.$.manuallyScheduled;\n                result = manuallyScheduled && !this.getProject().skipNonWorkingTimeWhenSchedulingManually\n                    ? rawDate\n                    : yield* this.skipNonWorkingTime(rawDate, true);\n            }\n            return result;\n        }\n        *calculateEndDateBySegments() {\n            const dispatcher = yield this.$.dispatcher;\n            const segments = yield this.$.segments;\n            const startDate = yield this.$.startDate;\n            let result;\n            if (segments) {\n                const lastSegment = segments[segments.length - 1];\n                const lastSegmentEndOffset = yield lastSegment.$.endOffset;\n                const rawDate = yield* this.calculateProjectedXDateWithDuration(startDate, true, lastSegmentEndOffset, TimeUnit.Millisecond, { ignoreSegments: true });\n                const manuallyScheduled = yield this.$.manuallyScheduled;\n                result = manuallyScheduled && !this.getProject().skipNonWorkingTimeWhenSchedulingManually\n                    ? rawDate\n                    : yield* this.skipNonWorkingTime(rawDate, false);\n            }\n            return result;\n        }\n        *calculateEndDate() {\n            const dispatcher = yield this.$.dispatcher;\n            const resolution = dispatcher.resolution.get(EndDateVar);\n            let result;\n            if (resolution === endDateByStartDateAndSegmentsFormula.formulaId) {\n                result = yield* this.calculateEndDateBySegments();\n            }\n            else {\n                result = yield* super.calculateEndDate();\n            }\n            return result;\n        }\n        *calculateDurationProposed() {\n            let result;\n            if (yield* this.hasSegmentChangesProposed()) {\n                result = yield* this.calculateDurationBySegments();\n            }\n            else {\n                result = yield* super.calculateDurationProposed();\n            }\n            return result;\n        }\n        *skipNonWorkingTime(date, isForward = true, iteratorOptions) {\n            if (!date)\n                return null;\n            iteratorOptions = Object.assign({ ignoreSegments: true }, iteratorOptions);\n            return yield* super.skipNonWorkingTime(date, isForward, iteratorOptions);\n        }\n        *calculateDurationBySegments() {\n            let duration;\n            const dispatcher = yield this.$.dispatcher;\n            const durationUnit = yield this.$.durationUnit;\n            const segments = yield this.$.segments;\n            if (segments) {\n                let durationMs = 0;\n                // collect segments duration in milliseconds\n                for (const segment of segments) {\n                    durationMs += segment.endOffset - segment.startOffset;\n                }\n                duration = yield* this.getProject().$convertDuration(durationMs, TimeUnit.Millisecond, durationUnit);\n            }\n            return duration;\n        }\n        *forEachAvailabilityInterval(options, func) {\n            const calendar = yield this.$.effectiveCalendar;\n            const assignmentsByCalendar = yield this.$.assignmentsByCalendar;\n            const effectiveCalendarsCombination = yield this.$.effectiveCalendarsCombination;\n            const isForward = options.isForward !== false;\n            const ignoreResourceCalendar = (yield this.$.ignoreResourceCalendar) || options.ignoreResourceCalendar || !assignmentsByCalendar.size;\n            const maxRange = this.getProject().maxCalendarRange;\n            let ignoreSegments = options.ignoreSegments;\n            let sign = 1;\n            let currentSegment, currentOffsetMs, currentSegmentDurationMs, segments, currentSegmentEndOffset;\n            if (!ignoreSegments) {\n                segments = yield this.$.segments;\n                ignoreSegments = ignoreSegments || !segments;\n                if (!ignoreSegments) {\n                    // clone segment array since we're going to call shift()/pop() on it\n                    segments = segments.slice();\n                    if (isForward) {\n                        currentSegment = segments.shift();\n                        currentOffsetMs = 0;\n                        sign = 1;\n                        // open the last segment end border\n                        currentSegmentEndOffset = currentSegment.nextSegment ? currentSegment.endOffset : MAX_DATE.getTime();\n                    }\n                    else {\n                        currentSegment = segments.pop();\n                        currentOffsetMs = currentSegment.endOffset;\n                        sign = -1;\n                        currentSegmentEndOffset = currentSegment.endOffset;\n                    }\n                    currentSegmentDurationMs = currentSegmentEndOffset - currentSegment.startOffset;\n                }\n            }\n            const manuallyScheduled = yield this.$.manuallyScheduled;\n            const project = this.getProject();\n            return effectiveCalendarsCombination.forEachAvailabilityInterval(Object.assign({ maxRange }, options), (intervalStartDate, intervalEndDate, calendarCacheIntervalMultiple) => {\n                const calendarsStatus = calendarCacheIntervalMultiple.getCalendarsWorkStatus();\n                const workCalendars = calendarCacheIntervalMultiple.getCalendarsWorking();\n                if (calendarsStatus.get(calendar)\n                    && (ignoreResourceCalendar\n                        || workCalendars.some((calendar) => assignmentsByCalendar.has(calendar))\n                        || (manuallyScheduled && !project.skipNonWorkingTimeInDurationWhenSchedulingManually))) {\n                    if (ignoreSegments) {\n                        return func(intervalStartDate, intervalEndDate, calendarCacheIntervalMultiple);\n                    }\n                    // take segments into account while iterating\n                    else {\n                        const startDateN = intervalStartDate.getTime();\n                        let intervalDuration = intervalEndDate.getTime() - intervalStartDate.getTime();\n                        if (this.getProject().adjustDurationToDST) {\n                            const dstDiff = intervalStartDate.getTimezoneOffset() - intervalEndDate.getTimezoneOffset();\n                            intervalDuration += dstDiff * 60 * 1000;\n                        }\n                        let intervalStartOffset, intervalEndOffset;\n                        if (isForward) {\n                            intervalStartOffset = currentOffsetMs;\n                            intervalEndOffset = currentOffsetMs + intervalDuration;\n                        }\n                        else {\n                            intervalStartOffset = currentOffsetMs - intervalDuration;\n                            intervalEndOffset = currentOffsetMs;\n                        }\n                        while (currentSegment && intervalStartOffset <= currentSegmentEndOffset && intervalEndOffset > currentSegment.startOffset) {\n                            // get the intersection of the current segment w/ the current interval\n                            const callStartOffset = Math.max(intervalStartOffset, currentSegment.startOffset);\n                            const callEndOffset = Math.min(intervalEndOffset, currentSegmentEndOffset);\n                            const callStartDate = new Date(startDateN + callStartOffset - intervalStartOffset);\n                            const callEndDate = new Date(startDateN + callEndOffset - intervalStartOffset);\n                            const callResult = func(callStartDate, callEndDate, calendarCacheIntervalMultiple);\n                            if (callResult === false)\n                                return false;\n                            // reduce the segment duration left by the intersection duration\n                            currentSegmentDurationMs -= callEndDate.getTime() - callStartDate.getTime();\n                            // if no segment duration left\n                            if (!currentSegmentDurationMs) {\n                                // get next segment\n                                currentSegment = isForward ? segments.shift() : segments.pop();\n                                if (currentSegment) {\n                                    // the last segment end border should not be taken into account (in forward mode)\n                                    currentSegmentEndOffset = !isForward || currentSegment.nextSegment ? currentSegment.endOffset : MAX_DATE.getTime();\n                                    // get its duration to distribute\n                                    currentSegmentDurationMs = currentSegmentEndOffset - currentSegment.startOffset;\n                                }\n                            }\n                            // if there is undistributed duration left of the current segment => iterate to the next interval\n                            else {\n                                break;\n                            }\n                        }\n                        currentOffsetMs += sign * intervalDuration;\n                    }\n                }\n            });\n        }\n        *useEventAvailabilityIterator() {\n            const isSegmented = yield this.$.isSegmented;\n            if (isSegmented)\n                return true;\n            const manuallyScheduled = yield this.$.manuallyScheduled;\n            // always use availability iterator, unless the event is manually scheduled\n            return !manuallyScheduled;\n        }\n        /**\n         * Returns a segment that is ongoing on the provided date.\n         * @param  date Date to find an ongoing segment on\n         * @param  [segments] List of segments to check. When not provided the event segments is used\n         * @return Ongoing segment\n         */\n        getSegmentByDate(date, segments) {\n            segments = segments || this.getSegments();\n            if (segments) {\n                const index = this.getSegmentIndexByDate(date, segments);\n                return segments[index];\n            }\n        }\n        getSegmentIndexByDate(date, segments) {\n            segments = segments || this.getSegments();\n            return segments ? segments.findIndex(segment => date >= segment.startDate && date < segment.endDate) : -1;\n        }\n        /**\n         * The event first segment or null if the event is not segmented.\n         */\n        get firstSegment() {\n            const segments = this.getSegments();\n            return segments ? segments[0] : null;\n        }\n        /**\n         * The event last segment or null if the event is not segmented.\n         */\n        get lastSegment() {\n            const segments = this.getSegments();\n            return segments ? segments[segments.length - 1] : null;\n        }\n        /**\n         * Returns a segment by its index.\n         * @param index The segment index (zero based value).\n         * @return The segment matching the provided index.\n         */\n        getSegment(index) {\n            const segments = this.getSegments();\n            return segments?.[index];\n        }\n        /**\n         * Splits the event.\n         * @param from The date to split this event at.\n         * @param [lag=1] Split duration.\n         * @param [lagUnit] Split duration unit.\n         */\n        async splitToSegments(from, lag = 1, lagUnit) {\n            const project = this.getProject();\n            await project.commitAsync();\n            const me = this;\n            // cannot split:\n            // - if no split date specified\n            // - a summary event\n            // @ts-ignore\n            if (!from || (me.isHasSubEventsMixin && me.childEvents?.size))\n                return;\n            const duration = me.duration;\n            const durationUnit = me.durationUnit;\n            const startDate = me.startDate;\n            const endDate = me.endDate;\n            lagUnit = lagUnit ? DateHelper.normalizeUnit(lagUnit) : durationUnit;\n            // - not scheduled event\n            // - provided date violates the event interval\n            // - a zero duration event\n            if (!startDate || !endDate || (startDate >= from) || (from >= endDate) || !duration)\n                return;\n            const isSegmented = me.isSegmented;\n            let segments = me.segments || [];\n            let segmentToSplit, segmentToSplitIndex;\n            if (isSegmented) {\n                segmentToSplitIndex = me.getSegmentIndexByDate(from, segments);\n                segmentToSplit = segments[segmentToSplitIndex];\n                if (!segmentToSplit)\n                    return;\n            }\n            const splitTarget = segmentToSplit || me;\n            const splitTargetStart = segmentToSplit ? splitTarget.startDate : startDate;\n            const splitTargetDuration = splitTarget.duration;\n            const splitTargetDurationUnit = splitTarget.durationUnit;\n            const prevSegmentDuration = me.run('calculateProjectedDuration', splitTargetStart, from, splitTargetDurationUnit, { ignoreSegments: true });\n            const nextSegmentDuration = splitTargetDuration - prevSegmentDuration;\n            const lagInMs = project.run('$convertDuration', lag, lagUnit, TimeUnit.Millisecond);\n            const nextSegmentStartOffset = lagInMs + me.run('calculateProjectedDuration', startDate, from, TimeUnit.Millisecond, { ignoreSegments: true });\n            // split existing segment\n            if (segmentToSplit) {\n                // adjust its duration\n                segmentToSplit.duration = prevSegmentDuration;\n                const newSegment = this.segmentModelClass.new({\n                    duration: nextSegmentDuration,\n                    durationUnit: splitTargetDurationUnit,\n                    startOffset: nextSegmentStartOffset\n                });\n                segments = segments.slice(0);\n                segments.splice(segmentToSplitIndex + 1, 0, newSegment);\n                me.segments = segments;\n                me.duration = duration;\n                // push next segments forward by the lag duration\n                for (let i = segmentToSplitIndex + 2, l = segments.length; i < l; i++) {\n                    const segment = segments[i];\n                    if (segment) {\n                        segment.startOffset += lagInMs;\n                        segment.endOffset += lagInMs;\n                    }\n                }\n            }\n            // split not segmented event\n            else {\n                const previousSegment = this.segmentModelClass.new({\n                    duration: prevSegmentDuration,\n                    durationUnit: splitTargetDurationUnit,\n                    startOffset: 0\n                });\n                const newSegment = this.segmentModelClass.new({\n                    duration: duration - prevSegmentDuration,\n                    durationUnit: splitTargetDurationUnit,\n                    startOffset: nextSegmentStartOffset\n                });\n                me.duration = duration;\n                me.segments = [previousSegment, newSegment];\n            }\n            return project.commitAsync();\n        }\n        /**\n         * Merges the event segments.\n         * The method merges two provided event segments (and all the segment between them if any).\n         * @param [segment1] First segment to merge.\n         * @param [segment2] Second segment to merge.\n         */\n        async mergeSegments(segment1, segment2) {\n            if (!this.isSegmented)\n                return;\n            segment1 = segment1 || this.firstSegment;\n            segment2 = segment2 || this.lastSegment;\n            if (segment1.startOffset > segment2.startOffset) {\n                let tmp = segment2;\n                segment2 = segment1;\n                segment1 = tmp;\n            }\n            // merging itself will be done automatically inside `calculateSegments`\n            segment1.endDate = segment2.startDate;\n            return this.getProject().commitAsync();\n        }\n        // Override storeFieldChange to support revertChanges for segments field\n        storeFieldChange(key, oldValue) {\n            // if we store segments old value\n            if (key === 'segments' && oldValue) {\n                const result = [];\n                for (const segment of oldValue) {\n                    // get the segment persistable data\n                    const segmentData = segment.toJSON();\n                    // if the segment was changes since the last time we stored segment oldValue\n                    if (!this._segmentGeneration[segment.internalId] || segment.generation > this._segmentGeneration[segment.internalId]) {\n                        // let's use the segment old values\n                        Object.assign(segmentData, segment.meta.modified);\n                    }\n                    result.push(segmentData);\n                    // keep the version of the segment\n                    this._segmentGeneration[segment.internalId] = segment.generation;\n                }\n                oldValue = result;\n            }\n            super.storeFieldChange(key, oldValue);\n        }\n        leaveProject() {\n            const segments = this.segments;\n            if (segments) {\n                this.graph.removeEntities(segments);\n            }\n            super.leaveProject();\n        }\n        endBatch(...args) {\n            this.fieldMap.segments._skipSegmentsIsEqual++;\n            super.endBatch(...args);\n            this.fieldMap.segments._skipSegmentsIsEqual--;\n        }\n        copy(newId = null, deep = null) {\n            const copy = super.copy(newId, deep);\n            // need to clean the `segments` in `data`, otherwise it will be\n            // picked up as \"old value\" by STM during set to `segments`\n            // @ts-ignore\n            copy.data.segments = undefined;\n            if (copy.segments) {\n                copy.segments = copy.segments.map(seg => Object.assign(seg.copy(), { event: copy }));\n            }\n            return copy;\n        }\n    }\n    __decorate([\n        field({ identifierCls: SEDSGDispatcherIdentifier })\n    ], SplitEventMixin.prototype, \"dispatcher\", void 0);\n    __decorate([\n        model_field({\n            type: 'array',\n            isEqual: compareSegmentsArray,\n            convert: segmentsConverter,\n            // @ts-ignore\n            _skipSegmentsIsEqual: 0\n        })\n    ], SplitEventMixin.prototype, \"segments\", void 0);\n    __decorate([\n        field()\n    ], SplitEventMixin.prototype, \"adjustedSegments\", void 0);\n    __decorate([\n        field()\n    ], SplitEventMixin.prototype, \"isSegmented\", void 0);\n    __decorate([\n        write('segments')\n    ], SplitEventMixin.prototype, \"writeSegments\", null);\n    __decorate([\n        calculate('segments')\n    ], SplitEventMixin.prototype, \"calculateSegments\", null);\n    __decorate([\n        calculate('adjustedSegments')\n    ], SplitEventMixin.prototype, \"calculateAdjustedSegments\", null);\n    return SplitEventMixin;\n}) {\n}\n", "var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { ProposedOrPrevious } from \"../../../../ChronoGraph/chrono/Effect.js\";\nimport { Mixin } from \"../../../../ChronoGraph/class/BetterMixin.js\";\nimport { calculate, write } from \"../../../../ChronoGraph/replica/Entity.js\";\nimport DateHelper from \"../../../../Core/helper/DateHelper.js\";\nimport { model_field } from \"../../../chrono/ModelFieldAtom.js\";\nimport { TimeUnit } from \"../../../scheduling/Types.js\";\nimport { HasChildrenMixin } from \"../scheduler_basic/HasChildrenMixin.js\";\nimport { SchedulerProHasAssignmentsMixin } from \"./SchedulerProHasAssignmentsMixin.js\";\n//---------------------------------------------------------------------------------------------------------------------\n/**\n * This mixin provides an `effort` field which does not affect scheduling.\n * It also provides various generic methods to schedule task based on effort information. Those are\n * used in other mixins.\n */\nexport class HasEffortMixin extends Mixin([SchedulerProHasAssignmentsMixin, HasChildrenMixin], (base) => {\n    const superProto = base.prototype;\n    class HasEffortMixin extends base {\n        /**\n         * Getter for the effort. Can return effort in given unit, or will use [[effortUnit]].\n         *\n         * @param unit\n         */\n        getEffort(unit) {\n            const effort = this.effort;\n            return unit ? this.getProject().convertDuration(effort, this.effortUnit, unit) : effort;\n        }\n        writeEffort(me, transaction, quark, effort, unit) {\n            if (effort < 0)\n                effort = 0;\n            if (!transaction.baseRevision.hasIdentifier(me) && effort == null)\n                return;\n            if (unit != null && unit !== this.effortUnit) {\n                this.$.effortUnit.write.call(this, this.$.effortUnit, transaction, null, unit);\n            }\n            me.constructor.prototype.write(me, transaction, quark, effort);\n        }\n        setEffortUnit(_value) {\n            throw new Error(\"Use `setEffort` instead\");\n        }\n        /**\n         * The method defines wether the provided child event should roll up its [[effort]] to this summary event or not.\n         * If the method returns `true` the child event [[effort]] is summed up\n         * when calculating this summary event [[effort]].\n         * And if the method returns `false` the child effort is not taken into account.\n         * By default the method returns `true` to include all child event [[effort]] values.\n         * @param childEvent Child event to consider.\n         * @returns `true` if the provided event [[effort]] should be included, `false` if not.\n         */\n        *shouldRollupChildEffort(childEvent) {\n            return true;\n        }\n        /**\n         * Helper method to calculate the total effort of all child events.\n         */\n        *calculateTotalChildrenEffort() {\n            const childEvents = yield this.$.childEvents;\n            const project = this.getProject();\n            let totalEffortMs = 0;\n            for (const childEvent of childEvents) {\n                if (!(yield* this.shouldRollupChildEffort(childEvent)))\n                    continue;\n                const childEventEffortUnit = yield childEvent.$.effortUnit;\n                totalEffortMs += yield* project.$convertDuration(yield childEvent.$.effort, childEventEffortUnit, TimeUnit.Millisecond);\n            }\n            return yield* project.$convertDuration(totalEffortMs, TimeUnit.Millisecond, yield this.$.effortUnit);\n        }\n        *calculateEffort() {\n            const childEvents = yield this.$.childEvents;\n            if (childEvents.size > 0)\n                return yield* this.calculateTotalChildrenEffort();\n            else {\n                const proposed = yield ProposedOrPrevious;\n                return proposed !== undefined ? proposed : yield* this.calculateEffortPure();\n            }\n        }\n        *calculateEffortPure() {\n            const childEvents = yield this.$.childEvents;\n            if (childEvents.size > 0)\n                return yield* this.calculateTotalChildrenEffort();\n            else {\n                return yield* this.calculateProjectedEffort(yield this.$.startDate, yield this.$.endDate);\n            }\n        }\n        *calculateEffortProposed() {\n            return yield ProposedOrPrevious;\n        }\n        *calculateAssignmentUnits(assignment) {\n            return yield* this.calculateAssignmentUnitsProposed(assignment);\n        }\n        *calculateAssignmentUnitsPure(assignment) {\n            return yield* this.calculateUnitsByStartEndAndEffort(assignment);\n        }\n        *calculateAssignmentUnitsProposed(assignment) {\n            return yield ProposedOrPrevious;\n        }\n        *getBaseOptionsForEffortCalculations() {\n            return { ignoreResourceCalendar: false };\n        }\n        *calculateProjectedEffort(startDate, endDate, assignmentsByCalendar) {\n            if (startDate == null || endDate == null || startDate > endDate)\n                return null;\n            if (!assignmentsByCalendar) {\n                assignmentsByCalendar = yield this.$.assignmentsByCalendar;\n            }\n            const totalUnitsByCalendar = new Map();\n            for (const [calendar, assignments] of assignmentsByCalendar) {\n                let intervalUnits = 0;\n                for (const assignment of assignments) {\n                    intervalUnits += (yield assignment.$.units);\n                }\n                totalUnitsByCalendar.set(calendar, intervalUnits);\n            }\n            //----------------------\n            let resultN = 0;\n            const options = Object.assign(yield* this.getBaseOptionsForEffortCalculations(), { startDate, endDate });\n            // if event has no assignments we treat that as it has a special, \"virtual\" assignment with 100 units and\n            // the calendar matching the calendar of the task\n            // we need to ignore resource calendars in this case, since there's no assigned resources\n            if (totalUnitsByCalendar.size === 0) {\n                totalUnitsByCalendar.set(yield this.$.effectiveCalendar, 100);\n                options.ignoreResourceCalendar = true;\n            }\n            yield* this.forEachAvailabilityInterval(options, (intervalStart, intervalEnd, calendarCacheIntervalMultiple) => {\n                const workCalendars = calendarCacheIntervalMultiple.getCalendarsWorking();\n                const intervalStartN = intervalStart.getTime(), intervalEndN = intervalEnd.getTime(), intervalDuration = intervalEndN - intervalStartN;\n                let intervalUnits = 0;\n                for (const workingCalendar of workCalendars) {\n                    // the calendar of the event itself will be in the `workCalendars`, but it\n                    // will be missing in the `totalUnitsByCalendar` map, which is fine\n                    intervalUnits += totalUnitsByCalendar.get(workingCalendar) || 0;\n                }\n                // Effort = Units * Duration\n                resultN += intervalUnits * intervalDuration * 0.01;\n            });\n            return yield* this.getProject().$convertDuration(resultN, TimeUnit.Millisecond, yield this.$.effortUnit);\n        }\n        *calculateUnitsByStartEndAndEffort(_assignment) {\n            const effort = yield this.$.effort, effortUnit = yield this.$.effortUnit, effortMS = yield* this.getProject().$convertDuration(effort, effortUnit, TimeUnit.Millisecond);\n            let collectedEffort = 0;\n            const options = Object.assign(yield* this.getBaseOptionsForEffortCalculations(), { startDate: yield this.$.startDate, endDate: yield this.$.endDate });\n            const assignmentsByCalendar = yield this.$.assignmentsByCalendar;\n            yield* this.forEachAvailabilityInterval(options, (intervalStart, intervalEnd, calendarCacheIntervalMultiple) => {\n                const workCalendars = calendarCacheIntervalMultiple.getCalendarsWorking();\n                const intervalStartN = intervalStart.getTime(), intervalEndN = intervalEnd.getTime(), intervalDuration = intervalEndN - intervalStartN;\n                for (const workingCalendar of workCalendars) {\n                    collectedEffort +=\n                        (assignmentsByCalendar.has(workingCalendar) ? assignmentsByCalendar.get(workingCalendar).length : 0) * intervalDuration;\n                }\n            });\n            return collectedEffort ? 100 * effortMS / collectedEffort : 100;\n        }\n        *calculateProjectedXDateByEffort(baseDate, isForward = true, effort, effortUnit) {\n            effort = effort !== undefined ? effort : yield this.$.effort;\n            effortUnit = effortUnit !== undefined ? effortUnit : yield this.$.effortUnit;\n            const effortMS = yield* this.getProject().$convertDuration(effort, effortUnit, TimeUnit.Millisecond);\n            if (baseDate == null || effort == null)\n                return null;\n            let resultN = baseDate.getTime();\n            let leftEffort = effortMS;\n            // early exit if effort is 0\n            if (leftEffort === 0)\n                return new Date(resultN);\n            const calendar = yield this.$.effectiveCalendar;\n            const assignmentsByCalendar = yield this.$.assignmentsByCalendar;\n            const totalUnitsByCalendar = new Map();\n            // this flag indicates that there are assignments with non-zero units\n            // if there's no such - event should be scheduled by the simple\n            // `accumulateWorkingTime` call\n            let hasUnits = false;\n            for (const [calendar, assignments] of assignmentsByCalendar) {\n                let intervalUnits = 0;\n                for (const assignment of assignments) {\n                    intervalUnits += yield assignment.$.units;\n                }\n                totalUnitsByCalendar.set(calendar, intervalUnits);\n                if (intervalUnits > 0)\n                    hasUnits = true;\n            }\n            if (hasUnits && (yield* this.useEventAvailabilityIterator())) {\n                const options = Object.assign(yield* this.getBaseOptionsForDurationCalculations(), isForward ? { startDate: baseDate, isForward } : { endDate: baseDate, isForward });\n                yield* this.forEachAvailabilityInterval(options, (intervalStart, intervalEnd, calendarCacheIntervalMultiple) => {\n                    const workCalendars = calendarCacheIntervalMultiple.getCalendarsWorking();\n                    const intervalStartN = intervalStart.getTime(), intervalEndN = intervalEnd.getTime(), intervalDuration = intervalEndN - intervalStartN;\n                    let intervalUnits = 0;\n                    for (const workingCalendar of workCalendars) {\n                        // the calendar of the event itself will be in the `workCalendars`, but it\n                        // will be missing in the `totalUnitsByCalendar` map, which is fine\n                        intervalUnits += totalUnitsByCalendar.get(workingCalendar) || 0;\n                    }\n                    // Effort = Units * Duration\n                    const intervalEffort = intervalUnits * intervalDuration * 0.01;\n                    if (intervalEffort >= leftEffort) {\n                        // the case where `leftEffort` is 0 initially is covered with the early exit above\n                        // so `leftEffort` is always > 0 here, this means `intervalEffort` has to be > 0 too,\n                        // this in turn means, that to enter the branch `intervalUnits` has to be !== 0,\n                        // so division by it is safe, see below\n                        // resulting date is interval start plus left duration (Duration = Effort / Units)\n                        resultN = isForward\n                            ? intervalStartN + leftEffort / (0.01 * intervalUnits)\n                            : intervalEndN - leftEffort / (0.01 * intervalUnits);\n                        // exit the loop\n                        return false;\n                    }\n                    else {\n                        leftEffort -= intervalEffort;\n                    }\n                });\n                return new Date(resultN);\n            }\n            else {\n                return calendar.accumulateWorkingTime(baseDate, effortMS, isForward).finalDate;\n            }\n        }\n    }\n    __decorate([\n        model_field({ 'type': 'number' /*, defaultValue : 0*/ })\n    ], HasEffortMixin.prototype, \"effort\", void 0);\n    __decorate([\n        model_field({ 'type': 'string', defaultValue: TimeUnit.Hour }, { converter: (unit) => DateHelper.normalizeUnit(unit) || TimeUnit.Hour })\n    ], HasEffortMixin.prototype, \"effortUnit\", void 0);\n    __decorate([\n        write('effort')\n    ], HasEffortMixin.prototype, \"writeEffort\", null);\n    __decorate([\n        calculate('effort')\n    ], HasEffortMixin.prototype, \"calculateEffort\", null);\n    return HasEffortMixin;\n}) {\n}\n", "import { Formula } from \"../../../../ChronoGraph/cycle_resolver/CycleResolver.js\";\nimport { EndDateVar, SEDDispatcher, SEDDispatcherIdentifier, StartDateVar } from \"../scheduler_basic/BaseEventDispatcher.js\";\nimport { TombStone } from \"../../../../ChronoGraph/chrono/Quark.js\";\n//---------------------------------------------------------------------------------------------------------------------\nexport const EffortVar = Symbol('EffortVar');\nexport const UnitsVar = Symbol('UnitsVar');\n//---------------------------------------------------------------------------------------------------------------------\nexport const effortFormula = Formula.new({\n    output: EffortVar,\n    inputs: new Set([StartDateVar, EndDateVar, UnitsVar])\n});\nexport const unitsFormula = Formula.new({\n    output: UnitsVar,\n    inputs: new Set([StartDateVar, EndDateVar, EffortVar])\n});\nexport const endDateByEffortFormula = Formula.new({\n    output: EndDateVar,\n    inputs: new Set([StartDateVar, EffortVar, UnitsVar])\n});\nexport const startDateByEffortFormula = Formula.new({\n    output: StartDateVar,\n    inputs: new Set([EndDateVar, EffortVar, UnitsVar])\n});\n//---------------------------------------------------------------------------------------------------------------------\nexport class SEDWUDispatcher extends SEDDispatcher {\n}\n//---------------------------------------------------------------------------------------------------------------------\nexport class SEDWUDispatcherIdentifier extends SEDDispatcherIdentifier {\n    equality(v1, v2) {\n        const resolution1 = v1.resolution;\n        const resolution2 = v2.resolution;\n        // @ts-ignore\n        return (v1 !== TombStone || v2 === TombStone)\n            // @ts-ignore\n            && (v1 === TombStone || v2 !== TombStone)\n            && resolution1.get(EffortVar) === resolution2.get(EffortVar)\n            && resolution1.get(UnitsVar) === resolution2.get(UnitsVar)\n            && super.equality(v1, v2);\n    }\n}\n", "var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { ProposedOrPrevious, ProposedOrPreviousValueOf } from \"../../../../ChronoGraph/chrono/Effect.js\";\nimport { Mixin } from \"../../../../ChronoGraph/class/BetterMixin.js\";\nimport { CalculateProposed } from \"../../../../ChronoGraph/cycle_resolver/CycleResolver.js\";\nimport { calculate, field } from \"../../../../ChronoGraph/replica/Entity.js\";\nimport { model_field } from \"../../../chrono/ModelFieldAtom.js\";\nimport { SchedulingMode } from \"../../../scheduling/Types.js\";\nimport { durationFormula, DurationVar, EndDateVar, StartDateVar } from \"../scheduler_basic/BaseEventDispatcher.js\";\nimport { effortFormula, EffortVar, endDateByEffortFormula, SEDWUDispatcher, SEDWUDispatcherIdentifier, startDateByEffortFormula, unitsFormula, UnitsVar } from \"./HasEffortDispatcher.js\";\nimport { HasEffortMixin } from \"./HasEffortMixin.js\";\n//---------------------------------------------------------------------------------------------------------------------\n/**\n * This mixin serves as a \"base class\" for the individual scheduling modes mixins: [[FixedDurationMixin]], [[FixedEffortMixin]]\n * and [[FixedUnitsMixin]].\n *\n * Scheduling mode indicates, in which order the duration, effort and assignment units are changed. All these variables\n * are tied together with this invariant (in pseudo-code):\n *\n * ```javascript\n * Effort = Duration * Units\n * ```\n *\n * For example, if we've doubled the effort of the task, we have the choice - we can either double its duration,\n * or double the assignment units, to keep the invariant.\n *\n * We have the same choices for every variable. The scheduling mode\n * basically defines the order in which the \"duration\", \"effort\" and \"units\" variables are updated when one of them changes.\n */\nexport class HasSchedulingModeMixin extends Mixin([HasEffortMixin], (base) => {\n    const superProto = base.prototype;\n    class HasSchedulingModeMixin extends base {\n        *calculateSchedulingMode() {\n            return (yield ProposedOrPrevious) || SchedulingMode.Normal;\n        }\n        *effectiveSchedulingMode() {\n            const assignmentsByCalendar = yield this.$.assignmentsByCalendar;\n            return assignmentsByCalendar.size > 0 ? yield this.$.schedulingMode : SchedulingMode.Normal;\n        }\n        effectiveSchedulingModeSync(Y) {\n            const assignmentsByCalendar = Y(this.$.assignmentsByCalendar);\n            return assignmentsByCalendar.size > 0 ? Y(this.$.schedulingMode) : SchedulingMode.Normal;\n        }\n        *prepareDispatcher(YIELD) {\n            const schedulingMode = yield* this.effectiveSchedulingMode();\n            if (schedulingMode !== SchedulingMode.Normal) {\n                const cycleDispatcher = yield* superProto.prepareDispatcher.call(this, YIELD);\n                cycleDispatcher.collectInfo(YIELD, this.$.effort, EffortVar);\n                if (yield* this.hasProposedValueForUnits())\n                    cycleDispatcher.addProposedValueFlag(UnitsVar);\n                // units are always available\n                cycleDispatcher.addPreviousValueFlag(UnitsVar);\n                return cycleDispatcher;\n            }\n            else {\n                return yield* superProto.prepareDispatcher.call(this, YIELD);\n            }\n        }\n        dispatcherClass(Y) {\n            const schedulingMode = this.effectiveSchedulingModeSync(Y);\n            if (schedulingMode !== SchedulingMode.Normal) {\n                return SEDWUDispatcher;\n            }\n            else {\n                return superProto.dispatcherClass.call(this, Y);\n            }\n        }\n        buildProposedDispatcher(me, quark, transaction) {\n            const dispatcher = superProto.buildProposedDispatcher.call(this, me, quark, transaction);\n            dispatcher.addPreviousValueFlag(EffortVar);\n            dispatcher.addPreviousValueFlag(UnitsVar);\n            return dispatcher;\n        }\n        *calculateAssignmentUnits(assignment) {\n            const schedulingMode = yield* this.effectiveSchedulingMode();\n            if (schedulingMode !== SchedulingMode.Normal) {\n                const dispatch = yield this.$.dispatcher;\n                const formulaId = dispatch.resolution.get(UnitsVar);\n                if (formulaId === CalculateProposed) {\n                    return yield* this.calculateAssignmentUnitsProposed(assignment);\n                }\n                else if (formulaId === unitsFormula.formulaId) {\n                    return yield* this.calculateAssignmentUnitsPure(assignment);\n                }\n                else {\n                    throw new Error(\"Unknown formula for `units`\");\n                }\n            }\n            else {\n                return yield* superProto.calculateAssignmentUnits.call(this, assignment);\n            }\n        }\n        *calculateEffort() {\n            const schedulingMode = yield* this.effectiveSchedulingMode();\n            if (schedulingMode !== SchedulingMode.Normal) {\n                const dispatch = yield this.$.dispatcher;\n                const formulaId = dispatch.resolution.get(EffortVar);\n                if (formulaId === CalculateProposed) {\n                    return yield* this.calculateEffortProposed();\n                }\n                else if (formulaId === effortFormula.formulaId) {\n                    return yield* this.calculateEffortPure();\n                }\n                else {\n                    throw new Error(\"Unknown formula for `effort`\");\n                }\n            }\n            else {\n                return yield* superProto.calculateEffort.call(this);\n            }\n        }\n        *calculateStartDate() {\n            const schedulingMode = yield* this.effectiveSchedulingMode();\n            if (schedulingMode !== SchedulingMode.Normal) {\n                const dispatch = yield this.$.dispatcher;\n                const formulaId = dispatch.resolution.get(StartDateVar);\n                if (formulaId === startDateByEffortFormula.formulaId) {\n                    return yield* this.calculateProjectedXDateByEffort(yield this.$.endDate, false);\n                }\n                else {\n                    return yield* superProto.calculateStartDate.call(this);\n                }\n            }\n            else {\n                return yield* superProto.calculateStartDate.call(this);\n            }\n        }\n        *calculateEndDate() {\n            const schedulingMode = yield* this.effectiveSchedulingMode();\n            if (schedulingMode !== SchedulingMode.Normal) {\n                const dispatch = yield this.$.dispatcher;\n                const formulaId = dispatch.resolution.get(EndDateVar);\n                if (formulaId === endDateByEffortFormula.formulaId) {\n                    return yield* this.calculateProjectedXDateByEffort(yield this.$.startDate, true);\n                }\n                else {\n                    return yield* superProto.calculateEndDate.call(this);\n                }\n            }\n            else {\n                return yield* superProto.calculateEndDate.call(this);\n            }\n        }\n        *calculateEffectiveDuration() {\n            const dispatch = yield this.$.dispatcher;\n            const schedulingMode = yield* this.effectiveSchedulingMode();\n            const durationResolution = dispatch.resolution.get(DurationVar);\n            const effortResolution = dispatch.resolution.get(EffortVar);\n            let effectiveDurationToUse;\n            if (durationResolution === durationFormula.formulaId && schedulingMode != SchedulingMode.Normal) {\n                const proposedOrPreviousStartDate = yield ProposedOrPreviousValueOf(this.$.startDate);\n                const proposedOrPreviousEndDate = yield ProposedOrPreviousValueOf(this.$.endDate);\n                const startDateResolution = dispatch.resolution.get(StartDateVar);\n                const endDateResolution = dispatch.resolution.get(EndDateVar);\n                const effortDriven = yield this.$.effortDriven;\n                if (proposedOrPreviousEndDate && startDateResolution === startDateByEffortFormula.formulaId) {\n                    effectiveDurationToUse = yield* this.calculateProjectedDuration(yield* this.calculateProjectedXDateByEffort(proposedOrPreviousEndDate, false), proposedOrPreviousEndDate);\n                }\n                else if (proposedOrPreviousStartDate && endDateResolution === endDateByEffortFormula.formulaId) {\n                    effectiveDurationToUse = yield* this.calculateProjectedDuration(proposedOrPreviousStartDate, yield* this.calculateProjectedXDateByEffort(proposedOrPreviousStartDate, true));\n                }\n                else if (proposedOrPreviousStartDate && proposedOrPreviousEndDate\n                    || !proposedOrPreviousStartDate && !proposedOrPreviousEndDate) {\n                    effectiveDurationToUse = yield* superProto.calculateEffectiveDuration.call(this);\n                }\n            }\n            else\n                effectiveDurationToUse = yield* superProto.calculateEffectiveDuration.call(this);\n            return effectiveDurationToUse;\n        }\n    }\n    __decorate([\n        model_field({ 'type': 'boolean', defaultValue: false })\n    ], HasSchedulingModeMixin.prototype, \"effortDriven\", void 0);\n    __decorate([\n        model_field({ type: 'string', defaultValue: SchedulingMode.Normal }, { sync: true })\n    ], HasSchedulingModeMixin.prototype, \"schedulingMode\", void 0);\n    __decorate([\n        field({ identifierCls: SEDWUDispatcherIdentifier })\n    ], HasSchedulingModeMixin.prototype, \"dispatcher\", void 0);\n    __decorate([\n        calculate('schedulingMode')\n    ], HasSchedulingModeMixin.prototype, \"calculateSchedulingMode\", null);\n    __decorate([\n        calculate('effort')\n    ], HasSchedulingModeMixin.prototype, \"calculateEffort\", null);\n    __decorate([\n        calculate('startDate')\n    ], HasSchedulingModeMixin.prototype, \"calculateStartDate\", null);\n    __decorate([\n        calculate('endDate')\n    ], HasSchedulingModeMixin.prototype, \"calculateEndDate\", null);\n    return HasSchedulingModeMixin;\n}) {\n}\n", "import { CycleResolution, CycleDescription } from \"../../../../../ChronoGraph/cycle_resolver/CycleResolver.js\";\nimport { durationFormula, DurationVar, endDateFormula, EndDateVar, startDateFormula, StartDateVar } from \"../../scheduler_basic/BaseEventDispatcher.js\";\nimport { effortFormula, EffortVar, unitsFormula, UnitsVar } from \"../HasEffortDispatcher.js\";\n//---------------------------------------------------------------------------------------------------------------------\nexport const fixedDurationSEDWUGraphDescription = CycleDescription.new({\n    variables: new Set([StartDateVar, EndDateVar, DurationVar, EffortVar, UnitsVar]),\n    formulas: new Set([\n        startDateFormula,\n        endDateFormula,\n        durationFormula,\n        unitsFormula,\n        effortFormula,\n    ])\n});\nexport const fixedDurationAndEffortSEDWUGraphDescription = CycleDescription.new({\n    variables: new Set([StartDateVar, EndDateVar, DurationVar, EffortVar, UnitsVar]),\n    formulas: new Set([\n        startDateFormula,\n        endDateFormula,\n        durationFormula,\n        unitsFormula,\n    ])\n});\n//---------------------------------------------------------------------------------------------------------------------\nexport const fixedDurationSEDWUForwardNonEffortDriven = CycleResolution.new({\n    description: fixedDurationSEDWUGraphDescription,\n    defaultResolutionFormulas: new Set([endDateFormula, effortFormula])\n});\nexport const fixedDurationSEDWUForwardEffortDriven = CycleResolution.new({\n    description: fixedDurationAndEffortSEDWUGraphDescription,\n    defaultResolutionFormulas: new Set([endDateFormula, unitsFormula])\n});\nexport const fixedDurationSEDWUBackwardNonEffortDriven = CycleResolution.new({\n    description: fixedDurationSEDWUGraphDescription,\n    defaultResolutionFormulas: new Set([startDateFormula, effortFormula])\n});\nexport const fixedDurationSEDWUBackwardEffortDriven = CycleResolution.new({\n    description: fixedDurationAndEffortSEDWUGraphDescription,\n    defaultResolutionFormulas: new Set([startDateFormula, unitsFormula])\n});\n", "import { HasProposedValue } from \"../../../../../ChronoGraph/chrono/Effect.js\";\nimport { Mixin } from \"../../../../../ChronoGraph/class/BetterMixin.js\";\nimport { Direction, SchedulingMode } from \"../../../../scheduling/Types.js\";\nimport { EffortVar, UnitsVar } from \"../HasEffortDispatcher.js\";\nimport { HasSchedulingModeMixin } from \"../HasSchedulingModeMixin.js\";\nimport { fixedDurationSEDWUBackwardEffortDriven, fixedDurationSEDWUBackwardNonEffortDriven, fixedDurationSEDWUForwardEffortDriven, fixedDurationSEDWUForwardNonEffortDriven } from \"./FixedDurationDispatcher.js\";\n//---------------------------------------------------------------------------------------------------------------------\n/**\n * This mixin provides the fixed duration scheduling mode facility. The scheduling mode is controlled with the\n * [[HasSchedulingModeMixin.schedulingMode]] field.\n *\n * See [[HasSchedulingModeMixin]] for more details.\n *\n * In this mode, the duration of the task remains \"fixed\" as the name suggest. It is changed only if there's no other options,\n * for example if both \"effort\" and \"units\" has changed. In other cases, some other variable is updated.\n *\n * If the [[HasSchedulingModeMixin.effortDriven]] flag is enabled, effort variable becomes \"fixed\" as well, so normally the \"units\"\n * variable will change. If that flag is disabled, then \"effort\" will be changed.\n */\nexport class FixedDurationMixin extends Mixin([HasSchedulingModeMixin], (base) => {\n    const superProto = base.prototype;\n    class FixedDurationMixin extends base {\n        *prepareDispatcher(YIELD) {\n            const schedulingMode = yield* this.effectiveSchedulingMode();\n            if (schedulingMode === SchedulingMode.FixedDuration) {\n                const cycleDispatcher = yield* superProto.prepareDispatcher.call(this, YIELD);\n                const effortDriven = yield this.$.effortDriven;\n                if (effortDriven)\n                    cycleDispatcher.addKeepIfPossibleFlag(EffortVar);\n                if (yield HasProposedValue(this.$.assigned)) {\n                    // for effort driven case, we treat adding/removing of assignments as changing effort\n                    // instead of units (this will trigger both, but units formula will win in presence of effort change)\n                    if (effortDriven) {\n                        cycleDispatcher.addProposedValueFlag(EffortVar);\n                    }\n                    else {\n                        cycleDispatcher.addProposedValueFlag(UnitsVar);\n                    }\n                }\n                return cycleDispatcher;\n            }\n            else {\n                return yield* superProto.prepareDispatcher.call(this, YIELD);\n            }\n        }\n        cycleResolutionContext(Y) {\n            const schedulingMode = this.effectiveSchedulingModeSync(Y);\n            if (schedulingMode === SchedulingMode.FixedDuration) {\n                const direction = Y(this.$.direction);\n                const effortDriven = Y(this.$.effortDriven);\n                if (direction === Direction.Forward || direction === Direction.None) {\n                    return effortDriven ? fixedDurationSEDWUForwardEffortDriven : fixedDurationSEDWUForwardNonEffortDriven;\n                }\n                else {\n                    return effortDriven ? fixedDurationSEDWUBackwardEffortDriven : fixedDurationSEDWUBackwardNonEffortDriven;\n                }\n            }\n            else {\n                return superProto.cycleResolutionContext.call(this, Y);\n            }\n        }\n        *getBaseOptionsForDurationCalculations() {\n            const schedulingMode = yield* this.effectiveSchedulingMode();\n            if (schedulingMode === SchedulingMode.FixedDuration) {\n                return { ignoreResourceCalendar: true };\n            }\n            else {\n                return yield* superProto.getBaseOptionsForDurationCalculations.call(this);\n            }\n        }\n    }\n    return FixedDurationMixin;\n}) {\n}\n", "import { Mixin } from \"../../../../ChronoGraph/class/BetterMixin.js\";\nimport { SchedulerBasicEvent } from \"../scheduler_basic/SchedulerBasicEvent.js\";\nimport { ConstrainedEarlyEventMixin } from \"./ConstrainedEarlyEventMixin.js\";\nimport { HasDateConstraintMixin } from \"./HasDateConstraintMixin.js\";\nimport { HasPercentDoneMixin } from \"./HasPercentDoneMixin.js\";\nimport { ScheduledByDependenciesEarlyEventMixin } from \"./ScheduledByDependenciesEarlyEventMixin.js\";\nimport { SchedulerProHasAssignmentsMixin } from \"./SchedulerProHasAssignmentsMixin.js\";\nimport { SplitEventMixin } from \"./SplitEventMixin.js\";\nimport { HasEffortMixin } from \"./HasEffortMixin.js\";\nimport { HasSchedulingModeMixin } from \"./HasSchedulingModeMixin.js\";\nimport { FixedDurationMixin } from \"./scheduling_modes/FixedDurationMixin.js\";\n// import { ConstrainedByParentMixin } from \"../gantt/ConstrainedByParentMixin.js\"\n/**\n * This is an event class, [[SchedulerProProjectMixin]] is working with.\n * It is constructed as [[SchedulerBasicEvent]], enhanced with extra functionality.\n */\nexport class SchedulerProEvent extends Mixin([\n    SchedulerBasicEvent,\n    HasDateConstraintMixin,\n    HasPercentDoneMixin,\n    SchedulerProHasAssignmentsMixin,\n    HasEffortMixin,\n    HasSchedulingModeMixin,\n    FixedDurationMixin,\n    ConstrainedEarlyEventMixin,\n    ScheduledByDependenciesEarlyEventMixin,\n    SplitEventMixin,\n], (base) => {\n    class SchedulerProEvent extends base {\n    }\n    return SchedulerProEvent;\n}) {\n}\n", "var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Base, Mixin } from \"../../../../ChronoGraph/class/BetterMixin.js\";\nimport { calculate, Entity, field } from \"../../../../ChronoGraph/replica/Entity.js\";\nimport { CalendarIntervalMixin } from \"../../../calendar/CalendarIntervalMixin.js\";\nimport { CalendarIntervalStore } from \"../../../calendar/CalendarIntervalStore.js\";\nimport { model_field } from \"../../../chrono/ModelFieldAtom.js\";\nimport { BaseCalendarMixin } from \"../scheduler_basic/BaseCalendarMixin.js\";\nimport { BaseResourceMixin } from \"../scheduler_basic/BaseResourceMixin.js\";\nexport class ResourceAllocationEventRangeCalendarIntervalMixin extends CalendarIntervalMixin {\n    // @model_field({ type : 'boolean', defaultValue : true })\n    // isWorking : boolean\n    // Calendar classes not entering graph, thus not using @model_field\n    static get fields() {\n        return [\n            { name: 'isWorking', type: 'boolean', defaultValue: true }\n        ];\n    }\n}\nexport class ResourceAllocationEventRangeCalendarIntervalStore extends CalendarIntervalStore {\n    static get defaultConfig() {\n        return {\n            modelClass: ResourceAllocationEventRangeCalendarIntervalMixin\n        };\n    }\n}\nexport class ResourceAllocationEventRangeCalendar extends BaseCalendarMixin {\n    get intervalStoreClass() {\n        return ResourceAllocationEventRangeCalendarIntervalStore;\n    }\n}\n__decorate([\n    model_field({ type: 'boolean', defaultValue: false })\n], ResourceAllocationEventRangeCalendar.prototype, \"unspecifiedTimeIsWorking\", void 0);\nexport class BaseAllocationInterval extends Base {\n    constructor() {\n        super(...arguments);\n        /**\n         * Effort in the [[tick|interval]] in milliseconds.\n         */\n        this.effort = 0;\n        /**\n         * Utilization level of the resource (or the assignment if the interval represents the one) in percent.\n         */\n        this.units = 0;\n    }\n}\nexport class AssignmentAllocationInterval extends BaseAllocationInterval {\n}\n/**\n * Resource allocation information for a certain tick.\n */\nexport class ResourceAllocationInterval extends BaseAllocationInterval {\n    constructor() {\n        super(...arguments);\n        /**\n         * Maximum possible effort in the [[tick|interval]] in milliseconds.\n         */\n        this.maxEffort = 0;\n        /**\n         * Indicates that the resource (or the assignment if the interval represents the one) is over-allocated in the [[tick|interval]].\n         * So `true` when [[effort]] is more than [[maxEffort|possible maximum]].\n         */\n        this.isOverallocated = false;\n        /**\n         * Indicates that the resource (or assignment if the interval represents the one) is under-allocated in the [[tick|interval]].\n         * So `true` when [[effort]] is less than [[maxEffort|possible maximum]].\n         */\n        this.isUnderallocated = false;\n        /**\n         * Resource assignments ingoing in the [[tick|interval]].\n         */\n        this.assignments = null;\n        this.assignmentIntervals = null;\n    }\n}\nexport class BaseAllocationInfo extends Entity.mix(Base) {\n    getDefaultAllocationIntervalClass() {\n        return BaseAllocationInterval;\n    }\n    initialize(props) {\n        props = Object.assign({\n            includeInactiveEvents: false,\n            allocationIntervalClass: this.getDefaultAllocationIntervalClass()\n        }, props);\n        super.initialize(props);\n    }\n}\n__decorate([\n    field()\n], BaseAllocationInfo.prototype, \"includeInactiveEvents\", void 0);\n__decorate([\n    field()\n], BaseAllocationInfo.prototype, \"allocation\", void 0);\n/**\n * Class implementing _resource allocation report_ - a data representing the provided [[resource]]\n * utilization in the provided period of time.\n * The data is grouped by the provided [[ticks|time intervals]]\n */\nexport class ResourceAllocationInfo extends BaseAllocationInfo {\n    enterGraph(graph) {\n        super.enterGraph(graph);\n    }\n    leaveGraph(graph) {\n        super.leaveGraph(graph);\n        if (this.resource) {\n            this.resource.entities.delete(this);\n        }\n    }\n    getDefaultAllocationIntervalClass() {\n        return ResourceAllocationInterval;\n    }\n    *shouldIncludeAssignmentInAllocation(assignment) {\n        const event = yield assignment.$.event, units = yield assignment.$.units, includeInactiveEvents = yield this.$.includeInactiveEvents, inactive = event && (yield event.$.inactive), // includeInactiveEvents\n        startDate = event && (yield event.$.startDate), endDate = event && (yield event.$.endDate);\n        return Boolean(event && units && startDate && endDate && (includeInactiveEvents || !inactive));\n    }\n    *calculateAllocation() {\n        const total = [], ticksCalendar = yield this.ticks, resource = yield this.$.resource, includeInactiveEvents = yield this.$.includeInactiveEvents, assignments = yield resource.$.assigned, calendar = yield resource.$.effectiveCalendar, assignmentsByCalendar = new Map(), eventRanges = [], assignmentTicksData = new Map(), byAssignments = new Map();\n        let hasIgnoreResourceCalendarEvent = false;\n        // collect the resource assignments into assignmentsByCalendar map\n        for (const assignment of assignments) {\n            // skip missing or unscheduled event assignments\n            if (!(yield* this.shouldIncludeAssignmentInAllocation(assignment)))\n                continue;\n            // we're going to need up-to-date assignment \"units\" below in this method ..so we yield it here\n            yield assignment.$.units;\n            const event = yield assignment.$.event;\n            const ignoreResourceCalendar = yield event.$.ignoreResourceCalendar;\n            const startDate = yield event.$.startDate;\n            const endDate = yield event.$.endDate;\n            const segments = yield event.$.segments;\n            const eventCalendar = yield event.$.effectiveCalendar;\n            hasIgnoreResourceCalendarEvent = hasIgnoreResourceCalendarEvent || ignoreResourceCalendar;\n            // if the event is segmented collect segment ranges\n            if (segments) {\n                for (const segment of segments) {\n                    const startDate = yield segment.$.startDate;\n                    const endDate = yield segment.$.endDate;\n                    eventRanges.push({ startDate, endDate, assignment });\n                }\n            }\n            else {\n                eventRanges.push({ startDate, endDate, assignment });\n            }\n            let assignments = assignmentsByCalendar.get(eventCalendar);\n            if (!assignments) {\n                assignments = [];\n                assignmentsByCalendar.set(eventCalendar, assignments);\n            }\n            assignmentTicksData.set(assignment, new Map());\n            byAssignments.set(assignment, []);\n            assignments.push(assignment);\n        }\n        const eventRangesCalendar = new ResourceAllocationEventRangeCalendar({ intervals: eventRanges });\n        // Provide extra calendars:\n        // 1) a calendar containing list of ticks to group the resource allocation by\n        // 2) a calendar containing list of assigned event start/end ranges\n        // 3) assigned task calendars\n        const calendars = [ticksCalendar, eventRangesCalendar, ...assignmentsByCalendar.keys()];\n        const ticksData = new Map();\n        // Initialize the resulting array with empty items\n        ticksCalendar.intervalStore.forEach(tick => {\n            const tickData = ResourceAllocationInterval.new({ tick, resource });\n            ticksData.set(tick, tickData);\n            total.push(tickData);\n            assignmentTicksData.forEach((ticksData, assignment) => {\n                const assignmentTickData = AssignmentAllocationInterval.new({ tick, assignment });\n                ticksData.set(tick, assignmentTickData);\n                byAssignments.get(assignment).push(assignmentTickData);\n            });\n        });\n        let weightedUnitsSum, weightsSum;\n        const startDate = total[0].tick.startDate, endDate = total[total.length - 1].tick.endDate, iterationOptions = {\n            startDate,\n            endDate,\n            calendars,\n            includeNonWorkingIntervals: hasIgnoreResourceCalendarEvent,\n        }, ticksTotalDuration = endDate.getTime() - startDate.getTime();\n        // provide extended maxRange if total ticks duration is greater than it\n        if (ticksTotalDuration > resource.getProject().maxCalendarRange) {\n            iterationOptions.maxRange = ticksTotalDuration;\n        }\n        yield* resource.forEachAvailabilityInterval(iterationOptions, (intervalStartDate, intervalEndDate, intervalData) => {\n            const isWorkingCalendar = intervalData.getCalendarsWorkStatus();\n            // We are inside a tick interval and it's a working time according\n            // to a resource calendar\n            if (isWorkingCalendar.get(ticksCalendar)) {\n                const tick = intervalData.intervalsByCalendar.get(ticksCalendar)[0], intervalDuration = intervalEndDate.getTime() - intervalStartDate.getTime(), tickData = ticksData.get(tick), tickAssignments = tickData.assignments || new Set(), tickAssignmentIntervals = tickData.assignmentIntervals || new Map();\n                if (!tickData.assignments) {\n                    weightedUnitsSum = 0;\n                    weightsSum = 0;\n                }\n                let units = 0, intervalHasAssignments = false, duration;\n                // for each event intersecting the interval\n                intervalData.intervalsByCalendar.get(eventRangesCalendar).forEach((interval) => {\n                    const assignment = interval.assignment;\n                    const event = assignment?.event;\n                    // if event is performing in the interval\n                    if (event &&\n                        isWorkingCalendar.get(event.effectiveCalendar) &&\n                        (!hasIgnoreResourceCalendarEvent || event.ignoreResourceCalendar || isWorkingCalendar.get(calendar))) {\n                        // constrain the event start/end with the tick borders\n                        const workingStartDate = Math.max(intervalStartDate.getTime(), assignment.event.startDate.getTime());\n                        const workingEndDate = Math.min(intervalEndDate.getTime(), assignment.event.endDate.getTime());\n                        intervalHasAssignments = true;\n                        duration = workingEndDate - workingStartDate;\n                        const assignmentInterval = assignmentTicksData.get(assignment).get(tick);\n                        const assignmentEffort = duration * assignment.units / 100;\n                        assignmentInterval.effort += assignmentEffort;\n                        assignmentInterval.units = assignment.units;\n                        tickData.effort += assignmentEffort;\n                        // collect total resource usage percent in the current interval\n                        units += assignment.units;\n                        tickAssignments.add(assignment);\n                        tickAssignmentIntervals.set(assignment, assignmentInterval);\n                    }\n                });\n                // maxEffort represents the resource calendar intervals\n                if (isWorkingCalendar.get(calendar)) {\n                    tickData.maxEffort += intervalDuration;\n                }\n                // if we have assignments running in the interval - calculate average allocation %\n                if (units) {\n                    if (duration) {\n                        // keep weightedUnitsSum & weightsSum since there might be another intervals in the tick\n                        weightedUnitsSum += duration * units;\n                        weightsSum += duration;\n                        // \"units\" weighted arithmetic mean w/ duration values as weights\n                        tickData.units = weightedUnitsSum / weightsSum;\n                    }\n                    else if (!weightedUnitsSum) {\n                        tickData.units = units;\n                    }\n                }\n                if (intervalHasAssignments) {\n                    tickData.assignments = tickAssignments;\n                    tickData.assignmentIntervals = tickAssignmentIntervals;\n                    tickData.isOverallocated = tickData.isOverallocated || tickData.effort > tickData.maxEffort || tickData.units > 100;\n                    tickData.isUnderallocated = tickData.effort < tickData.maxEffort || tickData.units < 100;\n                }\n            }\n        });\n        return {\n            total,\n            byAssignments\n        };\n    }\n}\n__decorate([\n    field()\n], ResourceAllocationInfo.prototype, \"resource\", void 0);\n__decorate([\n    calculate('allocation')\n], ResourceAllocationInfo.prototype, \"calculateAllocation\", null);\n/**\n * A mixin for the resource entity at the Scheduler Pro level.\n */\nexport class SchedulerProResourceMixin extends Mixin([BaseResourceMixin], (base) => {\n    const superProto = base.prototype;\n    class SchedulerProResourceMixin extends base {\n        constructor() {\n            super(...arguments);\n            this.observers = new Set();\n            this.entities = new Set();\n        }\n        addObserver(observer) {\n            this.graph.addIdentifier(observer);\n            this.observers.add(observer);\n        }\n        removeObserver(observer) {\n            if (this.graph) {\n                this.graph.removeIdentifier(observer);\n            }\n            this.observers.delete(observer);\n        }\n        addEntity(entity) {\n            this.graph.addEntity(entity);\n            this.entities.add(entity);\n        }\n        removeEntity(entity) {\n            if (this.graph) {\n                this.graph.removeEntity(entity);\n            }\n            this.entities.delete(entity);\n        }\n        leaveGraph(replica) {\n            const { graph } = this;\n            for (const observer of this.observers) {\n                this.removeObserver(observer);\n            }\n            for (const entity of this.entities) {\n                this.removeEntity(entity);\n            }\n            superProto.leaveGraph.call(this, replica);\n        }\n        *forEachAvailabilityInterval(options, func) {\n            const project = this.getProject();\n            const calendar = yield this.$.effectiveCalendar;\n            const effectiveCalendarsCombination = project.combineCalendars([calendar].concat(options.calendars || []));\n            const maxRange = project.maxCalendarRange;\n            const includeNonWorkingIntervals = options.includeNonWorkingIntervals;\n            if (maxRange) {\n                options = Object.assign({ maxRange }, options);\n            }\n            return effectiveCalendarsCombination.forEachAvailabilityInterval(options, (startDate, endDate, calendarCacheIntervalMultiple) => {\n                const calendarsStatus = calendarCacheIntervalMultiple.getCalendarsWorkStatus();\n                if (includeNonWorkingIntervals || calendarsStatus.get(calendar)) {\n                    return func(startDate, endDate, calendarCacheIntervalMultiple);\n                }\n            });\n        }\n    }\n    return SchedulerProResourceMixin;\n}) {\n}\n", "var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { ProposedOrPrevious } from \"../../../../ChronoGraph/chrono/Effect.js\";\nimport { Mixin } from \"../../../../ChronoGraph/class/BetterMixin.js\";\nimport { CI } from \"../../../../ChronoGraph/collection/Iterator.js\";\nimport { prototypeValue } from \"../../../../ChronoGraph/util/Helpers.js\";\nimport Localizable from \"../../../../Core/localization/Localizable.js\";\nimport { model_field } from \"../../../chrono/ModelFieldAtom.js\";\nimport { CycleEffect } from \"../../../chrono/Replica.js\";\nimport { SchedulingIssueEffectResolution } from \"../../../chrono/SchedulingIssueEffect.js\";\nimport { DependenciesCalendar, DependencyValidationResult, ProjectType } from \"../../../scheduling/Types.js\";\nimport { ChronoEventStoreMixin } from \"../../store/ChronoEventStoreMixin.js\";\nimport { HasChildrenMixin } from \"../scheduler_basic/HasChildrenMixin.js\";\nimport { SchedulerBasicProjectMixin } from \"../scheduler_basic/SchedulerBasicProjectMixin.js\";\nimport { ConstrainedEarlyEventMixin } from \"./ConstrainedEarlyEventMixin.js\";\nimport { DateConstraintInterval } from \"./HasDateConstraintMixin.js\";\nimport { DeactivateDependencyResolution, DependencyConstraintInterval, RemoveDependencyResolution } from \"./ScheduledByDependenciesEarlyEventMixin.js\";\nimport { SchedulerProAssignmentMixin } from \"./SchedulerProAssignmentMixin.js\";\nimport { SchedulerProDependencyMixin } from \"./SchedulerProDependencyMixin.js\";\nimport { SchedulerProEvent } from \"./SchedulerProEvent.js\";\nimport { SchedulerProEventSegment } from \"./SchedulerProEventSegment.js\";\nimport { ResourceAllocationInfo, SchedulerProResourceMixin } from \"./SchedulerProResourceMixin.js\";\n//---------------------------------------------------------------------------------------------------------------------\n/**\n * Scheduler Pro project mixin type. At this level, events are scheduled according to the incoming dependencies\n * and calendars of the assigned resources.\n *\n * The base event class for this level is [[SchedulerProEvent]]. The base dependency class is [[SchedulerProDependencyMixin]]\n */\nexport class SchedulerProProjectMixin extends Mixin([SchedulerBasicProjectMixin, ConstrainedEarlyEventMixin, HasChildrenMixin], (base) => {\n    const superProto = base.prototype;\n    class SchedulerProProjectMixin extends base {\n        construct(config = {}) {\n            this.eventSegmentModelClass = config.eventSegmentModelClass || this.getDefaultEventSegmentModelClass();\n            superProto.construct.call(this, config);\n            if (!this.resourceAllocationInfoClass)\n                this.resourceAllocationInfoClass = this.getDefaultResourceAllocationInfoClass();\n        }\n        getDefaultEventStoreClass() {\n            return ChronoEventStoreMixin;\n        }\n        getDefaultEventSegmentModelClass() {\n            return SchedulerProEventSegment;\n        }\n        getDefaultResourceAllocationInfoClass() {\n            return ResourceAllocationInfo;\n        }\n        *calculateDirection() {\n            return yield ProposedOrPrevious;\n        }\n        afterConfigure() {\n            superProto.afterConfigure.apply(this, arguments);\n            this.dateConstraintIntervalClass = this.dateConstraintIntervalClass || DateConstraintInterval;\n            this.dependencyConstraintIntervalClass = this.dependencyConstraintIntervalClass || DependencyConstraintInterval;\n        }\n        getType() {\n            return ProjectType.SchedulerPro;\n        }\n        getDefaultCycleEffectClass() {\n            return SchedulerProCycleEffect;\n        }\n        getDefaultEventModelClass() {\n            return SchedulerProEvent;\n        }\n        getDefaultDependencyModelClass() {\n            return SchedulerProDependencyMixin;\n        }\n        getDefaultAssignmentModelClass() {\n            return SchedulerProAssignmentMixin;\n        }\n        getDefaultResourceModelClass() {\n            return SchedulerProResourceMixin;\n        }\n        /**\n         * Validates a hypothetical dependency with provided parameters.\n         *\n         * ```typescript\n         * // let's check if a EndToStart dependency linking event1 with event2 will be valid\n         * const validationResult = await project.validateDependency(event1, event2, DependencyType.EndToStart);\n         *\n         * switch (validationResult) {\n         *     const DependencyValidationResult.CyclicDependency :\n         *         console.log('Dependency builds a cycle');\n         *         break;\n         *\n         *     const DependencyValidationResult.DuplicatingDependency :\n         *         console.log('Such dependency already exists');\n         *         break;\n         *\n         *     const DependencyValidationResult.NoError :\n         *         console.log('Dependency is valid');\n         * }\n         * ```\n         *\n         * See also [[isValidDependency]] method for more basic usage.\n         *\n         * @param fromEvent The dependency predecessor\n         * @param toEvent The dependency successor\n         * @param type The dependency type\n         * @param ignoreDependency Dependencies to ignore while validating. This parameter can be used for example if one plans to change\n         * an existing dependency properties and wants to know if the change will lead to an error:\n         *\n         * ```typescript\n         * // let's check if changing of the dependency predecessor to newPredecessor will make it invalid\n         * const validationResult = await project.validateDependency(newPredecessor, dependency.toEvent, dependency.type, dependency);\n         *\n         * if (validationResult !== DependencyValidationResult.NoError) console.log(\"The dependency is invalid\");\n         * ```\n         * @return The validation result\n         */\n        async validateDependency(fromEvent, toEvent, type, ignoreDependency) {\n            let ingoredDependencies;\n            if (ignoreDependency) {\n                ingoredDependencies = Array.isArray(ignoreDependency) ? ignoreDependency : [ignoreDependency];\n            }\n            const alreadyLinked = CI(fromEvent.outgoingDeps).some((dependency) => dependency.toEvent === toEvent && !ingoredDependencies?.includes(dependency));\n            if (alreadyLinked)\n                return DependencyValidationResult.DuplicatingDependency;\n            if (await this.isDependencyCyclic(fromEvent, toEvent, type, ingoredDependencies)) {\n                return DependencyValidationResult.CyclicDependency;\n            }\n            return DependencyValidationResult.NoError;\n        }\n        /**\n         * Validates a hypothetical dependency with provided parameters.\n         *\n         * ```typescript\n         * // let's check if a EndToStart dependency linking event1 with event2 will be valid\n         * if (await project.isValidDependency(event1, event2, DependencyType.EndToStart)) {\n         *     console.log('Dependency is valid');\n         * } else {\n         *     console.log('Dependency is invalid');\n         * }\n         * ```\n         *\n         * See also [[validateDependency]] method for more detailed validation results.\n         *\n         * @param fromEvent The dependency predecessor\n         * @param toEvent The dependency successor\n         * @param type The dependency type\n         * @param ignoreDependency Dependencies to ignore while validating. This parameter can be used for example if one plans to change\n         * an existing dependency properties and wants to know if the change will lead to an error:\n         *\n         * ```typescript\n         * // let's check if changing of the dependency predecessor to newPredecessor will make it invalid\n         * if (await project.isValidDependency(newPredecessor, dependency.toEvent, dependency.type, dependency)) console.log(\"The dependency is valid\");\n         * ```\n         * @return The validation result\n         */\n        // this does not account for possible scheduling conflicts\n        async isValidDependency(fromEvent, toEvent, type, ignoreDependency) {\n            const validationResult = await this.validateDependency(fromEvent, toEvent, type, ignoreDependency);\n            return validationResult === DependencyValidationResult.NoError;\n        }\n        getDependencyCycleDetectionIdentifiers(fromEvent, toEvent) {\n            return [\n                // @ts-ignore\n                toEvent.$.earlyStartDateConstraintIntervals,\n                // @ts-ignore\n                toEvent.$.earlyEndDateConstraintIntervals\n            ];\n        }\n        async isDependencyCyclic(fromEvent, toEvent, type, ignoreDependency) {\n            const dependencyClass = this.getDependencyStore().modelClass;\n            const dependency = new dependencyClass({ fromEvent, toEvent, type });\n            const branch = this.replica.branch({ autoCommit: false, onComputationCycle: 'throw' });\n            if (ignoreDependency) {\n                if (!Array.isArray(ignoreDependency)) {\n                    ignoreDependency = [ignoreDependency];\n                }\n                ignoreDependency.forEach(dependency => branch.removeEntity(dependency));\n            }\n            branch.addEntity(dependency);\n            dependency.project = this;\n            // search for identifiers reading of which finds a cycle\n            // for (const i of Object.keys(toEvent.$)) {\n            //     try {\n            //         await branch.readAsync(toEvent.$[i])\n            //     } catch (e) {\n            //         if (/cycle/i.test(e)) {\n            //             // dump found identifier names to console\n            //             console.log(i)\n            //         }\n            //         else\n            //             throw e\n            //     }\n            // }\n            try {\n                await Promise.all(this.getDependencyCycleDetectionIdentifiers(fromEvent, toEvent).map(i => branch.readAsync(i)));\n                return false;\n            }\n            catch (e) {\n                // return true for the cycle exception and re-throw all others\n                if (/cycle/i.test(e))\n                    return true;\n                // We don't throw on conflicts here ..it's supposed to happen when the changes really reach the graph\n                if (!/conflict/i.test(e)) {\n                    throw e;\n                }\n            }\n        }\n        // work in progress\n        // This method validates changes (e.g. type) for existing dependencies (which are already in the store)\n        async isValidDependencyModel(dependency, ignoreDependencies) {\n            return this.isValidDependency(dependency.fromEvent, dependency.toEvent, dependency.type, ignoreDependencies);\n        }\n    }\n    __decorate([\n        model_field({ type: 'string', defaultValue: DependenciesCalendar.ToEvent })\n    ], SchedulerProProjectMixin.prototype, \"dependenciesCalendar\", void 0);\n    __decorate([\n        model_field({ type: 'boolean', defaultValue: true })\n    ], SchedulerProProjectMixin.prototype, \"autoCalculatePercentDoneForParentTasks\", void 0);\n    __decorate([\n        model_field({ type: 'boolean', defaultValue: true })\n    ], SchedulerProProjectMixin.prototype, \"addConstraintOnDateSet\", void 0);\n    return SchedulerProProjectMixin;\n}) {\n}\n/**\n * A cycle resolution deactivating one of the [[getDependencies|related dependencies]].\n * The dependency instance should be passed to [[resolve]] method:\n *\n * ```typescript\n * // this call will deactivate dependencyRecord\n * removalResolution.resolve(dependencyRecord)\n * ```\n */\nexport class DeactivateDependencyCycleEffectResolution extends Localizable(SchedulingIssueEffectResolution) {\n    static get $name() {\n        return 'DeactivateDependencyCycleEffectResolution';\n    }\n    getDescription() {\n        return this.L('L{descriptionTpl}');\n    }\n    resolve(dependency) {\n        dependency.active = false;\n    }\n}\n/**\n * Class implementing a special effect signalizing of a computation cycle.\n * The class suggests two [[getResolutions|resolutions]] - either removing or deactivating one of\n * the [[getDependencies|related dependencies]].\n */\nexport class SchedulerProCycleEffect extends CycleEffect {\n    /**\n     * Returns dependencies taking part in the cycle that are treated as invalid.\n     * For example a \"parent-child\" dependency or a dependency linking a task to itself.\n     */\n    getInvalidDependencies() {\n        if (!this._invalidDependencies) {\n            const dependencies = this.getDependencies();\n            this._invalidDependencies = dependencies.filter(dependency => \n            // @ts-ignore\n            dependency.fromEvent === dependency.toEvent || (dependency.fromEvent.contains(dependency.toEvent) || dependency.toEvent.contains(dependency.fromEvent)));\n        }\n        return this._invalidDependencies;\n    }\n    buildInvalidDependencyResolutions(config) {\n        return [\n            this.removeDependencyConflictResolutionClass.new(config),\n            this.deactivateDependencyConflictResolutionClass.new(config)\n        ];\n    }\n    matchDependencyBySourceAndTargetEvent(dependency, from, to) {\n        return dependency.active && super.matchDependencyBySourceAndTargetEvent(dependency, from, to);\n    }\n    getResolutions() {\n        if (!this._resolutions) {\n            const invalidDependencies = this.getInvalidDependencies();\n            const result = [];\n            for (const dependency of invalidDependencies) {\n                result.push(...this.buildInvalidDependencyResolutions({ dependency }));\n            }\n            // If we have invalid dependencies we do not suggest other dependency resolutions\n            // to force resolving the invalid ones first\n            if (!invalidDependencies.length) {\n                result.push(this.deactivateDependencyCycleEffectResolutionClass.new(), ...super.getResolutions());\n            }\n            this._resolutions = result;\n        }\n        return this._resolutions;\n    }\n}\n__decorate([\n    prototypeValue(DeactivateDependencyCycleEffectResolution)\n], SchedulerProCycleEffect.prototype, \"deactivateDependencyCycleEffectResolutionClass\", void 0);\n__decorate([\n    prototypeValue(RemoveDependencyResolution)\n], SchedulerProCycleEffect.prototype, \"removeDependencyConflictResolutionClass\", void 0);\n__decorate([\n    prototypeValue(DeactivateDependencyResolution)\n], SchedulerProCycleEffect.prototype, \"deactivateDependencyConflictResolutionClass\", void 0);\n", "import Objects from './Objects.js';\nimport StringHelper from '../StringHelper.js';\n/**\n * @module Core/helper/util/DomClassList\n */\nconst\n    // Presence of '[' is likely an \"[object Object]\" or other bogus stringification\n    invalidClsRe  = /\\[|undefined|null/,\n    valueSymbol   = Symbol('value'),\n    lengthSymbol  = Symbol('length');\n/**\n * This class encapsulates a list of CSS classes which can be set as the `className`\n * on an `HTMLElement`.\n *\n * Properties names set on this class equate to *adding* a class if the property's value\n * is _truthy_, or removing a class if the value is _falsy_.\n *\n * ```javascript\n * const myClassList = new DomClassList('b-test-button');\n *\n * myClassList.add('test-class');\n * myClassList.important = 1;\n *\n * myHtmlElement.className = myClassList; // Sets it to \"b-test-button test-class important\"\n * ```\n */\nexport default class DomClassList {\n    static change(cls, add, remove, as = 'string') {\n        remove = DomClassList.normalize(remove, 'object');\n        const after = DomClassList.normalize(cls, 'array').filter(c => !remove[c]);\n        if (add) {\n            add = DomClassList.normalize(add, 'array');\n            for (let i = 0; i < add.length; ++i) {\n                if (!after.includes(add[i])) {\n                    after.push(add[i]);\n                }\n            }\n        }\n        return DomClassList.normalize(after, as);\n    }\n    static from(classes, returnEmpty) {\n        if (classes) {\n            if (classes.isDomClassList) {\n                returnEmpty = returnEmpty ?? true;\n            }\n            else {\n                returnEmpty = returnEmpty ?? (Objects.isObject(classes) && !Objects.isEmpty(classes));\n                classes = new DomClassList(classes);\n            }\n            if (!classes.value && !returnEmpty) {\n                classes = null;\n            }\n        }\n        return classes || (returnEmpty ? new DomClassList() : null);\n    }\n    /**\n     * Converts a class name of any understood type to a desired form.\n     * @param {String|String[]|Object|Set|Map|HTMLElement} cls\n     * @param {String} as Pass `'object'` to return an object with the class names as its keys (all keys will have a\n     * value of `true`), or pass `'array'` to return an array of class names, or pass `'string'` (the default) to\n     * return a space-separated string of class names.\n     * @returns {String|String[]|Object}\n     * @internal\n     */\n    static normalize(cls, as = 'string') {\n        cls = cls || '';  // promote null to '' to avoid typeof snag\n        const\n            type = typeof cls,\n            asArray = as === 'array',\n            asObject = as === 'object',\n            asString = !asArray && !asObject;\n        let isString = type === 'string',\n            c, i, ret;\n        if (type === 'object') {\n            if (cls.nodeType === Element.ELEMENT_NODE && typeof cls.getAttribute === 'function') {\n                cls = cls.getAttribute('class') || '';  // cannot use className for SVG el's\n                isString = true;\n            }\n            else if (cls?.isDomClassList) {\n                cls = cls.values;\n            }\n            else if (cls instanceof DOMTokenList) {\n                cls = Array.from(cls);\n            }\n            else if (cls instanceof Map) {\n                cls = Array.from(cls.keys()).filter(k => cls.get(k));\n            }\n            else if (cls instanceof Set) {\n                cls = Array.from(cls);\n            }\n            else if (!Array.isArray(cls)) {\n                cls = Objects.getTruthyKeys(cls);\n            }\n        }\n        if (isString) {\n            // Pass through Set to ensure only unique class names\n            cls = [...new Set(StringHelper.split(cls))];\n        }\n        // cls is now an array\n        for (i = cls.length; i-- > 0; /* empty */) {\n            c = cls[i];\n            if (!c.length) {\n                cls.splice(i, 1);\n            }\n            else if (c.includes(' ')) {\n                cls.splice(i, 1, ...StringHelper.split(c));\n            }\n        }\n        if (asArray) {\n            ret = cls;\n        }\n        else if (asString) {\n            ret = cls.join(' ');\n        }\n        else {\n            ret = Object.create(null);\n            for (i = 0; i < cls.length; ++i) {\n                ret[cls[i]] = true;\n            }\n        }\n        return  ret;\n    }\n    /**\n     * Initializes a new DomClassList.\n     * @param {...String|Object} classes The CSS classes as strings or objects.\n     * @function constructor\n     */\n    constructor(...classes) {\n        this.process(1, classes);\n    }\n    /**\n     * Clears all class names from this DomClassList instance.\n     * @returns {Core.helper.util.DomClassList} this DomClassList.\n     */\n    clear() {\n        // Keep internal class same shape. Do not delete members.\n        for (const key in this) {\n            this[key] = false;\n        }\n        return this;\n    }\n    /**\n     * Sets this DomClassList instance to represent the classes passed as either strings or objects.\n     * @returns {Core.helper.util.DomClassList} this DomClassList.\n     */\n    set(...classes) {\n        return this.clear().process(1, classes);\n    }\n    // To gain some speed in DomHelper.sync(), faster than instanceof etc\n    get isDomClassList() {\n        return true;\n    }\n    /**\n     * Returns a clone of this DomClassList with all the same keys set.\n     * @returns {Core.helper.util.DomClassList} A clone of this DomClassList.\n     */\n    clone() {\n        return new DomClassList(this);\n    }\n    /**\n     * Returns a Boolean value, indicating whether this ClassList has the specified CSS class name.\n     * @param {String} className CSS class name to check\n     * @returns {Boolean} true if this ClassList contains the passed CSS class name, false otherwise\n     */\n    contains(className) {\n        if (typeof className === 'string' && className) {\n            return Boolean(this[className]);\n        }\n        return false;\n    }\n    // An instance of this class may be assigned directly to an element's className\n    // it will be coerced to a string value using this method.\n    toString() {\n        // Adding space at the end if there is content to make concatenation code simpler in renderers.\n        return this.length ? `${this.value} ` : '';\n    }\n    toJSON() {\n        return this.toString();\n    }\n    /**\n     * Analogous to string.trim, returns the string value of this `DomClassList` with no trailing space.\n     * @returns {String} A concatenated string value of all the class names in this `DomClassList`\n     * separated by spaces.\n     */\n    trim() {\n        return this.value;\n    }\n    /**\n     * Compares this DomClassList to another DomClassList (or class name string of space separated classes).\n     * If the same class names (regardless of order) are present, the two are considered equal.\n     *\n     * So `new DomClassList('foo bar bletch').isEqual('bletch bar foo')` would return `true`\n     * @param {Core.helper.util.DomClassList|String} other The `DomClassList` or string of classes to compare to.\n     * @returns {Boolean} `true` if the two contain the same class names.\n     */\n    isEqual(other) {\n        const\n            otherClasses = DomClassList.normalize(other, 'array'),\n            len = otherClasses.length;\n        if (this.length === len) {\n            for (let i = 0; i < len; i++) {\n                if (!this[otherClasses[i]]) {\n                    return false;\n                }\n            }\n            return true;\n        }\n        return false;\n    }\n    /**\n     * Get/set string value.\n     * Class names separated with space.\n     * @property {String}\n     */\n    get value() {\n        let value = this[valueSymbol],\n            keys;\n        if (value == null) {\n            keys = Objects.getTruthyKeys(this);\n            this[lengthSymbol] = keys.length;\n            this[valueSymbol] = value = keys.join(' ');\n        }\n        return value;\n    }\n    set value(value) {\n        const\n            me = this,\n            keys = Object.keys(me),\n            len = keys.length;\n        for (let i = 0; i < len; i++) {\n            delete me[keys[i]];\n        }\n        if (value) {\n            me.process(1, [value]);\n        }\n        else {\n            // String value needs recalculating\n            delete me[valueSymbol];\n        }\n    }\n    /**\n     * Returns string values as an array.\n     * @readonly\n     * @property {String[]}\n     */\n    get values() {\n        return Objects.getTruthyKeys(this);\n    }\n    get length() {\n        // Maintainer: We MUST access the value getter to force\n        // the value to be calculated if it's currently dirty.\n        return this.value ? this[lengthSymbol] : 0;\n    }\n    process(value, classes) {\n        for (let cls, k, i = 0; i < classes.length; i++) {\n            if (classes[i]) {\n                cls = classes[i];\n                if (cls.isDomClassList || Objects.isObject(cls)) {\n                    // preserve all keys, even falsy ones\n                    for (k in cls) {\n                        this[k] = value ? cls[k] : !cls[k];\n                    }\n                }\n                else {\n                    cls = DomClassList.normalize(classes[i], 'array');\n                    for (k = 0; k < cls.length; ++k) {\n                        this[cls[k]] = value;\n                    }\n                }\n            }\n        }\n        // String value needs recalculating\n        delete this[valueSymbol];\n        return this;\n    }\n    /**\n     * Adds/removes class names according to the passed object's properties.\n     *\n     * Properties with truthy values are added.\n     * Properties with falsy values are removed.\n     * @param {Object} classList Object containing properties to set/clear\n     */\n    assign(classList) {\n        for (const cls in classList) {\n            if (!this[cls] !== !classList[cls]) {\n                this[cls] = classList[cls];\n                // String value needs recalculating\n                delete this[valueSymbol];\n            }\n        }\n        return this;\n    }\n    /**\n     * Adds/removes this objects classes to the passed `classList` or element.\n     *\n     * Properties with truthy values are added.\n     * Properties with falsy values are removed.\n     * @param {HTMLElement|DOMTokenList} element The element or the element's `classList` to be updated.\n     */\n    assignTo(element) {\n        const\n            classList = element.nodeType === Element.ELEMENT_NODE ? element.classList : element,\n            temp      = DomClassList.from(classList);\n        temp.add(this);\n        classList.value = temp.value;\n    }\n    /**\n     * Add CSS class(es)\n     * ```\n     * myClassList.add('bold', 'small');\n     * ```javascript\n     * @param {String|String[]|Object} classes CSS classes to add\n     */\n    add(...classes) {\n        return this.process(1, classes);\n    }\n    /**\n     * Remove CSS class(es)\n     * ```javascript\n     * myClassList.remove('bold', 'small');\n     * ```\n     * @param {String} classes CSS classes to remove\n     */\n    remove(...classes) {\n        return this.process(0, classes);\n    }\n    /**\n     * Toggles the passed CSS class name.\n     *\n     * If the `force` parameter is passed, `true` means add the class name, `false` means remove it.\n     *\n     * ```javascript\n     * myClassList.toggle('bold', isImportant);\n     * ```\n     * @param {String} className CSS class to toggle\n     * @param {Boolean} [force] `true` to add the class, `false` to remove it.\n     * @returns {Boolean} `true` if the operation changed the value.\n     */\n    toggle(className, flag = Boolean(!this[className])) {\n        flag = Boolean(flag);\n        // Only disturb the set classwes if we need to.\n        if (Boolean(this[className]) !== flag) {\n            this[className] = flag;\n            // String value needs recalculating\n            delete this[valueSymbol];\n            return true;\n        }\n    }\n    /**\n     * Analogous to the `String#split` method, but with no delimiter\n     * parameter. This method returns an array containing the individual\n     * CSS class names set.\n     * @returns {String[]} The individual class names in this `DomClassList`\n     */\n    split() {\n        return Objects.getTruthyKeys(this);\n    }\n    forEach(fn) {\n        return Objects.getTruthyKeys(this).forEach(fn);\n    }\n};\n// We put this on the prototype and delete it from instances to mark dirty state. This maintains the same shape for\n// the instance to help the JIT\nDomClassList.prototype[valueSymbol] = null;\nDomClassList._$name = 'DomClassList';", "import Store from './Store.js';\nimport AjaxHelper from '../helper/AjaxHelper.js';\nimport ObjectHelper from '../helper/ObjectHelper.js';\n/**\n * @module Core/data/AjaxStore\n */\n/**\n * Http methods used by the AjaxStore in restful mode.\n * @typedef {Object} HttpMethods\n * @property {'POST'|'PUT'} create\n * @property {'GET'|'POST'} read\n * @property {'PATCH'|'POST'|'PUT'} update\n * @property {'DELETE'|'POST'} delete\n */\nconst\n    processParamEntry = (paramArray, entry) => {\n        if (Array.isArray(entry[1])) {\n            entry[1].forEach(value => paramArray.push(encodeURIComponent(entry[0]) + '=' + encodeURIComponent(value)));\n        }\n        else {\n            paramArray.push(encodeURIComponent(entry[0]) + '=' + encodeURIComponent(entry[1]));\n        }\n        return paramArray;\n    },\n    immediatePromise  = Promise.resolve(),\n    prependZeros = num => {\n        return String(num).padStart(2, '0');\n    },\n    dateToString = date => {\n        return `${ date.getFullYear() }-${ prependZeros(date.getMonth() + 1) }-${ prependZeros(date.getDate()) }T${ prependZeros(date.getHours()) }:${ prependZeros(date.getMinutes()) }:${ prependZeros(date.getSeconds()) }.${ date.getMilliseconds() }`;\n    };\n/**\n * Store that uses the [Fetch API](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch) to read data\n * from a remote server, and optionally sends synchronization requests to the server containing information about\n * locally created, modified and deleted records.\n *\n * ## Create\n * Posts array of JSON data for newly added records to {@link #config-createUrl}, expects response containing an array\n * of JSON objects in same order with id set (uses Model#idField as id).\n *\n * ## Read\n * Reads array of JSON data from the data packet returned from the {@link #config-readUrl}. Unique id for each row is\n * required.\n *\n * By default looks in field 'id' but can be configured by setting {@link Core.data.Model#property-idField-static}.\n *\n * ## Update\n * Posts array of JSON data containing modified records to {@link #config-updateUrl}. By default, only changed fields\n * and any fields configured with {@link Core.data.field.DataField#config-alwaysWrite} are sent.\n * If you want all fields to always be sent, please see {@link #config-writeAllFields}\n *\n * ## Delete\n * Posts to {@link #config-deleteUrl} with removed records ids (for example id=1,4,7).\n *\n * ```javascript\n * new AjaxStore({\n *   createUrl  : 'php/create',\n *   readUrl    : 'php/read',\n *   updateUrl  : 'php/update',\n *   deleteUrl  : 'php/delete',\n *   modelClass : Customer\n * });\n * ```\n *\n * ## Pagination\n * Configuring an `AjaxStore` with {@link #config-pageParamName} or {@link #config-pageStartParamName} means that the\n * store requests **pages** of data from the remote source, sending the configured {@link #config-pageParamName} or\n * {@link #config-pageStartParamName} to request the page along with the {@link #config-pageSizeParamName}.\n *\n * If `pageParamName` is set, that is passed with the requested page number **(one based)**, along with the\n * {@link #config-pageSizeParamName}.\n *\n * If `pageStartParamName` is set, that is passed with the requested page starting record index **(zero based)**, along\n * with the {@link #config-pageSizeParamName}.\n *\n * ## Remote filtering\n * To specify that filtering is the responsibility of the server, configure the store with\n * `{@link #config-filterParamName}: 'nameOfFilterParameter'`\n *\n * When this is set, any {@link Core.data.mixin.StoreFilter#function-filter} operation causes the store to reload\n * itself, encoding the filters as JSON representations in the {@link #config-filterParamName} HTTP parameter.\n *\n * The filters will look like this:\n * ```javascript\n * {\n *     \"field\": \"country\",\n *     \"operator\": \"=\",\n *     \"value\": \"sweden\",\n *     \"caseSensitive\": false\n * }\n * ```\n *\n * If the value of the filter is a date - it is serialized as a local time, using the format: `YYYY-MM-DDThh:mm:ss.ms`\n *\n * The encoding may be overridden by configuring an implementation of {@link #function-encodeFilterParams}\n * into the store which returns the value for the {@link #config-filterParamName} when passed an _Iterable_ of filters.\n *\n * ## Remote sorting\n * To specify that sorting is the responsibility of the server, configure the store with\n * `{@link #config-sortParamName}: 'nameOfSortParameter'`\n *\n * When this is set, any {@link Core.data.mixin.StoreSort#function-sort} operation causes the store to\n * reload itself, encoding the sorters as JSON representations in the {@link #config-sortParamName} HTTP\n * parameter.\n *\n * The sorters will look like this:\n * ```javascript\n * {\n *     \"field\": \"name\",\n *     \"ascending\": true\n * }\n * ```\n *\n * The encoding may be overridden by configuring an implementation of {@link #function-encodeSorterParams}\n * into the store which returns the value for the {@link #config-sortParamName} when passed an _Iterable_ of sorters.\n *\n * ## Passing HTTP headers\n * As mentioned above `AjaxStore` uses the Fetch API under the hood. Specify {@link #config-fetchOptions} and/or\n * {@link #config-headers} to have control over the options passed with all fetch calls. For example to pass along an\n * authorization header:\n *\n * ```javascript\n * const store = new AjaxStore({\n *    headers : {\n *        Authorization : 'auth-contents-goes-here'\n *    }\n * });\n * ```\n *\n * Learn more about the Fetch API over at [MDN](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch).\n *\n * @extends Core/data/Store\n */\nexport default class AjaxStore extends Store {\n    static $name = 'AjaxStore';\n    // region Events\n    /**\n     * Fired when a remote request fails, either at the network level, or the server returns a failure, or an invalid\n     * response.\n     *\n     * Note that when a {@link #function-commit} fails, more than one exception event will be triggered. The individual\n     * operation, `create`, `update` or `delete` will trigger their own `exception` event, but the encapsulating commit\n     * operation will also trigger an `exception` event when all the operations have finished, so if exceptions are\n     * going to be handled gracefully, the event's `action` property must be examined, and the constituent operations of\n     * the event must be examined.\n     * @event exception\n     * @param {Core.data.Store} source This Store\n     * @param {Boolean} exception `true`\n     * @param {'create'|'read'|'update'|'delete'|'commit'} action Action that failed, `'create'`, `'read'`,\n     * `'update'` or `'delete'`. May also be fired with '`commit'` to indicate the failure of an aggregated `create`,\n     * `update` and `delete` operation. In this case, the event will contain a property for each operation of the commit\n     * named `'create'`, `'update'` and `'delete'`, each containing the individual `exception` events.\n     * @param {'network'|'failure'} exceptionType The type of failure, `'network'` or `'server'`\n     * @param {Response} response the `Response` object\n     * @param {Object} json The decoded response object *if the exceptionType is `'server'`*\n     */\n    /**\n     * Fired after committing added records\n     * @event commitAdded\n     * @param {Core.data.Store} source This Store\n     */\n    /**\n     * Fired after committing modified records\n     * @event commitModified\n     * @param {Core.data.Store} source This Store\n     */\n    /**\n     * Fired on successful load\n     * @event load\n     * @param {Core.data.Store} source This Store\n     * @param {Object[]} data Data loaded\n     * @param {Response} response the `Response` object\n     * @param {Object} json The decoded response object.\n     */\n    /**\n     * Fired on successful load of remote child nodes for a tree node.\n     * @event loadChildren\n     * @param {Core.data.Store} source This Store\n     * @param {Object[]} data Data loaded\n     * @param {Object} json The decoded response object.\n     */\n    /**\n     * Fired after committing removed records\n     * @event commitRemoved\n     * @param {Core.data.Store} source This Store\n     */\n    /**\n     * Fired before loading starts. Allows altering parameters and is cancelable\n     * @event beforeLoad\n     * @preventable\n     * @param {Core.data.Store} source This Store\n     * @param {Object} params An object containing property/name pairs which are the parameters.\n     * This may be mutated to affect the parameters used in the Ajax request.\n     */\n    /**\n     * Fired before loading of remote child nodes of a tree node starts. Allows altering parameters and is cancelable\n     * @event beforeLoadChildren\n     * @preventable\n     * @param {Core.data.Store} source This Store\n     * @param {Object} params An object containing property/name pairs which are the parameters.\n     * This may be mutated to affect the parameters used in the Ajax request.\n     */\n    /**\n     * When the store {@link #property-isPaged is paged}, this is fired before loading a page and is cancelable\n     * @event beforeLoadPage\n     * @preventable\n     * @param {Core.data.Store} source This Store\n     * @param {Object} params An object containing property/name pairs which are the parameters.\n     * This may be mutated to affect the parameters used in the Ajax request.\n     */\n    /**\n     * Fired when loading is beginning. This is not cancelable. Parameters in the event may still be\n     * mutated at this stage.\n     * @event loadStart\n     * @param {Core.data.Store} source This Store\n     * @param {Object} params An object containing property/name pairs which are the parameters.\n     * This may be mutated to affect the parameters used in the Ajax request.\n     */\n    /**\n     * Fired when loading of remote child nodes into a tree node is beginning. This is not cancelable. Parameters in the\n     * event may still be mutated at this stage.\n     * @event loadChildrenStart\n     * @param {Core.data.Store} source This Store\n     * @param {Object} params An object containing property/name pairs which are the parameters.\n     * This may be mutated to affect the parameters used in the Ajax request.\n     */\n    /**\n     * Fired before any remote request is initiated.\n     * @event beforeRequest\n     * @param {Core.data.Store} source This Store\n     * @param {Object} params An object containing key/value pairs that are passed on the request query string\n     * @param {Object} body The body of the request to be posted to the server.\n     * @param {'create'|'read'|'update'|'delete'} action Action that is making the request, `'create'`,\n     * `'read'`, `'update'` or `'delete'`\n     */\n    /**\n     * Fired after any remote request has finished whether successfully or unsuccessfully.\n     * @event afterRequest\n     * @param {Boolean} exception `true`. *Only present if the request triggered an exception.*\n     * @param {'create'|'read'|'update'|'delete'} action Action that has finished, `'create'`, `'read'`,\n     * `'update'` or `'delete'`\n     * @param {'network'|'failure'} exceptionType The type of failure, `'network'` or `'server'`. *Only present\n     * if the request triggered an exception.*\n     * @param {Response} response The `Response` object\n     * @param {Object} json The decoded response object if there was no `'network'` exception.\n     */\n    // endregion\n    //region Config\n    static get defaultConfig() {\n        return {\n            /**\n             * A string keyed object containing the HTTP headers to add to each server request issued by this store.\n             *\n             * `AjaxStore` uses the Fetch API under the hood, read more about headers on\n             * [MDN](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch#headers)\n             *\n             * Example usage:\n             *\n             * ```javascript\n             * const store = new AjaxStore({\n             *    headers : {\n             *        Authorization : 'auth-contents-goes-here'\n             *    }\n             * });\n             * ```\n             *\n             * @config {Object<String,String>}\n             * @category Remote\n             */\n            headers : null,\n            /**\n             * An object containing the Fetch options to pass to each server request issued by this store. Use this to\n             * control if credentials are sent and other options, read more at\n             * [MDN](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch#supplying_request_options).\n             *\n             * Example usage:\n             *\n             * ```javascript\n             * const store = new AjaxStore({\n             *    fetchOptions : {\n             *        credentials : 'omit',\n             *        redirect    : 'error'\n             *    }\n             * });\n             * ```\n             *\n             * @config {Object}\n             * @category Remote\n             */\n            fetchOptions : null,\n            /**\n             * Specify `true` to send payloads as form data, `false` to send as regular JSON.\n             * @config {Boolean}\n             * @default false\n             * @category Remote\n             */\n            sendAsFormData : null,\n            /**\n             * Specify `true` to send all model fields when committing modified records (as opposed to just the\n             * modified fields)\n             * @config {Boolean}\n             * @default false\n             * @category Remote\n             */\n            writeAllFields : null,\n            /**\n             * The name of the HTTP parameter passed to this Store's {@link #config-readUrl} to indicate the node `id`\n             * to load when loading child nodes on demand if the node being expanded was created with data containing\n             * `children: true`.\n             * @config {String}\n             * @default\n             * @category Remote\n             */\n            parentIdParamName : 'id',\n            /**\n             * The optional property name in JSON responses from the server that contains a boolean\n             * success/fail status.\n             * ```json\n             * {\n             *   \"responseMeta\" : {\n             *   {\n             *     \"success\" : true,\n             *     \"count\" : 100\n             *   },\n             *   // The property name used here should match that of 'responseDataProperty'\n             *   \"data\" : [\n             *     ...\n             *   ]\n             * }\n             * ```\n             *\n             * The store would be configured with:\n             * ```javascript\n             *  {\n             *      ...\n             *      successDataProperty : 'responseMeta.success',\n             *      responseTotalProperty : 'responseMeta.count'\n             *      ...\n             *  }\n             *\n             * ```\n             * @config {String}\n             * @default\n             * @category Remote\n             */\n            responseSuccessProperty : 'success',\n            /**\n             * The property name in JSON responses from the server that contains the data for the records\n             * ```json\n             * {\n             *   \"success\" : true,\n             *   // The property name used here should match that of 'responseDataProperty'\n             *   \"data\" : [\n             *     ...\n             *   ]\n             * }\n             * ```\n             * @config {String}\n             * @default\n             * @category Remote\n             */\n            responseDataProperty : 'data',\n            /**\n             * The property name in JSON responses from the server that contains the dataset total size\n             * **when this store {@link #property-isPaged is paged}**\n             * ```json\n             * {\n             *   \"success\" : true,\n             *   // The property name used here should match that of 'responseDataProperty'\n             *   \"data\" : [\n             *     ...\n             *   ],\n             *   // The property name used here should match that of 'responseTotalProperty'\n             *   \"total\" : 65535\n             * }\n             * ```\n             * @config {String}\n             * @default\n             * @category Remote\n             */\n            responseTotalProperty : 'total',\n            /**\n             * The name of the HTTP parameter to use to pass any encoded filters when loading data from the server and a\n             * filtered response is required.\n             *\n             * **Note:** When this is set, filters must be defined using a field name, an operator and a value\n             * to compare, **not** a comparison function.\n             * @config {String}\n             * @category Remote\n             */\n            filterParamName : null,\n            /**\n             * Set this flag to true if you are filtering remote using restful URLs (e.g.\n             * https://nominatim.openstreetmap.org/search/paris?format=json)\n             *\n             * **Note:** When this is set, the filter string is appended to the readUrl.\n             * @config {Boolean}\n             * @category Remote\n             */\n            restfulFilter : false,\n            /**\n             * The name of the HTTP parameter to use to pass any encoded sorters when loading data from the server and a\n             * sorted response is required.\n             *\n             * **Note:** When this is set, sorters must be defined using a field name and an ascending flag,\n             * **not** a sort function.\n             * @config {String}\n             * @category Remote\n             */\n            sortParamName : null,\n            /**\n             * The name of the HTTP parameter to use when requesting pages of data using the **one based** page number\n             * required.\n             * @config {String}\n             * @category Paging\n             */\n            pageParamName : null,\n            /**\n             * The name of the HTTP parameter to use when requesting pages of data using the **zero based** index of the\n             * required page's starting record.\n             * @config {String}\n             * @category Paging\n             */\n            pageStartParamName : null,\n            /**\n             * The name of the HTTP parameter to use when requesting pages of data using the **zero based** index of the\n             * required page's starting record.\n             * @config {String}\n             * @default\n             * @category Paging\n             */\n            pageSizeParamName : 'pageSize',\n            /**\n             * When paging of data is requested by setting _either_ the {@link #config-pageParamName} _or_ the\n             * {@link #config-pageStartParamName}, this is the value to send in the {@link #config-pageSizeParamName}.\n             * @config {Number}\n             * @default\n             * @category Paging\n             */\n            pageSize : 50,\n            /**\n             * Set to \u00B4true\u00B4 to use restful {@link #config-httpMethods}\n             * @config {Boolean}\n             * @default false\n             * @category Remote\n             */\n            useRestfulMethods : null,\n            /**\n             * The HTTP methods to use for CRUD requests when {@link #config-useRestfulMethods} is enabled.\n             *\n             * ```javascript\n             * new AjaxStore({\n             *    useRestfulMethods : true,\n             *    httpMethods : {\n             *        create : 'POST',\n             *        read   : 'POST',\n             *        update : 'PATCH',\n             *        delete : 'DELETE'\n             *    }\n             * });\n             *\n             * ```\n             * @config {HttpMethods}\n             * @default\n             * @category Remote\n             */\n            httpMethods : {\n                create : 'POST',\n                read   : 'GET',\n                update : 'PUT',\n                delete : 'DELETE'\n            }\n        };\n    }\n    static get configurable() {\n        return {\n            /**\n             * An object containing key/value pairs that are passed on the request query string.\n             * @member {Object} params\n             * @category Remote\n             */\n            /**\n             * An object containing key/value pairs that are passed on the request query string.\n             * @config {Object}\n             * @category Remote\n             */\n            params : null\n        };\n    }\n    /**\n     * Url to post newly created records to.\n     *\n     * The response must be in the form:\n     *\n     *     {\n     *         \"success\": true,\n     *         \"data\": [{\n     *             \"id\": 0, \"name\": \"General Motors\"\n     *         }, {\n     *             \"id\": 1, \"name\": \"Apple\"\n     *         }]\n     *     }\n     *\n     * Just the array of data may be returned, however that precludes the orderly handling of errors encountered at the\n     * server.\n     *\n     * If the server encountered an error, the packet would look like this:\n     *\n     *     {\n     *         \"success\": false,\n     *         \"message\": \"Some kind of database error\"\n     *     }\n     *\n     * And that packet would be available in the {@link #event-exception} handler in the `response` property of the\n     * event.\n     *\n     * The `success` property may be omitted, it defaults to `true`.\n     *\n     * @prp {String} createUrl\n     * @category CRUD\n     */\n    /**\n     * Url to read data from.\n     *\n     * The response must be in the form:\n     *\n     *     {\n     *         \"success\": true,\n     *         \"data\": [{\n     *             \"id\": 0, \"name\": \"General Motors\"\n     *         }, {\n     *             \"id\": 1, \"name\": \"Apple\"\n     *         }]\n     *     }\n     *\n     * If the store {@link #property-isPaged is paged}, the total dataset size must be returned in the\n     * {@link #config-responseTotalProperty} property:\n     *\n     *     {\n     *         \"success\": true,\n     *         \"data\": [{\n     *             \"id\": 0, \"name\": \"General Motors\"\n     *         }, {\n     *             \"id\": 1, \"name\": \"Apple\"\n     *         }],\n     *         \"total\": 65535\n     *     }\n     *\n     * Just the array of data may be returned, however that precludes the orderly handling of errors encountered at the\n     * server.\n     *\n     * If the server encountered an error, the packet would look like this:\n     *\n     *     {\n     *         \"success\": false,\n     *         \"message\": \"Some kind of database error\"\n     *     }\n     *\n     * And that packet would be available in the {@link #event-exception} handler in the `response` property of the\n     * event.\n     *\n     * The `success` property may be omitted, it defaults to `true`.\n     *\n     * @prp {String} readUrl\n     * @category CRUD\n     */\n    /**\n     * Url to post record modifications to.\n     *\n     * The response must be in the form:\n     *\n     *     {\n     *         \"success\": true,\n     *         \"data\": [{\n     *             \"id\": 0, \"name\": \"General Motors\"\n     *         }, {\n     *             \"id\": 1, \"name\": \"Apple\"\n     *         }]\n     *     }\n     *\n     * Just the array of data may be returned, however that precludes the orderly handling of errors encountered at the\n     * server.\n     *\n     * If the server encountered an error, the packet would look like this:\n     *\n     *     {\n     *         \"success\": false,\n     *         \"message\": \"Some kind of database error\"\n     *     }\n     *\n     * And that packet would be available in the {@link #event-exception} handler in the `response` property of the\n     * event.\n     *\n     * The `success` property may be omitted, it defaults to `true`.\n     *\n     * @prp {String} updateUrl\n     * @category CRUD\n     */\n    /**\n     * Url for deleting records.\n     *\n     * The response must be in the form:\n     *\n     *     {\n     *         \"success\": true\n     *     }\n     *\n     * If the server encountered an error, the packet would look like this:\n     *\n     *     {\n     *         \"success\": false,\n     *         \"message\": \"Some kind of database error\"\n     *     }\n     *\n     * And that packet would be available in the {@link #event-exception} handler in the `response` property of the\n     * event.\n     *\n     * The `success` property may be omitted, it defaults to `true`.\n     *\n     * @prp {String} deleteUrl\n     * @category CRUD\n     */\n    /**\n     * True to initiate a load when the store is instantiated\n     * @config {Boolean} autoLoad\n     * @category Common\n     */\n    //endregion\n    afterConstruct(config) {\n        super.afterConstruct(config);\n        if (this.autoLoad) {\n            this.load().catch(() => {});\n        }\n    }\n    /**\n     * Returns a truthy value if the Store is currently loading.\n     *\n     * A load operation is initiated by a load call, but the network request is not sent until\n     * after a delay until the next event loop because of allowing all operations which may\n     * request a load to coalesce into one call.\n     *\n     * If the loading request is in this waiting state, the value will be `1`,\n     *\n     * If the network request is in flight, the value will be `2`\n     * @property {Boolean|Number}\n     * @readonly\n     * @category CRUD\n     */\n    get isLoading() {\n        return this._isLoading ? 2 : this.loadTriggerPromise ? 1 : false;\n    }\n    /**\n     * Returns true if the Store is currently committing\n     * @property {Boolean}\n     * @readonly\n     * @category CRUD\n     */\n    get isCommitting() {\n        return Boolean(this.commitPromise);\n    }\n    set pageParamName(pageParamName) {\n        if (this.tree) {\n            throw new Error('Paging cannot be supported for tree stores');\n        }\n        if (this.pageStartParamName) {\n            throw new Error('Configs pageStartParamName and pageParamName are mutually exclusive');\n        }\n        this._pageParamName = pageParamName;\n    }\n    get pageParamName() {\n        return this._pageParamName;\n    }\n    set pageStartParamName(pageStartParamName) {\n        if (this.tree) {\n            throw new Error('Paging cannot be supported for tree stores');\n        }\n        if (this.pageParamName) {\n            throw new Error('Configs pageParamName and pageStartParamName are mutually exclusive');\n        }\n        this._pageStartParamName = pageStartParamName;\n    }\n    get pageStartParamName() {\n        return this._pageStartParamName;\n    }\n    /**\n     * Yields true if this Store is loaded page by page. This yields `true` if either of the\n     * {@link #config-pageParamName} of {@link #config-pageStartParamName} configs are set.\n     * @property {Boolean}\n     * @readonly\n     * @category Paging\n     */\n    get isPaged() {\n        return this.pageParamName || this.pageStartParamName;\n    }\n    /**\n     * Yields the complete dataset size. If the store is {@link #property-isPaged is paged} this is the value\n     * returned in the last loaded data block in the {@link #config-responseTotalProperty} property. Otherwise it is\n     * the number of records in the store's underlying storage collection.\n     * @property {Number}\n     * @readonly\n     * @category Paging\n     */\n    get allCount() {\n        return ('remoteTotal' in this) ? this.remoteTotal : super.allCount;\n    }\n    /**\n     * **If the store {@link #property-isPaged is paged}**, yields the highest page number in the dataset as calculated\n     * from the {@link #config-responseTotalProperty}\n     * returned in the last page data block loaded.\n     * @property {Number}\n     * @readonly\n     * @category Paging\n     */\n    get lastPage() {\n        if (this.isPaged) {\n            return Math.floor((this.allCount + this.pageSize - 1) / this.pageSize);\n        }\n    }\n    buildQueryString(url, ...paramObjects) {\n        const\n            hasParamsInUrl = url.includes('?'),\n            queryString    = Object.entries(Object.assign({}, ...paramObjects)).reduce(processParamEntry, []).join('&');\n        return queryString ? (hasParamsInUrl ? '&' : '?') + queryString : '';\n    }\n    /**\n     * Internal sort method.\n     * Should not be used in application code directly.\n     * @param silent\n     * @returns {Promise|null} If {@link Core/data/AjaxStore#config-sortParamName} is set on store, this method returns `Promise`\n     * which is resolved after data is loaded from remote server, otherwise it returns `null`\n     * @async\n     * @internal\n     */\n    async performSort(silent) {\n        const me = this;\n        if (me.remoteSort && !me.isRemoteDataLoading) {\n            me.isRemoteDataLoading = true;\n            const result           = await me.internalLoad({}, '', event => {\n                me.data = event.data;\n                me.afterPerformSort(silent);\n            });\n            me.isRemoteDataLoading = false;\n            return result;\n        }\n        else {\n            super.performSort(silent);\n        }\n    }\n    /**\n     * Internal filter method.\n     * Should not be used in application code directly.\n     * @param silent\n     * @returns {Promise|null} If {@link Core/data/AjaxStore#config-filterParamName} is set on store, this method returns `Promise`\n     * which is resolved after data is loaded from remote server, otherwise it returns `null`\n     * @async\n     * @internal\n     */\n    async performFilter(silent) {\n        const\n            me = this;\n        // For remote filtering, the dataset cannot be preserved. The size may be completely different.\n        // This is a reload operation.\n        if (me.remoteFilter) {\n            me.loadingPromise?.abort();\n            // Flag store data loading state to not get into loop when data is sorted internally after request\n            me.isRemoteDataLoading = true;\n            const\n                oldCount    = me.count,\n                { filters } = me;\n            // load should default to page 1\n            me.currentPage         = 1;\n            const result           = await me.internalLoad({}, '', event => {\n                me.data = event.data;\n                event   = silent\n                    ? null\n                    : {\n                        action  : 'filter',\n                        filters,\n                        oldCount,\n                        records : me.storage.values\n                    };\n                me.afterPerformFilter(event);\n                me.trigger('refresh', event);\n            });\n            me.isRemoteDataLoading = false;\n            return result;\n        }\n        else {\n            super.performFilter(silent);\n        }\n    }\n    /**\n     * A provided function which creates an array of values for the {@link #config-filterParamName} to pass\n     * any filters to the server upon load.\n     *\n     * By default, this creates a JSON string containing the following properties:\n     *\n     * ```javascript\n     *    [{\n     *        field         : <theFieldName>\n     *        operator      : May be: `'='`, `'!='`, `'>'`, `'>='`, `'<'`, `'<='`, `'*'`, `'startsWith'`, `'endsWith'`\n     *        value         : The value to compare\n     *        caseSensitive : true for case sensitive comparisons\n     *    }]\n     * ```\n     * @param {Core.util.CollectionFilter[]} filters The filters to encode.\n     */\n    encodeFilterParams(filters) {\n        const\n            result = [];\n        for (const { property, operator, value, caseSensitive } of filters) {\n            result.push({\n                field : property,\n                operator,\n                value,\n                caseSensitive\n            });\n        }\n        return JSON.stringify(result, function(key, value) {\n            return key === ''\n                ? value\n                : this[key] instanceof Date ? dateToString(this[key]) : value;\n        });\n    }\n    /**\n     * A provided function which creates an array of values for the {#config-sortParamName} to pass\n     * any sorters to the server upon load.\n     *\n     * By default, this creates a JSON string containing the following properties:\n     *\n     * ```javascript\n     *    [{\n     *        field     : <theFieldName>\n     *        ascending : true/false\n     *    }]\n     * ```\n     *\n     * @param {Sorter[]} sorters The sorters to encode.\n     */\n    encodeSorterParams(sorters) {\n        return JSON.stringify(sorters.filter(sorter => !sorter.sortFn).map(sorter => sorter));\n    }\n    buildReadUrl() {\n        const { readUrl } = this;\n        if (this.restfulFilter && this.filters.count) {\n            const url = readUrl.endsWith('/') ? readUrl : (readUrl + '/');\n            return url + this.filters.first.value;\n        }\n        return readUrl;\n    }\n    /**\n     * Internal data loading method.\n     * @returns {Promise}\n     * @internal\n     */\n    internalLoad(params, eventName, successFn, delay = 0) {\n        // Accumulate all configured parameters\n        params = ObjectHelper.assign({}, this.params, params);\n        const\n            me    = this,\n            url   = me.buildReadUrl(),\n            event = { action : 'read' + eventName, params, url };\n        if (!url) {\n            throw new Error('No load url specified');\n        }\n        if (me.trigger('beforeLoad' + eventName, event) === false) {\n            throw false;  // eslint-disable-line no-throw-literal\n        }\n        me.loadArgs = [url, event, params, eventName, successFn];\n        if (delay === false) {\n            return new Promise((resolve, reject) => me.sendLoadRequest(resolve, reject));\n        }\n        return me.loadTriggerPromise || (me.loadTriggerPromise = new Promise((resolve, reject) => {\n            me.setTimeout({\n                delay,\n                fn                : 'sendLoadRequest',\n                args              : [resolve, reject],\n                cancelOutstanding : true\n            });\n        }));\n    }\n    // Send the request for the internalLoad.\n    // This is called on a timeout 1ms after the internalLoad call.\n    async sendLoadRequest(resolve, reject) {\n        const\n            me = this,\n            [\n                url,\n                event,\n                params,\n                eventName,\n                successFn\n            ]  = me.loadArgs;\n        // As soon as it kicks off, new load requests can be made which will result in another load\n        me.loadTriggerPromise = null;\n        if (url) {\n            me._isLoading = true;\n            // This may look redundant, but it allows for two levels of event listening.\n            // Granular, where the observer observes only the events of interest, and\n            // catch-all, where the observer is interested in all requests.\n            me.trigger(`load${eventName}Start`, event);\n            me.trigger('beforeRequest', event);\n            // Add filter information to the request parameters\n            if (me.filterParamName && me.isFiltered) {\n                params[me.filterParamName] = me.encodeFilterParams(me.filters.values);\n            }\n            // Add sorter information to the request parameters.\n            // isSorted includes grouping in its evaluation.\n            if (me.remoteSort && me.isSorted) {\n                params[me.sortParamName] = me.encodeSorterParams(me.groupers ? me.groupers.concat(me.sorters) : me.sorters);\n            }\n            // Ensure our next page is passed to the server in the params if not already set.\n            // Ensure our page size is always passed.\n            if (me.isPaged) {\n                if (!((me.pageParamName in params) || (me.pageStartParamName in params))) {\n                    const\n                        page = Math.min(me.currentPage || 1, me.allCount ? me.lastPage : Infinity);\n                    if (me.pageParamName) {\n                        params[me.pageParamName] = page;\n                    }\n                    else {\n                        params[me.pageStartParamName] = (page - 1) * me.pageSize;\n                    }\n                }\n                params[me.pageSizeParamName] = me.pageSize;\n            }\n            const options = { headers : me.headers, parseJson : true };\n            if (me.useRestfulMethods) {\n                options.method = me.httpMethods.read;\n                // user might define body in case of using custom restful method\n                if (event.body) {\n                    options.body = JSON.stringify(event.body);\n                }\n            }\n            try {\n                const\n                    promise     = me.loadingPromise = AjaxHelper.get(event.url + me.buildQueryString(event.url, params), ObjectHelper.assign(options, me.fetchOptions)),\n                    response    = await promise,\n                    data        = response.parsedJson,\n                    isArray     = Array.isArray(data),\n                    success     = isArray || (data && (ObjectHelper.getPath(data, me.responseSuccessProperty) !== false)),\n                    remoteTotal = isArray ? null : ObjectHelper.getPath(data, me.responseTotalProperty);\n                if (me.isDestroyed) {\n                    return;\n                }\n                me.loadingPromise = null;\n                me._isLoading  = false;\n                event.response = response;\n                event.json     = data;\n                if (success) {\n                    if (remoteTotal != null) {\n                        me.remoteTotal = parseInt(remoteTotal, 10);\n                    }\n                    // If we are issuing paged requests, work out what page we are on based\n                    // on the requested page and the size of the dataset declared.\n                    if (me.isPaged) {\n                        if (me.remoteTotal >= 0) {\n                            const requestedPage = me.pageParamName ? params[me.pageParamName] : params[me.pageStartParamName] / me.pageSize + 1;\n                            me.currentPage      = Math.min(requestedPage, me.lastPage);\n                        }\n                        else {\n                            throw new Error('A paged store must receive its responseTotalProperty in each data packet');\n                        }\n                    }\n                    event.data = isArray ? data : ObjectHelper.getPath(data, me.responseDataProperty);\n                    await successFn(event);\n                    !me.isDestroyed && me.trigger('load' + eventName, event);\n                    resolve(event);\n                }\n                else {\n                    Object.assign(event, {\n                        exception     : true,\n                        exceptionType : 'server',\n                        error         : data?.error\n                    });\n                    !me.isDestroyed && me.trigger('exception', event);\n                    reject(event);\n                }\n                // finally\n                !me.isDestroyed && me.trigger('afterRequest', event);\n            }\n            catch (responseOrError) {\n                me._isLoading = false;\n                event.exception = true;\n                if (responseOrError instanceof Response) {\n                    event.exceptionType = responseOrError.ok ? 'server' : 'network';\n                    event.response      = responseOrError;\n                    event.error         = responseOrError.error;\n                }\n                else {\n                    event.exceptionType = 'server';\n                    event.error         = responseOrError;\n                }\n                !me.isDestroyed && me.trigger('exception', event);\n                reject(event);\n                // finally\n                !me.isDestroyed && me.trigger('afterRequest', event);\n            }\n        }\n    }\n    /**\n     * Load data from the {@link #config-readUrl}.\n     * @param {Object} [params] A hash of parameters to append to querystring (will also append Store#params)\n     * @returns {Promise} A Promise which will be resolved if the load succeeds, and rejected if the load is\n     * vetoed by a {@link #event-beforeLoad} handler, or if an {@link #event-exception} is detected.\n     * The resolved function is passed the event object passed to any event handlers.\n     * The rejected function is passed the {@link #event-exception} event if an exception occurred,\n     * or `false` if the load was vetoed by a {@link #event-beforeLoad} handler.\n     * @fires beforeLoad\n     * @fires loadStart\n     * @fires beforeRequest\n     * @fires load\n     * @fires exception\n     * @fires afterRequest\n     * @category CRUD\n     */\n    async load(params) {\n        const\n            me = this;\n        if (me.isPaged) {\n            return me.loadPage(me.currentPage || 1, params);\n        }\n        else {\n            return me.internalLoad(params, '', (event) => {\n                // The set Data setter will trigger the refresh event with { action: 'dataset' }\n                me.data = event.data;\n            });\n        }\n    }\n    /**\n     * Loads children into specified parent record. Parent records id is sent as a param (param name configured with\n     * {@link #config-parentIdParamName}.\n     * @param {Core.data.Model} parentRecord Parent record\n     * @returns {Promise} A Promise which will be resolved if the load succeeds, and rejected if the load is\n     * vetoed by a {@link #event-beforeLoadChildren} handler, or if an {@link #event-exception} is detected.\n     * The resolved function is passed the event object passed to any event handlers.\n     * The rejected function is passed the {@link #event-exception} event if an exception occurred,\n     * or `false` if the load was vetoed by a {@link #event-beforeLoadChildren} handler.\n     * @fires beforeLoadChildren\n     * @fires loadChildrenStart\n     * @fires beforeRequest\n     * @fires loadChildren\n     * @fires exception\n     * @fires afterRequest\n     * @category CRUD\n     */\n    async loadChildren(parentRecord) {\n        // Immediate call to sendLoadRequest because we can make multiple, concurrent requests\n        // to load many tree nodes at once, so pass delay parameter as false.\n        return this.readUrl ? this.internalLoad({ [this.parentIdParamName] : parentRecord.id }, 'Children', event => {\n            event.parentRecord = parentRecord;\n            if (parentRecord.children.length) {\n                parentRecord.clearChildren(true);\n            }\n            // Append received children\n            parentRecord.data[parentRecord.constructor.childrenField] = event.data;\n            parentRecord.processChildren(parentRecord.stores);\n        }, false) : this.immediatePromise;\n    }\n    /**\n     * Loads a page of data from the {@link #config-readUrl}.\n     * @param {Number} page The *one based* page number to load.\n     * @param {Object} params A hash of parameters to append to querystring (will also append Store#params)\n     * @returns {Promise} A Promise which will be resolved if the load succeeds, and rejected if the load is\n     * vetoed by a {@link #event-beforeLoadPage} handler, or if an {@link #event-exception} is detected.\n     * The resolved function is passed the event object passed to any event handlers.\n     * The rejected function is passed the {@link #event-exception} event if an exception occurred,\n     * or `false` if the load was vetoed by a {@link #event-beforeLoadPage} handler.\n     * @fires beforeLoadPage\n     * @fires loadPageStart\n     * @fires beforeRequest\n     * @fires loadPage\n     * @fires exception\n     * @fires afterRequest\n     * @category CRUD\n     */\n    async loadPage(page, params) {\n        if (this.allCount) {\n            page = Math.min(page, this.lastPage);\n        }\n        const\n            me        = this,\n            pageParam = me.pageParamName\n                ? {\n                    [me.pageParamName] : page\n                }\n                : {\n                    [me.pageStartParamName] : (page - 1) * me.pageSize\n                };\n        pageParam[me.pageSizeParamName] = me.pageSize;\n        return me.internalLoad(ObjectHelper.assign(pageParam, params), 'Page', (event) => {\n            // We go directly to loadPage because paging a tree store is unsupportable.\n            // loadPage will trigger the refresh event with { action: 'pageLoad' }\n            me.loadData(event.data, 'pageLoad');\n        });\n    }\n    /**\n     * If this store {@link #property-isPaged is paged}, and is not already at the {@link #property-lastPage}\n     * then this will load the next page of data.\n     * @fires beforeLoadPage\n     * @fires loadPageStart\n     * @fires beforeRequest\n     * @fires loadPage\n     * @fires exception\n     * @fires afterRequest\n     * @category CRUD\n     * @returns {Promise} A promise which is resolved when the Ajax request completes and has been processed.\n     */\n    async nextPage(params) {\n        const me = this;\n        return me.isPaged && me.currentPage !== me.lastPage ? me.loadPage(me.currentPage + 1, params) : immediatePromise;\n    }\n    /**\n     * If this store {@link #property-isPaged is paged}, and is not already at the first page\n     * then this will load the previous page of data.\n     * @fires beforeLoadPage\n     * @fires loadPageStart\n     * @fires beforeRequest\n     * @fires loadPage\n     * @fires exception\n     * @fires afterRequest\n     * @category CRUD\n     * @returns {Promise} A promise which is resolved when the Ajax request completes and has been processed.\n     */\n    async previousPage(params) {\n        return this.isPaged && this.currentPage !== 1 ? this.loadPage(this.currentPage - 1, params) : immediatePromise;\n    }\n    /**\n     * Commits all changes (added, modified and removed) using corresponding urls ({@link #config-createUrl},\n     * {@link #config-updateUrl} and {@link #config-deleteUrl})\n     * @fires beforeCommit\n     * @returns {Promise} A Promise which is resolved only if all pending changes (Create, Update and Delete)\n     * successfully resolve. Both the resolve and reject functions are passed a `commitState` object which is stored the\n     * {@link #event-afterRequest} event for each request. Each event contains the `exception`, `request` and `response`\n     * properties eg:\n     *\n     * ```javascript\n     * {\n     *      // If *all* commits succeeded\n     *      success: true,\n     *      changes: {\n     *          added: [records...],\n     *          modified: [records...],\n     *          removed: [records...],\n     *      },\n     *      added: {\n     *          source: theStore,\n     *\n     *          // Only if the add request triggered an exception\n     *          exception: true,\n     *\n     *          // Only if the add request triggered an exception\n     *          exceptionType: 'server', // Or 'network'\n     *\n     *          response: Response,\n     *          json: parsedResponseObject\n     *      },\n     *      // Same format as added\n     *      modified: {},\n     *      removed: {}\n     * }\n     * ```\n     *\n     * If there were no pending changes, the resolve and reject functions are passed no parameters.\n     *\n     * Returns `false` if a commit operation is already in progress.\n     * The resolved function is passed the event object passed to any event handlers.\n     * The rejected function is passed the {@link #event-exception} event if an exception occurred,\n     * @category CRUD\n     */\n    async commit() {\n        const\n            me          = this,\n            { changes } = me,\n            allPromises = [];\n        // not allowing additional commits while in progress\n        if (me.commitPromise) {\n            return false;\n        }\n        // No outstanding changes, return a Promise that resolves immediately.\n        if (!changes) {\n            // Special handling of modified. If only non-persistable fields have been modified, it won't count among\n            // `changes`, but still needs to be cleared\n            if (me.modified.count) {\n                me.modified.forEach(record => record.clearChanges(true, false));\n                me.modified.clear();\n            }\n            return immediatePromise;\n        }\n        if (me.trigger('beforeCommit', { changes }) !== false) {\n            // Flag all affected records as being committed\n            [...changes.added, ...changes.modified, ...changes.removed].forEach(record => record.meta.committing = true);\n            // Commit was not prevented in beforeCommit listener, so we begin the commit\n            me.trigger('commitStart', { changes });\n            const\n                commitState = {\n                    action    : 'commit',\n                    exception : false,\n                    changes\n                };\n            let p = me.commitRemoved(commitState);\n            if (p) {\n                allPromises.push(p);\n            }\n            p = me.commitAdded(commitState);\n            if (p) {\n                allPromises.push(p);\n            }\n            p = me.commitModified(commitState);\n            if (p) {\n                allPromises.push(p);\n            }\n            // If there were no urls configured, behave as a local store\n            if (!allPromises.length) {\n                me.modified.forEach(r => r.clearChanges(true, false));\n                me.modified.clear();\n                me.added.forEach(r => r.clearChanges(true, false));\n                me.added.clear();\n                me.removed.clear();\n                me.trigger('commit', { changes });\n                return immediatePromise;\n            }\n            // The Promises from the commit methods all resolve whether the request\n            // succeeded or not. They each contribute their afterrequest event to the\n            // commitState which can be used to detect overall success or failure\n            // and granular inspection of which operations succeeded or failed.\n            // If there's only one operation, wait for it.\n            // If there's more than one operation, we have to wait for allPromises to resolve.\n            p = allPromises.length === 1 ? allPromises[0] : Promise.all(allPromises);\n            return me.commitPromise = new Promise((resolve, reject) => {\n                p.then(() => {\n                    me.commitPromise = null;\n                    if (commitState.exception) {\n                        me.trigger('exception', commitState);\n                        reject(commitState);\n                    }\n                    else {\n                        me.trigger('commit', { changes });\n                        resolve(commitState);\n                    }\n                }).catch(() => {\n                    me.commitPromise = null;\n                    reject(commitState);\n                });\n            });\n        }\n    }\n    // Performs background autocommit with reject checking\n    doAutoCommit() {\n        if (this.suspendCount <= 0) {\n            this.commit().catch(commitState => {\n                const { response } = commitState;\n                // Skip throw if response is `ok` or `status` is 500 or 404 and request is successfully parsed\n                // These errors are notified by API events\n                if (!(response && (response.ok && response.parsedJson || [500, 404].includes(response.status)))) {\n                    throw commitState;\n                }\n            });\n        }\n    }\n    /**\n     * Commits added records by posting to {@link #config-createUrl}.\n     * Server should return a JSON object with a 'success' property indicating whether the operation was successful.\n     * @param {Object} commitState An object into which is added a `delete` property being the\n     * {@link #event-afterRequest} event.\n     * @returns {Promise|null} If there are added records, a Promise which will be resolved whether the commit\n     * succeeds or fails. The resulting event is placed into the `add` property of the passed `commitState`\n     * parameter. If there are no added records, `null` is returned.\n     * The resolved function is passed the event object passed to any event handlers.\n     * @async\n     * @private\n     * @fires beforeRequest\n     * @fires commitAdded\n     * @fires refresh\n     * @fires exception\n     * @fires afterRequest\n     */\n    commitAdded(commitState) {\n        const\n            me    = this,\n            added = me.added,\n            event = { action : 'create', params : me.params };\n        return added.count && me.createUrl ? new Promise((resolve) => {\n            const toAdd        = added.values.map(r => r.persistableData);\n            commitState.create = event;\n            event.body = { data : toAdd };\n            me.trigger('beforeRequest', event);\n            let dataToSend = event.body;\n            if (me.sendAsFormData) {\n                const\n                    formData = new FormData();\n                formData.append('data', JSON.stringify(toAdd));\n                dataToSend = formData;\n            }\n            const\n                options = { headers : me.headers, parseJson : true },\n                url     = me.createUrl + me.buildQueryString(me.createUrl, me.params);\n            if (me.useRestfulMethods) {\n                options.method = me.httpMethods.create;\n            }\n            AjaxHelper.post(url, dataToSend, ObjectHelper.assign(options, me.fetchOptions)).then(response => {\n                const\n                    data    = response.parsedJson,\n                    isArray = Array.isArray(data),\n                    success = isArray || (data && (data.success !== false));\n                commitState.response = response;\n                event.json           = data;\n                event.response       = response;\n                if (success) {\n                    // Copy updated fields and updated ID back into records.\n                    // This also calls clearChanges on each record.\n                    me.processReturnedData(added.values, isArray ? data : ObjectHelper.getPath(data, me.responseDataProperty));\n                    // Clear down added records cache\n                    added.clear();\n                    me.trigger('commitAdded');\n                    // We must signal a full refresh because any number of records could have received any number of field updates\n                    // back from the server, so a refresh is more efficient than picking through the received updates.\n                    me.trigger('refresh', event);\n                    resolve(commitState);\n                }\n                else {\n                    // Clear committing flag\n                    added.forEach(r => r.meta.committing = false);\n                    commitState.exception = event.exception = true;\n                    commitState.exceptionType = event.exceptionType = 'server';\n                    me.trigger('exception', event);\n                    resolve(commitState);\n                }\n                // finally\n                me.trigger('afterRequest', event);\n            }).catch(responseOrError => {\n                // Clear committing flag\n                added.forEach(r => r.meta.committing = false);\n                commitState.exception = event.exception = true;\n                if (responseOrError instanceof Response) {\n                    commitState.response = responseOrError;\n                    event.exceptionType  = responseOrError.ok ? 'server' : 'network';\n                    event.response       = responseOrError;\n                    event.error          = responseOrError.error;\n                }\n                else {\n                    event.exceptionType = 'server';\n                    event.error         = responseOrError;\n                }\n                me.trigger('exception', event);\n                resolve(commitState);\n                // finally\n                me.trigger('afterRequest', event);\n            });\n        }) : null;\n    }\n    /**\n     * Commits modified records by posting to {@link #config-updateUrl}.\n     * Server should return a JSON object with a 'success' property indicating whether the operation was successful.\n     * @param {Object} commitState An object into which is added a `delete` property being the\n     * {@link #event-afterRequest} event.\n     * @returns {Promise|null} If there are added records, a Promise which will be resolved whether the commit\n     * succeeds or fails. The resulting event is placed into the `update` property of the passed `commitState`\n     * parameter. If there are no added records, `null` is returned.\n     * The resolved function is passed the event object passed to any event handlers.\n     * @async\n     * @private\n     * @fires beforeRequest\n     * @fires commitModified\n     * @fires refresh\n     * @fires exception\n     * @fires afterRequest\n     */\n    commitModified(commitState) {\n        const\n            me           = this,\n            // Only include persistable changes\n            { modified } = me.changes,\n            event        = { action : 'update', params : me.params },\n            result       = modified.length && me.updateUrl ? new Promise(resolve => {\n                // Use the record's modificationData, not modifications.\n                // modifications returns a map using *field names*\n                // The server will expect a map using the original dataSource properties.\n                const\n                    modifications = modified.map(record => {\n                        if (me.writeAllFields) {\n                            return record.persistableData;\n                        }\n                        else {\n                            return record.modificationDataToWrite;\n                        }\n                    }).filter(el => !ObjectHelper.isEmpty(el));\n                // Check if modifications are empty and don't make request\n                if (modifications.length === 0) {\n                    me.modified.clear();\n                    modified.forEach(r => r.meta.committing = false);\n                    resolve();\n                    return;\n                }\n                commitState.update = event;\n                event.body = { data : modifications };\n                me.trigger('beforeRequest', event);\n                let dataToSend = event.body;\n                if (me.sendAsFormData) {\n                    const\n                        formData = new FormData();\n                    formData.append('data', JSON.stringify(modifications));\n                    dataToSend = formData;\n                }\n                const\n                    options = { headers : me.headers, parseJson : true };\n                if (me.useRestfulMethods) {\n                    options.method = me.httpMethods.update;\n                }\n                AjaxHelper.post(\n                    me.updateUrl + me.buildQueryString(me.updateUrl, me.params),\n                    dataToSend,\n                    ObjectHelper.assign(options, me.fetchOptions)\n                ).then(response => {\n                    const\n                        data    = response.parsedJson,\n                        isArray = Array.isArray(data),\n                        success = isArray || (data && (data.success !== false));\n                    commitState.response = response;\n                    event.json           = data;\n                    event.response       = response;\n                    if (success) {\n                        // Copy updated fields and updated ID back into records.\n                        // This also calls clearChanges on each record.\n                        me.processReturnedData(modified, isArray ? data : ObjectHelper.getPath(data, me.responseDataProperty), true);\n                        // Clear down modified records cache\n                        me.modified.clear();\n                        me.trigger('commitModified');\n                        // We must signal a full refresh because any number of records could have received any number of\n                        // field updates back from the server, so a refresh is more efficient than picking through the\n                        // received updates.\n                        me.trigger('refresh', event);\n                        resolve(commitState);\n                    }\n                    else {\n                        // Clear committing flag\n                        modified.forEach(r => r.meta.committing = false);\n                        commitState.exception = event.exception = true;\n                        event.exceptionType   = 'server';\n                        me.trigger('exception', event);\n                        resolve(commitState);\n                    }\n                    // finally\n                    me.trigger('afterRequest', event);\n                }).catch(responseOrError => {\n                    // Clear committing flag\n                    modified.forEach(r => r.meta.committing = false);\n                    commitState.exception = event.exception = true;\n                    if (responseOrError instanceof Response) {\n                        commitState.response = responseOrError;\n                        event.exceptionType  = responseOrError.ok ? 'server' : 'network';\n                        event.response       = responseOrError;\n                        event.error          = responseOrError.error;\n                    }\n                    else {\n                        event.exceptionType = 'server';\n                        event.error         = responseOrError;\n                    }\n                    me.trigger('exception', event);\n                    resolve(commitState);\n                    // finally\n                    me.trigger('afterRequest', event);\n                });\n            }) : null;\n        // Also clear non-persistable changes\n        if (!modified.length && me.modified.count) {\n            me.modified.clear();\n        }\n        return result;\n    }\n    processReturnedData(localRecords, returnedData, isUpdating = false) {\n        const\n            me           = this,\n            Model        = me.modelClass,\n            idDataSource = Model.fieldMap.id.dataSource;\n        returnedData.forEach((recData, i) => {\n            const\n                record = localRecords[i];\n            // Must clear changed state before syncId goes through store.onModelChange\n            record.clearChanges(true, false);\n            // Using syncId to update record's id with no flagging the property as modified.\n            record.syncId(recData[idDataSource]);\n            // When updating, only want to apply the actual changes and not reapply defaults. When adding, also\n            // apply the defaults\n            Object.assign(localRecords[i].data, Model.processData(recData, isUpdating, me, record));\n        });\n    }\n    /**\n     * Commits removed records by posting to {@link #config-deleteUrl}.\n     * Server should return a JSON object with a 'success' property indicating whether the operation was successful.\n     * @param {Object} commitState An object into which is added a `delete` property being the\n     * {@link #event-afterRequest} event.\n     * @returns {Promise|null} If there are added records, a Promise which will be resolved whether the commit\n     * succeeds or fails. The resulting event is placed into the `delete` property of the passed `commitState`\n     * parameter. If there are no added records, `null` is returned.\n     * The resolved function is passed the event object passed to any event handlers.\n     * @async\n     * @private\n     * @fires beforerequest\n     * @fires commitremoved\n     * @fires refresh\n     * @fires exception\n     * @fires afterrequest\n     */\n    commitRemoved(commitState) {\n        const\n            me      = this,\n            removed = me.removed,\n            event   = { action : 'delete', params : me.params };\n        return removed.count && me.deleteUrl ? new Promise((resolve) => {\n            commitState.delete = event;\n            event.body = { ids : removed.map(r => r.id) };\n            me.trigger('beforeRequest', event);\n            let dataToSend = event.body;\n            if (me.sendAsFormData) {\n                const\n                    formData = new FormData();\n                formData.append('id', JSON.stringify(dataToSend.ids));\n                dataToSend = formData;\n            }\n            const\n                options = { headers : me.headers, parseJson : true };\n            if (me.useRestfulMethods) {\n                options.method = me.httpMethods.delete;\n            }\n            AjaxHelper.post(\n                me.deleteUrl + me.buildQueryString(me.deleteUrl, me.params),\n                dataToSend,\n                ObjectHelper.assign(options, me.fetchOptions)\n            ).then(response => {\n                const\n                    data    = response.parsedJson,\n                    isArray = Array.isArray(data),\n                    success = isArray || (data && (data.success !== false));\n                commitState.response = response;\n                event.json           = data;\n                event.response       = response;\n                if (success) {\n                    removed.forEach(record => record.meta.committing = false); // In case used by other store etc.\n                    removed.clear();\n                    me.trigger('commitRemoved');\n                    me.trigger('refresh', event);\n                    resolve(commitState);\n                }\n                else {\n                    // Clear committing flag\n                    removed.forEach(r => r.meta.committing = false);\n                    commitState.exception = event.exception = true;\n                    event.exceptionType = 'server';\n                    me.trigger('exception', event);\n                    resolve(commitState);\n                }\n                // finally\n                me.trigger('afterRequest', event);\n            }).catch(responseOrError => {\n                // Clear committing flag\n                removed.forEach(r => r.meta.committing = false);\n                commitState.exception = event.exception = true;\n                if (responseOrError instanceof Response) {\n                    commitState.response = responseOrError;\n                    event.exceptionType  = responseOrError.ok ? 'server' : 'network';\n                    event.response       = responseOrError;\n                    event.error          = responseOrError.error;\n                }\n                else {\n                    event.exceptionType = 'server';\n                    event.error         = responseOrError;\n                }\n                me.trigger('exception', event);\n                resolve(commitState);\n                // finally\n                me.trigger('afterRequest', event);\n            });\n        }) : null;\n    }\n    get remoteFilter() {\n        return Boolean(this.filterParamName || this.restfulFilter);\n    }\n    get remoteSort() {\n        return Boolean(this.sortParamName);\n    }\n}\nAjaxStore._$name = 'AjaxStore';", "/**\n * @module Core/data/DomDataStore\n */\n/**\n * Stores data on a dom element (by setting element._domData).\n * Instead of using HTML5:s element.dataset, which turned out to be slow.\n * @internal\n */\nexport default class DomDataStore {\n    /**\n     * Get data that is connected to specified element.\n     * @param {HTMLElement} element DOM element\n     * @param {String} [key] The name of the property in the element data to return\n     * @returns {Object} Data\n     */\n    static get(element, key) {\n        const result = (element._domData || (element._domData = {}));\n        return (key != null) ? result[key] :  result;\n    }\n    /**\n     * Remove data connected to specified element.\n     * @param {HTMLElement} element DOM element\n     * @param {String} key The name of the property in the element data to remove.\n     */\n    static remove(element, key) {\n        const\n            { _domData } = element,\n            was = _domData?.[key];\n        delete _domData?.[key];\n        return was;\n    }\n    /**\n     * Set data connected to specified element (completely replacing any existing).\n     * To update data, use DomDataStore#assign instead.\n     * @param {HTMLElement} element DOM element\n     * @param {Object|String} data Data object to set, or property name to set\n     * @param {*} [value] If the previous parameter was a property name, this is the value to set.\n     */\n    static set(element, data, value) {\n        if (arguments.length === 3) {\n            (element._domData || (element._domData = {}))[data] = value;\n        }\n        else {\n            element._domData = data;\n        }\n    }\n    /**\n     * Updates data connected to specified element.\n     * @param {HTMLElement} element DOM element\n     * @param {Object} data Data to assign\n     */\n    static assign(element, data) {\n        Object.assign((element._domData || (element._domData = {})), data);\n    }\n}\nDomDataStore._$name = 'DomDataStore';", "/**\n * @module SchedulerPro/model/changelog/ChangeLogEntity\n */\n/**\n * An immutable, serializable object that describes an entity instance (for example, a single task).\n * ChangeLogEntity instances appear in change log entries to indicate which entity was affected by\n * a {@link SchedulerPro/model/changelog/ChangeLogAction}.\n */\nexport default class ChangeLogEntity {\n    static $name = 'ChangeLogEntity';\n    constructor({ model, type }) {\n        Object.assign(this, {\n            /**\n             * @member {String} id The unique id of the entity instance, e.g. 'TaskModel-1'.\n             * @readonly\n             * @category Common\n             */\n            id : model.id ?? model.$entityName,\n            /**\n             * @member {String} type The name of the Model type of the entity, e.g. 'TaskModel'.\n             * @readonly\n             * @category Common\n             */\n            type : type?.$$name ?? model.constructor.name,\n            /**\n             * @member {String} name A user-friendly name for the entity instance, e.g. 'My important task'.\n             * @readonly\n             * @category Common\n             */\n            name : model.name ?? model.$entityName\n        });\n        if (new.target === ChangeLogEntity) {\n            Object.freeze(this);\n        }\n    }\n}\nChangeLogEntity._$name = 'ChangeLogEntity';", "import Model from '../../Core/data/Model.js';\n/**\n * @module Grid/data/GridRowModel\n */\n/**\n * Model extended with some fields related to grid rendering. Used as default model type in the grids store if nothing\n * else is specified.\n *\n * Using this model is optional. If you use a custom model instead and need the functionality of any of the fields\n * below, you just have to remember to add fields with the same name to your model.\n *\n * @extends Core/data/Model\n */\nexport default class GridRowModel extends Model {\n    static get fields() {\n        return [\n            /**\n             * Icon for row (used automatically in tree, feel free to use it in renderer in other cases)\n             * @field {String} iconCls\n             * @category Styling\n             */\n            {\n                name     : 'iconCls',\n                internal : true\n            },\n            /**\n             * CSS class (or several classes divided by space) to append to row elements\n             * @field {String} cls\n             * @category Styling\n             */\n            {\n                name     : 'cls',\n                internal : true\n            },\n            /**\n             * Used by the default implementation of {@link Grid.view.GridBase#config-getRowHeight} to determine row\n             * height. Set it to use another height than the default for a the records row.\n             * @field {Number} rowHeight\n             * @category Styling\n             */\n            {\n                name     : 'rowHeight',\n                internal : true\n            },\n            /**\n             * A link to use for this record when rendered into a {@link Grid.column.TreeColumn}.\n             * @field {String} href\n             * @category Tree\n             */\n            {\n                name     : 'href',\n                internal : true\n            },\n            /**\n             * The target to use if this tree node provides a value for the {@link #field-href} field.\n             * @field {'_self'|'_blank'|'_parent'|'_top'|null} target\n             * @category Tree\n             */\n            {\n                name     : 'target',\n                internal : true\n            }\n        ];\n    }\n}\nGridRowModel.exposeProperties();\nGridRowModel._$name = 'GridRowModel';", "/**\n * @module Scheduler/crud/mixin/AbstractCrudManagerValidation\n */\n/**\n * Mixin proving responses validation API to Crud Manager.\n * @mixin\n */\nexport default Target => class AbstractCrudManagerValidation extends Target {\n    static get $name() {\n        return 'AbstractCrudManagerValidation';\n    }\n    static get configurable() {\n        return {\n            /**\n             * This config validates the response structure for requests made by the Crud Manager.\n             * When `true`, the Crud Manager checks every parsed response structure for errors\n             * and if the response format is invalid, a warning is logged to the browser console.\n             *\n             * The config is intended to help developers implementing backend integration.\n             *\n             * @config {Boolean}\n             * @default\n             * @category CRUD\n             */\n            validateResponse : true,\n            /**\n             * When `true` treats parsed responses without `success` property as successful.\n             * In this mode a parsed response is treated as invalid if it has explicitly set `success : false`.\n             * @config {Boolean}\n             * @default\n             * @category CRUD\n             */\n            skipSuccessProperty : true,\n            crudLoadValidationWarningPrefix : 'CrudManager load response error(s):',\n            crudSyncValidationWarningPrefix : 'CrudManager sync response error(s):',\n            supportShortSyncResponseNote : 'Note: Please consider enabling \"supportShortSyncResponse\" option to allow less detailed sync responses (https://bryntum.com/products/scheduler/docs/api/Scheduler/crud/AbstractCrudManagerMixin#config-supportShortSyncResponse)',\n            disableValidationNote : 'Note: To disable this validation please set the \"validateResponse\" config to false'\n        };\n    }\n    get crudLoadValidationMandatoryStores() {\n        return [];\n    }\n    getStoreLoadResponseWarnings(storeInfo, responded, expectedResponse) {\n        const\n            messages        = [],\n            { storeId }     = storeInfo,\n            mandatoryStores = this.crudLoadValidationMandatoryStores,\n            result          = { [storeId] : {} };\n        // if the store section is responded\n        if (responded) {\n            if (!responded.rows) {\n                messages.push(`- \"${storeId}\" store section should have a \"rows\" property with an array of the store records.`);\n                result[storeId].rows = ['...'];\n            }\n        }\n        // if the store is mandatory\n        else if (mandatoryStores?.includes(storeId)) {\n            messages.push(`- No \"${storeId}\" store section found. It should contain the store data.`);\n            result[storeId].rows = ['...'];\n        }\n        // extend expected response w/ this store part\n        if (messages.length) {\n            Object.assign(expectedResponse, result);\n        }\n        return messages;\n    }\n    getLoadResponseWarnings(response) {\n        const\n            messages         = [],\n            expectedResponse = {};\n        if (!this.skipSuccessProperty) {\n            expectedResponse.success = true;\n        }\n        // iterate stores to check properties validity\n        this.forEachCrudStore((store, storeId, storeInfo) => {\n            messages.push(...this.getStoreLoadResponseWarnings(storeInfo, response?.[storeId], expectedResponse));\n        });\n        if (messages.length) {\n            messages.push('Please adjust your response to look like this:\\n' +\n                JSON.stringify(expectedResponse, null, 4).replace(/\"\\.\\.\\.\"/g, '...'));\n            messages.push(this.disableValidationNote);\n        }\n        return messages;\n    }\n    validateLoadResponse(response) {\n        const messages = this.getLoadResponseWarnings(response);\n        if (messages.length) {\n            console.warn(this.crudLoadValidationWarningPrefix + '\\n' + messages.join('\\n'));\n        }\n    }\n    getStoreSyncResponseWarnings(storeInfo, requested, responded, expectedResponse) {\n        const\n            messages         = [],\n            missingRows      = [],\n            missingRemoved   = [],\n            { storeId }      = storeInfo,\n            result           = { [storeId] : {} },\n            phantomIdField   = storeInfo.phantomIdField || this.phantomIdField,\n            { modelClass }   = storeInfo.store,\n            { idField }      = modelClass,\n            respondedRows    = responded?.rows || [],\n            respondedRemoved = responded?.removed || [];\n        let showSupportShortSyncResponseNote = false;\n        // if added records were passed in the request they should be mentioned in the response\n        if (requested?.added) {\n            missingRows.push(\n                ...requested.added.filter(record => {\n                    return !respondedRows.find(row => row[phantomIdField] == record[phantomIdField]) &&\n                        !respondedRemoved.find(row => row[phantomIdField] == record[phantomIdField] || row[idField] == record[phantomIdField]);\n                }).map(record => ({ [phantomIdField] : record[phantomIdField], [idField] : '...' }))\n            );\n            if (missingRows.length) {\n                const missingIds = missingRows.map(row => '#' + row[phantomIdField]).join(', ');\n                messages.push(`- \"${storeId}\" store \"rows\" section should mention added record(s) ${missingIds} sent in the request. ` +\n                    'It should contain the added records identifiers (both phantom and \"real\" ones assigned by the backend).');\n            }\n        }\n        // if short responses are enabled\n        if (this.supportShortSyncResponse) {\n            // if the data is not object, will return error\n            if (!missingRows.length && responded) {\n                if (typeof responded !== 'object' || Array.isArray(responded)) {\n                    messages.push(`- \"${storeId}\" store section should be an Object.`);\n                    result[storeId]['...'] = '...';\n                }\n                // for request to edit records, if rows is present, it must be an array\n                if (responded.rows && !Array.isArray(responded.rows)) {\n                    messages.push(`- \"${storeId}\" store \"rows\" section should be an array`);\n                    missingRows.push('...');\n                }\n                // removed if presented must be an array\n                if (responded.removed && !Array.isArray(responded.removed)) {\n                    messages.push(`- \"${storeId}\" store \"removed\" section should be an array:`);\n                    missingRemoved.push('...');\n                }\n            }\n        }\n        // if short responses are disabled\n        else {\n            // if updated records were passed in the request they should be mentioned in the response\n            if (requested?.updated) {\n                const missingUpdatedRows = requested.updated.filter(record => !respondedRows.find(row => row[idField] == record[idField]))\n                    .map(record => ({ [idField] : record[idField] }));\n                missingRows.push(...missingUpdatedRows);\n                if (missingUpdatedRows.length) {\n                    const missingIds = missingUpdatedRows.map(row => '#' + row[idField]).join(', ');\n                    messages.push(`- \"${storeId}\" store \"rows\" section should mention updated record(s) ${missingIds} sent in the request. ` +\n                        `It should contain the updated record identifiers.`);\n                    showSupportShortSyncResponseNote = true;\n                }\n            }\n            if (missingRows.length) {\n                missingRows.push('...');\n            }\n            // if removed records were passed in the request they should be mentioned in the response\n            if (requested?.removed) {\n                missingRemoved.push(\n                    ...requested.removed.filter(record => !respondedRows.find(row => row[idField] == record[idField]))\n                        .map(record => ({ [idField] : record[idField] }))\n                );\n                if (missingRemoved.length) {\n                    const missingIds = missingRemoved.map(row => '#' + row[idField]).join(', ');\n                    messages.push(`- \"${storeId}\" store \"removed\" section should mention removed record(s) ${missingIds} sent in the request. ` +\n                        `It should contain the removed record identifiers.`);\n                    result[storeId].removed = missingRemoved;\n                    missingRemoved.push('...');\n                    showSupportShortSyncResponseNote = true;\n                }\n            }\n        }\n        if (missingRows.length) {\n            result[storeId].rows = missingRows;\n        }\n        // get rid of store section if no rows/removed there\n        if (!messages.length) {\n            delete result[storeId];\n        }\n        // extend expected response w/ this store part\n        Object.assign(expectedResponse, result);\n        return { messages, showSupportShortSyncResponseNote };\n    }\n    getSyncResponseWarnings(response, requestDesc) {\n        const\n            messages         = [],\n            expectedResponse = {},\n            request          = requestDesc.pack;\n        if (!this.skipSuccessProperty) {\n            expectedResponse.success = true;\n        }\n        let showSupportShortSyncResponseNote = false;\n        // iterate stores to check properties validity\n        this.forEachCrudStore((store, storeId, storeInfo) => {\n            const warnings = this.getStoreSyncResponseWarnings(storeInfo, request?.[storeId], response[storeId], expectedResponse);\n            showSupportShortSyncResponseNote = showSupportShortSyncResponseNote || warnings.showSupportShortSyncResponseNote;\n            messages.push(...warnings.messages);\n        });\n        if (messages.length) {\n            messages.push('Please adjust your response to look like this:\\n' +\n                JSON.stringify(expectedResponse, null, 4).replace(/\"\\.\\.\\.\":\\s*\"\\.\\.\\.\"/g, ',,,').replace(/\"\\.\\.\\.\"/g, '...'));\n            if (showSupportShortSyncResponseNote) {\n                messages.push(this.supportShortSyncResponseNote);\n            }\n            messages.push(this.disableValidationNote);\n        }\n        return messages;\n    }\n    validateSyncResponse(response, request) {\n        const messages = this.getSyncResponseWarnings(response, request);\n        if (messages.length) {\n            console.warn(this.crudSyncValidationWarningPrefix + '\\n' + messages.join('\\n'));\n        }\n    }\n};\n", "import Store from '../../Core/data/Store.js';\nimport Delayable from '../../Core/mixin/Delayable.js';\nimport ObjectHelper from '../../Core/helper/ObjectHelper.js';\nimport StringHelper from '../../Core/helper/StringHelper.js';\nimport ArrayHelper from '../../Core/helper/ArrayHelper.js';\nimport Objects from '../../Core/helper/util/Objects.js';\nimport Base from '../../Core/Base.js';\nimport Events from '../../Core/mixin/Events.js';\nimport AbstractCrudManagerValidation from './mixin/AbstractCrudManagerValidation.js';\n/**\n * @module Scheduler/crud/AbstractCrudManagerMixin\n */\nexport class AbstractCrudManagerError extends Error {}\nexport class CrudManagerRequestError extends AbstractCrudManagerError {\n    constructor(cfg = {}) {\n        super(cfg.message || cfg.request && StringHelper.capitalize(cfg.request?.type) + ' failed' || 'Crud Manager request failed');\n        Object.assign(this, cfg);\n        this.action = this.request?.type;\n    }\n}\nconst\n    storeSortFn     = function(lhs, rhs, sortProperty) {\n        if (lhs.store) {\n            lhs = lhs.store;\n        }\n        if (rhs.store) {\n            rhs = rhs.store;\n        }\n        lhs = lhs[sortProperty] || 0;\n        rhs = rhs[sortProperty] || 0;\n        return (lhs < rhs) ? -1 : ((lhs > rhs) ? 1 : 0);\n    },\n    // Sorter function to keep stores in loadPriority order\n    storeLoadSortFn = function(lhs, rhs) {\n        return storeSortFn(lhs, rhs, 'loadPriority');\n    },\n    // Sorter function to keep stores in syncPriority order\n    storeSyncSortFn = function(lhs, rhs) {\n        return storeSortFn(lhs, rhs, 'syncPriority');\n    };\n/**\n * An abstract mixin that supplies most of the CrudManager functionality.\n * It implements basic mechanisms of collecting stores to organize batch communication with a server.\n * It does not contain methods related to _data transfer_ nor _encoding_.\n * These methods are to be provided in sub-classes.\n * Out of the box there are mixins implementing {@link Scheduler/crud/transport/AjaxTransport support of AJAX for data transferring}\n * and {@link Scheduler/crud/encoder/JsonEncoder JSON for data encoding system}.\n * For example this is how we make a model that will implement CrudManager protocol and use AJAX/JSON to pass the data\n * to the server:\n *\n * ```javascript\n * class SystemSettings extends JsonEncode(AjaxTransport(AbstractCrudManagerMixin(Model))) {\n *     ...\n * }\n * ```\n *\n * ## Data transfer and encoding methods\n *\n * These are methods that must be provided by subclasses of this class:\n *\n * - {@link #function-sendRequest}\n * - {@link #function-cancelRequest}\n * - {@link #function-encode}\n * - {@link #function-decode}\n *\n * @mixin\n * @mixes Core/mixin/Delayable\n * @mixes Core/mixin/Events\n * @mixes Scheduler/crud/mixin/AbstractCrudManagerValidation\n * @abstract\n */\nexport default Target => {\n    // Trigger $meta calculation to get up-to-date is \"isXXX\" flags\n    // (kinky construction to avoid production minification faced in Angular https://github.com/bryntum/support/issues/2889)\n    Target.$$meta = Target.$meta;\n    const mixins = [];\n    // These two mixins are mixed in the Scheduling Engine code ..but in its own way\n    // so that Base.mixin() cannot understand that they are already there and applies them 2nd time\n    if (!Target.isEvents) {\n        mixins.push(Events);\n    }\n    if (!Target.isDelayable) {\n        mixins.push(Delayable);\n    }\n    mixins.push(AbstractCrudManagerValidation);\n    return class AbstractCrudManagerMixin extends (Target || Base).mixin(...mixins) {\n        /**\n         * Fires before server response gets applied to the stores. Return `false` to prevent data applying.\n         * This event can be used for server data preprocessing. To achieve it user can modify the `response` object.\n         * @event beforeResponseApply\n         * @param {Scheduler.crud.AbstractCrudManager} source The CRUD manager.\n         * @param {'sync'|'load'} requestType The request type (`sync` or `load`).\n         * @param {Object} response The decoded server response object.\n         */\n        /**\n         * Fires before loaded data get applied to the stores. Return `false` to prevent data applying.\n         * This event can be used for server data preprocessing. To achieve it user can modify the `response` object.\n         * @event beforeLoadApply\n         * @param {Scheduler.crud.AbstractCrudManager} source The CRUD manager.\n         * @param {Object} response The decoded server response object.\n         * @param {Object} options Options provided to the {@link #function-load} method.\n         */\n        /**\n         * Fires before sync response data get applied to the stores. Return `false` to prevent data applying.\n         * This event can be used for server data preprocessing. To achieve it user can modify the `response` object.\n         * @event beforeSyncApply\n         * @param {Scheduler.crud.AbstractCrudManager} source The CRUD manager.\n         * @param {Object} response The decoded server response object.\n         */\n        static get $name() {\n            return 'AbstractCrudManagerMixin';\n        }\n        //region Default config\n        static get defaultConfig() {\n            return {\n                /**\n                 * The server revision stamp.\n                 * The _revision stamp_ is a number which should be incremented after each server-side change.\n                 * This property reflects the current version of the data retrieved from the server and gets updated\n                 * after each {@link #function-load} and {@link #function-sync} call.\n                 * @property {Number}\n                 * @readonly\n                 * @category CRUD\n                 */\n                crudRevision : null,\n                /**\n                 * A list of registered stores whose server communication will be collected into a single batch.\n                 * Each store is represented by a _store descriptor_.\n                 * @member {CrudManagerStoreDescriptor[]} crudStores\n                 * @category CRUD\n                 */\n                /**\n                 * Sets the list of stores controlled by the CRUD manager.\n                 *\n                 * When adding a store to the CrudManager, make sure the server response format is correct for `load`\n                 * and `sync` requests. Learn more in the\n                 * [Working with data](#Scheduler/guides/data/crud_manager.md#loading-data) guide.\n                 *\n                 * Store can be provided by itself, its storeId or as a _store descriptor_.\n                 * @config {Core.data.Store[]|String[]|CrudManagerStoreDescriptor[]}\n                 * @category CRUD\n                 */\n                crudStores : [],\n                /**\n                 * Name of a store property to retrieve store identifiers from. Make sure you have an instance of a\n                 * store to use it by id. Store identifier is used as a container name holding corresponding store data\n                 * while transferring them to/from the server. By default, `storeId` property is used. And in case a\n                 * container identifier has to differ this config can be used:\n                 *\n                 * ```javascript\n                 * class CatStore extends Store {\n                 *     static configurable = {\n                 *         // store id is \"meow\" but for sending/receiving store data\n                 *         // we want to have \"cats\" container in JSON, so we create a new property \"storeIdForCrud\"\n                 *         id             : 'meow',\n                 *         storeIdForCrud : 'cats'\n                 *     }\n                 * });\n                 *\n                 * // create an instance to use a store by id\n                 * new CatStore();\n                 *\n                 * class MyCrudManager extends CrudManager {\n                 *     ...\n                 *     crudStores           : ['meow'],\n                 *     // crud manager will get store identifier from \"storeIdForCrud\" property\n                 *     storeIdProperty  : 'storeIdForCrud'\n                 * });\n                 * ```\n                 * The `storeIdProperty` property can also be specified directly on a store:\n                 *\n                 * ```javascript\n                 * class CatStore extends Store {\n                 *     static configurable = {\n                 *         // storeId is \"meow\" but for sending/receiving store data\n                 *         // we want to have \"cats\" container in JSON\n                 *         id              : 'meow',\n                 *         // so we create a new property \"storeIdForCrud\"..\n                 *         storeIdForCrud  : 'cats',\n                 *         // and point CrudManager to use it as the store identifier source\n                 *         storeIdProperty  : 'storeIdForCrud'\n                 *     }\n                 * });\n                 *\n                 * class DogStore extends Store {\n                 *     static configurable = {\n                 *         // storeId is \"dogs\" and it will be used as a container name for the store data\n                 *         storeId : 'dogs',\n                 *         // id is set to get a store by identifier\n                 *         id      : 'dogs'\n                 *     }\n                 * });\n                 *\n                 * // create an instance to use a store by id\n                 * new CatStore();\n                 * new DogStore();\n                 *\n                 * class MyCrudManager extends CrudManager {\n                 *     ...\n                 *     crudStores : ['meow', 'dogs']\n                 * });\n                 * ```\n                 * @config {String}\n                 * @category CRUD\n                 */\n                storeIdProperty : 'storeId',\n                crudFilterParam : 'filter',\n                /**\n                 * Sends request to the server.\n                 * @function sendRequest\n                 * @param {Object} request The request to send. An object having following properties:\n                 * @param {'load'|'sync'} request.type Request type, can be either `load` or `sync`\n                 * @param {String} request.data {@link #function-encode Encoded} request.\n                 * @param {Function} request.success Callback to be started on successful request transferring\n                 * @param {Function} request.failure Callback to be started on request transfer failure\n                 * @param {Object} request.thisObj `this` reference for the above `success` and `failure` callbacks\n                 * @returns {Promise} The request promise.\n                 * @abstract\n                 */\n                /**\n                 * Cancels request to the server.\n                 * @function cancelRequest\n                 * @param {Promise} promise The request promise to cancel (a value returned by corresponding\n                 * {@link #function-sendRequest} call).\n                 * @param {Function} reject Reject handle of the corresponding promise\n                 * @abstract\n                 */\n                /**\n                 * Encodes request to the server.\n                 * @function encode\n                 * @param {Object} request The request to encode.\n                 * @returns {String} The encoded request.\n                 * @abstract\n                 */\n                /**\n                 * Decodes response from the server.\n                 * @function decode\n                 * @param {String} response The response to decode.\n                 * @returns {Object} The decoded response.\n                 * @abstract\n                 */\n                transport : {},\n                /**\n                 * When `true` forces the CRUD manager to process responses depending on their `type` attribute.\n                 * So `load` request may be responded with `sync` response for example.\n                 * Can be used for smart server logic allowing the server to decide when it's better to respond with a\n                 * complete data set (`load` response) or it's enough to return just a delta (`sync` response).\n                 * @config {Boolean}\n                 * @default\n                 * @category CRUD\n                 */\n                trackResponseType : false,\n                /**\n                 * When `true` the Crud Manager does not require all updated and removed records to be mentioned in the\n                 * *sync* response. In this case response should include only server side changes.\n                 *\n                 * **Please note that added records should still be mentioned in response to provide real identifier\n                 * instead of the phantom one.**\n                 * @config {Boolean}\n                 * @default\n                 * @category CRUD\n                 */\n                supportShortSyncResponse : true,\n                /**\n                 * Field name to be used to transfer a phantom record identifier.\n                 * @config {String}\n                 * @default\n                 * @category CRUD\n                 */\n                phantomIdField : '$PhantomId',\n                /**\n                 * Field name to be used to transfer a phantom parent record identifier.\n                 * @config {String}\n                 * @default\n                 * @category CRUD\n                 */\n                phantomParentIdField : '$PhantomParentId',\n                /**\n                 * Specify `true` to automatically call {@link #function-load} method on the next frame after creation.\n                 *\n                 * Called on the next frame to allow a Scheduler (or similar) linked to a standalone CrudManager to\n                 * register its stores before loading starts.\n                 *\n                 * @config {Boolean}\n                 * @default\n                 * @category CRUD\n                 */\n                autoLoad : false,\n                /**\n                 * The timeout in milliseconds to wait before persisting changes to the server.\n                 * Used when {@link #config-autoSync} is set to `true`.\n                 * @config {Number}\n                 * @default\n                 * @category CRUD\n                 */\n                autoSyncTimeout : 100,\n                /**\n                 * `true` to automatically persist store changes after edits are made in any of the stores monitored.\n                 * Please note that sync request will not be invoked immediately but only after\n                 * {@link #config-autoSyncTimeout} interval.\n                 * @config {Boolean}\n                 * @default\n                 * @category CRUD\n                 */\n                autoSync : false,\n                /**\n                 * `True` to reset identifiers (defined by `idField` config) of phantom records before submitting them\n                 * to the server.\n                 * @config {Boolean}\n                 * @default\n                 * @category CRUD\n                 */\n                resetIdsBeforeSync : true,\n                /**\n                 * @member {CrudManagerStoreDescriptor[]} syncApplySequence\n                 * An array of stores presenting an alternative sync responses apply order.\n                 * Each store is represented by a _store descriptor_.\n                 * @category CRUD\n                 */\n                /**\n                 * An array of store identifiers sets an alternative sync responses apply order.\n                 * By default, the order in which sync responses are applied to the stores is the same as they\n                 * registered in. But in case of some tricky dependencies between stores this order can be changed:\n                 *\n                 *```javascript\n                 * class MyCrudManager extends CrudManager {\n                 *     // register stores (will be loaded in this order: 'store1' then 'store2' and finally 'store3')\n                 *     crudStores : ['store1', 'store2', 'store3'],\n                 *     // but we apply changes from server to them in an opposite order\n                 *     syncApplySequence : ['store3', 'store2', 'store1']\n                 * });\n                 *```\n                 * @config {String[]}\n                 * @category CRUD\n                 */\n                syncApplySequence : [],\n                orderedCrudStores : [],\n                /**\n                 * `true` to write all fields from the record to the server.\n                 * If set to `false` it will only send the fields that were modified.\n                 * Note that any fields that have {@link Core/data/field/DataField#config-persist} set to `false` will\n                 * still be ignored and fields having {@link Core/data/field/DataField#config-alwaysWrite} set to `true`\n                 * will always be included.\n                 * @config {Boolean}\n                 * @default\n                 * @category CRUD\n                 */\n                writeAllFields : false,\n                crudIgnoreUpdates : 0,\n                autoSyncSuspendCounter : 0,\n                // Flag that shows if crud manager performed successful load request\n                crudLoaded : false,\n                applyingLoadResponse : false,\n                applyingSyncResponse : false,\n                callOnFunctions : true\n            };\n        }\n        static configurable = {\n            /**\n             * Convenience shortcut to set only the url to load from, when you do not need to supply any other config\n             * options in the `load` section of the `transport` config.\n             *\n             * Using `loadUrl`:\n             * ```javascript\n             * {\n             *     loadUrl : 'read.php\n             * }\n             * ```\n             *\n             * Equals the following `transport` config:\n             * ```javascript\n             * {\n             *     transport : {\n             *         load : {\n             *             url : 'read.php'\n             *         }\n             *     }\n             * }\n             * ```\n             *\n             * When read at runtime, it will return the value from `transport.load.url`.\n             *\n             * @prp {String}\n             */\n            loadUrl : null,\n            /**\n             * Convenience shortcut to set only the url to sync to, when you do not need to supply any other config\n             * options in the `sync` section of the `transport` config.\n             *\n             * Using `loadUrl`:\n             * ```javascript\n             * {\n             *     syncUrl : 'sync.php\n             * }\n             * ```\n             *\n             * Equals the following `transport` config:\n             * ```javascript\n             * {\n             *     transport : {\n             *         load : {\n             *             url : 'sync.php'\n             *         }\n             *     }\n             * }\n             * ```\n             *\n             * When read at runtime, it will return the value from `transport.sync.url`.\n             *\n             * @prp {String}\n             */\n            syncUrl : null,\n            /**\n             * Specify as `true` to force sync requests to be sent when calling `sync()`, even if there are no local\n             * changes. Useful in a polling scenario, to keep client up to date with the backend.\n             * @prp {Boolean}\n             */\n            forceSync : null\n        };\n        static delayable = {\n            // Postponed to next frame, to allow Scheduler created after CrudManager to inject its stores\n            // (timeRanges, resourceTimeRanges)\n            doAutoLoad : 'raf'\n        };\n        get isCrudManager() {\n            return true;\n        }\n        //endregion\n        //region Init\n        construct(config = {}) {\n            this._requestId = 0;\n            this.activeRequests = {};\n            this.crudStoresIndex = {};\n            super.construct(config);\n        }\n        afterConstruct() {\n            super.afterConstruct();\n            if (this.autoLoad) {\n                this._autoLoadPromise = this.doAutoLoad();\n            }\n        }\n        //endregion\n        //region Configs\n        get loadUrl() {\n            return this.transport?.load?.url;\n        }\n        updateLoadUrl(url) {\n            ObjectHelper.setPath(this, 'transport.load.url', url);\n        }\n        get syncUrl() {\n            return this.transport?.sync?.url;\n        }\n        updateSyncUrl(url) {\n            ObjectHelper.setPath(this, 'transport.sync.url', url);\n        }\n        //endregion\n        //region Store descriptors & index\n        /**\n         * Returns a registered store descriptor.\n         * @param {String|Core.data.Store} storeId The store identifier or registered store instance.\n         * @returns {CrudManagerStoreDescriptor} The descriptor of the store.\n         * @category CRUD\n         */\n        getStoreDescriptor(storeId) {\n            if (!storeId) return null;\n            if (storeId instanceof Store) return this.crudStores.find(storeDesc => storeDesc.store === storeId);\n            if (typeof storeId === 'object') return this.crudStoresIndex[storeId.storeId];\n            return this.crudStoresIndex[storeId] || this.getStoreDescriptor(Store.getStore(storeId));\n        }\n        fillStoreDescriptor(descriptor) {\n            const\n                { store } = descriptor,\n                {\n                    storeIdProperty = this.storeIdProperty,\n                    modelClass\n                }         = store;\n            if (!descriptor.storeId) {\n                descriptor.storeId = store[storeIdProperty] || store.id;\n            }\n            if (!descriptor.idField) {\n                descriptor.idField = modelClass.idField;\n            }\n            if (!descriptor.phantomIdField) {\n                descriptor.phantomIdField = modelClass.phantomIdField;\n            }\n            if (!descriptor.phantomParentIdField) {\n                descriptor.phantomParentIdField = modelClass.phantomParentIdField;\n            }\n            if (!('writeAllFields' in descriptor)) {\n                descriptor.writeAllFields = store.writeAllFields;\n            }\n            return descriptor;\n        }\n        updateCrudStoreIndex() {\n            const\n                crudStoresIndex = this.crudStoresIndex = {};\n            this.crudStores.forEach(store => store.storeId && (crudStoresIndex[store.storeId] = store));\n        }\n        //endregion\n        //region Store collection (add, remove, get & iterate)\n        /**\n         * Returns a registered store.\n         * @param {String} storeId Store identifier.\n         * @returns {Core.data.Store} Found store instance.\n         * @category CRUD\n         */\n        getCrudStore(storeId) {\n            const storeDescriptor = this.getStoreDescriptor(storeId);\n            return storeDescriptor?.store;\n        }\n        forEachCrudStore(fn, thisObj = this) {\n            if (!fn) {\n                throw new Error('Iterator function must be provided');\n            }\n            this.crudStores.every(store =>\n                fn.call(thisObj, store.store, store.storeId, store) !== false\n            );\n        }\n        set crudStores(stores) {\n            this._crudStores = [];\n            this.addCrudStore(stores);\n            // Ensure preconfigured stores stay stable at the start of the array when\n            // addPrioritizedStore attempts to insert in order. Only featured gantt/scheduler stores\n            // must participate in the ordering. If they were configured in, they must not move.\n            for (const store of this._crudStores) {\n                store.loadPriority = store.syncPriority = 0;\n            }\n        }\n        get crudStores() {\n            return this._crudStores;\n        }\n        get orderedCrudStores() {\n            return this._orderedCrudStores;\n        }\n        set orderedCrudStores(stores) {\n            return this._orderedCrudStores = stores;\n        }\n        set syncApplySequence(stores) {\n            this._syncApplySequence = [];\n            this.addStoreToApplySequence(stores);\n        }\n        get syncApplySequence() {\n            return this._syncApplySequence;\n        }\n        internalAddCrudStore(store) {\n            const\n                me = this;\n            let storeInfo;\n            // if store instance provided\n            if (store instanceof Store) {\n                storeInfo = { store };\n            }\n            else if (typeof store === 'object') {\n                if (!store.store) {\n                    // not a store descriptor, assume it is a store config\n                    store = {\n                        storeId : store.id,\n                        store   : new Store(store)\n                    };\n                }\n                storeInfo = store;\n            }\n            // if it's a store identifier\n            else {\n                storeInfo = { store : Store.getStore(store) };\n            }\n            me.fillStoreDescriptor(storeInfo);\n            // store instance\n            store = storeInfo.store;\n            // if the store has \"setCrudManager\" hook - use it\n            if (store.setCrudManager) {\n                store.setCrudManager(me);\n            }\n            // otherwise decorate the store w/ \"crudManager\" property\n            else {\n                store.crudManager = me;\n            }\n            // Stores have a defaultConfig for pageSize. CrudManager does not support that.\n            store.pageSize = null;\n            // Prevent AjaxStores from performing their own CRUD operations if CrudManager is configured with an URL\n            if (me.loadUrl || me.syncUrl) {\n                store.autoCommit = false;\n                store.autoLoad = false;\n                if (store.createUrl || store.updateUrl || store.deleteUrl || store.readUrl) {\n                    console.warn('You have configured an URL on a Store that is handled by a CrudManager that is also configured with an URL. The Store URL\\'s should be removed.');\n                }\n            }\n            // listen to store changes\n            me.bindCrudStoreListeners(store);\n            return storeInfo;\n        }\n        /**\n         * Adds a store to the collection.\n         *\n         *```javascript\n         * // append stores to the end of collection\n         * crudManager.addCrudStore([\n         *     store1,\n         *     // storeId\n         *     'bar',\n         *     // store descriptor\n         *     {\n         *         storeId : 'foo',\n         *         store   : store3\n         *     },\n         *     {\n         *         storeId         : 'bar',\n         *         store           : store4,\n         *         // to write all fields of modified records\n         *         writeAllFields  : true\n         *     }\n         * ]);\n         *```\n         *\n         * **Note:** Order in which stores are kept in the collection is very essential sometimes.\n         * Exactly in this order the loaded data will be put into each store.\n         *\n         * When adding a store to the CrudManager, make sure the server response format is correct for `load` and `sync`\n         * requests. Learn more in the [Working with data](#Scheduler/guides/data/crud_manager.md#loading-data) guide.\n         *\n         * @param {Core.data.Store|String|CrudManagerStoreDescriptor|Core.data.Store[]|String[]|CrudManagerStoreDescriptor[]} store\n         * A store or list of stores. Each store might be specified by its instance, `storeId` or _descriptor_.\n         * @param {Number} [position] The relative position of the store. If `fromStore` is specified the position\n         * will be taken relative to it. If not specified then store(s) will be appended to the end of collection.\n         * Otherwise, it will be just a position in stores collection.\n         *\n         * ```javascript\n         * // insert stores store4, store5 to the start of collection\n         * crudManager.addCrudStore([ store4, store5 ], 0);\n         * ```\n         *\n         * @param {String|Core.data.Store|CrudManagerStoreDescriptor} [fromStore] The store relative to which position\n         * should be calculated. Can be defined as a store identifier, instance or descriptor (the result of\n         * {@link #function-getStoreDescriptor} call).\n         *\n         * ```javascript\n         * // insert store6 just before a store having storeId equal to 'foo'\n         * crudManager.addCrudStore(store6, 0, 'foo');\n         *\n         * // insert store7 just after store3 store\n         * crudManager.addCrudStore(store7, 1, store3);\n         * ```\n         * @category CRUD\n         */\n        addCrudStore(store, position, fromStore) {\n            store = ArrayHelper.asArray(store);\n            if (!store?.length) {\n                return;\n            }\n            const\n                me     = this,\n                stores = store.map(me.internalAddCrudStore, me);\n            // if no position specified then append stores to the end\n            if (typeof position === 'undefined') {\n                me.crudStores.push(...stores);\n            }\n            // if position specified\n            else {\n                // if specified the store relative to which we should insert new one(-s)\n                if (fromStore) {\n                    if (fromStore instanceof Store || typeof fromStore !== 'object') fromStore = me.getStoreDescriptor(fromStore);\n                    // get its position\n                    position += me.crudStores.indexOf(fromStore);\n                }\n                // insert new store(-s)\n                me.crudStores.splice(position, 0, ...stores);\n            }\n            me.orderedCrudStores.push(...stores);\n            me.updateCrudStoreIndex();\n        }\n        // Adds configured scheduler stores to the store collection ensuring correct order\n        // unless they're already registered.\n        addPrioritizedStore(store) {\n            const me = this;\n            if (!me.hasCrudStore(store)) {\n                me.addCrudStore(store, ArrayHelper.findInsertionIndex(store, me.crudStores, storeLoadSortFn));\n            }\n            if (!me.hasApplySequenceStore(store)) {\n                me.addStoreToApplySequence(store, ArrayHelper.findInsertionIndex(store, me.syncApplySequence, storeSyncSortFn));\n            }\n        }\n        hasCrudStore(store) {\n            return this.crudStores?.some(s => s === store || s.store === store || s.storeId === store);\n        }\n        /**\n         * Removes a store from collection. If the store was registered in alternative sync sequence list\n         * it will be removed from there as well.\n         *\n         * ```javascript\n         * // remove store having storeId equal to \"foo\"\n         * crudManager.removeCrudStore(\"foo\");\n         *\n         * // remove store3\n         * crudManager.removeCrudStore(store3);\n         * ```\n         *\n         * @param {CrudManagerStoreDescriptor|String|Core.data.Store} store The store to remove. Either the store\n         * descriptor, store identifier or store itself.\n         * @category CRUD\n         */\n        removeCrudStore(store) {\n            const\n                me         = this,\n                stores     = me.crudStores,\n                foundStore = stores.find(s => s === store || s.store === store || s.storeId === store);\n            if (foundStore) {\n                // unbind store listeners\n                me.unbindCrudStoreListeners(foundStore.store);\n                delete me.crudStoresIndex[foundStore.storeId];\n                ArrayHelper.remove(stores, foundStore);\n                if (me.syncApplySequence) {\n                    me.removeStoreFromApplySequence(store);\n                }\n            }\n            else {\n                throw new Error('Store not found in stores collection');\n            }\n        }\n        //endregion\n        //region Store listeners\n        bindCrudStoreListeners(store) {\n            store.ion({\n                name : store.id,\n                // When a tentatively added record gets confirmed as permanent, this signals a change\n                addConfirmed : 'onCrudStoreChange',\n                change       : 'onCrudStoreChange',\n                destroy      : 'onCrudStoreDestroy',\n                thisObj      : this\n            });\n        }\n        unbindCrudStoreListeners(store) {\n            this.detachListeners(store.id);\n        }\n        //endregion\n        //region Apply sequence\n        /**\n         * Adds a store to the alternative sync responses apply sequence.\n         * By default, the order in which sync responses are applied to the stores is the same as they registered in.\n         * But this order can be changes either on construction step using {@link #config-syncApplySequence} option\n         * or by calling this method.\n         *\n         * **Please note**, that if the sequence was not initialized before this method call then\n         * you will have to do it yourself like this for example:\n         *\n         * ```javascript\n         * // alternative sequence was not set for this crud manager\n         * // so let's fill it with existing stores keeping the same order\n         * crudManager.addStoreToApplySequence(crudManager.crudStores);\n         *\n         * // and now we can add our new store\n         *\n         * // we will load its data last\n         * crudManager.addCrudStore(someNewStore);\n         * // but changes to it will be applied first\n         * crudManager.addStoreToApplySequence(someNewStore, 0);\n         * ```\n         * add registered stores to the sequence along with the store(s) you want to add\n         *\n         * @param {Core.data.Store|CrudManagerStoreDescriptor|Core.data.Store[]|CrudManagerStoreDescriptor[]} store The\n         * store to add or its _descriptor_ (or array of stores or descriptors).\n         * @param {Number} [position] The relative position of the store. If `fromStore` is specified the position\n         * will be taken relative to it. If not specified then store(s) will be appended to the end of collection.\n         * Otherwise, it will be just a position in stores collection.\n         *\n         * ```javascript\n         * // insert stores store4, store5 to the start of sequence\n         * crudManager.addStoreToApplySequence([ store4, store5 ], 0);\n         * ```\n         * @param {String|Core.data.Store|CrudManagerStoreDescriptor} [fromStore] The store relative to which position\n         * should be calculated. Can be defined as a store identifier, instance or its descriptor (the result of\n         * {@link #function-getStoreDescriptor} call).\n         *\n         * ```javascript\n         * // insert store6 just before a store having storeId equal to 'foo'\n         * crudManager.addStoreToApplySequence(store6, 0, 'foo');\n         *\n         * // insert store7 just after store3 store\n         * crudManager.addStoreToApplySequence(store7, 1, store3);\n         * ```\n         * @category CRUD\n         */\n        addStoreToApplySequence(store, position, fromStore) {\n            if (!store) {\n                return;\n            }\n            store = ArrayHelper.asArray(store);\n            const\n                me   = this,\n                // loop over list of stores to add\n                data = store.reduce((collection, store) => {\n                    const s = me.getStoreDescriptor(store);\n                    s && collection.push(s);\n                    return collection;\n                }, []);\n            // if no position specified then append stores to the end\n            if (typeof position === 'undefined') {\n                me.syncApplySequence.push(...data);\n                // if position specified\n            }\n            else {\n                let pos = position;\n                // if specified the store relative to which we should insert new one(-s)\n                if (fromStore) {\n                    if (fromStore instanceof Store || typeof fromStore !== 'object') fromStore = me.getStoreDescriptor(fromStore);\n                    // get its position\n                    pos += me.syncApplySequence.indexOf(fromStore);\n                }\n                // insert new store(-s)\n                //me.syncApplySequence.splice.apply(me.syncApplySequence, [].concat([pos, 0], data));\n                me.syncApplySequence.splice(pos, 0, ...data);\n            }\n            const sequenceKeys = me.syncApplySequence.map(({ storeId }) => storeId);\n            me.orderedCrudStores = [...me.syncApplySequence];\n            me.crudStores.forEach(storeDesc => {\n                if (!sequenceKeys.includes(storeDesc.storeId)) {\n                    me.orderedCrudStores.push(storeDesc);\n                }\n            });\n        }\n        /**\n         * Removes a store from the alternative sync sequence.\n         *\n         * ```javascript\n         * // remove store having storeId equal to \"foo\"\n         * crudManager.removeStoreFromApplySequence(\"foo\");\n         * ```\n         *\n         * @param {CrudManagerStoreDescriptor|String|Core.data.Store} store The store to remove. Either the store\n         * descriptor, store identifier or store itself.\n         * @category CRUD\n         */\n        removeStoreFromApplySequence(store) {\n            const index = this.syncApplySequence.findIndex(s => s === store || s.store === store || s.storeId === store);\n            if (index > -1) {\n                this.syncApplySequence.splice(index, 1);\n                // ordered crud stores list starts with syncApplySequence, we can use same index\n                this.orderedCrudStores.splice(index, 1);\n            }\n        }\n        hasApplySequenceStore(store) {\n            return this.syncApplySequence.some(s => s === store || s.store === store || s.storeId === store);\n        }\n        //endregion\n        //region Events\n        // Remove stores that are destroyed, to not try and apply response changes etc. to them\n        onCrudStoreDestroy({ source : store }) {\n            this.removeCrudStore(store);\n        }\n        onCrudStoreChange(event) {\n            const me = this;\n            if (me.crudIgnoreUpdates) {\n                return;\n            }\n            /**\n             * Fires when data in any of the registered data stores is changed.\n             * ```javascript\n             *     crudManager.on('hasChanges', function (crud) {\n             *         // enable persist changes button when some store gets changed\n             *         saveButton.enable();\n             *     });\n             * ```\n             * @event hasChanges\n             * @param {Scheduler.crud.AbstractCrudManager} source The CRUD manager.\n             */\n            if (me.crudStoreHasChanges(event?.source)) {\n                me.trigger('hasChanges');\n                if (me.autoSync) {\n                    me.scheduleAutoSync();\n                }\n            }\n            else {\n                me.trigger('noChanges');\n            }\n        }\n        /**\n         * Suspends automatic sync upon store changes. Can be called multiple times (it uses an internal counter).\n         * @category CRUD\n         */\n        suspendAutoSync() {\n            this.autoSyncSuspendCounter++;\n        }\n        /**\n         * Resumes automatic sync upon store changes. Will schedule a sync if the internal counter is 0.\n         * @param {Boolean} [doSync=true] Pass `true` to schedule a sync after resuming (if there are pending\n         * changes) and `false` to not persist the changes.\n         * @category CRUD\n         */\n        resumeAutoSync(doSync = true) {\n            const me = this;\n            me.autoSyncSuspendCounter--;\n            if (me.autoSyncSuspendCounter <= 0) {\n                me.autoSyncSuspendCounter = 0;\n                // if configured to trigger persisting and there are changes\n                if (doSync && me.autoSync && me.crudStoreHasChanges()) {\n                    me.scheduleAutoSync();\n                }\n            }\n        }\n        get isAutoSyncSuspended() {\n            return this.autoSyncSuspendCounter > 0;\n        }\n        scheduleAutoSync() {\n            const me = this;\n            // add deferred call if it's not scheduled yet\n            if (!me.hasTimeout('autoSync') && !me.isAutoSyncSuspended) {\n                me.setTimeout({\n                    name : 'autoSync',\n                    fn   : () => {\n                        me.sync().catch(error => {\n                        });\n                    },\n                    delay : me.autoSyncTimeout\n                });\n            }\n        }\n        async triggerFailedRequestEvents(request, response, responseText, fetchOptions) {\n            const { options, type : requestType } = request;\n            /**\n             * Fires when a request fails.\n             * @event requestFail\n             * @param {Scheduler.crud.AbstractCrudManager} source The CRUD manager instance.\n             * @param {'sync'|'load'} requestType The request type (`sync` or `load`).\n             * @param {Object} response The decoded server response object.\n             * @param {String} responseText The raw server response text\n             * @param {Object} responseOptions The response options.\n             */\n            this.trigger('requestFail', { requestType, response, responseText, responseOptions : fetchOptions });\n            /**\n             * Fires when a {@link #function-load load request} fails.\n             * @event loadFail\n             * @param {Scheduler.crud.AbstractCrudManager} source The CRUD manager instance.\n             * @param {Object} response The decoded server response object.\n             * @param {String} responseText The raw server response text\n             * @param {Object} responseOptions The response options.\n             * @params {Object} options Options provided to the {@link #function-load} method.\n             */\n            /**\n             * Fires when a {@link #function-sync sync request} fails.\n             * @event syncFail\n             * @param {Scheduler.crud.AbstractCrudManager} source The CRUD manager instance.\n             * @param {Object} response The decoded server response object.\n             * @param {String} responseText The raw server response text\n             * @param {Object} responseOptions The response options.\n             */\n            this.trigger(requestType + 'Fail', { response, responseOptions : fetchOptions, responseText, options });\n        }\n        async internalOnResponse(request, responseText, fetchOptions) {\n            const\n                me                              = this,\n                response                        = responseText ? me.decode(responseText) : null,\n                { options, type : requestType } = request;\n            if (responseText && !response) {\n                console.error('Failed to parse response: ' + responseText);\n            }\n            if (!response || (me.skipSuccessProperty ? response.success === false : !response.success)) {\n                me.triggerFailedRequestEvents(request, response, responseText, fetchOptions);\n            }\n            else if (\n                me.trigger('beforeResponseApply', { requestType, response }) !== false &&\n                me.trigger(`before${StringHelper.capitalize(requestType)}Apply`, { response, options }) !== false\n            ) {\n                me.crudRevision = response.revision;\n                await me.applyResponse(request, response, options);\n                // Might have been destroyed while applying response\n                if (me.isDestroyed) {\n                    return;\n                }\n                /**\n                 * Fires on successful request completion after data gets applied to the stores.\n                 * @event requestDone\n                 * @param {Scheduler.crud.AbstractCrudManager} source The CRUD manager.\n                 * @param {'sync'|'load'} requestType The request type (`sync` or `load`).\n                 * @param {Object} response The decoded server response object.\n                 * @param {Object} responseOptions The server response options.\n                 */\n                me.trigger('requestDone', { requestType, response, responseOptions : fetchOptions });\n                /**\n                 * Fires on successful {@link #function-load load request} completion after data gets loaded to the stores.\n                 * @event load\n                 * @param {Scheduler.crud.AbstractCrudManager} source The CRUD manager.\n                 * @param {Object} response The decoded server response object.\n                 * @param {Object} responseOptions The server response options.\n                 * @params {Object} options Options provided to the {@link #load} method.\n                 */\n                /**\n                 * Fires on successful {@link #function-sync sync request} completion.\n                 * @event sync\n                 * @param {Scheduler.crud.AbstractCrudManager} source The CRUD manager.\n                 * @param {Object} response The decoded server response object.\n                 * @param {Object} responseOptions The server response options.\n                 */\n                me.trigger(requestType, { response, responseOptions : fetchOptions, options });\n                if (requestType === 'load' || !me.crudStoreHasChanges()) {\n                    /**\n                     * Fires when registered stores get into state when they don't have any\n                     * not persisted change. This happens after {@link #function-load} or {@link #function-sync} request\n                     * completion. Or this may happen after a record update which turns its fields back to their original state.\n                     *\n                     * ```javascript\n                     * crudManager.on('nochanges', function (crud) {\n                     *     // disable persist changes button when there is no changes\n                     *     saveButton.disable();\n                     * });\n                     * ```\n                     *\n                     * @event noChanges\n                     * @param {Scheduler.crud.AbstractCrudManager} source The CRUD manager.\n                     */\n                    me.trigger('noChanges');\n                    if (requestType === 'load') {\n                        me.emitCrudStoreEvents(request.pack.stores, 'afterRequest');\n                    }\n                }\n            }\n            return response;\n        }\n        //endregion\n        //region Changes tracking\n        suspendChangesTracking() {\n            this.crudIgnoreUpdates++;\n        }\n        resumeChangesTracking(skipChangeCheck) {\n            if (this.crudIgnoreUpdates && !--this.crudIgnoreUpdates && !skipChangeCheck) {\n                this.onCrudStoreChange();\n            }\n        }\n        get isBatchingChanges() {\n            return this.crudIgnoreUpdates > 0;\n        }\n        /**\n         * Returns `true` if any of registered stores (or some particular store) has non persisted changes.\n         *\n         * ```javascript\n         * // if we have any unsaved changes\n         * if (crudManager.crudStoreHasChanges()) {\n         *     // persist them\n         *     crudManager.sync();\n         * // otherwise\n         * } else {\n         *     alert(\"There are no unsaved changes...\");\n         * }\n         * ```\n         *\n         * @param {String|Core.data.Store} [storeId] The store identifier or store instance to check changes for.\n         * If not specified then will check changes for all of the registered stores.\n         * @returns {Boolean} `true` if there are not persisted changes.\n         * @category CRUD\n         */\n        crudStoreHasChanges(storeId) {\n            return storeId\n                ? this.isCrudStoreDirty(this.getCrudStore(storeId))\n                : this.crudStores.some(config => this.isCrudStoreDirty(config.store));\n        }\n        isCrudStoreDirty(store) {\n            return Boolean(store.changes);\n        }\n        //endregion\n        //region Load\n        doAutoLoad() {\n            return this.load().catch(error => {\n            });\n        }\n        emitCrudStoreEvents(stores, eventName, eventParams) {\n            const event = { action : 'read' + eventName, ...eventParams };\n            for (const store of this.crudStores) {\n                if (stores.includes(store.storeId)) {\n                    store.store.trigger(eventName, event);\n                }\n            }\n        }\n        getLoadPackage(options) {\n            const\n                pack        = {\n                    type      : 'load',\n                    requestId : this.requestId\n                },\n                stores      = this.crudStores,\n                optionsCopy = Object.assign({}, options);\n            // This is a special option which does not apply to a store.\n            // It's used as options to the AjaxTransport#sendRequest method\n            delete optionsCopy.request;\n            pack.stores = stores.map(store => {\n                const\n                    opts     = optionsCopy?.[store.storeId],\n                    pageSize = store.pageSize || store.store?.pageSize;\n                if (opts || pageSize) {\n                    const\n                        params = Object.assign({\n                            storeId : store.storeId,\n                            page    : 1\n                        }, opts);\n                    if (pageSize) {\n                        params.pageSize = pageSize;\n                    }\n                    store.currentPage = params.page;\n                    // Remove from common request options\n                    if (opts) {\n                        delete optionsCopy[store.storeId];\n                    }\n                    return params;\n                }\n                return store.storeId;\n            });\n            // Apply common request options\n            Object.assign(pack, optionsCopy);\n            return pack;\n        }\n        loadCrudStore(store, data, options) {\n            const rows = data?.rows;\n            if (options?.append || data?.append) {\n                store.add(rows);\n            }\n            else {\n                store.data = rows;\n            }\n            store.trigger('load', { data : rows });\n        }\n        loadDataToCrudStore(storeDesc, data, options) {\n            const\n                store = storeDesc.store,\n                rows  = data?.rows;\n            store.__loading = true;\n            if (rows) {\n                this.loadCrudStore(store, data, options, storeDesc);\n            }\n            store.__loading = false;\n        }\n        /**\n         * Loads data to the Crud Manager\n         * @param {Object} response A simple object representing the data.\n         * The object structure matches the decoded `load` response structure:\n         *\n         * ```js\n         * // load static data into crudManager\n         * crudManager.loadCrudManagerData({\n         *     success   : true,\n         *     resources : {\n         *         rows : [\n         *             { id : 1, name : 'John' },\n         *             { id : 2, name : 'Abby' }\n         *         ]\n         *     }\n         * });\n         * ```\n         * @param {Object} [options] Extra data loading options.\n         * @category CRUD\n         */\n        loadCrudManagerData(response, options = {}) {\n            // we don't want to react to store changes during loading of them\n            this.suspendChangesTracking();\n            // we load data to the stores in the order they're kept in this.stores array\n            this.crudStores.forEach(storeDesc => {\n                const\n                    storeId = storeDesc.storeId,\n                    data    = response[storeId];\n                if (data) {\n                    this.loadDataToCrudStore(storeDesc, data, options[storeId]);\n                }\n            });\n            this.resumeChangesTracking(true);\n        }\n        /**\n         * Returns true if the crud manager is currently loading data\n         * @property {Boolean}\n         * @readonly\n         * @category CRUD\n         */\n        get isCrudManagerLoading() {\n            return Boolean(this.activeRequests.load || this.applyingLoadResponse);\n        }\n        /**\n         * Returns true if the crud manager is currently syncing data\n         * @property {Boolean}\n         * @readonly\n         * @category CRUD\n         */\n        get isCrudManagerSyncing() {\n            return Boolean(this.activeRequests.sync || this.applyingSyncResponse);\n        }\n        get isLoadingOrSyncing() {\n            return Boolean(this.isCrudManagerLoading || this.isCrudManagerSyncing);\n        }\n        /**\n         * Loads data to the stores registered in the crud manager. For example:\n         *\n         * ```javascript\n         * crudManager.load(\n         *     // here are request parameters\n         *     {\n         *         store1 : { append : true, page : 3, smth : 'foo' },\n         *         store2 : { page : 2, bar : '!!!' }\n         *     }\n         * ).then(\n         *     () => alert('OMG! It works!'),\n         *     ({ response, cancelled }) => console.log(`Error: ${cancelled ? 'Cancelled' : response.message}`)\n         * );\n         * ```\n         *\n         * ** Note: ** If there is an incomplete load request in progress then system will try to cancel it by calling {@link #function-cancelRequest}.\n         * @param {Object|String} [options] The request parameters or a URL.\n         * @param {Object} [options.request] An object which contains options to merge\n         * into the options which are passed to {@link Scheduler/crud/transport/AjaxTransport#function-sendRequest}.\n         * ```javascript\n         * {\n         *     store1 : { page : 3, append : true, smth : 'foo' },\n         *     store2 : { page : 2, bar : '!!!' },\n         *     request : {\n         *         params : {\n         *             startDate : '2021-01-01'\n         *         }\n         *     }\n         * },\n         * ```\n         *\n         * Omitting request arg:\n         * ```javascript\n         * crudManager.load().then(\n         *     () => alert('OMG! It works!'),\n         *     ({ response, cancelled }) => console.log(`Error: ${cancelled ? 'Cancelled' : response.message}`)\n         * );\n         * ```\n         *\n         * When presented it should be an object where keys are store Ids and values are, in turn, objects\n         * of parameters related to the corresponding store. These parameters will be transferred in each\n         * store's entry in the `stores` property of the POST data.\n         *\n         * Additionally, for flat stores `append: true` can be specified to add loaded records to the existing records,\n         * default is to remove corresponding store's existing records first.\n         * **Please note** that for delta loading you can also use an {@link #config-trackResponseType alternative approach}.\n         * @param {'sync'|'load'} [options.request.type] The request type. Either `load` or `sync`.\n         * @param {String} [options.request.url] The URL for the request. Overrides the URL defined in the `transport`\n         * object\n         * @param {String} [options.request.data] The encoded _Crud Manager_ request data.\n         * @param {Object} [options.request.params] An object specifying extra HTTP params to send with the request.\n         * @param {Function} [options.request.success] A function to be started on successful request transferring.\n         * @param {String} [options.request.success.rawResponse] `Response` object returned by the\n         * [fetch api](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API).\n         * @param {Function} [options.request.failure] A function to be started on request transfer failure.\n         * @param {String} [options.request.failure.rawResponse] `Response` object returned by the\n         * [fetch api](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API).\n         * @param {Object} [options.request.thisObj] `this` reference for the above `success` and `failure` functions.\n         * @returns {Promise} Promise, which is resolved if request was successful.\n         * Both the resolve and reject functions are passed a `state` object. State object has following structure:\n         *\n         * ```\n         * {\n         *     cancelled       : Boolean, // **optional** flag, which is present when promise was rejected\n         *     rawResponse     : String,  // raw response from ajax request, either response xml or text\n         *     rawResponseText : String,  // raw response text as String from ajax request\n         *     response        : Object,  // processed response in form of object\n         *     options         : Object   // options, passed to load request\n         * }\n         * ```\n         *\n         * If promise was rejected by {@link #event-beforeLoad} event, `state` object will have the following structure:\n         *\n         * ```\n         * {\n         *     cancelled : true\n         * }\n         * ```\n         * @category CRUD\n         * @async\n         */\n        load(options) {\n            if (typeof options === 'string') {\n                options = {\n                    request : {\n                        url : options\n                    }\n                };\n            }\n            const\n                me   = this,\n                pack = me.getLoadPackage(options);\n            me._autoLoadPromise = null;\n            return new Promise((resolve, reject) => {\n                /**\n                 * Fires before {@link #function-load load request} is sent. Return `false` to cancel load request.\n                 * @event beforeLoad\n                 * @param {Scheduler.crud.AbstractCrudManager} source The CRUD manager.\n                 * @param {Object} pack The data package which contains data for all stores managed by the crud manager.\n                 */\n                if (me.trigger('beforeLoad', { pack }) !== false) {\n                    // if another load request is in progress let's cancel it\n                    const { load } = me.activeRequests;\n                    if (load) {\n                        me.cancelRequest(load.desc, load.reject);\n                        me.trigger('loadCanceled', { pack });\n                    }\n                    const request = Objects.assign({\n                        id      : pack.requestId,\n                        data    : me.encode(pack),\n                        type    : 'load',\n                        success : me.onCrudRequestSuccess,\n                        failure : me.onCrudRequestFailure,\n                        thisObj : me\n                    }, options?.request);\n                    me.activeRequests.load = {\n                        type : 'load',\n                        options,\n                        pack,\n                        resolve,\n                        reject(...args) {\n                            // sendRequest will start a fetch promise, which we cannot reject from here. In fact what we\n                            // need to do, is to make fetch.then() to not call any real handlers. Which is what we do here.\n                            request.success = request.failure = null;\n                            reject(...args);\n                        },\n                        id   : pack.requestId,\n                        desc : me.sendRequest(request)\n                    };\n                    me.emitCrudStoreEvents(pack.stores, 'loadStart');\n                    me.trigger('loadStart', { pack });\n                }\n                else {\n                    /**\n                     * Fired after {@link #function-load load request} was canceled by some {@link #event-beforeLoad}\n                     * listener or due to incomplete prior load request.\n                     * @event loadCanceled\n                     * @param {Scheduler.crud.AbstractCrudManager} source The CRUD manager.\n                     * @param {Object} pack The data package which contains data for all stores managed by the crud\n                     * manager.\n                     */\n                    me.trigger('loadCanceled', { pack });\n                    reject({ cancelled : true });\n                }\n            });\n        }\n        getActiveCrudManagerRequest(requestType) {\n            let request = this.activeRequests[requestType];\n            if (!request && this.trackResponseType) {\n                request = Object.values(this.activeRequests)[0];\n            }\n            return request;\n        }\n        //endregion\n        //region Changes (prepare, process, get)\n        prepareAddedRecordData(record, storeInfo) {\n            const\n                me                   = this,\n                { store }            = storeInfo,\n                { isTree }           = store,\n                phantomIdField       = storeInfo.phantomIdField || me.phantomIdField,\n                phantomParentIdField = storeInfo.phantomParentIdField || me.phantomParentIdField,\n                subStoreFields       = store.modelClass.allFields.filter(field => field.subStore),\n                cls                  = record.constructor,\n                data                 = Object.assign(record.persistableData, {\n                    [phantomIdField] : record.id\n                });\n            if (isTree) {\n                const { parent } = record;\n                if (parent && !parent.isRoot && parent.isPhantom) {\n                    data[phantomParentIdField] = parent.id;\n                }\n            }\n            if (me.resetIdsBeforeSync) {\n                ObjectHelper.deletePath(data, cls.idField);\n            }\n            // If we have store fields that should be persisted w/ Crud Manager protocol\n            subStoreFields.forEach(field => {\n                const subStore = record.get(field.name);\n                if (subStore.allCount) {\n                    data[field.dataSource] = {\n                        added : subStore.getRange()\n                            .map(record => me.prepareAddedRecordData(record, { store : subStore }))\n                    };\n                }\n            });\n            return data;\n        }\n        prepareAdded(list, storeInfo) {\n            return list.filter(record => record.isValid).map(record => this.prepareAddedRecordData(record, storeInfo));\n        }\n        prepareUpdated(list, storeInfo) {\n            const\n                { store }            = storeInfo,\n                { isTree }           = store,\n                writeAllFields       = storeInfo.writeAllFields || (storeInfo.writeAllFields !== false && this.writeAllFields),\n                phantomParentIdField = storeInfo.phantomParentIdField || this.phantomParentIdField,\n                subStoreFields       = store.modelClass.allFields.filter(field => field.subStore);\n            if (storeInfo.store.tree) {\n                const rootNode = storeInfo.store.rootNode;\n                list = list.filter(record => record !== rootNode);\n            }\n            return list.filter(record => record.isValid).reduce((data, record) => {\n                let recordData;\n                // write all fields\n                if (writeAllFields) {\n                    recordData = record.persistableData;\n                }\n                else {\n                    recordData = record.modificationDataToWrite;\n                }\n                if (isTree) {\n                    const { parent } = record;\n                    if (parent && !parent.isRoot && parent.isPhantom) {\n                        recordData[phantomParentIdField] = parent.id;\n                    }\n                }\n                // If we have store fields that should be persisted w/ Crud Manager protocal\n                subStoreFields.forEach(field => {\n                    const subStore = record.get(field.name);\n                    recordData[field.dataSource] = this.getCrudStoreChanges({ store : subStore });\n                });\n                // recordData can be null\n                if (!ObjectHelper.isEmpty(recordData)) {\n                    data.push(recordData);\n                }\n                return data;\n            }, []);\n        }\n        prepareRemoved(list) {\n            return list.map(record => {\n                const cls = record.constructor;\n                return ObjectHelper.setPath({}, cls.idField, record.id);\n            });\n        }\n        getCrudStoreChanges(storeDescriptor) {\n            const { store } = storeDescriptor;\n            let { added = [], modified : updated = [], removed = [] } = (store.changes || {}),\n                result;\n            if (added.length) added = this.prepareAdded(added, storeDescriptor);\n            if (updated.length) updated = this.prepareUpdated(updated, storeDescriptor);\n            if (removed.length) removed = this.prepareRemoved(removed);\n            // if this store has changes\n            if (added.length || updated.length || removed.length) {\n                result = {};\n                if (added.length) result.added = added;\n                if (updated.length) result.updated = updated;\n                if (removed.length) result.removed = removed;\n            }\n            return result;\n        }\n        getChangesetPackage() {\n            const { changes } = this;\n            return changes || this.forceSync\n                ? {\n                    type      : 'sync',\n                    requestId : this.requestId,\n                    revision  : this.crudRevision,\n                    ...changes\n                } : null;\n        }\n        //endregion\n        //region Apply\n        /**\n         * Returns current changes as an object consisting of added/modified/removed arrays of records for every\n         * managed store, keyed by each store's `id`. Returns `null` if no changes exist. Format:\n         *\n         * ```javascript\n         * {\n         *     resources : {\n         *         added    : [{ name : 'New guy' }],\n         *         modified : [{ id : 2, name : 'Mike' }],\n         *         removed  : [{ id : 3 }]\n         *     },\n         *     events : {\n         *         modified : [{  id : 12, name : 'Cool task' }]\n         *     },\n         *     ...\n         * }\n         * ```\n         *\n         * @property {Object}\n         * @readonly\n         * @category CRUD\n         */\n        get changes() {\n            const data = {};\n            this.crudStores.forEach(store => {\n                const changes = this.getCrudStoreChanges(store);\n                if (changes) {\n                    data[store.storeId] = changes;\n                }\n            });\n            return Object.keys(data).length > 0 ? data : null;\n        }\n        getRowsToApplyChangesTo({ store, storeId }, storeResponse, storePack) {\n            const\n                me             = this,\n                { modelClass } = store,\n                idDataSource   = modelClass.idField,\n                // request data\n                {\n                    updated : requestUpdated,\n                    removed : requestRemoved\n                }              = storePack || {};\n            let rows, removed, remote;\n            // If the response contains the store section\n            if (storeResponse) {\n                remote = true;\n                const respondedIds = {};\n                // responded record changes/removals\n                rows    = storeResponse.rows?.slice() || [];\n                removed = storeResponse.removed?.slice() || [];\n                // Collect hash w/ identifiers of responded records\n                [...rows, ...removed].forEach(responseRecord => {\n                    const id = ObjectHelper.getPath(responseRecord, idDataSource);\n                    respondedIds[id] = true;\n                });\n                // If it's told to support providing server changes only in response\n                // CrudManager should collect other records to commit from current requested data\n                if (me.supportShortSyncResponse) {\n                    // append records requested to update (if not there already)\n                    requestUpdated?.forEach(data => {\n                        const id = ObjectHelper.getPath(data, idDataSource);\n                        // if response doesn't include\n                        if (!respondedIds[id]) {\n                            rows.push({ [idDataSource] : id });\n                        }\n                    });\n                    // append records requested to remove (if not there already)\n                    requestRemoved?.forEach(data => {\n                        const id = ObjectHelper.getPath(data, idDataSource);\n                        // if response doesn't include\n                        if (!respondedIds[id]) {\n                            removed.push({ [idDataSource] : id });\n                        }\n                    });\n                }\n            }\n            // If there is no this store section we use records mentioned in the current request\n            else if (requestUpdated || requestRemoved) {\n                remote  = false;\n                rows    = requestUpdated;\n                removed = requestRemoved;\n            }\n            // return nullish \"rows\"/\"removed\" if no entries\n            rows    = rows?.length ? rows : null;\n            removed = removed?.length ? removed : null;\n            return {\n                rows,\n                removed,\n                remote\n            };\n        }\n        applyChangesToStore(storeDesc, storeResponse, storePack) {\n            const\n                me                = this,\n                phantomIdField    = storeDesc.phantomIdField || me.phantomIdField,\n                { store }         = storeDesc,\n                idField           = store.modelClass.getFieldDataSource('id'),\n                subStoreFields    = store.modelClass.allFields.filter(field => field.subStore),\n                // collect records we need to process\n                { rows, removed, remote } = me.getRowsToApplyChangesTo(storeDesc, storeResponse, storePack),\n                added = [],\n                updated = [];\n            // Convert to the { updated, added } format accepted by stores\n            if (rows) {\n                for (const data of rows) {\n                    // Existing records are updated\n                    if (store.getById(data[phantomIdField] ?? data[idField])) {\n                        updated.push(data);\n                    }\n                    // Others added\n                    else {\n                        added.push(data);\n                    }\n                }\n            }\n            const extraLogEntries = [];\n            // Handle sub-stores (if any)\n            if (updated.length && subStoreFields.length) {\n                updated.forEach(updateData => {\n                    const\n                        record = store.getById(updateData[phantomIdField] ?? updateData[idField]),\n                        // find the request portion related to the record\n                        recordRequest = storePack.added?.find(t => t[phantomIdField] == updateData[phantomIdField]) ||\n                            storePack.updated?.find(t => t[idField] == updateData[idField]);\n                    const extraLogInfo = {};\n                    subStoreFields.forEach(field => {\n                        const store = record.get(field.name);\n                        me.applyChangesToStore({ store }, updateData[field.dataSource],\n                            recordRequest?.[field.dataSource]\n                        );\n                        // We're putting the store field entry to the log\n                        // just to indicate the fact it was actually changed.\n                        // The value will not be used for comparison so we can use any.\n                        extraLogInfo[field.dataSource] = 'foo';\n                        delete updateData[field.dataSource];\n                    });\n                    extraLogEntries.push([record, extraLogInfo]);\n                });\n            }\n            // process added/updated records\n            const log = store.applyChangeset({ removed, added, updated }, null, phantomIdField, remote, true);\n            extraLogEntries.forEach(([record, logEntry]) => Object.assign(log.get(record.id), logEntry));\n            return log;\n        }\n        applySyncResponse(response, request) {\n            const\n                me     = this,\n                stores = me.orderedCrudStores;\n            me.applyingChangeset = me.applyingSyncResponse = true;\n            me.suspendChangesTracking();\n            for (const store of stores) {\n                me.applyChangesToStore(store, response[store.storeId], request?.pack?.[store.storeId]);\n            }\n            me.resumeChangesTracking(true);\n            me.applyingChangeset = me.applyingSyncResponse = false;\n        }\n        applyLoadResponse(response, options) {\n            this.applyingLoadResponse = true;\n            this.loadCrudManagerData(response, options);\n            this.applyingLoadResponse = false;\n        }\n        async applyResponse(request, response, options) {\n            const\n                me = this,\n                // in trackResponseType mode we check response type before deciding how to react on the response\n                responseType = me.trackResponseType && response.type || request.type;\n            switch (responseType) {\n                case 'load' :\n                    if (me.validateResponse) {\n                        me.validateLoadResponse(response);\n                    }\n                    me.applyLoadResponse(response, options);\n                    break;\n                case 'sync' :\n                    if (me.validateResponse) {\n                        me.validateSyncResponse(response, request);\n                    }\n                    me.applySyncResponse(response, request);\n                    break;\n            }\n        }\n        /**\n         * Applies a set of changes, as an object keyed by store id, to the affected stores. This function is intended\n         * to use in apps that handle their own data syncing, it is not needed when using the CrudManager approach.\n         *\n         * Example of a changeset:\n         * ```javascript\n         * project.applyChangeset({\n         *     events : {\n         *         added : [\n         *             { id : 10, name : 'Event 10', startDate : '2022-06-07' }\n         *         ],\n         *         updated : [\n         *             { id : 5, name : 'Changed' }\n         *         ],\n         *         removed : [\n         *             { id : 1 }\n         *         ]\n         *     },\n         *     resources : { ... },\n         *     ...\n         * });\n         * ```\n         *\n         * Optionally accepts a `transformFn` to convert an incoming changeset to the expected format.\n         * See {@link Core/data/Store#function-applyChangeset} for more details.\n         *\n         * @param {Object} changes Changeset to apply, an object keyed by store id where each value follows the\n         * format described in {@link Core/data/Store#function-applyChangeset}\n         * @param {Function} [transformFn] Optional function used to preprocess a changeset per store in a different\n         * format, should return an object with the format expected by {@link Core/data/Store#function-applyChangeset}\n         * @param {String} [phantomIdField] Field used by the backend when communicating a record being assigned a\n         * proper id instead of a phantom id\n         */\n        applyChangeset(changes, transformFn = null, phantomIdField, logChanges = false) {\n            const\n                me  = this,\n                log = logChanges ? new Map() : undefined;\n            me.suspendAutoSync();\n            me.suspendChangesTracking();\n            for (const { store, phantomIdField } of me.orderedCrudStores) {\n                if (changes[store.id]) {\n                    const storeLog = store.applyChangeset(\n                        changes[store.id],\n                        transformFn,\n                        phantomIdField || me.phantomIdField,\n                        // mark this changeset as remote to enforce it\n                        true,\n                        logChanges\n                    );\n                    if (storeLog) {\n                        log.set(store.id, storeLog);\n                    }\n                }\n            }\n            me.resumeChangesTracking(true);\n            me.resumeAutoSync(false);\n            return log;\n        }\n        //endregion\n        /**\n         * Generates unique request identifier.\n         * @internal\n         * @template\n         * @returns {Number} The request identifier.\n         * @category CRUD\n         */\n        get requestId() {\n            return Number.parseInt(`${Date.now()}${(this._requestId++)}`);\n        }\n        /**\n         * Persists changes made on the registered stores to the server and/or receives changes made on the backend.\n         * Usage:\n         *\n         * ```javascript\n         * // persist and run a callback on request completion\n         * crud.sync().then(\n         *     () => console.log(\"Changes saved...\"),\n         *     ({ response, cancelled }) => console.log(`Error: ${cancelled ? 'Cancelled' : response.message}`)\n         * );\n         * ```\n         *\n         * ** Note: ** If there is an incomplete sync request in progress then system will queue the call and delay it\n         * until previous request completion.\n         * In this case {@link #event-syncDelayed} event will be fired.\n         *\n         * ** Note: ** Please take a look at {@link #config-autoSync} config. This option allows to persist changes\n         * automatically after any data modification.\n         *\n         * ** Note: ** By default a sync request is only sent if there are any local {@link #property-changes}. To\n         * always send a request when calling this function, configure {@link #config-forceSync} as `true`.\n         *\n         * @returns {Promise} Promise, which is resolved if request was successful.\n         * Both the resolve and reject functions are passed a `state` object. State object has the following structure:\n         * ```\n         * {\n         *     cancelled       : Boolean, // **optional** flag, which is present when promise was rejected\n         *     rawResponse     : String,  // raw response from ajax request, either response xml or text\n         *     rawResponseText : String,  // raw response text as String from ajax request\n         *     response        : Object,  // processed response in form of object\n         * }\n         * ```\n         * If promise was rejected by the {@link #event-beforeSync} event, `state` object will have this structure:\n         * ```\n         * {\n         *     cancelled : true\n         * }\n         * ```\n         * @category CRUD\n         * @async\n         */\n        sync() {\n            const me = this;\n            // A direct call to sync cancels any outstanding autoSync\n            me.clearTimeout('autoSync');\n            if (me.activeRequests.sync) {\n                // let's delay this call and start it only after server response\n                /**\n                 * Fires after {@link #function-sync sync request} was delayed due to incomplete previous one.\n                 * @event syncDelayed\n                 * @param {Scheduler.crud.AbstractCrudManager} source The CRUD manager.\n                 * @param {Object} arguments The arguments of {@link #function-sync} call.\n                 */\n                me.trigger('syncDelayed');\n                // Queue sync request after current one\n                return me.activeSyncPromise = me.activeSyncPromise.finally(() => me.sync());\n            }\n            // Store current request promise. While this one is pending, all following sync requests will create chain\n            // of sequential promises\n            return me.activeSyncPromise = new Promise((resolve, reject) => {\n                // get current changes set package\n                const pack = me.getChangesetPackage();\n                // if no data to persist we resolve immediately\n                if (!pack) {\n                    resolve(null);\n                    return;\n                }\n                /**\n                 * Fires before {@link #function-sync sync request} is sent. Return `false` to cancel sync request.\n                 *\n                 * ```javascript\n                 * crudManager.on('beforesync', function() {\n                 *     // cannot persist changes before at least one record is added\n                 *     // to the `someStore` store\n                 *     if (!someStore.getCount()) return false;\n                 * });\n                 * ```\n                 * @event beforeSync\n                 * @param {Scheduler.crud.AbstractCrudManager} source The CRUD manager.\n                 * @param {Object} pack The data package which contains data for all stores managed by the crud manager.\n                 */\n                if (me.trigger('beforeSync', { pack }) !== false) {\n                    me.trigger('syncStart', { pack });\n                    // keep active request details\n                    me.activeRequests.sync = {\n                        type : 'sync',\n                        pack,\n                        resolve,\n                        reject,\n                        id   : pack.requestId,\n                        desc : me.sendRequest({\n                            id      : pack.requestId,\n                            data    : me.encode(pack),\n                            type    : 'sync',\n                            success : me.onCrudRequestSuccess,\n                            failure : me.onCrudRequestFailure,\n                            thisObj : me\n                        })\n                    };\n                }\n                else {\n                    /**\n                     * Fires after {@link #function-sync sync request} was canceled by some {@link #event-beforeSync} listener.\n                     * @event syncCanceled\n                     * @param {Scheduler.crud.AbstractCrudManager} source The CRUD manager.\n                     * @param {Object} pack The data package which contains data for all stores managed by the crud manager.\n                     */\n                    me.trigger('syncCanceled', { pack });\n                    reject({ cancelled : true });\n                }\n            }).catch(error => {\n                // If the request was not cancelled in beforeSync listener, forward the error so the user's `catch` handler can catch it\n                if (error && !error.cancelled) {\n                    throw error;\n                }\n                // Pass the error object as a param to the next `then` chain\n                return error;\n            });\n        }\n        async onCrudRequestSuccess(rawResponse, fetchOptions, request) {\n            const\n                me = this,\n                {\n                    type : requestType,\n                    id   : requestId\n                }  = request;\n            if (me.isDestroyed) return;\n            let responseText = '';\n            request = me.activeRequests[requestType];\n            // we throw exception below to let events trigger first in internalOnResponse() call\n            try {\n                responseText = await rawResponse.text();\n            }\n            catch (e) {\n            }\n            // since we break the method w/ promises chain ..need to check if the instance is not destroyed in the meantime\n            if (me.isDestroyed) return;\n            // This situation should never occur.\n            // In the load() method, if a load is called while there is a load\n            // ongoing, the ongoing Transport request is cancelled and loadCanceled triggered.\n            // But having got here, it's too late to cancel a Transport request, so\n            // the operation is unregistered below.\n            // In the sync() method, if a sync is called while there is a sync\n            // ongoing, it waits until completion, before syncing.\n            // The activeRequest for any operation should NEVER be able to be\n            // replaced while this operation is ongoing, so this must be fatal.\n            if (request?.id !== requestId) {\n                throw new Error(`Interleaved ${requestType} operation detected`);\n            }\n            // Reset the active request info before we enter async code which could allow\n            // application code to run which could potentially call another request.\n            // It is too late for this request to be canceled - the activeRequest represented\n            // the Transport object and that has completed now.\n            me.activeRequests[requestType] = null;\n            const response = await me.internalOnResponse(request, responseText, fetchOptions);\n            // since we break the method w/ promises chain ..need to check if the instance is not destroyed in the meantime\n            if (me.isDestroyed) return;\n            if (!response || (me.skipSuccessProperty ? response?.success === false : !response?.success)) {\n                const error = {\n                    rawResponse,\n                    response,\n                    request\n                };\n                if (response?.message) {\n                    error.message = response.message;\n                }\n                request.reject(new CrudManagerRequestError(error));\n            }\n            // Successful request type done flag (this.crudLoaded or this.crudSynced)..\n            me['crud' + StringHelper.capitalize(request.type) + 'ed'] = true;\n            request.resolve({ response, rawResponse, responseText, request });\n        }\n        async onCrudRequestFailure(rawResponse, fetchOptions, request) {\n            const me = this;\n            if (me.isDestroyed) return;\n            request = me.activeRequests[request.type];\n            const\n                signal      = fetchOptions?.abortController?.signal,\n                wasAborted  = Boolean(signal?.aborted);\n            if (!wasAborted) {\n                let response,\n                    responseText = '';\n                try {\n                    responseText = await rawResponse.text();\n                    response = me.decode(responseText);\n                }\n                catch (e) {\n                }\n                // since we break the method w/ promises chain ..need to check if the instance is not destroyed in the meantime\n                if (me.isDestroyed) return;\n                me.triggerFailedRequestEvents(request, response, responseText, fetchOptions);\n                // since we break the method w/ promises chain ..need to check if the instance is not destroyed in the meantime\n                if (me.isDestroyed) return;\n                request.reject(new CrudManagerRequestError({\n                    rawResponse,\n                    request\n                }));\n            }\n            // reset the active request info\n            me.activeRequests[request.type] = null;\n        }\n        /**\n         * Accepts all changes in all stores, resets the modification tracking:\n         * * Clears change tracking for all records\n         * * Clears added\n         * * Clears modified\n         * * Clears removed\n         * Leaves the store in an \"unmodified\" state.\n         * @category CRUD\n         */\n        acceptChanges() {\n            this.crudStores.forEach(store => store.store.acceptChanges());\n        }\n        /**\n         * Reverts all changes in all stores and re-inserts any records that were removed locally. Any new uncommitted\n         * records will be removed.\n         * @category CRUD\n         */\n        revertChanges() {\n            // the method aliases revertCrudStoreChanges\n            this.revertCrudStoreChanges();\n        }\n        revertCrudStoreChanges() {\n            const { usesSingleAssignment } = this.eventStore;\n            // Ignore assignment store if using single assignment, otherwise reverting changes will undo changes from\n            // reverting the event store after reassignment\n            this.orderedCrudStores.forEach(({ store }) => (!store.isAssignmentStore || !usesSingleAssignment) && store.revertChanges());\n        }\n        /**\n         * Removes all stores and cancels active requests.\n         * @category CRUD\n         * @internal\n         */\n        doDestroy() {\n            const\n                me             = this,\n                { load, sync } = me.activeRequests;\n            load && me.cancelRequest(load.desc, load.reject);\n            sync && me.cancelRequest(sync.desc, sync.reject);\n            while (me.crudStores.length > 0) {\n                me.removeCrudStore(me.crudStores[0]);\n            }\n            super.doDestroy && super.doDestroy();\n        }\n    };\n};\n", "import Base from '../../Core/Base.js';\nimport AbstractCrudManagerMixin from './AbstractCrudManagerMixin.js';\nimport StringHelper from '../../Core/helper/StringHelper.js';\n/**\n * @module Scheduler/crud/AbstractCrudManager\n */\n/**\n * @typedef {Object} CrudManagerStoreDescriptor\n * @property {String} storeId Unique store identifier. Store related requests/responses will be sent under this name.\n * @property {Core.data.Store} store The store itself.\n * @property {String} [phantomIdField] Set this if the store model has a predefined field to keep phantom record identifier.\n * @property {String} [idField] id field name, if it's not specified then class will try to get it from store model.\n * @property {Boolean} [writeAllFields] Set to true to write all fields from modified records\n */\n/**\n * This is an abstract class serving as the base for the {@link Scheduler.data.CrudManager} class.\n * It implements basic mechanisms to organize batch communication with a server.\n * Yet it does not contain methods related to _data transfer_ nor _encoding_.\n * These methods are to be provided in sub-classes by consuming the appropriate mixins.\n *\n * For example, this is how the class can be used to implement an JSON encoding system:\n *\n * ```javascript\n * // let's make new CrudManager using AJAX as a transport system and JSON for encoding\n * class MyCrudManager extends JsonEncode(AjaxTransport(AbstractCrudManager)) {\n *\n * }\n * ```\n *\n * ## Data transfer and encoding methods\n *\n * These are methods that must be provided by subclasses of this class:\n *\n * - [#sendRequest](#Scheduler/crud/AbstractCrudManagerMixin#function-sendRequest)\n * - [#cancelRequest](#Scheduler/crud/AbstractCrudManagerMixin#function-cancelRequest)\n * - [#encode](#Scheduler/crud/AbstractCrudManagerMixin#function-encode)\n * - [#decode](#Scheduler/crud/AbstractCrudManagerMixin#function-decode)\n *\n * @extends Core/Base\n * @mixes Scheduler/crud/AbstractCrudManagerMixin\n * @abstract\n */\nexport default class AbstractCrudManager extends Base.mixin(AbstractCrudManagerMixin) {\n    //region Default config\n    /**\n     * The server revision stamp.\n     * The _revision stamp_ is a number which should be incremented after each server-side change.\n     * This property reflects the current version of the data retrieved from the server and gets updated after each\n     * {@link Scheduler/crud/AbstractCrudManagerMixin#function-load} and {@link Scheduler/crud/AbstractCrudManagerMixin#function-sync} call.\n     * @property {Number}\n     * @readonly\n     */\n    get revision() {\n        return this.crudRevision;\n    }\n    set revision(value) {\n        this.crudRevision = value;\n    }\n    /**\n     * Get or set data of {@link #property-crudStores} as a JSON string.\n     *\n     * Get a JSON string:\n     * ```javascript\n     *\n     * const jsonString = scheduler.crudManager.json;\n     *\n     * // returned jsonString:\n     * '{\"eventsData\":[...],\"resourcesData\":[...],...}'\n     *\n     * // object representation of the returned jsonString:\n     * {\n     *     resourcesData    : [...],\n     *     eventsData       : [...],\n     *     assignmentsData  : [...],\n     *     dependenciesData : [...],\n     *     timeRangesData   : [...],\n     *     // data from other stores\n     * }\n     * ```\n     *\n     * Set a JSON string (to populate the CrudManager stores):\n     *\n     * ```javascript\n     * scheduler.crudManager.json = '{\"eventsData\":[...],\"resourcesData\":[...],...}'\n     * ```\n     *\n     * @property {String}\n     */\n    get json() {\n        return StringHelper.safeJsonStringify(this);\n    }\n    set json(json) {\n        if (typeof json === 'string') {\n            json = StringHelper.safeJsonParse(json);\n        }\n        this.forEachCrudStore(store => {\n            const dataName = `${store.storeId}Data`;\n            if (json[dataName]) {\n                store.data = json[dataName];\n            }\n        });\n    }\n    static get defaultConfig() {\n        return {\n            /**\n             * Sets the list of stores controlled by the CRUD manager.\n             *\n             * When adding a store to the CrudManager, make sure the server response format is correct for `load` and `sync` requests.\n             * Learn more in the [Working with data](#Scheduler/guides/data/crud_manager.md#loading-data) guide.\n             *\n             * Store can be provided as in instance, using its `storeId` or as an {@link #typedef-CrudManagerStoreDescriptor}\n             * object.\n             * @config {Core.data.Store[]|String[]|CrudManagerStoreDescriptor[]}\n             */\n            stores : null\n            /**\n             * Encodes request to the server.\n             * @function encode\n             * @param {Object} request The request to encode.\n             * @returns {String} The encoded request.\n             * @abstract\n             */\n            /**\n             * Decodes response from the server.\n             * @function decode\n             * @param {String} response The response to decode.\n             * @returns {Object} The decoded response.\n             * @abstract\n             */\n        };\n    }\n    //endregion\n    //region Init\n    construct(config = {}) {\n        if (config.stores) {\n            config.crudStores = config.stores;\n            delete config.stores;\n        }\n        super.construct(config);\n    }\n    //endregion\n    //region inline data\n    /**\n     * Returns the data from all CrudManager `crudStores` in a format that can be consumed by `inlineData`.\n     *\n     * Used by JSON.stringify to correctly convert this CrudManager to json.\n     *\n     * The returned data is identical to what {@link Scheduler/crud/AbstractCrudManager#property-inlineData} contains.\n     *\n     * ```javascript\n     *\n     * const json = scheduler.crudManager.toJSON();\n     *\n     * // json:\n     * {\n     *     eventsData : [...],\n     *     resourcesData : [...],\n     *     dependenciesData : [...],\n     *     assignmentsData : [...],\n     *     timeRangesData : [...],\n     *     resourceTimeRangesData : [...],\n     *     // ... other stores data\n     * }\n     * ```\n     *\n     * Output can be consumed by `inlineData`.\n     *\n     * ```javascript\n     * const json = scheduler.crudManager.toJSON();\n     *\n     * // Plug it back in later\n     * scheduler.crudManager.inlineData = json;\n     * ```\n     *\n     * @function toJSON\n     * @returns {Object}\n     * @category JSON\n     */\n    toJSON() {\n        // Collect data from crudStores\n        const result = {};\n        this.forEachCrudStore((store, storeId) => result[`${storeId}Data`] = store.toJSON());\n        return result;\n    }\n    /**\n     * Get or set data of CrudManager stores. The returned data is identical to what\n     * {@link Scheduler/crud/AbstractCrudManager#function-toJSON} returns:\n     *\n     * ```javascript\n     *\n     * const data = scheduler.crudManager.inlineData;\n     *\n     * // data:\n     * {\n     *     eventsData : [...],\n     *     resourcesData : [...],\n     *     dependenciesData : [...],\n     *     assignmentsData : [...],\n     *     timeRangesData : [...],\n     *     resourceTimeRangesData : [...],\n     *     ... other stores data\n     * }\n     *\n     *\n     * // Plug it back in later\n     * scheduler.crudManager.inlineData = data;\n     * ```\n     *\n     * @property {Object}\n     */\n    get inlineData() {\n        return this.toJSON();\n    }\n    set inlineData(data) {\n        this.json = data;\n    }\n    //endregion\n    //region Store collection (add, remove, get & iterate)\n    set stores(stores) {\n        if (stores !== this.crudStores) {\n            this.crudStores = stores;\n        }\n    }\n    /**\n     * A list of registered stores whose server communication will be collected into a single batch.\n     * Each store is represented by a _store descriptor_.\n     * @member {CrudManagerStoreDescriptor[]} stores\n     */\n    get stores() {\n        return this.crudStores;\n    }\n    //endregion\n    /**\n     * Returns true if the crud manager is currently loading data\n     * @property {Boolean}\n     * @readonly\n     * @category CRUD\n     */\n    get isLoading() {\n        return this.isCrudManagerLoading;\n    }\n    /**\n     * Adds a store to the collection.\n     *\n     *```javascript\n     * // append stores to the end of collection\n     * crudManager.addStore([\n     *     store1,\n     *     // storeId\n     *     'bar',\n     *     // store descriptor\n     *     {\n     *         storeId : 'foo',\n     *         store   : store3\n     *     },\n     *     {\n     *         storeId         : 'bar',\n     *         store           : store4,\n     *         // to write all fields of modified records\n     *         writeAllFields  : true\n     *     }\n     * ]);\n     *```\n     *\n     * **Note:** Order in which stores are kept in the collection is very essential sometimes.\n     * Exactly in this order the loaded data will be put into each store.\n     *\n     * When adding a store to the CrudManager, make sure the server response format is correct for `load` and `sync`\n     * requests. Learn more in the [Working with data](#Scheduler/guides/data/crud_manager.md#loading-data) guide.\n     *\n     * @param {Core.data.Store|String|CrudManagerStoreDescriptor|Core.data.Store[]|String[]|CrudManagerStoreDescriptor[]} store\n     * A store or list of stores. Each store might be specified by its instance, `storeId` or _descriptor_.\n     * @param {Number} [position] The relative position of the store. If `fromStore` is specified the position will be\n     * taken relative to it.\n     * If not specified then store(s) will be appended to the end of collection.\n     * Otherwise, it will be an index in stores collection.\n     *\n     * ```javascript\n     * // insert stores store4, store5 to the start of collection\n     * crudManager.addStore([ store4, store5 ], 0);\n     * ```\n     *\n     * @param {String|Core.data.Store|CrudManagerStoreDescriptor} [fromStore] The store relative to which position\n     * should be calculated. Can be defined as a store identifier, instance or descriptor (the result of\n     * {@link Scheduler/crud/AbstractCrudManagerMixin#function-getStoreDescriptor} call).\n     *\n     * ```javascript\n     * // insert store6 just before a store having storeId equal to 'foo'\n     * crudManager.addStore(store6, 0, 'foo');\n     *\n     * // insert store7 just after store3 store\n     * crudManager.addStore(store7, 1, store3);\n     * ```\n     */\n    addStore(...args) {\n        return this.addCrudStore(...args);\n    }\n    removeStore(...args) {\n        return this.removeCrudStore(...args);\n    }\n    getStore(...args) {\n        return this.getCrudStore(...args);\n    }\n    hasChanges(...args) {\n        return this.crudStoreHasChanges(...args);\n    }\n    loadData(...args) {\n        return this.loadCrudManagerData(...args);\n    }\n}\nAbstractCrudManager._$name = 'AbstractCrudManager';", "import Base from '../../../Core/Base.js';\nimport AjaxHelper from '../../../Core/helper/AjaxHelper.js';\nimport Objects from '../../../Core/helper/util/Objects.js';\n/**\n * @module Scheduler/crud/transport/AjaxTransport\n */\n/**\n * Implements data transferring functional that can be used for {@link Scheduler.crud.AbstractCrudManager} super classing.\n * Uses the fetch API for transport, https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API\n *\n * @example\n * // create a new CrudManager using AJAX as a transport system and JSON for encoding\n * class MyCrudManager extends AjaxTransport(JsonEncode(AbstractCrudManager)) {}\n *\n * @abstract\n * @mixin\n */\nexport default Target => class AjaxTransport extends (Target || Base) {\n    static get $name() {\n        return 'AjaxTransport';\n    }\n    /**\n     * Configuration of the AJAX requests used by _Crud Manager_ to communicate with a server-side.\n     *\n     * ```javascript\n     * transport : {\n     *     load : {\n     *         url       : 'http://mycool-server.com/load.php',\n     *         // HTTP request parameter used to pass serialized \"load\"-requests\n     *         paramName : 'data',\n     *         // pass extra HTTP request parameter\n     *         params    : {\n     *             foo : 'bar'\n     *         }\n     *     },\n     *     sync : {\n     *         url     : 'http://mycool-server.com/sync.php',\n     *         // specify Content-Type for requests\n     *         headers : {\n     *             'Content-Type' : 'application/json'\n     *         }\n     *     }\n     * }\n     *```\n     * Since the class uses Fetch API you can use\n     * any its [Request interface](https://developer.mozilla.org/en-US/docs/Web/API/Request) options:\n     *\n     * ```javascript\n     * transport : {\n     *     load : {\n     *         url         : 'http://mycool-server.com/load.php',\n     *         // HTTP request parameter used to pass serialized \"load\"-requests\n     *         paramName   : 'data',\n     *         // pass few Fetch API options\n     *         method      : 'GET',\n     *         credentials : 'include',\n     *         cache       : 'no-cache'\n     *     },\n     *     sync : {\n     *         url         : 'http://mycool-server.com/sync.php',\n     *         // specify Content-Type for requests\n     *         headers     : {\n     *             'Content-Type' : 'application/json'\n     *         },\n     *         credentials : 'include'\n     *     }\n     * }\n     *```\n     *\n     * An object where you can set the following possible properties:\n     * @config {Object} transport\n     * @property {Object} transport.load Load requests configuration:\n     * @property {String} transport.load.url URL to request for data loading.\n     * @property {String} [transport.load.method='GET'] HTTP method to be used for load requests.\n     * @property {String} [transport.load.paramName='data'] Name of the parameter that will contain a serialized `load`\n     * request. The value is mandatory for requests using `GET` method (default for `load`) so if the value is not\n     * provided `data` string is used as default.\n     * This value is optional for HTTP methods like `POST` and `PUT`, the request body will be used for data\n     * transferring in these cases.\n     * @property {Object} [transport.load.params] An object containing extra HTTP parameters to pass to the server when\n     * sending a `load` request.\n     *\n     * ```javascript\n     * transport : {\n     *     load : {\n     *         url       : 'http://mycool-server.com/load.php',\n     *         // HTTP request parameter used to pass serialized \"load\"-requests\n     *         paramName : 'data',\n     *         // pass extra HTTP request parameter\n     *         // so resulting URL will look like: http://mycool-server.com/load.php?userId=123456&data=...\n     *         params    : {\n     *             userId : '123456'\n     *         }\n     *     },\n     *     ...\n     * }\n     * ```\n     * @property {Object<String,String>} [transport.load.headers] An object containing headers to pass to each server request.\n     *\n     * ```javascript\n     * transport : {\n     *     load : {\n     *         url       : 'http://mycool-server.com/load.php',\n     *         // HTTP request parameter used to pass serialized \"load\"-requests\n     *         paramName : 'data',\n     *         // specify Content-Type for \"load\" requests\n     *         headers   : {\n     *             'Content-Type' : 'application/json'\n     *         }\n     *     },\n     *     ...\n     * }\n     * ```\n     * @property {Object} [transport.load.fetchOptions] **DEPRECATED:** Any Fetch API options can be simply defined on\n     * the upper configuration level:\n     * ```javascript\n     * transport : {\n     *     load : {\n     *         url          : 'http://mycool-server.com/load.php',\n     *         // HTTP request parameter used to pass serialized \"load\"-requests\n     *         paramName    : 'data',\n     *         // Fetch API options\n     *         method       : 'GET',\n     *         credentials  : 'include'\n     *     },\n     *     ...\n     * }\n     * ```\n     * @property {Object} [transport.load.requestConfig] **DEPRECATED:** The config options can be defined on the upper\n     * configuration level.\n     * @property {Object} transport.sync Sync requests (`sync` in further text) configuration:\n     * @property {String} transport.sync.url URL to request for `sync`.\n     * @property {String} [transport.sync.method='POST'] HTTP request method to be used for `sync`.\n     * @property {String} [transport.sync.paramName=undefined] Name of the parameter in which `sync` data will be\n     * transferred. This value is optional for requests using methods like `POST` and `PUT`, the request body will be\n     * used for data transferring in this case (default for `sync`). And the value is mandatory for requests using `GET`\n     * method (if the value is not provided `data` string will be used as fallback).\n     * @property {Object} [transport.sync.params] HTTP parameters to pass with an HTTP request handling `sync`.\n     *\n     * ```javascript\n     * transport : {\n     *     sync : {\n     *         url    : 'http://mycool-server.com/sync.php',\n     *         // extra HTTP request parameter\n     *         params : {\n     *             userId : '123456'\n     *         }\n     *     },\n     *     ...\n     * }\n     * ```\n     * @property {Object<String,String>} [transport.sync.headers] HTTP headers to pass with an HTTP request handling `sync`.\n     *\n     * ```javascript\n     * transport : {\n     *     sync : {\n     *         url     : 'http://mycool-server.com/sync.php',\n     *         // specify Content-Type for \"sync\" requests\n     *         headers : {\n     *             'Content-Type' : 'application/json'\n     *         }\n     *     },\n     *     ...\n     * }\n     * ```\n     * @property {Object} [transport.sync.fetchOptions] **DEPRECATED:** Any Fetch API options can be simply defined on\n     * the upper configuration level:\n     * ```javascript\n     * transport : {\n     *     sync : {\n     *         url         : 'http://mycool-server.com/sync.php',\n     *         credentials : 'include'\n     *     },\n     *     ...\n     * }\n     * ```\n     * @property {Object} [transport.sync.requestConfig] **DEPRECATED:** The config options can be defined on the upper\n     * configuration level.\n     * @category CRUD\n     */\n    static get defaultMethod() {\n        return {\n            load : 'GET',\n            sync : 'POST'\n        };\n    }\n    /**\n     * Cancels a sent request.\n     * @param {Promise} requestPromise The Promise object wrapping the Request to be cancelled.\n     * The _requestPromise_ is the value returned from the corresponding {@link #function-sendRequest} call.\n     * @category CRUD\n     */\n    cancelRequest(requestPromise, reject) {\n        requestPromise.abort?.();\n        if (!this.isDestroying) {\n            reject({ cancelled : true });\n        }\n    }\n    shouldUseBodyForRequestData(packCfg, method, paramName) {\n        return !(method === 'HEAD' || method === 'GET') && !paramName;\n    }\n    /**\n     * Sends a _Crud Manager_ request to the server.\n     * @param {Object} request The request configuration object having following properties:\n     * @param {'load'|'sync'} request.type The request type. Either `load` or `sync`.\n     * @param {String} request.url The URL for the request. Overrides the URL defined in the `transport` object\n     * @param {String} request.data The encoded _Crud Manager_ request data.\n     * @param {Object} request.params An object specifying extra HTTP params to send with the request.\n     * @param {Function} request.success A function to be started on successful request transferring.\n     * @param {String} request.success.rawResponse `Response` object returned by the [fetch api](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API).\n     * @param {Function} request.failure A function to be started on request transfer failure.\n     * @param {String} request.failure.rawResponse `Response` object returned by the [fetch api](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API).\n     * @param {Object} request.thisObj `this` reference for the above `success` and `failure` functions.\n     * @returns {Promise} The fetch Promise object.\n     * @fires beforeSend\n     * @async\n     * @category CRUD\n     */\n    sendRequest(request) {\n        const\n            me              = this,\n            { data }        = request,\n            transportConfig = me.transport[request.type] || {},\n            // clone parameters defined for this type of request\n            requestConfig   = Objects.assign({}, transportConfig, transportConfig.requestConfig);\n        if (request.url) {\n            requestConfig.url = request.url;\n        }\n        requestConfig.method = requestConfig.method || AjaxTransport.defaultMethod[request.type];\n        requestConfig.params = Objects.assign(requestConfig.params || {}, request.params);\n        let { paramName } = requestConfig;\n        // transfer package in the request body for some types of HTTP requests\n        if (me.shouldUseBodyForRequestData(transportConfig, requestConfig.method, paramName)) {\n            requestConfig.body = data;\n            // for requests having body we set Content-Type to 'application/json' by default\n            requestConfig.headers = requestConfig.headers || {};\n            requestConfig.headers['Content-Type'] = requestConfig.headers['Content-Type'] || 'application/json';\n        }\n        else {\n            // when we don't use body paramName is mandatory so fallback to 'data' as name\n            paramName = paramName || 'data';\n            requestConfig.params[paramName] = data;\n        }\n        if (!requestConfig.url) {\n            throw new Error('Trying to request without URL specified');\n        }\n        // sanitize request config\n        delete requestConfig.requestConfig;\n        delete requestConfig.paramName;\n        let ajaxPromise, resultPromise;\n        function performSend() {\n            // AjaxHelper.fetch call it \"queryParams\"\n            requestConfig.queryParams = requestConfig.params;\n            delete requestConfig.params;\n            let cancelled = false;\n            const fetchOptions = Objects.assign({}, requestConfig, requestConfig.fetchOptions);\n            ajaxPromise  = AjaxHelper.fetch(requestConfig.url, fetchOptions);\n            return ajaxPromise.catch(error => {\n                ajaxPromise.done = true;\n                me.trigger?.('responseReceived', { success : false });\n                const signal = fetchOptions.abortController?.signal;\n                if (signal) {\n                    cancelled = signal.aborted;\n                    if (!cancelled) {\n                        console.warn(error);\n                    }\n                }\n                return { error, cancelled };\n            }).then(response => {\n                ajaxPromise.done = true;\n                me.trigger?.('responseReceived', { success : Boolean(response?.ok) });\n                const callback = response?.ok ? request.success : request.failure;\n                return callback?.call(request.thisObj || me, response, fetchOptions, request);\n            });\n        }\n        /**\n         * Fires before a request is sent to the server.\n         *\n         * ```javascript\n         * crudManager.on('beforeSend', function ({ params, type }) {\n         *     // let's set \"sync\" request parameters\n         *     if (type == 'sync') {\n         *         // dynamically depending on \"flag\" value\n         *         if (flag) {\n         *             params.foo = 'bar';\n         *         }\n         *         else {\n         *             params.foo = 'smth';\n         *         }\n         *     }\n         * });\n         * ```\n         * @event beforeSend\n         * @param {Scheduler.crud.AbstractCrudManager} crudManager The CRUD manager.\n         * @param {Object} params HTTP request params to be passed in the request URL.\n         * @param {'sync'|'load'} requestType CrudManager request type (`load`/`sync`)\n         * @param {Object} requestConfig Configuration object for Ajax request call\n         * @async\n         */\n        const beforeSendResult = me.trigger('beforeSend', {\n            params      : requestConfig.params,\n            requestType : request.type,\n            requestConfig,\n            config      : request\n        });\n        if (Objects.isPromise(beforeSendResult)) {\n            resultPromise = beforeSendResult.then(performSend);\n        }\n        else {\n            resultPromise = performSend();\n        }\n        resultPromise.abort = () => {\n            if (!ajaxPromise.done) {\n                ajaxPromise.abort?.();\n            }\n        };\n        return resultPromise;\n    }\n};\n", "import Base from '../../../Core/Base.js';\nimport StringHelper from '../../../Core/helper/StringHelper.js';\n/**\n * @module Scheduler/crud/encoder/JsonEncoder\n */\n/**\n * Implements data encoding functional that should be mixed to a {@link Scheduler.crud.AbstractCrudManager} sub-class.\n * Uses _JSON_ as an encoding system.\n *\n * @example\n * // create a new CrudManager using AJAX as a transport system and JSON for encoding\n * class MyCrudManager extends JsonEncode(AjaxTransport(AbstractCrudManager)) {}\n *\n * @mixin\n */\nexport default Target => class JsonEncoder extends (Target || Base) {\n    static get $name() {\n        return 'JsonEncoder';\n    }\n    static get defaultConfig() {\n        return {\n            /**\n             * Configuration of the JSON encoder used by the _Crud Manager_.\n             *\n             * @config {Object}\n             * @property {Object} encoder.requestData Static data to send with the data request.\n             *\n             * ```js\n             * new CrudManager({\n             *     // add static \"foo\" property to all requests data\n             *     encoder : {\n             *         requestData : {\n             *             foo : 'Bar'\n             *         }\n             *     },\n             *     ...\n             * });\n             * ```\n             *\n             * The above snippet will result adding \"foo\" property to all requests data:\n             *\n             * ```json\n             *     {\n             *         \"requestId\"   : 756,\n             *         \"type\"        : \"load\",\n             *\n             *         \"foo\"         : \"Bar\",\n             *\n             *         \"stores\"      : [\n             *             ...\n             * ```\n             * @category CRUD\n             */\n            encoder : {}\n        };\n    }\n    /**\n     * Encodes a request object to _JSON_ encoded string. If encoding fails (due to circular structure), it returns null.\n     * Supposed to be overridden in case data provided by the _Crud Manager_ has to be transformed into format requested by server.\n     * @param {Object} requestData The request to encode.\n     * @returns {String} The encoded request.\n     * @category CRUD\n     */\n    encode(requestData) {\n        requestData = Object.assign({}, this.encoder?.requestData, requestData);\n        return StringHelper.safeJsonStringify(requestData);\n    }\n    /**\n     * Decodes (parses) a _JSON_ response string to an object. If parsing fails, it returns null.\n     * Supposed to be overridden in case data provided by server has to be transformed into format requested by the _Crud Manager_.\n     * @param {String} responseText The response text to decode.\n     * @returns {Object} The decoded response.\n     * @category CRUD\n     */\n    decode(responseText) {\n        return StringHelper.safeJsonParse(responseText);\n    }\n};\n", "import TimeSpan from '../TimeSpan.js';\nimport TimeZoneHelper from '../../../Core/helper/TimeZoneHelper.js';\nimport ObjectHelper from '../../../Core/helper/ObjectHelper.js';\n/**\n * @module Scheduler/model/mixin/TimeZonedDatesMixin\n */\nconst dateFieldsToConvert = {\n    startDate      : 1,\n    endDate        : 1,\n    constraintDate : 1,\n    deadlineDate   : 1\n};\n/**\n * This mixin class overrides default Model functionality to provide support for time zone converted dates\n * @mixin\n * @mixinbase TimeSpan\n */\nexport default Target => class TimeZonedDatesMixin extends (Target || TimeSpan) {\n    static $name = 'TimeZonedDatesMixin';\n    static fields  = [\n        /**\n         * The current timeZone this record is converted to. Used internally to keep track of time zone conversions.\n         *\n         * Can also be used to create a new record with dates in a specific non-local timezone. That is useful for\n         * example when replacing a store dataset. That would be interpreted as a new load, and all dates would be\n         * converted to the configured timezone.\n         *\n         * For more information about timezone conversion, se {@link Scheduler.model.ProjectModel#config-timeZone}.\n         *\n         * This field will not {@link Core.data.field.DataField#config-persist} by default.\n         *\n         * @field {String|Number} timeZone\n         * @category Advanced\n         */\n        {\n            name    : 'timeZone',\n            persist : false\n        }\n    ];\n    get timeZone() {\n        return this.getData('timeZone');\n    }\n    set timeZone(timeZone) {\n        this.setData('timeZone', timeZone);\n    }\n    setLocalDate(field, date) {\n        this.set(field, this.timeZone != null ? TimeZoneHelper.toTimeZone(date, this.timeZone) : date, true);\n        // Need to set data to fool engine that the dates havn't changed\n        this.data[field] = this[field];\n    }\n    getLocalDate(field) {\n        if (this.timeZone != null && this[field]) {\n            return TimeZoneHelper.fromTimeZone(this[field], this.timeZone);\n        }\n        return this[field];\n    }\n    applyChangeset(rawChanges) {\n        // When a sync response arrives from backend, the data will need to be converted to time zone before applied.\n        if (this.timeZone != null) {\n            for (const field in dateFieldsToConvert) {\n                if (rawChanges[field]) {\n                    this.setLocalDate(field, new Date(rawChanges[field]));\n                    delete rawChanges[field];\n                }\n            }\n        }\n        return super.applyChangeset(...arguments);\n    }\n    getFieldPersistentValue(field) {\n        if (this.timeZone != null) {\n            const fieldName = field?.field ?? field?.name ?? field;\n            // Used when saving/syncing. Returns local system dates\n            if (dateFieldsToConvert[fieldName]) {\n                return this.getLocalDate(fieldName);\n            }\n        }\n        return super.getFieldPersistentValue(field);\n    }\n    // Converts current record into a timeZone\n    convertToTimeZone(timeZone) {\n        const\n            me            = this,\n            metaModified  = { ...me.meta.modified },\n            convertFields = { ...dateFieldsToConvert };\n        // Do not convert start and end dates on task unless manually scheduled\n        if (me.isTask && !me.manuallyScheduled) {\n            delete convertFields.startDate;\n            delete convertFields.endDate;\n        }\n        // Collect values\n        for (const field in convertFields) {\n            // Only convert if field has value\n            if (me[field] != null) {\n                convertFields[field] = me[field];\n                // If already converted, restore to local system time zone\n                if (me.timeZone != null) {\n                    convertFields[field] = me.getLocalDate(field);\n                    // Restore value in meta modified as well\n                    if (metaModified[field]) {\n                        metaModified[field] = TimeZoneHelper.fromTimeZone(metaModified[field], me.timeZone);\n                    }\n                }\n            }\n            else {\n                delete convertFields[field];\n            }\n        }\n        // Change time zone\n        me.timeZone = timeZone;\n        // Set values\n        for (const field in convertFields) {\n            // Convert and set field date silently\n            me.setLocalDate(field, convertFields[field], false);\n            convertFields[field] = 1; // For clearing changes below\n            // Convert value in meta modified as well\n            if (me.timeZone != null && metaModified[field]) {\n                metaModified[field] = TimeZoneHelper.toTimeZone(metaModified[field], me.timeZone);\n            }\n        }\n        // Clear modification metadata\n        me.clearChanges(true, true, convertFields);\n        // If old modification metadata, restore them to record and store\n        if (!ObjectHelper.isEmpty(metaModified)) {\n            me.meta.modified = metaModified;\n            me.stores.forEach(store => store.modified.add(me));\n        }\n    }\n};\n", "import Model from '../../Core/data/Model.js';\nimport TimeZonedDatesMixin from './mixin/TimeZonedDatesMixin.js';\nimport DomClassList from '../../Core/helper/util/DomClassList.js';\nimport DH from '../../Core/helper/DateHelper.js';\nimport VersionHelper from '../../Core/helper/VersionHelper.js';\nimport BrowserHelper from '../../Core/helper/BrowserHelper.js';\nimport ObjectHelper from '../../Core/helper/ObjectHelper.js';\nimport Duration from '../../Core/data/Duration.js';\n/**\n * @module Scheduler/model/TimeSpan\n */\n/**\n * This class represent a simple date range. It is being used in various subclasses and plugins which operate on date ranges.\n *\n * It's a subclass of {@link Core.data.Model}.\n * Please refer to documentation of those classes to become familiar with the base interface of this class.\n *\n * A TimeSpan has the following fields:\n *\n * - {@link #field-startDate}    - start date of the task in the ISO 8601 format\n * - {@link #field-endDate}      - end date of the task in the ISO 8601 format (not inclusive)\n * - {@link #field-duration}     - duration, time between start date and end date\n * - {@link #field-durationUnit} - unit used to express the duration\n * - {@link #field-name}         - an optional name of the range\n * - {@link #field-cls}          - an optional CSS class to be associated with the range.\n *\n * The data source of any field can be customized in the subclass. Please refer to {@link Core.data.Model} for details. To specify\n * another date format:\n *\n * ```javascript\n * class MyTimeSpan extends TimeSpan {\n *   static get fields() {\n *      { name: 'startDate', type: 'date', dateFormat: 'DD/MM/YY' }\n *   }\n * }\n * ```\n *\n * @extends Core/data/Model\n * @mixes Scheduler/model/mixin/TimeZonedDatesMixin\n */\nexport default class TimeSpan extends Model.mixin(TimeZonedDatesMixin) {\n    static get $name() {\n        return 'TimeSpan';\n    }\n    //region Field definitions\n    static get fields() {\n        return [\n            /**\n             * The start date of a time span (or Event / Task).\n             *\n             * Uses {@link Core/helper/DateHelper#property-defaultFormat-static DateHelper.defaultFormat} to convert a\n             * supplied string to a Date. To specify another format, either change that setting or subclass TimeSpan and\n             * change the dateFormat for this field.\n             *\n             * Note that the field always returns a `Date`.\n             *\n             * @field {Date} startDate\n             * @accepts {String|Date}\n             * @category Scheduling\n             */\n            {\n                name : 'startDate',\n                type : 'date'\n            },\n            /**\n             * The end date of a time span (or Event / Task).\n             *\n             * Uses {@link Core/helper/DateHelper#property-defaultFormat-static DateHelper.defaultFormat} to convert a\n             * supplied string to a Date. To specify another format, either change that setting or subclass TimeSpan and\n             * change the dateFormat for this field.\n             *\n             * Note that the field always returns a `Date`.\n             *\n             * @field {Date} endDate\n             * @accepts {String|Date}\n             * @category Scheduling\n             */\n            {\n                name : 'endDate',\n                type : 'date'\n            },\n            /**\n             * The numeric part of the timespan's duration (the number of units).\n             * @field {Number} duration\n             * @category Scheduling\n             */\n            {\n                name      : 'duration',\n                type      : 'number',\n                allowNull : true,\n                internal  : true\n            },\n            /**\n             * The unit part of the TimeSpan duration, defaults to \"d\" (days). Valid values are:\n             *\n             * - \"millisecond\" - Milliseconds\n             * - \"second\" - Seconds\n             * - \"minute\" - Minutes\n             * - \"hour\" - Hours\n             * - \"day\" - Days\n             * - \"week\" - Weeks\n             * - \"month\" - Months\n             * - \"quarter\" - Quarters\n             * - \"year\"- Years\n             *\n             * This field is readonly after creation, to change durationUnit use #setDuration().\n             * @field {'millisecond'|'second'|'minute'|'hour'|'day'|'week'|'month'|'quarter'|'year'} durationUnit\n             * @category Scheduling\n             */\n            {\n                type         : 'durationunit',\n                name         : 'durationUnit',\n                defaultValue : 'd',\n                internal     : true\n            },\n            /**\n             * Calculated field which encapsulates the duration's magnitude and unit. This field will not be persisted,\n             * setting it will update the {@link #field-duration} and {@link #field-durationUnit} fields.\n             *\n             * @field {DurationConfig|Core.data.Duration} fullDuration\n             * @category Scheduling\n             */\n            {\n                name    : 'fullDuration',\n                persist : false,\n                column  : {\n                    type : 'duration'\n                }\n            },\n            /**\n             * An encapsulation of the CSS classes to add to the rendered time span element.\n             *\n             * Always returns a {@link Core.helper.util.DomClassList}, but may still be treated as a string. For\n             * granular control of adding and removing individual classes, it is recommended to use the\n             * {@link Core.helper.util.DomClassList} API.\n             *\n             * @field {Core.helper.util.DomClassList} cls\n             * @accepts {Core.helper.util.DomClassList|String|String[]|Object}\n             *\n             * @category Styling\n             */\n            {\n                name         : 'cls',\n                defaultValue : '',\n                internal     : true\n            },\n            /**\n             * CSS class specifying an icon to apply to the rendered time span element.\n             * **Note**: In case event is a milestone, using `iconCls` with dependency feature might slightly decrease\n             * performance because feature will refer to the DOM to get exact size of the element.\n             * @field {String} iconCls\n             * @category Styling\n             */\n            {\n                name     : 'iconCls',\n                internal : true\n            },\n            /**\n             * A CSS style string (applied to `style.cssText`) or object (applied to `style`)\n             * ```\n             * record.style = 'color: red;font-weight: 800';\n             * ```\n             *\n             * @field {String} style\n             * @category Styling\n             */\n            {\n                name     : 'style',\n                type     : 'object',\n                internal : true\n            },\n            /**\n             * The name of the time span (or Event / Task)\n             * @field {String} name\n             * @category Common\n             */\n            {\n                name         : 'name',\n                type         : 'string',\n                defaultValue : ''\n            }\n        ];\n    }\n    //endregion\n    //region Init\n    construct(data, ...args) {\n        // fullDuration is a \"calculated field\", but convenient to allow supplying it in the data\n        if (data?.fullDuration) {\n            const { magnitude, unit } = data.fullDuration;\n            data.duration = magnitude;\n            data.unit = unit;\n            delete data.fullDuration;\n        }\n        super.construct(data, ...args);\n        this.normalize();\n    }\n    /**\n     * Returns the event store this event is part of, if any.\n     *\n     * @property {Scheduler.data.EventStore}\n     * @readonly\n     * @category Misc\n     */\n    get eventStore() {\n        const me = this;\n        // If we are an occurrence, return our base recurring event's store\n        if (me.isOccurrence) {\n            return me.recurringTimeSpan.eventStore;\n        }\n        if (!me._eventStore) {\n            me._eventStore = me.stores?.find(s => s.isEventStore);\n        }\n        return me._eventStore;\n    }\n    normalize() {\n        const\n            me                                             = this,\n            { startDate, endDate, duration, durationUnit } = me,\n            hasDuration                                    = duration != null;\n        // need to calculate duration (checking first since seemed most likely to happen)\n        if (startDate && endDate && !hasDuration) {\n            me.setData('duration', DH.diff(startDate, endDate, durationUnit, true));\n        }\n        // need to calculate endDate?\n        else if (startDate && !endDate && hasDuration) {\n            me.setData('endDate', DH.add(startDate, duration, durationUnit));\n        }\n        // need to calculate startDate\n        else if (!startDate && endDate && hasDuration) {\n            me.setData('startDate', DH.add(endDate, -duration, durationUnit));\n        }\n    }\n    //endregion\n    //region Getters & Setters\n    updateInternalCls(cls) {\n        if (this._cls) {\n            this._cls.value = cls;\n        }\n        else {\n            this._cls = new DomClassList(cls);\n        }\n    }\n    set internalCls(cls) {\n        this.updateInternalCls(cls);\n        this.set('cls', this._cls.value);\n    }\n    get internalCls() {\n        const { cls } = this;\n        // `cls` getter can be overriden so return `cls` value if it is DomClassList or assign it to `this._cls`\n        if (cls?.isDomClassList) {\n            return cls;\n        }\n        this.internalCls = cls;\n        return this._cls;\n    }\n    get cls() {\n        if (!this._cls) {\n            this._cls = new DomClassList(super.get('cls'));\n        }\n        return this._cls;\n    }\n    set cls(cls) {\n        this.internalCls = cls;\n    }\n    get startDate() {\n        return this.get('startDate');\n    }\n    set startDate(date) {\n        this.setStartDate(date);\n    }\n    get endDate() {\n        return this.get('endDate');\n    }\n    set endDate(date) {\n        this.setEndDate(date);\n    }\n    get endingDate() {\n        const\n            me = this,\n            {\n                endDate,\n                startDate\n            }  = me;\n        if (endDate) {\n            // Special case of startDate===endDate for allDay event:\n            // if (Number(endDate) === Number(startDate) && me.allDay) {\n            //     return DH.add(startDate, 1, 'd');\n            // }\n            // Nope... the above works fine except when the day start time is shifted. In this case we want the\n            // event to appear as \"all day\" on the shifted day, but the above will push the endingDate beyond the\n            // end of the shifted day.\n            return endDate;\n        }\n        return DH.add(startDate, me.duration, me.durationUnit);\n    }\n    get duration() {\n        return this.get('duration');\n    }\n    set duration(duration) {\n        this.setDuration(duration, this.durationUnit);\n    }\n    get durationUnit() {\n        return this.get('durationUnit');\n    }\n    /**\n     * Sets duration and durationUnit in one go. Only allowed way to change durationUnit, the durationUnit field is\n     * readonly after creation\n     * @param {Number} duration Duration value\n     * @param {'millisecond'|'second'|'minute'|'hour'|'day'|'week'|'month'|'quarter'|'year'} durationUnit Unit for\n     * specified duration value, see {@link #field-durationUnit} for valid values\n     * @category Scheduling\n     */\n    setDuration(duration, durationUnit = this.durationUnit) {\n        // Must be a number\n        duration = parseFloat(duration);\n        this.set({\n            duration,\n            durationUnit,\n            ...this.updateDatesFromDuration(duration, durationUnit)\n        });\n    }\n    updateDatesFromDuration(magnitude, unit, startDate = this.startDate, endDate = this.endDate) {\n        const result = {};\n        if (startDate) {\n            result.endDate = DH.add(startDate, magnitude, unit);\n        }\n        else if (endDate) {\n            result.startDate = DH.add(endDate, -magnitude, unit);\n        }\n        return result;\n    }\n    /**\n     * Returns duration of the event in given unit. This is a wrapper for {@link Core.helper.DateHelper#function-getDurationInUnit-static}\n     * @param {'ms'|'s'|'m'|'h'|'d'|'w'|'M'|'y'} unit\n     * @param {Boolean} [doNotRound]\n     * @private\n     * @returns {Number}\n     */\n    getDurationInUnit(unit, doNotRound) {\n        const me = this;\n        if (me.startDate && me.endDate) {\n            return DH.getDurationInUnit(me.startDate, me.endDate, unit, doNotRound);\n        }\n        else {\n            return DH.as(unit, me.duration, me.durationUnit);\n        }\n    }\n    get fullDuration() {\n        // Used for formatting during export\n        return new Duration({\n            unit      : this.durationUnit,\n            magnitude : this.duration\n        });\n    }\n    set fullDuration(duration) {\n        if (typeof duration === 'string') {\n            duration = DH.parseDuration(duration, true, this.durationUnit);\n        }\n        this.setDuration(duration.magnitude, duration.unit);\n    }\n    /**\n     * Sets the range start date\n     *\n     * @param {Date} date The new start date\n     * @param {Boolean} keepDuration Pass `true` to keep the duration of the task (\"move\" the event), `false` to change the duration (\"resize\" the event).\n     * Defaults to `true`\n     * @category Scheduling\n     */\n    setStartDate(date, keepDuration = true) {\n        const\n            me    = this,\n            toSet = {\n                startDate : date\n            };\n        if (date) {\n            let calcEndDate;\n            if (keepDuration) {\n                calcEndDate = me.duration != null;\n            }\n            else {\n                if (me.endDate) {\n                    toSet.duration = DH.diff(date, me.endDate, me.durationUnit, true);\n                    if (toSet.duration < 0) throw new Error('Negative duration');\n                }\n                else {\n                    calcEndDate = this.duration != null;\n                }\n            }\n            if (calcEndDate) {\n                // Use hours to set end date in order to correctly process DST crossings\n                toSet.endDate = DH.add(date, me.getDurationInUnit('h'), 'h');\n            }\n        }\n        else {\n            toSet.duration = null;\n        }\n        me.set(toSet);\n    }\n    /**\n     * Sets the range end date\n     *\n     * @param {Date} date The new end date\n     * @param {Boolean} keepDuration Pass `true` to keep the duration of the task (\"move\" the event), `false` to change the duration (\"resize\" the event).\n     * Defaults to `false`\n     * @category Scheduling\n     */\n    setEndDate(date, keepDuration = false) {\n        const\n            me    = this,\n            toSet = {\n                endDate : date\n            };\n        if (date) {\n            let calcStartDate;\n            if (keepDuration === true) {\n                calcStartDate = me.duration != null;\n            }\n            else {\n                if (me.startDate) {\n                    toSet.duration = DH.diff(me.startDate, date, me.durationUnit, true);\n                    if (toSet.duration < 0) throw new Error('Negative duration');\n                }\n                else {\n                    calcStartDate = this.duration != null;\n                }\n            }\n            if (calcStartDate) {\n                toSet.startDate = DH.add(date, -me.duration, me.durationUnit);\n            }\n        }\n        me.set(toSet);\n    }\n    /**\n     * Sets the event start and end dates\n     *\n     * @param {Date} start The new start date\n     * @param {Date} end The new end date\n     * @param {Boolean} [silent] Pass `true` to not trigger events\n     * @category Scheduling\n     */\n    setStartEndDate(start, end, silent) {\n        this.set({\n            startDate : start,\n            endDate   : end\n        }, null, silent);\n    }\n    /**\n     * Returns an array of dates in this range. If the range starts/ends not at the beginning of day, the whole day will be included.\n     * @readonly\n     * @property {Date[]}\n     * @category Scheduling\n     */\n    get dates() {\n        const\n            dates     = [],\n            startDate = DH.startOf(this.startDate, 'day'),\n            endDate   = this.endDate;\n        for (let date = startDate; date < endDate; date = DH.add(date, 1, 'day')) {\n            dates.push(date);\n        }\n        return dates;\n    }\n    get startDateMS() {\n        return (this.batching && this.hasBatchedChange('startDate') ? this.get('startDate') : this.startDate)?.getTime();\n    }\n    get endDateMS() {\n        return (this.batching && this.hasBatchedChange('endDate') ? this.get('endDate') : this.endDate)?.getTime();\n    }\n    /**\n     * Returns the duration of this Event in milliseconds.\n     * @readonly\n     * @property {Number}\n     * @category Scheduling\n     */\n    get durationMS() {\n        const { endDateMS, startDateMS } = this;\n        if (endDateMS && startDateMS) {\n            return endDateMS - startDateMS;\n        }\n        else {\n            return DH.asMilliseconds(this.duration || 0, this.durationUnit);\n        }\n    }\n    /**\n     * Returns true if record is a milestone.\n     * @readonly\n     * @property {Boolean}\n     * @category Scheduling\n     */\n    get isMilestone() {\n        return this.duration === 0;\n    }\n    inSetNormalize(field) {\n        if (typeof field !== 'string') {\n            // If user is updating multiple properties in one go using an object, we help out\n            // by filling out missing schedule related data\n            let { startDate, endDate, duration, durationUnit = this.durationUnit } = field;\n            // Conversion is usually handled in inSet, but we are normalizing prior to that and have to handle it here\n            if (typeof startDate === 'string') {\n                startDate = this.getFieldDefinition('startDate').convert(startDate);\n            }\n            if (typeof endDate === 'string') {\n                endDate = this.getFieldDefinition('endDate').convert(endDate);\n            }\n            if ('duration' in field) {\n                if (startDate && !endDate) {\n                    endDate = DH.add(startDate, duration, durationUnit, true, true);\n                }\n                if (!startDate && endDate) {\n                    startDate = DH.add(endDate, -duration, durationUnit, true, true);\n                }\n            }\n            else if (startDate && endDate) {\n                // Calculate duration in hours and covert to target duration unit in order to avoid extra DST conversion\n                duration = DH.as(durationUnit, DH.diff(startDate, endDate, 'h', true), 'h');\n            }\n            // A framework (React tested) may freeze passed field object, so clone it in that case\n            const fieldOrClone = Object.isFrozen(field) ? ObjectHelper.clone(field) : field;\n            startDate && (fieldOrClone.startDate = startDate);\n            endDate && (fieldOrClone.endDate = endDate);\n            duration != null && (fieldOrClone.duration = duration);\n            return fieldOrClone;\n        }\n    }\n    fieldToKeys(field, value) {\n        const result = super.fieldToKeys(field, value);\n        // Replace fullDuration with duration and durationUnit in calls to `set()`\n        if (result.fullDuration) {\n            const { magnitude, unit } = result.fullDuration;\n            result.duration     = magnitude;\n            result.durationUnit = unit;\n        }\n        // Engine handles this for event & tasks\n        if (!this.isEventModel && !this.isTaskModel) {\n            // Recalculate start/end date if duration is set with only one of them\n            if (('duration' in result || result.durationUnit) && !(result.startDate && result.endDate)) {\n                Object.assign(\n                    result,\n                    this.updateDatesFromDuration(\n                        result.duration ?? this.duration,\n                        result.durationUnit ?? this.durationUnit,\n                        result.startDate,\n                        result.endDate\n                    )\n                );\n            }\n        }\n        return result;\n    }\n    inSet(field, value, silent, fromRelationUpdate, skipAccessors, validOnly) {\n        if (!skipAccessors) {\n            field = this.inSetNormalize(field) || field;\n        }\n        return super.inSet(field, value, silent, fromRelationUpdate, skipAccessors, validOnly);\n    }\n    // Cls requires special handling since it is converted to a DomClassList\n    applyValue(useProp, key, value, skipAccessors, field) {\n        if (key === 'cls') {\n            this.updateInternalCls(value);\n        }\n        // When setting fullDuration with record.set()\n        if (key === 'fullDuration') {\n            this[key] = value;\n        }\n        super.applyValue(useProp, key, value, skipAccessors, field);\n    }\n    //endregion\n    //region Iteration\n    /**\n     * Iterates over the {@link #property-dates}\n     * @param {Function} func The function to call for each date\n     * @param {Object} thisObj `this` reference for the function\n     * @category Scheduling\n     */\n    forEachDate(func, thisObj) {\n        return this.dates.forEach(func.bind(thisObj));\n    }\n    //endregion\n    /**\n     * Checks if the range record has both start and end dates set and start <= end\n     *\n     * @property {Boolean}\n     * @category Scheduling\n     */\n    get isScheduled() {\n        const { startDateMS, endDateMS } = this;\n        return endDateMS - startDateMS >= 0;\n    }\n    // Simple check if end date is greater than start date\n    get isValid() {\n        const { startDate, endDate } = this;\n        return !startDate || !endDate || (endDate - startDate >= 0);\n    }\n    /**\n     * Shift the dates for the date range by the passed amount and unit\n     * @param {'ms'|'s'|'m'|'h'|'d'|'w'|'M'|'y'} unit The unit to shift by, see {@link Core.helper.DateHelper}\n     * for more information on valid formats.\n     * @param {Number} amount The amount to shift\n     */\n    shift(amount, unit = this.durationUnit) {\n        if (typeof amount === 'string') {\n            const u = amount;\n            amount = unit;\n            unit = u;\n        }\n        return this.setStartDate(DH.add(this.startDate, amount, unit, true), true);\n    }\n    /**\n     * Returns the WBS code of this model (e.g '2.1.3'). Only relevant when part of a tree store, as in the Gantt chart.\n     * @property {String}\n     * @category Parent & children\n     */\n    get wbsCode() {\n        return this._wbsCode || this.indexPath.join('.');\n    }\n    set wbsCode(value) {\n        // wbsCode needs to be writable to interop w/TaskModel and Baselines which copy this field value\n        this._wbsCode = value;\n    }\n    fullCopy() {\n        //NOT PORTED\n        return this.copy.apply(this, arguments);\n    }\n    intersects(timeSpan) {\n        return this.intersectsRange(timeSpan.startDate, timeSpan.endDate);\n    }\n    intersectsRange(start, end) {\n        const\n            myStart = this.startDate,\n            myEnd   = this.endDate;\n        return myStart && myEnd && DH.intersectSpans(myStart, myEnd, start, end);\n    }\n    /**\n     * Splits this event into two pieces at the desired position.\n     *\n     * @param {Number|String} splitPoint The duration point at which to split this event.\n     *\n     * If less then `1`, this indicates the relative position at which it will be split.\n     * 0.5 means cut it in half.\n     *\n     * If greater than `1`, this indicates the new duration in the current duration units of this event before the split.\n     *\n     * If this is a string, it will be a duration description as described in\n     * {@link Core.helper.DateHelper#function-parseDuration-static}, for example `'15 min'`\n     *\n     * @returns {Scheduler.model.TimeSpan} The newly created split section of the timespan\n     * @category Scheduling\n     */\n    split(splitPoint = 0.5) {\n        const\n            me             = this,\n            clone          = me.copy(),\n            {\n                fullDuration,\n                eventStore,\n                assignmentStore\n            }              = me,\n            oldDuration    = new Duration(fullDuration),\n            cloneDuration  = new Duration(fullDuration);\n        let ownNewDuration,\n            unitsChanged;\n        if (typeof splitPoint === 'string') {\n            ownNewDuration = new Duration(splitPoint);\n            // New duration specified in same time units as current duration\n            if (ownNewDuration.unit === oldDuration.unit) {\n                cloneDuration.magnitude -= ownNewDuration.magnitude;\n            }\n            // New duration is in different units, so convert clone's duration to match\n            else {\n                cloneDuration.magnitude = DH.as(ownNewDuration.unit, oldDuration) - ownNewDuration.magnitude;\n                cloneDuration.unit = ownNewDuration.unit;\n                unitsChanged = true;\n            }\n        }\n        else {\n            ownNewDuration = new Duration(splitPoint > 1 ? splitPoint : me.duration * splitPoint, me.durationUnit);\n            cloneDuration.magnitude -= ownNewDuration.magnitude;\n        }\n        clone.startDate = DH.add(me.startDate, ownNewDuration.magnitude, ownNewDuration.unit);\n        if (unitsChanged) {\n            clone.fullDuration = cloneDuration;\n            me.fullDuration = ownNewDuration;\n        }\n        else {\n            clone.duration = cloneDuration.magnitude;\n            me.duration = ownNewDuration.magnitude;\n        }\n        if (eventStore) {\n            eventStore.add(clone);\n            if (assignmentStore && !eventStore.usesSingleAssignment) {\n                assignmentStore.add(\n                    me.assignments.map(assignment => {\n                        const clonedData = Object.assign({}, assignment.data, {\n                            eventId  : clone.id,\n                            // From engine\n                            event    : null,\n                            resource : null\n                        });\n                        delete clonedData.id;\n                        return clonedData;\n                    })\n                );\n            }\n        }\n        return clone;\n    }\n    toICSString(icsEventConfig = {}) {\n        if (!this.isScheduled) {\n            return '';\n        }\n        const\n            {\n                startDate,\n                endDate\n            }         = this,\n            // To allow testing using a fixed timestamp value\n            timestamp = icsEventConfig.DTSTAMP || DH.format(new Date(), 'uu');\n        delete icsEventConfig.DTSTAMP;\n        let startEnd = {};\n        if (this.allDay) {\n            startEnd = {\n                'DTSTART;VALUE=DATE' : DH.format(startDate, 'u'),\n                'DTEND;VALUE=DATE'   : DH.format(endDate, 'u')\n            };\n        }\n        else {\n            startEnd = {\n                DTSTART : DH.format(startDate, 'uu'),\n                DTEND   : DH.format(endDate, 'uu')\n            };\n        }\n        const\n            version       = (VersionHelper.scheduler && VersionHelper.getVersion('scheduler')) || (VersionHelper.calendar && VersionHelper.getVersion('calendar')) || '',\n            icsWrapConfig = {\n                BEGIN    : 'VCALENDAR',\n                VERSION  : '2.0',\n                CALSCALE : 'GREGORIAN',\n                PRODID   : `-//Bryntum AB//Bryntum Scheduler ${version} //EN`,\n                END      : 'VCALENDAR'\n            },\n            eventConfig   = {\n                BEGIN   : 'VEVENT',\n                UID     : this.id + '@bryntum.com',\n                CLASS   : 'PUBLIC',\n                SUMMARY : this.name,\n                DTSTAMP : timestamp,\n                ...startEnd,\n                ...(this.recurrenceRule ? { RRULE : this.recurrenceRule } : {}),\n                ...icsEventConfig,\n                END     : 'VEVENT'\n            },\n            icsItems      = Object.keys(icsWrapConfig).map(key => `${key}:${icsWrapConfig[key]}`),\n            eventItems    = Object.keys(eventConfig).map(key => `${key}:${eventConfig[key]}`);\n        // Inject event details before the closing VCALENDAR entry\n        icsItems.splice(icsItems.length - 1, 0, ...eventItems);\n        return icsItems.join('\\n');\n    }\n    /**\n     * Triggers a download of this time span in ICS format (for import in Outlook etc.)\n     *\n     * ```javascript\n     * timeSpan.downloadAsICS({\n     *      LOCATION : timeSpan.location\n     *  });\n     * ```\n     * @param {Object<String,String>} [icsEventConfig] A config object with properties to be added in to `BEGIN:VEVENT`\n     * section of the exported event.\n     * @category Misc\n     */\n    exportToICS(icsEventConfig) {\n        if (this.isScheduled) {\n            const blob = new Blob([this.toICSString(icsEventConfig)], { type : 'text/calendar' });\n            BrowserHelper.downloadBlob(blob, (this.name || 'Event') + '.ics');\n        }\n    }\n    /**\n     * Defines if the given event field should be manually editable in UI.\n     * You can override this method to provide your own logic.\n     *\n     * By default the method defines all the event fields as editable.\n     *\n     * @param {String} fieldName Name of the field\n     * @returns {Boolean} Returns `true` if the field is editable, `false` if it is not and `undefined` if the model has no such field.\n     */\n    isEditable(fieldName) {\n        // return undefined for unknown fields\n        return this.getFieldDefinition(fieldName) ? true : undefined;\n    }\n    isFieldModified(fieldName) {\n        if (fieldName === 'fullDuration') {\n            return super.isFieldModified('duration') || super.isFieldModified('durationUnit');\n        }\n        return super.isFieldModified(fieldName);\n    }\n}\nTimeSpan._$name = 'TimeSpan';", "import Base from '../../../../Core/Base.js';\nconst dayParseRegExp = /^([+-]?[0-9])?(SU|MO|TU|WE|TH|FR|SA)$/;\nconst days = ['SU', 'MO', 'TU', 'WE', 'TH', 'FR', 'SA'];\nexport default class RecurrenceDayRuleEncoder extends Base {\n    static decodeDay(rawDay) {\n        let parsedDay,\n            result;\n        if ((parsedDay = dayParseRegExp.exec(rawDay))) {\n            result = [days.indexOf(parsedDay[2])];\n            // optional position number\n            if (parsedDay[1]) {\n                parsedDay[1] = parseInt(parsedDay[1], 10);\n                result.push(parsedDay[1]);\n            }\n        }\n        return result;\n    }\n    static encodeDay(day) {\n        let position;\n        // support decodeDay() result format\n        if (Array.isArray(day)) {\n            [day, position] = day;\n        }\n        return (position ? position.toString() : '') + days[day];\n    }\n    // Turns days values provided as an array of strings (like [`-1MO`, `SU`, `+3FR`])\n    // into an array of [ dayIndex, position ] elements, where:\n    //\n    // - `dayIndex` - zero-based week day index value (0 - Sunday, 1 - Monday, 2 - Tuesday, etc.)\n    // - `position` - (optional) 1-based position of the day (integer value (can be both positive and negative))\n    static decode(rawDays) {\n        const result = [];\n        let parsedDay;\n        if (rawDays) {\n            for (let i = 0; i < rawDays.length; i++) {\n                if ((parsedDay = this.decodeDay(rawDays[i]))) {\n                    result.push(parsedDay);\n                }\n            }\n        }\n        return result;\n    }\n    static encode(days) {\n        const result = [];\n        let day;\n        if (days) {\n            for (let i = 0; i < days.length; i++) {\n                if ((day = this.encodeDay(days[i]))) {\n                    result.push(day);\n                }\n            }\n        }\n        return result;\n    }\n};\nRecurrenceDayRuleEncoder._$name = 'RecurrenceDayRuleEncoder';", "import Base from '../../../../Core/Base.js';\nimport DateHelper from '../../../../Core/helper/DateHelper.js';\n/**\n * @module Scheduler/data/util/recurrence/AbstractRecurrenceIterator\n * @private\n */\nconst\n    frequencyToUnitRe = /ly$/i,\n    frequencyToUnit = frequency => {\n        const result = frequency.replace(frequencyToUnitRe, '');\n        return result === 'DAI' ? 'DAY' : result;\n    },\n    fn = (date, counter, isFirst, timeSpan) => timeSpan.buildOccurrence(date, isFirst),\n    captureLastOccurrence = date => lastOccurrenceDate = date;\nlet lastOccurrenceDate;\nexport default class AbstractRecurrenceIterator extends Base {\n    static frequency = 'NONE';\n    static MAX_OCCURRENCES_COUNT = 1000000;\n    static processIterationConfig(config) {\n        const\n            { recurrence } = config,\n            {\n                frequency,\n                interval,\n                timeSpan,\n                endDate : until,\n                count\n            } = recurrence;\n        // Force the correction of the event to be in sync with its recurrence rule\n        // before performing iteration. For example, if the event's configured startDate\n        // is 1st January 2020, and the rule dictates that the event will take place\n        // monthly, every Monday, then the first event is not until Monday 6th January, 2020.\n        if (!config.syncingStartDate && !timeSpan.meta.isSyncedWithRule) {\n            // Do not generate occurrences outside of the specified range\n            const\n                intervalEndDate = DateHelper.add(timeSpan.startDate, interval, frequencyToUnit(frequency)),\n                endDate = DateHelper.min(\n                    intervalEndDate,\n                    config.endDate || intervalEndDate\n                );\n            this.forEachDate({\n                syncingStartDate : true,\n                startDate        : timeSpan.startDate,\n                endDate,\n                recurrence,\n                fn\n            });\n        }\n        // Capture the start after its been synced with its recurrence rule\n        const timeSpanStart = timeSpan.startDate;\n        // Extract the endDate from the config, defaulting to the recurrence UNTIL date\n        let {\n            startDate = timeSpanStart,\n            endDate   = until\n        } = config;\n        // No point in starting the iteration before the event starts\n        if (startDate < timeSpanStart) {\n            startDate = timeSpanStart;\n        }\n        // The recurrence's stop date overrides the configured endDate.\n        if (until) {\n            if (!endDate || endDate > until) {\n                endDate = until;\n            }\n        }\n        // If we are limiting using count and we are not starting from the\n        // first occurrence, then we have to calculate a stop date.\n        // This is because for date ranges in the future we cannot calculate how many\n        // preceding occurrences there may have been.\n        else if (count && startDate > timeSpanStart) {\n            // Iterate the occurrences from the start to capture the last one\n            this.forEachDate({\n                recurrence,\n                fn : captureLastOccurrence\n            });\n            // The date of the last occurrence in the count sequence overrides the configured endDate.\n            if (!endDate || endDate > lastOccurrenceDate) {\n                // since endDate of the provided interval is exclusive add 1 millisecond\n                endDate = new Date(lastOccurrenceDate.getTime() + 1);\n            }\n        }\n        // Preserve the requested start of requested visits.\n        const earliestVisibleDate = startDate;\n        // Unless we are only asked for events which *start* within the time range. we must make\n        // a best attempt to include any occurrences which span the start date.\n        // So if we are asking for events from the 1st of the month, and there's an event\n        // which runs every 2 months from the 15th to the 5th, we must include it. Start the\n        // iteration <interval> full frequency quanta before the requested start.\n        // This will only cause <interval> extra iterations.\n        // We cannot step back to before the event's starting date though.\n        if (!config.startOnly) {\n            startDate = new Date(DateHelper.max(DateHelper.add(startDate, -interval, frequencyToUnit(frequency)), timeSpanStart));\n        }\n        return Object.assign({\n            extraArgs : [],\n            // Only check start date for time spans with 0 duration\n            startOnly : !Boolean(timeSpan.durationMS)\n        }, config, {\n            startDate,\n            endDate,\n            timeSpan,\n            timeSpanStart,\n            earliestVisibleDate,\n            endDateMS             : endDate?.getTime(),\n            timeSpanStartMS       : timeSpanStart.getTime(),\n            earliestVisibleDateMS : earliestVisibleDate.getTime(),\n            durationMS            : timeSpan.durationMS,\n            spansStart            : startDate <= timeSpanStart && endDate > timeSpanStart\n        });\n    }\n    static getOccurrenceIndex(event) {\n        if (event.isOccurrence) {\n            return DateHelper.diff(event.recurringTimeSpan.startDate, event.startDate, frequencyToUnit(event.recurringTimeSpan.recurrence.frequency));\n        }\n    }\n    /**\n     * Returns Nth occurrence of a week day in the provided period of time.\n     * @param  {Date} startDate Period start date.\n     * @param  {Date} endDate   Period end date.\n     * @param  {Number} day    Week day (0 - Sunday, 1 - Monday, 2 - Tuesday, etc.)\n     * @param  {Number} index  Index to find.\n     * @returns {Date}           Returns the found date or null if there is no `index`th entry.\n     * @private\n     */\n    static getNthDayInPeriod(startDate, endDate, day, index) {\n        let result, sign, borderDate;\n        if (index) {\n            if (index > 0) {\n                sign = 1;\n                borderDate = startDate;\n            }\n            else {\n                sign = -1;\n                borderDate = endDate;\n            }\n            // delta between requested day and border day\n            const delta = day - borderDate.getDay();\n            // if the requested day goes after (before, depending on borderDate used (start/end))\n            // we adjust index +/-1\n            if (sign * delta < 0) {\n                index += sign;\n            }\n            // measure \"index\" weeks forward (or backward) ..take delta into account\n            // result = new Date(borderDate.getTime() + ((index - sign) * 7 + delta) * 24*60*60*1000);\n            // Per https://github.com/bryntum/support/issues/3413 - don't do that ^^ because DST makes days/week\n            // alternatingly shorter or longer depending on going in/out of DST:\n            result = new Date(borderDate);\n            result.setDate(borderDate.getDate() + (index - sign) * 7 + delta);\n            // if resulting date is outside of the provided range there is no \"index\"-th entry\n            // of the day\n            if (result < startDate || result > endDate) {\n                result = null;\n            }\n        }\n        return result;\n    }\n    static buildDate(year, month, date) {\n        const dt = new Date(year, month, date);\n        if (dt.getFullYear() === year && dt.getMonth() === month && dt.getDate() === date) {\n            return dt;\n        }\n    }\n    static isValidPosition(position) {\n        return Boolean(position);\n    }\n    static forEachDateAtPositions(dates, positions, fn, scope) {\n        const datesLength = dates.length,\n            processed     = {};\n        for (let i = 0; i < positions.length; i++) {\n            const index = positions[i];\n            if (this.isValidPosition(index)) {\n                const date = index > 0 ? dates[index - 1] : dates[datesLength + index];\n                if (date && !processed[date.getTime()]) {\n                    // remember that we've returned the date\n                    processed[date.getTime()] = true;\n                    // return false if it's time to stop recurring\n                    if (fn.call(scope, date) === false) {\n                        return false;\n                    }\n                }\n            }\n        }\n    }\n    static isInView(startOnly, occurrenceDate, earliestVisibleDate, durationMS, timeSpan) {\n        return (\n            startOnly\n                ? occurrenceDate >= earliestVisibleDate\n                : occurrenceDate.valueOf() + durationMS > earliestVisibleDate\n        ) && !timeSpan.hasException(occurrenceDate);\n    }\n    // Slightly faster version of ^, used by Daily & Weekly iterators\n    static isInViewMS(startOnly, occurenceDate, occurrenceDateMS, earliestVisibleDateMS, durationMS, timeSpan) {\n        return (\n            startOnly\n                ? occurrenceDateMS >= earliestVisibleDateMS\n                : occurrenceDateMS + durationMS > earliestVisibleDateMS\n        ) && !timeSpan.hasException(occurenceDate);\n    }\n}\nAbstractRecurrenceIterator._$name = 'AbstractRecurrenceIterator';", "/**\n * @module Scheduler/data/util/recurrence/DailyRecurrenceIterator\n */\nimport AbstractRecurrenceIterator from './AbstractRecurrenceIterator.js';\nimport DateHelper from '../../../../Core/helper/DateHelper.js';\n/**\n * A class which provides iteration to call a function for dates specified by a\n * {@link Scheduler.model.RecurrenceModel RecurrenceModel} over a specified date range.\n * @private\n */\nexport default class DailyRecurrenceIterator extends AbstractRecurrenceIterator {\n    static frequency = 'DAILY';\n    /**\n     * Iterates over the passed date range, calling the passed callback on each date on which\n     * starts a recurring event which matches the passed recurrence rule and overlaps the start and end dates\n     * and is not an {@link Scheduler.model.mixin.RecurringTimeSpan#field-exceptionDates exceptionDate}\n     * in the recurring event.\n     * @param {Object} config An object which describes how to iterate.\n     * @param {Date} config.startDate The point in time to begin iteration.\n     * @param {Date} config.endDate The point in time to end iteration.\n     * @param {Boolean} [config.startOnly] By default, all occurrences which intersect the date range\n     * will be visited. Pass `true` to only visit occurrences which *start* in the date range.\n     * @param {Scheduler.model.RecurrenceModel} config.recurrence The point in time to end iteration.\n     * @param {Function} config.fn The function to call for each date which matches the recurrence in the date range.\n     * @param {Date} config.fn.date The occurrence date.\n     * @param {Number} config.fn.counter A counter of how many dates have been visited in this iteration.\n     * @param {Boolean} config.fn.isFirst A flag which is `true` if the date is the first occurrence in the specified recurrence rule.\n     * @param {Array} [config.extraArgs] Extra arguments to pass to the callback after the `isFirst` argument.\n     */\n    static forEachDate(config) {\n        const\n            {\n                startOnly,\n                startDate,\n                endDate,\n                endDateMS,\n                timeSpan,\n                timeSpanStart,\n                earliestVisibleDateMS,\n                durationMS,\n                spansStart,\n                recurrence,\n                fn,\n                extraArgs,\n                scope = this\n            }                = this.processIterationConfig(config),\n            { interval }     = recurrence,\n            delay            = startDate - timeSpanStart,\n            // recurrence interval duration in ms (86400000 is a single day duration in ms)\n            intervalDuration = interval * 86400000,\n            delayInIntervals = Math.floor(delay / intervalDuration);\n        let { count }       = recurrence,\n            counter         = 0,\n            occurrenceDate  = DateHelper.add(timeSpanStart, delayInIntervals * interval, 'day'),\n            occurrenceDateMS = occurrenceDate.getTime();\n        if (!endDate && !count) {\n            count = this.MAX_OCCURRENCES_COUNT;\n        }\n        while (!endDateMS || occurrenceDateMS < endDateMS) {\n            const inView = this.isInViewMS(startOnly, occurrenceDate, occurrenceDateMS, earliestVisibleDateMS, durationMS, timeSpan);\n            counter++;\n            if (inView &&\n                ((endDateMS && occurrenceDateMS > endDateMS) || fn.apply(scope, [occurrenceDate, counter, counter === 1 && spansStart, timeSpan, ...extraArgs]) === false || (count && counter >= count))\n            ) {\n                break;\n            }\n            // shift to the next day\n            occurrenceDate = DateHelper.add(occurrenceDate, interval, 'day');\n            occurrenceDateMS = occurrenceDate.getTime();\n        }\n    }\n}\nDailyRecurrenceIterator._$name = 'DailyRecurrenceIterator';", "/**\n * @module Scheduler/data/util/recurrence/WeeklyRecurrenceIterator\n */\nimport AbstractRecurrenceIterator from './AbstractRecurrenceIterator.js';\nimport DateHelper from '../../../../Core/helper/DateHelper.js';\nimport DayRuleEncoder from './RecurrenceDayRuleEncoder.js';\n/**\n * A class which provides iteration to call a function for dates specified by a\n * {@link Scheduler.model.RecurrenceModel RecurrenceModel} over a specified date range.\n * @private\n */\nexport default class WeeklyRecurrenceIterator extends AbstractRecurrenceIterator {\n    static frequency = 'WEEKLY';\n    /**\n     * Iterates over the passed date range, calling the passed callback on each date on which\n     * starts an event which matches the passed recurrence rule and overlaps the start and end dates.\n     * @param {Object} config An object which describes how to iterate.\n     * @param {Date} config.startDate The point in time to begin iteration.\n     * @param {Date} config.endDate The point in time to end iteration.\n     * @param {Boolean} [config.startOnly] By default, all occurrences which intersect the date range\n     * will be visited. Pass `true` to only visit occurrences which *start* in the date range.\n     * @param {Scheduler.model.RecurrenceModel} config.recurrence The point in time to end iteration.\n     * @param {Function} config.fn The function to call for each date which matches the recurrence in the date range.\n     * @param {Date} config.fn.date The occurrence date.\n     * @param {Number} config.fn.counter A counter of how many dates have been visited in this iteration.\n     * @param {Boolean} config.fn.isFirst A flag which is `true` if the date is the first occurrence in the specified recurrence rule.\n     * @param {Array} [config.extraArgs] Extra arguments to pass to the callback after the `isFirst` argument.\n     */\n    static forEachDate(config) {\n        const\n            {\n                startOnly,\n                startDate,\n                endDateMS,\n                timeSpan,\n                timeSpanStart,\n                timeSpanStartMS,\n                earliestVisibleDateMS,\n                durationMS,\n                spansStart,\n                recurrence,\n                fn,\n                extraArgs,\n                scope = this\n            }                     = this.processIterationConfig(config),\n            {\n                interval,\n                days\n            }                     = recurrence,\n            { weekStartDay }      = DateHelper,\n            startHours            = timeSpanStart.getHours(),\n            startMinutes          = timeSpanStart.getMinutes(),\n            startSeconds          = timeSpanStart.getSeconds(),\n            startMS               = timeSpanStart.getMilliseconds();\n        let counter    = 0,\n            { count }  = recurrence,\n            weekDays   = DayRuleEncoder.decode(days),\n            weekStartDate, occurrenceDate;\n        // \"Days\" might be skipped then we use the event start day\n        if (!weekDays?.length) {\n            weekDays = [[timeSpanStart.getDay()]];\n        }\n        // If week start day is not zero (Sunday)\n        // we need to normalize weekDays array since its values are used\n        // to calculate real dates as: date = week_start_date + weekDay_entry\n        // which does not work when week starts on non-Sunday\n        if (weekStartDay > 0) {\n            for (let i = 0; i < weekDays.length; i++) {\n                if (weekStartDay > weekDays[i][0]) {\n                    weekDays[i][0] = 7 - weekStartDay - weekDays[i][0];\n                }\n                else {\n                    weekDays[i][0] -= weekStartDay;\n                }\n            }\n        }\n        // days could be provided in any order so it's important to sort them\n        weekDays.sort((a, b) => a[0] - b[0]);\n        // if the recurrence is limited w/ \"Count\" or not every interval should match\n        // we need to 1st count passed occurrences so we always start iteration from the event start date\n        weekStartDate = DateHelper.getNext(count || interval > 1 ? timeSpanStart : startDate, 'week', 0);\n        if (!endDateMS && !count) {\n            count = this.MAX_OCCURRENCES_COUNT;\n        }\n        while (!endDateMS || weekStartDate.getTime() < endDateMS) {\n            for (let i = 0; i < weekDays.length; i++) {\n                // Faster than chaining multiple DateHelper calls\n                occurrenceDate = new Date(\n                    weekStartDate.getFullYear(),\n                    weekStartDate.getMonth(),\n                    weekStartDate.getDate() + weekDays[i][0],\n                    startHours,\n                    startMinutes,\n                    startSeconds,\n                    startMS\n                );\n                const occurrenceDateMS = occurrenceDate.getTime();\n                if (occurrenceDateMS >= timeSpanStartMS) {\n                    const inView = this.isInViewMS(startOnly, occurrenceDate, occurrenceDateMS, earliestVisibleDateMS, durationMS, timeSpan);\n                    counter++;\n                    if (inView &&\n                        ((endDateMS && occurrenceDateMS >= endDateMS) ||\n                        (fn.apply(scope, [occurrenceDate, counter, counter === 1 && spansStart, timeSpan, ...extraArgs]) === false) ||\n                        (count && counter >= count))\n                    ) {\n                        return;\n                    }\n                }\n            }\n            // get next week start\n            weekStartDate = DateHelper.getNext(weekStartDate, 'week', interval);\n        }\n    }\n}\nWeeklyRecurrenceIterator._$name = 'WeeklyRecurrenceIterator';", "/**\n * @module Scheduler/data/util/recurrence/MonthlyRecurrenceIterator\n */\nimport AbstractRecurrenceIterator from './AbstractRecurrenceIterator.js';\nimport DateHelper from '../../../../Core/helper/DateHelper.js';\nimport DayRuleEncoder from './RecurrenceDayRuleEncoder.js';\n/**\n * A class which provides iteration to call a function for dates specified by a\n * {@link Scheduler.model.RecurrenceModel RecurrenceModel} over a specified date range.\n * @private\n */\nexport default class MonthlyRecurrenceIterator extends AbstractRecurrenceIterator {\n    static frequency = 'MONTHLY';\n    static getNthDayOfMonth(date, dayNum) {\n        const daysInMonth = DateHelper.daysInMonth(date);\n        let result = null;\n        if (dayNum && Math.abs(dayNum) <= daysInMonth) {\n            result = new Date(date.getFullYear(), date.getMonth(), dayNum < 0 ? daysInMonth + dayNum + 1 : dayNum);\n        }\n        return result;\n    }\n    static isValidPosition(position) {\n        return position && Math.abs(position) > 0 && Math.abs(position) <= 31;\n    }\n    /**\n     * Iterates over the passed date range, calling the passed callback on each date on which\n     * starts an event which matches the passed recurrence rule and overlaps the start and end dates.\n     * @param {Object} config An object which describes how to iterate.\n     * @param {Date} config.startDate The point in time to begin iteration.\n     * @param {Date} config.endDate The point in time to end iteration.\n     * @param {Boolean} [config.startOnly] By default, all occurrences which intersect the date range\n     * will be visited. Pass `true` to only visit occurrences which *start* in the date range.\n     * @param {Scheduler.model.RecurrenceModel} config.recurrence The point in time to end iteration.\n     * @param {Function} config.fn The function to call for each date which matches the recurrence in the date range.\n     * @param {Date} config.fn.date The occurrence date.\n     * @param {Number} config.fn.counter A counter of how many dates have been visited in this iteration.\n     * @param {Boolean} config.fn.isFirst A flag which is `true` if the date is the first occurrence in the specified recurrence rule.\n     * @param {Array} [config.extraArgs] Extra arguments to pass to the callback after the `isFirst` argument.\n     */\n    static forEachDate(config) {\n        const\n            {\n                startOnly,\n                startDate,\n                endDate,\n                timeSpan,\n                timeSpanStart,\n                earliestVisibleDate,\n                durationMS,\n                spansStart,\n                recurrence,\n                fn,\n                extraArgs,\n                scope = this\n            }              = this.processIterationConfig(config),\n            {\n                interval,\n                days,\n                count,\n                positions\n            } = recurrence,\n            weekDays       = DayRuleEncoder.decode(days),\n            hasPositions   = positions && positions.length,\n            processedDate  = {};\n        let\n            { monthDays }  = recurrence,\n            counter        = 0,\n            weekDayPosition,\n            monthStartDate, monthEndDate,\n            dates, occurrenceDate, i;\n        // if the recurrence is limited w/ \"Count\" or not every interval should match\n        // we need to 1st count passed occurrences so we always start iteration from the event start date\n        monthStartDate = DateHelper.startOf(count || interval > 1 ? timeSpanStart : startDate, 'month');\n        monthEndDate   = new Date(DateHelper.getNext(monthStartDate, 'month', 1) - 1);\n        // If no month days nor week days are provided let's use event start date month day\n        if (!(monthDays && monthDays.length) && !(weekDays && weekDays.length)) {\n            monthDays = [timeSpanStart.getDate()];\n        }\n        if (weekDays && weekDays.length) {\n            // Collect hash of positions indexed by week days\n            weekDays.forEach(day => {\n                if (day[1]) {\n                    weekDayPosition         = weekDayPosition || {};\n                    weekDayPosition[day[0]] = day[1];\n                }\n            });\n        }\n        while ((!endDate || endDate > monthStartDate) && (!count || counter < count)) {\n            dates = [];\n            if (weekDays && weekDays.length) {\n                weekDays.forEach(day => {\n                    const weekDay = day[0];\n                    let from    = 1,\n                        till    = 53;\n                    // if position provided\n                    if (day[1]) {\n                        from = till = day[1];\n                    }\n                    for (i = from; i <= till; i++) {\n                        if ((occurrenceDate = this.getNthDayInPeriod(monthStartDate, monthEndDate, weekDay, i))) {\n                            occurrenceDate = DateHelper.copyTimeValues(occurrenceDate, timeSpanStart);\n                            if (!processedDate[occurrenceDate.getTime()]) {\n                                // remember we processed the date\n                                processedDate[occurrenceDate.getTime()] = true;\n                                dates.push(occurrenceDate);\n                            }\n                        }\n                    }\n                });\n                dates.sort((a, b) => a - b);\n                if (!hasPositions) {\n                    for (i = 0; i < dates.length; i++) {\n                        occurrenceDate = dates[i];\n                        if (occurrenceDate >= timeSpanStart) {\n                            const inView = this.isInView(startOnly, occurrenceDate, earliestVisibleDate, durationMS, timeSpan);\n                            counter++;\n                            if (inView &&\n                                ((endDate && occurrenceDate >= endDate) || (fn.apply(scope, [occurrenceDate, counter, counter === 1 && spansStart, timeSpan, ...extraArgs]) === false) || (count && counter >= count))\n                            ) {\n                                return false;\n                            }\n                        }\n                    }\n                }\n            }\n            else {\n                const sortedMonthDates = [];\n                for (i = 0; i < monthDays.length; i++) {\n                    // check if the date wasn't iterated over yet\n                    if ((occurrenceDate = this.getNthDayOfMonth(monthStartDate, monthDays[i])) && !processedDate[occurrenceDate.getTime()]) {\n                        processedDate[occurrenceDate.getTime()] = true;\n                        sortedMonthDates.push(occurrenceDate);\n                    }\n                }\n                // it's important to sort the dates to iterate over them in the proper order\n                sortedMonthDates.sort((a, b) => a - b);\n                for (i = 0; i < sortedMonthDates.length; i++) {\n                    occurrenceDate = DateHelper.copyTimeValues(sortedMonthDates[i], timeSpanStart);\n                    if (hasPositions) {\n                        dates.push(occurrenceDate);\n                    }\n                    else if (occurrenceDate >= timeSpanStart) {\n                        const inView = this.isInView(startOnly, occurrenceDate, earliestVisibleDate, durationMS, timeSpan);\n                        counter++;\n                        if (inView &&\n                            ((endDate && occurrenceDate > endDate) || (fn.apply(scope, [occurrenceDate, counter, counter === 1 && spansStart, timeSpan, ...extraArgs]) === false) || (count && counter >= count))\n                        ) {\n                            return;\n                        }\n                    }\n                }\n            }\n            if (hasPositions && dates.length) {\n                this.forEachDateAtPositions(dates, positions, occurrenceDate => {\n                    if (occurrenceDate >= timeSpanStart) {\n                        const inView = startOnly ? occurrenceDate >= earliestVisibleDate : occurrenceDate.valueOf() + durationMS > earliestVisibleDate && !timeSpan.hasException(occurrenceDate);\n                        counter++;\n                        // Ignore dates outside of the [startDate, endDate] range\n                        if (inView && (!endDate || occurrenceDate <= endDate) &&\n                            // return false if it's time to stop recurring\n                            (fn.apply(scope, [occurrenceDate, counter, counter === 1 && spansStart, timeSpan, ...extraArgs]) === false || (count && counter >= count))\n                        ) {\n                            return false;\n                        }\n                    }\n                });\n            }\n            // get next month start\n            monthStartDate = DateHelper.getNext(monthStartDate, 'month', interval);\n            monthEndDate   = new Date(DateHelper.getNext(monthStartDate, 'month', 1) - 1);\n        }\n    }\n}\nMonthlyRecurrenceIterator._$name = 'MonthlyRecurrenceIterator';", "/**\n * @module Scheduler/data/util/recurrence/YearlyRecurrenceIterator\n */\nimport AbstractRecurrenceIterator from './AbstractRecurrenceIterator.js';\nimport DateHelper from '../../../../Core/helper/DateHelper.js';\nimport DayRuleEncoder from './RecurrenceDayRuleEncoder.js';\n/**\n * A class which provides iteration to call a function for dates specified by a\n * {@link Scheduler.model.RecurrenceModel RecurrenceModel} over a specified date range.\n * @private\n */\nexport default class YearlyRecurrenceIterator extends AbstractRecurrenceIterator {\n    static frequency = 'YEARLY';\n    /**\n     * Iterates over the passed date range, calling the passed callback on each date on which\n     * starts an event which matches the passed recurrence rule and overlaps the start and end dates.\n     * @param {Object} config An object which describes how to iterate.\n     * @param {Date} config.startDate The point in time to begin iteration.\n     * @param {Date} config.endDate The point in time to end iteration.\n     * @param {Boolean} [config.startOnly] By default, all occurrences which intersect the date range\n     * will be visited. Pass `true` to only visit occurrences which *start* in the date range.\n     * @param {Scheduler.model.RecurrenceModel} config.recurrence The point in time to end iteration.\n     * @param {Function} config.fn The function to call for each date which matches the recurrence in the date range.\n     * @param {Date} config.fn.date The occurrence date.\n     * @param {Number} config.fn.counter A counter of how many dates have been visited in this iteration.\n     * @param {Boolean} config.fn.isFirst A flag which is `true` if the date is the first occurrence in the specified recurrence rule.\n     * @param {Array} [config.extraArgs] Extra arguments to pass to the callback after the `isFirst` argument.\n     */\n    static forEachDate(config) {\n        const\n            {\n                startOnly,\n                startDate,\n                endDate,\n                timeSpan,\n                timeSpanStart,\n                earliestVisibleDate,\n                durationMS,\n                spansStart,\n                recurrence,\n                fn,\n                extraArgs,\n                scope = this\n            }              = this.processIterationConfig(config),\n            {\n                interval,\n                days,\n                count,\n                positions\n            } = recurrence,\n            weekDays       = DayRuleEncoder.decode(days),\n            hasPositions   = positions && positions.length,\n            processedDate  = {};\n        let\n            { months }     = recurrence,\n            counter        = 0,\n            i, occurrenceDate, dates, yearStartDate, yearEndDate, weekDayPosition;\n        // if the recurrence is limited w/ \"Count\" or not every interval should match\n        // we need to 1st count passed occurrences so we always start iteration from the event start date\n        yearStartDate = DateHelper.startOf(count || interval > 1 ? timeSpanStart : startDate, 'year');\n        yearEndDate   = new Date(DateHelper.getNext(yearStartDate, 'year', 1) - 1);\n        months && months.sort((a, b) => a - b);\n        // if no months provided let's use the event month\n        if (!(months && months.length) && !(weekDays && weekDays.length)) {\n            months = [timeSpanStart.getMonth() + 1];\n        }\n        if (weekDays && weekDays.length) {\n            // Collect hash of positions indexed by week days\n            weekDays.forEach(day => {\n                if (day[1]) {\n                    weekDayPosition         = weekDayPosition || {};\n                    weekDayPosition[day[0]] = day[1];\n                }\n            });\n        }\n        while ((!endDate || endDate > yearStartDate) && (!count || counter < count)) {\n            dates = [];\n            if (weekDays && weekDays.length) {\n                weekDays.forEach(day => {\n                    const weekDay = day[0];\n                    let\n                        from = 1,\n                        till = 53;\n                    // if position provided\n                    if (day[1]) {\n                        from = till = day[1];\n                    }\n                    for (i = from; i <= till; i++) {\n                        if ((occurrenceDate = this.getNthDayInPeriod(yearStartDate, yearEndDate, weekDay, i))) {\n                            occurrenceDate = DateHelper.copyTimeValues(occurrenceDate, timeSpanStart);\n                            if (!processedDate[occurrenceDate.getTime()]) {\n                                // remember we processed the date\n                                processedDate[occurrenceDate.getTime()] = true;\n                                dates.push(occurrenceDate);\n                            }\n                        }\n                    }\n                });\n                dates.sort((a, b) => a - b);\n                if (!hasPositions) {\n                    for (i = 0; i < dates.length; i++) {\n                        occurrenceDate = dates[i];\n                        if (occurrenceDate >= timeSpanStart) {\n                            const inView = this.isInView(startOnly, occurrenceDate, earliestVisibleDate, durationMS, timeSpan);\n                            counter++;\n                            if (inView &&\n                                ((endDate && occurrenceDate >= endDate) ||\n                                (fn.apply(scope, [occurrenceDate, counter, counter === 1 && spansStart, timeSpan, ...extraArgs]) === false) ||\n                                (count && counter >= count))\n                            ) {\n                                return;\n                            }\n                        }\n                    }\n                }\n            }\n            else {\n                for (i = 0; i < months.length; i++) {\n                    if ((occurrenceDate = this.buildDate(yearStartDate.getFullYear(), months[i] - 1, timeSpanStart.getDate()))) {\n                        occurrenceDate = DateHelper.copyTimeValues(occurrenceDate, timeSpanStart);\n                        // check if the date wasn't iterated over yet\n                        if (!processedDate[occurrenceDate.getTime()]) {\n                            processedDate[occurrenceDate.getTime()] = true;\n                            if (hasPositions) {\n                                dates.push(occurrenceDate);\n                            }\n                            else if (occurrenceDate >= timeSpanStart) {\n                                const inView = startOnly ? occurrenceDate >= earliestVisibleDate : occurrenceDate.valueOf() + durationMS > earliestVisibleDate && !timeSpan.hasException(occurrenceDate);\n                                counter++;\n                                if (inView &&\n                                    ((endDate && occurrenceDate >= endDate) ||\n                                    (fn.apply(scope, [occurrenceDate, counter, counter === 1 && spansStart, timeSpan, ...extraArgs]) === false) ||\n                                    (count && counter >= count))\n                                ) {\n                                    return;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            if (hasPositions && dates.length) {\n                this.forEachDateAtPositions(dates, positions, occurrenceDate => {\n                    if (occurrenceDate >= timeSpanStart) {\n                        const inView = startOnly ? occurrenceDate >= earliestVisibleDate : occurrenceDate.valueOf() + durationMS > earliestVisibleDate && !timeSpan.hasException(occurrenceDate);\n                        counter++;\n                        // Ignore dates outside of the [startDate, endDate] range\n                        if (inView && (!endDate || occurrenceDate < endDate)) {\n                            // return false if it's time to stop recurring\n                            if (fn.apply(scope, [occurrenceDate, counter, counter === 1 && spansStart, timeSpan, ...extraArgs]) === false || (count && counter >= count)) {\n                                return false;\n                            }\n                        }\n                    }\n                });\n            }\n            // get next month start\n            yearStartDate = DateHelper.getNext(yearStartDate, 'year', interval);\n            yearEndDate   = new Date(DateHelper.getNext(yearStartDate, 'year', 1) - 1);\n        }\n    }\n}\nYearlyRecurrenceIterator._$name = 'YearlyRecurrenceIterator';", "import Model from '../../Core/data/Model.js';\nimport DateHelper from '../../Core/helper/DateHelper.js';\nimport RecurrenceDayRuleEncoder from '../data/util/recurrence/RecurrenceDayRuleEncoder.js';\nimport DailyRecurrenceIterator from '../data/util/recurrence/DailyRecurrenceIterator.js';\nimport WeeklyRecurrenceIterator from '../data/util/recurrence/WeeklyRecurrenceIterator.js';\nimport MonthlyRecurrenceIterator from '../data/util/recurrence/MonthlyRecurrenceIterator.js';\nimport YearlyRecurrenceIterator from '../data/util/recurrence/YearlyRecurrenceIterator.js';\n/**\n * @module Scheduler/model/RecurrenceModel\n */\nconst recurrenceIterators = {};\n[DailyRecurrenceIterator, WeeklyRecurrenceIterator, MonthlyRecurrenceIterator, YearlyRecurrenceIterator].forEach(it => {\n    recurrenceIterators[it.frequency] = it;\n});\nfunction convertStringOfIntegerItemsValue(value) {\n    if (value) {\n        if (typeof value == 'string') {\n            value = value.split(',').map(item => parseInt(item, 10));\n        }\n    }\n    else {\n        value = null;\n    }\n    return value;\n}\nfunction convertStringOfItemsValue(value) {\n    if (value) {\n        if (typeof value == 'string') {\n            value = value.split(',');\n        }\n    }\n    else {\n        value = null;\n    }\n    return value;\n}\nfunction isEqualAsString(value1, value2) {\n    return String(value1) === String(value2);\n}\nfunction convertInteger(value) {\n    if (this.defaultValue && value === undefined) {\n        return this.defaultValue;\n    }\n    if (this.allowNull && value == null) {\n        return null;\n    }\n    value = parseInt(value);\n    return isNaN(value) ? undefined : value;\n}\n/**\n * This class represents a timespan recurrence settings.\n * It is a subclass of {@link Core.data.Model} class.\n * Please refer to the documentation for that class to become familiar with the base interface of this class.\n *\n * The data source for these fields can be customized by subclassing this class.\n *\n * @extends Core/data/Model\n */\nexport default class RecurrenceModel extends Model {\n    static get $name() {\n        return 'RecurrenceModel';\n    }\n    /**\n     * Indicates that this is a `RecurrenceModel` class instance\n     * (allows to avoid using `instanceof`).\n     * @property {Boolean}\n     * @readonly\n     */\n    get isRecurrenceModel() {\n        return true;\n    }\n    //region Fields\n    static get fields() {\n        return [\n            /**\n             * Field defines the recurrence frequency. Supported values are: `DAILY`, `WEEKLY`, `MONTHLY`, `YEARLY`.\n             * @field {'DAILY'|'WEEKLY'|'MONTHLY'|'YEARLY'} frequency\n             */\n            { name : 'frequency', defaultValue : 'DAILY' },\n            /**\n             * Field defines how often the recurrence repeats.\n             * For example, if the recurrence is weekly its interval is 2, then the timespan repeats every two weeks.\n             * @field {Number} interval\n             */\n            { name : 'interval', defaultValue : 1, convert : convertInteger },\n            /**\n             * End date of the recurrence. Specifies when the recurrence ends.\n             * The value is optional, the recurrence can as well be stopped using {@link #field-count} field value.\n             * @field {Date} endDate\n             */\n            { name : 'endDate', type : 'date' },\n            /**\n             * Specifies the number of occurrences after which the recurrence ends.\n             * The value includes the associated timespan itself so values less than 2 make no sense.\n             * The field is optional, the recurrence as well can be stopped using {@link #field-endDate} field value.\n             * @field {Number} count\n             */\n            { name : 'count', allowNull : true, convert : convertInteger },\n            /**\n             * Specifies days of the week on which the timespan should occur.\n             * An array of string values `SU`, `MO`, `TU`, `WE`, `TH`, `FR`, `SA`\n             * corresponding to Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, and Saturday days of the week.\n             * Each value can also be preceded by a positive (+n) or negative (-n) integer.\n             * If present, this indicates the nth occurrence of a specific day within the monthly or yearly recurrence.\n             *\n             * **Not applicable** for daily {@link #field-frequency}.\n             * @field {String[]} days\n             */\n            {\n                name    : 'days',\n                convert : convertStringOfItemsValue,\n                isEqual : isEqualAsString\n            },\n            /**\n             * Specifies days of the month on which the timespan should occur.\n             * An array of integer values (-31..-1 - +1..+31, negative values mean counting backwards from the month end).\n             * **Applicable only** for monthly {@link #field-frequency}.\n             * @field {Number[]} monthDays\n             */\n            {\n                name    : 'monthDays',\n                convert : convertStringOfIntegerItemsValue,\n                isEqual : isEqualAsString\n            },\n            /**\n             * Specifies months of the year on which the timespan should occur.\n             * An array of integer values (1 - 12).\n             * **Applicable only** for yearly {@link #field-frequency}.\n             * @field {Number[]} months\n             */\n            {\n                name    : 'months',\n                convert : convertStringOfIntegerItemsValue,\n                isEqual : isEqualAsString\n            },\n            /**\n             * The positions to include in the recurrence. The values operate on a set of recurrence instances **in one interval** of the recurrence rule.\n             * An array of integer values (valid values are 1 to 366 or -366 to -1, negative values mean counting backwards from the end of the built list of occurrences).\n             * **Not applicable** for daily {@link #field-frequency}.\n             * @field {Number} positions\n             */\n            {\n                name    : 'positions',\n                convert : convertStringOfIntegerItemsValue,\n                isEqual : isEqualAsString\n            }\n        ];\n    }\n    get dateFormat() {\n        return this._dateFormat || 'YYYYMMDDTHHmmss';\n    }\n    set dateFormat(format) {\n        this._dateFormat = format;\n    }\n    get recurrenceIterator() {\n        return recurrenceIterators[this.frequency];\n    }\n    /**\n     * The timespan this recurrence is associated with.\n     * @property {Scheduler.model.TimeSpan}\n     */\n    get timeSpan() {\n        return this._timeSpan;\n    }\n    set timeSpan(value) {\n        this._timeSpan = value;\n    }\n    /**\n     * The recurrence rule. A string in [RFC-5545](https://tools.ietf.org/html/rfc5545#section-3.3.10) described format\n     * (\"RRULE\" expression).\n     * @property {String}\n     */\n    get rule() {\n        const\n            me     = this,\n            result = [];\n        if (me.frequency) {\n            result.push(`FREQ=${me.frequency}`);\n            if (me.interval > 1) {\n                result.push(`INTERVAL=${me.interval}`);\n            }\n            if (me.days && me.days.length) {\n                result.push('BYDAY=' + me.days.join(','));\n            }\n            if (me.monthDays && me.monthDays.length) {\n                result.push('BYMONTHDAY=' + me.monthDays.join(','));\n            }\n            if (me.months && me.months.length) {\n                result.push('BYMONTH=' + me.months.join(','));\n            }\n            if (me.count) {\n                result.push(`COUNT=${me.count}`);\n            }\n            if (me.endDate) {\n                result.push('UNTIL=' + DateHelper.format(me.endDate, me.dateFormat));\n            }\n            if (me.positions && me.positions.length) {\n                result.push('BYSETPOS=' + me.positions.join(','));\n            }\n        }\n        return result.join(';');\n    }\n    set rule(rule) {\n        const\n            me     = this,\n            values = {\n                frequency : null,\n                interval  : null,\n                count     : null,\n                endDate   : null,\n                days      : null,\n                monthDays : null,\n                months    : null,\n                positions : null\n            };\n        me.beginBatch();\n        if (rule) {\n            const parts = rule.split(';');\n            for (let i = 0, len = parts.length; i < len; i++) {\n                const\n                    part = parts[i].split('='),\n                    value  = part[1];\n                switch (part[0]) {\n                    case 'FREQ':\n                        values.frequency = value;\n                        break;\n                    case 'INTERVAL':\n                        values.interval = value;\n                        break;\n                    case 'COUNT':\n                        values.count = value;\n                        values.until = null;\n                        break;\n                    case 'UNTIL':\n                        if (value) {\n                            values.endDate = DateHelper.parse(value, me.dateFormat);\n                        }\n                        else {\n                            values.endDate = null;\n                        }\n                        values.count = null;\n                        break;\n                    case 'BYDAY':\n                        values.days = value;\n                        break;\n                    case 'BYMONTHDAY':\n                        values.monthDays = value;\n                        break;\n                    case 'BYMONTH':\n                        values.months = value;\n                        break;\n                    case 'BYSETPOS':\n                        values.positions = value;\n                        break;\n                }\n            }\n        }\n        me.set(values);\n        if (rule) {\n            me.sanitize();\n        }\n        me.endBatch();\n    }\n    construct(data = {}) {\n        const\n            me                 = this,\n            { rule, timeSpan } = data;\n        me._suspendedTimeSpanNotifying = 0;\n        delete data.timeSpan;\n        delete data.rule;\n        super.construct(...arguments);\n        if (rule) {\n            me.suspendTimeSpanNotifying();\n            me.rule = rule;\n            me.resumeTimeSpanNotifying();\n        }\n        me.timeSpan = timeSpan;\n    }\n    /**\n     * Iterate occurrences for the owning timespan across the specified date range. This method can be called even\n     * if the timespan is not yet a member of a store, however, the occurrences returned will not be cached across\n     * subsequent calls to this method.\n     * @param {Date} startDate The start date of the iteration.\n     * @param {Date} endDate The end date of the iteration.\n     * @param {Function} fn The function to call for each occurrence.\n     * @param {Scheduler.model.TimeSpan} fn.occurrence The occurrence.\n     * @param {Boolean} fn.first A flag which is `true` for the first occurrence of this recurrence.\n     * @param {Number} fn.counter A counter of how many dates have been visited in this iteration.\n     * @param {Date} fn.date The occurrence date.\n     * @internal\n     */\n    forEachOccurrence(startDate, endDate, fn) {\n        if (this.timeSpan.startDate) {\n            this.recurrenceIterator.forEachDate({\n                recurrence : this,\n                startDate,\n                endDate,\n                fn(date, counter, first, timeSpan) {\n                    return fn(timeSpan.buildOccurrence(date, first), first, counter, date);\n                }\n            });\n        }\n    }\n    /**\n     * Cleans up fields that do not makes sense for the current {@link #field-frequency} value.\n     * @private\n     */\n    sanitize() {\n        const\n            me                = this,\n            timeSpanStartDate = me.timeSpan?.startDate,\n            values            = {};\n        me.isSanitizing = true;\n        switch (me.frequency) {\n            case 'DAILY' :\n                values.positions    = null;\n                values.days         = null;\n                values.monthDays    = null;\n                values.months       = null;\n                break;\n            case 'WEEKLY' : {\n                values.positions = null;\n                values.monthDays = null;\n                values.months = null;\n                const { days } = me;\n                if (timeSpanStartDate && days?.length === 1 && days[0] === RecurrenceDayRuleEncoder.encodeDay(timeSpanStartDate.getDay())) {\n                    values.days = null;\n                }\n                break;\n            }\n            case 'MONTHLY' : {\n                if (me.monthDays?.length) {\n                    values.positions = null;\n                    values.days = null;\n                }\n                values.months = null;\n                const { monthDays } = me;\n                if (timeSpanStartDate && monthDays?.length === 1 && monthDays[0] === timeSpanStartDate.getDate()) {\n                    values.monthDays = null;\n                }\n                break;\n            }\n            case 'YEARLY' : {\n                values.monthDays = null;\n                const { months } = me;\n                if (timeSpanStartDate && months?.length === 1 && months[0] === timeSpanStartDate.getMonth() + 1) {\n                    values.months = null;\n                }\n                break;\n            }\n        }\n        me.set(values);\n        me.isSanitizing = false;\n    }\n    copy(...args) {\n        const result = super.copy(...args);\n        result.dateFormat = this.dateFormat;\n        result.timeSpan   = this.timeSpan;\n        return result;\n    }\n    afterChange(toSet, wasSet, silent) {\n        const\n            result       = super.afterChange(toSet, wasSet, silent),\n            { timeSpan } = this;\n        if (!this.isSanitizing) {\n            // cleanup data to match the chosen frequency\n            this.sanitize();\n        }\n        if (timeSpan) {\n            timeSpan.sanitizeRecurrenceData(this);\n            if (!this.isTimeSpanNotifyingSuspended) {\n                timeSpan.onRecurrenceChanged();\n            }\n        }\n        return result;\n    }\n    set(field, value, ...args) {\n        const values = typeof field === 'object' ? field : { [field] : value };\n        // reset \"endDate\" field if \"count\" is being set\n        if (values.count) {\n            values.endDate = null;\n        }\n        // reset \"count\" field if \"endDate\" is being set\n        else if (values.endDate) {\n            values.count = null;\n        }\n        super.set(values, undefined, ...args);\n    }\n    get isTimeSpanNotifyingSuspended() {\n        return Boolean(this._suspendedTimeSpanNotifying);\n    }\n    suspendTimeSpanNotifying() {\n        this._suspendedTimeSpanNotifying++;\n    }\n    resumeTimeSpanNotifying() {\n        if (this._suspendedTimeSpanNotifying) this._suspendedTimeSpanNotifying--;\n    }\n}\nRecurrenceModel._$name = 'RecurrenceModel';", "import TimeSpan from '../TimeSpan.js';\nimport RecurrenceModel from '../RecurrenceModel.js';\nimport ArrayHelper from '../../../Core/helper/ArrayHelper.js';\nimport DateHelper from '../../../Core/helper/DateHelper.js';\nimport AbstractRecurrenceIterator from '../../data/util/recurrence/AbstractRecurrenceIterator.js';\nfunction convertExceptionDatesValue(value) {\n    const\n        result         = {},\n        { dateFormat } = this;\n    if (value) {\n        value = typeof value == 'string' ? value.split(',') : ArrayHelper.asArray(value);\n        value.forEach(item => {\n            if (typeof item == 'string') {\n                item = DateHelper.parse(item, dateFormat);\n            }\n            // If we've got a valid date out of the incoming item, add an exception key\n            if (!isNaN(item)) {\n                result[DateHelper.makeKey(item)] = 1;\n            }\n        });\n    }\n    return result;\n}\nfunction serializeExceptionDatesValue(value) {\n    const\n        result         = [],\n        { dateFormat } = this;\n    for (const date in value) {\n        if (value[date]) {\n            result.push(DateHelper.format(DateHelper.parseKey(date), dateFormat));\n        }\n    }\n    return result;\n}\nconst emptyArray = [];\n/**\n * @module Scheduler/model/mixin/RecurringTimeSpan\n */\n/**\n * This mixin class provides recurrence related fields and methods to a {@link Scheduler.model.TimeSpan timespan model}.\n *\n * The mixin introduces two types of timespans: __recurring timespan__ and its __occurrences__.\n * __Recurring timespan__ is a timespan having {@link #field-recurrenceRule recurrence rule} specified and its __occurrences__ are \"fake\" dynamically generated timespans.\n * Their set depends on the scheduler visible timespan and changes upon the timespan change.\n *\n * There are few methods allowing to distinguish a recurring event and an occurrence: {@link #property-isRecurring}, {@link #property-isOccurrence}\n * and {@link #property-recurringTimeSpan} (returns the event this record is an occurrence of).\n *\n * The {@link #field-recurrenceRule recurrence rule} defined for the event is parsed and\n * represented with {@link Scheduler.model.RecurrenceModel RecurrenceModel} class (can be changed by setting {@link #property-recurrenceModel} property) instance.\n * See: {@link #property-recurrence} property.\n * @mixin\n * @mixinbase TimeSpan\n */\nexport default Target => class RecurringTimeSpan extends (Target || TimeSpan) {\n    static get $name() {\n        return 'RecurringTimeSpan';\n    }\n    /**\n     * Returns `true` if this timespan supports recurring.\n     * @property {Boolean}\n     * @category Recurrence\n     */\n    get supportsRecurring() {\n        return true;\n    }\n    static get fields() {\n        return [\n            /**\n             * The timespan recurrence rule. A string in [RFC-5545](https://tools.ietf.org/html/rfc5545#section-3.3.10)\n             * described format (\"RRULE\" expression).\n             * @field {String} recurrenceRule\n             * @category Scheduling\n             */\n            {\n                name     : 'recurrenceRule',\n                internal : true\n            },\n            /**\n             * A string (either a single date or multiple dates separated by comma) or an array of strings containing\n             * the timespan exception dates. The dates that must be skipped when generating occurrences for a repeating\n             * timespan. This is used to modify only individual occurrences of the timespan so the further regenerations\n             * won't create another copy of this occurrence again.\n             *\n             * ```javascript\n             * {\n             *     id: 7,\n             *     startDate: '2021-10-12T14:00:00',\n             *     endDate: '2021-10-12T15:00:00',\n             *     name: 'Lunch',\n             *     resourceId: 'hotel',\n             *     recurrenceRule: 'FREQ=DAILY;COUNT=5',\n             *     exceptionDates: ['2021-10-14']\n             * }\n             * ```\n             *\n             * Use {@link #function-addExceptionDate} method to add an individual entry to the dates array:\n             *\n             * ```javascript\n             * // Break the link between the occurrence and its base.\n             * // This also adds the occurrence date as an exception date\n             * // so that the base timespan knows that this date should be skipped when regenerating its occurrences.\n             * occurrence.recurringTimeSpan = null;\n             *\n             * // now the occurrence is an individual record that can be changed & persisted freely\n             * occurrence.setStartEndDate(new Date(2018, 6, 2), new Date(2018, 6, 3));\n             * ```\n             * **Note:** The dates in this field get automatically removed when the event changes its {@link Scheduler.model.TimeSpan#field-startDate start date}.\n             *\n             * @field {String|String[]} exceptionDates\n             * @category Scheduling\n             */\n            {\n                name      : 'exceptionDates',\n                convert   : convertExceptionDatesValue,\n                serialize : serializeExceptionDatesValue,\n                internal  : true\n            }\n        ];\n    }\n    /**\n     * Override of {@link Core/data/Model}'s method. If an {@link #property-isOccurrence}\n     * is passed, it is detached from its parent recurring event. If it still has a recurrence\n     * then the recurring event is changed to stop at the occurrence date. If it has no recurrence\n     * an exception is added at the occurrence date.\n     * @category Recurrence\n     */\n    remove() {\n        if (this.isOccurrence) {\n            const\n                me = this,\n                { recurringTimeSpan } = me;\n            me.cancelBatch();\n            recurringTimeSpan.beginBatch();\n            me.detachFromRecurringEvent();\n            recurringTimeSpan.endBatch();\n        }\n        else {\n            return super.remove(...arguments);\n        }\n    }\n    get eventStore() {\n        let result = this.isOccurrence ? this.recurringEvent.eventStore : super.eventStore;\n        // Recurrence methods are called on `eventStore`, but in case we have a regular\n        // store with recurrence mixin, we won't event store and should return own\n        // store instead\n        if (!result && this.firstStore?.isRecurringTimeSpansMixin) {\n            result = this.firstStore;\n        }\n        return result;\n    }\n    /**\n     * Name of the class representing the recurrence model, defaults to {@link Scheduler.model.RecurrenceModel}\n     * @property {String}\n     * @category Recurrence\n     */\n    get recurrenceModel() {\n        return this._recurrenceModel || RecurrenceModel;\n    }\n    set recurrenceModel(model) {\n        this._recurrenceModel = model;\n    }\n    /**\n     * Sets a recurrence for the timespan with a given frequency, interval, and end.\n     * @param {RecurrenceModelConfig|String|Scheduler.model.RecurrenceModel} recurrence A data object for an instance of\n     * {@link Scheduler.model.RecurrenceModel}. May also be the frequency string: `DAILY`, `WEEKLY`, `MONTHLY`, or\n     * `YEARLY`.\n     *\n     * ```javascript\n     * // repeat the event every other week till Jan 2 2039\n     * event.setRecurrence({\n     *     frequency : \"WEEKLY\",\n     *     interval  : 2,\n     *     endDate   : new Date(2039, 0, 2)\n     * });\n     * ```\n     *\n     * Also a {@link Scheduler.model.RecurrenceModel recurrence model} can be provided as the only argument for this\n     * method:\n     *\n     * ```javascript\n     * const recurrence = new RecurrenceModel({ frequency : 'DAILY', interval : 5 });\n     *\n     * event.setRecurrence(recurrence);\n     * ```\n     *\n     * or\n     *\n     * ```javascript\n     * event.setRecurrence(\"WEEKLY\", 2, new Date(2039, 0, 2));\n     * ```\n     * @param {Number} [interval] The interval between occurrences (instances of this recurrence). For example, a daily\n     * recurrence with an interval of 2 occurs every other day. Must be greater than 0.\n     * @param {Number|Date} [recurrenceEnd] The end of the recurrence. The value can be specified by a date or by a\n     * maximum count of occurrences (has to greater than 1, since 1 means the event itself).\n     * @category Recurrence\n     */\n    setRecurrence(recurrence, interval, recurrenceEnd) {\n        const me = this;\n        let recurrenceRule;\n        if (recurrence) {\n            if (!recurrence.isRecurrenceModel) {\n                if (typeof recurrence === 'string') {\n                    recurrence = {\n                        frequency : recurrence\n                    };\n                    if (interval) {\n                        recurrence.interval = interval;\n                    }\n                    // If the recurrence is limited\n                    if (recurrenceEnd) {\n                        if (recurrenceEnd instanceof Date) {\n                            recurrence.endDate = recurrenceEnd;\n                        }\n                        else {\n                            recurrence.count = recurrenceEnd;\n                        }\n                    }\n                }\n                recurrence = new me.recurrenceModel(recurrence);\n            }\n            // The RecurrenceModel has a reference to its owning recurring event.\n            // It uses this to remove the owning event's exceptions after its new endDate\n            // whenever its endDate is changed.\n            recurrence.timeSpan = me;\n            recurrenceRule = recurrence.rule;\n        }\n        me.recurrence     = recurrence;\n        me.recurrenceRule = recurrenceRule;\n    }\n    /**\n     * The recurrence model used for the timespan.\n     * @property {Scheduler.model.RecurrenceModel}\n     * @category Recurrence\n     */\n    get recurrence() {\n        const\n            me = this,\n            rule = me.recurrenceRule;\n        if (!me._recurrence && rule) {\n            me._recurrence = new me.recurrenceModel({ rule, timeSpan : me, id : `${me.id}-recurrence` });\n        }\n        return me._recurrence;\n    }\n    set recurrence(recurrence) {\n        const me = this;\n        me._recurrence = recurrence;\n        if (recurrence) {\n            // bind recurrence instance to the model\n            recurrence.timeSpan = me;\n            me.recurrenceRule   = recurrence.rule;\n        }\n        else {\n            // If this is being done to an occurrence, it's a signal that we are being\n            // mutated into an exception. Apply the change immediately, directly to the data.\n            if (me.isOccurrence) {\n                me.setData('recurrenceRule', null);\n            }\n            else {\n                me.recurrenceRule = null;\n            }\n        }\n    }\n    /**\n     * Indicates if the timespan is recurring.\n     * @property {Boolean}\n     * @readonly\n     * @category Recurrence\n     */\n    get isRecurring() {\n        // MUST evaluate in this order so that if it is an occurrence,\n        // the recurrence getter does not refresh the rule\n        return Boolean(!this.isOccurrence && this.recurrence);\n    }\n    /**\n     * Indicates if the timespan is an occurrence of another recurring timespan.\n     * @property {Boolean}\n     * @readonly\n     * @category Recurrence\n     */\n    get isOccurrence() {\n        return Boolean(this.recurringTimeSpan);\n    }\n    /**\n     * The \"main\" timespan this model is an occurrence of. For non-occurrences returns `null`.\n     * @property {Scheduler.model.TimeSpan}\n     * @readonly\n     * @internal\n     * @category Recurrence\n     */\n    get recurringTimeSpan() {\n        return this._recurringTimeSpan;\n    }\n    get isPersistable() {\n        return super.isPersistable && (!this.supportsRecurring || !this.isOccurrence);\n    }\n    set recurringTimeSpan(recurringTimeSpan) {\n        this._recurringTimeSpan = recurringTimeSpan;\n    }\n    /**\n     * Returns the occurrences of this event over the specified time range. If the first\n     * occurrence is in the time range `*this*` record is included in that position.\n     * @param {Date} startDate The start date of the range for which to include occurrences.\n     * @param {Date} [endDate] The end date of the range for which to include occurrences.\n     * Defaults to the startDate.\n     * @returns {Scheduler.model.TimeSpan[]} The array of occurrences which occur over the specified range.\n     * @category Recurrence\n     */\n    getOccurrencesForDateRange(startDate, endDate = startDate) {\n        return this.eventStore.getOccurrencesForTimeSpan(this, startDate, endDate);\n    }\n    /**\n     * Array of this recurring timespan's cached occurrences. __Not including the owning recurring\n     * event__.\n     *\n     * Empty if the timespan is not recurring.\n     *\n     * __Note that this is an internal accessor and is cleared whenever changes are made to the\n     * owning recurring event__.\n     * @property {Scheduler.model.TimeSpan[]}\n     * @readonly\n     * @internal\n     * @category Recurrence\n     */\n    get occurrences() {\n        if (this.isRecurring) {\n            const result = [];\n            // The occurrencesMap contains entries for each occurrence date.\n            this.occurrenceMap.forEach(occurrence => {\n                if (occurrence !== this) {\n                    result.push(occurrence);\n                }\n            });\n            return result;\n        }\n        return emptyArray;\n    }\n    /**\n     * A Map, keyed by each date an occurrence intersects, of occurrences of this event.\n     * @property {Map}\n     * @readonly\n     * @internal\n     * @category Recurrence\n     */\n    get occurrenceMap() {\n        return this._occurrencesMap || (this._occurrencesMap = new Map());\n    }\n    /**\n     * Removes an occurrence from this recurring timespan's cached occurrences.\n     * @param dateOrTimeSpan occurrence date or occurrence TimeSpan\n     * @internal\n     * @category Recurrence\n     */\n    removeOccurrence(dateOrTimeSpan) {\n        const date = dateOrTimeSpan.isTimeSpan ? dateOrTimeSpan.occurrenceDate : dateOrTimeSpan;\n        // Clear the occurrences *is* we are in an EventStore.\n        this.eventStore?.globalOccurrences.delete(this.createRecurrenceKey(date));\n        // Remove occurrence from its by-startDate cache\n        this.occurrenceMap.delete(DateHelper.makeKey(date));\n    }\n    /**\n     * Removes all cached occurrences on or after the passed date from this recurring timespan's cached occurrences.\n     * @internal\n     * @category Recurrence\n     */\n    removeOccurrencesFrom(date) {\n        this.occurrenceMap.forEach((occurrence, dateKey) => {\n            if (DateHelper.parseKey(dateKey) >= date) {\n                this.removeOccurrence(occurrence);\n            }\n        });\n    }\n    /**\n     * Removes this recurring timespan's cached occurrences.\n     * @internal\n     * @category Recurrence\n     */\n    removeOccurrences() {\n        // This recurring event must also be removed from the occurrenceMap if it's there\n        // So insert it as the first element. Can also be found from the store's global occurrence\n        // Map using [...this.eventStore.globalOccurrences.keys()].filter(e => e.startsWith(`_generated:${this.id}`))\n        [this, ...this.occurrences].forEach(occurrence => this.removeOccurrence(occurrence));\n    }\n    /**\n     * The method is triggered when the timespan recurrence settings get changed.\n     * It updates the {@link #field-recurrenceRule} field in this case.\n     * @internal\n     * @category Recurrence\n     */\n    onRecurrenceChanged() {\n        this.recurrenceRule = this.recurrence?.rule || null;\n    }\n    sanitizeRecurrenceData(recurrence = this.recurrence) {\n        // Remove all exceptionsDates that our owning timeSpan had that are\n        // now after our end date and therefore redundant.\n        if (recurrence.endDate) {\n            const\n                endDate            = DateHelper.clearTime(recurrence.endDate),\n                { exceptionDates } = this;\n            // Clear any now-invalid cached occurrences\n            this.removeOccurrencesFrom(endDate);\n            // If we had any exceptions on or after this date, remove them.\n            if (exceptionDates) {\n                for (const dateKey in exceptionDates) {\n                    const exceptionDate = DateHelper.parseKey(dateKey);\n                    if (exceptionDate >= endDate) {\n                        delete exceptionDates[dateKey];\n                    }\n                }\n            }\n        }\n    }\n    /**\n     * The original {@lScheduler.model.TimeSpan#field-startDate startDate} of this event before any modifications\n     * took place. Used by {@link #function-removeOccurrence} and {@link #function-detachFromRecurringEvent}\n     * @internal\n     * @readonly\n     * @category Recurrence\n     */\n    get occurrenceDate() {\n        return this.meta.modified?.startDate || this.startDate;\n    }\n    /**\n     * If this event is an {@link #property-isOccurrence occurrence} of a recurring event, then this\n     * property yields its zero-based occurrence index in the sequence.\n     * @property {Number}\n     * @readonly\n     * @category Recurrence\n     */\n    get occurrenceIndex() {\n        return AbstractRecurrenceIterator.getOccurrenceIndex(this);\n    }\n    /**\n     * Builds an occurrence of this recurring event by cloning the timespan data.\n     * The method is used internally by the __RecurringTimeSpans__ mixin.\n     * Override it if you need to customize the generated occurrences.\n     *\n     * If the date requested is the start date of the event sequence, `this`\n     * record is returned. All runs of recurring events begin with the base record.\n     * @param  {Date} occurrenceDate The occurrence start date.\n     * @param  {Boolean} isFirst `true` if this is the first occurrence.\n     * @returns {Scheduler.model.TimeSpan} The occurrence.\n     * @internal\n     * @category Recurrence\n     */\n    buildOccurrence(occurrenceDate, isFirst) {\n        const\n            me                    = this,\n            {\n                occurrenceMap,\n                recurrence,\n                meta\n            }                     = me,\n            globalOccurrences     = me.eventStore?.globalOccurrences,\n            occurrenceKey         = DateHelper.makeKey(occurrenceDate),\n            id                    = me.createRecurrenceKey(occurrenceDate, occurrenceKey),\n            onStartDate           = !(occurrenceDate - me.startDate),\n            { fieldMap }          = me.constructor;\n        // An occurrence has a unique ID which identifies it by its base recurring event and its time.\n        let occurrence   = globalOccurrences?.get(id),\n            { duration } = me;\n        // If there's no duration, or it's an all day event (which makes the event ceil and floor its\n        // start and end dates, but does *NOT* as of 27/5/2020 adjust its duration) then\n        // we calculate the duration of the occurrence.\n        if (me.endDate && (me.allDay || !duration)) {\n            duration = DateHelper.as(me.durationUnit, me.endDate.getTime() - me.startDate.getTime());\n        }\n        // Don't let NaN in record data\n        const occurrenceEndDate = duration !== undefined ? DateHelper.add(occurrenceDate, duration, me.durationUnit) : undefined;\n        if (!occurrence) {\n            // If this is the first occurrence (start times may not match), or it's right on the start\n            // then this recurring event *IS* the occurrence\n            if (isFirst || onStartDate) {\n                occurrence = me;\n                // We are the first occurrence.\n                // But if our start time is not as the rule requires, adjust ourself *silently*\n                if (!onStartDate) {\n                    me.setStartEndDate(occurrenceDate, occurrenceEndDate, true);\n                    // Since we've changed the event start date the recurrence \"Days\"/\"MonthDays\"/\"Months\"\n                    // might get redundant in case the event start date matches the fields values\n                    // Calling recurrence sanitize() will clean the fields in this case.\n                    recurrence.suspendTimeSpanNotifying();\n                    recurrence.sanitize();\n                    recurrence.resumeTimeSpanNotifying();\n                }\n                // Either way, because of adjustment above, or initial correctness, we are in sync\n                // with our recurrence rule. A RecurrenceIterator is now able to calculate a correct\n                // UNTIL date from a COUNT value. See AbstractRecurrenceIterator#processIterationConfig\n                meta.isSyncedWithRule = true;\n            }\n            // Generate an occurrence which references this as its parent\n            else {\n                occurrence = me.copy(\n                    {\n                        [fieldMap.id.dataSource]        : id,\n                        [fieldMap.startDate.dataSource] : occurrenceDate,\n                        [fieldMap.endDate.dataSource]   : occurrenceEndDate,\n                        [fieldMap.duration.dataSource]  : duration,\n                        constraintDate                  : null,\n                        constraintType                  : null\n                    },\n                    { creatingOccurrence : true }\n                );\n                occurrence.recurringTimeSpan = me;\n            }\n            globalOccurrences?.set(id, occurrence);\n            // A recurring timespan keeps a by-startDate index of occurrences.\n            // And itself will be among those.\n            occurrenceMap.set(occurrenceKey, occurrence);\n        }\n        return occurrence;\n    }\n    createRecurrenceKey(date = this.startDate, dateKey = null) {\n        return `_generated:${this.id}:${dateKey || DateHelper.makeKey(date)}`;\n    }\n    // Converts this occurrence to a new \"master\" event\n    convertToRealEvent(wasSet, silent) {\n        if (!this.isOccurrence) {\n            return;\n        }\n        const\n            me = this,\n            {\n                recurringTimeSpan,\n                resource,\n                occurrenceIndex,\n                recurrence\n            }               = me,\n            count           = recurrence && recurringTimeSpan.recurrence.count,\n            // resourceRecords is a temporary property of occurrence events to handle cases\n            // if only resources has been updated. (change only resources won't mark record as dirty)\n            newResource     = wasSet?.resourceRecords?.value || me.data.newResource;\n        recurringTimeSpan.beginBatch();\n        me.detachFromRecurringEvent();\n        me.clearChanges();\n        // Must silently set our own ID, not be the key generated from our parent id and occurrence date.\n        // Must not result in the id field being in the modified state.\n        me.setData('id', me.generateId(recurringTimeSpan.eventStore));\n        if (newResource) {\n            // clear resourceId to avoid auto-adding to assignmentStore, it is handled manually bellow\n            delete me.data.resourceId;\n        }\n        // The impending changes to the former parent recurring event trigger a full refresh.\n        recurringTimeSpan.eventStore.add(me, silent);\n        // Ensure that the original count is honoured.\n        // If we are the 8th occurrence of 10, OUR repeat count must be 3.\n        if (count) {\n            me.recurrence.count = count - occurrenceIndex;\n        }\n        if (newResource || resource) {\n            me.assign(newResource || resource);\n        }\n        // remove data after apply\n        if (newResource) {\n            delete me.data.resourceRecords;\n        }\n        if (wasSet) {\n            delete wasSet.resourceRecords;\n        }\n        // Any change to a recurring events triggers a store refresh event.\n        recurringTimeSpan.endBatch();\n    }\n    afterChange(toSet, wasSet, silent, ...args) {\n        const\n            me             = this,\n            { eventStore } = me;\n        // reset cached recurrence instance in case \"recurrenceRule\" is changed\n        if ('recurrenceRule' in wasSet) {\n            me._recurrence = null;\n            // If we are a recurring event, we must be in the recurringEvents cache.\n            // If we are *not* a recurring event, we must *not* be in there.\n            // An event not yet in a store (eg dragging to create) won't have an eventStore.\n            eventStore?.recurringEvents[wasSet.recurrenceRule.value ? 'add' : 'delete'](me);\n        }\n        // Any change to an occurrence adds it to an event store, at which point\n        // it ceases to be an occurrence.\n        //\n        // If it has a recurrenceRule it becomes the start of a new recurring event series,\n        // and the old owning recurring event stops on the day before.\n        //\n        // If it has no recurrenceRule, it becomes an exception to its owning recurring event.\n        if (me.isOccurrence) {\n            me.convertToRealEvent(wasSet, silent);\n        }\n        // Setting a newException date must mark the exceptionDates as modified\n        else if ('newExceptionDate' in wasSet) {\n            me.meta.modified.exceptionDates = true;\n            delete me.meta.modified.newExceptionDate;\n            // Remove any occurrence on that date from our by-startDate cache\n            // and from the global occurrences cache\n            me.removeOccurrence(wasSet.newExceptionDate.value);\n        }\n        return super.afterChange(toSet, wasSet, silent, ...args);\n    }\n    /**\n     * Detaches an occurrence from its owning recurring event so that it can be added to the eventStore\n     * either as an exception, or as the start of a new recurring sequence.\n     * @internal\n     * @category Recurrence\n     */\n    detachFromRecurringEvent() {\n        const\n            me                                    = this,\n            // For access further down, breaking the link involves engine if trying to get the occurrenceDate later,\n            // resulting in the wrong date\n            { recurringTimeSpan, occurrenceDate, startDate } = me;\n        // Break the link\n        me.recurringTimeSpan = null;\n        // The occurrenceDate is injected into the data when an occurrence is created.\n        // the recurringTimeSpan's afterChange will remove any cache occurrence\n        // for this date; see above\n        recurringTimeSpan.addExceptionDate(occurrenceDate);\n        // If we still have a recurrenceRule, we're being promoted to be a new recurring event.\n        // The recurrence setter applies the rule immediately to occurrences, so this will\n        // always be correct.\n        if (me.recurrenceRule) {\n            // The RecurrenceModel removes occurrences and exceptions after this date\n            recurringTimeSpan.recurrence.endDate = DateHelper.add(startDate, -1, 'minute');\n        }\n    }\n    /**\n     * The setter used by Model#inSet when {@link #function-addExceptionDate} is called.\n     * Adding an exception must trigger change processing in a recurring event, so it must\n     * be changed through a {@link Core.data.Model#function-set} call. Also, the change must be batchable\n     * with other changes.\n     * @private\n     * @readonly\n     * @category Recurrence\n     */\n    set newExceptionDate(date) {\n        if (date) {\n            const exceptionDates = this.exceptionDates || (this.exceptionDates = {});\n            exceptionDates[DateHelper.makeKey(date)] = 1;\n        }\n    }\n    /**\n     * Adds an exception date that should be skipped when generating occurrences for the timespan.\n     * The methods adds an entry to the array kept in {@link #field-exceptionDates} field.\n     * @param {Date} date Exception date.\n     * @internal\n     * @category Recurrence\n     */\n    addExceptionDate(newExceptionDate) {\n        return this.set({\n            newExceptionDate\n        });\n    }\n    /**\n     * Does this recurring event have an exception on the passed date.\n     * @param {Date} date The date to find an exception for.\n     * @returns {Boolean} `true` if the event has an exception starting on the passed date.\n     * @category Recurrence\n     */\n    hasException(date) {\n        return this.exceptionDates?.[DateHelper.makeKey(date)];\n    }\n};\n", "import TimeSpan from './TimeSpan.js';\nimport RecurringTimeSpan from './mixin/RecurringTimeSpan.js';\n/**\n * @module Scheduler/model/ResourceTimeRangeModel\n */\n/**\n * This class represent a single resource time range in your schedule.\n * To style the rendered elements, use {@link Scheduler.model.TimeSpan#field-cls} or {@link #field-timeRangeColor} field.\n * The class is used by the {@link Scheduler.feature.ResourceTimeRanges} feature.\n *\n * ## Recurring ranges support\n *\n * You can also make ranges recurring by adding a `recurrenceRule` to the range data.\n *\n * ```javascript\n *\n * // Make new store that supports time ranges recurrence\n * const store = new ResourceTimeRangeStore({\n *     data : [{        {\n *         id             : 1,\n *         resourceId     : 'r1',\n *         startDate      : '2019-01-01T11:00',\n *         endDate        : '2019-01-01T13:00',\n *         name           : 'Coffee break',\n *         // this time range should repeat every day\n *         recurrenceRule : 'FREQ=DAILY'\n *     }]\n * });\n * ```\n *\n * @extends Scheduler/model/TimeSpan\n */\nexport default class ResourceTimeRangeModel extends TimeSpan.mixin(RecurringTimeSpan) {\n    static $name = 'ResourceTimeRangeModel';\n    //region Fields\n    static fields = [\n        /**\n         * Id of the resource this time range is associated with\n         * @field {String|Number} resourceId\n         */\n        'resourceId',\n        /**\n         * Controls this time ranges primary color, defaults to using current themes default time range color.\n         * @field {String} timeRangeColor\n         */\n        'timeRangeColor'\n    ];\n    static relations = {\n        /**\n         * The associated resource, retrieved using a relation to a ResourceStore determined by the value assigned\n         * to `resourceId`. The relation also lets you access all time ranges on a resource through\n         * `ResourceModel#timeRanges`.\n         * @member {Scheduler.model.ResourceModel} resource\n         */\n        resource : {\n            foreignKey            : 'resourceId',\n            foreignStore          : 'resourceStore',\n            relatedCollectionName : 'timeRanges',\n            nullFieldOnRemove     : true\n        }\n    };\n    static domIdPrefix = 'resourcetimerange';\n    get domId() {\n        return `${this.constructor.domIdPrefix}-${this.id}`;\n    }\n    //endregion\n    // Used internally to differentiate between Event and ResourceTimeRange\n    get isResourceTimeRange() {\n        return true;\n    }\n    // To match EventModel API\n    get resources() {\n        return this.resource ? [this.resource] : [];\n    }\n    // To match EventModel API\n    get $linkedResources() {\n        return this.resources;\n    }\n}\nResourceTimeRangeModel._$name = 'ResourceTimeRangeModel';", "import Base from '../../../Core/Base.js';\nimport ArrayHelper from '../../../Core/helper/ArrayHelper.js';\n/**\n * @module Scheduler/data/mixin/RecurringTimeSpansMixin\n */\nconst\n    emptyArray = Object.freeze([]);\n/**\n * This mixin provides recurrence functionality to a store containing {@link Scheduler.model.TimeSpan TimeSpan} models.\n * Normally you don't need to interact with this mixin directly.\n * @mixin\n */\nexport default Target => class RecurringTimeSpansMixin extends (Target || Base) {\n    static get $name() {\n        return 'RecurringTimeSpansMixin';\n    }\n    construct(...args) {\n        const me = this;\n        // We store all generated occurrences keyed by `_generated_${recurringTimeSpan.id}:${occurrenceStartDate}`\n        // So that when asked to generate an occurrence for a date, an already generated one can be returned.\n        me.globalOccurrences = new Map();\n        // All recurring events added to the store are accessible through this Set. It's used\n        // to generate occurrences.\n        me.recurringEvents = new Set();\n        super.construct(...args);\n    }\n    // Override to refreshRecurringEventsCache on initial load\n    afterLoadData() {\n        // All cached occurrences are now potentially invalid.\n        // A store reload might imply any number of changes which invalidate any occurrence.\n        this.globalOccurrences.clear();\n        // Clear and rebuild the recurring events cache\n        this.refreshRecurringEventsCache('clear');\n        this.refreshRecurringEventsCache('splice', this.storage.allValues);\n        super.afterLoadData && super.afterLoadData();\n    }\n    /**\n     * Responds to mutations of the underlying storage Collection.\n     *\n     * Maintain indices for fast finding of events by date.\n     * @param {Object} event\n     * @private\n     */\n    onDataChange({ action, added, removed, replaced }) {\n        // Recurring events cache must be refreshed before responding to change\n        this.refreshRecurringEventsCache(action, added, removed, replaced);\n        super.onDataChange(...arguments);\n    }\n    refreshRecurringEventsCache(action, added = emptyArray, removed = emptyArray, replaced) {\n        const\n            me                  = this,\n            { recurringEvents } = me,\n            replacedCount       = replaced?.length;\n        switch (action) {\n            case 'clear':\n                recurringEvents.clear();\n                break;\n            // Add and remove\n            case 'splice': {\n                // Handle replacement of records by instances with same ID\n                if (replacedCount) {\n                    added = added.slice();\n                    removed = removed.slice();\n                    for (let i = 0; i < replacedCount; i++) {\n                        removed.push(replaced[i][0]);\n                        added.push(replaced[i][1]);\n                    }\n                }\n                const\n                    addedCount   = added.length,\n                    removedCount = removed.length;\n                // Track the recurring events we contain\n                if (removedCount && recurringEvents.size) {\n                    for (let i = 0; i < removedCount; i++) {\n                        // If it's being removed, remove it from the recurring events cache.\n                        // If it's not a recurring event, it doesn't matter, it won't be in there.\n                        recurringEvents.delete(removed[i]);\n                    }\n                }\n                // Track the recurring events we contain\n                if (addedCount) {\n                    for (let i = 0; i < addedCount; i++) {\n                        const newEvent = added[i];\n                        // Allow easy access to recurring events\n                        if (newEvent.isRecurring) {\n                            recurringEvents.add(newEvent);\n                        }\n                    }\n                }\n                break;\n            }\n        }\n    }\n    getById(id) {\n        let result = super.getById(id);\n        // If the id is not found in the Store, then it could be one of our generated occurrences\n        if (!result) {\n            result = this.globalOccurrences.get(this.modelClass.asId(id));\n        }\n        return result;\n    }\n    onModelChange(record, toSet, wasSet, silent, fromRelationUpdate) {\n        const isRecurrenceRelatedFieldChange = !silent && this.isRecurrenceRelatedFieldChange(record, wasSet);\n        // If this is the base of a recurring sequence, then any reactors to events from\n        // the super call must regenerate occurrences, so must be done at top.\n        // If silent is true, occurrences won't be recalculated. Do not remove occurrences from cache in such case.\n        if (isRecurrenceRelatedFieldChange) {\n            record.removeOccurrences();\n        }\n        super.onModelChange(...arguments);\n        // If this is the base of a recurring sequence, then the EventStore must\n        // trigger a refresh event so that UIs refresh themselves.\n        // This could be at the tail end of the creation of an exception\n        // or a new recurring base.\n        if (isRecurrenceRelatedFieldChange) {\n            const event = { action : 'batch', records : this.storage.values };\n            this.trigger('refresh', event);\n            this.trigger('change', event);\n        }\n    }\n    /**\n     * The method restricts which field modifications should trigger timespan occurrences building.\n     * By default, any field change of a recurring timespan causes the rebuilding.\n     * @param  {Scheduler.model.TimeSpan} timeSpan The modified timespan.\n     * @param  {Object} wasSet Object containing the change set.\n     * @returns {Boolean} `True` if the fields modification should trigger the timespan occurrences rebuilding.\n     * @internal\n     * @category Recurrence\n     */\n    isRecurrenceRelatedFieldChange(timeSpan, wasSet) {\n        return timeSpan.isRecurring || 'recurrenceRule' in wasSet;\n    }\n    /**\n     * Builds occurrences for the provided timespan across the provided date range.\n     * @private\n     * @category Recurrence\n     */\n    getOccurrencesForTimeSpan(timeSpan, startDate, endDate) {\n        const result = [];\n        if (timeSpan.isRecurring) {\n            timeSpan.recurrence.forEachOccurrence(startDate, endDate, r => result.push(r));\n        }\n        return result;\n    }\n    set data(data) {\n        // All cached occurrences are now invalid with a new dataset\n        this.globalOccurrences.clear();\n        super.data = data;\n    }\n    /**\n     * Returns all the recurring timespans.\n     * @returns {Scheduler.model.TimeSpan[]} Array of recurring events.\n     * @category Recurrence\n     */\n    getRecurringTimeSpans() {\n        return [...this.recurringEvents];\n    }\n};\n", "import AjaxStore from '../../Core/data/AjaxStore.js';\nimport ResourceTimeRangeModel from '../model/ResourceTimeRangeModel.js';\nimport RecurringTimeSpansMixin from './mixin/RecurringTimeSpansMixin.js';\n/**\n * @module Scheduler/data/ResourceTimeRangeStore\n */\n/**\n * A class representing a collection of resource time ranges.\n * Contains a collection of {@link Scheduler.model.ResourceTimeRangeModel ResourceTimeRangeModel} records.\n * The class is used by the {@link Scheduler.feature.ResourceTimeRanges ResourceTimeRanges} feature.\n *\n * ## Recurring ranges support\n *\n * By default, the class doesn't support recurrence. In order to add its support\n * please use {@link Scheduler.data.mixin.RecurringTimeSpansMixin RecurringTimeSpansMixin} mixin\n * (the store model in turn should be mixed with {@link Scheduler/model/mixin/RecurringTimeSpan RecurringTimeSpan} class):\n *\n * ```js\n * // Mix RecurringTimeSpan (which adds recurrence support) to ResourceTimeRangeModel\n * class MyResourceTimeRange extends RecurringTimeSpan(ResourceTimeRangeModel) {};\n *\n * // Mix RecurringTimeSpansMixin (which adds recurrence support) to ResourceTimeRangeStore\n * class MyResourceTimeRangeStore extends RecurringTimeSpansMixin(ResourceTimeRangeStore) {\n *     static get defaultConfig() {\n *         return {\n *             // use our new MyResourceTimeRange model\n *             modelClass : MyResourceTimeRange\n *         };\n *     }\n * };\n *\n * // Make new store that supports time ranges recurrence\n * const store = new MyResourceTimeRangeStore({\n *     data : [{        {\n *         id             : 1,\n *         resourceId     : 'r1',\n *         startDate      : '2019-01-01T11:00',\n *         endDate        : '2019-01-01T13:00',\n *         name           : 'Coffee break',\n *         // this time range should repeat every day\n *         recurrenceRule : 'FREQ=DAILY'\n *     }]\n * });\n * ```\n *\n * @extends Core/data/AjaxStore\n */\nexport default class ResourceTimeRangeStore extends AjaxStore.mixin(RecurringTimeSpansMixin) {\n    static $name = 'ResourceTimeRangeStore';\n    static get defaultConfig() {\n        return {\n            /**\n             * CrudManager must load stores in the correct order. Lowest first.\n             * @private\n             */\n            loadPriority : 500,\n            /**\n             * CrudManager must sync stores in the correct order. Lowest first.\n             * @private\n             */\n            syncPriority : 500,\n            /**\n             * This store should be linked to a ResourceStore to link the time ranges to resources\n             * @config {Scheduler.data.ResourceStore}\n             */\n            resourceStore : null,\n            modelClass : ResourceTimeRangeModel,\n            storeId    : 'resourceTimeRanges'\n        };\n    }\n    set resourceStore(store) {\n        this._resourceStore = store;\n        // If store is assigned after configuration we need to init relations\n        if (!this.isConfiguring) {\n            this.initRelations(true);\n        }\n    }\n    get resourceStore() {\n        return this._resourceStore;\n    }\n    // Matching signature in EventStore to allow reusage of SchedulerStores#onInternalEventStoreChange()\n    getResourcesForEvent(resourceTimeRange) {\n        return [resourceTimeRange.resource];\n    }\n    /**\n     * Get resource time ranges intersecting the specified date range for a resource.\n     *\n     * The result is sorted by `startDate`.\n     *\n     * @param {Object} options Options\n     * @param {Scheduler.model.ResourceModel} options.resourceRecord Resource record\n     * @param {Date} options.startDate Start date of the range\n     * @param {Date} options.endDate End date of the range\n     * @returns {Scheduler.model.ResourceTimeRangeModel[]}\n     */\n    getRanges({ resourceRecord, startDate, endDate }) {\n        const rangesInDateRange = resourceRecord.timeRanges.flatMap(range => {\n            if (range.supportsRecurring) {\n                return range.getOccurrencesForDateRange(startDate, endDate);\n            }\n            if (range.intersectsRange(startDate, endDate)) {\n                return range;\n            }\n            return [];\n        });\n        return rangesInDateRange.sort((span1, span2) => span1.startDate - span2.startDate);\n    }\n}\nResourceTimeRangeStore._$name = 'ResourceTimeRangeStore';", "import Base from '../../../Core/Base.js';\n/**\n * @module Scheduler/data/mixin/PartOfProject\n */\n/**\n * This is a mixin, included in all models and stores of the Scheduler project. It provides a common API for accessing\n * all stores of the project.\n *\n * @mixin\n */\nexport default Target => class PartOfProject extends (Target || Base) {\n    /**\n     * Returns the project this entity belongs to.\n     *\n     * @member {Scheduler.model.ProjectModel} project\n     * @readonly\n     * @category Project\n     */\n    /**\n     * Returns the event store of the project this entity belongs to.\n     *\n     * @member {Scheduler.data.EventStore} eventStore\n     * @readonly\n     * @category Project\n     */\n    /**\n     * Returns the dependency store of the project this entity belongs to.\n     *\n     * @member {Scheduler.data.DependencyStore} dependencyStore\n     * @readonly\n     * @category Project\n     */\n    /**\n     * Returns the assignment store of the project this entity belongs to.\n     *\n     * @member {Scheduler.data.AssignmentStore} assignmentStore\n     * @readonly\n     * @category Project\n     */\n    /**\n     * Returns the resource store of the project this entity belongs to.\n     *\n     * @member {Scheduler.data.ResourceStore} resourceStore\n     * @readonly\n     * @category Project\n     */\n    static get $name() {\n        return 'PartOfProject';\n    }\n};\n", "/**\n * @module Scheduler/model/mixin/AssignmentModelMixin\n */\n/**\n * Mixin that holds configuration shared between assignments in Scheduler and Scheduler Pro.\n * @mixin\n */\nexport default Target => class AssignmentModelMixin extends Target {\n    static get $name() {\n        return 'AssignmentModelMixin';\n    }\n    /**\n     * Set value for the specified field(s), triggering engine calculations immediately. See\n     * {@link Core.data.Model#function-set Model#set()} for arguments.\n     *\n     * ```javascript\n     * assignment.set('resourceId', 2);\n     * // assignment.resource is not yet resolved\n     *\n     * await assignment.setAsync('resourceId', 2);\n     * // assignment.resource is resolved\n     * ```\n     *\n     * @param {String|Object} field The field to set value for, or an object with multiple values to set in one call\n     * @param {*} value Value to set\n     * @param {Boolean} [silent=false] Set to true to not trigger events\n     * automatically.\n     * @function setAsync\n     * @category Editing\n     * @async\n     */\n    //region Fields\n    static get fields() {\n        return [\n            /**\n             * Id for the resource to assign to\n             * @field {String|Number} resourceId\n             * @category Common\n             */\n            'resourceId',\n            /**\n             * Id for the event to assign\n             * @field {String|Number} eventId\n             * @category Common\n             */\n            'eventId',\n            /**\n             * Specify `false` to opt out of drawing dependencies from/to this assignment\n             * @field {Boolean} drawDependencies\n             * @category Common\n             */\n            { name : 'drawDependencies', type : 'boolean' },\n            'event',\n            'resource'\n        ];\n    }\n    //endregion\n    construct(data, ...args) {\n        data = data || {};\n        const\n            { fieldMap }    = this,\n            eventIdField    = fieldMap.eventId.dataSource,\n            resourceIdField = fieldMap.resourceId.dataSource,\n            eventField      = fieldMap.event.dataSource,\n            resourceField   = fieldMap.resource.dataSource,\n            eventId         = data[eventIdField],\n            resourceId      = data[resourceIdField],\n            event           = data[eventField],\n            resource        = data[resourceField];\n        // Engine expects event and resource, not eventId and resourceId. We need to support both\n        if (eventId != null) {\n            data[eventField] = eventId;\n        }\n        else if (event != null) {\n            data[eventIdField] = event.isModel ? event.id : event;\n        }\n        if (resourceId != null) {\n            data[resourceField] = resourceId;\n        }\n        else if (resource != null) {\n            data[resourceIdField] = resource.isModel ? resource.id : resource;\n        }\n        super.construct(data, ...args);\n    }\n    //region Event & resource\n    /**\n     * A key made up from the event id and the id of the resource assigned to.\n     * @property eventResourceKey\n     * @readonly\n     * @internal\n     */\n    get eventResourceKey() {\n        return this.buildEventResourceKey(this.event, this.resource);\n    }\n    buildEventResourceKey(event, resource) {\n        let eventKey, resourceKey;\n        if (event) {\n            eventKey = event.isModel ? event.id : event;\n        }\n        else {\n            eventKey = this.internalId;\n        }\n        if (resource) {\n            resourceKey = resource.isModel ? resource.id : resource;\n        }\n        else {\n            resourceKey = this.internalId;\n        }\n        return `${eventKey}-${resourceKey}`;\n    }\n    buildIndexKey({ event, resource }) {\n        return this.buildEventResourceKey(event, resource);\n    }\n    set(field, value, ...args) {\n        const toSet = this.fieldToKeys(field, value);\n        // If resource was set, store its id as resourceId and announce it\n        if ('resource' in toSet) {\n            if (toSet.resource?.id !== undefined) {\n                toSet.resourceId = toSet.resource.id;\n            }\n        }\n        // If resourceId was set, we need to replace resource to have it re-referenced in engine\n        else if ('resourceId' in toSet && this.constructor.isProAssignmentModel) {\n            toSet.resource = toSet.resourceId;\n        }\n        // Same for event\n        if ('event' in toSet) {\n            if (toSet.event?.id !== undefined) {\n                toSet.eventId = toSet.event.id;\n            }\n        }\n        else if ('eventId' in toSet && this.constructor.isProAssignmentModel) {\n            toSet.event = toSet.eventId;\n        }\n        return super.set(toSet, null, ...args);\n    }\n    afterChange(toSet, wasSet, silent, fromRelationUpdate, skipAccessors) {\n        const me = this;\n        // Make sure Core Engine implementation notices \"resourceId\" change\n        // and updates \"resource\" field value respectively\n        if (!me.constructor.isProAssignmentModel && wasSet?.resourceId &&\n            me.resource?.id !== wasSet.resourceId.value) {\n            me.resource = wasSet.resourceId.value;\n        }\n        // If that's non-Core Engine and we have \"eventId\" indicated as just set\n        // and there was also \"event\" passed to set but it was not set\n        // and if that happens when propagating after sync-response applied\n        // - this means an event has changed its identifier\n        // (this fixes 11_backend.t.js in the Gantt)\n        else if (me.constructor.isProAssignmentModel && me.project?.propagatingSyncChanges &&\n            wasSet?.eventId && !wasSet?.event &&\n            (toSet.event.value === wasSet.eventId.value || toSet.event.value.id === wasSet.eventId.value)\n        ) {\n            // sanitize both wasSet and meta.modified\n            delete wasSet.eventId;\n            delete me.meta.modified.eventId;\n        }\n        return super.afterChange(...arguments);\n    }\n    // Settings resourceId relays to `resource`. Underlying data will be updated in `afterChange()` above\n    set resourceId(value) {\n        const { resource } = this;\n        // When assigning a new id to a resource, it will update the resourceId of the assignment. But the assignments\n        // resource is still the same so we need to announce here\n        if (resource?.isModel && resource.id === value) {\n            this.set('resourceId', value);\n        }\n        else {\n            this.resource = value;\n        }\n    }\n    get resourceId() {\n        // If assigned using `resource` and not `resourceId` there will be no resourceId\n        return this.resource?.id ?? this.get('resourceId');\n    }\n    // Same for event as for resourceId\n    set eventId(value) {\n        const { event } = this;\n        // When assigning a new id to an event, it will update the eventId of the assignment. But the assignments\n        // event is still the same so we need to announce here\n        if (event?.isModel && event.id === value) {\n            this.set('eventId', value);\n        }\n        else {\n            this.event = value;\n        }\n    }\n    get eventId() {\n        // If assigned using `event` and not `eventId` there will be no eventId\n        return this.event?.id ?? this.get('eventId');\n    }\n    /**\n     * Convenience property to get the name of the associated event.\n     * @property {String}\n     * @readonly\n     */\n    get eventName() {\n        return this.event?.name;\n    }\n    /**\n     * Convenience property to get the name of the associated resource.\n     * @property {String}\n     * @readonly\n     */\n    get resourceName() {\n        return this.resource?.name;\n    }\n    /**\n     * Returns the resource associated with this assignment.\n     *\n     * @returns {Scheduler.model.ResourceModel} Instance of resource\n     */\n    getResource() {\n        return this.resource;\n    }\n    //endregion\n    // Convenience getter to not have to check `instanceof AssignmentModel`\n    get isAssignment() {\n        return true;\n    }\n    /**\n     * Returns true if the Assignment can be persisted (e.g. task and resource are not 'phantoms')\n     *\n     * @property {Boolean}\n     */\n    get isPersistable() {\n        const\n            {\n                event,\n                resource,\n                unjoinedStores,\n                assignmentStore\n            }           = this,\n            crudManager = assignmentStore?.crudManager;\n        let result;\n        if (assignmentStore) {\n            // If the owning event is not persistable, this assignment is also not persistable.\n            // if crud manager is used it can deal with phantom event/resource since it persists all records in one batch\n            // if no crud manager used we have to wait till event/resource are persisted\n            result = this.isValid && event.isPersistable && (crudManager || !event.hasGeneratedId && !resource.hasGeneratedId);\n        }\n        // if we remove the record\n        else {\n            result = !this.isPhantom && Boolean(unjoinedStores[0]);\n        }\n        // Records not yet fully created cannot be persisted\n        return result && super.isPersistable && !this.event?.isCreating;\n    }\n    get isValid() {\n        return this.resource != null && this.event != null;\n    }\n    /**\n     * Returns a textual representation of this assignment (e.g. Mike 50%).\n     * @returns {String}\n     */\n    toString() {\n        if (this.resourceName) {\n            return `${this.resourceName} ${Math.round(this.units)}%`;\n        }\n        return '';\n    }\n    //region STM hooks\n    shouldRecordFieldChange(fieldName, oldValue, newValue) {\n        if (!super.shouldRecordFieldChange(fieldName, oldValue, newValue)) {\n            return false;\n        }\n        if (fieldName === 'event' || fieldName === 'eventId') {\n            const eventStore = this.project?.eventStore;\n            if (eventStore && eventStore.oldIdMap[oldValue] === eventStore.getById(newValue)) {\n                return false;\n            }\n        }\n        if (fieldName === 'resource' || fieldName === 'resourceId') {\n            const resourceStore = this.project?.resourceStore;\n            if (resourceStore && resourceStore.oldIdMap[oldValue] === resourceStore.getById(newValue)) {\n                return false;\n            }\n        }\n        return true;\n    }\n    //endregion\n};\n", "import Model from '../../Core/data/Model.js';\nimport PartOfProject from '../data/mixin/PartOfProject.js';\nimport AssignmentModelMixin from './mixin/AssignmentModelMixin.js';\nimport { CoreAssignmentMixin } from '../../Engine/quark/model/scheduler_core/CoreAssignmentMixin.js';\nconst EngineMixin = CoreAssignmentMixin;\n/**\n * @module Scheduler/model/AssignmentModel\n */\n/**\n * This model represents a single assignment of a resource to an event in the scheduler, usually added to a\n * {@link Scheduler.data.AssignmentStore}.\n *\n * It is a subclass of the {@link Core.data.Model} class. Please refer to the documentation for that class to become\n * familiar with the base interface of this class.\n *\n * ## Fields and references\n *\n * An Assignment has the following fields:\n * - `id` - The id of the assignment\n * - `resourceId` - The id of the resource assigned (optionally replaced with `resource` for load)\n * - `eventId` - The id of the event to which the resource is assigned (optionally replaced with `event` for load)\n *\n * The data source for these fields can be customized by subclassing this class:\n *\n * ```javascript\n * class MyAssignment extends AssignmentModel {\n *   static get fields() {\n *       return [\n *          { name : 'resourceId', dataSource : 'linkedResource' }\n *       ];\n *   }\n * }\n * ```\n *\n * After load and project normalization, these references are accessible (assuming their respective stores are loaded):\n * - `event` - The linked event record\n * - `resource` - The linked resource record\n *\n * ## Async resolving of references\n *\n * As described above, an assignment links an event to a resource. It holds references to an event record and a resource\n * record. These references are populated async, using the calculation engine of the project that the assignment via\n * its store is a part of. Because of this asyncness, references cannot be used immediately after modifications:\n *\n * ```javascript\n * assignment.resourceId = 2;\n * // assignment.resource is not yet available\n * ```\n *\n * To make sure references are updated, wait for calculations to finish:\n *\n * ```javascript\n * assignment.resourceId = 2;\n * await assignment.project.commitAsync();\n * // assignment.resource is available\n * ```\n *\n * As an alternative, you can also use `setAsync()` to trigger calculations directly after the change:\n *\n * ```javascript\n * await assignment.setAsync({ resourceId : 2});\n * // assignment.resource is available\n * ```\n *\n * @extends Core/data/Model\n * @mixes Scheduler/model/mixin/AssignmentModelMixin\n * @uninherit Core/data/mixin/TreeNode\n */\nexport default class AssignmentModel extends AssignmentModelMixin(PartOfProject(EngineMixin.derive(Model))) {\n    // NOTE: Leave field defs at top to be picked up by jsdoc\n    /**\n     * Id for event to assign. Can be used as an alternative to `eventId`, but please note that after\n     * load it will be populated with the actual event and not its id. This field is not persistable.\n     * @field {Scheduler.model.EventModel} event\n     * @accepts {String|Number|Scheduler.model.EventModel}\n     * @category Common\n     */\n    /**\n     * Id for resource to assign to. Can be used as an alternative to `resourceId`, but please note that after\n     * load it will be populated with the actual resource and not its id. This field is not persistable.\n     * @field {Scheduler.model.ResourceModel} resource\n     * @accepts {String|Number|Scheduler.model.ResourceModel}\n     * @category Common\n     */\n    static get $name() {\n        return 'AssignmentModel';\n    }\n}\nAssignmentModel.exposeProperties();\nAssignmentModel._$name = 'AssignmentModel';", "import Model from '../../../Core/data/Model.js';\nimport ArrayHelper from '../../../Core/helper/ArrayHelper.js';\n/**\n * @module Scheduler/data/mixin/AssignmentStoreMixin\n */\n/**\n * This is a mixin, containing functionality related to managing assignments.\n *\n * It is consumed by the regular {@link Scheduler.data.AssignmentStore} class and Scheduler Pros counterpart.\n *\n * @mixin\n */\nexport default Target => class AssignmentStoreMixin extends Target {\n    static get $name() {\n        return 'AssignmentStoreMixin';\n    }\n    /**\n     * Add assignments to the store.\n     *\n     * NOTE: References (event, resource) on the assignments are determined async by a calculation engine. Thus they\n     * cannot be directly accessed after using this function.\n     *\n     * For example:\n     *\n     * ```javascript\n     * const [assignment] = assignmentStore.add({ eventId, resourceId });\n     * // assignment.event is not yet available\n     * ```\n     *\n     * To guarantee references are set up, wait for calculations for finish:\n     *\n     * ```javascript\n     * const [assignment] = assignmentStore.add({ eventId, resourceId });\n     * await assignmentStore.project.commitAsync();\n     * // assignment.event is available (assuming EventStore is loaded and so on)\n     * ```\n     *\n     * Alternatively use `addAsync()` instead:\n     *\n     * ```javascript\n     * const [assignment] = await assignmentStore.addAsync({ eventId, resourceId });\n     * // assignment.event is available (assuming EventStore is loaded and so on)\n     * ```\n     *\n     * @param {Scheduler.model.AssignmentModel|Scheduler.model.AssignmentModel[]|AssignmentModelConfig|AssignmentModelConfig[]} records\n     * Array of records/data or a single record/data to add to store\n     * @param {Boolean} [silent] Specify `true` to suppress events\n     * @returns {Scheduler.model.AssignmentModel[]} Added records\n     * @function add\n     * @category CRUD\n     */\n    /**\n     * Add assignments to the store and triggers calculations directly after. Await this function to have up to date\n     * references on the added assignments.\n     *\n     * ```javascript\n     * const [assignment] = await assignmentStore.addAsync({ eventId, resourceId });\n     * // assignment.event is available (assuming EventStore is loaded and so on)\n     * ```\n     *\n     * @param {Scheduler.model.AssignmentModel|Scheduler.model.AssignmentModel[]|AssignmentModelConfig|AssignmentModelConfig[]} records\n     * Array of records/data or a single record/data to add to store\n     * @param {Boolean} [silent] Specify `true` to suppress events\n     * @returns {Scheduler.model.AssignmentModel[]} Added records\n     * @function addAsync\n     * @category CRUD\n     * @async\n     */\n    /**\n     * Applies a new dataset to the AssignmentStore. Use it to plug externally fetched data into the store.\n     *\n     * NOTE: References (assignments, resources) on the assignments are determined async by a calculation engine. Thus\n     * they cannot be directly accessed after assigning the new dataset.\n     *\n     * For example:\n     *\n     * ```javascript\n     * assignmentStore.data = [{ eventId, resourceId }];\n     * // assignmentStore.first.event is not yet available\n     * ```\n     *\n     * To guarantee references are available, wait for calculations for finish:\n     *\n     * ```javascript\n     * assignmentStore.data = [{ eventId, resourceId  }];\n     * await assignmentStore.project.commitAsync();\n     * // assignmentStore.first.event is available\n     * ```\n     *\n     * Alternatively use `loadDataAsync()` instead:\n     *\n     * ```javascript\n     * await assignmentStore.loadDataAsync([{ eventId, resourceId }]);\n     * // assignmentStore.first.event is available\n     * ```\n     *\n     * @member {AssignmentModelConfig[]} data\n     * @category Records\n     */\n    /**\n     * Applies a new dataset to the AssignmentStore and triggers calculations directly after. Use it to plug externally\n     * fetched data into the store.\n     *\n     * ```javascript\n     * await assignmentStore.loadDataAsync([{ eventId, resourceId }]);\n     * // assignmentStore.first.event is available\n     * ```\n     *\n     * @param {AssignmentModelConfig[]} data Array of AssignmentModel data objects\n     * @function loadDataAsync\n     * @category CRUD\n     * @async\n     */\n    static get defaultConfig() {\n        return {\n            /**\n             * CrudManager must load stores in the correct order. Lowest first.\n             * @private\n             */\n            loadPriority : 300,\n            /**\n             * CrudManager must sync stores in the correct order. Lowest first.\n             * @private\n             */\n            syncPriority : 300,\n            storeId : 'assignments'\n        };\n    }\n    add(newAssignments, ...args) {\n        newAssignments = ArrayHelper.asArray(newAssignments);\n        for (let i = 0; i < newAssignments.length; i++) {\n            let assignment = newAssignments[i];\n            if (!(assignment instanceof Model)) {\n                newAssignments[i] = assignment = this.createRecord(assignment);\n            }\n            if (!this.isSyncingDataOnLoad && this.storage.findIndex('eventResourceKey', assignment.eventResourceKey, true) !== -1) {\n                throw new Error(`Duplicate assignment Event: ${assignment.eventId} to resource: ${assignment.resourceId}`);\n            }\n            if (assignment.event?.isCreating) {\n                assignment.isCreating = true;\n            }\n        }\n        return super.add(newAssignments, ...args);\n    }\n    includesAssignment(eventId, resourceId) {\n        return this.storage.findIndex('eventResourceKey', `${eventId}-${resourceId}`, true) !== -1;\n    }\n    setStoreData(data) {\n        if (this.usesSingleAssignment) {\n            throw new Error('Data loading into AssignmentStore (multi-assignment mode) cannot be combined EventStore data containing resourceId (single-assignment mode)');\n        }\n        super.setStoreData(data);\n    }\n    //region Init & destroy\n    // This index fixes poor performance when you add large number of events to an event store with large number of\n    // events - if cache is missing existing records are iterated n\u00B2 times.\n    // https://github.com/bryntum/support/issues/3154#issuecomment-881336588\n    set storage(storage) {\n        super.storage = storage;\n        // This allows a map based, fast lookup of assignments by their eventResourceKey.\n        // This is so that the test for duplicate assignment adding is fast.\n        this.storage.addIndex({ property : 'eventResourceKey', dependentOn : { event : true, resource : true } });\n    }\n    get storage() {\n        // Micro optimization to avoid expensive super call\n        return this._storage || super.storage;\n    }\n    //endregion\n    //region Stores\n    // To not have to do instanceof checks\n    get isAssignmentStore() {\n        return true;\n    }\n    //endregion\n    //region Recurrence\n    /**\n     * Returns a \"fake\" assignment used to identify a certain occurrence of a recurring event.\n     * If passed the original event, it returns `originalAssignment`.\n     * @param {Scheduler.model.AssignmentModel} originalAssignment\n     * @param {Scheduler.model.EventModel} occurrence\n     * @returns {Object} Temporary assignment\n     * @internal\n     */\n    getOccurrence(originalAssignment, occurrence) {\n        // Pass along the original assignment for non occurrence related calls\n        if (!originalAssignment || !occurrence?.isOccurrence) {\n            return originalAssignment;\n        }\n        // Not for saving chars, needed in fn below\n        const me = this;\n        return {\n            id                     : `${occurrence.id}:a${originalAssignment.id}`,\n            event                  : occurrence,\n            resource               : originalAssignment.resource,\n            eventId                : occurrence.id,\n            resourceId             : originalAssignment.resource.id,\n            isAssignment           : true,\n            // This field is required to distinguish this fake assignment when event is being removed from UI\n            isOccurrenceAssignment : true,\n            // Not being an actual record, instanceMeta is stored on the store instead\n            instanceMeta(instanceOrId) {\n                return me.occurrenceInstanceMeta(this, instanceOrId);\n            }\n        };\n    }\n    // Per fake assignment instance meta, stored on store since fakes are always generated on demand\n    occurrenceInstanceMeta(occurrenceAssignment, instanceOrId) {\n        const\n            me         = this,\n            instanceId = instanceOrId.id || instanceOrId,\n            { id }     = occurrenceAssignment;\n        let { occurrenceMeta } = me;\n        if (!occurrenceMeta) {\n            occurrenceMeta = me.occurrenceMeta = {};\n        }\n        if (!occurrenceMeta[id]) {\n            occurrenceMeta[id] = {};\n        }\n        return occurrenceMeta[id][instanceId] || (occurrenceMeta[id][instanceId] = {});\n    }\n    //endregion\n    //region Mapping\n    /**\n     * Maps over event assignments.\n     *\n     * @param {Scheduler.model.EventModel} event\n     * @param {Function} [fn]\n     * @param {Function} [filterFn]\n     * @returns {Scheduler.model.EventModel[]|Array}\n     * @category Assignments\n     */\n    mapAssignmentsForEvent(event, fn, filterFn) {\n        event = this.eventStore.getById(event);\n        const\n            fnSet           = Boolean(fn),\n            filterFnSet     = Boolean(filterFn);\n        if (fnSet || filterFnSet) {\n            return event.assignments.reduce((result, assignment) => {\n                const mapResult = fnSet ? fn(assignment) : assignment;\n                if (!filterFnSet || filterFn(mapResult)) {\n                    result.push(mapResult);\n                }\n                return result;\n            }, []);\n        }\n        return event.assignments;\n    }\n    /**\n     * Maps over resource assignments.\n     *\n     * @param {Scheduler.model.ResourceModel|Number|String} resource\n     * @param {Function} [fn]\n     * @param {Function} [filterFn]\n     * @returns {Scheduler.model.ResourceModel[]|Array}\n     * @category Assignments\n     */\n    mapAssignmentsForResource(resource, fn, filterFn) {\n        resource = this.resourceStore.getById(resource);\n        const\n            fnSet           = Boolean(fn),\n            filterFnSet     = Boolean(filterFn);\n        if (fnSet || filterFnSet) {\n            return resource.assignments.reduce((result, assignment) => {\n                const mapResult = fnSet ? fn(assignment) : assignment;\n                if (!filterFnSet || filterFn(mapResult)) {\n                    result.push(mapResult);\n                }\n                return result;\n            }, []);\n        }\n        return resource.assignments;\n    }\n    /**\n     * Returns all assignments for a given event.\n     *\n     * @param {Scheduler.model.TimeSpan} event\n     * @returns {Scheduler.model.AssignmentModel[]}\n     * @category Assignments\n     */\n    getAssignmentsForEvent(event) {\n        return event.assignments;\n    }\n    /**\n     * Removes all assignments for given event\n     *\n     * @param {Scheduler.model.TimeSpan} event\n     * @category Assignments\n     */\n    removeAssignmentsForEvent(event) {\n        return this.remove(event.assignments);\n    }\n    /**\n     * Returns all assignments for a given resource.\n     *\n     * @param {Scheduler.model.ResourceModel} resource\n     * @returns {Scheduler.model.AssignmentModel[]}\n     * @category Assignments\n     */\n    getAssignmentsForResource(resource) {\n        resource = this.resourceStore.getById(resource);\n        return resource.assignments;\n    }\n    /**\n     * Removes all assignments for given resource\n     *\n     * @param {Scheduler.model.ResourceModel|*} resource\n     * @category Assignments\n     */\n    removeAssignmentsForResource(resource) {\n        this.remove(this.getAssignmentsForResource(resource));\n    }\n    /**\n     * Returns all resources assigned to an event.\n     *\n     * @param {Scheduler.model.EventModel} event\n     * @returns {Scheduler.model.ResourceModel[]}\n     * @category Assignments\n     */\n    getResourcesForEvent(event) {\n        return event.resources;\n    }\n    /**\n     * Returns all events assigned to a resource\n     *\n     * @param {Scheduler.model.ResourceModel|String|Number} resource\n     * @returns {Scheduler.model.TimeSpan[]}\n     * @category Assignments\n     */\n    getEventsForResource(resource) {\n        resource = this.resourceStore.getById(resource);\n        return resource?.events;\n    }\n    /**\n     * Creates and adds assignment record(s) for a given event and resource(s).\n     *\n     * @param {Scheduler.model.TimeSpan} event\n     * @param {Scheduler.model.ResourceModel|Scheduler.model.ResourceModel[]} resources The resource(s) to assign to the event\n     * @param {Function} [assignmentSetupFn] A hook function which takes an assignment as its argument and must return an assignment.\n     * @param {Boolean} [removeExistingAssignments] `true` to remove assignments for other resources\n     * @returns {Scheduler.model.AssignmentModel[]} An array with the created assignment(s)\n     * @category Assign\n     */\n    assignEventToResource(event, resources, assignmentSetupFn = null, removeExistingAssignments = false) {\n        const\n            me       = this,\n            toRemove = removeExistingAssignments ? new Set(event.assignments) : null;\n        resources = ArrayHelper.asArray(resources).map(r => r.$original ?? r);\n        if (me.eventStore?.usesSingleAssignment) {\n            // Use same code path as other single assignments if already assigned\n            if (event.assignments?.length) {\n                if (!me.isEventAssignedToResource(event, resources[0])) {\n                    event.resource = resources[0];\n                }\n                return [];\n            }\n            // otherwise - set \"resourceId\" and proceed to assignment creation\n            else {\n                event.resourceId = resources[0].id;\n            }\n        }\n        let newAssignments = [];\n        me.suspendAutoCommit();\n        // Assign\n        resources.forEach(resource => {\n            const existingAssignment = me.getAssignmentForEventAndResource(event, resource);\n            if (!existingAssignment) {\n                const assignment = {\n                    event,\n                    resource\n                };\n                newAssignments.push(assignmentSetupFn?.(assignment) ?? assignment);\n            }\n            else if (removeExistingAssignments) {\n                toRemove.delete(existingAssignment);\n            }\n        });\n        newAssignments = me.add(newAssignments);\n        if (removeExistingAssignments) {\n            me.remove(Array.from(toRemove));\n        }\n        // If true, will trigger a commit\n        me.resumeAutoCommit();\n        return newAssignments;\n    }\n    /**\n     * Removes assignment record for a given event and resource.\n     *\n     * @param {Scheduler.model.TimeSpan|String|Number} event\n     * @param {Scheduler.model.ResourceModel|String|Number} [resources] The resource to unassign the event from. If omitted, all resources of the events will be unassigned\n     * @returns {Scheduler.model.AssignmentModel|Scheduler.model.AssignmentModel[]}\n     * @category Assign\n     */\n    unassignEventFromResource(event, resources) {\n        const\n            me = this,\n            assignmentsToRemove = [];\n        if (!resources) {\n            return me.removeAssignmentsForEvent(event);\n        }\n        resources = ArrayHelper.asArray(resources);\n        for (let i = 0; i < resources.length; i++) {\n            if (me.isEventAssignedToResource(event, resources[i])) {\n                assignmentsToRemove.push(me.getAssignmentForEventAndResource(event, resources[i]));\n            }\n        }\n        return me.remove(assignmentsToRemove);\n    }\n    /**\n     * Checks whether an event is assigned to a resource.\n     *\n     * @param {Scheduler.model.EventModel|String|Number} event Event record or id\n     * @param {Scheduler.model.ResourceModel|String|Number} resource Resource record or id\n     * @returns {Boolean}\n     * @category Assignments\n     */\n    isEventAssignedToResource(event, resource) {\n        return Boolean(this.getAssignmentForEventAndResource(event, resource));\n    }\n    /**\n     * Returns an assignment record for a given event and resource\n     *\n     * @param {Scheduler.model.EventModel|String|Number} event The event or its id\n     * @param {Scheduler.model.ResourceModel|String|Number} resource The resource or its id\n     * @returns {Scheduler.model.AssignmentModel}\n     * @category Assignments\n     */\n    getAssignmentForEventAndResource(event, resource) {\n        let assignments;\n        // Note: In order to not evaluate conditions which do not have to be evaluated each condition is assigned to a\n        // variable within the condition.\n        if (\n            !(event = this.eventStore.getById(event)) ||\n            !(assignments = event.assignments) ||\n            // Also note that resources are looked for in the master store if chained, to handle dragging between\n            // schedulers using chained versions of the same resource store. Needed since assignmentStore is shared and\n            // might point to wrong resourceStore (can only point to one)\n            !(resource = this.resourceStore.$master.getById(resource))\n        ) {\n            return null;\n        }\n        return this.getOccurrence(assignments.find(a => a.resource?.$original === resource.$original), event);\n    }\n    //endregion\n};\n", "import AjaxStore from '../../Core/data/AjaxStore.js';\nimport AssignmentModel from '../model/AssignmentModel.js';\nimport PartOfProject from './mixin/PartOfProject.js';\nimport PartOfBaseProject from './mixin/PartOfBaseProject.js';\nimport AssignmentStoreMixin from './mixin/AssignmentStoreMixin.js';\nimport { CoreAssignmentStoreMixin } from '../../Engine/quark/store/CoreAssignmentStoreMixin.js';\nconst EngineMixin = PartOfProject(CoreAssignmentStoreMixin.derive(AjaxStore));\n/**\n * @module Scheduler/data/AssignmentStore\n */\n/**\n * A store representing a collection of assignments between events in the {@link Scheduler.data.EventStore} and resources\n * in the {@link Scheduler.data.ResourceStore}.\n *\n * This store only accepts a model class inheriting from {@link Scheduler.model.AssignmentModel}.\n *\n * An AssignmentStore is usually connected to a project, which binds it to other related stores (EventStore,\n * ResourceStore and DependencyStore). The project also handles references (event, resource) to related records for the\n * records in the store.\n *\n * Resolving the references happens async, records are not guaranteed to have up to date references until calculations\n * are finished. To be certain that references are resolved, call `await project.commitAsync()` after store actions. Or\n * use one of the `xxAsync` functions, such as `loadDataAsync()`.\n *\n * Using `commitAsync()`:\n *\n * ```javascript\n * assignmentStore.data = [{ eventId, resourceId }, ...];\n *\n * // references (event, resource) not resolved yet\n *\n * await assignmentStore.project.commitAsync();\n *\n * // now they are\n * ```\n *\n * Using `loadDataAsync()`:\n *\n * ```javascript\n * await assignmentStore.loadDataAsync([{ eventId, resourceId }, ...]);\n *\n * // references (event, resource) are resolved\n * ```\n *\n * @mixes Scheduler/data/mixin/AssignmentStoreMixin\n * @mixes Scheduler/data/mixin/PartOfProject\n * @extends Core/data/AjaxStore\n */\nexport default class AssignmentStore extends AssignmentStoreMixin(EngineMixin) {\n    static $name = 'AssignmentStore';\n    static get defaultConfig() {\n        return {\n            modelClass : AssignmentModel\n        };\n    }\n}\nAssignmentStore._$name = 'AssignmentStore';", "import Base from '../../../Core/Base.js';\nimport Model from '../../../Core/data/Model.js';\nimport DateHelper from '../../../Core/helper/DateHelper.js';\nimport FunctionHelper from '../../../Core/helper/FunctionHelper.js';\n/**\n * @module Scheduler/data/mixin/EventStoreMixin\n */\n/**\n * This is a mixin, containing functionality related to managing events.\n *\n * It is consumed by the regular {@link Scheduler.data.EventStore} class and the Scheduler Pro's `EventStore` class.\n *\n * @mixin\n */\nexport default Target => class EventStoreMixin extends (Target || Base) {\n    static get $name() {\n        return 'EventStoreMixin';\n    }\n    //region Init & destroy\n    construct(config) {\n        super.construct(config);\n        this.autoTree = true;\n    }\n    //endregion\n    //region Events records, iteration etc.\n    set filtersFunction(filtersFunction) {\n        super.filtersFunction = filtersFunction;\n    }\n    get filtersFunction() {\n        // Generate the real filterFn.\n        const result = super.filtersFunction;\n        // We always filter *in* records which are being created by the UI.\n        if (result && result !== FunctionHelper.returnTrue) {\n            return r => r.isCreating || result(r);\n        }\n        return result;\n    }\n    /**\n     * Returns a `Map`, keyed by `YYYY-MM-DD` date keys containing event counts for all the days\n     * between the passed `startDate` and `endDate`. Occurrences of recurring events are included.\n     *\n     * Example:\n     *\n     * ```javascript\n     *  eventCounts = eventStore.getEventCounts({\n     *      startDate : scheduler.timeAxis.startDate,\n     *      endDate   : scheduler.timeAxis.endDate\n     *  });\n     * ```\n     *\n     * @param {Object} options An options object determining which events to return\n     * @param {Date} options.startDate The start date for the range of events to include.\n     * @param {Date} [options.endDate] The end date for the range of events to include.\n     * @category Events\n     */\n    getEventCounts(options) {\n        const\n            me     = this,\n            {\n                filtersFunction,\n                added\n            }      = me,\n            // Must use getEvents so that the loadDateRange event is triggered.\n            result = me.getEvents({\n                ...options,\n                storeFilterFn : me.isFiltered ? (me.reapplyFilterOnAdd ? filtersFunction : eventRecord => added.includes(eventRecord) ? me.indexOf(eventRecord) > -1 : filtersFunction(eventRecord)) : null,\n                dateMap       : options.dateMap || true\n            });\n        result.forEach((value, key) => result.set(key, value.length));\n        return result;\n    }\n    /**\n     * Calls the supplied iterator function once for every scheduled event, providing these arguments\n     * - event : the event record\n     * - startDate : the event start date\n     * - endDate : the event end date\n     *\n     * Returning false cancels the iteration.\n     *\n     * @param {Function} fn iterator function\n     * @param {Object} [thisObj] `this` reference for the function\n     * @category Events\n     */\n    forEachScheduledEvent(fn, thisObj = this) {\n        this.forEach(event => {\n            const { startDate, endDate } = event;\n            if (startDate && endDate) {\n                return fn.call(thisObj, event, startDate, endDate);\n            }\n        });\n    }\n    /**\n     * Returns an object defining the earliest start date and the latest end date of all the events in the store.\n     *\n     * @returns {Object} An object with 'startDate' and 'endDate' properties (or null values if data is missing).\n     * @category Events\n     */\n    getTotalTimeSpan() {\n        let earliest = new Date(9999, 0, 1),\n            latest   = new Date(0);\n        this.forEach(event => {\n            if (event.startDate) {\n                earliest = DateHelper.min(event.startDate, earliest);\n            }\n            if (event.endDate) {\n                latest = DateHelper.max(event.endDate, latest);\n            }\n        });\n        earliest = earliest < new Date(9999, 0, 1) ? earliest : null;\n        latest   = latest > new Date(0) ? latest : null;\n        // keep last calculated value to be able to track total timespan changes\n        return (this.lastTotalTimeSpan = {\n            startDate : earliest || null,\n            endDate   : latest || earliest || null\n        });\n    }\n    /**\n     * Checks if given event record is persistable. By default it always is, override EventModels `isPersistable` if you\n     * need custom logic.\n     *\n     * @param {Scheduler.model.EventModel} event\n     * @returns {Boolean}\n     * @category Events\n     */\n    isEventPersistable(event) {\n        return event.isPersistable;\n    }\n    //endregion\n    //region Resource\n    /**\n     * Checks if a date range is allocated or not for a given resource.\n     * @param {Date} start The start date\n     * @param {Date} end The end date\n     * @param {Scheduler.model.EventModel|null} excludeEvent An event to exclude from the check (or null)\n     * @param {Scheduler.model.ResourceModel} resource The resource\n     * @returns {Boolean} True if the timespan is available for the resource\n     * @category Resource\n     */\n    isDateRangeAvailable(start, end, excludeEvent, resource) {\n        // NOTE: Also exists in TaskStore.js\n        // Cannot assign anything to generated parents\n        if (resource.data.generatedParent) {\n            return false;\n        }\n        // This should be a collection of unique event records\n        const allEvents = new Set(this.getEventsForResource(resource));\n        // In private mode we can pass an AssignmentModel. In this case, we assume that multi-assignment is used.\n        // So we need to make sure that other resources are available for this time too.\n        // No matter if the event retrieved from the assignment belongs to the target resource or not.\n        // We gather all events from the resources the event is assigned to except of the one from the assignment record.\n        // Note, events from the target resource are added above.\n        if (excludeEvent?.isAssignment) {\n            const\n                currentEvent = excludeEvent.event,\n                resources    = currentEvent.resources;\n            resources.forEach(resource => {\n                // Ignore events for the resource which is passed as an AssignmentModel to excludeEvent\n                if (resource.id !== excludeEvent.resourceId) {\n                    this.getEventsForResource(resource).forEach(event => allEvents.add(event));\n                }\n            });\n        }\n        if (excludeEvent) {\n            const eventToRemove = excludeEvent.isAssignment ? excludeEvent.event : excludeEvent;\n            allEvents.delete(eventToRemove);\n        }\n        return !Array.from(allEvents).some(event => event.isScheduled && DateHelper.intersectSpans(start, end, event.startDate, event.endDate));\n    }\n    /**\n     * Filters the events associated with a resource, based on the function provided. An array will be returned for those\n     * events where the passed function returns true.\n     * @param {Scheduler.model.ResourceModel} resource\n     * @param {Function} fn The function\n     * @param {Object} [thisObj] `this` reference for the function\n     * @returns {Scheduler.model.EventModel[]} the events in the time span\n     * @private\n     * @category Resource\n     */\n    filterEventsForResource(resource, fn, thisObj = this) {\n        return resource.getEvents(this).filter(fn.bind(thisObj));\n    }\n    /**\n     * Returns all resources assigned to an event.\n     *\n     * @param {Scheduler.model.EventModel|String|Number} event\n     * @returns {Scheduler.model.ResourceModel[]}\n     * @category Resource\n     */\n    getResourcesForEvent(event) {\n        // If we are sent an occurrence, use its parent\n        if (event.isOccurrence) {\n            event = event.recurringTimeSpan;\n        }\n        return this.assignmentStore.getResourcesForEvent(event);\n    }\n    /**\n     * Returns all events assigned to a resource.\n     * *NOTE:* this does not include occurrences of recurring events. Use the\n     * {@link Scheduler/data/mixin/GetEventsMixin#function-getEvents} API to include occurrences of recurring events.\n     * @param {Scheduler.model.ResourceModel|String|Number} resource Resource or resource id.\n     * @returns {Scheduler.model.EventModel[]}\n     * @category Resource\n     */\n    getEventsForResource(resource) {\n        return this.assignmentStore.getEventsForResource(resource);\n    }\n    //endregion\n    //region Assignment\n    /**\n     * Returns all assignments for a given event.\n     *\n     * @param {Scheduler.model.EventModel|String|Number} event\n     * @returns {Scheduler.model.AssignmentModel[]}\n     * @category Assignment\n     */\n    getAssignmentsForEvent(event) {\n        return this.assignmentStore.getAssignmentsForEvent(event) || [];\n    }\n    /**\n     * Returns all assignments for a given resource.\n     *\n     * @param {Scheduler.model.ResourceModel|String|Number} resource\n     * @returns {Scheduler.model.AssignmentModel[]}\n     * @category Assignment\n     */\n    getAssignmentsForResource(resource) {\n        return this.assignmentStore.getAssignmentsForResource(resource) || [];\n    }\n    /**\n     * Creates and adds assignment record for a given event and a resource.\n     *\n     * @param {Scheduler.model.EventModel|String|Number} event\n     * @param {Scheduler.model.ResourceModel|String|Number|Scheduler.model.ResourceModel[]|String[]|Number[]} resource The resource(s) to assign to the event\n     * @param {Boolean} [removeExistingAssignments] `true` to first remove existing assignments\n     * @returns {Scheduler.model.AssignmentModel[]} An array with the created assignment(s)\n     * @category Assignment\n     */\n    assignEventToResource(event, resource, removeExistingAssignments = false) {\n        return this.assignmentStore.assignEventToResource(event, resource, undefined, removeExistingAssignments);\n    }\n    /**\n     * Removes assignment record for a given event and a resource.\n     *\n     * @param {Scheduler.model.EventModel|String|Number} event\n     * @param {Scheduler.model.ResourceModel|String|Number} resource\n     * @category Assignment\n     */\n    unassignEventFromResource(event, resource) {\n        this.assignmentStore.unassignEventFromResource(event, resource);\n    }\n    /**\n     * Reassigns an event from an old resource to a new resource\n     *\n     * @param {Scheduler.model.EventModel}    event    An event or id of the event to reassign\n     * @param {Scheduler.model.ResourceModel|Scheduler.model.ResourceModel[]} oldResource A resource or id to unassign from\n     * @param {Scheduler.model.ResourceModel|Scheduler.model.ResourceModel[]} newResource A resource or id to assign to\n     * @category Assignment\n     */\n    reassignEventFromResourceToResource(event, oldResource, newResource) {\n        const\n            me            = this,\n            newResourceId = Model.asId(newResource),\n            assignment    = me.assignmentStore.getAssignmentForEventAndResource(event, oldResource);\n        if (assignment) {\n            assignment.resourceId = newResourceId;\n        }\n        else {\n            me.assignmentStore.assignEventToResource(event, newResource);\n        }\n    }\n    /**\n     * Checks whether an event is assigned to a resource.\n     *\n     * @param {Scheduler.model.EventModel|String|Number} event\n     * @param {Scheduler.model.ResourceModel|String|Number} resource\n     * @returns {Boolean}\n     * @category Assignment\n     */\n    isEventAssignedToResource(event, resource) {\n        return this.assignmentStore.isEventAssignedToResource(event, resource);\n    }\n    /**\n     * Removes all assignments for given event\n     *\n     * @param {Scheduler.model.EventModel|String|Number} event\n     * @category Assignment\n     */\n    removeAssignmentsForEvent(event) {\n        this.assignmentStore.removeAssignmentsForEvent(event);\n    }\n    /**\n     * Removes all assignments for given resource\n     *\n     * @param {Scheduler.model.ResourceModel|String|Number} resource\n     * @category Assignment\n     */\n    removeAssignmentsForResource(resource) {\n        this.assignmentStore.removeAssignmentsForResource(resource);\n    }\n    //endregion\n};\n", "import DateHelper from '../../../Core/helper/DateHelper.js';\nimport Objects from '../../../Core/helper/util/Objects.js';\n/**\n * @module Scheduler/data/mixin/GetEventsMixin\n */\nconst\n    returnTrue   = () => true,\n    notRecurring = event => !event.isRecurring;\n/**\n * Mixing containing functionality for retrieving a range of events, mainly used during rendering.\n *\n * Consumed by EventStore in Calendar, Scheduler & Scheduler Pro and TaskStore in Gantt.\n *\n * @mixin\n */\nexport default Target => class GetEventsMixin extends Target {\n    static $name = 'GetEventsMixin';\n    /**\n     * Returns an array of events for the date range specified by the `startDate` and `endDate` options.\n     *\n     * By default, for any date, this includes any event which *intersects* that date.\n     *\n     * To only include events that are fully contained *within* the date range, pass the `allowPartial`\n     * option as `false`.\n     *\n     * By default, any occurrences of recurring events are included in the resulting array (not applicable in Gantt). If\n     * that is not required, pass the `includeOccurrences` option as `false`. **Note that if `includeOccurrences` is\n     * `true`, the start date and end date options are mandatory. The method must know what range of occurrences needs\n     * to be generated and returned.**\n     *\n     * Example:\n     *\n     * ```javascript\n     *  visibleEvents = eventStore.getEvents({\n     *      resourceRecord : myResource,\n     *      startDate      : scheduler.timeAxis.startDate,\n     *      endDate        : scheduler.timeAxis.endDate\n     *  });\n     * ```\n     *\n     * @param {Object} options An options object determining which events to return\n     * @param {Date} [options.date] If only one date is required, pass this option instead of the\n     * `startDate` and `endDate` options.\n     * @param {Date} options.startDate The start date for the range of events to include.\n     * @param {Date} [options.endDate] The end date for the range of events to include.\n     * @param {Scheduler.model.ResourceModel} [options.resourceRecord] Pass a resource to only return events assigned to\n     *   this resource. Not supported when using the `dateMap` option (see below)\n     * @param {Function} [options.filter] A function to filter out events which are not required.\n     * @param {Boolean} [options.ignoreFilters] By default, store filters are honoured. Pass this\n     * as `true` to include filtered out events.\n     * @param {Boolean} [options.includeOccurrences=true] Occurrences of recurring events are included by default.\n     * @param {Boolean} [options.allowPartial=true] Events which start before or after the range, but *intersect* the\n     *   range are included by default.\n     * @param {Boolean} [options.startOnly] Pass `true` to only include events which *start on* each date in the range.\n     * @param {Boolean} [options.onlyAssigned] Pass `true` to only include events that are assigned to a resource\n     * @param {Boolean|Map} [options.dateMap] Populates the passed `Map`, or if passed as `true`, creates and\n     * returns a new `Map`. The keys are `YYYY-MM-DD` date strings and the entries are arrays of\n     * {@link Scheduler.model.EventModel EventModel}s.\n     * @returns {Scheduler.model.EventModel[]|Map} Events which match the passed configuration.\n     * @category Events\n     */\n    getEvents({\n        filter,\n        date,\n        startDate,                  // Events which intersect the startDate/endDate\n        endDate,                    // will be returned\n        startOnly,                  // Only events which start on each date will be returned\n        includeOccurrences,         // Interpolate occurrences into the returned event set\n        allowPartial,               // Include events which *intersect* the date range\n        onlyAssigned = false,       // Only include events that are assigned to a resource\n        dateMap = false,            // Return a Map keyed by date each value being an array of events\n        dayTime = null,\n        // Private option. Select which date index to look up events in depending on the date\n        // we are examining in the date iteration process. Some callers may want to use\n        // different indices depending on the stage through the date iteration.\n        // See Calendar package for usage.\n        getDateIndex\n    }) {\n        const\n            me                = this,\n            options           = arguments[0],\n            {\n                lastDateRange,\n                added,\n                filtersFunction\n            } = me,\n            passedFilter      = filter;\n        // Add filtering for only assigned events if requested.\n        if (onlyAssigned) {\n            options.filter = passedFilter ? e => passedFilter(e) && e.resources.length : e => e.resources.length;\n        }\n        // Note that we cannot use defaulting in the argument block because we pass\n        // the incoming options object down into implementations.\n        if (!('startDate' in options)) {\n            startDate = options.startDate = date;\n        }\n        if (!('includeOccurrences' in options)) {\n            includeOccurrences = options.includeOccurrences = true;\n        }\n        if (!('allowPartial' in options)) {\n            allowPartial = options.allowPartial = !startOnly;\n        }\n        // We can't use me.filtersFunction if reapplyFilterOnAdd is false because there may be newly\n        // added events which may not be subject to the filter. Records which are still in\n        // the added bag must be tested for presence using indexOf so as to be always in sync\n        // with the store being refiltered. Parens help readability.\n        // Don't use the store's filtering function if we were asked to ignore filters.\n        // eslint-disable-next-line no-extra-parens\n        options.storeFilterFn = me.isFiltered && !options.ignoreFilters ? (me.reapplyFilterOnAdd ? filtersFunction : (eventRecord => added.includes(eventRecord) ? me.indexOf(eventRecord) > -1 : filtersFunction(eventRecord))) : null;\n        // Default to a one day range if only startDate passed\n        if (!endDate) {\n            if (startDate) {\n                endDate = options.endDate = DateHelper.clearTime(startDate);\n                endDate.setDate(endDate.getDate() + 1);\n            }\n            // If no dates passed, the dateFilter will include all.\n            else {\n                // We need to know what occurrences to generate.\n                if (includeOccurrences) {\n                    throw new Error('getEvents MUST be passed startDate and endDate if recurring occurrences are requested');\n                }\n                options.dateFilter = returnTrue;\n            }\n        }\n        if (!options.dateFilter) {\n            // Must start in the date range\n            if (startOnly) {\n                options.dateFilter = e => {\n                    // Avoid hitting getter twice. Use batched value if present.\n                    const eventStartDate = e.hasBatchedChange('startDate') ? e.get('startDate') : e.startDate;\n                    return eventStartDate && !(DateHelper.clearTime(eventStartDate) - startDate);\n                };\n            }\n            // Any intersection with our date range\n            else if (allowPartial) {\n                options.dateFilter = e => {\n                    // Avoid hitting getter twice. Use batched value if present.\n                    const\n                        eventStartDate = e.hasBatchedChange('startDate') ? e.get('startDate') : e.startDate,\n                        eventEndDate   = e.hasBatchedChange('endDate') ? e.get('endDate') : e.endDate || eventStartDate,\n                        isMilestone    = !(eventStartDate - eventEndDate);\n                    return eventStartDate && (isMilestone ? DateHelper.betweenLesserEqual(eventStartDate, startDate, endDate) : DateHelper.intersectSpans(eventStartDate, eventEndDate, startDate, endDate));\n                };\n            }\n            // Must be wholly contained with the our range\n            else {\n                options.dateFilter = e => {\n                    // Avoid hitting getter twice. Use batched value if present.\n                    const\n                        eventStartDate = e.hasBatchedChange('startDate') ? e.get('startDate') : e.startDate,\n                        eventEndDate   = e.hasBatchedChange('endDate') ? e.get('endDate') : e.endDate || eventStartDate;\n                    return eventStartDate && eventStartDate >= startDate && eventEndDate <= endDate;\n                };\n            }\n        }\n        const newDateRange = {\n            startDate,\n            endDate\n        };\n        // Ensure the listeners are present\n        me.processConfiguredListeners();\n        /**\n         * Fired when a range of events is requested from the {@link #function-getEvents} method.\n         *\n         * <div class=\"note\">\n         * This event fires <span style=\"font-weight:bold\">every time</span> a range of events is\n         * requested from the store.\n         * </div>\n         *\n         * An application may have one of two levels of interest in events being read from a store.<br>\n         *\n         * 1.  To be notified when <span style=\"font-weight:bold\">any</span> event block is requested regardless of what the\n         * date range is.\n         * 2.  To be notified when a <span style=\"font-weight:bold\">new date range</span> is requested.\n         *\n         * This event allows both types of application to be written. The `changed` property is\n         * set if a different date range is requested.\n         *\n         * ```javascript\n         * new Scheduler({\n         *     eventStore : {\n         *         listeners : {\n         *             loadDateRange({ new : { startDate, endDate }, changed }) {\n         *                 // Load new data if user is requesting a different time window.\n         *                 if (changed) {\n         *                     fetch(...);\n         *                 }\n         *             }\n         *         }\n         *     },\n         *     ...\n         * });\n         * ```\n         *\n         * @event loadDateRange\n         * @param {Scheduler.data.EventStore} source This EventStore\n         * @param {Object} old The old date range\n         * @param {Date} old.startDate the old start date.\n         * @param {Date} old.endDate the old end date.\n         * @param {Object} new The new date range\n         * @param {Date} new.startDate the new start date.\n         * @param {Date} new.endDate the new end date.\n         * @param {Boolean} changed `true` if the date range is different from the last time a request was made.\n         */\n        me.trigger('loadDateRange', {\n            old     : lastDateRange || {},\n            new     : Objects.clone(newDateRange),\n            changed : Boolean(!lastDateRange || (lastDateRange.startDate - newDateRange.startDate || lastDateRange.endDate - newDateRange.endDate))\n        });\n        // Dates are mutable, so we must keep our own copy.\n        me.lastDateRange = Objects.clone(newDateRange);\n        return dateMap ? me.getEventsAsMap(options) : me.getEventsAsArray(options);\n    }\n    /**\n     * Internal implementation for {@link #function-getEvents} to use when not using dateMap.\n     * @private\n     */\n    getEventsAsArray({\n        filter,\n        date,\n        resourceRecord,\n        startDate = date,           // Events which intersect the startDate/endDate\n        endDate,                    // will be returned\n        startOnly,                  // Only events which start on each date will be returned\n        includeOccurrences = true,  // Interpolate occurrences into the returned event set\n        dayTime = null,\n        // Injected by the getEvents master method\n        dateFilter,\n        storeFilterFn,\n        // Private option. Select which date index to look up events in depending on the date\n        // we are examining in the date iteration process. Some callers may want to use\n        // different indices depending on the stage through the date iteration.\n        // See Calendar package for usage.\n        getDateIndex\n    }) {\n        const\n            me     = this,\n            events = [],\n            count  = storeFilterFn ? me.count : me.allCount;\n        if (count) {\n            let candidateEvents = resourceRecord ? me.getEventsForResource(resourceRecord) : null;\n            // If there *was* a resourceRecord, candidateEvents will already be set up using me.getEventsForResource.\n            // If no resourceRecord specified, we are gathering by date, so use the indices.\n            if (!resourceRecord) {\n                const\n                    dateIndex = me.useDayIndex(dayTime),\n                    eventSet  = new Set(),\n                    indexName = startOnly ? 'startDate' : 'date';\n                // Add all recurring events which started on or before our date range.\n                me.recurringEvents.forEach(e => {\n                    if (dateIndex.dayTime.startOfDay(e.startDate) <= startDate) {\n                        eventSet.add(e);\n                    }\n                });\n                // Iterate the date range, using the indices to find qualified events.\n                for (const date = new Date(startDate); date < endDate; date.setDate(date.getDate() + 1)) {\n                    const coincidingEvents = dateIndex.get(getDateIndex ? getDateIndex(date) : indexName, date);\n                    coincidingEvents?.forEach(e => eventSet.add(e));\n                }\n                // We gathered all events which *coincide* with each date.\n                // We also added in all recurring events which started on or before our date range.\n                // All these were made unique by the Set.\n                // Return it to array form.\n                candidateEvents = [...eventSet];\n            }\n            // Events found from the date indices won't be filtered.\n            // On the other side, when using getEventForResource we will get all events for\n            // the resource even if the EventStore is filtered, handle this by excluding \"invisible\" events here\n            if (storeFilterFn) {\n                candidateEvents = candidateEvents.filter(storeFilterFn);\n            }\n            // Go through candidates.\n            // For a recurring event, and we are including recurrences, add date-qualifying occurrences.\n            // For a non-recurring event, add it if it's date-qualified.\n            for (let i = 0, { length } = candidateEvents; i < length; i++) {\n                const e = candidateEvents[i];\n                // For recurring events, add date-qualifying occurrences, not the base\n                if (includeOccurrences && e.isRecurring) {\n                    events.push.apply(events, e.getOccurrencesForDateRange(startDate, endDate).filter(dateFilter));\n                }\n                // For ordinary events, add if it's date-qualified\n                else if (dateFilter(e)) {\n                    events.push(e);\n                }\n            }\n        }\n        return filter ? events.filter(filter) : events;\n    }\n    /**\n     * Internal implementation for {@link #function-getEvents} to use when using dateMap.\n     * @private\n     */\n    getEventsAsMap({\n        filter : passedFilter,\n        date,\n        resourceRecord,             // Not supported yet. Will add if ever requested.\n        startDate = date,           // Events which intersect the startDate/endDate\n        endDate,                    // will be returned\n        startOnly,                  // Only events which start on each date will be returned\n        includeOccurrences = true,  // Interpolate occurrences into the returned event set\n        dateMap,                    // Return a Map keyed by date each value being an array of events\n        dayTime = null,\n        storeFilterFn,\n        // Private option. Select which date index to look up events in depending on the date\n        // we are examining in the date iteration process. Some callers may want to use\n        // different indices depending on the stage through the date iteration.\n        // See Calendar package for usage.\n        getDateIndex\n    }) {\n        const me = this;\n        // Convert `true` to a Map.\n        if (dateMap?.clear) {\n            dateMap.clear();\n        }\n        else {\n            dateMap = new Map();\n        }\n        if (me.count) {\n            const\n                dateIndex       = me.useDayIndex(dayTime),\n                indexName       = startOnly ? 'startDate' : 'date',\n                recurringEvents = [],\n                filter          = e => (!passedFilter || passedFilter(e)) && (!storeFilterFn || storeFilterFn(e)),\n                baseEventFilter = e => notRecurring(e) && filter(e);\n            dayTime = dateIndex.dayTime;  // dayTime=null becomes DayTime instance for midnight\n            // We can't yet do this for just a resource.\n            if (resourceRecord) {\n                throw new Error('Querying for events for a resource and returning a date-keyed Map is not supported');\n            }\n            else {\n                // Add all recurring events which started before the end of our date range.\n                // There are none in Gantt projects\n                me.recurringEvents?.forEach(e => {\n                    if (dayTime.startOfDay(e.startDate) < endDate) {\n                        recurringEvents.push(e);\n                    }\n                });\n                // Iterate the date range, using the indices to find qualified events.\n                for (const date = new Date(startDate); date < endDate; date.setDate(date.getDate() + 1)) {\n                    let [coincidingEvents, key] = dateIndex.get(getDateIndex ? getDateIndex(date) : indexName, date, true);\n                    // The index entry may be there, but it could be empty.\n                    if (coincidingEvents?.size) {\n                        // Convert Set which index holds into an Array.\n                        // A recurring event doesn't go into the Map, its occurrences do.\n                        // Then filter by the passed filter and this Store's filter function\n                        // because events found from the date indices won't be filtered.\n                        coincidingEvents = [...coincidingEvents].filter(baseEventFilter);\n                        // Only create the entry for the day if there are events found\n                        if (coincidingEvents.length) {\n                            (dateMap.get(key) || (dateMap.set(key, []).get(key))).push(...coincidingEvents);\n                        }\n                    }\n                }\n            }\n            // Go through matching recurring events.\n            for (let i = 0, { length } = recurringEvents; i < length; i++) {\n                const\n                    e = recurringEvents[i],\n                    // For each recurring event, add occurrences if we are including occurrences else, add the base.\n                    // Then filter by the passed filter and this Store's filter function\n                    // because events found from the date indices won't be filtered.\n                    occurrences = (includeOccurrences ? e.getOccurrencesForDateRange(startDate, endDate) : [e]).filter(filter),\n                    lastDate    = DateHelper.add(endDate, 1, 'day');\n                // Add occurrences to dateMap\n                for (let bucket, i = 0, { length } = occurrences; i < length; i++) {\n                    const\n                        occurrence = occurrences[i],\n                        date = dayTime.startOfDay(occurrence.startDate),\n                        indexName = getDateIndex ? getDateIndex(date) : (startOnly ? 'startDate' : 'date'),\n                        lastIntersectingDate = (indexName === 'startDate') || !occurrence.durationMS\n                            ? DateHelper.add(date, 1, 'day')\n                            : DateHelper.min(occurrence.endDate || DateHelper.add(occurrence.startDate, occurrence.duration, occurrence.durationUnit), lastDate);\n                    // Loop through covered dates, adding to dateMap if required\n                    for (; date < lastIntersectingDate; date.setDate(date.getDate() + 1)) {\n                        const key = dayTime.dateKey(date);\n                        (bucket = dateMap.get(key)) || dateMap.set(key, bucket = []);\n                        bucket.push(occurrence);\n                    }\n                }\n            }\n        }\n        return dateMap;\n    }\n};\n", "import DH from '../../Core/helper/DateHelper.js';\n/**\n * @module Core/util/DayTime\n */\nconst\n    MILLIS_PER_MINUTE = 60 * 1000,\n    MILLIS_PER_HOUR   = 60 * MILLIS_PER_MINUTE,\n    MILLIS_PER_DAY    = 24 * MILLIS_PER_HOUR,\n    timeRe            = /(\\d+)?:?(\\d*)/;\n/**\n * This class encapsulates time of day calculations.\n *\n * The goal is to describe a \"day\" (a 24-hour period) that starts at a specific time (other than midnight). In a\n * calendar day view, this would look like this:\n *\n * ```text\n *              startShift=0                          startShift='12:00'\n *       00:00  +-------+                      12:00  +-------+\n *              |       |                             |       |\n *       01:00  |- - - -|                      13:00  |- - - -|\n *                 ...                                   ...\n *              |       |                             |       |\n *       08:00  |- - - -|   <-- timeStart -->  20:00  |- - - -|\n *              |       |                             |       |\n *       09:00  |- - - -|                      21:00  |- - - -|\n *              |       |                             |       |\n *       10:00  |- - - -|                      22:00  |- - - -|\n *              |       |                             |       |\n *       11:00  |- - - -|                      23:00  |- - - -|\n *              |       |                             |       |\n *       12:00  |- - - -|                      00:00  |- - - -|\n *              |       |                             |       |\n *       13:00  |- - - -|                      01:00  |- - - -|\n *              |       |                             |       |\n *       14:00  |- - - -|                      02:00  |- - - -|\n *              |       |                             |       |\n *       15:00  |- - - -|                      03:00  |- - - -|\n *              |       |                             |       |\n *       16:00  |- - - -|                      04:00  |- - - -|\n *              |       |                             |       |\n *       17:00  |- - - -|    <-- timeEnd -->   05:00  |- - - -|\n *              |       |                             |       |\n *                 ...                                   ...\n *              |       |                             |       |\n *       23:00  |- - - -|                      11:00  |- - - -|\n *              |       |                             |       |\n *       00:00  +-------+                      12:00  +-------+\n * ```\n *\n * In a horizontal format with X for times to render:\n *\n * ```text\n *  startShift = 0\n *\n *      +---+---+---  --+---+---+---+--   --+---+---+---+--   --+---+\n *      |   |   |  ...  |   |XXX|XXX|  ...  |XXX|XXX|   |  ...  |   |\n *      +---+---+---  --+---+---+---+--   --+---+---+---+--   --+---+\n *      00  01  02      07  08  09  10      15  16  17  18      23  00\n *                          ^                       ^\n *                      timeStart               timeEnd\n *\n *  startShift = '12:00'\n *\n *      +---+---+---  --+---+---+---+--   --+---+---+---+--   --+---+\n *      |   |   |  ...  |   |XXX|XXX|X ... X|XXX|XXX|   |  ...  |   |\n *      +---+---+---  --+---+---+---+--   --+---+---+---+--   --+---+\n *      12  13  14      19  20  21  22      03  04  05  06      11  12\n *                          ^                       ^\n *                      timeStart               timeEnd\n * ```\n *\n * When the day wraps over midnight, it is describing this (note timeEnd < timeStart):\n *\n * ```text\n *      +---+---+---  --+---+---+---+--   --+---+---+---+--   --+---+\n *      |XXX|XXX|X ... X|XXX|   |   |  ...  |   |   |XXX|X ... X|XXX|\n *      +---+---+---  --+---+---+---+--   --+---+---+---+--   --+---+\n *      00  01  02      04  05  06  07      18  19  20  21      23  00\n *                          ^                       ^\n *                      timeEnd                 timeStart\n * ```\n *\n * @internal\n */\nexport default class DayTime {\n    /**\n     * Returns a string of \"HH:MM\" for a given time of day in milliseconds.\n     * @param {Number} timeOfDay The time of day in milliseconds.\n     * @returns {String}\n     * @private\n     */\n    static format(timeOfDay) {\n        const\n            h = Math.floor(timeOfDay / MILLIS_PER_HOUR),\n            m = Math.floor(timeOfDay / MILLIS_PER_MINUTE) % 60;\n        return `${h}:${m < 10 ? '0' : ''}${m}`;\n    }\n    /**\n     * Parses a time of day which may be a number (0-24 for the hour of the day) or a string in \"H:MM\" format and\n     * returns the time of day as a number of milliseconds.\n     *\n     * If `time` is a `Date` instance, its time of day is returned.\n     * @param {Date|Number|String} time\n     * @returns {Number}\n     * @private\n     */\n    static parse(time) {\n        const type = typeof time;\n        if (type === 'string') {\n            const match = timeRe.exec(time);\n            time = Number(match[1] || 0) * MILLIS_PER_HOUR + Number(match[2] || 0) * MILLIS_PER_MINUTE;\n        }\n        else if (type !== 'number') {\n            time = DH.getTimeOfDay(time);\n        }\n        else if (time <= 24) {  // if number of hours (as provided during config)\n            time *= MILLIS_PER_HOUR;\n        }\n        return Math.min(Math.max(Math.floor(time), 0), MILLIS_PER_DAY);\n    }\n    constructor(config) {\n        let startShift = 0,\n            startTime, endTime;\n        if (config?.isDayView) {\n            // These are raw configs in hrs or 'HH:MM' on construction and millis after:\n            startShift = config.dayStartShift;\n            startTime = config.dayStartTime;\n            endTime = config.dayEndTime;\n        }\n        else if (typeof config === 'number') {\n            startShift = startTime = endTime = config;\n        }\n        else if (config) {\n            /**\n             * Either the hour number or a *24 hour* `HH:MM` string denoting the start time for the day. This is\n             * midnight by default.\n             * @config {Number|String} startShift\n             * @default 0\n             */\n            startShift = config.startShift;\n            /**\n             * Either the hour number or a *24 hour* `HH:MM` string denoting the first visible time of day. You can also\n             * set this value to a ms timestamp representing time from midnight.\n             * @config {Number|String} timeStart\n             * @default 0\n             */\n            startTime = config.timeStart;\n            /**\n             * Either the hour number or a *24 hour* `HH:MM` string denoting the last visible time of day. You can also\n             * set this value to a ms timestamp representing time from midnight.\n             * @config {Number|String} timeEnd\n             * @default 24\n             */\n            endTime = config.timeEnd;\n        }\n        this.startShift = startShift = DayTime.parse(startShift || 0);\n        this.timeEnd    = ((endTime == null)\n            ? (startShift + MILLIS_PER_DAY) % MILLIS_PER_DAY\n            : DayTime.parse(endTime)) || MILLIS_PER_DAY;\n        this.timeStart  = (startTime == null) ? startShift : DayTime.parse(startTime);\n    }\n    get startHour() {\n        return Math.floor(this.timeStart / MILLIS_PER_HOUR);\n    }\n    get endHour() {\n        return Math.floor(this.timeEnd / MILLIS_PER_HOUR);\n    }\n    /**\n     * The number of milliseconds from the day's `startShift` to its `timeStart`.\n     * @member {Number}\n     */\n    get startTimeOffsetMs() {\n        const { startShift, timeStart } = this;\n        return (timeStart < startShift) ? MILLIS_PER_DAY - startShift + timeStart : (timeStart - startShift);\n    }\n    /**\n     * The `Date` object for the most recently started, shifted day. The time of this `Date` will be the `startShift`.\n     * It is possible for this date to be yesterday on a midnight-based calendar. For example, if the `startShift` is\n     * 6PM and the current time is 6AM on May 20, this value will be 6PM of May 19 (the most recently started day).\n     * @member {Date}\n     */\n    get today() {\n        return this.startOfDay(new Date());\n    }\n    /**\n     * Returns `Date` object for the nearest (shifted) day ending after the given `date`. The time of this `Date` will\n     * be the `startShift`.\n     *\n     * It is possible for this date to be in the next day on a midnight-based calendar. For example, if the `startShift`\n     * is 6PM and `date` is 7PM on May 20, this method will return 6PM of May 21 (the nearest day ending).\n     * @param {Date} date The date for which to find the nearest day ending.\n     * @returns {Date}\n     */\n    ceil(date) {\n        const ret = this.startOfDay(date);\n        if (ret < date) {\n            ret.setDate(ret.getDate() + 1);\n        }\n        return ret;\n    }\n    /**\n     * Returns `true` if the time of day for the given `date` is between `timeStart` and `timeEnd`.\n     * @param {Date|Number|String} date The hour number, 'HH:MM' time or a `Date` instance to test.\n     * @returns {Boolean}\n     */\n    contains(date) {\n        return !this.outside(date);\n    }\n    /**\n     * Returns a \"YYYY-MM-DD\" string for the given `date`. This value will match the `date` if the time of day is at or\n     * after `startShift`, but will be the prior date otherwise.\n     * @param {Date|Number} date The date from which to compute the 'YYYY-MM-DD' key.\n     * @returns {String}\n     */\n    dateKey(date) {\n        date = this.shiftDate(date, -1);\n        return DH.makeKey(date);\n    }\n    /**\n     * Returns a `Date` instance with `startShift` as the time of day and the Y/M/D of the given `date`.\n     * @param {Date} date The date's year, month, and day values.\n     * @returns {Date}\n     */\n    dayOfDate(date) {\n        return this.shiftDate(DH.clearTime(date));  // return the Date w/the matching YYYY-MM-DD value\n    }\n    /**\n     * Returns the day of week (0-8) for the given `date`. This value will match the `date` if the time of day is at or\n     * after `startShift`, but will be the prior day otherwise.\n     * @param {Date|Number} date The date from which to compute the day of week.\n     * @returns {Number}\n     */\n    dayOfWeek(date) {\n        date = this.shiftDate(date, -1);\n        return date.getDay();\n    }\n    /**\n     * Returns the difference between the time of day of the given `date` and `timeStart` in the specified time `unit`.\n     * @param {Date|Number|String} date The hour number, 'HH:MM' time or a `Date` instance.\n     * @param {String} unit The desired unit of time to return (see {@link Core.helper.DateHelper#function-as-static}).\n     * @returns {Number}\n     */\n    delta(date, unit = 'ms') {\n        const\n            { timeStart } = this,\n            time = DayTime.parse(date),\n            t = ((this.startShift && time < timeStart) ? time + MILLIS_PER_DAY : time) - timeStart;\n        return (unit === 'ms') ? t : DH.as(unit, t, 'ms');\n    }\n    /**\n     * Returns the duration of the visible day (between `timeStart` and `timeEnd`) in the specified time `unit`.\n     * @param {String} unit The desired unit of time to return (see {@link Core.helper.DateHelper#function-as-static}).\n     * @returns {Number}\n     */\n    duration(unit = 'ms') {\n        const\n            { timeStart, timeEnd } = this,\n            millis = (timeStart < timeEnd) ? timeEnd - timeStart : (MILLIS_PER_DAY - timeStart + timeEnd);\n        return (unit === 'ms') ? millis : DH.as(unit, millis, 'ms');\n    }\n    /**\n     * Returns `true` if this instance describes the same day as the `other`.\n     * @param {Core.util.DayTime} other The other instance to which `this` instance should be tested for equality.\n     * @returns {Boolean}\n     */\n    equals(other) {\n        // we only need on \"?.\" operator since we short-circuit\n        return this.startShift === other?.startShift && this.timeStart === other.timeStart && this.timeEnd === other.timeEnd;\n    }\n    /**\n     * Returns `true` if the times of day described by `startDate` and `endDate` intersect the visible time of this day.\n     * @param {Date} startDate The start date of the date range or an event record containing both startDate and endDate\n     * fields.\n     * @param {Date} [endDate] The end date if `startDate` is not an event record.\n     * @returns {Boolean}\n     */\n    intersects(startDate, endDate) {\n        const\n            me                     = this,\n            { timeStart, timeEnd } = me,\n            [date0, date1]         = me._dateRangeArgs(startDate, endDate),\n            [start, end]           = me.timeRange(date0, date1);\n        if (timeStart < timeEnd) {\n            if (start < end) {\n                return start < timeEnd && timeStart <= end;\n            }\n            return start < timeEnd || timeStart <= end;\n        }\n        return !(start < end) || start < timeEnd || timeStart <= end;\n    }\n    /**\n     * Returns `true` if the given date range is contained within one day.\n     * @param {Date} startDate The start date of the date range or an event record containing both startDate and endDate\n     * fields.\n     * @param {Date} [endDate] The end date if `startDate` is not an event record.\n     * @returns {Boolean}\n     */\n    isIntraDay(startDate, endDate) {\n        const\n            me             = this,\n            [date0, date1] = me._dateRangeArgs(startDate, endDate),\n            dayStart       = me.startOfDay(date0),\n            diff           = MILLIS_PER_DAY - DH.diff(dayStart, date1, 'ms');\n        // Not <= to match isInterDay\n        if (diff < 0) {\n            return false;\n        }\n        // diff > 0 means less than 24hrs, so intraDay... diff==0 means date1 was EOD so we are intraDay if date0 is not\n        // also at EOD.\n        return diff > 0 || dayStart < date0;\n    }\n    /**\n     * Returns `true` if the given date range or event crosses the day boundary.\n     * @param {Date} startDate The start date of the date range or an event record containing both startDate and endDate\n     * fields.\n     * @param {Date} [endDate] The end date if `startDate` is not an event record.\n     * @returns {Boolean}\n     */\n    isInterDay(timeSpan) {\n        return timeSpan.allDay || !this.isIntraDay(...arguments);\n    }\n    /**\n     * Returns -1, 0, or 1 based on whether the time of day for the given `date` is before `timeStart` (-1), or after\n     * `timeEnd` (1), or between these times (0).\n     * @param {Date|Number|String} date The hour number, 'HH:MM' time or a `Date` instance to test.\n     * @returns {Number}\n     */\n    outside(date) {\n        const\n            { startShift, timeStart, timeEnd } = this,\n            time = DayTime.parse(date);\n        if (timeStart < timeEnd) {\n            /*\n             *      +---+---+---  --+---+---+---+--   --+---+---+---+--   --+---+\n             *      |   |   |  ...  |   |XXX|XXX|  ...  |XXX|XXX|   |  ...  |   |\n             *      +---+---+---  --+---+---+---+--   --+---+---+---+--   --+---+\n             *      00  01  02      07  08  09  10      15  16  17  18      23  00\n             *                          ^                       ^\n             *                      timeStart               timeEnd\n             */\n            if (time < timeStart) {\n                return (time < startShift) ? 1 : -1;\n            }\n            if (time < timeEnd) {\n                return 0;\n            }\n            return (time < startShift) ? -1 : 1;\n        }\n        /*\n         *      +---+---+---  --+---+---+---+--   --+---+---+---+--   --+---+\n         *      |XXX|XXX|X ... X|XXX|   |   |  ...  |   |   |XXX|X ... X|XXX|\n         *      +---+---+---  --+---+---+---+--   --+---+---+---+--   --+---+\n         *      00  01  02      04  05  06  07      18  19  20  21      23  00\n         *                          ^                       ^\n         *                      timeEnd                 timeStart\n         */\n        if (time < timeEnd || time >= timeStart) {\n            return 0;\n        }\n        return (time < startShift) ? 1 : -1;\n    }\n    parseKey(key) {\n        return this.dayOfDate(DH.parseKey(key));\n    }\n    /**\n     * Returns the given `date` shifted forward (`direction` > 0) or backward (`direction` < 0) by the `startShift`.\n     * @param {Number|Date} date The date as a `Date` or the millisecond UTC epoch.\n     * @param {Number} direction A value > 0 to shift `date` forward, or < 0 to shift it backwards.\n     * @returns {Date}\n     */\n    shiftDate(date, direction = 1) {\n        const\n            { startShift } = this,\n            type = typeof date;\n        date = (type === 'number') ? new Date(date) : (type === 'string' ? DH.parse(date) : new Date(date.getTime()));\n        // Not this:\n        // return (direction && startShift) ? DH.add(date, (direction > 0) ? startShift : -startShift, 'ms') : date;\n        // the DH.add() goes via UTC timestamp and so will not end on the correct time of day when DST is hit\n        if (direction && startShift) {\n            date.setMilliseconds((direction > 0) ? startShift : -startShift);\n        }\n        return date;\n    }\n    /**\n     * Sorts the given set of `events` by the maximum of `startDate` and `startOfDay` for the given `date`, followed\n     * by `duration` in case of a tie.\n     * @param {Date} date The day for which events are to be sorted.\n     * @param {Object[]} events The events to sort, typically an `Scheduler.model.EventModel[]` but any objects with\n     * both `startDate` and `endDate` fields are acceptable.\n     * @returns {Object[]} The passed `events` array.\n     * @internal\n     */\n    sortEvents(date, events) {\n        const startOfDay = this.startOfDay(date);\n        return events?.sort((event1, event2) => {\n            event1 = event1.eventRecord || event1;\n            event2 = event2.eventRecord || event2;\n            let { startDate: start1 } = event1,\n                { startDate: start2 } = event2;\n            // Unscheduled events sort to the top.\n            if (!start1) {\n                return -1;\n            }\n            if (!start2) {\n                return 1;\n            }\n            // Limit startDates to the start of the day. In other words, all events that start before \"midnight\" are\n            // equally considered as starting at midnight:\n            start1 = (start1 < startOfDay) ? startOfDay : start1;\n            start2 = (start2 < startOfDay) ? startOfDay : start2;\n            // Sort by start timestamp first, then duration with respect to clipped start dates.\n            return start1 - start2 || (event2.endDate - start2) - (event1.endDate - start1);\n        });\n    }\n    /**\n     * Returns `Date` object for the nearest started (shifted) day prior to the given `date`. The time of this `Date`\n     * will be the `startShift`.\n     *\n     * It is possible for this date to be in the prior day on a midnight-based calendar. For example, if the `startShift`\n     * is 6PM and `date` is 6AM on May 20, this method will return 6PM of May 19 (the nearest started day).\n     * @param {Date} date The date for which to find the nearest started day.\n     * @returns {Date}\n     */\n    startOfDay(date) {\n        date = this.shiftDate(date, -1);\n        date = DH.clearTime(date);\n        date = this.shiftDate(date);\n        return date;\n    }\n    /**\n     * Returns a range of {@link Core.helper.DateHelper#function-getTimeOfDay-static times of day} for the given\n     * date range.\n     * @param {Date} startDate The start date of the date range or an event record containing both `startDate` and `endDate` fields\n     * @param {Date} [endDate] The end date if `startDate` is not an event record\n     * @returns {Number[]}\n     */\n    timeRange(startDate, endDate) {\n        const [start, end] = this._dateRangeArgs(startDate, endDate);\n        return [DH.getTimeOfDay(start), DH.getTimeOfDay(end)];\n    }\n    toString() {\n        const\n            { startShift, timeEnd, timeStart } = this,\n            suffix = startShift ? `@${DayTime.format(startShift)}` : '',\n            prefix = DayTime.format(timeStart);\n        if (timeStart === timeEnd) {\n            return startShift ? suffix : prefix;\n        }\n        return `${prefix}-${DayTime.format(timeEnd)}${suffix}`;\n    };\n    /**\n     * Decodes the arguments and returns a pair of `Date` objects for the start and end of the date range.\n     * @param {Date} startDate The start date of the date range or an event record containing both startDate and endDate\n     * fields.\n     * @param {Date} [endDate] The end date if `startDate` is not an event record.\n     * @returns {Date[]}\n     * @private\n     */\n    _dateRangeArgs(startDate, endDate) {\n        return startDate.isModel ? [startDate.startDate, startDate.endingDate] : [startDate, endDate];\n    }\n}\n/**\n * The `DayTime` instance representing a canonical calendar day (starting at midnight).\n * @member {Core.util.DayTime} MIDNIGHT\n * @static\n * @readonly\n */\nDayTime.MIDNIGHT = new DayTime({\n    startShift : 0,\n    timeStart  : 0,\n    timeEnd    : 24\n});\nDayTime.MILLIS_PER_MINUTE = MILLIS_PER_MINUTE;\nDayTime.MILLIS_PER_HOUR = MILLIS_PER_HOUR;\nDayTime.MILLIS_PER_DAY = MILLIS_PER_DAY;\nDayTime._$name = 'DayTime';", "import DayTime from '../../../Core/util/DayTime.js';\n/**\n * @module Scheduler/data/util/EventDayIndex\n */\nconst\n    // Maps an index name that can be requested to its storage property on the EventDayIndex instance:\n    indexNameMap = {\n        date      : '_dateIndex',\n        startDate : '_startDateIndex'\n    },\n    indexProps         = Object.values(indexNameMap),\n    emptyArray         = Object.freeze([]),\n    { MILLIS_PER_DAY } = DayTime;\n/**\n * This utility class is used by event stores to index events by their day (a \"YYYY-MM-DD\" value, also known as a\n * \"date key\"). This key is produced by a {@link Core.util.DayTime} instance. If two `DayTime` instances have a common\n * `startShift`, they can share an index.\n *\n * @internal\n */\nexport default class EventDayIndex {\n    constructor(store, dayTime) {\n        /**\n         * The `DayTime` definition for this index. This is set to the initial DayTime instance but can be used for\n         * any other {@link #function-register registered} `DayTime` instances since they all posses the same value for\n         * `startShift`.\n         *\n         * This defaults to {@link Core.util.DayTime#property-MIDNIGHT-static}.\n         * @member {Core.util.DayTime} dayTime\n         * @readonly\n         */\n        this.dayTime = dayTime || DayTime.MIDNIGHT;\n        /**\n         * The owning store instance of this index.\n         * @member {Scheduler.data.EventStore} store\n         * @private\n         * @readonly\n         */\n        this.store = store;\n        /**\n         * The `DayTime` instances {@link #function-register registered} with this index instance. As instances are\n         * {@link #function-unregister unregistered} they are removed from this array. Once this array is empty, this\n         * index can be discarded.\n         * @member {Core.util.DayTime[]} users\n         * @private\n         */\n        this.users = [this.dayTime];\n    }\n    /**\n     * Adds an event record to the specified index (either \"startDate\" or \"date\") for a given `date`.\n     * @param {String} indexName The index to which the event record is to be added (either \"startDate\" or \"date\").\n     * @param {Date|Number} date A date for which the event record overlaps. The {@link Core.util.DayTime#function-dateKey}\n     * method is used to convert this date to a \"YYYY-MM-DD\" key for the index.\n     * @param {Scheduler.model.EventModel} eventRecord The event record.\n     * @private\n     */\n    add(indexName, date, eventRecord) {\n        const\n            index    = this[indexNameMap[indexName]],\n            key      = this.dayTime.dateKey(date),\n            entry    = index[key] || (index[key] = new Set());\n        entry.add(eventRecord);\n    }\n    /**\n     * Adds an event record to all indexes for all dates which the event overlaps.\n     * @param {Scheduler.model.EventModel} eventRecord The event record.\n     * @private\n     */\n    addEvent(eventRecord) {\n        let dateMS = this.dayTime.startOfDay(eventRecord.startDate)?.getTime(),\n            endDateMS;\n        if (dateMS) {\n            endDateMS = eventRecord.endDate?.getTime() ?? dateMS;\n            this.add('startDate', dateMS, eventRecord);\n            do {\n                this.add('date', dateMS, eventRecord);\n                dateMS += MILLIS_PER_DAY;\n            } while (dateMS < endDateMS);\n        }\n    }\n    /**\n     * Clear this index.\n     */\n    clear() {\n        indexProps.forEach(name => this[name] = Object.create(null));\n    }\n    /**\n     * Returns an object that has properties named by the {@link Core.util.DayTime#function-dateKey} method, or the\n     * array of event records if a `date` is specified, or the event record array and the date key in a 2-element array\n     * if `returnKey` is `true`.\n     * @param {String} indexName The name of the desired index (either 'date' or 'startDate').\n     * @param {Number|Date} date The date as a `Date` or the millisecond UTC epoch. When passed, this method will return\n     * the array of event records for this date.\n     * @param {Boolean} [returnKey] Specify `true` to return the date key along with the event record array.\n     * @returns {Object|Scheduler.model.EventModel[]}\n     */\n    get(indexName, date, returnKey) {\n        // Date indices are created on first usage and after that kept up to date on changes\n        !this.initialized && this.initialize();\n        let ret = this[indexNameMap[indexName]],\n            key;\n        if (date) {\n            key = this.dayTime.dateKey(date);\n            ret = returnKey ? [ret[key], key] : ret[key];\n        }\n        return ret;\n    }\n    /**\n     * Called when this index is first used. Once called, further store changes will be used to maintain this index.\n     * @private\n     */\n    initialize() {\n        this.initialized = true;\n        this.clear();\n        this.sync('splice', this.store.storage.allValues);\n    }\n    invalidate() {\n        this.initialized = false;\n        indexProps.forEach(name => this[name] = null);\n    }\n    /**\n     * Returns `true` if the given `dayTime` matches this index.\n     * @param {Core.util.DayTime} dayTime\n     * @returns {Boolean}\n     */\n    matches(dayTime) {\n        return this.dayTime.startShift === dayTime.startShift;\n    }\n    /**\n     * Removes an event record from the specified index (either \"startDate\" or \"date\") for a given `date`.\n     * @param {String} indexName The index to which the event record is to be removed (either \"startDate\" or \"date\").\n     * @param {Date|Number} date A date for which the event record overlaps. The {@link Core.util.DayTime#function-dateKey}\n     * method is used to convert this date to a \"YYYY-MM-DD\" key for the index.\n     * @param {Scheduler.model.EventModel} eventRecord The event record.\n     * @private\n     */\n    remove(indexName, date, eventRecord) {\n        const\n            index = this[indexNameMap[indexName]],\n            key   = this.dayTime.dateKey(date),\n            entry = index[key];\n        if (entry) {\n            entry.delete(eventRecord);\n        }\n    }\n    /**\n     * Removes an event record from all indexes for all dates which the event overlaps.\n     * @param {Scheduler.model.EventModel} eventRecord The event record.\n     * @param {Date} startDate The start date for the event. This may be different from the `startDate` of the given\n     * `eventRecord` when the event is rescheduled.\n     * @param {Date} endDate The end date for the event. This may be different from the `endDate` of the given\n     * `eventRecord` when the event is rescheduled.\n     * @private\n     */\n    removeEvent(eventRecord, startDate, endDate) {\n        let dateMS = this.dayTime.startOfDay(startDate)?.getTime(),\n            endDateMS;\n        if (dateMS) {\n            endDateMS = endDate?.getTime() ?? dateMS;\n            this.remove('startDate', dateMS, eventRecord);\n            do {\n                this.remove('date', dateMS, eventRecord);\n                dateMS += MILLIS_PER_DAY;\n            } while (dateMS < endDateMS);\n        }\n    }\n    sync(action, added, removed, replaced, wasSet) {\n        added = added || emptyArray;\n        removed = removed || emptyArray;\n        const\n            me            = this,\n            addedCount    = added.length,\n            removedCount  = removed.length,\n            replacedCount = replaced?.length;\n        let i, newEvent, outgoingEvent;\n        if (!me.initialized) {\n            return;\n        }\n        switch (action) {\n            case 'clear':\n                me.clear();\n                break;\n            // Add and remove\n            case 'splice':\n                // Handle replacement of records by instances with same ID\n                if (replacedCount) {\n                    added = added.slice();\n                    removed = removed.slice();\n                    for (i = 0; i < replacedCount; i++) {\n                        removed.push(replaced[i][0]);\n                        added.push(replaced[i][1]);\n                    }\n                }\n                // Remove entries from indices\n                if (removedCount) {\n                    for (i = 0; i < removedCount; i++) {\n                        outgoingEvent = removed[i];\n                        me.removeEvent(outgoingEvent, outgoingEvent.startDate, outgoingEvent.endDate);\n                    }\n                }\n                // Add entries to indices\n                if (addedCount) {\n                    for (i = 0; i < addedCount; i++) {\n                        newEvent = added[i];\n                        // Can only be date-indexed if it's scheduled.\n                        // Also ignore parent events (likely using a Gantt project)\n                        if (newEvent.isScheduled && !newEvent.isParent) {\n                            me.addEvent(newEvent);\n                        }\n                    }\n                }\n                break;\n            // invoked when the start or end changes so that the event can be re-indexed.\n            case 'reschedule':\n                outgoingEvent = added[0];\n                me.removeEvent(outgoingEvent, wasSet.startDate?.oldValue || outgoingEvent.startDate,\n                    wasSet.endDate?.oldValue || outgoingEvent.endDate);\n                // Now process as a splice with an add and no removes.\n                me.sync('splice', added);\n                break;\n        }\n    }\n    /**\n     * This method registers a `dayTime` instance with this index in the `users` array.\n     * @param {Core.util.DayTime} dayTime The instance to register.\n     */\n    register(dayTime) {\n        this.users.push(dayTime);\n    }\n    /**\n     * This method unregisters a `dayTime` instance, removing it from the `users` array. This method returns `true` if\n     * this was the last registered instance and this index is no longer needed.\n     * @param {Core.util.DayTime} dayTime The instance to register.\n     * @returns {Boolean}\n     */\n    unregister(dayTime) {\n        const\n            { users } = this,\n            i = users.indexOf(dayTime);\n        if (i > -1) {\n            users.splice(i, 1);\n        }\n        return !users.length;\n    }\n};\n// To avoid shape changes:\nconst proto = EventDayIndex.prototype;\nindexProps.forEach(name => proto[name] = null);\nproto.initialized = false;\nEventDayIndex._$name = 'EventDayIndex';", "import DayTime from '../../../Core/util/DayTime.js';\nimport EventDayIndex from '../util/EventDayIndex.js';\n/**\n * @module Scheduler/data/mixin/DayIndexMixin\n */\nconst { MIDNIGHT } = DayTime;\n/**\n * Mixing handling Calendars day indices.\n *\n * Consumed by EventStore in Scheduler & Scheduler Pro and TaskStore in Gantt.\n *\n * @mixin\n * @internal\n */\nexport default Target => class DayIndexMixin extends Target {\n    static $name = 'DayIndexMixin';\n    construct(config) {\n        super.construct(config);\n        this.dayIndices = null;\n    }\n    //region Keeping index in sync\n    // Override to syncIndices on initial load\n    afterLoadData() {\n        this.syncIndices('splice', this.storage.allValues);\n        super.afterLoadData?.();\n    }\n    /**\n     * Responds to mutations of the underlying storage Collection.\n     *\n     * Maintain indices for fast finding of events by date.\n     * @param {Object} event\n     * @private\n     */\n    onDataChange({ action, added, removed, replaced }) {\n        // Indices must be synced before responding to change\n        this.syncIndices(action, added, removed, replaced);\n        super.onDataChange(...arguments);\n    }\n    onDataReplaced(action, data) {\n        // Indices must be synced before responding to change\n        this.syncIndices('clear');\n        this.syncIndices('splice', this.storage.values);\n        super.onDataReplaced(action, data);\n    }\n    onModelChange(record, toSet, wasSet, silent, fromRelationUpdate) {\n        // Ensure by-date indices are up to date.\n        if (('startDate' in wasSet) || ('endDate' in wasSet)) {\n            this.syncIndices('reschedule', [record], null, null, wasSet);\n        }\n        super.onModelChange(...arguments);\n    }\n    //endregion\n    //region Index\n    /**\n     * Invalidates associated day indices.\n     * @internal\n     */\n    invalidateDayIndices() {\n        this.dayIndices?.forEach(dayIndex => dayIndex.invalidate());\n    }\n    /**\n     * Registers a `DayTime` instance, creating an `EventDayIndex` for each distinct `startShift`. This index is\n     * maintained until all instances with a matching `startShift` are {@link #function-unregisterDayIndex unregistered}.\n     * @param {Core.util.DayTime} dayTime The instance to register.\n     * @internal\n     * @category Indexing\n     */\n    registerDayIndex(dayTime) {\n        const\n            me = this,\n            dayIndices = me.dayIndices || (me.dayIndices = []);\n        let dayIndex, i;\n        for (i = 0; !dayIndex && i < dayIndices.length; ++i) {\n            if (dayIndices[i].matches(dayTime)) {\n                (dayIndex = dayIndices[i]).register(dayTime);\n            }\n        }\n        !dayIndex && dayIndices.push(dayIndex = new EventDayIndex(me, dayTime));\n        return dayIndex;\n    }\n    syncIndices(...args) {\n        this.dayIndices?.forEach(dayIndex => dayIndex.sync(...args));\n    }\n    /**\n     * Removes a registered `DayTime` instance. If this is the last instance registered to an `EventDayIndex`, that\n     * index is removed.\n     * @param {Core.util.DayTime} dayTime The instance to unregister.\n     * @internal\n     * @category Indexing\n     */\n    unregisterDayIndex(dayTime) {\n        const\n            me = this,\n            { dayIndices } = me;\n        for (let i = dayIndices?.length; i-- > 0; /* empty */) {\n            if (dayIndices[i].matches(dayTime)) {\n                if (dayIndices[i].unregister(dayTime)) {\n                    dayIndices.splice(i, 1);\n                }\n                break;\n            }\n        }\n    }\n    /**\n     * Returns the `EventDayIndex` to use for the given `DayTime` instance. This may be the primary instance or a\n     * child instance created by {@link #function-registerDayIndex}.\n     * @param {Core.util.DayTime} dayTime The `DayTime` of the desired index.\n     * @returns {Scheduler.data.util.EventDayIndex}\n     * @private\n     * @category Indexing\n     */\n    useDayIndex(dayTime) {\n        const\n            me             = this,\n            { dayIndices } = me;\n        dayTime = dayTime || MIDNIGHT;\n        for (let i = 0; dayIndices && i < dayIndices.length; ++i) {\n            if (dayIndices[i].matches(dayTime)) {\n                return dayIndices[i];\n            }\n        }\n        if (dayTime.startShift) {\n            throw new Error(`No day index registered for ${dayTime} on ${me.id}`);\n        }\n        return me.registerDayIndex(MIDNIGHT);\n    }\n    //endregion\n};\n", "/**\n * @module Scheduler/data/mixin/SharedEventStoreMixin\n */\n/**\n * This is a mixin, containing functionality related to managing events.\n *\n * It is consumed by the regular {@link Scheduler.data.EventStore} class and Scheduler Pros counterpart.\n *\n * @mixin\n */\nexport default Target => class SharedEventStoreMixin extends Target {\n    static get $name() {\n        return 'SharedEventStoreMixin';\n    }\n    /**\n     * Add events to the store.\n     *\n     * NOTE: Dates, durations and references (assignments, resources) on the events are determined async by a calculation\n     * engine. Thus they cannot be directly accessed after using this function.\n     *\n     * For example:\n     *\n     * ```javascript\n     * eventStore.add({ startDate, duration });\n     * // endDate is not yet calculated\n     * ```\n     *\n     * To guarantee data is in a calculated state, wait for calculations for finish:\n     *\n     * ```javascript\n     * eventStore.add({ startDate, duration });\n     * await eventStore.project.commitAsync();\n     * // endDate is calculated\n     * ```\n     *\n     * Alternatively use `addAsync()` instead:\n     *\n     * ```javascript\n     * await eventStore.addAsync({ startDate, duration });\n     * // endDate is calculated\n     * ```\n     *\n     * @param {Scheduler.model.EventModel|Scheduler.model.EventModel[]|EventModelConfig|EventModelConfig[]} records\n     * Array of records/data or a single record/data to add to store\n     * @param {Boolean} [silent] Specify `true` to suppress events\n     * @returns {Scheduler.model.EventModel[]} Added records\n     * @function add\n     * @category CRUD\n     */\n    /**\n     * Add events to the store and triggers calculations directly after. Await this function to have up to date data on\n     * the added events.\n     *\n     * ```javascript\n     * await eventStore.addAsync({ startDate, duration });\n     * // endDate is calculated\n     * ```\n     *\n     * @param {Scheduler.model.EventModel|Scheduler.model.EventModel[]|EventModelConfig|EventModelConfig[]} records\n     * Array of records/data or a single record/data to add to store\n     * @param {Boolean} [silent] Specify `true` to suppress events\n     * @returns {Scheduler.model.EventModel[]} Added records\n     * @function addAsync\n     * @category CRUD\n     * @async\n     */\n    /**\n     * Applies a new dataset to the EventStore. Use it to plug externally fetched data into the store.\n     *\n     * NOTE: Dates, durations and relations (assignments, resources) on the events are determined async by a calculation\n     * engine. Thus they cannot be directly accessed after assigning the new dataset.\n     *\n     * For example:\n     *\n     * ```javascript\n     * eventStore.data = [{ startDate, duration }];\n     * // eventStore.first.endDate is not yet calculated\n     * ```\n     *\n     * To guarantee data is in a calculated state, wait for calculations for finish:\n     *\n     * ```javascript\n     * eventStore.data = [{ startDate, duration }];\n     * await eventStore.project.commitAsync();\n     * // eventStore.first.endDate is calculated\n     * ```\n     *\n     * Alternatively use `loadDataAsync()` instead:\n     *\n     * ```javascript\n     * await eventStore.loadDataAsync([{ startDate, duration }]);\n     * // eventStore.first.endDate is calculated\n     * ```\n     *\n     * @member {EventModelConfig[]} data\n     * @category Records\n     */\n    /**\n     * Applies a new dataset to the EventStore and triggers calculations directly after. Use it to plug externally\n     * fetched data into the store.\n     *\n     * ```javascript\n     * await eventStore.loadDataAsync([{ startDate, duration }]);\n     * // eventStore.first.endDate is calculated\n     * ```\n     *\n     * @param {EventModelConfig[]} data Array of EventModel data objects\n     * @function loadDataAsync\n     * @category CRUD\n     * @async\n     */\n    static get defaultConfig() {\n        return {\n            /**\n             * CrudManager must load stores in the correct order. Lowest first.\n             * @private\n             */\n            loadPriority : 100,\n            /**\n             * CrudManager must sync stores in the correct order. Lowest first.\n             * @private\n             */\n            syncPriority : 200,\n            storeId : 'events',\n            /**\n             * Configure with `true` to also remove the event when removing the last assignment from the linked\n             * AssignmentStore. This config has not effect when using EventStore in legacy `resourceId`-mode.\n             * @config {Boolean}\n             * @default\n             * @category Common\n             */\n            removeUnassignedEvent : true,\n            /**\n             * Configure with `true` to force single-resource mode, an event can only be assigned to a single resource.\n             * If not provided, the mode will be inferred from\n             *\n             * 1. presence of an assignment store (i.e. multi-assignment)\n             * 2. presence of `resourceId` in the event store data (i.e. single assignment mode)\n             * @config {Boolean}\n             * @category Common\n             */\n            singleAssignment : null\n        };\n    }\n    /**\n     * Class used to represent records. Defaults to class EventModel.\n     * @member {Scheduler.model.EventModel} modelClass\n     * @typings {typeof EventModel}\n     * @category Records\n     */\n    construct(config) {\n        super.construct(config, true);\n        if (this.singleAssignment) {\n            this.usesSingleAssignment = true;\n        }\n        if (!this.modelClass.isEventModel) {\n            throw new Error('The model for the EventStore must subclass EventModel');\n        }\n    }\n    /**\n     * Appends a new record to the store\n     * @param {Scheduler.model.EventModel} record The record to append to the store\n     * @category CRUD\n     */\n    append(record) {\n        return this.add(record);\n    }\n    //region Project\n    get project() {\n        return super.project;\n    }\n    set project(project) {\n        super.project = project;\n        this.detachListeners('project');\n        if (project) {\n            // Project already has AssignmentStore instance? Attach to it.\n            if (project.assignmentStore?.isAssignmentStore) {\n                this.attachToAssignmentStore(project.assignmentStore);\n            }\n            // Accessing assignmentStore would trigger `assignmentStoreChange` event on the project, so we set up\n            // the listener after\n            project.ion({\n                name                  : 'project',\n                assignmentStoreChange : 'onProjectAssignmentStoreChange',\n                thisObj               : this,\n                prio                  : 200 // Before UI updates\n            });\n        }\n    }\n    //endregion\n    //region Single assignment\n    get usesSingleAssignment() {\n        if (this.isChained) {\n            return this.masterStore.usesSingleAssignment;\n        }\n        return this._usesSingleAssignment;\n    }\n    set usesSingleAssignment(value) {\n        this._usesSingleAssignment = value;\n    }\n    processRecords(eventRecords) {\n        const\n            { assignmentStore } = this,\n            assignmentsToAdd = [];\n        // Same as on `joinRecordsToStore`, when adding a number of event records CoreEventMixin#joinProject method\n        // will clear/rebuild cache in a loop. We raise this flag to skip invalidating assignment store indices for the time\n        // we are joining records to the store. When they're added and indices are read, we will invalidate them.\n        if (assignmentStore) {\n            assignmentStore.skipInvalidateIndices = true;\n        }\n        eventRecords = super.processRecords(eventRecords, assignmentStore && !this.stm?.isRestoring && (eventRecord => {\n            // AssignmentStore found, add an assignment to it if this is not a dataset operation\n            const resourceId = eventRecord.get('resourceId');\n            if (!eventRecord.reassignedFromReplace && resourceId != null) {\n                // Check if the event is already assigned to the resource, though it's not in the event store.\n                // It could happen when you remove an event, so both event and assignment records are removed,\n                // then you \"undo\" the action and the assignment is restored before the event is restored.\n                if (!assignmentStore.includesAssignment(eventRecord.id, resourceId)) {\n                    // Cannot use `event.assign(resourceId)` since event is not part of store yet\n                    // Using a bit shorter generated id to not look so ugly in DOM\n                    assignmentsToAdd.push({\n                        id      : assignmentStore.modelClass.generateId(''),\n                        resourceId,\n                        eventId : eventRecord.id\n                    });\n                }\n            }\n            // clear flag\n            eventRecord.reassignedFromReplace = false;\n        }) || undefined);\n        if (assignmentStore) {\n            assignmentStore.storage.invalidateIndices();\n            assignmentStore.skipInvalidateIndices = false;\n            assignmentStore.add(assignmentsToAdd);\n        }\n        return eventRecords;\n    }\n    joinRecordsToStore(records) {\n        const { assignmentStore } = this;\n        if (assignmentStore) {\n            // When adding a number of event records CoreEventMixin#joinProject method will clear/rebuild cache in a loop.\n            // We raise this flag to skip invalidating assignment store indices for the time we are joining records to\n            // the store. When they're added and indices are read, we will invalidate them.\n            assignmentStore.skipInvalidateIndices = true;\n            super.joinRecordsToStore(records);\n            assignmentStore.storage.invalidateIndices();\n            assignmentStore.skipInvalidateIndices = false;\n        }\n        else {\n            super.joinRecordsToStore(records);\n        }\n    }\n    processRecord(eventRecord, isDataset = false) {\n        eventRecord = super.processRecord(eventRecord, isDataset);\n        const resourceId = eventRecord.get('resourceId');\n        if (resourceId != null && !eventRecord.meta.skipEnforcingSingleAssignment) {\n            const\n                me                  = this,\n                { assignmentStore } = me,\n                existingRecord      = me.getById(eventRecord.id),\n                isReplacing         = existingRecord && existingRecord !== eventRecord && !isDataset;\n            // Replacing an existing event, repoint the resource of its assignment\n            // (already repointed to the new event by engine in EventStoreMixin)\n            if (isReplacing) {\n                // Have to look assignment up on store, removed by engine in super call above\n                const assignment = assignmentStore.find(e => e.eventId === eventRecord.id);\n                if (assignment) {\n                    assignment.resource = resourceId;\n                    eventRecord.reassignedFromReplace = true;\n                }\n            }\n            // No AssignmentStore assigned yet, need to process when that happens. Or if it is a dataset operation,\n            // processing will happen at the end of it to not add individual assignment (bad for performance)\n            else {\n                me.$processResourceIds = true;\n            }\n            // Flag that we have been loaded using resourceId, checked by CrudManager to exclude the internal\n            // AssignmentStore from sync\n            me.usesSingleAssignment = true;\n        }\n        return eventRecord;\n    }\n    processResourceIds() {\n        const\n            me              = this,\n            // When used in a standalone CrudManager, there is no direct link to the assignment store\n            assignmentStore = me.assignmentStore ?? me.crudManager?.assignmentStore;\n        if (me.$processResourceIds && assignmentStore?.isAssignmentStore && !(me.project?.isSharingAssignmentStore && me.isChained)) {\n            const assignments = [];\n            // resourceIds used during initialization, convert into assignments\n            me.forEach(eventRecord => {\n                const { resourceId, id : eventId } = eventRecord;\n                if (resourceId != null) {\n                    // Using a bit shorter generated id to not look so ugly in DOM\n                    assignments.push({\n                        id : assignmentStore.modelClass.generateId(''),\n                        resourceId,\n                        eventId\n                    });\n                }\n            });\n            // Disable as much as possible, since we are in full control of this store when using single assignment mode\n            assignmentStore.useRawData = {\n                disableDefaultValue     : true,\n                disableDuplicateIdCheck : true,\n                disableTypeConversion   : true\n            };\n            // Flag that throws in AssignmentStore if data is loaded some other way when using single assignment\n            assignmentStore.usesSingleAssignment = false;\n            // These assignments all use generated ids, and are not meant to be searialized anyway so bypass check\n            assignmentStore.verifyNoGeneratedIds = false;\n            assignmentStore.data = assignments;\n            assignmentStore.usesSingleAssignment = true;\n            me.$processResourceIds = false;\n        }\n    }\n    loadData() {\n        super.loadData(...arguments);\n        this.processResourceIds();\n    }\n    // Optionally remove unassigned events\n    onBeforeRemoveAssignment({ records }) {\n        const me = this;\n        if (\n            me.removeUnassignedEvent && !me.isRemoving && !me.isSettingData &&\n            !me.stm?.isRestoring && !me.usesSingleAssignment &&\n            // Do not remove unassigned events when syncing data, new assignments etc. might be synced afterwards\n            !me.assignmentStore.isSyncingDataOnLoad && !me.resourceStore.isSyncingDataOnLoad\n        ) {\n            const toRemove = new Set();\n            // Collect all events that are unassigned after the remove\n            records.forEach(assignmentRecord => {\n                const { event } = assignmentRecord;\n                // Assignment might not have an event or the event might already be removed\n                if (event && !event.isRemoved && event.assignments.every(a => records.includes(a))) {\n                    toRemove.add(event);\n                }\n            });\n            // And remove them\n            if (toRemove.size) {\n                me.remove([...toRemove]);\n            }\n        }\n    }\n    onProjectAssignmentStoreChange({ store }) {\n        this.attachToAssignmentStore(store);\n    }\n    attachToAssignmentStore(assignmentStore) {\n        const me = this;\n        me.detachListeners('assignmentStore');\n        if (assignmentStore) {\n            me.processResourceIds();\n            assignmentStore.ion({\n                name : 'assignmentStore',\n                // Adding an assignment in single assignment mode should set events resourceId if needed\n                addPreCommit({ records }) {\n                    if (me.usesSingleAssignment && !me.isSettingData && !me.isAssigning) {\n                        records.forEach(assignment => {\n                            const { event } = assignment;\n                            if (event?.isEvent && event.resourceId !== assignment.resourceId) {\n                                event.meta.isAssigning = true;\n                                event.set('resourceId', assignment.resourceId);\n                                event.meta.isAssigning = false;\n                            }\n                        });\n                    }\n                },\n                // Called both for remove and removeAll\n                beforeRemove : 'onBeforeRemoveAssignment',\n                // Removing an assignment in single assignment mode should set events resourceId to null\n                removePreCommit({ records }) {\n                    if (me.usesSingleAssignment) {\n                        records.forEach(assignment => {\n                            // With engine link to event is already broken when we get here, hence the lookup\n                            me.getById(assignment.eventId)?.set('resourceId', null);\n                        });\n                    }\n                },\n                removeAllPreCommit() {\n                    if (me.usesSingleAssignment && !me.isSettingData) {\n                        me.allRecords.forEach(eventRecord => eventRecord.set('resourceId', null));\n                    }\n                },\n                // Keep events resourceId in sync with assignment on changes in single assignment mode\n                update({ record, changes }) {\n                    if (me.usesSingleAssignment && 'resourceId' in changes) {\n                        const { event } = record;\n                        event.meta.isAssigning = true;\n                        event.set('resourceId', changes.resourceId.value);\n                        event.meta.isAssigning = false;\n                    }\n                },\n                thisObj : me\n            });\n        }\n    }\n    set data(data) {\n        this.isSettingData = true;\n        // When using single assignment, remove all assignments when loading a new set of events.\n        // Don't do it when filling a chained store, assignments are for the master store\n        if (this.usesSingleAssignment && !this.syncDataOnLoad && !this.isChained) {\n            this.assignmentStore.removeAll(true);\n        }\n        super.data = data;\n        this.isSettingData = false;\n    }\n    // Override trigger to decorate update/change events with a flag if resourceId was the only thing changed, in which\n    // case the change most likely can be ignored since the assignment will also change\n    trigger(eventName, params) {\n        const { changes } = params || {};\n        // https://github.com/bryntum/support/issues/6610\n        // test: SchedulerPro/tests/data/UndoRedo.t.js, \"Should refresh the view after undoing the event copy-paste\"\n        // can not ignore this event when stm is restoring, because of the edge case in that ticket\n        if (changes && 'resourceId' in changes && Object.keys(changes).length === 1 && !this.stm?.isRestoring) {\n            params.isAssign = true;\n        }\n        return super.trigger(...arguments);\n    }\n    remove(records, ...args) {\n        const result = super.remove(records, ...args);\n        // Make sure assignment is removed with event when using single assignment\n        if (result.length && this.usesSingleAssignment) {\n            for (const eventRecord of result) {\n                if (!eventRecord.isOccurrence) {\n                    (this.assignmentStore || this.crudManager?.assignmentStore)?.remove(eventRecord.assignments, true);\n                }\n            }\n        }\n        return result;\n    }\n    //endregion\n};\n", "import Base from '../../../Core/Base.js';\nimport RecurringTimeSpansMixin from './RecurringTimeSpansMixin.js';\n/**\n * @module Scheduler/data/mixin/RecurringEventsMixin\n */\n/**\n * This mixin class provides recurrence functionality to the {@link Scheduler.data.EventStore event store}.\n * @extends Scheduler/data/mixin/RecurringTimeSpansMixin\n * @mixin\n */\nexport default Target => class RecurringEventsMixin extends RecurringTimeSpansMixin(Target || Base) {\n    static get $name() {\n        return 'RecurringEventsMixin';\n    }\n    /**\n     * Returns all the recurring events.\n     *\n     * **An alias for ** {@link Scheduler.data.mixin.RecurringTimeSpansMixin#function-getRecurringTimeSpans} method.\n     *\n     * @returns {Scheduler.model.EventModel[]} Array of recurring events.\n     * @category Recurrence\n     */\n    getRecurringEvents() {\n        return this.getRecurringTimeSpans();\n    }\n    isEventPersistable(event) {\n        // occurrences are not persistable\n        return super.isEventPersistable(event) && (!event.supportsRecurring || !event.isOccurrence);\n    }\n};\n", "import DH from '../../../Core/helper/DateHelper.js';\nimport ArrayHelper from '../../../Core/helper/ArrayHelper.js';\nconst\n    oneDayMS = 1000 * 60 * 60 * 24;\n/**\n * @module Scheduler/model/mixin/EventModelMixin\n */\n/**\n * Mixin that holds configuration shared between events in Scheduler and Scheduler Pro.\n * @mixin\n */\nexport default Target => class EventModelMixin extends Target {\n    static get $name() {\n        return 'EventModelMixin';\n    }\n    // Flag checked by EventStore to make sure it uses a valid subclass\n    static get isEventModel() {\n        return true;\n    }\n    /**\n     * Set value for the specified field(s), triggering engine calculations immediately. See\n     * {@link Core.data.Model#function-set Model#set()} for arguments.\n     *\n     * ```javascript\n     * eventRecord.set('duration', 4);\n     * // eventRecord.endDate is not yet calculated\n     *\n     * await eventRecord.setAsync('duration', 4);\n     * // eventRecord.endDate is calculated\n     * ```\n     *\n     * @param {String|Object} field The field to set value for, or an object with multiple values to set in one call\n     * @param {*} value Value to set\n     * @param {Boolean} [silent=false] Set to true to not trigger events. If event is recurring, occurrences won't be updated\n     * automatically.\n     * @function setAsync\n     * @category Editing\n     * @async\n     */\n    //region Fields\n    static get fields() {\n        return [\n            /**\n             * The start date of a time span (or Event / Task).\n             *\n             * Uses {@link Core/helper/DateHelper#property-defaultFormat-static DateHelper.defaultFormat} to convert a\n             * supplied string to a Date. To specify another format, either change that setting or subclass TimeSpan and\n             * change the dateFormat for this field.\n             *\n             * UI fields representing this data field are disabled for summary tasks. See {@link #function-isEditable}\n             * for details.\n             *\n             * Note that the field always returns a `Date`.\n             *\n             * Also note that modifying the `startDate` at runtime will move the event in time, without affecting its\n             * duration (with reservation for other scheduling logic affecting the duration). If you want to change the\n             * `startDate` and `duration`, use {@link Scheduler/model/TimeSpan#function-setStartDate} instead (passing\n             * `false` as the second argument).\n             *\n             * @field {Date} startDate\n             * @accepts {String|Date}\n             * @category Scheduling\n             */\n            /**\n             * The end date of a time span (or Event / Task).\n             *\n             * Uses {@link Core/helper/DateHelper#property-defaultFormat-static DateHelper.defaultFormat} to convert a\n             * supplied string to a Date. To specify another format, either change that setting or subclass TimeSpan and\n             * change the dateFormat for this field.\n             *\n             * UI fields representing this data field are disabled for summary tasks. See {@link #function-isEditable} for details.\n             *\n             * Note that the field always returns a `Date`.\n             *\n             * @field {Date} endDate\n             * @accepts {String|Date}\n             * @category Scheduling\n             */\n            /**\n             * The numeric part of the timespan's duration (the number of units).\n             *\n             * UI fields representing this data field are disabled for summary tasks. See {@link #function-isEditable}\n             * for details.\n             *\n             * @field {Number} duration\n             * @category Scheduling\n             */\n            /**\n             * Calculated field which encapsulates the duration's magnitude and unit. This field will not be persisted,\n             * setting it will update the {@link #field-duration} and\n             * {@link Scheduler.model.TimeSpan#field-durationUnit} fields.\n             *\n             * UI fields representing this data field are disabled for summary tasks. See {@link #function-isEditable}\n             * for details.\n             *\n             * @field {DurationConfig|Core.data.Duration} fullDuration\n             * @category Scheduling\n             */\n            /**\n             * The unique identifier of a task (mandatory)\n             * @field {String|Number} id\n             * @category Common\n             */\n            /**\n             * Id of the resource this event is associated with (only usable for single assignments). We recommend\n             * using assignments in an AssignmentStore over this approach. Internally any Event using `resourceId`\n             * will have an assignment in AssignmentStore generated.\n             * @field {String|Number} resourceId\n             * @category Common\n             */\n            {\n                name     : 'resourceId',\n                internal : true\n            },\n            /**\n             * The array of {@link Scheduler.model.ResourceModel resources} which are assigned to this event.\n             * @field {String|Number} resources\n             * @category Common\n             */\n            {\n                name   : 'resources',\n                column : {\n                    type : 'resourceassignment'\n                },\n                persist  : false,\n                internal : true\n            },\n            /**\n             * Specify false to prevent the event from being dragged (if EventDrag feature is used)\n             * @field {Boolean} draggable\n             * @default true\n             * @category Interaction\n             */\n            {\n                name         : 'draggable',\n                type         : 'boolean',\n                persist      : false,\n                defaultValue : true,\n                internal     : true\n            },\n            /**\n             * Specify `false` to prevent the event from being resized (if EventResize feature is used). You can also\n             * specify `'start'` or `'end'` to only allow resizing in one direction\n             * @field {Boolean|String} resizable\n             * @default true\n             * @category Interaction\n             */\n            {\n                name         : 'resizable',\n                persist      : false,\n                defaultValue : true,\n                internal     : true\n            }, // true, false, 'start' or 'end'\n            /**\n             * A field marking event as all day(s) spanning event.\n             * For example, a holiday day may be represented by a `startDate`, and the `allDay` flag.\n             * @field {Boolean} allDay\n             * @category Scheduling\n             */\n            {\n                name         : 'allDay',\n                type         : 'boolean',\n                defaultValue : false\n            },\n            /**\n             * Controls this events appearance, see Schedulers\n             * {@link Scheduler.view.mixin.TimelineEventRendering#config-eventStyle eventStyle config} for\n             * available options.\n             * @field {'plain'|'border'|'colored'|'hollow'|'line'|'dashed'|'minimal'|'rounded'|'calendar'|'interday'|null} eventStyle\n             * @category Styling\n             */\n            {\n                name     : 'eventStyle',\n                internal : true\n            },\n            /**\n             * Controls the primary color of the event, see Schedulers\n             * {@link Scheduler.view.mixin.TimelineEventRendering#config-eventColor eventColor config} for\n             * available colors.\n             * @field {'red'|'pink'|'purple'|'violet'|'indigo'|'blue'|'cyan'|'teal'|'green'|'lime'|'yellow'|'orange'|'deep-orange'|'gray'|'gantt-green'|String|null} eventColor\n             * @category Styling\n             */\n            {\n                name     : 'eventColor',\n                internal : true\n            },\n            /**\n             * Width (in px) to use for this milestone when using Scheduler#milestoneLayoutMode 'data'.\n             * @field {Number} milestoneWidth\n             * @category Styling\n             */\n            {\n                name     : 'milestoneWidth',\n                internal : true\n            },\n            /**\n             * Set this field to `false` to opt out of {@link Scheduler.feature.StickyEvents sticky event content}\n             * (keeping event text in view while scrolling).\n             * @field {Boolean} stickyContents\n             * @category Styling\n             */\n            {\n                name     : 'stickyContents',\n                internal : true\n            }\n        ];\n    }\n    //endregion\n    //region Id change\n    updateAssignmentEventIds() {\n        this.assigned.forEach(assignment => {\n            assignment.eventId = this.id;\n        });\n    }\n    syncId(value) {\n        super.syncId(value);\n        this.updateAssignmentEventIds();\n    }\n    //endregion\n    //region Resources\n    /**\n     * Returns all resources assigned to an event.\n     *\n     * @property {Scheduler.model.ResourceModel[]}\n     * @category Assignments & Resources\n     * @readonly\n     */\n    get resources() {\n        // Only include valid resources, to not have nulls in the result\n        return this.assignments.reduce((resources, { resource }) => {\n            resource && resources.push(resource.$original);\n            return resources;\n        }, []);\n    }\n    set resources(resources) {\n        resources = ArrayHelper.asArray(resources);\n        const\n            me             = this,\n            newResourceIds = resources.map(me.constructor.asId);\n        if (me.usesSingleAssignment) {\n            me.set('resourceId', newResourceIds[0]);\n        }\n        else {\n            const\n                existingResourceIds                     = me.assignments.map(a => a.resource.id),\n                { onlyInA : toAdd, onlyInB : toRemove } = ArrayHelper.delta(newResourceIds, existingResourceIds);\n            // Add first, remove after. Otherwise event might get removed with its last assignment\n            me.assignmentStore.add(toAdd.map(resourceId => ({ resource : resourceId, event : me })));\n            me.assignmentStore.remove(toRemove.map(resourceId => me.assignments.find(a => a.resource.id === resourceId)));\n        }\n    }\n    /**\n     * Iterate over all associated resources\n     * @private\n     * @category Assignments & Resources\n     */\n    forEachResource(fn, thisObj = this) {\n        for (const resource of this.resources) {\n            if (fn.call(thisObj, resource) === false) {\n                return;\n            }\n        }\n    }\n    /**\n     * Returns either the resource associated with this event (when called w/o `resourceId`) or resource\n     * with specified id.\n     *\n     * @param {String} [resourceId] To retrieve a specific resource\n     * @returns {Scheduler.model.ResourceModel}\n     * @category Assignments & Resources\n     */\n    getResource(resourceId) {\n        if (resourceId == null) {\n            return this.resource;\n        }\n        return this.resourceStore ? this.resourceStore.getById(resourceId) : null;\n    }\n    //endregion\n    //region Dates\n    get startDate() {\n        let dt;\n        if (this.isOccurrence) {\n            dt = this.get('startDate');\n        }\n        else {\n            // Micro optimization to avoid expensive super call. super will be hit in Scheduler Pro\n            dt = this._startDate ?? super.startDate;\n        }\n        if (this.allDay) {\n            dt = this.constructor.getAllDayStartDate(dt);\n        }\n        return dt;\n    }\n    set startDate(startDate) {\n        if (this.batching) {\n            this._startDate = startDate;\n            this.set({ startDate });\n        }\n        else {\n            super.startDate = startDate;\n        }\n    }\n    get endDate() {\n        let dt;\n        if (this.isOccurrence) {\n            dt = this.get('endDate');\n        }\n        else {\n            // Micro optimization to avoid expensive super call. super will be hit in Scheduler Pro\n            dt = this._endDate ?? super.endDate;\n        }\n        if (this.allDay) {\n            dt = this.constructor.getAllDayEndDate(dt);\n        }\n        return dt;\n    }\n    set endDate(endDate) {\n        if (this.batching) {\n            this._endDate = endDate;\n            this.set({ endDate });\n        }\n        else {\n            super.endDate = endDate;\n        }\n    }\n    // Cannot use `convert` method because it might be disabled by `useRawData : true` and we always need to calculate\n    // that value\n    get wrapStartDate() {\n        return this.startDate;\n    }\n    set wrapStartDate(value) {}\n    get wrapEndDate() {\n        return this.endDate;\n    }\n    set wrapEndDate(value) {}\n    /**\n     * Shift the dates for the date range by the passed amount and unit\n     * @param {'ms'|'s'|'m'|'h'|'d'|'w'|'M'|'y'} unit The unit to shift by, see {@link Core.helper.DateHelper}\n     * for more information on valid formats.\n     * @param {Number} amount The amount to shift\n     * @returns {Promise} A promise which is resolved when shift calculations are done\n     * @async\n     * @method shift\n     * @category Scheduling\n     */\n    //endregion\n    //region Is\n    // Used internally to differentiate between Event and ResourceTimeRange\n    get isEvent() {\n        return true;\n    }\n    /**\n     * Returns true if event can be drag and dropped\n     * @property {Boolean}\n     * @category Editing\n     */\n    get isDraggable() {\n        return !this.readOnly && this.draggable;\n    }\n    /**\n     * Returns true if event can be resized, but can additionally return 'start' or 'end' indicating how this event can\n     * be resized.\n     *\n     * Milestones and parent events (that are not manuallyScheduled) cannot be resized.\n     *\n     * @property {Boolean|String}\n     * @readonly\n     * @category Editing\n     */\n    get isResizable() {\n        return !this.isMilestone && (!this.isParent || this.manuallyScheduled) && this.resizable;\n    }\n    /**\n     * Returns false if the event is not persistable. By default it always is, override this getter if you need\n     * custom logic.\n     *\n     * @property {Boolean}\n     * @readonly\n     * @category Editing\n     */\n    get isPersistable() {\n        // Records not yet fully created cannot be persisted\n        return super.isPersistable && !this.isCreating;\n    }\n    endBatch() {\n        const\n            me = this,\n            { isPersistable : wasPersistable, meta : { batchChanges } } = me;\n        // Remove cached values\n        // https://github.com/bryntum/support/issues/3358\n        if (batchChanges) {\n            if ('endDate' in batchChanges) {\n                delete me._endDate;\n                // When project recalculates start/end date and committing changes to record it calls endBatch. In this\n                // case wrap dates become invalid and should be reset on the record. We do it by forcing `null` value.\n                // Possible scenarios include adding dependency or moving first event in a dependency chain.\n                // Covered by pro/features/BufferTimeDependencies.t\n                // wrap date is an internal field we should be fine without mapping\n                if (me.postamble) {\n                    me.wrapEndDate = null;\n                }\n            }\n            if ('startDate' in batchChanges) {\n                delete me._startDate;\n                if (me.preamble) {\n                    me.wrapStartDate = null;\n                }\n            }\n        }\n        super.endBatch(...arguments);\n        // If this event newly persistable, its assignments are eligible for syncing.\n        if (me.isPersistable && !wasPersistable && !me.ignoreBag && me.assigned) {\n            for (const assignment of me.assigned) {\n                assignment.stores.forEach(s =>\n                    s.updateModifiedBagForRecord(assignment)\n                );\n            }\n        }\n    }\n    get isCreating() {\n        return super.isCreating;\n    }\n    set isCreating(value) {\n        super.isCreating = value;\n        this.assignments.forEach(record => record.isCreating = value);\n    }\n    //endregion\n    //region Single assignment compatibility\n    get usesSingleAssignment() {\n        return !this.eventStore || this.eventStore.usesSingleAssignment;\n    }\n    copy(...args) {\n        const copy = super.copy(...args);\n        // Don't copy resourceId when using multi assignment\n        if (!this.usesSingleAssignment) {\n            copy.resourceId = null;\n        }\n        return copy;\n    }\n    /**\n     * Override persistable getter to prevent sending resourceId when using multiple resource assignment mode\n     * https://github.com/bryntum/support/issues/1345\n     * @private\n     */\n    get persistableData() {\n        const data = super.persistableData;\n        if (!this.usesSingleAssignment) {\n            delete data.resourceId;\n        }\n        return data;\n    }\n    /**\n     * Returns the first assigned resource, or assigns a resource\n     * @member {Scheduler.model.ResourceModel} resource\n     * @category Assignments & Resources\n     */\n    get resource() {\n        const { resources } = this;\n        return resources.length ? resources[0] : null;\n    }\n    set resource(resourceRecord) {\n        // Use the resourceId setter for single assignment\n        this.resourceId = this.constructor.asId(resourceRecord);\n    }\n    get resourceId() {\n        return this.usesSingleAssignment ? this.get('resourceId') : this.resource?.id;\n    }\n    set resourceId(resourceId) {\n        this.applyResourceId(resourceId);\n    }\n    // Resources + any links to any of them\n    get $linkedResources() {\n        return this.resources?.flatMap(resourceRecord => ([\n            resourceRecord,\n            ...resourceRecord.$links\n        ])) ?? [];\n    }\n    applyResourceId(resourceId, fromApplyValue = false) {\n        const\n            me                          = this,\n            { eventStore, assignments } = me;\n        // When part of an EventStore, resourceIds are changed to be AssignmentModels\n        if (eventStore) {\n            // If not yet part of project, we cant resolve assignmentStore from ourselves\n            const assignmentStore = eventStore.assignmentStore || eventStore.crudManager?.assignmentStore;\n            if (resourceId != null) {\n                if (!me.meta.skipEnforcingSingleAssignment) {\n                    eventStore.usesSingleAssignment = true;\n                }\n                // Reassign if already assigned, only single assignment allowed\n                if (assignments?.length && resourceId !== assignments[0].resourceId) {\n                    //assignments[0].set('resourceId', resourceId, Boolean(me.eventStore.eventsSuspended));\n                    // Silent reassign if events are suspended on event store, won't be expecting UI update then\n                    const eventsSuspended = Boolean(eventStore.eventsSuspended);\n                    eventsSuspended && assignmentStore.suspendEvents();\n                    assignments[0].resource = resourceId;\n                    eventsSuspended && assignmentStore.resumeEvents();\n                }\n                // Otherwise assign\n                else {\n                    assignmentStore.assignEventToResource(me, resourceId);\n                }\n            }\n            else {\n                // Setting resourceId to null removes all assignments\n                assignmentStore.remove(assignments);\n            }\n        }\n        // Not part of an EventStore, edge case. Set to data unless we are in such operation already\n        else if (!fromApplyValue) {\n            me.set({ resourceId });\n        }\n    }\n    // Special handling of setting resourceId, creates assignment\n    applyValue(useProp, mapping, value, skipAccessors, field) {\n        if (field && field.name === 'resourceId' && !this.meta.isAssigning) {\n            const { eventStore } = this;\n            eventStore && (eventStore.isAssigning = true);\n            this.applyResourceId(value, true);\n            eventStore && (eventStore.isAssigning = false);\n        }\n        super.applyValue(useProp, mapping, value, skipAccessors, field);\n    }\n    //endregion\n    //region Assignment\n    /**\n     * Returns all assignments for the event. Event must be part of the store for this method to work.\n     * @property {Scheduler.model.AssignmentModel[]}\n     * @readonly\n     * @category Assignments & Resources\n     */\n    get assignments() {\n        return [...(this.assigned || [])];\n    }\n    /**\n     * Assigns this event to the specified resource.\n     *\n     * *Note:* The event must be part of an EventStore for this to work. If the EventStore uses single assignment\n     * (loaded using resourceId) existing assignments will always be removed.\n     *\n     * @param {Scheduler.model.ResourceModel|String|Number|Scheduler.model.ResourceModel[]|String[]|Number[]} resource A new resource for this event, either as a full\n     *        Resource record or an id (or an array of such).\n     * @param {Boolean} [removeExistingAssignments] `true` to first remove existing assignments\n     * @category Assignments & Resources\n     */\n    assign(resource, removeExistingAssignments = false) {\n        const { eventStore } = this;\n        if (eventStore && !eventStore.usesSingleAssignment) {\n            eventStore.assignEventToResource(this, resource, removeExistingAssignments);\n        }\n        else {\n            // Remember what resource to assign,  directly in single assignment mode or for later when we are joined to\n            // an EventStore\n            this.resourceId = this.constructor.asId(resource);\n            if (!eventStore) {\n                // Prevent flagging EventStore as using single assignment when that happens, we cannot know that here\n                this.meta.skipEnforcingSingleAssignment = true;\n            }\n        }\n    }\n    /**\n     * Unassigns this event from the specified resource\n     *\n     * @param {Scheduler.model.ResourceModel|String|Number} [resource] The resource to unassign from.\n     * @category Assignments & Resources\n     */\n    unassign(resource, removingResource = false) {\n        const me = this;\n        resource = me.constructor.asId(resource);\n        // If unassigned is caused by removing the resource the UI should be able to find out to not do extra redraws etc.\n        me.meta.removingResource = removingResource;\n        me.eventStore?.unassignEventFromResource(me, resource);\n        me.meta.removingResource = null;\n    }\n    /**\n     * Reassigns an event from an old resource to a new resource\n     *\n     * @param {Scheduler.model.ResourceModel|String|Number} oldResourceId A resource to unassign from or its id\n     * @param {Scheduler.model.ResourceModel|String|Number} newResourceId A resource to assign to or its id\n     * @category Assignments & Resources\n     */\n    reassign(oldResourceId, newResourceId) {\n        this.eventStore && this.eventStore.reassignEventFromResourceToResource(this, oldResourceId, newResourceId);\n    }\n    /**\n     * Returns true if this event is assigned to a certain resource.\n     *\n     * @param {Scheduler.model.ResourceModel|String|Number} resource The resource to query for\n     * @returns {Boolean}\n     * @category Assignments & Resources\n     */\n    isAssignedTo(resource) {\n        const resourceId = this.constructor.asId(resource);\n        return this.assignments.some(assignment => assignment.resourceId === resourceId);\n    }\n    //endregion\n    //region Dependencies\n    /**\n     * Returns all predecessor dependencies of this event\n     *\n     * @readonly\n     * @property {Scheduler.model.DependencyBaseModel[]}\n     * @category Dependencies\n     */\n    get predecessors() {\n        return [...this.incomingDeps ?? []];\n    }\n    /**\n     * Returns all successor dependencies of this event\n     *\n     * @readonly\n     * @property {Scheduler.model.DependencyBaseModel[]}\n     * @category Dependencies\n     *\n     */\n    get successors() {\n        return [...this.outgoingDeps ?? []];\n    }\n    get dependencies() {\n        // Dependency feature listens for assignment changes pre commit, thus we risk deps not being set up yet\n        return [...this.incomingDeps ?? [], ...this.outgoingDeps ?? []];\n    }\n    //endregion\n    normalize() {\n        // Normalization handled by Engine\n    }\n    inSetNormalize() {\n        // Normalization handled by Engine\n    }\n    /**\n     * The \"main\" event this model is an occurrence of.\n     * Returns `null` for non-occurrences.\n     * @property {Scheduler.model.EventModel}\n     * @alias #Scheduler.model.mixin.RecurringTimeSpan#property-recurringTimeSpan\n     * @readonly\n     * @category Scheduling\n     */\n    get recurringEvent() {\n        return this.recurringTimeSpan;\n    }\n    /**\n     * Flag which indicates that this event is an interday event. This means that it spans\n     * an entire day or multiple days.\n     *\n     * This is essentially used by the Calendar package to determine if an event should\n     * go into the all day zone of a DayView.\n     *\n     * @property {Boolean}\n     * @readonly\n     * @category Scheduling\n     */\n    get isInterDay() {\n        const { durationMS } = this;\n        // A full day (86400000 or more) marks as it as interDay,\n        // which means it belongs in the all day row of a Calendar DayView\n        if (durationMS >= oneDayMS || (!durationMS && this.allDay)) {\n            return true;\n        }\n        // Working out whether it crosses midnight is a little more difficult\n        const\n            {\n                endDate,\n                startDate\n            } = this,\n            eventStartMidnight = DH.clearTime(startDate);\n        // If either is null or NaN, we have to answer falsy\n        if (startDate && endDate) {\n            eventStartMidnight.setDate(eventStartMidnight.getDate() + 1);\n            // If the endDate is past midnight, it's interDay and goes in the all day row of a Calendar DayView\n            return (endDate || DH.add(startDate, durationMS)) > eventStartMidnight;\n        }\n    }\n    //region All day statics\n    static getAllDayStartDate(dt) {\n        if (dt && dt.isEvent) {\n            dt = dt.get('startDate');\n        }\n        if (dt) {\n            dt = DH.clearTime(dt, true);\n        }\n        return dt;\n    }\n    static getAllDayEndDate(dt) {\n        if (dt && dt.isEvent) {\n            dt = dt.get('endDate');\n        }\n        if (dt && (dt.getHours() > 0 || dt.getMinutes() > 0 || dt.getSeconds() > 0 || dt.getMilliseconds() > 0)) {\n            dt = DH.getNext(dt, 'd', 1);\n        }\n        return dt;\n    }\n    static getAllDayDisplayStartDate(dt) {\n        if (dt && dt.isEvent) {\n            dt = dt.get('startDate');\n        }\n        return DH.clearTime(dt, true);\n    }\n    static getAllDayDisplayEndDate(startDate, endDate) {\n        if (startDate && startDate.isEvent) {\n            endDate   = startDate.get('endDate');\n            startDate = startDate.get('startDate');\n        }\n        if (endDate) {\n            startDate = this.constructor.getAllDayDisplayStartDate(startDate);\n            // If date falls on start of the day - subtract one day to show end date correctly\n            // e.g. event starts on 2017-01-01 00:00 and ends on 2017-01-02 00:00, editor should show\n            // 2017-01-01 for both start and end\n            if (DH.clearTime(endDate, true).valueOf() === endDate.valueOf()) {\n                endDate = DH.add(endDate, DH.DAY, -1);\n            }\n            else if (startDate.valueOf() !== endDate.valueOf()) {\n                endDate = DH.clearTime(endDate, true);\n            }\n        }\n        return endDate;\n    }\n    /**\n     * Defines if the given event field should be manually editable in UI.\n     * You can override this method to provide your own logic.\n     *\n     * By default, the method defines {@link #field-endDate}, {@link #field-duration} and {@link #field-fullDuration}\n     * fields editable for leaf events only (in case the event is part of a tree store) and all other fields as\n     * editable.\n     *\n     * @param {String} fieldName Name of the field\n     * @returns {Boolean} Returns `true` if the field is editable, `false` if it is not and `undefined` if the event has\n     * no such field.\n     * @category Editing\n     */\n    isEditable(fieldName) {\n        switch (fieldName) {\n            // end/duration is allowed to edit for leafs\n            case 'endDate' :\n            case 'duration' :\n            case 'fullDuration' :\n                return this.isLeaf;\n        }\n        return super.isEditable(fieldName);\n    }\n    //endregion\n};\n", "import TimeSpan from './TimeSpan.js';\nimport RecurringTimeSpan from './mixin/RecurringTimeSpan.js';\nimport EventModelMixin from './mixin/EventModelMixin.js';\nimport PartOfProject from '../data/mixin/PartOfProject.js';\nimport { SchedulerCoreEvent } from '../../Engine/quark/model/scheduler_core/SchedulerCoreEvent.js';\nconst EngineMixin = SchedulerCoreEvent;\n/**\n * @module Scheduler/model/EventModel\n */\n/**\n * This class represent a single event in your schedule, usually added to a {@link Scheduler.data.EventStore}.\n *\n * It is a subclass of the {@link Scheduler.model.TimeSpan}, which is in turn subclass of {@link Core.data.Model}.\n * Please refer to documentation of that class to become familiar with the base interface of the event.\n *\n * ## Async date calculations\n *\n * A record created from an {@link Scheduler/model/EventModel} is normally part of an {@link Scheduler.data.EventStore},\n * which in turn is part of a project. When dates or the duration of an event is changed, the project performs async calculations\n * to normalize the other fields.\n * For example if {@link #field-duration} is changed, it will calculate {@link #field-endDate}.\n *\n * As a result of this being an async operation, the values of other fields are not guaranteed to be up to date\n * immediately after a change. To ensure data is up to date, await the calculations to finish.\n *\n * For example, {@link #field-endDate} is not up to date after this operation:\n *\n * ```javascript\n * eventRecord.duration = 5;\n * // endDate not yet calculated\n * ```\n *\n * But if calculations are awaited it is up to date:\n *\n * ```javascript\n * eventRecord.duration = 5;\n * await eventRecord.project.commitAsync();\n * // endDate is calculated\n * ```\n *\n * As an alternative, you can also use `setAsync()` to trigger calculations directly after the change:\n *\n * ```javascript\n * await eventRecord.setAsync({ duration : 5});\n * // endDate is calculated\n * ```\n *\n * ## Subclassing the Event model class\n * The Event model has a few predefined fields as seen below. If you want to add new fields or change the options for the existing fields,\n * you can do that by subclassing this class (see example below).\n *\n * ```javascript\n * class MyEvent extends EventModel {\n *\n *     static get fields() {\n *         return [\n *            // Add new field\n *            { name: 'myField', type : 'number', defaultValue : 0 }\n *         ];\n *     },\n *\n *     myCheckMethod() {\n *         return this.myField > 0\n *     },\n *\n *     ...\n * });\n * ```\n *\n * If you in your data want to use other names for the {@link #field-startDate}, {@link #field-endDate}, {@link #field-resourceId} and name fields you can configure\n * them as seen below:\n *\n * ```javascript\n * class MyEvent extends EventModel {\n *\n *     static get fields() {\n *         return [\n *            { name: 'startDate', dataSource : 'taskStart' },\n *            { name: 'endDate', dataSource : 'taskEnd', format: 'YYYY-MM-DD' },\n *            { name: 'resourceId', dataSource : 'userId' },\n *            { name: 'name', dataSource : 'taskTitle' },\n *         ];\n *     },\n *     ...\n * });\n * ```\n *\n * Please refer to {@link Core.data.Model} for additional details.\n *\n * @extends Scheduler/model/TimeSpan\n * @mixes Scheduler/model/mixin/RecurringTimeSpan\n * @mixes Scheduler/model/mixin/EventModelMixin\n */\nexport default class EventModel extends EngineMixin.derive(TimeSpan).mixin(\n    RecurringTimeSpan,\n    PartOfProject,\n    EventModelMixin\n) {\n    static get $name() {\n        return 'EventModel';\n    }\n}\nEventModel.exposeProperties();\nEventModel._$name = 'EventModel';", "import AjaxStore from '../../Core/data/AjaxStore.js';\nimport EventStoreMixin from './mixin/EventStoreMixin.js';\nimport GetEventsMixin from './mixin/GetEventsMixin.js';\nimport DayIndexMixin from './mixin/DayIndexMixin.js';\nimport SharedEventStoreMixin from './mixin/SharedEventStoreMixin.js';\nimport RecurringEventsMixin from './mixin/RecurringEventsMixin.js';\nimport EventModel from '../model/EventModel.js';\nimport PartOfProject from './mixin/PartOfProject.js';\nimport { CoreEventStoreMixin } from '../../Engine/quark/store/CoreEventStoreMixin.js';\nimport PartOfBaseProject from './mixin/PartOfBaseProject.js';\nconst EngineMixin = PartOfProject(CoreEventStoreMixin.derive(AjaxStore));\n/**\n * @module Scheduler/data/EventStore\n */\n/**\n * A store holding all the {@link Scheduler.model.EventModel events} to be rendered into a {@link Scheduler.view.Scheduler Scheduler}.\n *\n * This store only accepts a model class inheriting from {@link Scheduler.model.EventModel}.\n *\n * An EventStore is usually connected to a project, which binds it to other related stores (AssignmentStore,\n * ResourceStore and DependencyStore). The project also handles normalization/calculation of the data on the records in\n * the store. For example if a record is added with a `startDate` and an `endDate`, it will calculate the `duration`.\n *\n * The calculations happens async, records are not guaranteed to have up to date data until they are finished. To be\n * certain that calculations have finished, call `await project.commitAsync()` after store actions. Or use one of the\n * `xxAsync` functions, such as `loadDataAsync()`.\n *\n * Using `commitAsync()`:\n *\n * ```javascript\n * eventStore.data = [{ startDate, endDate }, ...];\n *\n * // duration of the record is not yet calculated\n *\n * await eventStore.project.commitAsync();\n *\n * // now it is\n * ```\n *\n * Using `loadDataAsync()`:\n *\n * ```javascript\n * await eventStore.loadDataAsync([{ startDate, endDate }, ...]);\n *\n * // duration is calculated\n * ```\n *\n * ## Using recurring events\n * When recurring events are in the database, **all recurring event definitions** which started before\n * the requested start date, and have not yet finished recurring MUST be loaded into the EventStore.\n *\n * Only the **base** recurring event **definitions** are stored in the EventStore. You do not\n * need to calculate the future occurrence dates of these events. This is all handled by the EventStore.\n *\n * When asked to yield a set of events for a certain date range for creating a UI through\n * {@link #function-getEvents}, the EventStore *automatically* interpolates any occurrences of\n * recurring events into the results. They do not occupy slots in the EventStore for every date\n * in their repetition range (that would be very inefficient, and *might* be infinite).\n *\n * @mixes Scheduler/data/mixin/PartOfProject\n * @mixes Scheduler/data/mixin/SharedEventStoreMixin\n * @mixes Scheduler/data/mixin/EventStoreMixin\n * @mixes Scheduler/data/mixin/RecurringEventsMixin\n * @mixes Scheduler/data/mixin/GetEventsMixin\n * @extends Core/data/AjaxStore\n */\nexport default class EventStore extends EngineMixin.mixin(\n    SharedEventStoreMixin,\n    RecurringEventsMixin,\n    EventStoreMixin,\n    DayIndexMixin,\n    GetEventsMixin\n) {\n    static $name = 'EventStore';\n    static get defaultConfig() {\n        return {\n            /**\n             * Class used to represent records\n             * @config {Scheduler.model.EventModel}\n             * @typings {typeof EventModel}\n             * @default\n             * @category Common\n             */\n            modelClass : EventModel\n        };\n    }\n}\nEventStore._$name = 'EventStore';", "import Base from '../../../Core/Base.js';\n/**\n * @module Scheduler/data/mixin/ResourceStoreMixin\n */\n/**\n * This is a mixin for the ResourceStore functionality. It is consumed by the {@link Scheduler.data.ResourceStore}.\n *\n * @mixin\n */\nexport default Target => class ResourceStoreMixin extends (Target || Base) {\n    static get $name() {\n        return 'ResourceStoreMixin';\n    }\n    get isResourceStore() {\n        return true;\n    }\n    /**\n     * Add resources to the store.\n     *\n     * NOTE: References (events, assignments) on the resources are determined async by a calculation engine. Thus they\n     * cannot be directly accessed after using this function.\n     *\n     * For example:\n     *\n     * ```javascript\n     * const [resource] = resourceStore.add({ id });\n     * // resource.events is not yet available\n     * ```\n     *\n     * To guarantee references are set up, wait for calculations for finish:\n     *\n     * ```javascript\n     * const [resource] = resourceStore.add({ id });\n     * await resourceStore.project.commitAsync();\n     * // resource.events is available (assuming EventStore is loaded and so on)\n     * ```\n     *\n     * Alternatively use `addAsync()` instead:\n     *\n     * ```javascript\n     * const [resource] = await resourceStore.addAsync({ id });\n     * // resource.events is available (assuming EventStore is loaded and so on)\n     * ```\n     *\n     * @param {Scheduler.model.ResourceModel|Scheduler.model.ResourceModel[]|ResourceModelConfig|ResourceModelConfig[]} records\n     * Array of records/data or a single record/data to add to store\n     * @param {Boolean} [silent] Specify `true` to suppress events\n     * @returns {Scheduler.model.ResourceModel[]} Added records\n     * @function add\n     * @category CRUD\n     */\n    /**\n     * Add resources to the store and triggers calculations directly after. Await this function to have up to date\n     * references on the added resources.\n     *\n     * ```javascript\n     * const [resource] = await resourceStore.addAsync({ id });\n     * // resource.events is available (assuming EventStore is loaded and so on)\n     * ```\n     *\n     * @param {Scheduler.model.ResourceModel|Scheduler.model.ResourceModel[]|ResourceModelConfig|ResourceModelConfig[]} records\n     * Array of records/data or a single record/data to add to store\n     * @param {Boolean} [silent] Specify `true` to suppress events\n     * @returns {Scheduler.model.ResourceModel[]} Added records\n     * @function addAsync\n     * @category CRUD\n     * @async\n     */\n    /**\n     * Applies a new dataset to the ResourceStore. Use it to plug externally fetched data into the store.\n     *\n     * NOTE: References (events, assignments) on the resources are determined async by a calculation engine. Thus\n     * they cannot be directly accessed after assigning the new dataset.\n     *\n     * For example:\n     *\n     * ```javascript\n     * resourceStore.data = [{ id }];\n     * // resourceStore.first.events is not yet available\n     * ```\n     *\n     * To guarantee references are available, wait for calculations for finish:\n     *\n     * ```javascript\n     * resourceStore.data = [{ id }];\n     * await resourceStore.project.commitAsync();\n     * // resourceStore.first.events is available\n     * ```\n     *\n     * Alternatively use `loadDataAsync()` instead:\n     *\n     * ```javascript\n     * await resourceStore.loadDataAsync([{ id }]);\n     * // resourceStore.first.events is available\n     * ```\n     *\n     * @member {ResourceModelConfig[]} data\n     * @category Records\n     */\n    /**\n     * Applies a new dataset to the ResourceStore and triggers calculations directly after. Use it to plug externally\n     * fetched data into the store.\n     *\n     * ```javascript\n     * await resourceStore.loadDataAsync([{ id }]);\n     * // resourceStore.first.events is available\n     * ```\n     *\n     * @param {ResourceModelConfig[]} data Array of ResourceModel data objects\n     * @function loadDataAsync\n     * @category CRUD\n     * @async\n     */\n    static get defaultConfig() {\n        return {\n            /**\n             * CrudManager must load stores in the correct order. Lowest first.\n             * @private\n             */\n            loadPriority : 200,\n            /**\n             * CrudManager must sync stores in the correct order. Lowest first.\n             * @private\n             */\n            syncPriority : 100,\n            storeId      : 'resources',\n            autoTree     : true\n        };\n    }\n    construct(config) {\n        super.construct(config);\n        if (!this.modelClass.isResourceModel) {\n            throw new Error('Model for ResourceStore must subclass ResourceModel');\n        }\n    }\n    removeAll() {\n        const result = super.removeAll(...arguments);\n        // Removing all resources removes all assignments\n        result && this.assignmentStore.removeAll();\n        return result;\n    }\n    // Apply id changes also to assignments (used to be handled automatically by relations earlier, but engine does not\n    // care about ids so needed now)\n    // problems:\n    // 1. orientation/HorizontalRendering listens to assignment store changes and is trying to refresh view\n    // When we update resource id on assignment, listener will be invoked and view will try to refresh. And it will\n    // fail, because row is not updated yet. Flag is raised on resource store to make HorizontalRendering to skip\n    // refreshing view in this particular case of resource id changing\n    onRecordIdChange({ record, oldValue, value }) {\n        super.onRecordIdChange({ record, oldValue, value });\n        if (record.isFieldModified('id')) {\n            this.isChangingId = true;\n            record.updateAssignmentResourceIds();\n            this.isChangingId = false;\n        }\n    }\n    // Cache used by VerticalRendering, reset from there\n    get allResourceRecords() {\n        return this._allResourceRecords || (this._allResourceRecords = this.getAllDataRecords());\n    }\n    /**\n     * Returns all resources that have no events assigned during the specified time range.\n     * @param {Date} startDate Time range start date\n     * @param {Date} endDate Time range end date\n     * @returns {Scheduler.model.ResourceModel[]} Resources without events\n     */\n    getAvailableResources({ startDate, endDate }) {\n        return this.query(resource => this.eventStore.isDateRangeAvailable(startDate, endDate, null, resource));\n    }\n};\n", "import VersionHelper from '../../../Core/helper/VersionHelper.js';\n/**\n * @module Scheduler/model/mixin/ResourceModelMixin\n */\n/**\n * Mixin that holds configuration shared between resources in Scheduler and Scheduler Pro.\n * @mixin\n */\nexport default Target => class ResourceModelMixin extends Target {\n    static get $name() {\n        return 'ResourceModelMixin';\n    }\n    // Flag checked by ResourceStore to make sure it uses a valid subclass\n    static get isResourceModel() {\n        return true;\n    }\n    /**\n     * Set value for the specified field(s), triggering engine calculations immediately. See\n     * {@link Core.data.Model#function-set Model#set()} for arguments.\n     *\n     * This does not matter much on the resource itself, but is of importance when manipulating its references:\n     *\n     * ```javascript\n     * assignment.set('resourceId', 2);\n     * // resource.assignments is not yet up to date\n     *\n     * await assignment.setAsync('resourceId', 2);\n     * // resource.assignments is up to date\n     * ```\n     *\n     * @param {String|Object} field The field to set value for, or an object with multiple values to set in one call\n     * @param {*} value Value to set\n     * @param {Boolean} [silent=false] Set to true to not trigger events\n     * automatically.\n     * @function setAsync\n     * @category Editing\n     * @async\n     */\n    //region Fields\n    static get fields() {\n        return [\n            /**\n             * Unique identifier\n             * @field {String|Number} id\n             * @category Common\n             */\n            /**\n             * Get or set resource name\n             * @field {String} name\n             * @category Common\n             */\n            { name : 'name', type : 'string', persist : true },\n            /**\n             * Controls the primary color used for events assigned to this resource. Can be overridden per event using\n             * EventModels {@link Scheduler/model/mixin/EventModelMixin#field-eventColor eventColor config}. See Schedulers\n             * {@link Scheduler.view.mixin.TimelineEventRendering#config-eventColor eventColor config} for available\n             * colors.\n             * @field {String} eventColor\n             * @category Styling\n             */\n            'eventColor',\n            /**\n             * Controls the style used for events assigned to this resource. Can be overridden per event using\n             * EventModels {@link Scheduler/model/mixin/EventModelMixin#field-eventStyle eventStyle config}. See Schedulers\n             * {@link Scheduler.view.mixin.TimelineEventRendering#config-eventStyle eventStyle config} for available\n             * options.\n             * @field {String} eventStyle\n             * @category Styling\n             */\n            'eventStyle',\n            /**\n             * Fully qualified image URL, used by `ResourceInfoColumn` and vertical modes `ResourceHeader` to display a miniature image\n             * for the resource.\n             * @field {String} imageUrl\n             * @category Styling\n             */\n            'imageUrl',\n            /**\n             * Image name relative to {@link Scheduler/view/mixin/SchedulerEventRendering#config-resourceImagePath},\n             * used by `ResourceInfoColumn` and vertical modes `ResourceHeader` to display a miniature image\n             * for the resource.\n             * @field {String} image\n             * @category Styling\n             */\n            'image',\n            /**\n             * Margin from rows edge to topmost event bar for this resource, in px.\n             * @field {Number} resourceMargin\n             * @category Layout\n             */\n            { name : 'resourceMargin', type : 'number' },\n            /**\n             * Margin between stacked event bars for this resource, in px.\n             * @field {Number} barMargin\n             * @category Layout\n             */\n            { name : 'barMargin', type : 'number' },\n            /**\n             * Base height of this resource, in px. When unset, Schedulers configured rowHeight is used.\n             *\n             * This value is used in horizontal mode to determine row height. When stacking, it is used as input for\n             * calculating the actual row height:\n             *\n             * ```javascript\n             * row.height = (resource.rowHeight - resourceMargin * 2) * overlap count - barMargin * (overlap count - 1)\n             * ```\n             *\n             * When packing or overlapping, it is used as the actual row height.\n             *\n             * @field {Number} rowHeight\n             * @category Layout\n             */\n            /**\n             * Base width of this resource, in px. If not set, the `columnWidth` specified in\n             * the Scheduler's configured {@link Scheduler.view.Scheduler#config-resourceColumns} is used.\n             *\n             * This value is used in vertical mode to determine column width.\n             *\n             * @field {Number} columnWidth\n             * @category Layout\n             */\n            /**\n             * Specify this to use a resource specific event layout in horizontal mode, see\n             * {@link Scheduler.view.mixin.SchedulerEventRendering#config-eventLayout} for options.\n             *\n             * When unset (the default) Schedulers setting is used.\n             *\n             * @field {'stack'|'pack'|'mixed'|'none'} eventLayout\n             * @category Layout\n             */\n            'eventLayout'\n        ];\n    }\n    //endregion\n    //region Id change\n    updateAssignmentResourceIds() {\n        this.assigned.forEach(assignment => {\n            assignment.resourceId = this.id;\n        });\n    }\n    syncId(value) {\n        super.syncId(value);\n        this.updateAssignmentResourceIds();\n    }\n    //endregion\n    //region Getters\n    // Documented in Scheduler.model.ResourceModel, SchedulerPro.model.ResourceModel, Gantt.model.ResourceModel\n    get events() {\n        return this.assignments.reduce((events, assignment) => {\n            if (assignment.event) {\n                events.push(assignment.event);\n            }\n            return events;\n        }, []);\n    }\n    /**\n     * Returns all assignments for the resource\n     *\n     * @property {Scheduler.model.AssignmentModel[]}\n     * @category Common\n     */\n    get assignments() {\n        return this.assigned ? [...this.assigned] : [];\n    }\n    set assignments(assignments) {\n        // Engine does not allow assigning to `assigned`, handle it here\n        assignments.forEach(assignment => {\n            assignment.resource = this;\n        });\n    }\n    /**\n     * Returns an array of events, associated with this resource\n     *\n     * @deprecated 5.3.6 Use the events property instead\n     *\n     * @returns {Scheduler.model.EventModel[]}\n     */\n    getEvents() {\n        VersionHelper.deprecate('scheduler', '6.0.0', 'getEvents() is deprecated, use the events property instead');\n        return this.events;\n    }\n    /**\n     * Returns `true` if the resource can be persisted.\n     * In a flat store, a resource is always considered persistable. In a tree store, a resource is considered\n     * persistable if its parent node is persistable.\n     *\n     * @property {Boolean}\n     * @readonly\n     * @category Editing\n     */\n    get isPersistable() {\n        return super.isPersistable && (!this.parent || this.parent.isPersistable);\n    }\n    //endregion\n    /**\n     * Unassigns this Resource from all its Events\n     */\n    unassignAll() {\n        this.assignments && this.assignmentStore.remove(this.assignments);\n    }\n    /**\n     * Returns the initials (first letter of the first & last space-separated word in the name) or an empty string\n     * if this resource has no name. You can override this method in a ResourceModel subclass to provide your own implementation\n     *\n     * @property {String}\n     * @readonly\n     * @category Common\n     */\n    get initials() {\n        const\n            { name = '' } = this;\n        if (!name) {\n            return '';\n        }\n        const names         = name.split(' '),\n            firstInitial  = names[0][0],\n            lastInitial   = (names.length > 1 ? names[names.length - 1][0] : '');\n        return firstInitial + lastInitial;\n    }\n    isWorkingTime(date) {\n        const calendar = (this.effectiveCalendar || this.project?.calendar);\n        return !calendar || calendar.isWorkingTime?.(date);\n    }\n};\n", "import GridRowModel from '../../Grid/data/GridRowModel.js';\nimport PartOfProject from '../data/mixin/PartOfProject.js';\nimport ResourceModelMixin from './mixin/ResourceModelMixin.js';\nimport { CoreResourceMixin } from '../../Engine/quark/model/scheduler_core/CoreResourceMixin.js';\nconst EngineMixin = CoreResourceMixin;\n/**\n * @module Scheduler/model/ResourceModel\n */\n/**\n * This class represent a single Resource in scheduler, usually added to a {@link Scheduler.data.ResourceStore}.\n *\n * It is a subclass of  {@link Core.data.Model}. Please refer to the documentation for that class to become familiar\n * with the base interface of the resource.\n *\n * ## Fields and references\n *\n * A resource has a few predefined fields, see Fields below. If you want to add more fields with meta data describing\n * your resources then you should subclass this class:\n *\n * ```javascript\n * class MyResource extends ResourceModel {\n *   static get fields() {\n *     return [\n *       // \"id\" and \"name\" fields are already provided by the superclass\n *       { name: 'company', type : 'string' }\n *     ];\n *   }\n * });\n * ```\n *\n * If you want to use other names in your data for the id and name fields you can configure them as seen below:\n *\n * ```javascript\n * class MyResource extends ResourceModel {\n *   static get fields() {\n *     return [\n *        { name: 'name', dataSource: 'userName' }\n *     ];\n *   },\n * });\n * ```\n *\n * After load and project normalization, these references are accessible (assuming their respective stores are loaded):\n * - `{@link #property-assignments}` - The linked assignment records\n * - `{@link #property-events}` - The linked (through assignments) event records\n *\n * ## Async resolving of references\n *\n * As described above, a resource has links to assignments and events. These references are populated async, using the\n * calculation engine of the project that the resource via its store is a part of. Because of this asyncness, references\n * cannot be used immediately after assignment modifications:\n *\n * ```javascript\n * assignment.resourceId = 2;\n * // resource.assignments is not yet up to date\n * ```\n *\n * To make sure references are updated, wait for calculations to finish:\n *\n * ```javascript\n * assignment.resourceId = 2;\n * await assignment.project.commitAsync();\n * // resource.assignments is up to date\n * ```\n *\n * As an alternative, you can also use `setAsync()` to trigger calculations directly after the change:\n *\n * ```javascript\n * await assignment.setAsync({ resourceId : 2});\n * // resource.assignments is up to date\n * ```\n *\n * @extends Grid/data/GridRowModel\n * @mixes Scheduler/model/mixin/ResourceModelMixin\n */\nexport default class ResourceModel extends ResourceModelMixin(PartOfProject(EngineMixin.derive(GridRowModel))) {\n    /**\n     * Get associated events\n     *\n     * @member {Scheduler.model.EventModel[]} events\n     * @readonly\n     * @category Common\n     */\n    static $name = 'ResourceModel';\n}\nResourceModel.exposeProperties();\nResourceModel._$name = 'ResourceModel';", "import ResourceStoreMixin from './mixin/ResourceStoreMixin.js';\nimport ResourceModel from '../model/ResourceModel.js';\nimport AjaxStore from '../../Core/data/AjaxStore.js';\nimport PartOfProject from '../data/mixin/PartOfProject.js';\nimport { CoreResourceStoreMixin } from '../../Engine/quark/store/CoreResourceStoreMixin.js';\nimport PartOfBaseProject from './mixin/PartOfBaseProject.js';\nconst EngineMixin = PartOfProject(CoreResourceStoreMixin.derive(AjaxStore));\n/**\n * @module Scheduler/data/ResourceStore\n */\n/**\n * A store holding all the {@link Scheduler.model.ResourceModel resources} to be rendered into a\n * {@link Scheduler.view.Scheduler Scheduler}.\n *\n * This store only accepts a model class inheriting from {@link Scheduler.model.ResourceModel}.\n *\n * A ResourceStore is usually connected to a project, which binds it to other related stores (EventStore,\n * AssignmentStore and DependencyStore). The project also handles references (assignments, events) to related records\n * for the records in the store.\n *\n * Resolving the references happens async, records are not guaranteed to have up to date references until calculations\n * are finished. To be certain that references are resolved, call `await project.commitAsync()` after store actions. Or\n * use one of the `xxAsync` functions, such as `loadDataAsync()`.\n *\n * Using `commitAsync()`:\n *\n * ```javascript\n * resourceStore.data = [{ id }, ...];\n *\n * // references (assignments, events) not resolved yet\n *\n * await resourceStore.project.commitAsync();\n *\n * // now they are\n * ```\n *\n * Using `loadDataAsync()`:\n *\n * ```javascript\n * await resourceStore.loadDataAsync([{ id }, ...]);\n *\n * // references (assignments, events) are resolved\n * ```\n *\n * @mixes Scheduler/data/mixin/PartOfProject\n * @mixes Scheduler/data/mixin/ResourceStoreMixin\n * @extends Core/data/AjaxStore\n */\nexport default class ResourceStore extends ResourceStoreMixin(EngineMixin) {\n    static get defaultConfig() {\n        return {\n            modelClass : ResourceModel\n        };\n    }\n}\nResourceStore._$name = 'ResourceStore';", "import DateHelper from '../../Core/helper/DateHelper.js';\nimport Model from '../../Core/data/Model.js';\nimport Duration from '../../Core/data/Duration.js';\n/**\n * @module Scheduler/model/DependencyBaseModel\n */\nconst canonicalDependencyTypes = [\n    'SS',\n    'SF',\n    'FS',\n    'FF'\n];\n/**\n * Base class used for both Scheduler and Gantt. Not intended to be used directly\n *\n * @extends Core/data/Model\n */\nexport default class DependencyBaseModel extends Model {\n    static get $name() {\n        return 'DependencyBaseModel';\n    }\n    /**\n     * Set value for the specified field(s), triggering engine calculations immediately. See\n     * {@link Core.data.Model#function-set Model#set()} for arguments.\n     **\n     * ```javascript\n     * dependency.set('from', 2);\n     * // dependency.fromEvent is not yet up to date\n     *\n     * await dependency.setAsync('from', 2);\n     * // dependency.fromEvent is up to date\n     * ```\n     *\n     * @param {String|Object} field The field to set value for, or an object with multiple values to set in one call\n     * @param {*} value Value to set\n     * @param {Boolean} [silent=false] Set to true to not trigger events\n     * automatically.\n     * @function setAsync\n     * @category Editing\n     * @async\n     */\n    //region Fields\n    /**\n     * An enumerable object, containing names for the dependency types integer constants.\n     * - 0 StartToStart\n     * - 1 StartToEnd\n     * - 2 EndToStart\n     * - 3 EndToEnd\n     * @property {Object}\n     * @readonly\n     * @category Dependency\n     */\n    static get Type() {\n        return {\n            StartToStart : 0,\n            StartToEnd   : 1,\n            EndToStart   : 2,\n            EndToEnd     : 3\n        };\n    }\n    static get fields() {\n        return [\n            // 3 mandatory fields\n            /**\n             * From event, id of source event\n             * @field {String|Number} from\n             * @category Dependency\n             */\n            { name : 'from' },\n            /**\n             * To event, id of target event\n             * @field {String|Number} to\n             * @category Dependency\n             */\n            { name : 'to' },\n            /**\n             * Dependency type, see static property {@link #property-Type-static}\n             * @field {Number} type=2\n             * @category Dependency\n             */\n            { name : 'type', type : 'int', defaultValue : 2 },\n            /**\n             * CSS class to apply to lines drawn for the dependency\n             * @field {String} cls\n             * @category Styling\n             */\n            { name : 'cls', defaultValue : '' },\n            /**\n             * Bidirectional, drawn with arrows in both directions\n             * @field {Boolean} bidirectional\n             * @category Dependency\n             */\n            { name : 'bidirectional', type : 'boolean' },\n            /**\n             * Start side on source (top, left, bottom, right)\n             * @field {'top'|'left'|'bottom'|'right'} fromSide\n             * @category Dependency\n             */\n            { name : 'fromSide', type : 'string' },\n            /**\n             * End side on target (top, left, bottom, right)\n             * @field {'top'|'left'|'bottom'|'right'} toSide\n             * @category Dependency\n             */\n            { name : 'toSide', type : 'string' },\n            /**\n             * The magnitude of this dependency's lag (the number of units).\n             * @field {Number} lag\n             * @category Dependency\n             */\n            { name : 'lag', type : 'number', allowNull : true, defaultValue : 0 },\n            /**\n             * The units of this dependency's lag, defaults to \"d\" (days). Valid values are:\n             *\n             * - \"ms\" (milliseconds)\n             * - \"s\" (seconds)\n             * - \"m\" (minutes)\n             * - \"h\" (hours)\n             * - \"d\" (days)\n             * - \"w\" (weeks)\n             * - \"M\" (months)\n             * - \"y\" (years)\n             *\n             * This field is readonly after creation, to change `lagUnit` use {@link #function-setLag setLag()}.\n             * @field {'ms'|'s'|'m'|'h'|'d'|'w'|'M'|'y'} lagUnit\n             * @category Dependency\n             * @readonly\n             */\n            {\n                name         : 'lagUnit',\n                type         : 'string',\n                defaultValue : 'd'\n            },\n            { name : 'highlighted', persist : false, internal : true }\n        ];\n    }\n    // fromEvent/toEvent defined in CoreDependencyMixin in engine\n    /**\n     * Gets/sets the source event of the dependency.\n     *\n     * Accepts multiple formats but always returns an {@link Scheduler.model.EventModel}.\n     *\n     * **NOTE:** This is not a proper field but rather an alias, it will be serialized but cannot be remapped. If you\n     * need to remap, consider using {@link #field-from} instead.\n     *\n     * @field {Scheduler.model.EventModel} fromEvent\n     * @accepts {String|Number|Scheduler.model.EventModel}\n     * @category Dependency\n     */\n    /**\n     * Gets/sets the target event of the dependency.\n     *\n     * Accepts multiple formats but always returns an {@link Scheduler.model.EventModel}.\n     *\n     * **NOTE:** This is not a proper field but rather an alias, it will be serialized but cannot be remapped. If you\n     * need to remap, consider using {@link #field-to} instead.\n     *\n     * @field {Scheduler.model.EventModel} toEvent\n     * @accepts {String|Number|Scheduler.model.EventModel}\n     * @category Dependency\n     */\n    //endregion\n    //region Init\n    construct(data) {\n        const\n            from = data[this.fieldMap.from.dataSource],\n            to   = data[this.fieldMap.to.dataSource];\n        // Engine expects fromEvent and toEvent, not from and to. We need to support both\n        if (from != null) {\n            data.fromEvent = from;\n        }\n        if (to != null) {\n            data.toEvent = to;\n        }\n        super.construct(...arguments);\n    }\n    //endregion\n    get eventStore() {\n        return this.eventStore || this.unjoinedStores[0]?.eventStore;\n    }\n    set from(value) {\n        const { fromEvent } = this;\n        // When assigning a new id to an event, it will update the eventId of the assignment. But the assignments\n        // event is still the same so we need to announce here\n        if (fromEvent?.isModel && fromEvent.id === value) {\n            this.set('from', value);\n        }\n        else {\n            this.fromEvent = value;\n        }\n    }\n    get from() {\n        return this.get('from');\n    }\n    set to(value) {\n        const { toEvent } = this;\n        // When assigning a new id to an event, it will update the eventId of the assignment. But the assignments\n        // event is still the same so we need to announce here\n        if (toEvent?.isModel && toEvent.id === value) {\n            this.set('to', value);\n        }\n        else {\n            this.toEvent = value;\n        }\n    }\n    get to() {\n        return this.get('to');\n    }\n    /**\n     * Alias to dependency type, but when set resets {@link #field-fromSide} & {@link #field-toSide} to null as well.\n     *\n     * @property {Number}\n     * @category Dependency\n     */\n    get hardType() {\n        return this.getHardType();\n    }\n    set hardType(type) {\n        this.setHardType(type);\n    }\n    /**\n     * Returns dependency hard type, see {@link #property-hardType}.\n     *\n     * @returns {Number}\n     * @category Dependency\n     */\n    getHardType() {\n        return this.get('type');\n    }\n    /**\n     * Sets dependency {@link #field-type} and resets {@link #field-fromSide} and {@link #field-toSide} to null.\n     *\n     * @param {Number} type\n     * @category Dependency\n     */\n    setHardType(type) {\n        let result;\n        if (type !== this.hardType) {\n            result = this.set({\n                type,\n                fromSide : null,\n                toSide   : null\n            });\n        }\n        return result;\n    }\n    get lag() {\n        return this.get('lag');\n    }\n    set lag(lag) {\n        this.setLag(lag);\n    }\n    /**\n     * Sets lag and lagUnit in one go. Only allowed way to change lagUnit, the lagUnit field is readonly after creation\n     * @param {Number|String|Object} lag The lag value. May be just a numeric magnitude, or a full string descriptor eg '1d'\n     * @param {'ms'|'s'|'m'|'h'|'d'|'w'|'M'|'y'} [lagUnit] Unit for numeric lag value, see\n     * {@link #field-lagUnit} for valid values\n     * @category Dependency\n     */\n    setLag(lag, lagUnit = this.lagUnit) {\n        // Either they're only setting the magnitude\n        // or, if it's a string, parse the full duration.\n        if (arguments.length === 1) {\n            if (typeof lag === 'number') {\n                this.lag = lag;\n            }\n            else {\n                lag = DateHelper.parseDuration(lag);\n                this.set({\n                    lag     : lag.magnitude,\n                    lagUnit : lag.unit\n                });\n            }\n            return;\n        }\n        // Must be a number\n        lag = parseFloat(lag);\n        this.set({\n            lag,\n            lagUnit\n        });\n    }\n    getLag() {\n        if (this.lag) {\n            return `${this.lag < 0 ? '-' : '+'}${Math.abs(this.lag)}${DateHelper.getShortNameOfUnit(this.lagUnit)}`;\n        }\n        return '';\n    }\n    /**\n     * Property which encapsulates the lag's magnitude and units. An object which contains two properties:\n     * @property {Core.data.Duration}\n     * @property {Number} fullLag.magnitude The magnitude of the duration\n     * @property {'ms'|'s'|'m'|'h'|'d'|'w'|'M'|'y'} fullLag.unit The unit in which the duration is measured, eg\n     * `'d'` for days\n     * @category Dependency\n     */\n    get fullLag() {\n        return new Duration({\n            unit      : this.lagUnit,\n            magnitude : this.lag\n        });\n    }\n    set fullLag(lag) {\n        if (typeof lag === 'string') {\n            this.setLag(lag);\n        }\n        else {\n            this.setLag(lag.magnitude, lag.unit);\n        }\n    }\n    /**\n     * Returns true if the linked events have been persisted (e.g. neither of them are 'phantoms')\n     *\n     * @property {Boolean}\n     * @readonly\n     * @category Editing\n     */\n    get isPersistable() {\n        const\n            me = this,\n            { stores, unjoinedStores } = me,\n            store = stores[0];\n        let result;\n        if (store) {\n            const\n                { fromEvent, toEvent } = me,\n                crudManager            = store.crudManager;\n            // if crud manager is used it can deal with phantom source/target since it persists all records in one batch\n            // if no crud manager used we have to wait till source/target are persisted\n            result = fromEvent && (crudManager || !fromEvent.hasGeneratedId) && toEvent && (crudManager || !toEvent.hasGeneratedId);\n        }\n        else {\n            result = Boolean(unjoinedStores[0]);\n        }\n        return result && super.isPersistable;\n    }\n    getDateRange() {\n        const { fromEvent, toEvent } = this;\n        if (fromEvent?.isScheduled && toEvent?.isScheduled) {\n            const Type = DependencyBaseModel.Type;\n            let sourceDate,\n                targetDate;\n            switch (this.type) {\n                case Type.StartToStart:\n                    sourceDate = fromEvent.startDateMS;\n                    targetDate = toEvent.startDateMS;\n                    break;\n                case Type.StartToEnd:\n                    sourceDate = fromEvent.startDateMS;\n                    targetDate = toEvent.endDateMS;\n                    break;\n                case Type.EndToEnd:\n                    sourceDate = fromEvent.endDateMS;\n                    targetDate = toEvent.endDateMS;\n                    break;\n                case Type.EndToStart:\n                    sourceDate = fromEvent.endDateMS;\n                    targetDate = toEvent.startDateMS;\n                    break;\n                default:\n                    throw new Error('Invalid dependency type: ' + this.type);\n            }\n            return {\n                start : Math.min(sourceDate, targetDate),\n                end   : Math.max(sourceDate, targetDate)\n            };\n        }\n        return null;\n    }\n    /**\n     * Applies given CSS class to dependency, the value doesn't persist\n     *\n     * @param {String} cls\n     * @category Dependency\n     */\n    highlight(cls) {\n        const classes = this.highlighted?.split(' ') ?? [];\n        if (!classes.includes(cls)) {\n            this.highlighted = classes.concat(cls).join(' ');\n        }\n    }\n    /**\n     * Removes given CSS class from dependency if applied, the value doesn't persist\n     *\n     * @param {String} cls\n     * @category Dependency\n     */\n    unhighlight(cls) {\n        const { highlighted } = this;\n        if (highlighted) {\n            const\n                classes = highlighted.split(' '),\n                index   = classes.indexOf(cls);\n            if (index >= 0) {\n                classes.splice(index, 1);\n                this.highlighted = classes.join(' ');\n            }\n        }\n    }\n    /**\n     * Checks if the given CSS class is applied to dependency.\n     *\n     * @param {String} cls\n     * @returns {Boolean}\n     * @category Dependency\n     */\n    isHighlightedWith(cls) {\n        return this.highlighted && this.highlighted.split(' ').includes(cls);\n    }\n    getConnectorString(raw) {\n        const rawValue = canonicalDependencyTypes[this.type];\n        if (raw) {\n            return rawValue;\n        }\n        // FS => empty string; it's the default\n        if (this.type === DependencyBaseModel.Type.EndToStart) {\n            return '';\n        }\n        return rawValue;\n    }\n    // getConnectorStringFromType(type, raw) {\n    //     const rawValue = canonicalDependencyTypes[type];\n    //\n    //     if (raw) {\n    //         return rawValue;\n    //     }\n    //\n    //     // FS => empty string; it's the default\n    //     if (type === DependencyBaseModel.Type.EndToStart) {\n    //         return '';\n    //     }\n    //\n    //     const locale = LocaleManager.locale;\n    //\n    //     // See if there is a local version of SS, SF or FF\n    //     if (locale) {\n    //         const localized = locale.Scheduler && locale.Scheduler[rawValue];\n    //         if (localized) {\n    //             return localized;\n    //         }\n    //     }\n    //\n    //     return rawValue;\n    // }\n    // getConnectorString(raw) {\n    //     return this.getConnectorStringFromType(this.type);\n    // }\n    // * getConnectorStringGenerator(raw) {\n    //     return this.getConnectorStringFromType(yield this.$.type);\n    // }\n    toString() {\n        return `${this.from}${this.getConnectorString()}${this.getLag()}`;\n    }\n    /**\n     * Returns `true` if the dependency is valid. It is considered valid if it has a valid type and both from and to\n     * events are set and pointing to different events.\n     *\n     * @property {Boolean}\n     * @typings ignore\n     * @category Editing\n     */\n    get isValid() {\n        const { fromEvent, toEvent, type } = this;\n        return typeof type === 'number' && fromEvent && toEvent && fromEvent !== toEvent;\n    }\n    get fromEventName() {\n        return this.fromEvent?.name || '';\n    }\n    get toEventName() {\n        return this.toEvent?.name || '';\n    }\n    //region STM hooks\n    shouldRecordFieldChange(fieldName, oldValue, newValue) {\n        if (!super.shouldRecordFieldChange(fieldName, oldValue, newValue)) {\n            return false;\n        }\n        if (fieldName === 'from' || fieldName === 'to' || fieldName === 'fromEvent' || fieldName === 'toEvent') {\n            const eventStore = this.project?.eventStore;\n            if (eventStore && eventStore.oldIdMap[oldValue] === eventStore.getById(newValue)) {\n                return false;\n            }\n        }\n        return true;\n    }\n    //endregion\n}\nDependencyBaseModel.exposeProperties();\nDependencyBaseModel._$name = 'DependencyBaseModel';", "import DependencyBaseModel from './DependencyBaseModel.js';\nimport PartOfProject from '../data/mixin/PartOfProject.js';\nimport { CoreDependencyMixin } from '../../Engine/quark/model/scheduler_core/CoreDependencyMixin.js';\nconst EngineMixin = CoreDependencyMixin;\n/**\n * @module Scheduler/model/DependencyModel\n */\n/**\n * This model represents a dependency between two events, usually added to a {@link Scheduler.data.DependencyStore}.\n *\n * It is a subclass of the {@link Scheduler.model.DependencyBaseModel} class, which in its turn subclasses\n * {@link Core.data.Model}. Please refer to documentation of those classes to become familiar with the base interface of\n * this class.\n *\n * ## Fields and references\n *\n * A Dependency has a few predefined fields, see Fields below.  The name of any fields data source can be customized in\n * the subclass, see the example below. Please also refer to {@link Core.data.Model} for details.\n *\n * ```javascript\n * class MyDependency extends DependencyModel {\n *   static get fields() {\n *     return [\n *       { name: 'to', dataSource: 'targetId' },\n *       { name: 'from', dataSource: 'sourceId' }\n *     ]);\n *   }\n * }\n * ```\n *\n * After load and project normalization, these references are accessible (assuming their respective stores are loaded):\n * - `fromEvent` - The event on the start side of the dependency\n * - `toEvent` - The event on the end side of the dependency\n *\n * ## Async resolving of references\n *\n * As described above, a dependency has links to events. These references are populated async, using the calculation\n * engine of the project that the resource via its store is a part of. Because of this asyncness, references cannot be\n * used immediately after modifications:\n *\n * ```javascript\n * dependency.from = 2;\n * // dependency.fromEvent is not yet up to date\n * ```\n *\n * To make sure references are updated, wait for calculations to finish:\n *\n * ```javascript\n * dependency.from = 2;\n * await dependency.project.commitAsync();\n * // dependency.fromEvent is up to date\n * ```\n *\n * As an alternative, you can also use `setAsync()` to trigger calculations directly after the change:\n *\n * ```javascript\n * await dependency.setAsync({ from : 2});\n * // dependency.fromEvent is up to date\n * ```\n *\n * @extends Scheduler/model/DependencyBaseModel\n * @uninherit Core/data/mixin/TreeNode\n */\nexport default class DependencyModel extends PartOfProject(EngineMixin.derive(DependencyBaseModel)) {\n    static get $name() {\n        return 'DependencyModel';\n    }\n    // Determines the type of dependency based on fromSide and toSide\n    getTypeFromSides(fromSide, toSide, rtl) {\n        const\n            types     = DependencyBaseModel.Type,\n            startSide = rtl ? 'right' : 'left',\n            endSide   = rtl ? 'left' : 'right';\n        if (fromSide === startSide) {\n            return (toSide === startSide) ? types.StartToStart : types.StartToEnd;\n        }\n        return (toSide === endSide) ? types.EndToEnd : types.EndToStart;\n    }\n}\nDependencyModel.exposeProperties();\nDependencyModel._$name = 'DependencyModel';", "import ArrayHelper from '../../../Core/helper/ArrayHelper.js';\nimport Model from '../../../Core/data/Model.js';\n/**\n * @module Scheduler/data/mixin/DependencyStoreMixin\n */\n/**\n * This is a mixin, containing functionality related to managing dependencies.\n *\n * It is consumed by the regular {@link Scheduler.data.DependencyStore} class and Scheduler Pros counterpart.\n *\n * @mixin\n */\nexport default Target => class DependencyStoreMixin extends Target {\n    static get $name() {\n        return 'DependencyStoreMixin';\n    }\n    /**\n     * Add dependencies to the store.\n     *\n     * NOTE: References (fromEvent, toEvent) on the dependencies are determined async by a calculation engine. Thus they\n     * cannot be directly accessed after using this function.\n     *\n     * For example:\n     *\n     * ```javascript\n     * const [dependency] = dependencyStore.add({ from, to });\n     * // dependency.fromEvent is not yet available\n     * ```\n     *\n     * To guarantee references are set up, wait for calculations for finish:\n     *\n     * ```javascript\n     * const [dependency] = dependencyStore.add({ from, to });\n     * await dependencyStore.project.commitAsync();\n     * // dependency.fromEvent is available (assuming EventStore is loaded and so on)\n     * ```\n     *\n     * Alternatively use `addAsync()` instead:\n     *\n     * ```javascript\n     * const [dependency] = await dependencyStore.addAsync({ from, to });\n     * // dependency.fromEvent is available (assuming EventStore is loaded and so on)\n     * ```\n     *\n     * @param {Scheduler.model.DependencyModel|Scheduler.model.DependencyModel[]|DependencyModelConfig|DependencyModelConfig[]} records\n     * Array of records/data or a single record/data to add to store\n     * @param {Boolean} [silent] Specify `true` to suppress events\n     * @returns {Scheduler.model.DependencyModel[]} Added records\n     * @function add\n     * @category CRUD\n     */\n    /**\n     * Add dependencies to the store and triggers calculations directly after. Await this function to have up to date\n     * references on the added dependencies.\n     *\n     * ```javascript\n     * const [dependency] = await dependencyStore.addAsync({ from, to });\n     * // dependency.fromEvent is available (assuming EventStore is loaded and so on)\n     * ```\n     *\n     * @param {Scheduler.model.DependencyModel|Scheduler.model.DependencyModel[]|DependencyModelConfig|DependencyModelConfig[]} records\n     * Array of records/data or a single record/data to add to store\n     * @param {Boolean} [silent] Specify `true` to suppress events\n     * @returns {Scheduler.model.DependencyModel[]} Added records\n     * @function addAsync\n     * @category CRUD\n     * @async\n     */\n    /**\n     * Applies a new dataset to the DependencyStore. Use it to plug externally fetched data into the store.\n     *\n     * NOTE: References (fromEvent, toEvent) on the dependencies are determined async by a calculation engine. Thus\n     * they cannot be directly accessed after assigning the new dataset.\n     *\n     * For example:\n     *\n     * ```javascript\n     * dependencyStore.data = [{ from, to }];\n     * // dependencyStore.first.fromEvent is not yet available\n     * ```\n     *\n     * To guarantee references are available, wait for calculations for finish:\n     *\n     * ```javascript\n     * dependencyStore.data = [{ from, to }];\n     * await dependencyStore.project.commitAsync();\n     * // dependencyStore.first.fromEvent is available\n     * ```\n     *\n     * Alternatively use `loadDataAsync()` instead:\n     *\n     * ```javascript\n     * await dependencyStore.loadDataAsync([{ from, to }]);\n     * // dependencyStore.first.fromEvent is available\n     * ```\n     *\n     * @member {DependencyModelConfig[]} data\n     * @category Records\n     */\n    /**\n     * Applies a new dataset to the DependencyStore and triggers calculations directly after. Use it to plug externally\n     * fetched data into the store.\n     *\n     * ```javascript\n     * await dependencyStore.loadDataAsync([{ from, to }]);\n     * // dependencyStore.first.fromEvent is available\n     * ```\n     *\n     * @param {DependencyModelConfig[]} data Array of DependencyModel data objects\n     * @function loadDataAsync\n     * @category CRUD\n     * @async\n     */\n    static get defaultConfig() {\n        return {\n            /**\n             * CrudManager must load stores in the correct order. Lowest first.\n             * @private\n             */\n            loadPriority : 400,\n            /**\n             * CrudManager must sync stores in the correct order. Lowest first.\n             * @private\n             */\n            syncPriority : 400,\n            storeId : 'dependencies'\n        };\n    }\n    reduceEventDependencies(event, reduceFn, result, flat = true, depsGetterFn) {\n        depsGetterFn = depsGetterFn || (event => this.getEventDependencies(event));\n        event = ArrayHelper.asArray(event);\n        event.reduce((result, event) => {\n            if (event.children && !flat) {\n                event.traverse(evt => {\n                    result = depsGetterFn(evt).reduce(reduceFn, result);\n                });\n            }\n            else {\n                result = depsGetterFn(event).reduce(reduceFn, result);\n            }\n        }, result);\n        return result;\n    }\n    mapEventDependencies(event, fn, filterFn, flat, depsGetterFn) {\n        return this.reduceEventDependencies(event, (result, dependency) => {\n            filterFn(dependency) && result.push(dependency);\n            return result;\n        }, [], flat, depsGetterFn);\n    }\n    mapEventPredecessors(event, fn, filterFn, flat) {\n        return this.reduceEventPredecessors(event, (result, dependency) => {\n            filterFn(dependency) && result.push(dependency);\n            return result;\n        }, [], flat);\n    }\n    mapEventSuccessors(event, fn, filterFn, flat) {\n        return this.reduceEventSuccessors(event, (result, dependency) => {\n            filterFn(dependency) && result.push(dependency);\n            return result;\n        }, [], flat);\n    }\n    /**\n     * Returns all dependencies for a certain event (both incoming and outgoing)\n     *\n     * @param {Scheduler.model.EventModel} event\n     * @returns {Scheduler.model.DependencyModel[]}\n     */\n    getEventDependencies(event) {\n        return [].concat(event.predecessors || [], event.successors || []);\n    }\n    removeEventDependencies(event) {\n        this.remove(this.getEventDependencies(event));\n    }\n    removeEventPredecessors(event) {\n        this.remove(event.predecessors);\n    }\n    removeEventSuccessors(event, flat) {\n        this.remove(event.successors);\n    }\n    getBySourceTargetId(key) {\n        return this.records.find(r =>\n            key == this.constructor.makeDependencySourceTargetCompositeKey(r.from, r.to)\n        );\n    }\n    /**\n     * Returns dependency model instance linking tasks with given ids. The dependency can be forward (from 1st\n     * task to 2nd) or backward (from 2nd to 1st).\n     *\n     * @param {Scheduler.model.EventModel|String} sourceEvent 1st event\n     * @param {Scheduler.model.EventModel|String} targetEvent 2nd event\n     * @returns {Scheduler.model.DependencyModel}\n     */\n    getDependencyForSourceAndTargetEvents(sourceEvent, targetEvent) {\n        sourceEvent = Model.asId(sourceEvent);\n        targetEvent = Model.asId(targetEvent);\n        return this.getBySourceTargetId(this.constructor.makeDependencySourceTargetCompositeKey(sourceEvent, targetEvent));\n    }\n    /**\n     * Returns a dependency model instance linking given events if such dependency exists in the store.\n     * The dependency can be forward (from 1st event to 2nd) or backward (from 2nd to 1st).\n     *\n     * @param {Scheduler.model.EventModel|String} sourceEvent\n     * @param {Scheduler.model.EventModel|String} targetEvent\n     * @returns {Scheduler.model.DependencyModel}\n     */\n    getEventsLinkingDependency(sourceEvent, targetEvent) {\n        return this.getDependencyForSourceAndTargetEvents(sourceEvent, targetEvent) ||\n            this.getDependencyForSourceAndTargetEvents(targetEvent, sourceEvent);\n    }\n    /**\n     * Validation method used to validate a dependency. Override and return `true` to indicate that an\n     * existing dependency between two tasks is valid. For a new dependency being created please see\n     * {@link #function-isValidDependencyToCreate}.\n     *\n     * @param {Scheduler.model.DependencyModel|Scheduler.model.TimeSpan|Number|String} dependencyOrFromId The dependency\n     * model, the from task/event or the id of the from task/event\n     * @param {Scheduler.model.TimeSpan|Number|String} [toId] To task/event or id thereof if the first parameter is not\n     * a dependency record\n     * @param {Number} [type] Dependency {@link Scheduler.model.DependencyBaseModel#property-Type-static} if the first\n     * parameter is not a dependency model instance.\n     * @returns {Boolean}\n     */\n    async isValidDependency(dependencyOrFromId, toId, type) {\n        let fromEvent = dependencyOrFromId, toEvent = toId;\n        if (dependencyOrFromId == null) {\n            return false;\n        }\n        // Accept dependency model\n        if (dependencyOrFromId.isDependencyModel) {\n            ({ fromEvent, toEvent } = dependencyOrFromId);\n        }\n        // Accept from as id\n        fromEvent = this.eventStore.getById(fromEvent);\n        // Accept to as id\n        toEvent = this.eventStore.getById(toEvent);\n        // This condition is supposed to map all model instances to be validated by project. Lowest common ancestor\n        // for scheduler event, scheduler pro event and gantt task is TimeSpan\n        if (fromEvent && toEvent) {\n            // Block creating dependencies to display only tasks in Gantt\n            if (!fromEvent.project || !toEvent.project) {\n                return false;\n            }\n            // Not asserting dependency type here. Default value should normally suffice.\n            return this.project.isValidDependency(fromEvent, toEvent, type);\n        }\n        return dependencyOrFromId !== toId;\n    }\n    /**\n     * Validation method used to validate a dependency while creating. Override and return `true` to indicate that\n     * a new dependency is valid to be created.\n     *\n     * @param {Scheduler.model.TimeSpan|Number|String} fromId From event/task or id\n     * @param {Scheduler.model.TimeSpan|Number|String} toId To event/task or id\n     * @param {Number} type Dependency {@link Scheduler.model.DependencyBaseModel#property-Type-static}\n     * @returns {Boolean}\n     */\n    isValidDependencyToCreate(fromId, toId, type) {\n        return this.isValidDependency(fromId, toId, type);\n    }\n    /**\n     * Returns all dependencies highlighted with the given CSS class\n     *\n     * @param {String} cls\n     * @returns {Scheduler.model.DependencyBaseModel[]}\n     */\n    getHighlightedDependencies(cls) {\n        return this.records.reduce((result, dep) => {\n            if (dep.isHighlightedWith(cls)) result.push(dep);\n            return result;\n        }, []);\n    }\n    static makeDependencySourceTargetCompositeKey(from, to) {\n        return `source(${from})-target(${to})`;\n    }\n    //region Product neutral\n    getTimeSpanDependencies(record) {\n        return this.getEventDependencies(record);\n    }\n    //endregion\n};\n", "import AjaxStore from '../../Core/data/AjaxStore.js';\nimport DependencyModel from '../model/DependencyModel.js';\nimport PartOfProject from './mixin/PartOfProject.js';\nimport DependencyStoreMixin from './mixin/DependencyStoreMixin.js';\nimport { CoreDependencyStoreMixin } from '../../Engine/quark/store/CoreDependencyStoreMixin.js';\nimport PartOfBaseProject from './mixin/PartOfBaseProject.js';\nconst EngineMixin = PartOfProject(CoreDependencyStoreMixin.derive(AjaxStore));\n/**\n * @module Scheduler/data/DependencyStore\n */\n/**\n * A store representing a collection of dependencies between events in the {@link Scheduler.data.EventStore}.\n *\n * This store only accepts a model class inheriting from {@link Scheduler.model.DependencyModel}.\n *\n * A DependencyStore is usually connected to a project, which binds it to other related stores (EventStore,\n * AssignmentStore and ResourceStore). The project also handles references (fromEvent, toEvent) to related records\n * for the records in the store.\n *\n * Resolving the references happens async, records are not guaranteed to have up to date references until calculations\n * are finished. To be certain that references are resolved, call `await project.commitAsync()` after store actions. Or\n * use one of the `xxAsync` functions, such as `loadDataAsync()`.\n *\n * Using `commitAsync()`:\n *\n * ```javascript\n * dependencyStore.data = [{ from, to }, ...];\n *\n * // references (fromEvent, toEvent) not resolved yet\n *\n * await dependencyStore.project.commitAsync();\n *\n * // now they are\n * ```\n *\n * Using `loadDataAsync()`:\n *\n * ```javascript\n * await dependencyStore.loadDataAsync([{ from, to }, ...]);\n *\n * // references (fromEvent, toEvent) are resolved\n * ```\n *\n * @mixes Scheduler/data/mixin/PartOfProject\n * @mixes Scheduler/data/mixin/DependencyStoreMixin\n * @extends Core/data/AjaxStore\n */\nexport default class DependencyStore extends DependencyStoreMixin(EngineMixin.derive(AjaxStore)) {\n    static get defaultConfig() {\n        return {\n            modelClass : DependencyModel\n        };\n    }\n}\nDependencyStore._$name = 'DependencyStore';", "import AbstractCrudManagerMixin from '../../../Scheduler/crud/AbstractCrudManagerMixin.js';\nimport StringHelper from '../../../Core/helper/StringHelper.js';\nimport Base from '../../../Core/Base.js';\nimport AjaxTransport from '../../crud/transport/AjaxTransport.js';\nimport JsonEncoder from '../../crud/encoder/JsonEncoder.js';\nimport ObjectHelper from '../../../Core/helper/ObjectHelper.js';\n/**\n * @module Scheduler/data/mixin/ProjectCrudManager\n */\n/**\n * This mixin provides Crud Manager functionality supporting loading of scheduling engine projects.\n *\n * @mixin\n * @mixes Scheduler/crud/AbstractCrudManagerMixin\n * @mixes Scheduler/crud/transport/AjaxTransport\n * @mixes Scheduler/crud/encoder/JsonEncoder\n */\nexport default Target => class ProjectCrudManager extends (Target || Base).mixin(AbstractCrudManagerMixin, AjaxTransport, JsonEncoder) {\n    //region Config\n    static get defaultConfig() {\n        return {\n            project : null\n        };\n    }\n    startConfigure(config) {\n        // process the project first which ingests any configured data sources,\n        this.getConfig('project');\n        super.startConfigure(config);\n        this._changesToClear = new Map();\n    }\n    async doAutoLoad() {\n        const { project } = this;\n        // Delay autoLoad to after projects initial commit if configured with a project\n        if (project) {\n            await project.commitAsync();\n        }\n        return super.doAutoLoad();\n    }\n    applyProjectResponse(response) {\n        const\n            me = this,\n            { project } = me;\n        me.applyingProjectResponse = true;\n        const\n            startDateField = project.fieldMap.startDate,\n            endDateField   = project.fieldMap.endDate,\n            startDate      = ObjectHelper.getPath(response, startDateField.dataSource),\n            endDate        = ObjectHelper.getPath(response, endDateField.dataSource);\n        // With early rendering engine won't convert project dates in time, do it manually first\n        if (typeof startDate === 'string') {\n            ObjectHelper.setPath(response, startDateField.dataSource, startDateField.convert(startDate));\n        }\n        if (typeof endDate === 'string') {\n            ObjectHelper.setPath(response, endDateField.dataSource, endDateField.convert(endDate));\n        }\n        Object.assign(project, response);\n        me._changesToClear.set(me, response);\n        me.applyingProjectResponse = false;\n    }\n    loadCrudManagerData(response, options = {}) {\n        const\n            me = this,\n            { project } = me;\n        // We don't want to react on store changes while loading them\n        me.suspendChangesTracking();\n        super.loadCrudManagerData(...arguments);\n        // If there is project data provided\n        if (response?.project) {\n            // If the project is delaying its linking to a new graph instance\n            // wait till it detaches all records from the old graph\n            // and then apply the project data.\n            // Otherwise the project changes we apply here will be overridden when detaching from the old graph.\n            // Since the code copies last identifier values from the graph when detaching.\n            if (project.delayEnteringReplica) {\n                project.ion({\n                    recordsUnlinked : () => {\n                        me.suspendChangesTracking();\n                        me.applyProjectResponse(response.project);\n                        me.resumeChangesTracking();\n                    },\n                    once : true\n                });\n            }\n            else {\n                me.applyProjectResponse(response.project);\n            }\n        }\n        me.resumeChangesTracking();\n    }\n    async sync() {\n        const { project } = this;\n        // Suspend Crud Manager autoSync to not react on changes during commitAsync() call\n        this.suspendAutoSync();\n        // Make sure data is in a calculated state before syncing\n        if (project) {\n            await project.commitAsync();\n        }\n        if (this.isDestroying) {\n            return;\n        }\n        // resume autoSync silently\n        this.resumeAutoSync(false);\n        return super.sync();\n    }\n    async applyResponse(request, response, options) {\n        const me = this;\n        if (me.isDestroyed || me.project?.isDestroyed) {\n            return;\n        }\n        me.trigger('beforeApplyResponse');\n        await super.applyResponse(request, response, options);\n        // If there is the project data provided or it's not provided but short responses are enabled\n        // in such cases we treat a successful response covering all sent changes as much as that's possible\n        // so responding `project : { ... }` should not be really needed\n        if (response?.project || (me.supportShortSyncResponse && request?.pack?.project)) {\n            // apply the responded changes (or accept the requested ones)\n            me.applyProjectResponse(response.project || request?.pack?.project);\n        }\n        // if we have a project\n        if (me.project) {\n            let requestType = request.type;\n            // response can force its type\n            if (me.trackResponseType) {\n                requestType = response.type || requestType;\n            }\n            // Make a boolean flag indicating what has triggered the propagation (\"propagatingLoadChanges\" or  \"propagatingSyncChanges\")\n            const propagationFlag = `propagating${StringHelper.capitalize(requestType)}Changes`;\n            me.suspendAutoSync();\n            me[propagationFlag] = true;\n            const loud = me.project.isInitialCommit && !me.project.silenceInitialCommit;\n            // Wait till calculation gets done\n            await me.project.commitAsync();\n            me[propagationFlag] = false;\n            // for initial commit we still trigger the sync, but not for following\n            me.resumeAutoSync?.(loud);\n            // Accept changes came from the server (might have been destroyed while waiting above)\n            me.commitRespondedChanges?.();\n        }\n        // Trigger if we did not get destroyed while waiting above\n        me.trigger?.('applyResponse');\n    }\n    applySyncResponse(...args) {\n        const\n            me          = this,\n            stmDisabled = me.project?.stm.disabled;\n        if (stmDisabled === false && me.ignoreRemoteChangesInSTM) {\n            me.project.stm.disable();\n        }\n        super.applySyncResponse(...args);\n        if (stmDisabled === false) {\n            me.project.stm.enable();\n        }\n    }\n    shouldClearRecordFieldChange(record, field, value) {\n        const oldValue = record[field];\n        field = record.getFieldDefinition(field);\n        // If the field value matches the one responded from the server\n        // we silently accept it\n        return field?.isEqual ? field.isEqual(oldValue, value) : ObjectHelper.isEqual(oldValue, value);\n    }\n    commitRespondedChanges() {\n        // We silently accept changes came from the server\n        this._changesToClear.forEach((changes, record) => {\n            Object.entries(changes).forEach(([key, value]) => {\n                // If the field value matches the one responded from the server\n                // we silently accept it\n                if (this.shouldClearRecordFieldChange(record, key, value)) {\n                    delete record.meta.modified[key];\n                }\n            });\n        });\n        this._changesToClear.clear();\n    }\n    applyChangesToStore(storeDesc, storeResponse, storePack, ...rest) {\n        const changesMap = super.applyChangesToStore(storeDesc, storeResponse, storePack, ...rest);\n        // The changes enter graph first but not store until later, clearing changes in StoreChanges might still leave\n        // records modified. We need to clean up after the next propagation, so we store record changes in a map for now\n        if (changesMap.size && this.project) {\n            for (const [id, changes] of changesMap) {\n                const record = storeDesc.store.getById(id);\n                record && this._changesToClear.set(record, changes);\n            }\n        }\n        return changesMap;\n    }\n};\n", "import Model from '../../../Core/data/Model.js';\n/**\n * @module Scheduler/model/mixin/ProjectModelCommon\n */\n/**\n * Mixin that provides helpful methods and properties for a `ProjectModel`. This mixin applies to all Bryntum products.\n * @mixin\n * @internal\n */\nexport default Target => class ProjectModelCommon extends (Target || Model) {\n    static $name = 'ProjectModelCommon';\n    static get configurable() {\n        return {\n            // Documented in Gantt/Scheduler/SchedulerPro version of ./model/ProjectModel since types differ\n            assignments  : null,\n            dependencies : null,\n            resources    : null,\n            timeRanges   : null\n        };\n    }\n    //region Inline data\n    get assignments() {\n        return this.assignmentStore.allRecords;\n    }\n    updateAssignments(assignments) {\n        this.assignmentStore.data = assignments;\n    }\n    get dependencies() {\n        return this.dependencyStore.allRecords;\n    }\n    updateDependencies(dependencies) {\n        this.dependencyStore.data = dependencies;\n    }\n    get resources() {\n        return this.resourceStore.allRecords;\n    }\n    updateResources(resources) {\n        this.resourceStore.data = resources;\n    }\n    get timeRanges() {\n        return this.timeRangeStore.allRecords;\n    }\n    getTimeRanges(startDate, endDate) {\n        const\n            store = this.timeRangeStore,\n            ret = [];\n        for (const timeSpan of store) {\n            // Collect occurrences for the recurring events in the record set\n            if (timeSpan.isRecurring) {\n                ret.push(...timeSpan.getOccurrencesForDateRange(startDate, endDate));\n            }\n            else if (timeSpan.startDate < endDate && startDate < timeSpan.endDate) {\n                ret.push(timeSpan);\n            }\n        }\n        return ret;\n    }\n    updateTimeRanges(timeRanges) {\n        this.timeRangeStore.data = timeRanges;\n    }\n    getResourceTimeRanges(startDate, endDate) {\n        const\n            store = this.resourceTimeRangeStore,\n            ret = [];\n        for (const timeSpan of store) {\n            // Collect occurrences for the recurring events in the record set\n            if (timeSpan.isRecurring) {\n                ret.push(...timeSpan.getOccurrencesForDateRange(startDate, endDate));\n            }\n            else if (timeSpan.startDate < endDate && startDate < timeSpan.endDate) {\n                ret.push(timeSpan);\n            }\n        }\n        return ret;\n    }\n    //endregion\n};\n", "import Model from '../../../Core/data/Model.js';\nimport TimeZoneHelper from '../../../Core/helper/TimeZoneHelper.js';\nimport FunctionHelper from '../../../Core/helper/FunctionHelper.js';\n/**\n * @module Scheduler/model/mixin/ProjectModelTimeZoneMixin\n */\n/**\n * Mixin that holds TimeZone functionality shared between projects in Scheduler, Scheduler Pro, Gantt and Calendar\n * @mixin\n */\nexport default Target => class ProjectModelTimeZoneMixin extends (Target || Model) {\n    static $name = 'ProjectModelTimeZoneMixin';\n    static configurable = {\n        /**\n         * Set to a IANA time zone (i.e. `Europe/Stockholm`) or a UTC offset in minutes (i.e. `-120`). This will\n         * convert all events, tasks and time ranges to the specified time zone or offset. It will also affect the\n         * displayed timeline's headers as well at the start and end date of it.\n         *\n         * There is currently no built-in time zone support in JavaScript which means that the converted dates\n         * technically still are in the local system time zone, but adjusted to match the configured time zone.\n         *\n         * ### DST\n         * If a IANA time zone is provided, there will be support for DST. But if local system time zone has DST that\n         * will affect the time zone conversion at the exact hour when the local system time zone switches DST on and\n         * off.\n         *\n         * *For example:*\n         * 1. The local system time zone is `Europe/Stockholm` (which is UTC+1 or UTC+2 when DST).\n         * 2. The date `2022-03-27T07:00:00Z` (which is UTC) is converted to `America/Chicago` (which is UTC-6 or UTC-5\n         *    when DST).\n         * 3. The converted JS date will be created from `2022-03-27T02:00:00` which is exactly the hour when\n         *    `Europe/Stockholm` adds an DST hour. This has the effect that the converted date shows up incorrectly as\n         *    `2022-03-27T03:00` instead.\n         *\n         * If a UTC offset is provided, there is no DST support at all.\n         *\n         * ### Editing\n         * If creating new records or editing existing record dates, the dates will be interpreted as in the selected\n         * time zone.\n         *\n         * ### Saving\n         * When saving or syncing data, the dates will be restored to local system time and converted to JSON\n         * ISO formatted.\n         *\n         * @prp {String|Number} [timeZone]\n         * @category Advanced\n         */\n        timeZone : {\n            // Don't ingest the config eagerly because it relies on project being present.\n            // Lazy means it waits for ingestion until timeZone property is referenced.\n            $config : 'lazy',\n            value   : null\n        }\n    };\n    get _storesWithDates() {\n        return [this.taskStore, this.timeRangeStore, this.resourceTimeRangeStore].filter(s => s);\n    }\n    // Overrides a Store's processRecord function to be able to convert records added by a dataset\n    // before they are processed by the engine\n    overrideStoreProcessRecord(store) {\n        if (this._storesWithDates.includes(store) && !store.$originalProcessRecord) {\n            store.$originalProcessRecord =\n                FunctionHelper.before(store, 'processRecord', (record, isDataSet) => {\n                    if (isDataSet || store.isLoadingData) {\n                        // When loading or changing dataset, de data is treated as local dates and need to be converted\n                        this.convertRecordToTimeZone(record);\n                    }\n                });\n        }\n    }\n    attachStore(store) {\n        super.attachStore(store);\n        // If a new store is attached, convert it to the configured timezone\n        if (store && this.timeZone != null && this._storesWithDates.includes(store)) {\n            this.convertStoresToTimeZone([store]);\n            this.overrideStoreProcessRecord();\n        }\n    }\n    detachStore(store) {\n        super.detachStore(store);\n        // When a store is detached, the records isn't timezone converted anymore\n        if (store && !store.isDestroyed) {\n            const { $originalProcessRecord } = store;\n            if ($originalProcessRecord) {\n                $originalProcessRecord(); // Restores the original function\n                store.$originalProcessRecord = null;\n                // Convert records back to local system timezone\n                this.convertStoresToTimeZone([store], null);\n            }\n        }\n    }\n    relayStoreChange({ source, action, records, replaced }) {\n        const me = this;\n        if (me.timeZone != null && me._storesWithDates.includes(source)) {\n            // When a record is added or replaced, it is treated as in current configured timezone\n            if (['add', 'replace'].includes(action)) {\n                if (!records?.length && replaced?.length) {\n                    records = replaced;\n                }\n                if (records.length) {\n                    records.forEach(record => record.timeZone = me.timeZone);\n                }\n            }\n        }\n    }\n    convertStoresToTimeZone(stores, timeZone = this.timeZone) {\n        const\n            me            = this,\n            stmAutoRecord = me.stm?.autoRecord;\n        // Disable STM while updating timezone values\n        if (stmAutoRecord) {\n            me.stm.autoRecord = false;\n        }\n        for (const store of stores) {\n            store?.forEach(r => me.convertRecordToTimeZone(r, timeZone));\n        }\n        if (stmAutoRecord) {\n            // Restore original value\n            me.stmAutoRecord = stmAutoRecord;\n        }\n    }\n    convertRecordToTimeZone(record, timeZone = this.timeZone) {\n        if (record.timeZone !== timeZone) {\n            record.$ignoreChange = true; // Used to ignore changes in NestedEvents feature\n            // Convert baselines if exists\n            if (record.baselines?.count) {\n                for (const bl of record.baselines) {\n                    // The baseline records is not marked with a timezone when they are created\n                    if (record.timeZone !== bl.timeZone) {\n                        bl.timeZone = record.timeZone;\n                    }\n                    bl.convertToTimeZone(timeZone);\n                }\n            }\n            record.convertToTimeZone(timeZone);\n            record.$ignoreChange = false;\n        }\n    }\n    updateTimeZone(timeZone, oldTimeZone) {\n        const\n            me            = this,\n            isConfiguring = me._isConfiguringTimeZone || me.isConfiguring;\n        me.trigger('beforeTimeZoneChange', {\n            timeZone,\n            oldTimeZone,\n            isConfiguring\n        });\n        me.calendarManagerStore.forEach(calendar => calendar.bumpVersion());\n        // Convert data to time zone\n        me.convertStoresToTimeZone(me._storesWithDates);\n        me._storesWithDates.forEach(store => me.overrideStoreProcessRecord(store));\n        // Convert project startdate\n        if (me.startDate) {\n            const startDate = oldTimeZone != null ? TimeZoneHelper.fromTimeZone(me.startDate, oldTimeZone) : me.startDate;\n            me.startDate = timeZone != null ? TimeZoneHelper.toTimeZone(startDate, timeZone) : startDate;\n        }\n        me.ignoreRecordChanges = true;\n        me.commitAsync().then(() => {\n            if (!me.isDestroyed) {\n                me.trigger('timeZoneChange', {\n                    timeZone,\n                    oldTimeZone,\n                    isConfiguring\n                });\n            }\n            delete me._isConfiguringTimeZone;\n        });\n    }\n};\n", "import Model from '../../../Core/data/Model.js';\nimport ProjectModelCommon from './ProjectModelCommon.js';\nimport ResourceTimeRangeModel from '../ResourceTimeRangeModel.js';\nimport TimeSpan from '../TimeSpan.js';\nimport Store from '../../../Core/data/Store.js';\nimport StringHelper from '../../../Core/helper/StringHelper.js';\nimport ResourceTimeRangeStore from '../../data/ResourceTimeRangeStore.js';\nimport ProjectModelTimeZoneMixin from './ProjectModelTimeZoneMixin.js';\n/**\n * @module Scheduler/model/mixin/ProjectModelMixin\n */\n/**\n * Mixin that holds configuration shared between projects in Scheduler and Scheduler Pro.\n * @mixes Scheduler/model/mixin/ProjectModelTimeZoneMixin\n * @mixin\n */\nexport default Target => class ProjectModelMixin extends (Target || Model).mixin(\n    ProjectModelCommon,\n    ProjectModelTimeZoneMixin\n) {\n    static get $name() {\n        return 'ProjectModelMixin';\n    }\n    //region Config\n    static get defaultConfig() {\n        return {\n            /**\n             * State tracking manager instance the project relies on\n             * @member {Core.data.stm.StateTrackingManager} stm\n             * @category Advanced\n             */\n            /**\n             * Configuration options to provide to the STM manager\n             *\n             * @config {StateTrackingManagerConfig|Core.data.stm.StateTrackingManager}\n             * @category Advanced\n             */\n            stm : {},\n            timeRangeModelClass         : TimeSpan,\n            resourceTimeRangeModelClass : ResourceTimeRangeModel,\n            /**\n             * The constructor to create a time range store instance with. Should be a class subclassing the\n             * {@link Core.data.Store}\n             * @config {Core.data.Store|Object}\n             * @typings {typeof Store|object}\n             * @category Models & Stores\n             */\n            timeRangeStoreClass : Store,\n            /**\n             * The constructor to create a resource time range store instance with. Should be a class subclassing the\n             * {@link Scheduler.data.ResourceTimeRangeStore}\n             * @config {Scheduler.data.ResourceTimeRangeStore|Object}\n             * @typings {typeof ResourceTimeRangeStore|object}\n             * @category Models & Stores\n             */\n            resourceTimeRangeStoreClass : ResourceTimeRangeStore,\n            /**\n             * The initial data, to fill the {@link #property-timeRangeStore timeRangeStore} with.\n             * Should be an array of {@link Scheduler.model.TimeSpan TimeSpan} or its configuration objects.\n             *\n             * @config {Scheduler.model.TimeSpan[]} [timeRangesData]\n             * @category Legacy inline data\n             */\n            /**\n             * The initial data, to fill the {@link #property-resourceTimeRangeStore resourceTimeRangeStore} with.\n             * Should be an array of {@link Scheduler.model.ResourceTimeRangeModel ResourceTimeRangeModel} or it's\n             * configuration objects.\n             *\n             * @config {Scheduler.model.ResourceTimeRangeModel[]} [resourceTimeRangesData]\n             * @category Legacy inline data\n             */\n            eventStore      : {},\n            assignmentStore : {},\n            dependencyStore : {},\n            resourceStore   : {},\n            timeRangesData  : null\n        };\n    }\n    static configurable = {\n        /**\n         * Project data as a JSON string, used to populate its stores.\n         *\n         * ```javascript\n         * const project = new ProjectModel({\n         *     json : '{\"eventsData\":[...],\"resourcesData\":[...],...}'\n         * }\n         * ```\n         *\n         * @config {String}\n         * @category Inline data\n         */\n        json : null,\n        /**\n         * The {@link Core.data.Store store} holding the time ranges information.\n         *\n         * See also {@link Scheduler.model.TimeSpan}\n         *\n         * @member {Core.data.Store} timeRangeStore\n         * @category Models & Stores\n         */\n        /**\n         * A {@link Core.data.Store} instance or a config object.\n         * @config {Core.data.Store|StoreConfig}\n         * @category Models & Stores\n         */\n        timeRangeStore : {\n            value : {\n                id         : 'timeRanges', \n                modelClass : TimeSpan\n            },\n            $config : 'nullify'\n        },\n        /**\n         * The {@link Scheduler.data.ResourceTimeRangeStore store} holding the resource time ranges information.\n         *\n         * See also {@link Scheduler.model.ResourceTimeRangeModel}\n         *\n         * @member {Scheduler.data.ResourceTimeRangeStore} resourceTimeRangeStore\n         * @category Models & Stores\n         */\n        /**\n         * A {@link Scheduler.data.ResourceTimeRangeStore} instance or a config object.\n         * @config {Scheduler.data.ResourceTimeRangeStore|ResourceTimeRangeStoreConfig}\n         * @category Models & Stores\n         */\n        resourceTimeRangeStore : {\n            value   : {},\n            $config : 'nullify'\n        },\n        // Documented in Scheduler/SchedulerPro versions of model/ProjectModel since types differ\n        events             : null,\n        resourceTimeRanges : null\n    };\n    //endregion\n    //region Properties\n    /**\n     * Get or set data of project stores. The returned data is identical to what\n     * {@link #function-toJSON} returns:\n     *\n     * ```javascript\n     *\n     * const data = scheduler.project.inlineData;\n     *\n     * // data:\n     * {\n     *     eventsData             : [...],\n     *     resourcesData          : [...],\n     *     dependenciesData       : [...],\n     *     assignmentsData        : [...],\n     *     resourceTimeRangesData : [...],\n     *     timeRangesData         : [...]\n     * }\n     *\n     *\n     * // Plug it back in later\n     * scheduler.project.inlineData = data;\n     * ```\n     *\n     * @property {Object}\n     * @category Inline data\n     */\n    get inlineData() {\n        return StringHelper.safeJsonParse(super.json);\n    }\n    set inlineData(inlineData) {\n        this.json = inlineData;\n    }\n    //endregion\n    //region Functions\n    /**\n     * Accepts a \"data package\" consisting of data for the projects stores, which is then loaded into the stores.\n     *\n     * The package can hold data for `EventStore`, `AssignmentStore`, `ResourceStore`, `DependencyStore`,\n     * `TimeRangeStore` and `ResourceTimeRangeStore`. It uses the same format as when creating a project with inline\n     * data:\n     *\n     * ```javascript\n     * await project.loadInlineData({\n     *     eventsData             : [...],\n     *     resourcesData          : [...],\n     *     assignmentsData        : [...],\n     *     dependenciesData       : [...],\n     *     resourceTimeRangesData : [...],\n     *     timeRangesData         : [...]\n     * });\n     * ```\n     *\n     * After populating the stores it commits the project, starting its calculations. By awaiting `loadInlineData()` you\n     * can be sure that project calculations are finished.\n     *\n     * @function loadInlineData\n     * @param {Object} dataPackage A data package as described above\n     * @fires load\n     * @async\n     * @category Inline data\n     */\n    /**\n     * Project changes (CRUD operations to records in its stores) are automatically committed on a buffer to the\n     * underlying graph based calculation engine. The engine performs it calculations async.\n     *\n     * By calling this function, the commit happens right away. And by awaiting it you are sure that project\n     * calculations are finished and that references between records are up to date.\n     *\n     * The returned promise is resolved with an object. If that object has `rejectedWith` set, there has been a conflict and the calculation failed.\n     *\n     * ```javascript\n     * // Move an event in time\n     * eventStore.first.shift(1);\n     *\n     * // Trigger calculations directly and wait for them to finish\n     * const result = await project.commitAsync();\n     *\n     * if (result.rejectedWith) {\n     *     // there was a conflict during the scheduling\n     * }\n     * ```\n     *\n     * @async\n     * @function commitAsync\n     * @category Common\n     */\n    //endregion\n    //region Init\n    construct(config = {}) {\n        super.construct(...arguments);\n        // These stores are not handled by engine, but still held on project\n        if (config.timeRangesData) {\n            this.timeRangeStore.data = config.timeRangesData;\n        }\n        if (config.resourceTimeRangesData) {\n            this.resourceTimeRangeStore.data = config.resourceTimeRangesData;\n        }\n    }\n    afterConstruct() {\n        super.afterConstruct();\n        const me = this;\n        !me.timeRangeStore.stm && me.stm.addStore(me.timeRangeStore);\n        !me.resourceTimeRangeStore.stm && me.stm.addStore(me.resourceTimeRangeStore);\n    }\n    //endregion\n    //region Attaching stores\n    // Attach to a store, relaying its change events\n    attachStore(store) {\n        if (store) {\n            store.ion({\n                name    : store.$$name,\n                change  : 'relayStoreChange',\n                thisObj : this\n            });\n        }\n        super.attachStore(store);\n    }\n    // Detach a store, stop relaying its change events\n    detachStore(store) {\n        if (store) {\n            this.detachListeners(store.$$name);\n            super.detachStore(store);\n        }\n    }\n    relayStoreChange(event) {\n        super.relayStoreChange(event);\n        /**\n         * Fired when data in any of the projects stores changes.\n         *\n         * Basically a relayed version of each stores own change event, decorated with which store it originates from.\n         * See the {@link Core.data.Store#event-change store change event} documentation for more information.\n         *\n         * @event change\n         * @param {Scheduler.model.ProjectModel} source This project\n         * @param {Core.data.Store} store Affected store\n         * @param {'remove'|'removeAll'|'add'|'updatemultiple'|'clearchanges'|'filter'|'update'|'dataset'|'replace'} action\n         * Name of action which triggered the change. May be one of:\n         * * `'remove'`\n         * * `'removeAll'`\n         * * `'add'`\n         * * `'updatemultiple'`\n         * * `'clearchanges'`\n         * * `'filter'`\n         * * `'update'`\n         * * `'dataset'`\n         * * `'replace'`\n         * @param {Core.data.Model} record Changed record, for actions that affects exactly one record (`'update'`)\n         * @param {Core.data.Model[]} records Changed records, passed for all actions except `'removeAll'`\n         * @param {Object} changes Passed for the `'update'` action, info on which record fields changed\n         */\n        return this.trigger('change', { store : event.source, ...event, source : this });\n    }\n    updateTimeRangeStore(store, oldStore) {\n        this.detachStore(oldStore);\n        this.attachStore(store);\n    }\n    setTimeRangeStore(store) {\n        this.timeRangeStore = store;\n    }\n    changeTimeRangeStore(store) {\n        // If it's not being nullified, upgrade a config object to be a full store\n        if (store && !store.isStore) {\n            store = this.timeRangeStoreClass.new({\n                modelClass : this.timeRangeModelClass\n            }, store);\n        }\n        return store;\n    }\n    updateResourceTimeRangeStore(store, oldStore) {\n        this.detachStore(oldStore);\n        this.attachStore(store);\n    }\n    changeResourceTimeRangeStore(store) {\n        // If it's not being nullified, upgrade a config object to be a full store\n        if (store && !store.isStore) {\n            store = this.resourceTimeRangeStoreClass.new({\n                modelClass : this.resourceTimeRangeModelClass\n            }, store);\n        }\n        return store;\n    }\n    setResourceTimeRangeStore(store) {\n        this.resourceTimeRangeStore = store;\n    }\n    //endregion\n    //region Inline data\n    get events() {\n        return this.eventStore.allRecords;\n    }\n    updateEvents(events) {\n        this.eventStore.data = events;\n    }\n    get resourceTimeRanges() {\n        return this.resourceTimeRangeStore.allRecords;\n    }\n    updateResourceTimeRanges(resourceTimeRanges) {\n        this.resourceTimeRangeStore.data = resourceTimeRanges;\n    }\n    async loadInlineData(data) {\n        // Flag reset in super\n        this.isLoadingInlineData = true;\n        // Stores not handled by engine\n        if (data.resourceTimeRangesData) {\n            this.resourceTimeRangeStore.data = data.resourceTimeRangesData;\n        }\n        if (data.timeRangesData) {\n            this.timeRangeStore.data = data.timeRangesData;\n        }\n        return super.loadInlineData(data);\n    }\n    //endregion\n    //region JSON\n    /**\n     * Returns the data from the records of the projects stores, in a format that can be consumed by `loadInlineData()`.\n     *\n     * Used by JSON.stringify to correctly convert this record to json.\n     *\n     *\n     * ```javascript\n     * const project = new ProjectModel({\n     *     eventsData             : [...],\n     *     resourcesData          : [...],\n     *     assignmentsData        : [...],\n     *     dependenciesData       : [...],\n     *     resourceTimeRangesData : [...],\n     *     timeRangesData         : [...]\n     * });\n     *\n     * const json = project.toJSON();\n     *\n     * // json:\n     * {\n     *     eventsData             : [...],\n     *     resourcesData          : [...],\n     *     dependenciesData       : [...],\n     *     assignmentsData        : [...],\n     *     resourceTimeRangesData : [...],\n     *     timeRangesData         : [...]\n     * }\n     * ```\n     *\n     * Output can be consumed by `loadInlineData()`:\n     *\n     * ```javascript\n     * const json = project.toJSON();\n     *\n     * // Plug it back in later\n     * project.loadInlineData(json);\n     * ```\n     *\n     * @returns {Object}\n     * @category Inline data\n     */\n    toJSON() {\n        const\n            me = this,\n            result = {\n                eventsData             : me.eventStore.toJSON(),\n                resourcesData          : me.resourceStore.toJSON(),\n                dependenciesData       : me.dependencyStore.toJSON(),\n                timeRangesData         : me.timeRangeStore.toJSON(),\n                resourceTimeRangesData : me.resourceTimeRangeStore.toJSON()\n            };\n        if (!me.eventStore.usesSingleAssignment) {\n            result.assignmentsData = me.assignmentStore.toJSON();\n        }\n        return result;\n    }\n    /**\n     * Get or set project data (records from its stores) as a JSON string.\n     *\n     * Get a JSON string:\n     *\n     * ```javascript\n     * const project = new ProjectModel({\n     *     eventsData             : [...],\n     *     resourcesData          : [...],\n     *     assignmentsData        : [...],\n     *     dependenciesData       : [...],\n     *     resourceTimeRangesData : [...],\n     *     timeRangesData         : [...]\n     * });\n     *\n     * const jsonString = project.json;\n     *\n     * // jsonString:\n     * '{\"eventsData\":[...],\"resourcesData\":[...],...}'\n     * ```\n     *\n     * Set a JSON string (to populate the project stores):\n     *\n     * ```javascript\n     * project.json = '{\"eventsData\":[...],\"resourcesData\":[...],...}'\n     * ```\n     *\n     * @property {String}\n     * @category Inline data\n     */\n    get json() {\n        return super.json;\n    }\n    changeJson(json) {\n        if (typeof json === 'string') {\n            json = StringHelper.safeJsonParse(json);\n        }\n        return json;\n    }\n    updateJson(json) {\n        json && this.loadInlineData(json);\n    }\n    //endregion\n    afterChange(toSet, wasSet) {\n        super.afterChange(...arguments);\n        if (wasSet.calendar) {\n            this.trigger('calendarChange');\n        }\n    }\n    doDestroy() {\n        this.timeRangeStore.destroy();\n        this.resourceTimeRangeStore.destroy();\n        super.doDestroy();\n    }\n};\n", "/**\n * @module Scheduler/model/mixin/ProjectCurrentConfig\n */\n/**\n * Mixin that makes sure current config for a project includes store data and is cleaned up properly.\n *\n * @mixin\n * @private\n */\nexport default Target => class ProjectCurrentConfig extends Target {\n    // This function is not meant to be called by any code other than Base#getCurrentConfig().\n    // It extracts the current configs/fields for the project, with special handling for inline data\n    getCurrentConfig(options) {\n        const\n            me     = this,\n            result = super.getCurrentConfig(options);\n        if (result) {\n            for (const storeName of ['eventStore', 'resourceStore', 'assignmentStore', 'dependencyStore', 'timeRangeStore', 'resourceTimeRangeStore']) {\n                const store = me[storeName];\n                if (store) {\n                    if (store.count) {\n                        result[store.id + 'Data'] = store.getInlineData(options);\n                    }\n                    // Get stores current state, in case it has filters etc. added at runtime\n                    const storeState = store.getCurrentConfig(options);\n                    if (storeState && Object.keys(storeState).length > 0) {\n                        result[storeName] = Object.assign(result[storeName] || {}, storeState);\n                    }\n                    // Remove empty store configs\n                    else if (result[storeName] && Object.keys(result[storeName]).length === 0) {\n                        delete result[storeName];\n                    }\n                }\n            }\n            if (result.timeRangeStore) {\n                // Exclude default time range modelClass (it is a plain store), spam\n                if (me.timeRangeStore.originalModelClass === me.timeRangeModelClass || me.timeRangeStore.originalModelClass.$name === 'TimeSpan') {\n                    delete result.timeRangeStore.modelClass;\n                }\n                // Same for default storeId\n                if (result.timeRangeStore.storeId === 'timeRanges') {\n                    delete result.timeRangeStore.storeId;\n                }\n                // Since timeRangeStore is a plain store it is always configured with id, spam\n                if (Object.keys(result.timeRangeStore).length === 1) {\n                    delete result.timeRangeStore;\n                }\n            }\n            // Gantt specifics\n            if (me.taskStore.isTaskStore) {\n                delete result.eventModelClass;\n                delete result.eventStoreClass;\n                delete result.children;\n            }\n            return result;\n        }\n    }\n};\n", "import Base from '../../../Core/Base.js';\n/**\n * @module Scheduler/data/util/ModelPersistencyManager\n */\n/**\n * This class manages model persistency, it listens to model stores' beforesync event and removes all non persistable\n * records from sync operation. The logic has meaning only for CRUD-less sync operations.\n *\n * @private\n */\nexport default class ModelPersistencyManager extends Base {\n    // region Event attachers\n    set eventStore(newEventStore) {\n        const me = this;\n        me.eventStoreDetacher && me.eventStoreDetacher();\n        me._eventStore = newEventStore;\n        if (newEventStore && newEventStore.autoCommit) {\n            me.eventStoreDetacher = newEventStore.ion({\n                beforecommit : me.onEventStoreBeforeSync,\n                thisObj      : me,\n                detachable   : true,\n                // Just in case\n                prio         : 100\n            });\n        }\n    }\n    get eventStore() {\n        return this._eventStore;\n    }\n    set resourceStore(newResourceStore) {\n        const me = this;\n        me.resourceStoreDetacher && me.resourceStoreDetacher();\n        me._resourceStore = newResourceStore;\n        if (newResourceStore && newResourceStore.autoCommit) {\n            me.resourceStoreDetacher = newResourceStore.ion({\n                beforecommit : me.onResourceStoreBeforeSync,\n                thisObj      : me,\n                detachable   : true,\n                // Just in case\n                prio         : 100\n            });\n        }\n    }\n    get resourceStore() {\n        return this._resourceStore;\n    }\n    set assignmentStore(newAssignmentStore) {\n        const me = this;\n        me.assignmentStoreDetacher && me.assignmentStoreDetacher();\n        me._assignmentStore = newAssignmentStore;\n        if (newAssignmentStore && newAssignmentStore.autoSync) {\n            me.assignmentStoreDetacher = newAssignmentStore.ion({\n                beforecommit : me.onAssignmentStoreBeforeSync,\n                thisObj      : me,\n                detachable   : true,\n                // Just in case\n                prio         : 100\n            });\n        }\n    }\n    get assignmentStore() {\n        return this._assignmentStore;\n    }\n    set dependencyStore(newDependencyStore) {\n        const me = this;\n        me.dependencyStoreDetacher && me.dependencyStoreDetacher();\n        me._dependencyStore = newDependencyStore;\n        if (newDependencyStore && newDependencyStore.autoSync) {\n            me.dependencyStoreDetacher = newDependencyStore.ion({\n                beforecommit : me.onDependencyStoreBeforeSync,\n                thisObj      : me,\n                detachable   : true,\n                // Just in case\n                prio         : 100\n            });\n        }\n    }\n    get dependencyStore() {\n        return this._dependencyStore;\n    }\n    // endregion\n    // region Event handlers\n    onEventStoreBeforeSync({ changes }) {\n        const me = this;\n        me.removeNonPersistableRecordsToCreate(changes);\n        return me.shallContinueSync(changes);\n    }\n    onResourceStoreBeforeSync({ changes }) {\n        const me = this;\n        me.removeNonPersistableRecordsToCreate(changes);\n        return me.shallContinueSync(changes);\n    }\n    onAssignmentStoreBeforeSync({ changes }) {\n        const me = this;\n        me.removeNonPersistableRecordsToCreate(changes);\n        return me.shallContinueSync(changes);\n    }\n    onDependencyStoreBeforeSync({ changes }) {\n        const me = this;\n        me.removeNonPersistableRecordsToCreate(changes);\n        return me.shallContinueSync(changes);\n    }\n    // endregion\n    // region Management rules\n    removeNonPersistableRecordsToCreate(changes) {\n        const recordsToCreate = changes.added || [];\n        let r, i;\n        // We remove from the array we iterate thus we iterate from end to start\n        for (i = recordsToCreate.length - 1; i >= 0; --i) {\n            r = recordsToCreate[i];\n            if (!r.isPersistable) {\n                recordsToCreate.splice(recordsToCreate.indexOf(r), 1);\n            }\n        }\n        // Prevent empty create request\n        if (recordsToCreate.length === 0) {\n            changes.added.length = 0;\n        }\n    }\n    shallContinueSync(options) {\n        return Boolean((options.added && options.added.length > 0) ||\n            (options.modified && options.modified.length > 0) ||\n            (options.removed && options.removed.length > 0));\n    }\n    // endregion\n}\nModelPersistencyManager._$name = 'ModelPersistencyManager';", "import VersionHelper from '../../Core/helper/VersionHelper.js';\nimport ProjectModelMixin from './mixin/ProjectModelMixin.js';\nimport ProjectCurrentConfig from './mixin/ProjectCurrentConfig.js';\nimport ModelPersistencyManager from '../data/util/ModelPersistencyManager.js';\nimport { SchedulerCoreProjectMixin } from '../../Engine/quark/model/scheduler_core/SchedulerCoreProjectMixin.js';\nimport EventModel from './EventModel.js';\nimport DependencyModel from './DependencyModel.js';\nimport ResourceModel from './ResourceModel.js';\nimport AssignmentModel from './AssignmentModel.js';\nimport EventStore from '../data/EventStore.js';\nimport DependencyStore from '../data/DependencyStore.js';\nimport ResourceStore from '../data/ResourceStore.js';\nimport AssignmentStore from '../data/AssignmentStore.js';\nconst EngineMixin = SchedulerCoreProjectMixin;\n/**\n * @module Scheduler/model/ProjectModel\n */\n/**\n * This class represents a global project of your Scheduler - a central place for all data.\n *\n * It holds and links the stores usually used by Scheduler:\n *\n * - {@link Scheduler.data.EventStore}\n * - {@link Scheduler.data.ResourceStore}\n * - {@link Scheduler.data.AssignmentStore}\n * - {@link Scheduler.data.DependencyStore}\n * - {@link #config-timeRangeStore TimeRangeStore}\n * - {@link Scheduler.data.ResourceTimeRangeStore}\n *\n * The project uses a calculation engine to normalize dates and durations. It is also responsible for\n * handling references between models, for example to link an event via an assignment to a resource. These operations\n * are asynchronous, a fact that is hidden when working in the Scheduler UI but which you must know about when performing\n * more advanced operations on the data level.\n *\n * When there is a change to data that requires something else to be recalculated, the project schedules a calculation (a\n * commit) which happens moments later. It is also possible to trigger these calculations directly. This snippet illustrate\n * the process:\n *\n 1. Something changes which requires the project to recalculate, for example adding a new task:\n *\n * ```javascript\n * const [event] = project.eventStore.add({ startDate, endDate });\n * ```\n *\n * 2. A recalculation is scheduled, thus:\n *\n * ```javascript\n * event.duration; // <- Not yet calculated\n * ```\n *\n * 3. Calculate now instead of waiting for the scheduled calculation\n *\n * ```javascript\n * await project.commitAsync();\n *\n * event.duration; // <- Now available\n * ```\n *\n * ## Using inline data\n *\n * The project provides settable property {@link Scheduler.crud.AbstractCrudManager#property-inlineData} that can\n * be used to get data from all its stores at once and to set this data as well. Populating the stores this way can\n * be useful if you cannot or you do not want to use CrudManager for server requests but you pull the data by other\n * means and have it ready outside of ProjectModel. Also, the data from all stores is available in a single\n * assignment statement.\n *\n * ### Getting data\n * ```javascript\n * const data = scheduler.project.inlineData;\n *\n * // use the data in your application\n * ```\n *\n * ### Setting data\n * ```javascript\n * const data = // your function to pull server data\n *\n * scheduler.project.inlineData = data;\n * ```\n *\n * ## Monitoring data changes\n *\n * While it is possible to listen for data changes on the projects individual stores, it is sometimes more convenient\n * to have a centralized place to handle all data changes. By listening for the {@link #event-change change event} your\n * code gets notified when data in any of the stores changes. Useful for example to keep an external data model up to\n * date:\n *\n * ```javascript\n * const scheduler = new Scheduler({\n *     project: {\n *         listeners : {\n *             change({ store, action, records }) {\n *                 const { $name } = store.constructor;\n *\n *                 if (action === 'add') {\n *                     externalDataModel.add($name, records);\n *                 }\n *\n *                 if (action === 'remove') {\n *                     externalDataModel.remove($name, records);\n *                 }\n *             }\n *         }\n *     }\n * });\n * ```\n *\n * ## Built in StateTrackingManager\n *\n * The project also has a built in {@link Core.data.stm.StateTrackingManager StateTrackingManager} (STM for short), that\n * handles undo/redo for the project stores (additional stores can also be added). You can enable it to track all\n * project store changes:\n *\n * ```javascript\n * // Turn on auto recording when you create your Scheduler:\n * const scheduler = new Scheduler({\n *    project : {\n *        stm : {\n *            autoRecord : true\n *        }\n *    }\n * });\n *\n * // Undo a transaction\n * project.stm.undo();\n *\n * // Redo\n * project.stm.redo();\n * ```\n *\n * Check out the `undoredo` demo to see it in action.\n *\n * @extends Core/data/Model\n * @mixes Scheduler/model/mixin/ProjectModelMixin\n * @uninherit Core/data/mixin/TreeNode\n */\nexport default class ProjectModel extends ProjectCurrentConfig(ProjectModelMixin(EngineMixin)) {\n    static get $name() {\n        return 'ProjectModel';\n    }\n    //region Inline data configs & properties\n    /**\n     * @hidefields id, readOnly, children, parentId, parentIndex\n     */\n    /**\n     * Get/set {@link #property-eventStore} data.\n     *\n     * Always returns an array of {@link Scheduler.model.EventModel EventModels} but also accepts an array of\n     * its configuration objects as input.\n     *\n     * @member {Scheduler.model.EventModel[]} events\n     * @accepts {Scheduler.model.EventModel[]|EventModelConfig[]}\n     * @category Inline data\n     */\n    /**\n     * Data use to fill the {@link #property-eventStore}. Should be an array of\n     * {@link Scheduler.model.EventModel EventModels} or its configuration objects.\n     *\n     * @config {Scheduler.model.EventModel[]|EventModelConfig[]} events\n     * @category Inline data\n     */\n    /**\n     * Get/set {@link #property-resourceStore} data.\n     *\n     * Always returns an array of {@link Scheduler.model.ResourceModel ResourceModels} but also accepts an array\n     * of its configuration objects as input.\n     *\n     * @member {Scheduler.model.ResourceModel[]} resources\n     * @accepts {Scheduler.model.ResourceModel[]|ResourceModelConfig[]}\n     * @category Inline data\n     */\n    /**\n     * Data use to fill the {@link #property-resourceStore}. Should be an array of\n     * {@link Scheduler.model.ResourceModel ResourceModels} or its configuration objects.\n     *\n     * @config {Scheduler.model.ResourceModel[]|ResourceModelConfig[]} resources\n     * @category Inline data\n     */\n    /**\n     * Get/set {@link #property-assignmentStore} data.\n     *\n     * Always returns an array of {@link Scheduler.model.AssignmentModel AssignmentModels} but also accepts an\n     * array of its configuration objects as input.\n     *\n     * @member {Scheduler.model.AssignmentModel[]} assignments\n     * @accepts {Scheduler.model.AssignmentModel[]|AssignmentModelConfig[]}\n     * @category Inline data\n     */\n    /**\n     * Data use to fill the {@link #property-assignmentStore}. Should be an array of\n     * {@link Scheduler.model.AssignmentModel AssignmentModels} or its configuration objects.\n     *\n     * @config {Scheduler.model.AssignmentModel[]|AssignmentModelConfig[]} assignments\n     * @category Inline data\n     */\n    /**\n     * Get/set {@link #property-dependencyStore} data.\n     *\n     * Always returns an array of {@link Scheduler.model.DependencyModel DependencyModels} but also accepts an\n     * array of its configuration objects as input.\n     *\n     * @member {Scheduler.model.DependencyModel[]} dependencies\n     * @accepts {Scheduler.model.DependencyModel[]|DependencyModelConfig[]}\n     * @category Inline data\n     */\n    /**\n     * Data use to fill the {@link #property-dependencyStore}. Should be an array of\n     * {@link Scheduler.model.DependencyModel DependencyModels} or its configuration objects.\n     *\n     * @config {Scheduler.model.DependencyModel[]|DependencyModelConfig[]} dependencies\n     * @category Inline data\n     */\n    /**\n     * Get/set {@link #property-timeRangeStore} data.\n     *\n     * Always returns an array of {@link Scheduler.model.TimeSpan TimeSpans} but also accepts an\n     * array of its configuration objects as input.\n     *\n     * @member {Scheduler.model.TimeSpan[]} timeRanges\n     * @accepts {Scheduler.model.TimeSpan[]|TimeSpanConfig[]}\n     * @category Inline data\n     */\n    /**\n     * Data use to fill the {@link #property-timeRangeStore}. Should be an array of\n     * {@link Scheduler.model.TimeSpan TimeSpans} or its configuration objects.\n     *\n     * @config {Scheduler.model.TimeSpan[]|TimeSpanConfig[]} timeRanges\n     * @category Inline data\n     */\n    /**\n     * Get/set {@link #property-resourceTimeRangeStore} data.\n     *\n     * Always returns an array of {@link Scheduler.model.ResourceTimeRangeModel ResourceTimeRangeModels} but\n     * also accepts an array of its configuration objects as input.\n     *\n     * @member {Scheduler.model.ResourceTimeRangeModel[]} resourceTimeRanges\n     * @accepts {Scheduler.model.ResourceTimeRangeModel[]|ResourceTimeRangeModelConfig[]}\n     * @category Inline data\n     */\n    /**\n     * Data use to fill the {@link #property-resourceTimeRangeStore}. Should be an array\n     * of {@link Scheduler.model.ResourceTimeRangeModel ResourceTimeRangeModels} or its configuration objects.\n     *\n     * @config {Scheduler.model.ResourceTimeRangeModel[]|ResourceTimeRangeModelConfig[]} resourceTimeRanges\n     * @category Inline data\n     */\n    //endregion\n    //region Legacy inline data configs & properties\n    /**\n     * The initial data, to fill the {@link #property-eventStore} with.\n     * Should be an array of {@link Scheduler.model.EventModel EventModels} or its configuration objects.\n     *\n     * @config {Scheduler.model.EventModel[]|EventModelConfig[]} eventsData\n     * @category Legacy inline data\n     */\n    /**\n     * The initial data, to fill the {@link #property-dependencyStore} with.\n     * Should be an array of {@link Scheduler.model.DependencyModel DependencyModels} or its configuration\n     * objects.\n     *\n     * @config {Scheduler.model.DependencyModel[]|DependencyModelConfig[]} [dependenciesData]\n     * @category Legacy inline data\n     */\n    /**\n     * The initial data, to fill the {@link #property-resourceStore} with.\n     * Should be an array of {@link Scheduler.model.ResourceModel ResourceModels} or its configuration objects.\n     *\n     * @config {Scheduler.model.ResourceModel[]|ResourceModelConfig[]} [resourcesData]\n     * @category Legacy inline data\n     */\n    /**\n     * The initial data, to fill the {@link #property-assignmentStore} with.\n     * Should be an array of {@link Scheduler.model.AssignmentModel AssignmentModels} or its configuration\n     * objects.\n     *\n     * @config {Scheduler.model.AssignmentModel[]|AssignmentModelConfig[]} [assignmentsData]\n     * @category Legacy inline data\n     */\n    //endregion\n    //region Store configs & properties\n    /**\n     * The {@link Scheduler.data.EventStore store} holding the events information.\n     *\n     * See also {@link Scheduler.model.EventModel}\n     *\n     * @member {Scheduler.data.EventStore} eventStore\n     * @category Models & Stores\n     */\n    /**\n     * An {@link Scheduler.data.EventStore} instance or a config object.\n     * @config {Scheduler.data.EventStore|EventStoreConfig} eventStore\n     * @category Models & Stores\n     */\n    /**\n     * The {@link Scheduler.data.DependencyStore store} holding the dependencies information.\n     *\n     * See also {@link Scheduler.model.DependencyModel}\n     *\n     * @member {Scheduler.data.DependencyStore} dependencyStore\n     * @category Models & Stores\n     */\n    /**\n     * A {@link Scheduler.data.DependencyStore} instance or a config object.\n     * @config {Scheduler.data.DependencyStore|DependencyStoreConfig} dependencyStore\n     * @category Models & Stores\n     */\n    /**\n     * The {@link Scheduler.data.ResourceStore store} holding the resources that can be assigned to the events in the event store.\n     *\n     * See also {@link Scheduler.model.ResourceModel}\n     *\n     * @member {Scheduler.data.ResourceStore} resourceStore\n     * @category Models & Stores\n     */\n    /**\n     * A {@link Scheduler.data.ResourceStore} instance or a config object.\n     * @config {Scheduler.data.ResourceStore|ResourceStoreConfig} resourceStore\n     * @category Models & Stores\n     */\n    /**\n     * The {@link Scheduler.data.AssignmentStore store} holding the assignments information.\n     *\n     * See also {@link Scheduler.model.AssignmentModel}\n     *\n     * @member {Scheduler.data.AssignmentStore} assignmentStore\n     * @category Models & Stores\n     */\n    /**\n     * An {@link Scheduler.data.AssignmentStore} instance or a config object.\n     * @config {Scheduler.data.AssignmentStore|AssignmentStoreConfig} assignmentStore\n     * @category Models & Stores\n     */\n    //endregion\n    //region Configs\n    static get defaultConfig() {\n        return {\n            /**\n             * The constructor of the event model class, to be used in the project. Will be set as the\n             * {@link Core.data.Store#config-modelClass modelClass} property of the {@link #property-eventStore}\n             *\n             * @config {Scheduler.model.EventModel}\n             * @typings {typeof EventModel}\n             * @category Models & Stores\n             */\n            eventModelClass : EventModel,\n            /**\n             * The constructor of the dependency model class, to be used in the project. Will be set as the\n             * {@link Core.data.Store#config-modelClass modelClass} property of the {@link #property-dependencyStore}\n             *\n             * @config {Scheduler.model.DependencyModel}\n             * @typings {typeof DependencyModel}\n             * @category Models & Stores\n             */\n            dependencyModelClass : DependencyModel,\n            /**\n             * The constructor of the resource model class, to be used in the project. Will be set as the\n             * {@link Core.data.Store#config-modelClass modelClass} property of the {@link #property-resourceStore}\n             *\n             * @config {Scheduler.model.ResourceModel}\n             * @typings {typeof ResourceModel}\n             * @category Models & Stores\n             */\n            resourceModelClass : ResourceModel,\n            /**\n             * The constructor of the assignment model class, to be used in the project. Will be set as the\n             * {@link Core.data.Store#config-modelClass modelClass} property of the {@link #property-assignmentStore}\n             *\n             * @config {Scheduler.model.AssignmentModel}\n             * @typings {typeof AssignmentModel}\n             * @category Models & Stores\n             */\n            assignmentModelClass : AssignmentModel,\n            /**\n             * The constructor to create an event store instance with. Should be a class, subclassing the\n             * {@link Scheduler.data.EventStore}\n             * @config {Scheduler.data.EventStore|Object}\n             * @typings {typeof EventStore|object}\n             * @category Models & Stores\n             */\n            eventStoreClass : EventStore,\n            /**\n             * The constructor to create a dependency store instance with. Should be a class, subclassing the\n             * {@link Scheduler.data.DependencyStore}\n             * @config {Scheduler.data.DependencyStore|Object}\n             * @typings {typeof DependencyStore|object}\n             * @category Models & Stores\n             */\n            dependencyStoreClass : DependencyStore,\n            /**\n             * The constructor to create a resource store instance with. Should be a class, subclassing the\n             * {@link Scheduler.data.ResourceStore}\n             * @config {Scheduler.data.ResourceStore|Object}\n             * @typings {typeof ResourceStore|object}\n             * @category Models & Stores\n             */\n            resourceStoreClass : ResourceStore,\n            /**\n             * The constructor to create an assignment store instance with. Should be a class, subclassing the\n             * {@link Scheduler.data.AssignmentStore}\n             * @config {Scheduler.data.AssignmentStore|Object}\n             * @typings {typeof AssignmentStore|object}\n             * @category Models & Stores\n             */\n            assignmentStoreClass : AssignmentStore\n        };\n    }\n    //endregion\n    //region Events\n    /**\n     * Fired when the engine has finished its calculations and the results has been written back to the records.\n     *\n     * ```javascript\n     * scheduler.project.on({\n     *     dataReady() {\n     *        console.log('Calculations finished');\n     *     }\n     * });\n     *\n     * scheduler.eventStore.first.duration = 10;\n     *\n     * // At some point a bit later it will log 'Calculations finished'\n     * ```\n     *\n     * @event dataReady\n     * @param {Scheduler.model.ProjectModel} source The project\n     */\n    //endregion\n    /**\n     * Silences propagations caused by the project loading.\n     *\n     * Applying the loaded data to the project occurs in two basic stages:\n     *\n     * 1. Data gets into the engine graph which triggers changes propagation\n     * 2. The changes caused by the propagation get written to related stores\n     *\n     * Setting this flag to `true` makes the component perform step 2 silently without triggering events causing reactions on those changes\n     * (like sending changes back to the server if `autoSync` is enabled) and keeping stores in unmodified state.\n     *\n     * This is safe if the loaded data is consistent so propagation doesn't really do any adjustments.\n     * By default the system treats the data as consistent so this option is `true`.\n     *\n     * ```js\n     * new Scheduler({\n     *     project : {\n     *         // We want scheduling engine to recalculate the data properly\n     *         // so then we could save it back to the server\n     *         silenceInitialCommit : false\n     *     }\n     *     ...\n     * })\n     * ```\n     *\n     * @config {Boolean} silenceInitialCommit\n     * @default true\n     * @category Advanced\n     */\n    construct(...args) {\n        super.construct(...args);\n        if (VersionHelper.isTestEnv) {\n            globalThis.bryntum.testProject = this;\n        }\n        // Moved here from EventStore, since project is now the container instead of it\n        this.modelPersistencyManager = this.createModelPersistencyManager();\n    }\n    /**\n     * Creates and returns model persistency manager\n     *\n     * @returns {Scheduler.data.util.ModelPersistencyManager}\n     * @internal\n     */\n    createModelPersistencyManager() {\n        return new ModelPersistencyManager({\n            eventStore      : this,\n            resourceStore   : this.resourceStore,\n            assignmentStore : this.assignmentStore,\n            dependencyStore : this.dependencyStore\n        });\n    }\n    doDestroy() {\n        this.modelPersistencyManager.destroy();\n        super.doDestroy();\n    }\n    // To comply with TaskBoards expectations\n    get taskStore() {\n        return this.eventStore;\n    }\n}\nProjectModel.applyConfigs = true;\nProjectModel.initClass();\nProjectModel._$name = 'ProjectModel';", "import Base from '../../../Core/Base.js';\n/**\n * @module SchedulerPro/data/mixin/PartOfProject\n */\nconst throwIfNotTheSameStore = (oldStore, newStore) => {\n    if (oldStore !== newStore) {\n        throw new Error('Store set is prohibited for Scheduler Pro entity!');\n    }\n};\n/**\n * This is a mixin, included in all models and stores of the Scheduler Pro project. It provides a common API for accessing\n * all stores of the project.\n *\n * @typings Scheduler/data/mixin/PartOfProject -> Scheduler/data/mixin/SchedulerPartOfProject\n *\n * @mixin\n */\nexport default Target => class PartOfProject extends (Target || Base) {\n    static get $name() {\n        return 'PartOfProject';\n    }\n    /**\n     * Returns the project this entity belongs to.\n     *\n     * @member {SchedulerPro.model.ProjectModel} project\n     * @readonly\n     */\n    /**\n     * An {@link SchedulerPro.data.EventStore} instance or a config object.\n     * @config {SchedulerPro.data.EventStore|EventStoreConfig} taskStore\n     * @category Project\n     */\n    /**\n     * The {@link SchedulerPro.data.EventStore store} holding data on events.\n     *\n     * @member {SchedulerPro.data.EventStore}\n     * @category Project\n     * @readonly\n     */\n    get taskStore() {\n        return this.eventStore;\n    }\n    // this setter actually does nothing, intentionally, setting the stores on other stores is deprecated\n    set taskStore(store) {\n        this.eventStore = store;\n    }\n    /**\n     * Returns the task store of the project this entity belongs to.\n     *\n     * @property {SchedulerPro.data.EventStore}\n     * @category Project\n     * @readonly\n     * @typings Scheduler/model/mixin/ProjectModelMixin:eventStore -> {Scheduler.data.EventStore||SchedulerPro.data.EventStore}\n     */\n    get eventStore() {\n        return this.project?.eventStore;\n    }\n    get leftProjectEventStore() {\n        const project = this.leftProject;\n        return project?.getEventStore() || null;\n    }\n    // this setter actually does nothing, intentionally, setting the stores on other stores is deprecated\n    set eventStore(store) {\n        throwIfNotTheSameStore(this.eventStore, store);\n    }\n    /**\n     * Returns the dependency store of the project this entity belongs to.\n     *\n     * @property {SchedulerPro.data.DependencyStore}\n     * @category Project\n     * @readonly\n     * @typings Scheduler/model/mixin/ProjectModelMixin:dependencyStore -> {Scheduler.data.DependencyStore||SchedulerPro.data.DependencyStore}\n     */\n    get dependencyStore() {\n        return this.project?.dependencyStore;\n    }\n    // this setter actually does nothing, intentionally, setting the stores on other stores is deprecated\n    set dependencyStore(store) {\n        throwIfNotTheSameStore(this.dependencyStore, store);\n    }\n    /**\n     * Returns the assignment store of the project this entity belongs to.\n     *\n     * @property {SchedulerPro.data.AssignmentStore}\n     * @readonly\n     * @category Project\n     * @typings Scheduler/model/mixin/ProjectModelMixin:assignmentStore -> {Scheduler.data.AssignmentStore||SchedulerPro.data.AssignmentStore}\n     */\n    get assignmentStore() {\n        return this.project?.assignmentStore;\n    }\n    // this setter actually does nothing, intentionally, setting the stores on other stores is deprecated\n    set assignmentStore(store) {\n        throwIfNotTheSameStore(this.assignmentStore, store);\n    }\n    /**\n     * Returns the resource store of the project this entity belongs to.\n     *\n     * @property {SchedulerPro.data.ResourceStore}\n     * @readonly\n     * @category Project\n     * @typings Scheduler/model/mixin/ProjectModelMixin:resourceStore -> {Scheduler.data.ResourceStore||SchedulerPro.data.ResourceStore}\n     */\n    get resourceStore() {\n        return this.project?.resourceStore;\n    }\n    // this setter actually does nothing, intentionally, setting the stores on other stores is deprecated\n    set resourceStore(store) {\n        throwIfNotTheSameStore(this.resourceStore, store);\n    }\n    /**\n     * Returns the calendar manager store of the project this entity belongs to.\n     *\n     * @property {SchedulerPro.data.CalendarManagerStore}\n     * @readonly\n     * @category Project\n     */\n    get calendarManagerStore() {\n        return this.project?.calendarManagerStore;\n    }\n    // this setter actually does nothing, intentionally, setting the stores on other stores is deprecated\n    set calendarManagerStore(store) {\n        throwIfNotTheSameStore(this.calendarManagerStore, store);\n    }\n};\n", "import Model from '../../Core/data/Model.js';\nimport AssignmentModelMixin from '../../Scheduler/model/mixin/AssignmentModelMixin.js';\nimport { SchedulerProAssignmentMixin } from '../../Engine/quark/model/scheduler_pro/SchedulerProAssignmentMixin.js';\nimport PartOfProject from '../data/mixin/PartOfProject.js';\n/**\n * @module SchedulerPro/model/AssignmentModel\n */\n/**\n * This class represent a single assignment of a resource to an event in Scheduler Pro. It has a lot in common with\n * Schedulers AssignmentModel, they are separate models but they share much functionality using the\n * {@link Scheduler.model.mixin.AssignmentModelMixin AssignmentModelMixin} mixin.\n *\n * It is a subclass of {@link Core.data.Model} class. Please refer to the documentation for that class to become\n * familiar with the base interface of this class.\n *\n * ## Fields and references\n *\n * An Assignment has the following fields:\n * - `id` - The id of the assignment\n * - `resourceId` - The id of the resource assigned (optionally replaced with `resource` for load)\n * - `eventId` - The id of the event to which the resource is assigned (optionally replaced with `event` for load)\n *\n * The data source for these fields can be customized by subclassing this class:\n *\n * ```javascript\n * class MyAssignment extends AssignmentModel {\n *   static get fields() {\n *       return [\n *          { name : 'resourceId', dataSource : 'linkedResource' }\n *       ];\n *   }\n * }\n * ```\n *\n * After load and project normalization, these references are accessible (assuming their respective stores are loaded):\n * - `event` - The linked event record\n * - `resource` - The linked resource record\n *\n * ## Async resolving of references\n *\n * As described above, an assignment links an event to a resource. It holds references to an event record and a resource\n * record. These references are populated async, using the calculation engine of the project that the assignment via\n * its store is a part of. Because of this asyncness, references cannot be used immediately after modifications:\n *\n * ```javascript\n * assignment.resourceId = 2;\n * // assignment.resource is not yet available\n * ```\n *\n * To make sure references are updated, wait for calculations to finish:\n *\n * ```javascript\n * assignment.resourceId = 2;\n * await assignment.project.commitAsync();\n * // assignment.resource is available\n * ```\n *\n * As an alternative, you can also use `setAsync()` to trigger calculations directly after the change:\n *\n * ```javascript\n * await assignment.setAsync({ resourceId : 2});\n * // assignment.resource is available\n * ```\n *\n * @extends Core/data/Model\n * @mixes Scheduler/model/mixin/AssignmentModelMixin\n * @uninherit Core/data/mixin/TreeNode\n * @typings Scheduler/model/AssignmentModel -> Scheduler/model/SchedulerAssignmentModel\n */\nexport default class AssignmentModel extends PartOfProject(AssignmentModelMixin(SchedulerProAssignmentMixin.derive(Model))) {\n    // NOTE: Leave field defs at top to be picked up by jsdoc\n    /**\n     * Id for event to assign. Can be used as an alternative to `eventId`, but please note that after\n     * load it will be populated with the actual event and not its id. This field is not persistable.\n     * @field {SchedulerPro.model.EventModel} event\n     * @accepts {String|Number|SchedulerPro.model.EventModel}\n     * @typings {String||Number||SchedulerPro.model.EventModel||Core.model.Model}\n     * @category Common\n     */\n    /**\n     * Id for resource to assign to. Can be used as an alternative to `resourceId`, but please note that after\n     * load it will be populated with the actual resource and not its id. This field is not persistable.\n     * @field {SchedulerPro.model.ResourceModel} resource\n     * @accepts {String|Number|SchedulerPro.model.ResourceModel}\n     * @category Common\n     */\n    /**\n     * A numeric, percent-like value, indicating the \"contribution level\"\n     * of the resource availability to the {@link #field-event}.\n     * Number 100 means that the assigned {@link #field-resource} spends all its working time\n     * on the {@link #field-event}.\n     * And number 50 means that the resource spends only half of its available time\n     * on the {@link #field-event}.\n     * Setting the value to 0 will unassign the resource (and remove the assignment)\n     * @field {Number} units\n     * @category Common\n     */\n    //region Config\n    static $name = 'AssignmentModel';\n    static isProAssignmentModel = true;\n    //endregion\n    //region Early render\n    get event() {\n        const\n            { project } = this,\n            event       = super.event;\n        // Figure reference out before buckets are created (if part of project)\n        if (project?.isDelayingCalculation) {\n            return project.eventStore.getById(event);\n        }\n        return event;\n    }\n    set event(event) {\n        super.event = event;\n    }\n    get resource() {\n        const\n            { project }  = this;\n        let resource     = super.resource;\n        // Figure reference out before buckets are created (if part of project)\n        if (project?.isDelayingCalculation) {\n            resource = project.resourceStore.getById(resource);\n        }\n        return resource?.$original;\n    }\n    set resource(resource) {\n        super.resource = resource;\n    }\n    //endregion\n    get eventResourceKey() {\n        return this.isInActiveTransaction\n            ? this.buildEventResourceKey(this.event, this.resource)\n            : this.buildEventResourceKey(this.$.event.DATA, this.$.resource.DATA);\n    }\n}\nAssignmentModel._$name = 'AssignmentModel';", "import AjaxStore from '../../Core/data/AjaxStore.js';\nimport AssignmentStoreMixin from '../../Scheduler/data/mixin/AssignmentStoreMixin.js';\nimport AssignmentModel from '../model/AssignmentModel.js';\nimport { ChronoAssignmentStoreMixin } from '../../Engine/quark/store/ChronoAssignmentStoreMixin.js';\nimport PartOfProject from './mixin/PartOfProject.js';\n/**\n * @module SchedulerPro/data/AssignmentStore\n */\n/**\n * A store representing a collection of assignments between events in the {@link SchedulerPro.data.EventStore} and resources\n * in the {@link SchedulerPro.data.ResourceStore}.\n *\n * This store only accepts a model class inheriting from {@link SchedulerPro.model.AssignmentModel}.\n *\n * An AssignmentStore is usually connected to a project, which binds it to other related stores (EventStore,\n * ResourceStore and DependencyStore). The project also handles references (event, resource) to related records for the\n * records in the store.\n *\n * Resolving the references happens async, records are not guaranteed to have up to date references until calculations\n * are finished. To be certain that references are resolved, call `await project.commitAsync()` after store actions. Or\n * use one of the `xxAsync` functions, such as `loadDataAsync()`.\n *\n * Using `commitAsync()`:\n *\n * ```javascript\n * assignmentStore.data = [{ eventId, resourceId }, ...];\n *\n * // references (event, resource) not resolved yet\n *\n * await assignmentStore.project.commitAsync();\n *\n * // now they are\n * ```\n *\n * Using `loadDataAsync()`:\n *\n * ```javascript\n * await assignmentStore.loadDataAsync([{ eventId, resourceId }, ...]);\n *\n * // references (event, resource) are resolved\n * ```\n *\n * @mixes SchedulerPro/data/mixin/PartOfProject\n * @mixes Scheduler/data/mixin/AssignmentStoreMixin\n * @extends Core/data/AjaxStore\n *\n * @typings Scheduler/data/AssignmentStore -> Scheduler/data/SchedulerAssignmentStore\n */\nexport default class AssignmentStore extends PartOfProject(AssignmentStoreMixin(ChronoAssignmentStoreMixin.derive(AjaxStore))) {\n    static $name = 'AssignmentStore';\n    static get defaultConfig() {\n        return {\n            modelClass : AssignmentModel\n        };\n    }\n}\nAssignmentStore._$name = 'AssignmentStore';", "import Model from '../../Core/data/Model.js';\nimport PartOfProject from '../data/mixin/PartOfProject.js';\nimport { CalendarIntervalMixin } from '../../Engine/calendar/CalendarIntervalMixin.js';\n/**\n * @module SchedulerPro/model/CalendarIntervalModel\n */\n/**\n * This is a documentation-only class, representing an interval in the {@link SchedulerPro/model/CalendarModel calendar}\n *\n * Please refer to the [calendars guide](#SchedulerPro/guides/basics/calendars.md) for details\n */\nexport default class CalendarIntervalModel extends PartOfProject(CalendarIntervalMixin.derive(Model)) {\n    // NOTE: Leave field defs at top to be picked up by jsdoc\n    //region Fields\n    /**\n     * The start date of the fixed (not recurrent) time interval.\n     *\n     * @field {Date} startDate\n     */\n    /**\n     * The end date of the fixed (not recurrent) time interval.\n     *\n     * @field {Date} endDate\n     */\n    /**\n     * The start date of the recurrent time interval. Should be specified as any expression, recognized\n     * by the excellent [later](http://bunkat.github.io/later/) library.\n     *\n     * @field {String} recurrentStartDate\n     */\n    /**\n     * The end date of the recurrent time interval. Should be specified as any expression, recognized\n     * by the excellent [later](http://bunkat.github.io/later/) library.\n     *\n     * @field {String} recurrentEndDate\n     */\n    /**\n     * The \"is working\" flag, which defines what kind of interval this is - either working or non-working. Default value is `false`,\n     * denoting non-working intervals.\n     *\n     * @field {Boolean} isWorking\n     * @default false\n     */\n    /**\n     * A CSS class to add to the element visualizing this interval, when using the NonWorkingTime feature.\n     * <div class=\"note\">Note that only non working intervals are visible.</div>\n     *\n     * @field {String} cls\n     */\n    /**\n     * A CSS class used to add an icon to the element visualizing this interval, when using the NonWorkingTime feature.\n     * <div class=\"note\">Note that only non working intervals are visible.</div>\n     *\n     * @field {String} iconCls\n     */\n    //endregion\n    //region Methods\n    /**\n     * Whether this interval is recurrent (both `recurrentStartDate` and `recurrentEndDate` are present and parsed correctly\n     * by the `later` library).\n     *\n     * @method isRecurrent\n     * @returns {Boolean}\n     */\n    /**\n     * Whether this interval is static - both `startDate` and `endDate` are present.\n     *\n     * @method isStatic\n     * @returns {Boolean}\n     */\n    /**\n     * Returns an internal representation of the recurrent start date from the `later` library.\n     *\n     * @method getStartDateSchedule\n     * @returns {Object}\n     */\n    /**\n     * Returns an internal representation of the recurrent end date from the `later` library.\n     *\n     * @method getEndDateSchedule\n     * @returns {Object}\n     */\n    //endregion\n    //region Config\n    static get $name() {\n        return 'CalendarIntervalModel';\n    }\n    //endregion\n}\nCalendarIntervalModel._$name = 'CalendarIntervalModel';", "import Model from '../../Core/data/Model.js';\nimport PartOfProject from '../data/mixin/PartOfProject.js';\nimport { BaseCalendarMixin } from '../../Engine/quark/model/scheduler_basic/BaseCalendarMixin.js';\nimport CalendarIntervalModel from './CalendarIntervalModel.js';\n/**\n * @module SchedulerPro/model/CalendarModel\n */\n/**\n * This class represents a calendar in the Scheduler Pro project. It contains a collection of the {@link SchedulerPro.model.CalendarIntervalModel}.\n * Every interval can be either recurrent (regularly repeating in time) or static. These intervals can be visualized\n * by the {@link SchedulerPro.feature.ResourceNonWorkingTime} or {@link Scheduler.feature.NonWorkingTime} features.\n *\n * Please refer to the [calendars guide](#SchedulerPro/guides/basics/calendars.md) for details\n *\n * @mixes SchedulerPro/data/mixin/PartOfProject\n *\n * @extends Core/data/Model\n */\nexport default class CalendarModel extends PartOfProject(BaseCalendarMixin.derive(Model)) {\n    //region Config\n    static get $name() {\n        return 'CalendarModel';\n    }\n    /**\n     * Returns the earliest point at which a working period of time starts, following the given date.\n     * Can be the date itself, if it occurs during working time.\n     * @method skipNonWorkingTime\n     * @param {Date} date The date after which to skip the non-working time\n     * @param {Boolean} [isForward=true] Whether the \"following\" means forward in time or backward\n     * @returns {Date} The earliest available date\n     */\n    /**\n     * This method adds a single {@link SchedulerPro.model.CalendarIntervalModel} to the internal collection of the\n     * calendar\n     * @method addInterval\n     * @param {SchedulerPro.model.CalendarIntervalModel|CalendarIntervalModelConfig} interval record or an object with\n     * data used to create a new record\n     * @returns {SchedulerPro.model.CalendarIntervalModel[]} Added intervals\n     */\n    /**\n     * This method adds an array of {@link SchedulerPro.model.CalendarIntervalModel} to the internal collection of the\n     * calendar\n     * @method addIntervals\n     * @param {SchedulerPro.model.CalendarIntervalModel[]|CalendarIntervalModelConfig[]} intervals An array of records\n     * or an array of objects with data used to create new records\n     * @returns {SchedulerPro.model.CalendarIntervalModel[]} Added intervals\n     */\n    /**\n     * This method removes all intervals from the internal collection of the calendar\n     * @method clearIntervals\n     * @param {Boolean} [silent] Do not trigger events\n     */\n    /**\n     * Calculate the working time duration for specific interval, in milliseconds.\n     * @method calculateDurationMs\n     * @param {Date} startDate Start of the interval\n     * @param {Date} endDate End of the interval\n     * @returns {Number} Returns working time in milliseconds\n     */\n    /**\n     * Checks if there is a working time interval in the provided time range\n     * @method isWorkingTime\n     * @param {Date} startDate Start of the interval\n     * @param {Date} endDate End of the interval\n     * @returns {Boolean} Returns `true` if the interval contains working time\n     */\n    /**\n     * Calculates the end date of the time interval which starts at `startDate` and has `durationMs` working time\n     * duration (in milliseconds).\n     * @method calculateEndDate\n     * @param {Date} startDate Start date\n     * @param {Number} durationMs Duration in milliseconds\n     * @returns {Date} The end date\n     */\n    /**\n     * Calculates the start date of the time interval which ends at `endDate` and has `durationMs` working time\n     * duration (in milliseconds).\n     * @method calculateStartDate\n     * @param {Date} endDate End date\n     * @param {Number} durationMs Duration in milliseconds\n     * @returns {Date} The start date\n     */\n    static get fields() {\n        return [\n            /**\n             * The calendar name.\n             * @field {String} name\n             */\n            /**\n             * A CSS class to add to calendar interval elements rendered in the UI.\n             * @field {String} cls\n             */\n            /**\n             * A CSS class defining an icon to show in non-working time elements rendered in the UI.\n             * @field {String} iconCls\n             */\n            /**\n             * The flag, indicating, whether the \"unspecified\" time (time that does not belong to any interval\n             * is working (`true`) or not (`false`).\n             *\n             * @field {Boolean} unspecifiedTimeIsWorking\n             * @default true\n             */\n            /**\n             * {@link SchedulerPro.model.CalendarIntervalModel Intervals} collection of the calendar. Accepts an array\n             * as its input, which behind the scenes will be converted to a store containing the intervals. When\n             * serializing it will be converted back to an array.\n             *\n             * @field {Core.data.Store} intervals\n             * @accepts {SchedulerPro.model.CalendarIntervalModel[]|CalendarIntervalModelConfig[]}\n             */\n            /**\n             * Start expanded or not\n             * @readonly\n             * @field {Boolean} expanded\n             * @default true\n             * @category Tree\n             */\n            {\n                name         : 'expanded',\n                internal     : true,\n                defaultValue : true\n            }\n        ];\n    }\n    //endregion\n    toString() {\n        return this.name || '';\n    }\n    static get defaultConfig() {\n        return {\n            calendarIntervalModelClass : CalendarIntervalModel\n        };\n    }\n}\nCalendarModel._$name = 'CalendarModel';", "import AjaxStore from '../../Core/data/AjaxStore.js';\nimport PartOfProject from './mixin/PartOfProject.js';\nimport CalendarModel from '../model/CalendarModel.js';\nimport { ChronoCalendarManagerStoreMixin } from '../../Engine/quark/store/ChronoCalendarManagerStoreMixin.js';\n/**\n * @module SchedulerPro/data/CalendarManagerStore\n */\n/**\n * A class representing the tree of calendars in the SchedulerPro chart. An individual calendar is represented as an instance of the\n * {@link SchedulerPro.model.CalendarModel} class. The store expects the data loaded to be hierarchical. Each parent node should\n * contain its children in a property called 'children'.\n *\n * Please refer to the [calendars guide](#SchedulerPro/guides/basics/calendars.md) for details\n *\n * @mixes SchedulerPro/data/mixin/PartOfProject\n *\n * @extends Core/data/AjaxStore\n */\nexport default class CalendarManagerStore extends PartOfProject(ChronoCalendarManagerStoreMixin.derive(AjaxStore)) {\n    //region Config\n    static get defaultConfig() {\n        return {\n            tree         : true,\n            modelClass   : CalendarModel,\n            /**\n             * CrudManager must load stores in the correct order. Lowest first.\n             * @private\n             */\n            loadPriority : 100,\n            /**\n             * CrudManager must sync stores in the correct order. Lowest first.\n             * @private\n             */\n            syncPriority : 100,\n            storeId      : 'calendars'\n        };\n    }\n    //endregion\n};\nCalendarManagerStore._$name = 'CalendarManagerStore';", "import PartOfProject from '../data/mixin/PartOfProject.js';\nimport DependencyBaseModel from '../../Scheduler/model/DependencyBaseModel.js';\nimport { SchedulerProDependencyMixin } from '../../Engine/quark/model/scheduler_pro/SchedulerProDependencyMixin.js';\n/**\n * @module SchedulerPro/model/DependencyModel\n */\n/**\n * This model represents a dependency between two events, usually added to a {@link SchedulerPro.data.DependencyStore}.\n *\n * It is a subclass of the {@link Scheduler.model.DependencyBaseModel} class, which in its turn subclasses\n * {@link Core.data.Model}. Please refer to documentation of those classes to become familiar with the base interface of\n * this class.\n *\n * ## Fields and references\n *\n * A Dependency has a few predefined fields, see Fields below.  The name of any fields data source can be customized in\n * the subclass, see the example below. Please also refer to {@link Core.data.Model} for details.\n *\n * ```javascript\n * class MyDependency extends DependencyModel {\n *   static get fields() {\n *     return [\n *       { name: 'to', dataSource: 'targetId' },\n *       { name: 'from', dataSource: 'sourceId' }\n *     ]);\n *   }\n * }\n * ```\n *\n * After load and project normalization, these references are accessible (assuming their respective stores are loaded):\n * - `fromEvent` - The event on the start side of the dependency\n * - `toEvent` - The event on the end side of the dependency\n *\n * ## Async resolving of references\n *\n * As described above, a dependency has links to events. These references are populated async, using the calculation\n * engine of the project that the resource via its store is a part of. Because of this asyncness, references cannot be\n * used immediately after modifications:\n *\n * ```javascript\n * dependency.from = 2;\n * // dependency.fromEvent is not yet up to date\n * ```\n *\n * To make sure references are updated, wait for calculations to finish:\n *\n * ```javascript\n * dependency.from = 2;\n * await dependency.project.commitAsync();\n * // dependency.fromEvent is up to date\n * ```\n *\n * As an alternative, you can also use `setAsync()` to trigger calculations directly after the change:\n *\n * ```javascript\n * await dependency.setAsync({ from : 2});\n * // dependency.fromEvent is up to date\n * ```\n *\n * @mixes SchedulerPro/data/mixin/PartOfProject\n * @extends Scheduler/model/DependencyBaseModel\n *\n * @typings Scheduler/model/DependencyModel -> Scheduler/model/SchedulerDependencyModel\n */\nexport default class DependencyModel extends PartOfProject(SchedulerProDependencyMixin.derive(DependencyBaseModel)) {\n    // NOTE: Leave field defs at top to be picked up by jsdoc\n    /**\n     * The calendar of the dependency used to take `lag` duration into account.\n     * @field {SchedulerPro.model.CalendarModel} calendar\n     */\n    /**\n     * Set to `false` to ignore this dependency in scheduling\n     * @field {Boolean} active\n     * @category Dependency\n     */\n    //region Config\n    static get $name() {\n        return 'DependencyModel';\n    }\n    static get isProDependencyModel() {\n        return true;\n    }\n    //endregion\n    //region Render early\n    // Buckets and references are not set up yet during early render, need to look up on stores\n    get fromEvent() {\n        if (this.project?.isDelayingCalculation) {\n            return this.project.eventStore.getById(super.fromEvent);\n        }\n        return super.fromEvent;\n    }\n    set fromEvent(from) {\n        super.fromEvent = from;\n    }\n    get toEvent() {\n        if (this.project?.isDelayingCalculation) {\n            return this.project.eventStore.getById(super.toEvent);\n        }\n        return super.toEvent;\n    }\n    set toEvent(to) {\n        super.toEvent = to;\n    }\n    //endregion\n}\nDependencyModel._$name = 'DependencyModel';", "import AjaxStore from '../../Core/data/AjaxStore.js';\nimport DependencyStoreMixin from '../../Scheduler/data/mixin/DependencyStoreMixin.js';\nimport DependencyModel from '../model/DependencyModel.js';\nimport { ChronoDependencyStoreMixin } from '../../Engine/quark/store/ChronoDependencyStoreMixin.js';\nimport PartOfProject from './mixin/PartOfProject.js';\n/**\n * @module SchedulerPro/data/DependencyStore\n */\n/**\n * A store representing a collection of dependencies between events in the {@link SchedulerPro.data.EventStore}.\n *\n * This store only accepts a model class inheriting from {@link SchedulerPro.model.DependencyModel}.\n *\n * A DependencyStore is usually connected to a project, which binds it to other related stores (EventStore,\n * AssignmentStore and ResourceStore). The project also handles references (fromEvent, toEvent) to related records\n * for the records in the store.\n *\n * Resolving the references happens async, records are not guaranteed to have up to date references until calculations\n * are finished. To be certain that references are resolved, call `await project.commitAsync()` after store actions. Or\n * use one of the `xxAsync` functions, such as `loadDataAsync()`.\n *\n * Using `commitAsync()`:\n *\n * ```javascript\n * dependencyStore.data = [{ from, to }, ...];\n *\n * // references (fromEvent, toEvent) not resolved yet\n *\n * await dependencyStore.project.commitAsync();\n *\n * // now they are\n * ```\n *\n * Using `loadDataAsync()`:\n *\n * ```javascript\n * await dependencyStore.loadDataAsync([{ from, to }, ...]);\n *\n * // references (fromEvent, toEvent) are resolved\n * ```\n *\n * @mixes SchedulerPro/data/mixin/PartOfProject\n * @mixes Scheduler/data/mixin/DependencyStoreMixin\n * @extends Core/data/AjaxStore\n *\n * @typings Scheduler/data/DependencyStore -> Scheduler/data/SchedulerDependencyStore\n */\nexport default class DependencyStore extends PartOfProject(DependencyStoreMixin(ChronoDependencyStoreMixin.derive(AjaxStore))) {\n    static get defaultConfig() {\n        return {\n            modelClass : DependencyModel\n        };\n    }\n}\nDependencyStore._$name = 'DependencyStore';", "/**\n * @module SchedulerPro/model/mixin/PercentDoneMixin\n */\n/**\n * PercentDone mixin to get the current status of a task.\n * @mixin\n */\nexport default Target => class PercentDoneMixin extends Target {\n    static get $name() {\n        return 'PercentDoneMixin';\n    }\n    /**\n     * The current status of a task, expressed as the percentage completed (integer from 0 to 100)\n     * @field {Number} percentDone\n     * @category Scheduling\n     */\n    // Field defined in Engine\n    /**\n     * Indicates if the task is started (its {@link #field-percentDone percent completion} is greater than zero).\n     * @property {Boolean}\n     * @category Progress\n     */\n    get isStarted() {\n        return this.percentDone > 0;\n    }\n    /**\n     * Indicates if the task is complete (its {@link #field-percentDone percent completion} is 100% (or greater)).\n     * @property {Boolean}\n     * @category Progress\n     */\n    get isCompleted() {\n        return this.percentDone >= 100;\n    }\n    /**\n     * Indicates if the task is in progress (its {@link #field-percentDone percent completion} is greater than zero and less than 100%).\n     * @property {Boolean}\n     * @category Progress\n     */\n    get isInProgress() {\n        return this.isStarted && !this.isCompleted;\n    }\n    // Reset % done value when copying a task\n    copy() {\n        const copy = super.copy(...arguments);\n        copy.percentDone = 0;\n        copy.clearChanges();\n        return copy;\n    }\n    /**\n     * Human-friendly rounding. When task is completed < 99%, it rounds the value. It floors value between 99 and 100, to not\n     * show task as completed when it is for example 99.51% done.\n     * @property {Number}\n     * @category Progress\n     */\n    get renderedPercentDone() {\n        const value = typeof this.percentDone === 'number' && !isNaN(this.percentDone) ? this.percentDone : 0;\n        return this.getFormattedPercentDone(value);\n    }\n    getFormattedPercentDone(value = 0) {\n        if (value <= 99) {\n            return Math.round(value);\n        }\n        return Math.floor(value);\n    }\n    set renderedPercentDone(value) {\n        this.percentDone = value;\n    }\n};\n", "import { SchedulerProEventSegment } from '../../Engine/quark/model/scheduler_pro/SchedulerProEventSegment.js';\nimport TimeSpan from '../../Scheduler/model/TimeSpan.js';\nimport EventModelMixin from '../../Scheduler/model/mixin/EventModelMixin.js';\nimport PercentDoneMixin from './mixin/PercentDoneMixin.js';\n/**\n * @module SchedulerPro/model/EventSegmentModel\n */\n/**\n * This class represents an individual segment of a split event.\n *\n * @extends Scheduler/model/TimeSpan\n * @mixes Scheduler/model/mixin/EventModelMixin\n * @mixes SchedulerPro/model/mixin/PercentDoneMixin\n */\nexport default class EventSegmentModel extends SchedulerProEventSegment.derive(TimeSpan).mixin(\n    EventModelMixin,\n    PercentDoneMixin\n) {\n    static get $name() {\n        return 'EventSegmentModel';\n    }\n    /**\n     * Zero-based index of the segment.\n     * @property {Number} segmentIndex\n     */\n    /**\n     * The event this segment belongs to.\n     * @member {SchedulerPro.model.EventModel} event\n     * @readonly\n     */\n    /**\n     * Alias for `event`, to better match naming in Gantt.\n     * @member {SchedulerPro.model.EventModel} task\n     * @readonly\n     */\n    get task() {\n        return this.event;\n    }\n}\nEventSegmentModel._$name = 'EventSegmentModel';", "import PartOfProject from '../data/mixin/PartOfProject.js';\nimport PercentDoneMixin from './mixin/PercentDoneMixin.js';\nimport { SchedulerProEvent } from '../../Engine/quark/model/scheduler_pro/SchedulerProEvent.js';\nimport Duration from '../../Core/data/Duration.js';\nimport DateHelper from '../../Core/helper/DateHelper.js';\nimport EventModelMixin from '../../Scheduler/model/mixin/EventModelMixin.js';\nimport TimeSpan from '../../Scheduler/model/TimeSpan.js';\nimport RecurringTimeSpan from '../../Scheduler/model/mixin/RecurringTimeSpan.js';\nimport EventSegmentModel from './EventSegmentModel.js';\n/**\n * @module SchedulerPro/model/EventModel\n */\n/**\n * This class represent a single event in your schedule, usually added to a {@link SchedulerPro.data.EventStore}.\n *\n * It is a subclass of the {@link Scheduler.model.TimeSpan}, which is in turn subclass of {@link Core.data.Model}.\n * Please refer to documentation of that class to become familiar with the base interface of the event.\n *\n * ## Async date calculations\n *\n * A record created from an `EventModel` is normally part of an `EventStore`, which in turn is part of a project. When\n * dates or the duration of an event is changed, the project performs async calculations to normalize the other fields.\n * For example if `duration` is change, it will calculate `endDate`.\n *\n * As a result of this being an async operation, the values of other fields are not guaranteed to be up to date\n * immediately after a change. To ensure data is up to date, await the calculations to finish.\n *\n * For example, `endDate` is not up to date after this operation:\n *\n * ```javascript\n * eventRecord.duration = 5;\n * // endDate not yet calculated\n * ```\n *\n * But if calculations are awaited it is up to date:\n *\n * ```javascript\n * eventRecord.duration = 5;\n * await eventRecord.project.commitAsync();\n * // endDate is calculated\n * ```\n *\n * As an alternative, you can also use `setAsync()` to trigger calculations directly after the change:\n *\n * ```javascript\n * await eventRecord.setAsync({ duration : 5});\n * // endDate is calculated\n * ```\n *\n * ## Subclassing the Event model class\n * The Event model has a few predefined fields as seen below. If you want to add new fields or change the options for\n * the existing fields, you can do that by subclassing this class (see example below).\n *\n * ```javascript\n * class MyEvent extends EventModel {\n *\n *     static get fields() {\n *         return [\n *            // Add new field\n *            { name: 'myField', type : 'number', defaultValue : 0 }\n *         ];\n *     },\n *\n *     myCheckMethod() {\n *         return this.myField > 0\n *     },\n *\n *     ...\n * });\n * ```\n *\n * If you in your data want to use other names for the startDate, endDate, resourceId and name fields you can configure\n * them as seen below:\n * ```javascript\n * class MyEvent extends EventModel {\n *\n *     static get fields() {\n *         return [\n *            { name: 'startDate', dataSource 'taskStart' },\n *            { name: 'endDate', dataSource 'taskEnd', format: 'YYYY-MM-DD' },\n *            { name: 'resourceId', dataSource 'userId' },\n *            { name: 'name', dataSource 'taskTitle' },\n *         ];\n *     },\n *     ...\n * });\n * ```\n *\n * Please refer to {@link Core.data.Model} for additional details.\n *\n * @extends Scheduler/model/TimeSpan\n * @mixes Scheduler/model/mixin/RecurringTimeSpan\n * @mixes Scheduler/model/mixin/EventModelMixin\n * @mixes SchedulerPro/model/mixin/PercentDoneMixin\n * @mixes SchedulerPro/data/mixin/PartOfProject\n *\n * @typings Scheduler/model/EventModel -> Scheduler/model/SchedulerEventModel\n */\nexport default class EventModel extends SchedulerProEvent.derive(TimeSpan).mixin(\n    RecurringTimeSpan,\n    PartOfProject,\n    EventModelMixin,\n    PercentDoneMixin\n) {\n    /**\n     * Returns the event store this event is part of.\n     *\n     * @member {SchedulerPro.data.EventStore} eventStore\n     * @readonly\n     * @typings Scheduler/model/TimeSpan:eventStore -> {Scheduler.data.EventStore||SchedulerPro.data.EventStore}\n     */\n    /**\n     * If given resource is assigned to this event, returns a {@link SchedulerPro.model.AssignmentModel} record.\n     * Otherwise returns `null`\n     *\n     * @method getAssignmentFor\n     * @param {SchedulerPro.model.ResourceModel} resource The instance of {@link SchedulerPro.model.ResourceModel}\n     *\n     * @returns {SchedulerPro.model.AssignmentModel|null}\n     */\n    /**\n     * This method assigns a resource to this event.\n     *\n     * Will cause the schedule to be updated - returns a `Promise`\n     *\n     * @method assign\n     * @param {SchedulerPro.model.ResourceModel} resource The instance of {@link SchedulerPro.model.ResourceModel}\n     * @param {Number} [units=100] The `units` field of the new assignment\n     *\n     * @async\n     * @propagating\n     */\n    /**\n     * This method unassigns a resource from this event.\n     *\n     * Will cause the schedule to be updated - returns a `Promise`\n     *\n     * @method unassign\n     * @param {SchedulerPro.model.ResourceModel} resource The instance of {@link SchedulerPro.model.ResourceModel}\n     *\n     * @async\n     * @propagating\n     */\n    /**\n     * Sets the calendar of the event. Will cause the schedule to be updated - returns a `Promise`\n     *\n     * @method setCalendar\n     * @param {SchedulerPro.model.CalendarModel} calendar The new calendar. Provide `null` to fall back to the project calendar.\n     * @async\n     * @propagating\n     */\n    /**\n     * Returns the event calendar.\n     *\n     * @method getCalendar\n     * @returns {SchedulerPro.model.CalendarModel} The event calendar.\n     */\n    /**\n     * Either activates or deactivates the task depending on the passed value.\n     * Will cause the schedule to be updated - returns a `Promise`\n     *\n     * @method setInactive\n     * @param {boolean} inactive `true` to deactivate the task, `false` to activate it.\n     * @async\n     * @propagating\n     */\n    /**\n     * Sets the start date of the event. Will cause the schedule to be updated - returns a `Promise`\n     *\n     * Note, that the actually set start date may be adjusted, according to the calendar, by skipping the non-working time forward.\n     *\n     * @method setStartDate\n     * @param {Date} date The new start date.\n     * @param {Boolean} [keepDuration=true] Whether to keep the duration (and update the end date), while changing the start date, or vice-versa.\n     * @async\n     * @propagating\n     */\n    /**\n     * Sets the end date of the event. Will cause the schedule to be updated - returns a `Promise`\n     *\n     * Note, that the actually set end date may be adjusted, according to the calendar, by skipping the non-working time backward.\n     *\n     * @method setEndDate\n     * @param {Date} date The new end date.\n     * @param {Boolean} [keepDuration=false] Whether to keep the duration (and update the start date), while changing the end date, or vice-versa.\n     * @async\n     * @propagating\n     */\n    /**\n     * Updates the duration (and optionally unit) of the event. Will cause the schedule to be updated - returns a `Promise`\n     *\n     * @method setDuration\n     * @param {Number} duration New duration value\n     * @param {String} [unit] New duration unit\n     * @async\n     * @propagating\n     */\n    /**\n     * Sets the constraint type and (optionally) constraining date to the event.\n     *\n     * @method setConstraint\n     * @param {'finishnoearlierthan'|'finishnolaterthan'|'mustfinishon'|'muststarton'|'startnoearlierthan'|'startnolaterthan'|null} constraintType\n     * Constraint type, please refer to the {@link #field-constraintType} for the valid\n     * values.\n     * @param {Date} [constraintDate] Constraint date.\n     * @async\n     * @propagating\n     */\n    /**\n     * Updates the {@link #field-effort} (and optionally {@link #field-effortUnit unit}) of the event.\n     * Will cause the schedule to be updated - returns a `Promise`\n     *\n     * @method setEffort\n     * @param {Number} effort New effort value\n     * @param {'millisecond'|'second'|'minute'|'hour'|'day'|'week'|'month'|'quarter'|'year'} [unit] New effort\n     * unit\n     * @async\n     * @propagating\n     */\n    /**\n     * Sets {@link #field-segments} field value.\n     *\n     * @method\n     * @name setSegments\n     * @param {SchedulerPro.model.EventSegmentModel[]} segments Array of segments or null to make the event not segmented.\n     * @returns {Promise}\n     * @propagating\n     */\n    /**\n     * Splits the event into segments.\n     * @method splitToSegments\n     * @param {Date} from The date to split this event at.\n     * @param {Number} [lag=1] Split duration.\n     * @param {String} [lagUnit] Split duration unit.\n     * @returns {Promise}\n     * @propagating\n     */\n    /**\n     * Merges the event segments.\n     * The method merges two provided event segments (and all the segment between them if any).\n     * @method mergeSegments\n     * @param {SchedulerPro.model.EventSegmentModel} [segment1] First segment to merge.\n     * @param {SchedulerPro.model.EventSegmentModel} [segment2] Second segment to merge.\n     * @returns {Promise}\n     * @propagating\n     */\n    /**\n     * Sets the event {@link #field-ignoreResourceCalendar} field value and triggers rescheduling.\n     *\n     * @method setIgnoreResourceCalendar\n     * @param {Boolean} ignore Provide `true` to ignore the calendars of the assigned resources\n     * when scheduling the event. If `false` the event performs only when\n     * its own {@link #field-calendar} and some of the assigned\n     * resource calendars allow that.\n     * @async\n     * @propagating\n     */\n    /**\n     * Returns the event {@link #field-ignoreResourceCalendar} field value.\n     *\n     * @method getIgnoreResourceCalendar\n     * @returns {Boolean} The event {@link #field-ignoreResourceCalendar} field value.\n     */\n    /**\n     * The event first segment or null if the event is not segmented.\n     * @member {SchedulerPro.model.EventSegmentModel} firstSegment\n     */\n    /**\n     * The event last segment or null if the event is not segmented.\n     * @member {SchedulerPro.model.EventSegmentModel} lastSegment\n     */\n    //region Config\n    static get $name() {\n        return 'EventModel';\n    }\n    static isProEventModel = true;\n    static get fields() {\n        return [\n            /**\n             * This field is automatically set to `true` when the event is \"unscheduled\" - user has provided an empty\n             * string in one of the UI editors for start date, end date or duration. Such event is not rendered,\n             * and does not affect the schedule of its successors.\n             *\n             * To schedule the event back, enter one of the missing values, so that there's enough information\n             * to calculate start date, end date and duration.\n             *\n             * Note, that setting this field manually does nothing. This field should be persisted, but not updated\n             * manually.\n             *\n             * @field {Boolean} unscheduled\n              * @readonly\n              * @category Scheduling\n             */\n            /**\n             * Segments of the event that appear when the event gets {@link #function-splitToSegments}.\n             * @field {SchedulerPro.model.EventSegmentModel[]} segments\n             * @category Scheduling\n             */\n            /**\n             * The current status of a task, expressed as the percentage completed (integer from 0 to 100)\n             *\n             * UI fields representing this data field are disabled for summary events.\n             * See {@link #function-isEditable} for details.\n             *\n             * @field {Number} percentDone\n             * @category Scheduling\n             */\n            /**\n             * The start date of a time span (or Event / Task).\n             *\n             * Uses {@link Core/helper/DateHelper#property-defaultFormat-static DateHelper.defaultFormat} to convert a\n             * supplied string to a Date. To specify another format, either change that setting or subclass TimeSpan and\n             * change the dateFormat for this field.\n             *\n             * UI fields representing this data field are disabled for summary events\n             * except the {@link #field-manuallyScheduled manually scheduled} events.\n             * See {@link #function-isEditable} for details.\n             *\n             * Note that the field always returns a `Date`.\n             *\n             * @field {Date} startDate\n             * @accepts {String|Date}\n             * @category Scheduling\n             */\n            /**\n             * The end date of a time span (or Event / Task).\n             *\n             * Uses {@link Core/helper/DateHelper#property-defaultFormat-static DateHelper.defaultFormat} to convert a\n             * supplied string to a Date. To specify another format, either change that setting or subclass TimeSpan and\n             * change the dateFormat for this field.\n             *\n             * UI fields representing this data field are disabled for summary events\n             * except the {@link #field-manuallyScheduled manually scheduled} events.\n             * See {@link #function-isEditable} for details.\n             *\n             * Note that the field always returns a `Date`.\n             *\n             * @field {Date} endDate\n             * @accepts {String|Date}\n             * @category Scheduling\n             */\n            /**\n             * The numeric part of the timespan's duration (the number of units).\n             *\n             * UI fields representing this data field are disabled for summary events\n             * except the {@link #field-manuallyScheduled manually scheduled} events.\n             * See {@link #function-isEditable} for details.\n             *\n             * @field {Number} duration\n             * @category Scheduling\n             */\n            /**\n             * Field storing the event constraint alias or NULL if not constraint set.\n             * Valid values are:\n             * - \"finishnoearlierthan\"\n             * - \"finishnolaterthan\"\n             * - \"mustfinishon\"\n             * - \"muststarton\"\n             * - \"startnoearlierthan\"\n             * - \"startnolaterthan\"\n             *\n             * @field {'finishnoearlierthan'|'finishnolaterthan'|'mustfinishon'|'muststarton'|'startnoearlierthan'|'startnolaterthan'|null} constraintType\n             * @category Scheduling\n             */\n            /**\n             * Field defining the constraint boundary date, if applicable.\n             * @field {Date} constraintDate\n             * @category Scheduling\n             */\n            /**\n             * When set to `true`, the `startDate` of the event will not be changed by any of its incoming dependencies\n             * or constraints.\n             *\n             * @field {Boolean} manuallyScheduled\n             * @category Scheduling\n             */\n            /**\n             * When set to `true` the event becomes inactive and stops taking part in the project scheduling (doesn't\n             * affect linked events and affect its assigned resources allocation).\n             *\n             * @field {Boolean} inactive\n             * @category Scheduling\n             */\n            /**\n             * When set to `true` the calendars of the assigned resources\n             * are not taken into account when scheduling the event.\n             *\n             * By default the field value is `false` resulting in that the event performs only when\n             * its own {@link #field-calendar} and some of the assigned\n             * resource calendars allow that.\n             * @field {Boolean} ignoreResourceCalendar\n             * @category Scheduling\n             */\n            /**\n             * A calculated field storing the _early start date_ of the event.\n             * The _early start date_ is the earliest possible date the event can start.\n             * This value is calculated based on the earliest dates of the event predecessors and the event own constraints.\n             * If the event has no predecessors nor other constraints, its early start date matches the project start date.\n             *\n             * UI fields representing this data field are naturally disabled since the field is readonly.\n             * See {@link #function-isEditable} for details.\n             *\n             * @field {Date} earlyStartDate\n             * @calculated\n             * @readonly\n             * @category Scheduling\n             */\n            /**\n             * A calculated field storing the _early end date_ of the event.\n             * The _early end date_ is the earliest possible date the event can finish.\n             * This value is calculated based on the earliest dates of the event predecessors and the event own constraints.\n             * If the event has no predecessors nor other constraints, its early end date matches the project start date plus the event duration.\n             *\n             * UI fields representing this data field are naturally disabled since the field is readonly.\n             * See {@link #function-isEditable} for details.\n             *\n             * @field {Date} earlyEndDate\n             * @calculated\n             * @readonly\n             * @category Scheduling\n             */\n            /**\n             * The calendar, assigned to the entity. Allows you to set the time when entity can perform the work.\n             *\n             * All entities are by default assigned to the project calendar, provided as the {@link SchedulerPro.model.ProjectModel#field-calendar} option.\n             *\n             * @field {SchedulerPro.model.CalendarModel} calendar\n             * @category Scheduling\n             */\n            /**\n             * The numeric part of the event effort (the number of units).\n             *\n             * @field {Number} effort\n             * @category Scheduling\n             */\n            /**\n             * The unit part of the event effort, defaults to \"h\" (hours). Valid values are:\n             *\n             * - \"millisecond\" - Milliseconds\n             * - \"second\" - Seconds\n             * - \"minute\" - Minutes\n             * - \"hour\" - Hours\n             * - \"day\" - Days\n             * - \"week\" - Weeks\n             * - \"month\" - Months\n             * - \"quarter\" - Quarters\n             * - \"year\"- Years\n             *\n             * This field is readonly after creation, to change it use the {@link #function-setEffort} call.\n             * @field {'millisecond'|'second'|'minute'|'hour'|'day'|'week'|'month'|'quarter'|'year'} effortUnit\n             * @default \"hour\"\n             * @category Scheduling\n             * @readonly\n             */\n            /**\n             * This field defines the event scheduling mode. Based on this field some fields of the event\n             * will be \"fixed\" (should be provided by the user) and some - computed.\n             *\n             * Possible values are:\n             *\n             * - `Normal` is the default (and backward compatible) mode. It means the event will be scheduled based on\n             * information about its start/end dates, event own calendar (project calendar if there's no one) and\n             * calendars of the assigned resources.\n             *\n             * - `FixedDuration` mode means, that event has fixed start and end dates, but its effort will be computed\n             * dynamically, based on the assigned resources information. When duration of such event increases,\n             * its effort is increased too. The mode tends to preserve user provided duration so changing effort\n             * results adjusting assignment units and vise-versa assignment changes adjusts effort.\n             *\n             * @field {'Normal'|'FixedDuration'} schedulingMode\n             * @category Scheduling\n             */\n            /**\n             * This boolean flag defines what part the data should be updated in the `FixedDuration` scheduling\n             * mode.\n             * If it is `true`, then {@link #field-effort} is kept intact when new duration is provided and\n             * assignment {@link SchedulerPro.model.AssignmentModel#field-units} is updated.\n             * If it is `false`, then assignment {@link SchedulerPro.model.AssignmentModel#field-units} is kept\n             * intact when new duration is provided and {@link #field-effort} is updated.\n             *\n             * @field {Boolean} effortDriven\n             * @default false\n             * @category Scheduling\n             */\n            /**\n             * The event effective calendar. Returns the\n             * {@link SchedulerPro.model.ProjectModel#field-calendar project calendar} if the event has no own\n             * {@link #field-calendar} provided.\n             * @member {SchedulerPro.model.CalendarModel} effectiveCalendar\n             */\n            /**\n             * Set this to true if this task should be shown in the Timeline widget\n             * @field {Boolean} showInTimeline\n             * @category Common\n             */\n            { name : 'showInTimeline', type : 'boolean', defaultValue : false },\n            /**\n             * Note about the event\n             * @field {String} note\n             * @category Common\n             */\n            'note',\n            /**\n             * Buffer time before event start. Specified in a human-friendly form as accepted by\n             * {@link Core.helper.DateHelper#function-parseDuration-static}:\n             * ```javascript\n             * // Create event model with a 30 minutes buffer time before the event start\n             * new EventModel({ startDate : '2020-01-01', endDate : '2020-01-02', preamble : '30 minutes' })\n             * ```\n             *\n             * Used by the {@link SchedulerPro.feature.EventBuffer} feature.\n             *\n             * @field {Core.data.Duration} preamble\n             * @accepts {String}\n             * @category Scheduling\n             */\n            {\n                name    : 'preamble',\n                convert : value => value ? new Duration(value) : null\n            },\n            /**\n             * Buffer time after event end. Specified in a human-friendly form as accepted by\n             * {@link Core.helper.DateHelper#function-parseDuration-static}:\n             * ```javascript\n             * // Create event model with a 1 hour buffer time after the event end\n             * new EventModel({ startDate : '2020-01-01', endDate : '2020-01-02', postamble : '1 hour' })\n             * ```\n             *\n             * Used by the {@link SchedulerPro.feature.EventBuffer} feature.\n             *\n             * @field {String} postamble\n             * @accepts {String}\n             * @category Scheduling\n             */\n            {\n                name    : 'postamble',\n                convert : value => value ? new Duration(value) : null\n            }\n        ];\n    }\n    getDefaultSegmentModelClass() {\n        return EventSegmentModel;\n    }\n    //endregion\n    //region EventBuffer\n    updateWrapDate(date, duration, forward = true) {\n        duration = new Duration(duration);\n        return new Date(date.getTime() + (forward ? 1 : -1) * duration.milliseconds);\n    }\n    get startDate() {\n        let dt;\n        if (this.isOccurrence) {\n            dt = this.get('startDate');\n        }\n        else {\n            // Micro optimization to avoid expensive super call. super will be hit in Scheduler Pro\n            dt = this._startDate ?? super.startDate;\n        }\n        if (this.allDay) {\n            dt = this.constructor.getAllDayStartDate(dt);\n        }\n        return dt;\n    }\n    set startDate(startDate) {\n        const me = this;\n        // Update children when parents startDate changes (ignoring initial data set)\n        if (me.generation && me.isParent && !me.$ignoreChange) {\n            const timeDiff = DateHelper.diff(me.startDate, startDate);\n            if (timeDiff) {\n                // Move all children same amount\n                for (const child of this.children) {\n                    child.startDate = DateHelper.add(child.startDate, timeDiff);\n                }\n            }\n        }\n        if (me.batching) {\n            me._startDate = startDate;\n            me.set({ startDate });\n        }\n        else {\n            super.startDate = startDate;\n            if (me.preamble) {\n                me.wrapStartDate = null;\n                me.wrapEndDate = null;\n            }\n        }\n    }\n    get endDate() {\n        let dt;\n        if (this.isOccurrence) {\n            dt = this.get('endDate');\n        }\n        else {\n            // Micro optimization to avoid expensive super call. super will be hit in Scheduler Pro\n            dt = this._endDate ?? super.endDate;\n        }\n        if (this.allDay) {\n            dt = this.constructor.getAllDayEndDate(dt);\n        }\n        return dt;\n    }\n    set endDate(endDate) {\n        const me = this;\n        if (me.batching) {\n            me._endDate = endDate;\n            me.set({ endDate });\n        }\n        else {\n            super.endDate = endDate;\n            if (me.postamble) {\n                me.wrapStartDate = null;\n                me.wrapEndDate = null;\n            }\n        }\n    }\n    /**\n     * Property which encapsulates the effort's magnitude and units.\n     *\n     * UI fields representing this property are disabled for summary events.\n     * See {@link #function-isEditable} for details.\n     *\n     * @property {Core.data.Duration}\n     */\n    get fullEffort() {\n        return new Duration({\n            unit      : this.effortUnit,\n            magnitude : this.effort\n        });\n    }\n    set fullEffort(effort) {\n        this.setEffort(effort.magnitude, effort.unit);\n    }\n    // Cannot use `convert` method because it might be disabled by `useRawData : true` and we always need to calculate\n    // that value\n    get wrapStartDate() {\n        const\n            me                      = this,\n            { preamble, startDate } = me,\n            wrapStartDate           = me._wrapStartDate;\n        let result;\n        if (wrapStartDate) {\n            result = wrapStartDate;\n        }\n        else {\n            if (preamble) {\n                result = me.updateWrapDate(startDate, preamble, false);\n                me._wrapStartDate = result;\n            }\n            else {\n                result = startDate;\n            }\n        }\n        return result;\n    }\n    set wrapStartDate(value) {\n        this._wrapStartDate = value;\n    }\n    get wrapEndDate() {\n        const\n            me                     = this,\n            { postamble, endDate } = me,\n            wrapEndDate            = me._wrapEndDate;\n        let result;\n        if (wrapEndDate) {\n            result = wrapEndDate;\n        }\n        else {\n            if (postamble) {\n                result = me.updateWrapDate(endDate, postamble, true);\n                me._wrapEndDate = result;\n            }\n            else {\n                result = endDate;\n            }\n        }\n        return result;\n    }\n    set wrapEndDate(value) {\n        this._wrapEndDate = value;\n    }\n    set(data) {\n        const isObject = typeof data === 'object';\n        if (data === 'preamble' || (isObject && 'preamble' in data)) {\n            this.wrapStartDate = null;\n        }\n        if (data === 'postamble' || (isObject && 'postamble' in data)) {\n            this.wrapEndDate = null;\n        }\n        return super.set(...arguments);\n    }\n    /**\n     * Returns event start date adjusted by {@link #field-preamble} (start date - duration).\n     * @property {Date}\n     * @readonly\n     */\n    get outerStartDate() {\n        return this.wrapStartDate;\n    }\n    /**\n     * Returns event end date adjusted by {@link #field-postamble} (end date + duration).\n     * @property {Date}\n     * @readonly\n     */\n    get outerEndDate() {\n        return this.wrapEndDate;\n    }\n    //endregion\n    /**\n     * Defines if the given event field should be manually editable in UI.\n     * You can override this method to provide your own logic.\n     *\n     * By default, the method defines:\n     * - {@link #field-earlyStartDate}, {@link #field-earlyEndDate} as not editable;\n     * - {@link #field-endDate}, {@link #field-duration} and {@link #field-fullDuration} fields\n     *   as not editable for summary events except the {@link #field-manuallyScheduled manually scheduled} ones;\n     * - {@link #field-percentDone} as not editable for summary events.\n     *\n     * @param {String} fieldName Name of the field\n     * @returns {Boolean} Returns `true` if the field is editable, `false` if it is not and `undefined` if the event has\n     * no such field.\n     */\n    isEditable(fieldName) {\n        switch (fieldName) {\n            // r/o fields\n            case 'earlyStartDate':\n            case 'earlyEndDate':\n                return false;\n            // disable percentDone editing for summary tasks\n            case 'percentDone' :\n            case 'renderedPercentDone' :\n                return this.isLeaf;\n            // end/duration is allowed to edit for leafs and manually scheduled summaries\n            case 'endDate' :\n            case 'duration' :\n            case 'fullDuration' :\n                return this.isLeaf || this.manuallyScheduled;\n        }\n        return super.isEditable(fieldName);\n    }\n    // Occurrences are not part of the project, when requesting their stm we retrieve it from the master event instead\n    get stm() {\n        return this.recurringEvent?.stm ?? super.stm;\n    }\n    set stm(stm) {\n        super.stm = stm;\n    }\n    //region Early render\n    get assigned() {\n        const\n            { project }  = this,\n            assigned     = super.assigned;\n        // Figure assigned events out before buckets are created  (if part of project)\n        if (project?.isDelayingCalculation && !assigned) {\n            return project.assignmentStore.storage.findItem('event', this);\n        }\n        return assigned;\n    }\n    set assigned(assigned) {\n        super.assigned = assigned;\n    }\n    //endregion\n    getCurrentConfig(options) {\n        const\n            { segments } = this,\n            result       = super.getCurrentConfig(options);\n        // include segments\n        if (result && segments) {\n            result.segments = segments.map(segment => segment.getCurrentConfig(options));\n        }\n        return result;\n    }\n}\nEventModel._$name = 'EventModel';", "import AjaxStore from '../../Core/data/AjaxStore.js';\nimport GetEventsMixin from '../../Scheduler/data/mixin/GetEventsMixin.js';\nimport DayIndexMixin from '../../Scheduler/data/mixin/DayIndexMixin.js';\nimport EventStoreMixin from '../../Scheduler/data/mixin/EventStoreMixin.js';\nimport SharedEventStoreMixin from '../../Scheduler/data/mixin/SharedEventStoreMixin.js';\nimport RecurringEventsMixin from '../../Scheduler/data/mixin/RecurringEventsMixin.js';\nimport EventModel from '../model/EventModel.js';\nimport PartOfProject from './mixin/PartOfProject.js';\nimport { ChronoEventStoreMixin } from '../../Engine/quark/store/ChronoEventStoreMixin.js';\n/**\n * @module SchedulerPro/data/EventStore\n */\n/**\n * A store holding all the {@link SchedulerPro.model.EventModel events} to be rendered into a {@link SchedulerPro.view.SchedulerPro Scheduler Pro}.\n *\n * This store only accepts a model class inheriting from {@link SchedulerPro.model.EventModel}.\n *\n * An EventStore is usually connected to a project, which binds it to other related stores (AssignmentStore,\n * ResourceStore and DependencyStore). The project also handles normalization/calculation of the data on the records in\n * the store. For example if a record is added with a `startDate` and an `endDate`, it will calculate the `duration`.\n *\n * The calculations happens async, records are not guaranteed to have up to date data until they are finished. To be\n * certain that calculations have finished, call `await project.commitAsync()` after store actions. Or use one of the\n * `xxAsync` functions, such as `loadDataAsync()`.\n *\n * Using `commitAsync()`:\n *\n * ```javascript\n * eventStore.data = [{ startDate, endDate }, ...];\n *\n * // duration of the record is not yet calculated\n *\n * await eventStore.project.commitAsync();\n *\n * // now it is\n * ```\n *\n * Using `loadDataAsync()`:\n *\n * ```javascript\n * await eventStore.loadDataAsync([{ startDate, endDate }, ...]);\n *\n * // duration is calculated\n * ```\n *\n * @mixes SchedulerPro/data/mixin/PartOfProject\n * @mixes Scheduler/data/mixin/SharedEventStoreMixin\n * @mixes Scheduler/data/mixin/GetEventsMixin\n * @mixes Scheduler/data/mixin/EventStoreMixin\n * @mixes Scheduler/data/mixin/RecurringEventsMixin\n * @extends Core/data/AjaxStore\n *\n * @typings Scheduler/data/EventStore -> Scheduler/data/SchedulerEventStore\n */\nexport default class EventStore extends PartOfProject(SharedEventStoreMixin(RecurringEventsMixin(GetEventsMixin(DayIndexMixin(EventStoreMixin(ChronoEventStoreMixin.derive(AjaxStore))))))) {\n    //region Config\n    static $name = 'EventStore';\n    static get defaultConfig() {\n        return {\n            modelClass : EventModel\n        };\n    }\n    //endregion\n}\nEventStore._$name = 'EventStore';", "import GridRowModel from '../../Grid/data/GridRowModel.js';\nimport ResourceModelMixin from '../../Scheduler/model/mixin/ResourceModelMixin.js';\nimport { SchedulerProResourceMixin } from '../../Engine/quark/model/scheduler_pro/SchedulerProResourceMixin.js';\nimport PartOfProject from '../data/mixin/PartOfProject.js';\n/**\n * @module SchedulerPro/model/ResourceModel\n */\n/**\n * This class represent a single Resource in Scheduler Pro, usually added to a {@link SchedulerPro.data.ResourceStore}.\n *\n * It is a subclass of  {@link Core.data.Model}. Please refer to the documentation for that class to become familiar\n * with the base interface of the resource.\n *\n * ## Fields and references\n *\n * A resource has a few predefined fields, see Fields below. If you want to add more fields with meta data describing\n * your resources then you should subclass this class:\n *\n * ```javascript\n * class MyResource extends ResourceModel {\n *   static get fields() {\n *     return [\n *       // \"id\" and \"name\" fields are already provided by the superclass\n *       { name: 'company', type : 'string' }\n *     ];\n *   }\n * });\n * ```\n *\n * If you want to use other names in your data for the id and name fields you can configure them as seen below:\n *\n * ```javascript\n * class MyResource extends ResourceModel {\n *   static get fields() {\n *     return [\n *        { name: 'name', dataSource: 'userName' }\n *     ];\n *   },\n * });\n * ```\n *\n * After load and project normalization, these references are accessible (assuming their respective stores are loaded):\n * - `{@link #property-assignments}` - The linked assignment records\n * - `{@link #property-events}` - The linked (through assignments) event records\n *\n * ## Async resolving of references\n *\n * As described above, a resource has links to assignments and events. These references are populated async, using the\n * calculation engine of the project that the resource via its store is a part of. Because of this asyncness, references\n * cannot be used immediately after assignment modifications:\n *\n * ```javascript\n * assignment.resourceId = 2;\n * // resource.assignments is not yet up to date\n * ```\n *\n * To make sure references are updated, wait for calculations to finish:\n *\n * ```javascript\n * assignment.resourceId = 2;\n * await assignment.project.commitAsync();\n * // resource.assignments is up to date\n * ```\n *\n * As an alternative, you can also use `setAsync()` to trigger calculations directly after the change:\n *\n * ```javascript\n * await assignment.setAsync({ resourceId : 2});\n * // resource.assignments is up to date\n * ```\n *\n * @extends Grid/data/GridRowModel\n * @mixes Scheduler/model/mixin/ResourceModelMixin\n *\n * @typings Scheduler/model/ResourceModel -> Scheduler/model/SchedulerResourceModel\n */\nexport default class ResourceModel extends PartOfProject(ResourceModelMixin(SchedulerProResourceMixin.derive(GridRowModel))) {\n    //region Calendar\n    /**\n     * Sets the calendar of the task. Will cause the schedule to be updated - returns a `Promise`\n     *\n     * @method setCalendar\n     * @param {SchedulerPro.model.CalendarModel} calendar The new calendar. Provide `null` to use the project calendar.\n     * @async\n     * @propagating\n     */\n    /**\n     * Returns the resource calendar.\n     *\n     * @method getCalendar\n     * @returns {SchedulerPro.model.CalendarModel} The resource calendar.\n     */\n    /**\n     * The calendar, assigned to the entity. Allows you to set the time when entity can perform the work.\n     *\n     * @field {SchedulerPro.model.CalendarModel} calendar\n     * @accepts {SchedulerPro.model.CalendarModel|String}\n     * @category Scheduling\n     */\n    //endregion\n    //region Config\n    static get $name() {\n        return 'ResourceModel';\n    }\n    //endregion\n    /**\n     * Get associated events\n     *\n     * @member {SchedulerPro.model.EventModel[]} events\n     * @readonly\n     * @category Common\n     */\n    /**\n     * Returns all assignments for the resource\n     *\n     * @member {SchedulerPro.model.AssignmentModel[]} assignments\n     * @category Common\n     */\n    //region Early render\n    get assigned() {\n        const { project } = this;\n        // Figure assigned events out before buckets are created (if part of project)\n        if (project?.assignmentStore.storage._indices?.resource) {\n            return project.assignmentStore.storage.findItem('resource', this) ?? new Set();\n        }\n        return super.assigned;\n    }\n    set assigned(assigned) {\n        super.assigned = assigned;\n    }\n    //endregion\n}\nResourceModel._$name = 'ResourceModel';", "import AjaxStore from '../../Core/data/AjaxStore.js';\nimport ResourceStoreMixin from '../../Scheduler/data/mixin/ResourceStoreMixin.js';\nimport ResourceModel from '../model/ResourceModel.js';\nimport { ChronoResourceStoreMixin } from '../../Engine/quark/store/ChronoResourceStoreMixin.js';\nimport PartOfProject from './mixin/PartOfProject.js';\n/**\n * @module SchedulerPro/data/ResourceStore\n */\n/**\n * A store holding all the {@link SchedulerPro.model.ResourceModel resources} to be rendered into a\n * {@link SchedulerPro.view.SchedulerPro Scheduler Pro}.\n *\n * This store only accepts a model class inheriting from {@link SchedulerPro.model.ResourceModel}.\n *\n * A ResourceStore is usually connected to a project, which binds it to other related stores (EventStore,\n * AssignmentStore and DependencyStore). The project also handles references (assignments, events) to related records\n * for the records in the store.\n *\n * Resolving the references happens async, records are not guaranteed to have up to date references until calculations\n * are finished. To be certain that references are resolved, call `await project.commitAsync()` after store actions. Or\n * use one of the `xxAsync` functions, such as `loadDataAsync()`.\n *\n * Using `commitAsync()`:\n *\n * ```javascript\n * resourceStore.data = [{ id }, ...];\n *\n * // references (assignments, events) not resolved yet\n *\n * await resourceStore.project.commitAsync();\n *\n * // now they are\n * ```\n *\n * Using `loadDataAsync()`:\n *\n * ```javascript\n * await resourceStore.loadDataAsync([{ id }, ...]);\n *\n * // references (assignments, events) are resolved\n * ```\n *\n * @mixes SchedulerPro/data/mixin/PartOfProject\n * @mixes Scheduler/data/mixin/ResourceStoreMixin\n * @extends Core/data/AjaxStore\n *\n * @typings Scheduler/data/ResourceStore -> Scheduler/data/SchedulerResourceStore\n */\nexport default class ResourceStore extends PartOfProject(ResourceStoreMixin(ChronoResourceStoreMixin.derive(AjaxStore))) {\n    static get defaultConfig() {\n        return {\n            modelClass : ResourceModel\n        };\n    }\n}\nResourceStore._$name = 'ResourceStore';", "import SchedulerProjectCrudManager from '../../../Scheduler/data/mixin/ProjectCrudManager.js';\nimport Base from '../../../Core/Base.js';\n/**\n * @module SchedulerPro/data/mixin/ProjectCrudManager\n */\n// the order of the @mixes tags is important below, as the \"AbstractCrudManagerMixin\"\n// contains the abstract methods, which are then overwritten by the concrete\n// implementation in the AjaxTransport and JsonEncoder\n/**\n * This mixin provides Crud manager functionality to a Scheduler Pro project.\n * The mixin turns the provided project model into a Crud manager instance.\n *\n * @mixin\n * @mixes Scheduler/data/mixin/ProjectCrudManager\n * @typings Scheduler/data/mixin/ProjectCrudManager -> Scheduler/data/mixin/SchedulerProjectCrudManager\n */\nexport default Target => class ProjectCrudManager extends (Target || Base).mixin(SchedulerProjectCrudManager) {\n    static get configurable() {\n        return {\n            crudLoadValidationWarningPrefix : 'Project load response error(s):',\n            crudSyncValidationWarningPrefix : 'Project sync response error(s):',\n            /**\n             * If `true`, project {@link #property-changes} API will also report project model changes: start/end date,\n             * calendar, effort, duration, etc.\n             * @prp {Boolean}\n             * @default\n             */\n            trackProjectModelChanges : false\n        };\n    }\n    construct(...args) {\n        const me = this;\n        super.construct(...args);\n        // add the Engine specific stores to the crud manager\n        me.addPrioritizedStore(me.calendarManagerStore);\n        me.addPrioritizedStore(me.assignmentStore);\n        me.addPrioritizedStore(me.dependencyStore);\n        me.addPrioritizedStore(me.resourceStore);\n        me.addPrioritizedStore(me.eventStore);\n        if (me.timeRangeStore) {\n            me.addPrioritizedStore(me.timeRangeStore);\n        }\n        if (me.resourceTimeRangeStore) {\n            me.addPrioritizedStore(me.resourceTimeRangeStore);\n        }\n    }\n    get project() {\n        return this;\n    }\n    set project(value) {\n        super.project = value;\n    }\n    get crudLoadValidationMandatoryStores() {\n        return [this.getStoreDescriptor(this.eventStore).storeId];\n    }\n    loadCrudManagerData(...args) {\n        if (this.delayCalculation && !this.isDelayingCalculation && !this.usingSyncDataOnLoad()) {\n            this.scheduleDelayedCalculation();\n        }\n        super.loadCrudManagerData(...args);\n    }\n    acceptChanges() {\n        super.acceptChanges();\n        // clear project model own field changes\n        this.clearChanges(true, false);\n    }\n    revertChanges() {\n        // revertChanges method exists both on the Model and AbstractCrudManagerMixin class\n        // so here we have to couple both of them\n        // first invoke Crud Manager logic\n        this.revertCrudStoreChanges();\n        // then invoke Model logic - revert project model own field changes\n        this.set(this.meta.modified, undefined, true);\n    }\n    // Override to take into account project model own field changes\n    crudStoreHasChanges(storeId) {\n        const store = this.getCrudStore(storeId);\n        let result;\n        if (store) {\n            result = super.crudStoreHasChanges(store);\n        }\n        else {\n            result = this.hasPersistableChanges || super.crudStoreHasChanges();\n        }\n        return result;\n    }\n    /**\n     * Returns current changes as an object consisting of added/modified/removed arrays of records for every\n     * managed store, keyed by each store's `id`. Returns `null` if no changes exist. Format:\n     *\n     * ```javascript\n     * {\n     *     resources : {\n     *         added    : [{ name : 'New guy' }],\n     *         modified : [{ id : 2, name : 'Mike' }],\n     *         removed  : [{ id : 3 }]\n     *     },\n     *     events : {\n     *         modified : [{  id : 12, name : 'Cool task' }]\n     *     },\n     *     ...\n     * }\n     * ```\n     *\n     * To also include changes of the project model itself set {@link #property-trackProjectModelChanges} to `true`:\n     *\n     * ```javascript\n     * {\n     *     project : {\n     *         calendar  : 'custom',\n     *         startDate : '2020-02-02',\n     *         endDate   : '2020-02-10\n     *     },\n     *     resources : {...},\n     *     events    : {...}\n     * }\n     * ```\n     *\n     * @property {Object}\n     * @readonly\n     * @category CRUD\n     */\n    get changes() {\n        let changes = super.changes;\n        if (this.trackProjectModelChanges) {\n            const projectChanges = this.modificationDataToWrite;\n            // include project changes\n            if (projectChanges) {\n                changes = changes || {};\n                changes.project = projectChanges;\n            }\n        }\n        return changes;\n    }\n    shouldClearRecordFieldChange(record, field, value) {\n        // If that's a calendar model \"intervals\" field\n        // we just check if the underlying store is actually dirty.\n        if (record.isCalendarModel && field === 'intervals') {\n            return !record.get('intervals').changes;\n        }\n        return super.shouldClearRecordFieldChange(...arguments);\n    }\n};\n", "import Base from '../../../Core/Base.js';\nimport ObjectHelper from '../../../Core/helper/ObjectHelper.js';\n/**\n * @module SchedulerPro/model/mixin/ProjectChangeHandlerMixin\n */\n// Check if assigning a raw value will make the field change\nconst willChange = (fieldName, rawData, record) => {\n    const\n        field          = record.getFieldDefinition(fieldName),\n        { dataSource } = field,\n        newValue       = record.constructor.processField(fieldName, rawData[dataSource], record);\n    return dataSource in rawData && !field.isEqual(newValue, record[fieldName]);\n};\n/**\n * This mixin allows syncing a changes object between projects. See {@link #function-applyProjectChanges} for usage\n * @mixin\n */\nexport default Target => class ProjectChangeHandlerMixin extends (Target || Base) {\n    startConfigure(config) {\n        // process the project first which ingests any configured data sources,\n        this.getConfig('project');\n        super.startConfigure(config);\n    }\n    beforeApplyProjectChanges() {\n        const { stm } = this;\n        let shouldResume = false;\n        this.suspendChangesTracking();\n        if (stm.enabled) {\n            shouldResume = true;\n            if (stm.isRecording) {\n                stm.stash();\n            }\n            if (this.ignoreRemoteChangesInSTM) {\n                stm.disable();\n            }\n            else {\n                stm.startTransaction();\n            }\n        }\n        return shouldResume;\n    }\n    /**\n     * Allows to apply changes from one project to another. For method to produce correct results, projects should be\n     * isomorphic - they should use same models and store configuration, also data in source and target projects\n     * should be identical before changes to the source project are made and applied to the target project.\n     * This method is meant to apply changes in real time - as source project is changed, changes should be applied to\n     * the target project before it is changed.\n     * When changes are applied all changes are committed and project is recalculated, which means target project\n     * won't have any local changes after.\n     *\n     * Usage:\n     * ```javascript\n     * // Collect changes from first project\n     * const { changes } = projectA;\n     *\n     * // Apply changes to second project\n     * await projectB.applyProjectChanges(changes);\n     * ```\n     *\n     * <div class=\"note\">\n     * This method will apply changes from the incoming object and accept all current project changes. Before\n     * applying changes make sure you've processed current project changes in order not to lose them.\n     * </div>\n     *\n     * @param {Object} changes Project {@link Scheduler/crud/AbstractCrudManagerMixin#property-changes} object\n     * @returns {Promise}\n     */\n    async applyProjectChanges(changes) {\n        const\n            me           = this,\n            shouldResume = me.beforeApplyProjectChanges();\n        // Raise a flag to let store know not to stash stm changes\n        me.applyingChangeset = true;\n        if (changes.project) {\n            me.applyProjectResponse(changes.project);\n        }\n        // Apply changes from other project, except for dates that will lead to changed constraints (engine is not aware\n        // that we want to keep the constraint)\n        // Has to clone to be able to catch the change and clean it up after commit\n        me.applyChangeset(ObjectHelper.clone(changes), (storeChanges, store) => {\n            if ((store.id === 'tasks' || store.id === 'events')) {\n                const\n                    { modelClass } = store,\n                    startDate      = modelClass.getFieldDataSource('startDate'),\n                    endDate        = modelClass.getFieldDataSource('endDate');\n                if (storeChanges.updated) {\n                    for (const data of storeChanges.updated) {\n                        const record = store.getById(data[modelClass.idField]);\n                        if (!(\n                            willChange('constraintType', data, record) ||\n                            willChange('constraintDate', data, record)\n                        )) {\n                            delete data[startDate];\n                            delete data[endDate];\n                        }\n                    }\n                }\n            }\n        });\n        await me.commitAsync();\n        // This will clean up changes in the project model if they match incoming values\n        me.commitRespondedChanges();\n        // The call to applyChangeset() clears changes (it might, but not always), but commitAsync() leads to new\n        // changes. If those changes match what we requested, we flag them as not modified\n        for (const storeId in changes) {\n            const storeDescriptor = me.getStoreDescriptor(storeId);\n            // if that a Store section\n            if (storeDescriptor) {\n                const\n                    // Due to this issue better to use lookup on the project instance rather than in global registry\n                    // https://github.com/bryntum/support/issues/5238\n                    { store }    = storeDescriptor,\n                    storeChanges = changes[storeId],\n                    changedRows  = [...storeChanges.updated ?? [], ...storeChanges.added ?? []];\n                // Store might be destroyed, asyncness...\n                if (store) {\n                    // Iterate updated and added rows\n                    for (const data of changedRows) {\n                        const record = store.getById(data[store.modelClass.idField]);\n                        // Record might not have been added e.g. if change was conflicting and got resolved by rejecting\n                        if (record) {\n                            // Compare each change on the matching record with the raw data value, unflag change if they match\n                            for (const fieldName in record.modifications) {\n                                if (!willChange(fieldName, data, record)) {\n                                    delete record.meta.modified[fieldName];\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        me.afterApplyProjectChanges(shouldResume);\n        me.applyingChangeset = false;\n        // Trigger commit async in case non-project related field (e.g. name) was changed to update possibly\n        // opened task editor\n        await me.commitAsync();\n    }\n    afterApplyProjectChanges(shouldResume) {\n        if (shouldResume) {\n            const { stm } = this;\n            if (this.ignoreRemoteChangesInSTM) {\n                stm.enable();\n            }\n            else {\n                stm.stopTransaction();\n            }\n            stm.applyStash();\n        }\n        this.resumeChangesTracking();\n    }\n};\n", "/**\n * @module SchedulerPro/data/stm/action/EventUpdateAction\n */\nimport UpdateAction from '../../../../Core/data/stm/action/UpdateAction.js';\n/**\n * Action to record the fact that an event model has been updated.\n * @extends Core/data/stm/action/UpdateAction\n */\nexport default class EventUpdateAction extends UpdateAction {\n    get type() {\n        return 'EventUpdateAction';\n    }\n    construct(config) {\n        let {\n            model,\n            newData,\n            oldData\n        } = config;\n        // If we have \"segments\" represented in both old & new data states\n        if (newData.segments && oldData.segments) {\n            oldData = { ...oldData };\n            newData = { ...newData };\n            const\n                oldDataSegments = oldData.segments.slice(),\n                newDataSegments = newData.segments.slice();\n            let hasChanges = false;\n            // If a segment instance exists in both states\n            // we need to find segments existing in both versions.\n            // They should not be changed when undo/redo the main event\n            // since their model changes are recorded by STM.\n            oldData.segments.forEach((segment, index) => {\n                const newDataIndex = newData.segments.indexOf(segment);\n                // If a segment instance exists in both states\n                // we uses it as-is ..since STM is supposed to handle the instance changes\n                if (newDataIndex > -1) {\n                    oldDataSegments[index] = newDataSegments[newDataIndex] = segment;\n                    hasChanges = true;\n                }\n            });\n            if (hasChanges) {\n                oldData.segments = oldDataSegments;\n                newData.segments = newDataSegments;\n            }\n        }\n        return super.construct({\n            model,\n            newData,\n            oldData\n        });\n    }\n}\nEventUpdateAction._$name = 'EventUpdateAction';", "/**\n * @module SchedulerPro/data/stm/StateTrackingManager\n */\nimport EventUpdateAction from './action/EventUpdateAction.js';\nimport CoreStateTrackingManager from '../../../Core/data/stm/StateTrackingManager.js';\nimport UpdateAction from '../../../Core/data/stm/action/UpdateAction.js';\nexport const makeModelUpdateAction = (model, newData, oldData) => {\n    // if that's a SplitEventMixin instance\n    if (model.isSplitEventMixin) {\n        return new EventUpdateAction({\n            model,\n            newData,\n            oldData\n        });\n    }\n    return new UpdateAction({\n        model,\n        newData,\n        oldData\n    });\n};\n/**\n * {@link Core/data/stm/StateTrackingManager} subclass that's aware of the Scheduler Pro data structure specifics,\n * namely supports tracking of event segment changes.\n *\n * There is normally no need to deal with this class manually since it's instantiated automatically by the project\n * and can be reached like this:\n * ```javascript\n * project.stm\n * ```\n *\n * ## Tracking store changes\n *\n * Tracks the state of every store registered via {@link #function-addStore}. It is {@link #config-disabled} by default\n * so remember to call {@link #function-enable} when your stores are registered and initial dataset is loaded.\n * Use {@link #function-undo} / {@link #function-redo} method calls to restore state to a particular\n * point in time\n *\n * ```javascript\n * stm = new StateTrackingManager({\n *     autoRecord : true,\n *     listeners  : {\n *        'recordingstop' : () => {\n *            // your custom code to update undo/redo GUI controls\n *            updateUndoRedoControls();\n *        },\n *        'restoringstop' : ({ stm }) => {\n *            // your custom code to update undo/redo GUI controls\n *            updateUndoRedoControls();\n *        }\n *    },\n *    getTransactionTitle : (transaction) => {\n *        // your custom code to analyze the transaction and return custom transaction title\n *        const lastAction = transaction.queue[transaction.queue.length - 1];\n *\n *        if (lastAction instanceof AddAction) {\n *            let title = 'Add new record';\n *        }\n *\n *        return title;\n *    }\n * });\n *\n * stm.addStore(userStore);\n * stm.addStore(companyStore);\n * stm.addStore(otherStore);\n *\n * stm.enable();\n * ```\n *\n * ## Resetting the queue on data loading\n *\n * When loading data from the server it makes perfect sense to {@link #function-resetQueue reset the queue}.\n *\n * If project (CrudManager protocol) is used for data loading it can be done like this:\n *\n * ```javascript\n * project.on({\n *     load() {\n *         project.stm.resetQueue();\n *     }\n * });\n * ```\n *\n * and in case individual stores are used:\n *\n * ```javascript\n * ajaxStore.on({\n *     load() {\n *         ajaxStore.stm.resetQueue();\n *     }\n * });\n * ```\n *\n * @extends Core/data/stm/StateTrackingManager\n * @typings Core/data/stm/StateTrackingManager -> Core/data/stm/CoreStateTrackingManager\n */\nexport default class StateTrackingManager extends CoreStateTrackingManager {\n    static get defaultConfig() {\n        return {\n            makeModelUpdateAction\n        };\n    }\n}\nStateTrackingManager._$name = 'StateTrackingManager';", "import { SchedulerProProjectMixin } from '../../Engine/quark/model/scheduler_pro/SchedulerProProjectMixin.js';\nimport ProjectModelMixin from '../../Scheduler/model/mixin/ProjectModelMixin.js';\nimport ProjectChangeHandlerMixin from './mixin/ProjectChangeHandlerMixin.js';\nimport ProjectCrudManager from '../data/mixin/ProjectCrudManager.js';\nimport AssignmentModel from './AssignmentModel.js';\nimport CalendarModel from './CalendarModel.js';\nimport DependencyModel from './DependencyModel.js';\nimport EventModel from './EventModel.js';\nimport ResourceModel from './ResourceModel.js';\nimport CalendarManagerStore from '../data/CalendarManagerStore.js';\nimport DependencyStore from '../data/DependencyStore.js';\nimport EventStore from '../data/EventStore.js';\nimport ResourceStore from '../data/ResourceStore.js';\nimport AssignmentStore from '../data/AssignmentStore.js';\nimport StateTrackingManager from '../data/stm/StateTrackingManager.js';\n/**\n * @module SchedulerPro/model/ProjectModel\n */\n/**\n * Scheduler Pro Project model class - a central place for all data.\n *\n * It holds and links the stores usually used by Scheduler Pro:\n *\n * - {@link SchedulerPro/data/EventStore}\n * - {@link SchedulerPro/data/ResourceStore}\n * - {@link SchedulerPro/data/AssignmentStore}\n * - {@link SchedulerPro/data/DependencyStore}\n * - {@link SchedulerPro/data/CalendarManagerStore}\n * - {@link Scheduler/data/ResourceTimeRangeStore}\n * - {@link #config-timeRangeStore TimeRangeStore}\n *\n * The project uses a scheduling engine to calculate dates, durations and such. It is also responsible for\n * handling references between models, for example to link an event via an assignment to a resource. These operations\n * are asynchronous, a fact that is hidden when working in the Scheduler Pro UI but which you must know about when\n * performing operations on the data level.\n *\n * When there is a change to data that requires something else to be recalculated, the project schedules a calculation\n * (a commit) which happens moments later. It is also possible to trigger these calculations directly. This flow\n * illustrates the process:\n *\n * 1. Something changes which requires the project to recalculate, for example adding a new task:\n *\n * ```javascript\n * const [event] = project.eventStore.add({ startDate, endDate });\n * ```\n *\n * 2. A recalculation is scheduled, thus:\n *\n * ```javascript\n * event.duration; // <- Not yet calculated\n * ```\n *\n * 3. Calculate now instead of waiting for the scheduled calculation\n *\n * ```javascript\n * await project.commitAsync();\n *\n * event.duration; // <- Now available\n * ```\n *\n * Please refer to [this guide](#SchedulerPro/guides/basics/project_data.md) for more information.\n *\n * ## Built in CrudManager\n *\n * Scheduler Pro's project has a {@link Scheduler/crud/AbstractCrudManagerMixin CrudManager} built in. Using it is the recommended\n * way of syncing data between Scheduler Pro and a backend. Example usage:\n *\n * ```javascript\n * const scheduler = new SchedulerPro({\n *     project : {\n *         // Configure urls used by the built in CrudManager\n *         transport : {\n *             load : {\n *                 url : 'php/load.php'\n *             },\n *             sync : {\n *                 url : 'php/sync.php'\n *             }\n *         }\n *     }\n * });\n *\n * // Load data from the backend\n * scheduler.project.load()\n * ```\n *\n * For more information on CrudManager, see Schedulers docs on {@link Scheduler/data/CrudManager}.\n * For a detailed description of the protocol used by CrudManager, see the [Crud manager guide](#Scheduler/guides/data/crud_manager.md)\n *\n * You can access the current Project data changes anytime using the {@link #property-changes} property.\n *\n * ## Working with inline data\n *\n * The project provides an {@link #property-inlineData} getter/setter that can\n * be used to manage data from all Project stores at once. Populating the stores this way can\n * be useful if you do not want to use the CrudManager for server communication but instead load data using Axios\n * or similar.\n *\n * ### Getting data\n * ```javascript\n * const data = scheduler.project.inlineData;\n *\n * // use the data in your application\n * ```\n *\n * ### Setting data\n * ```javascript\n * // Get data from server manually\n * const data = await axios.get('/project?id=12345');\n *\n * // Feed it to the project\n * scheduler.project.inlineData = data;\n * ```\n *\n * See also {@link #function-loadInlineData}\n *\n * ### Getting changed records\n *\n * You can access the changes in the current Project dataset anytime using the {@link #property-changes} property. It\n * returns an object with all changes:\n *\n * ```javascript\n * const changes = project.changes;\n *\n * console.log(changes);\n *\n * > {\n *   tasks : {\n *       updated : [{\n *           name : 'My task',\n *           id   : 12\n *       }]\n *   },\n *   assignments : {\n *       added : [{\n *           event      : 12,\n *           resource   : 7,\n *           units      : 100,\n *           $PhantomId : 'abc123'\n *       }]\n *     }\n * };\n * ```\n *\n * ## Monitoring data changes\n *\n * While it is possible to listen for data changes on the projects individual stores, it is sometimes more convenient\n * to have a centralized place to handle all data changes. By listening for the {@link #event-change change event} your\n * code gets notified when data in any of the stores changes. Useful for example to keep an external data model up to\n * date:\n *\n * ```javascript\n * const scheduler = new SchedulerPro({\n *     project: {\n *         listeners : {\n *             change({ store, action, records }) {\n *                 const { $name } = store.constructor;\n *\n *                 if (action === 'add') {\n *                     externalDataModel.add($name, records);\n *                 }\n *\n *                 if (action === 'remove') {\n *                     externalDataModel.remove($name, records);\n *                 }\n *             }\n *         }\n *     }\n * });\n * ```\n *\n * ## Processing the data loaded from the server\n *\n * If you want to process the data received from the server after loading, you can use\n * the {@link #event-beforeLoadApply} or {@link #event-beforeSyncApply} events:\n *\n * ```javascript\n * const gantt = new Gantt({\n *     project: {\n *         listeners : {\n *             beforeLoadApply({ response }) {\n *                 // do something with load-response object before data is fed to the stores\n *             }\n *         }\n *     }\n * });\n * ```\n *\n * ## Built in StateTrackingManager\n *\n * The project also has a built in {@link Core/data/stm/StateTrackingManager} (STM for short), that\n * handles undo/redo for the project stores (additional stores can also be added). By default, it is only used while\n * editing tasks using the task editor, the editor updates tasks live and uses STM to rollback changes if canceled. But\n * you can enable it to track all project store changes:\n *\n * ```javascript\n * // Enable automatic transaction creation and start recording\n * project.stm.autoRecord = true;\n * project.stm.enable();\n *\n * // Undo a transaction\n * project.stm.undo();\n *\n * // Redo\n * project.stm.redo();\n * ```\n *\n * Check out the `undoredo` demo to see it in action.\n *\n * @mixes Core/mixin/Events\n * @mixes SchedulerPro/data/mixin/PartOfProject\n * @mixes SchedulerPro/data/mixin/ProjectCrudManager\n * @mixes SchedulerPro/model/mixin/ProjectChangeHandlerMixin\n *\n * @extends Scheduler/model/mixin/ProjectModelMixin\n *\n * @typings Scheduler/model/ProjectModel -> Scheduler/model/SchedulerProjectModel\n */\nexport default class ProjectModel extends ProjectChangeHandlerMixin(ProjectCrudManager(ProjectModelMixin(SchedulerProProjectMixin))) {\n    //region Events\n    /**\n     * Fired when the engine has finished its calculations and the results has been written back to the records.\n     *\n     * ```javascript\n     * scheduler.project.on({\n     *     dataReady() {\n     *        console.log('Calculations finished');\n     *     }\n     * });\n     *\n     * scheduler.eventStore.first.duration = 10;\n     *\n     * // At some point a bit later it will log 'Calculations finished'\n     * ```\n     *\n     * @event dataReady\n     * @param {SchedulerPro.model.ProjectModel} source The project\n     */\n    /**\n     * Fired during the Engine calculation if {@link #config-enableProgressNotifications enableProgressNotifications} config is `true`\n     * @event progress\n     * @param {Number} total The total number of operations\n     * @param {Number} remaining The number of remaining operations\n     * @param {'storePopulation'|'propagating'} phase The phase of the calculation, either 'storePopulation'\n     * when data is getting loaded, or 'propagating' when data is getting calculated\n     */\n    /**\n     * Fired when the Engine detects a computation cycle.\n     * @event cycle\n     * @param {Object} schedulingIssue Scheduling error describing the case:\n     * @param {Function} schedulingIssue.getDescription Returns the cycle description\n     * @param {Object} schedulingIssue.cycle Object providing the cycle info\n     * @param {Function} schedulingIssue.getResolutions Returns possible resolutions\n     * @param {Function} continueWithResolutionResult Function to call after a resolution is chosen to\n     * proceed with the Engine calculations:\n     * ```js\n     * project.on('cycle', ({ continueWithResolutionResult }) => {\n     *     // cancel changes in case of a cycle\n     *     continueWithResolutionResult(EffectResolutionResult.Cancel);\n     * })\n     * ```\n     */\n    /**\n     * Fired when the Engine detects a scheduling conflict.\n     * @event schedulingConflict\n     * @param {Object} schedulingIssue The conflict details:\n     * @param {Function} schedulingIssue.getDescription Returns the conflict description\n     * @param {Object[]} schedulingIssue.intervals Array of conflicting intervals\n     * @param {Function} schedulingIssue.getResolutions Function to get possible resolutions\n     * @param {Function} continueWithResolutionResult Function to call after a resolution is chosen to\n     * proceed with the Engine calculations:\n     * ```js\n     * project.on('schedulingConflict', ({ schedulingIssue, continueWithResolutionResult }) => {\n     *     // apply the first resolution and continue\n     *     schedulingIssue.getResolutions()[0].resolve();\n     *     continueWithResolutionResult(EffectResolutionResult.Resume);\n     * })\n     * ```\n     */\n    /**\n     * Fired when the Engine detects a calendar misconfiguration when the calendar does\n     * not provide any working periods of time which makes the calendar usage impossible.\n     * @event emptyCalendar\n     * @param {Object} schedulingIssue Scheduling error describing the case:\n     * @param {Function} schedulingIssue.getDescription Returns the error description\n     * @param {Function} schedulingIssue.getCalendar Returns the calendar that must be fixed\n     * @param {Function} schedulingIssue.getResolutions Returns possible resolutions\n     * @param {Function} continueWithResolutionResult Function to call after a resolution is chosen to\n     * proceed with the Engine calculations:\n     * ```js\n     * project.on('emptyCalendar', ({ schedulingIssue, continueWithResolutionResult }) => {\n     *     // apply the first resolution and continue\n     *     schedulingIssue.getResolutions()[0].resolve();\n     *     continueWithResolutionResult(EffectResolutionResult.Resume);\n     * })\n     * ```\n     */\n    //endregion\n    //region Config\n    static get $name() {\n        return 'ProjectModel';\n    }\n    /**\n     * Silences propagations caused by the project loading.\n     *\n     * Applying the loaded data to the project occurs in two basic stages:\n     *\n     * 1. Data gets into the engine graph which triggers changes propagation\n     * 2. The changes caused by the propagation get written to related stores\n     *\n     * Setting this flag to `true` makes the component perform step 2 silently without triggering events causing reactions on those changes\n     * (like sending changes back to the server if `autoSync` is enabled) and keeping stores in unmodified state.\n     *\n     * This is safe if the loaded data is consistent so propagation doesn't really do any adjustments.\n     * By default the system treats the data as consistent so this option is `true`.\n     *\n     * ```js\n     * new SchedulerPro{\n     *     project : {\n     *         // We want scheduling engine to recalculate the data properly\n     *         // so then we could save it back to the server\n     *         silenceInitialCommit : false,\n     *         ...\n     *     }\n     *     ...\n     * })\n     * ```\n     *\n     * @config {Boolean} silenceInitialCommit\n     * @default true\n     * @category Advanced\n     */\n    /**\n     * Maximum range the project calendars can iterate.\n     * The value is defined in milliseconds and by default equals `5 years` roughly.\n     * ```javascript\n     * new SchedulerPro({\n     *     project : {\n     *         // adjust calendar iteration limit to 10 years roughly:\n     *         // 10 years expressed in ms\n     *         maxCalendarRange : 10 * 365 * 24 * 3600000,\n     *         ...\n     *     }\n     * });\n     * ```\n     * @config {Number} maxCalendarRange\n     * @default 157680000000\n     * @category Advanced\n     */\n    /**\n     * When `true` the project manually scheduled tasks will adjust their proposed start/end dates\n     * to skip non working time.\n     *\n     * @field {Boolean} skipNonWorkingTimeWhenSchedulingManually\n     * @default false\n     */\n    /**\n     * When `true` the project's manually scheduled tasks adjust their duration by excluding the non-working time from it,\n     * according to the calendar. However, this may lead to inconsistencies, when moving an event which both starts\n     * and ends on the non-working time. For such cases you can disable this option.\n     *\n     * Default value is `true`\n     *\n     * IMPORTANT: Setting this option to `false` also forcefully sets the {@link #field-skipNonWorkingTimeWhenSchedulingManually} option\n     * to `false`.\n     * IMPORTANT: This option is going to be disabled by default from version 6.0.0.\n     *\n     * @field {Boolean} skipNonWorkingTimeInDurationWhenSchedulingManually\n     * @default true\n     */\n    /**\n     * This config manages DST correction in the scheduling engine. It only has effect when DST transition hour is\n     * working time. Usually DST transition occurs on Sunday, so with non working weekends the DST correction logic\n     * is not involved.\n     *\n     * If **true**, it will add/remove one hour when calculating end date. For example:\n     * Assume weekends are working and on Sunday, 2020-10-25 at 03:00 clocks are set back 1 hour. Assume there is an event:\n     *\n     * ```javascript\n     * {\n     *     startDate    : '2020-10-20',\n     *     duration     : 10 * 24 + 1,\n     *     durationUnit : 'hour'\n     * }\n     * ```\n     * It will end on 2020-10-30 01:00 (which is wrong) but duration will be reported correctly. Because of the DST\n     * transition the SchedulerPro project will add one more hour when calculating the end date.\n     *\n     * Also this may occur when day with DST transition is working but there are non-working intervals between that day\n     * and event end date.\n     *\n     * ```javascript\n     * {\n     *     calendar         : 1,\n     *     calendarsData    : [\n     *         {\n     *             id           : 1,\n     *             startDate    : '2020-10-26',\n     *             endDate      : '2020-10-27',\n     *             isWorking    : false\n     *         }\n     *     ],\n     *     eventsData       : [\n     *         {\n     *             id           : 1,\n     *             startDate    : '2020-10-20',\n     *             endDate      : '2020-10-30'\n     *         },\n     *         {\n     *             id           : 2,\n     *             startDate    : '2020-10-20',\n     *             duration     : 10 * 24 + 1,\n     *             durationUnit : 'hour'\n     *         }\n     *     ]\n     * }\n     * ```\n     *\n     * Event 1 duration will be incorrectly reported as 9 days * 24 hours, missing 1 extra hour added by DST transition.\n     * Event 2 end date will be calculated to 2020-10-30 01:00, adding one extra hour.\n     *\n     * If **false**, the SchedulerPro project will not add DST correction which fixes the quirk mentioned above.\n     * Event 1 duration will be correctly reported as 9 days * 24 hours + 1 hour. Event 2 end date will be calculated\n     * to 2020-10-30.\n     *\n     * Also, for those events days duration will be a floating point number due to extra (or missing) hour:\n     *\n     * ```javascript\n     * eventStore.getById(1).getDuration('day')  // 10.041666666666666\n     * eventStore.getById(1).getDuration('hour') // 241\n     * ```\n     *\n     * @config {Boolean} adjustDurationToDST\n     * @default false\n     */\n    /**\n     * The number of hours per day.\n     *\n     * **Please note:** the value **does not define** the amount of **working** time per day\n     * for that purpose one should use calendars.\n     *\n     * The value is used when converting the duration from one unit to another.\n     * So when user enters a duration of, for example, `5 days` the system understands that it\n     * actually means `120 hours` and schedules accordingly.\n     * @field {Number} hoursPerDay\n     * @default 24\n     */\n    /**\n     * The number of days per week.\n     *\n     * **Please note:** the value **does not define** the amount of **working** time per week\n     * for that purpose one should use calendars.\n     *\n     * The value is used when converting the duration from one unit to another.\n     * So when user enters a duration of, for example, `2 weeks` the system understands that it\n     * actually means `14 days` (which is then converted to {@link #field-hoursPerDay hours}) and\n     * schedules accordingly.\n     * @field {Number} daysPerWeek\n     * @default 7\n     */\n    /**\n     * The number of days per month.\n     *\n     * **Please note:** the value **does not define** the amount of **working** time per month\n     * for that purpose one should use calendars.\n     *\n     * The value is used when converting the duration from one unit to another.\n     * So when user enters a duration of, for example, `1 month` the system understands that it\n     * actually means `30 days` (which is then converted to {@link #field-hoursPerDay hours}) and\n     * schedules accordingly.\n     * @field {Number} daysPerMonth\n     * @default 30\n     */\n    /**\n     * The scheduling direction of the project events.\n     * Possible values are `Forward` and `Backward`. The `Forward` direction corresponds to the As-Soon-As-Possible scheduling (ASAP),\n     * `Backward` - to As-Late-As-Possible (ALAP).\n     * @field {'Forward'|'Backward'} direction\n     * @default 'Forward'\n     */\n    /**\n     * The source of the calendar for dependencies (the calendar used for taking dependencies lag into account).\n     * Possible values are:\n     *\n     * - `ToEvent` - successor calendar will be used (default);\n     * - `FromEvent` - predecessor calendar will be used;\n     * - `Project` - the project calendar will be used.\n     *\n     * @field {'ToEvent'|'FromEvent'|'Project'} dependenciesCalendar\n     * @default 'ToEvent'\n     */\n    /**\n     * The project calendar.\n     * @field {SchedulerPro.model.CalendarModel} calendar\n     * @accepts {String|CalendarModelConfig|SchedulerPro.model.CalendarModel}\n     */\n    /**\n     * Returns current Project changes as an object consisting of added/modified/removed arrays of records for every\n     * managed store. Returns `null` if no changes exist. Format:\n     *\n     * ```javascript\n     * {\n     *     resources : {\n     *         added    : [{ name : 'New guy' }],\n     *         modified : [{ id : 2, name : 'Mike' }],\n     *         removed  : [{ id : 3 }]\n     *     },\n     *     events : {\n     *         modified : [{  id : 12, name : 'Cool task' }]\n     *     },\n     *     ...\n     * }\n     * ```\n     *\n     * @member {Object} changes\n     * @readonly\n     * @category Models & Stores\n     */\n    /**\n     * Project changes (CRUD operations to records in its stores) are automatically committed on a buffer to the\n     * underlying graph based calculation engine. The engine performs it calculations async.\n     *\n     * By calling this function, the commit happens right away. And by awaiting it you are sure that project\n     * calculations are finished and that references between records are up to date.\n     *\n     * The returned promise is resolved with an object. If that object has `rejectedWith` set, there has been a conflict and the calculation failed.\n     *\n     * ```javascript\n     * // Move an event in time\n     * eventStore.first.shift(1);\n     *\n     * // Trigger calculations directly and wait for them to finish\n     * const result = await project.commitAsync();\n     *\n     * if (result.rejectedWith) {\n     *     // there was a conflict during the scheduling\n     * }\n     * ```\n     *\n     * @async\n     * @function commitAsync\n     * @category Common\n     */\n    /**\n     * Set to `true` to enable calculation progress notifications.\n     * When enabled the project fires {@link #event-progress progress} event.\n     *\n     * **Note**: Enabling progress notifications will impact calculation performance, since it needs to pause calculations to allow redrawing the UI.\n     * @config {Boolean} enableProgressNotifications\n     * @category Advanced\n     */\n    /**\n     * Enables/disables the calculation progress notifications.\n     * @member {Boolean} enableProgressNotifications\n     * @category Advanced\n     */\n    /**\n     * If this flag is set to `true` (default) when a start/end date is set on the event, a corresponding\n     * `start-no-earlier/later-than` constraint is added, automatically. This is done in order to\n     * keep the event \"attached\" to this date, according to the user intention.\n     *\n     * Depending on your use case, you might want to disable this behaviour.\n     *\n     * @field {Boolean} addConstraintOnDateSet\n     * @default true\n     */\n    static get defaultConfig() {\n        return {\n            /**\n             * @hideproperties project, taskStore\n             */\n            //region Inline data configs & properties\n            /**\n             * Get/set {@link #property-eventStore} data.\n             *\n             * Always returns an array of {@link SchedulerPro.model.EventModel EventModels} but also accepts an array of\n             * its configuration objects as input.\n             *\n             * @member {SchedulerPro.model.EventModel[]} events\n             * @accepts {SchedulerPro.model.EventModel[]|EventModelConfig[]}\n             * @category Inline data\n             */\n            /**\n             * Data use to fill the {@link #property-eventStore}. Should be an array of\n             * {@link SchedulerPro.model.EventModel EventModels} or its configuration objects.\n             *\n             * @config {SchedulerPro.model.EventModel[]|EventModelConfig[]} events\n             * @category Inline data\n             */\n            /**\n             * Get/set {@link #property-resourceStore} data.\n             *\n             * Always returns an array of {@link SchedulerPro.model.ResourceModel ResourceModels} but also accepts an\n             * array of its configuration objects as input.\n             *\n             * @member {SchedulerPro.model.ResourceModel[]} resources\n             * @accepts {SchedulerPro.model.ResourceModel[]|ResourceModelConfig[]}\n             * @category Inline data\n             */\n            /**\n             * Data use to fill the {@link #property-resourceStore}. Should be an array of\n             * {@link SchedulerPro.model.ResourceModel ResourceModels} or its configuration objects.\n             *\n             * @config {SchedulerPro.model.ResourceModel[]|ResourceModelConfig[]} resources\n             * @category Inline data\n             */\n            /**\n             * Get/set {@link #property-assignmentStore} data.\n             *\n             * Always returns an array of {@link SchedulerPro.model.AssignmentModel AssignmentModels} but also accepts\n             * an array of its configuration objects as input.\n             *\n             * @member {SchedulerPro.model.AssignmentModel[]} assignments\n             * @accepts {SchedulerPro.model.AssignmentModel[]|AssignmentModelConfig[]}\n             * @category Inline data\n             */\n            /**\n             * Data use to fill the {@link #property-assignmentStore}. Should be an array of\n             * {@link SchedulerPro.model.AssignmentModel AssignmentModels} or its configuration objects.\n             *\n             * @config {SchedulerPro.model.AssignmentModel[]|AssignmentModelConfig[]} assignments\n             * @category Inline data\n             */\n            /**\n             * Get/set {@link #property-dependencyStore} data.\n             *\n             * Always returns an array of {@link SchedulerPro.model.DependencyModel DependencyModels} but also accepts an\n             * array of its configuration objects as input.\n             *\n             * @member {SchedulerPro.model.DependencyModel[]} dependencies\n             * @accepts {SchedulerPro.model.DependencyModel[]|DependencyModelConfig[]}\n             * @category Inline data\n             */\n            /**\n             * Data use to fill the {@link #property-dependencyStore}. Should be an array of\n             * {@link SchedulerPro.model.DependencyModel DependencyModels} or its configuration objects.\n             *\n             * @config {SchedulerPro.model.DependencyModel[]|DependencyModelConfig[]} dependencies\n             * @category Inline data\n             */\n            /**\n             * Get/set {@link #property-timeRangeStore} data.\n             *\n             * Always returns an array of {@link Scheduler.model.TimeSpan TimeSpans} but also accepts an\n             * array of its configuration objects as input.\n             *\n             * @member {Scheduler.model.TimeSpan[]} timeRanges\n             * @accepts {Scheduler.model.TimeSpan[]|TimeSpanConfig[]}\n             * @category Inline data\n             */\n            /**\n             * Data use to fill the {@link #property-timeRangeStore}. Should be an array of\n             * {@link Scheduler.model.TimeSpan TimeSpans} or its configuration objects.\n             *\n             * @config {Scheduler.model.TimeSpan[]|TimeSpanConfig[]} timeRanges\n             * @category Inline data\n             */\n            /**\n             * Get/set {@link #property-resourceTimeRangeStore} data.\n             *\n             * Always returns an array of {@link Scheduler.model.ResourceTimeRangeModel ResourceTimeRangeModels} but\n             * also accepts an array of its configuration objects as input.\n             *\n             * @member {Scheduler.model.ResourceTimeRangeModel[]} resourceTimeRanges\n             * @accepts {Scheduler.model.ResourceTimeRangeModel[]|ResourceTimeRangeModelConfig[]}\n             * @category Inline data\n             */\n            /**\n             * Data use to fill the {@link #property-resourceTimeRangeStore}. Should be an array\n             * of {@link Scheduler.model.ResourceTimeRangeModel ResourceTimeRangeModels} or its configuration objects.\n             *\n             * @config {Scheduler.model.ResourceTimeRangeModel[]|ResourceTimeRangeModelConfig[]} resourceTimeRanges\n             * @category Inline data\n             */\n            //endregion\n            //region Legacy inline data configs & properties\n            /**\n             * The initial data, to fill the {@link #property-eventStore eventStore} with.\n             * Should be an array of {@link SchedulerPro.model.EventModel EventModels} or its configuration objects.\n             *\n             * @config {SchedulerPro.model.EventModel[]} eventsData\n             * @category Legacy inline data\n             */\n            /**\n             * The initial data, to fill the {@link #property-dependencyStore dependencyStore} with.\n             * Should be an array of {@link SchedulerPro.model.DependencyModel DependencyModels} or its configuration\n             * objects.\n             *\n             * @config {SchedulerPro.model.DependencyModel[]} [dependenciesData]\n             * @category Legacy inline data\n             */\n            /**\n             * The initial data, to fill the {@link #property-resourceStore resourceStore} with.\n             * Should be an array of {@link SchedulerPro.model.ResourceModel ResourceModels} or its configuration objects.\n             *\n             * @config {SchedulerPro.model.ResourceModel[]} [resourcesData]\n             * @category Legacy inline data\n             */\n            /**\n             * The initial data, to fill the {@link #property-assignmentStore assignmentStore} with.\n             * Should be an array of {@link SchedulerPro.model.AssignmentModel AssignmentModels} or its configuration\n             * objects.\n             *\n             * @config {SchedulerPro.model.AssignmentModel[]} [assignmentsData]\n             * @category Legacy inline data\n             */\n            //endregion\n            //region Store configs and properties\n            /**\n             * The {@link SchedulerPro.data.EventStore store} holding the event information.\n             *\n             * See also {@link SchedulerPro.model.EventModel}\n             *\n             * @member {SchedulerPro.data.EventStore} eventStore\n             * @category Models & Stores\n             */\n            /**\n             * An {@link SchedulerPro.data.EventStore} instance or a config object.\n             * @config {SchedulerPro.data.EventStore|EventStoreConfig} eventStore\n             * @category Models & Stores\n             */\n            /**\n             * The {@link SchedulerPro.data.DependencyStore store} holding the dependency information.\n             *\n             * See also {@link SchedulerPro.model.DependencyModel}\n             *\n             * @member {SchedulerPro.data.DependencyStore} dependencyStore\n             * @category Models & Stores\n             */\n            /**\n             * A {@link SchedulerPro.data.DependencyStore} instance or a config object.\n             * @config {SchedulerPro.data.DependencyStore|DependencyStoreConfig} dependencyStore\n             * @category Models & Stores\n             */\n            /**\n             * The {@link SchedulerPro.data.ResourceStore store} holding the resources that can be assigned to the\n             * events in the event store.\n             *\n             * See also {@link SchedulerPro.model.ResourceModel}\n             *\n             * @member {SchedulerPro.data.ResourceStore} resourceStore\n             * @category Models & Stores\n             */\n            /**\n             * A {@link SchedulerPro.data.ResourceStore} instance or a config object.\n             * @config {SchedulerPro.data.ResourceStore|ResourceStoreConfig} resourceStore\n             * @category Models & Stores\n             */\n            /**\n             * The {@link SchedulerPro.data.AssignmentStore store} holding the assignment information.\n             *\n             * See also {@link SchedulerPro.model.AssignmentModel}\n             *\n             * @member {SchedulerPro.data.AssignmentStore} assignmentStore\n             * @category Models & Stores\n             */\n            /**\n             * An {@link SchedulerPro.data.AssignmentStore} instance or a config object.\n             * @config {SchedulerPro.data.AssignmentStore|AssignmentStoreConfig} assignmentStore\n             * @category Models & Stores\n             */\n            /**\n             * The {@link SchedulerPro.data.CalendarManagerStore store} holding the calendar information.\n             *\n             * See also {@link SchedulerPro.model.CalendarModel}\n             * @member {SchedulerPro.data.CalendarManagerStore} calendarManagerStore\n             * @category Models & Stores\n             */\n            /**\n             * A {@link SchedulerPro.data.CalendarManagerStore} instance or a config object.\n             * @config {SchedulerPro.data.CalendarManagerStore|CalendarManagerStoreConfig} calendarManagerStore\n             * @category Models & Stores\n             */\n            //endregion\n            //region Model & store class configs\n            /**\n             * The constructor of the calendar model class, to be used in the project. Will be set as the\n             * {@link Core.data.Store#config-modelClass modelClass} property of the\n             * {@link #property-calendarManagerStore}\n             *\n             * @config {SchedulerPro.model.CalendarModel} [calendarModelClass]\n             * @typings {typeof CalendarModel}\n             * @category Models & Stores\n             */\n            calendarModelClass : CalendarModel,\n            /**\n             * The constructor of the dependency model class, to be used in the project. Will be set as the\n             * {@link Core.data.Store#config-modelClass modelClass} property of the {@link #property-dependencyStore}\n             *\n             * @config {SchedulerPro.model.DependencyModel}\n             * @typings {typeof DependencyModel}\n             * @category Models & Stores\n             */\n            dependencyModelClass : DependencyModel,\n            /**\n             * The constructor of the event model class, to be used in the project. Will be set as the\n             * {@link Core.data.Store#config-modelClass modelClass} property of the {@link #property-eventStore}\n             *\n             * @config {SchedulerPro.model.EventModel}\n             * @typings {typeof EventModel}\n             * @category Models & Stores\n             */\n            eventModelClass : EventModel,\n            /**\n             * The constructor of the assignment model class, to be used in the project. Will be set as the\n             * {@link Core.data.Store#config-modelClass modelClass} property of the {@link #property-assignmentStore}\n             *\n             * @config {SchedulerPro.model.AssignmentModel}\n             * @typings {typeof AssignmentModel}\n             * @category Models & Stores\n             */\n            assignmentModelClass : AssignmentModel,\n            /**\n             * The constructor of the resource model class, to be used in the project. Will be set as the\n             * {@link Core.data.Store#config-modelClass modelClass} property of the {@link #property-resourceStore}\n             *\n             * @config {SchedulerPro.model.ResourceModel}\n             * @typings {typeof ResourceModel}\n             * @category Models & Stores\n             */\n            resourceModelClass : ResourceModel,\n            /**\n             * The constructor to create a calendar store instance with. Should be a class, subclassing the\n             * {@link SchedulerPro.data.CalendarManagerStore}\n             * @config {SchedulerPro.data.CalendarManagerStore|Object}\n             * @typings {typeof CalendarManagerStore|object}\n             * @category Models & Stores\n             */\n            calendarManagerStoreClass : CalendarManagerStore,\n            /**\n             * The constructor to create a dependency store instance with. Should be a class, subclassing the\n             * {@link SchedulerPro.data.DependencyStore}\n             * @config {SchedulerPro.data.DependencyStore|Object}\n             * @typings {typeof DependencyStore|object}\n             * @category Models & Stores\n             */\n            dependencyStoreClass : DependencyStore,\n            /**\n             * The constructor to create an event store instance with. Should be a class, subclassing the\n             * {@link SchedulerPro.data.EventStore}\n             * @config {SchedulerPro.data.EventStore|Object}\n             * @typings {typeof EventStore|object}\n             * @category Models & Stores\n             */\n            eventStoreClass : EventStore,\n            /**\n             * The constructor to create an assignment store instance with. Should be a class, subclassing the\n             * {@link SchedulerPro.data.AssignmentStore}\n             * @config {SchedulerPro.data.AssignmentStore|Object}\n             * @typings {typeof AssignmentStore|object}\n             * @category Models & Stores\n             */\n            assignmentStoreClass : AssignmentStore,\n            /**\n             * The constructor to create a resource store instance with. Should be a class, subclassing the\n             * {@link SchedulerPro.data.ResourceStore}\n             * @config {SchedulerPro.data.ResourceStore|Object}\n             * @typings {typeof ResourceStore|object}\n             * @category Models & Stores\n             */\n            resourceStoreClass : ResourceStore,\n            //endregion\n            /**\n             * The initial data, to fill the {@link #property-calendarManagerStore} with.\n             * Should be an array of {@link SchedulerPro.model.CalendarModel} or it's configuration objects.\n             *\n             * @config {SchedulerPro.model.CalendarModel[]}\n             * @category Legacy inline data\n             */\n            calendarsData : null,\n            /**\n             * Set to `true` to reset the undo/redo queues of the internal {@link Core.data.stm.StateTrackingManager}\n             * after the Project has loaded. Defaults to `false`\n             * @config {Boolean} resetUndoRedoQueuesAfterLoad\n             * @category Advanced\n             */\n            supportShortSyncResponseNote : 'Note: Please consider enabling \"supportShortSyncResponse\" option to allow less detailed sync responses (https://bryntum.com/products/schedulerpro/docs/api/SchedulerPro/model/ProjectModel#config-supportShortSyncResponse)',\n            /**\n             * Enables early rendering in SchedulerPro, by postponing calculations to after the first refresh.\n             *\n             * Requires event data loaded to be pre-normalized to function as intended, since it will be used to render\n             * before engine has normalized the data. Given un-normalized data events will snap into place when\n             * calculations are finished.\n             *\n             * The Gantt chart will be read-only until the initial calculations are finished.\n             *\n             * @config {Boolean}\n             * @default\n             * @category Advanced\n             */\n            delayCalculation : true,\n            calendarManagerStore : {},\n            stmClass : StateTrackingManager\n        };\n    }\n    static get configurable() {\n        return {\n            /**\n             * Get/set {@link #property-calendarManagerStore} data.\n             *\n             * Always returns a {@link SchedulerPro.model.CalendarModel} array but also accepts an array of\n             * its configuration objects as input.\n             *\n             * @member {SchedulerPro.model.CalendarModel[]} calendars\n             * @accepts {SchedulerPro.model.CalendarModel[]|CalendarModelConfig[]}\n             * @category Inline data\n             */\n            /**\n             * Data use to fill the {@link #property-eventStore}. Should be a {@link SchedulerPro.model.CalendarModel}\n             * array or its configuration objects.\n             *\n             * @config {SchedulerPro.model.CalendarModel[]|CalendarModelConfig[]} calendars\n             * @category Inline data\n             */\n            calendars : null\n        };\n    }\n    // For TaskBoard compatibility\n    get taskStore() {\n        return this.eventStore;\n    }\n    //endregion\n    //region Inline data\n    get calendars() {\n        return this.calendarManagerStore.allRecords;\n    }\n    updateCalendars(calendars) {\n        this.calendarManagerStore.data = calendars;\n    }\n    //endregion\n}\nProjectModel._$name = 'ProjectModel';"],
  "mappings": ";;;;;;;;AACA,IAAM,aAAa,CAAC,MAAM,SAAS;AAC/B,SAAO,IAAI;AAAA,IACP,KAAK,YAAY;AAAA,IACjB,KAAK,SAAS;AAAA,IACd,KAAK,QAAQ;AAAA,IACb,KAAK,SAAS;AAAA,IACd,KAAK,WAAW;AAAA,IAChB,KAAK,WAAW,IAAI;AAAA,IACpB,KAAK,gBAAgB;AAAA,EACzB;AACJ;AAMO,IAAM,QAAS,WAAY;AAC9B;AACA,MAAIA,SAAQ;AAAA,IACR,SAAS;AAAA,EACb;AACA,MAAI,CAAC,MAAM,UAAU,SAAS;AAC1B,UAAM,UAAU,UAAU,SAAU,eAAe;AAC/C;AACA,UAAI,QAAQ,MAAM;AACd,cAAM,IAAI,UAAU;AAAA,MACxB;AACA,UAAI,IAAI,OAAO,IAAI;AACnB,UAAI,MAAM,EAAE,WAAW;AACvB,UAAI,QAAQ,GAAG;AACX,eAAO;AAAA,MACX;AACA,UAAI,IAAI;AACR,UAAI,UAAU,SAAS,GAAG;AACtB,YAAI,OAAO,UAAU,CAAC,CAAC;AACvB,YAAI,KAAK,GAAG;AACR,cAAI;AAAA,QACR,WACS,KAAK,KAAK,KAAK,YAAY,KAAK,WAAW;AAChD,eAAK,IAAI,KAAK,MAAM,KAAK,MAAM,KAAK,IAAI,CAAC,CAAC;AAAA,QAC9C;AAAA,MACJ;AACA,UAAI,KAAK,KAAK;AACV,eAAO;AAAA,MACX;AACA,UAAI,IAAI,KAAK,IAAI,IAAI,KAAK,IAAI,MAAM,KAAK,IAAI,CAAC,GAAG,CAAC;AAClD,aAAO,IAAI,KAAK,KAAK;AACjB,YAAI,KAAK,KAAK,EAAE,CAAC,MAAM,eAAe;AAClC,iBAAO;AAAA,QACX;AAAA,MACJ;AACA,aAAO;AAAA,IACX;AAAA,EACJ;AACA,MAAI,CAAC,OAAO,UAAU,MAAM;AACxB,WAAO,UAAU,OAAO,WAAY;AAChC,aAAO,KAAK,QAAQ,cAAc,EAAE;AAAA,IACxC;AAAA,EACJ;AACA,EAAAA,OAAM,QAAQ,CAAC;AACf,EAAAA,OAAM,MAAM,OAAO,SAAU,KAAK,YAAY;AAC1C,QAAI,KAAK,SAAU,GAAG,GAAG;AACrB,aAAO,CAAC,IAAI,CAAC;AAAA,IACjB,CAAC;AACD,QAAI,cAAc,IAAI,CAAC,MAAM,GAAG;AAC5B,UAAI,KAAK,IAAI,MAAM,CAAC;AAAA,IACxB;AAAA,EACJ;AACA,EAAAA,OAAM,MAAM,OAAO,SAAU,KAAK,QAAQ,QAAQ;AAC9C,QAAI,KAAK,gBAAgB,OAAO,CAAC,MAAM,GAAG,UAAU;AACpD,aAAS,IAAI,OAAO,SAAS,GAAG,IAAI,IAAI,EAAE,GAAG;AACzC,YAAM,OAAO,CAAC;AACd,UAAI,QAAQ,KAAK;AACb,eAAO;AAAA,MACX;AACA,UAAI,MAAM,OAAO,QAAQ,KAAK,iBAAiB,OAAO,CAAC,IAAI,KAAK;AAC5D,kBAAU;AACV;AAAA,MACJ;AACA;AAAA,IACJ;AACA,WAAO,OAAO,OAAO;AAAA,EACzB;AACA,EAAAA,OAAM,MAAM,cAAc,SAAU,KAAK,QAAQ,QAAQ;AACrD,QAAIC,OAAM,OAAO,CAAC,GAAG,MAAM,OAAO,CAAC,GAAG,MAAM,OAAO,QAAQ,UAAU,OAAO,MAAM,CAAC,MAAM,KAAKA,SAAQ,IAAI,MAAM,GAAG,OAAO,KAAK,IAAI,OAAO,QAAQ,GAAG,GAAG,QAAQ;AAChK,WAAO,UAAU,OAAO,CAAC,KAAK,UAAU;AACpC;AACA,UAAI,OAAO,KAAK;AACZ,eAAOA;AAAA,MACX;AACA;AACA,UAAI,MAAM,KAAK;AACX,YAAI;AAAA,MACR;AACA,UAAI,SAAS,OAAO;AAChB,eAAO;AAAA,MACX;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AACA,EAAAD,OAAM,MAAM,OAAO,SAAU,KAAK,QAAQ,QAAQ;AAC9C,QAAI,KAAK,MAAM,OAAO,QAAQ,gBAAgB,OAAO,CAAC,MAAM,GAAG,UAAU,MAAM;AAC/E,aAAS,IAAI,GAAG,IAAI,KAAK,KAAK;AAC1B,YAAM,OAAO,CAAC;AACd,UAAI,QAAQ,KAAK;AACb,eAAO;AAAA,MACX;AACA,UAAI,MAAM,OAAO,QAAQ,KAAK,iBAAiB,OAAO,CAAC,IAAI,KAAK;AAC5D,kBAAU;AACV;AAAA,MACJ;AACA;AAAA,IACJ;AACA,WAAO,OAAO,OAAO;AAAA,EACzB;AACA,EAAAA,OAAM,MAAM,cAAc,SAAU,KAAK,QAAQ,QAAQ;AACrD,QAAIC,OAAM,OAAO,CAAC,GAAG,MAAM,OAAO,CAAC,GAAG,MAAM,OAAO,QAAQ,UAAU,OAAO,MAAM,CAAC,MAAM,KAAKA,SAAQ,IAAI,MAAM,GAAG,OAAO,KAAK,IAAI,OAAO,QAAQ,GAAG,GAAG,QAAQ;AAChK,WAAO,UAAU,OAAO,CAAC,KAAK,UAAU;AACpC;AACA,UAAI,OAAOA,MAAK;AACZ,eAAO;AAAA,MACX;AACA;AACA,UAAI,MAAM,IAAI;AACV,YAAI,MAAM;AAAA,MACd;AACA,UAAI,SAAS,OAAO;AAChB,eAAO;AAAA,MACX;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AACA,EAAAD,OAAM,MAAMA,OAAM,IAAI;AAAA,IAClB,MAAM;AAAA,IACN,OAAO;AAAA,IACP,KAAK,SAAU,GAAG;AACd,aAAO,EAAE,MAAM,EAAE,IAAIA,OAAM,KAAK,QAAQ,KAAK,CAAC;AAAA,IAClD;AAAA,IACA,SAAS,SAAU,GAAG,KAAK;AACvB,aAAOA,OAAM,EAAE,IAAI,CAAC,OAAO,OAAOA,OAAM,EAAE,OAAO,CAAC,EAAE,CAAC;AAAA,IACzD;AAAA,IACA,QAAQ,SAAU,GAAG;AACjB,UAAI,EAAE;AACF,eAAO,EAAE;AACb,UAAIE,SAAQF,OAAM,EAAE,IAAI,CAAC,GAAG,MAAMA,OAAM,cAAcE,SAAQ,CAAC;AAC/D,UAAIA,WAAU,KAAKF,OAAM,GAAG,OAAO,CAAC,EAAE,CAAC,MAAM,KAAK;AAC9C,cAAM,MAAM;AAAA,MAChB;AACA,aAAO,EAAE,UAAU,CAAC,GAAG,GAAG;AAAA,IAC9B;AAAA,IACA,OAAO,SAAU,GAAG;AAChB,aAAO,EAAE,WAAW,EAAE,SAASA,OAAM,KAAK,KAAKA,OAAM,EAAE,IAAI,CAAC,GAAGA,OAAM,EAAE,IAAI,CAAC,GAAGA,OAAM,EAAE,IAAI,CAAC,CAAC;AAAA,IACjG;AAAA,IACA,KAAK,SAAU,GAAG;AACd,aAAO,EAAE,SAAS,EAAE,OAAOA,OAAM,KAAK,KAAKA,OAAM,EAAE,IAAI,CAAC,GAAGA,OAAM,EAAE,IAAI,CAAC,GAAGA,OAAM,EAAE,IAAI,CAAC,CAAC;AAAA,IAC7F;AAAA,IACA,MAAM,SAAU,GAAG,KAAK;AACpB,YAAM,MAAMA,OAAM,EAAE,OAAO,CAAC,EAAE,CAAC,IAAI,IAAI;AACvC,UAAIE,SAAQF,OAAM,KAAK,aAAa,GAAG,KAAKA,OAAM,GAAGA,OAAM,CAAC,GAAG,OAAOA,OAAM,EAAE,OAAOE,MAAK,EAAE,CAAC;AAC7F,YAAM,MAAM,OAAO,IAAI,OAAO;AAC9B,aAAOF,OAAM,KAAK,KAAKA,OAAM,EAAE,IAAIE,MAAK,GAAGF,OAAM,EAAE,IAAIE,MAAK,GAAG,GAAG;AAAA,IACtE;AAAA,IACA,MAAM,SAAU,GAAG,KAAK;AACpB,UAAIA,SAAQF,OAAM,KAAK,aAAa,GAAG,KAAKA,OAAM,GAAGA,OAAM,CAAC,GAAG,OAAOA,OAAM,EAAE,OAAOE,MAAK,EAAE,CAAC;AAC7F,aAAOF,OAAM,KAAK,KAAKA,OAAM,EAAE,IAAIE,MAAK,GAAGF,OAAM,EAAE,IAAIE,MAAK,GAAG,MAAM,OAAO,OAAO,OAAO,IAAI;AAAA,IAClG;AAAA,EACJ;AACA,EAAAF,OAAM,iBAAiBA,OAAM,KAAK;AAAA,IAC9B,MAAM;AAAA,IACN,OAAO;AAAA,IACP,KAAK,SAAU,GAAG;AACd,aAAO,EAAE,OAAO,EAAE,KAAK,KAAK,OAAOA,OAAM,EAAE,IAAI,CAAC,IAAI,KAAK,CAAC,IAAI;AAAA,IAClE;AAAA,IACA,SAAS,SAAU,GAAG,KAAK;AACvB,aAAOA,OAAM,GAAG,IAAI,CAAC,MAAM,OAAO,QAAQ,KAAKA,OAAM,EAAE,IAAI,CAAC,IAAIA,OAAM,EAAE,OAAO,CAAC,EAAE,CAAC,IAAI;AAAA,IAC3F;AAAA,IACA,QAAQ,SAAU,GAAG;AACjB,aAAO,EAAE,aAAa,EAAE,WAAW,CAAC,GAAG,KAAK,KAAKA,OAAM,EAAE,OAAO,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC;AAAA,IAC9E;AAAA,IACA,OAAO,SAAU,GAAG;AAChB,aAAO,EAAE,YAAY,EAAE,UAAUA,OAAM,KAAK,KAAKA,OAAM,EAAE,IAAI,CAAC,GAAGA,OAAM,EAAE,IAAI,CAAC,GAAG,KAAK,IAAI,IAAIA,OAAM,GAAG,IAAI,CAAC,IAAI,KAAK,IAAI,KAAK,CAAC,CAAC;AAAA,IACpI;AAAA,IACA,KAAK,SAAU,GAAG;AACd,aAAO,EAAE,UAAU,EAAE,QAAQA,OAAM,KAAK,KAAKA,OAAM,EAAE,IAAI,CAAC,GAAGA,OAAM,EAAE,IAAI,CAAC,GAAG,KAAK,IAAIA,OAAM,GAAG,IAAI,CAAC,IAAI,GAAGA,OAAM,EAAE,OAAO,CAAC,EAAE,CAAC,CAAC,CAAC;AAAA,IACpI;AAAA,IACA,MAAM,SAAU,GAAG,KAAK;AACpB,YAAM,MAAMA,OAAM,GAAG,OAAO,CAAC,EAAE,CAAC,IAAI,IAAI;AACxC,UAAIE,SAAQF,OAAM,KAAK,aAAa,GAAG,KAAKA,OAAM,IAAIA,OAAM,CAAC,GAAG,QAAQA,OAAM,GAAG,OAAOE,MAAK,EAAE,CAAC;AAChG,YAAM,MAAM,QAAQ,IAAI;AACxB,UAAI,OAAOF,OAAM,KAAK,KAAKA,OAAM,EAAE,IAAIE,MAAK,GAAGF,OAAM,EAAE,IAAIE,MAAK,GAAG,QAAQ,IAAIF,OAAM,EAAE,OAAOE,MAAK,EAAE,CAAC,IAAI,IAAI,IAAI,KAAK,MAAM,EAAE;AAC/H,UAAI,KAAK,QAAQ,KAAK,EAAE,QAAQ,GAAG;AAC/B,QAAAA,SAAQF,OAAM,EAAE,KAAK,GAAGA,OAAM,EAAE,IAAI,CAAC,IAAI,CAAC;AAC1C,eAAOA,OAAM,KAAK,KAAKA,OAAM,EAAE,IAAIE,MAAK,GAAGF,OAAM,EAAE,IAAIE,MAAK,GAAG,QAAQ,IAAIF,OAAM,EAAE,OAAOE,MAAK,EAAE,CAAC,IAAI,IAAI,IAAI,KAAK,MAAM,EAAE;AAAA,MAC/H;AACA,aAAO;AAAA,IACX;AAAA,IACA,MAAM,SAAU,GAAG,KAAK;AACpB,UAAIA,SAAQF,OAAM,KAAK,aAAa,GAAG,KAAKA,OAAM,IAAIA,OAAM,CAAC,GAAG,QAAQA,OAAM,GAAG,OAAOE,MAAK,EAAE,CAAC;AAChG,YAAM,MAAM,QAAQ,QAAQ,OAAO;AACnC,aAAOF,OAAM,GAAG,IAAIA,OAAM,KAAK,KAAKA,OAAM,EAAE,IAAIE,MAAK,GAAGF,OAAM,EAAE,IAAIE,MAAK,GAAG,IAAI,KAAK,MAAM,EAAE,CAAC;AAAA,IAClG;AAAA,EACJ;AACA,EAAAF,OAAM,YAAYA,OAAM,KAAKA,OAAM,IAAI;AAAA,IACnC,MAAM;AAAA,IACN,OAAO;AAAA,IACP,KAAK,SAAU,GAAG;AACd,aAAO,EAAE,OAAO,EAAE,KAAKA,OAAM,KAAK,OAAO,KAAK,CAAC,IAAI;AAAA,IACvD;AAAA,IACA,SAAS,SAAU,GAAG,KAAK;AACvB,aAAOA,OAAM,GAAG,IAAI,CAAC,OAAO,OAAO;AAAA,IACvC;AAAA,IACA,QAAQ,WAAY;AAChB,aAAO,CAAC,GAAG,CAAC;AAAA,IAChB;AAAA,IACA,OAAO,SAAU,GAAG;AAChB,aAAOA,OAAM,EAAE,MAAM,CAAC;AAAA,IAC1B;AAAA,IACA,KAAK,SAAU,GAAG;AACd,aAAOA,OAAM,EAAE,IAAI,CAAC;AAAA,IACxB;AAAA,IACA,MAAM,SAAU,GAAG,KAAK;AACpB,YAAM,MAAM,IAAI,IAAI,OAAO;AAC3B,aAAOA,OAAM,KAAK,KAAKA,OAAM,EAAE,IAAI,CAAC,GAAGA,OAAM,EAAE,IAAI,CAAC,GAAGA,OAAM,EAAE,IAAI,CAAC,KAAK,MAAMA,OAAM,GAAG,IAAI,CAAC,MAAM,OAAOA,OAAM,GAAG,IAAI,CAAC,IAAI,IAAI,EAAE;AAAA,IACtI;AAAA,IACA,MAAM,SAAU,GAAG,KAAK;AACpB,YAAM,MAAM,IAAI,IAAI,OAAO;AAC3B,aAAOA,OAAM,KAAK,KAAKA,OAAM,EAAE,IAAI,CAAC,GAAGA,OAAM,EAAE,IAAI,CAAC,GAAGA,OAAM,EAAE,IAAI,CAAC,KAAK,MAAMA,OAAM,GAAG,IAAI,CAAC,MAAM,OAAOA,OAAM,GAAG,IAAI,CAAC,IAAI,KAAK,EAAE;AAAA,IACvI;AAAA,EACJ;AACA,EAAAA,OAAM,YAAYA,OAAM,KAAK;AAAA,IACzB,MAAM;AAAA,IACN,OAAO;AAAA,IACP,KAAK,SAAU,GAAG;AACd,aAAO,EAAE,OAAO,EAAE,KAAK,KAAK,KAAK,KAAKA,OAAM,EAAE,MAAM,CAAC,EAAE,QAAQ,IAAIA,OAAM,EAAE,MAAM,CAAC,EAAE,QAAQ,KAAKA,OAAM,GAAG;AAAA,IAC9G;AAAA,IACA,SAAS,SAAU,GAAG,KAAK;AACvB,aAAOA,OAAM,GAAG,IAAI,CAAC,OAAO,OAAOA,OAAM,GAAG,OAAO,CAAC,EAAE,CAAC;AAAA,IAC3D;AAAA,IACA,QAAQ,SAAU,GAAG;AACjB,UAAI,OAAOA,OAAM,EAAE,IAAI,CAAC;AACxB,aAAO,EAAE,aAAa,EAAE,WAAW,CAAC,GAAG,OAAO,IAAI,MAAM,GAAG;AAAA,IAC/D;AAAA,IACA,OAAO,SAAU,GAAG;AAChB,aAAOA,OAAM,EAAE,MAAM,CAAC;AAAA,IAC1B;AAAA,IACA,KAAK,SAAU,GAAG;AACd,aAAOA,OAAM,EAAE,IAAI,CAAC;AAAA,IACxB;AAAA,IACA,MAAM,SAAU,GAAG,KAAK;AACpB,YAAM,MAAMA,OAAM,GAAG,OAAO,CAAC,EAAE,CAAC,IAAI,IAAI;AACxC,UAAI,OAAOA,OAAM,KAAK,aAAa,GAAG,KAAKA,OAAM,IAAIA,OAAM,CAAC,GAAG,QAAQA,OAAM,GAAG,OAAO,IAAI,EAAE,CAAC;AAC9F,YAAM,MAAM,QAAQ,IAAI,OAAO;AAC/B,aAAOA,OAAM,KAAK,KAAKA,OAAM,EAAE,IAAI,IAAI,GAAGA,OAAM,EAAE,IAAI,IAAI,GAAG,GAAG;AAAA,IACpE;AAAA,IACA,MAAM,SAAU,GAAG,KAAK;AACpB,UAAI,OAAOA,OAAM,KAAK,aAAa,GAAG,KAAKA,OAAM,IAAIA,OAAM,CAAC,GAAG,QAAQA,OAAM,GAAG,OAAO,IAAI,EAAE,CAAC;AAC9F,YAAM,MAAM,QAAQ,QAAQ,OAAO;AACnC,aAAOA,OAAM,KAAK,KAAKA,OAAM,EAAE,IAAI,IAAI,GAAGA,OAAM,EAAE,IAAI,IAAI,GAAG,GAAG;AAAA,IACpE;AAAA,EACJ;AACA,EAAAA,OAAM,OAAOA,OAAM,IAAI;AAAA,IACnB,MAAM;AAAA,IACN,OAAO;AAAA,IACP,KAAK,SAAU,GAAG;AACd,aAAO,EAAE,MAAM,EAAE,IAAIA,OAAM,KAAK,QAAQ,KAAK,CAAC;AAAA,IAClD;AAAA,IACA,SAAS,SAAU,GAAG,KAAK;AACvB,aAAOA,OAAM,EAAE,IAAI,CAAC,MAAM;AAAA,IAC9B;AAAA,IACA,QAAQ,WAAY;AAChB,aAAO,CAAC,GAAG,EAAE;AAAA,IACjB;AAAA,IACA,OAAO,SAAU,GAAG;AAChB,aAAO,EAAE,WAAW,EAAE,SAASA,OAAM,KAAK,KAAKA,OAAM,EAAE,IAAI,CAAC,GAAGA,OAAM,EAAE,IAAI,CAAC,GAAGA,OAAM,EAAE,IAAI,CAAC,GAAGA,OAAM,EAAE,IAAI,CAAC,CAAC;AAAA,IACjH;AAAA,IACA,KAAK,SAAU,GAAG;AACd,aAAO,EAAE,SAAS,EAAE,OAAOA,OAAM,KAAK,KAAKA,OAAM,EAAE,IAAI,CAAC,GAAGA,OAAM,EAAE,IAAI,CAAC,GAAGA,OAAM,EAAE,IAAI,CAAC,GAAGA,OAAM,EAAE,IAAI,CAAC,CAAC;AAAA,IAC7G;AAAA,IACA,MAAM,SAAU,GAAG,KAAK;AACpB,YAAM,MAAM,KAAK,IAAI;AACrB,UAAI,OAAOA,OAAM,KAAK,KAAKA,OAAM,EAAE,IAAI,CAAC,GAAGA,OAAM,EAAE,IAAI,CAAC,GAAGA,OAAM,EAAE,IAAI,CAAC,KAAK,OAAOA,OAAM,EAAE,IAAI,CAAC,IAAI,IAAI,IAAI,GAAG;AAChH,UAAI,CAACA,OAAM,KAAK,SAAS,KAAK,QAAQ,KAAK,EAAE,QAAQ,GAAG;AACpD,eAAOA,OAAM,KAAK,KAAKA,OAAM,EAAE,IAAI,IAAI,GAAGA,OAAM,EAAE,IAAI,IAAI,GAAGA,OAAM,EAAE,IAAI,IAAI,GAAG,MAAM,CAAC;AAAA,MAC3F;AACA,aAAO;AAAA,IACX;AAAA,IACA,MAAM,SAAU,GAAG,KAAK;AACpB,YAAM,MAAM,KAAK,KAAK;AACtB,aAAOA,OAAM,KAAK,KAAKA,OAAM,EAAE,IAAI,CAAC,GAAGA,OAAM,EAAE,IAAI,CAAC,GAAGA,OAAM,EAAE,IAAI,CAAC,KAAK,OAAOA,OAAM,EAAE,IAAI,CAAC,IAAI,KAAK,IAAI,GAAG;AAAA,IACjH;AAAA,EACJ;AACA,EAAAA,OAAM,SAASA,OAAM,IAAI;AAAA,IACrB,MAAM;AAAA,IACN,OAAO;AAAA,IACP,KAAK,SAAU,GAAG;AACd,aAAO,EAAE,MAAM,EAAE,IAAIA,OAAM,KAAK,OAAO,KAAK,CAAC;AAAA,IACjD;AAAA,IACA,SAAS,SAAU,GAAG,KAAK;AACvB,aAAOA,OAAM,EAAE,IAAI,CAAC,MAAM;AAAA,IAC9B;AAAA,IACA,QAAQ,SAAU,GAAG;AACjB,aAAO,CAAC,GAAG,EAAE;AAAA,IACjB;AAAA,IACA,OAAO,SAAU,GAAG;AAChB,aAAO,EAAE,WAAW,EAAE,SAASA,OAAM,KAAK,KAAKA,OAAM,EAAE,IAAI,CAAC,GAAGA,OAAM,EAAE,IAAI,CAAC,GAAGA,OAAM,EAAE,IAAI,CAAC,GAAGA,OAAM,EAAE,IAAI,CAAC,GAAGA,OAAM,EAAE,IAAI,CAAC,CAAC;AAAA,IACjI;AAAA,IACA,KAAK,SAAU,GAAG;AACd,aAAO,EAAE,SAAS,EAAE,OAAOA,OAAM,KAAK,KAAKA,OAAM,EAAE,IAAI,CAAC,GAAGA,OAAM,EAAE,IAAI,CAAC,GAAGA,OAAM,EAAE,IAAI,CAAC,GAAGA,OAAM,EAAE,IAAI,CAAC,GAAGA,OAAM,EAAE,IAAI,CAAC,CAAC;AAAA,IAC7H;AAAA,IACA,MAAM,SAAU,GAAG,KAAK;AACpB,UAAI,IAAIA,OAAM,EAAE,IAAI,CAAC,GAAG,IAAIA,OAAM,EAAE,IAAI,CAAC,GAAG,MAAM,MAAM,KAAK,KAAK,IAAI,OAAO,IAAI,KAAK,IAAI,MAAM,MAAM,GAAG,OAAO,IAAI,KAAK,EAAE,QAAQ,IAAI,MAAMA,OAAM,MAAM,IAAIA,OAAM,GAAG;AACtK,UAAI,CAACA,OAAM,KAAK,SAAS,KAAK,QAAQ,KAAK,EAAE,QAAQ,GAAG;AACpD,eAAO,IAAI,KAAK,EAAE,QAAQ,KAAK,MAAM,OAAOA,OAAM,MAAM,IAAIA,OAAM,GAAG;AAAA,MACzE;AACA,aAAO;AAAA,IACX;AAAA,IACA,MAAM,SAAU,GAAG,KAAK;AACpB,YAAM,MAAM,KAAK,KAAK;AACtB,aAAOA,OAAM,KAAK,KAAKA,OAAM,EAAE,IAAI,CAAC,GAAGA,OAAM,EAAE,IAAI,CAAC,GAAGA,OAAM,EAAE,IAAI,CAAC,GAAGA,OAAM,EAAE,IAAI,CAAC,KAAK,OAAOA,OAAM,EAAE,IAAI,CAAC,IAAI,KAAK,IAAI,GAAG;AAAA,IACjI;AAAA,EACJ;AACA,EAAAA,OAAM,QAAQA,OAAM,IAAI;AAAA,IACpB,MAAM;AAAA,IACN,OAAO;AAAA,IACP,KAAK,SAAU,GAAG;AACd,aAAO,EAAE,MAAM,EAAE,IAAIA,OAAM,KAAK,SAAS,KAAK,CAAC,IAAI;AAAA,IACvD;AAAA,IACA,SAAS,SAAU,GAAG,KAAK;AACvB,aAAOA,OAAM,EAAE,IAAI,CAAC,OAAO,OAAO;AAAA,IACtC;AAAA,IACA,QAAQ,WAAY;AAChB,aAAO,CAAC,GAAG,EAAE;AAAA,IACjB;AAAA,IACA,OAAO,SAAU,GAAG;AAChB,aAAO,EAAE,WAAW,EAAE,SAASA,OAAM,KAAK,KAAKA,OAAM,EAAE,IAAI,CAAC,GAAGA,OAAM,EAAE,IAAI,CAAC,CAAC;AAAA,IACjF;AAAA,IACA,KAAK,SAAU,GAAG;AACd,aAAO,EAAE,SAAS,EAAE,OAAOA,OAAM,KAAK,KAAKA,OAAM,EAAE,IAAI,CAAC,GAAGA,OAAM,EAAE,IAAI,CAAC,CAAC;AAAA,IAC7E;AAAA,IACA,MAAM,SAAU,GAAG,KAAK;AACpB,YAAM,MAAM,KAAK,IAAI,OAAO;AAC5B,aAAOA,OAAM,KAAK,KAAKA,OAAM,EAAE,IAAI,CAAC,KAAK,MAAMA,OAAM,EAAE,IAAI,CAAC,IAAI,IAAI,IAAI,GAAG;AAAA,IAC/E;AAAA,IACA,MAAM,SAAU,GAAG,KAAK;AACpB,YAAM,MAAM,KAAK,KAAK,OAAO;AAC7B,aAAOA,OAAM,KAAK,KAAKA,OAAM,EAAE,IAAI,CAAC,KAAK,OAAOA,OAAM,EAAE,IAAI,CAAC,IAAI,IAAI,IAAI,GAAG;AAAA,IAChF;AAAA,EACJ;AACA,EAAAA,OAAM,SAASA,OAAM,IAAI;AAAA,IACrB,MAAM;AAAA,IACN,OAAO;AAAA,IACP,KAAK,SAAU,GAAG;AACd,aAAO,EAAE,MAAM,EAAE,IAAIA,OAAM,KAAK,OAAO,KAAK,CAAC;AAAA,IACjD;AAAA,IACA,SAAS,SAAU,GAAG,KAAK;AACvB,aAAOA,OAAM,EAAE,IAAI,CAAC,MAAM;AAAA,IAC9B;AAAA,IACA,QAAQ,WAAY;AAChB,aAAO,CAAC,GAAG,EAAE;AAAA,IACjB;AAAA,IACA,OAAO,SAAU,GAAG;AAChB,aAAO;AAAA,IACX;AAAA,IACA,KAAK,SAAU,GAAG;AACd,aAAO;AAAA,IACX;AAAA,IACA,MAAM,SAAU,GAAG,KAAK;AACpB,UAAI,IAAIA,OAAM,EAAE,IAAI,CAAC,GAAG,MAAM,MAAM,KAAK,KAAK,IAAI,OAAO,IAAI,KAAK,IAAI,MAAM,MAAM,GAAG,OAAO,IAAI,KAAK,EAAE,QAAQ,IAAI,MAAMA,OAAM,GAAG;AAClI,UAAI,CAACA,OAAM,KAAK,SAAS,KAAK,QAAQ,KAAK,EAAE,QAAQ,GAAG;AACpD,eAAO,IAAI,KAAK,EAAE,QAAQ,KAAK,MAAM,QAAQA,OAAM,GAAG;AAAA,MAC1D;AACA,aAAO;AAAA,IACX;AAAA,IACA,MAAM,SAAU,GAAG,KAAK,OAAO;AAC3B,YAAM,MAAM,KAAK,KAAK;AACtB,aAAOA,OAAM,KAAK,KAAKA,OAAM,EAAE,IAAI,CAAC,GAAGA,OAAM,EAAE,IAAI,CAAC,GAAGA,OAAM,EAAE,IAAI,CAAC,GAAGA,OAAM,EAAE,IAAI,CAAC,GAAGA,OAAM,EAAE,IAAI,CAAC,KAAK,OAAOA,OAAM,EAAE,IAAI,CAAC,IAAI,KAAK,IAAI,GAAG;AAAA,IACjJ;AAAA,EACJ;AACA,EAAAA,OAAM,OAAOA,OAAM,IAAI;AAAA,IACnB,MAAM;AAAA,IACN,OAAO;AAAA,IACP,KAAK,SAAU,GAAG;AACd,aAAO,EAAE,MAAM,EAAE,IAAIA,OAAM,EAAE,IAAI,CAAC,IAAI,OAAOA,OAAM,EAAE,IAAI,CAAC,IAAI,KAAKA,OAAM,EAAE,IAAI,CAAC;AAAA,IACpF;AAAA,IACA,SAAS,SAAU,GAAG,KAAK;AACvB,aAAOA,OAAM,EAAE,IAAI,CAAC,MAAM;AAAA,IAC9B;AAAA,IACA,QAAQ,WAAY;AAChB,aAAO,CAAC,GAAG,KAAK;AAAA,IACpB;AAAA,IACA,OAAO,SAAU,GAAG;AAChB,aAAO;AAAA,IACX;AAAA,IACA,KAAK,SAAU,GAAG;AACd,aAAO;AAAA,IACX;AAAA,IACA,MAAM,SAAU,GAAG,KAAK;AACpB,YAAM,MAAM,QAAQ,IAAI;AACxB,UAAI,OAAOA,OAAM,KAAK,KAAKA,OAAM,EAAE,IAAI,CAAC,GAAGA,OAAM,EAAE,IAAI,CAAC,GAAGA,OAAM,EAAE,IAAI,CAAC,KAAK,OAAOA,OAAM,EAAE,IAAI,CAAC,IAAI,IAAI,IAAI,GAAG,GAAG,GAAG;AACtH,UAAI,CAACA,OAAM,KAAK,SAAS,KAAK,QAAQ,IAAI,EAAE,QAAQ,GAAG;AACnD,eAAOA,OAAM,KAAK,KAAKA,OAAM,EAAE,IAAI,IAAI,GAAGA,OAAM,EAAE,IAAI,IAAI,GAAGA,OAAM,EAAE,IAAI,IAAI,GAAGA,OAAM,EAAE,IAAI,IAAI,GAAGA,OAAM,EAAE,IAAI,IAAI,GAAG,MAAM,IAAI;AAAA,MACpI;AACA,aAAO;AAAA,IACX;AAAA,IACA,MAAM,SAAU,GAAG,KAAK;AACpB,YAAM,MAAM,QAAQ,QAAQ;AAC5B,aAAOA,OAAM,KAAK,KAAKA,OAAM,EAAE,IAAI,CAAC,GAAGA,OAAM,EAAE,IAAI,CAAC,GAAGA,OAAM,EAAE,IAAI,CAAC,KAAK,OAAOA,OAAM,EAAE,IAAI,CAAC,IAAI,KAAK,IAAI,GAAG,GAAG,GAAG;AAAA,IACvH;AAAA,EACJ;AACA,EAAAA,OAAM,cAAcA,OAAM,KAAK;AAAA,IAC3B,MAAM;AAAA,IACN,OAAO;AAAA,IACP,KAAK,SAAU,GAAG;AACd,aAAO,EAAE,OAAO,EAAE,MAAMA,OAAM,EAAE,IAAI,CAAC,KAAKA,OAAM,GAAG,IAAIA,OAAM,EAAE,MAAM,CAAC,CAAC,IAAI,MAAM,IAAIA,OAAM,GAAG,IAAI,CAAC,MAAM;AAAA,IAC7G;AAAA,IACA,SAAS,SAAU,GAAG,KAAK;AACvB,aAAOA,OAAM,GAAG,IAAI,CAAC,OAAO,OAAOA,OAAM,GAAG,OAAO,CAAC,EAAE,CAAC;AAAA,IAC3D;AAAA,IACA,QAAQ,SAAU,GAAG;AACjB,aAAO,EAAE,aAAa,EAAE,WAAW,CAAC,IAAIA,OAAM,EAAE,OAAO,CAAC,EAAE,CAAC,KAAKA,OAAM,GAAG,IAAIA,OAAM,EAAE,MAAM,CAAC,CAAC,IAAI,MAAM,IAAIA,OAAM,GAAG,IAAIA,OAAM,EAAE,IAAI,CAAC,CAAC,MAAM,CAAC;AAAA,IACjJ;AAAA,IACA,OAAO,SAAU,GAAG;AAChB,aAAO,EAAE,YAAY,EAAE,UAAUA,OAAM,KAAK,KAAKA,OAAM,EAAE,IAAI,CAAC,GAAGA,OAAM,EAAE,IAAI,CAAC,GAAG,KAAK,IAAIA,OAAM,EAAE,IAAI,CAAC,IAAIA,OAAM,GAAG,IAAI,CAAC,IAAI,GAAG,CAAC,CAAC;AAAA,IACtI;AAAA,IACA,KAAK,SAAU,GAAG;AACd,aAAO,EAAE,UAAU,EAAE,QAAQA,OAAM,KAAK,KAAKA,OAAM,EAAE,IAAI,CAAC,GAAGA,OAAM,EAAE,IAAI,CAAC,GAAG,KAAK,IAAIA,OAAM,EAAE,IAAI,CAAC,KAAK,IAAIA,OAAM,GAAG,IAAI,CAAC,IAAIA,OAAM,EAAE,OAAO,CAAC,EAAE,CAAC,CAAC,CAAC;AAAA,IACvJ;AAAA,IACA,MAAM,SAAU,GAAG,KAAK;AACpB,YAAM,MAAMA,OAAM,GAAG,OAAO,CAAC,EAAE,CAAC,IAAI,IAAI;AACxC,UAAIE,SAAQF,OAAM,KAAK,aAAa,GAAG,KAAKA,OAAM,IAAIA,OAAM,CAAC,GAAG,QAAQA,OAAM,GAAG,OAAOE,MAAK,EAAE,CAAC;AAChG,YAAM,MAAM,QAAQ,IAAI,OAAO;AAC/B,aAAOF,OAAM,KAAK,KAAKA,OAAM,EAAE,IAAIE,MAAK,GAAGF,OAAM,EAAE,IAAIE,MAAK,GAAG,KAAK,IAAI,IAAI,MAAM,KAAK,KAAKF,OAAM,GAAG,IAAIE,MAAK,IAAI,EAAE,CAAC;AAAA,IACzH;AAAA,IACA,MAAM,SAAU,GAAG,KAAK;AACpB,UAAIA,SAAQF,OAAM,KAAK,aAAa,GAAG,KAAKA,OAAM,IAAIA,OAAM,CAAC,GAAG,QAAQA,OAAM,GAAG,OAAOE,MAAK,EAAE,CAAC;AAChG,YAAM,MAAM,QAAQ,QAAQ,OAAO;AACnC,aAAOF,OAAM,GAAG,IAAIA,OAAM,KAAK,KAAKA,OAAM,EAAE,IAAIE,MAAK,GAAGF,OAAM,EAAE,IAAIE,MAAK,GAAG,KAAK,IAAI,IAAI,MAAM,KAAK,KAAKF,OAAM,GAAG,IAAIE,MAAK,IAAI,EAAE,CAAC,CAAC;AAAA,IACvI;AAAA,EACJ;AACA,EAAAF,OAAM,aAAaA,OAAM,KAAK;AAAA,IAC1B,MAAM;AAAA,IACN,OAAO;AAAA,IACP,KAAK,SAAU,GAAG;AACd,UAAI,EAAE;AACF,eAAO,EAAE;AACb,UAAI,QAAQA,OAAM,GAAG,KAAKA,OAAM,GAAG,MAAM,CAAC,GAAG,CAAC,GAAG,QAAQA,OAAM,GAAG,KAAKA,OAAM,EAAE,KAAK,OAAOA,OAAM,EAAE,IAAI,KAAK,IAAI,CAAC,GAAG,CAAC;AACrH,aAAO,EAAE,KAAK,IAAI,KAAK,MAAM,MAAM,QAAQ,IAAI,MAAM,QAAQ,KAAKA,OAAM,IAAI;AAAA,IAChF;AAAA,IACA,SAAS,SAAU,GAAG,KAAK;AACvB,aAAOA,OAAM,GAAG,IAAI,CAAC,OAAO,OAAOA,OAAM,GAAG,OAAO,CAAC,EAAE,CAAC;AAAA,IAC3D;AAAA,IACA,QAAQ,SAAU,GAAG;AACjB,UAAI,EAAE;AACF,eAAO,EAAE;AACb,UAAI,OAAOA,OAAM,GAAG,KAAKA,OAAM,GAAG,MAAM,CAAC,GAAG,CAAC,GAAG,UAAUA,OAAM,GAAG,IAAIA,OAAM,EAAE,MAAM,IAAI,CAAC,GAAG,SAASA,OAAM,GAAG,IAAIA,OAAM,EAAE,IAAI,IAAI,CAAC;AACpI,aAAO,EAAE,WAAW,CAAC,GAAG,YAAY,KAAK,WAAW,IAAI,KAAK,EAAE;AAAA,IACnE;AAAA,IACA,OAAO,SAAU,GAAG;AAChB,aAAO,EAAE,YAAY,EAAE,UAAUA,OAAM,KAAK,KAAKA,OAAM,EAAE,IAAI,CAAC,GAAGA,OAAM,EAAE,IAAI,CAAC,GAAGA,OAAM,EAAE,IAAI,CAAC,KAAKA,OAAM,GAAG,IAAI,CAAC,IAAI,IAAIA,OAAM,GAAG,IAAI,CAAC,IAAI,IAAI,EAAE;AAAA,IACrJ;AAAA,IACA,KAAK,SAAU,GAAG;AACd,aAAO,EAAE,UAAU,EAAE,QAAQA,OAAM,KAAK,KAAKA,OAAM,EAAE,IAAI,CAAC,GAAGA,OAAM,EAAE,IAAI,CAAC,GAAGA,OAAM,EAAE,IAAI,CAAC,KAAKA,OAAM,GAAG,IAAI,CAAC,IAAI,IAAI,IAAIA,OAAM,GAAG,IAAI,CAAC,IAAI,EAAE;AAAA,IACjJ;AAAA,IACA,MAAM,SAAU,GAAG,KAAK;AACpB,YAAM,MAAMA,OAAM,GAAG,OAAO,CAAC,EAAE,CAAC,IAAI,IAAI;AACxC,UAAI,SAASA,OAAM,GAAG,KAAKA,OAAM,GAAG,MAAM,CAAC,GAAG,CAAC,GAAG,OAAOA,OAAM,KAAK,aAAa,QAAQ,KAAKA,OAAM,IAAIA,OAAM,CAAC;AAC/G,UAAIA,OAAM,GAAG,IAAI,IAAI,MAAM,GAAG;AAC1B,eAAOA,OAAM,GAAG,KAAK,MAAM,CAAC;AAAA,MAChC;AACA,UAAI,QAAQA,OAAM,GAAG,OAAO,IAAI,EAAE,CAAC,GAAG,UAAUA,OAAM,GAAG,MAAM,IAAI;AACnE,YAAM,MAAM,QAAQ,IAAI,OAAO;AAC/B,aAAOA,OAAM,KAAK,KAAKA,OAAM,EAAE,IAAI,OAAO,GAAGA,OAAM,EAAE,IAAI,OAAO,GAAGA,OAAM,EAAE,IAAI,OAAO,IAAI,KAAK,MAAM,EAAE;AAAA,IAC3G;AAAA,IACA,MAAM,SAAU,GAAG,KAAK;AACpB,UAAI,SAASA,OAAM,GAAG,KAAKA,OAAM,GAAG,MAAM,CAAC,GAAG,CAAC,GAAG,OAAOA,OAAM,KAAK,aAAa,QAAQ,KAAKA,OAAM,IAAIA,OAAM,CAAC;AAC/G,UAAIA,OAAM,GAAG,IAAI,IAAI,MAAM,GAAG;AAC1B,eAAOA,OAAM,GAAG,KAAK,MAAM,CAAC;AAAA,MAChC;AACA,UAAI,QAAQA,OAAM,GAAG,OAAO,IAAI,EAAE,CAAC,GAAG,QAAQA,OAAM,GAAG,IAAI,IAAI;AAC/D,YAAM,MAAM,QAAQ,QAAQ,OAAO;AACnC,aAAOA,OAAM,GAAG,IAAIA,OAAM,KAAK,KAAKA,OAAM,EAAE,IAAI,KAAK,GAAGA,OAAM,EAAE,IAAI,KAAK,GAAGA,OAAM,EAAE,IAAI,KAAK,IAAI,KAAK,MAAM,EAAE,CAAC;AAAA,IACnH;AAAA,EACJ;AACA,EAAAA,OAAM,OAAOA,OAAM,IAAI;AAAA,IACnB,MAAM;AAAA,IACN,OAAO;AAAA,IACP,KAAK,SAAU,GAAG;AACd,aAAO,EAAE,MAAM,EAAE,IAAIA,OAAM,KAAK,QAAQ,KAAK,CAAC;AAAA,IAClD;AAAA,IACA,SAAS,SAAU,GAAG,KAAK;AACvB,aAAOA,OAAM,EAAE,IAAI,CAAC,MAAM;AAAA,IAC9B;AAAA,IACA,QAAQ,WAAY;AAChB,aAAO,CAAC,MAAM,IAAI;AAAA,IACtB;AAAA,IACA,OAAO,SAAU,GAAG;AAChB,aAAO,EAAE,WAAW,EAAE,SAASA,OAAM,KAAK,KAAKA,OAAM,EAAE,IAAI,CAAC,CAAC;AAAA,IACjE;AAAA,IACA,KAAK,SAAU,GAAG;AACd,aAAO,EAAE,SAAS,EAAE,OAAOA,OAAM,KAAK,KAAKA,OAAM,EAAE,IAAI,CAAC,CAAC;AAAA,IAC7D;AAAA,IACA,MAAM,SAAU,GAAG,KAAK;AACpB,aAAO,MAAMA,OAAM,EAAE,IAAI,CAAC,KAAK,OAAOA,OAAM,EAAE,OAAO,EAAE,CAAC,IAAIA,OAAM,KAAK,KAAK,GAAG,IAAIA,OAAM;AAAA,IAC7F;AAAA,IACA,MAAM,SAAU,GAAG,KAAK;AACpB,aAAO,MAAMA,OAAM,EAAE,IAAI,CAAC,KAAK,OAAOA,OAAM,EAAE,OAAO,EAAE,CAAC,IAAIA,OAAM,KAAK,KAAK,GAAG,IAAIA,OAAM;AAAA,IAC7F;AAAA,EACJ;AACA,EAAAA,OAAM,WAAWA,OAAM,KAAK;AAAA,IACxB,MAAM;AAAA,IACN,OAAO;AAAA,IACP,KAAK,SAAU,GAAG;AACd,aAAO,EAAE,OAAO,EAAE,KAAK,EAAE,QAAQ;AAAA,IACrC;AAAA,IACA,SAAS,SAAU,GAAG,KAAK;AACvB,aAAOA,OAAM,GAAG,IAAI,CAAC,MAAM;AAAA,IAC/B;AAAA,IACA,QAAQ,WAAY;AAChB,aAAO,CAAC,GAAG,SAAS;AAAA,IACxB;AAAA,IACA,OAAO,SAAU,GAAG;AAChB,aAAO;AAAA,IACX;AAAA,IACA,KAAK,SAAU,GAAG;AACd,aAAO;AAAA,IACX;AAAA,IACA,MAAM,SAAU,GAAG,KAAK;AACpB,aAAOA,OAAM,GAAG,IAAI,CAAC,IAAI,MAAM,IAAI,KAAK,GAAG,IAAIA,OAAM;AAAA,IACzD;AAAA,IACA,MAAM,SAAU,GAAG,KAAK;AACpB,aAAOA,OAAM,GAAG,IAAI,CAAC,IAAI,MAAM,IAAI,KAAK,GAAG,IAAIA,OAAM;AAAA,IACzD;AAAA,EACJ;AACA,EAAAA,OAAM,WAAW,CAAC;AAClB,EAAAA,OAAM,SAAS,QAAQA,OAAM,SAAS,IAAI,SAAU,YAAY,QAAQ;AACpE,QAAI,QAAQ,OAAO,CAAC;AACpB,WAAO;AAAA,MACH,MAAM,WAAW,WAAW;AAAA,MAC5B,QAAQ,WAAW,OAAO,oBAAI,KAAK,CAAC,EAAE,CAAC,IAAI,SAAS,WAAW;AAAA,MAC/D,KAAK,WAAW;AAAA,MAChB,SAAS,SAAU,GAAG,KAAK;AACvB,eAAO,KAAK,IAAI,CAAC,KAAK;AAAA,MAC1B;AAAA,MACA,QAAQ,WAAW;AAAA,MACnB,OAAO,WAAW;AAAA,MAClB,KAAK,WAAW;AAAA,MAChB,MAAM,SAAU,WAAW,KAAK;AAC5B,YAAI,OAAO;AACP,gBAAM,WAAW,OAAO,SAAS,EAAE,CAAC;AACxC,eAAO,WAAW,KAAK,WAAW,GAAG;AAAA,MACzC;AAAA,MACA,MAAM,SAAU,WAAW,KAAK;AAC5B,cAAM,QAAQ,QAAQ,WAAW,OAAO,SAAS,EAAE,CAAC,IAAI,QAAQ;AAChE,eAAO,WAAW,KAAK,WAAW,GAAG;AAAA,MACzC;AAAA,IACJ;AAAA,EACJ;AACA,EAAAA,OAAM,SAAS,SAASA,OAAM,SAAS,IAAI,SAAU,YAAY,QAAQ;AACrE,QAAI,QAAQ,OAAO,OAAO,SAAS,CAAC;AACpC,WAAO;AAAA,MACH,MAAM,YAAY,WAAW;AAAA,MAC7B,OAAO,WAAW,SAAS,QAAQ;AAAA,MACnC,KAAK,WAAW;AAAA,MAChB,SAAS,SAAU,GAAG,KAAK;AACvB,eAAO,KAAK,IAAI,CAAC,IAAI;AAAA,MACzB;AAAA,MACA,QAAQ,WAAW;AAAA,MACnB,OAAO,WAAW;AAAA,MAClB,KAAK,WAAW;AAAA,MAChB,MAAM,SAAU,WAAW,KAAK;AAC5B,cAAM,QAAQ,QAAQ,WAAW,OAAO,SAAS,EAAE,CAAC,IAAI;AACxD,eAAO,WAAW,KAAK,WAAW,GAAG;AAAA,MACzC;AAAA,MACA,MAAM,SAAU,WAAW,KAAK;AAC5B,cAAM,QAAQ,QAAQ,QAAQ,IAAI,WAAW,OAAO,SAAS,EAAE,CAAC;AAChE,eAAO,WAAW,KAAK,WAAW,GAAG;AAAA,MACzC;AAAA,IACJ;AAAA,EACJ;AACA,EAAAA,OAAM,UAAU,SAAU,UAAU;AAChC,QAAI,cAAc,CAAC,GAAG,iBAAiB,GAAG;AAC1C,aAAS,OAAO,UAAU;AACtB,UAAI,YAAY,IAAI,MAAM,GAAG,GAAG,OAAO,UAAU,CAAC,GAAG,MAAM,UAAU,CAAC,GAAG,OAAO,SAAS,GAAG,GAAG,aAAa,MAAMA,OAAM,SAAS,GAAG,EAAEA,OAAM,IAAI,GAAG,IAAI,IAAIA,OAAM,IAAI;AACrK,kBAAY,KAAK;AAAA,QACb;AAAA,QACA;AAAA,MACJ,CAAC;AACD;AAAA,IACJ;AACA,gBAAY,KAAK,SAAU,GAAG,GAAG;AAC7B,UAAI,KAAK,EAAE,WAAW,OAAO,KAAK,EAAE,WAAW;AAC/C,aAAO,KAAK,KAAK,KAAK,KAAK,KAAK,IAAI;AAAA,IACxC,CAAC;AACD,qBAAiB,YAAY,iBAAiB,CAAC,EAAE;AACjD,aAAS,UAAU,KAAK;AACpB,aAAO,QAAQ,SAAS,SAAU,GAAG,GAAG;AACpC,eAAO,EAAE,QAAQ,IAAI,EAAE,QAAQ;AAAA,MACnC,IAAI,SAAU,GAAG,GAAG;AAChB,eAAO,EAAE,QAAQ,IAAI,EAAE,QAAQ;AAAA,MACnC;AAAA,IACJ;AACA,WAAO;AAAA,MACH,OAAO,SAAU,KAAK,WAAW;AAC7B,YAAI,OAAO,WAAW,UAAUA,OAAM,MAAM,GAAG,GAAG,cAAc,KAAK;AACrE,eAAO,iBAAiB,CAAC,QAAQ,MAAM;AACnC,iBAAO;AACP,mBAAS,IAAI,GAAG,IAAI,gBAAgB,KAAK;AACrC,gBAAIG,cAAa,YAAY,CAAC,EAAE,YAAY,SAASA,YAAW,IAAI,IAAI,GAAG,SAASA,YAAW,OAAO,IAAI,GAAG,SAAS,QAAQ,QAAQ,YAAY,CAAC,EAAE,MAAM,MAAM;AACjK,gBAAI,CAACA,YAAW,QAAQ,MAAM,MAAM,GAAG;AACnC,qBAAOA,YAAW,GAAG,EAAE,MAAM,MAAM;AACnC,qBAAO;AACP;AAAA,YACJ;AAAA,UACJ;AAAA,QACJ;AACA,YAAI,SAASH,OAAM,OAAO;AACtB,iBAAO,QAAQ,SAAS,eAAe,MAAM,IAAI,IAAI,eAAe,IAAI,IAAI;AAAA,QAChF;AACA,eAAO;AAAA,MACX;AAAA,MACA,KAAK,SAAU,KAAK,WAAW;AAC3B,YAAI,QAAQ,UAAUA,OAAM,MAAM,MAAM,SAAS,GAAG,UAAU,UAAU,GAAG;AAC3E,iBAAS,IAAI,iBAAiB,GAAG,KAAK,GAAG,KAAK;AAC1C,cAAIG,cAAa,YAAY,CAAC,EAAE,YAAY,SAASA,YAAW,IAAI,SAAS,GAAG,SAASA,YAAW,OAAO,SAAS,GAAG,SAAS,QAAQ,QAAQ,YAAY,CAAC,EAAE,MAAM,MAAM,GAAG;AAC9K,cAAI,WAAW,QAAW;AACtB,mBAAOA,YAAW,GAAG,EAAE,WAAW,MAAM;AACxC,gBAAI,SAAS,CAAC,UAAU,QAAQ,QAAQ,IAAI,IAAI;AAC5C,uBAAS;AAAA,YACb;AAAA,UACJ;AAAA,QACJ;AACA,eAAO;AAAA,MACX;AAAA,MACA,MAAM,SAAU,KAAK,MAAM;AACvB,eAAO,IAAI,KAAK,QAAQ,SAAS,eAAe,IAAI,IAAI,EAAE,QAAQ,IAAIH,OAAM,MAAM,eAAe,MAAM,IAAI,EAAE,QAAQ,IAAIA,OAAM,GAAG;AAAA,MACtI;AAAA;AAAA,MAEA,UAAU,SAAU,KAAK,MAAM;AAC3B,eAAO,QAAQ,SACT,WAAW,eAAe,IAAI,IAAI,GAAG,CAAC,IACtC,WAAW,eAAe,MAAM,IAAI,GAAG,EAAE;AAAA,MAEnD;AAAA;AAAA,MAEA,WAAW,SAAU,MAAM;AACvB,eAAO,eAAe,MAAM,IAAI;AAAA,MACpC;AAAA,IACJ;AAAA,EACJ;AACA,EAAAA,OAAM,WAAW,SAAU,OAAO;AAC9B,QAAI,CAAC;AACD,YAAM,IAAI,MAAM,8BAA8B;AAClD,QAAI,CAAC,MAAM;AACP,YAAM,IAAI,MAAM,gDAAgD;AACpE,QAAI,YAAY,CAAC,GAAG,eAAe,MAAM,UAAU,QAAQ,aAAa,CAAC,GAAG,gBAAgB,MAAM,aAAa,MAAM,WAAW,SAAS;AACzI,aAAS,IAAI,GAAG,IAAI,cAAc,KAAK;AACnC,gBAAU,KAAKA,OAAM,QAAQ,MAAM,UAAU,CAAC,CAAC,CAAC;AAAA,IACpD;AACA,aAAS,IAAI,GAAG,IAAI,eAAe,KAAK;AACpC,iBAAW,KAAKA,OAAM,QAAQ,MAAM,WAAW,CAAC,CAAC,CAAC;AAAA,IACtD;AACA,aAAS,aAAa,KAAK,OAAO,WAAW,SAAS,SAAS;AAC3D,UAAI,UAAU,UAAU,GAAG,GAAG,YAAY,OAAO,cAAc,KAAK,cAAc,CAAC,GAAG,eAAe,CAAC,GAAG,MAAM,KAAK,UAAU,CAAC,GAAG,YAAY,QAAQ,QAAQ,YAAY,SAAS,YAAY,IAAI,GAAG,OAAO,YAAY,IAAI;AAC7N,kBAAY,YAAY,IAAI,KAAK,SAAS,IAAI,oBAAI,KAAK;AACvD,UAAI,CAAC,aAAa,CAAC,UAAU,QAAQ;AACjC,cAAM,IAAI,MAAM,qBAAqB;AACzC,oBAAc,KAAK,WAAW,aAAa,SAAS;AACpD,qBAAe,KAAK,YAAY,cAAc,SAAS;AACvD,aAAO,iBAAiB,cAAc,OAAO,SAAS,aAAa,OAAO,IAAI;AAC1E,YAAI,WAAW,QAAQ,MAAM,OAAO,GAAG;AACnC;AAAA,QACJ;AACA,YAAI,eAAe;AACf,4BAAkB,KAAK,YAAY,cAAc,IAAI;AACrD,cAAI,MAAM,iBAAiB,KAAK,cAAc,IAAI,GAAG;AACjD,6BAAiB,KAAK,WAAW,aAAa,GAAG;AACjD;AAAA,UACJ;AAAA,QACJ;AACA,YAAI,SAAS;AACT,cAAI,aAAa,eAAe,cAAc,OAAO;AACrD,gBAAM,QAAQ,KAAK,WAAW,aAAa,MAAM,UAAU;AAC3D,cAAI,IAAI,YAAY,CAAC,IAAI,KAAK,KAAK,IAAI,WAAW,IAAI,CAAC,GAAG,MAAM,IAAI,KAAK,UAAU,KAAK,IAAI,KAAK,OAAO,IAAI,GAAG,IAAI,MAAS,IAAI,CAAC,MAAM,IAAI,KAAK,UAAU,KAAK,IAAI,SAAS,IAAI,QAAQ,IAAIA,OAAM,GAAG,IAAI,IAAI,QAAQ,IAAIA,OAAM,GAAG,IAAI,QAAW,IAAI,KAAK,KAAK,IAAI,WAAW,KAAK,QAAQ,IAAIA,OAAM,GAAG,CAAC,CAAC;AAC1S,cAAI,cAAc,EAAE,MAAM,EAAE,QAAQ,MAAM,WAAW,IAAI,EAAE,QAAQ,GAAG;AAClE,uBAAW,IAAI,IAAI,EAAE,IAAI;AACzB;AAAA,UACJ,OACK;AACD,yBAAa;AACb,oBAAQ,KAAK,UAAU;AAAA,UAC3B;AACA,cAAI,CAAC;AACD;AACJ,2BAAiB,KAAK,WAAW,aAAa,GAAG;AAAA,QACrD,OACK;AACD,kBAAQ,KAAK,YAAY,IAAI,KAAK,KAAK,IAAI,WAAW,IAAI,CAAC,IAAI,SAAS,WAAW,aAAa,MAAM,OAAO,CAAC;AAC9G,qBAAW,KAAK,WAAW,aAAa,IAAI;AAAA,QAChD;AACA;AAAA,MACJ;AACA,eAASI,KAAI,GAAG,MAAM,QAAQ,QAAQA,KAAI,KAAKA,MAAK;AAChD,YAAI,SAAS,QAAQA,EAAC;AACtB,gBAAQA,EAAC,IAAI,OAAO,UAAU,SAAS,KAAK,MAAM,MAAM,mBAAmB,CAAC,UAAU,OAAO,CAAC,CAAC,GAAG,UAAU,OAAO,CAAC,CAAC,CAAC,IAAI,UAAU,MAAM;AAAA,MAC9I;AACA,aAAO,QAAQ,WAAW,IAAIJ,OAAM,QAAQ,UAAU,IAAI,QAAQ,CAAC,IAAI;AAAA,IAC3E;AACA,aAAS,UAAU,GAAG;AAClB,UAAI,aAAa,QAAQ,CAAC,MAAM,EAAE,QAAQ,CAAC,GAAG;AAC1C,eAAO,IAAI,KAAK,CAAC;AAAA,MACrB;AACA,aAAO;AAAA,IACX;AACA,aAAS,cAAc,KAAK,UAAU,WAAW,WAAW;AACxD,eAASI,KAAI,GAAG,MAAM,SAAS,QAAQA,KAAI,KAAKA,MAAK;AACjD,kBAAUA,EAAC,IAAI,SAASA,EAAC,EAAE,MAAM,KAAK,SAAS;AAAA,MACnD;AAAA,IACJ;AACA,aAAS,iBAAiB,KAAK,UAAU,WAAW,WAAW;AAC3D,UAAI,UAAU,UAAU,GAAG;AAC3B,eAASA,KAAI,GAAG,MAAM,SAAS,QAAQA,KAAI,KAAKA,MAAK;AACjD,YAAI,UAAUA,EAAC,KAAK,CAAC,QAAQ,UAAUA,EAAC,GAAG,SAAS,GAAG;AACnD,oBAAUA,EAAC,IAAI,SAASA,EAAC,EAAE,MAAM,KAAK,SAAS;AAAA,QACnD;AAAA,MACJ;AAAA,IACJ;AACA,aAAS,eAAe,KAAK,UAAU,WAAW,WAAW;AACzD,UAAI,UAAU,UAAU,GAAG;AAC3B,eAASA,KAAI,GAAG,MAAM,SAAS,QAAQA,KAAI,KAAKA,MAAK;AACjD,YAAI,YAAY,SAASA,EAAC,EAAE,MAAM,KAAK,SAAS;AAChD,YAAI,CAAC,WAAW;AACZ,oBAAUA,EAAC,IAAIJ,OAAM;AAAA,QACzB,OACK;AACD,oBAAUI,EAAC,IAAI,CAAC,WAAW,SAASA,EAAC,EAAE,IAAI,KAAK,SAAS,CAAC;AAAA,QAC9D;AAAA,MACJ;AAAA,IACJ;AACA,aAAS,kBAAkB,KAAK,UAAU,WAAW,WAAW;AAC5D,UAAI,UAAU,UAAU,GAAG;AAC3B,eAASA,KAAI,GAAG,MAAM,SAAS,QAAQA,KAAI,KAAKA,MAAK;AACjD,YAAI,UAAUA,EAAC,KAAK,CAAC,QAAQ,UAAUA,EAAC,EAAE,CAAC,GAAG,SAAS,GAAG;AACtD,cAAI,YAAY,SAASA,EAAC,EAAE,MAAM,KAAK,SAAS;AAChD,cAAI,CAAC,WAAW;AACZ,sBAAUA,EAAC,IAAIJ,OAAM;AAAA,UACzB,OACK;AACD,sBAAUI,EAAC,IAAI,CAAC,WAAW,SAASA,EAAC,EAAE,IAAI,KAAK,SAAS,CAAC;AAAA,UAC9D;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AACA,aAAS,WAAW,KAAK,UAAU,WAAW,WAAW;AACrD,eAASA,KAAI,GAAG,MAAM,SAAS,QAAQA,KAAI,KAAKA,MAAK;AACjD,YAAI,UAAUA,EAAC,KAAK,UAAUA,EAAC,EAAE,QAAQ,MAAM,UAAU,QAAQ,GAAG;AAEhE,gBAAM,WAAW,SAASA,EAAC,EAAE,MAAM,KAAK,SAASA,EAAC,EAAE,KAAK,KAAK,SAAS,CAAC;AAIxE,cAAI,aAAaJ,OAAM,SAAS,SAAS,QAAQ,MAAM,UAAUI,EAAC,EAAE,QAAQ,GAAG;AAM3E,sBAAUA,EAAC,IAAI,SAASA,EAAC,EAAE,MAAM,KAAK,SAASA,EAAC,EAAE,SAAS,KAAK,SAAS,CAAC;AAAA,UAC9E,OAAO;AACH,sBAAUA,EAAC,IAAI;AAAA,UACnB;AAAA,QAEJ;AAAA,MACJ;AAAA,IACJ;AACA,aAAS,SAAS,UAAU,WAAW,WAAW,YAAY;AAC1D,UAAI;AACJ,eAASA,KAAI,GAAG,MAAM,UAAU,QAAQA,KAAI,KAAKA,MAAK;AAClD,YAAI,UAAUA,EAAC,KAAK,UAAUA,EAAC,EAAE,QAAQ,MAAM,UAAU,QAAQ,GAAG;AAChE,cAAI,QAAQ,SAASA,EAAC,EAAE,UAAU,SAAS;AAC3C,cAAI,cAAc,QAAQ,YAAY;AAClC,mBAAO;AAAA,UACX;AACA,cAAI,CAAC,UAAU,QAAQ,QAAQ;AAC3B,qBAAS;AAAA,UACb;AAAA,QACJ;AAAA,MACJ;AACA,aAAO;AAAA,IACX;AACA,aAAS,iBAAiB,KAAK,WAAW,WAAW;AACjD,UAAI,UAAU,UAAU,GAAG,GAAG;AAC9B,eAASA,KAAI,GAAG,MAAM,UAAU,QAAQA,KAAI,KAAKA,MAAK;AAClD,YAAI,QAAQ,UAAUA,EAAC;AACvB,YAAI,SAAS,CAAC,QAAQ,MAAM,CAAC,GAAG,SAAS,MAAM,CAAC,MAAM,CAAC,KAAK,QAAQ,MAAM,CAAC,GAAG,SAAS,IAAI;AACvF,cAAI,CAAC,UAAU,QAAQ,MAAM,CAAC,GAAG,MAAM,GAAG;AACtC,qBAAS,MAAM,CAAC;AAAA,UACpB;AAAA,QACJ;AAAA,MACJ;AACA,aAAO;AAAA,IACX;AACA,aAAS,eAAe,YAAY,SAAS;AACzC,UAAI;AACJ,eAASA,KAAI,GAAG,MAAM,WAAW,QAAQA,KAAI,KAAKA,MAAK;AACnD,YAAI,WAAWA,EAAC,MAAM,CAAC,UAAU,QAAQ,QAAQ,WAAWA,EAAC,EAAE,CAAC,CAAC,IAAI;AACjE,mBAAS,WAAWA,EAAC,EAAE,CAAC;AAAA,QAC5B;AAAA,MACJ;AACA,aAAO;AAAA,IACX;AACA,aAAS,QAAQ,KAAK,UAAU,WAAW,WAAW,YAAY;AAC9D,UAAI,UAAU,UAAU,GAAG,GAAG;AAC9B,eAASA,KAAI,GAAG,MAAM,SAAS,QAAQA,KAAI,KAAKA,MAAK;AACjD,YAAI,QAAQ,UAAUA,EAAC;AACvB,YAAI,SAAS,MAAM,QAAQ,MAAM,UAAU,QAAQ,GAAG;AAClD,cAAI,MAAM,SAASA,EAAC,EAAE,IAAI,KAAK,KAAK;AACpC,cAAI,eAAe,CAAC,OAAO,QAAQ,KAAK,UAAU,IAAI;AAClD,mBAAO;AAAA,UACX;AACA,cAAI,CAAC,UAAU,QAAQ,KAAK,MAAM,GAAG;AACjC,qBAAS;AAAA,UACb;AAAA,QACJ;AAAA,MACJ;AACA,aAAO;AAAA,IACX;AACA,aAAS,UAAU,KAAK;AACpB,aAAO,QAAQ,SAAS,SAAU,GAAG,GAAG;AACpC,eAAO,CAAC,KAAK,EAAE,QAAQ,IAAI,EAAE,QAAQ;AAAA,MACzC,IAAI,SAAU,GAAG,GAAG;AAChB,eAAO,CAAC,KAAK,EAAE,QAAQ,IAAI,EAAE,QAAQ;AAAA,MACzC;AAAA,IACJ;AACA,aAAS,SAAS,KAAK,SAAS;AAC5B,UAAI,OAAO,IAAI,CAAC;AAChB,eAASA,KAAI,GAAG,MAAM,IAAI,QAAQA,KAAI,KAAKA,MAAK;AAC5C,YAAI,IAAIA,EAAC,KAAK,QAAQ,MAAM,IAAIA,EAAC,CAAC,GAAG;AACjC,iBAAO,IAAIA,EAAC;AAAA,QAChB;AAAA,MACJ;AACA,aAAO;AAAA,IACX;AACA,WAAO;AAAA,MACH,SAAS,SAAU,GAAG;AAClB,eAAO,aAAa,QAAQ,GAAG,GAAG,CAAC,MAAMJ,OAAM;AAAA,MACnD;AAAA,MACA,MAAM,SAAU,OAAO,WAAW,SAAS;AACvC,eAAO,aAAa,QAAQ,SAAS,GAAG,WAAW,OAAO;AAAA,MAC9D;AAAA,MACA,MAAM,SAAU,OAAO,WAAW,SAAS;AACvC,eAAO,aAAa,QAAQ,SAAS,GAAG,WAAW,OAAO;AAAA,MAC9D;AAAA,MACA,WAAW,SAAU,OAAO,WAAW,SAAS;AAC5C,eAAO,aAAa,QAAQ,SAAS,GAAG,WAAW,SAAS,IAAI;AAAA,MACpE;AAAA,MACA,WAAW,SAAU,OAAO,WAAW,SAAS;AAC5C,eAAO,aAAa,QAAQ,SAAS,GAAG,WAAW,SAAS,IAAI;AAAA,MACpE;AAAA,IACJ;AAAA,EACJ;AACA,EAAAA,OAAM,aAAa,SAAUK,KAAI,OAAO;AACpC,QAAI,IAAIL,OAAM,SAAS,KAAK,GAAG;AAC/B,QAAIK,KAAI;AACJ,sBAAgB;AAAA,IACpB;AACA,aAAS,kBAAkB;AACvB,UAAI,MAAM,KAAK,IAAI,GAAG,OAAO,EAAE,KAAK,GAAG,GAAG;AAC1C,UAAI,CAAC,KAAK,CAAC,GAAG;AACV,YAAI;AACJ;AAAA,MACJ;AACA,UAAI,OAAO,KAAK,CAAC,EAAE,QAAQ,IAAI;AAC/B,UAAI,OAAO,KAAK;AACZ,eAAO,KAAK,CAAC,IAAI,KAAK,CAAC,EAAE,QAAQ,IAAI,MAAM;AAAA,MAC/C;AACA,UAAI,OAAO,YAAY;AACnB,YAAI,WAAWA,KAAI,IAAI;AAAA,MAC3B,OACK;AACD,YAAI,WAAW,iBAAiB,UAAU;AAAA,MAC9C;AAAA,IACJ;AACA,WAAO;AAAA,MACH,QAAQ,WAAY;AAChB,eAAO,CAAC;AAAA,MACZ;AAAA,MACA,OAAO,WAAY;AACf,qBAAa,CAAC;AAAA,MAClB;AAAA,IACJ;AAAA,EACJ;AACA,EAAAL,OAAM,cAAc,SAAUK,KAAI,OAAO;AACrC,QAAI,CAACA,KAAI;AACL;AAAA,IACJ;AACA,QAAI,IAAIL,OAAM,WAAW,iBAAiB,KAAK,GAAG,OAAO,EAAE,OAAO;AAClE,aAAS,kBAAkB;AACvB,UAAI,CAAC,MAAM;AACP,QAAAK,IAAG;AACH,YAAIL,OAAM,WAAW,iBAAiB,KAAK;AAAA,MAC/C;AAAA,IACJ;AACA,WAAO;AAAA,MACH,QAAQ,WAAY;AAChB,eAAO,EAAE,OAAO;AAAA,MACpB;AAAA,MACA,OAAO,WAAY;AACf,eAAO;AACP,UAAE,MAAM;AAAA,MACZ;AAAA,IACJ;AAAA,EACJ;AACA,EAAAA,OAAM,OAAO,CAAC;AACd,EAAAA,OAAM,KAAK,WAAW,SAAU,cAAc;AAC1C,IAAAA,OAAM,KAAK,QAAQ,eAAe,SAAU,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG;AAC1D,aAAO,IAAI,KAAK,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AAAA,IACpC,IAAI,SAAU,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG;AAC5B,aAAO,IAAI,KAAK,KAAK,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;AAAA,IAC9C;AACA,QAAI,MAAM,eAAe,QAAQ,UAAU,IAAI,KAAK;AACpD,IAAAA,OAAM,KAAK,UAAU,EAAE,MAAM,UAAU;AACvC,IAAAA,OAAM,KAAK,WAAW,EAAE,MAAM,OAAO;AACrC,IAAAA,OAAM,KAAK,UAAU,EAAE,MAAM,MAAM;AACnC,IAAAA,OAAM,KAAK,SAAS,EAAE,MAAM,KAAK;AACjC,IAAAA,OAAM,KAAK,UAAU,EAAE,MAAM,OAAO;AACpC,IAAAA,OAAM,KAAK,SAAS,EAAE,MAAM,SAAS;AACrC,IAAAA,OAAM,KAAK,SAAS,EAAE,MAAM,SAAS;AACrC,IAAAA,OAAM,KAAK,QAAQ,CAAC;AAAA,EACxB;AACA,EAAAA,OAAM,KAAK,MAAM,WAAY;AACzB,IAAAA,OAAM,KAAK,SAAS,KAAK;AAAA,EAC7B;AACA,EAAAA,OAAM,KAAK,YAAY,WAAY;AAC/B,IAAAA,OAAM,KAAK,SAAS,IAAI;AAAA,EAC5B;AACA,EAAAA,OAAM,KAAK,IAAI;AACf,EAAAA,OAAM,MAAM;AACZ,EAAAA,OAAM,MAAMA,OAAM,MAAM;AACxB,EAAAA,OAAM,OAAOA,OAAM,MAAM;AACzB,EAAAA,OAAM,MAAMA,OAAM,OAAO;AACzB,EAAAA,OAAM,OAAOA,OAAM,MAAM;AACzB,EAAAA,OAAM,gBAAgB,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE;AACrE,EAAAA,OAAM,QAAQ;AACd,EAAAA,OAAM,KAAK,OAAO,SAAU,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG;AAC1C,WAAOA,OAAM,KAAK,MAAM,GAAG,MAAM,SAAY,IAAI,IAAI,GAAG,MAAM,SAAY,IAAI,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,CAAC;AAAA,EAC3G;AACA,EAAAA,OAAM,KAAK,eAAe,SAAU,GAAG,KAAK,YAAY,QAAQ;AAC5D,QAAI,MAAM,WAAW,IAAI,CAAC,GAAG,MAAM,WAAW,OAAO,CAAC,EAAE,CAAC;AACzD,YAAQ,OAAO,QAAQ,OAAO,MAAM,MAAM,IAAI,KAAK,OAAO,IAAI,CAAC,EAAE,QAAQ,IAAIA,OAAM,GAAG,IAAI,OAAO,MAAM,CAAC;AAAA,EAC5G;AACA,EAAAA,OAAM,KAAK,OAAO,SAAU,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG;AAC1C,QAAI,MAAM,UAAU;AACpB,QAAI,MAAM,IAAI,KAAK,IAAI;AACvB,QAAI,MAAM,IAAIA,OAAM,EAAE,OAAOA,OAAM,KAAK,KAAK,GAAG,IAAI,CAAC,CAAC,EAAE,CAAC,IAAI;AAC7D,QAAI,MAAM,IAAI,KAAK;AACnB,QAAI,MAAM,IAAI,KAAK;AACnB,QAAI,MAAM,IAAI,KAAK;AACnB,WAAOA,OAAM,KAAK,MAAM,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AAAA,EAC5C;AACA,EAAAA,OAAM,KAAK,eAAe,SAAU,GAAG,KAAK,YAAY,QAAQ;AAC5D,QAAI,MAAM,WAAW,IAAI,CAAC;AAC1B,WAAO,OAAO,OAAO,CAAC,MAAM,OAAO,MAAM,OAAO,KAAK,GAAG,OAAO,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,OAAO,MAAM,CAAC;AAAA,EAChG;AACA,EAAAA,OAAM,QAAQ,CAAC;AACf,EAAAA,OAAM,MAAM,OAAO,SAAU,MAAM,YAAY;AAC3C,QAAI,QAAQ;AAAA,MACR,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,IACT;AACA,QAAI,eAAe;AAAA,MACf,eAAe;AAAA,MACf,WAAW;AAAA,MACX,aAAa;AAAA,MACb,YAAY;AAAA,MACZ,WAAW;AAAA,MACX,UAAU;AAAA,MACV,WAAW;AAAA,IACf;AACA,QAAI,SAAS;AAAA,MACT,GAAG,CAAC,GAAG,GAAG,EAAE;AAAA,MACZ,GAAG,CAAC,GAAG,GAAG,EAAE;AAAA,MACZ,GAAG,CAAC,GAAG,GAAG,EAAE;AAAA,MACZ,GAAG,CAAC,GAAG,GAAG,EAAE;AAAA,MACZ,GAAG,CAAC,GAAG,GAAG,EAAE;AAAA,MACZ,GAAG,CAAC,GAAG,MAAM,IAAI;AAAA,MACjB,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC;AAAA,IAClB;AACA,aAAS,SAAS,OAAO,QAAQ,KAAK;AAClC,aAAO,MAAM,KAAK,IAAI,MAAM,KAAK,KAAK,OAAO,KAAK,IAAI,CAAC,SAAS,UAAU,IAAI,OAAO,IAAI;AAAA,IAC7F;AACA,aAAS,cAAc,OAAO;AAC1B,UAAI,QAAQ,CAAC,GAAGM;AAChB,WAAKA,UAAS,OAAO;AACjB,YAAIA,WAAU,QAAQA,WAAU,KAAK;AACjC,gBAAMA,MAAK,IAAI,MAAMA,MAAK,EAAE,MAAM,CAAC;AAAA,QACvC;AAAA,MACJ;AACA,aAAO;AAAA,IACX;AACA,aAAS,IAAI,OAAO,MAAML,MAAK,KAAK,KAAK;AACrC,UAAI,IAAIA;AACR,UAAI,CAAC,MAAM,IAAI,GAAG;AACd,cAAM,IAAI,IAAI,CAAC;AAAA,MACnB;AACA,aAAO,KAAK,KAAK;AACb,YAAI,MAAM,IAAI,EAAE,QAAQ,CAAC,IAAI,GAAG;AAC5B,gBAAM,IAAI,EAAE,KAAK,CAAC;AAAA,QACtB;AACA,aAAK,OAAO;AAAA,MAChB;AACA,YAAM,IAAI,EAAE,KAAK,SAAU,GAAG,GAAG;AAC7B,eAAO,IAAI;AAAA,MACf,CAAC;AAAA,IACL;AACA,aAAS,QAAQ,WAAW,UAAU,OAAO,MAAM;AAC/C,UAAI,SAAS,KAAK,CAAC,SAAS,MAAM,SAAS,MAAM,SAAS,GAAG,QAAQ,IAAI,IAAI,GAAG;AAC5E,kBAAU,KAAK,cAAc,QAAQ,CAAC;AACtC,mBAAW,UAAU,UAAU,SAAS,CAAC;AAAA,MAC7C;AACA,UAAI,UAAU,KAAK,OAAO,KAAK;AAC/B,UAAI,UAAU,MAAM,MAAM,IAAI;AAAA,IAClC;AACA,aAAS,WAAW,GAAG,UAAU,OAAO;AACpC,UAAI,UAAU,CAAC,GAAG,UAAU,CAAC;AAC7B,UAAI,UAAU,GAAG;AACb,YAAI,UAAU,KAAK,GAAG,CAAC;AACvB,YAAI,UAAU,KAAK,MAAM,KAAK,MAAM,GAAG;AACvC,YAAI,SAAS,KAAK,GAAG,CAAC;AACtB,YAAI,SAAS,KAAK,MAAM,KAAK,MAAM,GAAG;AACtC,YAAI,SAAS,KAAK,GAAG,CAAC;AACtB,YAAI,SAAS,KAAK,MAAM,KAAK,MAAM,GAAG;AAAA,MAC1C,OACK;AACD,YAAI,UAAU,KAAK,QAAQ,GAAG,QAAQ,CAAC;AACvC,YAAI,UAAU,KAAK,MAAM,KAAK,MAAM,GAAG;AACvC,YAAI,SAAS,KAAK,QAAQ,GAAG,QAAQ,CAAC;AACtC,YAAI,SAAS,KAAK,MAAM,KAAK,MAAM,GAAG;AACtC,YAAI,SAAS,KAAK,QAAQ,GAAG,QAAQ,CAAC;AACtC,YAAI,SAAS,KAAK,MAAM,KAAK,MAAM,GAAG;AAAA,MAC1C;AACA,QAAE,WAAW,KAAK,OAAO;AACzB,QAAE,WAAW,KAAK,OAAO;AAAA,IAC7B;AACA,aAAS,SAAS,MAAM,UAAU,MAAMA,MAAK,KAAK,QAAQ;AACtD,UAAI,WAAW,KAAK,MAAM,GAAG,GAAG,MAAM,CAAC,SAAS,CAAC,GAAG,QAAQ,SAAS,CAAC;AACtE,UAAI,UAAU,OAAO,UAAU,KAAK;AAChC,YAAI,aAAa,MAAM,MAAM,GAAG;AAChC,QAAAA,OAAM,SAAS,WAAW,CAAC,GAAG,QAAQ,GAAG;AACzC,cAAM,SAAS,WAAW,CAAC,GAAG,QAAQ,GAAG,KAAK;AAAA,MAClD;AACA,UAAI,UAAU,MAAMA,MAAK,KAAK,GAAG;AAAA,IACrC;AACA,aAAS,MAAM,MAAM,GAAG,MAAMA,MAAK,KAAK,QAAQ;AAC5C,UAAI,OAAOM,QAAO,YAAY,EAAE,WAAW,WAAW,UAAU,UAAU,SAAS,CAAC;AACpF,UAAI,SAAS,KAAK;AACd,eAAON,OAAM;AAAA,MACjB;AACA,WAAK,QAAQ,SAAS,MAAM,QAAQ,GAAG,OAAO,MAAM;AAChD,YAAI,UAAU,MAAM,OAAO,KAAK;AAAA,MACpC,YACU,QAAQ,SAAS,KAAK,QAAQ,KAAK,EAAE,GAAG,QAAQ,GAAG,OAAO,MAAM;AACtE,mBAAW,GAAG,UAAU,KAAK;AAAA,MACjC,YACU,QAAQ,SAAS,KAAK,QAAQ,KAAK,EAAE,GAAG,QAAQ,GAAG,OAAO,MAAM;AACtE,gBAAQ,WAAW,UAAU,OAAOA,OAAM,CAAC;AAAA,MAC/C,YACUM,SAAQ,KAAK,MAAM,GAAG,GAAG,WAAW,GAAG;AAC7C,gBAAQ,SAASA,OAAM,CAAC,GAAG,QAAQ,GAAG;AACtC,gBAAQ,WAAW,UAAU,OAAO,SAASA,OAAM,CAAC,CAAC,CAAC;AAAA,MAC1D,OACK;AACD,iBAAS,MAAM,UAAU,MAAMN,MAAK,KAAK,MAAM;AAAA,MACnD;AAAA,IACJ;AACA,aAAS,OAAO,MAAM;AAClB,aAAO,KAAK,QAAQ,GAAG,IAAI,MAAM,KAAK,QAAQ,GAAG,IAAI;AAAA,IACzD;AACA,aAAS,WAAW,GAAG,GAAG;AACtB,aAAO,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,IAAI,IAAI;AAAA,IAC7C;AACA,aAAS,UAAUO,OAAM;AACrB,UAAI,WAAW;AAAA,QACX,WAAW,CAAC,CAAC,CAAC;AAAA,QACd,YAAY,CAAC;AAAA,MACjB,GAAG,aAAaA,MAAK,QAAQ,UAAU,GAAG,EAAE,MAAM,GAAG,GAAGF,QAAO,GAAG,WAAW;AAC7E,WAAKA,UAAS,QAAQ;AAClB,YAAI,OAAOA,MAAK;AAChB,oBAAY,WAAW,EAAE,CAAC,CAAC;AAC3B,YAAI,aAAa,cAAc,OAAO,cAAc,KAAK;AACrD,kBAAQ,UAAU,MAAM,GAAG,EAAE,KAAK,UAAU;AAC5C,cAAI,GAAG,SAAS,MAAM;AACtB,eAAK,IAAI,GAAG,IAAI,QAAQ,KAAK;AACzB,kBAAM,MAAM,CAAC,GAAG,UAAUA,QAAO,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC;AAAA,UACrD;AAAA,QACJ;AAAA,MACJ;AACA,aAAO;AAAA,IACX;AACA,aAAS,YAAYE,OAAM;AACvB,UAAI,WAAWA,MAAK,YAAY;AAChC,aAAO,aAAa,QAAQ,KAAK;AAAA,IACrC;AACA,QAAI,IAAI,YAAY,IAAI;AACxB,WAAO,UAAU,aAAa,IAAI,OAAO,CAAC;AAAA,EAC9C;AACA,EAAAR,OAAM,MAAM,QAAQ,WAAY;AAC5B,QAAI,YAAY,CAAC,GAAG,aAAa,CAAC,GAAG,KAAK,SAAS,WAAW,SAAS,QAAQS,QAAO,UAAU,UAAU,UAAU,GAAG;AACvH,aAAS,IAAI,MAAMR,MAAK,KAAK;AACzB,aAAO,WAAW,OAAO,MAAM,WAAW;AAC1C,UAAI,CAAC,KAAK;AACN,eAAO,KAAK,CAAC,CAAC;AACd,cAAM,OAAO,CAAC;AAAA,MAClB;AACA,UAAI,CAAC,IAAI,IAAI,GAAG;AACZ,YAAI,IAAI,IAAI,CAAC;AAAA,MACjB;AACA,gBAAU,IAAI,IAAI;AAClB,UAAIQ,QAAO;AACP,iBAAS,CAAC;AACV,aAAK,IAAIR,MAAK,KAAK,KAAK,KAAKQ,QAAO;AAChC,iBAAO,KAAK,CAAC;AAAA,QACjB;AACA,eAAO;AAAA,UACH,GAAG;AAAA,UACH,GAAGA;AAAA,UACH,GAAG,QAAQ;AAAA,UACX,GAAG;AAAA,QACP;AAAA,MACJ;AACA,eAAS,WAAW,CAACR,IAAG,IAAI,WAAW,CAAC,GAAG,IAAI;AAC/C,UAAI,SAAS,OAAO;AACpB,WAAK,IAAI,GAAG,IAAI,QAAQ,KAAK,GAAG;AAC5B,YAAI,MAAM,OAAO,CAAC;AAClB,YAAI,QAAQ,QAAQ,GAAG,IAAI,GAAG;AAC1B,kBAAQ,KAAK,GAAG;AAAA,QACpB;AAAA,MACJ;AACA,eAASQ,SAAQ,WAAW,WAAW,WAAW;AAAA,IACtD;AACA,WAAO;AAAA,MACH;AAAA,MACA;AAAA,MACA,IAAI,WAAY;AACZ,iBAAS,UAAU,CAAC,aAAa,QAAQ,UAAU,CAAC,IAAI;AACxD,eAAO;AAAA,MACX;AAAA,MACA,OAAO,SAAU,GAAG;AAChB,QAAAA,SAAQ,KAAK;AACb,eAAO;AAAA,MACX;AAAA,MACA,OAAO,SAAU,GAAG;AAChB,mBAAW;AACX,iBAAS,CAAC,CAAC;AACX,eAAO;AAAA,MACX;AAAA,MACA,QAAQ,SAAU,GAAG;AACjB,mBAAW;AACX,iBAAS,CAAC,CAAC;AACX,eAAO;AAAA,MACX;AAAA,MACA,OAAO,WAAY;AACf,mBAAW;AACX,eAAO;AAAA,MACX;AAAA,MACA,MAAM,WAAY;AACd,mBAAW;AACX,eAAO;AAAA,MACX;AAAA,MACA,MAAM,WAAY;AACd,iBAASL,KAAI,GAAG,MAAM,OAAO,QAAQA,KAAI,KAAKA,MAAK;AAC/C,cAAIG,SAAQ,OAAOH,EAAC,EAAE,MAAM,GAAG;AAC/B,cAAIG,OAAM,SAAS;AACf,YAAAA,OAAM,KAAK,CAAC;AAChB,iBAAOH,EAAC,IAAI,CAACG,OAAM,CAAC,IAAI,OAAO,CAACA,OAAM,CAAC,IAAI,KAAK,CAACA,OAAM,CAAC;AAAA,QAC5D;AACA,YAAI,GAAG;AACP,eAAO;AAAA,MACX;AAAA,MACA,QAAQ,WAAY;AAChB,YAAI,KAAK,GAAG,EAAE;AACd,eAAO;AAAA,MACX;AAAA,MACA,QAAQ,WAAY;AAChB,YAAI,KAAK,GAAG,EAAE;AACd,eAAO;AAAA,MACX;AAAA,MACA,MAAM,WAAY;AACd,YAAI,KAAK,GAAG,EAAE;AACd,eAAO;AAAA,MACX;AAAA,MACA,YAAY,WAAY;AACpB,YAAI,KAAK,GAAG,WAAW,IAAI,EAAE;AAC7B,eAAO;AAAA,MACX;AAAA,MACA,WAAW,WAAY;AACnB,YAAI,KAAK,GAAG,CAAC;AACb,eAAO;AAAA,MACX;AAAA,MACA,WAAW,WAAY;AACnB,iBAAS,CAAC,GAAG,CAAC;AACd,eAAO,KAAK,UAAU;AAAA,MAC1B;AAAA,MACA,WAAW,WAAY;AACnB,iBAAS,CAAC,GAAG,GAAG,GAAG,GAAG,CAAC;AACvB,eAAO,KAAK,UAAU;AAAA,MAC1B;AAAA,MACA,gBAAgB,WAAY;AACxB,YAAI,MAAM,GAAG,WAAW,IAAI,CAAC;AAC7B,eAAO;AAAA,MACX;AAAA,MACA,WAAW,WAAY;AACnB,YAAI,MAAM,GAAG,WAAW,IAAI,GAAG;AAC/B,eAAO;AAAA,MACX;AAAA,MACA,aAAa,WAAY;AACrB,YAAI,MAAM,GAAG,WAAW,IAAI,CAAC;AAC7B,eAAO;AAAA,MACX;AAAA,MACA,YAAY,WAAY;AACpB,YAAI,MAAM,GAAG,WAAW,IAAI,EAAE;AAC9B,eAAO;AAAA,MACX;AAAA,MACA,OAAO,WAAY;AACf,YAAI,KAAK,GAAG,EAAE;AACd,eAAO;AAAA,MACX;AAAA,MACA,MAAM,WAAY;AACd,YAAI,KAAK,MAAM,IAAI;AACnB,eAAO;AAAA,MACX;AAAA,MACA,UAAU,WAAY;AAClB,iBAASH,KAAI,GAAG,MAAM,OAAO,QAAQA,KAAI,KAAKA,MAAK;AAC/C,iBAAOA,EAAC,IAAI,OAAOA,EAAC,EAAE,QAAQ;AAAA,QAClC;AACA,YAAI,IAAI;AACR,eAAO;AAAA,MACX;AAAA,MACA,gBAAgB,SAAU,IAAI,MAAM;AAChC,YAAI,SAASJ,OAAM,SAAS,EAAE;AAC9B,YAAI,CAAC;AACD,gBAAM,IAAI,MAAM,qBAAqB,KAAK,kBAAkB;AAChE,mBAAW;AACX,iBAAS,UAAU,CAAC,aAAa,QAAQ,UAAU,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;AACrE,eAAO;AAAA,MACX;AAAA,MACA,cAAc,SAAU,IAAI;AACxB,YAAI,SAASA,OAAM,EAAE;AACrB,YAAI,CAAC;AACD,gBAAM,IAAI,MAAM,wBAAwB,KAAK,kBAAkB;AACnE,YAAI,IAAI,OAAO,OAAO,oBAAI,KAAK,CAAC,EAAE,CAAC,GAAG,OAAO,OAAO,oBAAI,KAAK,CAAC,EAAE,CAAC,CAAC;AAClE,eAAO;AAAA,MACX;AAAA,MACA,YAAY,SAAU,OAAO;AACzB,eAAO,KAAK,QAAQ,OAAO,KAAK,CAAC;AAAA,MACrC;AAAA,MACA,SAAS,SAAU,OAAO,KAAK;AAC3B,YAAI,KAAK,CAAC,IAAI,IAAI,KAAK,CAAC,EAAE,OAAO,GAAG,KAAK,CAAC;AAC1C,QAAAS,SAAQ,KAAK;AACb,YAAI,KAAK,GAAG,OAAO,GAAG;AACtB,eAAO;AAAA,MACX;AAAA,MACA,KAAK,WAAY;AACb,cAAM,OAAO,OAAO,KAAK,CAAC,CAAC,IAAI,CAAC;AAChC,eAAO;AAAA,MACX;AAAA,MACA,QAAQ,WAAY;AAChB,iBAAS;AACT,cAAM;AACN,eAAO;AAAA,MACX;AAAA,IACJ;AAAA,EACJ;AACA,EAAAT,OAAM,MAAM,OAAO,SAAU,KAAK;AAC9B,QAAI,QAAQA,OAAM,MAAM,OAAO,MAAM,GAAG,QAAQ,IAAI;AACpD,QAAI,aAAa;AAAA,MACb,KAAK;AAAA,MACL,UAAU;AAAA,MACV,MAAM;AAAA,MACN,MAAM;AAAA,MACN,SAAS;AAAA,MACT,WAAW;AAAA,MACX,WAAW;AAAA,MACX,OAAO;AAAA,MACP,OAAO;AAAA,MACP,QAAQ;AAAA,MACR,QAAQ;AAAA,MACR,QAAQ;AAAA,MACR,MAAM;AAAA,MACN,KAAK;AAAA,MACL,aAAa;AAAA,MACb,WAAW;AAAA,MACX,WAAW;AAAA,MACX,YAAY;AAAA,MACZ,aAAa;AAAA,MACb,SAAS;AAAA,MACT,SAAS;AAAA,MACT,OAAO;AAAA,MACP,MAAM;AAAA,MACN,SAAS;AAAA,MACT,OAAO;AAAA,MACP,IAAI;AAAA,MACJ,KAAK;AAAA,MACL,QAAQ;AAAA,MACR,MAAM;AAAA,MACN,OAAO;AAAA,MACP,MAAM;AAAA,MACN,MAAM;AAAA,MACN,IAAI;AAAA,MACJ,OAAO;AAAA,MACP,IAAI;AAAA,MACJ,SAAS;AAAA,IACb;AACA,QAAI,QAAQ;AAAA,MACR,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,OAAO;AAAA,MACP,KAAK;AAAA,MACL,OAAO;AAAA,MACP,KAAK;AAAA,MACL,OAAO;AAAA,MACP,KAAK;AAAA,MACL,OAAO;AAAA,MACP,OAAO;AAAA,IACX;AACA,aAAS,EAAE,OAAO,KAAK,MAAM,MAAM;AAC/B,aAAO;AAAA,QACH,UAAU;AAAA,QACV,QAAQ;AAAA,QACR;AAAA,QACA;AAAA,MACJ;AAAA,IACJ;AACA,aAAS,KAAK,UAAU;AACpB,UAAI,aAAa,oBAAoB,QAAQ,WAAW,CAAC,QAAQ,GAAG,aAAa,OAAO,OAAO,UAAU,GAAG,WAAW,OAAO;AAC9H,iBAAW,KAAK,UAAU;AAC1B,cAAQ;AACR,aAAO,CAAC,SAAS,MAAM,SAAS,YAAY;AACxC,cAAM;AACN,mBAAW,MAAM,UAAU,KAAK;AAChC,gBAAQ,EAAE,OAAO,OAAO,MAAM,MAAM,UAAU,EAAE,CAAC,CAAC;AAClD,YAAI,GAAG,SAAS,WAAW;AAC3B,aAAK,IAAI,GAAG,IAAI,QAAQ,KAAK;AACzB,sBAAY,WAAW,CAAC;AACxB,cAAI,UAAU,KAAK,QAAQ;AAC3B,cAAI,KAAK,EAAE,UAAU,KAAK,EAAE,CAAC,EAAE,SAAS,KAAK;AACzC,kBAAM,EAAE,CAAC,EAAE;AACX,oBAAQ,EAAE,OAAO,QAAQ,KAAK,SAAS,UAAU,GAAG,GAAG,GAAG,SAAS;AAAA,UACvE;AAAA,QACJ;AACA,YAAI,MAAM,SAAS,YAAY;AAC3B,kBAAQ,MAAM;AAAA,QAClB;AAAA,MACJ;AACA,aAAO;AAAA,IACX;AACA,aAAS,KAAK,eAAe;AACzB,UAAI,QAAQ,KAAK,aAAa;AAC9B,YAAM,MAAM;AACZ,aAAO;AAAA,IACX;AACA,aAAS,iBAAiB,WAAW;AACjC,UAAI,QAAQ,CAAC,gBAAgB,SAAS,GAAG,MAAM,cAAc,WAAW,OAAO,IAAI,CAAC,gBAAgB,SAAS,IAAI,OAAO,OAAO,CAAC;AAChI,eAAS,IAAI,OAAO,KAAK,KAAK,KAAK;AAC/B,aAAK,KAAK,CAAC;AAAA,MACf;AACA,aAAO;AAAA,IACX;AACA,aAAS,YAAY,WAAW;AAC5B,UAAI,OAAO,iBAAiB,SAAS;AACrC,aAAO,cAAc,WAAW,GAAG,GAAG;AAClC,eAAO,KAAK,OAAO,iBAAiB,SAAS,CAAC;AAAA,MAClD;AACA,aAAO;AAAA,IACX;AACA,aAAS,WAAW,GAAG;AACnB,UAAI,KAAK,QAAQ,OAAO;AACxB,UAAI,cAAc,WAAW,OAAO,GAAG;AACnC,UAAE,GAAG,MAAM,KAAK,MAAM,GAAG,EAAE,UAAU;AAAA,MACzC,WACS,cAAc,WAAW,OAAO,GAAG;AACxC,UAAE,GAAG,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,GAAG,EAAE,UAAU;AAAA,MAC1E,OACK;AACD,cAAM,gBAAgB,WAAW,IAAI;AACrC,UAAE,MAAM,GAAG;AACX,iBAAS,gBAAgB,CAAC;AAC1B,YAAI,cAAc,WAAW,KAAK,GAAG;AACjC,gBAAM,gBAAgB,WAAW,IAAI;AACrC,YAAE,WAAW,GAAG;AAChB,qBAAW,OAAO,IAAI;AAAA,QAC1B,WACS,cAAc,WAAW,OAAO,GAAG;AACxC,kBAAQ,gBAAgB,WAAW,IAAI;AACvC,cAAI,cAAc,WAAW,GAAG,GAAG;AAC/B,kBAAM,gBAAgB,WAAW,IAAI;AACrC,cAAE,QAAQ,OAAO,GAAG;AAAA,UACxB;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AACA,aAAS,WAAW,GAAG;AACnB,UAAI,cAAc,WAAW,KAAK,GAAG;AACjC,UAAE,MAAM;AAAA,MACZ,WACS,cAAc,WAAW,IAAI,GAAG;AACrC,UAAE,KAAK;AAAA,MACX,OACK;AACD,UAAE,GAAG,YAAY,WAAW,IAAI,CAAC;AAAA,MACrC;AACA,sBAAgB,CAAC;AAAA,IACrB;AACA,aAAS,kBAAkBU,MAAK;AAC5B,YAAM;AACN,cAAQA;AACR,cAAQ;AACR,UAAI,IAAI,MAAM;AACd,aAAO,MAAM,MAAM,UAAU,QAAQ,GAAG;AACpC,YAAI,QAAQ,WAAW,CAAC,WAAW,OAAO,WAAW,OAAO,WAAW,QAAQ,WAAW,OAAO,WAAW,IAAI,WAAW,IAAI,WAAW,IAAI,GAAG,WAAW,IAAI,WAAW,KAAK,WAAW,QAAQ,WAAW,IAAI,CAAC;AACnN,gBAAQ,MAAM,MAAM;AAAA,UAChB,KAAK,WAAW;AACZ,uBAAW,CAAC;AACZ;AAAA,UACJ,KAAK,WAAW;AACZ,gBAAI,KAAK,WAAW,IAAI,EAAE,SAAS,QAAW;AAC1C,gBAAE,MAAM,gBAAgB,WAAW,IAAI,CAAC;AACxC,gBAAE,KAAK;AAAA,YACX,WACS,KAAK,WAAW,QAAQ,EAAE,SAAS,QAAW;AACnD,gBAAE,MAAM,gBAAgB,WAAW,QAAQ,CAAC;AAC5C,gBAAE,SAAS;AAAA,YACf,OACK;AACD,gBAAE,MAAM,gBAAgB,WAAW,IAAI,CAAC;AACxC,8BAAgB,CAAC;AAAA,YACrB;AACA;AAAA,UACJ,KAAK,WAAW;AACZ,gBAAI,KAAK,WAAW,IAAI,EAAE,SAAS,QAAW;AAC1C,gBAAE,OAAO,gBAAgB,WAAW,IAAI,CAAC;AACzC,gBAAE,KAAK;AAAA,YACX,WACS,KAAK,WAAW,QAAQ,EAAE,SAAS,QAAW;AACnD,gBAAE,OAAO,gBAAgB,WAAW,QAAQ,CAAC;AAC7C,gBAAE,SAAS;AAAA,YACf,OACK;AACD,gBAAE,OAAO,gBAAgB,WAAW,IAAI,CAAC;AACzC,8BAAgB,CAAC;AAAA,YACrB;AACA;AAAA,UACJ,KAAK,WAAW;AACZ,uBAAW,CAAC;AACZ;AAAA,UACJ,KAAK,WAAW;AACZ,cAAE,GAAG,YAAY,WAAW,OAAO,CAAC,EAAE,UAAU;AAChD;AAAA,UACJ,KAAK,WAAW;AACZ,cAAE,GAAG,YAAY,WAAW,SAAS,CAAC,EAAE,MAAM;AAC9C;AAAA,UACJ,KAAK,WAAW,IAAI;AAChB,cAAE,GAAG,YAAY,WAAW,SAAS,CAAC,EAAE,KAAK;AAC7C;AAAA,UACJ,KAAK,WAAW;AACZ,cAAE,GAAG,gBAAgB,WAAW,IAAI,CAAC,EAAE,KAAK;AAC5C,mBAAO,cAAc,WAAW,GAAG,GAAG;AAClC,gBAAE,GAAG,gBAAgB,WAAW,IAAI,CAAC,EAAE,KAAK;AAAA,YAChD;AACA;AAAA,UACJ,KAAK,WAAW;AACZ;AAAA,UACJ,KAAK,WAAW;AACZ,cAAE,IAAI;AACN;AAAA,UACJ,KAAK,WAAW;AACZ,cAAE,OAAO;AACT;AAAA,UACJ;AACI,oBAAQ;AAAA,QAChB;AAAA,MACJ;AACA,aAAO;AAAA,QACH,WAAW,EAAE;AAAA,QACb,YAAY,EAAE;AAAA,QACd;AAAA,MACJ;AAAA,IACJ;AACA,aAAS,gBAAgB,GAAG;AACxB,UAAI,aAAa,WAAW,CAAC,WAAW,QAAQ,WAAW,QAAQ,WAAW,MAAM,WAAW,WAAW,WAAW,WAAW,WAAW,aAAa,WAAW,KAAK,WAAW,OAAO,WAAW,MAAM,WAAW,aAAa,WAAW,UAAU,CAAC;AACzP,cAAQ,WAAW,MAAM;AAAA,QACrB,KAAK,WAAW;AACZ,YAAE,OAAO;AACT;AAAA,QACJ,KAAK,WAAW;AACZ,YAAE,OAAO;AACT;AAAA,QACJ,KAAK,WAAW;AACZ,YAAE,KAAK;AACP;AAAA,QACJ,KAAK,WAAW;AACZ,YAAE,UAAU;AACZ;AAAA,QACJ,KAAK,WAAW;AACZ,YAAE,UAAU;AACZ;AAAA,QACJ,KAAK,WAAW;AACZ,YAAE,eAAe;AACjB;AAAA,QACJ,KAAK,WAAW;AACZ,YAAE,WAAW;AACb;AAAA,QACJ,KAAK,WAAW;AACZ,YAAE,YAAY;AACd;AAAA,QACJ,KAAK,WAAW;AACZ,YAAE,WAAW;AACb;AAAA,QACJ,KAAK,WAAW;AACZ,YAAE,MAAM;AACR;AAAA,QACJ,KAAK,WAAW;AACZ,YAAE,KAAK;AACP;AAAA,QACJ;AACI,kBAAQ;AAAA,MAChB;AACA,aAAO;AAAA,IACX;AACA,aAAS,cAAc,WAAW;AAC9B,UAAI,QAAQ,KAAK,SAAS,EAAE,SAAS;AACrC,UAAI,OAAO;AACP,aAAK,SAAS;AAAA,MAClB;AACA,aAAO;AAAA,IACX;AACA,aAAS,WAAW,WAAW;AAC3B,UAAIC,KAAI,KAAK,SAAS;AACtB,UAAIA,GAAE,MAAM;AACR,QAAAA,GAAE,OAAO,cAAcA,GAAE,MAAM,SAAS;AAAA,MAC5C,OACK;AACD,gBAAQ;AAAA,MACZ;AACA,aAAOA;AAAA,IACX;AACA,aAAS,gBAAgB,WAAW;AAChC,aAAO,WAAW,SAAS,EAAE;AAAA,IACjC;AACA,aAAS,cAAcD,MAAK,WAAW;AACnC,UAAI,SAASA;AACb,cAAQ,WAAW;AAAA,QACf,KAAK,WAAW;AACZ,cAAI,QAAQA,KAAI,MAAM,WAAW,GAAGE,QAAO,MAAM,CAAC,MAAM,QAAQ,MAAM,CAAC,IAAI,KAAK,SAAS,MAAM,CAAC,GAAG,EAAE,IAAI,KAAK,MAAM,CAAC,GAAGX,OAAM,MAAM,CAAC,EAAE,KAAK;AAC5I,oBAAUW,MAAK,WAAW,IAAI,MAAM,MAAMA,QAAO,MAAMX;AACvD;AAAA,QACJ,KAAK,WAAW;AACZ,mBAAS,SAAS,OAAO,KAAKS,IAAG,EAAE,CAAC,GAAG,EAAE;AACzC;AAAA,QACJ,KAAK,WAAW;AAAA,QAChB,KAAK,WAAW;AACZ,mBAAS,MAAMA,KAAI,UAAU,GAAG,CAAC,CAAC;AAClC;AAAA,QACJ,KAAK,WAAW;AACZ,mBAAS,IAAI,KAAKA,KAAI,YAAY,CAAC;AACnC;AAAA,MACJ;AACJ,aAAO;AAAA,IACX;AACA,WAAO,kBAAkB,IAAI,YAAY,CAAC;AAAA,EAC9C;AACA,SAAOV;AACX,EAAG;AAEH,MAAM,KAAK,UAAU;AACrB,IAAO,gBAAQ;;;AChjDR,SAAS,MAAM,UAAU;AAC5B,QAAM,cAAc,CAAC;AACrB,QAAM,cAAc,CAAC;AACrB,MAAI;AACJ,QAAM,OAAO,aAAa;AACtB,QAAI,CAAC;AACD,iBAAW,SAAS,OAAO,QAAQ,EAAE;AACzC,WAAO,MAAM;AACT,UAAI,YAAY,QAAQ;AACpB,eAAO;AACP,oBAAY,SAAS;AAAA,MACzB;AACA,UAAI,CAAC;AACD;AACJ,YAAM,EAAE,OAAO,KAAK,IAAI,SAAS,KAAK;AACtC,UAAI,MAAM;AACN,mBAAW;AACX,mBAAW;AACX;AAAA,MACJ;AACA,kBAAY,KAAK,KAAK;AACtB,YAAM;AAAA,IACV;AAAA,EACJ;AACA,QAAM,OAAO,aAAa;AACtB,QAAI,CAAC;AACD,iBAAW,SAAS,OAAO,QAAQ,EAAE;AACzC,WAAO,MAAM;AACT,UAAI,YAAY,QAAQ;AACpB,eAAO;AACP,oBAAY,SAAS;AAAA,MACzB;AACA,UAAI,CAAC;AACD;AACJ,YAAM,EAAE,OAAO,KAAK,IAAI,SAAS,KAAK;AACtC,UAAI,MAAM;AACN,mBAAW;AACX,mBAAW;AACX;AAAA,MACJ;AACA,kBAAY,KAAK,KAAK;AACtB,YAAM;AAAA,IACV;AAAA,EACJ;AACA,SAAO,CAAC,KAAK,GAAG,KAAK,CAAC;AAC1B;AAEO,UAAU,gBAAgB,UAAU,WAAW;AAClD,MAAI,YAAY;AACZ,UAAM,IAAI,MAAM,sCAAsC;AAC1D,cAAY,YAAY;AACxB,QAAM,eAAe,CAAC;AACtB,aAAW,MAAM,UAAU;AACvB,QAAI,aAAa,WAAW,WAAW;AACnC,YAAM;AACN,mBAAa,SAAS;AAAA,IAC1B;AACA,iBAAa,KAAK,EAAE;AAAA,EACxB;AACA,MAAI,aAAa,SAAS;AACtB,UAAM;AACd;AAEO,UAAU,OAAO,UAAU,MAAM;AACpC,MAAI,IAAI;AACR,aAAW,MAAM,UAAU;AACvB,QAAI,KAAK,IAAI,GAAG;AACZ,YAAM;AAAA,EACd;AACJ;AAEO,UAAU,KAAK,UAAU,SAAS;AACrC,MAAI,IAAI;AACR,aAAW,MAAM,UAAU;AACvB,QAAI,EAAE,IAAI;AACN,YAAM;AAAA,EACd;AACJ;AAEO,SAAS,MAAM,UAAU,MAAM;AAClC,MAAI,IAAI;AACR,aAAW,MAAM,UAAU;AACvB,QAAI,CAAC,KAAK,IAAI,GAAG;AACb,aAAO;AAAA,EACf;AACA,SAAO;AACX;AAEO,SAAS,KAAK,UAAU,MAAM;AACjC,MAAI,IAAI;AACR,aAAW,MAAM,UAAU;AACvB,QAAI,KAAK,IAAI,GAAG;AACZ,aAAO;AAAA,EACf;AACA,SAAO;AACX;AAEO,UAAU,IAAI,UAAU,MAAM;AACjC,MAAI,IAAI;AACR,aAAW,MAAM;AACb,UAAM,KAAK,IAAI,GAAG;AAC1B;AAEO,SAAS,OAAO,UAAU,MAAM,YAAY;AAC/C,MAAI,IAAI;AACR,MAAI,MAAM;AACV,aAAW,MAAM,UAAU;AACvB,UAAM,KAAK,KAAK,IAAI,GAAG;AAAA,EAC3B;AACA,SAAO;AACX;AAEO,UAAU,WAAW,UAAU;AAClC,QAAM,OAAO,oBAAI,IAAI;AACrB,aAAW,MAAM,UAAU;AACvB,QAAI,CAAC,KAAK,IAAI,EAAE,GAAG;AACf,WAAK,IAAI,EAAE;AACX,YAAM;AAAA,IACV;AAAA,EACJ;AACJ;AAEO,UAAU,aAAa,UAAU,MAAM;AAC1C,QAAM,OAAO,oBAAI,IAAI;AACrB,aAAW,MAAM,UAAU;AACvB,UAAM,WAAW,KAAK,EAAE;AACxB,QAAI,CAAC,KAAK,IAAI,QAAQ,GAAG;AACrB,WAAK,IAAI,QAAQ;AACjB,YAAM;AAAA,IACV;AAAA,EACJ;AACJ;AAQO,UAAU,UAAU,UAAU,MAAM;AACvC,MAAI,IAAI;AACR,aAAW,MAAM,UAAU;AACvB,QAAI,KAAK,IAAI,GAAG;AACZ,YAAM;AAAA;AAEN;AAAA,EACR;AACJ;AAoBO,UAAU,UAAU,WAAW;AAClC,WAAS,IAAI,GAAG,IAAI,UAAU,QAAQ;AAClC,WAAO,UAAU,CAAC;AAC1B;AAEO,UAAU,eAAe,mBAAmB;AAC/C,aAAW,YAAY;AACnB,WAAO;AACf;AAMO,IAAM,uBAAN,MAA2B;AAAA,EAC9B,YAAY,UAAU;AAClB,SAAK,WAAW;AAChB,QAAI,CAAC;AACD,YAAM,IAAI,MAAM,2CAA2C;AAC/D,SAAK,WAAW;AAAA,EACpB;AAAA,EACA,OAAO,UAAU;AACb,SAAK,WAAW;AAChB,WAAO,IAAI,qBAAqB,QAAQ;AAAA,EAC5C;AAAA,EACA,OAAO;AACH,UAAM,CAAC,OAAO,KAAK,IAAI,MAAM,KAAK,QAAQ;AAC1C,SAAK,WAAW;AAChB,WAAO,IAAI,qBAAqB,KAAK;AAAA,EACzC;AAAA,EACA,QAAQ;AACJ,UAAM,CAAC,OAAO,KAAK,IAAI,MAAM,KAAK,QAAQ;AAC1C,WAAO,CAAC,IAAI,qBAAqB,KAAK,GAAG,KAAK,OAAO,KAAK,CAAC;AAAA,EAC/D;AAAA,EACA,gBAAgB,WAAW;AACvB,WAAO,KAAK,OAAO,gBAAgB,KAAK,UAAU,SAAS,CAAC;AAAA,EAChE;AAAA,EACA,OAAO,MAAM;AACT,WAAO,KAAK,OAAO,OAAO,KAAK,UAAU,IAAI,CAAC;AAAA,EAClD;AAAA,EACA,KAAK,SAAS;AACV,WAAO,KAAK,OAAO,KAAK,KAAK,UAAU,OAAO,CAAC;AAAA,EACnD;AAAA,EACA,IAAI,MAAM;AACN,WAAO,KAAK,OAAO,IAAI,KAAK,UAAU,IAAI,CAAC;AAAA,EAC/C;AAAA,EACA,OAAO,MAAM,YAAY;AACrB,WAAO,OAAO,MAAM,MAAM,UAAU;AAAA,EACxC;AAAA,EACA,SAAS;AAEL,WAAO,KAAK,OAAO,eAAe,KAAK,QAAQ,CAAC;AAAA,EACpD;AAAA,EACA,aAAa;AACT,WAAO,KAAK,OAAO,WAAW,KAAK,QAAQ,CAAC;AAAA,EAChD;AAAA,EACA,aAAa,MAAM;AACf,WAAO,KAAK,OAAO,aAAa,KAAK,UAAU,IAAI,CAAC;AAAA,EACxD;AAAA,EACA,MAAM,MAAM;AACR,WAAO,MAAM,MAAM,IAAI;AAAA,EAC3B;AAAA,EACA,KAAK,MAAM;AACP,WAAO,KAAK,MAAM,IAAI;AAAA,EAC1B;AAAA,EACA,UAAU,MAAM;AACZ,WAAO,KAAK,OAAO,UAAU,KAAK,UAAU,IAAI,CAAC;AAAA,EACrD;AAAA,EACA,EAAE,OAAO,QAAQ,IAAI;AACjB,QAAI,WAAW,KAAK;AACpB,QAAI,CAAC;AACD,YAAM,IAAI,MAAM,kEAAkE;AAEtF,SAAK,WAAW;AAChB,WAAO;AAEP,eAAW;AAAA,EACf;AAAA,EACA,UAAU;AACN,WAAO,MAAM,KAAK,IAAI;AAAA,EAC1B;AAAA,EACA,KAAK,OAAO;AACR,WAAO,MAAM,KAAK,IAAI,EAAE,KAAK,KAAK;AAAA,EACtC;AAAA,EACA,QAAQ;AACJ,WAAO,IAAI,IAAI,IAAI;AAAA,EACvB;AAAA,EACA,QAAQ;AAEJ,WAAO,IAAI,IAAI,IAAI;AAAA,EACvB;AAAA;AAAA;AAAA;AAAA,EAIA,QAAQ;AACJ,eAAW,WAAW,MAAM;AAAA,IAAE;AAAA,EAClC;AAAA,EACA,UAAU;AACN,WAAO,IAAI,sBAAsB,IAAI;AAAA,EACzC;AACJ;AACO,IAAM,kBAAkB,CAAC,aAAa,IAAI,qBAAqB,QAAQ;AACvE,IAAM,KAAK;AAEX,IAAM,wBAAN,cAAoC,qBAAqB;AAAA,EAC5D,cAAc;AACV,UAAM,GAAG,SAAS;AAClB,SAAK,WAAW,CAAC;AACjB,SAAK,YAAY;AAAA,EACrB;AAAA,EACA,IAAI,SAAS,UAAU;AACnB,SAAK,YAAY;AAAA,EACrB;AAAA,EACA,IAAI,WAAW;AACX,WAAO;AAAA,EACX;AAAA,EACA,OAAO,UAAU;AACb,WAAO,IAAI,qBAAqB,QAAQ;AAAA,EAC5C;AAAA,EACA,EAAE,OAAO,QAAQ,IAAI;AACjB,UAAM,WAAW,KAAK;AACtB,QAAI,KAAK,WAAW;AAChB,UAAI,CAAC,KAAK;AACN,aAAK,YAAY,KAAK,UAAU,OAAO,QAAQ,EAAE;AACrD,UAAI,WAAW,KAAK;AACpB,UAAI,kBAAkB,SAAS;AAE/B,UAAI,kBAAkB;AAClB,eAAO;AACX,aAAO,MAAM;AACT,YAAI,SAAS,SAAS,iBAAiB;AAEnC,mBAAS,IAAI,iBAAiB,IAAI,SAAS,QAAQ;AAC/C,kBAAM,SAAS,CAAC;AACpB,4BAAkB,SAAS;AAAA,QAC/B;AACA,YAAI,CAAC;AACD;AACJ,cAAM,EAAE,OAAO,KAAK,IAAI,SAAS,KAAK;AACtC,YAAI,MAAM;AACN,qBAAW,KAAK,YAAY;AAC5B,eAAK,YAAY;AAAA,QACrB,OACK;AACD,mBAAS,KAAK,KAAK;AACnB;AACA,gBAAM;AAAA,QACV;AAAA,MACJ;AAAA,IACJ,OACK;AACD,aAAO;AAAA,IACX;AAAA,EACJ;AACJ;AACO,IAAM,mBAAmB,CAAC,aAAa,IAAI,sBAAsB,QAAQ;AACzE,IAAM,KAAK;;;AC1VlB,IAAM,0BAA0B,OAAO,eAAe;AACtD,IAAM,qBAAqB,OAAO,oBAAoB;AAEtD,IAAM,sBAAN,MAA0B;AAAA,EACtB,cAAc;AACV,SAAK,SAAS;AACd,SAAK,WAAW;AAChB,SAAK,uBAAuB;AAC5B,SAAK,cAAc;AACnB,SAAK,+BAA+B,GAAG,KAAK,uBAAuB,CAAC;AAAA,EACxE;AAAA,EACA,OAAO,IAAI,OAAO;AACd,UAAM,KAAK,IAAI,KAAK;AACpB,aAAS,OAAO,OAAO,IAAI,KAAK;AAChC,WAAO;AAAA,EACX;AAAA,EACA,IAAI,aAAa;AACb,QAAI,KAAK,gBAAgB;AACrB,aAAO,KAAK;AAChB,WAAO,KAAK,cAAc,KAAK,gBAAgB;AAAA,EACnD;AAAA,EACA,kBAAkB;AACd,WAAO,MAAM,KAAK,KAAK,oBAAoB,KAAK,CAAC,EAAE,KAAK,CAAC,QAAQ,WAAW,SAAS,MAAM;AAAA,EAC/F;AAAA,EACA,IAAI,sBAAsB;AACtB,QAAI,KAAK,yBAAyB;AAC9B,aAAO,KAAK;AAChB,WAAO,KAAK,uBAAuB,KAAK,yBAAyB;AAAA,EACrE;AAAA,EACA,iBAAiBa,MAAK,WAAW;AAC7B,QAAI,kBAAkBA,KAAI,IAAI,SAAS;AACvC,QAAI,CAAC,iBAAiB;AAClB,wBAAkB,CAAC;AACnB,MAAAA,KAAI,IAAI,WAAW,eAAe;AAAA,IACtC;AACA,WAAO;AAAA,EACX;AAAA,EACA,2BAA2B;AACvB,QAAI,eAAe;AACnB,UAAM,eAAe,KAAK,SAAS,GAAG,KAAK,OAAO,eAAe,oBAAoB,OAAO,CAAC,EAAE,OAAO,EAAE,MAAM,IAAI,oBAAI,IAAI;AAC1H,UAAMA,OAAM,GAAG,KAAK,SAAS,YAAY,EACpC,IAAI,CAAAC,WAASA,OAAM,eAAe,mBAAmB,EACrD,OAAO,EACP,OAAO,CAAC,qBAAqB,CAAC,WAAW,MAAM,MAAM;AACtD,UAAI,YAAY;AACZ,uBAAe;AACnB,WAAK,iBAAiB,qBAAqB,SAAS,EAAE,KAAK,MAAM;AACjE,aAAO;AAAA,IACX,GAAG,oBAAI,IAAI,CAAC;AACZ,SAAK,iBAAiBD,MAAK,eAAe,CAAC,EAAE,KAAK,CAAC,KAAK,QAAQ,CAAC;AACjE,WAAO,GAAGA,IAAG,EAAE,IAAI,CAAC,CAAC,OAAO,QAAQ,MAAM;AACtC,aAAO,CAAC,OAAO,GAAG,QAAQ,EAAE,OAAO,EAAE,WAAW,EAAE,OAAO,CAAAC,WAAS,CAAC,aAAa,IAAIA,MAAK,CAAC,EAAE,KAAK,CAAC,QAAQ,WAAW,OAAO,KAAK,OAAO,EAAE,CAAC;AAAA,IAC/I,CAAC,EAAE,MAAM;AAAA,EACb;AAAA,EACA,CAAC,yBAAyB;AACtB,WAAO,GAAG,KAAK,UAAU,EAAE,IAAI,WAAS,KAAK,oBAAoB,IAAI,KAAK,CAAC,EAAE,OAAO;AAAA,EACxF;AACJ;AAEA,IAAI,WAAW;AAKR,IAAM,WAAW,OAAK,cAAc,EAAE;AAC7C;AAQO,IAAM,gBAAN,MAAoB;AAC3B;AAEA,IAAM,aAAN,MAAiB;AAAA,EACb,cAAc;AACV,SAAK,KAAK;AACV,SAAK,eAAe,CAAC;AACrB,SAAK,YAAY;AACjB,SAAK,iBAAiB;AACtB,SAAK,cAAc;AACnB,SAAK,iBAAiB;AAEtB,SAAK,gBAAgB;AACrB,SAAK,OAAO;AAAA,EAChB;AAAA,EACA,OAAO,IAAI,OAAO;AACd,UAAM,KAAK,IAAI,KAAK;AACpB,aAAS,OAAO,OAAO,IAAI,KAAK;AAChC,OAAG,iBAAiB,oBAAoB,IAAI,EAAE,UAAU,IAAI,QAAQ,cAAc,GAAG,SAAS,EAAE,CAAC;AAEjG,UAAM,cAAc,GAAG;AACvB,UAAM,SAAS,GAAG,iBAAiB,OAAO,YAAY,IAAI;AAC1D,UAAM,qBAAqB,OAAO,OAAO,SAAU,MAAM;AACrD,YAAM,gBAAgB,YAAY,IAAI;AACtC,oBAAc,UAAU,MAAM,IAAI;AAClC,aAAO;AAAA,IACX,GAAG;AAAA,MACC,CAAC,uBAAuB,GAAG;AAAA,MAC3B,CAAC,kBAAkB,GAAG;AAAA,IAC1B,CAAC;AACD,WAAO,eAAe,oBAAoB,OAAO,aAAa,EAAE,OAAO,mBAAmB,CAAC;AAC3F,OAAG,cAAc;AACjB,WAAO;AAAA,EACX;AAAA,EACA,IAAI,eAAe;AACf,QAAI,KAAK,kBAAkB;AACvB,aAAO,KAAK;AAChB,WAAO,KAAK,gBAAgB,KAAK,kBAAkB;AAAA,EACvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,oBAAoB,WAAW;AAC3B,UAAM,cAAc,KAAK;AACzB,UAAM,UAAU,YAAY,eAAe,IAAI,SAAS;AACxD,QAAI,YAAY;AACZ,aAAO;AACX,UAAM,QAAQ;AACd,gBAAY,eAAe,IAAI,WAAW,KAAK;AAC/C,WAAO;AAAA,EACX;AAAA,EACA,oBAAoB;AAChB,UAAMC,QAAO,KAAK;AAClB,QAAI,UAAU,KAAK;AACnB,UAAM,0BAA0B,KAAK,eAAe,6BAA6B,OAAO,CAAC,KAAKD,WAAU;AACpG,YAAM,EAAE,KAAK,KAAK,IAAI;AACtB,YAAM,WAAW,OAAO,OAAO,aAAaA,OAAM,EAAE;AACpD,UAAI,aAAaC,MAAK,2BAA2B,IAAI,QAAQ;AAC7D,UAAI,CAAC,YAAY;AACb,qBAAaD,OAAM,YAAY,GAAG;AAClC,QAAAA,OAAM,OAAO,WAAW;AACxB,QAAAC,MAAK,2BAA2B,IAAI,UAAU,UAAU;AAAA,MAC5D;AACA,UAAI,MAAM;AACV,UAAI,OAAO;AACX,aAAO;AAAA,IACX,GAAG,EAAE,KAAK,SAAS,MAAM,OAAO,aAAa,KAAK,oBAAoB,OAAO,CAAC,EAAE,CAAC,EAAE;AACnF,UAAM,eAAe,OAAO,OAAO,yBAAyB;AAAA,MACxD,CAAC,uBAAuB,GAAG,KAAK;AAAA,MAChC,CAAC,kBAAkB,GAAG;AAAA,MACtB,KAAK,KAAK;AAAA,MACV,QAAQ,CAAC,SAAS,MAAM,CAAC,cAAc,IAAI,GAAG,CAAAC,UAAQ,cAAcA,MAAK;AAAA,MACzE,CAAC;AAAA,MACD,GAAG;AAAA,MACH,UAAU,KAAK,SAAS,KAAK,IAAI;AAAA,IACrC,CAAC;AACD,WAAO,eAAe,cAAc,OAAO,aAAa,EAAE,OAAO,mBAAmB,CAAC;AACrF,WAAO;AAAA,EACX;AAAA,EACA,WAAW;AACP,WAAO,KAAK,eAAe,6BAA6B,OAAO,CAAC,KAAKF,WAAU,GAAGA,OAAM,QAAQ,QAAQ,KAAK,UAAU,IAAI;AAAA,EAC/H;AACJ;AACA,WAAW,6BAA6B,oBAAI,IAAI;AAChD,WAAW,iBAAiB,oBAAI,IAAI;AAGpC,IAAM,eAAe,CAAC,SAAS;AAC3B,SAAO,OAAO,eAAe,KAAK,SAAS,EAAE,YAAY,eAAe,kBAAkB;AAC9F;AACA,IAAM,gBAAgB,CAAC,SAAS;AAC5B,SAAO,OAAO,eAAe,KAAK,SAAS,EAAE,YAAY,kBAAkB;AAC/E;AAEA,IAAM,QAAQ,CAACG,WAAU,gBAAgB;AACrC,MAAI;AACJ,MAAIA,UAAS,SAAS,GAAG;AACrB,UAAM,kBAAkBA,UAASA,UAAS,SAAS,CAAC;AAGpD,QAAI,CAAC,aAAa,eAAe,KAAK,oBAAoB;AACtD,kBAAY;AAAA,EACpB;AACA,QAAM,eAAe,CAAC;AACtB,EAAAA,UAAS,QAAQ,CAAC,aAAa,UAAU;AACrC,UAAMC,cAAa,YAAY,kBAAkB;AACjD,QAAIA,gBAAe,QAAW;AAC1B,YAAM,mBAAmBA,YAAW;AAEpC,UAAI,qBAAqB,eAAe;AACpC,YAAI,WAAW;AAEX,cAAI,cAAc,kBAAkB;AAChC,kBAAM,eAAe,iBAAiB,UAAU,cAAc,UAAU,SAAS;AACjF,kBAAM,iBAAiB,UAAU,UAAU,cAAc,iBAAiB,SAAS;AACnF,gBAAI,CAAC,gBAAgB,CAAC;AAClB,oBAAM,IAAI,MAAM,qBAAqB;AACzC,wBAAY,iBAAiB,mBAAmB;AAAA,UACpD;AAAA,QACJ;AAGI,sBAAY;AAAA,MACpB;AACA,mBAAa,KAAKA,WAAU;AAAA,IAChC,OACK;AACD,UAAI,UAAUD,UAAS,SAAS;AAC5B,cAAM,IAAI,MAAM,6EAA6E;AAAA,IACrG;AAAA,EACJ,CAAC;AAED,QAAM,aAAa,WAAW,IAAI;AAAA,IAC9B;AAAA,IACA;AAAA,IACA,WAAW,aAAa;AAAA,EAC5B,CAAC;AACD,SAAO,WAAW;AACtB;AAIA,IAAM,qBAAqB,SAAU,UAAU;AAC3C,SAAO,QAAQ,YAAY,SAAS,KAAK,uBAAuB,CAAC,CAAC;AACtE;AAWO,IAAM,eAAe,CAAC,UAAU,SAAS;AAC5C,SAAO,QAAQ,YAAY,SAAS,KAAK,uBAAuB,CAAC,CAAC;AACtE;AAoQO,IAAM,QAAQ;AAKd,IAAM,WAAW;;;ACjfjB,IAAM,OAAN,MAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQd,WAAW,OAAO;AACd,aAAS,OAAO,OAAO,MAAM,KAAK;AAAA,EACtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA2BA,OAAO,IAAI,OAAO;AACd,UAAM,WAAW,IAAI,KAAK;AAC1B,aAAS,WAAW,KAAK;AACzB,WAAO;AAAA,EACX;AACJ;;;ACzCA,IAAqB,gBAArB,MAAmC;AAAA;AAAA,EAO/B,OAAO,WAAW,WAAW,UAAU,UAAU,YAAY,UAAU,WAAW;AAC9E,UAAM,KAAK;AAEX,OAAG,WAAW,QAAQ,SAAS,MAAM,OAAO,CAAC;AAC7C,OAAG,SAAS,QAAQ,SAAS,MAAM,KAAK,CAAC;AACzC,OAAG,aAAa,QAAQ,SAAS,MAAM,OAAO,CAAC;AAG/C,OAAG,YAAY,QAAQ,UAAU,MAAM,QAAQ,KAAK,CAAC,UAAU,MAAM,KAAK,CAAC;AAC3E,OAAG,kBAAkB,GAAG,WAAW,WAAW,kBAAkB;AAChE,OAAG,aAAa,GAAG,kBAAkB;AACrC,OAAG,iBAAiB,GAAG,WAAW,WAAW,yBAAyB;AACtE,OAAG,YAAY,GAAG,iBAAiB;AACnC,OAAG,YAAY,QAAQ,UAAU,MAAM,QAAQ,CAAC,KAAK,CAAC,GAAG;AACzD,OAAG,kBAAkB,QAAQ,UAAU,MAAM,gBAAgB,CAAC;AAC9D,OAAG,iBAAiB,GAAG,WAAW,WAAW,sBAAsB;AACnE,OAAG,aAAa,QAAQ,UAAU,MAAM,UAAU,CAAC;AAAA,EACvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,WAAW,uBAAuB;AAC9B,QAAI,KAAK,yBAAyB,MAAM;AACpC,YAAM,MAAM,SAAS,cAAc,KAAK;AACxC,UAAI,MAAM,WAAW;AACrB,UAAI,MAAM,UAAU;AAGpB,eAAS,gBAAgB,YAAY,GAAG;AACxC,WAAK,wBAAwB,IAAI,cAAc,YAAY,iBAAiB,GAAG,EAAE,iBAAiB,UAAU,MAAM;AAClH,UAAI,OAAO;AAAA,IACf;AACA,WAAO,KAAK;AAAA,EAChB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,WAAW,iBAAiB;AACxB,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,OAAO,WAAW,WAAW,WAAW;AACpC,UAAM,QAAQ,UAAU,MAAM,SAAS;AACvC,WAAO,QAAQ,WAAW,MAAM,CAAC,CAAC,IAAI;AAAA,EAC1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,WAAW,gBAAgB;AAEvB,QAAI,KAAK,mBAAmB,QAAW;AACnC,WAAK,iBAAiB,WAAW,WAAW,kBAAkB,EAAE;AAAA,IACpE;AACA,WAAO,KAAK;AAAA,EAChB;AAAA;AAAA,EAEA,WAAW,oBAAoB;AAC3B,QAAI,KAAK,uBAAuB,QAAW;AACvC,WAAK,qBAAqB,WAAW,WAAW,oBAAoB,EAAE;AAAA,IAC1E;AACA,WAAO,KAAK;AAAA,EAChB;AAAA;AAAA;AAAA,EAGA,WAAW,eAAe;AAGtB,WAAO,OAAO,WAAW;AAAA,EAC7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,WAAW,QAAQ;AACf,WAAO,KAAK;AAAA,EAChB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,WAAW,YAAY;AACnB,WAAO,KAAK;AAAA,EAChB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,WAAW,UAAU;AACjB,WAAO,KAAK;AAAA,EAChB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,WAAW,YAAY;AACnB,WAAO,KAAK;AAAA,EAChB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,WAAW,WAAW;AAClB,WAAO,KAAK;AAAA,EAChB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,WAAW,WAAW;AAClB,WAAO,KAAK;AAAA,EAChB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,WAAW,gBAAgB;AACvB,WAAO,KAAK;AAAA,EAChB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,WAAW,YAAY;AACnB,WAAO,KAAK;AAAA,EAChB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,WAAW,iBAAiB;AACxB,WAAO,KAAK;AAAA,EAChB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,WAAW,WAAW;AAClB,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,WAAW,gBAAgB;AACvB,WAAO,KAAK;AAAA,EAChB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,WAAW,iBAAiB;AACxB,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,WAAW,WAAW;AAClB,UAAM,KAAK;AACX,WAAO,GAAG,WAAW,UACf,GAAG,SAAS,QACR,GAAG,aAAa,YACZ,GAAG,aAAa,YACZ,GAAG,kBAAkB,QACjB;AAAA,EAC1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,WAAW,kBAAkB;AACzB,WAAO;AAAA,EACX;AAAA;AAAA,EAEA,WAAW,qBAAqB;AAC5B,QAAI,KAAK,wBAAwB,QAAW;AACxC,UAAI;AACA,aAAK,sBAAsB,QAAQ,WAAW,OAAO,WAAW,EAAE,SAAS,CAAC;AAAA,MAChF,SACO,GAAP;AACI,aAAK,sBAAsB;AAAA,MAC/B;AAAA,IACJ;AACA,WAAO,KAAK;AAAA,EAChB;AAAA;AAAA;AAAA;AAAA,EAIA,WAAW,mBAAmB;AAC1B,QAAI,SAAS;AACb,QAAI;AACA,gBAAU;AACV,UAAI;AACJ,cAAQ,QAAQ,GAAG,CAAC;AACpB,cAAQ,WAAW,CAAC;AACpB,aAAO;AAAA,IACX,SACO,GAAP;AACI,aAAO,aAAa;AAAA,OAEhB,EAAE,SAAS;AAAA,MAEX,EAAE,SAAS;AAAA;AAAA,MAGX,EAAE,SAAS;AAAA,MAEX,EAAE,SAAS;AAAA,MAEX,QAAQ,WAAW;AAAA,IAC3B;AAAA,EACJ;AAAA,EACA,OAAO,oBAAoB,KAAK,OAAO;AACnC,SAAK,oBAAoB,aAAa,QAAQ,KAAK,KAAK;AAAA,EAC5D;AAAA,EACA,OAAO,oBAAoB,KAAK;AAC5B,WAAO,KAAK,oBAAoB,aAAa,QAAQ,GAAG;AAAA,EAC5D;AAAA,EACA,OAAO,uBAAuB,KAAK;AAC/B,SAAK,oBAAoB,aAAa,WAAW,GAAG;AAAA,EACxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA,OAAO,YAAY,WAAWE,gBAAe,MAAM,SAAS,SAAS,SAAS,QAAQ;AAClF,UACI,KAAQ,IAAI,OAAO,OAAO,oBAAoB,GAC9C,QAAQ,OAAO,MAAM,EAAE;AAC3B,WAAQ,SAAS,MAAM,CAAC,KAAMA;AAAA,EAClC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,OAAO,UAAU,MAAM;AACnB,UACI,SAAc,mBAAmB,IAAI,IAAI,KACzC,cAAc,SAAS,OAAO,MAAM,GAAG;AAC3C,aAAS,IAAI,GAAG,IAAI,YAAY,QAAQ,KAAK;AACzC,UAAI,IAAI,YAAY,CAAC;AACrB,aAAO,EAAE,OAAO,CAAC,MAAM,KAAK;AACxB,YAAI,EAAE,UAAU,GAAG,EAAE,MAAM;AAAA,MAC/B;AACA,UAAI,EAAE,QAAQ,MAAM,MAAM,GAAG;AACzB,eAAO,mBAAmB,EAAE,UAAU,OAAO,QAAQ,EAAE,MAAM,CAAC;AAAA,MAClE;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,OAAO,SAAS,UAAU,KAAK;AAC3B,UAAM,IAAI,SAAS,cAAc,GAAG;AACpC,MAAE,WAAW;AACb,MAAE,OAAO,OAAO;AAChB,MAAE,MAAM,UAAU;AAClB,aAAS,KAAK,YAAY,CAAC;AAC3B,MAAE,MAAM;AACR,aAAS,KAAK,YAAY,CAAC;AAAA,EAC/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,OAAO,aAAa,MAAM,UAAU;AAChC,UAAM,MAAM,WAAW,IAAI,gBAAgB,IAAI;AAC/C,SAAK,SAAS,UAAU,GAAG;AAC3B,eAAW,IAAI,gBAAgB,GAAG;AAAA,EACtC;AAAA,EACA,WAAW,cAAc;AAhV7B;AAmVQ,UAAM,SAAS,IAAI,IAAI,WAAW,SAAS,IAAI,EAAE;AAEjD,YAAO,YAAO,gBAAP,gCAAqB,OAAO,QAAQ;AAAA,EAC/C;AAAA,EACA,OAAO,gBAAgB,MAAM;AACzB,QAAI,UAAU;AACd,UAAM,WAAW,SAAS,cAAc,UAAU;AAClD,aAAS,QAAQ;AACjB,aAAS,MAAM,SAAS,SAAS,MAAM,QAAQ;AAC/C,aAAS,KAAK,YAAY,QAAQ;AAClC,aAAS,OAAO;AAChB,QAAI;AACA,eAAS,YAAY,MAAM;AAAA,IAC/B,SACO,GAAP;AACI,gBAAU;AAAA,IACd;AACA,aAAS,OAAO;AAChB,WAAO;AAAA,EACX;AAAA,EACA,OAAO,gBAAgB,eAAe;AAClC,oBAAgB,MAAM,QAAQ,aAAa,IAAI,gBAAgB,CAAC,aAAa;AAC7E,WAAO,QAAQ,wBAAwB,KAAK,WAAW,SAAS,IAAI,MAAK,+CAAe,KAAK,SAAO,KAAK,YAAY,GAAG,KAAK,MAAK;AAAA,EACtI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,WAAW,QAAQ;AACf,UAAM,EAAE,SAAS,UAAAC,UAAS,IAAK;AAC/B,QAAI,QAAQ,OAAO,MAAM;AACrB,cAAQ,MAAM,QAAQA,UAAS,cAAc,4CAA4C,CAAC;AAAA,IAC9F;AACA,WAAO,QAAQ;AAAA,EACnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,aAAa,iBAAiB;AAC1B,QAAI,CAAC,WAAW,QAAQ,WAAW;AAC/B,iBAAW,QAAQ,YAAY;AAAA;AAAA,QAE3B,iBAAkB;AAAA,QAClB,MAAM,UAAU,MAAM,aAAa;AAC/B,cAAI,eAAe,KAAK,iBAAiB;AACrC,gBAAI;AACA,oBAAM,UAAU,UAAU,UAAU,IAAI;AAAA,YAC5C,SACO,GAAP;AACI,mBAAK,kBAAkB;AAAA,YAC3B;AAAA,UACJ;AAEA,eAAK,WAAW;AAAA,QACpB;AAAA,QACA,MAAM,SAAS,aAAa;AACxB,cAAI,eAAe,KAAK,iBAAiB;AACrC,gBAAI;AACA,qBAAO,MAAM,UAAU,UAAU,SAAS;AAAA,YAC9C,SACO,GAAP;AACI,mBAAK,kBAAkB;AAAA,YAC3B;AAAA,UACJ;AACA,iBAAO,KAAK;AAAA,QAChB;AAAA,MACJ;AAAA,IACJ;AACA,WAAO,WAAW,QAAQ;AAAA,EAC9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,aAAa,iBAAiB,MAAM,cAAc,MAAM;AACpD,UAAM,YAAY,MAAM,KAAK,eAAe;AAC5C,WAAO,MAAM,UAAU,UAAU,MAAM,WAAW;AAAA,EACtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,aAAa,kBAAkB,cAAc,MAAM;AAC/C,UAAM,YAAY,MAAM,KAAK,eAAe;AAC5C,WAAO,MAAM,UAAU,SAAS,WAAW;AAAA,EAC/C;AAAA;AAEJ;AA/aI,cADiB,eACT,yBAAwB,QAAQ,WAAW,gBAAgB,WAAW,cAAc;AAAA;AAAA;AAG5F,cAJiB,eAIV,mCAAkC,OAAO,iBAAiB;AACjE,cALiB,eAKV,2BAA0B,WAAW,gBAAgB,WAAW;AA4a3E,IAAI,cAAc,cAAc;AAC5B,gBAAc,WAAW;AAC7B;AACA,cAAc,SAAS;;;ACpbvB,IAAI;AAAJ,IAAmB;AAAnB,IAAqC;AAArC,IAAmD;AACnD,IACI,iBAAiB;AADrB,IAEI,SAAiB;AAFrB,IAGI,iBAAiB;AAHrB,IAII,SAAiB;AAJrB,IAKI,OAAiB;AALrB,IAMI,eAAiB;AANrB,IAOI,UAAiB;AAPrB,IAQI,cAAc,CAAC,GAAG,aAAa,iBAAiB,SAAS,YAAY,CAAC,KAAK,OAAO,aAAa,SAAS,SAAS,OAAO,CAAC,GAAG,EAAE,CAAC;AARnI,IASI,cAAc,CAAC,GAAG,aAAa,cAAc,QAAQ;AATzD,IAUI,wBAAwB,CAAC,KAAK,IAAI,OAAO;AACrC,SAAO,GAAG,MAAM,GAAG,YAAY;AACnC;AAZJ,IAaI,uBAAuB,CAAC,KAAK,IAAI,OAAO;AACpC,SAAO,GAAG,MAAM,GAAG,YAAY;AACnC;AAfJ,IAgBI,mBAAsB,OAAK;AACvB,MAAI,GAAG;AACH,WAAO,KAAK,CAAC,GAAG,CAAC,EAAE,IAAI,CAAC,OAAO,GAAG,WAAW,CAAC,EAAE,SAAS,EAAE,CAAC,EAAE,KAAK,EAAE;AAAA,EACzE;AACA,SAAO;AACX;AArBJ,IAsBI,iBAAiB,CAAC;AAtBtB,IAuBI,iBAAiB,CAAC;AAItB,IAAqB,gBAArB,MAAkC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQ9B,OAAO,WAAW,QAAQ;AACtB,WAAO,UAAW,OAAO,CAAC,EAAE,YAAY,IAAI,OAAO,OAAO,CAAC;AAAA,EAC/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,OAAO,aAAa,QAAQ;AACxB,WAAO,UAAW,OAAO,CAAC,EAAE,YAAY,IAAI,OAAO,OAAO,CAAC;AAAA,EAC/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,OAAO,UAAU,QAAQ;AAErB,UAAM,SAAS,eAAe,MAAM;AACpC,QAAI,QAAQ;AACR,aAAO;AAAA,IACX;AACA,WAAO,eAAe,MAAM,IAAI,OAAO,QAAQ,gBAAgB,qBAAqB;AAAA,EACxF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,OAAO,SAAS,QAAQ;AAEpB,UAAM,SAAS,eAAe,MAAM;AACpC,QAAI,QAAQ;AACR,aAAO;AAAA,IACX;AACA,WAAO,eAAe,MAAM,IAAI,KAAK,WAAW,OAAO,QAAQ,gBAAgB,oBAAoB,CAAC;AAAA,EACxG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,OAAO,SAAS,UAAU;AACtB,WAAO,OAAO,QAAQ,EAAE,QAAQ,MAAM,gBAAgB;AAAA,EAC1D;AAAA,EACA,OAAO,eAAe,IAAI,eAAe,IAAI;AACzC,QAAI,MAAM,MAAM;AACZ,aAAO;AAAA,IACX;AACA,WAAO,OAAO,EAAE,EAAE,QAAQ,SAAS,YAAY;AAAA,EACnD;AAAA;AAAA;AAAA,EAGA,OAAO,aAAa,QAAQ,OAAO;AAE/B,QAAI,MAAM,OAAO,QAAQ,gBAAgB,MAAM;AAC/C,QAAI,UAAU,QAAW;AACrB,YAAM,IAAI,OAAO,KAAK,KAAK;AAAA,IAC/B;AACA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,OAAO,WAAW,KAAK;AACnB,WAAO,OAAO,OAAO,GAAG,EAAE,QAAQ,cAAc,WAAW;AAAA,EAC/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA,OAAO,WAAW,MAAM,IAAI;AACxB,WAAO,OAAO,OAAO,GAAG,EAAE,QAAQ,cAAc,WAAW;AAAA,EAC/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,OAAO,aAAa,KAAK;AA/I7B;AAgJQ,YAAO,mBAAa,WAAW,GAAG,MAA3B,mBAA8B,QAAQ,QAAQ;AAAA,EACzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,OAAO,OAAO,MAAM;AAChB,WAAO,OAAO,SAAS,YAAY,OAAO,KAAK,QAAQ,EAAE;AAAA,EAC7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,OAAO,iBAAiB,UAAU;AAC9B,eAAW,YAAY;AAAA,MACnB,KAAM;AAAA,MACN,KAAM;AAAA,MACN,KAAM;AAAA,MACN,KAAM;AAAA,MACN,KAAM;AAAA,IACV;AACA,UAAM,QAAQ,OAAO,KAAK,QAAQ;AAElC,oBAAgB;AAEhB,uBAAmB,MAAM,OAAO,CAAC,MAAM,QAAQ;AAC3C,WAAK,SAAS,GAAG,CAAC,IAAI;AACtB,aAAO;AAAA,IACX,GAAG,CAAC,CAAC;AAGL,mBAAe,IAAI,OAAO,KAAK,MAAM,IAAI,OAAK,MAAM,SAAS,CAAC,IAAI,OAAO,IAAI,CAAC,EAAE,KAAK,EAAE,OAAO,GAAG;AAGjG,mBAAe,IAAI,OAAO,IAAI,OAAO,OAAO,QAAQ,EAAE,KAAK,GAAG,gBAAgB,IAAI;AAAA,EACtF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,OAAO,cAAc,QAAQ;AACzB,QAAI,SAAS;AACb,QAAI;AACA,eAAS,KAAK,MAAM,MAAM;AAAA,IAC9B,SACO,GAAP;AAAA,IACA;AACA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAcA,OAAO,kBAAkB,QAAQ,WAAW,MAAM,QAAQ,MAAM;AAC5D,QAAI,SAAS;AACb,QAAI;AACA,eAAS,KAAK,UAAU,QAAQ,UAAU,KAAK;AAAA,IACnD,SACO,GAAP;AAAA,IACA;AACA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA,OAAO,UAAU,OAAO,gBAAgB,KAAK;AACzC,WAAO,MAAM,KAAK,aAAa,EAAE,QAAQ,IAAI,OAAO,OAAO,gBAAgB,KAAK,GAAG,GAAG,aAAa;AAAA,EACvG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA0BA,OAAO,MAAM,KAAK,YAAY,cAAc;AACxC,QAAI,MAAM;AACV,QAAI,OAAO,QAAQ,UAAU;AACzB,YAAM,IAAI,KAAK;AACf,YAAM,MAAM,IAAI,MAAM,SAAS,IAAI,CAAC;AAAA,IACxC;AACA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAoBA,OAAO,IAAI,YAAY,QAAQ;AAC3B,UAAM,MAAM,CAAC;AACb,QAAI,IAAI,OAAO;AACf,QAAI,CAAC,IAAI,QAAQ,CAAC;AAClB,WAAO,MAAM,GAAG;AACZ,UAAI,CAAC,IAAI,QAAQ,CAAC,IAAI,cAAa,WAAW,OAAO,CAAC,CAAC;AAAA,IAC3D;AACA,WAAO,IAAI,KAAK,EAAE;AAAA,EACtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAiBA,OAAO,MAAM,YAAY,QAAQ;AAC7B,UAAM,MAAM,CAAC;AACb,QAAI,IAAI,OAAO;AACf,QAAI,CAAC,IAAI,QAAQ,CAAC;AAClB,WAAO,MAAM,GAAG;AACZ,UAAI,CAAC,IAAI,QAAQ,CAAC,IAAI,cAAa,aAAa,OAAO,CAAC,CAAC;AAAA,IAC7D;AACA,WAAO,IAAI,KAAK,EAAE;AAAA,EACtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAaA,OAAO,kBAAkB,OAAO,SAAS;AACrC,UAAM,OAAO,QAAQ,OAAO,KAAK;AACjC,QAAI,SAAS,aAAa,SAAS,YAAY,SAAS,YAAY,UAAU,MAAM;AAChF,aAAO,cAAa,kBAAkB,KAAK;AAAA,IAC/C;AACA,QAAI,UAAU,YAAY;AACtB,aAAO;AAAA,IACX;AACA,QAAI,SAAS,QAAQ;AACjB,aAAO,YAAY,MAAM,YAAY,MAAM,MAAM,SAAS,MAAM,MAAM,QAAQ,MAAM,MAAM,SAAS,MAAM,MAAM,WAAW,MAAM,MAAM,WAAW,MAAM,MAAM,gBAAgB;AAAA,IACjL;AACA,QAAI,SAAS,SAAS;AAClB,aAAO,IAAI,MAAM,IAAI,OAAK,cAAa,kBAAkB,GAAG,OAAO,CAAC;AAAA,IACxE;AACA,QAAI,SAAS,YAAY,SAAS,YAAY;AAC1C,aAAO,KAAK,mBAAmB,OAAO,OAAO;AAAA,IACjD;AACA,QAAI,SAAS,YAAY;AACrB,UAAI,WAAW,MAAM,SAAS;AAE9B,UAAI,SAAS,MAAM,iBAAiB,GAAG;AACnC,mBAAW,SAAS,QAAQ,mBAAmB,iBAAiB;AAAA,MACpE,WAGS,CAAC,SAAS,WAAW,QAAQ,KAAK,SAAS,MAAM,WAAW,GAAG;AACpE,mBAAW,SAAS,QAAQ,aAAa,WAAW;AAAA,MACxD;AACA,aAAO;AAAA,IACX;AACA,QAAI,SAAS,SAAS;AAClB,UAAI,MAAM,mBAAmB;AACzB,eAAO,MAAM,kBAAkB,OAAO;AAAA,MAC1C;AACA,aAAO,OAAO,UAAU,eAAe,KAAK,OAAO,OAAO,IAAI,MAAM,QAAQ,MAAM;AAAA,IACtF;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA,OAAO,mBAAmB,KAAK,UAAU,CAAC,GAAG;AA/XjD;AAgYQ,UACI,SAAa,aAAQ,UAAR,YAAiB,GAC9B,aAAa;AAEjB,WAAO,QACH,OAAO,KAAK,GAAG,EAAE;AAAA,MAAI;AAAA;AAAA,QAEjB,IAAI,QAAQ,QAAQ,KAAK,UAAU,KAAK,IAAI,MAAM,OAAO,IAAI,IAAI,SAAS,OAAO,KAAK,cAAa,kBAAkB,IAAI,GAAG,GAAG,EAAE,GAAG,SAAS,OAAQ,QAAQ,EAAE,CAAC;AAAA;AAAA,IACpK,EAAE,KAAK,KAAK;AAAA,IAEZ,OAAO,IAAI,OAAQ,QAAS,UAAU,IAAI;AAAA,EAClD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAaA,OAAO,wBAAwB,MAAM,OAAO;AACxC,WAAO,IAAI,SAAS,OAAO,KAAK,EAAE,QAAQ,UAAU,MAAM;AAAA,EAC9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,OAAO,eAAe;AApa1B;AAqaQ,QAAI,cAAc,oBAAoB;AAClC,aAAO,WAAW,OAAO,WAAW;AAAA,IACxC;AAEA,SAAI,gBAAW,WAAX,mBAAmB,iBAAiB;AAEpC,cAAQ,CAAC,GAAG,IAAI,OAAO,OAAO,OAAO,OAAO;AAAA,QAAQ;AAAA,QAAU,QACzD,IAAI,WAAW,OAAO,gBAAgB,IAAI,WAAW,CAAC,CAAC,EAAE,CAAC,IAAI,MAAM,IAAI,GAAG,SAAS,EAAE;AAAA,MAC3F;AAAA,IACJ;AAGA,WAAO,GAAG,KAAK,IAAI,KAAK,EAAE,cAAa;AAAA,EAC3C;AAAA;AAEJ;AAlZA,IAAqB,eAArB;AAAA;AAAA;AA2XI,cA3XiB,cA2XV,qBAAoB;AAwB/B,aAAa,iBAAiB;AAC9B,aAAa,SAAS;;;AChbtB,IACI,EAAE,gBAAgB,SAAS,IAAI,OAAO;AAD1C,IAEI,EAAE,SAAS,IAAI;AAFnB,IAGI,UAAe;AAHnB,IAII,WAAe;AAJnB,IAKI,eAAe,CAAC;AALpB,IAMI,YAAe,CAAC;AANpB,IAOI,cAAe,OAAO,OAAO,CAAC,CAAC;AAuBnC,IAAqB,UAArB,MAA6B;AAAA,EACzB,OAAO,OAAO,SAAS,SAAS;AAC5B,aAAS,QAAQ,KAAK,IAAI,GAAG,IAAI,QAAQ,QAAQ,KAAK;AAClD,eAAS,QAAQ,CAAC;AAClB,UAAI,QAAQ;AACR,aAAK,OAAO,QAAQ;AAChB,eAAK,GAAG,IAAI,OAAO,GAAG;AAAA,QAC1B;AAAA,MACJ;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA,EACA,OAAO,SAAS,SAAS,SAAS;AAC9B,aAAS,QAAQ,KAAK,IAAI,GAAG,IAAI,QAAQ,QAAQ,KAAK;AAClD,eAAS,QAAQ,CAAC;AAClB,UAAI,QAAQ;AACR,aAAK,OAAO,QAAQ;AAChB,cAAI,EAAE,OAAO,SAAS,KAAK,GAAG,MAAM,QAAW;AAC3C,iBAAK,GAAG,IAAI,OAAO,GAAG;AAAA,UAC1B;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA,EACA,OAAO,MAAM,MAAM,QAAQ,SAAS;AAChC,cAAU,WAAW;AACrB,WAAO,QAAQ,CAAC;AAChB,UAAM,EAAE,QAAQ,QAAQ,OAAO,QAAQ,QAAQ,MAAM,IAAI;AACzD,QAAI,MAAM,QAAQ,MAAM,GAAG;AACvB,UAAI,OAAO,SAAS,GAAG;AACnB,eAAO,QAAQ,OAAK;AAChB,iBAAO,QAAQ,MAAM,MAAM,GAAG,OAAO;AAAA,QACzC,CAAC;AACD,eAAO;AAAA,MACX;AACA,eAAS,OAAO,CAAC;AAAA,IACrB;AACA,QAAI,QAAQ;AACR,UAAI,WAAW,KAAK;AACpB,WAAK,OAAO,QAAQ;AAChB,gBAAQ,OAAO,GAAG;AAClB,YAAI,SAAS,QAAQ,SAAS,KAAK,GAAG;AAClC,sBAAY,KAAK,GAAG;AACpB,kBAAQ,MAAM;AACd,cAAI,aAAa,QAAQ,SAAS,SAAS,GAAG;AAC1C,gBAAI,SAAS,SAAS,GAAG;AACrB,mBAAK,GAAG,IAAI,YAAY,MAAM,WAAW,OAAO;AAAA,YACpD;AACA,oBAAQ,MAAM,WAAW,OAAO,OAAO;AAAA,UAC3C,OACK;AAGD,oBAAQ,SAAS,KAAK,IAAI,QAAQ,MAAM,OAAO,OAAO;AAAA,UAC1D;AAAA,QACJ;AACA,aAAK,GAAG,IAAI;AAAA,MAChB;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA,EACA,OAAO,MAAM,OAAO,SAAS;AACzB,QAAI,SAAS,OACT;AACJ,QAAI,SAAS,OAAO,UAAU,UAAU;AACpC,YAAM,UAAU,WAAW,OAAO,YAAY,YAAY;AAC1D,UAAI,SAAS;AAET,kBAAU;AAAA,MACd;AACA,UAAI,QAAQ,SAAS,KAAK,GAAG;AAGzB,YAAI,MAAM,WAAW;AACjB,mBAAS;AAAA,QACb,OACK;AACD,mBAAS,CAAC;AACV,eAAK,OAAO,OAAO;AACf,mBAAO,GAAG,IAAI,QAAQ,MAAM,MAAM,GAAG,CAAC;AAAA,UAC1C;AAAA,QACJ;AAAA,MACJ,WACS,MAAM,QAAQ,KAAK,GAAG;AAC3B,iBAAS,CAAC;AAIV,aAAK,MAAM,MAAM,QAAQ,QAAQ,KAAgB;AAC7C,iBAAO,GAAG,IAAI,QAAQ,MAAM,MAAM,GAAG,CAAC;AAAA,QAC1C;AAAA,MACJ,WACS,QAAQ,OAAO,KAAK,GAAG;AAC5B,iBAAS,IAAI,KAAK,MAAM,QAAQ,CAAC;AAAA,MACrC,WACS,SAAS;AAEd,iBAAS,QAAQ,KAAK;AAAA,MAC1B;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA,EACA,OAAO,iBAAiB,QAAQ;AAC5B,UACI,OAAO,aAAa,MAAM,MAAM,GAChC,SAAS,QAAQ,CAAC;AACtB,QAAI,MAAM;AACN,iBAAW,OAAO,MAAM;AAGpB,YAAI,KAAK;AACL,iBAAO,GAAG,IAAI;AAAA,QAClB;AAAA,MACJ;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,OAAO,QAAQ,QAAQ,MAAM;AACzB,WAAO,KAAK,MAAM,GAAG,EAAE,OAAO,CAAC,QAAQ,QAAQ;AAC3C,cAAQ,UAAU,aAAa,GAAG;AAAA,IACtC,GAAG,MAAM;AAAA,EACb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,OAAO,eAAe,QAAQ,MAAMC,eAAc;AAC9C,UACI,OAAS,MAAM,QAAQ,IAAI,IAAI,OAAO,OAAO,SAAS,WAAW,KAAK,MAAM,GAAG,IAAI,CAAC,IAAI,GACxF,SAAS,KAAK,SAAS;AAC3B,WAAO,KAAK,OAAO,CAAC,QAAQ,KAAK,UAAU;AACvC,UAAIA,iBAAgB,EAAE,OAAO,SAAS;AAElC,eAAO,GAAG,IAAI,UAAU,SAASA,gBAAe,CAAC;AAAA,MACrD;AACA,cAAQ,UAAU,aAAa,GAAG;AAAA,IACtC,GAAG,MAAM;AAAA,EACb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,OAAO,QAAQ,QAAQ,MAAM;AACzB,WAAO,KAAK,MAAM,GAAG,EAAE,MAAM,SAAO;AAChC,UAAI,OAAO,QAAQ;AACf,iBAAS,OAAO,GAAG;AACnB,eAAO;AAAA,MACX;AACA,aAAO;AAAA,IACX,CAAC;AAAA,EACL;AAAA,EACA,OAAO,cAAc,QAAQ;AACzB,UAAM,OAAO,CAAC;AACd,eAAW,OAAO,QAAQ;AACtB,UAAI,OAAO,GAAG,GAAG;AACb,aAAK,KAAK,GAAG;AAAA,MACjB;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA,EACA,OAAO,gBAAgB,QAAQ;AAC3B,UAAM,SAAS,CAAC;AAChB,eAAW,OAAO,QAAQ;AACtB,UAAI,OAAO,GAAG,GAAG;AACb,eAAO,KAAK,OAAO,GAAG,CAAC;AAAA,MAC3B;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA,EACA,OAAO,QAAQ,QAAQ;AA3N3B;AA4NQ,QAAI,OAAO,WAAW,gBAAc,YAAO,cAAP,mBAAkB,iBAAgB,QAAQ;AAC1E,aAAO;AAAA,IACX;AACA,WAAO;AAAA,EACX;AAAA,EACA,OAAO,OAAO,QAAQ;AAElB,WAAO,QAAQ,iCAAQ,UAAU,KAAK,QAAQ,OAAO,MAAM,MAAM;AAAA,EACrE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAaA,OAAO,UAAU,QAAQ;AACrB,QAAI,WAAW,QAAQ,SAAS;AAC5B,aAAO,QAAQ,QAAQ,MAAM,MAAM,UAAU,QAAO,iCAAQ,UAAS;AAAA,IACzE;AACA,UAAM,IAAI,MAAM,2CAA2C;AAAA,EAC/D;AAAA,EACA,OAAO,QAAQ,QAAQ;AACnB,QAAI,UAAU,OAAO,WAAW,UAAU;AAEtC,iBAAW,KAAK,QAAQ;AACpB,eAAO;AAAA,MACX;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA,EACA,OAAO,SAAS,OAAO;AACnB,UAAM,IAAI,+BAAO;AACjB,WAAO;AAAA,MAAQ;AAAA;AAAA,QAIP,MAAM;AAAA;AAAA;AAAA;AAAA,QAKL,EAAE,kBAAkB,EAAE,aAAa,CAAC,OAAO,eAAe,EAAE,SAAS;AAAA,UAIvE,SAAS,OAAO,UAAU;AAAA,IACjC;AAAA,EACJ;AAAA,EACA,OAAO,eAAe,QAAQ;AAC1B,WAAO,SAAS,OAAO,WAAW,YAAY,CAAC,QAAQ,SAAS,MAAM,IAAI;AAAA,EAC9E;AAAA,EACA,OAAO,MAAM,SAAS,SAAS;AAC3B,WAAO,QAAQ,MAAM,MAAM,OAAO;AAAA,EACtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAkCA,OAAO,WAAW,MAAM,KAAK,SAAS;AAClC,cAAU,WAAW;AACrB,QAAI,QAAQ,OAAO,OAAO,UAAU,KAAK,SAAS;AAClD,UAAM,EAAE,QAAQ,QAAQ,MAAM,IAAI;AAClC,WAAO,QAAQ,CAAC;AAChB,QAAI,MAAM,QAAQ,GAAG,GAAG;AACpB,UAAI,QAAQ,OAAK;AACb,eAAO,QAAQ,WAAW,MAAM,GAAG,OAAO;AAAA,MAC9C,CAAC;AAAA,IACL,WACS,KAAK;AAIV,WAAK,OAAO,KAAK;AACb,iBAAS,IAAI,GAAG;AAChB,iBAAS;AAcT,YAAI,IAAI,SAAS,GAAG,GAAG;AACnB,WAAC,KAAK,MAAM,IAAI,IAAI,MAAM,QAAQ;AAClC,kBAAQ;AAAA,QACZ,WACS,IAAI,SAAS,GAAG,GAAG;AACxB,WAAC,QAAQ,GAAG,IAAI,IAAI,MAAM,OAAO;AACjC,kBAAQ;AAAA,QACZ;AACA,YAAI,OAAO,MAAM;AAGb,cAAI,UAAU,KAAK,GAAG,KAAK,OAAO;AAC9B,oBAAQ,MAAM;AACd,qBAAS,MAAM,KAAK,GAAG,GAAG,QAAQ,OAAO;AAAA,UAC7C;AACA,eAAK,GAAG,IAAI;AAAA,QAChB,WACS,CAAC,QAAQ;AACd,eAAK,GAAG,IAAI;AACZ,+CAAU,IAAI,KAAK,SAAS;AAAA,QAChC,OACK;AAID,cAAI,CAAC,UAAU;AACX,uBAAW,oBAAI,IAAI;AACnB,oBAAQ;AACR,uBAAW,KAAK,MAAM;AAClB,uBAAS,IAAI,GAAG,OAAO;AAAA,YAC3B;AAAA,UACJ;AACA,kBAAQ,SAAS,IAAI,MAAM;AAC3B,eAAK,GAAG,IAAI;AACZ,cAAI,SAAS,QAAQ,OAAO;AACxB,oBAAQ,SAAS;AAAA,UACrB,OACK;AACD,sBAAU,WAAW,CAAC;AACtB,qBAAS,SAAS,KAAK;AAGvB,uBAAW,QAAQ,UAAU;AACzB,oBAAM,CAAC,GAAG,CAAC,IAAI;AACf,kBAAI,SAAS,GAAG;AAyBZ,4BAAY,QAAQ,SAAS,OAAO,IAAI,CAAC,IAAI;AAC7C,yBAAS,IAAI,GAAG,IAAI,CAAC;AAAA,cACzB;AAAA,YACJ;AAGA,gBAAI,SAAS;AACT,qBAAO,QAAQ,QAAQ;AACnB,sBACI,IAAI,QAAQ,IAAI,GAChB,IAAI,KAAK,CAAC;AACd,uBAAO,KAAK,CAAC;AACb,qBAAK,CAAC,IAAI;AAAA,cACd;AAAA,YACJ;AAAA,UACJ;AACA,mBAAS,IAAI,KAAK,KAAK;AAAA,QAC3B;AAAA,MACJ;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,OAAO,QAAQ,QAAQ,MAAM,OAAO;AAChC,SAAK,MAAM,GAAG,EAAE,OAAO,CAAC,QAAQ,KAAK,OAAO,UAAU;AAClD,YAAM,SAAS,UAAU,MAAM,SAAS;AACxC,UAAI,QAAQ;AACR,eAAO,OAAO,GAAG,IAAI;AAAA,MACzB,WACS,EAAE,OAAO,GAAG,aAAa,SAAS;AACvC,eAAO,GAAG,IAAI,CAAC;AAAA,MACnB;AACA,aAAO,OAAO,GAAG;AAAA,IACrB,GAAG,MAAM;AACT,WAAO;AAAA,EACX;AAAA,EACA,OAAO,OAAO,OAAO;AACjB,QAAI,UAAU;AACd,QAAI,UAAU,MAAM;AAChB,aAAO;AAAA,IACX,WAES,UAAU,OAAO;AACtB,aAAO;AAAA,IACX,OACK;AACD,aAAO,OAAO;AACd,UAAI,SAAS,UAAU;AACnB,YAAI,MAAM,QAAQ;AACd,iBAAO;AAAA,QACX,WACS,MAAM,QAAQ,KAAK,GAAG;AAC3B,iBAAO;AAAA,QACX,WACS,EAAE,OAAO,UAAU,WAAW,SAAS,KAAK,KAAK,CAAC,IAAI;AAC3D,oBAAU,QAAQ,IAAI,OAAO,SAAS,MAAM,GAAG,EAAE,EAAE,YAAY;AAAA,QACnE;AAAA,MACJ,WACS,SAAS,cAAc,MAAM,QAAQ;AAC1C,eAAO;AAAA,MACX;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AACJ;AACA,OAAO,eAAe,SAAS,UAAU;AAAA;AAAA,EAErC,OAAQ,OAAO,WAAW,CAAC,QAAQ,aAAa,eAAe,KAAK,QAAQ,QAAQ;AACxF,CAAC;AACD,QAAQ,SAAS;;;ACvdjB,IAAqB,gBAArB,MAAmC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAO/B,OAAO,WAAW,SAAS,SAAS;AAChC,cAAU,QAAQ,YAAY;AAC9B,OAAG,OAAO,IAAI;AAAA,MACV;AAAA,MACA,YAAY,cAAc;AACtB,eAAO,cAAc,uBAAuB,cAAc,SAAS,GAAG;AAAA,MAC1E;AAAA,MACA,YAAY,cAAc;AACtB,eAAO,cAAc,uBAAuB,cAAc,SAAS,GAAG;AAAA,MAC1E;AAAA,IACJ;AACA,QAAI,YAAY;AAGhB,QAAI,OAAO,gBAAgB,aAAa;AAEpC,kBAAY;AAAA,IAChB;AAEA,UAAM,YAAY,GAAG,aAAa,UAAU,QAAQ,QAAQ,OAAO,GAAG;AACtE,QAAI,cAAc,gBAAgB,CAAC,WAAW,QAAQ,wBAAwB;AAC1E,UAAI,WAAW,QAAQ,SAAS,MAAM,MAAM;AACxC,YAAI,KAAK,WAAW;AAChB,qBAAW,mBAAmB;AAAA,QAClC,OACK;AACD,cAAI,eAAe,aAAa;AAChC,cAAI,iBAAiB,QAAQ;AACzB,2BAAe;AAAA,UACnB;AACA,cAAI,cAAe,aAAa,WAAW,YAAY;AACvD,cAAI,iBAAiB,gBAAgB;AACjC,0BAAc;AAAA,UAClB;AACA,gBAAM,IAAI;AAAA,YACN,eAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oDAKsC,gCAAgC;AAAA;AAAA;AAAA,mCAEjD,2BAA2B;AAAA;AAAA;AAAA,UACnE;AAAA,QACJ;AAAA,MACJ,OACK;AACD,mBAAW,QAAQ,SAAS,IAAI;AAAA,MACpC;AAAA,IACJ;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,OAAO,WAAW,SAAS;AACvB,cAAU,QAAQ,YAAY;AAC9B,QAAI,CAAC,GAAG,OAAO,GAAG;AACd,YAAM,IAAI,MAAM,qIAAqI;AAAA,IACzJ;AACA,WAAO,GAAG,OAAO,EAAE;AAAA,EACvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA,OAAO,uBAAuB,UAAU,UAAU,aAAa,KAAK;AAChE,eAAW,YAAY;AACvB,eAAW,YAAY;AACvB,UACI,cAAe,SAAS,MAAM,MAAM,GACpC,cAAe,SAAS,MAAM,MAAM,GACpC,UAAe,WAAW,SAAS,GAAG,GACtC,eAAe,CAAC,KAAK,cAAc;AAC/B,YACI,SAAS,CAAC,MAAM,QAAQ,OAAO,GAC/B,SAAS,IAAI,IAAI,OAAK;AAClB,YAAI,OAAO,SAAS,CAAC,GAAG;AACpB,iBAAO,CAAC,OAAO,QAAQ,CAAC,IAAI;AAAA,QAChC;AACA,cAAM,MAAM,OAAO,SAAS,CAAC;AAC7B,eAAO,OAAO,MAAM,GAAG,IAAI,CAAC,OAAO,SAAS;AAAA,MAChD,CAAC;AACL,aAAO,OAAO,SAAS,WAAW;AAC9B,eAAO,KAAK,EAAE;AAAA,MAClB;AACA,aAAO;AAAA,IACX,GACA,aAAe,MAAM;AACjB,YACI,YAAY,KAAK,IAAI,YAAY,QAAQ,YAAY,MAAM,GAC3D,OAAY,aAAa,aAAa,SAAS,GAC/C,OAAY,aAAa,aAAa,SAAS;AACnD,eAAS,IAAI,GAAG,IAAI,WAAW,KAAK;AAChC,YAAI,KAAK,CAAC,MAAM,KAAK,CAAC,GAAG;AACrB,iBAAO,UAAU,KAAK,CAAC,IAAI,KAAK,CAAC,IAAI,KAAK,CAAC,IAAI,KAAK,CAAC;AAAA,QACzD;AAAA,MACJ;AACA,aAAO;AAAA,IACX;AACJ,YAAQ,YAAY;AAAA,MAChB,KAAK;AACD,eAAO,aAAa;AAAA,MACxB,KAAK;AAAA,MACL,KAAK;AACD,eAAQ,aAAa,YAAa,WAAW;AAAA,MACjD,KAAK;AAAA,MACL,KAAK;AACD,eAAQ,aAAa,YAAa,WAAW;AAAA,IACrD;AACA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,OAAO,aAAa,SAAS,SAAS,UAAU;AAC5C,WAAO,cAAc,uBAAuB,GAAG,WAAW,OAAO,GAAG,SAAS,QAAQ;AAAA,EACzF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,OAAO,UAAU,SAAS,oBAAoB,SAAS;AACnD,UAAM,WAAW,GAAG,aAAa,SAAS,oBAAoB,GAAG;AACjE,QAAI,UAAU;AAEV,cAAQ,KAAK,6EAA6E,uBAAuB,SAAS;AAAA,IAC9H,OACK;AACD,YAAM,IAAI,MAAM,uBAAuB,SAAS;AAAA,IACpD;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,WAAW,YAAY;AAjL3B;AAkLQ,UAAM,YAAY,SAAQ,gBAAW,YAAX,mBAAoB,SAAS;AACvD,QAAI;AACA,aAAO,aAAa,SAAQ,sBAAW,WAAX,mBAAmB,YAAnB,mBAA4B,SAAS;AAAA,IACrE,SACO,GAAP;AAEI,aAAO;AAAA,IACX;AAAA,EACJ;AAAA,EACA,WAAW,UAAU;AACjB,QAAI,SAAS;AACb,WAAO;AAAA,EACX;AACJ;AACA,IAAM,KAAK;AACX,IAAI,cAAc,cAAc;AAC5B,MAAI,GAAG,WAAW;AACd,kBAAc,qBAAqB;AAAA,EACvC;AACA,aAAW,UAAU,OAAO,OAAO,WAAW,WAAW,CAAC,GAAG;AAAA,IACzD,YAAe,GAAG,WAAW,KAAK,EAAE;AAAA,IACpC,cAAe,GAAG,aAAa,KAAK,EAAE;AAAA,IACtC,WAAe,GAAG,UAAU,KAAK,EAAE;AAAA,IACnC,SAAe;AAAA,EACnB,CAAC;AACL;AACA,cAAc,SAAS;;;ACtMvB,IACI,EAAE,gBAAgB,yBAAyB,IAAI;AADnD,IAEI,EAAE,gBAAAC,iBAAgB,UAAAC,UAAS,IAAI,OAAO;AAF1C,IAGI,2BAA+B,OAAO,oBAAoB;AAH9D,IAII,oBAA+B,OAAO,aAAa;AAJvD,IAKI,mBAA+B,OAAO,kBAAkB;AAL5D,IAMI,YAA+BA,UAAS,KAAK,oBAAI,KAAK,CAAC;AAN3D,IAOI,aAA+B;AAPnC,IAQI,iBAA+B,CAAC,QAAQ,QAAQ;AAC5C,SAAO,GAAG,IAAI;AACd,SAAO;AACX;AAuCJ,IAAqB,SAArB,MAA4B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQxB,OAAO,IAAI,MAAM,SAAS;AACtB,UACI,EAAE,MAAM,IAAI,MACZ,UAAU,MAAM,IAAI,MAAM,MAAM,IAAI,IAAI,IAAI,OAAO,IAAI;AAC3D,QAAI,MAAM,SACN;AACJ,QAAI,SAAS;AACT,YAAM,OAAO,aAAa,MAAM,OAAO;AACvC,UAAI,EAAE,MAAM,OAAO,MAAM,GAAG,IAAI;AAC5B,cAAM,QAAQ,OAAO,OAAO;AAC5B,YAAI,KAAK;AACL,gBAAM,GAAG,IAAI;AAAA,QACjB;AAAA,MACJ;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA,EACA,YAAY,MAAM;AACd,UACI,KAAK,MACL,MAAM,KAAK,CAAC,EAAE,YAAY,IAAI,KAAK,OAAO,CAAC;AAC/C,OAAG,OAAO;AACV,OAAG,OAAO;AACV,OAAG,QAAQ,MAAM;AACjB,OAAG,UAAU;AACb,OAAG,UAAU,WAAW;AACxB,OAAG,eAAe,iBAAiB;AACnC,OAAG,UAAU,WAAW;AAAA,EAC5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,IAAI,aAAa;AACb,QAAI,aAAa,KAAK;AACtB,QAAI,CAAC,cAAc,CAACD,gBAAe,KAAK,MAAM,aAAa,GAAG;AAE1D,WAAK,cAAc,aAAa,KAAK,eAAe;AAAA,IACxD;AACA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,IAAI,iBAAiB;AACjB,QAAI,aAAa,KAAK;AACtB,QAAI,CAAC,cAAc,CAACA,gBAAe,KAAK,MAAM,iBAAiB,GAAG;AAE9D,WAAK,kBAAkB,aAAa,KAAK,YAAY;AAAA,IACzD;AACA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,MAAM,QAAQ,QAAQ;AAClB,WAAO,WAAW;AAAA,EACtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,OAAO,SAAS;AACZ,UACI,MAAM,OAAO,OAAO,OAAO,OAAO,IAAI,GAAG,OAAO,GAChD,EAAE,OAAAE,QAAO,MAAM,IAAI,SACnB,EAAE,gBAAgB,IAAI;AAC1B,QAAI,OAAOA,WAAU,UAAU;AAC3B,UAAIA,OAAM,SAAS,IAAI,GAAG;AACtB,YAAI,QAAQ,OAAO,gBAAgB,gBAAgBA,OAAM,OAAO,GAAGA,OAAM,SAAS,CAAC,CAAC,CAAC;AAAA,MACzF,OACK;AACD,YAAI,QAAQ,gBAAgBA,MAAK;AAAA,MACrC;AAAA,IACJ;AACA,QAAI,OAAO,UAAU,UAAU;AAE3B,UAAI,QAAQ,OAAO,aAAa,KAAK;AAAA,IACzC;AACA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,OAAO,QAAQ;AACX,UAAM,WAAW,yBAAyB,QAAQ,KAAK,IAAI;AAC3D,QAAI,aAAa,KAAK;AACtB,QAAI,YAAY,SAAS,KAAK;AAC1B,mBAAa,OAAO,OAAO,CAAC,GAAG,UAAU;AACzC,iBAAW,MAAM,SAAS;AAAA,IAC9B;AACA,mBAAe,QAAQ,KAAK,MAAM,UAAU;AAAA,EAChD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,cAAc,QAAQ,OAAO;AACzB,UACI,EAAE,KAAK,IAAI,MACX,aAAa,OAAO,wBAAwB;AAChD,QAAI,YAAY;AAGhB,QAAI,CAAC,WAAW,IAAI;AAAA,KAAkB,OAAO,yBAAyB,QAAQ,IAAI,MAAM,EAAE,WAAW,OAAO;AACxG,iBAAW,IAAI,IAAI;AAAA,IACvB;AAGA,mBAAe,QAAQ,MAAM,KAAK,cAAc;AAChD,QAAI,KAAK,MAAM;AACX,mBAAa,OAAO,gBAAgB,MAAM,OAAO,gBAAgB,IAAI,oBAAI,IAAI;AAC7E,iBAAW,IAAI,MAAM,KAAK;AAAA,IAC9B;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,OAAO,gBAAgBC,KAAI;AACvB,WAAO,CAAC,QAAQ,WAAW;AACvB,UAAI,GACAD,SAAQ,UAAU,UAAU,OAAO,YAAY,IAAI,OAAO;AAC9D,UAAIA,UAAS,MAAM,QAAQ,MAAM,KAAK,MAAM,QAAQ,MAAM,GAAG;AACzD,YAAIC,KAAI;AACJ,iBAAOD,UAAS,MAAM,GAAG;AACrB,YAAAA,SAAQC,IAAG,OAAO,CAAC,GAAG,OAAO,CAAC,CAAC;AAAA,UACnC;AAAA,QACJ,OACK;AACD,iBAAOD,UAAS,MAAM,GAAG;AACrB,YAAAA,SAAQ,OAAO,CAAC,MAAM,OAAO,CAAC;AAAA,UAClC;AAAA,QACJ;AAAA,MACJ,OACK;AACD,QAAAA,SAAQC,MAAKA,IAAG,QAAQ,MAAM,IAAK,WAAW;AAAA,MAClD;AACA,aAAOD;AAAA,IACX;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,OAAO,aAAa,MAAM,SAAS;AAC/B,UAAM,OAAO,OAAO,KAAK,OAAO,EAAE,KAAK;AACvC,aAAS,KAAK,MAAM,OAAO,IAAI,KAAK,QAAQ,MAAM,KAAgB;AAC9D,cAAQ,QAAQ,MAAM,KAAK,CAAC,CAAC;AAC7B,UAAI,SAAS,QAAQ,UAAU,OAAO;AAClC,aAAK,OAAO,GAAG,CAAC;AAAA,MACpB,OACK;AACD,eAAO,OAAO;AACd,YAAI,SAAS,YAAY;AACrB,iBAAO;AAAA,QACX;AACA,YAAI,SAAS,UAAU;AACnB,eAAK,CAAC,IAAI,GAAG,QAAQ;AAAA,QACzB,WACS,SAAS,UAAU;AACxB,eAAK,CAAC,IAAI,GAAG,OAAO;AAAA,QACxB;AAAA,MAEJ;AAAA,IACJ;AACA,WAAO,KAAK,SAAS,GAAG,QAAQ,KAAK,KAAK,GAAG,MAAM;AAAA,EACvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,iBAAiB;AACb,UACI,SAAS,MACT,EAAE,MAAM,OAAAE,QAAO,SAAS,SAAS,KAAK,IAAI;AAC9C,QAAI,SAAS,UAAU,KAAK,UAAU,OAAO,OAAO;AAGhD,aAAO,KAAK;AAAA,IAChB;AACA,WAAO;AAAA,MACH,MAAM;AA7QlB;AA+QgB,mBAAK,mBAAL,mBAAqB,IAAI,MAAM;AAC/B,eAAO,KAAKA,MAAK;AAAA,MACrB;AAAA,MACA,IAAI,OAAO;AAlRvB;AAmRgB,cAAM,KAAK;AACX,YAAI,MAAM,GAAGA,MAAK,GACd,SAAS;AAEb,YAAI,OAAO,UAAU,UAAU;AAC3B,cAAI,gBAAgB;AACpB,cAAI,MAAM,WAAW,KAAK,GAAG;AACzB,6BAAgB,QAAG,UAAH,mBAAU,gBAAgB,MAAM,OAAO,CAAC;AAAA,UAC5D,WACS,MAAM,WAAW,OAAO,GAAG;AAChC,4BAAgB,GAAG,gBAAgB,MAAM,OAAO,CAAC,CAAC;AAAA,UACtD;AACA,cAAI,kBAAkB,UAAa,OAAO,kBAAkB,YAAY;AACpE,oBAAQ;AAAA,UACZ;AAAA,QACJ;AAIA,YAAI,GAAG,OAAO,GAAG;AACb,qBAAW,WAAW,GAAG,OAAO,EAAE,OAAO,GAAG,OAAO;AACnD,cAAI,CAAC,SAAS;AACV,oBAAQ;AACR,kBAAM,GAAGA,MAAK;AAAA,UAClB;AAAA,QACJ;AAEA,YAAI,CAAC,WAAW,EAAG,OAAO,UAAU,QAAS,QAAQ,QAAQ,OAAO,MAAM,KAAK,KAAK,IAAI;AACpF,aAAGA,MAAK,IAAI;AACZ,oBAAU;AAEV,mBAAG,aAAH,4BAAc,OAAO;AAAA,QACzB;AAEA,YAAI,WAAW,CAAC,GAAG,eAAe,CAAC,GAAG,eAAe,SAAS;AAC1D,aAAG,eAAe,EAAE,MAAM,OAAO,KAAK,OAAO,CAAC;AAAA,QAClD;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,cAAc;AACV,UAAM,SAAS;AACf,QAAI,WAAW,OAAO,MAAM;AACxB,UAAI,OAAO,MAAM;AACb,eAAO,OAAO,gBAAgB;AAAA,MAClC;AAGA,aAAO,OAAO,KAAK;AAAA,IACvB;AACA,WAAO,OAAO,iBAAiB;AAAA,EACnC;AAAA,EACA,mBAAmB;AACf,UACI,SAAS,MACT,EAAE,cAAc,KAAK,IAAI;AAC7B,WAAO;AAAA,MACH,cAAe;AAAA,MACf,MAAM;AACF,cAAM,KAAK;AACX,eAAO,cAAc,EAAE;AAEvB,WAAG,YAAY,IAAI;AACnB,WAAG,IAAI,IAAI,GAAG,iBAAiB,EAAE,IAAI;AACrC,WAAG,YAAY,IAAI;AAGnB,WAAG,WAAW,IAAI,IAAI;AAEtB,eAAO,GAAG,IAAI;AAAA,MAClB;AAAA,MACA,IAAI,OAAO;AACP,eAAO,cAAc,IAAI;AAGzB,aAAK,WAAW,IAAI,IAAI;AAExB,aAAK,IAAI,IAAI;AAAA,MACjB;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,kBAAkB;AACd,UACI,SAAS,MACT,EAAE,cAAc,KAAK,IAAI;AAC7B,WAAO;AAAA,MACH,cAAe;AAAA,MACf,MAAM;AACF,cACI,KAAQ,MACR,QAAQ,GAAG,gBAAgB,EAAE,IAAI,IAAI;AACzC,eAAO,cAAc,EAAE;AACvB,YAAI,CAAC,GAAG,cAAc;AAElB,aAAG,YAAY,IAAI;AACnB,aAAG,IAAI,IAAI;AACX,aAAG,YAAY,IAAI;AAAA,QACvB;AAEA,eAAO,GAAG,IAAI;AAAA,MAClB;AAAA,MACA,IAAI,OAAO;AACP,eAAO,cAAc,IAAI;AAEzB,aAAK,IAAI,IAAI;AAAA,MACjB;AAAA,IACJ;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,cAAc,UAAU;AACpB,UACI,EAAE,KAAK,IAAI,MACX,mBAAmB,SAAS,wBAAwB,EAAE,IAAI,GAC1D,aAAa,SAAS,gBAAgB;AAE1C,QAAI,kBAAkB;AAClB,qBAAe,UAAU,MAAM,gBAAgB;AAAA,IACnD,OAEK;AACD,aAAO,SAAS,IAAI;AAAA,IACxB;AACA,SAAI,yCAAY,OAAO,UAAS,CAAC,WAAW,MAAM;AAE9C,aAAO,SAAS,gBAAgB;AAAA,IACpC;AAAA,EACJ;AAAA,EACA,WAAW,KAAK,OAAO;AACnB,mBAAe,IAAI,WAAW,KAAK,OAAO;AAAA,MACtC,cAAe;AAAA,MACf,UAAe;AAAA;AAAA,MACf;AAAA,IACJ,CAAC;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAkBA,MAAM,UAAU,cAAc;AAC1B,QAAI,gBAAgB,YAAY,QAAQ,SAAS,QAAQ,GAAG;AAExD,UAAI,aAAa,QAAQ;AACrB,eAAO,aAAa,UAAU,QAAQ;AAAA,MAC1C;AACA,UAAI,QAAQ,SAAS,YAAY,GAAG;AAChC,mBAAW,QAAQ,MAAM,QAAQ,MAAM,YAAY,GAAG,QAAQ;AAAA,MAClE;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AACJ;AACA,IACI,EAAE,UAAU,IAAI;AADpB,IAEI,EAAE,MAAM,IAAI;AAChB,OAAO,UAAU;AAAA,EACb,aAAqB;AAAA,EACrB,oBAAqB;AAAA,EACrB,aAAqB;AACzB;AAgBA,OAAO,QAAQ,uBAAO,OAAO,IAAI;AAgBjC,OAAO,kBAAkB;AAAA,EACrB,OAAQ,OAAO,gBAAgB;AAAA,EAC/B,KAAK,QAAQ,QAAQ;AACjB,QAAI,WAAW,QAAQ;AACnB,aAAO;AAAA,IACX;AAEA,QAAI,UAAU,UAAUH,UAAS,KAAK,MAAM,MAAM,aAAaA,UAAS,KAAK,MAAM,MAAM,WAAW;AAEhG,aAAO,OAAO,QAAQ,MAAM,OAAO,QAAQ;AAAA,IAC/C;AACA,WAAO;AAAA,EACX;AAAA,EACA,QAAS,OAAO,QAAQ;AAC5B;AAuBA,OAAO,eAAe;AAAA,EAClB,SAAS,UAAU,UAAU;AACzB,QAAI,MAAM,WAAW,SAAS,MAAM,IAAI,CAAC;AACzC,QAAI,YAAY,MAAM;AAClB,UAAI,QAAQ,SAAS,QAAQ,GAAG;AAC5B,YAAI,aAAa,QAAW;AACxB,gBAAM;AAAA,QACV,OACK;AACD,cAAI,KAAK;AACT,eAAK,OAAO,UAAU;AAClB,oBAAQ,IAAI,QAAQ,GAAG;AACvB,gBAAI,SAAS,GAAG,GAAG;AACf,kBAAI,QAAQ,GAAG;AACX,oBAAI,KAAK,GAAG;AAAA,cAChB;AAAA,YACJ,WACS,QAAQ,IAAI;AACjB,kBAAI,OAAO,OAAO,CAAC;AAAA,YACvB;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ,WACS,MAAM,QAAQ,QAAQ,GAAG;AAC9B,iBAAS,QAAQ,OAAK,CAAC,IAAI,SAAS,CAAC,KAAK,IAAI,KAAK,CAAC,CAAC;AAAA,MACzD,WACS,CAAC,IAAI,SAAS,QAAQ,GAAG;AAC9B,YAAI,KAAK,QAAQ;AAAA,MACrB;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA,EACA,OAAQ,OAAO,QAAQ,UAAU;AAAA,EACjC,UAAU,UAAU,UAAU;AAE1B,QAAI,OAAO,aAAa,UAAU;AAC9B,UAAI,CAAC,SAAS,QAAQ;AAClB,eAAO;AAAA,MACX;AACA,iBAAW,SAAS,MAAM,UAAU;AAAA,IACxC;AACA,QAAI,MAAM,QAAQ,QAAQ,GAAG;AACzB,iBAAW,SAAS,OAAO,gBAAgB,CAAC,CAAC;AAAA,IACjD;AACA,WAAO,OAAO,MAAM,UAAU,QAAQ;AAAA,EAC1C;AAAA,EACA,QAAQ,UAAU,UAAU;AACxB,WAAQ,aAAa,OAAQ,YAAY,CAAC,IAAI,OAAO,MAAM,UAAU,QAAQ;AAAA,EACjF;AAAA,EACA,QAAQ,UAAU;AACd,WAAO;AAAA,EACX;AAAA,EACA,MAAM,UAAU,UAAU,SAAS,aAAa;AAC5C,QAAI,aAAa;AAIb,aAAO,QAAQ,WAAW,UAAU,UAAU;AAAA,QAC1C,OAAQ,CAACI,WAAUC,cAAa,UAAU,MAAMA,WAAUD,SAAQ;AAAA,MACtE,CAAC;AAAA,IACL;AACA,WAAO,UAAU,MAAM,UAAU,QAAQ;AAAA,EAC7C;AACJ;AACA,OAAO,OAAO,WAAW;AAAA,EACrB,aAAkB;AAAA,EAClB,iBAAkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA6DlB,MAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOP,SAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASV,QAAS;AACb,CAAC;AACD,OAAO,SAAS;;;ACtpBhB,IAAM,YAAN,MAAgB;AAAA,EACZ,YAAY,SAAS;AACjB,eAAW,OAAO,OAAO,MAAM,OAAO;AAAA,EAC1C;AAAA,EACA,aAAa,MAAM,SAAS,MAAM;AAZtC;AAaQ,QAAI,MAAM,KAAK,IAAI;AAEnB,QAAI,EAAE,QAAQ,OAAO;AAGjB,aAAM,UAAK,UAAL,mBAAY,aAAa,MAAM;AACrC,UAAI,OAAO,QAAQ;AACf,aAAK,IAAI,IAAI,MAAM,OAAO,OAAO,OAAO,IAAI;AAAA,MAChD;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AACJ;AACA,IAII,EAAE,eAAe,IAAU;AAJ/B,IAKI,EAAE,OAAO,IAAkB;AAL/B,IAMI,EAAE,gBAAAE,gBAAe,IAAU;AAN/B,IAOI,aAA2B,OAAO,eAAe;AAPrD,IAQI,iBAA2B,OAAO,UAAU;AARhD,IASI,uBAA2B,OAAO,gBAAgB;AATtD,IAUI,kBAA2B,OAAO,WAAW;AAVjD,IAWIC,qBAA2B,OAAO,QAAQ;AAX9C,IAYIC,4BAA2B,OAAO,QAAQ;AAZ9C,IAaI,oBAA2B,OAAO,QAAQ;AAb9C,IAcI,uBAA2B,EAAE,OAAQ,WAAW,QAAS,KAAK;AAdlE,IAeI,UAA2B,MAAM;AAAC;AAftC,IAgBI,UAA2B,OAAK,IAAI,UAAU,CAAC;AAhBnD,IAiBI,aAA2B;AAAA;AAAyB;AAjBxD,IAkBIC,eAA2B,OAAO,OAAO,CAAC,CAAC;AAlB/C,IAmBI,aAA2B,OAAO,OAAO,CAAC,CAAC;AAe/C,IAAqBC,QAArB,MAA0B;AAAA,EACtB,WAAW,SAAS;AAChB,WAAO;AAAA,EACX;AAAA,EACA,IAAI,SAAS;AACT,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAuCA,WAAW,aAAa;AACpyLA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAiCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAQA;AAAA,IACJ;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,eAAe,MAAM;AACjB,UACI,KAAK,MACL,IAAK,GAAG;AACZ,QAAI,GAAG,MAAM,UAAU,GAAG;AAItB,cAAQ,EAAE,KAAK;AAAA,IACnB;AAEA,OAAG,UAAU,GAAG,IAAI;AACpB,OAAG,eAAe;AAClB,OAAG,iBAAiB;AAAA,EACxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,OAAO,OAAO,SAAS;AACnB,cAAU,QAAQ,OAAO,OAAK,CAAC;AAC/B,WAAO,IAAI,KAAK,QAAQ,SAAS,IAAI,KAAK,aAAa,GAAG,OAAO,IAAI,QAAQ,CAAC,CAAC;AAAA,EACnF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA,aAAa,MAAM;AAEf,QAAI,KAAK,CAAC,MAAM,MAAM;AAClB,WAAK,UAAU,GAAG,IAAI;AAAA,IAC1B;AACA,SAAK,eAAe;AAAA,EACxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA,OAAO,WAAW,MAAM;AACpB,UAAM,WAAW,YAAU;AACvB,UAAI,iCAAQ,SAAS;AACjB,eAAO,QAAQ;AAAA,MACnB,WACS,MAAM,QAAQ,MAAM,GAAG;AAC5B,eAAO,QAAQ,QAAQ;AAAA,MAC3B;AAAA,IACJ;AACA,aAAS,IAAI;AAAA,EACjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,UAAU;AACN,UACI,KAAK,MACL,EAAE,GAAG,IAAI;AAEb,OAAG,eAAe;AAElB,OAAG,UAAU;AACb,OAAG,UAAU;AACb,WAAO,eAAe,IAAI,IAAI;AAE9B,eAAW,OAAO,IAAI;AAClB,UAAI,QAAQ,aAAa,QAAQ,gBAAgB;AAC7C,eAAO,GAAG,GAAG;AAAA,MACjB;AAAA,IACJ;AACA,WAAO,GAAG,oBAAoB;AAE9B,OAAG,cAAc;AACjB,OAAG,KAAK;AAAA,EACZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,uBAAuB,QAAQ;AAAA,EAAC;AAAA,EAChC,WAAW,SAAS;AAChB,WAAO,OAAO,MAAM,OAAO,KAAK,KAAK;AAAA,IAEjC,OAAO,MAAM,QAAQ,KAAK,KAAK,UAC/B,KAAK;AAAA,EACb;AAAA,EACA,IAAI,SAAS;AACT,WAAO,KAAK,YAAY;AAAA,EAC5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYA,eAAe,QAAQ;AAAA,EACvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAcA,gBAAgB,QAAQ;AAAA,EACxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,iBAAiB;AAAA,EACjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAeA,iBAAiB;AAAA,EACjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAqBA,SAASC,KAAI,YAAY,OAAO,YAAY;AACxC,UAAM,EAAE,SAAS,QAAQ,IAAI,KAAK,gBAAgBA,KAAI,eAAe,SAAS,OAAO,UAAU,KAAKF;AACpG,WAAO,mCAAS,MAAM,SAAS;AAAA,EACnC;AAAA,EACA,gBAAgB,cAAc;AAC1B,QAAI,UAAU;AACd,WAAO,SAAS;AACZ,UAAI,QAAQ,QAAQ,SAAS,YAAY,GAAG;AACxC,eAAO,QAAQ,QAAQ,SAAS,YAAY;AAAA,MAChD;AACA,gBAAU,QAAQ;AAAA,IACtB;AACA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAkBA,gBAAgB,SAAS,UAAU,MAAM,qBAAqB,MAAM;AAEhE,QAAI,mCAAS,WAAW;AACpB,UAAI,QAAQ,SAAS,GAAG,GAAG;AACvB,6BAAqB;AACrB,kBAAU,QAAQ,UAAU,GAAG,QAAQ,SAAS,CAAC;AAAA,MACrD;AACA,UAAI,QAAQ,WAAW,KAAK,GAAG;AAC3B,kBAAU,QAAQ,UAAU,CAAC;AAE7B,aAAK,UAAU,KAAK,OAAO,WAAW,CAAC,QAAQ,OAAO,GAAG,UAAU,QAAQ;AAAM;AACjF,YAAI,CAAC,SAAS;AACV;AAAA,QACJ;AAAA,MACJ,WACS,QAAQ,WAAW,OAAO,GAAG;AAClC,kBAAU,QAAQ,UAAU,CAAC;AAC7B,kBAAU;AAAA,MACd;AACA,UAAI,CAAC,WAAW,EAAE,mBAAmB,SAAS;AAC1C;AAAA,MACJ;AACA,gBAAU,QAAQ,OAAO;AAAA,IAC7B;AAEA,QAAI,OAAO,YAAY,YAAY;AAC/B,aAAO,EAAE,SAAS,QAAQ;AAAA,IAC9B;AACA,QAAI,oBAAoB;AACpB,YAAM,IAAI,MAAM,mBAAmB,cAAc,QAAQ,UAAU,kBAAkB;AAAA,IACzF;AAAA,EACJ;AAAA,EACA,aAAa,WAAW,YAAY,MAAM;AACtC,QAAI,WAAW;AACX,YAAM,EAAE,SAAS,QAAQ,IAAI,KAAK,gBAAgB,WAAW,SAAS;AACtE,UAAI,SAAS;AACT,eAAO,QAAQ,KAAK,OAAO;AAAA,MAC/B;AAAA,IACJ;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAaA,MAAME,KAAIC,QAAO,OAAOD,IAAG,QAAQA,KAAI;AAEnC,IAAAA,MAAK,KAAK,aAAaA,MAAKA,IAAG,KAAK,IAAI;AACxC,UAAM,UAAU,KAAK,aAAa,OAAO;AACzC,WAAO,QAAQ,OAAOC,WAAU,WAAW,eAAe,uBAAuB,EAAED,KAAIC,QAAO,IAAI;AAAA,EACtG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAsBA,YAAY;AACR,UACI,KAAK,MACL,EAAE,QAAQ,IAAI,GAAG;AACrB,QAAI,SAAS;AACT,eAAS,IAAI,GAAG,IAAI,QAAQ,QAAQ,EAAE,GAAG;AACrC,YAAI,GAAG,QAAQ,CAAC,EAAE,KAAK,KAAK,MAAM;AAC9B,aAAG,QAAQ,CAAC,EAAE,IAAI,IAAI;AAAA,QAC1B;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA,qBAAqB,YAAY;AA3pBrC;AA4pBQ,UAAM,KAAK;AACX,QAAI;AACJ,SAAK,OAAO,YAAY;AAGpB,UAAI,OAAO,OAAO,CAAC,GAAGL,kBAAiB,KAAK,CAAC,GAAGA,kBAAiB,EAAE,GAAG,IAAI;AACtE,uBAAG,GAAG,MAAN,mBAAS,YAAT;AACA,eAAO,GAAG,GAAG;AAAA,MACjB;AAAA,IACJ;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,UAAU,SAAS,CAAC,GAAG;AACnB,UACI,KAAsB,MACtB,OAAsB,GAAG,OACzB,EAAE,gBAAgB,IAAI,QACtB,UAAsB,KAAK,SAC3B,aAAsB,GAAG,wBAAwB;AACrD,QAAI,KAAK,KAAK;AACd,OAAG,gBAAgB;AAGnB,OAAG,gBAAgB;AAEnB,WAAO,OAAO,IAAI,GAAG,cAAc,CAAC;AAGpC,SAAK,OAAO,QAAQ;AAChB,cAAQ,OAAO,GAAG;AAClB,YAAQ,QAAQ,GAAG;AACnB,iBAAW,GAAG,IAAI,MAAM,IAAI,MAAM,OAAO,WAAW,GAAG,GAAG,MAAM,IAAI,IAAI;AAAA,IAC5E;AACA,QAAI,iBAAiB;AACjB,aAAO,WAAW;AAElB,sBAAgB,IAAI,UAAU;AAAA,IAClC;AAEA,OAAG,UAAU,GAAG,oBAAoB,IAAI,YAAY,IAAI;AACxD,OAAG,gBAAgB;AAAA,EACvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAiBA,UAAU,MAAM;AACZ,WAAO,KAAK,IAAI;AAAA,EACpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,UAAU,QAAQ,gBAAgB;AAtuBtC;AAuuBQ,UACI,KAAiB,MACjB,iBAAiB,GAAGA,kBAAiB,GACrC,aAAiB,iBAAiB,GAAG,aAAc,GAAG,aAAa,CAAC,GACpE,UAAiB,GAAG,MAAM;AAC9B,QAAI,KAAK;AACT,OAAGC,yBAAwB,IAAI,CAAC;AAEhC,OAAGD,kBAAiB,IAAI,iBAAiB,OAAO,eAAe,OAAO,OAAO,CAAC,GAAG,MAAM,GAAG,cAAc,IAAI;AAI5G,SAAK,OAAO,QAAQ;AAIhB,UAAI,OAAO,GAAG,KAAK,QAAQ,OAAO,QAAQ,GAAG,GAAG;AAC5C,cAAM,QAAQ,GAAG,KAAK,OAAO,IAAI,GAAG;AACpC,YAAI,cAAc,IAAI,OAAO,GAAG,CAAC;AACjC,YAAI,CAAC,gBAAgB;AACjB,qBAAW,GAAG,IAAI;AAAA,QACtB;AAAA,MAOJ,OACK;AACD,mBAAW,GAAG,IAAI;AAAA,MACtB;AAAA,IACJ;AACA,QAAI,gBAAgB;AAChB,SAAG,eAAe,MAAM;AAAA,IAC5B;AAMA,SAAK,OAAO,QAAQ;AAGhB,UAAI,CAAC,WAAW,GAAG,KAAK,GAAC,aAAQ,GAAG,MAAX,mBAAc,OAAM;AACzC,WAAG,GAAG,IAAI,OAAO,GAAG;AAAA,MACxB;AAAA,IACJ;AACA,QAAI,gBAAgB;AAChB,SAAGA,kBAAiB,IAAI;AAAA,IAC5B,OACK;AACD,aAAO,GAAGA,kBAAiB;AAAA,IAC/B;AACA,QAAI,gBAAgB;AAChB,SAAG,gBAAgB,MAAM;AAAA,IAC7B;AACA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,UAAU,MAAM;AA1yBpB;AA2yBQ,UACI,KAAS,MACT,SAAS,GAAGA,kBAAiB;AACjC,WAAO;AAAA,MACF,GAAG,MAAM,IAAI,KAAK;AAAA,QACnB,QAAG,iBAAiB,MAApB,mBAAuB,IAAI,UAAS;AAAA;AAAA,MAGhC,CAAC,GAAG,WAAW,IAAI,KACnB,WAAW,OAAO,IAAI,KAAK,QAAQ,OAAO,QAAQ,IAAI;AAAA,IAE9D;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,WAAW,MAAM;AACb,UACI,KAAiB,MACjB,aAAiB,GAAG,iBAAiB,GACrC,SAAiB,GAAGA,kBAAiB;AAEzC,QAAI,yCAAY,IAAI,OAAO;AACvB,aAAO,WAAW,IAAI,IAAI;AAAA,IAC9B;AACA,QAAI,UAAW,QAAQ,QAAS;AAE5B,UAAI,GAAG,WAAW,IAAI,GAAG;AACrB,eAAO,GAAG,IAAI;AAAA,MAClB;AACA,UAAI,OAAO,IAAI,KAAK,QAAQ,OAAO,QAAQ,IAAI,GAAG;AAC9C,eAAO,OAAO,IAAI;AAAA,MACtB;AAAA,IACJ;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAeA,cAAc,MAAM;AAChB,UACI,KAAiB,MACjB,EAAE,WAAW,IAAI,IACjB,aAAiB,GAAG,iBAAiB,GACrC,SAAiB,GAAGA,kBAAiB,GACrC,aAAkB,yCAAY,IAAI,UAAU,WAAW,OAAO,IAAI,KAAK,QAAQ,OAAO,QAAQ,IAAI,KAC5F,CAAC,WAAW,IAAI,IAAI;AAC9B,QAAI,WAAW;AACX,SAAG,UAAU,IAAI;AAAA,IACrB;AACA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,eAAe,OAAO;AAClB,UACI,KAAc,MACd,UAAc,GAAG,MAAM,SACvB,cAAc,GAAG,iBAAiB,GAClC,YAAc,cAAc,CAAC,GAAG,YAAY,KAAK,CAAC,EAAE,OAAO,OAAK,QAAQ,CAAC,EAAE,SAAS,KAAK,IAAI;AACjG,eAAW,OAAO,WAAW;AACzB,SAAG,cAAc,GAAG;AAAA,IACxB;AACA,WAAO,UAAU,SAAS,YAAY;AAAA,EAC1C;AAAA,EACA,iBAAiB;AAAA,EAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAkBlB,IAAI,SAAS;AACT,UACI,SAAW,CAAC,GACZ,WAAW,KAAK,oBAAoB;AAIxC,eAAW,OAAO,UAAU;AACxB,aAAO,GAAG,IAAI,SAAS,GAAG;AAAA,IAC9B;AACA,WAAO;AAAA,EACX;AAAA;AAAA,EAEA,OAAO,mBAAmB,cAAc,SAAS;AAC7C,QAAI,iBAAiB,YAAY;AAC7B,aAAO;AAAA,IACX,WACS,MAAM,QAAQ,YAAY,GAAG;AAClC,aAAO,aAAa,IAAI,OAAKG,MAAK,mBAAmB,GAAG,OAAO,CAAC;AAAA,IACpE,WAES,wBAAwBA,OAAM;AACnC,UAAI,QAAQ,QAAQ,IAAI,YAAY,GAAG;AACnC;AAAA,MACJ;AACA,aAAO,aAAa,iBAAiB,OAAO;AAAA,IAChD,WAES,wBAAwB,eAAe,wBAAwB,kBAAkB;AACtF,aAAO;AAAA,IACX,WAES,QAAQ,SAAS,YAAY,GAAG;AACrC,YAAM,SAAS,CAAC;AAChB,iBAAW,OAAO,cAAc;AAE5B,YAAI,QAAQ,SAAS;AACjB,iBAAO,GAAG,IAAIA,MAAK,mBAAmB,aAAa,GAAG,GAAG,OAAO;AAAA,QACpE;AAAA,MACJ;AACA,aAAO;AAAA,IACX;AACA,WAAO;AAAA,EACX;AAAA;AAAA,EAEA,eAAe,MAAM,SAAS;AAh8BlC;AAi8BQ,UACI,KAAK,MACL,cAAc,GAAG,iBAAiB;AAEtC,QAAI,GAAC,QAAG,MAAM,QAAQ,IAAI,MAArB,mBAAwB,OAAM;AAC/B,aAAOA,MAAK,mBAAmB,GAAG,IAAI,GAAG,OAAO;AAAA,IACpD;AAEA,QAAI,2CAAa,IAAI,OAAO;AACxB,aAAOA,MAAK,mBAAmB,YAAY,IAAI,IAAI,GAAG,OAAO;AAAA,IACjE;AAAA,EACJ;AAAA;AAAA,EAEA,2BAA2B;AAAA,EAAC;AAAA;AAAA;AAAA,EAG5B,iBAAiB,UAAU,CAAE,GAAG;AAC5B,UACI,KAAU,MACV,UAAU,QAAQ,YAAY,QAAQ,GAAG,SAAS,QAAQ,MAAM,GAAG,aAAa,GAChF,UAAU,QAAQ,YAAY,QAAQ,UAAU,oBAAI,IAAI,IACxD,QAAU,QAAQ,UAAU,QAAQ,QAAQ,IAC5C,SAAU,CAAC;AACf,QAAI,QAAQ,IAAI,EAAE,GAAG;AACjB,aAAO;AAAA,IACX;AACA,YAAQ,IAAI,EAAE;AACd,SAAK,yBAAyB,OAAO;AACrC,eAAW,QAAQ,SAAS;AACxB,YAAM,QAAQ,GAAG,eAAe,MAAM,EAAE,GAAG,SAAS,OAAQ,QAAQ,EAAE,CAAC;AACvE,UAAI,UAAU,QAAW;AACrB,eAAO,IAAI,IAAI;AAAA,MACnB;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA;AAAA,EAEA,gBAAgB,UAAU,CAAC,GAAG;AAC1B,WAAO,aAAa,mBAAmB,KAAK,iBAAiB,OAAO,CAAC;AAAA,EACzE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,YAAY,UAAU,CAAC,GAAG;AAEtB,UAAM,UAAU,KAAK,UAAU,UAAU,KAAK,iBAAiB,iBAAiB,KAAK,aAAa,aAAa,KAAK,cAAc,cAAc,KAAK,SAAS,SAAS,KAAK,cAAc,cAAc;AACxM,QAAI,SAAS;AACT,YACI,UAAa,QAAQ,YAAY,GAEjC,aAAa,eAAe;AAChC,UAAI,UAAU;AACd,UAAI,QAAQ,WAAW,UAAU;AAC7B,mBACI,4BAA4B;AAEhC,oBAAY;AAAA,MAChB,OACK;AACD,mBAAW,WAAW;AAAA;AACtB,oBAAY;AAAA,MAChB;AACA,YAAM,UAAU,cAAc,WAAW,OAAO;AAChD,UAAI,SAAS;AACT,oBAAY;AAAA,eAAkB,WAAW;AAAA;AAAA,MAC7C;AAEA,aAAO,GAAG;AAAA,QAAyB,iBAAiB,WAAW,KAAK,gBAAgB,OAAO;AAAA,EAAQ;AAAA,IACvG;AAAA,EAEJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,iBAAiB,UAAU,CAAC,GAAG;AAC3B,YAAQ,SAAS;AACjB,UAAM,MAAM,KAAK,YAAY,OAAO;AACpC,kBAAc,SAAS,UAAU,+CAA+C,OAAO,GAAG,CAAC;AAAA,EAC/F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,OAAO,YAAY;AACf,WAAO,KAAK,MAAM;AAAA,EACtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA4BA,WAAW,QAAQ;AACf,UAAM,KAAK;AACX,QAAI,OAAO,GAAG,UAAU;AACxB,QAAI,CAAC,OAAO,IAAI,UAAU,GAAG;AACzB,SAAG,UAAU,IAAI,OAAO,QAAQ;AAChC,WAAK,QAAQ;AACb,SAAG,WAAW,IAAI;AAAA,IACtB;AACA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,OAAO,iBAAiB;AAAA,EAExB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,OAAO,aAAa,eAAe,SAAS;AACxC,UACI,eAAe,KAAK,MAAM,SAC1B,SAAe,QAAQ,MAAM,UAAU,KAAK,CAAC;AACjD,QAAI,QAAQ,GAAG,KAAK;AACpB,SAAK,IAAI,GAAG,IAAI,QAAQ,QAAQ,EAAE,GAAG;AACjC,eAAS,QAAQ,CAAC;AAClB,UAAI,QAAQ;AACR,aAAK,OAAO,QAAQ;AAChB,kBAAQ,OAAO,GAAG;AAClB,cAAI,aAAa,GAAG,GAAG;AACnB,oBAAQ,aAAa,GAAG,EAAE,MAAM,OAAO,OAAO,GAAG,CAAC;AAAA,UACtD,WACS,OAAO,GAAG,KAAK,OAAO;AAC3B,oBAAQ,OAAO,MAAM,OAAO,OAAO,GAAG,CAAC;AAAA,UAC3C;AACA,iBAAO,GAAG,IAAI;AAAA,QAClB;AAAA,MACJ;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAuBA,OAAO,SAAS,QAAQ;AAEpB,QAAI,IAAI,MACJ;AAEJ,SAAK,IAAI,GAAG,IAAI,OAAO,QAAQ,EAAE,GAAG;AAChC,YACIG,SAAQ,OAAO,CAAC,GAEhB,MAAQA,OAAM,cAAc,MAAMA,OAAM,cAAc,IAAI,OAAO,UAAU;AAC/E,UAAI,EAAE,GAAG,GAAG;AACR;AAAA,MACJ;AACA,UAASA,OAAM,CAAC;AAChB,QAAE,GAAG,IAAI;AACT,UAAI,OAAO,GAAG,gBAAgB,GAAG;AAC7B,UAAE,eAAe;AAAA,MACrB;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,OAAO,WAAW,MAAM;AA1pC5B;AA2pCQ,UACI,MAAQ,KAAK,OAEb,OAAQ,eAAe,GAAG,EAAE,OAC5B,OAAQ,IAAI,QACZ,QAAQ,KAAK,OACbC,SAAQ,IAAI;AAChB,IAAAR,gBAAeQ,QAAO,SAAS;AAAA,MAC3B,OAAQ;AAAA,IACZ,CAAC;AACD,WAAO,OAAO,MAAM;AAAA,MAChB,OAAc;AAAA,MACd,QAAc,OAAO,OAAO,KAAK,MAAM;AAAA,MACvC,SAAc,OAAO,OAAO,KAAK,OAAO;AAAA,MACxC,aAAc,KAAK;AAAA,MACnB,aAAc,KAAK;AAAA,MACnB,WAAc,OAAO,OAAO,CAAC,GAAG,KAAK,WAAW,GAAG,CAAC;AAAA,MACpD,OAAc,MAAM,SAAS,IAAI,IAAI,QAAQ,OAAO,OAAO,CAAC,GAAG,OAAO,IAAI,CAAC;AAAA,MAC3E,YAAc,KAAK;AAAA,MACnB,UAAc,UAAK,YAAL,mBAAc;AAAA,IAChC,CAAC;AACD,QAAI,UAAU,KAAK,OAAO;AACtB,YACI,SAAS,KAAK,QACd,mBAAmB,SAAO;AACtB,YAAI,CAAC,OAAO,KAAK,MAAM,GAAG;AACtB,UAAAR,gBAAe,KAAK,QAAS;AAAA,YACzB,MAAM;AAEF,kBAAI,CAAC,OAAO,OAAO,QAAQ,WAAW,IAAI,cAAc,KAAK,OAAO,GAAG;AACnE,wBAAQ;AAAA,kBACJ,sDAAsD,sDACrD,cAAc,YAAY,KAAK;AAAA,gBACpC;AAAA,cACJ;AACA,qBAAO;AAAA,YACX;AAAA,UACJ,CAAC;AAAA,QACL;AAAA,MACJ;AACJ,uBAAiBQ,MAAK;AACtB,uBAAiB,GAAG;AAAA,IACxB;AAGA,aAAS,MAAM,WAAW,IAAI,GAAG,IAAI,KAAK,YAAY,QAAQ,EAAE,GAAG;AAC/D,aAAO,KAAK,YAAY,CAAC;AACzB,UAAI,OAAO,KAAK,IAAI,GAAG;AACnB,oBAAY,WAAW,IAAI,MAAM,WAAW,IAAI,IAAI,QAAQ,aAAa,WAAW,IAAI;AACxF,YAAI,SAAS,EAAE,KAAK,IAAI;AAAA,MAC5B;AAAA,IACJ;AAAA,EAGJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,OAAO,aAAa,MAAM,SAAS,QAAQ;AACvC,UACI,oBAAoB,KAAK,QACzB,eAAoB,KAAK,SACzB,MAAoB,KAAK,OACzB,YAAoB,KAAK;AAC7B,QAAI,EAAE,QAAQ,IAAI,MACd,KAAKC,eAAc,SAAS,YAAY,OAAO;AACnD,eAAW,QAAQ,SAAS;AACxB,cAAQ,QAAQ,IAAI;AACpB,UAAI,QAAQ;AAER,YAAI,EAAE,MAAM,aAAa,IAAI,IAAI;AAC7B,gBAAM,OAAO,IAAI,MAAM,oBAAoB;AAAA,QAC/C,OACK;AAGD,kBAAQ,IAAI,MAAM,OAAO,kBAAkB,IAAI,GAAG,MAAM,SAAS;AAAA,QACrE;AAAA,MAGJ,OACK;AAED,QAAAA,gBAAe,UAAU,aAAa;AACtC,YAAI,SAAS,OAAO,UAAU,YAAY,aAAa,OAAO;AAC1D,oBAAU,MAAM;AAChB,cAAI,WAAW,CAAC,QAAQ,SAAS,OAAO,GAAG;AACvC,sBAAU,QAAQ,iBAAiB,OAAO;AAAA,UAC9C;AACA,uBAAa,aAAa;AAC1B,UAAAA,gBAAe,aAAa,MAAM,UAAUA;AAC5C,kBAAQ,MAAM;AAAA,QAClB;AACA,YAAI,EAAE,MAAM,aAAa,IAAI,IAAI;AAC7B,gBAAM,OAAO,IAAI,MAAM,OAAO;AAC9B,cAAI,OAAO,IAAI,SAAS;AACxB,uBAAa,EAAE,IAAI,SAAS,IAAI;AAChC,uBAAa;AAAA,QACjB,OACK;AACD,uBAAa,IAAI;AACjB,cAAI,SAAS;AAET,kBAAM,IAAI,OAAO,OAAO;AAAA,UAG5B;AACA,kBAAQ,IAAI,MAAM,OAAO,kBAAkB,IAAI,GAAG,MAAM,SAAS;AAAA,QACrE;AACA,YAAI,YAAY;AACZ,cAAI,WAAW,KAAKA,aAAY;AAAA,QACpC;AACA,YAAI,IAAI,WAAW,CAAC,YAAY;AAC5B,WAAC,YAAY,UAAW,KAAK,YAAY,KAAK,UAAU,CAAC,KAAM,KAAK,GAAG;AAAA,QAC3E;AAAA,MACJ;AAGA,UAAI,UAAU,QAAQ,SAAS,KAAK,KAAK,MAAM,QAAQ,KAAK,MAAM,CAAC,OAAO,SAAS,KAAK,GAAG;AACvF,aAAK,cAAc;AAAA,MACvB;AACA,mBAAa,IAAI,IAAS;AAC1B,wBAAkB,IAAI,IAAI;AAAA,IAC9B;AAAA,EACJ;AAAA,EACA,OAAO,kBAAkB,KAAK,MAAM;AAChC,QAAI,aAAa,MAAM,IAAI,cAAc,KAAK;AAAA,EAClD;AAAA,EACA,OAAO,mBAAmB,KAAK,MAAM;AACjC,QAAI,aAAa,MAAM,IAAI,eAAe,IAAI;AAAA,EAClD;AAAA,EACA,OAAO,gBAAgB,KAAK,MAAM;AAC9B,UAAM,aAAa,IAAI;AACvB,QAAI,MAAM,KAAK,aACX,QAAQ;AACZ,SAAK,IAAI,GAAG,IAAI,WAAW,QAAQ,EAAE,GAAG;AACpC,UAAI,CAAC,IAAI,SAAS,WAAW,CAAC,CAAC,GAAG;AAC9B,YAAI,CAAC,QAAQ;AACT,eAAK,cAAc,SAAS,MAAM,IAAI,MAAM;AAAA,QAChD;AACA,YAAI,KAAK,WAAW,CAAC,CAAC;AAAA,MAC1B;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,OAAO,gBAAgB,KAAK,MAAM;AAC9B,SAAK,aAAa,KAAK,MAAM,WAAW,MAAM;AAC9C,SAAK,WAAW,KAAK,GAAG;AACxB,WAAO,OAAO,KAAK,UAAU;AAAA,EACjC;AAAA,EACA,OAAO,yBAAyB,KAAK;AACjC,WAAO,OAAO,IAAI,WAAW,IAAI,mBAAmB;AAAA,EACxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,0BAA0B;AACtB,WAAO,KAAK,YAAY,wBAAwB;AAAA,EACpD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,OAAO,0BAA0B;AAC7B,UACI,OAAS,KAAK,OACd,SAAS,KAAK,cAAcL,MAAK,KAAK,KAAK,MAAM,IAAI,OAAO,OAAO,KAAK,MAAM;AAClF,QAAI,cAAc,aAAa,cAAc,gBACzC,OAAO,cAAc,WAAW,oBAAoB;AACpD,iBAAW,KAAK,OAAO,YAAY;AAC/B,eAAO,CAAC,IAAI,OAAO,WAAW,CAAC;AAAA,MACnC;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA,EACA,OAAO,KAAK,KAAK;AACb,QAAI,MAAM,KACN,KAAK;AACT,QAAI,OAAO,QAAQ,SAAS,GAAG,KAAK,CAAC,OAAO,SAAS,GAAG,GAAG;AACvD,YAAM,OAAO,OAAO,GAAG;AACvB,WAAK,OAAO,KAAK;AACb,gBAAQ,IAAI,GAAG;AACf,YAAI,OAAO;AACP,cAAI,QAAQ,SAAS,KAAK,GAAG;AACzB,gBAAI,GAAG,IAAIA,MAAK,KAAK,KAAK;AAAA,UAC9B,WACS,MAAM,QAAQ,KAAK,GAAG;AAC3B,gBAAI,GAAG,IAAI,MAAM,MAAM;AAAA,UAC3B;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,gBAAgB;AACZ,UAEI,YAAY,KAAK,MAAM,YACvB,SAAY,CAAC;AACjB,aAAS,IAAI,GAAG,IAAI,UAAU,QAAQ,KAAK;AAEvC,aAAO,OAAO,QAAQ,UAAU,CAAC,EAAE,UAAU;AAAA,IACjD;AACA,WAAO;AAAA,EACX;AAAA,EACA,WAAW,aAAa;AACpB,WAAO,eAAe,IAAI;AAAA,EAC9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA,eAAe,UAAU;AACrB,UACI,YAAY,KAAK,MAAM,WACvB,QAAY,WAAW,UAAU,QAAQ,QAAQ,IAAI;AACzD,WAAQ,QAAQ,IAAK,UAAU,MAAM,KAAK,IAAI;AAAA,EAClD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,OAAO,aAAa,MAAM;AACtB,WAAO,KAAK,MAAM,MAAM,SAAS,IAAI;AAAA,EACzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,gBAAgB,MAAM;AAClB,QAAI,YAAY,KAAK;AACrB,gBAAY,uCAAY;AACxB,QAAI,WAAW;AACX,aAAO,UAAU,QAAQ;AACrB,kBAAU,IAAI,EAAE;AAAA,MACpB;AAAA,IACJ;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,cAAc,MAAM,UAAU;AAC1B,UACI,YAAY,KAAK,eAAe,KAAK,aAAa,CAAC,IACnDM,UAAY,UAAU,IAAI,MAAM,UAAU,IAAI,IAAI,CAAC;AACvD,IAAAA,QAAO,KAAK,QAAQ;AAAA,EACxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,iBAAiB,SAAS;AACtB,UAAM,YAAY,KAAK;AACvB,QAAI,WAAW;AACX,iBAAW,QAAQ,WAAW;AAC1B,cAAMA,UAAS,UAAU,IAAI;AAC7B,iBAAS,IAAIA,QAAO,QAAQ,MAAM,KAAgB;AAC9C,cAAIA,QAAO,CAAC,EAAE,YAAY,SAAS;AAC/B,YAAAA,QAAO,OAAO,GAAG,CAAC;AAAA,UACtB;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AACJ;AACA,IAAM,QAAQN,MAAK;AAEnB,MAAM,eAAe,UAAU,QAAQ,UAAU;AACjDA,MAAK,UAAU,IAAI,MAAM,QAAQ,QAAQ;AAAA,EACrC,OAAcA;AAAA,EACd,QAAc,OAAO,OAAO,CAAC,CAAC;AAAA,EAC9B,SAAc,uBAAO,OAAO,IAAI;AAAA,EAChC,aAAcA,MAAK;AAAA,EACnB,aAAc;AAAA,EACd,WAAc,OAAO,OAAO,CAACA,KAAI,CAAC;AAAA,EAClC,OAAc,OAAO,OAAO,CAAC,MAAM,CAAC;AAAA,EACpC,SAAc;AAAA,EACd,YAAc,OAAO,OAAO,CAAC,CAAC;AAAA,EAC9B,OAAc;AAClB,CAAC;AAED,OAAO,OAAO,OAAO;AAAA,EACjB,YAAa;AAAA,EACb,gBAAiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOjB,gBAAiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUjB,aAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASd,cAAe;AACnB,CAAC;AACDA,MAAK,UAAU;AACf,cAAc,WAAW,QAAQ,OAAO;AACxCA,MAAK,SAAS;;;AC/8Cd,IACI,mBAAmB;AADvB,IAEI,cAAmB,SAAS,aAAa;AACrC,QACI,SAAS,CAAC,GACV,SAAS,YAAY,MAAM,GAAG;AAGlC,aAAW,iBAAiB,QAAQ;AAChC,UACI,CAAC,OAAO,MAAM,KAAK,IAAI,iBAAiB,KAAK,aAAa,GAC1D,cAAuB,mBAAmB,IAAI,GAC9C,eAAuB,mBAAmB,KAAK;AACnD,QAAI,OAAO;AACP,UAAI,aAAa,OAAO,WAAW;AACnC,UAAI,YAAY;AACZ,YAAI,CAAC,MAAM,QAAQ,UAAU,GAAG;AAC5B,uBAAa,OAAO,WAAW,IAAI,CAAC,UAAU;AAAA,QAClD;AACA,mBAAW,KAAK,YAAY;AAAA,MAChC,OACK;AACD,eAAO,WAAW,IAAI;AAAA,MAC1B;AAAA,IACJ;AAAA,EACJ;AACA,SAAO;AACX;AAsBJ,IAAqB,cAArB,MAAgC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAyB5B,OAAO,IAAI,KAAK,SAAS;AACrB,WAAO,KAAK,MAAM,KAAK,OAAO;AAAA,EAClC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,OAAO,KAAK,KAAK,SAAS,UAAU,CAAC,GAAG;AACpC,QAAI,EAAE,mBAAmB,aAAa,EAAE,OAAO,YAAY,WAAW;AAClE,gBAAU,KAAK,UAAU,OAAO;AAChC,cAAQ,UAAU,QAAQ,WAAW,CAAC;AACtC,cAAQ,QAAQ,cAAc,IAAI,QAAQ,QAAQ,cAAc,KAAK;AAAA,IACzE;AACA,WAAO,KAAK,MAAM,KAAK,OAAO,OAAO;AAAA,MACjC,QAAS;AAAA,MACT,MAAS;AAAA,IACb,GAAG,OAAO,CAAC;AAAA,EACf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,OAAO,MAAM,KAAK,SAAS;AACvB,QAAI;AAEJ,cAAU,QAAQ,MAAM,CAAC,GAAG,YAAW,uBAAuB,OAAO;AAGrE,QAAI,OAAO,oBAAoB,aAAa;AACxC,mBAAa,QAAQ,kBAAkB,IAAI,gBAAgB;AAC3D,cAAQ,SAAS,WAAW;AAAA,IAChC;AACA,QAAI,EAAE,iBAAiB,UAAU;AAC7B,cAAQ,cAAc;AAAA,IAC1B;AACA,QAAI,QAAQ,aAAa;AACrB,YAAM,SAAS,OAAO,QAAQ,QAAQ,WAAW;AACjD,UAAI,OAAO,QAAQ;AACf,YAAI,cAAc;AAElB,YAAI,QAAQ,WAAW,QAAQ,yBAAyB,MAAM;AAC1D,gBAAM,cAAc,IAAI,QAAQ,QAAQ,OAAO,EAAE,IAAI,cAAc;AACnE,cAAI;AACJ,kBAAQ,aAAa;AAAA,YACjB,KAAK;AACD,0BAAY;AACZ;AAAA,YACJ,KAAK;AACD,0BAAY;AACZ;AAAA,UACR;AAEA,cAAI,WAAW;AACX,kBAAM,OAAO,QAAQ,SAAS,QAAQ,OAAO,IAAI,UAAU;AAE3D,gBAAI,gBAAgB,WAAW;AAC3B,qBAAO,QAAQ,CAAC,CAAC,KAAK,KAAK,MAAM,KAAK,IAAI,KAAK,KAAK,CAAC;AAErD,4BAAc;AAAA,YAClB;AAAA,UACJ;AAAA,QACJ;AAEA,YAAI,CAAC,aAAa;AACd,kBAAQ,IAAI,SAAS,GAAG,IAAI,MAAM,OAAO,OAAO;AAAA,YAAI,CAAC,CAAC,OAAO,KAAK,MAC9D,GAAG,SAAS,mBAAmB,KAAK;AAAA,UACxC,EAAE,KAAK,GAAG;AAAA,QACd;AAAA,MACJ;AAAA,IACJ;AAEA,UAAM,UAAU,IAAI,QAAQ,CAAC,SAAS,WAAW;AAC7C,YAAM,KAAK,OAAO,EAAE;AAAA,QAChB,cAAY;AACR,cAAI,QAAQ,WAAW;AACnB,qBAAS,KAAK,EAAE,KAAK,UAAQ;AACzB,uBAAS,aAAa;AACtB,sBAAQ,QAAQ;AAAA,YACpB,CAAC,EAAE,MAAM,WAAS;AACd,uBAAS,aAAa;AACtB,uBAAS,QAAQ;AACjB,qBAAO,QAAQ;AAAA,YACnB,CAAC;AAAA,UACL,OACK;AACD,oBAAQ,QAAQ;AAAA,UACpB;AAAA,QACJ;AAAA,MACJ,EAAE,MAAM,WAAS;AACb,cAAM,QAAQ,QAAQ;AACtB,eAAO,KAAK;AAAA,MAChB,CAAC;AAAA,IACL,CAAC;AACD,YAAQ,QAAQ,IAAI,MAAM,EAAE;AAC5B,YAAQ,QAAQ,WAAW;AACvB,+CAAY;AAAA,IAChB;AACA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYA,OAAO,QAAQ,KAAK,UAAU;AAC1B,UAAM,KAAK;AACX,KAAC,GAAG,gBAAgB,GAAG,cAAc,CAAC,IAAI,GAAG,IAAI;AAEjD,QAAI,CAAC,YAAW,eAAe;AAC3B,kBAAW,gBAAgB,YAAW;AACtC,kBAAW,QAAQ,GAAG,cAAc,KAAK,EAAE;AAAA,IAC/C;AAAA,EACJ;AAAA,EACA,aAAa,cAAc,KAAK,SAAS;AACrC,UAAM,eAAe,IAAI,MAAM,GAAG;AAClC,QAAI,SAAa,KAAK,YAAY,aAAa,CAAC,CAAC,GAC7C,aAAa;AACjB,QAAI,QAAQ;AACR,UAAI,OAAO,WAAW,YAAY;AAC9B,iBAAS,MAAM,OAAO,aAAa,CAAC,GAAG,aAAa,CAAC,KAAK,YAAY,aAAa,CAAC,CAAC,GAAG,OAAO;AAAA,MACnG;AACA,UAAI;AACA,sBAAa,mCAAS,cAAa,KAAK,MAAM,OAAO,YAAY;AAAA,MACrE,SACO,OAAP;AACI,qBAAe;AACf,eAAO,QAAQ;AAAA,MACnB;AACA,eAAS,OAAO,OAAO;AAAA,QACnB,QAAa;AAAA,QACb,IAAa;AAAA,QACb,SAAa,IAAI,QAAQ;AAAA,QACzB,YAAa;AAAA,QACb;AAAA,QACA;AAAA,QACA,MAAa,MAAM,IAAI,QAAQ,CAAC,YAAY;AACxC,kBAAQ,OAAO,YAAY;AAAA,QAC/B,CAAC;AAAA,QACD,MAAO,MAAM,IAAI,QAAQ,CAAC,YAAY;AAClC,kBAAQ,UAAU;AAAA,QACtB,CAAC;AAAA,MACL,GAAG,MAAM;AACT,aAAO,IAAI,QAAQ,SAAS,SAAS,QAAQ;AACzC,YAAI,OAAO,aAAa;AACpB,kBAAQ,MAAM;AAAA,QAClB,OACK;AACD,qBAAW,WAAW;AAClB,oBAAQ,MAAM;AAAA,UAClB,GAAI,WAAW,SAAS,OAAO,QAAQ,GAAI;AAAA,QAC/C;AAAA,MACJ,CAAC;AAAA,IACL,OACK;AACD,aAAO,YAAW,cAAc,KAAK,OAAO;AAAA,IAChD;AAAA,EACJ;AACJ;AAnMA,IAAqB,aAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiBI,cAjBiB,YAiBV,yBAAwB,CAAC;AAmLpC,WAAW,SAAS;;;ACvRpB,IAAqB,cAArB,MAAiC;AAAA,EAC7B,OAAO,MAAM,OAAO;AAChB,WAAO,MAAM,OAAO,CAAC,KAAK,SAAS;AAC/B,UAAI,SAAS,QAAQ,SAAS,UAAa,EAAE,MAAM,QAAQ,IAAI,KAAK,KAAK,WAAW,MAAM,SAAS;AAAI,YAAI,KAAK,IAAI;AACpH,aAAO;AAAA,IACX,GAAG,CAAC,CAAC;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAeA,OAAO,KAAK,UAAUO,SAAQC,MAAK;AAC/B,UAAM,QAAQ,CAAC;AACf,QAAI,UAAU;AACV,iBAAW,MAAM,UAAU;AACvB,YAAI,CAACD,WAAUA,QAAO,EAAE,GAAG;AACvB,gBAAM,KAAKC,OAAMA,KAAI,EAAE,IAAI,EAAE;AAAA,QACjC;AAAA,MACJ;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,OAAO,OAAO,UAAU,OAAO;AAC3B,QAAI,OACA,MACA,UAAU;AACd,YAAQ,MAAM,CAAC,aAAa,MAAM,CAAC,GAAG,MAAM,CAAC,CAAC,IAAI;AAClD,aAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AACnC,aAAO,MAAM,CAAC;AACd,WAAK,QAAQ,MAAM,QAAQ,IAAI,OAAO,IAAI;AACtC,cAAM,OAAO,OAAO,CAAC;AACrB,kBAAU;AAAA,MACd;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAaA,OAAO,mBAAmB,MAAM,OAAO,eAAe,KAAK,gBAAgB,OAAO;AAC9E,UAAM,MAAM,MAAM;AAClB,QAAI,aAAa;AACjB,QAAI,QAAQ,KAAK;AACb,oBAAc,QAAQ,IAAI,aAAa,MAAM,QAAQ,CAAC,GAAG,IAAI,IAAI;AACjE,mBAAa,QAAQ,MAAM,IAAI,aAAa,MAAM,MAAM,KAAK,CAAC,IAAI;AAClE,UAAI,cAAc,KAAK,aAAa,GAAG;AACnC,eAAO;AAAA,MACX;AAAA,IACJ;AACA,WAAO,KAAK,aAAa,OAAO,MAAM,YAAY;AAAA,EACtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,OAAO,SAAS,OAAOC,KAAI,SAAS;AAChC,aAAS,EAAE,OAAO,IAAI,OAAO,IAAI,SAAS,GAAG,KAAK,GAAG,KAAK;AACtD,UAAIA,IAAG,KAAK,SAAS,MAAM,CAAC,GAAG,GAAG,KAAK,GAAG;AACtC,eAAO,MAAM,CAAC;AAAA,MAClB;AAAA,IACJ;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA8BA,OAAO,aAAa,OAAO,MAAM,QAAQ,GAAG,MAAM,MAAM,QAAQ,YAAY,KAAK,gBAAgB;AAC7F,UAAM,SAAS,MAAM;AACrB,QAAI,QAAQ;AACZ,QAAI,iBAAiB,UAAU;AAC3B,kBAAY;AACZ,cAAQ;AAAA,IACZ,WACS,eAAe,UAAU;AAC9B,kBAAY;AACZ,YAAM;AAAA,IACV;AACA,MAAE;AACF,WAAO,SAAS,KAAK;AACjB,eAAU,QAAQ,OAAQ;AAC1B,mBAAa,UAAU,MAAM,MAAM,MAAM,CAAC;AAC1C,UAAI,cAAc,GAAG;AACjB,gBAAQ,SAAS;AAAA,MACrB,WACS,aAAa,GAAG;AACrB,cAAM,SAAS;AAAA,MACnB;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA,EACA,iBAAiB,KAAK,KAAK;AACvB,WAAQ,MAAM,MAAO,KAAO,MAAM,MAAO,IAAI;AAAA,EACjD;AAAA,EACA,eAAe,KAAK,KAAK;AACrB,UAAM,OAAO,GAAG;AAChB,UAAM,OAAO,GAAG;AAChB,WAAQ,MAAM,MAAO,KAAO,MAAM,MAAO,IAAI;AAAA,EACjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,OAAO,KAAK,OAAO,cAAc,CAAC,GAAGA,MAAK,MAAM;AAC5C,UACI,SAAS,CAAC,GACV,QAAS,MAAM,QAAQ,WAAW,IAAI,cAAc,CAAC,WAAW;AACpE,aAAS,IAAI,GAAG,IAAI,OAAO,KAAK;AAC5B,iBAAW,QAAQ,OAAO;AAGtB,cAAM,gBAAgB,OAAO,OAAO,CAAC,GAAG,IAAI;AAC5C,YAAIA,KAAI;AACJ,UAAAA,IAAG,eAAe,CAAC;AAAA,QACvB;AACA,eAAO,KAAK,aAAa;AAAA,MAC7B;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,OAAO,SAAS,OAAOA,KAAI,WAAW,OAAO;AACzC,UAAM,QAAQ,CAAC;AACf,aAAS,IAAI,GAAG,IAAI,OAAO,KAAK;AAC5B,YAAM,KAAKA,IAAG,KAAK,WAAW,IAAI,EAAE,CAAC;AAAA,IACzC;AACA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,OAAO,QAAQ,UAAU,OAAO;AAC5B,eAAW,QAAQ,OAAO;AACtB,UAAI,CAAC,MAAM,SAAS,IAAI,GAAG;AACvB,cAAM,KAAK,IAAI;AAAA,MACnB;AAAA,IACJ;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,OAAO,OAAO,OAAO;AACjB,WAAO,CAAC,GAAG,IAAI,IAAI,KAAK,CAAC;AAAA,EAC7B;AAAA;AAAA,EAEA,OAAO,cAAc,OAAO;AAExB,WAAO,IAAI,MAAM,OAAO;AAAA,MACpB,IAAI,QAAQ,MAAM,UAAU;AACxB,YAAI,OAAO,SAAS,UAAU;AAC1B,iBAAO,QAAQ,IAAI,QAAQ,MAAM,QAAQ;AAAA,QAC7C;AACA,cAAM,QAAQ,OAAO,IAAI;AACzB,YAAI,OAAO,MAAM,KAAK,GAAG;AACrB,iBAAO,QAAQ,IAAI,QAAQ,MAAM,QAAQ;AAAA,QAC7C;AACA,eAAO,OAAO,QAAQ,IAAI,OAAO,SAAS,QAAQ,KAAK;AAAA,MAC3D;AAAA,MACA,IAAI,QAAQ,MAAM,OAAO,UAAU;AAC/B,YAAI,OAAO,SAAS,UAAU;AAC1B,iBAAO,QAAQ,IAAI,QAAQ,MAAM,OAAO,QAAQ;AAAA,QACpD;AACA,cAAM,QAAQ,OAAO,IAAI;AACzB,YAAI,OAAO,MAAM,KAAK,GAAG;AACrB,iBAAO,QAAQ,IAAI,QAAQ,MAAM,OAAO,QAAQ;AAAA,QACpD;AACA,eAAO,QAAQ,IAAI,OAAO,SAAS,QAAQ,KAAK,IAAI;AACpD,eAAO;AAAA,MACX;AAAA,IACJ,CAAC;AAAA,EACL;AAAA,EACA,OAAO,MAAM,GAAG,GAAG,oBAAoB,OAAO;AAO1C,QAAI,CAAC,GAAG;AACJ,aAAO,oBACD,EAAE,OAAQ,GAAG,UAAW,CAAC,GAAG,QAAS,CAAC,EAAE,IACxC,EAAE,SAAU,GAAG,SAAU,CAAC,GAAG,QAAS,CAAC,EAAE;AAAA,IACnD;AACA,UACI,UAAU,CAAC,GACX,UAAU,CAAC,GACX,SAAU,oBAAI,IAAI,GAClB,OAAU,IAAI,IAAI,CAAC;AACvB,aAAS,IAAI,GAAG,IAAI,EAAE,QAAQ,KAAK;AAC/B,YAAM,OAAO,EAAE,CAAC;AAChB,UAAI,KAAK,IAAI,IAAI,GAAG;AAChB,eAAO,IAAI,IAAI;AAAA,MACnB,OACK;AACD,gBAAQ,KAAK,IAAI;AAAA,MACrB;AAAA,IACJ;AACA,aAAS,IAAI,GAAG,IAAI,EAAE,QAAQ,KAAK;AAC/B,YAAM,OAAO,EAAE,CAAC;AAChB,UAAI,CAAC,OAAO,IAAI,IAAI,GAAG;AACnB,gBAAQ,KAAK,IAAI;AAAA,MACrB;AAAA,IACJ;AACA,QAAI,mBAAmB;AACnB,aAAO,EAAE,OAAQ,SAAS,UAAW,SAAS,QAAS,OAAO;AAAA,IAClE;AACA,WAAO,EAAE,SAAS,SAAS,QAAS,CAAC,GAAG,MAAM,EAAE;AAAA,EACpD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAkBA,OAAO,QAAQ,eAAe;AAC1B,QAAI,iBAAiB,MAAM;AACvB,aAAO;AAAA,IACX;AACA,QAAI,yBAAyB,KAAK;AAC9B,aAAO,MAAM,KAAK,aAAa;AAAA,IACnC;AACA,WAAO,MAAM,QAAQ,aAAa,IAAI,gBAAgB,CAAC,aAAa;AAAA,EACxE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,OAAO,SAAS,GAAG;AACf,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA6BA,OAAO,MAAM,OAAO,WAAW,cAAc,YAAY,UAAU;AAC/D,UACI,SAAS,OAAO,cAAc,WAAW,OAAK,uBAAI,aAAa,WAC/D,WAAW,OAAO,gBAAgB,WAAW,OAAK,uBAAI,eAAe;AACzE,WAAO,MAAM,OAAO,CAAC,MAAM,SAAS;AAChC,WAAK,OAAO,IAAI,CAAC,IAAI,SAAS,IAAI;AAClC,aAAO;AAAA,IACX,GAAG,CAAC,CAAC;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAsCA,OAAO,QAAQ,OAAO,gBAAgB;AAClC,UAAM,SAAS,OAAO,mBAAmB,WAAW,OAAK,uBAAI,kBAAkB;AAC/E,WAAO,MAAM,OAAO,CAAC,SAAS,UAAU;AACpC,YAAM,MAAM,OAAO,KAAK;AACxB,OAAC,QAAQ,GAAG,IAAI,QAAQ,GAAG,KAAK,CAAC,GAAG,KAAK,KAAK;AAC9C,aAAO;AAAA,IACX,GAAG,CAAC,CAAC;AAAA,EACT;AACJ;AACA,YAAY,SAAS;;;AC7YrB,IACI,aAAa;AADjB,IAEI,gBAAgB,OAAO,YAAY;AAFvC,IAII,QAAQ;AAJZ,IAMI,QAAQ;AANZ,IAQI,QAAQ;AARZ,IASI,EAAE,gBAAAC,gBAAe,IAAI,OAAO;AAKhC,IAAqB,iBAArB,MAAoC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA+DhC,OAAO,MAAM,QAAQ,QAAQC,KAAI,SAAS,SAAS;AAC/C,UACI,QAAQ,OAAOA,QAAO,UACtB,cAAa,mCAAS,YAAW,OACjC,OAAO,IAAI,SAAS;AAChB,YAEI,aAAa,KAAK,UAAU,KAAK,QAAQ,GAAG,IAAI,GAChD,cAAa,mCAAS,eAAc,SAAa,aAC1C,QAAQ,QAAQA,GAAE,EAAE,YAAY,GAAG,IAAI,IAAIA,IAAG,KAAK,SAAS,YAAY,GAAG,IAAI,IAC/E,QAAQ,QAAQA,GAAE,EAAE,GAAG,IAAI,IAAIA,IAAG,KAAK,SAAS,GAAG,IAAI;AAElE,aAAQ,eAAe,SAAa,aAAa;AAAA,IACrD;AACJ,WAAO,eAAe,WAAW,QAAQ,QAAQ,IAAI;AAAA,EACzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAuDA,OAAO,OAAO,QAAQ,QAAQA,KAAI,SAAS;AACvC,UACI,QAAQ,OAAOA,QAAO,UACtB,OAAO,IAAI,SAAS;AAChB,YAAM,OAAO,mCAAS,eAChB,IACC,QAAQ,QAAQA,GAAE,EAAE,GAAG,IAAI,IAAIA,IAAG,KAAK,SAAS,GAAG,IAAI;AAE9D,aAAQ,QAAQ,QAAS,MAAM,KAAK,UAAU,KAAK,QAAQ,GAAG,IAAI;AAAA,IACtE;AACJ,WAAO,eAAe,WAAW,QAAQ,QAAQ,IAAI;AAAA,EACzD;AAAA,EACA,OAAO,MAAM,MAAM;AACf,WAAO,SAAS,WAAW,MAAM;AAC7B,UAAI,KAAK,UAAU,KAAK,QAAQ;AAC5B,eAAO,KAAK,MAAM,MAAM,IAAI;AAAA,MAChC,OACK;AACD,eAAO,YAAY,OAAO;AACtB,iBAAO,QAAQ,MAAM,MAAM,KAAK,OAAO,KAAK,CAAC;AAAA,QACjD;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,OAAO,QAAQ,KAAK;AAChB,eAAW,OAAO,KAAK;AACnB,UAAI,OAAO,IAAI,GAAG,MAAM,YAAY;AAChC,YAAI,GAAG,IAAI,IAAI,GAAG,EAAE,KAAK,GAAG;AAAA,MAChC;AAAA,IACJ;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,OAAO,kBAAkB,UAAU,aAAa,SAAS;AACrD,WAAO,YAAY,MAAM;AACrB,YAAM,UAAU,WAAW;AAC3B,UAAI,YAAY,KAAK,SAAS,GAAG,IAAI,MAAM,OAAO;AAC9C,eAAO,SAAS,KAAK,SAAS,GAAG,IAAI;AAAA,MACzC;AACA,aAAO;AAAA,IACX;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,OAAO,eAAe,UAAU,UAAU,SAAS;AAC/C,WAAO,IAAI,SAAS;AAChB,YAAM,aAAa,SAAS,KAAK,SAAS,GAAG,IAAI,GAC7C,iBAAiB,SAAS,KAAK,SAAS,GAAG,IAAI;AACnD,aAAQ,mBAAmB,SAAa,aAAa;AAAA,IACzD;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAiBA,OAAO,gBAAgBA,KAAI,QAAQ,SAAS,WAAW,KAAK;AACxD,QAAI,eAAe,CAAC,OAAO,WACvB,UACA;AACJ,UACI,SAAS,MAAM;AACX,gBAAU;AACV,qBAAe,YAAY,IAAI;AAC/B,eAAS,KAAK,MAAM,UAAU,SAAS;AACvC,MAAAA,IAAG,MAAM,SAAS,QAAQ;AAAA,IAC9B,GACA,SAAS,YAAY,MAAM;AACvB,YAAM,UAAU,YAAY,IAAI,IAAI;AACpC,iBAAW;AAEX,UAAI,WAAW,QAAQ;AACnB,qBAAa,OAAO;AACpB,eAAO;AAAA,MACX,OAEK;AACD,YAAI,CAAC,SAAS;AACV,oBAAU,WAAW,QAAQ,SAAS,OAAO;AAAA,QACjD;AACA,YAAI,KAAK;AACL,mBAAS,KAAK,MAAM,UAAU,SAAS;AACvC,cAAI,MAAM,SAAS,QAAQ;AAAA,QAC/B;AAAA,MACJ;AAAA,IACJ;AACJ,WAAO,SAAS,MAAM,aAAa,OAAO;AAC1C,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAeA,OAAO,eAAeA,KAAI,QAAQ,SAAS,MAAM;AAC7C,QAAI,UACA;AACJ,UACI,SAAS,MAAM;AACX,gBAAU;AACV,aAAO,YAAY;AACnB,eAAS,KAAK,MAAM,UAAU,IAAI;AAClC,MAAAA,IAAG,MAAM,SAAS,QAAQ;AAAA,IAC9B,GACA,SAAS,YAAYC,OAAM;AACvB,iBAAWA;AAEX,UAAI,SAAS;AACT,qBAAa,OAAO;AAAA,MACxB;AACA,aAAO,YAAY;AACnB,gBAAU,WAAW,QAAQ,MAAM;AAAA,IACvC;AACJ,WAAO,SAAS,MAAM;AAClB,aAAO,YAAY;AACnB,mBAAa,OAAO;AAAA,IACxB;AACA,WAAO;AAAA,EACX;AAAA,EACA,OAAO,UAAUD,KAAI;AACjB,QAAI,EAAE,iBAAiBA,MAAK;AACxB,YAAM,OAAOA,IAAG,SAAS;AACzB,UAAI,IAAI,MAAM,KAAK,IAAI,GACnB,MAAM,MAAM,MAAM,YAAY;AAClC,UAAI,GAAG;AAGH,eAAO,CAAC,EAAE,CAAC,CAAC;AACZ,eAAO,EAAE,CAAC;AAAA,MACd,WACU,IAAqB,MAAM,KAAK,IAAI,GAAI;AAG9C,YAAI,EAAE,CAAC,EAAE,KAAK;AACd,eAAO,IAAI,EAAE,MAAM,UAAU,IAAI,CAAC;AAClC,eAAO,EAAE,CAAC;AAAA,MACd,WACU,IAAqB,MAAM,KAAK,IAAI,GAAI;AAG9C,eAAO,EAAE,CAAC;AACV,YAAI,EAAE,CAAC,EAAE,KAAK;AACd,eAAO,IAAI,EAAE,MAAM,UAAU,IAAI,CAAC;AAClC,eAAO,EAAE,CAAC;AAAA,MACd;AACA,aAAO,6BAAM;AACb,MAAAA,IAAG,aAAa,IAAI,aAAa,KAAK;AAAA,QAClC;AAAA,QACA,OAAQ,QAAQ,EAAE,CAAC,CAAC;AAAA,QACpB,OAAQ,6BAAM,WAAW,QAAO,KAAK,UAAU,GAAG,KAAK,SAAS,CAAC,EAAE,KAAK,IAAI;AAAA,MAChF;AACA,UAAI,MAAM;AACN,mBAAW,OAAO;AAAA,MACtB;AAAA,IACJ;AACA,WAAOA,IAAG,aAAa;AAAA,EAC3B;AAAA,EACA,OAAO,WAAW,QAAQ,QAAQ,MAAM;AACpC,SAAK,YAAY,OAAO,MAAM;AAC9B,WAAO,MAAM,IAAI;AACjB,WAAO,MAAM;AAvVrB;AAyVY,UAAID,gBAAe,KAAK,QAAQ,MAAM,GAAG;AACrC,YAAI,IAAI,OAAO,MAAM,GACjB;AACJ,YAAI,MAAM,MAAM;AAIZ,gBAAI,YAAO,eAAe,MAAM,MAA5B,mBAAgC,aAAY,KAAK,WAAW;AAC5D,mBAAO,OAAO,MAAM;AAAA,UACxB,OACK;AACD,mBAAO,MAAM,IAAI,KAAK;AAAA,UAC1B;AAAA,QACJ,OACK;AAGD,iBAAQ,OAAO,uBAAG,WAAY,IAAI,MAAM;AACpC,gBAAI,SAAS,MAAM;AACf,gBAAE,YAAY,KAAK;AACnB;AAAA,YACJ;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,OAAO,QAAQ,QAAQ,QAAQ,SAAS;AACpC,UAAMC,MAAK,OAAO,MAAM;AACxB,WAAO,MAAM,IAAI,IAAI,SAAS;AAC1B,UAAI;AACA,eAAOA,IAAG,MAAM,QAAQ,IAAI;AAAA,MAChC,SACO,GAAP;AACI,eAAO,mCAAU;AAAA,MACrB;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,OAAO,aAAa;AAChB,WAAO;AAAA,EACX;AAAA,EACA,OAAO,QAAQ,UAAUA,KAAI,SAAS,SAAS,UAAU;AACrD,QAAI,SAAS;AACb,UAAM,SAAS,IAAI,QAAQ,aAAW;AAClC,YAAM,QAAQ,YAAY,IAAI,GAC1B,UAAU,MAAM;AACZ,cAAM,WAAW,KAAK,KAAK,YAAY,IAAI,IAAI,SAAS,UAAU,CAAC,GAC/D,YAAY,WAAW,QAAQ,aAAa,UAAU;AAC1D,YAAI,CAAC,QAAQ;AACT,cAAIA,IAAG,KAAK,SAAS,KAAK,gBAAgB,MAAM,EAAE,QAAQ,CAAC,MAAM,OAAO;AACpE,oBAAQ;AAAA,UACZ;AAAA,QACJ;AACA,YAAI,UAAU,aAAa,GAAG;AAG1B,oBAAU,sBAAsB,MAAM,QAAQ,CAAC;AAAA,QACnD,OACK;AACD,oBAAU,sBAAsB,OAAO;AAAA,QAC3C;AAAA,MACJ;AACJ,cAAQ;AAAA,IACZ,CAAC;AACD,WAAO,SAAS,MAAM;AAClB,eAAS;AACT,aAAO;AAAA,IACX;AACA,WAAO;AAAA,EACX;AACJ;AACA,IACI,OAAO;AADX,IAEI,KAAK;AAFT,IAGI,KAAK;AAHT,IAII,KAAK;AAJT,IAKI,KAAK,IAAI;AALb,IAMI,KAAK,OAAO;AANhB,IAOI,KAAK,IAAI;AAPb,IAQI,KAAK,MAAM;AARf,IASI,KAAK,MAAM;AATf,IAUI,KAAK,QAAQ;AAVjB,IAWI,MAAM;AAXV,IAYI,MAAM;AAZV,IAaI,MAAM;AAbV,IAcI,KAAK;AAdT,IAeI,KAAK;AACT,eAAe,kBAAkB;AAAA,EAC7B,QAAiB,OAAK;AAAA,EACtB,YAAiB,OAAK,KAAK,IAAI,GAAG,CAAC;AAAA,EACnC,aAAiB,OAAK,EAAE,KAAK,IAAK,IAAI,GAAI,CAAC,IAAI;AAAA,EAC/C,eAAiB,QAAM,KAAK,QAAQ,IAAI,OAAO,KAAK,IAAI,GAAG,CAAC,IAAI,CAAC,SAAS,KAAK,KAAK,IAAI;AAAA,EACxF,aAAiB,OAAK,KAAK,IAAI,GAAG,CAAC;AAAA,EACnC,cAAiB,OAAK,KAAK,IAAK,IAAI,GAAI,CAAC,IAAI;AAAA,EAC7C,gBAAiB,QAAM,KAAK,QAAQ,IAAI,OAAO,KAAK,IAAI,GAAG,CAAC,IAAI,QAAQ,KAAK,IAAK,IAAI,GAAI,CAAC,IAAI;AAAA,EAC/F,aAAiB,OAAK,KAAK,IAAI,GAAG,CAAC;AAAA,EACnC,cAAiB,OAAK,EAAE,KAAK,IAAK,IAAI,GAAI,CAAC,IAAI;AAAA,EAC/C,gBAAiB,QAAM,KAAK,QAAQ,IAAI,OAAO,KAAK,IAAI,GAAG,CAAC,IAAI,CAAC,SAAS,KAAK,KAAK,KAAK,IAAI,GAAG,CAAC,IAAI;AAAA,EACrG,aAAiB,OAAK,KAAK,IAAI,GAAG,CAAC;AAAA,EACnC,cAAiB,OAAM,KAAK,IAAK,IAAI,GAAI,CAAC,IAAI;AAAA,EAC9C,gBAAiB,QAAM,KAAK,QAAQ,IAAI,OAAO,KAAK,IAAI,GAAG,CAAC,IAAI,QAAQ,KAAK,IAAK,IAAI,GAAI,CAAC,IAAI;AAAA,EAC/F,YAAiB,OAAK,CAAC,KAAK,IAAI,KAAK,KAAK,KAAK,EAAE,IAAI;AAAA,EACrD,aAAiB,OAAK,KAAK,IAAI,KAAK,KAAK,KAAK,EAAE;AAAA,EAChD,eAAiB,OAAK,CAAC,QAAQ,KAAK,IAAI,KAAK,KAAK,CAAC,IAAI;AAAA,EACvD,YAAiB,OAAK,MAAM,IAAI,IAAI,KAAK,IAAI,GAAG,MAAM,IAAI,EAAE;AAAA,EAC5D,aAAiB,OAAK,MAAM,IAAI,IAAI,CAAC,KAAK,IAAI,GAAG,MAAM,CAAC,IAAI;AAAA,EAC5D,eAAiB,OAAM,MAAM,IAAK,IAAK,MAAM,IAAK,KAAM,KAAK,QAAQ,IAAK,OAAO,KAAK,IAAI,GAAG,MAAM,IAAI,EAAE,IAAI,QAAQ,CAAC,KAAK,IAAI,GAAG,MAAM,EAAE,CAAC,IAAI;AAAA,EAC/I,YAAiB,OAAK,EAAE,KAAK,KAAK,IAAK,IAAI,CAAE,IAAI;AAAA,EACjD,aAAiB,OAAK,KAAK,KAAK,IAAI,KAAK,IAAK,IAAI,GAAI,CAAC,CAAC;AAAA,EACxD,eAAiB,QAAM,KAAK,QAAQ,IAAI,CAAC,QAAQ,KAAK,KAAK,IAAI,IAAI,CAAC,IAAI,KAAK,QAAQ,KAAK,KAAK,KAAK,KAAK,KAAK,CAAC,IAAI;AAAA,EACnH,eAAiB,OAAO,IAAK,KAAO,KAAK,IAAI,IAAM,IAAI,KAAO,MAAM,KAAK,MAAM,IAAI,MAAQ,IAAI,KAAO,MAAM,KAAK,MAAM,IAAI,MAAQ,MAAM,KAAK,MAAM,IAAI;AAAA,EACxJ,YAAiB,OAAM,IAAK,MAAM,KAAK,KAAK,IAAI;AAAA,EAChD,aAAiB,QAAM,IAAI,IAAI,KAAK,MAAM,KAAK,KAAK,IAAI,MAAM;AAAA,EAC9D,eAAiB,OAAK;AAClB,QAAI,KAAK;AACT,YAAS,KAAK,QAAQ,IAAK,QAAQ,IAAI,OAAO,MAAO,MAAO,KAAK,IAAI,OAAO,SAAS,KAAK,KAAK,OAAO,MAAO,MAAO,KAAK,IAAI,MAAM;AAAA,EACvI;AAAA,EACA,SAAc,OAAK,KAAK,KAAK,IAAI,GAAG,KAAK,CAAC,IAAI,KAAK,KAAK,IAAI,IAAI,MAAM,IAAI,KAAK,MAAM,CAAC,IAAI;AAAA,EAC1F,aAAc,OAAK;AACf,QAAI,KAAK;AACT,YAAS,KAAK,QAAQ,IAAK,QAAQ,IAAI,OAAO,MAAO,MAAO,KAAK,IAAI,OAAO,SAAS,KAAK,KAAK,OAAO,MAAO,MAAO,KAAK,IAAI,MAAM;AAAA,EACvI;AAAA,EACA,WAAa,OAAK,IAAI,MAAM,KAAK,KAAK,IAAI;AAAA,EAC1C,SAAa,QAAM,KAAK,KAAK,MAAM,KAAK,KAAK,IAAI,MAAM;AAAA,EACvD,QAAa,OAAM,IAAI,KAAO,KAAK,IAAI,IAAM,IAAI,KAAO,MAAM,KAAK,MAAM,IAAI,MAAQ,IAAI,KAAO,MAAM,KAAK,MAAM,IAAI,MAAQ,MAAM,KAAK,MAAM,IAAI;AAAA,EAClJ,YAAa,OAAM,IAAI,KAAO,KAAK,IAAI,IAAM,IAAI,KAAM,KAAK,MAAM,KAAK,MAAM,IAAI,OAAQ,IAAI,KAAM,KAAK,MAAM,KAAK,MAAM,IAAI,OAAO,KAAK,MAAM,KAAK,MAAM,IAAI;AAAA,EAC9J,YAAa,QAAM,KAAK,QAAQ,IAAI,OAAO,KAAK,IAAI,GAAG,CAAC,IAAI,CAAC,SAAS,KAAK,KAAK,KAAK,IAAI,GAAG,CAAC,IAAI;AAAA,EACjG,UAAa,OAAK,KAAK,IAAI,GAAG,CAAC;AAAA,EAC/B,QAAa,OAAK,KAAK,IAAI,GAAG,IAAI;AACtC;AACA,eAAe,SAAS;;;ACzcxB,IAKI,EAAE,QAAQ,IAAW;AALzB,IAMI,EAAE,gBAAAE,gBAAe,IAAI,OAAO;AANhC,IAQI,oBAAqB;AAAA,EACjB,SAAa;AAAA,EACb,YAAa;AAAA,EACb,MAAa;AAAA,EACb,UAAa;AAAA,EACb,MAAa;AAAA,EACb,MAAa;AAAA,EACb,SAAa;AAAA,EACb,QAAa;AAAA,EACb,UAAa;AAAA,EACb,MAAa;AAAA,EACb,WAAa;AACjB;AApBJ,IAqBI,qBAAqB,CAAC,GAAG,MAAM,EAAE,OAAO,EAAE;AAwT9C,IAAO,iBAAQ,YAAU,MAAM,gBAAgB,UAAUC,OAAM;AAAA,EAAtC;AAAA;AACrB,2CAAkB;AAAA;AAAA,EAClB,WAAW,QAAQ;AACf,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAqBA,WAAW,aAAa;AACpB,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA2BH;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,OAAO,sBAAsB,KAAK,MAAM;AACpC,UACI,MAAM,KAAK,aAAa,kBAAkB,GAC1C,MAAM,IAAI;AACd,eAAW,aAAa,KAAK;AAEzB,UAAI,UAAU,YAAY,CAAC,IAAI,IAAI,SAAS,IAAI,IAAI,SAAS;AAAA,IACjE;AAAA,EACJ;AAAA;AAAA,EAEA,WAAW,eAAe;AACtcAAc;AAC1B,gBAAI,aAAa,MAAM;AACnB,kBAAI,CAAC,UAAU;AACX,uBAAO;AAAA,cACX;AACA,kBAAI,cAAc;AACd,2BAAW,WAAW,CAAC,QAAQ,IAAI,CAAC;AACpC,yBAAS,KAAK,QAAQ,YAAY,IAAI,UAAU,MAAM,EAAE,UAAU,YAAY;AAAA,cAClF;AAAA,YACJ;AACA,mBAAO;AAAA,UACX;AAAA,QACJ;AAAA,MACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAMA,mBAAoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAsBpB,cAAe;AAAA,IACnB;AAAA,EACJ;AAAA,EACA,UAAU;AACN,SAAK,QAAQ,eAAe;AAC5B,UAAM,QAAQ;AAAA,EAClB;AAAA;AAAA;AAAA,EAGA,UAAU,WAAW,MAAM;AAEvB,QAAK,KAAK,sBAAuC,iCAAQ,WAAY;AAEjE,eAAS,QAAQ,OAAO,CAAC,GAAG,MAAM;AAClC,aAAO,OAAO;AAAA,IAClB;AACA,UAAM,UAAU,QAAQ,GAAG,IAAI;AAI/B,SAAK,2BAA2B;AAAA,EACpC;AAAA,EACA,6BAA6B;AAEzB,QAAI,KAAK,qBAAqB;AAC1B,YACI,KAAoB,MACpB,EAAE,cAAc,IAAI;AAGxB,SAAG,gBAAgB;AACnB,SAAG,YAAY,GAAG;AAClB,SAAG,sBAAsB;AACzB,SAAG,gBAAgB;AAAA,IACvB;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,YAAY;AACR,SAAK,QAAQ,SAAS;AACtB,SAAK,mBAAmB,KAAK;AAC7B,UAAM,UAAU;AAAA,EACpB;AAAA,EACA,OAAO,WAAW,MAAM;AACpB,UAAM,WAAW,IAAI;AACrB,WAAO,UAAU,SAAS,UAAU;AACpC,WAAO,UAAU,WAAW,UAAU;AAAA,EAC1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA0CA,YAAY,QAAQ,SAAS,YAAY;AACrC,QAAI,QAAQ,MAAM,GAAG;AACjB,eAAS,IAAI,GAAG,EAAE,OAAO,IAAI,QAAQ,IAAI,QAAQ,KAAK;AAClD,aAAK,YAAY,OAAO,CAAC,GAAG,OAAO;AAAA,MACvC;AACA;AAAA,IACJ;AACA,UACI,KAAmB,MACnB,mBAAmB,GAAG,MAAM,aAAa,kBAAkB;AAC/D,QAAI,OAAO,WAAW,UAAU;AAG5B,aAAO,GAAG,YAAY;AAAA,QAClB,CAAC,MAAM,GAAM;AAAA,QACb,YAAa,QAAQ,eAAe;AAAA,QACpC,SAAa;AAAA,MACjB,CAAC;AAAA,IACL,OACK;AAED,gBAAU,OAAO,UAAU,OAAO,YAAY,SAAY,OAAO,UAAU;AAC3E,iBAAW,OAAO,QAAQ;AAEtB,YAAI,CAAC,kBAAkB,GAAG,KAAK,OAAO,GAAG,KAAK,MAAM;AAEhD,gBAEI,YAAkB,IAAI,YAAY,GAClC,kBAAkB,qDAAmB,YACrC,SAAkB,GAAG,mBAAmB,GAAG,iBAAiB,CAAC,IAC7D,eAAkB,OAAO,GAAG,GAC5B,UAAkB,aAAa,WAAW,OAAO,SACjD,WAAkB;AAAA,YACd,IAAY,OAAO,iBAAiB,WAAW,aAAa,KAAK;AAAA,YACjE,SAAY,aAAa,YAAY,SAAY,aAAa,UAAU;AAAA,YACxE,MAAY,aAAa,QAAQ,OAAO;AAAA,YACxC,MAAY,aAAa,SAAS,SAAY,aAAa,OAAO,OAAO,SAAS,SAAY,OAAO,OAAO;AAAA,YAC5G,MAAY,aAAa,SAAS,SAAY,aAAa,OAAO,OAAO,SAAS,SAAY,OAAO,OAAO;AAAA,YAC5G,QAAY,aAAa,UAAU,OAAO;AAAA,YAC1C,UAAY,aAAa,YAAY,OAAO;AAAA,YAC5C,WAAY,OAAO;AAAA,YACnB,UAAY,QAAQ;AAAA,UACxB;AACJ,cAAI,iBAAiB;AACjB,kBAAM,EAAE,SAAS,oBAAoB,QAAQ,IAAI;AACjD,0BAAc,UAAU,SAAS,oBAAoB,OAAO;AAAA,UAChE;AACA,cAAI,SAAS;AAET,kBACI,EAAE,IAAI,IAAI,SACVC,SAAU,MAAM,QAAQ,QAAQ,SAChCC,QAAU,OAAO,QAAQ,KACzBC,MAAU,MAAM;AACZ,iBAAG,GAAG,WAAW,QAAQ;AAEzB,kBAAI,OAAO,CAAC,SAAS,QAAQ;AACzB,mBAAG,SAAS,KAAK,OAAO;AAAA,cAC5B;AAAA,YACJ;AACJ,gBAAI,GAAG,aAAa;AAChB,iBAAG,WAAW,EAAE,IAAAA,KAAI,MAAAD,OAAM,mBAAoB,MAAM,OAAAD,OAAM,CAAC;AAAA,YAC/D,OACK;AACD,yBAAW,WAAWE,KAAIF,MAAK;AAAA,YACnC;AAAA,UACJ;AACA,cAAI,YAAY,OAAO,SAAS,MAAM,OAAO,SAAS,IAAI,CAAC;AAC3D,cAAI,UAAU,SAAS;AACnB,mBAAO,SAAS,IAAI,YAAY,UAAU,MAAM;AAAA,UACpD;AAEA,oBAAU;AAAA,YACN,YAAY,mBAAmB,UAAU,WAAW,oBAAoB,UAAU,MAAM;AAAA,YACxF;AAAA,YAAG;AAAA,UAAQ;AACf,cAAI,CAAC,GAAG,SAAS,WAAW,UAAU,SAAS,GAAG;AAC9C,eAAG,SAAS,SAAS;AAAA,UACzB;AAAA,QACJ;AAAA,MACJ;AACA,UAAI,OAAO,UAAU;AACjB,WAAG,SAAS,OAAO,QAAQ;AAAA,MAC/B;AAGA,UAAI,WAAW,YAAY,IAAI;AAC3B,WAAG,mBAAmB,QAAQ,OAAO;AAAA,MACzC;AACA,YACI,aAAa,OAAO,eAAe,OACnC,OAAa,OAAO,MACpB,UAAc,OAAO,WAAW,cAAc,OAAQ,MAAM;AAExD,YAAI,CAAC,GAAG,aAAa;AACjB,aAAG,eAAe,QAAQ,OAAO;AAAA,QACrC;AAAA,MACJ,IAAI;AACR,UAAI,SAAS;AACT,gBAAQ,UAAU;AAClB,gBAAQ,eAAe;AACvB,YAAI,SAAQ,mCAAS,gBAAe;AAChC,kBAAQ,cAAc,MAAM,OAAO;AAAA,QACvC;AACA,YAAI,OAAO,SAAS;AAEhB,aAAG,MAAM,SAAS,MAAM,OAAO,OAAO,IAAI,OAAO,QAAQ,QAAQ,OAAO,SAAS,IAAI;AAAA,QACzF;AACA,YAAI,YAAY;AACZ,iBAAO;AAAA,QACX;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAwCA,GAAG,QAAQ,SAAS,YAAY;AAC5B,WAAO,KAAK,YAAY,QAAQ,SAAS,UAAU;AAAA,EACvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,IAAI,QAAQ;AACR,WAAO,YAAY;AACnB,WAAO,KAAK,GAAG,MAAM;AAAA,EACzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,MAAM;AACR,SAAK,eAAe,GAAG,IAAI;AAAA,EAC/B;AAAA,EACA,wBAAwB,mBAAmB,sBAAsB;AAC7D,iEAAsB;AACtB,QAAI,mBAAmB;AACnB,wBAAkB,SAAS,KAAK,IAAI,iBAAiB;AAAA,IACzD;AAAA,EACJ;AAAA,EACA,IAAI,YAAY;AACZ,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,gBAAgB,WAAW;AAGvB,QAAI,KAAK,eAAe;AAEpB,WAAK,UAAU,mBAAmB;AAClC,UAAI,WAAW;AACX,aAAK,GAAG,WAAW,IAAI;AAAA,MAC3B;AAAA,IACJ,OAIK;AAQD,UAAI,MAAM,QAAQ,SAAS,GAAG;AAC1B,iBAAS,IAAI,GAAG,IAAI,UAAU,CAAC,GAAG,EAAE,OAAO,IAAI,WAAW,IAAI,QAAQ,IAAI,UAAU,EAAE,CAAC,GAAG;AACtF,cAAI,EAAE,aAAa,IAAI;AACnB,sBAAU,CAAC,IAAI,QAAQ,OAAO,EAAE,SAAU,KAAK,GAAG,CAAC;AAAA,UACvD;AAAA,QACJ;AAAA,MACJ,WACS,aAAa,EAAE,aAAa,YAAY;AAC7C,oBAAY,QAAQ,OAAO,EAAE,SAAU,KAAK,GAAG,SAAS;AAAA,MAC5D;AACA,aAAO;AAAA,IACX;AAAA,EACJ;AAAA,EACA,gBAAgB,WAAW,cAAc;AAErC,oBAAgB,KAAK,GAAG,YAAY;AACpC,iBAAa,KAAK,GAAG,SAAS;AAAA,EAClC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,eAAe,QAAQ,UAAU,OAAO,SAAS,YAAY;AACzD,UAAM,KAAK;AACX,QAAI,OAAO,WAAW,UAAU;AAC5B,aAAO,GAAG,eAAe,EAAE,CAAC,MAAM,GAAI,QAAQ,GAAG,UAAU;AAAA,IAC/D;AACA,WAAO,QAAQ,MAAM,EAAE,QAAQ,CAAC,CAAC,WAAW,gBAAgB,MAAM;AAC9D,UAAI,CAAC,kBAAkB,SAAS,KAAK,oBAAoB,MAAM;AAC3D,oBAAY,UAAU,YAAY;AAClC,cACI,iBAAiB,GAAG,gBACpB,QAAQ,GAAG,aAAa,WAAW,kBAAkB,OAAO;AAChE,YAAI,SAAS,GAAG;AACZ,cAAI,YAAY,eAAe,SAAS;AACxC,cAAI,UAAU,SAAS,GAAG;AACtB,gBAAI,UAAU,SAAS;AACnB,6BAAe,SAAS,IAAI,YAAY,UAAU,MAAM;AAAA,YAC5D;AAGA,sBAAU,OAAO,OAAO,CAAC;AAAA,UAC7B,OACK;AACD,mBAAO,eAAe,SAAS;AAC/B,gBAAI,CAAC,GAAG,WAAW,SAAS;AACxB,iBAAG,WAAW,SAAS;AAAA,YAC3B;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ,CAAC;AACD,QAAI,OAAO,WAAW,CAAC,OAAO,QAAQ,aAAa;AAC/C,SAAG,mBAAmB,MAAM;AAAA,IAChC;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,aAAa,WAAW,gBAAgB,gBAAgB;AA75B5D;AA85BQ,UACI,kBAAiB,UAAK,mBAAL,mBAAsB,YACvCE,MAAiB,eAAe,MAAM,gBACtC,UAAiB,eAAe,WAAW;AAC/C,QAAI,gBAAgB;AAChB,eAAS,eAAe,IAAI,GAAG,EAAE,OAAO,IAAI,gBAAgB,IAAI,QAAQ,KAAK;AACzE,wBAAgB,eAAe,CAAC;AAChC,YAAI,cAAc,OAAOA,OAAM,cAAc,YAAY,SAAS;AAC9D,iBAAO;AAAA,QACX;AAAA,MACJ;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,YAAY,WAAW;AAj7B3B;AAk7BQ,WAAO,SAAQ,UAAK,mBAAL,mBAAsB,uCAAW,cAAc;AAAA,EAClE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAeA,SAAS,SAAS,QAAQ,gBAAgB,MAAM;AAC5C,QAAI,CAAC,KAAK,iBAAiB;AACvB,WAAK,kBAAkB,CAAC;AAAA,IAC5B;AACA,UAAM,kBAAkB,KAAK;AAC7B,YAAQ,GAAG;AAAA,MACP,eAAgB,CAAC,EAAE,OAAO,MAAM;AAC5B,YAAI,WAAW,SAAS;AACpB,gBAAM,UAAU,gBAAgB,OAAO,OAAK,EAAE,YAAY,OAAO;AACjE,kBAAQ,QAAQ,YAAU,YAAY,OAAO,iBAAiB,MAAM,CAAC;AAAA,QACzE;AAAA,MACJ;AAAA,IACJ,CAAC;AACD,oBAAgB,KAAK,EAAE,SAAS,QAAQ,cAAc,CAAC;AAAA,EAC3D;AAAA;AAAA;AAAA;AAAA,EAIA,mBAAmB,mBAAmB,MAAM;AAp9BhD;AAq9BQ,UAAM,YAAY,KAAK;AACvB,QAAI,GAAG;AACP,eAAW,SAAS,WAAW;AAC3B,YAAMC,UAAS,UAAU,KAAK;AAG9B,WAAK,IAAIA,QAAO,QAAQ,MAAM,KAAgB;AAC1C,cAAM,MAAMA,QAAO,CAAC;AACpB,YAAI,CAAC,IAAI,aAAa,CAAC,kBAAkB;AACrC,eAAK,eAAe,OAAO,GAAG;AAC9B,oBAAU,IAAI;AACd,mDAAS,qBAAT,iCAA4B;AAAA,QAChC;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,YAAY,QAAQ,YAAY,SAAS,IAAI;AACzC,UAAM,iBAAiB,EAAE,YAAa,MAAM,SAAU,KAAK;AAC3D,eAAW,QAAQ,eAAa;AAC5B,qBAAe,SAAS,IAAI,CAAC,UAAU,WAAW;AAC9C,eAAO,KAAK,QAAQ,SAAS,WAAW,OAAO,GAAG,MAAM;AAAA,MAC5D;AAAA,IACJ,CAAC;AACD,WAAO,OAAO,GAAG,cAAc;AAAA,EACnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,WAAW;AAAA,EAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMZ,aAAa;AAAA,EAAC;AAAA,EACd,wBAAwB;AACpB,UAAM,EAAE,eAAe,QAAQ,cAAc,IAAI;AAIjD,aAAS,IAAI,GAAG,IAAI,cAAc,QAAQ,KAAK;AAC3C,YAAM,EAAE,YAAY,OAAO,IAAI,cAAc,CAAC;AAC9C,UAAI,CAAC,WAAW,aAAa;AACzB,mBAAW,eAAe,QAAQ,MAAM;AAAA,MAC5C;AAAA,IACJ;AACA,kBAAc,KAAK,MAAM;AAAA,EAC7B;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,mBAAmB,QAAQ,SAAS;AAChC,UACI,SAAiB,OAAO,WAAW,SAEnC,iBAAkB,eAAe,SAAU,cAAc;AAC7D,QAAI,kBAAkB,QAAQ;AAC1B,UAAI,EAAE,eAAe,IAAI;AACzB,UAAI,CAAC,gBAAgB;AACjB,eAAO,iBAAiB,iBAAiB,CAAC;AAAA,MAC9C;AACA,UAAI,CAAC,OAAO,gBAAgB;AACxB,eAAO,iBAAiB,OAAO,cAAc;AAG7C,eAAO,cAAc,IAAI,KAAK,sBAAsB,KAAK;AAAA,UACrD,eAAgB;AAAA,UAChB,eAAgB,OAAO;AAAA,UACvB;AAAA,QACJ,CAAC;AAAA,MACL;AACA,qBAAe,KAAK,EAAE,QAAQ,YAAa,KAAK,CAAC;AAAA,IACrD,OACK;AACD,aAAO,cAAc,IAAI,MAAM;AAC3B,aAAK,eAAe,MAAM;AAAA,MAC9B;AAAA,IACJ;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,mBAAmB,QAAQ;AACvB,UAAM,SAAS,OAAO;AAItB,QAAI,OAAO,kBAAkB,CAAC,OAAO,cAAc;AAC/C,kBAAY;AAAA,QACR,OAAO;AAAA,QACP,OAAO,eAAe,KAAK,cAAY,SAAS,WAAW,UAAU,SAAS,eAAe,IAAI;AAAA,MACrG;AACA,UAAI,CAAC,OAAO,eAAe,QAAQ;AAC/B,eAAO,eAAe,SAAS,cAAc,SAAS,IAAI,OAAO;AACjE,eAAO,iBAAiB;AAAA,MAC5B;AAAA,IACJ;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA,EAIA,MAAM,WAAW,UAAU,EAAE,UAAW,MAAM,UAAW,MAAM,MAAO,KAAK,GAAG;AAC1E,UAAM,KAAK;AACX,QAAI,YAAY,OAAO;AACnB,gBAAU,EAAE,UAAW,MAAM;AAAA,IACjC;AACA,UAAM,EAAE,KAAK,IAAI;AACjB,WAAO,IAAI,QAAQ,aAAW;AApkCtC;AAskCY,UAAI,QAAQ,cAAY,QAAG,eAAH,mBAAgB,aAAY;AAEhD,gBAAQ;AAER,YAAI,QAAQ,UAAU;AAClB,aAAG,SAAS,SAAS;AAAA,QACzB;AAAA,MACJ;AAEA,UAAI,MAAM;AACN,cAAM,WAAW,GAAG,GAAG;AAAA,UACnB,CAAC,SAAS,GAAI,IAAI,WAAW;AACzB,kBAAM,SAAS,OAAO,KAAK,IAAI,EAAE,MAAM,SAAO;AAC1C,qBAAO,OAAO,OAAO,CAAC,KAAK,OAAO,CAAC,EAAE,GAAG,MAAM,KAAK,GAAG;AAAA,YAC1D,CAAC;AACD,gBAAI,QAAQ;AAER,sBAAQ,GAAG,MAAM;AAEjB,kBAAI,QAAQ,UAAU;AAClB,mBAAG,SAAS,SAAS;AAAA,cACzB;AACA,uBAAS;AAAA,YACb;AAAA,UACJ;AAAA,UACA,MAAO;AAAA;AAAA,QACX,CAAC;AAAA,MACL,OACK;AACD,WAAG,GAAG;AAAA,UACF,CAAC,SAAS,GAAI,IAAI,WAAW;AAEzB,oBAAQ,GAAG,MAAM;AAEjB,gBAAI,QAAQ,UAAU;AAClB,iBAAG,SAAS,SAAS;AAAA,YACzB;AAAA,UACJ;AAAA,UACA,MAAO;AAAA;AAAA,UACP,MAAO;AAAA;AAAA,QACX,CAAC;AAAA,MACL;AAAA,IACJ,CAAC;AAAA,EACL;AAAA,EACA,SAAS,WAAW;AAChB,QAAI,KAAK,YAAY;AACjB,UAAI,WAAW;AACX,eAAO,KAAK,WAAW,SAAS;AAAA,MACpC,OACK;AACD,aAAK,aAAa,CAAC;AAAA,MACvB;AAAA,IACJ;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAeA,QAAQ,WAAW,OAAO;AA1oC9B;AA2oCQ,UACI,KAAO,MACP,OAAO,UAAU,YAAY,GAC7B;AAAA,MACI;AAAA,MACA;AAAA,MACA;AAAA,IACJ,IAAM;AACV,QAAI,aAAY,QAAG,mBAAH,mBAAoB,OAChC;AAEJ,QAAI,CAAC,GAAG,YAAY;AAChB,SAAG,aAAa,CAAC;AAAA,IACrB;AACA,OAAG,WAAW,SAAS,IAAI;AAC3B,QAAI,iBAAiB;AACjB,UAAI,gBAAgB,aAAa;AAC7B,wBAAgB,MAAM,KAAK,SAAS;AAAA,MACxC;AACA,aAAO;AAAA,IACX;AAGA,SAAI,QAAG,mBAAH,mBAAmB,UAAU;AAC7B,OAAC,YAAa,YAAY,UAAU,MAAM,IAAI,CAAC,GAAI,KAAK,GAAG,GAAG,eAAe,QAAQ;AAErF,gBAAU,KAAK,kBAAkB;AAAA,IACrC;AACA,QAAI,CAAC,aAAa,CAAC,mBAAmB,CAAC,iBAAiB;AACpD,aAAO;AAAA,IACX;AAEA,QAAI,OAAO;AACP,UAAI,EAAE,YAAY,QAAQ;AACtB,YAAI,OAAO,aAAa,KAAK,GAAG;AAC5B,gBAAM,SAAS;AAAA,QACnB,OACK;AACD,kBAAQ,OAAO,eAAe;AAAA,YAC1B,QAAS;AAAA,UACb,GAAG,KAAK;AAAA,QACZ;AAAA,MACJ;AAAA,IACJ,OACK;AACD,cAAQ;AAAA,QACJ,QAAS;AAAA,MACb;AAAA,IACJ;AAEA,QAAI,MAAM,SAAS,MAAM;AAErB,UAAI,MAAM,gBAAgB,QAAQ;AAC9B,gBAAQ,eAAe,OAAO,QAAQ,EAAE,KAAM,MAAM,KAAK,CAAC;AAAA,MAC9D,OACK;AACD,cAAM,OAAO;AAAA,MACjB;AAAA,IACJ;AACA,UAAM,YAAY;AAElB,QAAI,EAAE,aAAa,YAAU,QAAG,iBAAH,mBAAkB,aAAY;AACvD,YAAM,UAAU,GAAG,aAAa,SAAS;AAAA,IAC7C;AACA,QAAI,iBAAiB;AACjB,YAAM,SAAS,OAAO,aAAa,WAAW,SAAS;AACvD,UAAI,UAAU,IAAI;AAEd,cAAM,SAAS,GAAG,MAAM,IAAI,GAAG,SAAS,GAAG,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI;AACnE,YAAI;AACJ,YAAI,QAAQ,UAAU,MAAM,GAAG;AAC3B,WAAC,oBAAoB,kBAAkB,CAAC,IAAI,KAAK,MAAM;AAAA,QAC3D,OACK;AACD,oBAAU,WAAW,SAAS;AAAA,QAClC;AAMA,YAAI,CAAC,GAAG,eAAeL,gBAAe,KAAK,IAAI,MAAM,KAAK,GAAC,QAAG,wBAAH,mBAAyB,UAAS;AACzF,gBAAM,UAAU,OAAO,eAAe,EAAE;AACxC,cAAI,UAAU,SAAS;AACnB,kBAAMM,UAAS,QAAQ,MAAM,EAAE,KAAK,IAAI,KAAK;AAC7C,gBAAI,QAAQ,UAAUA,OAAM,GAAG;AAC3B,eAAC,oBAAoB,kBAAkB,CAAC,IAAI,KAAKA,OAAM;AAAA,YAC3D,OACK;AACD,wBAAUA,YAAW,SAAS;AAAA,YAClC;AAEA,gBAAI,GAAG,aAAa;AAChB;AAAA,YACJ;AAAA,UACJ;AAAA,QACJ;AAEA,YAAI,SAAS;AACT,iBAAO;AAAA,QACX;AAAA,MACJ;AAAA,IACJ;AACA,QAAI;AACJ,QAAI,WAAW;AACX,UAAI,IAAI,GAAG,gBAAgB;AAG3B,gBAAU,UAAU;AAEpB,WAAK,GAAG,IAAI,UAAU,UAAU,CAAC,GAAG,eAAe,CAAC,eAAe,KAAK;AACpE,cAAM,WAAW,UAAU,CAAC;AAG5B,YAAI,QAAQ,SAAS,CAAC,SAAS,WAAW;AACtC;AAAA,QACJ;AACA,YAAI,SACA,UAAU,SAAS;AAGvB,YAAI,CAAC,WAAW,CAAC,QAAQ,aAAa;AAElC,mBAAS,SAAS;AAClB,cAAI,SAAS,MAAM;AACf,eAAG,eAAe,MAAM,QAAQ;AAAA,UACpC;AAEA,cAAI,OAAO,SAAS,OAAO,UAAU;AACjC,gBAAI,SAAS;AACT,wBAAU,QAAQ,SAAS,EAAE;AAAA,YACjC;AAEA,gBAAI,CAAC,SAAS;AACV,oBAAMA,UAAS,GAAG,gBAAgB,SAAS,EAAE;AAC7C,wBAAUA,QAAO;AACjB,wBAAUA,QAAO;AAAA,YACrB;AAAA,UACJ,OACK;AACD,sBAAU,SAAS;AAAA,UACvB;AAGA,cAAI,SAAS,QAAQ;AACjB,gBAAI,CAAC,SAAS,UAAU;AACpB,oBAAM,SAAS,OAAO,SAAS,MAAM;AACrC,kBAAI,OAAO,WAAW,YAAY,MAAM,MAAM,GAAG;AAC7C,sBAAM,IAAI,MAAM,mCAAmC,6BAA6B;AAAA,cACpF;AACA,uBAAS,WAAW,eAAe,eAAe,SAAS,QAAQ,SAAS,SAAS,IAAI;AAAA,YAC7F;AACA,sBAAU,SAAS;AAAA,UACvB;AAGA,cAAI,SAAS,UAAU;AACnB,kBAAM,WAAW,OAAO,SAAS,QAAQ;AACzC,gBAAI,OAAO,aAAa,YAAY,MAAM,QAAQ,GAAG;AACjD,oBAAM,IAAI,MAAM,qCAAqC,+BAA+B;AAAA,YACxF;AACA,gBAAI,CAAC,SAAS,aAAa;AACvB,uBAAS,cAAc,eAAe,gBAAgB,SAAS,UAAU,SAAS,SAAS,IAAI;AAAA,YACnG;AACA,sBAAU,SAAS;AAAA,UACvB;AACA,gBAAM,SAAS,QAAQ,KAAK,WAAW,IAAI,GAAI,SAAS,QAAQ,CAAC,GAAI,KAAK;AAG1E,cAAI,QAAQ,OAAO;AACf,kBAAM;AAAA,UACV;AACA,cAAI,SAAS,aAAa,WAAW,OAAO;AACxC,4BAAgB;AAAA,UACpB;AACA,cAAI,QAAQ,UAAU,MAAM,GAAG;AAC3B,mBAAO,YAAY,SAAS;AAK5B,aAAC,oBAAoB,kBAAkB,CAAC,IAAI,KAAK,MAAM;AAAA,UAC3D;AAAA,QACJ;AAAA,MACJ;AACA,gBAAU,UAAU;AAEpB,UAAI,eAAe;AACf,eAAO;AAAA,MACX;AAAA,IACJ;AAEA,uDAAiB,QAAQ,YAAU;AAC/B,UAAIH,QAAO;AACX,UAAI,OAAO,eAAe;AACtB,QAAAA,QAAO,aAAa,WAAWA,KAAI;AAAA,MACvC;AACA,UAAI,OAAO,QAAQ;AACf,QAAAA,QAAO,OAAO,SAASA;AAAA,MAC3B;AACA,UAAI,OAAO,QAAQ,QAAQA,OAAM,KAAK,MAAM,OAAO;AAC/C,eAAO;AAAA,MACX;AAAA,IACJ;AAKA,QAAI,MAAM,WAAW,GAAG,SAAS,CAAC,GAAG,MAAM,aAAa;AACpD,aAAO,GAAG,MAAM,QAAQ,WAAW,KAAK;AAAA,IAC5C;AAEA,sBAAkB,mDAAiB,OAAO,OAAK,QAAQ,SAAS,EAAE;AAGlE,QAAI,mDAAiB,QAAQ;AACzB,aAAO,IAAI,QAAQ,aAAW;AAC1B,gBAAQ,IAAI,eAAe,EAAE,KAAK,oBAAkB;AAChD,gBAAM,cAAc,CAAC,eAAe,KAAK,YAAU,WAAW,KAAK;AACnE,kBAAQ,WAAW;AAAA,QACvB,CAAC;AAAA,MACL,CAAC;AAAA,IACL;AACA,WAAO,QAAQ;AAAA,EACnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,cAAc,QAAQ,OAAO;AACzB,UAAM,kBAAkB,KAAK,oBAAoB,KAAK,kBAAkB,EAAE,aAAc,OAAO,OAAQ,CAAC,GAAG,OAAQ,EAAE;AACrH,oBAAgB;AAAA,EACpB;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,eAAe;AACX,UAAM,YAAY,KAAK;AACvB,QAAI,WAAW;AACX,UAAI,EAAE,UAAU,UAAU,GAAG;AACzB,aAAK,kBAAkB;AACvB,YAAI,UAAU,aAAa;AACvB,qBAAW,UAAU,UAAU,OAAO;AAClC,iBAAK,QAAQ,GAAG,MAAM;AAAA,UAC1B;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AACA,WAAO,CAAC,QAAQ,KAAK,eAAe;AAAA,EACxC;AAAA;AAEJ;;;ACjzCA,IAAqB,gBAArB,MAAkC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAS9B,OAAO,gBAAgB,SAAS;AAC5B,UAAM,SAAS,CAAC;AAChB,YAAQ,QAAQ,CAAAI,YAAU;AACtB,aAAO,KAAKA,OAAM,EAAE,QAAQ,SAAO;AAC/B,YAAI,OAAOA,QAAO,GAAG,MAAM,UAAU;AACjC,iBAAO,GAAG,IAAI,EAAE,GAAG,OAAO,GAAG,GAAG,GAAGA,QAAO,GAAG,EAAE;AAAA,QACnD,OACK;AACD,iBAAO,GAAG,IAAIA,QAAO,GAAG;AAAA,QAC5B;AAAA,MACJ,CAAC;AAAA,IACL,CAAC;AACD,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,OAAO,WAAWA,SAAQ,QAAQ;AAC9B,UAAM,SAAS,CAAC,KAAK,WAAW;AAC5B,UAAIA,QAAO,GAAG,GAAG;AACb,YAAI,QAAQ;AACR,cAAIA,QAAO,GAAG,EAAE,MAAM,GAAG;AACrB,mBAAOA,QAAO,GAAG,EAAE,MAAM;AAAA,UAC7B;AAAA,QACJ,OACK;AACD,iBAAOA,QAAO,GAAG;AAAA,QACrB;AAAA,MACJ;AAAA,IACJ;AACA,WAAO,KAAK,MAAM,EAAE,QAAQ,SAAO;AAC/B,UAAI,OAAO,KAAK,OAAO,GAAG,CAAC,EAAE,SAAS,GAAG;AACrC,eAAO,KAAK,OAAO,GAAG,CAAC,EAAE,QAAQ,YAAU,OAAO,KAAK,MAAM,CAAC;AAAA,MAClE,OACK;AACD,eAAO,GAAG;AAAA,MACd;AAAA,IACJ,CAAC;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAgCA,OAAO,gBAAgB,cAAc,QAAQ;AACzC,QAAI,CAAC,cAAc;AACf,YAAM,IAAI,MAAM,2CAA2C;AAAA,IAC/D;AACA,QAAI,OAAO,iBAAiB,UAAU;AAClC,UAAI,CAAC,QAAQ;AACT,cAAM,IAAI,MAAM,qCAAqC;AAAA,MACzD;AACA,UAAI,OAAO,QAAQ;AAEf,eAAO,OAAO,gBAAgB,OAAO;AAAA,MACzC,OACK;AACD,eAAO,aAAa;AAAA,MACxB;AAAA,IACJ,OACK;AACD,eAAS;AAAA,IACb;AACA,QAAIA,UAAS,CAAC;AACd,QAAI,OAAO,QAAQ,OAAO,QAAQ;AAE9B,MAAAA,UAAS,OAAO,OAAO;AAAA,QACnB,YAAa,OAAO;AAAA,MACxB,GAAG,OAAO,MAAM;AAChB,aAAO,SAASA,QAAO,aAAa,OAAO;AAC3C,aAAO,SAASA,QAAO,aAAa,OAAO;AAC3C,aAAO,SAASA,QAAO,aAAa,OAAO;AAAA,IAC/C,OACK;AACD,UAAI,CAAC,OAAO,YAAY;AACpB,cAAM,IAAI,MAAM,uDAAuD;AAAA,MAC3E;AAEA,MAAAA,UAAS,OAAO,OAAO,CAAC,GAAG,MAAM;AAAA,IACrC;AAEA,eAAW,OAAO,CAAC,QAAQ,QAAQ,QAAQ,MAAM,GAAG;AAChD,UAAIA,QAAO,GAAG,GAAG;AACb,eAAOA,QAAO,GAAG;AAAA,MACrB;AAAA,IACJ;AACA,QAAI,CAACA,QAAO,YAAY;AACpB,YAAM,IAAI,MAAM,8BAA8B;AAAA,IAClD;AACA,WAAOA;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAiBA,WAAW,UAAU;AACjB,WAAO,WAAW,QAAQ,WAAW,CAAC;AAAA,EAC1C;AAAA,EACA,WAAW,QAAQ,SAAS;AACxB,eAAW,QAAQ,UAAU;AAAA,EACjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,WAAW,aAAa;AACpB,WAAO,WAAW,QAAQ,UAAU;AAAA,EACxC;AAAA,EACA,WAAW,WAAW,YAAY;AAC9B,eAAW,QAAQ,SAAS,cAAc,cAAa;AAAA,EAC3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,WAAW,SAAS;AAChB,WAAO,cAAa,cAAc,KAAK,QAAQ,cAAa,UAAU,KAAK,KAAK,QAAQ,MAAM,OAAO,OAAO,KAAK,OAAO,EAAE,CAAC,KAAK,EAAE,YAAa,IAAI,YAAa,IAAI,aAAc,GAAG;AAAA,EACzL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAiDA,OAAO,cAAc,cAAc,QAAQ;AACvC,UACI,EAAE,QAAQ,IAAO,WAAW,SAC5BA,UAAiB,cAAa,gBAAgB,cAAc,MAAM,GAClE,EAAE,WAAW,IAAIA;AACrB,QAAI,CAAC,QAAQ,UAAU,KAAK,WAAW,MAAM;AACzC,cAAQ,UAAU,IAAIA;AAAA,IAC1B,OACK;AACD,cAAQ,UAAU,IAAI,KAAK,aAAa,QAAQ,UAAU,KAAK,CAAC,GAAGA,WAAU,CAAC,CAAC;AAAA,IACnF;AACA,WAAO,QAAQ,UAAU;AAAA,EAC7B;AACJ;AA1OA,IAAqB,eAArB;AACI,cADiB,cACV,4BAA2B;AA0OtC,WAAW,UAAU,WAAW,WAAW,CAAC;AAC5C,WAAW,QAAQ,UAAU,WAAW,QAAQ,WAAW,CAAC;AAC5D,aAAa,SAAS;;;AC1TtB,IAAM,gBAAN,cAA4B,eAAOC,KAAI,EAAE;AAAA,EACrC,WAAW,gBAAgB;AACvB,WAAO;AAAA;AAAA,MAEH,sBAAuB,cAAc;AAAA,IACzC;AAAA,EACJ;AAAA,EACA,aAAa,MAAM;AAjBvB;AAkBQ,UAAM,KAAK;AACX,UAAM,UAAU,GAAG,IAAI;AACvB,QAAI,cAAc,cAAc;AAE5B,YAAM,YAAY,SAAS,cAAc,6BAA6B;AACtE,UAAI,WAAW;AACX,WAAG,YAAY,UAAU,QAAQ,aAAa;AAAA,MAClD,YACS,QAAG,WAAH,mBAAW,YAAY;AAC5B,WAAG,YAAY,GAAG,OAAO,UAAU;AAAA,MACvC;AAAA,IACJ;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,IAAI,UAAU;AACV,WAAO,aAAa;AAAA,EACxB;AAAA,EACA,IAAI,QAAQ,SAAS;AACjB,iBAAa,UAAU;AAAA,EAC3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,IAAI,OAAO,cAAc;AACrB,SAAK,YAAY,YAAY;AAAA,EACjC;AAAA,EACA,IAAI,SAAS;AACT,WAAO,aAAa;AAAA,EACxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,eAAe,cAAc,QAAQ;AACjC,kBAAc,UAAU,QAAQ,SAAS,iFAAiF;AAC1H,iBAAa,cAAc,cAAc,MAAM;AAAA,EACnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,aAAa,MAAM,QAAQ;AACvB,kBAAc,UAAU,QAAQ,SAAS,8EAA8E;AACvH,UAAMC,UAAS,aAAa,cAAc,MAAM,MAAM;AACtD,WAAO,KAAK,YAAYA,SAAQ,IAAI;AAAA,EACxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAaA,YAAY,cAAc,QAAQ,cAAc,OAAO;AACnD,UAAM,KAAK;AACX,QAAI;AACJ,QAAI,OAAO,iBAAiB,UAAU;AAClC,UAAI,OAAO,WAAW,UAAU;AAC5B,uBAAe,GAAG,QAAQ,YAAY;AACtC,YAAI,CAAC,cAAc;AACf,cAAI,aAAa;AACb,mBAAO;AAAA,UACX;AACA,gBAAM,IAAI,MAAM,WAAW,4FAA4F;AAAA,QAC3H;AAAA,MACJ,OACK;AACD,uBAAe,aAAa,cAAc,cAAc,MAAM;AAAA,MAClE;AAAA,IACJ,OACK;AACD,qBAAe,aAAa,cAAc,YAAY;AAAA,IAC1D;AACA,QAAI,GAAG,OAAO,cAAc,GAAG,OAAO,eAAe,aAAa,cAAc,WAAW,MAAM;AAE7F,aAAO,GAAG;AAAA,IACd;AAEA,iBAAa,aAAa,aAAa;AACvC,UAAM,qBAAqB,MAAM;AAO7B,SAAG,QAAQ,UAAU,YAAY;AAAA,IACrC;AACA,QAAI,aAAa,YAAY;AACzB,aAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACpC,WAAG,WAAW,aAAa,UAAU,EAAE,KAAK,cAAY;AACpD,mBAAS,KAAK,EAAE,KAAK,UAAQ;AACzB,kBAAM,cAAc,IAAI,SAAS,IAAI;AACrC,wBAAY;AACZ,gBAAI,cAAc,cAAc;AAC5B,6BAAe,GAAG,QAAQ,aAAa,UAAU;AAEjD,kBAAI,cAAc;AACd,uBAAO,aAAa;AAAA,cACxB;AAAA,YACJ;AACA,+BAAmB;AACnB,oBAAQ,YAAY;AAAA,UACxB,CAAC;AAAA,QACL,CAAC,EAAE,MAAM,cAAY,OAAO,QAAQ,CAAC;AAAA,MACzC,CAAC;AAAA,IACL;AACA,uBAAmB;AACnB,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,WAAW,MAAM;AACb,WAAO,WAAW,IAAI,IAAI;AAAA,EAC9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,IAAI,qBAAqB,OAAO;AAC5B,SAAK,wBAAwB;AAAA,EACjC;AAAA,EACA,IAAI,uBAAuB;AACvB,WAAO,KAAK;AAAA,EAChB;AACJ;AACA,IAAM,yBAAyB,IAAI,cAAc;AA0CjD,IAAO,wBAAQ;;;AChNf,IACI,cAAkB,OAAO,eAAe,MAAM;AADlD,IAEI,WAAkB;AAFtB,IAGI,kBAAkB;AAHtB,IAII,eAAkB;AAJtB,IAKIC,UAAkB,CAAC,QAAQ,IAAI,QAAQ,aAAa,QAAQ;AALhE,IAMI,WAAkB,CAAC,QAAQ,IAAI,QAAQ,iBAAiB,MAAM;AANlE,IAOIC,eAAkB,OAAO,OAAO,uBAAO,OAAO,IAAI,CAAC;AAYvD,IAAO,sBAAQ,YAAU,MAAM,qBAAqB,UAAUC,OAAM;AAAA,EAChE,WAAW,QAAQ;AACf,WAAO;AAAA,EACX;AAAA,EACA,WAAW,eAAe;AACtB,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAgDH,aAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAOd,aAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAuBd,uBAAwB;AAAA,QACpB,OAAQ,CAAC;AAAA,QACT,SAAU;AAAA,UACN,OAAQ;AAAA,QACZ;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,OAAO,QAAQ,KAAK;AArHxB;AAsHQ,WAAO,OAAO,QAAQ,WAAW,MAAM,QAAQ,cAAc,WAAW,IAAI,UAAU,IAAI,UAAQ,SAAI,cAAJ,mBAAe,aAAU,SAAI,cAAJ,mBAAe;AAAA,EAC9I;AAAA,EACA,OAAO,kBAAkB,MAAM;AAC3B,UAAM,UAAU,CAAC;AACjB,QAAI;AAEJ,QAAI,6BAAM,SAAS,OAAO;AAEtB,aAAOF,QAAO,IAAI;AAClB,sBAAgB,YAAY;AAC5B,cAAQ,IAAI,gBAAgB,KAAK,IAAI,MAAM,MAAM;AAC7C,qBAAa,YAAY;AAEzB,cAAM,aAAa,aAAa,KAAK,EAAE,CAAC,CAAC;AACzC,gBAAQ,KAAK;AAAA,UACT,OAAc,SAAS,EAAE,CAAC,CAAC;AAAA,UAC3B,WAAc,SAAS,WAAW,CAAC,CAAC;AAAA,UACpC,aAAc,WAAW,CAAC;AAAA,QAC9B,CAAC;AAAA,MACL;AAAA,IACJ;AACA,WAAO,QAAQ,SAAS,IAClB,UACA,CAAC;AAAA,MACC,OAAc;AAAA,MACd,WAAc;AAAA,MACd,aAAc;AAAA,IAClB,CAAC;AAAA,EACT;AAAA,EACA,UAAU,SAAS,CAAC,MAAM,MAAM;AAE5B,UAAM,UAAU,QAAQ,GAAG,IAAI;AAC/B,0BAAc,IAAI,EAAE,QAAS,sBAAsB,SAAU,KAAK,CAAC;AACnE,SAAK,mBAAmB;AAAA,EAC5B;AAAA,EACA,IAAI,cAAc;AACd,WAAO,KAAK,gBAAgB;AAAA,EAChC;AAAA,EACA,iBAAiB,UAAU;AA5J/B;AA6JQ,UACI,KAAe,MACf,eAAe,QAAQ,QAAQ,IAAI,QAAQ,GAE3C,cAAe,QAAG,MAAM,QAAQ,QAAQ,MAAzB,mBAA4B,gBAAa,cAAG,aAAH,mBAAc,cAAd,mBAAyB;AACrF,QAAI;AAEJ,QAAI,WAAW;AACX,uBAAiB,YAAY,SAAS,WAAW,IAAI,GAAG,eAAe,EAAE;AAEzE,UAAI,kBAAkB,EAAE,aAAa,GAAG,iBAAiBC,gBAAe;AACpE,gBAAQ,QAAQ,GAAG,WAAW,GAAG,OAAO,IAAI,UAAU,cAAc;AAAA,MACxE;AAAA,IACJ,WACS,OAAO,iBAAiB,UAAU;AACvC,SAAG,kBAAkB,GAAG,mBAAmB,CAAC;AAC5C,uBAAiB,QAAQ,QAAQ,GAAG,iBAAiB,QAAQ;AAE7D,UAAI,mBAAmB,QAAW;AAC9B,gBAAQ,QAAQ,GAAG,iBAAiB,UAAU,YAAY;AAC1D,yBAAiB;AAAA,MACrB;AAEA,UAAI,gBAAgB;AAChB,gBAAQ,QAAQ,IAAI,UAAU,iBAAiB,GAAG,UAAU,gBAAgB,EAAE,CAAC;AAAA,MACnF;AAAA,IACJ;AACA,WAAO,kBAAkB;AAAA,EAC7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,qBAAqB;AAlMzB;AAmMQ,QAAI,KAAK,gBAAgB,OAAO;AAC5B,iBAAK,0BAAL,mBAA4B,QAAQ,KAAK,kBAAkB;AAC3D,iBAAK,YAAL,8BAAe;AAAA,IACnB;AAAA,EACJ;AAAA,EACA,OAAO,eAAe,MAAM,cAAc,WAAW;AACjD,UAAME,UAAS,sBAAc;AAC7B,QAAI,SAAS,MACT,SACA;AACJ,QAAIA,SAAQ;AAER,iBAAW,EAAE,OAAO,WAAW,YAAY,KAAK,KAAK,kBAAkB,IAAI,GAAG;AAC1E,cAAM,YAAY,CAACC,aAAY;AAhN/C;AAiNoB,gBAAM,eAAc,KAAAD,QAAOC,QAAO,MAAd,mBAAkB;AACtC,cAAI,aAAa;AACb,gBAAI,OAAO,gBAAgB,YAAY;AACnC,uBAAS,gBAAgB,OAAO,YAAY,YAAY,IAAI;AAAA,YAChE,WACS,OAAO,gBAAgB,YAAY,SAAS,OAAO;AACxD,uBAAS;AAAA,YACb,OAEK;AACD,wBAAU,UAAU,MAAM,QAAQ,OAAO,WAAW;AAAA,YACxD;AAEA,gBAAI,OAAO,gBAAgB,YAAY,YAAY,SAAS,IAAI,GAAG;AAC/D,uBAAS,KAAK,eAAe,aAAa,cAAc,SAAS;AAAA,YACrE;AAAA,UACJ;AACA,iBAAO;AAAA,QACX;AAKA,YAAI,UAAU;AACd,aAAK,MAAM,WAAW,QAAQ,UAAU,YAAY,QAAQ,GAAG,IAAI,MAAM,OAAO,eAAe,GAAG,GAAG;AACjG,cAAK,UAAU,UAAU,OAAO,GAAI;AAChC;AAAA,UACJ,WACS,OAAO,QAAQ,UAAU;AAC9B;AAAA,UACJ;AAAA,QACJ;AACA,YAAI,CAAC,WAAW,aAAa;AACzB,oBAAU,WAAW;AAAA,QACzB;AAAA,MACJ;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,OAAO,SAAS,MAAM,eAAe,WAAc,eAAe;AAG9D,SAAI,+CAAe,YAAW,GAAG;AAC7B,sBAAgB,CAAC,IAAI;AAAA,IACzB;AACA,QAAI,cAAc;AAClB,kBAAc,KAAK,SAAO;AACtB,oBAAc,YAAY,eAAe,MAAM,cAAc,GAAG;AAChE,aAAO,eAAe;AAAA,IAC1B,CAAC;AACD,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAaA,OAAO,EAAE,MAAM,eAAe,WAAc,eAAe;AAGvD,SAAI,+CAAe,YAAW,GAAG;AAC7B,sBAAgB,CAAC,IAAI;AAAA,IACzB;AACA,UAAM,cAAc,KAAK,SAAS,MAAM,cAAc,GAAG,aAAa;AAEtE,QACI,eAAe,QACf,sBAAc,wBACd,KAAK,SAAS,IAAI,GACpB;AACE,YAAM,IAAI,MAAM,kCAAkC,aAAa,cAAc,IAAI,SAAO,YAAY,QAAQ,GAAG,CAAC,EAAE,KAAK,IAAI,OAAO,sBAAc,OAAO,aAAa,YAAY,sBAAc,OAAO,eAAe,IAAI;AAAA,IAC5N;AACA,WAAO,oCAAe;AAAA,EAC1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAaA,EAAE,MAAM,cAAc;AAClB,UAAM,EAAE,aAAa,YAAY,IAAI;AAGrC,QAAI,eAAe,YAAY,QAAQ,WAAW,MAAM,YAAY,QAAQ,WAAW,GAAG;AACtF,aAAO,YAAY,EAAE,MAAM,cAAc,aAAa,WAAW;AAAA,IACrE,OACK;AACD,aAAO,YAAY,EAAE,MAAM,cAAc,WAAW;AAAA,IACxD;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAeA,OAAO,UAAU,MAAM,eAAe,WAAc,eAAe;AAC/D,UAAM,cAAc,sBAAc;AAClC,0BAAc,uBAAuB,eAAe,SAAS,KAAK,IAAI;AAGtE,SAAI,+CAAe,YAAW,GAAG;AAC7B,sBAAgB,CAAC,IAAI;AAAA,IACzB;AACA,UAAM,SAAS,YAAY,EAAE,MAAM,cAAc,GAAG,aAAa;AACjE,0BAAc,uBAAuB;AACrC,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAgBA,UAAU,MAAM,eAAe,MAAM,eAAe,OAAO;AACvD,UAAM,cAAc,sBAAc;AAElC,0BAAc,uBAAuB,eAAe,SAAS,KAAK,IAAI,KAAK,CAAC;AAC5E,UAAM,SAAS,KAAK,EAAE,MAAM,YAAY;AACxC,0BAAc,uBAAuB;AACrC,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,IAAI,gBAAgB;AAChB,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,IAAI,eAAe;AACf,WAAO;AAAA,EACX;AACJ;;;ACpYA,IAAM,SAAS;AAAA,EACX,YAAa;AAAA,EACb,YAAa;AAAA,EACb,YAAa;AAAA,EACb,QAAS;AAAA,IACL,KAAS;AAAA,IACT,IAAS;AAAA,IACT,QAAS;AAAA,IACT,IAAS;AAAA,IACT,MAAS;AAAA,EACb;AAAA,EACA,OAAQ;AAAA,IACJ,WAAqB;AAAA,IACrB,oBAAqB;AAAA,IACrB,aAAqB,WAAS,OAAO;AAAA,EACzC;AAAA,EACA,YAAa;AAAA,IACT,MAAO;AAAA,EACX;AAAA,EACA,OAAQ;AAAA,IACJ,UAAwB;AAAA,IACxB,iBAAwB;AAAA,IACxB,eAAwB,WAAS,uCAAuC,MAAM;AAAA,IAC9E,gBAAwB,WAAS,0CAA0C,MAAM;AAAA,IACjF,cAAwB;AAAA,IACxB,SAAwB;AAAA,IACxB,UAAwB;AAAA,IACxB,cAAwB;AAAA,IACxB,cAAwB;AAAA,IACxB,cAAwB;AAAA,IACxB,uBAAwB;AAAA,IACxB,uBAAwB;AAAA,IACxB,eAAwB;AAAA,IACxB,gBAAwB;AAAA,EAC5B;AAAA,EACA,WAAY;AAAA,IACR,aAAc;AAAA,EAClB;AAAA,EACA,YAAa;AAAA,IACT,cAAgB;AAAA,IAChB,eAAgB;AAAA,IAChB,eAAgB;AAAA,IAChB,cAAgB;AAAA,EACpB;AAAA,EACA,cAAe;AAAA,IACX,QAAW;AAAA,IACX,UAAW;AAAA,EACf;AAAA,EACA,eAAgB;AAAA,IACZ,aAAc;AAAA,EAClB;AAAA,EACA,WAAY;AAAA,IACR,aAAc;AAAA,EAClB;AAAA,EACA,YAAa;AAAA,IACT,MAAS;AAAA,IACT,QAAS;AAAA,IACT,QAAS;AAAA,EACb;AAAA,EACA,MAAO;AAAA,IACH,SAAU;AAAA,EACd;AAAA,EACA,UAAW;AAAA,IACP,UAAW;AAAA,IACX,UAAW;AAAA,EACf;AAAA,EACA,eAAgB;AAAA,IACZ,WAAoB;AAAA,IACpB,UAAoB;AAAA,IACpB,MAAoB;AAAA,IACpB,UAAoB;AAAA,IACpB,UAAoB;AAAA,IACpB,QAAoB;AAAA,IACpB,WAAoB;AAAA,IACpB,mBAAoB,UAAQ,MAAM,KAAK;AAAA,IACvC,iBAAoB,UAAQ,sBAAsB,KAAK,WAAW,KAAK,UAAU,KAAK;AAAA,EAC1F;AAAA,EACA,gBAAiB;AAAA,IACb,UAAW;AAAA,IACX,QAAW;AAAA,EACf;AAAA,EACA,OAAQ;AAAA,IACJ,OAAQ;AAAA,EACZ;AAAA,EACA,UAAW;AAAA,IACP,MAAiB;AAAA,IACjB,MAAiB;AAAA,IACjB,gBAAiB;AAAA,IACjB,gBAAiB;AAAA,IACjB,WAAiB;AAAA,EACrB;AAAA,EACA,mBAAoB;AAAA,IAChB,QAAyB;AAAA,IACzB,cAAyB;AAAA,IACzB,SAAyB;AAAA,IACzB,YAAyB;AAAA,IACzB,UAAyB;AAAA,IACzB,gBAAyB;AAAA,IACzB,YAAyB;AAAA,IACzB,UAAyB;AAAA,IACzB,SAAyB;AAAA,IACzB,YAAyB;AAAA,IACzB,eAAyB;AAAA,IACzB,YAAyB;AAAA,IACzB,wBAAyB;AAAA,IACzB,qBAAyB;AAAA,IACzB,WAAyB;AAAA,IACzB,cAAyB;AAAA,IACzB,UAAyB;AAAA,IACzB,SAAyB;AAAA,IACzB,SAAyB;AAAA,IACzB,YAAyB;AAAA,IACzB,aAAyB;AAAA,IACzB,YAAyB;AAAA,IACzB,YAAyB;AAAA,IACzB,YAAyB;AAAA,IACzB,aAAyB;AAAA,IACzB,aAAyB;AAAA,IACzB,aAAyB;AAAA,IACzB,YAAyB;AAAA,IACzB,YAAyB;AAAA,IACzB,YAAyB;AAAA,IACzB,cAAyB;AAAA,IACzB,QAAyB;AAAA,IACzB,SAAyB;AAAA,IACzB,iBAAyB;AAAA,IACzB,kBAAyB;AAAA,IACzB,eAAyB;AAAA,IACzB,KAAyB;AAAA,IACzB,YAAyB;AAAA,IACzB,uBAAyB;AAAA,IACzB,aAAyB;AAAA,IACzB,cAAyB;AAAA,IACzB,aAAyB;AAAA,EAC7B;AAAA,EACA,wBAAyB;AAAA,IACrB,WAAY;AAAA,EAChB;AAAA,EACA,YAAa;AAAA,IACT,QAAiB;AAAA,IACjB,cAAiB;AAAA,IACjB,gBAAiB;AAAA,MACb,GAAI;AAAA,MACJ,GAAI;AAAA,IACR;AAAA,IACA,UAAW;AAAA,MACP,GAAI;AAAA,MACJ,GAAI;AAAA,IACR;AAAA,IACA,WAAY;AAAA,MACR,EAAE,QAAS,eAAe,QAAS,MAAM,QAAS,KAAK;AAAA,MACvD,EAAE,QAAS,UAAU,QAAS,WAAW,QAAS,IAAI;AAAA,MACtD,EAAE,QAAS,UAAU,QAAS,WAAW,QAAS,MAAM;AAAA,MACxD,EAAE,QAAS,QAAQ,QAAS,SAAS,QAAS,IAAI;AAAA,MAClD,EAAE,QAAS,OAAO,QAAS,QAAQ,QAAS,IAAI;AAAA,MAChD,EAAE,QAAS,QAAQ,QAAS,SAAS,QAAS,IAAI;AAAA,MAClD,EAAE,QAAS,SAAS,QAAS,UAAU,QAAS,MAAM;AAAA,MACtD,EAAE,QAAS,WAAW,QAAS,YAAY,QAAS,IAAI;AAAA,MACxD,EAAE,QAAS,QAAQ,QAAS,SAAS,QAAS,KAAK;AAAA,MACnD,EAAE,QAAS,UAAU,QAAS,WAAW,QAAS,MAAM;AAAA,IAC5D;AAAA,IACA,mBAAoB;AAAA,MAChB,CAAC,KAAK;AAAA,MACN,CAAC,KAAK,KAAK;AAAA,MACX,CAAC,KAAK,KAAK;AAAA,MACX,CAAC,KAAK,IAAI;AAAA,MACV,CAAC,GAAG;AAAA,MACJ,CAAC,KAAK,IAAI;AAAA,MACV,CAAC,MAAM,OAAO,KAAK;AAAA,MACnB,CAAC,KAAK,QAAQ,KAAK;AAAA,MACnB,CAAC,KAAK,IAAI;AAAA,MACV,CAAC,KAAK;AAAA,IACV;AAAA,IACA,SAAU;AAAA,MACN,GAAM;AAAA,MACN,IAAM;AAAA,MACN,KAAM;AAAA,IACV;AAAA,IACA,eAAgB,YAAU;AACtB,YAAM,iBAAiB,CAAC,MAAM,MAAM,IAAI,EAAE,KAAK,CAAC,MAAM,OAAO,SAAS,CAAC,CAAC;AACxE,UAAI,SAAS;AACb,UAAI,CAAC,gBAAgB;AACjB,cAAM,YAAY,OAAO,OAAO,SAAS,CAAC;AAC1C,iBAAS,EAAE,GAAI,MAAM,GAAI,MAAM,GAAI,KAAK,EAAE,SAAS,KAAK;AAAA,MAC5D;AACA,aAAO,SAAS;AAAA,IACpB;AAAA,EACJ;AACJ;AACA,IAAO,aAAQ,aAAa,cAAc,MAAM;;;ACzLhD,IACI,EAAE,UAAAC,UAAS,IAAW,OAAO;AADjC,IAEIC,aAAsBD,UAAS,KAAK,oBAAI,KAAK,CAAC;AAFlD,IAGI,WAAsB,oBAAI,KAAK;AAHnC,IAII,cAAsB,MAAO,KAAK;AAJtC,IAKI,eAAsB,CAAC,OAAO,aAAa,MAAM,KAAK,KAAK,SAAS,OAAO,WAAW;AAL1F,IAMI,oBAAsB;AAN1B,IAOI,kBAAsB,YAAU;AAC5B,QAAM,iBAAiB,CAAC,MAAM,MAAM,IAAI,EAAE,KAAK,CAAC,MAAM,OAAO,SAAS,CAAC,CAAC;AACxE,MAAI,SAAS;AACb,MAAI,CAAC,gBAAgB;AACjB,UAAM,YAAY,OAAO,OAAO,SAAS,CAAC;AAC1C,aAAkB,EAAE,GAAI,MAAM,GAAI,MAAM,GAAI,KAAK,EAAE,SAAS,KAAK;AAAA,EACrE;AACA,SAAO,SAAS;AACpB;AAfJ,IAgBI,gBAAsB,CAAC,MAAM,SAAS,SAAS;AAC3C,QAAM,YAAY,mBAAmB,IAAI,MAAM,mBAAmB,IAAI,IAAI,IAAI,KAAK,eAAeE,SAAQ,OAAO;AACjH,SAAO,UAAU,OAAO,IAAI;AAChC;AAnBJ,IAoBI,aAAsB,CAAC,MAAM,SAAS,MAAM,UAAU,UAAU;AAC5D,MAAI,UAAU,cAAc,MAAM,SAAS,IAAI;AAE/C,MAAI,SAAS,KAAK,OAAO,GAAG;AAExB,cAAU,QAAQ,QAAQ,MAAM,EAAE;AAElC,QAAI,SAAS;AACT,gBAAU,QAAQ,QAAQ,OAAO,EAAE;AAAA,IACvC;AAAA,EACJ;AACA,SAAO;AACX;AAhCJ,IAiCI,aAAe,CAAC,KAAK,UAAU,KAAK,OAAO,IAAI,QAAQ,IAAI,MAAM,QAAQ,KACpE,IAAI,kBAAkB,IAAI,MAAM,kBAAkB,KAAK,iBAAiB,OAAO,eAAe,iBAAiB,IAAI,WAAW,IAAI;AAlC3I,IAmCI,eAAe,CAAAC,SAAOA,QAAO,IAAIA,OAAMA,OAAM;AAnCjD,IAoCI,WAAe;AApCnB,IAqCI,aAAe,CAAC,OAAO,OAAO,KAAK;AArCvC,IAsCI,cAAe;AAEnB,IAAID,UAAqB;AAAzB,IACI,gBAAqB;AADzB,IAGI,cAAqB,CAAC;AAH1B,IAII,kBAAqB,CAAC;AAJ1B,IAKI,qBAAqB,CAAC;AAL1B,IAMI,cAAqB,CAAC;AAC1B,IAAM,iBAAiB,CAACE,YAAW;AAC/B,QAAM,aAAa,kBAAkBA,OAAM;AAC3C,MAAI,CAAC,YAAY;AACb,UAAM,IAAI,MAAM,gDAAgD;AAAA,EACpE;AACA,MAAI,gBAAgBA,OAAM,MAAM,QAAW;AACvC,WAAO,gBAAgBA,OAAM;AAAA,EACjC;AACA,QACI,OAAO,IAAI,KAAK,eAAeF,SAAQ,UAAU,GACjD,MAAM,KAAK,cAAc,IAAI,KAAK,MAAM,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,EAAE,IAAI,UAAQ;AACnE,UACI,OAAO,KAAK,MACZ,UAAU,WAAW,IAAI;AAC7B,QAAI,SAAS,WAAW;AAEpB,aAAO,KAAK,MAAM,QAAQ,MAAM,EAAE;AAAA,IACtC,WACS,SAAS,OAAO;AACrB,aAAO,YAAY,YAAY,MAAM;AAAA,IACzC,WACS,SAAS,SAAS;AACvB,aAAO,YAAY,UACb,QACA,YAAY,SACR,SACA,YAAY,YACR,MACA;AAAA,IAClB,WACS,SAAS,QAAQ;AAItB,aAAO,YAAY,YAAY,SAAS;AAAA,IAC5C;AAAA,EACJ,CAAC,EAAE,KAAK,EAAE;AACd,SAAO,gBAAgBE,OAAM,IAAI;AACrC;AACA,IACI,eAA6B;AADjC,IAEI,gBAA6B;AAFjC,IAGI,cAA6B;AAHjC,IAII,oBAA6B;AAAA,EACzB,GAAK,EAAE,MAAO,WAAW,OAAQ,WAAW,KAAM,UAAU;AAAA,EAC5D,IAAK,EAAE,MAAO,WAAW,OAAQ,SAAS,KAAM,UAAU;AAC9D;AAPJ,IAQI,UAA6B;AAAA;AAAA,EAEzB,GAAO,UAAQ,KAAK,SAAS,IAAI;AAAA;AAAA;AAAA,EAEjC,IAAO,UAAQ,cAAc,QAAQ,EAAE,IAAI,EAAE,SAAS,CAAC;AAAA;AAAA,EAEvD,IAAO,WAAS,KAAK,SAAS,IAAI,GAAG,SAAS,EAAE,SAAS,GAAG,GAAG;AAAA;AAAA;AAAA,EAE/D,KAAO,UAAQ,cAAc,OAAO,EAAE,OAAQ,QAAQ,GAAG,IAAI;AAAA;AAAA,EAE7D,MAAO,UAAQ,cAAc,QAAQ,EAAE,OAAQ,OAAO,GAAG,IAAI;AAAA;AAAA,EAE7D,GAAK,UAAQ,KAAK,MAAM,KAAK,SAAS,IAAI,KAAK,CAAC;AAAA;AAAA,EAEhD,IAAK,UAAQ,cAAc,QAAQ,EAAE,IAAI,EAAE,SAAS,CAAC;AAAA;AAAA,EAErD,GAAK,UAAQ,KAAK,QAAQ;AAAA;AAAA;AAAA,EAE1B,IAAK,UAAQ,cAAc,QAAQ,EAAE,IAAI,EAAE,SAAS,CAAC;AAAA;AAAA,EAErD,IAAK,UAAQ,KAAK,QAAQ,EAAE,SAAS,EAAE,SAAS,GAAG,GAAG;AAAA;AAAA;AAAA,EAEtD,KAAM,UAAQ,KAAK;AAAA,KAEX,IAAI,KAAK,KAAK,YAAY,GAAG,KAAK,SAAS,GAAG,KAAK,QAAQ,GAAG,IAAI,GAAG,CAAC,IACtE,IAAI,KAAK,KAAK,YAAY,GAAG,GAAG,GAAG,IAAI,GAAG,CAAC,KAC3C,iBAAiB,IAAI;AAAA,EAAW;AAAA;AAAA,EAExC,MAAO,UAAQ,cAAc,QAAQ,IAAI,IAAI,EAAE,SAAS,CAAC;AAAA;AAAA,EAEzD,MAAO,UAAQ,QAAQ,IAAI,IAAI,EAAE,SAAS,EAAE,SAAS,GAAG,GAAG;AAAA;AAAA,EAE3D,GAAO,UAAQ,KAAK,OAAO;AAAA;AAAA,EAE3B,IAAO,UAAQ,cAAc,KAAK,OAAO,EAAE,SAAS,CAAC;AAAA;AAAA,EAErD,IAAO,UAAQ,cAAc,MAAM,EAAE,SAAU,SAAS,GAAG,IAAI,EAAE,OAAO,GAAG,CAAC;AAAA;AAAA,EAE5E,IAAO,UAAQ,QAAQ,IAAI,IAAI,EAAE,UAAU,GAAG,CAAC;AAAA;AAAA,EAE/C,KAAO,UAAQ,cAAc,OAAO,EAAE,SAAU,QAAQ,GAAG,IAAI;AAAA;AAAA,EAE/D,MAAO,UAAQ,cAAc,QAAQ,EAAE,SAAU,OAAO,GAAG,IAAI;AAAA,EAC/D,GAAI,UAAQ;AACR,UACI,YAAY,mBAAmB,MAAM,mBAAmB,IAAI,IAAI,KAAK,eAAe,SAAS;AAAA,MACzF,UAAW;AAAA,MACX,MAAW;AAAA,MACX,OAAW;AAAA,MACX,KAAW;AAAA,IACf,CAAC,IACD,QAAQ,UAAU,cAAc,IAAI;AACxC,WAAO,GAAG,MAAM,CAAC,EAAE,QAAQ,MAAM,CAAC,EAAE,QAAQ,MAAM,CAAC,EAAE;AAAA,EACzD;AAAA,EACA,IAAK,UAAQ;AACT,UACI,YAAY,mBAAmB,OAAO,mBAAmB,KAAK,IAAI,KAAK,eAAe,SAAS;AAAA,MAC3F,UAAW;AAAA,MACX,QAAW;AAAA,MACX,MAAW;AAAA,MACX,OAAW;AAAA,MACX,KAAW;AAAA,MACX,MAAW;AAAA,MACX,QAAW;AAAA,MACX,QAAW;AAAA,IACf,CAAC,IACD,QAAQ,UAAU,cAAc,IAAI;AACxC,WAAO,GAAG,MAAM,CAAC,EAAE,QAAQ,MAAM,CAAC,EAAE,QAAQ,MAAM,CAAC,EAAE,SAAS,MAAM,CAAC,EAAE,QAAQ,MAAM,CAAC,EAAE,QAAQ,MAAM,EAAE,EAAE;AAAA,EAC9G;AAAA,EACA,GAAI,UAAQ,KAAK,OAAO;AAAA,EACxB,GAAI,UAAQ,KAAK,OAAO,IAAI;AAAA;AAAA,EAE5B,GAAK,UAAQ,WAAW,cAAc,IAAI,EAAE,CAAC;AAAA,EAC7C,IAAK,UAAQ,cAAc,QAAQ,EAAE,IAAI,EAAE,SAAS,CAAC;AAAA,EACrD,IAAK,UAAQ,QAAQ,EAAE,IAAI,EAAE,SAAS,EAAE,SAAS,GAAG,GAAG;AAAA;AAAA,EAEvD,IAAO,UAAQ,GAAG,WAAW,SAAS,SAAS,KAAK,QAAQ,EAAE,IAAI;AAAA,EAClE,KAAO,UAAQ,GAAG,WAAW,SAAS,SAAS,KAAK,QAAQ,GAAG,IAAI;AAAA,EACnE,KAAO,UAAQ,GAAG,WAAW,SAAS,SAAS,EAAE,CAAC,IAAI,QAAQ,EAAE,IAAI;AAAA,EACpE,MAAO,UAAQ,GAAG,WAAW,SAAS,SAAS,EAAE,CAAC,IAAI,QAAQ,GAAG,IAAI;AAAA;AAAA,EAErE,GAAO,UAAQ,KAAK,YAAY;AAAA;AAAA;AAAA,EAEhC,IAAO,UAAQ,KAAK,YAAY,IAAI;AAAA;AAAA;AAAA,EAEpC,MAAO,UAAQ,KAAK,YAAY;AAAA;AAAA;AAAA,EAEhC,GAAI,UAAQ,KAAK,SAAS,IAAI,KAAK,OAAO;AAAA,EAC1C,GAAI,UAAQ,KAAK,SAAS,IAAI,KAAK,OAAO;AAAA;AAAA,EAE1C,GAAK,UAAQ,KAAK,SAAS;AAAA;AAAA,EAE3B,IAAK,UAAQ,KAAK,SAAS,EAAE,SAAS,EAAE,SAAS,GAAG,GAAG;AAAA;AAAA,EAEvD,GAAK,UAAS,KAAK,SAAS,IAAI,MAAO;AAAA;AAAA,EAEvC,IAAK,UAAQ,QAAQ,EAAE,IAAI,EAAE,SAAS,EAAE,SAAS,GAAG,GAAG;AAAA;AAAA,EAEvD,GAAK,UAAQ,KAAK,SAAS,KAAK;AAAA;AAAA,EAEhC,IAAK,UAAQ,QAAQ,EAAE,IAAI,EAAE,SAAS,EAAE,SAAS,GAAG,GAAG;AAAA;AAAA,EAEvD,GAAK,UAAQ,WAAW,KAAK,EAAE,MAAO,UAAU,GAAG,IAAI;AAAA;AAAA,EAEvD,IAAK,UAAQ,WAAW,MAAM,EAAE,MAAO,UAAU,GAAG,IAAI;AAAA;AAAA,EAExD,GAAK,UAAQ,KAAK,WAAW;AAAA;AAAA;AAAA,EAE7B,IAAK,UAAQ,QAAQ,EAAE,IAAI,EAAE,SAAS,EAAE,SAAS,GAAG,GAAG;AAAA;AAAA,EAEvD,GAAK,UAAQ,KAAK,WAAW;AAAA;AAAA;AAAA,EAE7B,IAAK,UAAQ,QAAQ,EAAE,IAAI,EAAE,SAAS,EAAE,SAAS,GAAG,GAAG;AAAA;AAAA,EAEvD,GAAM,UAAQ,KAAK,MAAM,KAAK,gBAAgB,IAAI,GAAG,EAAE,SAAS;AAAA;AAAA,EAEhE,IAAM,UAAQ,KAAK,MAAM,KAAK,gBAAgB,IAAI,EAAE,EAAE,SAAS,EAAE,SAAS,GAAG,GAAG;AAAA;AAAA,EAEhF,KAAM,UAAQ,KAAK,gBAAgB,EAAE,SAAS,EAAE,SAAS,GAAG,GAAG;AAAA,EAC/D,GAAK,UAAQ,cAAc,KAAK,EAAE,cAAe,QAAQ,GAAG,IAAI;AAAA,EAChE,IAAK,UAAQ,cAAc,MAAM,EAAE,cAAe,OAAO,GAAG,IAAI;AAAA,EAChE,GAAK,UAAQ,GAAG,aAAa,IAAI;AAAA,EACjC,IAAM,UAAQ,WAAW,MAAM,EAAE,MAAO,WAAW,QAAS,UAAU,GAAG,IAAI;AAAA;AAAA,EAE7E,KAAM,UAAQ,WAAW,OAAO,EAAE,MAAO,WAAW,QAAS,UAAU,GAAG,MAAM,IAAI;AAAA,EACpF,KAAM,UAAQ,WAAW,OAAO,EAAE,MAAO,WAAW,QAAS,WAAW,QAAS,UAAU,GAAG,IAAI;AAAA,EAClG,GAAM,UAAQ,cAAc,KAAK,EAAE,MAAO,WAAW,OAAQ,WAAW,KAAM,UAAU,GAAG,IAAI;AAAA,EAC/F,GAAM,UAAQ,cAAc,KAAK,kBAAkB,GAAG,IAAI;AAAA,EAC1D,IAAM,UAAQ,cAAc,MAAM,EAAE,MAAO,WAAW,OAAQ,QAAQ,KAAM,UAAU,GAAG,IAAI;AAAA,EAC7F,IAAM,UAAQ,cAAc,MAAM,kBAAkB,IAAI,IAAI;AAAA,EAC5D,KAAM,UAAQ,cAAc,OAAO;AAAA,IAC/B,MAAS;AAAA,IACT,OAAS;AAAA,IACT,KAAS;AAAA,IACT,MAAS;AAAA,IACT,QAAS;AAAA,EACb,GAAG,IAAI;AAAA,EACP,KAAM,UAAQ,cAAc,OAAO;AAAA,IAC/B,MAAS;AAAA,IACT,OAAS;AAAA,IACT,KAAS;AAAA,IACT,MAAS;AAAA,IACT,QAAS;AAAA,EACb,GAAG,IAAI;AAAA,EACP,MAAO,UAAQ,cAAc,QAAQ;AAAA,IACjC,MAAU;AAAA,IACV,OAAU;AAAA,IACV,KAAU;AAAA,IACV,MAAU;AAAA,IACV,QAAU;AAAA,IACV,SAAU;AAAA,EACd,GAAG,IAAI;AAAA,EACP,MAAO,UAAQ,cAAc,QAAQ;AAAA,IACjC,MAAU;AAAA,IACV,OAAU;AAAA,IACV,KAAU;AAAA,IACV,MAAU;AAAA,IACV,QAAU;AAAA,IACV,SAAU;AAAA,EACd,GAAG,IAAI;AACX;AAxKJ,IA0KI,aAA6B,OAAO,KAAK,OAAO,EAAE,KAAK,CAAC,GAAG,MAAM,EAAE,SAAS,EAAE,MAAM;AA1KxF,IA2KI,eAA6B,OAAO,WAAW,KAAK,GAAG;AA3K3D,IA6KIC,WAA6B,OAAO,CAAC;AA7KzC,IA8KI,WAA6B,CAAC,QAAQ,YAAY,KAAK,GAAG;AA9K9D,IA+KI,oBAA6B,CAAC,QAAQ,SAAS,GAAG,KAAK,EAAE,cAAe,SAAS,IAAI,OAAO,GAAG,GAAG,EAAE,UAAU,GAAG,CAAC,CAAC,EAAE;AA/KzH,IAgLI,UAA6B;AAAA,EACzB,MAAO,SAAO;AACV,UAAM,OAAO,SAAS,GAAG;AACzB,WAAO,EAAE,MAAO,QAAQ,OAAQ,QAAQ,OAAO,OAAO,IAAI;AAAA,EAC9D;AAAA,EACA,GAAK,UAAQ,EAAE,MAAO,SAAS,GAAG,EAAE;AAAA,EACpC,IAAK,SAAO;AACR,UAAM,OAAO,SAAS,GAAG;AACzB,WAAO,EAAE,MAAO,QAAQ,OAAO,OAAO,OAAO,KAAM;AAAA,EACvD;AAAA,EACA,GAAM,UAAQ,EAAE,OAAQ,SAAS,GAAG,IAAI,EAAE;AAAA,EAC1C,IAAM,UAAQ,EAAE,OAAQ,SAAS,GAAG,IAAI,EAAE;AAAA,EAC1C,IAAM,UAAQ,EAAE,OAAQ,SAAS,GAAG,IAAI,EAAE;AAAA,EAC1C,KAAM,SAAO;AACT,UAAMC,UAAS,OAAO,IAAI,YAAY;AACtC,eAAW,CAAC,MAAM,KAAK,KAAK,OAAO,QAAQ,WAAW,qBAAqB,GAAG;AAC1E,UAAIA,OAAM,WAAW,IAAI,GAAG;AACxB,eAAO,EAAE,OAAQ,MAAM,MAAM;AAAA,MACjC;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,MAAO,SAAO;AACV,UAAMA,UAAS,OAAO,IAAI,YAAY;AACtC,eAAW,CAAC,MAAM,KAAK,KAAK,OAAO,QAAQ,WAAW,gBAAgB,GAAG;AACrE,UAAIA,OAAM,WAAW,IAAI,GAAG;AACxB,eAAO,EAAE,OAAQ,MAAM,MAAM;AAAA,MACjC;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,IAAO,UAAQ,EAAE,MAAO,SAAS,GAAG,EAAE;AAAA,EACtC,GAAO,UAAQ,EAAE,MAAO,SAAS,GAAG,EAAE;AAAA,EACtC,IAAO,UAAQ,EAAE,MAAO,SAAS,GAAG,EAAE;AAAA,EACtC,KAAOD;AAAA,EACP,MAAOA;AAAA,EACP,MAAOA;AAAA,EACP,GAAOA;AAAA,EACP,IAAOA;AAAA,EACP,IAAOA;AAAA,EACP,IAAOA;AAAA,EACP,KAAOA;AAAA,EACP,MAAOA;AAAA,EACP,GAAOA;AAAA,EACP,IAAOA;AAAA,EACP,GAAOA;AAAA,EACP,IAAOA;AAAA,EACP,IAAOA;AAAA,EACP,GAAOA;AAAA,EACP,GAAOA;AAAA,EACP,IAAO,UAAQ,EAAE,OAAQ,SAAS,GAAG,EAAE;AAAA,EACvC,IAAO,UAAQ,EAAE,OAAQ,SAAS,GAAG,EAAE;AAAA,EACvC,IAAO,UAAQ,EAAE,SAAU,SAAS,GAAG,EAAE;AAAA,EACzC,GAAO,UAAQ,EAAE,OAAQ,SAAS,GAAG,EAAE;AAAA,EACvC,GAAO,UAAQ,EAAE,SAAU,SAAS,GAAG,EAAE;AAAA,EACzC,IAAO,UAAQ,EAAE,SAAU,SAAS,GAAG,EAAE;AAAA,EACzC,GAAO,UAAQ,EAAE,SAAU,SAAS,GAAG,EAAE;AAAA,EACzC,GAAO;AAAA,EACP,IAAO;AAAA,EACP,KAAO;AAAA,EACP,GAAI,UAAQ,EAAE,MAAO,IAAI,YAAY,EAAE;AAAA,EACvC,GAAI,UAAQ,EAAE,MAAO,IAAI,YAAY,EAAE;AAAA,EACvC,GAAM;AAAA,EACN,IAAM;AAAA,EACN,KAAM;AAAA,EACN,GAAK,EAAE,MAAO,WAAW,QAAS,MAAM,eAAe,GAAG,EAAE;AAAA,EAC5D,IAAK,EAAE,MAAO,WAAW,QAAS,MAAM,eAAe,IAAI,EAAE;AAAA;AAAA,EAE7D,GAAI,SAAO;AACP,QAAI,CAAC,OAAQ,CAAC,cAAc,KAAK,GAAG,KAAK,QAAQ,KAAM;AACnD,aAAO;AAAA,IACX;AACA,QAAI,WAAW;AAGf,QAAI,QAAQ,KAAK;AACb,YAAM,UAAU,cAAc,KAAK,GAAG;AAEtC,UAAI,SAAS;AACT,cACI,OAAU,QAAQ,CAAC,MAAM,MAAM,IAAI,IACnC,QAAU,SAAS,QAAQ,CAAC,CAAC,KAAK,GAClC,UAAU,SAAS,QAAQ,CAAC,CAAC,KAAK;AACtC,mBAAW,QAAQ,QAAQ,KAAK;AAAA,MACpC,OAEK;AACD,mBAAW,MAAK,oBAAI,KAAK,GAAE,kBAAkB;AAAA,MACjD;AAAA,IACJ;AACA,WAAO,EAAE,SAAS;AAAA,EACtB;AACJ;AA1QJ,IA2QI,aAA6B,OAAO,KAAK,OAAO,EAAE,KAAK,CAAC,GAAG,MAAM,EAAE,SAAS,EAAE,MAAM;AA3QxF,IA4QI,eAA6B,IAAI,OAAO,IAAI,WAAW,KAAK,GAAG,IAAI;AA5QvE,IAiRI,kBAA6B,IAAI,OAAO,0BAA0B;AAjRtE,IAoRI,mBAA6B;AAAA;AAAA;AAAA;AAAA;AAAA,EAKzB,QAAS;AAAA,IACL,QAAc;AAAA,IACd,MAAc;AAAA,IACd,SAAc;AAAA,IACd,OAAc;AAAA,IACd,MAAc;AAAA,IACd,KAAc;AAAA,IACd,MAAc,KAAK;AAAA,IACnB,QAAc,OAAO;AAAA,IACrB,QAAc,QAAQ;AAAA,IACtB,aAAc,QAAW;AAAA,EAC7B;AAAA,EACA,MAAO;AAAA,IACH,QAAc;AAAA,IACd,MAAc;AAAA,IACd,SAAc;AAAA,IACd,OAAc;AAAA,IACd,MAAc;AAAA,IACd,KAAc;AAAA,IACd,MAAc,KAAK;AAAA,IACnB,QAAc,OAAO;AAAA,IACrB,QAAc,QAAQ;AAAA,IACtB,aAAc,QAAW;AAAA,EAC7B;AAAA,EACA,SAAU;AAAA,IACN,QAAc,IAAI;AAAA,IAClB,MAAc,IAAI;AAAA,IAClB,SAAc;AAAA,IACd,OAAc;AAAA,IACd,MAAc;AAAA,IACd,KAAc;AAAA,IACd,MAAc,KAAK;AAAA,IACnB,QAAc,OAAO;AAAA,IACrB,QAAc,QAAQ;AAAA,IACtB,aAAc,QAAW;AAAA,EAC7B;AAAA,EACA,OAAQ;AAAA,IACJ,QAAc,IAAI;AAAA,IAClB,MAAc,IAAI;AAAA,IAClB,SAAc,IAAI;AAAA,IAClB,OAAc;AAAA,IACd,MAAc;AAAA,IACd,KAAc;AAAA,IACd,MAAc,MAAM;AAAA,IACpB,QAAc,QAAQ;AAAA,IACtB,QAAc,SAAS;AAAA,IACvB,aAAc,SAAY;AAAA,EAC9B;AAAA,EACA,MAAO;AAAA,IACH,QAAc,KAAK;AAAA,IACnB,MAAc,KAAK;AAAA,IACnB,SAAc,KAAK;AAAA,IACnB,OAAc,KAAK;AAAA,IACnB,KAAc;AAAA,IACd,MAAc;AAAA,IACd,QAAc;AAAA,IACd,QAAc;AAAA,IACd,aAAc;AAAA,EAClB;AAAA,EACA,KAAM;AAAA,IACF,QAAc,KAAK;AAAA,IACnB,MAAc,KAAK;AAAA,IACnB,SAAc,KAAK;AAAA,IACnB,OAAc,KAAK;AAAA,IACnB,MAAc,IAAI;AAAA,IAClB,MAAc;AAAA,IACd,QAAc;AAAA,IACd,QAAc;AAAA,IACd,aAAc;AAAA,EAClB;AAAA,EACA,MAAO;AAAA,IACH,QAAc,MAAM,OAAO;AAAA,IAC3B,MAAc,MAAM,MAAM;AAAA,IAC1B,SAAc,MAAM,KAAK;AAAA,IACzB,OAAc,MAAM,KAAK;AAAA,IACzB,MAAc,IAAI;AAAA,IAClB,KAAc,IAAI;AAAA,IAClB,QAAc;AAAA,IACd,QAAc;AAAA,IACd,aAAc;AAAA,EAClB;AAAA,EACA,QAAS;AAAA,IACL,QAAc,MAAM,OAAO;AAAA,IAC3B,MAAc,MAAM,MAAM;AAAA,IAC1B,SAAc,MAAM,KAAK;AAAA,IACzB,OAAc,MAAM,KAAK;AAAA,IACzB,MAAc,IAAI;AAAA,IAClB,KAAc,IAAI;AAAA,IAClB,MAAc,IAAI;AAAA,IAClB,QAAc;AAAA,IACd,aAAc;AAAA,EAClB;AAAA,EACA,QAAS;AAAA,IACL,QAAc,MAAM,OAAO;AAAA,IAC3B,MAAc,MAAM,MAAM;AAAA,IAC1B,SAAc,MAAM,KAAK;AAAA,IACzB,OAAc,MAAM,KAAK;AAAA,IACzB,MAAc,IAAI;AAAA,IAClB,KAAc,IAAI;AAAA,IAClB,MAAc,IAAI;AAAA,IAClB,QAAc,IAAI;AAAA,IAClB,aAAc;AAAA,EAClB;AAAA,EACA,aAAc;AAAA,IACV,QAAU,MAAM,OAAO;AAAA,IACvB,MAAU,MAAM,MAAM;AAAA,IACtB,SAAU,MAAM,KAAK;AAAA,IACrB,OAAU,MAAM,KAAK;AAAA,IACrB,MAAU,IAAI;AAAA,IACd,KAAU,IAAI;AAAA,IACd,MAAU,IAAI;AAAA,IACd,QAAU,IAAI;AAAA,IACd,QAAU,IAAI;AAAA,EAClB;AACJ;AA3YJ,IA4YI,kBAA6B;AAAA,EACzB,IAAe;AAAA,EACf,cAAe;AAAA,EACf,GAAe;AAAA,EACf,SAAe;AAAA,EACf,GAAe;AAAA,EACf,IAAe;AAAA,EACf,KAAe;AAAA,EACf,SAAe;AAAA,EACf,GAAe;AAAA,EACf,OAAe;AAAA,EACf,GAAe;AAAA,EACf,MAAe;AAAA,EACf,GAAe;AAAA,EACf,OAAe;AAAA,EACf,GAAe;AAAA,EACf,IAAe;AAAA,EACf,KAAe;AAAA,EACf,QAAe;AAAA,EACf,GAAe;AAAA,EACf,UAAe;AAAA,EACf,GAAe;AAAA,EACf,OAAe;AAAA,EACf,KAAe;AAAA,EACf,SAAe;AACnB;AAraJ,IAsaI,4BAA6B;AAtajC,IAuaI,0BAA6B;AAvajC,IAwaI,qBAA6B;AAAA,EACzB;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACJ;AAnbJ,IAobI,6BAA6B;AAAA,EACzB,CAAC,KAAK;AAAA,EACN,CAAC,KAAK,KAAK;AAAA,EACX,CAAC,KAAK,KAAK;AAAA,EACX,CAAC,KAAK,IAAI;AAAA,EACV,CAAC,GAAG;AAAA,EACJ,CAAC,KAAK,IAAI;AAAA,EACV,CAAC,MAAM,OAAO,KAAK;AAAA,EACnB,CAAC,KAAK,QAAQ,KAAK;AAAA,EACnB,CAAC,KAAK,IAAI;AAAA,EACV,CAAC,KAAK;AACV;AA/bJ,IAgcI,aAA6B;AAAA,EACzB;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACJ;AA1cJ,IA4cI,iBAA6B;AAAA,EACzB;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACJ;AApdJ,IAqdI,cAA6B,CAAC,MAAM;AAChC,QAAM,SAAS,WAAW,CAAC;AAC3B,SAAO,MAAM,MAAM,IAAI,OAAO;AAClC;AAxdJ,IAydI,cAA6B;AAzdjC,IA0dI,gBAA6B;AA1djC,IA2dI,iBAA6B;AAAA,EACzB,aAAc;AAAA,EACd,QAAc;AAAA,EACd,QAAc;AAAA,EACd,MAAc;AAAA,EACd,KAAc;AAAA,EACd,MAAc;AAAA,EACd,OAAc;AAAA,EACd,SAAc;AAAA,EACd,MAAc;AAAA,EACd,QAAc;AAClB;AAteJ,IAueI,UAAU;AAAA,EACN,MAAM,QAAQ,OAAO,GAAG;AACpB,WAAO,KAAK,MAAM,SAAS,IAAI,IAAI;AAAA,EACvC;AAAA,EACA,MAAM,QAAQ,OAAO,GAAG;AACpB,WAAO,KAAK,MAAM,SAAS,IAAI,IAAI;AAAA,EACvC;AAAA,EACA,KAAK,QAAQ,OAAO,GAAG;AACnB,WAAO,KAAK,KAAK,SAAS,IAAI,IAAI;AAAA,EACtC;AACJ;AAjfJ,IAkfI,WAAW,CAAC;AAsJhB,IAAqB,cAArB,cAAwC,oBAAY,EAAE;AAAA,EAElD,WAAW,QAAQ;AACf,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,WAAW,cAAcE,SAAQ;AAC7B,OAAG,iBAAiBA;AAAA,EACxB;AAAA,EACA,WAAW,gBAAgB;AACvB,WAAO,GAAG,kBAAkB;AAAA,EAChC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,WAAW,mBAAmB,aAAa;AACvC,SAAK,sBAAsB;AAAA,EAC/B;AAAA,EACA,WAAW,qBAAqB;AAC5B,WAAO,KAAK,uBAAuB,KAAK,kBAAkB;AAAA,EAC9D;AAAA,EACA,OAAO,YAAYA,SAAQ;AAUvB,UACI,QAASA,QAAO,MAAM,YAAY,GAClC,SAAS,CAAC;AAId,QAAI,MAAM,WAAW,KAAK,gBAAgB,KAAKA,OAAM,GAAG;AACpD,aAAO,CAAC;AAAA,IACZ,OACK;AACD,YAAM,OAAO,CAAC,MAAM,MAAM,OAAO,UAAU;AAEvC,YAAI,UAAU,KAAK,SAAS,IAAI;AAE5B,cAAI,aAAa,KAAK,IAAI,GAAG;AACzB,kBACI,gBAAgB,KAAK,SAAS,YAAY,KAAK,CAAC,GAChDC,MAAgB,cAAc,IAAI,KAAK,QAAQ,IAAI;AAIvD,gBAAI,SAAS,OAAO,QAAQ,MAAM,SAAS,GAAG;AAC1C,oBAAM,IAAI,MAAM,kBAAkBD,yCAAwC;AAAA,YAC9E;AACA,kBAAM,YAAa,OAAOC,QAAO,cAAgB,OAAOA,QAAO,WACzDA,MACAA,IAAG,OAAO;AAGhB,gBAAI,OAAO,cAAc,UAAU;AAI/B,oBACI,gBAAgB,GAAG,YAAY,SAAS,GACxC,WAAgB,cAAc,IAAI;AACtC,qBAAO,SAAS;AAEhB,qBAAO,KAAK,GAAG,aAAa;AAC5B,qBAAO;AAAA,YACX,OACK;AACD,mBAAK,UAAU;AACf,mBAAK,KAAK;AAAA,YACd;AAAA,UACJ,OAEK;AACD,iBAAK,WAAW;AAChB,mBAAO,KAAK,IAAI;AAChB,mBAAO,CAAC;AAAA,UACZ;AAAA,QACJ,WACS,OAAO,UAAU,eAAe,KAAK,MAAM,SAAS,GAAG;AAC5D,iBAAO,KAAK,IAAI;AAAA,QACpB;AACA,eAAO;AAAA,MACX,GAAG,CAAC,CAAC;AAAA,IACT;AACA,WAAO,OAAO,SAAS,CAAC,EAAE,OAAO;AACjC,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,OAAO,QAAQ,IAAI;AAEf,QAAI,GAAG,WAAW,IAAI;AAClB,aAAO;AAAA,IACX;AAEA,QAAI,GAAG,SAAS;AACZ,WAAK,GAAG,QAAQ;AAAA,IACpB;AAEA,UAAM,SAAS,SAAS,KAAK,MAAM,KAAK,WAAW,CAAC;AACpD,QAAI,QAAQ;AACR,aAAO;AAAA,IACX;AACA,aAAS,QAAQ,EAAE;AACnB,UACIC,SAAQ,SAAS,SAAS,IAAI,GAC9B,OAAQ,SAAS,QAAQ;AAE7B,WAAO,SAAS,KAAK,MAAM,KAAK,WAAW,CAAC,IAAI,GAAG,SAAS,YAAY,KAAKA,SAAQ,KAAK,MAAMA,SAAQA,UAAS,OAAO,KAAK,MAAM,OAAO;AAAA,EAC9I;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,OAAO,SAAS,KAAK;AACjB,WAAO,GAAG,MAAM,KAAK,YAAY;AAAA,EACrC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAkCA,OAAO,MAAM,YAAYF,UAAS,GAAG,oBAAoB,SAAS,OAAO;AACrE,QAAI,sBAAsB,MAAM;AAC5B,aAAO;AAAA,IACX;AACA,QAAI,OAAO,eAAe,YAAY,CAAC,YAAY;AAC/C,aAAO;AAAA,IACX;AAQA,UAAM,SAAS;AAAA,MACX,MAAe;AAAA,MACf,OAAe;AAAA,MACf,MAAe;AAAA,MACf,OAAe;AAAA,MACf,SAAe;AAAA,MACf,SAAe;AAAA,MACf,cAAe;AAAA,IACnB;AAIA,IAAAA,UAASA,QAAO,QAAQ,UAAU,UAAU;AAC5C,QACI,SAAS,YAAYA,OAAM,GAC3B;AACJ,QAAI,CAAC,QAAQ;AACT,eAAS,YAAYA,OAAM,IAAI,GAAG,YAAYA,OAAM;AAAA,IACxD;AAIA,QAAI,WAAW,SAAS,QAAQ,GAAG;AAC/B,mBAAa,WAAW,QAAQ,OAAO,GAAG;AAAA,IAC9C;AAIA,WAAO,OAAO,CAACG,aAAYC,YAAW;AAv7B9C;AAw7BY,UAAIA,QAAO,MAAM;AACb,eAAO,OAAO,QAAQA,QAAO,GAAGD,WAAU,CAAC;AAAA,MAC/C,OACK;AACD,YAAI;AAEJ,YAAIC,QAAO,aAAa,OAAOD,YAAW,QAAQ,GAAG,MAAM,IAAI;AAC3D,oBAAUA,YAAW,QAAQ,GAAG;AAAA,QACpC,OACK;AACD,gBAAM,gBAAgBA,YAAW,QAAQ,GAAG;AAC5C,cAAI,EAAE,SAAS,IAAIC;AAEnB,cAAI,CAAC,UAAU,YAAY,KAAK,QAAQ,GAAG;AACvC,uBAAW;AAAA,UACf;AAEA,oBAAUA,QAAO,aAAa,KAAKD,YAAW,OAAO,OAAO,aAAa,WAAW,aAAa,aAAa,QAAQ,IAAI,QAAQ,MAAI,KAAAC,QAAO,YAAP,mBAAgB,WAAU;AAEhK,cAAI,gBAAgB,MAAM,UAAU,eAAe;AAC/C,sBAAU;AAAA,UACd;AAAA,QACJ;AACA,YAAI,MAAM;AAKV,YAAI,YAAY,MAAQA,QAAO,YAAY,SAAUD,YAAW,MAAM,QAAQ,GAAI;AAI9E,gBAAM,SAASA,YAAW,MAAM,UAAU;AAU1C,cAAI,OAAO,WAAW,GAAG;AACrB,mBAAOA;AACP,mBAAO;AAAA,UACX,OACK;AACD,mBAAO,OAAO,CAAC;AACf,mBAAO,GAAG,OAAO,CAAC,IAAI,OAAO,CAAC;AAAA,UAClC;AAAA,QACJ,OACK;AACD,iBAAOA,YAAW,UAAU,GAAG,OAAO,KAAKA;AAC3C,iBAAOA,YAAW,UAAU,UAAUC,QAAO,SAAS,MAAM;AAAA,QAChE;AACA,YAAIA,QAAO,IAAI;AAEX,gBAAM,MAAMA,QAAO,GAAG,IAAI;AAC1B,cAAI,KAAK;AACL,mBAAO,OAAO,QAAQ,GAAG;AAAA,UAC7B,OACK;AACD,mBAAO,OAAO;AAAA,UAClB;AAAA,QACJ;AACA,eAAO;AAAA,MACX;AAAA,IACJ,GAAG,UAAU;AAEb,QAAI,OAAO,QAAQ,CAAC,OAAO,MAAM;AAC7B,aAAO,OAAO;AAAA,IAClB;AACA,QAAI,OAAO,OAAO,MAAM,OAAO,QAAQ,IAAI;AACvC,aAAO;AAAA,IACX;AACA,UAAM,OAAO,GAAG,OAAO,QAAQ,MAAM;AACrC,QAAI,MAAM;AACN,eAAS;AAAA,IACb,WACS,CAAC,QAAQ;AAEd,eAAS,IAAI,KAAK,UAAU;AAAA,IAChC;AACA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAyBA,OAAO,OAAO,YAAY,SAAS,OAAO;AAEtC,UAAM,MAAM,EAAE,GAAG,WAAW;AAC5B,QAAI,UAAU,MAAM,IAAI,IAAI,KAAM,WAAW,MAAM,IAAI,KAAK,KAAK,MAAM,IAAI,IAAI,IAC3E,SAAU;AAEd,QAAI,CAAC,SAAS;AACV,UAAI,UAAU;AACd,qBAAe,QAAQ,cAAY;AAC/B,YAAI,EAAE,YAAY,QAAQ,MAAM,IAAI,QAAQ,CAAC,GAAG;AAC5C,cAAI,QAAQ,IAAI;AAAA,QACpB;AACA,kBAAU,WAAW,IAAI,QAAQ,MAAM;AAAA,MAC3C,CAAC;AACD,gBAAU;AAAA,IACd;AACA,QAAI,SAAS;AACT,aAAO;AAAA,IACX;AACA,QAAI,IAAI,SAAS,MAAM;AACnB,UAAI,QAAQ,IAAI,QAAQ;AAAA,IAC5B,WACS,IAAI,SAAS,MAAM;AACxB,UAAI,QAAS,IAAI,QAAQ,KAAM;AAAA,IACnC;AACA,QAAI,cAAc,KAAK;AACnB,eAAS;AACT,UAAI,WAAW,IAAI;AAAA,IACvB;AACA,QAAI,WAAW,IAAI,QAAQ,QAAQ,IAAI,SAAS,QAAQ,IAAI,QAAQ,OAAO;AACvE,aAAO;AAAA,IACX;AACA,UACI,OAAO;AAAA,MACH,aAAa,IAAI,MAAM,YAAY;AAAA,MACnC,aAAa,IAAI,OAAO,aAAa;AAAA,MACrC,aAAa,IAAI,MAAM,WAAW;AAAA,MAClC,IAAI;AAAA,MACJ,IAAI;AAAA,MACJ,IAAI;AAAA,MACJ,IAAI;AAAA,IACR;AACJ,WAAO,SAAS,IAAI,KAAK,KAAK,IAAI,GAAG,IAAI,CAAC,IAAI,IAAI,KAAK,GAAG,IAAI;AAAA,EAClE;AAAA,EACA,OAAO,MAAM,MAAM;AACf,WAAO,IAAI,KAAK,KAAK;AAAA,MACjB,KAAK,eAAe;AAAA,MACpB,KAAK,YAAY;AAAA,MACjB,KAAK,WAAW;AAAA,MAChB,KAAK,YAAY;AAAA,MACjB,KAAK,cAAc;AAAA,MACnB,KAAK,cAAc;AAAA,MACnB,KAAK,mBAAmB;AAAA,IAC5B,CAAC;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAsFA,OAAO,OAAO,MAAMJ,UAAS,GAAG,eAAe;AAE3C,QAAI,CAAC,QAAQ,MAAM,IAAI,GAAG;AACtB,aAAO;AAAA,IACX;AACA,QAAI,YAAY,YAAYA,OAAM,GAC9B,SAAY;AAChB,QAAI,CAAC,WAAW;AACZ,kBAAY,YAAYA,OAAM,IAAI,CAAC;AAEnC,eAAS,IAAI,GAAG,IAAIA,QAAO,QAAQ,KAAK;AAEpC,cACI,cAAcA,QAAO,MAAM,CAAC,EAAE,MAAM,YAAY,GAChD,aAAc,2CAAc;AAChC,YAAI,YAAY;AACZ,gBACI,gBAAgB,KAAK,SAAS,YAAY,KAAK,CAAC,GAChDC,MAAgB,cAAc,UAAU,KAAK,QAAQ,UAAU;AACnE,oBAAU,KAAKA,GAAE;AACjB,eAAK,WAAW,SAAS;AAAA,QAC7B,WAESD,QAAO,CAAC,MAAM,KAAK;AAExB,gBAAM,QAAQA,QAAO,QAAQ,KAAK,IAAI,CAAC;AAEvC,cAAI,UAAU,IAAI;AACd,sBAAU,KAAKA,QAAO,OAAO,IAAI,CAAC,CAAC;AACnC,gBAAIA,QAAO;AAAA,UACf,OAEK;AACD,sBAAU,KAAKA,QAAO,UAAU,IAAI,GAAG,KAAK,CAAC;AAE7C,gBAAI;AAAA,UACR;AAAA,QACJ,OAEK;AACD,oBAAU,KAAKA,QAAO,CAAC,CAAC;AAAA,QAC5B;AAAA,MACJ;AAAA,IACJ;AACA,cAAU,QAAQ,UAAQ;AACtB,UAAI,OAAO,SAAS,UAAU;AAC1B,kBAAU;AAAA,MACd,OACK;AACD,kBAAU,KAAK,IAAI;AAAA,MACvB;AAAA,IACJ,CAAC;AACD,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAmBA,OAAO,YAAY,OAAOA,SAAQ;AAC9B,WAAOA,QAAO;AAAA,MAAQ;AAAA,MAClB,CAAC,GAAG,OAAO,QAAQ,YAAW,OAAO,MAAO,UAAU,MAAO,IAAI,CAAC,GAAG,GAAG;AAAA,IAAC;AAAA,EACjF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAgBA,OAAO,eAAe,QAAQ,OAAO,MAAM;AACvC,QAAI,OAAO,WAAW,UAAU;AAC5B,aAAO;AACP,eAAS;AAAA,IACb;AACA,WAAO,GAAG,GAAG,eAAe,QAAQ,IAAI;AAAA,EAC5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,OAAO,SAAS,MAAM;AAClB,UACI,cAAc,GAAG,GAAG,MAAM,GAAG,YAAY,IAAI,GAAG,KAAK,GACrD,YAAY,KAAK,QAAQ,IAAI,GAAG,QAAQ,MAAM,OAAO,EAAE,QAAQ,KAAK;AACxE,WAAO,KAAK,QAAQ,IAAI,KAAK,KAAK,SAAS,IAAI;AAAA,EACnD;AAAA,EACA,OAAO,aAAa,QAAQ;AACxB,UACI,YAAY,KAAK,MAAM,MAAM,GAC7B,WAAW,SAAS,WACpB,SAAS,IAAI,KAAK,GAAG,SAAS,GAC9B,YAAY,GAAG,GAAG,MAAM,GAAG,YAAY,MAAM,GAAG,MAAM;AAC1D,WAAO,QAAQ,OAAO,QAAQ,IAAI,WAAW,SAAS;AACtD,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAaA,OAAO,YAAY,OAAO,SAAS;AAC/B,QAAI,QAAQ;AACZ,QAAI,OAAO,YAAY,WAAW;AAC9B,eAAS;AAAA,IACb,WACS,SAAS;AACd,eAAY,QAAQ;AAAA,IACxB;AACA,UACI,WAAW,KAAK,SAAS,OAAO,OAAO,GACvC,SAAW,CAAC,GACZ,OAAW,mCAAS,eAAc,SAAS,KAAK;AACpD,SAAK,YAAY,UAAU;AACvB,aAAO,KAAK,GAAG,SAAS,QAAQ,IAAI,MAAM,UAAU;AAAA,IACxD;AACA,YAAO,mCAAS,cAAa,QAAQ,SAAS,OAAO,KAAK,IAAI;AAAA,EAClE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAqBA,OAAO,SAAS,OAAO,SAAS;AAC5B,QAAI,QAAQ,GAAG,MAAM,WAAW,UAAU,SAAS;AACnD,QAAI,OAAO,YAAY,WAAW;AAC9B,eAAS;AAAA,IACb,WACS,SAAS;AACd,eAAS,QAAQ;AACjB,kBAAY,GAAG,cAAc,QAAQ,SAAS;AAC9C,gBAAU,QAAQ;AAClB,qBAAe,CAAC,UAAU,QAAQ;AAAA,IACtC;AACA,UACI,SAAU,CAAC,GACX,UAAU,SAAS,GAAG,qBAAqB,GAAG;AAClD,UAAM,QAAQ,UAAU,WAAW,MAAM,WAAW,QAAQ,OAAO,CAAC,IAAI;AAExE,SAAK,YAAY,OAAO;AACpB,UAAI,GAAG,GAAG,UAAU,KAAK;AACzB,aAAO,cAAc;AACrB,UAAI,KAAK,OAAO,UAAU,OAAO,EAAE,CAAC;AAGpC,UAAI,KAAM,QAAQ,CAAC,OAAO,QAAS;AAC/B,eAAO,eAAe,WAAW,QAAQ,KAAK,IAAI,UAAU,MAAM,CAAC,CAAC,IAAI;AACxE,iBAAS,GAAG,GAAG,MAAM,GAAG,QAAQ;AAAA,MACpC;AACA,UAAI,QAAQ,CAAC,OAAO;AAChB;AAAA,MACJ;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,OAAO,GAAG,QAAQ,QAAQ,WAAW,MAAM;AAEvC,QAAI,OAAO,WAAW,UAAU;AAC5B,eAAS,GAAG,cAAc,MAAM;AAAA,IACpC;AAEA,QAAI,OAAO,WAAW,UAAU;AAC5B,iBAAW,OAAO;AAClB,eAAS,OAAO;AAAA,IACpB;AACA,QAAI,WAAW,UAAU;AACrB,aAAO;AAAA,IACX;AACA,aAAS,GAAG,cAAc,MAAM;AAChC,eAAW,GAAG,cAAc,QAAQ;AACpC,QAAI,WAAW,UAAU;AACrB,aAAO;AAAA,IACX,WAES,eAAe,QAAQ,IAAI,eAAe,MAAM,GAAG;AACxD,aAAO,SAAS,KAAK,IAAI,iBAAiB,QAAQ,EAAE,MAAM,CAAC;AAAA,IAC/D,OACK;AACD,aAAO,SAAS,KAAK,IAAI,iBAAiB,MAAM,EAAE,QAAQ,CAAC;AAAA,IAC/D;AAAA,EACJ;AAAA,EACA,OAAO,uBAAuBA,SAAQ;AAClC,UACI,gBAAgB,UAChB,aAAgB;AACpB,WAAO,WAAW,KAAKA,QAAO,QAAQ,eAAe,EAAE,CAAC;AAAA,EAC5D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,OAAO,eAAeA,SAAQ;AAC1B,WAAO,GAAG,OAAO,GAAG,QAAQ,IAAI,GAAG,CAAC,GAAGA,OAAM,EAAE,SAAS,IAAI;AAAA,EAChE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAaA,OAAO,IAAI,MAAM,QAAQ,OAAO,MAAM,QAAQ,MAAM;AAChD,QAAI;AACJ,QAAI,OAAO,SAAS,UAAU;AAC1B,UAAI,GAAG,MAAM,IAAI;AAAA,IACrB,WACS,OAAO;AACZ,UAAI,IAAI,KAAK,KAAK,QAAQ,CAAC;AAAA,IAC/B,OACK;AACD,UAAI;AAAA,IACR;AACA,QAAI,OAAO,WAAW,UAAU;AAC5B,YAAM,WAAW,YAAW,cAAc,MAAM;AAChD,eAAS,SAAS;AAClB,aAAS,SAAS;AAAA,IACtB,WACS,UAAU,OAAO,WAAW,UAAU;AAC3C,aAAO,OAAO;AACd,eAAS,OAAO;AAAA,IACpB;AACA,QAAI,CAAC,QAAQ,WAAW,GAAG;AACvB,aAAO;AAAA,IACX;AACA,WAAO,GAAG,cAAc,IAAI;AAC5B,YAAQ,MAAM;AAAA,MACV,KAAK;AACD,UAAE,QAAQ,EAAE,QAAQ,IAAI,MAAM;AAC9B;AAAA,MACJ,KAAK;AACD,UAAE,QAAQ,EAAE,QAAQ,IAAK,SAAS,GAAK;AACvC;AAAA,MACJ,KAAK;AACD,UAAE,QAAQ,EAAE,QAAQ,IAAK,SAAS,GAAM;AACxC;AAAA,MACJ,KAAK;AACD,UAAE,QAAQ,EAAE,QAAQ,IAAK,SAAS,IAAQ;AAC1C;AAAA,MACJ,KAAK;AAED,YAAI,SAAS,MAAM,GAAG;AAClB,YAAE,QAAQ,EAAE,QAAQ,IAAI,MAAM;AAE9B,cAAI,EAAE,SAAS,MAAM,MAAM,KAAK,SAAS,MAAM,GAAG;AAC9C,cAAE,SAAS,EAAE,SAAS,IAAI,CAAC;AAAA,UAC/B;AAAA,QACJ,OAEK;AACD,YAAE,QAAQ,EAAE,QAAQ,IAAK,SAAS,KAAS;AAAA,QAC/C;AACA;AAAA,MACJ,KAAK;AACD,UAAE,QAAQ,EAAE,QAAQ,IAAI,SAAS,CAAC;AAClC;AAAA,MACJ,KAAK,SAAS;AACV,YAAIK,OAAM,EAAE,QAAQ;AACpB,YAAIA,OAAM,IAAI;AACV,UAAAA,OAAM,KAAK,IAAIA,MAAK,GAAG,mBAAmB,GAAG,IAAI,GAAG,oBAAoB,CAAC,GAAG,QAAQ,OAAO,CAAC,EAAE,QAAQ,CAAC;AAAA,QAC3G;AACA,UAAE,QAAQA,IAAG;AACb,UAAE,SAAS,EAAE,SAAS,IAAI,MAAM;AAChC;AAAA,MACJ;AAAA,MACA,KAAK;AACD,WAAG,IAAI,GAAG,SAAS,GAAG,SAAS,KAAK;AACpC;AAAA,MACJ,KAAK;AACD,UAAE,YAAY,EAAE,YAAY,IAAI,MAAM;AACtC;AAAA,MACJ,KAAK;AACD,UAAE,YAAY,EAAE,YAAY,IAAI,SAAS,EAAE;AAC3C;AAAA,IACR;AACA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,OAAO,KAAK,OAAO,KAAK,OAAO,MAAM,aAAa,MAAM;AACpD,WAAO,GAAG,cAAc,IAAI;AAC5B,QAAI,CAAC,SAAS,CAAC;AAAK,aAAO;AAC3B,QAAI;AACJ,YAAQ,MAAM;AAAA,MACV,KAAK;AACD,iBAAS,GAAG,KAAK,OAAO,KAAK,OAAO,IAAI;AACxC;AAAA,MACJ,KAAK;AACD,iBAAS,GAAG,KAAK,OAAO,KAAK,OAAO,IAAI;AACxC;AAAA,MACJ,KAAK;AACD,kBAAW,IAAI,YAAY,IAAI,MAAM,YAAY,KAAK,MAAO,IAAI,SAAS,IAAI,MAAM,SAAS;AAC7F,YAAI,WAAW,KAAK,YAAY;AAC5B,mBAAS,GAAG,KAAK,OAAO,KAAK,OAAO,UAAU,IAAI,GAAG,YAAY,KAAK;AAAA,QAC1E;AACA;AAAA,MACJ,KAAK;AACD,iBAAS,GAAG,KAAK,OAAO,KAAK,KAAK,IAAI;AACtC;AAAA,MACJ,KAAK,OAAO;AACR,cAAM,UAAU,MAAM,kBAAkB,IAAI,IAAI,kBAAkB;AAClE,kBAAU,MAAM,QAAQ,UAAU,KAAK,OAAQ;AAC/C;AAAA,MACJ;AAAA,MACA,KAAK;AACD,kBAAU,MAAM,SAAS;AACzB;AAAA,MACJ,KAAK;AACD,kBAAU,MAAM,SAAS;AACzB;AAAA,MACJ,KAAK;AACD,kBAAU,MAAM,SAAS;AACzB;AAAA,MACJ,KAAK;AACD,iBAAU,MAAM;AAChB;AAAA,IACR;AACA,WAAO,aAAa,SAAS,KAAK,MAAM,MAAM;AAAA,EAClD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA,OAAO,QAAQ,MAAM,OAAO,OAAO,QAAQ,MAAM,eAAe,GAAG,cAAc;AAC7E,QAAI,CAAC,MAAM;AACP,aAAO;AAAA,IACX;AACA,WAAO,GAAG,cAAc,IAAI;AAC5B,QAAI,OAAO;AACP,aAAO,GAAG,MAAM,IAAI;AAAA,IACxB;AACA,YAAQ,MAAM;AAAA,MACV,KAAK;AACD,aAAK,SAAS,GAAG,CAAC;AAClB,aAAK,SAAS,GAAG,GAAG,GAAG,CAAC;AACxB,eAAO;AAAA,MACX,KAAK;AACD,aAAK,UAAU,GAAG,IAAI,MAAM,SAAS,IAAI,KAAK,GAAG,CAAC;AAClD,aAAK,SAAS,GAAG,GAAG,GAAG,CAAC;AACxB,eAAO;AAAA,MACX,KAAK;AACD,aAAK,QAAQ,CAAC;AACd,aAAK,SAAS,GAAG,GAAG,GAAG,CAAC;AACxB,eAAO;AAAA,MACX,KAAK,QAAQ;AACT,cAAM,QAAQ,KAAK,OAAO,IAAI;AAC9B,aAAK,QAAQ,KAAK,QAAQ,IAAI,KAAK;AACnC,aAAK,SAAS,GAAG,GAAG,GAAG,CAAC;AACxB,eAAO;AAAA,MACX;AAAA,MACA,KAAK;AACD,aAAK,SAAS,GAAG,GAAG,GAAG,CAAC;AACxB,eAAO;AAAA,MAEX,KAAK;AACD,aAAK,WAAW,IAAI,KAAK,KAAK,WAAW,CAAC;AAAA,MAE9C,KAAK;AACD,aAAK,WAAW,IAAI,KAAK,KAAK,WAAW,CAAC;AAAA,MAE9C,KAAK;AACD,aAAK,gBAAgB,IAAI,KAAK,KAAK,gBAAgB,CAAC;AAAA,MAExD,KAAK;AACD,eAAO;AAAA,IACf;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,OAAO,MAAM,MAAM;AACf,WAAO,IAAI,KAAK,KAAK,YAAY,GAAG,KAAK,SAAS,GAAG,KAAK,QAAQ,IAAI,CAAC;AAAA,EAC3E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,OAAO,MAAM,MAAM;AACf,WAAO,IAAI,KAAK,KAAK,QAAQ,CAAC;AAAA,EAClC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,OAAO,UAAU,MAAM,QAAQ,MAAM;AACjC,QAAI,CAAC,MAAM;AACP,aAAO;AAAA,IACX;AACA,QAAI,OAAO;AACP,aAAO,IAAI,KAAK,KAAK,QAAQ,CAAC;AAAA,IAClC;AACA,SAAK,SAAS,GAAG,GAAG,GAAG,CAAC;AACxB,WAAO;AAAA,EACX;AAAA,EACA,OAAO,SAAS,MAAM,WAAW;AAC7B,QAAI,MAAM,GAAG,UAAU,IAAI;AAC3B,QAAI,aAAa,MAAM,MAAM;AACzB,YAAM,GAAG,IAAI,KAAK,GAAG,GAAG;AAAA,IAC5B;AACA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,OAAO,aAAa,MAAM,OAAO,MAAM;AACnC,UAAM,IAAK,KAAK,SAAS,IAAI,iBAAiB,KAAK,cAC9C,KAAK,WAAW,IAAI,iBAAiB,OAAO,cAC5C,KAAK,WAAW,IAAI,iBAAiB,OAAO,cAC7C,KAAK,gBAAgB;AACzB,WAAQ,SAAS,OAAQ,IAAI,GAAG,GAAG,MAAM,GAAG,IAAI;AAAA,EACpD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,OAAO,IAAI,MAAM,MAAM,QAAQ;AAC3B,QAAI,CAAC,MAAM;AACP,aAAO;AAAA,IACX;AACA,QAAI,OAAO,SAAS,UAAU;AAC1B,cAAQ,GAAG,cAAc,IAAI,GAAG;AAAA,QAC5B,KAAK;AAED,cAAI,WAAW,KAAK,KAAK,gBAAgB,IAAI,GAAG;AAC5C,iBAAK,gBAAgB,MAAM;AAAA,UAC/B;AACA;AAAA,QACJ,KAAK;AAED,cAAI,WAAW,KAAK,KAAK,WAAW,IAAI,GAAG;AACvC,iBAAK,WAAW,MAAM;AAAA,UAC1B;AACA;AAAA,QACJ,KAAK;AAED,cAAI,WAAW,KAAK,KAAK,WAAW,IAAI,GAAG;AACvC,iBAAK,WAAW,MAAM;AAAA,UAC1B;AACA;AAAA,QACJ,KAAK;AACD,eAAK,SAAS,MAAM;AACpB;AAAA,QACJ,KAAK;AAAA,QACL,KAAK;AACD,eAAK,QAAQ,MAAM;AACnB;AAAA,QACJ,KAAK;AACD,gBAAM,IAAI,MAAM,sBAAsB;AAAA,QAC1C,KAAK;AACD,eAAK,SAAS,MAAM;AACpB;AAAA,QACJ,KAAK;AAED,eAAK,QAAQ,CAAC;AACd,eAAK,UAAU,SAAS,KAAK,CAAC;AAC9B;AAAA,QACJ,KAAK;AACD,eAAK,YAAY,MAAM;AACvB;AAAA,MACR;AAAA,IACJ,OACK;AACD,aAAO,QAAQ,IAAI,EAEd,KAAK,CAAC,GAAG,MAAM,eAAe,EAAE,CAAC,CAAC,IAAI,eAAe,EAAE,CAAC,CAAC,CAAC,EAC1D,QAAQ,CAAC,CAACC,OAAMC,OAAM,MAAM;AACzB,WAAG,IAAI,MAAMD,OAAMC,OAAM;AAAA,MAC7B,CAAC;AAAA,IACT;AACA,WAAO;AAAA,EACX;AAAA,EACA,OAAO,gBAAgB,MAAM,QAAQ,MAAM;AACvC,WAAO,GAAG,IAAI,GAAG,UAAU,MAAM,KAAK,GAAG,QAAQ,EAAE;AAAA,EACvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,OAAO,UAAU,MAAMC,MAAK,KAAK;AAC7B,QAAIA,QAAO,MAAM;AACb,aAAO,GAAG,IAAI,MAAMA,IAAG;AAAA,IAC3B;AACA,WAAO,OAAO,OAAO,OAAO,GAAG,IAAI,MAAM,GAAG;AAAA,EAChD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,OAAO,QAAQ,OAAO,UAAU,GAAG,UAAU,GAAG,KAAK,GAAG;AACpD,QAAI,iBAAiB,MAAM;AACvB,WAAK,MAAM,gBAAgB;AAC3B,gBAAU,MAAM,WAAW;AAC3B,gBAAU,MAAM,WAAW;AAC3B,cAAQ,MAAM,SAAS;AAAA,IAC3B;AACA,WAAO,IAAI,KAAK,cAAc,eAAe,aAAa,OAAO,SAAS,SAAS,EAAE;AAAA,EACzF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,OAAO,eAAe,YAAY,YAAY;AAC1C,eAAW,SAAS,WAAW,SAAS,CAAC;AACzC,eAAW,WAAW,WAAW,WAAW,CAAC;AAC7C,eAAW,WAAW,WAAW,WAAW,CAAC;AAC7C,eAAW,gBAAgB,WAAW,gBAAgB,CAAC;AACvD,WAAO;AAAA,EACX;AAAA;AAAA;AAAA,EAGA,WAAW,eAAe;AACtB,UACI,QAAO,oBAAI,KAAK,GAAE,YAAY,GAC9B,MAAO,IAAI,KAAK,MAAM,GAAG,CAAC,GAC1B,MAAO,IAAI,KAAK,MAAM,GAAG,CAAC;AAC9B,WAAO,IAAI,kBAAkB,MAAM,IAAI,kBAAkB;AAAA,EAC7D;AAAA,EACA,OAAO,MAAM,MAAM;AACf,UACI,OAAO,KAAK,YAAY,GACxB,MAAO,IAAI,KAAK,MAAM,GAAG,CAAC,GAC1B,MAAO,IAAI,KAAK,MAAM,GAAG,CAAC;AAC9B,WAAO,KAAK,kBAAkB,IAAI,KAAK,IAAI,IAAI,kBAAkB,GAAG,IAAI,kBAAkB,CAAC;AAAA,EAC/F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,OAAO,SAAS,OAAO,QAAQ;AAC3B,WAAO,QAAQ;AAAA,EACnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,OAAO,QAAQ,OAAO,QAAQ;AAC1B,WAAO,QAAQ;AAAA,EACnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,OAAO,QAAQ,OAAO,QAAQ,OAAO,MAAM;AACvC,QAAI,SAAS,MAAM;AAGf,aAAO,SAAS,UAAU,MAAM,QAAQ,MAAM,OAAO,QAAQ;AAAA,IACjE;AACA,WAAO,GAAG,QAAQ,OAAO,IAAI,IAAI,GAAG,QAAQ,QAAQ,IAAI,MAAM;AAAA,EAClE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,OAAO,QAAQ,OAAO,QAAQ,OAAO,MAAM;AAEvC,QAAI,MAAM;AACN,cAAQ,GAAG,QAAQ,OAAO,IAAI;AAC9B,eAAS,GAAG,QAAQ,QAAQ,IAAI;AAAA,IACpC;AAEA,QAAI,QAAQ;AAAQ,aAAO;AAC3B,QAAI,QAAQ;AAAQ,aAAO;AAC3B,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,OAAO,MAAM,MAAMA,MAAK,KAAK;AACzB,QAAI,CAAC,MAAM,IAAI,GAAG;AACd,UAAIA,QAAO,MAAM;AACb,eAAO,KAAK,IAAI,MAAMA,IAAG;AAAA,MAC7B;AACA,UAAI,OAAO,MAAM;AACb,eAAO,KAAK,IAAI,MAAM,GAAG;AAAA,MAC7B;AACA,aAAO,IAAI,KAAK,IAAI;AAAA,IACxB;AAAA,EACJ;AAAA,EACA,OAAO,WAAW,OAAO,QAAQ;AAC7B,WAAO,GAAG,QAAQ,OAAO,QAAQ,GAAG,MAAM;AAAA,EAC9C;AAAA,EACA,OAAO,WAAW,OAAO,QAAQ;AAC7B,WAAO,MAAM,SAAS,MAAM,OAAO,SAAS,KACxC,MAAM,WAAW,MAAM,OAAO,WAAW,KACzC,MAAM,WAAW,MAAM,OAAO,WAAW,KACzC,MAAM,gBAAgB,MAAM,OAAO,gBAAgB;AAAA,EAC3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,OAAO,UAAU,MAAM,MAAM;AACzB,WAAO,GAAG,QAAQ,MAAM,GAAG,QAAQ,MAAM,IAAI,CAAC;AAAA,EAClD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,OAAO,cAAc,MAAM,OAAO,KAAK;AAEnC,WAAO,MAAM,QAAQ,KAAK,KAAK,QAAQ,KAAK,KAAK,QAAQ,IAAI,IAAI,QAAQ;AAAA,EAC7E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,OAAO,mBAAmB,MAAM,OAAO,KAAK;AACxC,WAAO,MAAM,QAAQ,KAAK,KAAK,QAAQ,KAAK,KAAK,QAAQ,KAAK,IAAI,QAAQ;AAAA,EAC9E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,OAAO,eAAe,YAAY,UAAU,YAAY,UAAU;AAC9D,WAAO,GAAG,cAAc,YAAY,YAAY,QAAQ,KACpD,GAAG,cAAc,YAAY,YAAY,QAAQ;AAAA,EACzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,OAAO,aAAa,OAAO,OAAO;AAC9B,WAAO,KAAK,KAAK,eAAe,GAAG,cAAc,KAAK,CAAC,IAAI,eAAe,GAAG,cAAc,KAAK,CAAC,CAAC;AAAA,EACtG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAyBA,OAAO,iBAAiB,WAAW,SAAS,gBAAgB,cAAc;AACtE,WAAQ,iBAAiB,aAAc,KAAM,UAAU,gBAAiB;AAAA,EAC5E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,WAAW,eAAe;AAEtB,QAAI,GAAG,iBAAiB,MAAM;AAE1B,SAAG,gBAAgB,KAAK,SAAS,iBAAiB,KAAK;AAAA,IAC3D;AACA,WAAO,GAAG;AAAA,EACd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAgBA,WAAW,iBAAiB;AACxB,WAAO,EAAE,GAAG,KAAK,SAAS,mBAAmB,EAAE;AAAA,EACnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAeA,WAAW,wBAAwB;AAE/B,WAAO,OAAO,KAAK,KAAK,cAAc,EAAE,IAAI,MAAM;AAAA,EACtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAkBA,WAAW,WAAW;AAClB,WAAO,EAAE,GAAG,KAAK,SAAS,aAAa,EAAE;AAAA,EAC7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,OAAO,IAAI,MAAM,MAAM;AACnB,YAAQ,GAAG,cAAc,IAAI,GAAG;AAAA,MAC5B,KAAK;AACD,eAAO,KAAK,gBAAgB;AAAA,MAChC,KAAK;AACD,eAAO,KAAK,WAAW;AAAA,MAC3B,KAAK;AACD,eAAO,KAAK,WAAW;AAAA,MAC3B,KAAK;AACD,eAAO,KAAK,SAAS;AAAA,MACzB,KAAK;AAAA,MACL,KAAK;AACD,eAAO,KAAK,QAAQ;AAAA,MACxB,KAAK;AACD,eAAO,QAAQ,EAAE,IAAI;AAAA,MACzB,KAAK;AACD,eAAO,KAAK,SAAS;AAAA,MACzB,KAAK;AACD,eAAO,KAAK,MAAM,KAAK,SAAS,IAAI,CAAC,IAAI;AAAA,MAC7C,KAAK;AACD,eAAO,KAAK,YAAY;AAAA,IAChC;AACA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,OAAO,WAAW,MAAM;AACpB,UACI,WAAW,KAAK,YAAY,GAC5B,WAAW,IAAI,KAAK,WAAW,GAAG,GAAG,CAAC,IAAI,IAAI,KAAK,UAAU,GAAG,CAAC;AACrE,WAAO,KAAK,GAAG,OAAO,QAAQ;AAAA,EAClC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,OAAO,YAAY,MAAM;AACrB,WAAO,KAAK,IAAI,KAAK,KAAK,YAAY,GAAG,KAAK,SAAS,GAAG,EAAE,EAAE,QAAQ;AAAA,EAC1E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,OAAO,WAAW,MAAM;AACpB,UACI,WAAW,KAAK,YAAY,GAC5BN,SAAW,KAAK,SAAS,GACzBG,OAAW,KAAK,QAAQ,GACxB,WAAW,IAAI,KAAK,UAAUH,QAAOG,OAAM,CAAC,IAAI,IAAI,KAAK,UAAUH,QAAOG,IAAG;AACjF,WAAO,KAAK,GAAG,QAAQ,QAAQ;AAAA,EACnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,OAAO,0BAA0B,MAAM,MAAM;AACzC,QAAI;AACJ,YAAQ,MAAM;AAAA,MACV,KAAK;AACD,iBAAS,GAAG,eAAe,GAAG,YAAY,IAAI,GAAG,KAAK;AACtD;AAAA,MACJ,KAAK;AACD,iBAAS,GAAG,eAAe,GAAG,WAAW,IAAI,GAAG,KAAK;AACrD;AAAA,MACJ,KAAK;AACD,iBAAS,GAAG,eAAe,GAAG,WAAW,IAAI,GAAG,MAAM;AACtD;AAAA,MACJ;AACI,iBAAS,GAAG,eAAe,IAAI;AAAA,IACvC;AACA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,OAAO,oBAAoB,MAAM;AAC7B,WAAO,IAAI,KAAK,KAAK,YAAY,GAAG,KAAK,SAAS,GAAG,CAAC;AAAA,EAC1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,OAAO,mBAAmB,MAAM;AAC5B,WAAO,IAAI,KAAK,KAAK,YAAY,GAAG,KAAK,SAAS,IAAI,GAAG,CAAC;AAAA,EAC9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,OAAO,IAAI,OAAO,QAAQ;AACtB,WAAO,MAAM,QAAQ,IAAI,OAAO,QAAQ,IAAI,QAAQ;AAAA,EACxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,OAAO,IAAI,OAAO,QAAQ;AACtB,WAAO,MAAM,QAAQ,IAAI,OAAO,QAAQ,IAAI,QAAQ;AAAA,EACxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,OAAO,QAAQ,MAAM,MAAM,YAAY,GAAG,eAAe,GAAG,cAAc;AACtE,QAAI,SAAS,QAAQ;AACjB,YACI,KAAM,GAAG,MAAM,IAAI,GACnBA,OAAM,GAAG,OAAO;AACpB,SAAG,QAAQ,IAAI,OAAO,KAAK;AAC3B,SAAG,IAAI,IAAI,eAAeA,OAAM,KAAK,aAAa,gBAAgBA,OAAM,IAAI,KAAK,OAAO,KAAK;AAE7F,UAAI,GAAG,OAAO,MAAM,cAAc;AAC9B,WAAG,IAAI,IAAI,GAAG,MAAM;AAAA,MACxB;AACA,aAAO;AAAA,IACX;AACA,WAAO,GAAG,QAAQ,GAAG,IAAI,MAAM,WAAW,IAAI,GAAG,MAAM,KAAK;AAAA,EAChE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAuBA,OAAO,YAAY,MAAM;AACrB,WAAO,GAAG,OAAO,IAAI,KAAK,CAAC,MAAM,IAAI;AAAA,EACzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,OAAO,OAAO,OAAO;AAEjB,WAAO,SAASI,UAAS,KAAK,KAAK,MAAMC;AAAA,EAC7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,OAAO,kBAAkB,MAAM,QAAQ,OAAO,oBAAoB,OAAO;AACrE,QAAI,UAAU,GAAG,IAAI,oBAAoB,OAAO,GAAG,UAAU,MAAM,KAAK,GAAG,GAAG,KAAK;AAEnF,QAAI,QAAQ,QAAQ,MAAM,KAAK,QAAQ,GAAG;AACtC,YACI,gBAAgB,GAAG,IAAI,GAAG,UAAU,MAAM,KAAK,GAAG,GAAG,KAAK,EAAE,kBAAkB,GAC9E,aAAgB,KAAK,kBAAkB;AAC3C,gBAAU,GAAG,IAAI,SAAS,aAAa,eAAe,QAAQ;AAAA,IAClE;AACA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,OAAO,oBAAoB,MAAM,oBAAoB,OAAO;AACxD,UAAM,WAAW,oBAAoB,OAAO,GAAG,UAAU,MAAM,IAAI;AAEnE,QAAI,WAAW,MAAM;AACjB,aAAO;AAAA,IACX,OACK;AACD,aAAO,GAAG,IAAI,UAAU,IAAI,KAAK;AAAA,IACrC;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,OAAO,mBAAmB,WAAW,UAAU,WAAW;AACtD,UACI,YAAa,UAAU,SAAS,MAAM,QAAQ,SAAS,IACjD,YAAW,OAAO,WAAW,MAAM,IACnC,GAAG,YAAW,OAAO,WAAW,KAAK,OAAO,YAAW,OAAO,SAAS,KAAK,KAClF,OAAO,YAAW,cAAc,SAAS;AAC7C,WAAO,GAAG,KAAK,CAAC,MAAM,aAAa,KAAK,CAAC;AAAA,EAC7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,OAAO,cAAc,MAAM,eAAe,YAAW,cAAc;AAC/D,UACI,QAAY,IAAI,KAAK,KAAK,YAAY,GAAG,GAAG,CAAC,GAC7C,QAAY,IAAI,KAAK,KAAK,YAAY,GAAG,IAAI,EAAE,GAC/C,WAAY,aAAa,MAAM,OAAO,IAAI,YAAY,GACtD,UAAY,aAAa,MAAM,OAAO,IAAI,YAAY,GACtD,YAAY,WAAW,MAAM,KAAK;AACtC,QAAI;AAEJ,QAAI,WAAW,GAAG;AACd,mBAAa,KAAK,OAAO,YAAY,WAAW,KAAK,CAAC,IAAI;AAAA,IAC9D,OACK;AACD,mBAAa,KAAK,OAAO,YAAY,WAAW,KAAK,CAAC;AAAA,IAC1D;AACA,QAAI,YAAY;AACZ,UAAI,OAAO,KAAK,YAAY;AAE5B,UAAI,eAAe,MAAM,UAAU,GAAG;AAClC;AACA,qBAAa;AAAA,MACjB;AACA,aAAO,CAAC,MAAM,UAAU;AAAA,IAC5B;AAGA,UAAM,qBAAqB,YAAW,cAAc,IAAI,KAAK,KAAK,YAAY,IAAI,GAAG,IAAI,EAAE,CAAC,EAAE,CAAC;AAC/F,WAAO,CAAC,KAAK,YAAY,IAAI,GAAG,kBAAkB;AAAA,EACtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,OAAO,YAAY,OAAO,MAAM;AAC5B,WAAO,GAAG,cAAc,IAAI;AAC5B,QAAI,UAAU;AAAG,cAAQ;AACzB,WAAO,QAAQ,MAAM;AAAA,EACzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,OAAO,uBAAuB,UAAU,MAAM,iBAAiB,OAAO;AAClE,eAAW,GAAG,cAAc,QAAQ;AACpC,WAAO,GAAG,cAAc,IAAI;AAC5B,QAAI,aAAa;AAAM,aAAO;AAG9B,QAAI,iBAAiB,QAAQ,KAAK,iBAAiB,QAAQ,EAAE,IAAI,MAAM,kBAAkB,iBAAiB,QAAQ,EAAE,IAAI,IAAI,IAAI;AAC5H,aAAO,IAAI,GAAG,GAAG,MAAM,GAAG,QAAQ;AAAA,IACtC;AACA,QAAI,iBAAiB,IAAI,KAAK,iBAAiB,IAAI,EAAE,QAAQ,MAAM,kBAAkB,iBAAiB,IAAI,EAAE,QAAQ,IAAI,IAAI;AACxH,aAAO,GAAG,GAAG,UAAU,GAAG,IAAI;AAAA,IAClC;AACA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,OAAO,mBAAmB,MAAM;AAG5B,WAAO,GAAG,cAAc,IAAI;AAE5B,WAAO,GAAG,WAAW,IAAI,EAAE;AAAA,EAC/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAeA,OAAO,uBAAuB,MAAM,SAAS,OAAO;AAChD,UAAM,aAAa,KAAK,OAAO,CAAC,MAAM,KAAK,OAAO,CAAC,EAAE,YAAY;AAEjE,WAAO,GAAG,cAAc,IAAI;AAG5B,WAAO,GAAG,cAAc,IAAI;AAG5B,WAAO,GAAG,WAAW,IAAI,EAAE,SAAS,WAAW,QAAQ;AAEvD,QAAI,YAAY;AACZ,aAAO,aAAa,WAAW,IAAI;AAAA,IACvC;AACA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,OAAO,cAAc,MAAM;AACvB,QAAI,CAAC,MAAM;AACP,aAAO;AAAA,IACX;AACA,UAAM,YAAY,KAAK,YAAY;AACnC,QAAI,cAAc,QAAQ;AACtB,aAAO;AAAA,IACX;AACA,WAAO,mBAAmB,SAAS,SAAS,IAEtC,YAEA,gBAAgB,IAAI,KAAK,gBAAgB,SAAS;AAAA,EAC5D;AAAA,EACA,OAAO,cAAc,MAAM;AAEvB,WAAO,GAAG,cAAc,IAAI,KAAK,GAAG,cAAc,GAAG,cAAc,IAAI,CAAC;AAAA,EAC5E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA,OAAO,kBAAkB,OAAO,KAAK,MAAM,YAAY;AACnD,WAAO,GAAG,KAAK,OAAO,KAAK,MAAM,UAAU;AAAA,EAC/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,OAAO,eAAe,WAAW,WAAW;AACxC,WAAO,EAAE,cAAc,aAAa,cAAc;AAAA,EACtD;AAAA,EACA,OAAO,eAAe,MAAM;AACxB,WAAO,mBAAmB,eAAe,GAAG,cAAc,IAAI,CAAC,IAAI,CAAC,KAAK;AAAA,EAC7E;AAAA,EACA,OAAO,cAAc,MAAM;AACvB,WAAO,mBAAmB,eAAe,GAAG,cAAc,IAAI,CAAC,IAAI,CAAC,KAAK;AAAA,EAC7E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAqBA,OAAO,MAAM,MAAM,WAAW,MAAM,cAAc;AAC9C,WAAO,GAAG,KAAK,SAAS,MAAM,WAAW,MAAM,YAAY;AAAA,EAC/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAsBA,OAAO,MAAM,MAAM,WAAW,MAAM,cAAc;AAC9C,WAAO,GAAG,KAAK,SAAS,MAAM,WAAW,MAAM,YAAY;AAAA,EAC/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAsBA,OAAO,KAAK,MAAM,WAAW,MAAM,cAAc;AAC7C,WAAO,GAAG,KAAK,QAAQ,MAAM,WAAW,MAAM,YAAY;AAAA,EAC9D;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,OAAO,KAAK,WAAW,MAAM,WAAW,MAAM,eAAe,GAAG,cAAc;AAC1E,UAAM,SAAS,QAAQ,SAAS;AAChC,QAAI,OAAO,cAAc,UAAU;AAC/B,kBAAY,GAAG,cAAc,SAAS;AAAA,IAC1C;AACA,QAAI,QAAQ,SAAS,SAAS,GAAG;AAI7B,YAAM,YAAY,UAAU,aAAa,UAAU;AAGnD,cAAQ,UAAU,MAAM;AAAA,QACpB,KAAK,QACL;AACI,gBAAM,UAAU,KAAK,OAAO;AAG5B,iBAAO,GAAG;AAAA,YACN,GAAG,UAAU,IAAI;AAAA,YACjB,WAAW,eAAe,eAAe,UAAU,EAAE,UAAU,eAAe;AAAA,YAC9E;AAAA,UACJ;AACA,iBAAO,GAAG,SAAS,EAAE,MAAM,GAAG,YAAY,UAAU,IAAI;AAAA,QAC5D;AAAA,QACA,KAAK,SACL;AAGI,iBAAO,GAAG,SAAS,IAAI;AACvB,cAAI;AAEJ,cAAI,MAAM;AACN,mBAAO,GAAG,SAAS,IAAI;AACvB,2BAAe,OAAO,OAAO,OAAO,MAAM,SAAS;AAAA,UACvD,OACK;AACD,2BAAe,OAAO,MAAM,SAAS;AAAA,UACzC;AAEA,iBAAO,GAAG,aAAa,YAAY;AAAA,QACvC;AAAA,QACA,KAAK;AACD,iBAAO,GAAG,SAAS,EAAE,MAAM,GAAG,YAAY,YAAY,IAAI;AAAA,QAC9D,KAAK;AACD,iBAAO,GAAG,SAAS,EAAE,MAAM,GAAG,YAAY,aAAa,IAAI;AAAA,QAC/D,KAAK;AAED,iBAAO,GAAG,SAAS,EAAE,MAAM,GAAG,YAAY,YAAY,IAAI;AAAA,MAClE;AAEA,kBAAY,GAAG,GAAG,MAAM,WAAW,UAAU,IAAI;AAAA,IACrD;AAEA,QAAI,MAAM;AACN,YAAM,WAAW,GAAG,GAAG,MAAM,KAAK,kBAAkB,IAAI,KAAK,kBAAkB,GAAG,IAAI;AACtF,aAAO,IAAI,KAAK,KAAK,QAAQ,IAAI,OAAO,GAAG,KAAK,MAAM,MAAM,IAAI,IAAI,UAAU,SAAS,CAAC;AAAA,IAC5F,OACK;AACD,YAAM,SAAS,KAAK,kBAAkB,IAAI,KAAK;AAM/C,aAAO,IAAI,KAAK,OAAO,KAAK,QAAQ,IAAI,QAAQ,SAAS,IAAI,MAAM;AAAA,IACvE;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAuBA,OAAO,cAAc,OAAO,gBAAgB,MAAM,aAAa;AA/kFnE;AAglFQ,UACI,gBAAgB,gBAAgB,4BAA4B,yBAC5D,QAAgB,cAAc,KAAK,KAAK;AAC5C,QAAI,SAAS,QAAQ,CAAC,OAAO;AACzB,aAAO;AAAA,IACX;AACA,UACI,YAAY,aAAY,WAAM,CAAC,MAAP,mBAAU,QAAQ,KAAK,IAAI,GACnD,OAAY,GAAG,cAAc,MAAM,CAAC,CAAC,KAAK;AAC9C,QAAI,CAAC,MAAM;AACP,aAAO;AAAA,IACX;AACA,WAAO;AAAA,MACH;AAAA,MACA;AAAA,IACJ;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,OAAO,cAAc,UAAU;AAG3B,UAAM,YAAY,YAAY,OAAO,OAAO,GAAG,cAAc,KAAK,SAAS,YAAY,CAAC;AACxF,QAAI,CAAC,WAAW;AACZ,aAAO;AAAA,IACX;AAEA,aAAS,cAAc,GAAG,cAAc,mBAAmB,QAAQ,eAAe;AAC9E,UAAI,UAAU,cAAc,CAAC,GAAG;AAC5B,eAAO,mBAAmB,WAAW;AAAA,MACzC;AAAA,IACJ;AAAA,EACJ;AAAA;AAAA;AAAA,EAGA,OAAO,aAAa,OAAO,oBAAI,KAAK,GAAG;AACnC,QAAI,CAAC,MAAM;AACP;AAAA,IACJ;AACA,UAAM,kBAAkB,KAAK,kBAAkB;AAE/C,QAAI,CAAC;AAAiB,aAAO;AAC7B,YAAQ,kBAAkB,IAAI,MAAM,OAChC,KAAK,IAAI,KAAK,MAAM,kBAAkB,EAAE,CAAC,EAAE,SAAS,EAAE,SAAS,GAAG,GAAG,IACrE,MACA,KAAK,IAAI,kBAAkB,EAAE,EAAE,SAAS,EAAE,SAAS,GAAG,GAAG;AAAA,EACjE;AAAA,EACA,OAAO,eAAe;AAClB,UACIC,YAAgB,oBAAI,KAAK,qBAAqB,GAC9C,WAAgB,GAAG,aAAa,CAAC,GACjC,gBAAgB,GAAG,kBAAkB,CAAC;AAC1C,aAAS,SAAS;AAClB,kBAAc,SAAS;AACvB,aAASN,OAAM,GAAGA,OAAM,GAAGA,QAAO;AAC9B,MAAAM,UAAS,QAAQN,IAAG;AACpB,eAAS,KAAK,GAAG,OAAOM,WAAU,MAAM,CAAC;AACzC,oBAAc,KAAK,GAAG,OAAOA,WAAU,KAAK,CAAC;AAAA,IACjD;AACA,OAAG,YAAY;AACf,OAAG,iBAAiB;AAAA,EACxB;AAAA,EACA,OAAO,cAAc;AACjB,WAAO,GAAG;AAAA,EACd;AAAA,EACA,OAAO,WAAWN,MAAK;AACnB,WAAO,GAAG,UAAUA,IAAG;AAAA,EAC3B;AAAA,EACA,OAAO,mBAAmB;AACtB,WAAO,GAAG;AAAA,EACd;AAAA,EACA,OAAO,gBAAgBA,MAAK;AACxB,WAAO,GAAG,eAAeA,IAAG;AAAA,EAChC;AAAA,EACA,OAAO,iBAAiB;AACpB,UACIM,YAAkB,oBAAI,KAAK,qBAAqB,GAChD,aAAkB,GAAG,eAAe,CAAC,GACrC,kBAAkB,GAAG,oBAAoB,CAAC,GAC1C,kBAAkB,CAAC,GACnB,uBAAuB,CAAC;AAC5B,eAAW,SAAS;AACpB,oBAAgB,SAAS;AACzB,aAAST,SAAQ,GAAGA,SAAQ,IAAIA,UAAS;AACrC,MAAAS,UAAS,SAAST,MAAK;AACvB,YAAM,YAAY,GAAG,OAAOS,WAAU,MAAM;AAC5C,iBAAW,KAAK,SAAS;AACzB,YAAM,iBAAiB,GAAG,OAAOA,WAAU,KAAK;AAChD,sBAAgB,KAAK,cAAc;AACnC,sBAAgB,UAAU,YAAY,CAAC,IAAI,EAAE,MAAO,WAAW,OAAQT,OAAM;AAC7E,2BAAqB,eAAe,YAAY,CAAC,IAAI,EAAE,MAAO,gBAAgB,OAAQA,OAAM;AAAA,IAChG;AACA,OAAG,cAAc;AACjB,OAAG,mBAAmB;AACtB,OAAG,mBAAmB;AACtB,OAAG,wBAAwB;AAAA,EAC/B;AAAA,EACA,OAAO,qBAAqB;AACxB,WAAO,GAAG;AAAA,EACd;AAAA,EACA,OAAO,kBAAkBA,QAAO;AAC5B,WAAO,GAAG,iBAAiBA,MAAK;AAAA,EACpC;AAAA,EACA,OAAO,gBAAgB;AACnB,WAAO,GAAG;AAAA,EACd;AAAA,EACA,OAAO,aAAaA,QAAO;AACvB,WAAO,GAAG,YAAYA,MAAK;AAAA,EAC/B;AAAA,EACA,WAAW,OAAO,MAAM;AACpB,IAAAU,UAAS;AACT,yBAAqB,CAAC;AACtB,kBAAc,CAAC;AACf,sBAAkB,CAAC;AAAA,EACvB;AAAA,EACA,WAAW,SAAS;AAChB,WAAOA;AAAA,EACX;AAAA,EACA,OAAO,mBAAmB,YAAY,CAAC,GAAG,oBAAoB,CAAC,GAAG;AAC9D,UACI,KAAa,MACb,aAAa,CAAC;AAClB,QAAI,gBAAgB;AACpB,aAAS,IAAI,GAAG,IAAI,kBAAkB,QAAQ,KAAK;AAC/C,YAEI,gBAAgB,kBAAkB,CAAC,GAEnC,eAAgB,UAAU,CAAC;AAC/B,mBAAa,oBAAoB,mBAAmB,CAAC;AAIrD,iBAAW,aAAa,MAAM,IAC1B,WAAW,aAAa,OAAO,YAAY,CAAC,IACxC,WAAW,aAAa,iBAAiB,IACrC,WAAW,aAAa,kBAAkB,YAAY,CAAC,IAAI;AACvE,uBAAiB,GAAG,IAAI,MAAM;AAC9B,eAAS,IAAI,GAAG,IAAI,cAAc,QAAQ,KAAK;AAC3C,yBAAiB,GAAG,cAAc,CAAC;AAAA,MACvC;AACA,MAAAA,UAAS,GAAG,SAAS,WAAW,KAAK;AACrC,UAAIA,YAAW,SAAS;AAEpB,cAAM,yBAAyB,2BAA2B,CAAC;AAC3D,iBAAS,IAAI,GAAG,IAAI,uBAAuB,QAAQ,KAAK;AACpD,2BAAiB,GAAG,uBAAuB,CAAC;AAAA,QAChD;AAAA,MACJ;AACA,uBAAiB,GAAG,aAAa,UAAU,aAAa,UAAU,aAAa,qBAAqB,aAAa;AAAA,IACrH;AACA,OAAG,aAAa;AAChB,OAAG,gBAAgB,IAAI,OAAO,OAAO,iBAAiB;AAAA,EAC1D;AAAA,EACA,OAAO,cAAc;AACjB,UACI,KAAoB,MACpB,oBAAoB,GAAG,SAAS,sBAAsB,KAAK,CAAC,GAC5D,YAAoB,GAAG,YAAY,GAAG,SAAS,cAAc;AAGjE,QAAI,cAAc,aAAa;AAC3B;AAAA,IACJ;AACA,IAAAA,UAAS,GAAG,SAAS,WAAW,KAAK;AACrC,QAAIA,YAAW,SAAS;AACpB,sBAAgB;AAAA,IACpB,OACK;AACD,sBAAgB,GAAG,SAAS,kBAAkB,KAAK;AAAA,IACvD;AACA,kBAAc,CAAC;AACf,sBAAkB,CAAC;AACnB,kBAAc,CAAC;AACf,yBAAqB,CAAC;AACtB,OAAG,gBAAgB;AACnB,OAAG,mBAAmB,WAAW,iBAAiB;AAElD,OAAG,aAAa;AAChB,OAAG,eAAe;AAAA,EACtB;AAAA;AAEJ;AAxiEA,IAAqB,aAArB;AACI,cADiB,YACV,cAAa,cAAc;AAwiEtC,IAAM,KAAK;AACX,GAAG,gBAAgB;AAEnB,sBAAc,IAAI;AAAA,EACd,QAAU;AAAA,EACV,MAAU;AAAA,EACV,SAAU;AACd,CAAC;AAED,IAAI,sBAAc,QAAQ;AACtB,KAAG,YAAY;AACnB;AACA,WAAW,SAAS;;;ACrxFb,IAAI;AAAA,CACV,SAAUC,WAAU;AACjB,EAAAA,UAAS,aAAa,IAAI;AAC1B,EAAAA,UAAS,QAAQ,IAAI;AACrB,EAAAA,UAAS,QAAQ,IAAI;AACrB,EAAAA,UAAS,MAAM,IAAI;AACnB,EAAAA,UAAS,KAAK,IAAI;AAClB,EAAAA,UAAS,MAAM,IAAI;AACnB,EAAAA,UAAS,OAAO,IAAI;AACpB,EAAAA,UAAS,SAAS,IAAI;AACtB,EAAAA,UAAS,MAAM,IAAI;AACvB,GAAG,aAAa,WAAW,CAAC,EAAE;AAIvB,IAAI;AAAA,CACV,SAAUC,iBAAgB;AAMvB,EAAAA,gBAAe,aAAa,IAAI;AAMhC,EAAAA,gBAAe,cAAc,IAAI;AAKjC,EAAAA,gBAAe,oBAAoB,IAAI;AAOvC,EAAAA,gBAAe,kBAAkB,IAAI;AAOrC,EAAAA,gBAAe,qBAAqB,IAAI;AAKxC,EAAAA,gBAAe,mBAAmB,IAAI;AAC1C,GAAG,mBAAmB,iBAAiB,CAAC,EAAE;AAInC,IAAI;AAAA,CACV,SAAUC,iBAAgB;AACvB,EAAAA,gBAAe,QAAQ,IAAI;AAC3B,EAAAA,gBAAe,eAAe,IAAI;AAClC,EAAAA,gBAAe,aAAa,IAAI;AAChC,EAAAA,gBAAe,YAAY,IAAI;AACnC,GAAG,mBAAmB,iBAAiB,CAAC,EAAE;AAInC,IAAI;AAAA,CACV,SAAUC,6BAA4B;AAInC,EAAAA,4BAA2BA,4BAA2B,SAAS,IAAI,CAAC,IAAI;AAIxE,EAAAA,4BAA2BA,4BAA2B,kBAAkB,IAAI,CAAC,IAAI;AAIjF,EAAAA,4BAA2BA,4BAA2B,uBAAuB,IAAI,CAAC,IAAI;AAC1F,GAAG,+BAA+B,6BAA6B,CAAC,EAAE;AAI3D,IAAI;AAAA,CACV,SAAUC,iBAAgB;AAMvB,EAAAA,gBAAeA,gBAAe,cAAc,IAAI,CAAC,IAAI;AAOrD,EAAAA,gBAAeA,gBAAe,YAAY,IAAI,CAAC,IAAI;AAMnD,EAAAA,gBAAeA,gBAAe,YAAY,IAAI,CAAC,IAAI;AAMnD,EAAAA,gBAAeA,gBAAe,UAAU,IAAI,CAAC,IAAI;AACrD,GAAG,mBAAmB,iBAAiB,CAAC,EAAE;AAInC,IAAI;AAAA,CACV,SAAUC,uBAAsB;AAC7B,EAAAA,sBAAqB,SAAS,IAAI;AAClC,EAAAA,sBAAqB,WAAW,IAAI;AACpC,EAAAA,sBAAqB,SAAS,IAAI;AACtC,GAAG,yBAAyB,uBAAuB,CAAC,EAAE;AAI/C,IAAI;AAAA,CACV,SAAUC,cAAa;AACpB,EAAAA,aAAYA,aAAY,gBAAgB,IAAI,CAAC,IAAI;AACjD,EAAAA,aAAYA,aAAY,cAAc,IAAI,CAAC,IAAI;AAC/C,EAAAA,aAAYA,aAAY,OAAO,IAAI,CAAC,IAAI;AAC5C,GAAG,gBAAgB,cAAc,CAAC,EAAE;AAI7B,IAAI;AAAA,CACV,SAAUC,YAAW;AAIlB,EAAAA,WAAU,SAAS,IAAI;AAIvB,EAAAA,WAAU,UAAU,IAAI;AACxB,EAAAA,WAAU,MAAM,IAAI;AACxB,GAAG,cAAc,YAAY,CAAC,EAAE;AACzB,IAAI;AAAA,CACV,SAAUC,yBAAwB;AAC/B,EAAAA,wBAAuB,OAAO,IAAI;AAClC,EAAAA,wBAAuB,KAAK,IAAI;AACpC,GAAG,2BAA2B,yBAAyB,CAAC,EAAE;;;ACrJnD,IAAM,WAAW,oBAAI,KAAK,OAAiB;AAI3C,IAAM,WAAW,oBAAI,KAAK,MAAgB;AAC1C,IAAM,eAAe,CAAC,SAAS;AAClC,MAAI,CAAC;AACD,WAAO;AACX,QAAM,OAAO,KAAK,QAAQ;AAC1B,SAAO,SAAS,SAAS,QAAQ,KAAK,SAAS,SAAS,QAAQ;AACpE;;;ACNO,IAAI;AAAA,CACV,SAAUC,gBAAe;AACtB,EAAAA,eAAcA,eAAc,MAAM,IAAI,CAAC,IAAI;AAC3C,EAAAA,eAAcA,eAAc,OAAO,IAAI,CAAC,IAAI;AAChD,GAAG,kBAAkB,gBAAgB,CAAC,EAAE;;;ACLjC,IAAI;AAAA,CACV,SAAUC,yBAAwB;AAI/B,EAAAA,wBAAuBA,wBAAuB,mBAAmB,IAAI,CAAC,IAAI;AAI1E,EAAAA,wBAAuBA,wBAAuB,mBAAmB,IAAI,CAAC,IAAI;AAI1E,EAAAA,wBAAuBA,wBAAuB,6BAA6B,IAAI,CAAC,IAAI;AAIpF,EAAAA,wBAAuBA,wBAAuB,iBAAiB,IAAI,CAAC,IAAI;AAC5E,GAAG,2BAA2B,yBAAyB,CAAC,EAAE;AAInD,IAAM,gBAAN,MAAoB;AAAA,EACvB,YAAY,QAAQ;AAChB,SAAK,uBAAuB;AAC5B,SAAK,qBAAqB;AAC1B,SAAK,gCAAgC;AACrC,SAAK,4BAA4B,SAAS;AAC1C,SAAK,uBAAuB;AAE5B,SAAK,WAAW,IAAI,MAAM,KAAK,KAAK,KAAK;AACzC,cAAU,OAAO,OAAO,MAAM,MAAM;AAAA,EACxC;AAAA,EACA,yBAAyB,OAAO,WAAW,SAAS;AAChD,UAAM,6BAA6B,WAAW,OAAO;AACrD,SAAK,cAAc,qBAAqB,MAAM,eAAe,WAAW,OAAO;AAAA,EACnF;AAAA;AAAA;AAAA;AAAA,EAIA,6BAA6B,WAAW,SAAS;AAC7C,UAAM,wBAAwB,KAAK,qBAAqB,QAAQ;AAChE,UAAM,sBAAsB,KAAK,mBAAmB,QAAQ;AAC5D,QAAI,0BAA0B,SAAS,QAAQ,GAAG;AAC9C,YAAM,aAAa,UAAU,QAAQ;AACrC,YAAM,WAAW,QAAQ,QAAQ;AACjC,UAAI,yBAAyB,cAAc,YAAY;AACnD;AAEJ,UAAI,YAAY,uBAAuB;AACnC,kBAAU,IAAI,KAAK,wBAAwB,CAAC;AAAA,MAChD,WACS,cAAc,qBAAqB;AACxC,oBAAY,IAAI,KAAK,mBAAmB;AAAA,MAC5C,WACS,yBAAyB,cAAc,cAAc,qBAAqB;AAC/E,oBAAY,IAAI,KAAK,sBAAsB,CAAC;AAAA,MAChD,WACS,yBAAyB,YAAY,YAAY,qBAAqB;AAC3E,kBAAU,IAAI,KAAK,wBAAwB,CAAC;AAAA,MAChD,OACK;AACD,aAAK,6BAA6B,WAAW,IAAI,KAAK,wBAAwB,CAAC,CAAC;AAChF,aAAK,6BAA6B,IAAI,KAAK,sBAAsB,CAAC,GAAG,OAAO;AAC5E;AAAA,MACJ;AAAA,IACJ;AACA,QAAI,0BAA0B,SAAS,QAAQ,KAAK,UAAU,QAAQ,IAAI,qBAAqB;AAC3F,WAAK,uBAAuB;AAAA,IAChC;AACA,QAAI,wBAAwB,SAAS,QAAQ,KAAK,sBAAsB,QAAQ,QAAQ,GAAG;AACvF,WAAK,qBAAqB;AAAA,IAC9B;AACA,SAAK,UAAU,WAAW,OAAO;AAAA,EACrC;AAAA,EACA,UAAU,IAAoB,IAAkB;AAC5C,UAAM,IAAI,MAAM,iBAAiB;AAAA,EACrC;AAAA,EACA,QAAQ;AACJ,SAAK,uBAAuB;AAC5B,SAAK,qBAAqB;AAC1B,SAAK,cAAc,MAAM;AAAA,EAC7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAoBA,4BAA4B,SAAS,MAAM,OAAO;AA7GtD;AA8GQ,YAAQ,SAAS;AACjB,UAAM,YAAY,QAAQ;AAC1B,UAAM,UAAU,QAAQ;AACxB,UAAM,aAAa,aAAa,UAAU,QAAQ;AAClD,UAAM,WAAW,WAAW,QAAQ,QAAQ;AAC5C,UAAM,YAAW,aAAQ,aAAR,YAAoB,KAAK;AAE1C,UAAM,YAAY,QAAQ,cAAc;AACxC,QAAI,YAAY,CAAC,YAAY,CAAC,SAAS;AACnC,YAAM,IAAI,MAAM,sFAAsF;AAAA,IAC1G;AACA,UAAM,gBAAgB,KAAK;AAC3B,QAAI,kBAAkB,YAAY,YAAY;AAC9C,QAAI,aAAa,YAAY,YAAY;AACzC,UAAM,aAAa,WAAW,QAAQ;AAGtC,aAAS,QAAQ,GAAG,QAAQ,KAAK,sBAAsB,SAAS;AAC5D,UAAI,WAAW;AACX,aAAK,6BAA6B,iBAAiB,WAAW,WAAW,IAAI,iBAAiB,KAAK,+BAA+B,KAAK,yBAAyB,CAAC;AAAA,MACrK,OACK;AACD,aAAK,6BAA6B,aAAa,WAAW,IAAI,iBAAiB,CAAC,KAAK,+BAA+B,KAAK,yBAAyB,GAAG,eAAe;AAAA,MACxK;AACA,UAAI,WAAW,cAAc,cAAc,YAAY,YAAY,cAAc,OAAO,cAAc,KAAK;AAC3G,aAAO,UAAU;AACb,cAAM,oBAAoB,SAAS;AACnC,cAAM,kBAAkB,SAAS;AAEjC,YAAK,aAAa,YAAY,kBAAkB,QAAQ,KAAK,YAEpD,CAAC,aAAa,cAAc,gBAAgB,QAAQ,KAAK,YAAa;AAC3E,iBAAO,uBAAuB;AAAA,QAClC;AACA,YAAK,aAAa,kBAAkB,QAAQ,IAAI,cAAc,YAErD,CAAC,aAAa,aAAa,gBAAgB,QAAQ,KAAK,UAAW;AACxE,iBAAO,uBAAuB;AAAA,QAClC;AAKA,YAAK,aAAa,kBAAkB,QAAQ,KAAK,KAAK,mBAAmB,QAAQ,KAExE,CAAC,aAAa,gBAAgB,QAAQ,KAAK,KAAK,qBAAqB,QAAQ,GAAI;AACtF;AAAA,QACJ;AAEA,qBAAa,YAAY,kBAAkB;AAE3C,cAAM,YAAY,cAAc,kBAAkB,QAAQ,IAAI,aAAa,YAAY;AACvF,cAAM,YAAY,YAAY,gBAAgB,QAAQ,IAAI,WAAW,UAAU;AAC/E,YAAI,KAAK,KAAK,OAAO,WAAW,WAAW,SAAS,aAAa,MAAM,OAAO;AAE1E,iBAAO,uBAAuB;AAAA,QAClC;AACA,mBAAW,YAAY,cAAc,gBAAgB,QAAQ,IAAI,cAAc,gBAAgB,QAAQ;AAAA,MAC3G;AACA,UAAI,aAAa,WAAW,QAAQ,MAAM,SAAS,QAAQ,KAAK,CAAC,aAAa,WAAW,QAAQ,MAAM,SAAS,QAAQ,GAAG;AACvH,eAAO,uBAAuB;AAAA,MAClC;AACA,wBAAkB,YAAY,KAAK,qBAAqB,KAAK;AAAA,IACjE;AACA,WAAO,uBAAuB;AAAA,EAClC;AACJ;;;AChLO,IAAM,kBAAkB,CAAC,UAAU,MAAM,KAAK,IAAI,IAAI,KAAK,CAAC;;;ACK5D,IAAM,wBAAN,MAA4B;AAAA,EAC/B,YAAY,QAAQ;AAChB,SAAK,YAAY,CAAC;AAClB,cAAU,OAAO,OAAO,MAAM,MAAM;AACpC,QAAI,CAAC,KAAK;AACN,YAAM,IAAI,MAAM,0CAA0C;AAAA,EAClE;AAAA,EACA,gBAAgB,UAAU;AACtB,QAAI,KAAK,UAAU,QAAQ,QAAQ,KAAK,IAAI;AACxC,YAAM,OAAO,KAAK,UAAU,MAAM;AAClC,WAAK,KAAK,QAAQ;AAClB,aAAO,IAAI,sBAAsB,EAAE,WAAW,MAAM,UAAU,KAAK,SAAS,CAAC;AAAA,IACjF;AAEI,aAAO;AAAA,EACf;AAAA,EACA,YAAY,UAAU;AAClB,WAAO,IAAI,sBAAsB,EAAE,WAAW,KAAK,UAAU,OAAO,SAAS,SAAS,GAAG,UAAU,KAAK,SAAS,CAAC;AAAA,EACtH;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,eAAe;AACX,QAAI,KAAK,aAAa;AAClB,aAAO,KAAK;AAChB,UAAM,YAAY,KAAK,YAAY,KAAK,mBAAmB,KAAK,SAAS;AAEzE,WAAO,KAAK,YAAY,UAAU,CAAC,EAAE;AAAA,EACzC;AAAA,EACA,mBAAmB,WAAW;AAC1B,UAAM,WAAW,gBAAgB,SAAS;AAE1C,aAAS,KAAK,CAAC,WAAW,cAAc,UAAU,iBAAiB,IAAI,UAAU,iBAAiB,CAAC;AACnG,WAAO;AAAA,EACX;AACJ;;;ACxCO,IAAM,gCAAN,MAAoC;AAAA,EACvC,YAAY,QAAQ;AAChB,SAAK,iBAAiB,CAAC;AACvB,cAAU,OAAO,OAAO,MAAM,MAAM;AAAA,EACxC;AAAA,EACA,YAAY,UAAU;AAClB,UAAM,OAAO,KAAK,eAAe,MAAM;AACvC,SAAK,KAAK,CAAC,SAAS,UAAU,QAAQ,CAAC;AACvC,WAAO,IAAI,8BAA8B,EAAE,gBAAgB,KAAK,CAAC;AAAA,EACrE;AAAA,EACA,uBAAuB;AACnB,QAAI,KAAK,qBAAqB;AAC1B,aAAO,KAAK;AAChB,aAAS,CAAC,WAAW,SAAS,KAAK,KAAK,UAAU,GAAG;AACjD,UAAI,CAAC,UAAU,CAAC,EAAE;AACd,eAAO,KAAK,oBAAoB;AAAA,IACxC;AACA,WAAO,KAAK,oBAAoB;AAAA,EACpC;AAAA,EACA,sBAAsB;AAClB,QAAI,KAAK,oBAAoB;AACzB,aAAO,KAAK;AAChB,aAAS,CAAC,WAAW,SAAS,KAAK,KAAK,UAAU,GAAG;AACjD,UAAI,UAAU,CAAC,EAAE;AACb,eAAO,KAAK,mBAAmB;AAAA,IACvC;AACA,WAAO,KAAK,mBAAmB;AAAA,EACnC;AAAA,EACA,eAAe;AACX,SAAK,UAAU;AACf,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,kBAAkB,UAAU;AACxB,WAAO,KAAK,uBAAuB,EAAE,IAAI,QAAQ;AAAA,EACrD;AAAA,EACA,yBAAyB;AACrB,QAAI,KAAK;AACL,aAAO,KAAK;AAChB,UAAM,MAAM,oBAAI,IAAI;AACpB,aAAS,CAAC,UAAU,SAAS,KAAK,KAAK,UAAU,GAAG;AAChD,UAAI,IAAI,UAAU,UAAU,CAAC,EAAE,SAAS;AAAA,IAC5C;AACA,WAAO,KAAK,sBAAsB;AAAA,EACtC;AAAA,EACA,sBAAsB;AAClB,QAAI,KAAK;AACL,aAAO,KAAK;AAChB,UAAM,YAAY,CAAC;AACnB,aAAS,CAAC,UAAU,SAAS,KAAK,KAAK,UAAU,GAAG;AAChD,UAAI,UAAU,CAAC,EAAE;AACb,kBAAU,KAAK,QAAQ;AAAA,IAC/B;AACA,WAAO,KAAK,mBAAmB;AAAA,EACnC;AAAA,EACA,yBAAyB;AACrB,QAAI,KAAK;AACL,aAAO,KAAK;AAChB,UAAM,YAAY,CAAC;AACnB,aAAS,CAAC,UAAU,SAAS,KAAK,KAAK,UAAU,GAAG;AAChD,UAAI,CAAC,UAAU,CAAC,EAAE;AACd,kBAAU,KAAK,QAAQ;AAAA,IAC/B;AACA,WAAO,KAAK,sBAAsB;AAAA,EACtC;AAAA,EACA,YAAY;AACR,QAAI,KAAK;AACL,aAAO,KAAK;AAChB,UAAM,YAAY,KAAK,YAAY,CAAC;AACpC,UAAM,sBAAsB,oBAAI,IAAI;AACpC,SAAK,eAAe,QAAQ,CAAC,CAAC,UAAU,QAAQ,MAAM;AAClD,UAAI,OAAO,oBAAoB,IAAI,QAAQ;AAC3C,UAAI,CAAC,MAAM;AACP,kBAAU,KAAK,QAAQ;AACvB,eAAO,CAAC;AACR,4BAAoB,IAAI,UAAU,IAAI;AAAA,MAC1C;AACA,WAAK,KAAK,MAAM,MAAM,SAAS,SAAS;AAAA,IAC5C,CAAC;AACD,wBAAoB,QAAQ,CAAC,WAAW,aAAa;AACjD,YAAM,SAAS,gBAAgB,SAAS;AACxC,aAAO;AAAA;AAAA,QAEP,CAAC,WAAW,cAAc,UAAU,iBAAiB,IAAI,UAAU,iBAAiB;AAAA,MAAC;AACrF,0BAAoB,IAAI,UAAU,MAAM;AAAA,IAC5C,CAAC;AACD,WAAO,KAAK,sBAAsB;AAAA,EACtC;AACJ;;;ACvFO,IAAM,eAAe,CAAC,OAAO,OAAO,aAAa,CAAC,GAAG,MAAM,IAAI,MAAM;AACxE,MAAI,OAAO;AACX,MAAI,QAAQ,MAAM;AAClB,SAAO,OAAO,OAAO;AAEjB,UAAM,OAAO,OAAO,SAAS,IAAI;AACjC,UAAM,UAAU,WAAW,OAAO,MAAM,GAAG,CAAC;AAC5C,QAAI,YAAY;AACZ,aAAO,EAAE,OAAO,MAAM,OAAO,IAAI;AAAA,aAC5B,UAAU;AACf,cAAQ;AAAA;AAER,aAAO,MAAM;AAAA,EACrB;AACA,SAAO,EAAE,OAAO,OAAO,OAAO,MAAM;AACxC;;;ACfO,IAAI;AAAA,CACV,SAAUC,gBAAe;AACtB,EAAAA,eAAcA,eAAc,OAAO,IAAI,CAAC,IAAI;AAC5C,EAAAA,eAAcA,eAAc,MAAM,IAAI,CAAC,IAAI;AAC/C,GAAG,kBAAkB,gBAAgB,CAAC,EAAE;AACjC,IAAM,YAAN,MAAgB;AAAA,EACnB,YAAY,YAAY;AACpB,SAAK,OAAO,CAAC;AACb,SAAK,SAAS,CAAC;AACf,SAAK,aAAa,eAAe,CAAC,GAAG,MAAM,IAAI;AAAA,EACnD;AAAA,EACA,IAAI,KAAK,OAAO;AACZ,UAAM,SAAS,aAAa,KAAK,KAAK,MAAM,KAAK,UAAU;AAC3D,QAAI,OAAO,OAAO;AACd,WAAK,OAAO,OAAO,KAAK,IAAI;AAAA,IAChC,OACK;AACD,WAAK,KAAK,OAAO,OAAO,OAAO,GAAG,GAAG;AACrC,WAAK,OAAO,OAAO,OAAO,OAAO,GAAG,KAAK;AAAA,IAC7C;AACA,WAAO,OAAO;AAAA,EAClB;AAAA;AAAA,EAEA,SAAS,OAAO,KAAK,OAAO;AACxB,SAAK,KAAK,OAAO,OAAO,GAAG,GAAG;AAC9B,SAAK,OAAO,OAAO,OAAO,GAAG,KAAK;AAAA,EACtC;AAAA,EACA,WAAW,OAAO,OAAO;AACrB,SAAK,OAAO,KAAK,IAAI;AAAA,EACzB;AAAA,EACA,IAAI,KAAK;AACL,UAAM,SAAS,aAAa,KAAK,KAAK,MAAM,KAAK,UAAU;AAC3D,WAAO,OAAO,QAAQ,KAAK,OAAO,OAAO,KAAK,IAAI;AAAA,EACtD;AAAA,EACA,WAAW,OAAO;AACd,WAAO,QAAQ,KAAK,KAAK,SAAS,EAAE,KAAK,KAAK,KAAK,KAAK,GAAG,OAAO,KAAK,OAAO,KAAK,EAAE,IAAI;AAAA,EAC7F;AAAA,EACA,SAAS,OAAO;AACZ,WAAO,KAAK,KAAK,KAAK;AAAA,EAC1B;AAAA,EACA,WAAW,OAAO;AACd,WAAO,KAAK,OAAO,KAAK;AAAA,EAC5B;AAAA,EACA,OAAO,KAAK;AACR,UAAM,SAAS,aAAa,KAAK,KAAK,MAAM,KAAK,UAAU;AAC3D,QAAI,OAAO;AACP,WAAK,SAAS,OAAO,KAAK;AAAA,EAClC;AAAA,EACA,OAAO;AACH,WAAO,KAAK,KAAK;AAAA,EACrB;AAAA,EACA,SAAS,OAAO;AACZ,SAAK,KAAK,OAAO,OAAO,CAAC;AACzB,SAAK,OAAO,OAAO,OAAO,CAAC;AAAA,EAC/B;AAAA,EACA,WAAW,KAAK;AACZ,UAAM,SAAS,aAAa,KAAK,KAAK,MAAM,KAAK,UAAU;AAC3D,WAAO;AAAA,MACH,OAAO,OAAO,QAAQ,cAAc,QAAQ,cAAc;AAAA,MAC1D,OAAO,OAAO;AAAA,IAClB;AAAA,EACJ;AAAA,EACA,IAAI,MAAM;AACN,UAAM,OAAO,KAAK;AAClB,UAAM,SAAS,KAAK;AACpB,UAAM,SAAS,CAAC;AAChB,aAAS,IAAI,GAAG,IAAI,KAAK,QAAQ;AAC7B,aAAO,KAAK,KAAK,OAAO,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,CAAC;AAC3C,WAAO;AAAA,EACX;AAAA,EACA,gBAAgB;AACZ,WAAO,KAAK,IAAI,CAAC,OAAO,QAAQ;AAAE,aAAO,EAAE,OAAO,IAAI;AAAA,IAAG,CAAC;AAAA,EAC9D;AAAA,EACA,QAAQ;AACJ,SAAK,KAAK,SAAS;AACnB,SAAK,OAAO,SAAS;AAAA,EACzB;AACJ;;;AC3EO,IAAM,gBAAN,MAAoB;AAAA,EACvB,YAAY,QAAQ;AAChB,SAAK,SAAS,IAAI,UAAU,CAAC,GAAG,MAAM,EAAE,QAAQ,IAAI,EAAE,QAAQ,CAAC;AAC/D,SAAK,kBAAkB;AACvB,SAAK,mBAAmB;AACxB,WAAO,OAAO,MAAM,MAAM;AAC1B,QAAI,KAAK,kBAAkB,UAAa,CAAC,KAAK;AAC1C,YAAM,IAAI,MAAM,wDAAwD;AAC5E,SAAK,OAAO,IAAI,KAAK,iBAAiB,KAAK,aAAa;AAAA,EAC5D;AAAA,EACA,OAAO;AACH,WAAO,KAAK,OAAO,KAAK;AAAA,EAC5B;AAAA,EACA,QAAQ,MAAM;AACV,WAAO,KAAK,OAAO,WAAW,IAAI;AAAA,EACtC;AAAA,EACA,UAAU,OAAO;AACb,WAAO,KAAK,OAAO,SAAS,KAAK;AAAA,EACrC;AAAA,EACA,WAAW,OAAO;AACd,WAAO,KAAK,OAAO,WAAW,KAAK;AAAA,EACvC;AAAA,EACA,cAAc,MAAM,gBAAgB,cAAc,MAAM;AAEpD,QAAI,EAAE,OAAO,MAAM,IAAI,KAAK,QAAQ,IAAI;AACxC,QAAI;AACJ,QAAI,kBAAkB,cAAc,MAAM;AACtC,uBAAiB,UAAU,cAAc,QAAQ,QAAQ,QAAQ;AAAA,IACrE,OACK;AACD,uBAAiB,QAAQ;AAAA,IAC7B;AACA,WAAO,KAAK,8BAA8B,cAAc;AAAA,EAC5D;AAAA,EACA,gBAAgB,UAAU;AACtB,QAAI,SAAS,mBAAmB;AAC5B,aAAO;AACX,WAAO,KAAK,8BAA8B,SAAS,iBAAiB,CAAC;AAAA,EACzE;AAAA,EACA,gBAAgB,UAAU;AACtB,QAAI,SAAS,kBAAkB,KAAK,KAAK,IAAI;AACzC,aAAO;AACX,WAAO,KAAK,8BAA8B,SAAS,iBAAiB,CAAC;AAAA,EACzE;AAAA,EACA,8BAA8B,gBAAgB;AAC1C,WAAO;AAAA,MACH;AAAA,MACA,WAAW,KAAK,UAAU,cAAc;AAAA,MACxC,SAAS,iBAAiB,IAAI,KAAK,KAAK,IAAI,KAAK,UAAU,iBAAiB,CAAC,IAAI,KAAK;AAAA,MACtF,eAAe,KAAK,WAAW,cAAc;AAAA,IACjD;AAAA,EACJ;AAAA,EACA,YAAY,WAAW,SAAS,gBAAgB;AAC5C,UAAM,SAAS,KAAK;AAEpB,UAAM,EAAE,OAAO,MAAM,IAAI,OAAO,WAAW,SAAS;AACpD,QAAI;AACJ,QAAI;AACJ,QAAI,SAAS,cAAc,OAAO;AAC9B,YAAM,YAAY,eAAe,mBAAmB,OAAO,WAAW,KAAK,CAAC;AAC5E,aAAO,WAAW,OAAO,SAAS;AAClC,iBAAW,QAAQ;AAAA,IACvB,OACK;AACD,YAAM,YAAY,eAAe,mBAAmB,OAAO,WAAW,QAAQ,CAAC,CAAC;AAChF,aAAO,SAAS,OAAO,WAAW,SAAS;AAC3C,iBAAW,QAAQ;AAAA,IACvB;AACA,WAAO,WAAW,OAAO,KAAK,GAAG;AAC7B,YAAM,UAAU,OAAO,SAAS,QAAQ;AACxC,UAAI,QAAQ,QAAQ,KAAK,QAAQ,QAAQ;AACrC;AACJ,YAAM,YAAY,eAAe,mBAAmB,OAAO,WAAW,QAAQ,CAAC;AAC/E,aAAO,WAAW,UAAU,SAAS;AACrC;AAAA,IACJ;AACA,QAAI,aAAa,OAAO,KAAK,GAAG;AAC5B,aAAO,SAAS,OAAO,KAAK,GAAG,SAAS,KAAK,aAAa;AAAA,IAC9D,OACK;AACD,YAAM,UAAU,OAAO,SAAS,QAAQ;AACxC,UAAI,QAAQ,QAAQ,MAAM,QAAQ,QAAQ,GAAG;AAAA,MAI7C,OACK;AACD,eAAO,SAAS,UAAU,SAAS,gBAAgB;AAAA,MACvD;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,qBAAqB,eAAe,WAAW,SAAS;AACpD,QAAI,WAAW,cAAc,cAAc,SAAS;AACpD,WAAO,UAAU;AACb,WAAK,YAAY,SAAS,WAAW,SAAS,SAAS,sBAAoB,KAAK,mBAAmB,kBAAkB,SAAS,aAAa,CAAC;AAC5I,UAAI,SAAS,QAAQ,QAAQ,IAAI,QAAQ,QAAQ;AAC7C;AACJ,iBAAW,cAAc,gBAAgB,QAAQ;AAAA,IACrD;AAAA,EACJ;AAAA,EACA,aAAa;AACT,WAAO,KAAK,OAAO,IAAI,CAAC,OAAO,SAAS;AAAE,aAAO,EAAE,OAAO,KAAK;AAAA,IAAG,CAAC;AAAA,EACvE;AAAA,EACA,QAAQ;AACJ,SAAK,OAAO,MAAM;AAClB,SAAK,OAAO,IAAI,KAAK,iBAAiB,KAAK,aAAa;AAAA,EAC5D;AACJ;;;ACvGO,IAAM,wBAAN,cAAoC,cAAc;AAAA,EACrD,YAAY,QAAQ;AAChB,UAAM,MAAM;AACZ,SAAK,iBAAiB,gBAAgB,KAAK,cAAc;AACzD,SAAK,gBAAgB,IAAI,cAAc;AAAA,MACnC,eAAe,IAAI,8BAA8B;AAAA,MACjD,oBAAoB,CAAC,WAAW,cAAc;AAC1C,eAAO,UAAU,YAAY,SAAS;AAAA,MAC1C;AAAA,IACJ,CAAC;AAAA,EACL;AAAA,EACA,UAAU,WAAW,SAAS;AAC1B,SAAK,eAAe,QAAQ,mBAAiB;AACzC,oBAAc,UAAU,WAAW,OAAO;AAC1C,WAAK,yBAAyB,eAAe,WAAW,OAAO;AAAA,IACnE,CAAC;AAAA,EACL;AACJ;AACA,IAAM,2BAA2B,oBAAI,IAAI;AAClC,IAAM,mBAAmB,CAAC,cAAc;AAC3C,QAAMC,cAAa,gBAAgB,SAAS;AAC5C,MAAIA,YAAW,WAAW;AACtB,UAAM,IAAI,MAAM,yBAAyB;AAC7C,EAAAA,YAAW,KAAK,CAAC,WAAW,cAAc;AACtC,QAAI,UAAU,aAAa,UAAU;AACjC,aAAO;AAAA;AAEP,aAAO;AAAA,EACf,CAAC;AACD,QAAM,OAAOA,YAAW,IAAI,cAAY,SAAS,aAAa,GAAG,EAAE,KAAK,EAAE;AAC1E,QAAM,eAAeA,YAAW,IAAI,cAAY,SAAS,UAAU,GAAG,EAAE,KAAK,EAAE;AAC/E,MAAI,SAAS,yBAAyB,IAAI,IAAI;AAC9C,MAAI;AACJ,MAAI,UAAU,OAAO,iBAAiB;AAClC,UAAM,OAAO;AAAA,OACZ;AACD,UAAM,IAAI,sBAAsB,EAAE,gBAAgBA,YAAW,IAAI,cAAY,SAAS,aAAa,EAAE,CAAC;AAAA,EAK1G;AACA,SAAO;AACX;;;AC7CA,IAAM,qBAAN,cAAiC,MAAM;AAAA,EACnC,YAAY,UAAU,MAAM;AACxB,UAAM;AACN,SAAK,WAAW;AAChB,SAAK,OAAO;AAAA,EAChB;AACJ;AAEA,IAAM,eAAN,MAAmB;AAAA,EACf,YAAY,UAAU,UAAU;AAC5B,SAAK,WAAW;AAChB,SAAK,WAAW;AAChB,SAAK,UAAU,gBAAgB,QAAQ;AAAA,EAC3C;AAAA;AAAA,EAEA,IAAI,cAAc;AACd,QAAI,CAAC,KAAK,cAAc;AACpB,WAAK,eAAe,IAAI,KAAK,GAAG,KAAK,OAAO;AAAA,IAChD;AACA,WAAO,KAAK;AAAA,EAChB;AAAA;AAAA,EAEA,IAAI,aAAa;AACb,QAAI,CAAC,KAAK,aAAa;AACnB,WAAK,cAAc,IAAI,KAAK,KAAK,IAAI,GAAG,KAAK,OAAO,CAAC,EAAE,QAAQ;AAAA,IACnE;AACA,WAAO,KAAK;AAAA,EAChB;AACJ;AAEA,IACI,qBAAqB,CAAC,MAAM,aAAa;AACrC,QAAM,eAAe,KAAK,eAAe,SAAS,EAAE,SAAS,CAAC;AAC9D,SAAO,IAAI,aAAa,cAAc,QAAQ;AAClD;AAJJ,IAMI,eAAe,CAAC,OAAO,aAAa;AAChC,QAAM,EAAE,YAAY,SAAS,IAAK,mBAAmB,IAAI,KAAK,KAAK,GAAG,QAAQ;AAC9E,SAAO,EAAE,SAAU,QAAQ,cAAc,KAAO,YAAa,YAAY,UAAW,SAAS;AACjG;AATJ,IAWI,kBAAkB,gBAAc;AAC5B,QAAM,SAAS,WAAW,MAAM,QAAQ,EAAE,IAAI,OAAK,IAAI,CAAC;AACxD,SAAO,CAAC,KAAK;AACb,SAAO;AACX;AAfJ,IAgBI,MAAQ;AAhBZ,IAiBI,OAAQ;AAjBZ,IAkBI,MAAQ;AAlBZ,IAmBI,QAAQ;AAnBZ,IAwBI,kBAAkB,CAAC,UAAU,SAAS;AAClC,QAAM,SAAS,gBAAgB,IAAI,UAAU,IAAI;AACjD,MAAI,QAAQ;AACR,WAAO;AAAA,EACX;AACA,QACI,UAAiB,IAAI,mBAAmB,UAAU,IAAI,GAEtD,gBAAiB,IAAI,KAAK,KAAK,IAAI,MAAM,GAAG,CAAC,CAAC,EAAE,QAAQ;AAC5D,MAAI,QAAiB,eACjB,OAAiB,OACjB,aAAiB,GACjB,iBAAiB,CAAC,GAClB,gBAAiB,MACjB,YAAY,UAAU,QAAS;AAQnC,SAAO,CAAC,MAAM;AAEV,KAAC,EAAE,QAAQ,YAAY,SAAS,IAAI,aAAa,OAAO,QAAQ;AAGhE,QAAI,iBAAiB,MAAM;AACvB,sBAAgB;AAChB,cAAQ,KAAK,EAAE,OAAO,CAAC;AAAA,IAC3B,WAES,OAAO,KAAK,WAAW,eAAe;AAE3C,aAAO,SAAS,QAAQ,MAAM;AAAA,IAClC,WAES,OAAO,KAAK,WAAW,eAAe;AAE3C,UAAI,SAAS,KAAK;AACd,eAAO;AAAA,MACX,OAEK;AAED,YAAI,QAAQ,WAAW,GAAG;AACtB,kBAAQ,KAAK,cAAc;AAC3B,0BAAgB,eAAe;AAAA,QAEnC,OAEK;AACD,kBAAQ,CAAC,EAAE,aAAa,eAAe;AACvC,kBAAQ,CAAC,EAAE,kBAAkB,eAAe;AAE5C,iBAAO;AAAA,QACX;AAEA,eAAO;AAAA,MACX;AAAA,IACJ;AAEA,qBAAiB,EAAE,QAAQ,iBAAkB,UAAU,YAAa,WAAW;AAE/E,QAAI,SAAS,OAAO;AAChB,cAAQ;AACR,eAAS,aAAa;AACtB,oBAAc;AAAA,IAClB;AACA,aAAS;AAET,QAAI,aAAa,IAAI;AACjB,aAAO;AAAA,IACX;AAAA,EACJ;AAEA,kBAAgB,IAAI,OAAO;AAC3B,SAAO;AACX;AAtGJ,IAuGI,kBAAkB;AAAA,EACd,QAAS,CAAC;AAAA,EACV,IAAI,UAAU,MAAM;AA5I5B;AA6IY,YAAO,UAAK,OAAO,QAAQ,MAApB,mBAAwB;AAAA,EACnC;AAAA,EACA,IAAI,YAAY;AACZ,UACI,EAAE,SAAS,IAAI,YACf,EAAE,OAAO,IAAI;AACjB,QAAI,CAAC,OAAO,QAAQ,GAAG;AACnB,aAAO,QAAQ,IAAI,CAAC;AAAA,IACxB;AACA,WAAO,QAAQ,EAAE,WAAW,IAAI,IAAI;AAAA,EACxC;AACJ;AAKJ,IAAqB,iBAArB,MAAoC;AAAA,EAChC,WAAW,QAAQ;AACf,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAuBA,OAAO,WAAW,MAAM,UAAU;AAC9B,QAAI,OAAO,aAAa,UAAU;AAC9B,aAAO,KAAK,YAAY,MAAM,QAAQ;AAAA,IAC1C;AACA,UAAM,SAAS,mBAAmB,MAAM,QAAQ;AAChD,QAAI,OAAO,QAAQ,CAAC,MAAM,OAAO,YAAY,SAAS,GAAG;AACrD,cAAQ,KAAK,iEAAiE;AAAA,IAClF;AACA,WAAO,OAAO;AAAA,EAClB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAuBA,OAAO,aAAa,MAAM,UAAU;AAChC,QAAI,OAAO,aAAa,UAAU;AAC9B,aAAO,KAAK,cAAc,MAAM,QAAQ;AAAA,IAC5C;AACA,UACI,UAAc,KAAK,YAAY,IAAI,GACnC,cAAc,gBAAgB,UAAU,KAAK,eAAe,CAAC;AACjE,QAAI,YAAY,YAAY,CAAC,EAAE;AAC/B,QAAI,YAAY,WAAW,GAAG;AAC1B,YAAM,WAAW,KAAK,IAAI,GAAG,OAAO;AACpC,UAAI,YAAY,YAAY,CAAC,EAAE,cAAc,WAAW,YAAY,CAAC,EAAE,YAAY;AAC/E,oBAAY,YAAY,CAAC,EAAE;AAAA,MAC/B;AAAA,IACJ;AAEA,YAAQ,CAAC,KAAK;AACd,WAAO,IAAI,KAAK,KAAK,IAAI,GAAG,OAAO,CAAC;AAAA,EACxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAkBA,OAAO,YAAY,MAAM,WAAW;AAChC,UAAM,SAAS,KAAK,kBAAkB,IAAI;AAC1C,WAAO,IAAI,KAAK,KAAK,QAAQ,IAAI,SAAS,KAAK,GAAI;AAAA,EACvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAkBA,OAAO,cAAc,MAAM,WAAW;AAClC,UAAM,SAAS,CAAC,KAAK,kBAAkB,IAAI;AAC3C,WAAO,IAAI,KAAK,KAAK,QAAQ,IAAI,SAAS,KAAK,GAAI;AAAA,EACvD;AAAA;AAAA;AAAA,EAGA,OAAO,YAAY,MAAM;AACrB,WAAO,CAAC,KAAK,YAAY,GAAG,KAAK,SAAS,GAAG,KAAK,QAAQ,GAAG,KAAK,SAAS,GAAG,KAAK,WAAW,GAAG,KAAK,WAAW,GAAG,KAAK,gBAAgB,CAAC;AAAA,EAC9I;AACJ;AACA,eAAe,kBAAkB;AACjC,eAAe,SAAS;;;ACpRjB,IAAM,sBAAN,cAAkC,cAAc;AAAA,EACnD,YAAY,QAAQ;AAChB,UAAM,MAAM;AACZ,SAAK,wBAAwB;AAC7B,QAAI,CAAC,KAAK;AACN,YAAM,IAAI,MAAM,yDAAyD;AAC7E,SAAK,gBAAgB,IAAI,cAAc;AAAA,MACnC,eAAe,IAAI,sBAAsB;AAAA,QACrC,WAAW,CAAC,KAAK,uBAAuB;AAAA,QACxC,UAAU,KAAK;AAAA,MACnB,CAAC;AAAA,MACD,oBAAoB,CAAC,WAAW,cAAc;AAC1C,eAAO,UAAU,YAAY,SAAS;AAAA,MAC1C;AAAA,IACJ,CAAC;AAAA,EACL;AAAA,EACA,UAAU,WAAW,SAAS;AAtBlC;AAuBQ,QAAI,CAAC,KAAK,uBAAuB;AAC7B,WAAK,qBAAqB;AAC1B,WAAK,wBAAwB;AAAA,IACjC;AACA,QAAI,KAAK;AACL,WAAK,yBAAyB,KAAK,aAAa,WAAW,OAAO;AACtE,UAAM,aAAa,UAAU,QAAQ;AACrC,UAAM,WAAW,QAAQ,QAAQ;AACjC,UAAM,YAAW,UAAK,SAAS,YAAd,mBAAuB;AACxC,QAAI,aAAa;AACb,YAAM,IAAI,MAAM,6BAA6B;AACjD,SAAK,yBAAyB,cAAY;AACtC,YAAM,gBAAgB,SAAS,qBAAqB;AACpD,YAAM,cAAc,SAAS,mBAAmB;AAChD,UAAI,oBAAoB,cAAc,KAAK,GAAG,SAAS;AACvD,UAAI;AACJ,UAAI,gBAAgB,OAAO;AACvB,cAAM,cAAc,cAAc,KAAK,GAAG,OAAO;AACjD,YAAI,gBAAgB,cAAM,OAAO;AAC7B,4BAAkB,WAAW,kBAAkB,aAAa,IAAI;AAAA,QACpE,OACK;AACD,4BAAkB,cAAM;AAAA,QAC5B;AAAA,MACJ,OACK;AACD,0BAAkB,YAAY,KAAK,GAAG,OAAO;AAAA,MACjD;AAGA,UAAI,sBAAsB,cAAM,SAAS,kBAAkB,QAAQ,MAAM,YAAY;AACjF,cAAM,qBAAqB,cAAc,KAAK,GAAG,SAAS;AAC1D,YAAI,uBAAuB,cAAM,SAAS,mBAAmB,WAAW;AACpE,8BAAoB,mBAAmB,CAAC;AAAA,MAChD;AACA,UAAI,oBAAoB,cAAM,SAAS,gBAAgB,QAAQ,MAAM,UAAU;AAC3E,cAAM,mBAAmB,YAAY,KAAK,GAAG,OAAO;AACpD,YAAI,qBAAqB,cAAM,SAAS,iBAAiB,WAAW;AAChE,4BAAkB,iBAAiB,CAAC;AAAA,MAC5C;AACA,YAAM,aAAa,cAAc,KAAK,UAAU,sBAAsB,cAAM,QAAQ,oBAAoB,WAAW,oBAAoB,cAAM,QAAQ,IAAI,KAAK,gBAAgB,QAAQ,IAAI,CAAC,IAAI,OAAO;AAEtM,UAAI,eAAe,cAAM;AACrB;AAEJ,YAAM,WAAW,gBAAgB,QAAQ,WAAW,IAAI,UAAQ,WAAW,kBAAkB,MAAM,IAAI,CAAC,IAAI,YAAY,KAAK,UAAU,IAAI,KAAK,WAAW,CAAC,EAAE,QAAQ,IAAI,CAAC,GAAG,oBAAoB,cAAM,QAAQ,kBAAkB,OAAO;AACzO,UAAI,aAAa,cAAM;AACnB;AACJ,UAAI,SAAS,SAAS,WAAW,QAAQ;AAErC,iBAAS,SAAS,WAAW;AAAA,MACjC,WACS,SAAS,SAAS,WAAW,QAAQ;AAE1C,mBAAW,SAAS,SAAS;AAAA,MAEjC;AACA,iBAAW,QAAQ,CAACC,YAAW,UAAU;AACrC,YAAI,eAAeA;AACnB,YAAI,aAAa,SAAS,KAAK;AAE/B,YAAI,YAAY,MAAM;AAClB,yBAAe,eAAe,WAAW,cAAc,QAAQ;AAC/D,uBAAa,eAAe,WAAW,YAAY,QAAQ;AAAA,QAC/D;AAGA,aAAK,cAAc,YAAY,cAAc,YAAY,2BAAyB,sBAAsB,gBAAgB,QAAQ,CAAC;AAAA,MACrI,CAAC;AAAA,IACL,CAAC;AAAA,EACL;AAAA,EACA,QAAQ;AACJ,SAAK,wBAAwB;AAC7B,UAAM,MAAM;AAAA,EAChB;AAAA,EACA,uBAAuB;AACnB,SAAK,sBAAsB,cAAY;AAnG/C;AAoGY,YAAM,YAAW,UAAK,SAAS,YAAd,mBAAuB;AACxC,UAAI,EAAE,WAAW,QAAQ,IAAI;AAE7B,UAAI,YAAY,MAAM;AAClB,oBAAY,eAAe,WAAW,WAAW,QAAQ;AACzD,kBAAU,eAAe,WAAW,SAAS,QAAQ;AAAA,MACzD;AACA,WAAK,cAAc,YAAY,WAAW,SAAS,2BAAyB,sBAAsB,gBAAgB,QAAQ,CAAC;AAAA,IAC/H,CAAC;AAAA,EACL;AAAA,EACA,sBAAsB,MAAM;AACxB,SAAK,cAAc,QAAQ,CAAC,aAAa;AACrC,UAAI,SAAS,SAAS;AAClB,aAAK,QAAQ;AAAA,IACrB,CAAC;AAAA,EACL;AAAA,EACA,yBAAyB,MAAM;AAC3B,SAAK,cAAc,QAAQ,CAAC,aAAa;AACrC,UAAI,SAAS,YAAY;AACrB,aAAK,QAAQ;AAAA,IACrB,CAAC;AAAA,EACL;AACJ;;;ACnHO,IAAM,oCAAN,cAAgD,MAAM,CAAC,GAAG,CAAC,SAAS;AACvE,QAAM,aAAa,KAAK;AACxB,QAAMC,2CAA0C,KAAK;AAAA,IACjD,MAAM,cAAc;AAChB,aAAO,KAAK,QAAQ,YAAY;AAAA,IACpC;AAAA,IACA,IAAI,QAAQ,SAAS;AACjB,WAAK,WAAW;AAAA,IACpB;AAAA,IACA,IAAI,UAAU;AACV,aAAO,KAAK;AAAA,IAChB;AAAA,IACA,mBAAmB;AACf,YAAM,IAAI,MAAM,cAAc;AAAA,IAClC;AAAA;AAAA;AAAA;AAAA,IAIA,WAAW,SAAS;AAChB,aAAO,KAAK,UAAU;AAAA,IAC1B;AAAA;AAAA;AAAA;AAAA,IAIA,aAAa;AACT,UAAI,KAAK;AACL,eAAO,KAAK;AAChB,aAAO,KAAK,WAAW,KAAK,iBAAiB,CAAC;AAAA,IAClD;AAAA;AAAA;AAAA;AAAA,IAIA,qBAAqB;AACjB,YAAM,UAAU,KAAK,WAAW;AAChC,aAAO,mCAAS;AAAA,IACpB;AAAA;AAAA;AAAA;AAAA,IAIA,qBAAqB;AACjB,YAAM,UAAU,KAAK,WAAW;AAChC,aAAO,mCAAS;AAAA,IACpB;AAAA;AAAA;AAAA;AAAA,IAIA,gBAAgB;AACZ,YAAM,UAAU,KAAK,WAAW;AAChC,aAAO,mCAAS;AAAA,IACpB;AAAA;AAAA;AAAA;AAAA,IAIA,mBAAmB;AACf,YAAM,UAAU,KAAK,WAAW;AAChC,aAAO,mCAAS;AAAA,IACpB;AAAA;AAAA;AAAA;AAAA,IAIA,0BAA0B;AACtB,YAAM,UAAU,KAAK,WAAW;AAChC,aAAO,mCAAS;AAAA,IACpB;AAAA,EACJ;AACA,SAAOA;AACX,CAAC,EAAE;AACH;;;AClEA,IACI,EAAE,QAAAC,QAAO,IAAI;AADjB,IAEI,aAAc,MAAO,QAAQ,CAAC,MAAM,SAAS,OAAO,SAAS,QAAQ,gBAAgB;AACjF,QACIC,SAAQ,OAAO,SAAS,EAAE,MAAM,GAAG,GACnC,YAAY,EAAE,CAACA,OAAM,CAAC,IAAIA,OAAM,CAAC,IAAIA,OAAM,KAAK,GAAG,IAAI;AAC3D,SAAO,OAAO,QAAQ,KAAK,WAAW,cAAc;AACxD;AAIJ,IAAqB,eAArB,cuL9C,OAAO,4BAA4B,cAAc,OAAO,OAAO;AAC3D,UAAM,aAAa,CAAC;AACpB,iBAAa,QAAQ,CAAC,MAAM,UAAU;AAClC,YAEI,MAAO,KAAK,IAAI,KAAK,QAAQ,KAAK,IAAI,EAAE,SAAS,EAAE,SAAU,KAAK,IAAI,IAAI;AAC9E,iBAAW,GAAG,IAAI;AAAA,IACtB,CAAC;AACD,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAmCA,OAAO,4BAA4B,YAAY,OAAO,OAAO;AACzD,WAAO,OAAO,KAAK,UAAU,EAAE,OAAO,SAAO,WAAW,GAAG,CAAC,EAAE,IAAI,SAAO;AACrE,YAAM,OAAO,WAAW,GAAG;AAC3B,WAAK,IAAI,IAAI;AACb,aAAO;AAAA,IACX,CAAC;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,OAAO,QAAQ,GAAG,GAAG,cAAc,OAAO;AAEtC,QACK,MAAM,QAAQ,MAAM,QACpB,MAAM,UAAa,MAAM,UACzB,MAAM,QAAQ,MAAM,QACpB,MAAM,UAAa,MAAM,QAC5B;AACE,aAAO;AAAA,IACX;AAEA,QAAI,KAAK,QAAQ,KAAK,MAAM;AACxB,aAAO;AAAA,IACX;AAEA,QAAI,MAAM,GAAG;AACT,aAAO;AAAA,IACX;AACA,UACI,QAAQ,OAAO,GACf,QAAQ,OAAO;AACnB,QAAI,UAAU,OAAO;AACjB,cAAQ,OAAO;AAAA,QACX,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AACD,iBAAO,MAAM;AAAA,MACrB;AACA,cAAQ,MAAM;AAAA,QACV,MAAK,aAAa,QAAQ,aAAa;AAGnC,iBAAO,EAAE,QAAQ,MAAM,EAAE,QAAQ;AAAA,QACrC,MAAK,MAAM,QAAQ,CAAC,KAAK,MAAM,QAAQ,CAAC;AACpC,iBAAO,EAAE,WAAW,EAAE,SAAS,EAAE,MAAM,CAAC,GAAG,QAAQ,GAAG,QAAQ,GAAG,EAAE,GAAG,GAAG,WAAW,CAAC,IAAI;AAAA,QAC7F,MAAK,UAAU,YAAY,EAAE,YAAY,cAAc,EAAE,YAAY;AACjE,iBAAO,cAAc,GAAG,cAAc,GAAG,GAAG,WAAW,IAAI,aAAa,kBAAkB,CAAC,MAAM,aAAa,kBAAkB,CAAC;AAAA,MACzI;AAAA,IACJ;AACA,WAAO,OAAO,CAAC,MAAM,OAAO,CAAC;AAAA,EACjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAaA,OAAO,cAAc,GAAG,GAAG,UAAU,CAAC,GAAG;AAErC,QAAI,MAAM,GAAG;AACT,aAAO;AAAA,IACX;AAEA,QAAI,CAAC,KAAK,CAAC,GAAG;AACV,aAAO;AAAA,IACX;AAEA,UACI,QAAQ,GAAG,KAAK,GAAG,QAAQ,MAAM,GACjC,QAAQ,GAAG,KAAK,GAAG,QAAQ,MAAM;AAErC,QAAI,MAAM,WAAW,MAAM,QAAQ;AAC/B,aAAO;AAAA,IACX;AACA,aAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AACnC,YACI,OAAO,MAAM,CAAC,GACd,OAAO,MAAM,CAAC;AAElB,UAAI,SAAS,MAAM;AACf,eAAO;AAAA,MACX;AACA,YACI,OAAO,EAAE,IAAI,GACb,OAAO,EAAE,IAAI;AAEjB,UAAI,QAAQ,gBAAgB;AACxB,YAAI,QAAQ;AAAA,UACR;AAAA,UACA;AAAA,YACI,OAAS;AAAA,YACT,QAAS;AAAA,UACb;AAAA,UAAG;AAAA,YACC,OAAS;AAAA,YACT,QAAS;AAAA,UACb;AAAA,QACJ,MAAM,OAAO;AACT;AAAA,QACJ;AAAA,MACJ;AAEA,UAAI,QAAQ,UAAU;AAClB,cAAM,SAAS,QAAQ,SAAS,MAAM;AAAA,UAClC,OAAS;AAAA,UACT,QAAS;AAAA,QACb,GAAG;AAAA,UACC,OAAS;AAAA,UACT,QAAS;AAAA,QACb,CAAC;AAED,YAAI,WAAW,OAAO;AAClB,iBAAO;AAAA,QACX;AAEA,YAAI,WAAW,MAAM;AACjB;AAAA,QACJ;AAAA,MACJ;AAEA,UAAI,CAAC,GAAG,QAAQ,MAAM,MAAM,OAAO,GAAG;AAClC,eAAO;AAAA,MACX;AAAA,IACJ;AAEA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,OAAO,UAAU,GAAG,GAAG;AACnB,QAAI,OAAO,CAAC,EAAE,YAAY;AAC1B,QAAI,OAAO,CAAC,EAAE,YAAY;AAC1B,WAAO,EAAE,QAAQ,CAAC,MAAM;AAAA,EAC5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,OAAO,WAAW,GAAG,GAAG;AACpB,QAAI,aAAa,QAAQ,aAAa,MAAM;AACxC,aAAO,WAAW,SAAS,GAAG,CAAC;AAAA,IACnC;AACA,WAAO,IAAI;AAAA,EACf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,OAAO,WAAW,GAAG,GAAG;AACpB,QAAI,aAAa,QAAQ,aAAa,MAAM;AACxC,aAAO,WAAW,QAAQ,GAAG,CAAC;AAAA,IAClC;AACA,WAAO,IAAI;AAAA,EACf;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,OAAO,KAAK,KAAK;AACb,QAAI,KAAK,KAAK;AACd,QAAI,OAAO,IAAI,gBAAgB,QAAQ;AACnC,YAAM,OAAO,eAAe,CAAC,GAAG,GAAG;AACnC,WAAK,OAAO,KAAK;AACb,gBAAQ,IAAI,GAAG;AACf,YAAI,OAAO;AACP,cAAI,MAAM,gBAAgB,QAAQ;AAC9B,gBAAI,GAAG,IAAI,GAAG,KAAK,KAAK;AAAA,UAC5B,WACS,iBAAiB,OAAO;AAC7B,gBAAI,GAAG,IAAI,MAAM,MAAM;AAAA,UAC3B;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ,OACK;AACD,YAAM;AAAA,IACV;AACA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,OAAO,eAAe,MAAM,QAAQ,OAAO;AACvC,QAAI,MAAM;AACV,SAAK,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AAC/B,aAAO,MAAM,CAAC;AACd,UAAI,QAAQ,QAAQ;AAChB,aAAK,IAAI,IAAI,OAAO,IAAI;AAAA,MAC5B;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,OAAO,iBAAiB,MAAM,QAAQ,OAAO;AACzC,QAAI,QAAQ;AACR,iBAAW,QAAQ,OAAO;AACtB,YAAI,EAAE,QAAQ,OAAO;AACjB,eAAK,IAAI,IAAI,OAAO,IAAI;AAAA,QAC5B;AAAA,MACJ;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,OAAO,QAAQ,QAAQ,QAAQ;AAC3B,UACI,SAAS,CAAC,GACV,OAAO,OAAO,WAAW;AAC7B,QAAI,QAAQ;AACR,iBAAW,KAAK,QAAQ;AACpB,YAAI,OAAO,CAAC,OAAO,GAAG,OAAO,CAAC,CAAC,IAAI,EAAC,iCAAS,KAAI;AAC7C,iBAAO,KAAK,CAAC,GAAG,OAAO,CAAC,CAAC,CAAC;AAAA,QAC9B;AAAA,MACJ;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,OAAO,YAAY,SAAS,QAAQ;AAChC,aAAS,UAAU,CAAC;AACpB,QAAI,SAAS;AACT,eAAS,IAAI,GAAG,IAAI,QAAQ,QAAQ,EAAE,GAAG;AACrC,eAAO,QAAQ,CAAC,EAAE,CAAC,CAAC,IAAI,QAAQ,CAAC,EAAE,CAAC;AAAA,MACxC;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAaA,OAAO,KAAK,QAAQ,QAAQ,QAAQ;AAChC,UACI,SAAS,CAAC,GACV,OAAO,OAAO,WAAW;AAC7B,QAAI,QAAQ;AACR,UAAI,QAAQ;AACZ,iBAAW,KAAK,QAAQ;AACpB,YAAI,OAAO,CAAC,OAAO,GAAG,OAAO,CAAC,CAAC,IAAI,EAAC,iCAAS,KAAI;AAC7C,iBAAO,KAAK,SAAS,OAAO,GAAG,KAAK,IAAI,CAAC;AACzC,YAAE;AAAA,QACN;AAAA,MACJ;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAcA,OAAO,OAAO,QAAQ,QAAQ,QAAQ;AAClC,UACI,SAAS,CAAC,GACV,OAAO,OAAO,WAAW;AAC7B,QAAI,QAAQ;AACR,UAAI,QAAQ;AACZ,iBAAW,KAAK,QAAQ;AACpB,YAAI,OAAO,CAAC,OAAO,GAAG,OAAO,CAAC,CAAC,IAAI,EAAC,iCAAS,KAAI;AAC7C,iBAAO,KAAK,SAAS,OAAO,OAAO,CAAC,GAAG,KAAK,IAAI,OAAO,CAAC,CAAC;AACzD,YAAE;AAAA,QACN;AAAA,MACJ;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,OAAO,WAAW,QAAQ,MAAM;AAC5B,UAAM,aAAa,KAAK,MAAM,GAAG;AACjC,WAAO,WAAW,MAAM,cAAY;AAChC,UAAI,CAAC,UAAU,EAAE,YAAY,SAAS;AAClC,eAAO;AAAA,MACX;AACA,eAAS,OAAO,QAAQ;AACxB,aAAO;AAAA,IACX,CAAC;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAsBA,OAAO,YAAY,QAAQ;AACvB,UAAM,SAAS,CAAC;AAChB,eAAW,OAAO,QAAQ;AACtB,UAAID,QAAO,QAAQ,GAAG,GAAG;AACrB,YAAI,MAAM,QAAQ,OAAO,GAAG,CAAC,GAAG;AAC5B,iBAAO,GAAG,IAAI,OAAO,GAAG,EAAE,MAAM;AAAA,QACpC,WACS,OAAO,GAAG,aAAa,QAAQ;AACpC,gBAAM,QAAQ,KAAK,YAAY,OAAO,GAAG,CAAC;AAC1C,qBAAW,QAAQ,OAAO;AACtB,mBAAO,GAAG,OAAO,MAAM,IAAI,MAAM,IAAI;AAAA,UACzC;AAAA,QACJ,OACK;AACD,iBAAO,GAAG,IAAI,OAAO,GAAG;AAAA,QAC5B;AAAA,MACJ;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,OAAO,WAAW,QAAQ,MAAM;AAC5B,SAAK,MAAM,GAAG,EAAE,OAAO,CAAC,QAAQ,KAAK,OAAO,UAAU;AAClD,UAAI,UAAU,MAAM;AAChB,eAAO;AAAA,MACX;AACA,UAAIA,QAAO,QAAQ,GAAG,GAAG;AACrB,YAAI,UAAU,MAAM,SAAS,GAAG;AAC5B,iBAAO,OAAO,GAAG;AAAA,QACrB,OACK;AACD,iBAAO,OAAO,GAAG;AAAA,QACrB;AAAA,MACJ;AAAA,IACJ,GAAG,MAAM;AAAA,EACb;AAAA;AAAA,EAEA,OAAO,OAAO,MAAM,IAAI;AACpB,UAAM,WAAW,QAAQ,OAAO,IAAI,GAChC,SAAS,QAAQ,OAAO,EAAE,GAC1B,WAAW,OAAO,SAAS;AAC/B,QAAI,aAAa,QAAQ;AACrB,cAAQ,QAAQ;AAAA,QACZ,KAAK;AACD,iBAAO,OAAO,IAAI;AAAA,QACtB,KAAK;AACD,iBAAO,OAAO,IAAI;AAAA,QACtB,KAAK;AAGD,iBAAO,aAAa,CAAC,QAAQ,SAAS,WAAW,SAAS,OAAO,QAAQ,QAAQ,IAAI;AAAA,QACzF,KAAK;AACD,iBAAO,aAAa,CAAC,QAAQ,SAAS,UAAU,OAAO;AAAA,QAC3D,KAAK;AACD,iBAAO,aAAa,CAAC,QAAQ,SAAS,eAAe,SAAY;AAAA,QACrE,KAAK;AACD,iBAAO,YAAY,MAAM,IAAI,IAAI,WAAW,MAAM,IAAI,IAAI,KAAK,OAAO,IAAI,CAAC;AAAA,MACnF;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA,EACA,OAAO,aAAa,QAAQ,cAAc,WAAW,WAAW,OAAO,MAAM;AACzE,UAAM,cAAc,CAAC;AACrB,QAAIE,SAAQ,OAAO,eAAe,MAAM,GACpC,mBAAmB,OAAO,yBAAyBA,QAAO,YAAY;AAC1E,WAAO,CAAC,oBAAoBA,UAAS,MAAM;AACvC,MAAAA,SAAQ,OAAO,eAAeA,MAAK;AACnC,UAAIA,QAAO;AACP,2BAAmB,OAAO,yBAAyBA,QAAO,YAAY;AAAA,MAC1E;AAAA,IACJ;AACA,QAAI,kBAAkB;AAClB,UAAI,iBAAiB,KAAK;AACtB,oBAAY,MAAM,OAAK;AACnB,2BAAiB,IAAI,KAAK,QAAQ,CAAC;AAEnC,uBAAa,UAAU,KAAK,QAAQ,iBAAiB,IAAI,KAAK,MAAM,CAAC;AAAA,QACzE;AAAA,MACJ,OACK;AACD,oBAAY,MAAM;AAAA,MACtB;AACA,UAAI,iBAAiB,KAAK;AACtB,oBAAY,MAAM,MAAM;AACpB,cAAI,SAAS,iBAAiB,IAAI,KAAK,MAAM;AAC7C,cAAI,WAAW;AACX,qBAAS,UAAU,KAAK,QAAQ,MAAM;AAAA,UAC1C;AACA,iBAAO;AAAA,QACX;AAAA,MACJ,OACK;AACD,oBAAY,MAAM;AAAA,MACtB;AAAA,IACJ,OACK;AACD,kBAAY,MAAM,OAAK;AACnB,eAAO,IAAI,cAAc,IAAI;AAC7B,qBAAa,UAAU,KAAK,QAAQ,CAAC;AAAA,MACzC;AACA,kBAAY,MAAM,MAAM;AACpB,YAAI,SAAS,OAAO,IAAI,cAAc;AACtC,YAAI,WAAW;AACX,mBAAS,UAAU,KAAK,QAAQ,MAAM;AAAA,QAC1C;AACA,eAAO;AAAA,MACX;AAAA,IACJ;AACA,WAAO,eAAe,QAAQ,cAAc,WAAW;AAAA,EAC3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAsBA,OAAO,aAAa,QAAQ,UAAU,MAAM;AACxC,UACI,OAAO,aAAa,sBAAsB,KAAK,WAAW,OAAO,GACjE,eAAe,aAAa,sBAAsB,QAAQ,QAAQ,GAClE,YAAY,IAAI,YAChB,OAAO,MAAM;AAAA,MACT,IAAI,QAAQ;AACR,eAAO,eAAe,aAAa,IAAI,KAAK,IAAI,IAAI,KAAK,SAAS;AAAA,MACtE;AAAA,MACA,IAAI,MAAM,GAAG;AACT,YAAI,cAAc;AACd,uBAAa,IAAI,KAAK,MAAM,CAAC;AAAA,QACjC,OACK;AACD,eAAK,SAAS,IAAI;AAAA,QACtB;AAAA,MACJ;AAAA,IACJ,GACA,WAAW,aAAa,sBAAsB,KAAK,WAAW,OAAO;AACzE,WAAO,eAAe,KAAK,WAAW,KAAK,SAAS;AACpD,WAAO,eAAe,QAAQ,UAAU;AAAA,MACpC,cAAe;AAAA,MACf,KAAM,KAAK,OAAO,SAAS;AAAA,MAC3B,KAAM,KAAK,OAAO,SAAS;AAAA,IAC/B,CAAC;AACD,WAAO,MAAM,OAAO,OAAO,QAAQ;AAAA,EACvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,OAAO,sBAAsB,QAAQ,cAAc;AAC/C,QAAI,SAAS;AACb,aAAS,IAAI,QAAQ,KAAK,CAAC,UAAU,CAACF,QAAO,GAAG,QAAQ,GAAG,IAAI,OAAO,eAAe,CAAC,GAAG;AACrF,eAAS,OAAO,yBAAyB,GAAG,YAAY;AAAA,IAC5D;AACA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,OAAO,kBAAkB,QAAQ,WAAW,OAAO;AAC/C,WAAO,QAAQ,MAAM,EAAE,QAAQ,CAAC,CAAC,KAAK,KAAK,MAAM;AAC7C,UAAI,UAAU;AACV,kBAAU,UAAa,OAAO,OAAO,GAAG;AAAA,MAC5C,OACK;AACD,iBAAS,QAAQ,OAAO,OAAO,GAAG;AAAA,MACtC;AAAA,IACJ,CAAC;AACD,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,OAAO,oBAAoB,KAAK;AAC5B,WAAO,KAAK,GAAG,EAAE,QAAQ,SAAO,OAAO,IAAI,GAAG,CAAC;AAC/C,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,OAAO,WAAW,OAAO,MAAM,MAAM;AACjC,UAAM,YAAY,QAAQ,OAAO,KAAK;AACtC,QAAI,SAAS,QAAQ,cAAc,MAAM;AACrC,YAAM,IAAI,MAAM,mBAAmB,kBAAkB,mBAAmB,OAAO;AAAA,IACnF;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,OAAO,aAAa,OAAO,MAAM;AAC7B,OAAG,WAAW,OAAO,UAAU,IAAI;AAAA,EACvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,OAAO,eAAe,OAAO,MAAM;AAC/B,OAAG,WAAW,OAAO,YAAY,IAAI;AAAA,EACzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,OAAO,YAAY,OAAO,MAAM;AAC5B,OAAG,WAAW,OAAO,SAAS,IAAI;AAAA,EACtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,OAAO,eAAe,OAAO,MAAM;AAC/B,QAAI,OAAO,UAAU,cAAc,MAAM,UAAU,MAAM,QAAQ;AAC7D,YAAM,IAAI,MAAM,sBAAsB,cAAc,8BAA8B;AAAA,IACtF;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,OAAO,aAAa,OAAO,MAAM;AAC7B,UAAM,WAAW,OAAO,KAAK;AAC7B,QAAI,OAAO,UAAU,YAAY,MAAM,QAAQ,GAAG;AAC9C,YAAM,IAAI,MAAM,sBAAsB,cAAc,4BAA4B;AAAA,IACpF;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,OAAO,cAAc,OAAO,MAAM;AAC9B,OAAG,WAAW,OAAO,WAAW,IAAI;AAAA,EACxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,OAAO,aAAa,OAAO,MAAM;AAC7B,OAAG,WAAW,OAAO,UAAU,IAAI;AAAA,EACvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,OAAO,YAAY,OAAO,MAAM;AAC5B,OAAG,WAAW,OAAO,SAAS,IAAI;AAAA,EACtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,OAAO,QAAQ,QAAQ,QAAQ;AAC3B,QAAI,YAAY;AACZ,aAAO,WAAW,QAAQ,MAAM;AAAA,IACpC;AACA,WAAO,OAAO,QAAQ,MAAM;AAAA,EAChC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,OAAO,QAAQ,QAAQ,OAAO,GAAG;AAC7B,WAAO,KAAK,MAAM,SAAS,IAAI,IAAI;AAAA,EACvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,OAAO,MAAM,QAAQ,QAAQ;AAEzB,QAAI,UAAU,MAAM;AAChB,aAAO;AAAA,IACX;AACA,UAAM,SAAS,MAAM;AACrB,WAAO,KAAK,MAAM,SAAS,MAAM,IAAI;AAAA,EACzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,OAAO,WAAWG,MAAK,MAAMC,eAAc;AACvC,UACI,UAAY,MAAM,QAAQ,IAAI,IAAI,OAAO,OAAO,SAAS,WAAW,KAAK,MAAM,GAAG,IAAI,CAAC,IAAI,GAC3F,YAAY,QAAQ,WAAW,GAC/B,SAAY,QAAQ,CAAC,GACrB,WAAYD,KAAI,IAAI,MAAM,IAAIA,KAAI,IAAI,MAAM,IAAIA,KAAI,IAAI,QAAQ,YAAYC,gBAAe,CAAC,CAAC,EAAE,IAAI,MAAM;AAE7G,QAAI,WAAW;AACX,aAAO;AAAA,IACX;AAEA,WAAO,GAAG,eAAe,UAAU,QAAQ,MAAM,CAAC,GAAGA,aAAY;AAAA,EACrE;AACJ;AACA,IAAM,KAAK;AACX,aAAa,SAAS;;;ACh7BtB,SAAS,cAAc,IAAI,QAAQ;AAC/B,QAAM,WAAW,OAAO,yBAAyB,OAAO,eAAe,EAAE,GAAG,MAAM;AAClF,SAAQ,aAAa,SAAS,OAAO,SAAS,OAAQ,WAAW;AACrE;AAkCA,IAAqB,iBAArB,cAA4CC,MAAK,MAAM,gBAAQ,mBAAW,EAAE;AAAA;AAAA,EAGxE,WAAW,eAAe;AACtB,WAAO;AAAA,MACH,iBAAkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAoDlB,UAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAaX,QAAS;AAAA;AAAA,MAET,QAAS;AAAA,IACb;AAAA,EACJ;AAAA;AAAA,EAEA,aAAa,QAAQ;AAEjB,QAAI,CAAC,KAAK,OAAO;AACb,WAAK,QAAQ;AAAA,IACjB;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,aAAa,QAAQ;AACjB,UAAM,EAAE,OAAO,IAAI;AACnB,WAAO,SAAS,OAAO,aAAa,OAAO,QAAQ,QAAQ,aAAa,aAAa,KAAK,YAAY,KAAK,CAAC;AAAA,EAChH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,OAAO,YAAY,aAAa,SAAS;AACrC,UAAM,WAAW,SAAS,YAAY,SAAS,UAAU,CAAC;AAC1D,eAAW,eAAe,SAAS;AAC/B,eAAS,YAAY,MAAM,IAAI,IAAI,YAAY,QAAQ;AAAA,IAC3D;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,IAAI,UAAU;AACV,WAAO,CAAC,KAAK;AAAA,EACjB;AAAA;AAAA,EAEA,uBAAuB;AAnK3B;AAoKQ,YAAO,UAAK,WAAL,mBAAa;AAAA,EACxB;AAAA,EACA,aAAa,MAAM;AACf,UAAM,KAAK;AACX,QAAI,CAAC,UAAU,MAAM,IAAI,MACrB;AAEJ,QAAI,KAAK,WAAW,GAAG;AACnB,UAAI,aAAa,SAAS,QAAQ,GAAG;AACjC,iBAAS;AACT,mBAAW,OAAO;AAAA,MACtB;AAAA,IACJ,OAEK;AACD,eAAS,aAAa,OAAO,CAAC,GAAG,MAAM;AACvC,aAAO,OAAO;AAAA,IAClB;AACA,OAAG,SAAS;AACZ,UAAM,UAAU,MAAM;AACtB,OAAG,kBAAkB,QAAQ;AAC7B,gBAAY,GAAG;AACf,QAAI,WAAW;AACX,kBAAY,aAAa,OAAO,CAAC,GAAG,SAAS;AAC7C,gBAAU,UAAU;AAEpB,eAAS,IAAI,SAAS;AAAA,IAC1B;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,kBAAkB,UAAU;AACxB,UACI,KAAS,MACT,SAAS,GAAG,gBAAgB,GAAG,YAAY;AAC/C,QAAI,QAAQ;AACR,YAAM,EAAE,QAAQ,OAAO,OAAO,QAAQ,SAAS,IAAI;AACnD,gBAAU,GAAG,YAAY,UAAU,MAAM;AACzC,OAAC,SAAS,UAAU,GAAG,WAAW,UAAU,SAAS,KAAK;AAC1D,gBAAU,GAAG,WAAW,UAAU,QAAQ,KAAK;AAC/C,kBAAY,GAAG,cAAc,UAAU,QAAQ;AAAA,IACnD;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,YAAY,UAAU,SAAS;AAC3B,YAAQ,QAAQ,YAAU,KAAK,OAAO,UAAU,MAAM,CAAC;AAAA,EAC3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,WAAW,UAAU,WAAW,QAAQ,MAAM;AAC1C,QAAI,MAAM,QAAQ,SAAS,GAAG;AAC1B,iBAAW,UAAU,WAAW;AAC5B,aAAK,MAAM,UAAU,QAAQ,QAAQ,KAAK;AAAA,MAC9C;AAAA,IACJ,OACK;AACD,iBAAW,YAAY,WAAW;AAC9B,aAAK,MAAM,UAAU,UAAU,UAAU,QAAQ,GAAG,KAAK;AAAA,MAC7D;AAAA,IACJ;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,cAAc,UAAU,SAAS;AAC7B,UAAM,KAAK;AACX,QAAI,CAAC,GAAG,YAAY;AAChB,SAAG,aAAa,CAAC;AAAA,IACrB;AACA,YAAQ,QAAQ,YAAU;AACtB,UAAI,CAAC,GAAG,MAAM,GAAG;AACb,cAAM,IAAI,MAAM,sBAAsB,SAAS,UAAU,yBAAyB,GAAG,UAAU,uBAAuB;AAAA,MAC1H;AAEA,UAAI,OAAO,SAAS,MAAM,MAAM,YAAY;AACxC,WAAG,WAAW,MAAM,IAAI,SAAS,MAAM,EAAE,KAAK,QAAQ;AAAA,MAC1D;AACA,eAAS,MAAM,IAAI,GAAG,MAAM,EAAE,KAAK,EAAE;AAAA,IACzC,CAAC;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,OAAO,UAAU,QAAQ;AACrB,UACI,KAAW,MACX,WAAW,cAAc,IAAI,MAAM;AACvC,QAAI,UAAU;AAEV,aAAO,eAAe,UAAU,QAAQ;AAAA,QACpC,cAAe;AAAA,QACf,YAAe;AAAA,QACf,KAAe,SAAS,OAAO,SAAS,IAAI,KAAK,EAAE;AAAA,QACnD,KAAe,SAAS,OAAO,SAAS,IAAI,KAAK,EAAE;AAAA,MACvD,CAAC;AAAA,IACL,OACK;AACD,eAAS,MAAM,IAAI,GAAG,MAAM,EAAE,KAAK,EAAE;AAAA,IACzC;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYA,MAAM,UAAU,UAAU,UAAU,QAAQ,MAAM;AAE9C,QAAI,OAAO;AACX,QAAI,OAAO,aAAa,UAAU;AAC9B,iBAAW,SAAS;AAAA,IACxB;AAEA,QAAI,OAAO,aAAa,UAAU;AAE9B,aAAW,SAAS,QAAQ;AAC5B,iBAAW,SAAS;AAAA,IACxB;AACA,UACI,KAAQ,MACR,SAAS,SAAS,wBAAwB,SAAS,sBAAsB,CAAC,IAC1E,SACI,GAAG,QAAQ,KAAK,GAAG,QAAQ,EAAE,KAAK,EAAE,GAGxC,sBAAsB,GAAG;AAC7B,QAAI,CAAC,QAAQ;AACT,YAAM,IAAI,MAAM,sBAAsB,SAAS,UAAU,2BAA2B,GAAG,UAAU,yBAAyB;AAAA,IAC9H;AACA,QAAI,CAAC,OAAO,QAAQ,GAAG;AACnB,UAAI,SAAS,SAAS,QAAQ;AAC9B,UAAI,QAAQ;AACR,iBAAS,OAAO,KAAK,QAAQ;AAC7B,eAAO,QAAQ;AAEf,eAAO,QAAQ;AAAA,MACnB;AACA,aAAO,QAAQ,IAAI,SAAS,CAAC,MAAM,IAAI,CAAC;AACxC,eAAS,QAAQ,IAAI,IAAI,WAAW,oBAAoB,OAAO,QAAQ,GAAG,MAAM;AAAA,IACpF;AACA,WAAO,QAAQ;AACf,WAAO,QAAQ;AACf,WAAO,QAAQ,EAAE,QAAQ,SAAS,SAAS,EAAE,MAAM;AACnD,WAAO,QAAQ,EAAE,UAAU;AAAA,EAC/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,oBAAoB,OAAO,QAAQ;AAI/B,QAAIC,KAAI,GAAG;AAEX,QAAI,CAAC,MAAM,SAAS;AAChB,YAAM,KAAK,CAAC,GAAG,MAAM,EAAE,QAAQ,EAAE,KAAK;AACtC,YAAM,UAAU;AAAA,IACpB;AACA,SAAK,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AAC/B,MAAAA,MAAK,MAAM,CAAC;AAIZ,UAAI,CAACA,IAAG,MAAM,aAAa;AACvB,sBAAcA,IAAG,GAAG,MAAM;AAC1B,YAAI,gBAAgB,OAAO;AACvB;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,UAAU,SAAS;AArXvB;AAsXQ,UACI,KAAK,MACL,EAAE,YAAY,IAAI,IAClB,MAAM,kBAAkB,cAAc,YAAY,eAAe,KAAK,YAAY,OAAO,YAAY;AAEzG,QAAI,KAAK;AAEL,qBAAG,WAAH,mBAAW,aAAX,mBAAqB,UAAU,UAAU,WAAW,OAAO;AAAA,IAC/D;AACA,QAAI,CAAC,GAAG,eAAe;AACnB,UAAI,SAAS;AAMT,WAAG,QAAQ,SAAS;AAAA,MACxB,OACK;AAMD,WAAG,QAAQ,QAAQ;AAAA,MACvB;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,eAAe,UAAU;AACrB,SAAK,UAAU,QAAQ;AAAA,EAC3B;AAAA,EACA,uBAAuB,MAAM;AACzB,UAAM,IAAI,MAAM,yBAAyB,KAAK,gBAAgB,KAAK,yBAAyB,KAAK,cAAc,KAAK,uBAAuB;AAAA,EAC/I;AAAA;AAAA,EAEA,IAAI,cAAc;AACd,WAAO,KAAK,OAAO;AAAA,EACvB;AACJ;AA9WI,cADiB,gBACV,SAAQ;AA+WnB,eAAe,SAAS;;;AC5YxB,IAAO,oBAAQ,YAAU,MAAM,mBAAmB,UAAUC,OAAM;AAAA,EAC9D,WAAW,QAAQ;AACf,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYA,IAAI,UAAU;AACV,QAAI,CAAC,KAAK,UAAU;AAChB,WAAK,WAAW,CAAC;AAAA,IACrB;AACA,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,IAAI,QAAQ,SAAS;AACjB,QAAI,SAAS;AACT,UAAI,CAAC,MAAM,QAAQ,OAAO;AAAG,kBAAU,CAAC,OAAO;AAC/C,qBAAe,YAAY,MAAM,GAAG,OAAO;AAAA,IAC/C;AACA,SAAK,YAAY;AAAA,EACrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,cAAc;AAAA,EACd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,cAAc,SAAS;AACnB,mBAAe,YAAY,MAAM,GAAG,OAAO;AAAA,EAC/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,UAAU,mBAAmB;AACzB,WAAO,KAAK,UAAU,iBAAiB,KAAK;AAAA,EAChD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,UAAU,mBAAmB;AA3EjC;AA4EQ,QAAI,OAAO,sBAAsB,YAAY;AACzC,0BAAoB,kBAAkB;AAAA,IAC1C;AACA,YAAO,UAAK,YAAL,mBAAe;AAAA,EAC1B;AAAA;AAAA;AAAA;AAAA,EAIA,IAAI,cAAc;AAAA,EAAC;AACvB;;;AClFA,IAAM,EAAE,gBAAAC,gBAAe,IAAI;AAC3B,IAAIC;AACJ,IAAI,cAAc,cAAc;AAC5B,EAAAA,eAAc,WAAW;AAC7B,OACK;AACD,EAAAA,eAAc;AAAA,IACV,MAAM;AACF,cAAO,oBAAI,KAAK,GAAE,QAAQ;AAAA,IAC9B;AAAA,EACJ;AACJ;AAKA,IAAI,eAAe;AACnB,IAAI,cAAc,WAAW;AACzB,QAAM,UAAU,WAAW,YAAY,WAAW,UAAU,CAAC;AAC7D,iBAAe,QAAQ,eAAe;AAAA,IAClC,UAAkB,oBAAI,IAAI;AAAA,IAC1B,WAAkB,oBAAI,IAAI;AAAA,IAC1B,iBAAkB,oBAAI,IAAI;AAAA,IAC1B,eAAkB,oBAAI,IAAI;AAAA,IAC1B,QAAQ,mBAAmB,OAAO;AAC9B,aAAO,aAAa,SAAS,OAAO,aAAa,gBAAgB,OAAO,aAAa,cAAc,QAAQ,mBAAmB,aAAa,UAAU,OAAO,OAAO;AAAA,IACvK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAUA,YAAY,EAAE,iBAAiB,CAAC,GAAG,WAAW,KAAM,mBAAmB,MAAM,GAAG;AAC5E,YACI,SAAS,CAAC,GACV,SAAS,CAAC,YAAY,mBAAmB,eAAe;AAC5D,UAAI,kBAAkB;AAClB,eAAO,KAAK,WAAW;AAAA,MAC3B;AAEA,iBAAW,SAAS,QAAQ;AACxB,cAAMC,OAAM,aAAa,KAAK;AAC9B,mBAAW,CAAC,EAAE,KAAK,KAAKA,KAAI,QAAQ,GAAG;AACnC,cAAI,CAAC,eAAe,SAAS,MAAM,IAAI,MAAM,CAAC,OAAO,UAAU,MAAM,KAAK,KAAK,MAAM,QAAQ,WAAW;AACpG,mBAAO,KAAK,KAAK;AAAA,UACrB;AAAA,QACJ;AAAA,MACJ;AACA,aAAO;AAAA,IACX;AAAA,EACJ;AACJ;AACA,IAaI,cAAc,CAAC,IAAIC,KAAI,QAAQ,YAAY;AACvC,QACI,QAAa,OAAOA,QAAO,UAC3B,cAAa,mCAAS,eAAc,CAAC,GAIrC,UAAa,MAAM;AACf,WAAO,UAAU;AACjB,WAAO,eAAeF,aAAY,IAAI;AAEtC,UAAM,OAAO,OAAO;AACpB,WAAO,OAAO;AACd,QAAI,OAAO;AACP,SAAGE,GAAE,EAAE,GAAG,MAAM,GAAG,UAAU;AAAA,IACjC,OACK;AACD,MAAAA,IAAG,KAAK,IAAI,GAAG,MAAM,GAAG,UAAU;AAAA,IACtC;AACA,WAAO,SAAS;AAChB,MAAE,OAAO;AAAA,EACb;AACJ,MAAI,SAAS;AACT,SAAK,QAAQ,WAAW;AAAA,EAC5B;AAGA,SAAO,eAAe;AACtB,SAAO,QAAQ;AACf,SAAO,UAAU;AACjB,UAAQ,SAAS;AACjB,SAAO;AACX;AA7CJ,IAyDI,iBAAiB,CAAC,IAAI,QAAQ,WAAW,mBAAmB;AACxD,SAAO,SAAS,MAAM;AAClB,QAAI,OAAO,WAAW;AAClB,SAAG,QAAQ,EAAE,OAAO,OAAO;AAE3B,aAAO,OAAO,OAAO,UAAU;AAAA,IACnC;AAAA,EACJ;AACA,SAAO,QAAQ,MAAM;AACjB,QAAI,OAAO,WAAW;AAClB,SAAG,QAAQ,EAAE,OAAO,OAAO;AAC3B,aAAO,UAAU;AAEjB,aAAO,QAAQ;AAAA,IACnB;AAAA,EACJ;AACA,SAAO,MAAM,IAAI,SAAS;AACtB,WAAO,OAAO;AACd,WAAO,OAAO;AACd,WAAO,QAAQ;AAAA,EACnB;AACA,SAAO,SAAS,SAAO;AACnB,UAAM,IAAI,OAAO;AACjB,WAAO,YAAa,OAAO,IAAI,IAAK,IAAK,IAAI;AAAA,EACjD;AACA,SAAO,UAAU,MAAM;AACnB,MAAE,OAAO;AAAA,EACb;AACA,SAAO,YAAY;AACnB,SAAO,YAAY;AACnB,SAAO,UAAU;AACjB,EAAAH,gBAAe,QAAQ,aAAa;AAAA,IAChC,MAAM;AACF,aAAO,OAAO,YAAY;AAAA,IAC9B;AAAA,EACJ,CAAC;AACD,SAAO;AACX;AAyBJ,IAAO,oBAAQ,YAAU,MAAM,mBAAmB,UAAUI,OAAM;AAAA,EAC9D,WAAW,QAAQ;AACf,WAAO;AAAA,EACX;AAAA,EACA,WAAW,aAAa;AACphB,QAAI,GAAG,YAAY;AACf,SAAG,WAAW,QAAQ,CAACD,KAAI,OAAO;AAC9B,YAAI,OAAOA,QAAO,YAAY;AAC1B,UAAAA,IAAG;AAAA,QACP;AACA,qBAAa,EAAE;AACf,qDAAc,SAAS,OAAO;AAAA,MAClC,CAAC;AACD,SAAG,aAAa;AAAA,IACpB;AACA,QAAI,GAAG,YAAY;AACf,SAAG,WAAW,QAAQ,CAAC,MAAM,OAAO,aAAa,EAAE,CAAC;AACpD,SAAG,aAAa;AAAA,IACpB;AACA,QAAI,GAAG,aAAa;AAChB,SAAG,YAAY,QAAQ,QAAM;AACzB,sBAAc,EAAE;AAChB,qDAAc,UAAU,OAAO;AAAA,MACnC,CAAC;AACD,SAAG,cAAc;AAAA,IACrB;AACA,QAAI,GAAG,mBAAmB;AACtB,SAAG,kBAAkB,QAAQ,QAAM;AAC/B,6BAAqB,EAAE;AACvB,qDAAc,gBAAgB,OAAO;AAAA,MACzC,CAAC;AACD,SAAG,oBAAoB;AAAA,IAC3B;AACA,QAAI,GAAG,iBAAiB;AACpB,SAAG,gBAAgB,QAAQ,QAAM;AAC7B,2BAAmB,EAAE;AACrB,qDAAc,cAAc,OAAO;AAAA,MACvC,CAAC;AACD,SAAG,kBAAkB;AAAA,IACzB;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,WAAW,MAAM;AAlVrB;AAmVQ,WAAO,SAAQ,UAAK,eAAL,mBAAiB,IAAI,KAAK;AAAA,EAC7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAcA,WAAW,EAAE,IAAAA,KAAI,OAAAE,QAAO,MAAM,cAAc,mBAAmB,KAAK,GAAG;AACnE,QAAI,UAAU,SAAS,KAAK,OAAO,UAAU,CAAC,MAAM,YAAY;AAC5D,OAACF,KAAIE,QAAO,MAAM,YAAY,IAAI;AAAA,IACtC;AACA,QAAI,OAAOF,QAAO,UAAU;AACxB,aAAOA;AAAA,IACX,WACS,CAAC,MAAM;AACZ,aAAOA,IAAG,QAAQA;AAAA,IACtB;AACA,QAAI,mBAAmB;AACnB,WAAK,aAAa,IAAI;AAAA,IAC1B;AACA,UACI,KAAa,MACb,aAAa,GAAG,eAAe,GAAG,aAAa,oBAAI,IAAI,IACvD,aAAa,GAAG,eAAe,GAAG,aAAa,oBAAI,IAAI,IACvD,YAAa,WAAW,MAAM;AAC1B,UAAI,OAAOA,QAAO,UAAU;AACxB,QAAAA,MAAK,GAAG,IAAI;AAAA,MAChB;AAEA,+CAAY,OAAO;AACnB,+CAAY,OAAO;AACnB,mDAAc,SAAS,OAAO;AAC9B,MAAAA,IAAG,MAAM,IAAI,IAAI;AAAA,IACrB,GAAGE,MAAK;AACZ,eAAW,IAAI,WAAW,eAAeF,MAAK,IAAI;AAElD,iDAAc,SAAS,IAAI,WAAW;AAAA,MAAE,IAAAA;AAAA,MAAI,OAAAE;AAAA,MAAO;AAAA;AAAA,IAAoC;AACvF,QAAI,MAAM;AACN,iBAAW,IAAI,MAAM,SAAS;AAAA,IAClC;AACA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,aAAa,UAAU;AA5Y3B;AA6YQ,QAAI,KAAK;AACT,QAAI,OAAO,OAAO,UAAU;AACxB,UAAI,KAAK,YAAY;AACjB,aAAK,KAAK,WAAW,IAAI,QAAQ;AACjC,aAAK,WAAW,OAAO,QAAQ;AAAA,MACnC,OACK;AACD;AAAA,MACJ;AAAA,IACJ;AACA,iBAAa,EAAE;AACf,eAAK,eAAL,mBAAiB,OAAO;AACxB,iDAAc,SAAS,OAAO;AAAA,EAClC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,cAAc,IAAI;AAhatB;AAiaQ,kBAAc,EAAE;AAChB,eAAK,gBAAL,mBAAkB,OAAO;AACzB,iDAAc,UAAU,OAAO;AAAA,EACnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,YAAYF,KAAIE,QAAO,MAAM;AACzB,UAAM,aAAa,YAAYF,KAAIE,MAAK;AACxC,KAAC,KAAK,gBAAgB,KAAK,cAAc,oBAAI,IAAI,IAAI,IAAI,UAAU;AACnE,iDAAc,UAAU,IAAI,YAAY,EAAE,IAAAF,KAAI,OAAAE,QAAO,KAAK;AAC1D,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,sBAAsBF,KAAI,YAAY,CAAC,GAAG,UAAU,MAAM;AACtD,UACI,oBAAoB,KAAK,sBAAsB,KAAK,oBAAoB,oBAAI,IAAI,IAChF,UAAoB,sBAAsB,MAAM;AAC5C,mDAAc,gBAAgB,OAAO;AAIrC,wBAAkB,OAAO,OAAO,KAAKA,IAAG,MAAM,SAAS,SAAS;AAAA,IACpE,CAAC;AACL,sBAAkB,IAAI,OAAO;AAC7B,iDAAc,gBAAgB,IAAI,SAAS,EAAE,IAAAA,KAAI,WAAW,QAAQ;AACpE,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,oBAAoBA,KAAI,YAAY,CAAC,GAAG,UAAU,MAAM;AACpD,UACI,kBAAkB,KAAK,oBAAoB,KAAK,kBAAkB,oBAAI,IAAI,IAC1E,UAAoB,oBAAoB,MAAM;AAC1C,mDAAc,cAAc,OAAO;AAGnC,sBAAgB,OAAO,OAAO,KAAKA,IAAG,MAAM,SAAS,SAAS;AAAA,IAClE,CAAC;AACL,oBAAgB,IAAI,OAAO;AAC3B,iDAAc,cAAc,IAAI,SAAS,EAAE,IAAAA,KAAI,WAAW,QAAQ;AAClE,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,cAAcA,KAAI,OAAO,CAAC,GAAG,UAAU,MAAM,mBAAmB;AAC5D,QAAI;AACJ,UAAM,SAAS,IAAI,aAAa;AAE5B,UAAI,SAAS,QAAQ,mBAAmB;AACpC,aAAK,qBAAqB,KAAK;AAC/B,gBAAQ;AAAA,MACZ;AACA,UAAI,SAAS,MAAM;AACf,gBAAQ,KAAK,sBAAsB,MAAM;AACrC,cAAI,OAAOA,QAAO,UAAU;AACxB,YAAAA,MAAK,QAAQA,GAAE;AAAA,UACnB;AACA,kBAAQ;AACR,mBAAS,KAAK,GAAG,IAAI;AACrB,UAAAA,IAAG,MAAM,SAAS,QAAQ;AAAA,QAC9B,CAAC;AAAA,MACL;AAAA,IACJ;AACA,WAAO,SAAS,MAAM,KAAK,qBAAqB,KAAK;AACrD,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,qBAAqB,QAAQ;AAlgBjC;AAmgBQ,yBAAqB,MAAM;AAC3B,eAAK,sBAAL,mBAAwB,OAAO;AAC/B,iDAAc,gBAAgB,OAAO;AAAA,EACzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,mBAAmB,QAAQ;AA5gB/B;AA6gBQ,uBAAmB,MAAM;AACzB,eAAK,oBAAL,mBAAsB,OAAO;AAC7B,iDAAc,cAAc,OAAO;AAAA,EACvC;AAAA,EACA,MAAM,qBAAqB;AACvB,WAAO,IAAI,QAAQ,aAAW,KAAK,sBAAsB,OAAO,CAAC;AAAA,EACrE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAaA,OAAOA,KAAI,SAAS;AAChB,QAAIE,SAAQ;AACZ,QAAI,WAAW,OAAO,YAAY,UAAU;AACxC,MAAAA,SAAQ,QAAQ;AAAA,IACpB,OACK;AACD,gBAAU;AAAA,IACd;AACA,UACI,eAAe,IAAI,WAAW;AAC1B,UAAI,aAAa,WAAW;AACxB;AAAA,MACJ;AACA,YAAM,EAAE,OAAAA,OAAM,IAAI;AAClB,mBAAa,OAAO;AACpB,mBAAa,SAAS;AACtB,mBAAa,OAAO;AAEpB,UAAI,aAAa,aAAa,CAACA,QAAO;AAClC,gBAAQ;AAAA,MACZ,OACK;AACD,qBAAa,UAAU,KAAK,WAAW,SAASA,MAAK;AAAA,MACzD;AAAA,IACJ,GACA,UAAU,YAAY,MAAMF,KAAI,cAAc,OAAO;AACzD,iBAAa,QAAQE;AACrB,WAAO,eAAe,MAAM,YAAY;AAAA,EAC5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAcA,IAAIF,KAAI,SAAS;AAWb,QAAI,oBAAoB;AACxB,QAAI,WAAW,OAAO,YAAY,WAAW;AACzC,0BAAoB,QAAQ;AAAA,IAChC,OACK;AACD,gBAAU;AAAA,IACd;AACA,UACI,YAAY,IAAI,WAAW;AACvB,UAAI,UAAU,WAAW;AACrB;AAAA,MACJ;AAEA,UAAI,UAAU,mBAAmB;AAC7B,kBAAU,OAAO;AAAA,MACrB;AACA,gBAAU,SAAS;AACnB,gBAAU,OAAO;AACjB,UAAI,UAAU,WAAW;AACrB,gBAAQ;AAAA,MACZ,WACS,CAAC,UAAU,WAAW;AAC3B,kBAAU,UAAU,KAAK,sBAAsB,OAAO;AAAA,MAC1D;AAAA,IACJ,GACA,UAAU,YAAY,MAAMA,KAAI,WAAW,OAAO;AACtD,cAAU,oBAAoB;AAC9B,WAAO,eAAe,MAAM,WAAW,sBAAsB;AAAA,EACjE;AAAA,EACA,KAAKA,KAAI,SAAS;AACd,QAAI,oBAAoB;AACxB,QAAI,WAAW,OAAO,YAAY,WAAW;AACzC,0BAAoB,QAAQ;AAAA,IAChC,OACK;AACD,gBAAU;AAAA,IACd;AACA,UACI,aAAa,IAAI,WAAW;AACxB,UAAI,WAAW,WAAW;AACtB;AAAA,MACJ;AAEA,UAAI,WAAW,mBAAmB;AAC9B,mBAAW,OAAO;AAAA,MACtB;AACA,iBAAW,SAAS;AACpB,iBAAW,OAAO;AAClB,UAAI,WAAW,WAAW;AACtB,gBAAQ;AAAA,MACZ,WACS,CAAC,WAAW,WAAW;AAC5B,mBAAW,UAAU,KAAK,oBAAoB,OAAO;AAAA,MACzD;AAAA,IACJ,GACA,UAAU,YAAY,MAAMA,KAAI,YAAY,OAAO;AACvD,eAAW,oBAAoB;AAE/B,SAAK,WAAW,MAAM,KAAK,gBAAgB,OAAO,WAAW,OAAO,KAAK,WAAW,IAAI,GAAG,GAAG;AAC9F,WAAO,eAAe,MAAM,YAAY,oBAAoB;AAAA,EAChE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAqBA,SAASA,KAAI,SAAS;AAClB,QAAIE,SAAQ,SACR;AACJ,QAAI,WAAW,OAAO,YAAY,UAAU;AACxC,MAAAA,SAAQ,QAAQ;AAChB,kBAAY,QAAQ;AAAA,IACxB,OACK;AACD,gBAAU;AAAA,IACd;AACA,UACI,KAAK,MACL,iBAAiB,IAAI,SAAS;AAC1B,UAAI,eAAe,WAAW;AAC1B;AAAA,MACJ;AACA,YACI,EAAE,OAAAA,OAAM,IAAI,gBACZ,UAAUJ,aAAY,IAAI,IAAI,eAAe;AACjD,qBAAe,OAAO;AAGtB,UAAI,eAAe,aAAa,WAAWI,QAAO;AAC9C,WAAG,aAAa,eAAe,OAAO;AACtC,gBAAQ;AAAA,MACZ,OACK;AAED,YAAI,CAAC,eAAe,WAAW;AAC3B,yBAAe,UAAU,GAAG,WAAW,SAASA,SAAQ,OAAO;AAC/D,yBAAe,SAAS;AAAA,QAC5B;AACA,YAAI,WAAW;AAEX,oBAAU,OAAO,OAAO;AACxB,oBAAU;AAAA,QACd;AAAA,MACJ;AAAA,IACJ,GACA,UAAU,YAAY,IAAIF,KAAI,gBAAgB,OAAO;AACzD,mBAAe,QAAQE;AACvB,QAAI,WAAW;AAEX,kBAAY,YAAY,IAAI,WAAW,MAAM;AAAA,MAAC,GAAG,OAAO;AAAA,IAC5D;AACA,WAAO,eAAe,IAAI,cAAc;AAAA,EAC5C;AAAA,EACA,OAAO,eAAe,KAAK;AACvB,QAAI,sBAAsB,IAAI,SAAS;AAAA,EAC3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,OAAO,sBAAsB,WAAW,MAAM,MAAM;AAChD,UACI,KAAK,MACL,UAAU,UAAU,QACpB,SAAS,OAAO,GAAG;AACvB,QAAI,SAAS;AACT,aAAO,UAAU;AAAA,IACrB;AACA,eAAW,QAAQ,WAAW;AAC1B,UAAI,UAAU,UAAU,IAAI;AAC5B,YACI,WAAW,OAAO,OAClB,OAAO,OAAO;AAClB,UAAI,CAAC,OAAO,QAAQ,GAAG;AAEnB,eAAO,QAAQ,IAAI,OAAO,IAAI;AAAA,MAClC;AACA,UAAI,SAAS,UAAU;AACnB,kBAAU;AAAA,UACN,MAAQ;AAAA,UACR,OAAQ;AAAA,QACZ;AAAA,MACJ,WACS,SAAS,UAAU;AACxB,kBAAU;AAAA,UACN,MAAO;AAAA,QACX;AAAA,MACJ;AAIA,MAAAL,gBAAe,QAAQ,MAAM;AAAA,QACzB,MAAM;AACF,gBAAM,QAAQ,KAAK,QAAQ,IAAI,EAAE,IAAI,WAAW;AAC5C,iBAAK,QAAQ,EAAE,GAAG,MAAM;AAAA,UAC5B,GAAG,OAAO;AACV,UAAAA,gBAAe,MAAM,MAAM,EAAE,MAAM,CAAC;AACpC,iBAAO;AAAA,QACX;AAAA,MACJ,CAAC;AAAA,IACL;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA,EAIA,IAAI,cAAc;AAAA,EAAC;AACvB;;;ACnwBA,IAAqB,eAArB,MAAkC;AAAA;AAAA;AAAA;AAAA;AAAA,EAK9B,IAAI,OAAO;AACP,WAAO,uBAAO,OAAO,IAAI;AAAA,EAC7B;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,IAAI,OAAO;AACP,WAAO,CAAC;AAAA,EACZ;AAAA;AAAA;AAAA;AAAA,EAIA,QAAQ;AAAA,EAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMT,QAAQ,KAAK;AACT,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,WAAW,KAAK;AAAA,EAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMjB,QAAQ,KAAK,OAAO;AAAA,EAAC;AACzB;AACA,aAAa,SAAS;;;ACxCtB,IAAM,QAAN,cAAoB,aAAa;AAAA,EAC7B,YAAY,eAAe;AACvB,UAAM;AACN,SAAK,SAAS,cAAc,UAAU;AAAA,EAC1C;AAAA,EACA,IAAI,UAAU;AACV,WAAO;AAAA,EACX;AAAA,EACA,IAAI,OAAO;AACP,UACI,OAAO,MAAM,GACb,OAAO,KAAK;AAChB,eAAW,OAAO,MAAM;AACpB,WAAK,GAAG,IAAI,KAAK,QAAQ,GAAG;AAAA,IAChC;AACA,WAAO;AAAA,EACX;AAAA,EACA,IAAI,OAAO;AACP,WAAO,QAAQ,KAAK,QAAQ,KAAK,OAAO,MAAM;AAAA,EAClD;AAAA,EACA,QAAQ;AAGJ,UAAM,OAAO,QAAQ,KAAK,MAAM;AAChC,eAAW,OAAO,MAAM;AACpB,mBAAa,WAAW,GAAG;AAAA,IAC/B;AAAA,EACJ;AAAA,EACA,QAAQ,KAAK;AACT,UAAM,QAAQ,aAAa,QAAQ,KAAK,SAAS,GAAG;AAGpD,WAAQ,UAAU,OAAQ,QAAQ,KAAK,MAAM,KAAK;AAAA,EACtD;AAAA,EACA,WAAW,KAAK;AACZ,WAAO,aAAa,WAAW,KAAK,SAAS,GAAG;AAAA,EACpD;AAAA,EACA,QAAQ,KAAK,OAAO;AAChB,WAAO,aAAa,QAAQ,KAAK,SAAS,KAAK,KAAK,UAAU,KAAK,CAAC;AAAA,EACxE;AACJ;AACA,IAAM,SAAN,cAAqB,aAAa;AAAA,EAC9B,cAAc;AACV,UAAM;AACN,SAAK,MAAM;AAAA,EACf;AAAA,EACA,IAAI,WAAW;AACX,WAAO;AAAA,EACX;AAAA,EACA,IAAI,OAAO;AACP,WAAO,aAAa,MAAM,KAAK,KAAK;AAAA,EACxC;AAAA,EACA,IAAI,OAAO;AACP,WAAO,OAAO,KAAK,KAAK,KAAK;AAAA,EACjC;AAAA,EACA,QAAQ;AACJ,SAAK,QAAQ,MAAM;AAAA,EACvB;AAAA,EACA,QAAQ,KAAK;AACT,WAAQ,OAAO,KAAK,QAAS,KAAK,MAAM,GAAG,IAAI;AAAA,EACnD;AAAA,EACA,WAAW,KAAK;AACZ,WAAO,KAAK,MAAM,GAAG;AAAA,EACzB;AAAA,EACA,QAAQ,KAAK,OAAO;AAChB,SAAK,MAAM,GAAG,IAAI;AAAA,EACtB;AACJ;AACA,IACI,QAAQ,MAAM,uBAAO,OAAO,IAAI;AADpC,IAEI,UAAU,CAAC,QAAQ,MAAM,MAAM;AAC3B,QACI,OAAO,CAAC,GACR,QAAQ,aAAa;AACzB,WAAS,KAAK,IAAI,GAAG,IAAI,OAAO,EAAE,GAAG;AACjC,UAAM,aAAa,IAAI,CAAC;AACxB,QAAI,WAAW,MAAM,KAAK,KAAK,KAAK,IAAI,MAAM,GAAG,CAAC;AAAA,EACtD;AACA,SAAO;AACX;AAXJ,IAYI,cAAc,IAAI,aAAa;AAZnC,IAaI,eAAe;AAAA,EACX,OAAS;AAAA,EACT,QAAS;AACb;AAmEJ,IAAqB,gBAArB,cAA2CM,MAAK,MAAM,mBAAW,cAAM,EAAE;AAAA,EACrE,WAAW,QAAQ;AACf,WAAO;AAAA,EACX;AAAA,EACA,WAAW,eAAe;AACtB,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAMH,QAAS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAaT,SAAU;AAAA,IACd;AAAA,EACJ;AAAA,EACA,WAAW,YAAY;AAuCnB,WAAO;AAAA,MACH,gBAAiB;AAAA,IACrB;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,WAAW,WAAW;AAClB,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,WAAW,SAAS,MAAM;AACtB,QAAI,QAAQ,MAAM;AACd,aAAO;AAAA,IACX,OACK;AACD,UAAI,OAAO,SAAS,YAAY,aAAa,QAAQ,IAAI,KAAM,gBAAgB,cAAe;AAC1F,eAAO;AAAA,UACH,SAAU;AAAA,QACd;AAAA,MACJ;AACA,UAAI,aAAa,SAAS,IAAI,GAAG;AAC7B,eAAO,IAAI,cAAc,IAAI;AAAA,MACjC;AAAA,IACJ;AACA,SAAK,YAAY;AAAA,EACrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAgBA,OAAO,MAAM,MAAM;AACf,SAAK,WAAW;AAChB,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,YAAY;AACR,SAAK,eAAe,MAAM;AAC1B,UAAM,UAAU;AAAA,EACpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,IAAI,OAAO;AACP,WAAO,KAAK,QAAQ;AAAA,EACxB;AAAA,EACA,IAAI,KAAK,MAAM;AACX,QAAI,CAAC,MAAM;AACP,WAAK,MAAM;AAAA,IACf,OACK;AACD,iBAAW,OAAO,MAAM;AACpB,aAAK,SAAS,KAAK,KAAK,GAAG,CAAC;AAAA,MAChC;AAAA,IACJ;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,QAAQ;AACJ,SAAK,QAAQ,MAAM;AACnB,WAAO;AAAA,EACX;AAAA,EACA,cAAc,SAAS;AACnB,QAAI,WAAW,MAAM;AACjB,gBAAU;AAAA,IACd,OACK;AACD,UAAI,OAAO,YAAY,UAAU;AAC7B,YAAI,CAAC,aAAa,OAAO,GAAG;AACxB,gBAAM,IAAI,MAAM,yBAAyB,+BACrC,OAAO,KAAK,YAAY,EAAE,KAAK,MAAM,KAAK;AAAA,QAClD;AACA,kBAAU,aAAa,OAAO;AAAA,MAClC;AACA,UAAI,aAAa,QAAQ,OAAO,GAAG;AAC/B,kBAAU,IAAI,QAAQ,IAAI;AAAA,MAC9B;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,aAAa,UAAU,SAAS;AAC5B,KAAC,KAAK,iBAAiB,KAAK,eAAe,CAAC,IAAI,KAAK,CAAC,UAAU,OAAO,CAAC;AACxE,SAAK,eAAe;AAAA,EACxB;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,iBAAiB;AACb,UACI,KAAK,MACL,EAAE,aAAa,IAAI,IACnB,IAAI,6CAAc,QAClB,WAAW,CAAC,GACZ,QAAQ,CAAC;AACb,OAAG,eAAe;AAClB,QAAI,GAAG;AACH,eAAS,SAAS,UAAU,SAAS,IAAI,GAAG,IAAI,GAAG,EAAE,GAAG;AACpD,SAAC,UAAU,OAAO,IAAI,aAAa,CAAC;AACpC,YAAI,CAAC,SAAS,gBAAgB,SAAS,oBAAoB;AACvD,oBAAU,SAAS,UAAU;AAAA,YACzB,GAAG;AAAA,YACH,WAAY;AAAA,UAChB,CAAC;AACD,cAAI,SAAS;AACT,qBAAS,KAAK,OAAO;AACrB,kBAAM,KAAK,QAAQ;AAAA,UACvB;AAAA,QACJ;AAAA,MACJ;AACA,UAAI,SAAS,QAAQ;AA6CjB,WAAG,QAAQ,QAAQ;AAAA,UACf;AAAA,UACA;AAAA,QACJ,CAAC;AAAA,MACL;AAAA,IACJ;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,SAAS,KAAK;AACV,SAAK,eAAe,MAAM;AAC1B,WAAO,KAAK,QAAQ,QAAQ,GAAG;AAAA,EACnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,SAAS,KAAK,OAAO;AACjB,UACI,KAAK,MACL,EAAE,QAAQ,IAAI,IACd,MAAM,GAAG,SAAS,GAAG;AACzB,QAAI,SAAS,MAAM;AACf,cAAQ,QAAQ,KAAK,KAAK;AAS1B,SAAG,QAAQ,OAAO,EAAE,KAAK,OAAO,IAAI,CAAC;AAAA,IACzC,WACS,QAAQ,MAAM;AACnB,cAAQ,WAAW,GAAG;AAQtB,SAAG,QAAQ,UAAU,EAAE,KAAK,IAAI,CAAC;AAAA,IACrC;AACA,WAAO;AAAA,EACX;AACJ;AACA,IAAM,eAAe,IAAI,cAAc;AAAA,EACnC,SAAU;AACd,CAAC;AACD,cAAc,YAAY;AAC1B,cAAc,SAAS;;;ACncvB,IAAM,cAAc;AA0HpB,IAAO,gBAAQ,YAAO;AAnItB;AAmIyB,6BAAqB,UAAUC,OAAM;AAAA,IA8F1D,iBAAiB;AACb,YAAM,eAAe;AACrB,WAAK,UAAU;AAAA,IACnB;AAAA,IACA,eAAe;AAEX,WAAK,UAAU;AACf,YAAM,aAAa;AAAA,IACvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAMA,IAAI,aAAa;AACb,aAAO;AAAA,IACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAOA,IAAI,mBAAmB;AAMnB,aAAO,CAAC,KAAK,qBAAqB,CAAC,KAAK,uBAAuB,CAAC,KAAK;AAAA,IACzE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAOA,IAAI,QAAQ;AACR,aAAO,KAAK,SAAS,KAAK,SAAS;AAAA,IACvC;AAAA,IACA,IAAI,MAAM,OAAO;AACb,WAAK,SAAS;AACd,UAAI,OAAO;AACP,aAAK,WAAW,KAAK;AAAA,MACzB;AAAA,IACJ;AAAA;AAAA,IAEA,qBAAqB,QAAQ;AAhRjC,UAAAC;AAiRQ,YACI,KAAY,MACZ,YAAY;AAAA,QACR,MAAU;AAAA,QACV,SAAU;AAAA,MACd;AACJ,SAAG,gBAAgB,UAAU,IAAI;AACjC,UAAI,QAAQ;AACR,YAAI,OAAO,WAAW,UAAU;AAC5B,mBAAS,aAAa,MAAM,MAAM;AAAA,QACtC,WACS,CAAC,MAAM,QAAQ,MAAM,GAAG;AAC7B,mBAAS,aAAa,cAAc,MAAM;AAAA,QAC9C;AACA,YAAI,OAAO,QAAQ;AACf,qBAAW,SAAS,QAAQ;AACxB,sBAAU,KAAK,IAAI;AAAA,UACvB;AACA,WAAAA,MAAA,GAAG,QAAH,gBAAAA,IAAA,SAAS;AAAA,QACb;AAAA,MACJ;AAAA,IACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IASA,IAAI,aAAa;AACb,YACI,KAAK,MACL,EAAE,gBAAgB,IAAI;AAC1B,UAAI,aAAa,GAAG;AACpB,UAAI,cAAc,QAAQ,GAAG,mBAAmB,SAAS,GAAG,aAAa,OAAO;AAC5E,qBAAa,GAAG;AAAA,MACpB;AACA,UAAI,cAAc,iBAAiB;AAC/B,qBAAa,GAAG,cAAc;AAAA,MAClC;AACA,aAAO;AAAA,IACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IASA,IAAI,eAAe;AACf,YAAM,EAAE,SAAS,IAAI;AACrB,aAAO,MAAM,QAAQ,QAAQ,IAAI,aAAa,iBAAiB,QAAQ,IAAI;AAAA,IAC/E;AAAA;AAAA,IAEA,IAAI,gBAAgB;AAChB,aAAO,KAAK,kBAAkB,cAAc;AAAA,IAChD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAgBA,WAAW,OAAO;AACd,cAAQ,KAAK,WAAW,KAAK;AAC7B,UAAI,OAAO;AACP,aAAK,UAAU,KAAK;AAAA,MACxB;AAAA,IACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAcA,WAAW;AACP,YACI,KAAc,MACd;AAAA,QACI;AAAA,QACA;AAAA,QACA,gBAAiB;AAAA,MACrB,IAAc,IACd,EAAE,QAAQ,IAAI,GAAG,OAGjB,SAAc,eAAe,OAAO,eAAe,eAAe,GAAG,MAAM,MAAM,IAAI;AACzF,UAAI,QAAQ,MACR,KAAK;AACT,UAAI,cAAc;AACd,gBAAQ,CAAC;AACT,aAAK,OAAO,cAAc;AACtB,cAAI,aAAa,GAAG,GAAG;AACnB,oBAAQ,OAAO,GAAG;AAClB,gBAAI,+BAAO,YAAY;AACnB,sBAAQ,MAAM;AAAA,YAClB,WACS,CAAC,cAAc;AAGpB,kBAAI,aAAa,OAAO,KAAK,GAAG;AAC5B,wBAAQ,WAAW,OAAO,OAAO,sBAAsB;AAAA,cAC3D;AAEA,kBAAI,QAAQ,GAAG,EAAE,MAAM,OAAO,+CAAgB,IAAI,KAAK,CAAC,YAAY,KAAK,OAAO,KAAK,GAAG;AACpF;AAAA,cACJ;AAAA,YACJ;AACA,kBAAM,GAAG,IAAI;AAAA,UACjB;AAAA,QACJ;AAAA,MACJ;AACA,aAAO;AAAA,IACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAgBA,UAAU,SAAS,QAAQ;AACvB,UAAI,OAAO,YAAY,WAAW;AAC9B,iBAAS;AACT,kBAAU;AAAA,MACd;AACA,YACI,KAAK,MACL,EAAE,eAAe,IAAI;AACzB,UAAI,GAAG,qBAAqB,UAAU,CAAC,iBAAiB;AACpD,cAAM,QAAQ,GAAG,iBAAiB,YAAY,UAAU,GAAG,WAAW;AACtE,YAAI,CAAC,kBAAkB,SAAS;AAI5B,aAAG,eAAe,GAAG;AACrB,aAAG,iBAAiB;AAAA,QACxB;AACA,YAAI,OAAO;AACP,aAAG,QAAQ;AAAA,QACf;AAAA,MACJ;AAAA,IACJ;AAAA,IACA,iBAAiB,SAAS;AA1b9B,UAAAA;AA2bQ,gBAAU,KAAK,mBAAmB,WAAW,KAAK,aAAa;AAC/D,aAAO,aAAWA,MAAA,KAAK,kBAAL,gBAAAA,IAAoB,SAAS;AAAA,IACnD;AAAA,IACA,oBAAoB;AAChB,UAAI,KAAK,cAAc;AACnB,aAAK,QAAQ,KAAK;AAAA,MACtB;AAAA,IACJ;AAAA,IACA,eAAe,OAAO,OAAO;AACzB,WAAK,oBAAoB,OAAO,IAAI,KAAK,IAAI,KAAK,oBAAoB,GAAG,CAAC;AAAA,IAC9E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAgBA,UAAU,SAAS;AACf,UAAI,OAAO,YAAY,UAAU;AAC7B,kBAAU;AAAA,UACN,IAAK;AAAA,QACT;AAAA,MACJ,OACK;AACD,kBAAU,WAAW,CAAC;AAAA,MAC1B;AACA,YACI,KAAoB,MACpB,EAAE,cAAc,IAAI,IACpB,aAAoB,QAAQ,MAAO,GAAG,oBAAoB,GAAG;AACjE,UAAI,cAAc,eAAe;AAC7B,YAAI,QAAQ,WAAW;AACnB,aAAG,qBAAqB;AACxB,wBAAc,SAAS,YAAY,GAAG,KAAK;AAAA,QAC/C,WACS,CAAC,GAAG,oBAAoB;AAC7B,aAAG,qBAAqB;AACxB,wBAAc,aAAa,IAAI,OAAO;AAAA,QAC1C;AACA,eAAO;AAAA,MACX;AAAA,IACJ;AAAA,IACA,kBAAkB;AACd,QAAE,KAAK;AAAA,IACX;AAAA;AAAA;AAAA,IAGA,eAAe,EAAE,MAAM,OAAO,KAAK,OAAO,GAAG;AACzC,YAAM,eAAe,EAAE,MAAM,OAAO,KAAK,OAAO,CAAC;AACjD,UAAI,CAAC,KAAK,kBAAkB,KAAK,oBAAoB,KAAK,YAAY;AAClE,cAAM,EAAE,SAAS,IAAI;AACrB,YAAI,MAAM,QAAQ,QAAQ,IAAI,SAAS,SAAS,IAAI,IAAI,qCAAW,OAAO;AACtE,eAAK,UAAU;AAAA,QACnB;AAAA,MACJ;AAAA,IACJ;AAAA,IACA,kBAAkB;AACd,UAAI,CAAC,KAAK,gBAAgB;AACtB,aAAK,UAAU;AAAA,MACnB;AAAA,IACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IASA,WAAW,OAAO;AACd,YAAM,EAAE,aAAa,IAAI;AACzB,UAAI,cAAc;AACd,cAAM,SAAS,CAAC;AAChB,mBAAW,OAAO,OAAO;AACrB,cAAI,aAAa,GAAG,GAAG;AACnB,mBAAO,GAAG,IAAI,MAAM,GAAG;AAAA,UAC3B;AAAA,QACJ;AACA,gBAAQ;AAAA,MACZ;AACA,aAAO;AAAA,IACX;AAAA;AAAA;AAAA;AAAA;AAAA,IAKA,IAAI,cAAc;AAAA,IAAC;AAAA,EACvB,GAvZI,cADqB,IACd,SAAQ,UACf,cAFqB,IAEd,gBAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAsBlB,UAAW;AAAA,MACP,OAAU;AAAA,MACV,SAAU;AAAA,QACN,OAAQ;AAAA,MACZ;AAAA,IACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAwBA,gBAAiB;AAAA,MACb,SAAU;AAAA,QACN,OAAQ;AAAA,MACZ;AAAA,MACA,OAAQ,CAAC,aAAa;AAAA,IAC1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAiBA,SAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAaV,eAAgB;AAAA,EACpB,IACA,cA1FqB,IA0Fd,uBAAsB;AAAA,IACzB,gBAAiB;AAAA,IACjB,mBAAoB;AAAA,EACxB,IA7FqB;AAAA;;;AC9HzB,IAEI,WAAe,aAAa,eAAe,YAAY,oBAAoB,uBAAO,OAAO,IAAI,CAAC;AAFlG,IAGI,UAAe;AAAA,EACX,QAAS;AAAA,EACT,QAAS;AACb;AAQJ,IAAO,uBAAQ,YAAU,MAAM,sBAAsB,UAAUC,OAAM;AAAA,EACjE,WAAW,QAAQ;AACf,WAAO;AAAA,EACX;AAAA,EACA,WAAW,aAAa;AACpB,WAAO;AAAA,MACH;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,WAAW,eAAe;AACtB,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAWH,IAAK;AAAA,IACT;AAAA,EACJ;AAAA,EACA,OAAO,kBAAkB,KAAK,MAAM;AAChC,UAAM,EAAE,aAAa,IAAI;AACzB,iBAAa,QAAQ,uBAAO,OAAO,IAAI;AACvC,YAAQ,eAAe,KAAK,gBAAgB;AAAA,MACxC,MAAM;AACF,eAAO;AAAA,MACX;AAAA,IACJ,CAAC;AAAA,EACL;AAAA,EACA,YAAY;AACR,SAAK,YAAY,mBAAmB,IAAI;AACxC,UAAM,UAAU;AAAA,EACpB;AAAA,EACA,SAAS,IAAI;AACT,YAAS,KAAK,iBAAkC,CAAC,MAAO,KAAK,eAAe,IAAI;AAAA,EACpF;AAAA,EACA,SAAS,IAAI,OAAO;AAChB,UACI,KAAK,MACL,IAAI,GAAG;AACX,aAAS,EAAE,mBAAmB,IAAI,KAAK;AACvC,QAAI,CAAC,GAAG,kBAAkB,EAAE,aAAa,wBAAwB,OAAO;AACpE,QAAE,iBAAiB,IAAI,EAAE;AAAA,IAC7B;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,iBAAiB;AACb,WAAO,KAAK,YAAY,WAAW,KAAK,KAAK,OAAO,YAAY,IAAI;AAAA,EACxE;AAAA,EACA,WAAW,MAAM;AAEb,WAAO,OAAO,OAAO,KAAK,aAAa,KAAK;AAAA,EAChD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,OAAO,WAAW,SAAS,eAAe;AAGtC,WAAO,UAAU,SAAS,MAAM,KAAK,SAAS,MAAM,KAAK,KAAK;AAAA,EAClE;AAAA,EACA,OAAO,iBAAiB,UAAU,aAAa,SAAS,IAAI;AACxD,UAAM,EAAE,MAAM,IAAI,KAAK;AAEvB,QAAI,cAAc,SAAS,CAAC,KAAK,cAAc;AAC3C,YAAM,IAAI,MAAM,QAAQ,aAAa,iBAAiB;AAAA,IAC1D;AACA,UAAM,UAAU,IAAI;AAAA,EACxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,OAAO,mBAAmB,UAAU,KAAK,SAAS,IAAI;AAClD,UAAM,EAAE,MAAM,IAAI,KAAK;AAEvB,QAAI,QAAQ,OAAO,QAAQ,GAAG;AAC1B,aAAO,MAAM,QAAQ;AAAA,IACzB,WAGS,MAAM,EAAE,MAAM,UAAU;AAC7B,aAAO,MAAM,EAAE;AAAA,IACnB;AAAA,EACJ;AAAA,EACA,OAAO,QAAQ,IAAI;AACf,UAAM,QAAQ,KAAK,aAAa;AAChC,QAAI,OAAO;AACP,aAAO,MAAM,EAAE;AAAA,IACnB;AAAA,EACJ;AAAA,EACA,WAAW,sBAAsB;AAC7B,UAAM,QAAQ,KAAK,aAAa;AAChC,WAAO,QAAQ,OAAO,OAAO,KAAK,IAAI,CAAC;AAAA,EAC3C;AACJ;;;ACzHA,IACI,WAAmB,OAAO,UAAU;AADxC,IAEI,mBAAmB;AAAA;AAAA;AAAA,EAGf,aAAc;AAClB;AAMJ,IAAO,mBAAQ,YAAU,MAAM,kBAAkB,UAAUC,OAAM;AAAA,EAC7D,WAAW,QAAQ;AACf,WAAO;AAAA,EACX;AAAA,EACA,WAAW,gBAAgB;AACvB,WAAO;AAAA,MACH,KAAM;AAAA,IACV;AAAA,EACJ;AAAA,EACA,UAAU,OAAO;AAGb,QAAI,CAAC,KAAK,KAAK;AACX,WAAK,MAAM,MAAM;AAAA,IACrB;AAAA,EACJ;AAAA,EACA,YAAY,OAAO;AAhCvB;AAiCQ,QAAI,KAAK,QAAQ,MAAM,KAAK;AACxB,WAAK,MAAM;AAAA,IACf;AACA,gBAAM,gBAAN,8BAAoB;AAAA,EACxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,IAAI,MAAM;AACN,WAAO,KAAK,QAAQ;AAAA,EACxB;AAAA,EACA,IAAI,IAAI,KAAK;AACT,SAAK,QAAQ,IAAI;AAAA,EACrB;AAAA;AAAA;AAAA,EAGA,qBAAqB,WAAW,OAAO;AAnD3C;AAoDQ,UAAM,KAAK;AACX,QAAI,CAAC,GAAG,eAAa,QAAG,QAAH,mBAAQ,YAAW,CAAC,iBAAiB,SAAS,KAAK,CAAC,GAAG,YAAY,qBAAqB,SAAS,GAAG;AAErH,UAAI,GAAG,mBAAmB,SAAS,GAAG;AAClC,eAAO,EAAE,CAAC,SAAS,GAAI,EAAE,OAAO,UAAW,GAAG,SAAS,EAAE,EAAE;AAAA,MAC/D;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA,EAGA,oBAAoB,WAAW,OAAO,QAAQ;AAC1C,cAAU,KAAK,SAAS,WAAW,OAAO,OAAO,OAAO,QAAQ,IAAI;AAAA,EACxE;AAAA,EACA,wBAAwB,WAAW,UAAU,UAAU;AACnD,UAAM,QAAQ,KAAK;AAOnB,WAAO,EACH,KAAK,YAAY,qBAAqB,SAAS,KAC9C,YAAY,QAAQ,YAAY,QAChC,aAAa,YACZ,oBAAoB,QAAU,oBAAoB,QAAS,SAAS,QAAQ,MAAM,SAAS,QAAQ,KACrG,cAAc,QACd,cAAc,gBACb,cAAc,cAAc,SAAS,MAAM,SAAS,QAAQ,MAAM,MAAM,QAAQ,QAAQ;AAAA,EAEjG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,SAASC,QAAO,OAAO,QAAQ,oBAAoB,QAAQ,kBAAkB;AACzE,UACI,EAAE,IAAI,IAAiB,MACvB,uBAAuB,KAAK,YAAY;AAC5C,SAAI,2BAAK,WAAU,IAAI,WAAW,CAAC,iBAAiBA,MAAK,KAAK,CAAC,qBAAqBA,MAAK,GAAG;AACxF,UAAI,QAAQ;AACR,YAAI;AACJ,cAAM,CAAC,SAAS,OAAO,IAAI,OAAO,KAAK,MAAM,EAAE;AAAA,UAC3C,CAAC,MAAM,cAAc;AACjB,kBAAM,EAAE,OAAAC,QAAO,SAAS,IAAI,OAAO,SAAS;AAC5C,gBAAI,KAAK,wBAAwB,WAAW,UAAUA,MAAK,GAAG;AAC1D,6BAAqB;AACrB,mBAAK,CAAC,EAAE,SAAS,IAAIA;AACrB,mBAAK,CAAC,EAAE,SAAS,IAAI;AAAA,YACzB;AACA,mBAAO;AAAA,UACX;AAAA,UACA,CAAC,CAAC,GAAG,CAAC,CAAC;AAAA,QACX;AACA,YAAI,cAAc;AACd,cAAI,cAAc,MAAM,SAAS,SAAS,gBAAgB;AAAA,QAC9D;AAAA,MACJ;AAAA,IACJ;AAAA,EAGJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAaA,kBAAkB,cAAc;AAnIpC;AAoIQ,UACI,cAAY,WAAM,sBAAN,8BAA0B,kBAAiB,CAAC,GACxD,EAAE,IAAI,IAAM;AAChB,QAAI,2BAAK,SAAS;AACd,gBAAU;AAAA,QACN,aAAa,OAAO,CAAC,QAAQ,gBAAgB;AAKzC,cAAI,YAAY,SAAS,KAAK,MAAM;AAChC,mBAAO,IAAI,aAAa;AAAA,cACpB,QAAS,YAAY;AAAA,cACrB,OAAS,YAAY,SAAS,YAAY,cAAc;AAAA,YAC5D,CAAC;AAAA,UACL;AACA,iBAAO;AAAA,QACX,GAAG,oBAAI,IAAI,CAAC;AAAA,MAChB;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,iBAAiB,OAAO,cAAc,cAAc,UAAU;AAjKlE;AAkKQ,UAAM,EAAE,IAAI,IAAI;AAChB,QAAI,2BAAK,SAAS;AACd,YAAM,UAAU,aAAa,IAAI;AACjC,UAAI,UAAU;AACV,YAAI,mBAAmB,MAAM,OAAO,UAAU,OAAO;AAAA,MACzD;AAAA,IACJ;AACA,gBAAM,qBAAN,8BAAyB,OAAO,cAAc,cAAc;AAAA,EAChE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAcA,kBAAkB,cAAc,QAAQ;AACpC,UACI,YAAY,MAAM,oBAAoB,MAAM,kBAAkB,cAAc,MAAM,IAAI,CAAC,GACvF,EAAE,IAAI,IAAM;AAEhB,SAAI,2BAAK,YAAW,CAAC,QAAQ;AAKzB,gBAAU;AAAA,QACN,aAAa,OAAO,CAAC,QAAQ,gBAAgB;AACzC,iBAAO,IAAI,aAAa,YAAY,WAAW;AAC/C,iBAAO;AAAA,QACX,GAAG,oBAAI,IAAI,CAAC;AAAA,MAChB;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,iBAAiB,cAAc,cAAc,QAAQ;AAlNzD;AAmNQ,UAAM,EAAE,IAAI,IAAI;AAEhB,SAAI,2BAAK,YAAW,CAAC,QAAQ;AACzB,YAAM,UAAU,aAAa,IAAI;AACjC,UAAI,gBAAgB,aAAa,QAAQ;AACrC,YAAI,mBAAmB,MAAM,cAAc,OAAO;AAAA,MACtD;AAAA,IACJ;AACA,gBAAM,qBAAN,8BAAyB,cAAc,cAAc;AAAA,EACzD;AACJ;;;ACxNA,IACI,yBAAyB;AAAA,EACrB,2BAA4B;AAChC;AAHJ,IAII,qBAAyB,aAAW;AAChC,YAAU,WAAW;AACrB,MAAI,OAAO,YAAY,WAAW;AAC9B,cAAU;AAAA,MACN,2BAA4B;AAAA,IAChC;AAAA,EACJ;AACA,SAAO,WAAW;AACtB;AAmBJ,IAAO,mBAAQ,YAAU,MAAM,kBAAkB,UAAUC,OAAM;AAAA,EAC7D,WAAW,QAAQ;AACf,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA0BA,WAAW,yBAAyB,OAAO;AACvC,QAAI,UAAU,MAAM;AAChB,cAAQ;AAAA,QACJ,QAAW;AAAA,QACX,UAAW;AAAA,MACf;AAAA,IACJ,WACS,UAAU,OAAO;AACtB,cAAQ;AAAA,QACJ,QAAW;AAAA,QACX,UAAW;AAAA,MACf;AAAA,IACJ;AACA,SAAK,4BAA4B;AAAA,EACrC;AAAA,EACA,eAAe,MAAM;AACjB,UAAM,GAAG,IAAI;AACb,QAAI,KAAK,UAAU;AACf,WAAK,kBAAkB,KAAK,mBAAmB,CAAC;AAAA,IACpD;AAAA,EACJ;AAAA,EACA,WAAW,2BAA2B;AAClC,WAAO,KAAK,6BAA6B,EAAE,QAAS,OAAO,UAAW,MAAM;AAAA,EAChF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAiCA,eAAe,aAAa,SAAS,KAAK,QAAQ;AAC9C,UACI,EAAE,mBAAmB,aAAc,QAAQ,IAAI,MAC/C,QAA+C,OAAO,CAAC;AAC3D,QAAI,gBAAgB,MAAM;AACtB,UAAI,mBAAmB;AACnB,eAAO;AAAA,MACX;AACA,aAAO,CAAC;AAAA,IACZ;AACA,QAAI,aAAa;AACb,oBAAc,YAAY,QAAQ,WAAW;AAC7C,YACI,MAAS,YAAY,QACrB,SAAS,CAAC;AACd,eAAS,IAAI,GAAG,OAAO,IAAI,KAAK,KAAK;AACjC,gBAAQ,YAAY,CAAC;AACrB,gBAAQ,MAAM,UAAU,QAAS,QAAQ,MAAM,aAAa,OAAO,OAAO,IAAI,IAAI,IAAI,QAAQ,OAAO,MAAM,MAAM,IAAI;AACrH,gBAAQ,QAAQ,MAAM,cAAc,KAAK,IAAI;AAC7C,eAAO,KAAK,KAAK;AAAA,MACrB;AACA,UAAI,KAAK,aAAa,QAAQ,OAAO;AACjC,cAAM,SAAS,MAAM,eAAe,MAAM,OAAO;AACjD,eAAO,KAAK,MAAM;AAAA,MACtB;AACA,aAAO;AAAA,IACX;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA6BA,gBAAgB,SAAS,KAAK,QAAQ;AAClC,UACI,KAAW,MACX,EAAE,KAAK,IAAI;AACf,OAAG,oBAAoB;AACvB,UAAM,WAAW,GAAG,eAAe,GAAG,KAAK,GAAG,YAAY,aAAa,GAAG,MAAM;AAChF,QAAI,UAAU;AACV,YACI,EAAE,yBAAyB,IAAI,GAAG,aAClC,gBAA+B,6BAA6B,QAAQ,yBAAyB;AACjG,UAAI,gBAAgB,SAAS,SAAS,MAAM,QAAQ,QAAQ,GAAG;AAC3D,aAAK,SAAS;AAEd,YAAI,GAAG,aAAa,MAAM;AACtB,aAAG,WAAW,CAAC;AAAA,QACnB,WACS,SAAS,WAAW,GAAG;AAC5B,aAAG,WAAW;AACd;AAAA,QACJ;AACA,WAAG,YAAY,QAAQ;AAAA,MAC3B,WAES,aAAa,MAAM;AACxB,aAAK,SAAS;AACd,WAAG,WAAW;AAAA,MAClB,WAES,CAAC,GAAG,QAAQ;AACjB,aAAK,SAAS,GAAG,YAAY,yBAAyB;AAAA,MAC1D;AAAA,IACJ;AACA,OAAG,oBAAoB;AAAA,EAC3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,kBAAkB,QAAQ,KAAK,YAAY;AACvC,UAAM,EAAE,OAAO,IAAI;AACnB,WAAO,CAAC,UAAW,OAAO,WAAW,KAAK,KAAK,OAAO,kBAAkB,KAAK;AAAA,EACjF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,WAAW,QAAQ,KAAK,YAAY;AAChC,UAAM,UAAU,KAAK,aAAa,MAAM,EAAE;AAG1C,QAAI,CAAC,OAAO,UAAU,eAAe,KAAK,SAAS,WAAW,GAAG;AAC7D,cAAQ,YAAY,CAAC,KAAK;AAAA,IAC9B;AACA,WAAO,CAAC,QAAQ;AAAA,EACpB;AAAA;AAAA;AAAA,EAGA,IAAI,WAAW;AACX,WAAO,KAAK,KAAK;AAAA,EACrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,IAAI,aAAa;AACb,QAAI,OAAO,MACP,MAAO;AACX,WAAO,QAAQ,CAAC,KAAK,QAAQ;AACzB,QAAE;AACF,aAAO,KAAK;AAAA,IAChB;AACA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,IAAI,SAAS;AACT,WAAO,KAAK,KAAK,WAAW,SAAS,CAAC,KAAK;AAAA,EAC/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAaA,IAAI,WAAW;AACX,WAAO,CAAC,KAAK;AAAA,EACjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,IAAI,WAAW;AACX,WAAO,KAAK,YAAY,MAAM,QAAQ,KAAK,QAAQ;AAAA,EACvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,IAAI,kBAAkB;AAClB,WAAO,KAAK,mBAAmB;AAAA,EACnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,IAAI,yBAAyB;AACzB,WAAO,KAAK,mBAAmB,IAAI;AAAA,EACvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,mBAAmB,cAAc,OAAO,QAAQ,KAAK,YAAY;AAC7D,UAAM,EAAE,SAAS,IAAI;AACrB,QAAI,CAAC,YAAY,CAAC,MAAM,QAAQ,QAAQ,KAAM,eAAe,CAAC,KAAK,WAAW,KAAK,GAAI;AACnF,aAAO;AAAA,IACX;AACA,WAAO,SAAS,OAAO,CAAC,OAAO,UAAU,QAAQ,MAAM,mBAAmB,WAAW,GAAG,SAAS,MAAM;AAAA,EAC3G;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,IAAI,cAAc;AACd,UAAM,EAAE,SAAS,IAAI;AACrB,QAAI,CAAC,YAAY,aAAa,MAAM;AAChC,aAAO,CAAC;AAAA,IACZ;AACA,WAAO,SAAS,OAAO,CAAC,KAAK,UAAU;AACnC,UAAI,KAAK,KAAK;AAGd,UAAI,KAAK,MAAM,KAAK,MAAM,WAAW;AACrC,aAAO;AAAA,IACX,GAAG,CAAC,CAAC;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,IAAI,aAAa;AACb,UAAM,EAAE,SAAS,IAAI;AACrB,YAAQ,qCAAU,WAAU,SAAS,CAAC,KAAM;AAAA,EAChD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,IAAI,YAAY;AACZ,UAAM,EAAE,SAAS,IAAI;AACrB,YAAQ,qCAAU,WAAU,SAAS,SAAS,SAAS,CAAC,KAAM;AAAA,EAClE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAkBA,IAAI,6BAA6B;AAC7B,QAAI,OAAQ,KAAK,iBACb,QAAQ,KAAK;AACjB,WAAO,MAAM;AACT,eAAS,KAAK;AACd,aAAO,KAAK;AAAA,IAChB;AACA,WAAO;AAAA,EACX;AAAA,EACA,IAAI,yBAAyB;AAnYjC;AAoYQ,YAAO,UAAK,WAAL,mBAAa,gBAAgB,KAAK,qBAAqB;AAAA,EAClE;AAAA,EACA,IAAI,qBAAqB;AAtY7B;AAuYQ,YAAO,UAAK,WAAL,mBAAa,gBAAgB,KAAK,qBAAqB;AAAA,EAClE;AAAA,EACA,IAAI,OAAO;AAzYf;AA0YQ,aAAO,UAAK,WAAL,mBAAa,SAAQ;AAAA,EAChC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAgBA,IAAI,WAAW;AACX,WAAO,KAAK,UAAU,CAAC,KAAK,OAAO,aAAa,KAAK,OAAO,KAAK;AAAA,EACrE;AAAA,EACA,IAAI,SAAS,UAAU;AACnB,UACI,KAAa,MACb,EAAE,OAAO,IAAI,IACb,YAAa,aAAa,OAAO,GAAG,WAAW,WAAW,GAAG,WAAW,QAAQ,QAAQ;AAG5F,QAAI,EAAE,cAAc,UAAW,CAAC,UAAU,CAAC,YAAa;AAGpD,UAAI,GAAG,iBAAiB;AACpB,WAAG,KAAK,aAAa,WAAW;AAAA,MACpC,OACK;AACD,YAAI,WAAW;AACX,oBAAU,YAAY,EAAE;AAAA,QAC5B,OACK;AACD,aAAG,OAAO,YAAY,EAAE;AAAA,QAC5B;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,WAAW,cAAc,eAAe;AAIpC,SAAK,iBAAiB;AACtB,WAAO,eAAe,KAAK,WAAW,eAAe;AAAA,MACjD,KAAM,SAAS,UAAU;AAGrB,aAAK,WAAW;AAAA,MACpB;AAAA,MACA,KAAM,WAAW;AAGb,eAAO,KAAK;AAAA,MAChB;AAAA,IACJ,CAAC;AAAA,EACL;AAAA,EACA,WAAW,gBAAgB;AACvB,WAAO,KAAK,kBAAkB;AAAA,EAClC;AAAA,EACA,YAAY,SAAS;AACjB,QAAI;AACJ,QAAI,QAAQ,2BAA2B;AACnC,eAAS,KAAK,sBAAsB,KAAK;AAAA,IAC7C,WACS,QAAQ,gBAAgB;AAC7B,eAAS,KAAK;AAAA,IAClB,OACK;AACD,eAAS,KAAK;AAAA,IAClB;AACA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA,SAASC,KAAI,UAAU,SAAS;AAC5B,cAAU,mBAAmB,OAAO;AACpC,UACI,KAAW,MACX,WAAW,GAAG,YAAY,OAAO;AACrC,QAAI,CAAC,UAAU;AACX,MAAAA,IAAG,KAAK,IAAI,EAAE;AAAA,IAClB;AAGA,aAAS,IAAI,GAAG,IAAI,qCAAU,QAAQ,IAAI,GAAG,KAAK;AAC9C,eAAS,CAAC,EAAE,SAASA,KAAI,OAAO,OAAO;AAAA,IAC3C;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,eAAeA,KAAI,UAAU,SAAS;AAClC,cAAU,mBAAmB,OAAO;AACpC,UACI,KAAW,MACX,WAAW,GAAG,YAAY,OAAO;AAGrC,aAAS,IAAI,GAAG,IAAI,qCAAU,QAAQ,IAAI,GAAG,KAAK;AAC9C,eAAS,CAAC,EAAE,SAASA,KAAI,OAAO,OAAO;AAAA,IAC3C;AACA,QAAI,CAAC,UAAU;AACX,MAAAA,IAAG,KAAK,IAAI,EAAE;AAAA,IAClB;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,cAAcA,KAAI,UAAU,SAAS;AACjC,cAAU,mBAAmB,OAAO;AACpC,UAAM,KAAK;AACX,QAAI,OAAO,YAAYA,IAAG,KAAK,IAAI,EAAE,MAAM;AAC3C,QAAI,MAAM;AACN,YAAM,WAAW,GAAG,YAAY,OAAO;AAGvC,UAAI,qCAAU,QAAQ;AAClB,eAAO,SAAS,MAAM,WAAS,MAAM,cAAcA,KAAI,OAAO,OAAO,CAAC;AAAA,MAC1E;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,OAAOA,KAAI,WAAW,OAAO;AACzB,QAAI,KAAK;AACT,QAAI,CAAC,UAAU;AACX,MAAAA,IAAG,KAAK,IAAI,EAAE;AAAA,IAClB;AACA,WAAO,GAAG,QAAQ;AACd,WAAK,GAAG;AACR,MAAAA,IAAG,KAAK,IAAI,EAAE;AAAA,IAClB;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,YAAYA,KAAI,WAAW,OAAO;AAC9B,QAAI,KAAO,MACP,OAAO;AACX,QAAI,CAAC,UAAU;AACX,aAAOA,IAAG,KAAK,IAAI,EAAE;AAAA,IACzB;AACA,WAAO,QAAQ,GAAG,QAAQ;AACtB,WAAO,GAAG;AACV,aAAOA,IAAG,KAAK,IAAI,EAAE;AAAA,IACzB;AACA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,SAAS,WAAW,WAAW,OAAO;AAClC,QAAI,aAAa,OAAO,cAAc,UAAU;AAC5C,kBAAY,UAAU;AAAA,IAC1B;AACA,WAAO,CAAC,KAAK,cAAc,UAAQ,KAAK,MAAM,WAAW,QAAQ;AAAA,EACrE;AAAA,EACA,aAAa,KAAK;AACd,QAAI;AACJ,QAAI,KAAK;AACL,eAAS,CAAC;AACV,WAAK,YAAY,CAAC,MAAM;AACpB,eAAO,KAAK,CAAC;AACb,eAAO,EAAE,UAAU,CAAC,EAAE,OAAO;AAAA,MACjC,CAAC;AAAA,IACL,OACK;AACD,eAAS;AACT,WAAK,YAAY,CAAC,MAAM;AACpB,YAAI,CAAC,EAAE,QAAQ;AACX,mBAAS;AAAA,QACb;AACA,eAAO,EAAE,UAAU,CAAC,EAAE,OAAO;AAAA,MACjC,CAAC;AAAA,IACL;AACA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,YAAY,aAAa,SAAS,OAAO;AACrC,WAAO,KAAK,YAAY,aAAa,MAAM,MAAM;AAAA,EACrD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,YAAY,aAAa,SAAS,MAAM,SAAS,OAAO,UAAU,CAAC,GAAG;AAznB1E;AA0nBQ,UACI,KAAc,MACd,cAAc,MAAM,QAAQ,WAAW;AAC3C,kBAAc,YAAY,QAAQ,WAAW;AAC7C,QAAI,OAAO,WAAW,UAAU;AAC5B,gBAAS,cAAG,aAAH,mBAAc,YAAd,YAAyB;AAAA,IACtC;AACA,QAAI,CAAC,UAAU,CAAC,GAAG,OAAO,MAAM,OAAK,EAAE,QAAQ,aAAa;AAAA,MACxD,SAAU;AAAA,MAAa,QAAS;AAAA,IACpC,CAAC,MAAM,KAAK,GAAG;AACX,aAAO;AAAA,IACX;AAEA,kBAAc,GAAG,eAAe,WAAW;AAE3C,UACI,SAAY,4CAAQ,gBAAR,aAAuB,QAAG,aAAH,mBAAa,WAApC,YAA8C,GAC1D,aAAY,QAAG,sBAAH,4BAAuB,cACnC,WAAY,GAAG,qBAAqB,aAAa,QAAQ,QAAQ,OAAO;AAE5E,QAAI,SAAS,QAAQ;AACjB,SAAG,gBAAgB,MAAM;AAAA,IAC7B;AACA,aAAG,qBAAH,4BAAsB,OAAO,aAAa,WAAW;AACrD,WAAQ,eAAe,CAAC,WAAY,WAAW,SAAS,CAAC;AAAA,EAC7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,gBAAgB,SAAS,OAAO;AAC5B,UACI,KAAU,MACV,UAAU,GAAG;AACjB,OAAG,KAAK,SAAS;AACjB,QAAI,CAAC,GAAG,UAAU;AACd,SAAG,WAAW,CAAC;AAAA,IACnB;AAGA,QAAI,WAAW,CAAC,GAAG,KAAK,aAAa,CAAC,QAAQ;AAC1C,SAAG,kBAAkB;AAAA,QACjB,QAAS;AAAA,UACL,OAAW;AAAA,UACX,UAAW;AAAA,QACf;AAAA,MACJ,CAAC;AAAA,IACL;AAAA,EACJ;AAAA,EACA,kBAAkB,SAAS,SAAS,KAAK,QAAQ;AAC7C,WAAO,QAAQ,OAAK;AAChB,QAAE,QAAQ,UAAU,EAAE,QAAS,MAAM,SAAU,CAAC,IAAI,GAAG,QAAQ,CAAC;AAChE,QAAE,QAAQ,UAAU,EAAE,QAAS,UAAU,QAAS,MAAM,SAAU,CAAC,IAAI,GAAG,QAAQ,CAAC;AAAA,IACvF,CAAC;AAAA,EACL;AAAA,EACA,iBAAiB;AACb,WAAO,KAAK,YAAY,GAAG,SAAS;AAAA,EACxC;AAAA,EACA,qBAAqB,iBAAiB,cAAc,QAAQ,SAAS;AACjE,UACI,KAA6B,MAC7B,EAAE,QAAQ,MAAM,SAAS,IAAI,IAC7B,EAAE,YAAa,UAAU,IAAI,MAC7B,EAAE,cAAc,IAAa,GAAG,aAChC,WAA6B,GAAG,aAAa,OAAO,GAAG;AAC3D,QAAI,QAAQ,OAAO,GAAG,kBAAkB,kBAAkB;AAC1D,QAAI,CAAC,KAAK,aAAa,WAAW;AAE9B,eAAS,CAAC;AACV,yBAAmB,CAAC;AACpB,WAAK,IAAI,GAAG,IAAI,gBAAgB,QAAQ,KAAK;AACzC,cAAM,YAAY,gBAAgB,CAAC;AAGnC,eAAO,UAAU,EAAE,IAAI,UAAU,SAAS;AAC1C,yBAAiB,CAAC,IAAK,UAAU;AAAA,MACrC;AAAA,IACJ;AAEA,QAAI,gBAAgB,aAAa,WAAW,IAAI;AAC5C,qBAAe;AAAA,IACnB;AAGA,QAAI,UAAU;AACV,YAAM,WAAW,eAAe,aAAa,cAAc,SAAS;AACpE,UAAI,SAAS,QAAQ,QAAQ,MAAM,gBAAgB,CAAC,KAAK,SAAS,QAAQ,WAAW,CAAC,MAAM,gBAAgB,CAAC,GAAG;AAC5G,aAAK,SAAS,MAAM,IAAI,GAAG,UAAU,IAAI,gBAAgB,QAAQ,KAAK;AAClE,cAAI,gBAAgB,CAAC,MAAM,SAAS,QAAQ,CAAC,GAAG;AAC5C,qBAAS;AAAA,UACb;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AAGA,QAAI,QAAQ;AACR,aAAO;AAAA,IACX;AAEA,SAAK,IAAI,GAAG,IAAI,gBAAgB,QAAQ,KAAK;AACzC,YACI,YAAY,gBAAgB,CAAC,GAC7B,YAAY,UAAU;AAE1B,UAAI,aAAa,CAAC,KAAK,WAAW;AAC9B,kBAAU,SAAS,OAAK;AACpB,cAAI,EAAE,SAAS,MAAM;AACjB,mBAAO,EAAE,EAAE,IAAI;AAAA,UACnB;AAAA,QACJ,CAAC;AAAA,MACL;AAKA,WAAI,uCAAW,YAAY,WAAW,iCAAS,UAAU,KAAK,QAAQ,EAAE,aAAc,MAAM,GAAG,QAAQ,QAAO,OAAO;AACjH,YAAI,CAAC,kBAAkB;AACnB,4BAAmB,gBAAgB,MAAM;AACzC,6BAAmB;AAAA,QACvB;AACA,wBAAgB,OAAO,KAAK,CAAC;AAAA,MACjC,OACK;AACD,kBAAU,SAAS;AAEnB,kBAAU,KAAK,aAAa,IAAI;AAChC,YAAI,WAAW;AACX,oBAAU,KAAK,cAAc,UAAU;AAAA,QAC3C;AAAA,MACJ;AAAA,IACJ;AAEA,QAAI,gBAAgB,QAAQ;AACxB,UAAI,CAAC,MAAM,QAAQ,QAAQ,GAAG;AAC1B,WAAG,WAAW,CAAC;AAAA,MACnB;AACA,UAAI,CAAC,MAAM,QAAQ,GAAG,eAAe,GAAG;AACpC,WAAG,kBAAkB,CAAC;AAAA,MAC1B;AAEA,YAAM,WAAW,GAAG,cAAc,cAAc,iBAAiB,OAAO;AACxE,aAAO,QAAQ,WAAS;AACpB,YAAI,CAAC,MAAM,WAAW;AAClB,0BAAgB,QAAQ,YAAU;AAE9B,mBAAO,UAAU,KAAK;AAAA,UAC1B,CAAC;AAED,gBAAM,eAAe,IAAI,iBAAiB,UAAU,QAAQ,MAAM;AAClE,0BAAgB,QAAQ,CAAC,QAAQC,OAAM;AAInC,gBAAI,OAAO,KAAK,eAAe,QAAQ,EAAE,GAAG,qBAAqB,GAAG,YAAY;AAC5E,oBACI,QAA4B;AAAA,gBACxB,CAAC,aAAa,GAAsB;AAAA,gBACpC,CAAC,GAAG,cAAc,aAAa,CAAC,GAAI,OAAO;AAAA,cAC/C,GACA,SAA4B,CAAC,GAC7B,EAAE,UAAU,YAAY,IAAI,OAAO,MACnC,iBAA4B,iBAAiBA,EAAC;AAClD,qBAAO,OAAO,KAAK;AACnB,kBAAI,GAAG,OAAO,aAAa;AACvB,uBAAO,aAAa,IAAI;AAAA,kBACpB,OAAW;AAAA,kBACX,UAAW;AAAA,gBACf;AAAA,cACJ;AACA,kBAAI,OAAO,gBAAgB,gBAAgB;AACvC,uBAAO,cAAc;AAAA,kBACjB,OAAW,OAAO;AAAA,kBAClB,UAAW;AAAA,gBACf;AAAA,cACJ;AAEA,kBAAI,SAAS,aAAa,MAAM,GAAG,IAAI;AACnC,wBAAQ,eAAe,UAAU,aAAa;AAAA,cAClD,WAES,EAAE,iBAAiB,WAAW;AACnC,yBAAS,aAAa,IAAI;AAAA,cAC9B;AACA,kBAAI,OAAO,OAAO,EAAE,GAAG;AACnB,sBAAM,YAAY,MAAM,QAAQ,WAAW;AAG3C,oBAAI,UAAU,UAAU,CAAC,QAAQ;AAC7B,4BAAU,kBAAkB;AAAA,oBACxB,QAAS;AAAA,sBACL,OAAW;AAAA,sBACX,UAAW;AAAA,oBACf;AAAA,kBACJ,GAAG,CAAC,KAAK,CAAC;AAAA,gBACd;AAAA,cACJ;AACA,qBAAO,YAAY,OAAO,MAAM;AAAA,YACpC;AAAA,UACJ,CAAC;AAAA,QACL;AAAA,MACJ,CAAC;AAAA,IACL;AACA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYA,YAAY,cAAc,SAAS,OAAO,SAAS,OAAO,UAAU,CAAC,GAAG;AAn1B5E;AAo1BQ,UACI,KAAoB,MACpB,oBAAoB,CAAC,GACrB,UAAoB,GAAG,QACvB;AAAA,MACI;AAAA,MACA;AAAA,IACJ,IAAoB;AACxB,mBAAe,YAAY,QAAQ,YAAY;AAC/C,mBAAe,aAAa,OAAO,OAAK,EAAE,WAAW,EAAE;AACvD,QAAI,CAAC,QAAQ;AAET,iBAAW,SAAS,QAAQ;AACxB,YAAI,CAAC,MAAM,aAAa,MAAM,QAAQ,gBAAgB;AAAA,UAClD,QAAS;AAAA,UAAI,SAAU;AAAA,UAAc;AAAA,QACzC,CAAC,MAAM,OAAO;AACV,iBAAO;AAAA,QACX;AAAA,MACJ;AAAA,IACJ;AACA,UAAM,aAAY,QAAG,sBAAH,4BAAuB,cAAc;AACvD,eAAW,eAAe,cAAc;AACpC,YACI,EAAE,cAAc,IAAI,YAAY,aAChC,EAAE,SAAS,IAAS,YAAY,MAChC,cAAoB,YAAY,SAAS,YAAY,OAAO,KAAK;AAErE,UAAI,EAAE,iBAAiB,aAAa,CAAC,YAAY,UAAU;AACvD,iBAAS,aAAa,IAAI;AAAA,MAC9B;AACA,YAAM,QAAQ,GAAG,mBAAmB,aAAa,OAAO;AACxD,aAAO,QAAQ,WAAS;AACpB,YAAI,CAAC,MAAM,WAAW;AAClB,gBAAM,EAAE,WAAW,IAAI;AAEvB,gBAAM,aAAa;AACnB,4BAAkB,KAAK,GAAG,MAAM,kBAAkB,IAAI,CAAC,WAAW,GAAG,OAAO,EAAE,QAAQ,OAAO,CAAC,CAAC;AAE/F,gBAAM,aAAa;AAAA,QACvB;AAAA,MACJ,CAAC;AAED,UAAI,CAAC,QAAQ;AACT,oBAAY,SAAS,YAAY,cAAc,YAAY,kBAAkB,YAAY,cAAc,YAAY,kBAAkB;AAErI,oBAAY,KAAK,aAAa,IAAI;AAAA,MACtC;AAAA,IACJ;AAEA,SAAK,GAAG,sBAAsB,UAAU,WAAW,KAAK,GAAG,YAAY,yBAAyB,YAAY,CAAC,GAAG,QAAQ;AACpH,SAAG,KAAK,SAAS;AAAA,IACrB;AAGA,QAAI,GAAG,WAAW,WAAW,CAAC,UAAU,CAAC,QAAQ;AAC7C,SAAG,kBAAkB;AAAA,QACjB,QAAS;AAAA,UACL,OAAW;AAAA,UACX,UAAW;AAAA,QACf;AAAA,MACJ,CAAC;AAAA,IACL;AACA,aAAG,qBAAH,4BAAsB,cAAc,WAAW;AAC/C,WAAO;AAAA,EACX;AAAA,EACA,gBAAgB;AACZ,UAAM,KAAK;AACX,YAAQ,eAAe,GAAG,MAAM,GAAG,aAAa;AAChD,YAAQ,eAAe,GAAG,cAAc,GAAG,aAAa;AACxD,QAAI,GAAG,KAAK,UAAU;AAClB,cAAQ,eAAe,GAAG,KAAK,UAAU,GAAG,aAAa;AAAA,IAC7D;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,gBAAgB,aAAa;AACzB,SAAK,cAAc;AACnB,SAAK,KAAK,KAAK,YAAY,aAAa,IAAI;AAC5C,SAAK,gBAAgB;AACrB,WAAO,KAAK;AAAA,EAChB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,cAAc,SAAS,OAAO;AAC1B,UACI,KAAa,MACb,EAAE,OAAO,IAAI,IACb,WAAa,GAAG,sBAAsB,GAAG;AAC7C,OAAG,WAAkB,CAAC;AACtB,OAAG,kBAAkB,CAAC;AACtB,QAAI,YAAY,aAAa,MAAM;AAC/B,aAAO,QAAQ,WAAS;AACpB,YAAI,CAAC,MAAM,WAAW;AAElB,gBAAM,kBAAkB,IAAI,UAAU,GAAG,EAAE,YAAa,MAAM,OAAO,CAAC;AAAA,QAC1E;AAAA,MACJ,CAAC;AAED,UAAI,GAAG,oBAAoB;AACvB,WAAG,qBAAqB,CAAC;AAAA,MAC7B;AAAA,IACJ;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,QAAQ;AAv8BZ;AAw8BQ,UACI,KAAa,MACb,EAAE,OAAO,IAAI,IACb,YAAa,QAAG,aAAH,mBAAa;AAE9B,QAAI,CAAC,GAAG,UAAU,CAAC,UAAU;AACzB;AAAA,IACJ;AACA,eAAW,SAAS,QAAQ;AACxB,UAAI,CAAC,MAAM,WAAW;AAClB,YAAI,MAAM,QAAQ,gBAAgB;AAAA,UAC9B,QAAS;AAAA,UAAI,SAAU;AAAA,UAAU,QAAS;AAAA,UAAO,aAAc;AAAA,QACnE,CAAC,MAAM,OAAO;AACV,iBAAO;AAAA,QACX;AAAA,MACJ;AAAA,IACJ;AACA,OAAG,SAAS,SAAS;AACrB,QAAI,GAAG,oBAAoB;AACvB,SAAG,mBAAmB,SAAS;AAAA,IACnC;AACA,WAAO,QAAQ,WAAS;AACpB,eAAS,QAAQ,WAAS;AACtB,YAAI,MAAM,OAAO,SAAS,KAAK,GAAG;AAE9B,gBAAM,YAAY,KAAK;AAAA,QAC3B;AACA,cAAM,SAAS,MAAM,cAAc,MAAM,cAAc,MAAM,kBAAkB;AAAA,MACnF,CAAC;AACD,YAAM,QAAQ,cAAc;AAC5B,YAAM,QAAQ,MAAM;AACpB,YAAM,QAAQ,aAAa;AAC3B,YAAM,MAAM,MAAM;AAClB,YAAM,SAAS,MAAM;AACrB,YAAM,QAAQ,WAAW;AACzB,YAAM,QAAQ,UAAU,EAAE,QAAS,YAAY,CAAC;AAAA,IACpD,CAAC;AAAA,EACL;AAAA,EACA,sBAAsB,UAAU,WAAW,SAAS,OAAO;AACvD,QAAI,kBAAkB;AACtB,aAAS,IAAI,GAAG,IAAI,SAAS,QAAQ,KAAK;AACtC,YACI,QAAW,SAAS,CAAC,GACrB,WAAW,MAAM,SAAS;AAC9B,UAAI,cAAc,iBAAiB,cAAc,sBAAsB;AAEnE,YAAI,aAAa,UAAa,QAAQ;AAClC,gBAAM,QAAQ,WAAW,CAAC;AAAA,QAC9B,WAES,aAAa,GAAG;AAErB,gBAAM,IAAI,WAAW,GAAG,IAAI;AAAA,QAChC;AAAA,MACJ,OACK;AACD,cAAM,SAAS,IAAI;AAAA,MACvB;AACA,UAAI,cAAc,eAAe;AAC7B,cAAM,kBAAkB;AACxB,YAAI,iBAAiB;AACjB,0BAAgB,cAAc;AAAA,QAClC;AAEA,YAAI,MAAM,SAAS,SAAS,GAAG;AAC3B,gBAAM,cAAc;AAAA,QACxB;AACA,0BAAkB;AAAA,MACtB;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,cAAc,cAAc,YAAY,UAAU,CAAC,GAAG;AA/gC1D;AAmhCQ,UACI,KAAU,MACV,UAAU;AAAA,MACN,CAAC,GAAG,UAAU,eAAe,YAAY;AAAA,MACzC,CAAC,GAAG,oBAAoB,mBAAmB,YAAY;AAAA,MACvD,CAAC,GAAG,iBAAiB,uBAAsB,wCAAS,sBAAT,YAA8B,YAAY;AAAA,IACzF;AACJ,eAAW,UAAU,SAAS;AAC1B,YAAM,CAAC,UAAU,WAAWC,aAAY,IAAI;AAC5C,UAAI,UAAU;AACV,cAAM,QAAQA,gBAAeA,cAAa,SAAS,IAAI,SAAS;AAChE,eAAO,KAAK,KAAK;AACjB,iBAAS,OAAO,OAAO,GAAG,GAAG,UAAU;AACvC,YAAI,GAAC,wCAAU,eAAV,mBAAsB,OAAM;AAC7B,aAAG,sBAAsB,UAAU,SAAS;AAAA,QAChD;AAAA,MACJ;AAAA,IACJ;AAEA,WAAO,QAAQ,CAAC,EAAE,CAAC;AAAA,EACvB;AAAA,EACA,mBAAmB,aAAa,SAAS;AAxiC7C;AAyiCQ,UAAM,UAAU;AAAA,MACZ,CAAC,KAAK,UAAU,aAAa;AAAA,MAC7B,CAAC,KAAK,oBAAoB,iBAAiB;AAAA,MAC3C,CAAC,KAAK,iBAAiB,oBAAoB;AAAA,IAC/C;AACA,eAAW,UAAU,SAAS;AAC1B,YAAM,CAAC,UAAU,SAAS,IAAI;AAC9B,UAAI,UAAU;AAIV,cAAM,QAAQ,SAAS,QAAQ,WAAW;AAC1C,eAAO,KAAK,KAAK;AACjB,YAAI,QAAQ,IAAI;AACZ,mBAAS,OAAO,OAAO,CAAC;AACxB,cAAI,GAAC,wCAAU,eAAV,mBAAsB,OAAM;AAC7B,iBAAK,sBAAsB,UAAU,SAAS;AAAA,UAClD;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AAEA,WAAO,QAAQ,CAAC,EAAE,CAAC;AAAA,EACvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,oBAAoB,OAAO,MAAM,mBAAmB,OAAO;AAEvD,UAAM,aAAa,CAAC;AACpB,QAAI,CAAC,KAAK,QAAQ;AACd,WAAK,gBAAgB,KAAK,CAAC,GAAG,MAAM;AA9kChD;AA+kCgB,YAAI,kBAAkB;AAClB,gBACI,cAAa,OAAE,KAAK,SAAS,uBAAhB,YAAsC,EAAE,oBACrD,cAAa,OAAE,KAAK,SAAS,uBAAhB,YAAsC,EAAE,oBACrD,SAAa,aAAa;AAC9B,cAAI,WAAW,GAAG;AACd,uBAAW,KAAK,CAAC;AACjB,uBAAW,KAAK,CAAC;AAAA,UACrB;AACA,iBAAO;AAAA,QACX,OACK;AACD,iBAAO,EAAE,qBAAqB,EAAE;AAAA,QACpC;AAAA,MACJ,CAAC;AACD,UAAI,MAAM;AACN,aAAK,gBAAgB,QAAQ,WAAS;AAClC,qBAAW,KAAK,GAAG,MAAM,oBAAoB,MAAM,gBAAgB,CAAC;AAAA,QACxE,CAAC;AAAA,MACL;AACA,WAAK,sBAAsB,KAAK,iBAAiB,sBAAsB,IAAI;AAAA,IAC/E;AACA,WAAO,IAAI,IAAI,UAAU;AAAA,EAC7B;AACJ;;;ACjmCA,IAEI,oBAAoB;AAAA,EAChB,IAAkB;AAAA,EAClB,QAAkB;AAAA,EAClB,aAAkB;AAAA,EAClB,QAAkB;AAAA,EAClB,iBAAkB;AAAA,EAClB,aAAkB;AAAA,EAClB,iBAAkB;AACtB;AAVJ,IAWI,cAAc;AAAA,EACV,IAAI,QAAQ,MAAM;AAEd,QAAI,SAAS,aAAa;AACtB,aAAO,KAAK;AAAA,IAChB;AAGA,QAAI,SAAS,eAAe;AACxB,aAAO,OAAO;AAAA,IAClB;AAEA,QAAI,SAAS,WAAW;AACpB,aAAO,KAAK;AAAA,IAChB;AACA,QAAI,SAAS,OAAO;AAChB,aAAO,KAAK;AAAA,IAChB;AAEA,QAAI,kBAAkB,IAAI,GAAG;AACzB,aAAO,KAAK,UAAU,KAAK,IAAI;AAAA,IACnC;AAEA,WAAO,QAAQ,IAAI,QAAQ,MAAM,KAAK,WAAW;AAAA,EACrD;AAAA,EACA,IAAI,QAAQ,MAAM,OAAO;AAErB,QAAI,kBAAkB,IAAI,GAAG;AACzB,WAAK,UAAU,KAAK,IAAI,IAAI;AAAA,IAChC,OAEK;AACD,aAAO,IAAI,IAAI;AAAA,IACnB;AACA,WAAO;AAAA,EACX;AAAA;AAAA,EAEA,gBAAgB,OAAO,OAAO;AAC1B,QAAI,UAAU,eAAe;AACzB,WAAK,UAAU,KAAK,cAAc;AAAA,IACtC,OACK;AACD,WAAK,UAAU,eAAe,QAAQ,OAAO,KAAK;AAAA,IACtD;AAAA,EACJ;AAAA,EACA,YAAYC,QAAO,UAAU,MAAM;AAC/B,QAAIA,WAAU,eAAe;AACzB,WAAK,UAAU,KAAK,cAAc;AAAA,IACtC,OACK;AACD,WAAK,UAAU,eAAe,IAAIA,QAAO,OAAO,GAAG,IAAI;AAAA,IAC3D;AAAA,EACJ;AACJ;AASJ,IAAO,oBAAQ,YAAO;AA/EtB;AA+EyB,6BAAyB,UAAUC,OAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAqB9D,OAAO;AAEH,UAAI,KAAK,UAAU;AACf,eAAO,KAAK,UAAU,KAAK;AAAA,MAC/B;AACA,YACI,KAAe,MACf,YAAgB;AAAA,QACZ,GAAG;AAAA;AAAA,QAEH,WAAY;AAAA,UACR,gBAAiB;AAAA,UACjB,MAAiB;AAAA,YACb,IAAS,GAAG,GAAG,WAAW,aAAa,aAAa;AAAA,YACpD,QAAS,CAAC;AAAA,UACd;AAAA,QACJ;AAAA,MACJ,GACA,cAAc,IAAI,MAAM,IAAI,SAAS;AACzC,gBAAU,cAAc;AAExB,OAAC,GAAG,KAAK,kBAAkB,GAAG,KAAK,gBAAgB,CAAC,IAAI,KAAK,WAAW;AACxE,aAAO;AAAA,IACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAOA,IAAI,WAAW;AAlInB,UAAAC;AAmIQ,aAAO,SAAQA,MAAA,KAAK,cAAL,gBAAAA,IAAgB,cAAc;AAAA,IACjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAOA,IAAI,WAAW;AACX,aAAO,QAAQ,CAAC,KAAK,aAAa,KAAK,OAAO,MAAM;AAAA,IACxD;AAAA;AAAA,IAEA,WAAW,MAAM,UAAU,MAAM,SAAS,OAAO;AAE7C,UAAI,KAAK,UAAU;AACf,mBAAW,UAAU,KAAK,OAAO,MAAM,GAAG;AAEtC,cAAI,SAAS;AACT,wBAAY,QAAQ,SAAS,MAAM;AAAA,UACvC,OAEK;AACD,mBAAO,OAAO,MAAM;AAAA,UACxB;AAAA,QACJ;AAAA,MACJ,WAES,KAAK,UAAU;AACpB,oBAAY,OAAO,KAAK,UAAU,QAAQ,IAAI;AAAA,MAClD;AAAA,IACJ;AAAA;AAAA,IAEA,aAAa,SAAS;AAClB,WAAK,WAAW,MAAM,OAAO;AAAA,IACjC;AAAA;AAAA;AAAA,IAGA,YAAY,cAAc,QAAQ,QAAQ,SAAS;AAC/C,UAAI,EAAC,mCAAS,cAAa;AACvB,uBAAe,YAAY,QAAQ,YAAY;AAC/C,mBAAW,SAAS,cAAc;AAC9B,eAAK,WAAW,OAAO,MAAM,MAAM;AAAA,QACvC;AAAA,MACJ;AACA,aAAO,MAAM,YAAY,cAAc,QAAQ,QAAQ,OAAO;AAAA,IAClE;AAAA;AAAA,IAEA,IAAI,cAAc;AACd,aAAO,KAAK,UAAU;AAAA,IAC1B;AAAA;AAAA,IAEA,IAAI,SAAS;AAtLjB,UAAAA;AAuLQ,cAAOA,MAAA,KAAK,KAAK,kBAAV,OAAAA,MAA2B,CAAC;AAAA,IACvC;AAAA,EACJ,GAzGI,cADqB,IACd,SAAQ,cADM;AAAA;;;ACzEzB,IACI,EAAE,gBAAAC,gBAAe,IAAI;AADzB,IAEI,cAAqB,OAAO,OAAO;AAFvC,IAGI,cAAqB;AAwDzB,IAAO,sBAAQ,YAAU,MAAM,qBAAqB,UAAUC,OAAM;AAAA,EAChE,WAAW,QAAQ;AACf,WAAO;AAAA,EACX;AAAA,EACA,WAAW,aAAa;AACpB,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA6BH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAmBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAOA;AAAA,IACJ;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,OAAO,SAAS,MAAM,KAAK,UAAU,WAAW,mBAAmB;AAG/D,UACI,EAAE,YAAY,IAAW,KAAK,UAAU,GACxC,EAAE,UAAU,UAAAC,UAAS,IAAI,aACzB,QAAyB,aAAa,MAAM,MAAM,WAAW;AACjE,aAAS,OAAO,MAAM,IAAI,GAAG,IAAI,MAAM,QAAQ,EAAE,GAAG;AAChD,aAAO,MAAM,CAAC;AACd,cAAQ,WAAW,KAAK,YAAY,IAAI;AACxC,UAAI,CAAC,WAAW,SAASA,WAAU;AAC/B,cAAM,IAAI,MAAM,SAAS,iCAAiC,YAAY,MAAM,cAAc;AAAA,MAC9F;AAEA,MAAAA,UAAS,IAAI,IAAIA,UAAS,KAAK,IAAI,IAAI,UAAU;AAAA,IACrD;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,OAAO,IAAI,UAAU,MAAM;AACvB,WAAO,KAAK,OAAO,UAAU,MAAM,IAAI;AAAA,EAC3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,OAAO,OAAO,UAAU,MAAM,MAAM;AAChC,UACI,EAAE,YAAY,IAAW,MACzB,EAAE,UAAU,UAAAA,UAAS,IAAI,aACzB,UAAyBA,UAAS,WAAW,KAAK,YAAY,IAAI,IAAI;AAE1E,QAAI,SAAS;AACT,UAAI,MAAM;AACN,eAAO,oBAAoB;AAAA,MAC/B;AACA,aAAO,SAAS,gBAAgB;AAAA,IACpC;AACA,WAAO;AAAA,EACX;AAAA,EACA,OAAO,WAAW,KAAK;AACnB,QAAI,SAAS,IAAI,OAAO,GAAG;AAAA,EAC/B;AAAA,EACA,OAAO,iBAAiB,KAAK,MAAM;AAC/B,UAAM,aAAa,KAAK,MAAM;AAC9B,QAAI,EAAE,YAAY,IAAI;AACtB,kBAAc;AAAA,MACV,UAAc;AAAA,MACd,aAAc;AAAA,MACd,SAAc,WAAW,cAAc,CAAC,UAAU,IAAI;AAAA,MACtD,SAAc;AAAA,MACd,GAAG;AAAA,IACP;AACA,gBAAY,QAAQ;AACpB,gBAAY,WAAW,uBAAO,OAAO,IAAI;AACzC,QAAI,YAAY,WAAW,CAAC,MAAM,QAAQ,YAAY,OAAO,GAAG;AAC5D,kBAAY,UAAU,CAAC,YAAY,OAAO;AAAA,IAC9C;AAEA,IAAAF,gBAAe,KAAK,eAAe;AAAA,MAC/B,MAAM;AACF,eAAO;AAAA,MACX;AAAA,IACJ,CAAC;AAAA,EACL;AAAA,EACA,OAAO,UAAU,KAAK,MAAM;AACxB,UAAM,EAAE,KAAK,IAAI;AACjB,QAAI,SAAS,MAAM,KAAK,KAAK,WAAW;AAExC,IAAAA,gBAAe,IAAI,WAAW,QAAQ;AAAA,MAClC,OAAQ;AAAA,IACZ,CAAC;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,OAAO,OAAO,QAAQ,SAAS;AAC3B,WAAO,KAAK,YAAY,MAAM,QAAQ,OAAO;AAAA,EACjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA8CA,OAAO,YAAY,kBAAkB,QAAQ,SAAS;AAClD,UACI,KAAkB,MAClB,EAAE,YAAY,IAAI,IAClB,EAAE,QAAQ,IAAQ;AACtB,QAAI,cAAc,SACd,SAAS,UAAU,WAAW,OAAO,UAAU,OAAO,GAAG,WAAW;AAExE,QAAI,WAAW,CAAC,aAAa,QAAQ,OAAO,GAAG;AAC3C,oBAAc;AACd,UAAI,OAAO;AACX,UAAI,MAAM,YAAY;AAClB,gBAAQ;AAAA,MACZ,WACS,MAAM,UAAU;AACrB,sBAAc;AAAA,MAClB,WACS,aAAa,SAAS,OAAO,GAAG;AACrC,kBAAc,QAAQ;AACtB,mBAAc,QAAQ;AACtB,gBAAc,QAAQ;AACtB,gBAAc,QAAQ;AACtB,sBAAc,QAAQ;AACtB,oBAAc,QAAQ;AAAA,MAC1B,OACK;AACD,gBAAQ;AAAA,MACZ;AAAA,IACJ;AACA,QAAI,WAAW;AACX,eAAU,OAAO,cAAc,WAAY,MAAM,SAAS,EAAE,MAAM,IAAI,UAAU,MAAM;AAAA,IAC1F;AACA,WAAO;AAEP,QAAI,OAAO,SAAS,UAAU;AAC1B,eAAS,CAAC;AAAA,IACd,WACS,QAAQ;AACb,UAAI,WAAW,MAAM;AACjB,iBAAS,CAAC;AAAA,MACd;AACA,UAAI,CAAC,aAAa,SAAS,MAAM,GAAG;AAEhC,YAAI,SAAS,WAAW,qBAAoB,qDAAmB,kBAAiB,OAAO;AACnF,UAAC,OAAO,YAAY,WAAY,MAAM,OAAO,EAAE,gBAAgB,IAAI,mCAAU;AAC7E,2BAAiB,QAAQ;AAAA,QAC7B;AACA,eAAO;AAAA,MACX;AACA,aAAO,OAAO,OAAO;AAAA,IACzB;AACA,WAAO,QAAQ,GAAG,YAAY,IAAI;AAElC,QAAI,kBAAkB;AAGlB,UAAI,WAAW,CAAC,QAAQ,iBAAiB,gBAAgB,OAAO;AAC5D,YAAI,WAAW,QAAQ;AACnB,mBAAS,aAAa,OAAO,CAAC,GAAG,MAAM;AACvC,iBAAO,OAAO,OAAO;AAAA,QACzB;AACA,yBAAiB,UAAU,MAAM;AACjC,eAAO;AAAA,MACX;AACA,UAAI,SAAS,iBAAiB,WAAW,MAAM,OAAO;AAClD,QAAC,OAAO,YAAY,WAAY,MAAM,OAAO,EAAE,gBAAgB,IAAI,mCAAU;AAC7E,yBAAiB,QAAQ;AAAA,MAC7B;AAAA,IACJ;AACA,QAAI,QAAQ;AACR,UAAI,UAAU;AACV,YAAI,EAAE,YAAY,OAAO;AACrB,cAAI,EAAE,YAAY,SAAS,OAAO,KAAK,eAAe,YAAY,cAAc;AAC5E,kBAAM,IAAI,MAAM,oCAAoC,YAAY,MAAM,cAAc;AAAA,UACxF;AACA,sBAAY,GAAG,YAAY,SAAS;AAAA,QACxC;AACA,YAAI,WAAW;AAEX,mBAAS,UAAU,aAAa,UAAU,MAAM;AAAA,QACpD;AAAA,MACJ;AACA,UAAI,OAAO;AACP,mBAAY,OAAO,UAAU,WAAY,MAAM,KAAK,EAAE,QAAQ,MAAM,QAAQ,IAAI,MAAM,QAAQ,MAAM,QAAQ;AAC5G,YAAI,aAAa,MAAM;AACnB,iBAAO;AAAA,QACX;AACA,iBAAS,YAAY;AAAA,MACzB;AACA,UAAI,CAAC,MAAM;AAEP,YAAI,EAAE,OAAO,OAAO,OAAO,KAAK,eAAe,YAAY,cAAc;AACrE,gBAAM,IAAI,MAAM,+BAA+B,YAAY,MAAM,cAAc;AAAA,QACnF;AACA,eAAO,GAAG,YAAY,IAAI;AAAA,MAC9B;AACA,UAAI,YAAY,CAAC,WAAW;AACxB,iBAAS,KAAK,aAAa,UAAU,MAAM;AAAA,MAC/C;AACA,UAAI,WAAW,QAAQ;AACnB,iBAAS,aAAa,OAAO,CAAC,GAAG,MAAM;AACvC,eAAO,OAAO,OAAO;AAAA,MACzB;AACA,eAAS,IAAI,KAAK,MAAM;AACxB,UAAI,OAAO;AACP,eAAO,WAAW,IAAI;AAAA,MAC1B;AAAA,IACJ;AACA,WAAO,UAAU;AAAA,EACrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,OAAO,YAAY,MAAM,UAAU;AAC/B,QAAI,OAAO,SAAS,UAAU;AAC1B,aAAO;AAAA,IACX;AACA,UACI,EAAE,YAAY,IAAI,MAClB,QAAkB,YAAY;AAClC,QAAI,SAAS,YAAY,SAAS,YAAY,WAAW,KAAK,YAAY,IAAI,IAAI,GAC9E;AACJ,SAAK,IAAI,GAAG,CAAC,UAAU,SAAS,IAAI,MAAM,QAAQ,EAAE,GAAG;AAEnD,eAAS,MAAM,CAAC,EAAE;AAAA,QAAY;AAAA;AAAA,QAAsB;AAAA,MAAI;AAAA,IAC5D;AACA,QAAI,CAAC,UAAU,CAAC,UAAU;AACtB,YAAM,IAAI,MAAM,sBAAsB,mBAAmB,YAAY,MAAM,cAAc;AAAA,IAC7F;AACA,WAAO;AAAA,EACX;AACJ;;;AC7YA,IAAM,EAAE,0BAAAG,0BAAyB,IAAI;AAQrC,IAAqB,YAArB,cAAuCC,MAAK,MAAM,mBAAW,EAAE;AAAA,EAC3D,WAAW,QAAQ;AACf,WAAO;AAAA,EACX;AAAA,EACA,WAAW,OAAO;AACd,WAAO;AAAA,EACX;AAAA,EACA,WAAW,cAAc;AACrB,WAAO;AAAA,MACH,aAAc;AAAA,IAClB;AAAA,EACJ;AAAA,EACA,WAAW,sBAAsB;AAC7B,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAmDH,SAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAQV,cAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAMf,YAAa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAWb,aAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAMd,UAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAMX,UAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAMX,WAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAMZ,SAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAMV,UAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAUX,UAAW;AAAA,IACf;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAgBA,UAAU,QAAQ;AACd,UAAM,KAAK;AACX,QAAI,QAAQ;AACR,SAAG,OAAO,OAAO;AACjB,aAAO,OAAO,IAAI,MAAM;AAAA,IAC5B;AACA,QAAI,GAAG,SAAS;AAEZ,SAAG,eAAe,CAAC,OAAO,UAAU,GAAG,QAAQ,+BAAQ,GAAG,OAAO,+BAAQ,GAAG,KAAK;AAAA,IACrF;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAsDA,eAAe,QAAQ,OAAO;AAC1B,UAAM,EAAE,MAAM,WAAW,IAAI;AAE7B,QACI,CAAC,SACD,QAAQ,UACR,OAAO,MAAM,UAAU,KAAK,aAAQ;AAvOhD;AAuOmD,oBAAAD,0BAAyB,QAAQ,WAAW,IAAI,MAAhD,mBAAmD,gBAAe;AAAA,KAAK,GAChH;AACE;AAAA,IACJ;AACA,YAAQ,eAAe,QAAQ,MAAM;AAAA,MACjC,cAAe;AAAA;AAAA,MACf,YAAe;AAAA;AAAA,MAEf,KAAM,KAAK,iBACL,WAAW;AACT,eAAO,KAAK,WAAW,MAAM,UAAU;AAAA,MAC3C,IACE,WAAW;AAGT,YAAI,KAAK,YAAY,QAAQ,KAAK,KAAK,cAAc;AACjD,iBAAO,KAAK,KAAK,aAAa,IAAI;AAAA,QACtC;AACA,eAAO,cAAc,KAAK,OAAO,KAAK,KAAK,UAAU,IAAI,KAAK,KAAK,IAAI;AAAA,MAC3E;AAAA;AAAA,MAEJ,IAAI,OAAO;AAGP,cAAME,SAAQ,KAAK,MAAM,OAAO,IAAI,IAAI;AAExC,YAAI,EAAEA,UAASA,OAAM,WAAW;AAC5B,eAAK,IAAI,MAAM,KAAK;AAAA,QACxB;AAAA,MACJ;AAAA,IACJ,CAAC;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,QAAQ,OAAO,QAAQ;AACnB,WAAO,aAAa,QAAQ,OAAO,MAAM;AAAA,EAC7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,OAAO;AACT,WAAQ,SAAS,OAAQ,KAAK,WAAW,KAAK,WAAW,KAAK;AAAA,EAClE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,WAAW,OAAO;AACd,WAAO,OAAO,KAAK;AAAA,EACvB;AACJ;AACA,UAAU,SAAS;;;AChOnB,IAAqB,iBAArB,cAA4C,UAAU;AAAA,EAClD,WAAW,QAAQ;AACf,WAAO;AAAA,EACX;AAAA,EACA,WAAW,OAAO;AACd,WAAO;AAAA,EACX;AAAA,EACA,QAAQ,GAAG,GAAG;AACV,WAAO,MAAM;AAAA,EACjB;AACJ;AACA,eAAe,UAAU;AACzB,eAAe,SAAS;;;ACtDxB,IAAqB,mBAArB,cAA8C,UAAU;AAAA,EACpD,WAAW,QAAQ;AACf,WAAO;AAAA,EACX;AAAA,EACA,WAAW,OAAO;AACd,WAAO;AAAA,EACX;AAAA,EACA,WAAW,QAAQ;AACf,WAAO;AAAA,EACX;AAAA,EACA,WAAW,sBAAsB;AAC7B,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAMH,WAAY;AAAA,IAChB;AAAA,EACJ;AAAA,EACA,QAAQ,OAAO,QAAQ;AACnB,QAAI,SAAS,QAAQ,UAAU,MAAM;AACjC,aAAO;AAAA,IACX;AACA,WAAO,MAAM,QAAQ,OAAO,MAAM;AAAA,EACtC;AAAA,EACA,QAAQ,OAAO;AAnDnB;AAoDQ,QAAI,SAAS,MAAM;AACf,aAAO,KAAK,WAAW,QAAQ,KAAK;AAAA,IACxC;AAEA,UAAI,WAAM,gBAAN,oCAA0B,SAAS;AACnC,aAAO;AAAA,IACX;AACA,WAAO,QAAQ,KAAK;AAAA,EACxB;AACJ;AACA,iBAAiB,UAAU;AAC3B,iBAAiB,SAAS;;;AClC1B,IAAqB,gBAArB,cAA2C,UAAU;AAAA,EACjD,WAAW,QAAQ;AACf,WAAO;AAAA,EACX;AAAA,EACA,WAAW,OAAO;AACd,WAAO;AAAA,EACX;AAAA,EACA,WAAW,sBAAsB;AAC7B,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAQH,QAAS;AAAA,IACb;AAAA,EACJ;AAAA,EACA,QAAQ,OAAO;AACX,QAAI,SAAS,MAAM;AACf,UAAI,CAAC,KAAK,UAAU;AAChB,gBAAQ,KAAK;AAAA,MACjB;AAAA,IACJ,WACS,UAAU,OAAO;AACtB,cAAQ,oBAAI,KAAK;AAAA,IACrB,WACS,EAAE,iBAAiB,OAAO;AAE/B,cAAQ,WAAW,MAAM,OAAO,KAAK,UAAU,WAAW,kBAAkB;AAG5E,UAAI,CAAC,SAAS,MAAM,KAAK,GAAG;AACxB,gBAAQ;AAAA,MACZ;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA,EACA,UAAU,OAAO;AACb,QAAI,iBAAiB,MAAM;AAEvB,cAAQ,WAAW,OAAO,OAAO,KAAK,UAAU,WAAW,aAAa;AAAA,IAC5E;AACA,WAAO;AAAA,EACX;AAAA,EACA,WAAW,OAAO;AACd,WAAO,WAAW,OAAO,OAAO,KAAK,UAAU,WAAW,aAAa;AAAA,EAC3E;AACJ;AACA,cAAc,UAAU;AACxB,cAAc,SAAS;;;ACxDvB,IAAqB,kBAArB,cAA6C,UAAU;AAAA,EACnD,WAAW,QAAQ;AACf,WAAO;AAAA,EACX;AAAA,EACA,WAAW,OAAO;AACd,WAAO;AAAA,EACX;AAAA,EACA,WAAW,sBAAsB;AAC7B,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAMH,WAAY;AAAA,IAChB;AAAA,EACJ;AAAA,EACA,QAAQ,OAAO;AACX,WAAQ,SAAS,OAAS,KAAK,WAAW,QAAQ,KAAK,YAAa,OAAO,KAAK;AAAA,EACpF;AACJ;AACA,gBAAgB,UAAU;AAC1B,gBAAgB,SAAS;;;ACxBzB,IAAqB,wBAArB,cAAmD,gBAAgB;AAAA,EAC/D,WAAW,QAAQ;AACf,WAAO;AAAA,EACX;AAAA,EACA,WAAW,OAAO;AACd,WAAO;AAAA,EACX;AAAA,EACA,QAAQ,OAAO,QAAQ;AACnB,WAAO,WAAW,aAAa,OAAO,MAAM,MAAM;AAAA,EACtD;AACJ;AACA,sBAAsB,UAAU;AAChC,sBAAsB,SAAS;;;ACR/B,IAAqB,mBAArB,cAA8C,UAAU;AAAA,EACpD,WAAW,QAAQ;AACf,WAAO;AAAA,EACX;AAAA,EACA,WAAW,OAAO;AACd,WAAO;AAAA,EACX;AAAA,EACA,WAAW,QAAQ;AACf,WAAO;AAAA,EACX;AAAA,EACA,WAAW,sBAAsB;AAC7B,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAMH,WAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAMZ,UAAW;AAAA,IACf;AAAA,EACJ;AAAA,EACA,QAAQ,OAAO;AACX,WAAQ,SAAS,OAAS,KAAK,WAAW,QAAQ,KAAK,YAAa,KAAK,KAAK,QAAQ,EAAE,OAAO,KAAK,CAAC;AAAA,EACzG;AACJ;AACA,iBAAiB,UAAU;AAC3B,iBAAiB,SAAS;;;AClC1B,IAAqB,iBAArB,cAA4C,UAAU;AAAA,EAClD,WAAW,QAAQ;AACf,WAAO;AAAA,EACX;AAAA,EACA,WAAW,OAAO;AACd,WAAO;AAAA,EACX;AAAA,EACA,WAAW,sBAAsB;AAC7B,WAAO;AAAA,MACH,gBAAiB;AAAA,IACrB;AAAA,EACJ;AAAA,EACA,QAAQ,OAAO,QAAQ;AAEnB,WAAQ,SAAS,UAAY,kBAAkB,MAAM,eAAgB,OAAO,MAAM,MAAM;AAAA,EAC5F;AACJ;AACA,eAAe,UAAU;AACzB,eAAe,SAAS;;;AChBxB,IAAqB,kBAArB,cAA6C,UAAU;AAAA,EACnD,WAAW,QAAQ;AACf,WAAO;AAAA,EACX;AAAA,EACA,WAAW,OAAO;AACd,WAAO;AAAA,EACX;AAAA,EACA,WAAW,QAAQ;AACf,WAAO;AAAA,EACX;AAAA,EACA,WAAW,sBAAsB;AAC7B,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAMH,WAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAOZ,WAAY;AAAA,IAChB;AAAA,EACJ;AAAA,EACA,QAAQ,OAAO,QAAQ;AAGnB,WAAQ,MAAM,OAAO,KAAK,CAAC,KAAK,MAAM,OAAO,MAAM,CAAC,KAAM,MAAM,QAAQ,OAAO,MAAM;AAAA,EACzF;AAAA,EACA,QAAQ,OAAO;AACX,QAAI,SAAS,MAAM;AACf,aAAO,KAAK,WAAW,QAAQ,KAAK;AAAA,IACxC;AACA,YAAQ,OAAO,KAAK;AAEpB,QAAI,MAAM,KAAK,GAAG;AACd;AAAA,IACJ;AACA,QAAI,QAAQ,KAAK;AACjB,QAAI,OAAO;AACP,cAAQ,MAAM;AACd,cAAQ,KAAK,MAAM,QAAQ,KAAK,IAAI;AAAA,IACxC,WACS,UAAU,GAAG;AAClB,cAAQ,KAAK,MAAM,KAAK;AAAA,IAC5B;AACA,WAAO;AAAA,EACX;AACJ;AACA,gBAAgB,UAAU;AAC1B,gBAAgB,SAAS;;;AClDzB,IAAqB,kBAArB,cAA6C,UAAU;AAAA,EACnD,WAAW,QAAQ;AACf,WAAO;AAAA,EACX;AAAA,EACA,WAAW,OAAO;AACd,WAAO;AAAA,EACX;AAAA,EACA,WAAW,sBAAsB;AAC7B,WAAO;AAAA,MACH,gBAAiB;AAAA,IACrB;AAAA,EACJ;AACJ;AACA,gBAAgB,UAAU;AAC1B,gBAAgB,SAAS;;;ACoBzB,IAAqB,iBAArB,cAA4C,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAyClD,KAAK,MAAM,QAAQ;AAvGvB;AAwGQ,UACI,KAAY,MACZ,YAAY,GAAG,GAAG,aAClB,SAAY,EAAE,WAAY,KAAK;AAEnC,QAAI,GAAG,YAAY;AACf,aAAO,aAAa,GAAG;AAAA,IAC3B;AAGA,iBAAO,OAAO,aAAa,WAAW,SAAS,SAA/C,gCAAsD;AACtD,QAAI,CAAC,OAAO,cAAc,CAAC,GAAG,YAAY;AACtC,YAAM,IAAI,MAAM,UAAU,GAAG,2DAA2D;AAAA,IAC5F;AAEA,UAAM,QAAQ,OAAO,KAAK,SAAS,IAAI,KAAK,OAAO,cAAc,GAAG,YAAY,MAAM;AACtF,QAAI,GAAG,gBAAgB;AACnB,mBAAa,QAAQ,MAAM,GAAG,YAAY,KAAK;AAAA,IACnD,OACK;AACD,WAAK,GAAG,UAAU,IAAI;AAAA,IAC1B;AAEA,UAAM,uBAAuB;AAE7B,UAAM,SAAS,CAAC,MAAM,SAAS,CAAC,MAAM,MAAM,CAAAC,YAAUA,QAAO,cAAc;AAE3E,UAAM,gBAAgB,GAAG,SAAS,KAAK;AAGvC,UAAM,IAAI;AAAA,MACN,QAAS,CAAC,EAAE,OAAO,MAAM;AACrB,cAAM,QAAQ,GAAG,SAAS,KAAK;AAC/B,YAAI,CAAC,MAAM,0BAA0B;AACjC,gBAAM,4BAA4B,MAAM;AACxC,gBAAM,0BAA0B,GAAG,aAC/B,WAAW,YAAY,WAAW,YAAY,WAAW;AAE7D,iBAAO,IAAI,GAAG,MAAM,KAAK;AACzB,gBAAM,0BAA0B;AAAA,QACpC;AAEA,cAAM,gBAAgB;AAAA,MAC1B;AAAA,IACJ,CAAC;AAAA,EACL;AAAA;AAAA,EAEA,IAAI,OAAO,MAAM,QAAQ;AAvJ7B;AAwJQ,UACI,KAAY,MACZ,YAAY,GAAG,GAAG,aAClB,EAAE,CAAC,SAAS,GAAI,MAAM,IAAI,OAAO;AAGrC,QAAI,CAAC,OAAO;AAGR,aAAO,KAAK,eAAe,IAAI,IAAI,KAAK;AACxC,aAAO;AAAA,IACX;AAEA,QAAI,MAAM,0BAA0B;AAChC;AAAA,IACJ;AACA,UAAM,2BAA2B;AAGjC,aAAQ,kBAAO,UAAU,aAAa,WAAW,SAAS,aAAlD,gCAA6D,OAAO,YAApE,YAA+E;AAEvF,QAAI,CAAC,MAAM,yBAAyB;AAChC,YAAM,OAAO;AAAA,IACjB;AACA,UAAM,2BAA2B;AAEjC,UAAM,SAAS,CAAC,MAAM,SAAS,CAAC,MAAM,MAAM,CAAAA,YAAUA,QAAO,cAAc;AAAA,EAC/E;AAAA,EACA,UAAU,OAAO,QAAQ;AACrB,WAAO,OAAO,KAAK,GAAG,KAAK,WAAW,EAAE;AAAA,EAC5C;AAAA;AAAA,EAEA,SAAS,OAAO;AACZ,WAAO,MAAM,WAAW,IAAI,OAAK;AAC7B,YAAM,OAAO,EAAE;AACf,UAAI,CAAC,MAAM,QAAQ;AACf,eAAO,KAAK;AAAA,MAChB;AACA,aAAO;AAAA,IACX,CAAC;AAAA,EACL;AAAA,EACA,QAAQ,GAAG,GAAG;AACV,QAAI,uBAAG,SAAS;AACZ,UAAI,EAAE;AAAA,IACV;AACA,QAAI,uBAAG,SAAS;AACZ,UAAI,EAAE;AAAA,IACV;AACA,WAAO,aAAa,cAAc,GAAG,CAAC;AAAA,EAC1C;AAAA;AAAA,EAEA,YAAY,QAAQ;AAChB,UAAM,QAAQ,OAAO,KAAK,GAAG,KAAK,WAAW;AAC7C,WAAO,QAAQ,aAAa,MAAM,MAAM,aAAa,IAAI;AAAA,EAC7D;AACJ;AAhJI,cADiB,gBACV,SAAQ;AACf,cAFiB,gBAEV,QAAO;AAgJlB,eAAe,UAAU;AACzB,eAAe,SAAS;;;AC5JxB,IACI,EAAE,gBAAAC,gBAAe,IAAI;AADzB,IAEI,EAAE,QAAAC,QAAO,IAAY;AAFzB,IAGI,aAAqB;AAHzB,IAII,gBAAqB;AAAA,EACjB,UAAW;AAAA,EACX,MAAW;AAAA,EACX,MAAW;AACf;AARJ,IASI,qBAAqB;AAAA,EACjB;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACJ;AAfJ,IAgBI,iBAAiB;AAAA,EACb,SAAU;AAAA,EACV,QAAU;AAAA,EACV,MAAU;AAAA,EACV,QAAU;AACd;AArBJ,IAsBI,cAAc;AAAA,EACV,UAAa;AAAA,EACb,YAAa;AAAA,EACb,IAAa;AACjB;AA+WJ,IAAqB,SAArB,cAAmCC,MAAK,MAAM,kBAAU,kBAAU,iBAAS,EAAE;AAAA,EACzE,WAAW,QAAQ;AACf,WAAO;AAAA,EACX;AAAA,EACA,WAAW,aAAa;AACpB,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAoCH;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,WAAW,SAAS;AAChB,WAAO;AAAA;AAAA,MAEH;AAAA,QACI,MAAW;AAAA,QACX,MAAW;AAAA,QACX,SAAW;AAAA,QACX,UAAW;AAAA,MACf;AAAA;AAAA,MAEA;AAAA,QACI,MAAW;AAAA,QACX,MAAW;AAAA,QACX,SAAW;AAAA,QACX,UAAW;AAAA,MACf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAYA;AAAA,QACI,MAAO;AAAA,QACP,MAAO;AAAA,MACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAOA;AAAA,QACI,MAAW;AAAA,QACX,UAAW;AAAA,MACf;AAAA,IACJ;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAyFA,WAAW,QAAQ,SAAS;AACxB,SAAK,mBAAmB;AACxB,SAAK,WAAW;AAAA,EACpB;AAAA,EACA,WAAW,UAAU;AACjB,WAAO,KAAK;AAAA,EAChB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAgBA,WAAW,cAAc,eAAe;AACpC,SAAK,iBAAiB;AAAA,EAC1B;AAAA,EACA,WAAW,gBAAgB;AACvB,QAAI,CAAC,KAAK,gBAAgB;AACtB,YAAM,YAAY,KAAK,SAAS;AAChC,WAAK,kBAAiB,uCAAW,eAAc;AAAA,IACnD;AACA,WAAO,KAAK;AAAA,EAChB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,IAAI,YAAY;AACZ,UAAM,UAAU,CAAC;AACjB,QAAI,OAAO,MACP,QAAQ,KAAK;AACjB,SAAK,OAAO,MAAM,QAAQ,CAAC,KAAK,QAAQ,OAAO,KAAK,QAAQ;AACxD,cAAQ,OAAO,IAAI,KAAK,cAAc;AAAA,IAC1C;AACA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAsBA,UAAU,OAAO,CAAC,GAAG,QAAQ,MAAM,OAAO,MAAM,aAAa,OAAO,cAAc,OAAO,UAAU,OAAO;AAlrB9G;AAmrBQ,UACI,KAAS,MACT,UAAS,iBAAY,QAAQ,KAAK,MAAzB,YAA8B,CAAC,GACxC,EAAE,aAAa,SAAS,IAAI;AAEhC,QAAI,UAAU;AACd,YAAQ,OAAO,CAAC;AAChB,OAAG,OAAO;AAAA,MACN,UAAW,CAAC;AAAA,MACZ,GAAG,YAAY;AAAA,MACf,GAAG;AAAA,IACP;AAEA,QAAI,YAAY,cAAc;AAE1B,iBAAW,OAAO,GAAG,wBAAwB,GAAG;AAC5C,YAAI,CAAC,SAAS;AACV,oBAAU,CAAC;AACX,cAAI,CAAC,GAAG,cAAc,CAAC,GAAG,WAAW,SAAS;AAE1C,mBAAO,EAAE,GAAG,KAAK;AAAA,UACrB;AAAA,QACJ;AAEA,YAAI,OAAO,MAAM;AAEb,cAAI,KAAK,GAAG,MAAM,QAAW;AAEzB,oBAAQ,GAAG,IAAI,KAAK,GAAG;AAAA,UAC3B;AAEA,iBAAO,KAAK,GAAG;AAAA,QACnB;AAAA,MACJ;AAAA,IACJ;AACA,UAAM,UAAU,OAAO;AAEvB,QAAI,CAAC,YAAY;AACb,kBAAY,iBAAiB,MAAM,OAAO;AAAA,IAC9C;AAEA,QAAI,CAACD,QAAO,aAAa,kBAAkB,GAAG;AAG1C,UAAI,oBAAoB,GAAG,KAAK;AAChC,UAAI,CAAC,mBAAmB;AAEpB,YAAI,YAAY,kBAAkB;AAC9B,8BAAoB,YAAY;AAAA,QACpC,WACS,OAAO;AACZ,8BAAoB,MAAM;AAAA,QAC9B;AAAA,MACJ;AAEA,UAAI,qBAAqB,sBAAsB,SAAS,GAAG,YAAY;AACnE,oBAAY,SAAS;AAAA,UACjB,MAAa;AAAA,UACb,YAAa;AAAA,UACb,UAAa;AAAA,QACjB,CAAC;AAAA,MACL;AAEA,kBAAY,WAAW,SAAS,GAAG;AACnC,kBAAY,mBAAmB;AAAA,IACnC;AAEA,OAAG,cAAc,OAAM;AAEvB,OAAG,SAAS,CAAC;AACb,OAAG,iBAAiB,CAAC;AAErB,QAAI,CAAC,GAAG,cAAc;AAClB,SAAG,eAAe;AAAA,IACtB;AACA,OAAG,OAAO,YAAY,YAAY,MAAM,OAAO,OAAO,IAAI,WAAW;AAErE,cAAG,KAAK,mBAAR,mBAAwB,SAAQ,GAAG,gBAAgB;AAEnD,QAAI,GAAG,MAAM,MAAM;AAEf,SAAG,QAAQ,MAAM,GAAG,WAAW,KAAK,CAAC;AAAA,IACzC;AACA,QAAI,GAAG,KAAK,YAAY,aAAa,GAAG;AACpC,SAAG,gBAAgB,MAAM;AAAA,IAC7B;AACA,OAAG,aAAa;AAAA,EACpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAaA,IAAI,WAAW,YAAY;AACvB,UAAM,KAAK;AAEX,QAAI,QAAQ,GAAG,KAAK,UAAU,MAAM,YAAY;AAG5C,SAAG,KAAK,aAAa;AAErB,SAAG,OAAO,QAAQ,OAAK;AACnB,UAAE,mBAAmB,IAAI,UAAU;AAAA,MACvC,CAAC;AAAA,IACL;AAAA,EACJ;AAAA,EACA,IAAI,aAAa;AACb,WAAO,QAAQ,KAAK,KAAK,UAAU;AAAA,EACvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,OAAO,OAAO;AACV,QAAI,iBAAiB,KAAK,aAAa;AACnC,eAAS,SAAS,KAAK,MAAM,OAAO,MAAM,IAAI,GAAG,EAAE,OAAO,IAAI,QAAQ,IAAI,QAAQ,KAAK;AACnF,cACIE,SAAW,OAAO,CAAC,GACnB,EAAE,KAAK,IAAIA;AACf,YAAI,SAAS,QAAQ,CAACA,OAAM,QAAQ,KAAK,IAAI,GAAG,MAAM,IAAI,CAAC,GAAG;AAC1D,iBAAO;AAAA,QACX;AAAA,MACJ;AACA,aAAO;AAAA,IACX;AACA,WAAO;AAAA,EACX;AAAA,EACA,IAAI,WAAW;AACX,WAAO,IAAI,KAAK,YAAY,OAAO,eAAe;AAAA,MAC9C,IAAK;AAAA,IACT,GAAG,KAAK,IAAI,GAAG,KAAK,OAAO,CAAC,GAAG,MAAM,IAAI;AAAA,EAC7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,OAAO,YAAY,MAAM,iBAAiB,OAAO,OAAO,QAAQ,aAAa;AACzE,UACI,EAAE,UAAU,cAAc,IAAI,MAC9B,EAAE,aAAa,EAAE,SAAU,MAAM,EAAE,IAAI,SAAS,CAAE,GAIlD,YAAa,eAAe,WAAW,UAAW,OAAO,aAAa,MAAM,IAAI;AACpF,QAAI;AACJ,qBAAiB,kBAAkB,WAAW,uBAAuB;AACrE,QAAI,CAAC,gBAAgB;AACjB,WAAK,aAAa,eAAe;AAC7B,YAAI,UAAU,SAAS,MAAM,YAAY;AACrC,cAAIC,gBAAe,cAAc,SAAS;AAE1C,cAAI,MAAM,QAAQA,aAAY,GAAG;AAC7B,YAAAA,gBAAeA,cAAa,MAAM;AAAA,UACtC;AACA,oBAAU,SAAS,IAAIA;AAAA,QAC3B;AAAA,MACJ;AAAA,IACJ;AACA,QAAI,CAAC,WAAW,yBAAyB,CAAC,aAAa;AAEnD,WAAK,aAAa,UAAU;AACxB,cACID,SAAuB,SAAS,SAAS,GACzC,EAAE,MAAM,WAAW,IAAIA,QAIvB,YAAuB,eAAe,MACtC,UAAuBA,OAAM,gBAC7B,eAAuB,cAAc,UAC/B,aAAa,WAAW,MAAM,UAAU,IACxC,cAAc,OACpB,kBAAwB,QAAQ,SAAU,CAAC,aAAa,CAAC,eACzD,UAAuB,CAAC,WAAW,yBAAyBA,OAAM;AAEtE,YAAI,mBAAmB,SAAS;AAE5B,cAAI,CAAC,kBAAkB,mBAAmB,cAAc;AACpD,kBACI,QAAY,kBACN,UAAU,IAAI,IACd,UACI,aAAa,QAAQ,WAAW,UAAU,IAC1C,UAAU,UAAU,GAC9B,YAAY,UAAUA,OAAM,QAAQ,OAAO,MAAM,MAAM,IAAI;AAC/D,gBAAI,SAAS;AACT,2BAAa,QAAQ,WAAW,YAAY,SAAS;AAAA,YACzD,OACK;AACD,wBAAU,UAAU,IAAI;AAAA,YAC5B;AAEA,gBAAI,WAAW;AACX,qBAAO,UAAU,IAAI;AAAA,YACzB;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AAEA,SAAK,MAAM,OAAO,SAAS,UAAU,KAAK,cAAc,QAAQ,SAAS;AACzE,WAAO;AAAA,EACX;AAAA,EACA,OAAO,WAAW,MAAM;AACpB,UAAM,WAAW,IAAI;AACrB,QAAI,CAAC,KAAK,QAAQ;AAEd,WAAK,YAAY,MAAM,IAAI;AAAA,IAC/B;AAAA,EACJ;AAAA,EACA,OAAO,YAAY,KAAK,MAAM;AAn5BlC;AAo5BQ,UACI,cAAcF,QAAO,KAAK,QAAQ,KAAK,IAAI,QAC3C,OAAc,KAAK,MAAM,QACzB,aAAc,KAAK,SAAS;AAAA,MACxB,OAAO,kCAAM,KAAK,YAAX,YAAsB,CAAC;AAAA;AAAA,MAE9B,aAAc;AAAA;AAAA,MAEd,UAAW,OAAO,EAAE,GAAG,KAAK,SAAS,IAAI,CAAC;AAAA;AAAA,MAC1C,SAAW,OAAO,QAAO,kCAAM,YAAN,YAAkB,IAAI;AAAA;AAAA,MAC/C,UAAW,OAAO,QAAO,kCAAM,aAAN,YAAkB,IAAI;AAAA;AAAA,MAC/C,KAAW,OAAO,QAAO,kCAAM,QAAN,YAAkB,IAAI;AAAA;AAAA,MAC/C,SAAW,OAAO,QAAO,kCAAM,YAAN,YAAkB,IAAI;AAAA;AAAA,IACnD;AAMJ,QAAIA,QAAO,KAAK,UAAU,GAAG;AACzB,aAAO,OAAO,WAAW,UAAU,IAAI,QAAQ;AAAA,IACnD;AAIA,QAAIA,QAAO,KAAK,SAAS,GAAG;AACxB,UAAI,SAAS;AAAA,QACT,MAAa;AAAA,QACb,YAAa,IAAI;AAAA,QACjB,UAAa;AAAA,MACjB,CAAC;AACD,iBAAW,QAAQ,IAAI,OAAO,IAAI;AAAA,IACtC;AAEA,QAAI,2CAAa,QAAQ;AACrB,kBAAY,IAAI,IAAI,UAAU,GAAG;AAAA,IACrC;AAEA,eAAW,WAAW,WAAW,KAAK,OAAO,CAAAE,WAASA,OAAM,IAAI;AAChE,QAAI,gBAAgB;AAAA,EACxB;AAAA,EACA,WAAW,gBAAgB;AACvB,WAAO,KAAK,MAAM,OAAO;AAAA,EAC7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,WAAW,YAAY;AACnB,WAAO,KAAK,MAAM,OAAO;AAAA,EAC7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,IAAI,YAAY;AACZ,WAAO,KAAK,MAAM,OAAO;AAAA,EAC7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,WAAW,WAAW;AAClB,WAAO,KAAK,MAAM,OAAO;AAAA,EAC7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,IAAI,WAAW;AACX,WAAO,KAAK,MAAM,OAAO;AAAA,EAC7B;AAAA,EACA,WAAW,qBAAqB;AAC5B,WAAO,KAAK,MAAM,OAAO;AAAA,EAC7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,OAAO,iBAAiB,MAAM,MAAM,MAAM;AACtC,UACI,KAAmB,MACnB,aAAmB,GAAG,MAAM,QAK5B,mBAAmB,MAAM,YAAY;AAGzC,QAAI,QAAQ,GAAG,oBAAoB,CAAC,WAAW,aAAa;AACxD,UAAI,cAAc,UAAU;AAC5B,WAAK,gBAAgB,MAAM;AAGvB,YAAI,CAAC,WAAW,gBAAgB,EAAE,YAAY,KAAK,iBAAiB,GAAG,eAAe;AAClF,iBAAO,aAAa,OAAO,KAAK,YAAY,CAAC;AAE7C,qBAAW;AAAA,YACP,MAAa;AAAA,YACb,YAAa;AAAA,YACb,UAAa;AAAA,UACjB;AACA,cAAI,eAAe,IAAI,GAAG;AACtB,qBAAS,OAAO;AAAA,UACpB;AACA,aAAG,SAAS,QAAQ;AAAA,QACxB;AAAA,MACJ;AACA,iBAAW,cAAc;AAAA,IAC7B;AACA,OAAG,gBAAgB;AAAA,EACvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,OAAO,SAAS,UAAU;AACtB,QAAI,YAAY,MAAM;AAClB;AAAA,IACJ;AACA,QAAI,OAAO,aAAa,UAAU;AAC9B,iBAAW;AAAA,QACP,MAAO;AAAA,MACX;AAAA,IACJ;AACA,UACI,KAAoB,KAAK,UAAU,GACnC,aAAoB,GAAG,MAAM,QAC7B,EAAE,SAAS,IAAS,YACpB,oBAAoB,WAAW,SAC/B,EAAE,KAAK,IAAa,UACpB,WAAoB,WAAW,IAAI,IAAI,GACvC,aAAoB,SAAS,eAAe,SAAS,aAAa;AACtE,QAAIA,QAAO;AACX,QAAI,CAAC,YAAa,SAAS,QAAQ,SAAS,SAAS,SAAS,MAAO;AACjE,MAAAA,SAAQ,UAAU,OAAO,QAAQ;AACjC,MAAAA,OAAM,YAAY,WAAW,SAAS,YAAY;AAClD,MAAAA,OAAM,UAAU,WAAW,SAAS,UAAW,SAAS,IAAI,IAAI,WAAW,KAAK;AAAA,IACpF,OACK;AACD,MAAAA,SAAQ,OAAO,OAAO,QAAQ;AAC9B,WAAK,OAAO,UAAU;AAClB,YAAI,QAAQ,QAAQ;AAChB,UAAAA,OAAM,GAAG,IAAI,SAAS,GAAG;AAAA,QAC7B;AAAA,MACJ;AAAA,IACJ;AACA,IAAAA,OAAM,QAAQ;AACd,eAAW,KAAKA,OAAM,OAAO,IAAIA;AACjC,eAAW,IAAI,IAAI,IAAIA;AACvB,QAAI,CAAC,WAAW,QAAQ,UAAU,GAAG;AACjC,iBAAW,QAAQ,UAAU,IAAIA;AAAA,IACrC;AAEA,QAAI,WAAW,SAAS,GAAG,GAAG;AAC1B,MAAAA,OAAM,iBAAiB;AAAA,IAC3B;AACA,QAAIA,OAAM,gBAAgB;AACtB,wBAAkB,WAAW,MAAM,GAAG,EAAE,CAAC,CAAC,IAAI;AAAA,IAClD,OACK;AAGD,wBAAkB,UAAU,IAAI;AAAA,IACpC;AAEA,QAAI,kBAAkBA,QAAO;AACzB,iBAAW,SAAS,UAAU,IAAIA,OAAM;AAAA,IAC5C;AAGA,QAAI,CAAC,cAAc,IAAI,GAAG;AAEtB,MAAAA,OAAM,eAAe,GAAG,SAAS;AAAA,IACrC;AACA,OAAG,wBAAwB;AAC3B,OAAG,qBAAqB;AACxB,WAAOA;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,OAAO,YAAY,WAAW;AAC1B,UACI,KAAK,KAAK,UAAU,GACpB,aAAa,GAAG,MAAM,QACtB,aAAa,WAAW,IAAI,SAAS,GACrC,EAAE,SAAS,IAAI,YACf,QAAQ,SAAS,SAAS;AAC9B,QAAI,YAAY;AACZ,iBAAW,KAAK,OAAO,OAAO,CAAC;AAC/B,aAAO,SAAS,SAAS;AACzB,aAAO,WAAW,SAAS,SAAS;AACpC,aAAO,WAAW,QAAQ,SAAS;AACnC,aAAO,WAAW,IAAI,SAAS;AAC/B,aAAO,WAAW,QAAQ,WAAW,UAAU;AAC/C,iBAAW,QAAQ,UAAU;AACzB,YAAI,SAAS,IAAI,IAAI,OAAO;AACxB,YAAE,SAAS,IAAI;AAAA,QACnB;AAAA,MACJ;AAEA,aAAO,GAAG,UAAU,SAAS;AAAA,IACjC;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,OAAO,kBAAkB;AACrB,UAAM,KAAK;AACX,QAAIF,QAAO,IAAI,kBAAkB,GAAG;AAChC;AAAA,IACJ;AACA,QAAI,GAAG,WAAW;AACd,SAAG,mBAAmB,CAAC;AACvB,iBAAW,gBAAgB,GAAG,WAAW;AACrC,cAAM,WAAW,GAAG,UAAU,YAAY;AAC1C,iBAAS,eAAe;AACxB,WAAG,iBAAiB,KAAK,QAAQ;AAEjC,YAAI,CAAC,QAAQ,QAAQ,GAAG,SAAS,EAAE,SAAS,YAAY,GAAG;AACvD,UAAAD,gBAAe,GAAG,WAAW,cAAc;AAAA,YACvC,YAAa;AAAA,YACb,KAAa,WAAW;AAEpB,qBAAO,KAAK,WAAW,YAAY;AAAA,YACvC;AAAA,YACA,KAAM,SAAS,OAAO;AAElB,mBAAK,WAAW,cAAc,OAAO,QAAQ;AAAA,YACjD;AAAA,UACJ,CAAC;AAAA,QACL;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,OAAO,cAAc,QAAQ,eAAe;AACxC,UAAM,cAAc,OAAO,KAAK,iBAAiB,oBAAI,IAAI;AAEzD,eAAWG,UAAS,KAAK,MAAM,OAAO,UAAU;AAE5C,YAAM,QAAQ,aAAa,QAAQ,eAAeA,OAAM,UAAU;AAClE,gBAAU,UAAa,YAAY,IAAIA,QAAO,KAAK;AAEnD,OAACA,OAAM,QAAQA,OAAM,KAAK,eAAe,MAAM;AAAA,IACnD;AAAA,EACJ;AAAA;AAAA,EAEA,kBAAkB;AACd,UAAM,EAAE,eAAe,IAAI,KAAK;AAChC,eAAW,CAACA,QAAO,KAAK,KAAK,gBAAgB;AACzC,UAAIA,OAAM,IAAI,OAAO,KAAK,MAAM,IAAI,MAAM,OAAO;AAC7C,uBAAe,OAAOA,MAAK;AAAA,MAC/B;AAAA,IACJ;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAeA,WAAW,mBAAmB;AAC1B,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,OAAO,YAAY,GAAG,GAAG;AACrB,YAAQ,YAAY,CAAC,KAAK,QAAQ,YAAY,CAAC,KAAK;AAAA,EACxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,IAAI,SAAS;AACT,WAAO,KAAK,MAAM,OAAO;AAAA,EAC7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,mBAAmB,WAAW;AAC1B,WAAO,KAAK,MAAM,OAAO,IAAI,SAAS;AAAA,EAC1C;AAAA,EACA,iCAAiC,YAAY;AACzC,WAAO,KAAK,MAAM,OAAO,QAAQ,UAAU;AAAA,EAC/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,IAAI,aAAa;AACb,WAAO,OAAO,KAAK,KAAK,IAAI;AAAA,EAChC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,OAAO,mBAAmB,WAAW;AACjC,WAAO,KAAK,MAAM,OAAO,IAAI,SAAS;AAAA,EAC1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,OAAO,mBAAmB,WAAW;AACjC,WAAO,KAAK,mBAAmB,SAAS,EAAE;AAAA,EAC9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,cAAc,WAAW;AACrB,UAAM,MAAM,KAAK,YAAY,mBAAmB,SAAS;AACzD,YAAO,2BAAK,gBAAc,2BAAK;AAAA,EACnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,OAAO,aAAa,WAAW,OAAO,QAAQ;AAC1C,UAAMA,SAAQ,KAAK,SAAS,SAAS;AACrC,YAAOA,UAAA,gBAAAA,OAAO,WAAUA,OAAM,QAAQ,OAAO,KAAK,MAAM,MAAM,IAAI;AAAA,EACtE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,gBAAgB;AACZ,UACI,KAAY,MACZ,YAAY,GAAG,YAAY;AAC/B,QAAI,CAAC,WAAW;AACZ;AAAA,IACJ;AACA,OAAG,OAAO,QAAQ,WAAS;AAhyCnC;AAiyCY,UAAI,CAAC,MAAM,gBAAgB;AACvB,cAAM,cAAc;AAAA,MACxB;AACA,YAAM,iBAAiB,CAAC;AACxB,kBAAM,mBAAN,mBAAsB,QAAQ,YAAU;AACpC,uBAAe,KAAK,EAAE,SAAU,GAAG,aAAa,MAAM,GAAG,OAAO,CAAC;AAAA,MACrE;AACA,YAAM,0BAA0B,IAAI,cAAc;AAAA,IACtD,CAAC;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,aAAa,QAAQ;AACjB,UACI,KAAgB,MAChB,YAAgB,GAAG,IAAI,OAAO,UAAU,GACxC,UAAgB,cAAc,cAAc,OAAO,OAAO,iBAAiB,YAAY,OAAO,aAAa,QAAQ,SAAS,GAC5H,gBAAgB,GAAG,KAAK,kBAAkB,GAAG,KAAK,gBAAgB,CAAC;AAEvE,kBAAc,OAAO,YAAY,IAAI,YAAY,aAAa,OAAO,EAAE,IAAK,WAAW,aAAc,KAAK,IAAI;AAC9G,WAAO;AAAA,EACX;AAAA,EACA,eAAe,QAAQ;AACnB,UAAM,EAAE,cAAc,YAAY,kBAAkB,IAAI;AAExD,QAAI,KAAK,KAAK,cAAc,YAAY,GAAG;AACvC,aAAO,KAAK,KAAK,cAAc,YAAY;AAC3C,UAAI,mBAAmB;AAEnB,aAAK,QAAQ,YAAY,IAAI;AAAA,MACjC;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,WAAW,MAAM;AAv0CrB;AAw0CQ,YAAO,UAAK,KAAK,kBAAV,mBAA0B;AAAA,EACrC;AAAA,EACA,WAAW,MAAM,OAAO,QAAQ;AAC5B,UAAM,KAAK,OAAM,KAAK,KAAK;AAC3B,WAAO,KAAK,IAAI,OAAO,YAAY,EAAE;AAAA,EACzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,kBAAkB,MAAM;AAr1C5B;AAw1CQ,YAAO,gBAAK,eAAL,mBAAiB,mBAAjB,mBAAiC,KAAK,OAAK,EAAE,eAAe;AAAA,EACvE;AAAA;AAAA;AAAA,EAGA,QAAQ,WAAW,YAAY;AAG3B,QAAI,KAAK,YAAY,aAAa,KAAK,KAAK,cAAc;AACtD,aAAO,KAAK,KAAK,aAAa,SAAS;AAAA,IAC3C;AACA,WAAO,cAAc,KAAK,OAAO,KAAK,KAAK,UAAU,IAAI,KAAK,KAAK,SAAS;AAAA,EAChF;AAAA,EACA,WAAW,WAAW,YAAY;AAE9B,QAAI,KAAK,YAAY,aAAa,KAAK,KAAK,cAAc;AACtD,aAAO,KAAK,KAAK,aAAa,SAAS;AAAA,IAC3C;AACA,WAAO,aAAa,QAAQ,KAAK,MAAM,UAAU;AAAA,EACrD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,IAAI,WAAW;AACX,QAAI,CAAC,WAAW;AACZ;AAAA,IACJ;AACA,UAAMA,SAAQ,KAAK,SAAS,SAAS;AAErC,QAAI,CAACA,UAAS,UAAU,SAAS,GAAG,GAAG;AACnC,aAAO,KAAK,WAAW,WAAW,SAAS;AAAA,IAC/C;AACA,QAAIA,UAAA,gBAAAA,OAAO,gBAAgB;AACvB,aAAO,KAAK,WAAW,WAAWA,OAAM,UAAU;AAAA,IACtD;AACA,WAAO,KAAK,QAAQ,YAAWA,UAAA,gBAAAA,OAAO,eAAc,SAAS;AAAA,EACjE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAqBA,QAAQ,OAAO,OAAO;AAr5C1B;AAs5CQ,UAAM,EAAE,MAAM,SAAS,IAAI;AAG3B,QAAI,OAAO,UAAU,UAAU;AAC3B,YACIA,SAAa,SAAS,KAAK,GAC3B,cAAa,KAAAA,UAAA,gBAAAA,OAAO,eAAP,YAAqB;AACtC,UAAIA,UAAA,gBAAAA,OAAO,KAAK;AACZ,QAAAA,OAAM,IAAI,OAAO,KAAK,MAAM,IAAI;AAAA,MACpC,WACSA,UAAA,gBAAAA,OAAO,gBAAgB;AAC5B,qBAAa,QAAQ,MAAM,YAAY,KAAK;AAAA,MAChD,OACK;AACD,aAAK,UAAU,IAAI;AAAA,MACvB;AAAA,IACJ,OAEK;AACD,YAAM,OAAO,OAAO,KAAK,KAAK;AAC9B,eAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,KAAK;AAClC,cACI,YAAa,KAAK,CAAC,GACnBA,SAAa,SAAS,SAAS,GAC/B,cAAa,KAAAA,UAAA,gBAAAA,OAAO,eAAP,YAAqB;AACtC,YAAIA,UAAA,gBAAAA,OAAO,KAAK;AACZ,UAAAA,OAAM,IAAI,OAAO,KAAK,MAAM,IAAI;AAAA,QACpC,WACS,YAAY;AACjB,cAAIA,UAAA,gBAAAA,OAAO,gBAAgB;AACvB,yBAAa,QAAQ,MAAM,YAAY,MAAM,SAAS,CAAC;AAAA,UAC3D,OACK;AACD,iBAAK,UAAU,IAAI,MAAM,SAAS;AAAA,UACtC;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,QAAQ,WAAW;AAn8CvB;AAo8CQ,UACIA,SAAa,KAAK,SAAS,SAAS,GACpC,cAAa,KAAAA,UAAA,gBAAAA,OAAO,eAAP,YAAqB;AACtC,QAAI,YAAY;AACZ,UAAIA,UAAA,gBAAAA,OAAO,gBAAgB;AACvB,eAAO,aAAa,QAAQ,KAAK,MAAM,UAAU;AAAA,MACrD;AACA,aAAO,KAAK,KAAK,UAAU;AAAA,IAC/B;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,OAAO,OAAO;AACV,UAAM,WAAW,KAAK;AACtB,QAAI,aAAa,OAAO;AACpB,WAAK,QAAQ,MAAM,KAAK;AACxB,YAAM,OAAO,EAAE,IAAK,EAAE,OAAO,SAAS,EAAE;AACxC,WAAK,YAAY,MAAM,IAAI;AAAA,IAC/B;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA6BA,IAAIA,QAAO,OAAO,SAAS,OAAO,qBAAqB,OAAO,gBAAgB,OAAO,YAAY,OAAO,sBAAsB,MAAM;AAx/CxI;AAy/CQ,UAAM,KAAK;AACX,QAAI,GAAG,iBAAiB;AACpB,SAAG,WAAWA,QAAO,OAAO,UAAU,GAAG,aAAa;AACtD,aAAO;AAAA,IACX,OACK;AAID,YAAM,SAAS,GAAG,MAAMA,QAAO,OAAO,QAAQ,oBAAoB,eAAe,WAAW,mBAAmB;AAC/G,eAAG,aAAH,4BAAcA,QAAO,OAAO,QAAQ,oBAAoB;AACxD,aAAO;AAAA,IACX;AAAA,EACJ;AAAA,EACA,YAAYA,QAAO,OAAO;AACtB,QAAI,OAAOA,WAAU,UAAU;AAE3B,aAAO,aAAa,OAAO,CAAC,GAAGA,MAAK;AAAA,IACxC;AACA,WAAO;AAAA,MACH,CAACA,MAAK,GAAI;AAAA,IACd;AAAA,EACJ;AAAA,EACA,WAAWA,QAAO,OAAO,QAAQ;AAC7B,UACI,KAAS,MACT;AAAA,MACI;AAAA,MACA;AAAA,MACA;AAAA,IACJ,IAAS,IACT,SAAS,CAAC;AACd,QAAI,KAAK,UAAU;AACnB,QAAI,OAAOA,WAAU,UAAU;AAC3B,aAAO,KAAK,GAAG,YAAYA,QAAO,KAAK,CAAC,EAAE,QAAQ,SAAO;AACrD,cAAM,SAAS,GAAG,KAAK;AACvB,gBAAQ,YAAY,aAAa,KAAKA,OAAM,GAAG,GAAG,EAAE;AAEpD,YAAI,CAAC,IAAI,QAAQ,KAAK,aAAa,GAAG,GAAG,KAAK,GAAG;AAC7C,iBAAO,GAAG,IAAI;AAAA,YACV;AAAA,YACA,UAAW,GAAG,IAAI,GAAG;AAAA,UACzB;AACA,eAAK,aAAa,GAAG,IAAI;AACzB,oBAAU;AAAA,QACd;AAAA,MACJ,CAAC;AAAA,IACL,OACK;AACD,YAAM,SAASA,MAAK,KAAK;AAEzB,UAAI,CAAC,IAAI,QAAQ,KAAK,aAAaA,MAAK,GAAG,KAAK,GAAG;AAC/C,eAAOA,MAAK,IAAI;AAAA,UACZ;AAAA,UACA,UAAW,GAAG,IAAIA,MAAK;AAAA,QAC3B;AACA,aAAK,aAAaA,MAAK,IAAI;AAC3B,kBAAU;AAAA,MACd;AAAA,IACJ;AAEA,QAAI,SAAS;AACT,SAAG;AACH,UAAI,CAAC,QAAQ;AAIT,cAAM,QAAQ;AAAA,UACV,QAAU;AAAA,UACV,QAAU;AAAA,UACV,SAAU,CAAC,EAAE;AAAA,UACb,SAAU;AAAA,QACd;AACA,WAAG,OAAO,QAAQ,WAAS;AACvB,gBAAM,QAAQ,iBAAiB,EAAE,GAAG,MAAM,CAAC;AAAA,QAC/C,CAAC;AAED,WAAG;AAAA,UAAc,CAAC,OAAO,WACrB,MAAM,QAAQ,iBAAiB,EAAE,GAAG,OAAO,QAAQ,SAAU,CAAC,MAAM,EAAE,CAAC;AAAA,QAC3E;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,MAAMA,QAAO,OAAO,QAAQ,oBAAoB,gBAAgB,OAAO,YAAY,OAAO,sBAAsB,MAAM;AA5kD1H;AA6kDQ,UACI,KAAW,MACX;AAAA,MACI;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACJ,IAAW,IACX;AAAA,MACI,WAAY;AAAA,MACZ;AAAA,IACJ,IAAW,aACX,SAAW,CAAC,GACZ,QAAW,GAAG,YAAYA,QAAO,KAAK,GAGtC,OAAW,OAAO,KAAK,KAAK,EAAE,KAAK,KAAK,YAAY,WAAW;AACnE,QACI,UAAW;AAEf,QAAI,CAAC,UAAU,CAAC,GAAG,oBAAoB,KAAK,GAAG;AAC3C,aAAO;AAAA,IACX;AACA,OAAG,YAAY;AACf,aAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,KAAK;AAClC,YAAM,MAAM,KAAK,CAAC;AAElB,UAAI,QAAQ,eAAe;AACvB;AAAA,MACJ;AACA,YACIA,SAAW,SAAS,GAAG,GACvB,MAAWA,UAAS,cACpB,WAAWA,UAAA,gBAAAA,OAAO,UAClB,WAAW,KAAAA,UAAA,gBAAAA,OAAO,eAAP,YAAqB,KAChC,UAAW,CAAC,iBAAiB,CAACA,UAAS,OAAO,SAC9C,WAAW,UAAU,GAAG,OAAO,KAAIA,UAAA,gBAAAA,OAAO,kBAAiB,aAAa,QAAQ,MAAM,OAAO,IAAI,KAAK,OAAO,GAC7GE,SAAW,YAAY,aAAa,KAAK,MAAM,GAAG,GAAG,EAAE,GACvD,MAAW,MAAM,GAAG,IAAI,EAAE,OAAAA,OAAM,GAChC,WAAW,GAAG,kBAAkB,GAAG;AACvC,UAAI,CAAC,YAAY,CAAC,IAAI,QAAQ,UAAUA,MAAK,MAAM,CAAC,aAAaA,WAAU,SAAY;AAEnF,WAAG;AAEH,YAAI,YAAW,WAAAF,UAAA,gBAAAA,OAAO,gBAAP,wBAAAA,QAAqB,QAArB,YAA4B;AAC3C,kBAAU;AAEV,YAAI,OAAO,KAAK,YAAY,IAAI,QAAQ,KAAK,SAAS,GAAG,GAAGE,MAAK,GAAG;AAEhE,kBAAQ,eAAe,KAAK,UAAU,GAAG;AAGzC,cAAI,GAAG,aAAa;AAChB,eAAG,KAAK,OAAO,IAAIA;AAAA,UACvB;AAAA,QACJ,WACS,CAAC,GAAG,WAAW;AAEpB,cAAI,EAAE,OAAO,KAAK,WAAW;AACzB,eAAG,iBAAiB,KAAK,QAAQ;AAAA,UACrC;AACA,cAAI,IAAI,aAAa,YAAY;AAC7B,oBAAQ,eAAe,KAAK,UAAU;AAAA,UAC1C;AAAA,QACJ;AAEA,eAAO,GAAG,IAAI;AACd,WAAG,WAAW,SAAS,SAASA,QAAO,eAAeF,MAAK;AAE3D,YAAI,YAAY,CAAC,oBAAoB;AACjC,aAAG,aAAa,QAAQ;AACxB,aAAG,OAAO,QAAQ,WAAS,MAAM,mBAAmB,IAAIE,QAAO,SAAS,cAAc,IAAI,QAAQ,CAAC;AAAA,QACvG;AAAA,MACJ;AAAA,IACJ;AACA,QAAI,SAAS;AACT,SAAG,YAAY,OAAO,QAAQ,QAAQ,oBAAoB,aAAa;AAAA,IAC3E;AACA,OAAG,YAAY;AACf,WAAO,UAAU,SAAS;AAAA,EAC9B;AAAA;AAAA,EAEA,WAAW,SAAS,KAAK,OAAO,eAAeF,QAAO;AAClD,UAAM,KAAK;AACX,QAAI,iBAAiBA,UAAA,gBAAAA,OAAO;AAI5B,UAAKA,UAAA,gBAAAA,OAAO,SAAQ,SAAS,GAAG,YAAY,eAAe;AAEvD,OAAC,GAAG,WAAW,QAAQ,KAAK,KAAK,GAAG,WAAW,UAAU,YAAY,IAAI,MAAM,OAAO;AAAA,QAClF,oBAAqB,EAAE,MAAO,KAAK;AAAA,MACvC,CAAC;AACD;AAAA,IACJ,WACS,SAAS;AAEd,UAAGA,UAAA,gBAAAA,OAAO,SAAQ,GAAG,IAAI;AACzB;AAAA,IACJ;AACA,QAAIA,UAAA,gBAAAA,OAAO,KAAK;AACZ,MAAAA,OAAM,IAAI,OAAO,GAAG,MAAM,EAAE;AAC5B;AAAA,IACJ;AAEA,QAAI,CAACA,UAAS,IAAI,SAAS,GAAG,GAAG;AAC7B,YAAM,aAAa,IAAI,MAAM,GAAG,EAAE,CAAC;AACnC,MAAAA,SAAQ,GAAG,YAAY,SAAS,UAAU;AAG1C,wBAAiBA,UAAA,gBAAAA,OAAO,oBAAkBA,UAAA,gBAAAA,OAAO,UAAS;AAAA,IAC9D;AAEA,QAAI,gBAAgB;AAChB,mBAAa,QAAQ,GAAG,MAAM,KAAK,KAAK;AAAA,IAC5C,OAEK;AACD,SAAG,KAAK,GAAG,IAAI;AAAA,IACnB;AAAA,EACJ;AAAA;AAAA,EAEA,YAAY,OAAO,QAAQ,QAAQ,oBAAoB,eAAe;AAClE,eAAW,SAAS,KAAK,QAAQ;AAC7B,YAAM,cAAc,MAAM,OAAO,QAAQ,QAAQ,oBAAoB,aAAa;AAAA,IACtF;AAEA,SAAK;AAAA,MAAc,CAAC,OAAO,WACvB,MAAM,cAAc,QAAQ,OAAO,QAAQ,QAAQ,oBAAoB,aAAa;AAAA,IACxF;AAAA,EACJ;AAAA;AAAA,EAEA,cAAcG,KAAI;AACd,eAAW,UAAU,KAAK,QAAQ;AAC9B,iBAAW,SAAS,OAAO,QAAQ;AAC/B,QAAAA,IAAG,OAAO,MAAM;AAAA,MACpB;AAAA,IACJ;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,IAAI,gBAAgB;AAMhB,WAAO,CAAC,KAAK,mBAAmB,CAAC,KAAK;AAAA,EAC1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,IAAI,aAAa;AACb,WAAO,QAAQ,KAAK,KAAK,YAAY,OAAO,KAAK,KAAK,KAAK,QAAQ,EAAE,SAAS,CAAC;AAAA,EACnF;AAAA,EACA,IAAI,wBAAwB;AACxB,WAAO,KAAK,iBAAiB,CAAC,aAAa,QAAQ,KAAK,mBAAmB;AAAA,EAC/E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,gBAAgB,WAAW;AACvB,WAAO,KAAK,cAAc,aAAa,KAAK,KAAK;AAAA,EACrD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,wBAAwB,aAAa;AACjC,UACIH,SAAQ,OAAO,gBAAgB,WAAW,KAAK,mBAAmB,WAAW,IAAI,aACjF,QAAQA,UAAA,gBAAAA,OAAO,SAAQ;AAC3B,QAAI;AACJ,QAAI,CAACA,UAASA,OAAM,SAAS;AACzB,eAAS,KAAK,IAAI;AAElB,UAAIA,UAAA,gBAAAA,OAAO,WAAW;AAClB,iBAASA,OAAM,UAAU,QAAQ,IAAI;AAAA,MACzC;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,IAAI,gBAAgB;AAChB,UAAM,OAAO,KAAK;AAClB,QAAI,QAAQ,OAAO,KAAK,IAAI,EAAE,QAAQ;AAClC,WAAK,KAAK,YAAY,OAAO,IAAI,KAAK;AAAA,IAC1C;AACA,WAAO;AAAA,EACX;AAAA,EACA,IAAI,mBAAmB;AACnB,UACI,KAAK,MACL,OAAO,CAAC;AACZ,QAAI,CAAC,GAAG,YAAY;AAChB,aAAO;AAAA,IACX;AACA,QAAI,SAAS;AACb,WAAO,KAAK,GAAG,KAAK,QAAQ,EAAE,QAAQ,SAAO;AACzC,YAAM,QAAQ,GAAG,wBAAwB,GAAG;AAC5C,UAAI,UAAU,YAAY;AACtB,aAAK,GAAG,IAAI;AACZ,iBAAS;AAAA,MACb;AAAA,IACJ,CAAC;AACD,WAAO,SAAS,OAAO;AAAA,EAC3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,IAAI,mBAAmB;AACnB,UAAM,OAAO,KAAK;AAElB,QAAI,QAAQ,OAAO,KAAK,IAAI,EAAE,QAAQ;AAClC,mBAAa,QAAQ,MAAM,KAAK,YAAY,SAAS,KAAK,EAAE;AAAA,IAChE;AACA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,IAAI,sBAAsB;AACtB,UACI,KAAK,MACL,EAAE,SAAS,IAAI,GAAG,aAClB,OAAO,CAAC;AACZ,QAAI,CAAC,GAAG,YAAY;AAChB,aAAO;AAAA,IACX;AACA,QAAI,SAAS;AACb,WAAO,KAAK,GAAG,KAAK,QAAQ,EAAE,QAAQ,eAAa;AAC/C,YAAMA,SAAQ,SAAS,SAAS;AAEhC,UAAIA,UAAA,gBAAAA,OAAO,SAAS;AAChB,cAAM,QAAQ,GAAG,wBAAwB,SAAS;AAClD,YAAI,UAAU,YAAY;AACtB,uBAAa,QAAQ,MAAMA,OAAM,YAAY,KAAK;AAClD,mBAAS;AAAA,QACb;AAAA,MACJ;AAAA,IACJ,CAAC;AACD,WAAO,SAAS,OAAO;AAAA,EAC3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,IAAI,0BAA0B;AAC1B,UACI,oBAAoB,KAAK,YAAY,mBACrC,aAAoB,KAAK;AAC7B,sBAAkB,QAAQ,eAAa;AACnC,iBAAW,KAAK,mBAAmB,SAAS,EAAE,UAAU,IAAI,KAAK,wBAAwB,SAAS;AAAA,IACtG,CAAC;AACD,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,IAAI,kBAAkB;AAClB,UACI,KAAO,MACP,OAAO,CAAC;AACZ,OAAG,OAAO,QAAQ,CAAAA,WAAS;AACvB,YAAM,QAAQ,GAAG,wBAAwBA,MAAK;AAC9C,UAAI,UAAU,YAAY;AACtB,YAAIA,UAAA,gBAAAA,OAAO,gBAAgB;AACvB,uBAAa,QAAQ,MAAMA,OAAM,YAAY,KAAK;AAAA,QACtD,OACK;AACD,eAAKA,OAAM,UAAU,IAAI;AAAA,QAC7B;AAAA,MACJ;AAAA,IACJ,CAAC;AACD,WAAO;AAAA,EACX;AAAA,EACA,IAAI,kBAAkB;AAClB,UAAM,EAAE,KAAK,IAAI;AACjB,WAAO,KAAK,OAAO,OAAO,CAAC,QAAQA,WAAU;AACzC,UAAI,aAAa,QAAQ,MAAMA,OAAM,UAAU,GAAG;AAC9C,eAAOA,OAAM,IAAI,IAAI,KAAKA,OAAM,UAAU;AAAA,MAC9C;AACA,aAAO;AAAA,IACX,GAAG,CAAC,CAAC;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,IAAI,eAAe;AACf,WAAO,QAAQ,KAAK,KAAK,UAAU;AAAA,EACvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,aAAa,qBAAqB,MAAM,yBAAyB,MAAM,UAAU,MAAM;AACnF,UACI,KAAK,MACL,EAAE,KAAK,IAAI;AAEf,QAAI,SAAS;AACT,iBAAW,OAAO,SAAS;AACvB,eAAO,KAAK,SAAS,GAAG;AAAA,MAC5B;AAAA,IACJ,OACK;AACD,WAAK,WAAW,CAAC;AAAA,IACrB;AAEA,UAAM,YAAY,aAAa,QAAQ,KAAK,QAAQ;AACpD,SAAK,aAAa;AAClB,QAAI,wBAAwB;AACxB,SAAG,OAAO,QAAQ,WAAS;AACvB,qBAAa,MAAM,SAAS,OAAO,EAAE;AACrC,cAAM,MAAM,OAAO,EAAE;AACrB,YAAI,oBAAoB;AACpB,gBAAM,cAAc,MAAM,mBAAmB,EAAE,EAAE;AACjD,gBAAM,MAAM,OAAO,WAAW;AAC9B,uBAAa,MAAM,SAAS,OAAO,WAAW;AAAA,QAClD;AAAA,MACJ,CAAC;AAAA,IACL;AAAA,EACJ;AAAA,EACA,iBAAiB,KAAK,UAAU;AAC5B,SAAK,KAAK,SAAS,GAAG,IAAI;AAAA,EAC9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,cAAc,SAAS,OAAO;AAE1B,SAAK,cAAc;AACnB,SAAK,IAAI,KAAK,KAAK,UAAU,YAAY,MAAM;AAC/C,SAAK,cAAc;AAAA,EACvB;AAAA,EACA,eAAe,YAAY,iBAAiB,cAAc,SAAS,MAAM;AAt8D7E;AAu8DQ,UACI,KAAyB,MACzB,aAAyB,GAAG,aAC5B;AAAA,MACI;AAAA,MACA;AAAA,IACJ,IAAI,YACJ,wBAAyB,aAAa,YAAY,UAAU,GAC5D,wBAAyB,aAAa,YAAY,GAAG,gBAAgB,GACrE,UAAyB,CAAC,GAG1B,YAAyB,kBAAkB;AAE/C,eAAW,cAAc,uBAAuB;AAC5C,YACIA,SAAW,mBAAmB,UAAU,GACxC,YAAW,KAAAA,UAAA,gBAAAA,OAAO,SAAP,YAAe;AAO9B,UACI,YAEIA,UAAA,gBAAAA,OAAO,UAAS,UACV,YACC,sBAAsB,UAAU,MAAM,sBAAsB,UAAU,IAEnF;AACE,gBAAQ,QAAQ,IAAI,sBAAsB,UAAU;AAAA,MACxD;AAAA,IACJ;AAEA,UAAM,SAAS,GAAG,IAAI,OAAO;AAC7B,OAAG,aAAa,OAAO,MAAM,SAAS,OAAO,OAAO;AAEpD,WAAO,SAAS,OAAO,QAAQ,MAAM,EAAE,OAAO,CAAC,QAAQ,CAACA,QAAO,MAAM,MAAM;AACvE,aAAOA,MAAK,IAAI,OAAO;AACvB,aAAO;AAAA,IACX,GAAG,CAAC,CAAC,IAAI,CAAC;AAAA,EACd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,IAAI,aAAa;AACb,WAAO,KAAK;AAAA,EAChB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,IAAI,YAAY;AACZ,WAAO,KAAK,OAAO,MAAM,KAAK,MAAM,QAAQ,KAAK;AAAA,EACrD;AAAA,EACA,IAAI,UAAU;AACV,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,IAAI,iBAAiB;AACjB,WAAO,OAAO,KAAK,OAAO,YAAY,KAAK,GAAG,WAAW,YAAY;AAAA,EACzE;AAAA,EACA,OAAO,WAAW,OAAO,KAAK,QAAQ;AAClC,WAAO,aAAa,QAAQ,aAAa,aAAa;AAAA,EAC1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,aAAa;AACT,WAAO,KAAK,YAAY,WAAW;AAAA,EACvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,OAAO,KAAK,OAAO;AACf,YAAO,+BAAO,WAAU,MAAM,KAAK,aAAa,SAAS,KAAK,IAAI,MAAM,KAAK,SAAS,GAAG,UAAU,IAAI;AAAA,EAC3G;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAuBA,IAAI,OAAO;AACP,WAAO,aAAa,kBAAkB,IAAI;AAAA,EAC9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAmCA,SAAS;AACL,UACI,EAAE,UAAU,mBAAmB,IAAI,MACnC,WAAmC,KAAK;AAC5C,QAAI,sBAAsB,UAAU;AAChC,eAAS,KAAK,YAAY,aAAa,KAAK,sBAAsB,UAAU,IAAI,OAAK,EAAE,OAAO,CAAC;AAAA,IACnG;AACA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAaA,WAAW;AACP,UACI,KAAY,MACZ,YAAY,mBAAmB,KAAK,CAAAA,WAASA,UAAS,GAAG,YAAY,QAAQ,GAC7E,OAAY,YAAY,EAAE,CAAC,GAAG,YAAY,OAAO,GAAI,GAAG,IAAI,CAAC,SAAS,GAAI,GAAG,SAAS,EAAE,IAAI,GAAG;AACnG,WAAO,aAAa,kBAAkB,IAAI;AAAA,EAC9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,IAAI,kBAAkB;AAClB,WAAO,QAAQ,KAAK,QAAQ;AAAA,EAChC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,iBAAiB,WAAW;AAppEhC;AAqpEQ,YAAO,gBAAK,SAAL,mBAAW,iBAAX,mBAA0B;AAAA,EACrC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAwBA,WAAW,gBAAgB,OAAO;AAC9B,UAAM,KAAK;AACX,QAAI,CAAC,GAAG,UAAU;AACd,SAAG,WAAW;AACd,SAAG,KAAK,eAAe,CAAC;AAAA,IAC5B;AACA,QAAI,eAAe;AACf,SAAG,iBAAiB,GAAG,iBAAiB,KAAK;AAAA,IACjD;AACA,OAAG;AAAA,EACP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,SAAS,SAAS,OAAO,gBAAgB,OAAO,sBAAsB,MAAM;AACxE,UACI,KAAoB,MACpB,EAAE,cAAc,IAAI,GAAG;AAC3B,QAAI,CAAC,GAAG,UAAU;AACd;AAAA,IACJ;AACA,OAAG;AAIH,OAAG,iBAAiB,GAAG;AACvB,QAAI,GAAG,WAAW,GAAG;AACjB;AAAA,IACJ;AAEA,QAAI,CAAC,aAAa,QAAQ,GAAG,KAAK,YAAY,GAAG;AAC7C,UAAI,EAAE,aAAa,IAAI,GAAG;AAC1B,SAAG,KAAK,eAAe;AAEvB,UAAI,aAAa,aAAa,GAAG;AAC7B,uBAAe,EAAE,GAAG,aAAa;AACjC,WAAG,WAAW,aAAa,aAAa;AACxC,eAAO,aAAa,aAAa;AAAA,MACrC;AACA,SAAG,IAAI,cAAc,YAAY,QAAQ,OAAO,eAAe,QAAW,mBAAmB;AAAA,IACjG;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,cAAc;AACV,QAAI,KAAK,UAAU;AACf,YACI,KAAmB,MACnB,EAAE,aAAa,IAAI,GAAG,MACtB,SAAmB,CAAC;AACxB,SAAG,WAAW;AACd,SAAG,KAAK,eAAe;AACvB,SAAG;AACH,UAAI,CAAC,GAAG,eAAe;AAEnB,eAAO,QAAQ,YAAY,EAAE,QAAQ,CAAC,CAAC,KAAK,QAAQ,MAAM;AACtD,iBAAO,GAAG,IAAI;AAAA,YACV;AAAA,YACA,OAAQ,GAAG,GAAG;AAAA,UAClB;AAAA,QACJ,CAAC;AAID,cAAM,QAAQ;AAAA,UACV,QAAU;AAAA,UACV,QAAU;AAAA,UACV,SAAU,CAAC,EAAE;AAAA,UACb,SAAU;AAAA,QACd;AACA,WAAG,OAAO,QAAQ,WAAS;AAGvB,gBAAM,QAAQ,iBAAiB,EAAE,GAAG,MAAM,CAAC;AAAA,QAC/C,CAAC;AAED,WAAG,cAAc,CAAC,OAAO,WAAW;AAChC,gBAAM,QAAQ,iBAAiB,EAAE,GAAG,OAAO,QAAQ,SAAU,CAAC,MAAM,EAAE,CAAC;AAAA,QAC3E,CAAC;AAAA,MACL;AACA,SAAG,iBAAiB,GAAG;AAAA,IAC3B;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,oBAAoB,SAAS;AA/wEjC;AAgxEQ,WAAO,GAAC,UAAK,WAAL,mBAAa,KAAK,OAAK,EAAE,QAAQ,gBAAgB,EAAE,QAAS,MAAM,QAAQ,CAAC,MAAM;AAAA,EAC7F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAiBA,KAAK,QAAQ,MAAM,MAAM;AACrB,UACI,KAAU,MACV,OAAU,aAAa,MAAM,GAAG,IAAI,GACpC,UAAU,GAAG,YAAY,SAGzB,UAAU,aAAa,SAAS,IAAI,IAAK,KAAK,OAAO;AACzD,QAAI;AACJ,QAAI,SAAS,OAAO,UAAU,UAAU;AACpC,WAAK,MAAM,OAAO;AAClB,aAAO,OAAO,MAAM,KAAK;AAAA,IAC7B,OACK;AACD,WAAK;AAAA,IACT;AAIA,QAAI,WAAW,GAAG,UAAU;AACxB,WAAK,WAAW,GAAG,SAAS,IAAI,WAAS,MAAM,KAAK,QAAW,IAAI,CAAC;AAAA,IACxE,OACK;AACD,aAAO,KAAK;AACZ,aAAO,KAAK;AAAA,IAChB;AACA,QAAI,GAAG,MAAM,OAAO,SAAS,SAAS,GAAG;AACrC,YAAM,OAAU,GAAG,OAAO;AAC1B,iBAAWA,UAAS,GAAG,MAAM,OAAO,UAAU;AAC1C,aAAKA,OAAM,IAAI,IAAI,KAAKA,OAAM,IAAI;AAAA,MACtC;AAAA,IACJ;AACA,QAAI,UAAU,OAAO;AAEjB,WAAK,OAAO,IAAI,MAAM,GAAG,WAAW,GAAG,UAAU;AAAA,IACrD;AAEA,UAAM,OAAO,IAAI,GAAG,YAAY,MAAM,MAAM,MAAM,OAAO,IAAI;AAE7D,SAAK,qBAAqB,GAAG;AAC7B,WAAO;AAAA,EACX;AAAA;AAAA,EAEA,SAAS,YAAY,KAAK,QAAQ;AAC9B,UAAM,sBAAsB,CAAC;AAC7B,eAAW,UAAU,QAAQ,CAAC,EAAE,MAAO,UAAU,MAAM;AACnD,UAAI,cAAc,WAAW,YAAY,SAAS;AAC9C,4BAAoB,SAAS,IAAI,MAAM,WAAW,IAAI,SAAS,IAAI,WAAW,SAAS;AAAA,MAC3F;AAAA,IACJ,CAAC;AACD,SAAK,IAAI,qBAAqB,MAAM,MAAM;AAAA,EAC9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,OAAO,SAAS,OAAO;AACnB,UACI,KAAa,MACb,EAAE,OAAO,IAAI;AAGjB,QAAI,QAAQ;AACR,aAAO,YAAY,EAAE;AAAA,IACzB,WAGS,GAAG,OAAO,UAAU,CAAC,GAAG,cAAc;AAC3C,SAAG,OAAO,QAAQ,OAAK,EAAE,OAAO,IAAI,QAAQ,OAAO,IAAI,CAAC;AAAA,IAC5D;AAAA,EACJ;AAAA;AAAA;AAAA,EAGA,aAAa,QAAQ,SAAS;AAC1B,WAAO,MAAM,aAAa,QAAQ,OAAO;AAAA,EAC7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,IAAI,UAAU;AACV,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,IAAI,aAAa;AACb,WAAO,KAAK,OAAO,SAAS,KAAK,KAAK,OAAO,CAAC;AAAA,EAClD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,UAAU,OAAO;AA14ErB;AA24EQ,UACI,KAAa,MACb,EAAE,OAAO,IAAI;AACjB,QAAI,CAAC,OAAO,SAAS,KAAK,GAAG;AACzB,YAAM,EAAE,eAAe,IAAI;AAC3B,YAAM,UAAU,KAAK;AACrB,YAAM,SAAS,EAAE;AACjB,aAAO,KAAK,KAAK;AACjB,UAAI,eAAe,SAAS,KAAK,GAAG;AAChC,uBAAe,OAAO,eAAe,QAAQ,KAAK,GAAG,CAAC;AAAA,MAC1D;AACA,SAAG,YAAY,GAAG,SAAS,QAAQ,WAAS,MAAM,UAAU,KAAK,CAAC;AAClE,SAAG,cAAc;AAEjB,UAAI,MAAM,QAAQ,CAAC,GAAG,UAAU,GAAC,WAAM,QAAN,mBAAW,cAAa;AACrD,WAAG,aAAa,MAAM,EAAE,EAAE,YAAY,CAAC,GAAG;AAAA,MAC9C;AAAA,IACJ;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,YAAY,OAAO,cAAc,OAAO;AAr6E5C;AAs6EQ,UAAM,KAAK,MACP,EAAE,QAAQ,eAAe,IAAI;AACjC,QAAI,OAAO,SAAS,KAAK,GAAG;AACxB,UAAI,CAAC,MAAM,cAAc;AACrB,cAAM,WAAW,EAAE;AACnB,uBAAe,KAAK,KAAK;AAAA,MAC7B;AAGA,OAAC,cAAG,sBAAsB,GAAG,aAA5B,mBAAuC,YAAvC,4BAAiD,WAAS,MAAM,YAAY,OAAO,WAAW;AAC/F,aAAO,OAAO,OAAO,QAAQ,KAAK,GAAG,CAAC;AAEtC,kBAAM,gBAAN,8BAAoB,OAAO;AAE3B,YAAM,qBAAqB,EAAE;AAAA,IACjC;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,cAAc,OAAO;AACjB,QAAI,OAAO;AACP,aAAO,MAAM,SAAS,IAAI;AAAA,IAC9B;AACA,WAAO,KAAK,OAAO,SAAS;AAAA,EAChC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,IAAI,YAAY;AACZ,WAAO,CAAC,KAAK,cAAc;AAAA,EAC/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,aAAa,cAAc;AACvB,UACI,EAAE,KAAK,IAAI,MACX,KAAW,aAAa,MAAM;AAClC,QAAI,CAAC,KAAK,KAAK;AACX,WAAK,MAAM,CAAC;AAAA,IAChB;AACA,WAAO,KAAK,IAAI,EAAE,MAAM,KAAK,IAAI,EAAE,IAAI,CAAC;AAAA,EAC5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAaA,IAAI,gBAAgB;AAChB,WAAO,iBAAiB,KAAK;AAAA,EACjC;AAAA,EACA,IAAI,gBAAgB;AAChB,WAAO,oBAAoB,KAAK;AAAA,EACpC;AAAA,EACA,IAAI,eAAe;AAj/EvB;AAk/EQ,WAAO,SAAQ,UAAK,SAAL,mBAAW,UAAU;AAAA,EACxC;AAAA,EACA,IAAI,YAAY;AACZ,WAAO,KAAK,WAAW,KAAK,UAAU,iBAAiB;AAAA,EAC3D;AAAA;AAAA,EAEA,WAAW,uBAAuB;AAC9B,UAAM,KAAK;AACX,QAAI,CAAC,GAAG,uBAAuB;AAC3B,SAAG,wBAAwB,CAAC;AAC5B,SAAG,UAAU,QAAQ,CAAAA,WAAS;AAC1B,YAAI,CAACA,OAAM,WAAWA,OAAM,YAAY;AACpC,aAAG,sBAAsBA,OAAM,IAAI,IAAI;AAAA,QAC3C;AAAA,MACJ,CAAC;AAAA,IACL;AACA,WAAO,GAAG;AAAA,EACd;AAAA,EACA,WAAW,oBAAoB;AAC3B,UAAM,KAAK;AACX,QAAI,CAAC,GAAG,oBAAoB;AACxB,SAAG,qBAAqB,CAAC;AACzB,SAAG,UAAU,QAAQ,CAAAA,WAAS;AAC1B,YAAIA,OAAM,aAAa;AACnB,aAAG,mBAAmB,KAAKA,OAAM,IAAI;AAAA,QACzC;AAAA,MACJ,CAAC;AAAA,IACL;AACA,WAAO,GAAG;AAAA,EACd;AAAA;AAAA,EAEA,IAAI,QAAQ;AACR,WAAO,OAAO,KAAK,OAAO,WAAW,KAAK,GAAG,QAAQ,SAAS,GAAG,IAAI,KAAK;AAAA,EAC9E;AAAA;AAAA;AAAA;AAAA,EAIA,OAAO,kBAAkB,SAAS;AAE9B,UACI,EAAE,MAAM,IAAI,KAAK,OACjB,YAAY,MAAM,MAAM,SAAS,CAAC,GAClC,YAAa,MAAM,MAAM,SAAS,CAAC;AACvC,WAAO,SAAS,qBAAqB,+BAA+B,aAAa,kBAAkB,KAAK,QAAQ,OAAO;AAAA,EAC3H;AAAA;AAAA,EAEA,iBAAiB,SAAS;AACtB,UACI,EAAE,MAAM,SAAS,IAAiB,MAClC,EAAE,eAAe,aAAa,IAAI,KAAK,aACvC,SAAkC,eAAe,MAAM,iBAAiB,OAAO,IAAI,CAAC;AACxF,QAAI,QAAQ;AACR,iBAAWA,UAAS,KAAK,QAAQ;AAC7B,YAAIA,OAAM,SAAS;AACf,gBAAM,QAAQ,aAAa,QAAQ,MAAMA,OAAM,UAAU;AACzD,cAAI,CAACA,OAAM,QAAQ,OAAO,cAAcA,OAAM,IAAI,CAAC,GAAG;AAClD,yBAAa,QAAQ,QAAQA,OAAM,YAAYD,MAAK,mBAAmB,OAAO,OAAO,CAAC;AAAA,UAC1F;AAAA,QACJ;AAAA,MACJ;AAEA,UAAI,UAAU;AAEV,YAAI,MAAM,QAAQ,QAAQ,GAAG;AACzB,iBAAO,WAAW,CAAC;AACnB,qBAAW,SAAS,UAAU;AAC1B,mBAAO,SAAS,KAAK,MAAM,iBAAiB,OAAO,CAAC;AAAA,UACxD;AAAA,QACJ,OAEK;AACD,iBAAO,WAAW;AAAA,QACtB;AAAA,MACJ;AACA,UAAI,KAAK,gBAAgB;AACrB,eAAO,OAAO;AAAA,MAClB;AACA,aAAO,OAAO;AACd,aAAO,OAAO;AAAA,IAClB;AACA,WAAO;AAAA,EACX;AAAA;AAEJ;AAvoEA,IAAqB,QAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA2II,cA3IiB,OA2IV,aAAY;AA6/DvB,MAAM,WAAW;AACjB,MAAM,qBAAqB;AAC3B,MAAM,mBAAmB;AACzB,MAAM,iBAAiB;AACvB,MAAM,SAAS;;;AC3iFf,IAAqB,WAArB,MAA8B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAM1B,YAAY,WAAW,MAAM;AAGzB,QAAI,OAAO,cAAc,YAAY,cAAc,MAAM;AACrD,WAAK,aAAa;AAClB,WAAK,QAAQ;AAAA,IACjB,OACK;AACD,UAAI,OAAO,cAAc,UAAU;AAC/B,eAAO,OAAO,MAAM,WAAW,cAAc,SAAS,CAAC;AAAA,MAC3D;AACA,UAAI,OAAO,cAAc,UAAU;AAC/B,eAAO,OAAO,MAAM,SAAS;AAAA,MACjC;AAAA,IACJ;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,IAAI,YAAY;AACZ,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,IAAI,UAAU,OAAO;AACjB,SAAK,aAAc,OAAO,UAAU,YAAa;AAAA,EACrD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAgBA,IAAI,OAAO;AACP,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,IAAI,KAAK,OAAO;AACZ,SAAK,QAAQ,WAAW,cAAc,KAAK;AAAA,EAC/C;AAAA,EACA,IAAI,UAAU;AACV,WAAO,KAAK,cAAc,QAAQ,QAAQ,WAAW,cAAc,KAAK,KAAK,CAAC;AAAA,EAClF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,IAAI,eAAe;AAEf,WAAO,KAAK,UAAU,KAAK,MAAM,WAAW,eAAe,KAAK,YAAY,KAAK,KAAK,CAAC,IAAI;AAAA,EAC/F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,QAAQ,OAAO;AACX,WAAO,QAAQ,KAAK,KAAK,KAAK,cAAc,QAAQ,MAAM,cAAc,QAAQ,KAAK,iBAAiB,MAAM;AAAA,EAChH;AAAA,EACA,SAAS,iBAAiB;AACtB,UACI,KAAiB,MACjB,iBAAiB,kBAAkB,uBAAuB;AAC9D,WAAO,GAAG,UAAU,GAAG,GAAG,cAAc,WAAW,cAAc,EAAE,GAAG,OAAO,GAAG,eAAe,CAAC,MAAM;AAAA,EAC1G;AAAA,EACA,SAAS;AACL,WAAO,KAAK,SAAS;AAAA,EACzB;AAAA,EACA,UAAU;AACN,WAAO,KAAK;AAAA,EAChB;AACJ;AACA,SAAS,SAAS;;;AC5GlB,IACI,qBAAqB,CAAC,QAAQ,SAAS,iCAAS;AADpD,IAEI,yBAAyB;AAF7B,IAGI,wBAAwB;AAAA,EACpB;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACJ;AAyBJ,IAAqB,oBAArB,cAA8CK,MAAK,MAAM,oBAAY,EAAE;AAAA,EAEnE,WAAW,gBAAgB;AACvB,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA,MAKH,OAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAYR,UAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAMX,UAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAMX,SAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAMV,eAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAMhB,IAAK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAUL,MAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAYP,UAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAMX,UAAW;AAAA,IACf;AAAA,EACJ;AAAA,EACA,WAAW,eAAe;AACtB,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MASH,UAAW;AAAA,IACf;AAAA,EACJ;AAAA,EACA,UAAU,QAAQ;AACd,QAAI,OAAO,WAAW,YAAY;AAC9B,eAAS;AAAA,QACL,UAAW;AAAA,MACf;AAAA,IACJ;AAEA,QAAI,CAAC,OAAO,MAAM;AACd,UAAI,WAAW,OAAO,OAAO,KAAK,KAAM,MAAM,QAAQ,OAAO,KAAK,KAAK,OAAO,MAAM,MAAM,WAAW,MAAM,GAAI;AAC3G,eAAO,OAAO;AAAA,MAClB,WACS,OAAO,iBAAiB,UAAU;AACvC,eAAO,OAAO;AAAA,MAClB;AAAA,IACJ,OAEK;AACD,UAAI,OAAO,SAAS,UAAU,OAAO,SAAS,QAAQ,CAAC,MAAM,QAAQ,OAAO,KAAK,GAAG;AAChF,eAAO,QAAQ,IAAI,KAAK,OAAO,KAAK;AAAA,MACxC,WACS,OAAO,SAAS,cAAc,OAAO,SAAS,QAAQ,CAAC,MAAM,QAAQ,OAAO,KAAK,GAAG;AACzF,eAAO,QAAQ,IAAI,SAAS,OAAO,KAAK;AAAA,MAC5C;AAAA,IACJ;AACA,UAAM,UAAU,MAAM;AAAA,EAC1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,IAAI,KAAK;AACL,QAAI,CAAC,KAAK,KAAK;AAGX,UAAI,KAAK,UAAU;AACf,aAAK,MAAM,kBAAiB,WAAW,cAAc,KAAK,kBAAkB;AAAA,MAChF,OACK;AACD,aAAK,MAAM,KAAK,YAAY,kBAAiB,WAAW,WAAW;AAAA,MACvE;AAAA,IACJ;AACA,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,IAAI,GAAG,IAAI;AACP,SAAK,MAAM;AAAA,EACf;AAAA,EACA,SAAS,iBAAiB;AA1L9B;AA2LQ,UAAM,KAAK;AAEX,QAAI,CAAC,GAAG,mBAAiB,QAAG,UAAH,mBAAU,oBAAmB,CAAC,GAAG,MAAM,eAAe;AAC3E,SAAG,MAAM,gBAAgB,IAAI,eAAe;AAAA,IAChD;AAAA,EACJ;AAAA,EACA,IAAI,WAAW;AACX,WAAO,KAAK,aAAa,KAAK;AAAA,EAClC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,IAAI,SAAS,UAAU;AACnB,SAAK,YAAY;AAAA,EACrB;AAAA,EACA,gBAAgB,WAAW;AACvB,UAAM,KAAK;AACX,QAAI;AAEJ,QAAI,GAAG,eAAe,SAAS,GAAG;AAE9B,uBAAiB,GAAG,eAAe,OAAO,oBAAoB,SAAS;AAAA,IAC3E,OACK;AACD,uBAAiB,UAAU,GAAG,QAAQ;AAAA,IAC1C;AACA,WAAO,GAAG,GAAG,QAAQ,EAAE,GAAG,QAAQ,cAAc,CAAC;AAAA,EACrD;AAAA,EACA,eAAe,UAAU;AACrB,SAAK,iBAAiB,SAAS,MAAM,GAAG;AAExC,SAAK,SAAS,UAAU;AAAA,EAC5B;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,IAAI,MAAM,OAAO;AACb,UAAM,KAAK;AACX,OAAG,SAAS;AAEZ,QAAI,MAAM,QAAQ,KAAK,MACnB,EAAE,MAAO,GAAG,UAAW,EAAE,EAAE,GAAG,IAAI,KACjC,MAAM,SAAS,KAAK,OAAO,MAAM,CAAC,MAAM,WAC1C;AACC,SAAG,eAAe,MAAM,IAAI,OAAK,GAAG,QAAQ,CAAC,CAAC;AAAA,IAClD,WACS,CAAC,GAAG,iBAAiB,MAAM,QAAQ,KAAK,KAAK,MAAM,SAAS,KAAK,OAAO,MAAM,CAAC,MAAM,UAAU;AACpG,SAAG,eAAe,MAAM,IAAI,OAAK,uBAAG,aAAa;AAAA,IACrD,WACS,CAAC,GAAG,iBAAiB,OAAO,UAAU,UAAU;AACrD,SAAG,eAAe,MAAM,YAAY;AAAA,IACxC,OACK;AACD,SAAG,eAAe,GAAG,QAAQ,KAAK;AAAA,IACtC;AAEA,OAAG,SAAS,OAAO;AAAA,EACvB;AAAA,EACA,IAAI,QAAQ;AACR,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,IAAI,cAAc;AACd,WAAO,KAAK;AAAA,EAChB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYA,IAAI,SAAS,UAAU;AACnB,SAAK,YAAY;AAEjB,SAAK,SAAS,UAAU;AAAA,EAC5B;AAAA,EACA,IAAI,WAAW;AACX,UAAM,KAAK;AACX,QAAI,GAAG,WAAW;AACd,aAAO,GAAG;AAAA,IACd;AACA,QAAI,MAAM,QAAQ,GAAG,WAAW,GAAG;AAC/B,aAAO;AAAA,IACX;AACA,WAAO,OAAO,GAAG,gBAAgB,WAAW,MAAM;AAAA,EACtD;AAAA,EACA,QAAQ,OAAO;AAxRnB;AA4RQ,QAAI,KAAK,aAAa,cAAc,EAAE,OAAO,KAAK,gBAAgB,YAAY,iBAAiB,OAAO;AAClG,UAAI,KAAK,aAAa,WAAW;AAC7B,gBAAQ,WAAW,UAAU,KAAK;AAAA,MACtC;AAEA,eAAQ,oCAAO,cAAP,YAAoB;AAAA,IAChC;AACA,YAAQ,CAAC,KAAK,iBAAkB,OAAO,UAAU,WAAY,MAAM,YAAY,IAAI;AACnF,WAAO;AAAA,EACX;AAAA,EACA,OAAO,WAAW;AACd,WAAO,KAAK,SAAS,SAAS;AAAA,EAClC;AAAA,EACA,WAAW,GAAG;AACV,WAAO,OAAO,CAAC,EAAE,WAAW,KAAK,WAAW;AAAA,EAChD;AAAA,EACA,SAAS,GAAG;AACR,WAAO,OAAO,CAAC,EAAE,SAAS,KAAK,WAAW;AAAA,EAC9C;AAAA,EACA,aAAa,GAAG;AACZ,WAAO,KAAK,YAAY,WAAW,KAAK,KAAK,YAAY,SAAS,CAAC;AAAA,EACvE;AAAA,EACA,gBAAgB,GAAG;AACf,WAAO,CAAC,KAAK,aAAa,CAAC;AAAA,EAC/B;AAAA,EACA,SAAS,GAAG;AACR,WAAO,KAAK,YAAY,WAAW,KAAK,OAAO,CAAC,EAAE,SAAS,KAAK,WAAW;AAAA,EAC/E;AAAA,EACA,eAAe,GAAG;AACd,WAAO,CAAC,KAAK,SAAS,CAAC;AAAA,EAC3B;AAAA,EACA,SAAS,GAAG;AACR,WAAO,WAAW,WAAW,GAAG,KAAK,WAAW;AAAA,EACpD;AAAA,EACA,QAAQ,GAAG;AACP,WAAO,MAAM,KAAK;AAAA,EACtB;AAAA,EACA,IAAI,GAAG;AACH,WAAO,aAAa,QAAQ,GAAG,KAAK,WAAW;AAAA,EACnD;AAAA,EACA,KAAK,GAAG;AACJ,WAAO,CAAC,aAAa,QAAQ,GAAG,KAAK,WAAW;AAAA,EACpD;AAAA,EACA,IAAI,GAAG;AACH,WAAO,aAAa,WAAW,GAAG,KAAK,WAAW;AAAA,EACtD;AAAA,EACA,KAAK,GAAG;AACJ,WAAO,aAAa,WAAW,GAAG,KAAK,WAAW,KAAK,aAAa,QAAQ,GAAG,KAAK,WAAW;AAAA,EACnG;AAAA,EACA,IAAI,GAAG;AACH,WAAO,aAAa,WAAW,GAAG,KAAK,WAAW;AAAA,EACtD;AAAA,EACA,KAAK,GAAG;AACJ,WAAO,aAAa,WAAW,GAAG,KAAK,WAAW,KAAK,aAAa,QAAQ,GAAG,KAAK,WAAW;AAAA,EACnG;AAAA,EACA,IAAI,GAAG;AACH,WAAO,aAAa,UAAU,GAAG,KAAK,WAAW;AAAA,EACrD;AAAA,EACA,QAAQ,GAAG;AACP,UAAM,CAAC,OAAO,GAAG,IAAI,KAAK;AAC1B,YAAQ,aAAa,WAAW,GAAG,KAAK,KAAK,aAAa,QAAQ,GAAG,KAAK,OACrE,aAAa,WAAW,GAAG,GAAG,KAAK,aAAa,QAAQ,GAAG,GAAG;AAAA,EACvE;AAAA,EACA,WAAW,GAAG;AACV,WAAO,CAAC,KAAK,QAAQ,CAAC;AAAA,EAC1B;AAAA,EACA,MAAM,GAAG;AACL,WAAO,MAAM,UAAa,MAAM,QAAQ,OAAO,CAAC,EAAE,WAAW;AAAA,EACjE;AAAA,EACA,SAAS,GAAG;AACR,WAAO,CAAC,KAAK,MAAM,CAAC;AAAA,EACxB;AAAA,EACA,QAAQ,GAAG;AAEP,WAAO,KAAK,QAAQ,CAAC;AAAA,EACzB;AAAA,EACA,WAAW,GAAG;AACV,WAAO,KAAK,QAAQ,CAAC;AAAA,EACzB;AAAA,EACA,YAAY,GAAG;AACX,WAAO,KAAK,QAAQ,CAAC;AAAA,EACzB;AAAA,EACA,WAAW,GAAG;AACV,WAAO,KAAK,QAAQ,CAAC;AAAA,EACzB;AAAA,EACA,WAAW,GAAG;AACV,WAAO,KAAK,QAAQ,CAAC;AAAA,EACzB;AAAA,EACA,WAAW,GAAG;AACV,WAAO,KAAK,QAAQ,CAAC;AAAA,EACzB;AAAA,EACA,YAAY,GAAG;AACX,WAAO,KAAK,QAAQ,CAAC;AAAA,EACzB;AAAA,EACA,YAAY,GAAG;AACX,WAAO,KAAK,QAAQ,CAAC;AAAA,EACzB;AAAA,EACA,YAAY,GAAG;AACX,WAAO,KAAK,QAAQ,CAAC;AAAA,EACzB;AAAA,EACA,WAAW,GAAG;AACV,WAAO,KAAK,QAAQ,CAAC;AAAA,EACzB;AAAA,EACA,WAAW,GAAG;AACV,WAAO,KAAK,QAAQ,CAAC;AAAA,EACzB;AAAA,EACA,WAAW,GAAG;AACV,WAAO,KAAK,QAAQ,CAAC;AAAA,EACzB;AAAA,EACA,aAAa,GAAG;AACZ,WAAO,KAAK,QAAQ,CAAC;AAAA,EACzB;AAAA,EACA,OAAO,GAAG;AACN,WAAO,MAAM;AAAA,EACjB;AAAA,EACA,QAAQ,GAAG;AACP,WAAO,MAAM;AAAA,EACjB;AAAA;AAAA,EAEA,wBAAwB;AACpB,SAAK,eAAe,kBAAiB,qBAAqB,KAAK,SAAS,EACnE,IAAI,UAAQ,KAAK,QAAQ,CAAC;AAAA,EACnC;AAAA,EACA,OAAO,qBAAqB,cAAc,MAAM,oBAAI,KAAK,GAAG;AACxD,QAAI,YAAY,eAAe,OAAO,aAAa,WAAW,OAAO;AACrE,YAAQ,cAAc;AAAA,MAClB,KAAK;AACD,eAAO,CAAC,WAAW,MAAM,KAAK,QAAQ,GAAG,GAAG;AAAA,MAChD,KAAK;AACD,qBAAa,WAAW,MAAM,KAAK,OAAO;AAC1C,eAAO,CAAC,YAAY,WAAW,IAAI,YAAY,GAAG,KAAK,CAAC;AAAA,MAC5D,KAAK;AACD,qBAAa,WAAW,MAAM,KAAK,OAAO;AAC1C,eAAO,CAAC,WAAW,IAAI,YAAY,IAAI,KAAK,GAAG,UAAU;AAAA,MAC7D,KAAK;AACD,wBAAgB,WAAW,kBAAkB,GAAG;AAChD,eAAO,CAAC,eAAe,WAAW,IAAI,eAAe,GAAG,KAAK,CAAC;AAAA,MAClE,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AACD,gBAAQ,aAAa,YAAY,EAAE,MAAM,sBAAsB;AAC/D,YAAI,CAAC,OAAO;AACR,gBAAM,IAAI,MAAM,0CAA0C,cAAc;AAAA,QAC5E;AACA,SAAC,EAAE,OAAO,QAAQ,IAAI;AACtB,sBAAc,KAAK;AACnB,oBAAY,WAAW,MAAM,KAAK,WAAW;AAC7C,YAAI,UAAU,QAAQ;AAClB,sBAAY,WAAW,IAAI,WAAW,GAAG,QAAQ;AAAA,QACrD,WACS,UAAU,QAAQ;AACvB,sBAAY,WAAW,IAAI,WAAW,IAAI,QAAQ;AAAA,QACtD;AACA,eAAO,CAAC,WAAW,WAAW,IAAI,WAAW,GAAG,QAAQ,CAAC;AAAA,IACjE;AAAA,EACJ;AAAA;AAAA,EAEA,OAAO,wBAAwB,SAAS;AACpC,QAAI,CAAC,WAAY,CAAC,QAAQ,UAAU,CAAC,QAAQ,OAAQ;AACjD,aAAO,eAAe;AAAA,IAC1B;AACA,eAAWC,WAAU,SAAS;AAC1B,UAAIA,QAAO,SAAS,UAAU,sBAAsB,SAASA,QAAO,SAAS,GAAG;AAC5E,QAAAA,QAAO,sBAAsB;AAAA,MACjC;AAAA,IACJ;AACA,WAAO,SAAS,WAAW;AACvB,UAAI,QAAQ;AACZ,iBAAWA,WAAU,SAAS;AAE1B,YAAI,CAACA,QAAO,UAAU;AAClB,kBAAQA,QAAO,OAAO,SAAS;AAAA,QACnC;AACA,YAAI,CAAC,OAAO;AACR;AAAA,QACJ;AAAA,MACJ;AACA,aAAO;AAAA,IACX;AAAA,EACJ;AACJ;AAnaA,IAAqB,mBAArB;AACI,cADiB,kBACV,SAAQ;AAmanB,iBAAiB,SAAS;;;ACld1B,IAAMC,YAAW,aAAa,eAAe,YAAY,oBAAoB,uBAAO,OAAO,IAAI,CAAC;AAOhG,IAAqB,WAArB,MAA8B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAM1B,OAAO,WAAW,SAAS,eAAe;AAGtC,WAAO,UAAUA,UAAS,MAAM,KAAKA,UAAS,MAAM,KAAK,KAAK;AAAA,EAClE;AACJ;AACA,SAAS,SAAS;;;ACkBlB,IAAqB,mBAArB,cAA8CC,MAAK;AAAA,EAC/C,WAAW,gBAAgB;AACvB,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA,MAKH,UAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAMX,WAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAMZ,QAAS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAMT,SAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAMV,IAAK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAeL,eAAgB;AAAA,IACpB;AAAA,EACJ;AAAA,EACA,UAAU,QAAQ;AACd,QAAI,OAAO,WAAW,YAAY;AAC9B,eAAS;AAAA,QACL,QAAS;AAAA,MACb;AAAA,IACJ;AACA,UAAM,UAAU,MAAM;AAAA,EAC1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,IAAI,KAAK;AACL,WAAO,KAAK,QAAQ,KAAK,MAAM,KAAK,YAAY,SAAS,WAAW,UAAU;AAAA,EAClF;AAAA,EACA,IAAI,GAAG,IAAI;AACP,SAAK,MAAM;AAAA,EACf;AAAA,EACA,IAAI,OAAO,QAAQ;AACf,SAAK,UAAU;AAAA,EACnB;AAAA,EACA,IAAI,SAAS;AACT,QAAI,KAAK,SAAS;AACd,aAAO,KAAK;AAAA,IAChB;AACA,WAAO,KAAK;AAAA,EAChB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,cAAc,KAAK,KAAK;AACpB,UACI,KAAuC,MACvC,EAAE,SAAS,UAAU,cAAc,IAAI,IACvC,aAAuC,GAAG,UAAU,YAAY,MAAM,SAAS,KAAK;AACxF,UAAM,IAAI,QAAQ;AAClB,UAAM,IAAI,QAAQ;AAClB,QAAI,SAAS;AACT,YAAM,QAAQ,GAAG;AACjB,YAAM,QAAQ,GAAG;AAAA,IACrB;AACA,QAAI,iBAAiB,OAAO,QAAQ,OAAO,QAAQ,OAAO,QAAQ,UAAU;AAExE,UAAI,kBAAkB,MAAM;AACxB,eAAO,OAAO,GAAG,EAAE,cAAc,GAAG;AAAA,MACxC;AAEA,UAAI,OAAO,kBAAkB,UAAU;AACnC,eAAO,OAAO,GAAG,EAAE,cAAc,KAAK,aAAa;AAAA,MACvD;AAEA,UAAI,OAAO,kBAAkB,UAAU;AACnC,eAAO,OAAO,GAAG,EAAE,cAAc,KAAK,cAAc,QAAQ,aAAa;AAAA,MAC7E;AAAA,IACJ;AACA,YAAS,MAAM,MAAO,IAAK,MAAM,MAAM,KAAK,KAAM;AAAA,EACtD;AAAA,EACA,OAAO,qBAAqB,SAAS,YAAY;AAC7C,UAAM,QAAQ,QAAQ,eAAe,QAAQ,SAAS,SAClD,IAAI,MAAM;AACd,WAAO,CAAC,KAAK,QAAQ;AACjB,UAAI,MAAM;AACV,WAAK,IAAI,GAAG,IAAI,GAAG,EAAE,GAAG;AACpB,eAAO,MAAM,CAAC,EAAE,OAAO,KAAK,GAAG;AAC/B,YAAI,MAAM;AACN,iBAAO;AAAA,QACX;AAAA,MACJ;AACA,aAAO,aAAa,WAAW,KAAK,GAAG,IAAI;AAAA,IAC/C;AAAA,EACJ;AACJ;AACA,iBAAiB,SAAS;;;AC7J1B,IACI,UAA0B,MAAM;AADpC,IAEI,uBAA0B,CAAC,GAAG,MAAM,IAAI;AAF5C,IAGI,0BAA0B,OAAO,yBAAyB;AAH9D,IAIIC,cAA0B,OAAO,OAAO,CAAC,CAAC;AAJ9C,IAKI,YAA0B,OAAO,OAAO;AAAA,EACpC,QAAW;AAAA,EACX,OAAWA;AAAA,EACX,SAAWA;AAAA,EACX,UAAWA;AACf,CAAC;AAVL,IAWI,cAA0B,OAAO,OAAO;AAAA,EACpC,QAAW;AAAA,EACX,OAAWA;AAAA,EACX,SAAWA;AAAA,EACX,UAAWA;AACf,CAAC;AAhBL,IAiBI,WAAyB;AAAA,EACrB,QAAS;AAAA,EACT,QAAS;AACb;AAEJ,SAAS,eAAe,MAAM,OAAO,KAAK;AAEtC,MAAI,MAAM,WAAW,OAAO;AACxB,UAAM,IAAI,KAAK,IAAI;AAAA,EACvB,OAEK;AACD,QAAI,MAAM,MAAM,IAAI,GAAG;AAEvB,QAAI,CAAC,KAAK;AACN,YAAM,oBAAI,IAAI;AACd,YAAM,IAAI,KAAK,GAAG;AAAA,IACtB;AAEA,QAAI,IAAI,IAAI;AAAA,EAChB;AACJ;AAEA,SAAS,oBAAoB,MAAM,OAAO,KAAK;AAE3C,MAAI,MAAM,WAAW,OAAO;AACxB,UAAM,OAAO,GAAG;AAAA,EACpB,WACS,MAAM,IAAI,GAAG,GAAG;AAErB,UAAM,IAAI,GAAG,EAAE,OAAO,IAAI;AAE1B,QAAI,CAAC,MAAM,IAAI,GAAG,EAAE,MAAM;AACtB,YAAM,OAAO,GAAG;AAAA,IACpB;AAAA,EACJ;AACJ;AAGA,SAAS,iBAAiB,QAAQ,SAAS,UAAU,YAAY;AAC7D,WAAS,IAAI,GAAG,IAAI,OAAO,QAAQ,KAAK;AACpC,UAAM,OAAO,OAAO,CAAC;AACrB,aAAS,IAAI,GAAG,IAAI,YAAY,KAAK;AACjC,YACI,UAAU,SAAS,CAAC,GACpB,MAAU,KAAK,OAAO,GACtB,QAAU,QAAQ,OAAO;AAC7B,qBAAe,MAAM,OAAO,GAAG;AAAA,IACnC;AAAA,EACJ;AACJ;AAgBA,IAAqB,aAArB,cAAwCC,MAAK,MAAM,cAAM,EAAE;AAAA,EAA3D;AAAA;AACI,yCAAgB;AAChB,wCAAe;AAAA;AAAA;AAAA,EAEf,WAAW,eAAe;AACtB,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAMH,YAAa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAYb,WAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAMZ,YAAa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAMb,UAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAOX,SAAU;AAAA,QACN,SAAU,CAAC,MAAM;AAAA,QACjB,OAAU,CAAC;AAAA,MACf;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,IAAI,eAAe;AACf,WAAO;AAAA,EACX;AAAA;AAAA;AAAA,EAGA,UAAU,QAAQ;AASd,SAAK,aAAa;AAClB,SAAK,UAAU,CAAC;AAChB,UAAM,UAAU,MAAM;AAAA,EAC1B;AAAA,EACA,YAAY;AA9JhB;AA+JQ,UAAM,UAAU;AAChB,UAAM,KAAK;AACX,OAAG,QAAQ,SAAS;AACpB,QAAI,GAAG,YAAY;AACf,SAAG,gBAAgB,SAAS;AAC5B,SAAG,QAAQ,QAAQ;AAAA,IACvB;AACA,aAAG,aAAH,mBAAa;AAAA,EACjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,QAAQ;AACJ,UACI,KAAU,MACV,UAAU,GAAG,QAAQ,MAAM;AAC/B,QAAI,GAAG,YAAY;AACf,SAAG,QAAQ,SAAS;AACpB,UAAI,GAAG,iBAAiB;AACpB,WAAG,gBAAgB,SAAS;AAAA,MAChC;AACA,SAAG,kBAAkB;AAErB,SAAG;AACH,SAAG,QAAQ,UAAU;AAAA,QACjB,QAAS;AAAA,QACT;AAAA,MACJ,CAAC;AAAA,IACL;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA,OAAO,OAAOC,MAAK;AACf,QAAI,MAAM,cAAc;AACpB,cAAQ,MAAM;AAAA,IAClB;AACA,QAAI,MAAM,WAAW,KAAK,OAAO;AAC7B,UAAI,EAAE,OAAO,IAAI;AACjB,UAAIA,MAAK;AACL,gBAAQ,MAAM,IAAIA,IAAG;AACrB,iBAAS,OAAO,IAAIA,IAAG;AAAA,MAC3B;AACA,aAAO,YAAY,MAAM,OAAO,MAAM,EAAE,OAAO,WAAW,KAAK;AAAA,IACnE;AACA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAkBA,cAAc,EAAE,QAAQ,gBAAgB,SAAS,OAAO,eAAe,MAAM,GAAG;AAC5E,UAAM,KAAK;AACX,QAAI,gBAAgB;AAKpB,QAAI,GAAG,cAAc,CAAC,cAAc;AAChC,YAAM,iBAAiB,QAAQ,cAAc;AAE7C,UAAI,CAAC,gBAAgB;AACjB,yBAAiB,OAAO,MAAM;AAC9B,iBAAS;AAAA,MACb,WAES,QAAQ;AACb,yBAAiB,GAAG;AACpB,WAAG,UAAU,OAAO,MAAM;AAAA,MAC9B;AACA,+BAAyB,GAAG;AAC5B,SAAG,kBAAkB,eAAe,MAAM;AAAA,IAC9C,OACK;AACD,uBAAiB,GAAG;AACpB,SAAG,UAAU,OAAO,MAAM;AAC1B,uBAAiB;AACjB,UAAI,GAAG,cAAc,gBAAgB,GAAG,YAAY;AAChD,WAAG,kBAAkB;AACrB,WAAG,kBAAkB,GAAG,QAAQ,OAAO,GAAG,cAAc;AAAA,MAC5D,WACS,GAAG,iBAAiB;AACzB,WAAG,gBAAgB,SAAS;AAAA,MAChC;AAAA,IACJ;AACA,OAAG,kBAAkB;AACrB,OAAG,eAAe;AAElB,OAAG;AACH,QAAI,CAAC,QAAQ;AACT,SAAG,QAAQ,UAAU;AAAA,QACjB,QAAS;AAAA,QACT;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACJ,CAAC;AAAA,IACL;AAAA,EACJ;AAAA,EACA,IAAI,OAAO,QAAQ;AAEf,SAAK,kBAAkB;AACvB,SAAK,OAAO,GAAG,KAAK,QAAQ,QAAQ,MAAM;AAAA,EAC9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,IAAI,SAAS;AACT,WAAO,KAAK,aAAa,KAAK,kBAAkB,KAAK;AAAA,EACzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,IAAI,iBAAiB;AACjB,WAAO,KAAK;AAAA,EAChB;AAAA;AAAA;AAAA;AAAA,EAIA,CAAC,OAAO,QAAQ,IAAI;AAChB,WAAO,KAAK,OAAO,OAAO,QAAQ,EAAE;AAAA,EACxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,QAAQC,KAAI,gBAAgB,OAAO;AAC/B,KAAC,KAAK,cAAc,CAAC,gBAAgB,KAAK,kBAAkB,KAAK,SAAS,QAAQA,GAAE;AAAA,EACxF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,IAAIA,KAAI,gBAAgB,OAAO;AAC3B,YAAQ,KAAK,cAAc,CAAC,gBAAgB,KAAK,kBAAkB,KAAK,SAAS,IAAIA,GAAE;AAAA,EAC3F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,KAAKA,KAAI,gBAAgB,OAAO;AAC5B,YAAQ,KAAK,cAAc,CAAC,gBAAgB,KAAK,kBAAkB,KAAK,SAAS,KAAKA,GAAE;AAAA,EAC5F;AAAA,EACA,IAAI,QAAQ;AACR,WAAO,KAAK,OAAO,CAAC;AAAA,EACxB;AAAA,EACA,IAAI,OAAO;AACP,WAAO,KAAK,OAAO,KAAK,QAAQ,CAAC;AAAA,EACrC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,IAAI,YAAY;AACZ,WAAO,KAAK;AAAA,EAChB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,IAAI,cAAc;AACd,WAAO,KAAK;AAAA,EAChB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAeA,MAAM,OAAO,cAAc,MAAM;AAC7B,UACI,KAAc,MACd,EAAE,QAAQ,IAAI,IACd,WAAc,CAAC;AAEnB,OAAG,QAAQ,UAAQ;AACf,YAAM,cAAc,MAAM,IAAI,KAAK,IAAI,IAAI;AAG3C,UAAI,aAAa;AACb,cACI,QAAc,GAAG,QAAQ,MAAM,IAAI,GACnC,cAAc,QAAQ,KAAK;AAE/B,gBAAQ,KAAK,IAAI;AAEjB,WAAG,kBAAkB,WAAW;AAChC,WAAG,aAAa,WAAW;AAAA,MAC/B,WACS,aAAa;AAClB,iBAAS,KAAK,IAAI;AAAA,MACtB;AAAA,IACJ,CAAC;AACD,QAAI,SAAS,QAAQ;AACjB,SAAG,OAAO,QAAQ;AAAA,IACtB;AAEA,QAAI,GAAG,YAAY;AACf,SAAG,kBAAkB,GAAG,QAAQ,OAAO,GAAG,cAAc;AAAA,IAC5D;AACA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAeA,OAAO,OAAO;AACV,QAAI,MAAM,WAAW,GAAG;AACpB,WAAK,OAAO,KAAK,QAAQ,QAAQ,MAAM,GAAG,KAAK;AAAA,IACnD,OACK;AACD,WAAK,OAAO,KAAK,QAAQ,QAAQ,MAAM,KAAK;AAAA,IAChD;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAaA,UAAU,OAAO;AACb,QAAI,MAAM,WAAW,GAAG;AACpB,WAAK,OAAO,GAAG,GAAG,KAAK;AAAA,IAC3B,OACK;AACD,WAAK,OAAO,GAAG,KAAK;AAAA,IACxB;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,KAAK,OAAO,YAAY;AACpB,YAAQ,YAAY,QAAQ,KAAK;AAEjC,WAAO,MAAM,UAAU,MAAM,CAAC,MAAM,YAAY;AAC5C,YAAM,MAAM;AAAA,IAChB;AACA,QAAI,CAAC,MAAM,QAAQ;AACf;AAAA,IACJ;AACA,UACI,KAAc,MACd,EAAE,QAAQ,IAAI,IACd,YAAc,GAAG,QAAQ,MAAM,CAAC,GAAG,IAAI;AAE3C,QAAI,MAAM,WAAW,KAAK,QAAQ,YAAY,CAAC,MAAM,YAAY;AAC7D;AAAA,IACJ;AAEA,OAAG,cAAc;AACjB,OAAG,OAAO,KAAK;AACf,OAAG,aAAa;AAChB,UAAM,cAAc,aAAa,GAAG,QAAQ,YAAY,IAAI,IAAI,QAAQ;AACxE,QAAI,gBAAgB,IAAI;AACpB,YAAM,IAAI,MAAM,oEAAoE;AAAA,IACxF;AACA,YAAQ,OAAO,aAAa,GAAG,GAAG,KAAK;AACvC,OAAG,kBAAkB;AACrB,OAAG,QAAQ,UAAU;AAAA,MACjB,QAAS;AAAA,MACT;AAAA,MACA,MAAS;AAAA,MACT,IAAS;AAAA,IACb,CAAC;AACD,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAeA,OAAO,QAAQ,GAAG,aAAa,OAAO;AAClC,UACI,KAAa,MACb,aAAa,GAAG,YAChB,SAAa,GAAG,SAChB,SAAa,CAAC,GACd,UAAa,CAAC,GACd,WAAa,CAAC,GACd,WAAa,GAAG;AACpB,QAAI,OACA;AAOJ,QAAI,GAAG,QAAQ,gBAAgB,EAAE,OAAO,UAAU,MAAM,CAAC,MAAM,OAAO;AAClE;AAAA,IACJ;AACA,QAAI,OAAO;AACP,UAAI,MAAM,WAAW,KAAK,MAAM,QAAQ,MAAM,CAAC,CAAC,GAAG;AAC/C,gBAAQ,MAAM,CAAC;AAAA,MACnB;AAEA,UAAI,YAAY,MAAM,QAAQ;AAE1B,cAAM,UAAU,GAAG,QAAQ,UAAU;AACrC,gBAAQ,CAAC;AACT,iBAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AACnC,gBACI,UAAgB,MAAM,CAAC,GACvB,KAAgB,QAAQ,UAAU,GAClC,eAAgB,QAAQ,IAAI,EAAE,GAC9B,gBAAgB,eAAe,OAAO,QAAQ,YAAY,IAAI;AAElE,iBAAO,EAAE,IAAI;AAGb,cAAI,kBAAkB,IAAI;AAEtB,gBAAI,OAAO,aAAa,MAAM,SAAS;AACnC,uBAAS,KAAK,CAAC,OAAO,aAAa,GAAG,OAAO,CAAC;AAC9C,qBAAO,aAAa,IAAI;AAAA,YAC5B;AAAA,UACJ,OACK;AACD,kBAAM,KAAK,OAAO;AAAA,UACtB;AAAA,QACJ;AAAA,MACJ,OAEK;AACD,gBAAQ;AAAA,MACZ;AAAA,IACJ;AACA,QAAI,UAAU;AAEV,UAAI,OAAO,aAAa,UAAU;AAE9B,mBAAW,KAAK,IAAI,UAAU,OAAO,SAAS,KAAK;AACnD,iBAAS,cAAc,OAAO,UAAU,EAAE,UAAU;AAChD,gBAAM,KAAK,OAAO,WAAW,EAAE,UAAU;AAEzC,cAAI,OAAO,EAAE,GAAG;AACZ;AACA;AAAA,UACJ,OAEK;AACD,oBAAQ,KAAK,OAAO,WAAW,CAAC;AAChC,mBAAO,OAAO,aAAa,CAAC;AAC5B,sBAAU;AAAA,UACd;AAAA,QACJ;AAAA,MACJ,OAEK;AACD,YAAI,aAAa,MAAM,WAAW,GAC9B;AACJ,mBAAW,YAAY,QAAQ,QAAQ;AAGvC,cAAM,gBAAgB,SAAS,OAAO,CAAC,QAAQ,SAAS;AACpD,gBACI,YAAY,OAAO,SAAS,UAC5B,MAAY,YAAY,OAAO,GAAG,QAAQ,MAAM,IAAI;AAExD,cAAI,eAAe,WAAW,QAAQ,QAAQ,UAAU,KAAK,YAAY;AACrE,yBAAa;AAAA,UACjB;AAEA,cAAI,OAAO,KAAK,MAAM,UAAU;AAC5B,mBAAO,KAAK,GAAG;AAAA,UACnB;AACA,oBAAU;AACV,iBAAO;AAAA,QACX,GAAG,CAAC,CAAC,EAAE,KAAK,oBAAoB;AAEhC,YAAI,YAAY;AAGZ,cAAI,cAAc,QAAQ;AACtB,oBAAQ,KAAK,MAAM,SAAS,QAAQ;AACpC,mBAAO,OAAO,cAAc,cAAc,SAAS,CAAC,GAAG,cAAc,MAAM;AAC3E,sBAAU;AAAA,UACd;AAAA,QACJ,OACK;AAGD,mBAAS,IAAI,GAAG,IAAI,cAAc,QAAQ,KAAK;AAC3C,kBAAM,cAAc,cAAc,CAAC;AACnC,gBAAI,gBAAgB,IAAI;AACpB,oBAAM,KAAK,OAAO,WAAW,EAAE,UAAU;AAEzC,kBAAI,CAAC,OAAO,EAAE,GAAG;AACb,wBAAQ,QAAQ,OAAO,WAAW,CAAC;AACnC,uBAAO,OAAO,aAAa,CAAC;AAC5B,0BAAU;AAAA,cACd;AAAA,YACJ;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ;AAEA,UAAI,QAAQ,UAAU,CAAC,GAAG,iBAAiB;AACvC,gBAAQ,QAAQ,GAAG,mBAAmB,EAAE;AAAA,MAC5C;AAAA,IACJ;AAEA,QAAI,MAAM,QAAQ;AACd,aAAO,OAAO,KAAK,IAAI,OAAO,OAAO,MAAM,GAAG,GAAG,GAAG,KAAK;AACzD,gBAAU;AAEV,UAAI,CAAC,GAAG,iBAAiB;AACrB,cAAM,QAAQ,GAAG,cAAc,EAAE;AAAA,MACrC;AACA,UAAI,CAAC,GAAG,cAAc;AAClB,WAAG,eAAe,oBAAI,IAAI;AAAA,MAC9B;AACA,iBAAW,SAAS,OAAO;AACvB,WAAG,aAAa,IAAI,KAAK;AAAA,MAC7B;AAAA,IACJ;AACA,QAAI,QAAQ,UAAU,GAAG,cAAc;AACnC,iBAAW,SAAS,SAAS;AACzB,WAAG,aAAa,OAAO,KAAK;AAAA,MAChC;AAAA,IACJ;AAEA,QAAI,SAAS,UAAU,CAAC,GAAG,iBAAiB;AACxC,eAAS,QAAQ,SAAO;AACpB,WAAG,kBAAkB,IAAI,CAAC,CAAC;AAC3B,WAAG,aAAa,IAAI,CAAC,CAAC;AAAA,MAC1B,CAAC;AAAA,IACL;AAGA,QAAI,WAAW,SAAS,QAAQ;AAE5B,UAAI,GAAG,UAAU;AACb,WAAG,iBAAiB;AAAA,MACxB,WAES,GAAG,YAAY;AACpB,YAAI,GAAG,YAAY;AACf,aAAG,iBAAiB,EAAE,QAAS,UAAU,UAAW,EAAE,CAAC;AAAA,QAC3D,OACK;AACD,aAAG,gBAAgB,OAAO,KAAK,IAAI,OAAO,GAAG,gBAAgB,MAAM,GAAG,GAAG,GAAG,KAAK;AAAA,QACrF;AAAA,MACJ;AAEA,SAAG;AAeH,SAAG,QAAQ,UAAU;AAAA,QACjB,QAAS;AAAA,QACT;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACJ,CAAC;AAAA,IACL,OACK;AAWD,SAAG,QAAQ,YAAY;AAAA,QACnB;AAAA,QACA;AAAA,QACA;AAAA,MACJ,CAAC;AAAA,IACL;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,SAAS,MAAM,OAAO;AAClB,UACI,KAAiB,MACjB,EAAE,WAAW,IAAI,IACjB,QAAiB,SAAS,OAAO,IAAI,IAAI,OAAO,KAAK,UAAU,GAC/D,SAAiB,GAAG,IAAI,KAAK;AACjC,QAAI,QAAQ;AACR,YAAM,iBAAiB,GAAG,IAAI,KAAK;AACnC,UAAI,kBAAkB,WAAW,gBAAgB;AAC7C,cAAM,IAAI,MAAM,uBAAuB,yCAAyC,OAAO;AAAA,MAC3F;AACA,SAAG,iBAAiB,MAAM,YAAY,KAAK;AAC3C,SAAG,cAAc,MAAM,YAAY,KAAK;AAExC,aAAO,UAAU,IAAI;AAAA,IACzB;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,IAAI,IAAI,gBAAgB,OAAO;AAC3B,WAAO,KAAK,MAAM,KAAK,YAAY,IAAI,aAAa;AAAA,EACxD;AAAA,EACA,MAAM,OAAO,gBAAgB,OAAO;AAChC,QAAI,KAAK,cAAc,CAAC,eAAe;AACnC,aAAO,KAAK,gBAAgB,KAAK;AAAA,IACrC,OACK;AACD,aAAO,KAAK,QAAQ,KAAK;AAAA,IAC7B;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYA,MAAM,cAAc,OAAO,gBAAgB,OAAO;AAC9C,WAAO,KAAK,SAAS,cAAc,OAAO,KAAK,cAAc,aAAa;AAAA,EAC9E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,IAAI,QAAQ;AACR,WAAO,KAAK,OAAO;AAAA,EACvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,IAAI,aAAa;AACb,WAAO,KAAK,QAAQ;AAAA,EACxB;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,iBAAiB,YAAY;AACzB,SAAK,SAAS,EAAE,UAAW,YAAY,QAAS,KAAK,CAAC;AAAA,EAC1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,cAAc,SAAS;AACnB,WAAO,IAAI,WAAW;AAAA,MAClB,QAAoB,YAAY,QAAQ,OAAO;AAAA,MAC/C,mBAAoB;AAAA,QAChB,QAAU;AAAA,QACV,SAAU;AAAA,MACd;AAAA,IACJ,CAAC;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAwBA,UAAU,QAAQ;AACd,UAAM,SAAU,kBAAkB,mBAAoB,SAAS,IAAI,iBAAiB,MAAM;AAC1F,SAAK,QAAQ,IAAI,MAAM;AACvB,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,IAAI,WAAW;AAh1BnB;AAi1BQ,WAAO,SAAQ,UAAK,aAAL,mBAAe,KAAK;AAAA,EACvC;AAAA,EACA,mBAAmB;AACf,UAAM,KAAK;AACX,OAAG,gBAAgB;AACnB,OAAG,eAAe;AAClB,OAAG,QAAQ,KAAK,GAAG,YAAY;AAC/B,OAAG,QAAQ,UAAU,SAAS;AAAA,EAClC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,IAAI,eAAe;AACf,QAAI,CAAC,KAAK,eAAe;AACrB,UAAI,KAAK,UAAU;AACf,aAAK,gBAAgB,iBAAiB,qBAAqB,KAAK,QAAQ,MAAM;AAAA,MAClF,OACK;AACD,aAAK,gBAAgB;AAAA,MACzB;AAAA,IACJ;AACA,WAAO,KAAK;AAAA,EAChB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,IAAI,UAAU;AACV,QAAI,CAAC,KAAK,UAAU;AAChB,WAAK,WAAW,IAAI,WAAW;AAAA,QAC3B,mBAAoB;AAAA,UAChB,QAAU;AAAA,UACV,SAAU;AAAA,QACd;AAAA,MACJ,CAAC;AAAA,IACL;AACA,WAAO,KAAK;AAAA,EAChB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAyBA,UAAUC,SAAQ;AACd,UAAM,SAAUA,mBAAkB,mBAAoBA,UAAS,IAAI,iBAAiBA,OAAM;AAC1F,SAAK,QAAQ,IAAI,MAAM;AACvB,WAAO;AAAA,EACX;AAAA,EACA,aAAaA,SAAQ;AACjB,UAAM,EAAE,QAAQ,IAAI;AACpB,QAAI,CAACA,QAAO,oBAAoB;AAC5B,MAAAA,UAAS,QAAQ,IAAIA,OAAM;AAAA,IAC/B;AACA,YAAQ,OAAOA,OAAM;AAAA,EACzB;AAAA,EACA,eAAe;AACX,SAAK,QAAQ,MAAM;AAAA,EACvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,IAAI,aAAa;AACb,WAAO,QAAQ,KAAK,YAAY,KAAK,SAAS,KAAK;AAAA,EACvD;AAAA,EACA,iBAAiB,EAAE,QAAQ,SAAU,MAAM,SAAS,GAAG;AACnD,UACI,KAAc,MACd,aAAc,YAAa,WAAW,WAAW,KAAK,SAAU,GAAG,kBAAkB,GAAG;AAC5F,OAAG,kBAAkB;AACrB,OAAG,kBAAkB,GAAG,QAAQ,OAAO,GAAG,cAAc;AACxD,OAAG,kBAAkB;AACrB,UAAM;AAAA,MACF,OAAW;AAAA,MACX,UAAW;AAAA,IACf,IAAI,YAAY,MAAM,GAAG,iBAAiB,YAAY,IAAI;AAC1D,OAAG,QAAQ,UAAU,EAAE,GAAG,aAAa,OAAO,QAAQ,CAAC;AAAA,EAC3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,IAAI,iBAAiB;AACjB,QAAI,CAAC,KAAK,iBAAiB;AACvB,UAAI,KAAK,YAAY;AACjB,aAAK,kBAAkB,iBAAiB,wBAAwB,KAAK,QAAQ,MAAM;AAAA,MACvF,OACK;AACD,aAAK,kBAAkB,eAAe;AAAA,MAC1C;AAAA,IACJ;AACA,WAAO,KAAK;AAAA,EAChB;AAAA;AAAA;AAAA,EAGA,gBAAgB,WAAW;AACvB,UAAM,OAAO,YAAY,QAAQ,SAAS;AAE1C,WAAO,KAAK,IAAI,YAAU;AACtB,UAAI,OAAO,WAAW,UAAU;AAC5B,eAAO,EAAE,UAAW,QAAQ,QAAS,KAAK;AAAA,MAC9C;AACA,aAAO;AAAA,IACX,CAAC;AAAA,EACL;AAAA,EACA,gBAAgB,WAAW;AACvB,aAAS,IAAI,GAAG,IAAI,UAAU,QAAQ,KAAK;AACvC,WAAK,SAAS,UAAU,CAAC,CAAC;AAAA,IAC9B;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA,SAAS,aAAa;AAClB,UAAM,KAAK;AAEX,QAAI,aAAa;AACb,OAAC,GAAG,aAAa,GAAG,WAAW,CAAC,IAAI,YAAY,QAAQ,IAAI,oBAAI,IAAI;AAEpE,aAAO,OAAO,GAAG,SAAS,YAAY,QAAQ,GAAG,WAAW;AAE5D,SAAG,kBAAkB;AACrB,UAAI,YAAY,aAAa;AACzB,WAAG,oBAAoB;AAAA,MAC3B;AAAA,IAiBJ;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAeA,UAAU,cAAc,OAAO,gBAAgB,OAAO;AAClD,UAAM,OAAO,KAAK,SAAS,cAAc,OAAO,aAAa;AAC7D,QAAI,CAAC,MAAM;AACP,aAAO;AAAA,IACX;AACA,UAAM,SAAS,KAAK,cAAc,CAAC,gBAAgB,KAAK,kBAAkB,KAAK;AAC/E,WAAO,OAAO,QAAQ,IAAI;AAAA,EAC9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAcA,SAAS,cAAc,OAAO,gBAAgB,OAAO;AAtiCzD;AAuiCQ,UACI,KAAiB,MACjB,EAAE,WAAW,IAAI,IACjB,QAAiB,cAAc,CAAC,gBAC1B,GAAG,QAAQ,uBAAuB,EAAE,YAAY,IAChD,GAAG,QAAQ,YAAY;AACjC,QAAI,OAAO;AAIP,YAAM,QAAO,WAAM,IAAI,KAAK,MAAf,YAAsB,OAAO,UAAU,YAAY,MAAM,UAAU,CAAC,MAAM,KAAK,KAAK,MAAM,IAAI,OAAO,KAAK,CAAC,KAAM;AAC9H,UAAI,QAAQ,MAAM;AACd,eAAO;AAAA,MACX;AAAA,IACJ,OACK;AAED,YACI,SAAS,cAAc,CAAC,gBAAgB,GAAG,kBAAkB,GAAG,SAChE,QAAS,OAAO;AACpB,eAAS,IAAI,GAAG,IAAI,OAAO,KAAK;AAC5B,cAAM,OAAO,OAAO,CAAC;AACrB,YAAI,KAAK,YAAY,KAAK,OAAO;AAC7B,iBAAO;AAAA,QACX;AAAA,MACJ;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA,EACA,YAAY,cAAc;AACtB,WAAO,KAAK,SAAS,YAAY;AACjC,SAAK,oBAAoB,OAAO,OAAO,KAAK,OAAO,EAAE,KAAK,WAAS,MAAM,WAAW;AAAA,EACxF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYA,QAAQ,MAAM,gBAAgB,OAAO;AACjC,WAAO,KAAK,UAAU,KAAK,YAAY,SAAS,OAAO,IAAI,IAAI,OAAO,KAAK,KAAK,UAAU,GAAG,aAAa;AAAA,EAC9G;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYA,SAAS,MAAM,gBAAgB,OAAO;AAClC,QAAI,MAAM,QAAQ,IAAI,GAAG;AACrB,aAAO,KAAK,KAAK,CAAAC,UAAQ,KAAK,SAASA,KAAI,CAAC;AAAA,IAChD;AACA,WAAO,QAAQ,KAAK,SAAS,KAAK,YAAY,SAAS,OAAO,IAAI,IAAI,OAAO,KAAK,KAAK,UAAU,GAAG,aAAa,CAAC;AAAA,EACtH;AAAA,EACA,IAAI,UAAU;AACV,QAAI,KAAK,iBAAiB;AACtB,WAAK,eAAe;AAAA,IACxB;AACA,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,oBAAoB;AAChB,SAAK,kBAAkB;AAAA,EAC3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,iBAAiB;AACb,UACI,KAAa,MACb,aAAa,GAAG,YAChB,UAAc,GAAG,aAAa,GAAG,WAAW,CAAC,IAC7C,WAAa,OAAO,KAAK,OAAO,GAChC,aAAa,SAAS,QACtB,SAAa,GAAG;AACpB,QAAI;AACJ,QAAI,YAAY;AACZ,wBAAkB,QAAQ,uBAAuB,IAAI,CAAC;AAAA,IAC1D;AAEA,aAAS,IAAI,GAAG,IAAI,YAAY,KAAK;AACjC,YAAM,QAAQ,QAAQ,SAAS,CAAC,CAAC;AACjC,YAAM,MAAM;AACZ,UAAI,YAAY;AACZ,YAAI,gBAAgB,gBAAgB,SAAS,CAAC,CAAC;AAC/C,YAAI,eAAe;AACf,wBAAc,MAAM;AAAA,QACxB,OACK;AACD,0BAAgB,gBAAgB,SAAS,CAAC,CAAC,IAAI,oBAAI,IAAI;AAEvD,wBAAc,SAAS,MAAM;AAAA,QACjC;AAAA,MACJ;AAAA,IACJ;AACA,qBAAiB,QAAQ,SAAS,UAAU,UAAU;AAEtD,QAAI,YAAY;AACZ,uBAAiB,GAAG,iBAAiB,iBAAiB,UAAU,UAAU;AAAA,IAC9E;AACA,OAAG,kBAAkB;AAAA,EACzB;AAAA;AAAA,EAEA,WAAW,cAAc;AACrB,UAAM,UAAU,CAAC,KAAK,QAAQ,YAAY,CAAC;AAC3C,QAAI,KAAK,YAAY;AACjB,cAAQ,KAAK,KAAK,QAAQ,uBAAuB,EAAE,YAAY,CAAC;AAAA,IACpE;AACA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,aAAa,MAAM;AACf,WAAO,KAAK,KAAK,OAAO,EAAE,QAAQ,kBAAgB;AAC9C,WAAK,cAAc,MAAM,cAAc,KAAK,YAAY,CAAC;AAAA,IAC7D,CAAC;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,kBAAkB,MAAM;AACpB,WAAO,KAAK,KAAK,OAAO,EAAE,QAAQ,kBAAgB;AAC9C,WAAK,iBAAiB,MAAM,cAAc,KAAK,YAAY,CAAC;AAAA,IAChE,CAAC;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,iBAAiB,MAAM,cAAc,UAAU;AAC3C,SAAK,WAAW,YAAY,EAAE,QAAQ,WAAS,oBAAoB,MAAM,OAAO,QAAQ,CAAC;AAAA,EAC7F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,cAAc,MAAM,cAAc,OAAO;AACrC,SAAK,WAAW,YAAY,EAAE,QAAQ,WAAS,eAAe,MAAM,OAAO,KAAK,CAAC;AAAA,EACrF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,eAAe,MAAM,QAAQ;AACzB,UAAM,KAAK;AAEX,QAAI,CAAC,GAAG,mBAAmB,OAAO,KAAK,GAAG,OAAO,EAAE,SAAS,GAAG;AAC3D,aAAO,KAAK,MAAM,EAAE,QAAQ,kBAAgB;AAntCxD;AAotCgB,cAAM,cAAc,GAAG,QAAQ,YAAY;AAC3C,YAAI,aAAa;AACb,gBAAM,EAAE,OAAO,SAAS,IAAI,OAAO,YAAY;AAC/C,aAAG,iBAAiB,MAAM,cAAc,QAAQ;AAChD,aAAG,cAAc,MAAM,cAAc,KAAK;AAAA,QAC9C,WACS,GAAG,mBAAmB;AAE3B,gBAAM,iBAAiB,OAAO,OAAO,GAAG,OAAO,EAAE,KAAK,WAAM;AA5tChF,gBAAAC;AA4tCmF,oBAAAA,MAAA,MAAM,gBAAN,gBAAAA,IAAoB;AAAA,WAAa;AAChG,cAAI,gBAAgB;AAChB,kBAAM,mBAAmB,CAAC;AAC1B,uBAAW,KAAK,eAAe,aAAa;AACxC,+BAAiB,CAAC,MAAI,YAAO,CAAC,MAAR,mBAAW,aAAY,KAAK,CAAC;AAAA,YACvD;AACA,kBAAM,WAAW,KAAK,cAAc,gBAAgB;AACpD,eAAG,iBAAiB,MAAM,eAAe,UAAU,QAAQ;AAC3D,eAAG,cAAc,MAAM,eAAe,UAAU,KAAK,eAAe,QAAQ,CAAC;AAAA,UACjF;AAAA,QACJ;AAAA,MACJ,CAAC;AAAA,IACL;AAAA,EACJ;AAAA;AAEJ;AAGA,WAAW,SAAS;;;AC5uCpB,IACI,gBAAyB,oBAAI,QAAQ;AADzC,IAEI,eAAyB,CAAC,UAAU;AAChC,MAAI,SAAS,OAAO,UAAU,UAAU;AACpC,QAAI,aAAa,cAAc,IAAI,KAAK;AACxC,QAAI,eAAe,QAAW;AAC1B,mBAAa,OAAO,OAAO;AAC3B,oBAAc,IAAI,OAAO,UAAU;AAAA,IACvC;AACA,YAAQ;AAAA,EACZ;AACA,SAAO;AACX;AAQJ,IAAqB,MAArB,MAAyB;AAAA,EACrB,YAAY,QAAQ;AAChB,UAAM,KAAK;AACX,OAAG,aAAa;AAChB,OAAG,QAAQ,oBAAI,IAAI;AACnB,OAAG,QAAQ,CAAC;AACZ,OAAG,aAAa;AAChB,QAAI,QAAQ;AACR,UAAI,OAAO,YAAY;AACnB,WAAG,aAAa,OAAO;AAAA,MAC3B;AACA,UAAI,OAAO,QAAQ;AACf,WAAG,SAAS,OAAO;AAAA,MACvB;AAAA,IACJ;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,IAAI,KAAK;AACL,WAAO,KAAK,MAAM,aAAa,GAAG,CAAC;AAAA,EACvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,IAAI,QAAQ;AACR,WAAO,KAAK,MAAM;AAAA,EACtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,OAAO,OAAO;AACV,QAAI,MAAM,WAAW,KAAK,MAAM,QAAQ,MAAM,CAAC,CAAC,GAAG;AAC/C,cAAQ,MAAM,CAAC;AAAA,IACnB;AACA,UACI,KAAM,MACN;AAAA,MACI;AAAA,MACA;AAAA,MACA;AAAA,IACJ,IAAM,IACN,MAAM,MAAM;AAChB,aAAS,IAAI,GAAG,IAAI,KAAK,KAAK;AAC1B,YACI,OAAe,MAAM,CAAC,GACtB,MAAe,SAAS,OAAO,IAAI,IAAI,OAAO,aAAa,KAAK,UAAU,CAAC,GAC3E,eAAe,MAAM,GAAG;AAE5B,UAAI,gBAAgB,MAAM;AACtB,cAAM,GAAG,IAAI;AACb,cAAM,IAAI,IAAI;AACd,WAAG;AAAA,MACP,WAGS,iBAAiB,MAAM;AAC5B,cAAM,GAAG,IAAI;AACb,cAAM,OAAO,YAAY;AACzB,cAAM,IAAI,IAAI;AAAA,MAClB;AAAA,IACJ;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,GAAG,KAAK;AACJ,QAAI,MAAM;AACV,QAAI,MAAM,GAAG;AACT,aAAO,KAAK;AAAA,IAChB;AACA,SAAK,QAAQ,KAAK,OAAO;AACrB,UAAI,CAAC,OAAO;AACR,cAAM;AACN;AAAA,MACJ;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,OAAO,UAAU;AACb,eAAW,YAAY,QAAQ,QAAQ;AACvC,UACI,EAAE,OAAO,OAAO,WAAW,IAAI,MAC/B,MAAM,SAAS;AACnB,aAAS,IAAI,GAAG,IAAI,KAAK,KAAK;AAC1B,YACI,OAAe,SAAS,CAAC,GACzB,MAAe,SAAS,OAAO,IAAI,IAAI,OAAO,aAAa,KAAK,UAAU,CAAC,GAC3E,eAAe,MAAM,GAAG;AAE5B,UAAI,gBAAgB,MAAM;AACtB,cAAM,OAAO,YAAY;AACzB,eAAO,MAAM,GAAG;AAChB,aAAK;AAAA,MACT;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,QAAQ;AACJ,SAAK,MAAM,MAAM;AACjB,SAAK,QAAQ,CAAC;AACd,SAAK;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,QAAQC,KAAI;AACR,QAAI,MAAM,GACN;AACJ,SAAK,QAAQ,KAAK,OAAO;AACrB,UAAIA,IAAG,IAAI,GAAG;AACV,UAAE;AAAA,MACN;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,SAAS,MAAM,OAAO;AAClB,UACI,KAAwB,MACxB,EAAE,OAAO,WAAW,IAAI,IACxB,QAAwB,SAAS,OAAO,IAAI,IAAI,OAAO,aAAa,KAAK,UAAU,CAAC,GACpF,SAAwB,GAAG,IAAI,KAAK;AACxC,QAAI,QAAQ;AACR,YAAM,iBAAiB,GAAG,IAAI,KAAK;AACnC,UAAI,kBAAkB,WAAW,gBAAgB;AAC7C,cAAM,IAAI,MAAM,uBAAuB,yCAAyC,OAAO;AAAA,MAC3F;AACA,aAAO,UAAU,IAAI;AACrB,aAAO,MAAM,KAAK;AAClB,YAAM,KAAK,IAAI;AAAA,IACnB;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,OAAOA,KAAI,SAAS;AAChB,UACI,EAAE,MAAM,IAAI,MACZ,SAAY,CAAC;AACjB,QAAI,IAAI;AACR,UAAM,QAAQ,UAAQ;AAClB,UAAIA,IAAG,KAAK,SAAS,MAAM,KAAK,KAAK,GAAG;AACpC,eAAO,KAAK,IAAI;AAAA,MACpB;AAAA,IACJ,CAAC;AACD,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,SAAS,MAAM;AACX,UAAM,MAAM,SAAS,OAAO,IAAI,IAAI,OAAO,aAAa,KAAK,KAAK,UAAU,CAAC;AAC7E,WAAO,QAAQ,KAAK,MAAM,GAAG,CAAC;AAAA,EAClC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,IAAIA,KAAI,SAAS;AACb,UACI,EAAE,MAAM,IAAI,MACZ,SAAY,IAAI,MAAM,MAAM,IAAI;AAEpC,QAAI,IAAI;AACR,UAAM,QAAQ,UAAQ;AAClB,aAAO,CAAC,IAAIA,IAAG,KAAK,SAAS,MAAM,KAAK,KAAK;AAAA,IACjD,CAAC;AACD,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,QAAQA,KAAI,SAAS;AACjB,WAAO,KAAK,MAAM,QAAQA,KAAI,OAAO;AAAA,EACzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,KAAKA,KAAI,MAAM,GAAG;AACd,QAAI,MAAM;AACV,QAAI,MAAM,GAAG;AACT,aAAO,KAAK,QAAQA,GAAE;AAAA,IAC1B;AACA,SAAK,QAAQ,KAAK,OAAO;AACrB,UAAIA,IAAG,IAAI,KAAK,CAAC,OAAO;AACpB,cAAM;AACN;AAAA,MACJ;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA,EAIA,CAAC,OAAO,QAAQ,IAAI;AAChB,WAAO,KAAK,MAAM,OAAO,QAAQ,EAAE;AAAA,EACvC;AAAA,EACA,QAAQ,MAAM,SAAS;AACnB,QAAI,QAAQ,IACR;AACJ,SAAK,MAAM,KAAK,OAAO;AACnB,UAAI,CAAC,WAAW,QAAQ,EAAE,GAAG;AACzB,UAAE;AACF,YAAI,OAAO,MAAM;AACb,iBAAO;AAAA,QACX;AAAA,MACJ;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,IAAI,SAAS;AACT,WAAO,CAAC,GAAG,KAAK,KAAK;AAAA,EACzB;AAAA,EACA,IAAI,OAAO,QAAQ;AACf,aAAS,YAAY,QAAQ,MAAM;AACnC,SAAK,MAAM;AACX,SAAK,IAAI,MAAM,MAAM,MAAM;AAC3B,SAAK;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,KAAKA,KAAI;AACL,SAAK,SAAS,KAAK,OAAO,KAAKA,GAAE;AAAA,EACrC;AAAA,EACA,KAAKA,KAAI,SAAS;AACd,WAAO,KAAK,OAAO,KAAKA,KAAI,OAAO;AAAA,EACvC;AACJ;AACA,IAAI,SAAS;;;ACpSb,IAAqB,WAArB,cAAsC,IAAI;AAAA,EACtC,OAAO,OAAO;AACV,QAAI,MAAM,WAAW,KAAK,MAAM,QAAQ,MAAM,CAAC,CAAC,GAAG;AAC/C,cAAQ,MAAM,CAAC;AAAA,IACnB;AAEA,WAAO,MAAM,IAAI,GAAG,MAAM,OAAO,YAAU,OAAO,aAAa,CAAC;AAAA,EACpE;AACJ;AACA,SAAS,SAAS;;;ACIlB,IAAO,oBAAQ,YAAU,MAAM,mBAAmB,UAAUC,OAAM;AAAA,EAC9D,WAAW,QAAQ;AACf,WAAO;AAAA,EACX;AAAA;AAAA,EAEA,WAAW,gBAAgB;AACvB,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAOH,YAAa;AAAA,IACjB;AAAA,EACJ;AAAA,EACA,WAAW,aAAa;AACpB,WAAO;AAAA,MACH,YAAe;AAAA,MACf,cAAe;AAAA,IACnc,MACd,EAAE,QAAQ,IAAI;AAElB,cAAU,YAAY,QAAQ,OAAO,EAAE,OAAO,CAAC,QAAQ,MAAM;AACzD,UAAI,GAAG,QAAQ,CAAC;AAChB,UAAI,GAAG;AACH,eAAO,KAAK,CAAC;AAAA,MACjB;AACA,aAAO;AAAA,IACX,GAAG,CAAC,CAAC;AACL,QAAI,QAAQ,WAAW,GAAG;AACtB,aAAO;AAAA,IACX;AAEA,QAAI,CAAC,GAAG,QAAQ,CAAC,UAAU,GAAG,QAAQ,gBAAgB,EAAE,QAAQ,CAAC,MAAM,OAAO;AAC1E,aAAO,CAAC;AAAA,IACZ;AAEA,OAAG,aAAa;AAEhB,QAAI,GAAG,WAAW;AACd,YACI,WAA2B,QAAQ,OACnC,2BAA2B,CAAC,GAC5B,sBAA2B,oBAAI,IAAI;AAIvC,iBAAW,OAAO,SAAS;AACvB,cAAM,EAAE,YAAY,IAAI,IAAI,aAAa,EAAE;AAC3C,YAAI,YAAY,KAAK,WAAW;AAC5B,mCAAyB,KAAK,GAAG;AAAA,QACrC;AAEA,oBAAY,OAAO,YAAY,eAAe,GAAG;AACjD,oBAAY,OAAO,YAAY,yBAAyB,GAAG;AAC3D,oBAAY,KAAK;AACjB,4BAAoB,IAAI,WAAW;AAAA,MACvC;AAGA,iBAAW,eAAe,qBAAqB;AAC3C,YAAI,YAAY,cAAc,SAAS,GAAG;AACtC,aAAG,cAAc,aAAa,CAAC,GAAG,CAAC,CAAC;AAAA,QACxC;AAAA,MACJ;AAEA,UAAI,yBAAyB,QAAQ;AACjC,gBAAQ,QAAQ,UAAU;AAAA,UACtB,QAAW;AAAA,UACX,SAAW;AAAA,UACX,OAAW,CAAC;AAAA,UACZ,UAAW,CAAC;AAAA,UACZ;AAAA,QACJ,CAAC;AAAA,MACL;AAAA,IACJ,WACS,GAAG,MAAM;AACd,YACI,oBAAoB,CAAC,GACrB,mBAAoB,QAAQ,SAAS,GACrC,eAAoB,QAAQ,CAAC,GAE7B,QAAoB,mBAAmB,SAAY,QAAQ,QAAQ,YAAY,GAE/E,kBAAoB,QAAQ,OAAO,CAAC,QAAQ,UAAU;AAClD,cAAM,EAAE,OAAO,IAAI;AACnB,YAAI,QAAQ;AACR,cAAI,CAAC,OAAO,OAAO,EAAE,GAAG;AACpB,mBAAO,OAAO,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;AAAA,UACnC;AACA,iBAAO,OAAO,EAAE,EAAE,CAAC,EAAE,KAAK,KAAK;AAAA,QACnC;AACA,eAAO;AAAA,MACX,GAAG,CAAC,CAAC,GACL,WAAoB,MAAM,KAAK,OAAO,OAAO,eAAe,CAAC;AACjE,UAAI,CAAC,UAAU,GAAG,QAAQ,gBAAgB,EAAE,SAAS,QAAS,OAAO,QAAS,mBAAmB,SAAY,aAAa,OAAO,CAAC,MAAM,OAAO;AAC3I,WAAG,aAAa;AAChB,eAAO,CAAC;AAAA,MACZ;AAMA,eAAS,KAAK,CAAC,GAAG,MAAM,EAAE,CAAC,EAAE,aAAa,EAAE,CAAC,EAAE,UAAU;AAEzD,iBAAW,CAAC,QAAQ,QAAQ,KAAK,UAAU;AACvC,0BAAkB,KAAK,GAAG,OAAO,YAAY,UAAU,OAAO,IAAI,CAAC;AAAA,MACvE;AACA,UAAI,CAAC,QAAQ;AACT,WAAG,QAAQ,UAAU;AAAA;AAAA,UAEjB,QAAa,mBAAmB,SAAY,aAAa;AAAA,UACzD;AAAA,UACA,SAAa;AAAA,UACb,YAAa;AAAA,UACb,QAAa;AAAA,UACb;AAAA,QACJ,CAAC;AACD,WAAG,QAAQ,UAAU;AAAA,UACjB,QAAS;AAAA,UACT;AAAA,QACJ,CAAC;AAAA,MACL;AACA,SAAG,aAAa;AAChB,aAAO;AAAA,IACX;AACA,QAAI,QAAQ,WAAW,GAAG;AACtB,SAAG,aAAa;AAChB,aAAO;AAAA,IACX;AAEA,eAAW,UAAU,SAAS;AAC1B,aAAO,aAAa,OAAO;AAAA,IAC/B;AACA,QAAI,QAAQ;AACR,SAAG,cAAc;AAAA,IACrB;AACA,YAAQ,OAAO,OAAO;AACtB,QAAI,QAAQ;AACR,SAAG,aAAa;AAAA,IACpB;AACA,QAAI,GAAG,YAAY;AACf,SAAG,aAAa;AAAA,IACpB;AACA,OAAG,aAAa;AAChB,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,MAAM,YAAY,OAAO;AA3Q7B;AA4QQ,UACI,KAAc,MACd,EAAE,QAAQ,IAAI;AAElB,QAAI,GAAG,QAAQ,gBAAc,cAAG,aAAH,mBAAa,uBAAb,mBAAiC,SAAQ;AAElE,UAAI,CAAC,aAAa,GAAG,QAAQ,gBAAgB,EAAE,SAAU,QAAQ,WAAW,aAAc,KAAK,CAAC,MAAM,OAAO;AACzG,eAAO;AAAA,MACX;AAEA,UAAI,GAAG,UAAU;AAEb,YAAI,CAAC,GAAG,WAAW;AACf,aAAG,SAAS,cAAc,SAAS;AAAA,QACvC;AAAA,MACJ,WACS,WAAW;AAGhB,cAAM,aAAa,GAAG;AACtB,iBAAS,IAAI,WAAW,SAAS,GAAG,KAAK,KAAK,GAAG,KAAK;AAClD,gBAAM,WAAW,CAAC;AAClB,cAAI,OAAO,CAAC,IAAI,aAAa;AACzB,gBAAI,YAAY,EAAE;AAAA,UACtB;AAAA,QACJ;AAAA,MACJ;AACA,UAAI,WAAW;AACX,WAAG,QAAQ,MAAM;AACjB,gBAAQ,cAAc;AAAA,MAC1B;AAEA,cAAQ,MAAM;AACd,UAAI,WAAW;AACX,gBAAQ,aAAa;AAAA,MACzB;AACA,SAAG,MAAM,MAAM;AACf,SAAG,SAAS,MAAM;AAAA,IACtB;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,UAAU,SAAS,OAAO;AACtB,UACI,KAAU,MACV,UAAU,GAAG;AACjB,QAAI;AACJ,OAAG,aAAa;AAEhB,QAAI,QAAQ;AACR,cAAQ,cAAc;AAItB,YAAM,aAAa,GAAG;AACtB,eAAS,IAAI,WAAW,SAAS,GAAG,KAAK,KAAK,GAAG,KAAK;AAClD,cAAM,WAAW,CAAC;AAClB,YAAI,OAAO,CAAC,IAAI,eAAe,CAAC,IAAI,QAAQ;AACxC,cAAI,YAAY,EAAE;AAAA,QACtB;AAAA,MACJ;AAAA,IACJ;AACA,QAAI,GAAG,MAAM;AACT,eAAS,GAAG,SAAS,MAAM,MAAM;AAAA,IACrC,OACK;AACD,eAAS,GAAG,MAAM,MAAM;AAAA,IAC5B;AACA,QAAI,QAAQ;AACR,cAAQ,aAAa;AAAA,IACzB;AACA,OAAG,aAAa;AAChB,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,IAAI,SAAS,SAAS,OAAO,UAAU,CAAC,GAAG;AACvC,UACI,KAAc,MACd,EAAE,QAAQ,IAAI;AAClB,cAAU,YAAY,QAAQ,OAAO;AACrC,QAAI,EAAC,mCAAS,SAAQ;AAElB;AAAA,IACJ;AACA,OAAG,OAAO,GAAG,QAAQ,QAAQ,GAAG,YAAY,QAAQ,CAAC,EAAE,QAAQ;AAC/D,QAAI,GAAG,MAAM;AACT,YAEI,cAAoB,oBAAI,IAAI,GAC5B,mBAAoB,GAAG,WAAW,mBAAmB,aAAa,GAClE,EAAE,cAAc,IAAI,GAAG,YACvBC,SAAoB,CAAC;AACzB,cAAQ,QAAQ,UAAQ;AACpB,cAAM,WAAW,KAAK,aAAa;AACnC,YAAI,CAAC,YAAY,IAAI,QAAQ,GAAG;AAC5B,sBAAY,IAAI,UAAU,EAAE,QAAS,CAAC,GAAG,QAAS,CAAC,EAAE,CAAC;AAAA,QAC1D;AACA,cAAM,QAAQ,YAAY,IAAI,QAAQ;AAGtC,YAAI,CAAC,KAAK,WAAW,oBAAoB,MAAM;AAC3C,gBAAM,OAAO,KAAK,IAAI;AAAA,QAC1B,OACK;AACD,gBAAM,OAAO,KAAK,IAAI;AAAA,QAC1B;AAAA,MACJ,CAAC;AACD,kBAAY,QAAQ,CAAC,EAAE,QAAQ,OAAO,GAAG,aAAa;AAClD,cAAM,aAAa,YAAY,OAAO,GAAG,WAAW,GAAG,QAAQ,QAAQ;AACvE,YAAI,CAAC,YAAY;AACb,gBAAM,IAAI,MAAM,uBAAuB,0CAA0C;AAAA,QACrF;AAEA,YAAI,OAAO,QAAQ;AACf,UAAAA,OAAM,KAAK,GAAG,WAAW,YAAY,QAAQ,MAAM,CAAC;AAAA,QACxD;AAEA,YAAI,OAAO,QAAQ;AACf,qBAAW,YAAY,QAAQ;AAC3B,YAAAA,OAAM,KAAK,WAAW,YAAY,UAAU,SAAS,gBAAgB,GAAG,QAAQ,OAAO,CAAC;AAAA,UAC5F;AAAA,QACJ;AAAA,MACJ,CAAC;AAED,UAAI,GAAG,uBAAuB,CAAC,GAAG,qBAAqB;AACnD,WAAG,KAAK;AAAA,MACZ;AACA,aAAOA;AAAA,IACX;AAEA,QAAI,CAAC,UAAU,GAAG,QAAQ,aAAa,EAAE,QAAQ,CAAC,MAAM,OAAO;AAC3D,aAAO;AAAA,IACX;AACA,OAAG,OAAO,GAAG,QAAQ,QAAQ,GAAG,YAAY,QAAQ,CAAC,EAAE,QAAQ;AAC/D,QAAI,GAAG,MAAM;AACT,aAAO,GAAG,SAAS,YAAY,OAAO;AAAA,IAC1C;AACA,UAAM,QAAQ,GAAG,eAAe,OAAO;AACvC,QAAI,QAAQ;AACR,SAAG,cAAc;AAAA,IACrB;AACA,YAAQ,IAAI,KAAK;AACjB,QAAI,QAAQ;AACR,SAAG,aAAa;AAAA,IACpB;AACA,QAAI,GAAG,YAAY;AACf,SAAG,aAAa;AAAA,IACpB;AACA,WAAO;AAAA,EACX;AAAA,EACA,eAAe,SAAS,iBAAiB;AACrC,WAAO,QAAQ,IAAI,UAAQ;AACvB,YAAM,SAAS,KAAK,cAAc,KAAK,UAAU,OAAO,KAAK,aAAa,IAAI,CAAC;AAC/E,yDAAiB,KAAK,MAAM;AAC5B,aAAO;AAAA,IACX,CAAC;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA,OAAO,OAAO,SAAS,SAAS,OAAO;AAlc3C;AAmcQ,UACI,KAAgB,MAChB,UAAgB,GAAG,SACnB,eAAgB,GAAG,MAAM,KAAK,GAC9B,WAAgB,QAAQ,QACxB,gBAAgB,CAAC;AACrB,cAAU,YAAY,QAAQ,OAAO;AACrC,QAAI,GAAG,MAAM;AACT,YAAM,OAAO,GAAG;AAChB,aAAO,KAAK,YAAY,UAAS,UAAK,aAAL,mBAAgB,QAAQ,MAAM;AAAA,IACnE;AAEA,QAAI,CAAC,UAAU,GAAG,QAAQ,aAAa,EAAE,QAAQ,CAAC,MAAM,OAAO;AAC3D,aAAO;AAAA,IACX;AACA,QAAI,QAAQ,OAAO;AAGnB,QAAI,SAAS,QAAQ,KAAK,MAAM,QAAQ,CAAC,KAAK,SAAS,QAAQ,QAAQ,CAAC,MAAM,QAAQ,CAAC,GAAG;AACtF,WAAK,SAAS,MAAM,IAAI,GAAG,UAAU,IAAI,QAAQ,QAAQ,KAAK;AAC1D,YAAI,QAAQ,CAAC,MAAM,SAAS,QAAQ,CAAC,GAAG;AACpC,mBAAS;AAAA,QACb;AAAA,MACJ;AAAA,IACJ;AACA,QAAI,QAAQ;AACR,aAAO;AAAA,IACX;AACA,UAAM,QAAQ,GAAG,eAAe,SAAS,YAAU;AAC/C,YACI,iBAAiB,QAAQ,QAAQ,MAAM;AAC3C,UAAI,OAAO,YAAY,OAAO,SAAS,UAAU,GAAG,UAAU;AAC1D,WAAG,OAAO;AAAA,MACd;AAEA,UAAI,iBAAiB,IAAI;AACrB,YAAI,iBAAiB,SAAS;AAAc;AAC5C,sBAAc,KAAK,cAAc;AAAA,MACrC;AAEA,aAAO,KAAK,gBAAgB;AAAA,IAChC,CAAC;AAID,OAAG,cAAc;AACjB,OAAG,QAAQ,OAAO,aAAa;AAC/B,OAAG,aAAa;AAChB,QAAI,QAAQ;AACR,SAAG,cAAc;AAAA,IACrB;AACA,YAAQ,OAAO,OAAO,GAAG,GAAG,KAAK;AACjC,QAAI,QAAQ;AACR,SAAG,aAAa;AAAA,IACpB;AACA,QAAI,GAAG,YAAY;AACf,SAAG,aAAa;AAAA,IACpB;AACA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,KAAK,SAAS,cAAc;AACxB,QAAI,KAAK,QAAQ;AACb,mBAAa,OAAO,YAAY,SAAS,YAAY;AAAA,IACzD,OACK;AACD,WAAK,QAAQ,KAAK,SAAS,YAAY;AAAA,IAC3C;AAAA,EACJ;AAAA;AAAA;AAAA,EAGA,YAAY,UAAUC,QAAO,OAAO;AAChC,UACI,KAAU,MACV,UAAU,CAAC,GACX,UAAU,CAAC;AACf,OAAG,QAAQ,OAAK;AACZ,UAAI,SAAS,CAAC,GAAG;AACb,gBAAQ,KAAK,EAAE,IAAIA,QAAO,OAAO,IAAI,CAAC;AACtC,gBAAQ,KAAK,CAAC;AAAA,MAClB;AAAA,IACJ,CAAC;AACD,OAAG,QAAQ,kBAAkB,EAAE,SAAS,KAAM,GAAG,QAAQ,WAAW,QAAQ,OAAO,CAAC;AACpF,OAAG,QAAQ,UAAU,EAAE,QAAS,kBAAkB,SAAS,KAAM,GAAG,QAAQ,WAAW,QAAQ,OAAO,CAAC;AACvG,QAAI,GAAG,yBAAyB,GAAG;AAAY,SAAG,OAAO;AAAA,EAC7D;AAAA,EACA,OAAOA,QAAO,OAAO;AACjB,UACI,KAAU,MACV,UAAU,CAAC;AACf,OAAG,QAAQ,OAAK;AACZ,cAAQ,KAAK,EAAE,IAAIA,QAAO,OAAO,IAAI,CAAC;AAAA,IAC1C,CAAC;AACD,OAAG,QAAQ,kBAAkB,EAAE,SAAU,GAAG,SAAS,KAAM,KAAK,CAAC;AACjE,OAAG,QAAQ,UAAU,EAAE,QAAS,kBAAkB,SAAU,GAAG,SAAS,KAAM,KAAK,CAAC;AACpF,QAAI,GAAG,yBAAyB,GAAG;AAAY,SAAG,OAAO;AAAA,EAC7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYA,gBAAgB;AACZ,UAAM,KAAK;AAEX,OAAG,MAAM,QAAQ,OAAK,EAAE,aAAa,MAAM,KAAK,CAAC;AACjD,OAAG,SAAS,QAAQ,OAAK,EAAE,aAAa,MAAM,KAAK,CAAC;AAEpD,OAAG,MAAM,MAAM;AACf,OAAG,SAAS,MAAM;AAClB,OAAG,QAAQ,MAAM;AAAA,EACrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,OAAO,SAAS,OAAO;AAEnB,UACI,EAAE,QAAQ,IAAI;AAClB,QAAI,CAAC,UAAU,KAAK,QAAQ,gBAAgB,EAAE,QAAQ,CAAC,MAAM,OAAO;AAChE,aAAO;AAAA,IACX;AACA,SAAK,cAAc;AACnB,QAAI,CAAC,QAAQ;AACT,WAAK,QAAQ,UAAU,EAAE,QAAQ,CAAC;AAAA,IACtC;AACA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,gBAAgB;AACZ,UACI,KAAc,MACd,EAAE,QAAQ,IAAI;AAClB,QAAI,SAAS;AACT,YAAM,QAAQ,EAAE,QAAS,gBAAgB,QAAQ;AACjD,SAAG,IAAI,GAAG,QAAQ,QAAQ,IAAI;AAC9B,SAAG,OAAO,GAAG,MAAM,QAAQ,IAAI;AAC/B,SAAG,SAAS,QAAQ,OAAK,EAAE,cAAc,IAAI,CAAC;AAC9C,SAAG,MAAM,MAAM;AACf,SAAG,SAAS,MAAM;AAClB,SAAG,QAAQ,MAAM;AACjB,SAAG,QAAQ,UAAU,KAAK;AAC1B,SAAG,QAAQ,WAAW,KAAK;AAAA,IAC/B;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAoBA,IAAI,UAAU;AACV,UACI,KAAW,MAEX,WAAW,GAAG,SAAS,OAAO,OAAO,OAAK,EAAE,gBAAgB;AAChE,WAAQ,GAAG,MAAM,SAAS,SAAS,UAAU,GAAG,QAAQ,QAAS;AAAA;AAAA,MAE7D,OAAU,GAAG,MAAM,OAAO,MAAM;AAAA,MAChC;AAAA,MACA,SAAU,GAAG,QAAQ,OAAO,MAAM;AAAA,IACtC,IAAI;AAAA,EACR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,IAAI,aAAa;AACb,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,IAAI,WAAW,MAAM;AACjB,SAAK,cAAc;AACnB,QAAI,QAAQ,KAAK,SAAS;AACtB,WAAK,OAAO;AAAA,IAChB;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,oBAAoB;AAChB,SAAK;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,iBAAiB,WAAW,MAAM;AAC9B,SAAK;AACL,QAAI,KAAK,cAAc,UAAU;AAC7B,WAAK,aAAa;AAAA,IACtB;AAAA,EACJ;AAAA,EACA,eAAe;AACX,QAAI,KAAK,gBAAgB,GAAG;AACxB,WAAK,OAAO;AAAA,IAChB;AAAA,EACJ;AAAA;AAEJ;;;ACnqBA,IAAO,uBAAQ,YAAU,MAAM,sBAAsB,UAAUC,OAAM;AAAA,EACjE,WAAW,QAAQ;AACf,WAAO;AAAA,EACX;AAAA,EACA,WAAW,eAAe;AACtB,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAkBH,gCAAiC;AAAA,IACrC;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,sBAAsB,YAAY;AAC9B,UACI,KAAc,MACd,EAAE,QAAQ,IAAI;AAClB,QAAI,CAAC,SAAS;AACV;AAAA,IACJ;AACA,QAAI,QAAQ,OAAO;AACf,SAAG,IAAI,QAAQ,KAAK;AAAA,IACxB;AACA,QAAI,QAAQ,SAAS;AAEjB,SAAG,OAAO,QAAQ,QAAQ,IAAI,OAAK,EAAE,EAAE,CAAC;AAAA,IAC5C;AACA,QAAI,QAAQ,UAAU;AAClB,cAAQ,SAAS,QAAQ,YAAU;AAC/B,cAAM,cAAc,GAAG,QAAQ,OAAO,EAAE;AACxC,oBAAY,IAAI,OAAO,aAAa;AAAA,MACxeAAe,SAAS,cAAc,MAAM,iBAAiB,cAAc,SAAS,MAAM,aAAa,OAAO;AA1QlH;AA2QQ,UACI,KAAwC,MACxC,EAAE,OAAO,SAAS,UAAU,QAAQ,KAAI,gDAAc,SAAS,QAAvB,YAA8B,SAEtE,WAAwC,iCAAW,aAAX,YAAuB,CAAC,GAChE,eAAwC,GAAG,WAAW,mBAAmB,IAAI,GAC7E,MAAwC,aAAa,oBAAI,IAAI,IAAI,MACjE,WAAwC,CAAC,GACzC,aAAwC,CAAC;AAC7C,QAAI,cAAc,OAAO,kBAAkB,CAAC;AAE5C,OAAG,yBAAyB,CAAC;AAE7B,OAAG,aAAa,GAAG,QAAQ,YAAU;AACjC,SAAG,uBAAuB,KAAK,OAAO,EAAE;AAAA,IAC5C,CAAC;AAED,SAAI,+BAAO,UAAS,GAAG;AACnB,YACI,WAAW,CAAC,GACZ,QAAW,CAAC;AAEhB,iBAAW,QAAQ,OAAO;AACtB,YAAI,GAAG,SAAQ,UAAK,cAAc,MAAnB,YAAwB,aAAa,QAAQ,MAAM,YAAY,CAAC,GAAG;AAG9E,mBAAS,KAAK,IAAI;AAAA,QACtB,OACK;AACD,gBAAM,KAAK,IAAI;AAAA,QACnB;AAAA,MACJ;AACA,cAAQ,QAAQ,MAAM,SAAS,QAAQ;AAIvC,YAAM,gBAAe,QAAG,IAAI,OAAO,OAAO,EAAE,oBAAqB,EAAE,MAAO,KAAK,EAAE,CAAC,MAA7D,YAAkE,CAAC;AACxF,eAAS,KAAK,GAAG,YAAY;AAC7B,UAAI,GAAG,MAAM;AAGT,mBAAW,UAAU,cAAc;AAC/B,gBAAM,EAAE,OAAO,IAAI;AAEnB,cAAI,OAAO,QAAQ;AACf,0BAAc;AACd,8BAAkB,CAAC,MAAM;AACzB;AAAA,UACJ;AACA,cAAI,CAAC,OAAO,UAAU,gBAAgB,MAAM,OAAK,CAAC,EAAE,SAAS,MAAM,CAAC,GAAG;AACnE,4BAAgB,KAAK,MAAM;AAAA,UAC/B;AAAA,QACJ;AAAA,MACJ;AACA,iBAAW,UAAU,cAAc;AAC/B,mCAAK,IAAI,OAAO,IAAI,OAAO;AAC3B,eAAO,aAAa;AAAA,MACxB;AAAA,IACJ;AAEA,SAAI,mCAAS,UAAS,GAAG;AACrB,iBAAW,QAAQ,SAAS;AACxB,cACI,YAAY,KAAK,cAAc,GAC/B,KAAY,aAAa,QAAQ,MAAM,YAAY,GACnD,SAAY,GAAG,QAAQ,gCAAa,EAAE;AAE1C,YAAI,QAAQ;AACR,gBAAMC,WAAU,OAAO,eAAe,MAAM,gBAAgB,MAAM;AAElE,cAAI,GAAG,QAAQ,CAAC,eAAe,gBAAgB,MAAM,OAAK,CAAC,EAAE,SAAS,MAAM,CAAC,GAAG;AAC5E,gBAAI,OAAO,OAAO,QAAQ;AACtB,4BAAc;AACd,gCAAkB,CAAC,OAAO,MAAM;AAAA,YACpC,OACK;AACD,8BAAgB,KAAK,OAAO,MAAM;AAAA,YACtC;AAAA,UACJ;AACA,qCAAK,IAAI,IAAIA;AACb,qBAAW,KAAK,MAAM;AAAA,QAC1B;AAAA,MACJ;AAAA,IACJ;AAEA,SAAI,mCAAS,UAAS,GAAG;AACrB,SAAG,cAAc,OAAO;AAAA,IAC5B;AACA,QAAI,GAAG,mCAAmC,WAAW;AACjD,YAAM,0BAA0B,GAAG,gBAAgB,UAAU,UAAU;AACvE,sBAAgB,KAAK,GAAG,uBAAuB;AAAA,IACnD;AACA,OAAG,sBAAsB,eAAe;AACxC,OAAG,yBAAyB;AAC5B,WAAO;AAAA,EACX;AAAA,EACA,sBAAsB,iBAAiB;AAEnC,oBAAgB,QAAQ,YAAU;AAC9B,aAAO,SAAS,YAAU;AACtB,eAAO,oBAAoB,OAAO,KAAK;AAGvC,YAAI,OAAO,UAAU;AACjB,iBAAO,sBAAsB,OAAO,UAAU,eAAe,IAAI;AAAA,QACrE;AACA,YAAI,OAAO,oBAAoB;AAC3B,iBAAO,sBAAsB,OAAO,oBAAoB,mBAAmB,IAAI;AAAA,QACnF;AAAA,MACJ,CAAC;AAAA,IACL,CAAC;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,cAAc,UAAU;AACpB,UACI,KAA6B,MAC7B,EAAE,SAAU,aAAa,IAAI,IAC7B,eAA6B,GAAG,WAAW,SAC3C,WAA6B,CAAC;AAClC,eAAW,gBAAgB,UAAU;AACjC,YAAM,KAAK,aAAa,QAAQ,cAAc,YAAY;AAE1D,UAAI,aAAa,SAAS,EAAE,GAAG;AAC3B,qBAAa,OAAO,EAAE;AAAA,MAC1B,OAEM;AACF,iBAAS,KAAK,EAAE;AAAA,MACpB;AAAA,IACJ;AAEA,OAAG,OAAO,QAAQ;AAElB,eAAW,UAAU,UAAU;AAC3B,mBAAa,OAAO,MAAM;AAAA,IAC9B;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAsBA,gBAAgB,OAAO,SAAS;AAC5B,UACI,KAAK,MACL;AAAA,MACI;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACJ,IAAI,IACJ,oBAAoB,GAAG,WAAW,GAAG,eAAe,GAAG,OAAO,IAAI,QAClE;AAAA,MACI;AAAA,MACA;AAAA,MACA;AAAA,IACJ,IAAI,GAAG,SACP,SAAS,qBAAqB,QAAQ,WAAW,gDAAqB,GAAG,QAAQ,eAAe,MAChG,kBAAkB,oBAAI,IAAI;AAC9B,QAAI,CAAC,YAAY;AACb,aAAO,CAAC;AAAA,IACZ;AACA,QAAI,UAAU,OAAO;AAIrB,QAAI,WAAW;AACX,iBAAW,GAAG;AACd,SAAG,cAAc,IAAI;AAAA,IACzB;AACA,QAAI,MAAM;AACN,YAAM,iBAAiB,IAAI,IAAI,QAAQ,OAAO,eAAe,CAAC;AAG9D,iBAAW,eAAe,MAAM,OAAO,eAAe,GAAG;AACrD,uBAAe,IAAI,WAAW;AAAA,MAClC;AAEA,qBAAe,QAAQ,UAAQ,KAAK,OAAO,cAAY,eAAe,IAAI,QAAQ,CAAC,CAAC;AACpF,qBAAe,OAAO,GAAG,QAAQ;AACjC,YAAM,yBAAyB,YAAY,QAAQ,MAAM,KAAK,cAAc,GAAG,UAAU;AACzF,iBAAW,qBAAqB,OAAO,OAAO,sBAAsB,GAAG;AACnE,cAAM,EAAE,OAAO,IAAI,kBAAkB,CAAC;AAEtC,YAAI,OAAO,oBAAoB;AAE3B,iBAAO,SAAS,KAAK,GAAG,kBAAkB,OAAO,WAAS,CAAC,OAAO,SAAS,SAAS,KAAK,CAAC,CAAC;AAC3F,0BAAgB,IAAI,MAAM;AAAA,QAC9B;AAAA,MACJ;AAAA,IACJ,WAES,UAAU,CAAC,WAAW;AAK3B,YAEI,EAAE,eAAe,IAAI,GAAG,SACxB,eAAe,cACR,eAAe,cAAc,WAAS,CAAC,YAAY,IAAI,KAAK,CAAC,IAAI,IAClE,eAAe,QACrB,SAAS,eAAe,MAAM,GAAG,YAAY,GAC7C,iBAAiB,IAAI,IAAI,QAAQ,OAAO,eAAe,CAAC;AAC5D,iBAAW,SAAS,gBAAgB;AAChC,YAAI,eAAe,IAAI,KAAK,GAAG;AAC3B,yBAAe,OAAO,KAAK;AAAA,QAC/B;AAAA,MACJ;AACA,iBAAW,YAAY,gBAAgB;AACnC,eAAO,KAAK,QAAQ;AAAA,MACxB;AACA,aAAO,KAAK,MAAM;AAClB,qBAAe,OAAO,GAAG,cAAc,GAAG,MAAM;AAChD,gBAAU;AAAA,IACd,OACK;AAID,YAAM,iBAAiB,QAAQ,OAAO,UAClC,gBAAgB,IAAI,KAAK,CAAC,GAAG,QAAQ,SAAS,IAAI,CAAC;AACvD,UAAI,eAAe,SAAS,GAAG;AAC3B,WAAG,gBAAgB,WAAW,GAAG,QAAQ,gBAAgB,cAAc;AACvE,kBAAU;AAAA,MACd;AAAA,IACJ;AAEA,UAAM,kBAAkB,IAAI,IAAI,MAAM,OAAO,WAAS,CAAC,gBAAgB,KAAK,CAAC,CAAC;AAC9E,QAAI,gBAAgB,OAAO,GAAG;AAC1B,UAAI,MAAM;AACN,mBAAW,cAAc,iBAAiB;AACtC,sBAAY,OAAO,WAAW,OAAO,UAAU,UAAU;AACzD,0BAAgB,IAAI,WAAW,MAAM;AAAA,QACzC;AAAA,MACJ,OACK;AACD,oBAAY,OAAO,GAAG,QAAQ,gBAAgB,eAAe;AAAA,MACjE;AACA,gBAAU;AAAA,IACd;AACA,QAAI,UAAU;AACV,SAAG,MAAM,SAAS,CAAC,GAAG,MAAM,OAAO,MAAM,IAAI;AAC7C,gBAAU;AAAA,IACd;AACA,QAAI,QAAQ,gBAAgB,OAAO,GAAG;AAClC,SAAG,QAAQ,cAAc;AAAA,QACrB,QAAS,GAAG,mBAAmB,GAAG,QAAQ,EAAE;AAAA,QAC5C,QAAS;AAAA,MACb,CAAC;AAAA,IACL,WACS,SAAS;AAEd,SAAG,SAAS;AACZ,SAAG,QAAQ,SAAS;AAAA,IACxB;AACA,WAAO,CAAC,GAAG,eAAe;AAAA,EAC9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAeA,gBAAgB,KAAK,QAAQ,WAAW;AACpC,UAAM,eAAe,IAAI,IAAI,SAAS;AACtC,QACI,cAAc,GACd,WAAW,GACX,OAAO,aAAa,SAAS;AACjC,WAAO,WAAW,IAAI,UAAU,CAAC,MAAM;AACnC,YAAM,aAAa,OAAO,WAAW;AACrC,UAAI,UAAU,IAAI,QAAQ;AAE1B,aAAO,eAAe,SAAS;AAC3B,YAAI,aAAa,IAAI,OAAO,GAAG;AAC3B,iBAAO,OAAO,aAAa,GAAG,OAAO;AACrC;AACA,uBAAa,OAAO,OAAO;AAC3B,iBAAO,aAAa,SAAS;AAAA,QACjC;AACA,kBAAU,IAAI,EAAE,QAAQ;AAAA,MAC5B;AAEA,UAAI,aAAa,IAAI,UAAU,GAAG;AAC9B,qBAAa,OAAO,UAAU;AAAA,MAClC;AAEA,UAAI,cAAc,OAAO,QAAQ;AAC7B;AAAA,MACJ;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AACJ;;;ACjhBA,IAAO,sBAAQ,YAAU,MAAM,qBAAqB,UAAUC,OAAM;AAAA,EAChE,WAAW,QAAQ;AACf,WAAO;AAAA,EACX;AAAA;AAAA,EAEA,WAAW,gBAAgB;AACvB,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAsCH,SAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAOV,oBAAqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAOrB,uBAAwB;AAAA,IAC5B;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAcA,IAAI,mBAAmB,QAAQ;AAC3B,SAAK,QAAQ,aAAa;AAAA,EAC9B;AAAA,EACA,IAAI,qBAAqB;AACrB,WAAO,KAAK,QAAQ;AAAA,EACxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,IAAI,QAAQ,SAAS;AACjB,UACI,KAAa,MACb,aAAa,GAAG;AACpB,eAAW,MAAM;AAEjB,OAAG,mBAAmB;AAEtB,QAAI,SAAS;AACT,UAAI,QAAQ,YAAY,SAAS,UAAU;AACvC,mBAAW,KAAK,OAAO,QAAQ,OAAO,GAAG;AAGrC,cAAI,EAAE,CAAC,MAAM,cAAc,OAAO,EAAE,CAAC,MAAM,YAAY;AACnD,uBAAW,IAAI,IAAI,iBAAO;AAAA,cACtB,UAAW,EAAE,CAAC;AAAA,YAClB,CAAC,CAAC;AAAA,UACN,OACK;AACD,uBAAW,IAAI,IAAI,iBAAO,EAAE,CAAC,EAAE,YAAY,SAAS,WAAW,OAAO,OAAO;AAAA,cACzE,UAAW,EAAE,CAAC;AAAA,YAClB,GAAG,EAAE,CAAC,CAAC,IAAI;AAAA,cACP,UAAW,EAAE,CAAC;AAAA,cACd,OAAW,EAAE,CAAC;AAAA,YAClB,CAAC,CAAC;AAAA,UACN;AAAA,QACJ;AAAA,MACJ,WACS,MAAM,QAAQ,OAAO,GAAG;AAE7B,mBAAW,IAAI,GAAG,QAAQ,IAAI,kBAAgB;AAC1C,cAAI,wBAAwB,kBAAQ;AAChC,mBAAO;AAAA,UACX;AACA,iBAAO,IAAI,iBAAO,YAAY;AAAA,QAClC,CAAC,CAAC;AAAA,MACN,WACS,QAAQ,cAAc;AAE3B,mBAAW,IAAI,GAAG,QAAQ,MAAM;AAAA,MACpC,OACK;AACD,mBAAW,IAAI,IAAI,iBAAO;AAAA,UACtB,UAAW;AAAA,QACf,CAAC,CAAC;AAAA,MACN;AACA,iBAAW,QAAQ,UAAQ,KAAK,QAAQ,EAAE;AAAA,IAC9C;AAAA,EACJ;AAAA,EACA,IAAI,UAAU;AACV,WAAO,KAAK,aAAa,KAAK,WAAW,IAAI,WAAW,EAAE,WAAY,CAAC,UAAU,EAAE,CAAC;AAAA,EACxF;AAAA,EACA,IAAI,gBAAgB,iBAAiB;AACjC,SAAK,mBAAmB;AAAA,EAC5B;AAAA,EACA,IAAI,kBAAkB;AAClB,UACI,KAAyB,MACzB,EAAE,SAAS,UAAU,IAAI;AAC7B,QAAI,CAAC,GAAG,kBAAkB;AACtB,UAAI,QAAQ,OAAO;AACf,cAAM,0BAA0B,iBAAO,wBAAwB,OAAO;AACtE,WAAG,mBAAmB,eAAa;AAE/B,cAAI,aAAa,UAAU,cAAc;AACrC,mBAAO,UAAU,cAAc,KAAK,uBAAuB;AAAA,UAC/D,OACK;AACD,mBAAO,wBAAwB,SAAS;AAAA,UAC5C;AAAA,QACJ;AAAA,MACJ,OACK;AACD,WAAG,mBAAmB,eAAe;AAAA,MACzC;AAAA,IACJ;AACA,WAAO,GAAG;AAAA,EACd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,IAAI,aAAa;AACb,WAAO,KAAK,QAAQ,OAAO,KAAK,CAAAC,YAAU,CAACA,QAAO,QAAQ;AAAA,EAC9D;AAAA;AAAA,EAEA,eAAe,QAAQ;AACnB,UACI,KAAc,MACd,cAAc,CAAC,OAAO,UAAU,GAAG,gBAAgB,MAAM,GACzD,WAAc,OAAO,sBAAsB,OAAO;AAEtD,QAAI,CAAC,YAAY,CAAC,SAAS,QAAQ;AAC/B,aAAO;AAAA,IACX;AACA,QAAI,CAAC,OAAO,oBAAoB;AAC5B,aAAO,qBAAqB,OAAO,SAAS,MAAM;AAAA,IACtD;AACA,WAAO,WAAW,OAAO,mBAAmB,OAAO,OAAK;AACpD,aAAO,GAAG,eAAe,CAAC;AAAA,IAC9B,CAAC;AAED,WAAO,sBAAsB,OAAO,oBAAoB,mBAAmB,IAAI;AAE/E,WAAO,sBAAsB,OAAO,UAAU,eAAe,IAAI;AACjE,WAAO,eAAe,QAAQ,OAAO,SAAS,MAAM;AAAA,EACxD;AAAA,EACA,oBAAoB,QAAQ;AACxB,UAAM,KAAK;AACX,QAAI,OAAO,oBAAoB;AAC3B,aAAO,WAAW,OAAO,mBAAmB,MAAM;AAClD,aAAO,qBAAqB;AAAA,IAChC;AACA,QAAI,OAAO,UAAU;AACjB,aAAO,SAAS,QAAQ,OAAK,GAAG,oBAAoB,CAAC,CAAC;AACtD,aAAO,sBAAsB,OAAO,UAAU,eAAe,IAAI;AAAA,IACrE;AAAA,EACJ;AAAA,EACA,IAAI,oBAAoB;AACpB,WAAO,KAAK,QAAQ,OAAO,KAAK,QAAQ,KAAK,WAAW;AAAA,EAC5D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAoBA,UAAUA,SAAQ,SAAS,OAAO;AAC9B,UAAM,KAAK;AACX,IAAAA,UAASA,mBAAkB,mBAASA,UAAS,IAAI,iBAAOA,OAAM;AAE9D,IAAAA,QAAO,QAAQ;AAEf,OAAG,QAAQ,IAAIA,OAAM;AACrB,QAAI,CAAC,QAAQ;AACT,UAAI,GAAG,cAAc;AACjB,eAAO,GAAG,OAAO,EAAE,KAAK,MAAMA,OAAM;AAAA,MACxC,OACK;AACD,WAAG,OAAO;AAAA,MACdf,UAAM,KAAK;AACX,QAAI,SAAS,OAAO;AACpB,QAAI,YAAY;AACZ,UAAI,YAAY,OAAO;AACvB,UAAI,cAAc,UAAU;AACxB,YAAK,YAAY,cAAgB,aAAa,cAAe,WAAW,SAAS;AAC7E,mBAAS,WAAW;AACpB,cAAI,WAAW,SAAS;AAEpB,eAAG,aAAa,WAAW,QAAQ,WAAW,CAAC;AAAA,UACnD;AACA,qBAAW,WAAW;AACtB,uBAAa,WAAW;AACxB,sBAAY,OAAO;AAAA,QACvB;AAAA,MACJ;AAEA,UAAI,YAAY;AACZ,cAAM,cAAc,GAAG;AAEvB,WAAG,gBAAgB;AAcnB,YAAI,MAAM,QAAQ,UAAU,GAAG;AAC3B,qBAAW,QAAQ,OAAK,GAAG,UAAU,GAAG,IAAI,GAAG,EAAE;AAAA,QACrD,WACS,cAAc,YAAY;AAC/B,gBAAMA,UAAS,IAAI,iBAAO,UAAU;AACpC,UAAAA,QAAO,WAAW;AAClB,aAAG,UAAUA,SAAQ,IAAI;AAAA,QAC7B,WAGS,cAAc,UAAU;AAC7B,aAAG,UAAU;AAAA,YACT,UAAW;AAAA,YACX,OAAW,UAAU,CAAC;AAAA,UAC1B,GAAG,IAAI;AAAA,QACX,OAEK;AACD,aAAG,UAAU,YAAY,IAAI;AAAA,QACjC;AAEA,WAAG,gBAAgB;AAEnB,YAAI,CAAC,GAAG,cAAc,CAAC,aAAa;AAChC,iBAAO;AAAA,QACX;AAAA,MACJ;AAAA,IACJ;AAEA,OAAG,kBAAkB;AAGrB,UAAM,SAAS,GAAG,cAAc,MAAM;AAEtC,OAAG,SAAS;AACZ,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,cAAc,QAAQ;AAClB,UACI,KAAiC,MACjC,EAAE,SAAS,SAAS,SAAS,IAAI,IACjC,WAAiC,GAAG;AAExC,OAAG,QAAQ,gBAAgB,EAAE,QAAQ,CAAC;AACtC,QAAI,OAAO;AACX,QAAI,GAAG,MAAM;AACT,YAAM,aAAa,QAAQ;AAC3B,UAAI,GAAG,YAAY;AACf,WAAG,eAAe,QAAQ;AAAA,MAC9B,OACK;AACD,WAAG,oBAAoB,QAAQ;AAAA,MACnC;AACA,YAAM,aAAa,GAAG,mBAAmB,QAAQ,EAAE;AACnD,cAAQ,cAAc;AAAA,QAClB,QAAS;AAAA,QACT,QAAS;AAAA,MACb,CAAC;AACD,YAAM,QAAQ,YAAY,MAAM,YAAY,YAAY,IAAI;AAC5D,cAAU,MAAM;AAChB,gBAAU,MAAM;AAAA,IACpB,OACK;AAED,cAAQ,IAAI;AAAA,QACR,OAAO,EAAE,SAAU,GAAG,OAAQ,EAAE,GAAG;AAC/B,oBAAU;AACV,kBAAQ;AAAA,QACZ;AAAA,QACA,MAAO;AAAA,MACX,CAAC;AACD,UAAI,GAAG,YAAY;AAEf,WAAG,aAAa,GAAG,iBAAiB;AACpC,gBAAQ,UAAU;AAAA,UACd,IAAW;AAAA,UACX,UAAW,GAAG;AAAA,QAClB,CAAC;AAED,WAAG,aAAa,GAAG,iBAAiB;AAAA,MACxC,OACK;AACD,gBAAQ,QAAQ,MAAM;AAAA,MAC1B;AAAA,IACJ;AACA,OAAG,mBAAmB,UAAU,GAAG,sBAAsB,OAAO;AAAA,MAC5D,QAAU;AAAA,MACV;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA,SAAU,GAAG,QAAQ;AAAA,IACzB,CAAC;AAAA,EACL;AAAA,EACA,mBAAmB,OAAO;AACtB,SAAK,mBAAmB;AACxB,QAAI,OAAO;AACP,WAAK,mBAAmB,KAAK;AAAA,IACjC;AAAA,EACJ;AAAA,EACA,IAAI,WAAW;AACX,WAAO,KAAK,QAAQ;AAAA,EACxB;AAAA;AAAA,EAEA,mBAAmB,OAAO;AACtB,SAAK,QAAQ,UAAU,KAAK;AAG5B,QAAI,CAAC,KAAK,cAAc;AACpB,WAAK,QAAQ,WAAW,KAAK;AAC7B,WAAK,QAAQ,UAAU,KAAK;AAAA,IAChC;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAeA,SAASC,KAAI;AACT,WAAO,KAAK,OAAOA,GAAE;AAAA,EACzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAyCA,aAAa,cAAc,SAAS,OAAO;AACvC,UACI,KAAS,MACTD,UAAS,wBAAwB,mBAAS,eAAe,GAAG,QAAQ,IAAI,YAAY;AAExF,QAAIA,SAAQ;AACR,SAAG,QAAQ,OAAOA,OAAM;AAExB,SAAG,mBAAmB;AACtB,UAAI,CAAC,QAAQ;AACT,YAAI,GAAG,cAAc;AACjB,iBAAO,GAAG,OAAO,EAAE,KAAK,MAAMA,OAAM;AAAA,QACxC,OACK;AACD,aAAG,OAAO;AAAA,QACd;AAAA,MACJ;AACA,aAAOA;AAAA,IACX;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,aAAa,QAAQ,MAAM;AAEvB,SAAK,QAAQ,OAAO,KAAK,QAAQ,OAAO,OAAO,OAAK,CAAC,EAAE,QAAQ,CAAC;AAChE,QAAI,OAAO;AACP,aAAO,KAAK,OAAO;AAAA,IACvB;AAAA,EACJ;AAAA,EACA,sBAAsBE,QAAO;AACzB,UAAMF,UAAS,KAAK,QAAQ,MAAM,YAAYE,MAAK;AACnD,WAAQF,WAAU,CAACA,QAAO,WAAY,OAAOA,OAAM,IAAI;AAAA,EAC3D;AAAA,EACA,YAAY;AAvoBhB;AAwoBQ,eAAK,aAAL,mBAAe;AACf,UAAM,UAAU;AAAA,EACpB;AACJ;;;ACroBA,IAAM,gBAAgB;AAAA,EAClB,KAAU;AAAA,EACV,SAAU;AACd;AAgCA,IAAO,qBAAQ,YAAU,MAAM,oBAAoB,UAAUG,OAAM;AAAA,EAC/D,WAAW,QAAQ;AACf,WAAO;AAAA,EACX;AAAA;AAAA,EAEA,WAAW,gBAAgB;AACvB,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAMH,UAAW;AAAA,MACX,iBAAkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MASlB,sBAAuB;AAAA,IAC3B;AAAA,EACJ;AAAA,EACA,WAAW,aAAa;AACpB,WAAO;AAAA,MACH,iBAAkB,oBAAI,IAAI;AAAA,IAC9B;AAAA,EACJ;AAAA;AAAA;AAAA,EAGA,UAAU,QAAQ;AACd,UAAM,UAAU,MAAM;AAGtB,SAAK,IAAI,EAAE,QAAS,iBAAiB,SAAU,KAAK,CAAC;AAAA,EACzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,IAAI,WAAW;AACX,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,IAAI,SAAS,UAAU;AACnB,SAAK,YAAY,QAAQ;AAAA,EAC7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,YAAY,UAAU,SAAS;AAC3B,UACI,KAAa,MACb,EAAE,QAAQ,IAAI;AAClB,QAAI;AACJ,QAAI,qCAAU,QAAQ;AAClB,SAAG,YAAY;AAAA,IACnB,WACS,GAAG,UAAU;AAClB,aAAO,GAAG;AACV,SAAG,iBAAiB;AACpB,cAAQ,cAAc;AAAA,QAClB,QAAiB,GAAG,wBAAwB,QAAQ,OAAO;AAAA,QAC3D,gBAAiB,QAAQ,aAAa,GAAG,wBAAwB,QAAQ,eAAe,IAAI;AAAA,QAC5F,QAAiB;AAAA,MACrB,CAAC;AACD,eAAS,GAAG,MAAM,MAAM,MAAM,MAAM,OAAO,mCAAS,MAAM;AAAA,IAC9D;AAEA,OAAG,SAAS;AACZ,WAAO;AAAA,EACX;AAAA;AAAA;AAAA,EAGA,IAAI,eAAe;AACf,UAAM,eAAe,CAAC;AACtB,QAAI,KAAK,WAAW;AAChB,iBAAW,UAAU,MAAM;AACvB,YAAI,OAAO,cAAc;AACrB,uBAAa,KAAK,MAAM;AAAA,QAC5B;AAAA,MACJ;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA,EACA,IAAI,yBAAyB;AAvIjC;AAwIQ,UAAM,KAAK;AACX,QAAI,GAAG,WAAW;AACd,YAAM,EAAE,WAAW,IAAI,GAAG;AAC1B,YAAI,QAAG,4BAAH,mBAA4B,gBAAe,YAAY;AACvD,WAAG,0BAA0B,GAAG,QAAQ,UAAU,OAAO,OAAK,EAAE,YAAY;AAC5E,WAAG,wBAAwB,aAAa;AAAA,MAC5C;AAAA,IACJ;AACA,WAAO,GAAG,2BAA2B,CAAC;AAAA,EAC1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,wBAAwB,cAAc,eAAe,OAAO;AACxD,QAAI,KAAK,WAAW;AAChB,UAAI;AACJ,YAAM,aAAa,eAAe,KAAK,QAAQ,UAAU,KAAK,QAAQ;AACtE,iBAAW,UAAU,YAAY;AAC7B,YAAI,OAAO,eAAe;AACtB,cAAI,CAAC,cAAc;AACf,qBAAS;AAAA,UACb,WACS,WAAW,gBAAgB,OAAO,wBAAwB,SAAS,YAAY,GAAG;AACvF,qBAAS;AACT;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ;AACA,aAAO;AAAA,IACX;AAAA,EACJ;AAAA;AAAA,EAEA,mBAAmB;AACf,eAAW,WAAW,KAAK,iBAAiB;AACxC,WAAK,OAAO,KAAK,QAAQ,OAAO,GAAG,KAAK;AAAA,IAC5C;AAAA,EACJ;AAAA;AAAA,EAEA,mBAAmB;AACf,eAAW,WAAW,KAAK,iBAAiB;AACxC,WAAK,SAAS,KAAK,QAAQ,OAAO,CAAC;AAAA,IACvC;AAAA,EACJ;AAAA,EACA,aAAa,EAAE,QAAS,SAAS,QAAQ,QAAQ,GAAG;AAvLxD;AAwLQ,UACI,KAAe,MACf,EAAE,SAAS,IAAI;AAInB,QAAI,UAAU;AAIV,UAAI,SAAS,QAAQ;AACjB,YAAK,WAAW,aAAY,mCAAS,WAAW,WAAW,QAAQ;AAC/D,kBAAQ,cAAc;AAAA,YAClB,GAAG,GAAG,oBAAoB;AAAA,YAC1B,QAAS;AAAA,UACb,CAAC;AAAA,QACL;AAAA,MACJ,OAEK;AACD,gBAAQ,cAAc;AAAA,UAClB,QAAiB,GAAG,wBAAwB,QAAQ,OAAO;AAAA,UAC3D,gBAAiB,QAAQ,aAAa,GAAG,wBAAwB,QAAQ,eAAe,IAAI;AAAA,UAC5F,QAAiB;AAAA,QACrB,CAAC;AAAA,MACL;AAAA,IACJ;AACA,gBAAM,iBAAN,8BAAqB,GAAG;AAAA,EAC5B;AAAA,EACA,KAAK,SAAS,cAAc;AACxB,UAAM,KAAK;AACX,QAAI,GAAG,aAAa,CAAC,GAAG,MAAM;AAC1B,UAAI,aAAa;AACjB,UAAI,6CAAc,cAAc;AAC5B,qBAAa,GAAG,QAAQ,cAAc,OAAO,KAAK;AAClD,YAAI,CAAC,YAAY;AAEb;AAAA,QACJ;AAAA,MACJ;AAEA,YACI,oBAA4B,GAAG,wBAAwB,UAAU,GACjE,aAA4B,GAAG,SAAS,CAAC,EAAE,OAC3C,gBAA4B,kBAAkB,KAAK,aACnD,EAAE,sBAAsB,IAAI;AAGhC,SAAG,wBAAwB;AAC3B,SAAG,WAAW;AACd,cAAQ,QAAQ,YAAU,OAAO,UAAU,IAAI,aAAa;AAC5D,SAAG,SAAS;AACZ,SAAG,wBAAwB;AAI3B,UAAI,GAAG,eAAc,6CAAc,eAAc;AAC7C,cACI,EAAE,uBAAuB,IAAI,IAE7B,QAAQ,uBAAuB,QAAQ,iBAAiB;AAG5D,uBAAe,uBAAuB,QAAQ,CAAC;AAAA,MACnD;AAAA,IACJ;AACA,UAAM,KAAK,SAAS,YAAY;AAAA,EACpC;AAAA,EACA,SAAS,aAAa;AAClB,QAAI,eAAe,CAAC,YAAY,KAAK,WAAW;AAC5C,WAAK,oBAAoB,WAAW;AACpC,kBAAY,KAAK,YAAY;AAE7B,WAAK,gBAAgB,IAAI,YAAY,EAAE;AACvC,aAAO;AAAA,IACX;AACA,WAAO;AAAA,EACX;AAAA,EACA,OAAO,aAAa,YAAY,MAAM;AAClC,QAAI,2CAAa,KAAK,WAAW;AAC7B,WAAK,oBAAoB,WAAW;AACpC,kBAAY,KAAK,YAAY;AAE7B,mBAAa,KAAK,gBAAgB,OAAO,YAAY,EAAE;AACvD,aAAO;AAAA,IACX;AACA,WAAO;AAAA,EACX;AAAA,EACA,wBAAwB,SAAS;AAC7B,WAAO,QAAQ,OAAO,OAAK;AACvB,UAAI,EAAE,cAAc;AAChB,aAAK,WAAW,CAAC;AACjB,eAAO;AAAA,MACX,OACK;AACD,eAAO;AAAA,MACX;AAAA,IACJ,CAAC;AAAA,EACL;AAAA,EACA,oBAAoB,QAAQ;AACxB,UACI,KAAoB,MACpB;AAAA,MACI;AAAA,MACA;AAAA,MACA;AAAA,IACJ,IAAoB,IACpB,aAAoB,GAAG,iBACvB,EAAE,UAAU,IAAQ,GAAG,SACvB,WAAoB,CAAC,GAGrB,oBAAoB,GAAG,0BAA0B,CAAC,GAClD,YAAoB,CAAC,WAAW;AAC5B,YAAM,gBAAgB,CAAC,cAAc,GAAG,gBAAgB,MAAM;AAC9D,aAAO,wBAAwB,gBAAiB,iBAAiB,kBAAkB,SAAS,OAAO,EAAE;AAAA,IACzG;AACJ,eAAW,UAAU,WAAW;AAC5B,UAAI,OAAO,kBAAkB,OAAO,KAAK,aAAa,WAAW,IAAI,OAAO,EAAE,IAAI;AAC9E,mBAAW,IAAI,OAAO,EAAE;AACxB,iBAAS,KAAK,MAAM;AAAA,MACxB;AAAA,IACJ;AACA,eAAW,UAAU,UAAU;AAC3B,SAAG,oBAAoB,MAAM;AAAA,IACjC;AACA,UAAM,UAAU,GAAG,wBAAwB,GAAG,QAAQ,OAAO;AAC7D,QAAI,QAAQ;AACR,cAAQ,KAAK,MAAM;AAAA,IACvB;AAEA,QAAI,YAAY;AACZ,SAAG,kBAAkB;AAAA,IACzB;AACA,UACI,iBAAiB,CAAC,GAClBC,SAAiB,GAAG,SAAS,CAAC,EAAE;AACpC,QAAI,WAAiB,MACjB,iBAAiB,MACjB,aAAiB;AACrB,aAAS,YAAY;AACjB,YACI,MAAS,eAAe,KAAK,aAC7B,KAAS,gBAAgB,OAAO,QAAQ,WAAW,MAAM,aAAa,SAAS,GAAG,KAClF,SAAS,GAAG,QAAQ,EAAE,KAAK,IAAI,GAAG,WAAW,EAAE,GAAG,GAAG,IAAI;AAAA,QACrD,YAAiB;AAAA,QACjB,gBAAiB;AAAA,QACjB,aAAiB;AAAA,MACrB,CAAC;AAEL,aAAO,SAAS,CAAC,EAAE;AACnB,SAAG,SAAS,MAAM;AAClB,aAAO,gBAAgB,eAAe;AACtC,UAAI,CAAC,eAAe,KAAK,WAAW;AAChC,uBAAe,KAAK,MAAM;AAAA,MAC9B;AACA,SAAG,WAAW,KAAK,MAAM;AACzB,qBAAe,cAAc,KAAK,MAAM;AACxC,qBAAe,wBAAwB,KAAK,MAAM;AAClD;AACA,aAAO;AAAA,IACX;AACA,YAAQ,QAAQ,YAAU;AA1VlC;AA2VY,YACI,MAAM,OAAOA,MAAK,KAAK,SAAY,gBAAgB,OAAOA,MAAK,GAC/D,KAAM,gBAAgB,OAAO,QAAQ,WAAW,MAAM,aAAa,SAAS,GAAG;AAGnF,YAAI,YAAO,4BAAP,mBAAgC,YAAW,GAAG;AAC9C,WAAG,WAAW,MAAM;AACpB;AAAA,MACJ;AACA,UAAI,CAAC,aAAa,QAAQ,KAAK,QAAQ,GAAG;AACtC,YAAI,gBAAgB;AAEhB,cAAI,GAAG,iBAAiB;AACpB,sBAAU,cAAc;AAAA,UAC5B;AACA,yBAAe,KAAK,aAAa;AAAA,QACrC;AACA,yBAAiB,GAAG,QAAQ,EAAE;AAC9B,YAAI,CAAC,gBAAgB;AACjB,2BAAkB,IAAI,GAAG,WAAW,EAAE,GAAG,GAAG,IAAI;AAAA,YAC5C,YAAc;AAAA,YACd,aAAc;AAAA,YACd,YAAcA;AAAA,UAClB,CAAC;AAED,cAAI,sBAAsB;AACtB,uBAAW,IAAI,EAAE;AAEjB,eAAG,uBAAuB;AAAA,UAC9B;AAAA,QACJ;AACA,uBAAe,KAAK,YAAY,WAAW,IAAI,EAAE;AAEjD,uBAAe,SAAS,CAAC,EAAE;AAC3B,WAAG,SAAS,cAAc;AAC1B,uBAAe,gBAAgB,CAAC;AAChC,uBAAe,0BAA0B,CAAC;AAC1C,uBAAe,KAAK,cAAc;AAClC,WAAG,WAAW,KAAK,cAAc;AACjC,mBAAW;AACX,qBAAa;AAAA,MACjB;AACA,aAAO,aAAa,GAAG,EAAE,EAAE,cAAc;AAEzC,UAAI,CAAC,WAAW,IAAI,EAAE,GAAG;AACrB,uBAAe,KAAK,MAAM;AAAA,MAC9B;AACA,UAAI,UAAU,MAAM,GAAG;AACnB,uBAAe,cAAc,KAAK,MAAM;AACxC;AAAA,MACJ;AACA,qBAAe,wBAAwB,KAAK,MAAM;AAAA,IACtD,CAAC;AAED,QAAI,gBAAgB;AAEhB,UAAI,GAAG,iBAAiB;AACpB,kBAAU;AAAA,MACd;AACA,qBAAe,KAAK,aAAa;AAAA,IACrC;AACA,OAAG,SAAS;AACZ,UAAM,SAAS;AAAA,MACX,QAAS;AAAA,IACb;AACA,QAAI,YAAY;AACZ,aAAO,iBAAiB,eAAe,OAAO,SAAS;AAAA,IAC3D;AACA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,IAAI,YAAY;AAzapB;AA0aQ,WAAO,SAAQ,UAAK,aAAL,mBAAe,MAAM;AAAA,EACxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAqCA,MAAMA,QAAO,WAAW,MAAM,OAAO,cAAc,MAAM,SAAS,OAAO;AAhd7E;AAidQ,UAAM,KAAK;AACX,QAAI,YAAYC;AAChB,QAAID,UAAS,OAAOA,WAAU,UAAU;AACpC,kBAAYA,OAAM;AAClB,MAAAC,MAAYD,OAAM;AAClB,MAAAA,SAAYA,OAAM;AAAA,IACtB;AACA,QAAI,KAAK;AACL,SAAG,SAAS,KAAK,aAAa;AAAA,QAC1B,OAAAA;AAAA,QACA;AAAA,QACA,gBAAiBA,OAAM,SAAS,GAAG;AAAA,MACvC,CAAC;AAAA,IACL,WACSA,QAAO;AACZ,UAAI,aAAa,MAAM;AACnB,sBAAY,QAAG,cAAH,mBAAc,WAAUA,YAAS,QAAG,cAAH,mBAAc,QAAOC,MAAK,CAAC,GAAG,UAAU,YAAY;AAAA,MACrG;AACA,SAAG,YAAY,aAAa;AAAA,QACxB,OAAAD;AAAA,QACA;AAAA,QACA,IAAAC;AAAA,QACA,gBAAiBD,OAAM,SAAS,GAAG;AAAA,MACvC;AACA,SAAG,WAAW,CAAC,GAAG,SAAS;AAAA,IAC/B;AACA,QAAI,YAAY;AACZ,YAAM,EAAE,WAAAE,WAAU,IAAI,GAAG;AAEzB,UAAI,WAAW,kBAAkB,CAAC,OAAO,UAAU,eAAe,KAAKA,YAAWF,MAAK,GAAG;AACtF,eAAO,eAAeE,YAAWF,QAAO;AAAA,UACpC,MAAM;AACF,mBAAO,aAAa,QAAQ,MAAMA,MAAK;AAAA,UAC3C;AAAA,QACJ,CAAC;AAAA,MACL;AAAA,IACJ;AAEA,QAAI,gBAAgB,OAAO;AACvB,UAAI,GAAG,cAAc,CAAC,GAAG,qBAAqB;AAC1C,eAAO,GAAG,KAAK,MAAM,MAAM,OAAO,IAAI,EAAE,KAAK,MAAM,GAAG,gBAAgB,MAAM,CAAC;AAAA,MACjF,OACK;AACD,WAAG,KAAK,MAAM,MAAM,OAAO,IAAI;AAAA,MACnC;AAAA,IACJ;AACA,OAAG,gBAAgB,MAAM;AAAA,EAC7B;AAAA,EACA,gBAAgB,QAAQ;AACpB,QAAI,QAAQ;AACR;AAAA,IACJ;AACA,UACI,KAAK,MACL,WAAW,GAAG,YAAY,CAAC;AAQ/B,OAAG,QAAQ,SAAS,EAAE,WAAY,GAAG,WAAW,UAAU,SAAU,GAAG,QAAQ,OAAO,CAAC;AACvF,OAAG,QAAQ,WAAW,EAAE,QAAS,SAAS,WAAY,GAAG,WAAW,UAAU,SAAU,GAAG,QAAQ,OAAO,CAAC;AAAA,EAC/G;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYA,WAAWA,QAAO,YAAY,MAAM;AAChC,WAAO,KAAK,MAAMA,QAAO,WAAW,IAAI;AAAA,EAC5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA,cAAcA,QAAO;AACjB,UACI,KAAe,MACf,EAAE,SAAS,IAAI;AACnB,QAAI,CAAC,UAAU;AACX;AAAA,IACJ;AACA,UAAM,QAAQ,SAAS,UAAU,aAAW,QAAQ,UAAUA,MAAK;AACnE,QAAI,QAAQ,IAAI;AACZ,eAAS,OAAO,OAAO,CAAC;AACxB,UAAI,CAAC,SAAS,QAAQ;AAClB,eAAO,GAAG,cAAc;AAAA,MAC5B,OACK;AACD,eAAO,GAAG,MAAM;AAAA,MACpB;AAAA,IACJ;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,cAAc,SAAS,OAAO;AAC1B,WAAO,KAAK,YAAY,MAAM,EAAE,OAAO,CAAC;AAAA,EAC5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,gBAAgB,QAAQ,YAAY;AAhlBxC;AAilBQ,QAAI,CAAC,KAAK,WAAW;AACjB,aAAO;AAAA,IACX;AACA,UAAM,cAAa,UAAK,SAAS,CAAC,MAAf,mBAAkB;AACrC,WAAO,OAAO,UAAU,MAAM,cAAc,CAAC,OAAO;AAAA,EACxD;AAAA,EACA,mBAAmB,QAAQ;AACvB,UAAM,iBAAiB,OAAO,aAAa,IAAI,EAAE;AACjD,WAAO,iDAAgB,KAAK;AAAA,EAChC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,gBAAgB,YAAY;AACxB,QAAI,CAAC,KAAK,WAAW;AACjB,aAAO;AAAA,IACX;AACA,WAAO,KAAK,QAAQ,OAAO,OAAO,YAAU,KAAK,gBAAgB,QAAQ,UAAU,CAAC;AAAA,EACxF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,iBAAiB;AACb,QAAI,CAAC,KAAK,WAAW;AACjB,aAAO;AAAA,IACX;AACA,WAAO,KAAK,kBAAkB,KAAK,SAAS,CAAC,EAAE,KAAK;AAAA,EACxD;AAAA;AAAA,EAEA,cAAc,EAAE,SAAS,OAAO,GAAG;AAC/B,QACI,KAAK;AAAA,KAEA,CAAC,WAAW,cAAc,MAAM;AAAA,IAEhC,WAAW,KAAK,SAAS,KAAK,aAAW,QAAQ,SAAS,OAAO,IAExE;AAEE,WAAK,KAAK;AAAA,IACd;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,mCAAmC,aAAa,SAAS;AACrD,UACI,KAA0B,MAC1B,QAA0B,GAAG,QAAQ,WAAW,GAChD,WAA0B,GAAG,WAAW,WAAW,GACnD,EAAE,IAAK,OAAO,QAAQ,IAAI,IAC1B;AAAA,MACI;AAAA,MACA;AAAA,IACJ,IAA0B,SAC1B;AAAA,MACI;AAAA,MACA;AAAA,MACA;AAAA,IACJ,IAA0B;AAG9B,QAAI,aAAa,MAAO,KAAK,aAAa,CAAC,WAAa,CAAC,KAAK,aAAa,SAAU;AACjF;AAAA,IACJ;AACA,4BAAwB;AAAA,MAAQ,WAC5B,MAAM,aAAa,KAAK,EAAE,mBAAmB,CAAC;AAAA,IAClD;AACA,QAAI,SAAS;AAET,UAAI,iBAAiB;AACjB,wBAAgB,OAAO,QAAQ,GAAG,GAAG,GAAG,cAAc,OAAO,OAAK,CAAC,GAAG,YAAY,CAAC,CAAC,CAAC;AAAA,MACzF;AACA,cAAQ,QAAQ,OAAO,WAAW,GAAG,GAAG,GAAG,wBAAwB,OAAO,OAAK,CAAC,GAAG,YAAY,CAAC,CAAC,CAAC;AAAA,IACtG,OACK;AACD,UAAI,iBAAiB;AACjB,wBAAgB,OAAO,QAAQ,GAAG,cAAc,MAAM;AAAA,MAC1D;AACA,cAAQ,OAAO,WAAW,GAAG,wBAAwB,MAAM;AAAA,IAC/D;AACA,YAAQ,kBAAkB;AAC1B,OAAG,SAAS;AAAA,EAChB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,oBAAoB,aAAa;AAC7B,SAAK,mCAAmC,aAAa,KAAK;AAAA,EAC9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,oBAAoB,aAAa;AAC7B,SAAK,mCAAmC,aAAa,IAAI;AAAA,EAC7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,oBAAoB,YAAY,iBAAiB,MAAM;AACnD,UAAM,UAAU,aAAa,KAAK,QAAQ,YAAY,KAAK,QAAQ;AACnE,WAAO,QAAQ,OAAO,CAACG,UAAS,WAAW;AACvC,UAAI,OAAO,cAAc;AACrB,YAAI,kBAAkB,CAAC,OAAO,eAAe;AACzC,UAAAA,SAAQ,KAAK,MAAM;AAAA,QACvB;AACA,YAAI,OAAO,eAAe;AACtB,UAAAA,SAAQ,KAAK,MAAMA,UAAS,OAAO,aAAa;AAAA,QACpD;AAAA,MACJ;AACA,aAAOA;AAAA,IACX,GAAG,CAAC,CAAC;AAAA,EACT;AACJ;;;ACxqBA,IAAO,qBAAQ,YAAU,MAAM,oBAAoB,UAAUC,OAAM;AAAA,EAC/D,WAAW,eAAe;AACtB,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAyBH,WAAY;AAAA,IAChB;AAAA,EACJ;AAAA,EACA,YAAY;AACR,QAAI,CAAC,WAAW,OAAO;AACnB,YAAM,IAAI,MAAM,qBAAqB;AAAA,IACzC;AACA,UAAM,QAAQ,IAAI,MAAM,MAAM;AAAA;AAAA,MAE1B,IAAI,QAAQ,UAAU;AAElB,YAAI,YAAY,QAAQ;AACpB,iBAAO,OAAO,QAAQ;AAAA,QAC1B;AAEA,YAAI,aAAa,UAAU;AACvB,iBAAO;AAAA,QACX;AAEA,YAAI,SAAS,OAAO,QAAQ,QAAQ;AAEpC,YAAI,CAAC,UAAU,CAAC,MAAM,SAAS,QAAQ,CAAC,GAAG;AACvC,mBAAS,OAAO,MAAM,SAAS,QAAQ,CAAC;AAAA,QAC5C;AACA,eAAO;AAAA,MACX;AAAA;AAAA,MAEA,IAAI,QAAQ,UAAU,OAAO;AAEzB,YAAI,YAAY,UAAU,OAAO,cAAc;AAC3C,iBAAO,QAAQ,IAAI;AAAA,QACvB,OAEK;AACD,iBAAO,IAAI,EAAE,CAAC,OAAO,WAAW,OAAO,GAAI,UAAU,GAAG,MAAM,CAAC;AAAA,QACnE;AACA,eAAO;AAAA,MACX;AAAA;AAAA,MAEA,eAAe,QAAQ,UAAU;AAE7B,YAAI,OAAO,cAAc;AACrB,iBAAO,OAAO,QAAQ;AACtB,iBAAO;AAAA,QACX;AACA,eAAO,QAAQ,OAAO,OAAO,QAAQ,EAAE,MAAM;AAAA,MACjD;AAAA;AAAA,MAEA,IAAI,QAAQ,UAAU;AAElB,YAAI,YAAY,QAAQ;AACpB,iBAAO;AAAA,QACX;AAEA,YAAI,SAAS,WAAW,GAAG,KAAK,SAAS,SAAS,GAAG,GAAG;AACpD,gBAAM,OAAO,aAAa,cAAc,QAAQ;AAChD,qBAAW,6BAAM;AAAA,QACrB;AACA,eAAO,OAAO,SAAS,QAAQ;AAAA,MACnC;AAAA,IACJ,CAAC;AACD,WAAO;AAAA,EACX;AACJ;;;ACxHA,IAAO,wBAAQ,YAAO;AAftB;AAeyB,6BAA6B,UAAUC,OAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAOlE,cAAc,OAAO;AACjB,YACI,KAAY,MACZ,YAAY,GAAG,WAAW;AAC9B,UAAI,SAAS,GAAG,gBAAgB;AAE5B,WAAG,eAAe,QAAQ,cAAS;AA5B/C,cAAAC;AA4BkD,kBAAAA,MAAA,SAAS,kBAAT,gBAAAA,IAAA;AAAA,SAA0B;AAAA,MACpE;AACA,WAAK,CAAC,GAAG,kBAAkB,GAAG,eAAe,WAAW,KAAK,UAAU,WAAW;AAC9E,WAAG,iBAAiB,CAAC;AAErB,+CAAW,QAAQ,yBAAuB;AACtC,gBACI,SAAe,EAAE,GAAG,oBAAoB,GACxC;AAAA,YACI;AAAA,YACA;AAAA,YACA;AAAA,UACJ,IAAe,QACf,eAAe,OAAO,iBAAiB,WAAW,GAAG,YAAY,IAAI;AACzE,iBAAO,iBAAiB;AACxB,aAAG,eAAe,KAAK,MAAM;AAC7B,cAAI,cAAc;AACd,mBAAO,uBAAuB,OAAO;AACrC,mBAAO,eAAe;AACtB,kBAAM,wBAAwB,aAAa;AAE3C,gBAAI,sBAAsB,IAAI,EAAE,GAAG;AAC/B,oBAAM,mBAAmB,sBAAsB,IAAI,EAAE;AAErD,kBAAI,OAAO;AACP,sBAAM,iBAAiB,iBAAiB,KAAK,OAAK,EAAE,iBAAiB,YAAY;AACjF,oBAAI,gBAAgB;AAChB,8BAAY,OAAO,kBAAkB,cAAc;AAAA,gBACvD;AAAA,cACJ;AACA,+BAAiB,KAAK,MAAM;AAAA,YAChC,OACK;AACD,oCAAsB,IAAI,IAAI,CAAC,MAAM,CAAC;AAAA,YAC1C;AAEA,gBAAI,uBAAuB;AACvB,2BAAa,uBAAuB,QAAQ,EAAE;AAAA,YAClD;AACA,gBAAI,aAAa,QAAQ,GAAG;AACxB,2BAAa,sBAAsB,WAAW,aAAa,OAAO;AAAA,YACtE;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAOA,uBAAuB,QAAQ,iBAAiB;AAC5C,YACI,KAAmB,MACnB,OAAmB,OAAO,uBAC1B,mBAAmB,GAAG,qBAAqB,GAAG,mBAAmB,CAAC;AACtE,uBAAiB,IAAI,IAAI;AAAA,QACrB,OAAQ;AAAA,QACR;AAAA,MACJ;AACA,UAAI,CAAC,GAAG,OAAO,OAAO,GAAG;AACrB,WAAG,OAAO,OAAO,IAAI;AAAA,MACzB;AACA,UAAI,GAAG,QAAQ,GAAG;AACd,WAAG,4BAA4B,MAAM,GAAG,OAAO;AAAA,MACnD;AAAA,IACJ;AAAA,IACA,4BAA4B,MAAM,SAAS;AACvC,YAAM,KAAK;AAEX,cAAQ,QAAQ,YAAU;AAEtB,eAAO,SAAS,UAAQ;AAEpB,gBAAM,UAAU,QAAQ,OAAO,WAAW,aAAa,WAAW,IAAI,MAAM;AAC5E,iBAAO,eAAe,MAAM,SAAS;AAAA,YACjC,YAAe;AAAA,YACf,cAAe;AAAA,YACf,KAAe,WAAW;AACtB,qBAAO,GAAG,cAAc,MAAM,IAAI;AAAA,YACtC;AAAA,YACA,KAAM,SAAS,OAAO;AAClB,qBAAO,GAAG,cAAc,MAAM,MAAM,KAAK;AAAA,YAC7C;AAAA,UACJ,CAAC;AAAA,QACL,CAAC;AAAA,MACL,CAAC;AAAA,IACL;AAAA;AAAA;AAAA;AAAA;AAAA,IAKA,qBAAqB;AACjB,WAAK,gBAAgB,CAAC;AACtB,WAAK,QAAQ,YAAU,OAAO,cAAc,CAAC;AAAA,IACjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAOA,0BAA0B,QAAQ,WAAW;AACzC,6CAAW,QAAQ,cAAY;AAC3B,cACI,EAAE,OAAO,IAAI,UAEb,YAAY,SAAS,UAAU,SAAS,QAAQ,KAAK,OAAO,IAAI,OAAO,UAAU;AAErF,sBAAc,UAAa,KAAK,mBAAmB,QAAQ,WAAW,OAAO,cAAc,SAAS;AAAA,MACxG;AAAA,IACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAWA,sBAAsB,MAAM,YAAY;AACpC,YAAM,KAAK,MAAM,KAAK,UAAU;AAChC,aAAQ,KAAK,cAAc,IAAI,KAAK,KAAK,cAAc,IAAI,EAAE,EAAE,KAAM,CAAC;AAAA,IAC1E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAQA,cAAc,QAAQ,MAAM;AACxB,YAAM,EAAE,QAAQ,MAAM,IAAI,KAAK,iBAAiB,IAAI;AACpD,aAAQ,MAAM,cAAc,OAAO,YAAY,KAAK,MAAM,cAAc,OAAO,YAAY,EAAE,OAAO,EAAE,KAAM,CAAC;AAAA,IACjH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAMA,cAAc,OAAO,MAAM,SAAS;AAChC,YACI,EAAE,QAAQ,MAAM,IAAI,KAAK,iBAAiB,IAAI,GAC9C,gBAAoB,MAAM,cAAc,OAAO,YAAY,MAAM,MAAM,cAAc,OAAO,YAAY,IAAI,CAAC,IAC7G,OAAqB,cAAc,MAAM,EAAE,KAAK,CAAC,GAAG,MAAM,GAC1D,QAAoB,CAAC,GACrB,UAAoB,CAAC;AACzB,YAAM,cAAc;AAEpB,UAAI,QAAQ,YAAU;AAClB,YAAI,CAAC,QAAQ,SAAS,MAAM,GAAG;AAC3B,iBAAO,OAAO,UAAU,IAAI;AAC5B,gBAAM,OAAO,MAAM;AACnB,kBAAQ,KAAK,MAAM;AAAA,QACvB;AAAA,MACJ,CAAC;AAED,cAAQ,QAAQ,YAAU;AACtB,YAAI,OAAO,mBAAmB,OAAO;AACjC,cAAI,CAAC,OAAO,OAAO,SAAS,KAAK,GAAG;AAChC,kBAAM,IAAI,MAAM;AAChB,kBAAM,KAAK,MAAM;AAAA,UACrB;AAAA,QACJ,OACK;AACD,WAAC,MAAM,IAAI,MAAM,IAAI,MAAM;AAC3B,gBAAM,KAAK,MAAM;AAAA,QACrB;AAEA,eAAO,OAAO,UAAU,IAAI,MAAM;AAAA,MACtC,CAAC;AACD,YAAM,aAAa;AACnB,UAAI,QAAQ,QAAQ;AAChB,cAAM,QAAQ,UAAU,EAAE,SAAU,QAAQ,CAAC;AAC7C,cAAM,QAAQ,UAAU,EAAE,QAAS,UAAU,SAAU,QAAQ,CAAC;AAAA,MACpE;AACA,UAAI,MAAM,QAAQ;AACd,cAAM,QAAQ,OAAO,EAAE,SAAU,MAAM,CAAC;AACxC,cAAM,QAAQ,UAAU,EAAE,QAAS,OAAO,SAAU,MAAM,CAAC;AAAA,MAC/D;AAAA,IACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAWA,mBAAmB,QAAQ,IAAI,MAAM,YAAY,MAAM;AACnD,YACI,KAAQ,MACR,QAAQ,GAAG,cAAc,IAAI,MAAM,GAAG,cAAc,IAAI,IAAI,CAAC;AACjE,UAAI,cAAc,MAAM;AACpB,WAAG,qBAAqB,QAAQ,MAAM,SAAS;AAAA,MACnD;AACA,UAAI,MAAM,MAAM;AAEZ,oBAAY,QAAQ,MAAM,EAAE,MAAM,MAAM,EAAE,IAAI,CAAC,IAAI,MAAM;AAAA,MAC7D;AAAA,IACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAQA,qBAAqB,QAAQ,OAAO,MAAM,KAAK,MAAM;AACjD,YAAM,KAAK;AACX,eAAS,OAAO,cAAc,WAAW;AACrC,cACI,QAAW,GAAG,cAAc,YAAY,GACxC,WAAW,+BAAQ;AAGvB,YAAI,UAAU;AACV,gBAAM,eAAe,SAAS,QAAQ,MAAM;AAC5C,0BAAgB,KAAK,SAAS,OAAO,cAAc,CAAC;AACpD,cAAI,SAAS,WAAW,GAAG;AACvB,mBAAO,MAAM,SAAS;AAAA,UAC1B;AAAA,QACJ;AAAA,MACJ;AACA,UAAI,MAAM,MAAM;AACZ,eAAO,MAAM,EAAE;AAAA,MACnB,OACK;AACD,YAAI,OAAO,KAAK,eAAe;AAC3B,iBAAO,QAAQ,OAAO,KAAK,aAAa,EAAE;AAAA,YAAQ,CAAC,CAAC,cAAc,aAAa,MAC3E,OAAO,cAAc,+CAAe,EAAE;AAAA,UAC1C;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAOA,sBAAsB,QAAQ,SAAS;AACnC,WAAK,sBAAsB,QAAQ,aAAW;AAC1C,gBAAQ,QAAQ,YAAU;AACtB,gBACI;AAAA,YACI;AAAA,YACA;AAAA,YACA;AAAA,YACA;AAAA,UACJ,IAAQ,QACR,QAAQ,eAAe,cAAc,YAAY;AACrD,cAAI,WAAW,WAAW;AACtB,qCAAyB,KAAK,4BAA4B,uBAAuB,OAAO;AACxF,2BAAe,QAAQ,YAAU;AAC7B,oBAAM,UAAU,OAAO,aAAa,MAAM;AAC1C,yBAAW,eAAe,mBAAmB,QAAQ,QAAQ,IAAI,cAAc,QAAQ,EAAE;AAAA,YAC7F,CAAC;AACD;AAAA,UACJ;AACA,cAAI,WAAW,aAAa;AACxB,2BAAe,QAAQ,YAAU,OAAO,eAAe,MAAM,CAAC;AAC9D,mBAAO,eAAe,cAAc,YAAY;AAChD;AAAA,UACJ;AACA,cAAI,WAAW,OAAO;AAClB,qCAAyB,KAAK,4BAA4B,uBAAuB,OAAO;AAAA,UAC5F;AACA,cAAI,WAAW,SAAS,WAAW,UAAU;AACzC,oBAAQ,QAAQ,YAAU;AACtB,oBAAM,mBAAmB,+BAAQ,OAAO;AACxC,sBAAQ,QAAQ;AAAA,gBACZ,KAAK;AAED,sBAAI,kBAAkB;AAClB,qCAAiB,QAAQ,qBAAmB,gBAAgB,eAAe,MAAM,CAAC;AAAA,kBAGtF;AACA;AAAA,gBACJ,KAAK;AAGD,iCAAe,QAAQ,qBAAmB;AACtC,wBAAI,gBAAgB,IAAI,UAAU,KAAK,OAAO,IAAI;AAC9C,sCAAgB,aAAa,MAAM;AACnC,qCAAe,mBAAmB,iBAAiB,OAAO,IAAI,YAAY;AAAA,oBAC9E;AAAA,kBACJ,CAAC;AACD;AAAA,cACR;AAAA,YACJ,CAAC;AAAA,UACL;AAAA,QACJ,CAAC;AAAA,MACL,CAAC;AAAA,IACL;AAAA;AAAA;AAAA;AAAA;AAAA,IAKA,yBAAyB,UAAU,OAAO;AA7U9C,UAAAA;AA8UQ,OAAAA,MAAA,KAAK,0BAAL,gBAAAA,IAA4B,QAAQ,aAAW;AAC3C,gBAAQ,QAAQ,YAAU;AA/UtC,cAAAA;AAgVgB,gBACI;AAAA,YACI;AAAA,YACA;AAAA,YACA;AAAA,UACJ,IAAe,QACf,QAAe,eAAe,cAAc,YAAY,GACxD,gBAAeA,MAAA,+BAAQ,cAAR,gBAAAA,IAAmB;AACtC,uDAAc,QAAQ,iBAAe;AAEjC,2BAAe,mBAAmB,aAAa,OAAO,cAAc,QAAQ;AAE5E,wBAAY,IAAI,YAAY,OAAO,OAAO,IAAI;AAAA,UAClD;AAAA,QACJ,CAAC;AAAA,MACL;AAAA,IACJ;AAAA;AAAA,EAEJ,GAlVI,cADqB,IACd,SAAQ,kBADM;AAAA;;;ACNzB,IAAO,mBAAQ,YAAU,MAAM,kBAAkB,UAAUC,OAAM;AAAA,EAC7D,WAAW,QAAQ;AACf,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,IAAIC,QAAO,UAAU,KAAK,QAAQ,QAAQ;AACtC,QAAI,CAAC;AAAS,aAAO;AACrB,WAAO,QAAQ,OAAO,CAAC,KAAK,WAAW;AACnC,UAAI,OAAO;AAAc,eAAO;AAChC,YAAM,IAAI,OAAO,OAAOA,MAAK,CAAC;AAC9B,aAAO,MAAM,CAAC,IAAI,MAAM,MAAM;AAAA,IAClC,GAAG,CAAC;AAAA,EACR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,IAAIA,QAAO,UAAU,KAAK,QAAQ,QAAQ;AACtC,QAAI,CAAC,WAAW,CAAC,QAAQ;AAAQ,aAAO;AACxC,WAAO,QAAQ,OAAO,CAACC,MAAK,WAAW;AAtC/C;AAuCY,YAAM,OAAO,SAAO,YAAOD,MAAK,MAAZ,mBAAe;AACnC,UAAI,SAAS,YAAY,OAAOA,MAAK,IAAIC;AAAK,QAAAA,OAAM,OAAOD,MAAK;AAChE,aAAOC;AAAA,IACX,GAAG,QAAQ,CAAC,EAAED,MAAK,CAAC;AAAA,EACxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,IAAIA,QAAO,UAAU,KAAK,QAAQ,QAAQ;AACtC,QAAI,CAAC,WAAW,CAAC,QAAQ;AAAQ,aAAO;AACxC,WAAO,QAAQ,OAAO,CAAC,KAAK,WAAW;AArD/C;AAsDY,YAAM,OAAO,SAAO,YAAOA,MAAK,MAAZ,mBAAe;AACnC,UAAI,SAAS,YAAY,OAAOA,MAAK,IAAI;AAAK,cAAM,OAAOA,MAAK;AAChE,aAAO;AAAA,IACX,GAAG,QAAQ,CAAC,EAAEA,MAAK,CAAC;AAAA,EACxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,QAAQA,QAAO,UAAU,KAAK,QAAQ,QAAQ;AAC1C,QAAI,CAAC,WAAW,CAAC,QAAQ;AAAQ,aAAO;AACxC,QAAI,QAAQ;AACZ,UAAM,MAAM,QAAQ,OAAO,CAACE,MAAK,WAAW;AACxC,UAAI,OAAO;AAAc,eAAOA;AAChC,YAAM,IAAI,WAAW,OAAOF,MAAK,CAAC;AAClC,UAAI,CAAC,MAAM,CAAC,GAAG;AACX;AACA,eAAOE,OAAM;AAAA,MACjB,OACK;AACD,eAAOA;AAAA,MACX;AAAA,IACJ,GAAG,CAAC;AACJ,WAAO,QAAQ,IAAI,MAAM,QAAQ;AAAA,EACrC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,SAAS,YAAYF,QAAO;AACxB,WAAO,KAAK,IAAIA,QAAO,KAAK,gBAAgB,UAAU,CAAC;AAAA,EAC3D;AACJ;;;ACvFA,IACI,eAAe,CAAC,OAAO,SAAS,OAAO,KAAK,EAAE,YAAY,EAAE,SAAS,IAAI;AAD7E,IAEI,WAAe;AAAA,EACX,QAAU;AAAA,EACV,QAAU;AAAA,EACV,SAAU;AAAA,EACV,MAAU,CAAC,OAAO,SAAS;AACvB,QAAI,iBAAiB,QAAQ,gBAAgB,MAAM;AAC/C,aAAO,QAAQ,SAAS;AAAA,IAC5B;AACA,WAAO,OAAO,MAAM,SAAS,IAAI,CAAC,EAAE,SAAS,IAAI,KAC7C,OAAO,MAAM,QAAQ,CAAC,EAAE,SAAS,IAAI,KACrC,OAAO,MAAM,YAAY,CAAC,EAAE,SAAS,IAAI;AAAA,EACjD;AAAA,EACA,QAAY,CAAC,OAAO,SAAS,UAAU;AAAA;AAAA,EACvC,WAAY,CAAC,OAAO,SAAS,UAAU;AAC3C;AAgBJ,IAAO,sBAAQ,YAAU,MAAM,qBAAqB,UAAUG,OAAM;AAAA,EAChE,WAAW,QAAQ;AACf,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA,OAAO,MAAM,SAAS,MAAM,YAAY,kBAAkB;AACtD,UACI,UAAU,KAAK,UAAU,CAAC,mBAAmB,KAAK,SAAS,cAAc,KAAK,kBAAkB,gBAAgB,GAChH,MAAU,QAAQ,QAClB,QAAU,CAAC;AACf,QAAI,QAAQ,MAAM;AACd,aAAO,CAAC;AAAA,IACZ;AACA,QAAI,OAAO,SAAS,UAAU;AAC1B,aAAO,KAAK,YAAY;AAAA,IAC5B;AACA,QAAI,GACA,GACA,QACA,OACA,WACA;AACJ,SAAK,IAAI,GAAG,IAAI,KAAK,KAAK;AACtB,eAAS,QAAQ,CAAC;AAClB,UAAS;AACT,iBAAW,OAAO,UAAU,OAAO,YAAY;AAC3C,gBAAY,OAAO,GAAG;AACtB,oBAAa,iBAAiB,OAAQ,SAAS,OAAO;AACtD,cAAM,YAAY,yCAAa;AAC/B,YAAI,WAAW;AACX,kBAAY,UAAU,KAAK;AAC3B,sBAAY;AAAA,QAChB;AACA,qBAAa,SAAS,SAAS;AAC/B,YAAI,UAAS,yCAAa,OAAO,QAAO;AACpC,gBAAM,KAAK;AAAA,YACP,OAAQ;AAAA,YACR,MAAQ;AAAA,YACR,OAAQ;AAAA,YACR,IAAQ,OAAO;AAAA,UACnB,CAAC;AAAA,QACL;AACA;AAAA,MACJ;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,YAAYC,QAAO,OAAO,WAAW,OAAO,mBAAmB,OAAO;AAClE,UACI,UAAa,KAAK,kBAAkB,gBAAgB,GACpD,MAAa,QAAQ,QACrB,aAAa,oBAAI,IAAI,GACrB,QAAa,CAAC;AAClB,QAAI,GAAG,QAAQ;AACf,QAAI,SAAS,MAAM;AACf,cAAQ,OAAO,KAAK,EAAE,YAAY;AAAA,IACtC;AACA,SAAK,IAAI,GAAG,IAAI,KAAK,KAAK;AACtB,eAAa,QAAQ,CAAC;AACtB,mBAAa,OAAOA,MAAK;AACzB,UAAI,CAAC,YAAY,CAAC,WAAW,IAAI,UAAU,GAAG;AAC1C,cACI,OAAU,sBAAsB,OAAO,SAAS,OAAO,YACvD,UAAU,SAAS,IAAI;AAC3B,YAAK,SAAS,QAAQ,eAAe,SAAU,SAAS,QAAQ,YAAY,KAAK,GAAG;AAChF,gBAAM,KAAK;AAAA,YACP,IAAQ,OAAO;AAAA,YACf,OAAQ;AAAA,YACR,MAAQ;AAAA,UACZ,CAAC;AACD,cAAI,UAAU;AACV,uBAAW,IAAI,UAAU;AAAA,UAC7B;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAaA,KAAKC,KAAI,mBAAmB,OAAQ;AAChC,WAAO,KAAK,kBAAkB,gBAAgB,EAAE,KAAKA,GAAE;AAAA,EAC3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,WAAW,WAAW,OAAO,mBAAmB,OAAO;AACnD,UACI,UAAU,OAAK,aAAa,QAAQ,EAAE,SAAS,GAAG,KAAK;AAC3D,QAAI,KAAK,QAAQ;AACb,aAAO,KAAK,MAAM,SAAS,gBAAgB,EAAE,CAAC;AAAA,IAClD;AACA,WAAO,KAAK,kBAAkB,gBAAgB,EAAE,KAAK,OAAO;AAAA,EAChE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,MAAMA,KAAI,mBAAmB,OAAO;AAChC,QAAI,KAAK,QAAQ;AACb,YAAM,UAAU,CAAC;AACjB,WAAK,SAAS,CAAC,SAAS;AACpB,YAAIA,IAAG,IAAI,GAAG;AACV,kBAAQ,KAAK,IAAI;AAAA,QACrB;AAAA,MACJ,GAAG,QAAW,QAAW,gBAAgB;AACzC,aAAO;AAAA,IACX;AACA,WAAO,KAAK,kBAAkB,gBAAgB,EAAE,OAAOA,GAAE;AAAA,EAC7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAaA,KAAKA,KAAI,mBAAmB,OAAO;AAC/B,WAAO,KAAK,kBAAkB,gBAAgB,EAAE,KAAKA,GAAE;AAAA,EAC3D;AAAA;AAEJ;;;AClMA,IAAM,WAAW;AAmCjB,IAAO,oBAAQ,YAAU,MAAM,mBAAmB,UAAUC,OAAM;AAAA,EAC9D,WAAW,QAAQ;AACf,WAAO;AAAA,EACX;AAAA;AAAA,EAEA,WAAW,gBAAgB;AACvB,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAmCH,eAAgB;AAAA,IACpB;AAAA,EACJ;AAAA,EACA,WAAW,eAAe;AACtB,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAMH,SAAU,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAOX,qBAAsB;AAAA,IAC1B;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA+BA,IAAI,WAAW;AACX,WAAO,QAAQ,KAAK,QAAQ,MAAM,KAAK,KAAK;AAAA,EAChD;AAAA,EACA,cAAc,SAAS;AACnB,WAAO,QAAQ,IAAI,YAAU,KAAK,sBAAsB,QAAQ,IAAI,CAAC;AAAA,EACzE;AAAA,EACA,0BAA0B,QAAQ;AAC9B,SAAK,QAAQ,WAAW;AAAA,EAC5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA+CA,KAAKC,QAAO,WAAW,MAAM,OAAO,SAAS,OAAO;AAChD,UACI,KAAiB,MACjB,UAAiB,GAAG,YACpB,iBAAiB,GAAG,UAAU,GAAG,QAAQ,MAAM,IAAI,CAAC;AACxD,QAAI,aAAa,MACb;AACJ,QAAIA,QAAO;AACP,UAAI,MAAM,QAAQA,MAAK,GAAG;AAEtB,WAAG,UAAUA,OAAM,IAAI,YAAU,GAAG,sBAAsB,QAAQ,OAAO,WAAW,WAAW,OAAO,SAAS,CAAC;AAAA,MACpH,OACK;AACD,cAAM,SAAS,GAAG,sBAAsBA,QAAO,SAAS;AACxD,YAAI,KAAK;AACL,oBAAU,GAAG,wBAAwB,OAAO,KAAK;AAEjD,cAAI,SAAS;AACT,yBAAoB,QAAQ;AAC5B,oBAAQ,YAAY,OAAO;AAAA,UAC/B,OACK;AACD,eAAG,QAAQ,KAAK,MAAM;AAAA,UAC1B;AAAA,QACJ,OACK;AACD,aAAG,UAAU,CAAC,MAAM;AAAA,QACxB;AAAA,MACJ;AAAA,IACJ;AACA,QAAI,CAAC,UAAU,GAAG,QAAQ,cAAc,EAAE,SAAU,GAAG,SAAS,SAAS,eAAe,CAAC,MAAM,OAAO;AAElG,SAAG,UAAU;AAEb,UAAI,eAAe,MAAM;AACrB,gBAAQ,YAAY;AAAA,MACxB;AACA,aAAO;AAAA,IACX;AACA,WAAO,GAAG,YAAY,MAAM;AAAA,EAChC;AAAA,EACA,sBAAsBA,QAAO,WAAW;AAnO5C;AAoOQ,UACI,KAAS,MACT,SAAS,EAAE,UAAU;AACzB,QAAI,OAAOA,WAAU,UAAU;AAC3B,mBAAa,OAAO,QAAQA,MAAK;AACjC,UAAIA,OAAM,IAAI;AACV,eAAO,OAAO;AACd,eAAO,SAASA,OAAM;AAAA,MAC1B;AACA,aAAO,aAAY,KAAAA,OAAM,cAAN,YAAmB;AAAA,IAC1C,WACS,OAAOA,WAAU,YAAY;AAClC,aAAO,SAASA;AAAA,IACpB,OACK;AACD,aAAO,QAAQA;AAAA,IACnB;AAEA,QAAI,OAAO,aAAa,MAAM;AAC1B,YAAM,UAAU,GAAG,wBAAwB,OAAO,KAAK;AACvD,aAAO,YAAY,UAAU,CAAC,QAAQ,YAAY;AAAA,IACtD;AACA,QAAI,OAAO,UAAU,MAAM;AACvB,YAAM,gBAAe,cAAG,eAAH,mBAAe,MAAM,OAAO,IAAI,OAAO,WAAvC,mBAA+C;AACpE,UAAI,cAAc;AAEd,eAAO,SAAS;AAAA,MACpB;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA,EACA,wBAAwBA,QAAO;AAC3B,WAAO,OAAOA,WAAU,YAAY,KAAK,QAAQ,KAAK,OAAK,EAAE,UAAUA,MAAK,KAAK;AAAA,EACrF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA,UAAUA,QAAO,YAAY,MAAM;AAC/B,WAAO,KAAK,KAAKA,QAAO,WAAW,IAAI;AAAA,EAC3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,aAAaA,QAAO;AAChB,UACI,cAAc,KAAK,QAAQ,UAAU,YAAU,OAAO,UAAUA,UAAS,OAAO,WAAWA,MAAK;AACpG,QAAI,cAAc,IAAI;AAClB,WAAK,QAAQ,OAAO,aAAa,CAAC;AAClC,aAAO,KAAK,KAAK;AAAA,IACrB;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,aAAa,SAAS,OAAO;AACzB,QAAI,KAAK,QAAQ,QAAQ;AACrB,WAAK,QAAQ,SAAS;AACtB,aAAO,KAAK,KAAK,QAAW,QAAW,QAAW,MAAM;AAAA,IAC5D;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,eAAe,SAAS;AACpB,UAAM,kBAAkB,KAAK;AAC7B,WAAO,CAAC,KAAK,QAAQ;AACjB,eAAS,IAAI,GAAG,IAAI,QAAQ,QAAQ,KAAK;AACrC,cACI,SAAS,QAAQ,CAAC,GAClB,EAAE,OAAAA,QAAO,YAAY,MAAM,gBAAgB,gBAAgB,IAAI,QAC/DC,MAAK,OAAO,MAAM,OAAO,QACzB,YAAY,YAAY,IAAI;AAChC,YAAIA,KAAI;AACJ,gBAAM,MAAMA,IAAG,KAAK,QAAQ,KAAK,GAAG;AACpC,cAAI,QAAQ,GAAG;AAEX;AAAA,UACJ;AACA,cAAI,QAAQ,MAAM;AACd,mBAAO,MAAM;AAAA,UACjB;AAAA,QACJ;AACA,cACI,SAAS,SAAS,KAAKD,MAAK,GAC5B,WAAW,SAAS,IAAI,IAAIA,MAAK,IAAI,IAAIA,MAAK,GAC9C,WAAW,SAAS,IAAI,IAAIA,MAAK,IAAI,IAAIA,MAAK;AAClD,YAAI,aAAa,UAAU;AACvB;AAAA,QACJ;AACA,YAAI,YAAY,MAAM;AAClB,iBAAO,CAAC;AAAA,QACZ;AACA,YAAI,YAAY,MAAM;AAClB,iBAAO;AAAA,QACX;AACA,YAAI,iBAAiB,OAAO,aAAa,UAAU;AAE/C,cAAI,kBAAkB,MAAM;AACxB,mBAAO,OAAO,QAAQ,EAAE,cAAc,QAAQ,IAAI;AAAA,UACtD;AAEA,cAAI,OAAO,kBAAkB,UAAU;AACnC,mBAAO,OAAO,QAAQ,EAAE,cAAc,UAAU,aAAa,IAAI;AAAA,UACrE;AAEA,cAAI,OAAO,kBAAkB,UAAU;AACnC,mBAAO,OAAO,QAAQ,EAAE,cAAc,UAAU,cAAc,QAAQ,aAAa,IAAI;AAAA,UAC3F;AAAA,QACJ;AACA,YAAI,WAAW,UAAU;AACrB,iBAAO;AAAA,QACX;AACA,YAAI,WAAW,UAAU;AACrB,iBAAO,CAAC;AAAA,QACZ;AAAA,MACJ;AACA,aAAO;AAAA,IACX;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,IAAI,WAAW;AACX,UACI,KAAK,MACL,EAAE,QAAQ,IAAI;AAGlB,WAAO,GAAG,eAAe,GAAG,aAAc,CAAC,EAAE,OAAQ,mBAAmB,CAAC,IAAK,GAAG,YAAY,GAAG,SAAS,OAAO,OAAO,IAAI,OAAQ;AAAA,EACvI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,YAAY,QAAQ;AAChB,UACI,KAAK,MACL,EAAE,UAAU,SAAS,UAAU,OAAO,IAAI;AAC9C,QAAI,GAAG,MAAM;AACT,OAAC,GAAG,aAAa,SAAS,SAAS,UAAQ;AACvC,YAAI,KAAK,YAAY,KAAK,UAAU;AAChC,eAAK,SAAS,KAAK,MAAM;AAGzB,eAAK,sBAAsB,KAAK,UAAU,eAAe,IAAI;AAAA,QACjE;AAAA,MACJ,CAAC;AACD,cAAQ,cAAc;AAAA,QAClB,QAAS,GAAG,mBAAmB,QAAQ,EAAE;AAAA,QACzC,QAAS;AAAA,MACb,CAAC;AAAA,IACL,WACS,GAAG,WAAW;AACnB,cAAQ,cAAc;AAAA,QAClB,GAAG,GAAG,oBAAoB,MAAM;AAAA,QAChC,QAAS;AAAA,MACb,CAAC;AAAA,IACL,OACK;AACD,cAAQ,cAAc;AAAA,QAClB,QAAS,QAAQ,OAAO,KAAK,MAAM;AAAA,QACnC,QAAS;AAAA,MACb,CAAC;AAAA,IACL;AACA,OAAG,iBAAiB,UAAU,GAAG,mBAAmB;AAAA,EACxD;AAAA,EACA,iBAAiB,QAAQ;AACrB,QAAI,QAAQ;AACR;AAAA,IACJ;AACA,UAAM,KAAK;AACX,OAAG,SAAS;AACZ,UAAM,QAAQ;AAAA,MACV,QAAU;AAAA,MACV,SAAU,GAAG;AAAA,MACb,SAAU,GAAG;AAAA,IACjB;AACA,OAAG,QAAQ,QAAQ,KAAK;AACxB,OAAG,QAAQ,WAAW,KAAK;AAAA,EAC/B;AAAA;AAEJ;;;AChbA,IAAM,aAAa,MAAM;AAkBzB,IAAO,uBAAQ,YAAU,MAAM,sBAAsB,UAAUE,OAAM;AAAA,EACjE,WAAW,QAAQ;AACf,WAAO;AAAA,EACX;AAAA;AAAA,EAEA,WAAW,gBAAgB;AACvB,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAOH,iBAAkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAMlB,eAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAMhB,aAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAMd,iBAAkB,CAAC,OAAO,UAAU,QAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAM5C,mBAAoB,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAMrB,yBAA0B;AAAA,IAC9B;AAAA,EACJ;AAAA;AAAA,EAEA,WAAW,aAAa;AACpB,WAAO;AAAA,MACH,eAAgB;AAAA,IACpB;AAAA,EACJ;AAAA;AAAA,EAEA,UAAU,QAAQ;AACd,UAAM,UAAU,MAAM;AACtB,UACI,KAAkB,MAClB,EAAE,YAAY,IAAI,IAClB,OAAkB,GAAG,YAAY,SAAS;AAC9C,QAAI,aAAa;AACb,SAAG,mBAAmB,QAAQ,YAAU,GAAG,MAAM,IAAI,IAAI,WAAW,GAAG,cAAc,QAAQ,MAAM,CAAC;AACpG,SAAG,YAAY,IAAI,WAAW;AAC1B,oBAAY,OAAO,GAAG,SAAS,GAAG,GAAG,MAAM;AAAA,MAC/C;AACA,kBAAY,IAAI;AAAA;AAAA;AAAA,QAGZ,iBAAkB,GAAG;AAAA,QACrB,QAAkB,GAAG;AAAA,QACrB,CAAC,IAAI,GAAa,GAAG;AAAA,QACrB,MAAkB;AAAA,QAClB,SAAkB;AAAA,MACtB,CAAC;AACD,UAAI,CAAC,YAAY,eAAe;AAC5B,oBAAY,gBAAgB,CAAC;AAAA,MACjC;AACA,kBAAY,cAAc,KAAK,EAAE;AACjC,SAAG,eAAe;AAAA,IACtB;AAAA,EACJ;AAAA;AAAA;AAAA,EAGA,IAAI,UAAU;AACV,WAAO,KAAK,eAAe;AAAA,EAC/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,IAAI,YAAY;AACZ,WAAO,QAAQ,KAAK,WAAW;AAAA,EACnC;AAAA,EACA,IAAI,gBAAgB,iBAAiB;AACjC,SAAK,mBAAmB,KAAK,UAAU,gBAAgB,KAAK,KAAK,OAAO,IAAI;AAAA,EAChF;AAAA,EACA,IAAI,kBAAkB;AAClB,WAAO,KAAK,oBAAoB;AAAA,EACpC;AAAA,EACA,IAAI,qBAAqB;AACrB,UACI,YAAc,MAAM,QAAQ,KAAK,eAAe,GAChD,cAAc,MAAM,QAAQ,KAAK,iBAAiB;AACtD,WAAO,aAAa,KAAK,gBAAgB,OAAO,UAAQ,CAAC,eAAe,CAAC,KAAK,kBAAkB,SAAS,IAAI,CAAC,KAAK,CAAC;AAAA,EACxH;AAAA;AAAA;AAAA,EAGA,sBAAsB;AAClB,QAAI,KAAK,eAAe;AACpB,WAAK,cAAc,QAAQ,WAAS,MAAM,eAAe,CAAC;AAAA,IAC9D;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,iBAAiB;AACb,UACI,KAA0B,MAC1B,EAAE,aAAa,OAAO,IAAI;AAC9B,QAAI,UAAU,CAAC;AACf,QAAI,CAAC,GAAG,WAAW;AACf,YAAM,IAAI,MAAM,8CAA8C;AAAA,IAClE;AACA,QAAI,YAAY,aAAa,YAAY,YAAY;AACjD,kBAAY,QAAQ,OAAK,QAAQ,KAAK,CAAC,GAAG,aAAa,EAAE,2BAA4B,MAAM,8BAA+B,KAAK,CAAC;AAAA,IACpI,OACK;AACD,gBAAU,YAAY,WAAW,OAAO,OAAK,CAAC,EAAE,gBAAgB,GAAG,gBAAgB,CAAC,CAAC;AAAA,IACzF;AACA,QAAI,QAAQ;AAER,SAAG,aAAa,CAAC;AACjB,SAAG,qBAAqB,CAAC;AAGzB,cAAQ,QAAQ,OAAK;AACjB,YAAI,EAAE,OAAO,SAAS,EAAE,GAAG;AACvB,aAAG,SAAS,CAAC;AAAA,QACjB,OACK;AACD,YAAE,UAAU,EAAE;AAAA,QAClB;AAAA,MACJ,CAAC;AAKD,UAAI,GAAG,yBAAyB;AAC5B,cAAM,WAAW,GAAG,YAAY,GAAG,QAAQ;AAC3C,kBAAU,GAAG,iBAAiB,UAAU,IAAI;AAAA,MAChD;AAAA,IACJ;AACA,OAAG,sBAAsB;AACzB,OAAG,OAAO;AACV,OAAG,sBAAsB;AAAA,EAC7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,iBAAiB;AACb,UACI,KAAK,MACL,SAAS,GAAG;AAChB,QAAI,CAAC,GAAG,WAAW;AACf,YAAM,IAAI,MAAM,8CAA8C;AAAA,IAClE;AACA,WAAO,WAAW;AAClB,WAAO,OAAO,GAAG,QAAQ,MAAM;AAC/B,WAAO,IAAI,GAAG,MAAM,MAAM;AAC1B,WAAO,SAAS;AAChB,WAAO,GAAG,OAAO;AAAA,EACrB;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,cAAc,QAAQ,QAAQ;AAC1B,WAAO,KAAK,YAAY,MAAM,EAAE,GAAG,MAAM;AAAA,EAC7C;AAAA;AAAA,EAEA,6BAA6B,OAAO;AAChC,SAAK,oBAAoB,KAAK;AAC9B,SAAK,sBAAsB;AAAA,EAC/B;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,oBAAoB,EAAE,QAAQ,SAAS,UAAU,OAAO,GAAG;AA3N/D;AA6NQ,QAAI,KAAK,qBAAqB;AAC1B,WAAK,sBAAsB;AAC3B;AAAA,IACJ;AAEA,QAAI,UAAU,WAAW,UAAU;AAC/B;AAAA,IACJ;AAIA,QAAI,WAAW,cAAY,UAAK,kBAAL,mBAAoB,KAAK,CAAAC,WAASA,UAAS,WAAU;AAC5E,WAAK,eAAe;AAAA,IACxB;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA0BA,YAAY,kBAAkB,YAAY,eAAe,QAAQ;AAC7D,WAAO,MAAK,iCAAQ,eAAc,KAAK,aAAa;AAAA,MAChD,GAAG,UAAU,CAAC;AAAA,MACd,MAAiB;AAAA,MACjB,UAAiB;AAAA;AAAA,MAEjB,aAAiB,KAAK;AAAA,MACtB,YAAiB,KAAK;AAAA;AAAA;AAAA,MAGtB,gBAAiB;AAAA,MACjB;AAAA,MACA;AAAA,IACJ,CAAC;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYA,QAAQ;AACJ,WAAO,KAAK,YAAY,GAAG,SAAS;AAAA,EACxC;AAAA;AAAA,EAEA,YAAY;AAnShB;AAqSQ,eAAK,kBAAL,mBAAoB,QAAQ,kBAAgB,aAAa,QAAQ;AAEjE,UAAM,UAAU;AAAA,EACpB;AACJ;;;AC7RA,IAAO,qBAAQ,YAAU,MAAM,oBAAoB,UAAUC,OAAM;AAAA,EAC/D,WAAW,QAAQ;AACf,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,WAAW;AACP,UACI,EAAE,SAAS,UAAU,QAAQ,IAAI,MACjC,QAAiC,CAAC;AACtC,QAAI,mCAAS,QAAQ;AACjB,YAAM,UAAU,QAAQ,IAAI,YAAU;AAClC,cAAM,QAAQ,aAAa,kBAAkB,aAAa,MAAM,MAAM,CAAC;AAEvE,eAAO,MAAM;AACb,eAAO,MAAM;AACb,eAAO;AAAA,MACX,CAAC;AAAA,IACL;AACA,QAAI,qCAAU,QAAQ;AAClB,YAAM,WAAW,SAAS,IAAI,aAAW;AACrC,cAAM,QAAQ,aAAa,kBAAkB,aAAa,MAAM,OAAO,CAAC;AAExE,eAAO,MAAM;AACb,eAAO;AAAA,MACX,CAAC;AAAA,IACL;AACA,QAAI,mCAAS,OAAO,QAAQ;AACxB,YAAM,UAAU,QAAQ,OAAO,IAAI,CAAAC,YAAU;AACzC,cAAM,QAAQ,aAAa,kBAAkB,aAAa,MAAMA,QAAO,MAAM,CAAC;AAE9E,cAAM,QAAQA,QAAO;AAErB,YAAI,MAAM,eAAe;AACrB,iBAAO,MAAM;AAAA,QACjB;AAGA,eAAO;AAAA,MACX,CAAC;AAAA,IACL;AACA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,WAAW,OAAO;AACd,UACI,KAAK,MACL;AAAA,MACI,UAAW,CAAC;AAAA,MACZ,WAAW,CAAC;AAAA,MACZ,UAAW,CAAC;AAAA,IAChB,IAAK,OACL;AAAA,MACI;AAAA,MACA;AAAA,IACJ,IAAI;AAER,OAAG,UAAU,QAAQ,OAAO,YAAU,OAAO,SAAU,OAAO,UAAU,CAAC,aAAc;AACvF,OAAG,WAAW,SAAS,MAAM;AAC7B,OAAG,KAAK;AAER,OAAG,UAAU,QAAQ,OAAO,CAAAA,YAAUA,QAAO,YAAaA,QAAO,YAAY,CAAC,eAAgB;AAC9F,OAAG,OAAO;AAAA,EACd;AACJ;;;AChFA,IAAM,UAAU,OAAK,OAAO,CAAC,EAAE,SAAS,GAAG,GAAG;AAK9C,IAAqB,MAArB,MAAyB;AAAA;AAAA;AAAA;AAAA;AAAA,EAKrB,YAAY,OAAO;AACf,SAAK,QAAQ;AACb,SAAK,UAAU;AAAA,EACnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,IAAI,MAAM,OAAO;AACb,SAAK,SAAS,OAAO,wBAAS,EAAE;AAAA,EACpC;AAAA,EACA,IAAI,QAAQ;AACR,WAAO,KAAK;AAAA,EAChB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,OAAO,KAAK,OAAO;AAEf,WAAQ,SAAS,OAAQ,QAAU,iBAAiB,MAAO,QAAQ,IAAI,IAAI,KAAK;AAAA,EACpF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,OAAO,IAAI,OAAO;AACd,WAAQ,iBAAiB,MAAO,MAAM,QAAQ,IAAI,IAAI,MAAM,KAAK,EAAE,IAAI,OAAO,EAAE,KAAK,GAAG;AAAA,EAC5F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,OAAO,MAAM,OAAO;AAChB,QAAI,GAAG;AACP,QAAI,SAAS,UAAU,GAAG;AACtB,cAAQ,OAAO,OAAO;AAAA,QAClB,KAAK;AACD,kBAAQ,OAAO,KAAK;AAAA,QAExB,KAAK;AACD,gBAAM,MAAM,MAAM,GAAG;AACrB,eAAK,IAAI,IAAI,QAAQ,MAAM,KAAgB;AACvC,gBAAI,CAAC,IAAI,SAAS,IAAI,CAAC,GAAG,EAAE;AAAA,UAChC;AACA;AAAA,QACJ,KAAK;AACD,gBAAM,CAAC,KAAK;AACZ;AAAA,MACR;AAAA,IACJ;AACA,WAAO,OAAO,CAAC;AAAA,EACnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,OAAO,QAAQ,KAAK,KAAK;AACrB,QAAI,QAAQ,KAAK;AACb,aAAO;AAAA,IACX;AACA,QAAI,CAAC,OAAO,CAAC,KAAK;AACd,aAAO,MAAM,IAAK,MAAM,KAAK;AAAA,IACjC;AACA,UAAM,IAAI,IAAI,GAAG;AACjB,UAAM,IAAI,IAAI,GAAG;AACjB,WAAQ,MAAM,MAAO,KAAO,MAAM,MAAO,IAAI;AAAA,EACjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,OAAO,OAAO;AACV,UAAM,IAAI,KAAK;AACf,WAAO,IAAI,KAAK,IAAI,GAAG,KAAK,UAAU,KAAK;AAAA,EAC/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,QAAQ,OAAO;AACX,WAAO,CAAC,IAAI,QAAQ,MAAM,KAAK;AAAA,EACnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA2BA,MAAM,SAAS;AACX,QAAI,MAAM;AACV,QAAI,SAAS;AACT,YACI,MAAM,KAAK,OACX,WAAW,QAAQ,CAAC,MAAM,KAC1B,YAAY,QAAQ,SAAS,GAAG,GAChC,IAAI,QAAQ;AAChB,UAAI,aAAa,WAAW;AAExB,cAAM,IAAI,QAAQ,WAAW,QAAQ,OAAO,GAAG,IAAI,CAAC,IAAI,OAAO,IAAI;AAAA,MACvE,WACS,UAAU;AACf,cAAM,IAAI,SAAS,QAAQ,OAAO,CAAC,CAAC;AAAA,MACxC,OACK;AACD,cAAM,IAAI,WAAW,QAAQ,OAAO,GAAG,IAAI,CAAC,CAAC;AAAA,MACjD;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA,EACA,WAAW;AACP,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,SAAS;AACL,WAAO,KAAK,SAAS;AAAA,EACzB;AAAA,EACA,UAAU;AAlKd;AAqKQ,YAAO,UAAK,YAAL,YAAiB,KAAK,UAAU,IAAI,IAAI,KAAK,KAAK;AAAA,EAC7D;AACJ;AACA,IAAI,SAAS;;;ACjKb,IAAMC,cAAa,OAAO,OAAO,CAAC,CAAC;AAMnC,IAAO,oBAAQ,YAAO;AAbtB;AAayB,6BAAyB,UAAUC,OAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAkD9D,IAAI,SAAS;AACT,aAAO,KAAK,QAAS,KAAK,eAAe,KAAK,YAAY;AAAA,IAC9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAMA,IAAI,SAAS;AACT,YAAM,KAAK,MACP,SAAS,CAAC;AACd,UAAI,GAAG,QAAQ;AACX,WAAG,SAAS,YAAU;AAClB,cAAI,OAAO,QAAQ;AACf,mBAAO,KAAK,MAAM;AAAA,UACtB;AAAA,QACJ,CAAC;AACD,eAAO;AAAA,MACX,OACK;AACD,WAAG,WAAW,QAAQ,OAAK;AACvB,cAAI,EAAE,QAAQ;AACV,mBAAO,KAAK,CAAC;AAAA,UACjB;AACA,YAAE,SAAS,YAAU;AACjB,gBAAI,OAAO,QAAQ;AACf,qBAAO,KAAK,MAAM;AAAA,YACtB;AAAA,UACJ,GAAG,IAAI;AAAA,QACX,CAAC;AAAA,MACL;AACA,aAAO;AAAA,IACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAeA,MAAM,aAAa,cAAc;AAAA,IACjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAaA,eAAe,QAAQ,UAAU,OAAO,QAAQ,SAAS,OAAO;AA5HpE,UAAAC;AA6HQ,YACI,KAAsB,MACtB,aAAsB,WAAW,GAAG,YAAY,OAAO,WACvD,EAAE,QAAQ,IAAY,IACtB,YAAsB,CAAC,GACvB,QAAsB,CAAC,GACvB,EAAE,gBAAgB,IAAI,SAAS,CAAC;AACpC,UAAI;AACJ,SAAG,mBAAmB,UAAU,WAAW,OAAO,EAAE,mBAAoB,EAAE,OAAO,WAAW,EAAE,KAAK,OAAO,kBAAkB,EAAE,GAAG,CAAC;AAElI,UAAI,CAAC,cAAc,MAAM,QAAQ;AAC7B,mBAAW,UAAU,OAAO;AAExB,cAAI,CAAC,GAAG,SAAS,SAAS,MAAM,KAAK,CAAC,OAAO,OAAO,EAAE,GAAG;AAErD,gBAAI,GAAG,QAAQ,SAAS,MAAM,GAAG;AAC7B,iBAAG,QAAQ,OAAO,MAAM;AAAA,YAC5B,WAES,CAAC,OAAO,UAAU;AACvB,iBAAG,MAAM,IAAI,MAAM;AAAA,YACvB;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ;AAEA,UAAI,cAAc,GAAG,aAAa;AAC9B,kBAAU,QAAQ,MAAM;AACxB,cAAM,QAAQ,MAAM;AAAA,MACxB;AACA,UAAI,UAAU,QAAQ;AAGlB,YAAI,UAAU,KAAK,CAAC,iBAAiB;AACjC,gCAAsB,QAAQ,QAAQ,MAAM;AAAA,QAChD,OAGK;AACD,gCAAsB,QAAQ,QAAQ,eAAe,IAAI,gBAAgB,mBAAmB,MAAM,EAAE;AAAA,QACxG;AAGA,gBAAQ,cAAc;AACtB,WAAG,QAAQ,OAAO,EAAE,qBAAqB,GAAG,SAAS;AACrD,gBAAQ,aAAa;AACrB,WAAG,SAAS;AAAA,MAChB,OACK;AAED,WAAG,cAAc;AAAA,MACrB;AAGA,SAAG,sBAAsB,OAAO,QAAQ;AAExC,UAAI,cAAc,UAAU,QAAQ;AAGhC,YAAI,GAAG,QAAQ,QAAQ;AACnB,aAAG,KAAK,MAAM,MAAM,OAAO,IAAI;AAAA,QACnC;AACA,SAAAA,MAAA,GAAG,kBAAH,gBAAAA,IAAA;AACA,YAAI,CAAC,QAAQ;AACT,gBAAM,QAAQ,EAAE,QAAS,WAAW,MAAO,GAAG,OAAO,SAAU,UAAU;AACzE,aAAG,QAAQ,WAAW,KAAK;AAC3B,aAAG,QAAQ,UAAU,KAAK;AAAA,QAC9B;AAAA,MACJ,WAES,CAAC,QAAQ;AACd,cAAM,QAAQ,EAAE,QAAS,OAAO,QAAQ,SAAU,MAAM,QAAQ,SAAU,UAAU,YAAa,OAAO,OAAQ,oBAAoB;AACpI,WAAG,QAAQ,OAAO,KAAK;AACvB,WAAG,QAAQ,UAAU,KAAK;AAE1B,YAAI,OAAO,OAAO,MAAM,EAAE,KAAK,cAAY,QAAQ,GAAG;AAClD,gBAAMC,SAAQ;AAAA,YACV,WAAa;AAAA,YACb,SAAa,SAAS,OAAO,YAAU,OAAO,OAAO,EAAE,CAAC;AAAA,YACxD,YAAa,SAAS,IAAI,WAAS;AAC/B,qBAAO,GAAG,QAAQ,MAAM,KAAK,WAAW;AAAA,YAC5C,CAAC;AAAA,UACL;AACA,aAAG,QAAQ,QAAQA,MAAK;AAAA,QAC5B;AAAA,MACJ;AAAA,IACJ;AAAA,IACA,kBAAkB,QAAQ,UAAU,OAAO,QAAQ,EAAE,QAAS,OAAO,QAAS,OAAO,YAAa,MAAM,GAAG;AACvG,YACI,KAAiC,MACjC,EAAE,QAAQ,IAAuB,IACjC,iBAAiC,CAAC,GAClC,WAAiC,CAAC,GAClC,EAAE,QAAQ,QAAQ,WAAW,IAAI,OACjC,mBAAiC,cAAc,GAAG,YAClD,mBAAiC,oBAAoB,OAAO,qBAAqB,OAAO,qBAAqB;AACjH,SAAG,mBAAmB,kBAAkB,gBAAgB,UAAU,EAAE,mBAAoB,EAAE,OAAO,WAAW,EAAE,KAAK,OAAO,kBAAkB,EAAE,IAAI,YAAa,iBAAiB,CAAC;AAGjL,UAAI,CAAC,QAAQ;AAET,mBAAW,UAAU,UAAU;AAC3B,iBAAO,YAAY,EAAE;AAAA,QACzB;AAEA,mBAAW,UAAU,UAAU;AAC3B,cAAI,OAAO,OAAO,SAAS,EAAE,GAAG;AAC5B,mBAAO,YAAY,EAAE;AAAA,UACzB;AAEA,cAAI,GAAG,MAAM,SAAS,MAAM,GAAG;AAC3B,eAAG,MAAM,OAAO,MAAM;AAAA,UAC1B,WAES,CAAC,OAAO,UAAU;AACvB,eAAG,QAAQ,IAAI,MAAM;AAAA,UACzB;AAAA,QACJ;AACA,WAAG,SAAS,OAAO,QAAQ;AAAA,MAC/B;AAEA,UAAI,eAAe,QAAQ;AACvB,gBAAQ,QAAQ,QAAQ,eAAe,CAAC,CAAC;AAEzC,YAAI,QAAQ,IAAI;AACZ,kBAAQ,cAAc;AACtB,kBAAQ,OAAO,OAAO,eAAe,MAAM;AAC3C,kBAAQ,aAAa;AACrB,aAAG,SAAS;AAAA,QAChB;AAAA,MACJ,OACK;AAED,gBAAQ;AAER,WAAG,cAAc;AAAA,MACrB;AACA,UAAI,CAAC,WAAW,GAAG,gCAAgC,CAAC,SAAS;AACzD,cAAM,QAAQ;AAAA,UACV,QAAa;AAAA,UACb;AAAA,UACA,SAAa;AAAA,UACb;AAAA,UACA,SAAa;AAAA,UACb,YAAa;AAAA,UACb;AAAA,QACJ;AACA,WAAG,QAAQ,UAAU,KAAK;AAC1B,WAAG,QAAQ,UAAU,KAAK;AAAA,MAC9B;AACA,aAAO;AAAA,IACX;AAAA,IACA,mBAAmB,MAAM,UAAU,CAAC,GAAG,MAAM,CAAC,GAAG,OAAO;AACpD,YAAM,KAAK,MACP,EAAE,oBAAoB,OAAO,aAAa,MAAM,IAAI,SAAS,GAC7D,WAAW,MAAM,QAAQ,IAAI,IAAI,OAAO,GAAG,YAAY,MAAM,UAAU;AAC3E,UAAI,UAAU;AACV,iBAAS,IAAI,GAAG,MAAM,SAAS,QAAQ,OAAO,IAAI,KAAK,KAAK;AACxD,kBAAQ,SAAS,CAAC;AAClB,cAAI,CAAC,mBAAmB;AACpB,oBAAQ,KAAK,KAAK;AAAA,UACtB;AACA,cAAI,KAAK,KAAK;AACd,aAAG,mBAAmB,OAAO,SAAS,KAAK;AAAA,YACvC,mBAAoB,qBAAqB,CAAC,MAAM,WAAW,EAAE;AAAA,YAC7D;AAAA,UACJ,CAAC;AAAA,QACL;AAAA,MACJ;AACA,aAAO,EAAE,SAAS,IAAI;AAAA,IAC1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAYA,YAAY,QAAQ,aAAa,OAAO;AACpC,YACI,KAAK,MACL,YAAa,cAAc,GAAG,cAAc,OAAO,sBAAuB,OAAO;AACrF,aAAO,EAAC,qCAAU,UAASH,cACvB,GAAG,YAEG,SAAS,OAAO,GAAG,eAAe,EAAE,KAAK,GAAG,QAAQ,IACpD;AAAA,IAEd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IASA,6BAA6B,cAAc,SAAS;AAChD,YACI,KAAc,MACd,EAAE,QAAQ,IAAI,IACd,QAAc,QAAQ,QAAQ,YAAY,GAC1C,WAAc,GAAG,iBAAiB,GAAG,YAAY,YAAY,GAAG,OAAO;AAE3E,UAAI,GAAG,cAAc,WAAW,aAAa,oBAAoB;AAC7D,WAAG,0BAA0B,YAAY;AAAA,MAC7C;AAKA,UAAI,SAAS,UAAU,UAAU,OAAO;AAGpC,gBAAQ,cAAc;AACtB,YAAI,SAAS;AACT,kBAAQ,OAAO,QAAQ,GAAG,GAAG,GAAG,QAAQ;AACxC,gBAAM,QAAQ,EAAE,QAAS,OAAO,UAAW,MAAM,SAAU,UAAU,OAAQ,QAAQ,EAAE;AACvF,aAAG,QAAQ,OAAO,KAAK;AACvB,aAAG,QAAQ,UAAU,KAAK;AAAA,QAC9B,OACK;AACD,kBAAQ,OAAO,QAAQ,GAAG,SAAS,MAAM;AACzC,gBAAM,QAAQ,EAAE,QAAS,UAAU,YAAa,MAAM,SAAU,UAAU,OAAQ,QAAQ,EAAE;AAC5F,aAAG,QAAQ,UAAU,KAAK;AAC1B,aAAG,QAAQ,UAAU,KAAK;AAAA,QAC9B;AACA,gBAAQ,aAAa;AACrB,WAAG,SAAS;AAAA,MAChB;AAAA,IACJ;AAAA;AAAA,IAEA,0BAA0B,cAAc;AAzW5C,UAAAE;AA0WQ,OAAAA,MAAA,aAAa,uBAAb,gBAAAA,IAAiC,QAAQ,WAAS;AAC9C,cAAM,aAAa,KAAK,EAAE,EAAE,SAAS;AACrC,YAAI,CAAC,MAAM,QAAQ;AACf,eAAK,0BAA0B,KAAK;AAAA,QACxC;AAAA,MACJ;AAAA,IACJ;AAAA,IACA,iBAAiB,UAAU,SAAS,SAAS,CAAC,GAAG;AAC7C,YACI,KAAa,MACb,cAAa,qCAAU,WAAU;AACrC,eAAS,IAAI,GAAG,IAAI,YAAY,KAAK;AACjC,cAAM,QAAQ,SAAS,CAAC;AAGxB,YAAI,CAAC,GAAG,aAAa,GAAG,gBAAgB,KAAK,GAAG;AAC5C,gBAAM,UAAU,MAAM,aAAa,GAAG,EAAE;AACxC,cAAI,WAAW,CAAC,QAAQ,QAAQ;AAE5B,mBAAO,KAAK,KAAK;AAAA,UACrB;AACA,kBAAQ,SAAS,CAAC;AAClB,cAAI,MAAM,WAAW,EAAE,GAAG;AACtB,eAAG,iBAAiB,GAAG,YAAY,KAAK,GAAG,SAAS,MAAM;AAAA,UAC9D;AAAA,QACJ;AAAA,MACJ;AACA,aAAO;AAAA,IACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAOA,MAAM,eAAe,YAAY,UAAU;AACvC,YACI,KAAqB,MACrB,SAAqB,GAAG,QAAQ,UAAU,GAC1C,OAAqB,OAAO,aAAa,EAAE;AAC/C,UAAI,aAAa,QAAW;AACxB,mBAAW,CAAC,KAAK;AAAA,MACrB;AAEA,UAAI,CAAC,KAAK,qBAAqB,CAAC,OAAO,UAAU,OAAO,WAAW,EAAE,MAAM,UAAU;AACjF,WAAG,QAAQ,oBAAoB,EAAE,QAAQ,SAAS,CAAC;AACnD,aAAK,YAAY;AACjB,YAAI,KAAK,WAAW;AAChB,aAAG,eAAe,MAAM;AACxB,iBAAO;AAAA,QACX,OACK;AACD,aAAG,aAAa,MAAM;AACtB,cAAI,UAAU;AAId,cAAI,CAAC,OAAO,UAAU;AAClB,iBAAK,oBAAoB;AACzB,gBAAI;AACA,oBAAM,GAAG,aAAa,MAAM;AAAA,YAChC,SACO,WAAP;AAEI,mBAAK,YAAY;AACjB,wBAAU;AACV,iBAAG,QAAQ,yBAAyB,EAAE,QAAQ,UAAU,CAAC;AAAA,YAC7D,UACA;AACI,mBAAK,oBAAoB;AAAA,YAC7B;AAAA,UACJ;AACA,iBAAO;AAAA,QACX;AAAA,MACJ;AAAA,IACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAOA,eAAe,cAAc;AAEzB,UAAI,aAAa,kBAAkB,IAAI,GAAG;AACtC,eAAO,KAAK,6BAA6B,cAAc,KAAK;AAAA,MAChE;AAAA,IACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAOA,aAAa,cAAc;AAEvB,UAAI,aAAa,kBAAkB,IAAI,GAAG;AACtC,eAAO,KAAK,6BAA6B,cAAc,IAAI;AAAA,MAC/D;AAAA,IACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IASA,gBAAgB,MAAM;AAtd1B,UAAAA;AAudQ,YACI,EAAE,eAAe,SAAS,cAAc,IAAI,KAAK,YACjD,UAA4C,oBAAI,IAAI,GACpD,cAA4C,CAAC;AACjD,iBAAW,QAAQ,MAAM;AACrB,cAAM,WAAW,KAAK,aAAa;AAEnC,YAAI,YAAY,MAAM;AAElB,cAAI,SAAS,QAAQ,IAAI,QAAQ;AAGjC,cAAI,WAAW,QAAW;AACtB,sBAASA,MAAA,KAAK,KAAK,CAAAE,UAAQA,MAAK,OAAO,MAAM,QAAQ,MAA5C,OAAAF,MAAiD;AAC1D,oBAAQ,IAAI,UAAU,MAAM;AAAA,UAChC;AAEA,cAAI,QAAQ;AACR,gBAAI,CAAC,OAAO,aAAa,GAAG;AACxB,qBAAO,aAAa,IAAI,CAAC;AAAA,YAC7B;AACA,mBAAO,aAAa,EAAE,KAAK,IAAI;AAAA,UACnC;AAAA,QACJ,OAEK;AACD,sBAAY,KAAK,IAAI;AAAA,QACzB;AAAA,MACJ;AACA,aAAO;AAAA,IACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAiBA,QAAQ,QAAQ,iBAAiB,iBAAiB,OAAO;AACrD,YACI,EAAE,OAAO,IAAI,QACb,UAAa,CAAC,GACd,UAAa,CAAC;AAClB,UAAI,GAAG;AAyFP,WAAK,IAAI,GAAG,IAAI,QAAQ,KAAK;AACzB,YAAI,CAAC,OAAO,CAAC,EAAE,MAAM;AACjB,gBAAMG,SAAQ,OAAO,CAAC;AACtB,iBAAO,CAAC,IAAI,OAAK,EAAEA,MAAK;AAAA,QAC5B;AACA,gBAAQ,CAAC,IAAI,oBAAI,IAAI;AAAA,MACzB;AACA,WAAK,SAAS,SAAS,OAAK;AACxB,qBAAa;AACb,YAAI,EAAE,QAAQ;AACV,eAAK,IAAI,GAAG,IAAI,QAAQ,KAAK;AACzB,kBACI,kBAAiB,yCAAY,SAAQ,IACrC,UAAiB,QAAQ,CAAC,GAC1B,MAAiB,OAAO,CAAC,EAAE,CAAC,GAC5B,OAAiB,GAAG,iBAAiB,QACrC,KAAiB,aAAa,eAAe,aAAa,QAAQ,GAAG,GACrE,SAAiB,QAAQ,IAAI,EAAE,KAAM,QAAQ,IAAI,IAAI;AAAA,cACjD;AAAA,cACA;AAAA,cACA;AAAA,cACA,UAAkB;AAAA,cAClB,UAAkB;AAAA,cAClB,UAAkB,CAAC;AAAA,cACnB,iBAAkB;AAAA,YACtB,CAAC,EAAG,IAAI,EAAE;AACd,gBAAI,cAAc,CAAC,WAAW,SAAS,SAAS,MAAM,GAAG;AACrD,yBAAW,SAAS,KAAK,MAAM;AAAA,YACnC;AACA,yBAAa;AAAA,UACjB;AACA,qBAAW,SAAS,KAAK,CAAC;AAAA,QAC9B;AAAA,MACJ,GAAG,IAAI;AAGP,cAAQ,QAAQ,OAAK,EAAE,QAAQ,CAACC,IAAG,IAAIC,SAAQ;AAC3C,2DAAkBD;AAClB,YAAI,gBAAgB;AAChB,UAAAA,KAAI,KAAK,aAAaA,EAAC;AACvB,UAAAC,KAAI,IAAI,IAAID,EAAC;AAAA,QACjB;AAAA,MACJ,CAAC,CAAC;AACF,cAAQ,WAAW,CAAC,GAAG,QAAQ,CAAC,EAAE,OAAO,CAAC;AAE1C,YAAM,OAAO,CAAC,MAAM;AAChB,YAAI,EAAE,UAAU;AACZ,YAAE,SAAS,KAAK,CAAC,KAAK,QAAQ;AAE1B,gBAAI,IAAI,QAAQ;AACZ,kBAAI;AACJ,uBAASE,KAAI,GAAG,CAAC,UAAUA,KAAI,QAAQA,MAAK;AACxC,sBACI,KAAK,OAAOA,EAAC,EAAE,GAAG,GAClB,KAAK,OAAOA,EAAC,EAAE,GAAG;AACtB,yBAAS,KAAK,KAAK,KAAK,KAAK,KAAK,IAAI;AAAA,cAC1C;AACA,qBAAO;AAAA,YACX,OAEK;AAED,kBAAI,OAAO,IAAI,QAAQ,YAAY,OAAO,IAAI,QAAQ,UAAU;AAC5D,uBAAO,IAAI,IAAI,cAAc,IAAI,KAAK,QAAW,EAAE,SAAU,KAAK,CAAC;AAAA,cACvE;AACA,qBAAO,IAAI,MAAM,IAAI,MAAM,KAAK,IAAI,MAAM,IAAI,MAAM,IAAI;AAAA,YAC5D;AAAA,UACJ,CAAC;AACD,YAAE,SAAS,QAAQ,IAAI;AAAA,QAC3B;AAAA,MACJ;AACA,WAAK,OAAO;AACZ,aAAO;AAAA,IACX;AAAA;AAAA,IAEA,gBAAgB,MAAM;AAClB,YAAM,EAAE,eAAe,cAAc,IAAI,KAAK;AAC9C,UAAI,cAAkB,OAClB,kBAAkB;AAItB,iBAAW,QAAQ,MAAM;AACrB,YAAI,KAAK,WAAW,MAAM,QAAQ,KAAK,aAAa,CAAC,GAAG;AACpD,4BAAkB;AAClB;AAAA,QACJ;AACA,YAAI,KAAK,aAAa,KAAK,MAAM;AAC7B,wBAAc;AAAA,QAClB;AAAA,MACJ;AACA,UAAI,mBAAmB,aAAa;AAChC,eAAO,KAAK,gBAAgB,IAAI;AAAA,MACpC;AACA,aAAO;AAAA,IACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAOA,MAAM,OAAO,OAAO;AAChB,YAAM,KAAK;AACX,cAAQ,MAAM,QAAQ,KAAK,IAAI,QAAQ,CAAC,KAAK;AAG7C,cAAQ,MAAM,OAAO,UAAQ;AACzB,YAAI,SAAS,QAAQ,KAAK,eAAe;AACzC,eAAO,UAAU,CAAC,KAAK,QAAQ;AAC3B,mBAAS,CAAC,MAAM,SAAS,KAAK,MAAM;AACpC,iBAAS,KAAK;AAAA,QAClB;AACA,eAAO;AAAA,MACX,CAAC;AAQD,UAAI,MAAM,UAAU,GAAG,QAAQ,gBAAgB,EAAE,SAAU,MAAM,CAAC,MAAM,OAAO;AAE3E,cAAM,KAAK,CAAC,KAAK,QAAQ,IAAI,QAAQ,IAAI,SAAS,IAAI,OAAO,CAAC;AAE9D,WAAG,WAAW;AAEd,mBAAW,QAAQ,OAAO;AACtB,gBAAM,YAAY,KAAK;AACvB,oBAAU,YAAY,IAAI;AAC1B,aAAG,eAAe,WAAW,KAAK;AAAA,QACtC;AAEA,WAAG,SAAS;AAOZ,WAAG,QAAQ,UAAU,EAAE,SAAU,MAAM,CAAC;AACxC,WAAG,QAAQ,UAAU;AAAA,UACjB,QAAU;AAAA,UACV,SAAU;AAAA,QACd,CAAC;AAAA,MACL;AAAA,IACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAOA,MAAM,QAAQ,OAAO;AACjB,YAAM,KAAK;AACX,cAAQ,MAAM,QAAQ,KAAK,IAAI,QAAQ,CAAC,KAAK;AAG7C,cAAQ,MAAM,OAAO,UAAQ;AACzB,cAAM,EAAE,OAAO,IAAI;AACnB,YAAI,SAAe,UAAU,CAAC,OAAO;AACrC,eAAO,UAAU,CAAC,KAAK,QAAQ;AAC3B,mBAAS,CAAC,MAAM,SAAS,MAAM;AAC/B,iBAAS,KAAK;AAAA,QAClB;AACA,eAAO;AAAA,MACX,CAAC;AAQD,UAAI,MAAM,UAAU,GAAG,QAAQ,iBAAiB,EAAE,SAAU,MAAM,CAAC,MAAM,OAAO;AAE5E,cAAM,KAAK,CAAC,KAAK,QAAQ,IAAI,QAAQ,IAAI,SAAS,IAAI,OAAO,CAAC;AAE9D,WAAG,WAAW;AACd,mBAAW,QAAQ,OAAO;AACtB,gBACI,EAAE,OAAO,IAAK,MACd,cAAc,OAAO,SAAS,MAAM,OAAO,SAAS,QAAQ,IAAI,IAAI,CAAC;AACzE,iBAAO,OAAO,YAAY,MAAM,OAAO,WAAW;AAClD,eAAK,YAAY,WAAW;AAC5B,aAAG,eAAe,MAAM,KAAK;AAAA,QACjC;AACA,WAAG,SAAS;AAOZ,WAAG,QAAQ,WAAW,EAAE,SAAU,MAAM,CAAC;AACzC,WAAG,QAAQ,UAAU;AAAA,UACjB,QAAU;AAAA,UACV,SAAU;AAAA,QACd,CAAC;AAAA,MACL;AAAA,IACJ;AAAA,EACJ,GAhyBI,cADqB,IACd,SAAQ,cACf,cAFqB,IAEd,gBAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA+BlB,mBAAoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAOpB,8BAA+B,cAAc,aAAa,QAAQ,OAAO,GAAG;AAAA,EAChF,IAzCqB;AAAA;;;ACNzB,IAAqB,aAArB,MAAgC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAS5B,OAAO,QAAQ,MAAM,YAAYC,KAAI;AACjC,UAAM,YAAY,CAAC,IAAI;AACvB,QAAI,MAAM;AACV,WAAO,UAAU,QAAQ;AACrB,aAAO,UAAU,IAAI;AACrB,MAAAA,IAAG,IAAI;AACP,iBAAW,WAAW,IAAI;AAC1B,UAAI,UAAU;AACV,kBAAU,KAAK,MAAM,WAAW,SAAS,MAAM,EAAE,QAAQ,CAAC;AAAA,MAC9D;AAAA,IACJ;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,OAAO,kBAAkB,MAAM,YAAYA,KAAI;AAC3C,UAAM,YAAY,CAAC,EAAE,MAAO,MAAM,QAAS,KAAK,CAAC;AACjD,WAAO,UAAU,QAAQ;AACrB,YAAM,EAAE,QAAQ,KAAK,IAAI,UAAU,IAAI;AACvC,MAAAA,IAAG,QAAQ,IAAI;AACf,YAAM,WAAW,WAAW,IAAI;AAChC,UAAI,MAAM,QAAQ,QAAQ,GAAG;AACzB,kBAAU,KAAK,GAAG,SAAS,MAAM,EAAE,QAAQ,EAAE,IAAI,YAAU,EAAE,MAAO,OAAO,QAAS,KAAK,EAAE,CAAC;AAAA,MAChG;AAAA,IACJ;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYA,OAAO,iBAAiB,MAAM,YAAYA,KAAI;AAC1C,UAAM,YAAY,CAAC,IAAI;AACvB,QAAI,MAAM;AACV,WAAO,UAAU,QAAQ;AACrB,aAAO,UAAU,UAAU,SAAS,CAAC;AACrC,MAAAA,IAAG,IAAI;AACP,iBAAW,WAAW,IAAI;AAC1B,UAAI,UAAU;AACV,kBAAU,OAAO,UAAU,SAAS,GAAG,GAAG,GAAG,QAAQ;AAAA,MACzD,OACK;AACD,kBAAU,SAAS,UAAU,SAAS;AAAA,MAC1C;AAAA,IACJ;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,OAAO,SAAS,MAAM,YAAYA,KAAI;AAClC,UACI,UAAU,oBAAI,IAAI,GAClB,YAAY,CAAC,IAAI;AACrB,QAAI,MAAM;AACV,WAAO,UAAU,QAAQ;AACrB,aAAO,UAAU,UAAU,SAAS,CAAC;AACrC,UAAI,QAAQ,IAAI,IAAI,GAAG;AACnB,QAAAA,IAAG,IAAI;AACP,kBAAU,IAAI;AAAA,MAClB,OACK;AACD,mBAAW,WAAW,IAAI;AAC1B,YAAI,UAAU;AACV,oBAAU,KAAK,GAAG,SAAS,MAAM,EAAE,QAAQ,CAAC;AAAA,QAChD;AACA,gBAAQ,IAAI,MAAM,IAAI;AAAA,MAC1B;AAAA,IACJ;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA,OAAO,YAAY,MAAM,YAAY,MAAM,OAAO;AAC9C,UACI,UAAU,oBAAI,IAAI,GAClB,YAAY,CAAC,IAAI;AACrB,QAAI,MAAM;AACV,WAAO,UAAU,QAAQ;AACrB,aAAO,UAAU,UAAU,SAAS,CAAC;AACrC,UAAI,QAAQ,IAAI,IAAI,GAAG;AACnB,cAAM,IAAI;AACV,kBAAU,IAAI;AAAA,MAClB,OACK;AACD,aAAK,IAAI;AACT,mBAAW,WAAW,IAAI;AAC1B,YAAI,UAAU;AACV,oBAAU,KAAK,GAAG,SAAS,MAAM,EAAE,QAAQ,CAAC;AAAA,QAChD;AACA,gBAAQ,IAAI,MAAM,IAAI;AAAA,MAC1B;AAAA,IACJ;AAAA,EACJ;AACJ;AACA,WAAW,SAAS;;;AC5FpB,IAAO,oBAAQ,YAAU,MAAM,mBAAmB,UAAUC,OAAM;AAAA,EAC9D,WAAW,QAAQ;AACf,WAAO;AAAA,EACX;AAAA,EACA,WAAW,eAAe;AACtB,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA6FH,gBAAiB;AAAA,MACjB,mBAAoB;AAAA,MACpB,kBAAoB;AAAA,IACxB;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAoBA,YAAY,MAAM;AAnKtB;AAoKQ,UACI,KAAc,MACd,EAAE,QAAQ,IAAI,IAGd,cAAc,QAAG,sBAAH,4BAAuB,EAAE,KAAK;AAChD,QAAI,eAAe,OAAO;AACtB;AAAA,IACJ;AACA,OAAG,sBAAsB;AACzB,UAAM,EAAE,OAAO,UAAU,QAAQ,SAAS,IAAI,IAAI,GAAG,OAAO,GAAG,gBAAgB,MAAM,UAAU,IAAI,GAAG,gBAAgB,MAAM,UAAU;AACtI,QAAI,EAAE,UAAU,IAAI,GAAG,gBACnB,YAAY;AAEhB,QAAI,WAAW;AAEX,UAAI,OAAO,cAAc,UAAU;AAC/B,oBAAY,SAAS,WAAW,EAAE,IAAI,MAAM,GAAG;AAAA,MACnD;AACA,kBAAY,MAAM,SAAS,SAAS,SAAS,OAAO,SAAS,QAAQ,SAAS;AAAA,IAClF;AACA,QAAI,GAAG,MAAM;AAGT,UAAI,MAAM,QAAQ;AAEd,cAAM,QAAQ,GAAG,IAAI,OAAO,SAAS;AAErC,cAAM,QAAQ,UAAQ,KAAK,cAAc,CAAC;AAAA,MAC9C;AACA,UAAI,OAAO,QAAQ;AACf,mBAAW,EAAE,QAAQ,MAAM,MAAM,KAAK,QAAQ;AAC1C,gBAAM,YAAY,GAAG,QAAQ,OAAO,EAAE;AACtC,oBAAU,YAAY,MAAM,KAAK;AAAA,QACrC;AAAA,MACJ;AAEA,SAAG,OAAO,UAAU,SAAS;AAAA,IACjC,OACK;AACD,UAAI,WAAW;AACX,WAAG,cAAc;AAAA,MACrB;AAIA,SAAG,OAAO,QAAQ;AAClB,SAAG,IAAI,KAAK;AACZ,UAAI,WAAW;AACX,WAAG,aAAa;AAAA,MACpB;AAAA,IACJ;AAGA,QAAI,aAAa,CAAC,WAAW;AACzB,cAAQ,QAAQ,CAAC,EAAE,QAAQ,OAAO,OAAO,MAAM,GAAG,cAAc,QAAQ,OAAO,MAAM,CAAC;AAAA,IAC1F;AAEA,OAAG,cAAc;AACjB,UAAM,QAAQ,EAAE,OAAQ,OAAO,SAAU,UAAU,SAAS,oBAAqB,UAAU;AAC3F,QAAI,GAAG,cAAc,CAAC,GAAG,cAAc;AAEnC,SAAG,OAAO;AAAA,QACN,QAAS,GAAG;AAAA,MAChB,CAAC;AAAA,IACL;AACA,QAAI,GAAG,WAAW;AAEd,SAAG,MAAM,MAAM,MAAM,OAAO,MAAM,GAAG,mBAAmB;AAAA,IAC5D,WACS,GAAG,UAAU;AAGlB,UAAI,GAAG,YAAY;AACf,gBAAQ,cAAc;AAAA,UAClB,QAAS,QAAQ,OAAO,KAAK,GAAG,eAAe,GAAG,OAAO,CAAC;AAAA,UAC1D,QAAS;AAAA,QACb,CAAC;AAAA,MACL,OAEK;AACD,WAAG,KAAK;AAAA,MACZ;AAAA,IACJ,WAES,CAAC,GAAG,MAAM;AAEf,UAAI,QAAQ,OAAO,KAAK,CAAC,QAAQ,UAAU,OAAO,OAAO,IAAI,KAAK,CAAC,GAAG;AAClE,gBAAQ,cAAc;AAAA,UAClB,QAAS,QAAQ,OAAO,KAAK,CAAC,GAAG,MAAM,IAAI,QAAQ,EAAE,EAAE,IAAI,IAAI,QAAQ,EAAE,EAAE,CAAC;AAAA,UAC5E,QAAS;AAAA,QACb,CAAC;AAED,SAAC,aAAa,GAAG,iBAAiB;AAAA,MACtC;AAAA,IACJ,OAEK;AACD,UAAI,WAAW,OACX,IAAI;AACR,iBAAW;AAAA,QACP,GAAG;AAAA,QACH,OAAK,MAAM,QAAQ,EAAE,QAAQ,KAAK,CAAC,WAAW,EAAE,WAAW;AAAA,QAC3D,UAAQ;AACJ,cAAI,KAAK,OAAO,IAAI,GAAG,GAAG;AACtB,uBAAW;AAAA,UACf;AAAA,QACJ;AAAA,MACJ;AAEA,UAAI,UAAU;AACV,WAAG,KAAK,CAAC,GAAG,MAAM,IAAI,QAAQ,EAAE,EAAE,IAAI,IAAI,QAAQ,EAAE,EAAE,GAAG,QAAW,QAAW,IAAI;AACnF,WAAG,aAAa,IAAI;AAEpB,SAAC,aAAa,GAAG,iBAAiB;AAAA,MACtC;AAAA,IACJ;AAEA,QAAI,WAAW;AACX,SAAG,QAAQ,WAAW;AAAA,QAClB,QAAW;AAAA,QACX;AAAA,QACA,SAAW,QAAQ;AAAA,QACnB,UAAW;AAAA,MACf,CAAC;AAAA,IACL;AACA,OAAG,sBAAsB;AACzB,OAAG,QAAQ,YAAY,KAAK;AAAA,EAChC;AAAA;AAAA,EAEA,gBAAgB,MAAM,YAAY;AAC9B,QAAI,CAAC,MAAM;AACP,aAAO;AAAA,QACH,UAAW,KAAK;AAAA,MACpB;AAAA,IACJ;AACA,UACI,KAAyB,MACzB,EAAE,SAAS,UAAU,IAAI,GAAG,YAC5B,WAAyB,CAAC,GAC1B,QAAyB,CAAC,GAC1B,UAAyB,CAAC,GAC1B,UAAyB,CAAC,GAC1B,MAAyB,CAAC,GAC1B,aAAyB,MAAM,QAAQ,UAAU;AACrD,UAAM,EAAE,WAAW,kBAAkB,IAAI,GAAG;AAC5C,QAAI,WAAW;AACf,SAAK,QAAQ,aAAW;AAvThC;AAwTY,gBAAU,QAAQ,UAAU,QAAQ,OAAO;AAC3C,YACI,KAAS,QAAQ,OAAO,GACxB,SAAS,GAAG,QAAQ,EAAE;AAE1B,UAAI,CAAC,cAAc,WAAW,SAAS,EAAE,GAAG;AAExC,YAAI,QAAQ;AAGR,gBAAI,QAAG,qBAAH,4BAAsB,EAAE,QAAQ,MAAO,QAAQ,QAAO,OAAO;AAE7D,gBAAI,sBAAsB,OAAO;AAC7B,yBAAWC,UAAS,WAAW;AAC3B,oBAAI,EAAEA,OAAM,cAAc,YAAaA,OAAM,cAAc,OAAO,MAAO;AACrE,0BAAQA,OAAM,UAAU,IAAIA,OAAM;AAAA,gBACtC;AAAA,cACJ;AAAA,YACJ;AAEA,kBAAM,SAAS,OAAO,IAAI,SAAS,MAAM,QAAQ,SAAS,CAAC;AAC3D,gBAAI,QAAQ;AACR,sBAAQ,KAAK;AAAA,gBACT;AAAA,gBACA;AAAA,gBACA,OAAQ;AAAA,cACZ,CAAC;AAAA,YACL;AAAA,UACJ;AAAA,QACJ,OAEK;AACD,gBAAM,KAAK,GAAG,cAAc,GAAG,aAAa,OAAO,CAAC,CAAC;AAAA,QACzD;AAAA,MACJ;AACA,UAAI,QAAQ;AACR;AAAA,MACJ;AACA,cAAQ,EAAE,IAAI;AACd,UAAI,KAAK,EAAE;AAAA,IACf,CAAC;AAED,QAAI,WAAW,GAAG,QAAQ,YAAY;AAGlC,UAAI,YAAY;AACZ,mBAAW,MAAM,YAAY;AACzB,cAAI,CAAC,QAAQ,EAAE,GAAG;AACd,qBAAS,KAAK,GAAG,QAAQ,EAAE,CAAC;AAAA,UAChC;AAAA,QACJ;AAAA,MACJ,OAEK;AACD,WAAG,QAAQ,YAAU;AACjB,cAAI,CAAC,QAAQ,OAAO,EAAE,GAAG;AACrB,qBAAS,KAAK,MAAM;AAAA,UACxB;AAAA,QACJ,CAAC;AAAA,MACL;AAAA,IACJ;AACA,WAAO,EAAE,OAAO,UAAU,QAAS,CAAC,GAAG,SAAS,IAAI;AAAA,EACxD;AAAA;AAAA,EAEA,gBAAgB,MAAM;AAClB,QAAI,CAAC,MAAM;AACP,aAAO;AAAA,QACH,UAAW,KAAK;AAAA,MACpB;AAAA,IACJ;AACA,UACI,KAAe,MACf;AAAA,MACI;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACJ,IAAe,GAAG,YAClB;AAAA,MACI;AAAA,MACA;AAAA,IACJ,IAAe,GAAG,gBAClB,WAAe,CAAC,GAChB,QAAe,CAAC,GAChB,SAAe,CAAC,GAChB,UAAe,CAAC,GAChB,eAAe,oBAAI,IAAI,GACvB,MAAe,CAAC;AACpB,QAAI,GAAG,mBAAmB;AACtB,aAAO,GAAG,gBAAgB,IAAI;AAAA,IAClC;AACA,eAAW,kBAAkB,EAAE,QAAS,MAAM,IAAK,GAAG,SAAS,IAAI,UAAW,KAAK,GAAG,OAAK,EAAE,UAAU,CAAC,QAAQ,YAAY;AAnZpI;AAoZY,UAAI,QAAQ;AACR,cAAM,EAAE,IAAI,KAAK,IAAI,GAAG,gBAAgB,OAAO;AAE/C,YAAI,MAAM;AAGN,gBAAI,QAAG,qBAAH,4BAAsB,EAAE,QAAS,MAAM,MAAO,QAAQ,QAAO,OAAO;AACpE,gBAAI;AACJ,kBAAM,mBAAmB,KAAK;AAE9B,gBAAI,qBAAqB,QAAQ,QAAQ,aAAa,MAAM,MAAM;AAC9D,mBAAK,cAAc;AACnB,mBAAK,KAAK,aAAa,IAAI,KAAK,WAAW;AAC3C,qBAAO,QAAQ,aAAa;AAC5B,iBAAG,eAAe,MAAM,IAAI;AAC5B,gCAAkB;AAAA,YACtB;AAEA,gBAAI,KAAK,OAAO,OAAO,OAAO,OAAO,GAAG;AACpC,qBAAO,KAAK;AAAA,gBACR;AAAA,gBACA;AAAA,gBACA,OAAQ,OAAO,aAAa,EAAE,QAAQ,OAAO;AAAA,cACjD,CAAC;AAAA,YACL;AAOA,gBAAI,sBAAsB,OAAO;AAC7B,yBAAWA,UAAS,WAAW;AAE3B,oBAAIA,OAAM,SAAS,cAAc,EAAEA,OAAM,cAAc,YAAaA,OAAM,cAAc,KAAK,MAAO;AAChG,0BAAQA,OAAM,UAAU,IAAIA,OAAM;AAAA,gBACtC;AAAA,cACJ;AAAA,YACJ;AAEA,kBAAM,SAAS,KAAK,IAAI,SAAS,MAAM,QAAQ,SAAS,CAAC;AACzD,gBAAI,QAAQ;AACR,sBAAQ,KAAK;AAAA,gBACT,QAAS;AAAA,gBACT;AAAA,gBACA,OAAS;AAAA,cACb,CAAC;AAAA,YACL,WACS,iBAAiB;AACtB,mBAAK,kBAAkB;AAAA,gBACnB,CAAC,aAAa,GAAI;AAAA,kBACd,OAAW;AAAA,kBACX,UAAW;AAAA,gBACf;AAAA,cACJ,CAAC;AAAA,YACL;AAAA,UACJ;AAAA,QACJ,OAEK;AACD,kBAAQ,aAAa,IAAI,OAAO,OAAO;AACvC,gBAAM,KAAK,EAAE,GAAG,SAAS,GAAI,MAAM,QAAQ,QAAQ,aAAa,CAAC,IAAI,EAAE,UAAW,CAAC,EAAE,IAAI,OAAW,CAAC;AAAA,QACzG;AACA,qBAAa,IAAI,IAAI;AACrB,YAAI,KAAK,EAAE;AAAA,MACf;AAAA,IACJ,CAAC;AACD,QAAI,aAAa,WAAW,KAAK,QAAQ;AACrC,SAAG,SAAS,UAAQ;AAChB,YAAI,CAAC,aAAa,IAAI,IAAI,GAAG;AACzB,mBAAS,KAAK,IAAI;AAAA,QACtB;AAAA,MACJ,CAAC;AAAA,IACL;AACA,WAAO,EAAE,OAAO,UAAU,QAAQ,SAAS,IAAI;AAAA,EACnD;AAAA;AAAA,EAEA,gBAAgB,SAAS;AACrB,UACI,KAAO,QAAQ,KAAK,WAAW,OAAO,GACtC,OAAO,KAAK,QAAQ,EAAE;AAC1B,WAAO,EAAE,IAAI,KAAK;AAAA,EACtB;AACJ;;;ACleA,IAAMC,YAAW,OAAO,UAAU;AAKlC,IAAO,mBAAQ,YAAU,MAAM,kBAAkB,UAAUC,OAAM;AAAA,EAC7D,WAAW,QAAQ;AACf,WAAO;AAAA,EACX;AAAA,EACA,WAAW,gBAAgB;AACvB,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAQH,KAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAON,0BAA2B;AAAA,IAC/B;AAAA,EACJ;AAAA,EACA,IAAI,MAAM;AACN,WAAO,KAAKD,SAAQ;AAAA,EACxB;AAAA,EACA,IAAI,IAAI,KAAK;AApCjB;AAqCQ,UAAM,KAAK;AACX,QAAI,GAAG,QAAQ,KAAK;AAChB,WAAI,QAAG,QAAH,mBAAQ,SAAS,KAAK;AACtB,WAAG,IAAI,YAAY,EAAE;AAAA,MACzB;AACA,SAAGA,SAAQ,IAAI;AACf,UAAI,GAAG,OAAO,CAAC,GAAG,IAAI,SAAS,EAAE,GAAG;AAChC,WAAG,IAAI,SAAS,EAAE;AAAA,MACtB;AAAA,IACJ;AAAA,EACJ;AAAA;AAAA,EAEA,IAAI,SAAS,SAAS,OAAO,UAAU,CAAC,GAAG;AACvC,QAAI;AACJ,UAAM,EAAE,IAAI,IAAI;AAGhB,QAAI,CAAC,KAAK,SAAQ,2BAAK,UAAS;AAG5B,eAAS,MAAM,IAAI,SAAS,MAAM;AAGlC,UAAI,iCAAQ,QAAQ;AAChB,YAAI,gBAAgB,MAAM,QAAQ,MAAM;AAAA,MAC5C;AAAA,IACJ,OACK;AACD,eAAS,MAAM,IAAI,SAAS,QAAQ,OAAO;AAAA,IAC/C;AACA,WAAO;AAAA,EACX;AAAA;AAAA,EAEA,OAAO,OAAO,SAAS,SAAS,OAAO;AACnC,QAAI;AACJ,UAAM,EAAE,IAAI,IAAI;AAGhB,QAAI,CAAC,KAAK,SAAQ,2BAAK,UAAS;AAO5B,YAAM,WAAW,MAAM,QAAQ,OAAO,IAAI,UAAU,CAAC,OAAO,GAAG;AAAA,QAC3D,CAACE,UAAS,MAAM;AACZ,gBAAMC,SAAQ,aAAa,QAAQ,KAAK,QAAQ,CAAC,IAAI;AACrD,cAAIA,WAAU,UAAaA,WAAU,IAAI;AACrC,YAAAD,SAAQ,IAAI,GAAGC,MAAK;AAAA,UACxB;AACA,iBAAOD;AAAA,QACX;AAAA,QACA,oBAAI,IAAI;AAAA,MACZ;AAGA,eAAS,MAAM,OAAO,OAAO,OAAO;AAGpC,UAAI,iCAAQ,QAAQ;AAGhB,gBAAQ,KAAK,QAAQ,OAAO,CAAC,CAAC;AAG9B,YAAI,mBAAmB,MAAM,OAAO,QAAQ,SAAS,MAAM;AAAA,MAC/D;AAAA,IACJ,OACK;AACD,eAAS,MAAM,OAAO,OAAO,SAAS,MAAM;AAAA,IAChD;AACA,WAAO;AAAA,EACX;AAAA;AAAA,EAEA,OAAO,cAAc,SAAS,OAAO,iBAAiB;AAClD,QAAI;AACJ,UAAM,EAAE,IAAI,IAAI;AAGhB,QAAI,CAAC,KAAK,SAAQ,2BAAK,UAAS;AAI5B,YAAM,0BAA0B,MAAM,QAAQ,YAAY,IAAI,eAAe,CAAC,YAAY,GAAG,IAAI,OAAK,KAAK,QAAQ,CAAC,CAAC,EAAE,OAAO,OAAK,CAAC,CAAC,CAAC;AACtI,YAAM,UAAU,uBAAuB;AAAA,QACnC,CAACA,UAAS,MAAM;AACZ,gBAAM,QAAQ,KAAK,QAAQ,CAAC;AAC5B,cAAI,UAAU,UAAa,UAAU,IAAI;AACrC,YAAAA,SAAQ,IAAI,GAAG,KAAK;AAAA,UACxB;AACA,iBAAOA;AAAA,QACX;AAAA,QACA,oBAAI,IAAI;AAAA,MACZ;AAEA,eAAS,MAAM,OAAO,cAAc,QAAQ,eAAe;AAG3D,UAAI,iCAAQ,QAAQ;AAChB,YAAI,mBAAmB,MAAM,QAAQ,SAAS,MAAM;AAAA,MACxD;AAAA,IACJ,OACK;AACD,eAAS,MAAM,OAAO,cAAc,QAAQ,eAAe;AAAA,IAC/D;AACA,WAAO;AAAA,EACX;AAAA;AAAA,EAEA,UAAU,QAAQ;AACd,UAAM,EAAE,IAAI,IAAI;AAChB,QAAI;AACJ,QAAI,2BAAK,SAAS;AAId,YACI,EAAE,MAAM,UAAU,WAAW,IAAI,MACjC,cAAiC,WAAW,QAE5C,UAAiC,OAAO,SAAS,SAAS,MAAM,IAAI,WAAW,MAAM;AACzF,eAAS,MAAM,UAAU,MAAM;AAK/B,UAAI,eAAe,KAAK,UAAU,GAAG;AACjC,YAAI,iBAAiB,MAAM,SAAS,MAAM;AAAA,MAC9C;AAAA,IACJ,OACK;AACD,eAAS,MAAM,UAAU,MAAM;AAAA,IACnC;AACA,WAAO;AAAA,EACX;AAAA,EACA,uBAAuB;AACnB,UAAM,EAAE,KAAK,YAAY,IAAI;AAC7B,QAAI,eAAe;AACnB,QAAI,EAAC,2CAAa,uBAAqB,2BAAK,UAAS;AACjD,qBAAe;AAEf,UAAI,IAAI,aAAa;AACjB,YAAI,MAAM;AAAA,MACd;AACA,UAAI,KAAK,0BAA0B;AAC/B,YAAI,QAAQ;AAAA,MAChB,OACK;AACD,YAAI,iBAAiB;AAAA,MACzB;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA,EAIA,eAAe,SAAS,aAAa,gBAAgB,QAAQ,YAAY;AACrE,UACI,eAAe,KAAK,qBAAqB,GACzC,MAAe,MAAM,eAAe,SAAS,aAAa,gBAAgB,QAAQ,UAAU;AAChG,SAAK,oBAAoB,YAAY;AACrC,WAAO;AAAA,EACX;AAAA,EACA,oBAAoB,cAAc;AAC9B,QAAI,cAAc;AACd,YAAM,EAAE,IAAI,IAAI;AAChB,UAAI,KAAK,0BAA0B;AAC/B,YAAI,OAAO;AAAA,MACf,OACK;AACD,YAAI,gBAAgB;AAAA,MACxB;AACA,UAAI,WAAW;AAAA,IACnB;AAAA,EACJ;AACJ;;;ACvLA,IACI,uBAAyB;AAAA,EACrB,QAAS;AAAA,EACT,OAAS;AACb;AAJJ,IAKIE,0BAAyB;AAAA,EACrB,2BAA+B;AAAA,EAC/B,8BAA+B;AACnC;AARJ,IASIC,sBAAyB,CAAC,OAAO,YAAY;AAEzC,YAAU,WAAW;AACrB,MAAI,OAAO,YAAY,WAAW;AAC9B,cAAU;AAAA,MACN,2BAA+B;AAAA,MAC/B,8BAA+B;AAAA,IACnC;AAAA,EACJ;AACA,SAAO,WAAWD;AACtB;AA6LJ,IAAqB,QAArB,cAAmCE,MAAK;AAAA,EACpC;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA;AACJ,EAAE;AAAA;AAAA,EAEE,WAAW,QAAQ;AACf,WAAO;AAAA,EACX;AAAA,EACA,WAAW,aAAa;AACpB,WAAO;AAAA,MACH,eAAwB,CAAC;AAAA,MACzB,uBAAwB,oBAAI,IAAI;AAAA,IACpC;AAAA,EACJ;AAAA,EACA,WAAW,eAAe;AACtB,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAeH,IAAK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA8BL,YAAa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MASb,sBAAuB;AAAA,IAC3B;AAAA,EACJ;AAAA,EACA,WAAW,gBAAgB;AACvB,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAwBH,QAAS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAOT,UAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAoBX,MAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAMP,MAAO;AAAA,MACP,iBAAkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAOlB,SAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA2BV,YAAa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAWb,WAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MASZ,yBAA0B;AAAA,IAC9B;AAAA,EACJ;AAAA,EACA,WAAW,eAAe;AACtB,WAAO;AAAA,MACH,qBAAsB;AAAA,IAC1B;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAmFA,eAAe,MAAM;AACjB,UAAM,GAAG,IAAI;AAEb,QAAI,KAAK,WAAW;AAChB,aAAO,KAAK,UAAU;AAAA,IAC1B;AAAA,EACJ;AAAA,EACA,UAAU,SAAS,CAAC,GAAG;AACnB,UAAM,KAAK;AACX,WAAO,OAAO,IAAI;AAAA,MACd,OAAqB,IAAI,SAAS;AAAA,MAClC,SAAqB,IAAI,SAAS;AAAA,MAClC,UAAqB,IAAI,SAAS;AAAA,MAClC,YAAqB,CAAC;AAAA,MACtB,oBAAqB,CAAC;AAAA,MACtB,UAAqB,CAAC;AAAA,IAC1B,CAAC;AACD,QAAI,OAAO,SAAS;AAEhB,eAAS,aAAa,OAAO,EAAE,IAAK,OAAO,QAAQ,GAAG,MAAM;AAAA,IAGhE;AACA,UAAM,UAAU,MAAM;AACtB,OAAG,cAAc;AAAA,EACrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAmBA,OAAO,KAAK,QAAQ,WAAW,CAAC,GAAG,cAAc,MAAM;AAEnD,QAAI,UAAU,CAAC,OAAO,SAAS;AAE3B,UAAI,OAAO,WAAW,UAAU;AAC5B,iBAAS,MAAM,SAAS,MAAM;AAAA,MAClC,OAEK;AAED,YAAI,MAAM,QAAQ,MAAM,GAAG;AACvB,cAAI,aAAa;AACb,qBAAS,OAAO,IAAI,UAAQ,KAAK,UAAU,OAAO,YAAY,IAAI,CAAC;AAAA,UACvE;AACA,mBAAS,aAAa,OAAO,CAAC,GAAG,UAAU,EAAE,MAAO,OAAO,CAAC;AAAA,QAChE;AACA,iBAAS,IAAI,MAAM,MAAM;AAAA,MAC7B;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA,EACA,YAAY;AAllBhB;AAmlBQ,UACI,KAAa,MACb,aAAa,GAAG;AACpB,aAAS,IAAI,WAAW,SAAS,GAAG,KAAK,KAAK,GAAG,KAAK;AAClD,YAAM,WAAW,CAAC;AAClB,UAAI,EAAC,2BAAK,cAAa;AACnB,YAAI,YAAY,EAAE;AAAA,MACtB;AAAA,IACJ;AACA,aAAG,aAAH,mBAAa;AAEb,mBAAG,QAAH,mBAAQ,gBAAR,4BAAsB;AACtB,QAAI,CAAC,GAAG,WAAW;AACf,eAAG,aAAH,mBAAa;AAAA,IACjB;AAEA,UAAM,UAAU;AAAA,EACpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYA,aAAa;AACT,SAAK,cAAc;AAAA,EACvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYA,WAAW;AACP,QAAI,KAAK,aAAa,GAAG;AACrB,WAAK,QAAQ,WAAW;AAAA,QACpB,QAAU;AAAA,QACV,MAAU,KAAK,QAAQ;AAAA,QACvB,SAAU,KAAK,QAAQ;AAAA,MAC3B,CAAC;AAAA,IACL;AAAA,EACJ;AAAA,EACA,IAAI,QAAQ,SAAS;AACjB,UAAM,KAAK;AACX,QAAI,mCAAS,cAAc;AACvB,SAAG,WAAW;AAAA,IAClB,OACK;AACD,SAAG,WAAW,IAAI,WAAW,OAAO;AAAA,IACxC;AACA,OAAG,SAAS,aAAa,GAAG;AAC5B,OAAG,SAAS,WAAW,GAAG;AAE1B,eAAW,KAAK,GAAG,UAAU;AACzB,QAAE,UAAU,EAAE;AAAA,IAClB;AACA,OAAG,SAAS,IAAI;AAAA,MACZ,QAAU;AAAA,MACV,SAAU;AAAA,IACd,CAAC;AAAA,EACL;AAAA,EACA,IAAI,UAAU;AACV,QAAI,CAAC,KAAK,UAAU;AAChB,WAAK,UAAU,CAAC;AAAA,IACpB;AACA,WAAO,KAAK;AAAA,EAChB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,IAAI,aAAa;AAtqBrB;AAuqBQ,UAAM,KAAK;AACX,UAAI,QAAG,gBAAH,mBAAgB,gBAAe,GAAG,QAAQ,YAAY;AACtD,UAAI,GAAG,QAAQ;AACX,cAAM,SAAS,GAAG,mBAAmB,GAAG,UAAU,QAAW,QAAW,EAAE,YAAa,KAAK,CAAC,EAAE;AAC/F,YAAI,GAAG,aAAa;AAChB,iBAAO,QAAQ,GAAG,QAAQ;AAAA,QAC9B;AACA,WAAG,cAAc;AAAA,MACrB,OACK;AACD,WAAG,cAAc,GAAG,YACd,GAAG,oBAAoB,IACvB,GAAG,QAAQ;AAAA,MACrB;AACA,SAAG,YAAY,aAAa,GAAG,QAAQ;AAAA,IAC3C;AACA,WAAO,GAAG;AAAA,EACd;AAAA;AAAA,EAEA,kBAAkB,kBAAkB;AAChC,WAAO,KAAK,YAAY,KAAK,oBAAoB,kBAAkB,KAAK,IAAK,mBAAmB,KAAK,QAAQ,YAAY,KAAK,QAAQ;AAAA,EAC1I;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,mBAAmB,QAAQ,YAAY;AACnC,UACI,KAAmB,MACnB,mBAAmB,OAAO,iBAAiB,CAAC;AAIhD,OAAG,MAAM,mBAAmB,QAAQ,QAAQ,EAAE,MAAM;AAEpD,QAAI,kBAAkB;AASlB,SAAG,QAAQ,gBAAgB,EAAE,OAAO,CAAC;AAErC,UAAI,GAAG,YAAY;AACf,WAAG,aAAa;AAAA,MACpB;AAAA,IACJ;AAAA,EACJ;AAAA;AAAA,EAEA,mBAAmB,SAAS;AACxB,UAAM,EAAE,SAAS,IAAI;AACrB,aAAS,IAAI,GAAG,IAAI,QAAQ,QAAQ,KAAK;AACrC,YAAM,SAAS,QAAQ,CAAC;AAExB,aAAO,QAAQ,eAAe,WAAW,IAAI,QAAQ,MAAM;AAC3D,aAAO,UAAU,IAAI;AAAA,IACzB;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,aAAa,EAAE,QAAS,SAAS,QAAQ,OAAO,SAAS,UAAU,UAAU,OAAO,MAAM,GAAG,GAAG;AAC5F,UACI,KAAe,MACf,cAAe,qBAAqB,MAAM,GAG1C,aAAe,gBAAe,+BAAO,SACrC,eAAe,gBAAe,mCAAS;AAC3C,QAAI,sBACA;AACJ,OAAG,SAAS;AACZ,QAAI,YAAY;AACZ,SAAG,mBAAmB,KAAK;AAAA,IAC/B;AACA,yCAAU,QAAQ,CAAC,CAAC,WAAW,SAAS,MAAM;AAC1C,gBAAU,YAAY,IAAI,IAAI;AAC9B,gBAAU,UAAU,EAAE;AAAA,IAC1B;AAGA,UAAM,aAAa,GAAG,SAAS;AAI/B,QAAI,CAAC,GAAG,QAAQ;AACZ,UAAI,YAAY;AACZ,mBAAW,UAAU,OAAO;AAExB,cAAI,GAAG,QAAQ,SAAS,MAAM,GAAG;AAC7B,eAAG,QAAQ,OAAO,MAAM;AAAA,UAC5B,WAES,CAAC,OAAO,UAAU;AACvB,eAAG,MAAM,IAAI,MAAM;AAAA,UACvB;AAAA,QACJ;AAGA,+BAAuB,CAAC,GAAG,gBAAgB,GAAG,YAAY,GAAG;AAC7D,YAAI,sBAAsB;AACtB,aAAG,OAAO;AAAA,YACN,QAAS;AAAA,UACb,CAAC;AAAA,QACL;AAEA,+BAAuB,CAAC,GAAG,cAAc,GAAG,YAAY,GAAG;AAC3D,YAAI,sBAAsB;AACtB,aAAG,KAAK,MAAM,MAAM,OAAO,IAAI;AAAA,QACnC;AAAA,MACJ;AACA,UAAI,cAAc;AACd,mBAAW,UAAU,SAAS;AAE1B,iBAAO,YAAY;AACnB,iBAAO,YAAY,EAAE;AAErB,cAAI,GAAG,MAAM,SAAS,MAAM,GAAG;AAC3B,eAAG,MAAM,OAAO,MAAM;AAAA,UAC1B,WAKS,CAAC,OAAO,qBAAqB,CAAC,OAAO,cAAc,CAAC,OAAO,UAAU;AAC1E,eAAG,QAAQ,IAAI,MAAM;AAAA,UACzB;AAAA,QACJ;AACA,WAAG,SAAS,OAAO,OAAO;AAG1B,+BAAuB,CAAC,GAAG,gBAAgB,GAAG;AAC9C,YAAI,sBAAsB;AACtB,aAAG,OAAO;AAAA,YACN,QAAS;AAAA,UACb,CAAC;AAAA,QACL;AAAA,MACJ;AAAA,IACJ;AACA,YAAQ,QAAQ;AAAA,MACZ,KAAK;AAED,WAAG,gBAAgB,CAAC;AAEpB,WAAG,sBAAsB,WAAW;AACpC,WAAG,QAAQ,WAAW;AACtB,WAAG,QAAQ,UAAU;AAAA,UACjB,QAAS;AAAA,QACb,CAAC;AACD;AAAA,MACJ,KAAK;AACD,YAAI,YAAY;AACZ,aAAG,sBAAsB,OAAO,KAAK;AACrC,gBAGI,WAAW,MAAM,OAAO,CAAC,QAAQ,WAAW;AACxC,kBAAM,EAAE,cAAc,IAAI,OAAO;AACjC,gBAAI,gBAAgB,MAAM,gBAAgB;AAAQ,uBAAS;AAC3D,mBAAO;AAAA,UACX,GAAG,MAAM,CAAC,EAAE,KAAK,aAAa,GAC9B,QAAW,QAAQ,QAAQ,MAAM,CAAC,GAAG,CAAC,QAAQ,UAAU,GACxD,SAAW;AAAA,YACP,SAAU;AAAA,YACV;AAAA,UACJ;AAEJ,cAAI,WAAW,IAAI;AACf,mBAAO,WAAW;AAAA,UACtB;AACA,aAAG,QAAQ,OAAO,MAAM;AACxB,aAAG,QAAQ,UAAU,OAAO,OAAO,EAAE,QAAS,MAAM,GAAG,MAAM,CAAC;AAC9D,cAAI,sBAAsB;AACtB,eAAG,mBAAmB;AAAA,cAClB,QAAS;AAAA,cAAU,SAAU,GAAG;AAAA,cAAS;AAAA,cAAU,SAAU,GAAG,QAAQ;AAAA,YAC5E,CAAC;AAAA,UACL;AACA,cAAI,sBAAsB;AACtB,eAAG,QAAQ,QAAQ,EAAE,QAAS,QAAQ,SAAU,GAAG,SAAS,SAAU,GAAG,QAAQ,UAAU,CAAC;AAAA,UAChG;AAAA,QACJ;AACA,YAAI,QAAQ,QAAQ;AAChB,aAAG,sBAAsB,UAAU,OAAO;AAC1C,aAAG,QAAQ,UAAU;AAAA,YACjB,SAAU;AAAA,UACd,CAAC;AACD,aAAG,QAAQ,UAAU;AAAA,YACjB,QAAU;AAAA,YACV,SAAU;AAAA,UACd,CAAC;AAAA,QACL;AACA,YAAI,SAAS,QAAQ;AACjB,aAAG,QAAQ,WAAW;AAAA,YAClB,SAAU;AAAA,YACV,KAAU,GAAG,QAAQ,WAAW,SAAS;AAAA,UAC7C,CAAC;AACD,aAAG,QAAQ,UAAU;AAAA,YACjB,QAAS;AAAA,YACT;AAAA,YACA,KAAS,GAAG,QAAQ,WAAW,SAAS;AAAA,UAC5C,CAAC;AAAA,QACL;AACA;AAAA,MACJ,KAAK;AAED,YAAI,GAAG,aAAa,GAAG,UAAU;AAC7B,aAAG,YAAY,IAAI;AAAA,QACvB;AACA;AAAA,MACJ,KAAK,QAAQ;AAET,cACI,QAAQ,KAAK,IAAI,MAAM,EAAE,GAGzB,MAAQ,KAAK,IAAI,GAAG,QAAQ,UAAU,SAAS,GAAG,KAAK,IAAI,MAAM,EAAE,CAAC;AACxE,iBAAS,aAAa,GAAG,QAAQ,WAAW,IAAI,OAAO,KAAK,KAAK,KAAK;AAClE,qBAAW,CAAC,EAAE,QAAQ,eAAe,CAAC;AAAA,QAC1C;AAaA,WAAG,QAAQ,QAAQ;AAAA,UACf,QAAU,MAAM,CAAC;AAAA,UACjB,SAAU;AAAA,UACV;AAAA,UACA;AAAA,QACJ,CAAC;AAGD,YAAI,GAAG,YAAY;AACf,aAAG,cAAc;AAAA,QACrB;AACA,WAAG,QAAQ,UAAU;AAAA,UACjB;AAAA,UACA,QAAU,MAAM,CAAC;AAAA,UACjB,SAAU;AAAA,UACV;AAAA,UACA;AAAA,QACJ,CAAC;AACD;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,eAAe,QAAQ,MAAM;AA56BjC;AA66BQ,UACI,KAAc,MACd,EAAE,QAAQ,IAAI,IACd,MAAc,QAAQ,WACtB,SAAc,QAAQ,GAAG,QAAQ,SAAS,CAAC;AAC/C,aAAS,IAAI,GAAG,IAAI,IAAI,QAAQ,KAAK;AACjC,UAAI,CAAC,EAAE,UAAU,EAAE;AAAA,IACvB;AAIA,QAAI,CAAC,GAAG,gBAAgB,GAAG,YAAY;AACnC,SAAG,OAAO;AAAA,QACN,QAAS;AAAA,MACb,CAAC;AAAA,IACL;AACA,QAAI,GAAG,YAAY;AACf,UAAI,GAAG,WAAW;AACd,gBAAQ,cAAc;AAAA;AAAA,UAElB,GAAG,GAAG,oBAAoB;AAAA,UAC1B,QAAS;AAAA,QACb,CAAC;AAAA,MACL;AAAA,IACJ,OACK;AACD,UAAI,GAAG,WAAW;AACd,WAAG,MAAM,MAAM,MAAM,OAAO,CAAC,QAAQ,IAAI;AAAA,MAC7C;AAEA,UAAI,QAAQ;AACR,WAAG,KAAK,MAAM,MAAM,OAAO,IAAI;AAAA,MACnC;AAAA,IACJ;AAEA,QAAI,CAAC,GAAG,WAAW,yBAAyB;AACxC,YAAM,EAAE,MAAM,IAAI;AAClB,UAAI,OAAO,KAAK,KAAK,EAAE,SAAS,QAAQ,OAAO,QAAQ;AAEnD,cAAM,aAAa,CAAC;AACpB,gBAAQ,OAAO,QAAQ,OAAK,MAAM,EAAE,EAAE,IAAI,OAAO,MAAM,EAAE,EAAE,IAAI,WAAW,KAAK,CAAC,CAAC;AACjF,cAAM,IAAI,MAAM,mBAAmB,WAAW,IAAI,OAAK,EAAE,EAAE,GAAG;AAAA,MAClE;AAAA,IACJ;AACA,UAAM,QAAQ,EAAE,QAAQ,MAAM,SAAU,QAAQ,OAAO;AACvD,OAAG,sBAAsB,QAAQ,MAAM,OAAO;AAE9C,aAAG,kBAAH;AACA,QAAI,CAAC,GAAG,qBAAqB;AACzB,SAAG,QAAQ,WAAW,KAAK;AAAA,IAC/B;AACA,OAAG,QAAQ,UAAU,KAAK;AAAA,EAC9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAoBA,cAAc,QAAQ,OAAO,QAAQ,QAAQ,oBAAoB;AAC7D,UACI,KAAc,MACd,QAAc;AAAA,MACV;AAAA,MACA,SAAU,CAAC,MAAM;AAAA,MACjB,SAAU;AAAA;AAAA;AAAA,MAGV,OAAU,OAAO,YAAY;AAAA,MAC7B;AAAA,IACJ,GACA,cAAc,OAAO,aAAa,OAAO,WAAW,QAAQ,GAAG,2BAA2B,MAAM;AAEpG,OAAG,QAAQ,eAAe,QAAQ,MAAM;AAExC,QAAI,QAAQ,QAAQ;AAChB,YAAM,EAAE,UAAU,MAAM,IAAI,MAAM;AAClC,SAAG,yBAAyB,UAAU,KAAK;AAC3C,SAAG,iBAAiB,EAAE,QAAQ,UAAU,MAAM,CAAC;AAAA,IACnD;AACA,QAAI,CAAC,QAAQ;AACT,UAAI,QAAQ,QAAQ;AAChB,cAAM,EAAE,UAAU,MAAM,IAAI,MAAM;AAClC,WAAG,QAAQ,YAAY;AAAA,UACnB,OAAQ;AAAA,UACR;AAAA,UACA;AAAA,UACA;AAAA,QACJ,CAAC;AAAA,MACL;AACA,SAAG,eAAe,QAAQ,MAAM;AAChC,SAAG,QAAQ,UAAU,KAAK;AAC1B,SAAG,QAAQ,UAAU,OAAO,OAAO,EAAE,QAAS,SAAS,GAAG,KAAK,CAAC;AAAA,IACpE;AACA,QAAI,GAAG,cAAc,aAAa;AAC9B,SAAG,aAAa;AAAA,IACpB;AAAA,EACJ;AAAA,EACA,2BAA2B,QAAQ;AAC/B,UAAM,KAAW;AACjB,QAAI,aAAa;AAEjB,QAAI,OAAO,YAAY;AACnB,UAAI,CAAC,GAAG,SAAS,SAAS,MAAM,KAAK,CAAC,GAAG,MAAM,SAAS,MAAM,KAAK,OAAO,cAAc,EAAE,KAAK,CAAC,OAAO,YAAY;AAK/G,YAAI,OAAO,WAAW;AAClB,aAAG,MAAM,IAAI,MAAM;AAAA,QACvB,OACK;AACD,aAAG,SAAS,IAAI,MAAM;AAAA,QAC1B;AACA,qBAAa;AAAA,MACjB;AAAA,IACJ,OACK;AACD,SAAG,SAAS,OAAO,MAAM;AAAA,IAC7B;AACA,WAAO;AAAA,EACX;AAAA,EACA,IAAI,QAAQ;AACR,UACI,KAAe,MACf,eAAe,CAAC,GAAG,QACnB,QAAe,GAAG,WAAW,GAAG,SAAS,CAAC;AAC9C,QAAI,cAAc;AACd,YAAM,mBAAmB,GAAG,QAAQ;AACpC,eAAS,QAAQ,QAAQ,GAAG,eAAe,GAAG,QAAQ,iBAAiB,QAAQ,SAAS;AACpF,iBAAmB,iBAAiB,KAAK;AACzC,cAAM,OAAO,EAAE,IAAI,EAAE,OAAO,cAAc,OAAO;AACjD,YAAI,CAAC,OAAO,cAAc;AACtB;AAAA,QACJ;AAAA,MACJ;AAGA,UAAI,GAAG,YAAY;AACf,iBAAS,QAAQ,GAAG,IAAI,GAAG,QAAQ,QAAQ,QAAQ,QAAQ,GAAG,SAAS;AACnE,gBAAM,SAAS,GAAG,QAAQ,QAAQ,KAAK;AACvC,cAAI,OAAO,MAAM,OAAO;AACpB,kBAAM,OAAO,EAAE,EAAE,kBAAkB;AAAA,UACvC,OACK;AAGD,kBAAM,OAAO,EAAE,IAAI,EAAE,OAAQ,IAAI,iBAAkB,OAAO,OAAO;AAAA,UACrE;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA,EACA,iBAAiB,UAAU;AACvB,UAAM,EAAE,OAAO,IAAI;AACnB,SAAK,qBAAqB;AAC1B,QAAI,aAAa;AAEjB,QAAI,iCAAQ,QAAQ;AAEhB,YAAM,mBAAmB,SAAS;AAAA,QAC9B,WAAW,SAAS;AAChB,iBAAO;AAAA,QACX;AAAA,MACJ;AACA,mBAAa;AAAA,IACjB,WAES,CAAC,KAAK,yBAAyB;AAEpC,YAAM,mBAAmB,SAAS;AAAA,MAAC;AACnC,mBAAa;AAAA,IACjB;AAEA,eAAW,UAAU;AACrB,WAAO;AAAA,EACX;AAAA;AAAA;AAAA,EAGA,IAAI,QAAQ,SAAS;AACjB,SAAK,KAAK;AAAA,EACd;AAAA,EACA,IAAI,UAAU;AACV,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,SAAS,IAAI,OAAO;AAChB,WAAO,MAAM,SAAU,OAAO,QAAS,IAAI,KAAK;AAAA,EACpD;AAAA,EACA,SAAS,IAAI,OAAO;AAChB,UAAM,YAAY,MAAM,QAAQ,EAAE;AAClC,iBAAa,MAAM,mBAAmB,SAAS;AAC/C,UAAM,SAAS,IAAI,KAAK;AAAA,EAC5B;AAAA,EACA,iBAAiB;AACb,WAAO,MAAM,WAAW,QAAQ;AAAA,EACpC;AAAA,EACA,IAAI,OAAO;AACP,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,IAAI,KAAK,MAAM;AACX,SAAK,QAAQ;AACb,QAAI,QAAQ,CAAC,KAAK,UAAU;AACxB,WAAK,WAAsB,KAAK,cAAc;AAC9C,WAAK,SAAS,aAAa;AAAA,IAC/B;AAAA,EACJ;AAAA;AAAA,EAEA,gBAAgB;AACZ,WAAO,CAAC;AAAA,EACZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,OAAO,SAAS,IAAI,YAAY;AAC5B,QAAI,cAAc,OAAO;AACrB,aAAO;AAAA,IACX;AACA,QAAI,KAAK,QAAQ,EAAE,GAAG;AAClB,aAAO,KAAK,QAAQ,EAAE;AAAA,IAC1B;AACA,QAAI,MAAM,QAAQ,EAAE,GAAG;AACnB,UAAI;AACJ,YAAM,YAAY,GAAG,IAAI,UAAQ;AAC7B,YAAI,gBAAgB,OAAO;AACvB,uBAAa,KAAK;AAAA,QACtB,WACS,OAAO,SAAS,UAAU;AAC/B,iBAAO;AAAA,YACH,MAAO;AAAA,UACX;AAAA,QACJ,OACK;AAAA,QACL;AACA,eAAO;AAAA,MACX,CAAC;AACD,UAAI,CAAC,YAAY;AAEb,cAAM,mBAAmB,MAAM;AAAA,QAAC;AAChC,qBAAa;AAAA,MACjB;AACA,WAAK;AAAA,QACD,aAAc;AAAA,QACd,MAAc;AAAA,QACd,YAAc;AAAA,QACd,WAAc;AAAA;AAAA,MAClB;AACA,UAAI,CAAC,YAAY;AACb,qBAAa;AAAA,MACjB;AAAA,IACJ;AACA,QAAI,YAAY;AACZ,aAAO,IAAI,WAAW,EAAE;AAAA,IAC5B;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,WAAW,SAAS;AAChB,WAAO,MAAM;AAAA,EACjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,IAAI,WAAW;AACX,WAAO,KAAK,cAAc,KAAK,YAAY,WAAW,KAAK;AAAA,EAC/D;AAAA,EACA,IAAI,SAAS,UAAU;AA9sC3B;AA+sCQ,UAAM,KAAU,MACZ,UAAU,GAAG;AAEjB,QAAI,aAAa,SAAS;AACtB;AAAA,IACJ;AACA,QAAI,SAAS;AACT,SAAG,MAAM,IAAI;AAAA,IACjB;AACA,QAAI,oBAAoB,OAAO;AAE3B,eAAS,aAAa,EAAE,EAAE,YAAY;AACtC,SAAG,YAAY;AAAA,IACnB,OACK;AACD,SAAG,YAAY,WAAW,IAAI,GAAG,WAAW,OAAO,OAAO;AAAA,QACtD,UAA0B;AAAA,QAC1B,CAAC,GAAG,WAAW,OAAO,GAAI,GAAG,GAAG;AAAA,MACpC,GAAG,QAAQ,GAAG,IAAI,MAAM,IAAI;AAAA,IAChC;AACA,OAAG,QAAe;AAClB,aAAS,SAAS;AAClB,aAAS,UAAU,EAAE;AAIrB,UAAI,cAAS,aAAT,mBAAmB,WAAU,GAAG,aAAa;AAC7C,eAAS,YAAY;AACrB,SAAG,eAAe,UAAU,SAAS,YAAY,CAAC,GAAG,CAAC;AACtD,eAAS,YAAY;AAAA,IACzB;AACA,OAAG,QAAQ,cAAc,EAAE,SAAS,SAAS,CAAC;AAAA,EAClD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAuBA,IAAI,KAAK,MAAM;AACX,SAAK,aAAa,IAAI;AAAA,EAC1B;AAAA;AAAA,EAEA,aAAa,MAAM;AACf,UACI,KAA6B,MAC7B,EAAE,SAAS,cAAc,IAAI,GAAG;AAEpC,QAAI,GAAG,sBAAqB,6BAAM,UAAS,KAAK,CAAC,OAAO,aAAa,KAAK,CAAC,CAAC,GAAG;AAE3E,SAAG,aAAa,GAAG,cAAc;AAAA,QAC7B,yBAA0B;AAAA,QAC1B,qBAA0B;AAAA,QAC1B,uBAA0B;AAAA,MAC9B;AACA,aAAgB,aAAa,MAAM,IAAI;AAAA,IAC3C;AAKA,OAAG,UAAU,SAAS;AAEtB,OAAG,2BAA2B;AAE9B,QAAI,QAAQ,CAAC,MAAM,QAAQ,IAAI,GAAG;AAC9B,aAAO,aAAa,4BAA4B,MAAM,OAAO;AAAA,IACjE;AAEA,OAAG,OAAO,CAAC,GAAG,cAAc,GAAG,QAAQ,QAAQ,GAAG,aAAY,6BAAM,KAAK,OAAK,EAAE,aAAa,GAAE;AAE/F,QAAI,SAAS,GAAG,cAAc,GAAG,eAAe;AAC5C,eAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,KAAK;AAClC,aAAK,CAAC,EAAE,mBAAmB;AAAA,MAC/B;AAAA,IACJ;AAEA,QAAI,CAAC,GAAG,kBAAkB,CAAC,GAAG,OAAO;AACjC,SAAG,QAAQ;AAEX,UAAI,GAAG,MAAM;AACT,YAAI,GAAG,mBAAmB;AACtB,iBAAO,GAAG,gBAAgB,IAAI;AAAA,QAClC;AACA,cAAM,OAAO,GAAG;AAChB,aAAK,YAAY;AAEjB,WAAG,MAAM,QAAQ,YAAU,OAAO,OAAO,QAAQ;AAEjD,WAAG,MAAM,IAAI;AAEb,aAAK,YAAY,IAAI;AACrB,WAAG,sBAAsB,WAAW,CAAC,IAAI,CAAC;AAC1C,aAAK,YAAY;AACjB,YAAI,KAAK,WAAW,GAAG;AACnB,gBAAM,QAAQ,EAAE,QAAS,WAAW,MAAO,CAAC,GAAG,SAAU,CAAC,EAAE;AAC5D,aAAG,QAAQ,WAAW,KAAK;AAC3B,aAAG,QAAQ,UAAU,KAAK;AAAA,QAC9B,WAES,GAAG,YAAY;AACpB,aAAG,OAAO;AAAA,QACd;AAAA,MACJ,OACK;AACD,WAAG,SAAS,IAAI;AAAA,MACpB;AAEA,SAAG,MAAM,MAAM;AACf,SAAG,QAAQ,MAAM;AACjB,SAAG,SAAS,MAAM;AAAA,IACtB,OAEK;AACD,SAAG,YAAY,IAAI;AAAA,IACvB;AAAA,EACJ;AAAA,EACA,SAAS,MAAM,SAAS,WAAW;AAp1CvC;AAq1CQ,UACI,KAAyB,MACzB,EAAE,SAAS,UAAU,IAAI,IACzB,UAAyB,GAAG,WAAW,SAAS,GAAG,YACnD,iBAAyB,GAAG,KAAK,SAAO,IAAI,UAAU;AAC1D,QAAI,gBAAgB;AAChB,cAAQ,OAAO,OAAO,GAAG,QAAQ,QAAQ,cAAc,GAAG,CAAC;AAAA,IAC/D;AACA,QAAI,gBAAgB,GAAG;AAEvB,OAAG,wBAAwB,GAAG,QAAQ,MAAM;AAC5C,OAAG,SAAW;AACd,OAAG,WAAW,CAAC;AACf,QAAI,MAAM;AACN,YAAM,QAAQ,EAAE,KAAK,CAAC,aAAa;AACnC,UAAI,OAAO;AACP,WAAG,WAAW,iBAAiB,KAAK,CAAC,CAAC;AACtC,cACI,QAAU,KAAK,QACf,UAAU,IAAI,MAAM,KAAK;AAC7B,iBAAS,IAAI,GAAG,IAAI,OAAO,KAAK;AAC5B,gBAAM,aAAa,KAAK,CAAC;AACzB,cAAI,CAAC,aAAa,WAAW,OAAO,KAAK,MAAM;AAC3C,kBAAM,IAAI,MAAM,oCAAoC,GAAG;AAAA,UAC3D;AACA,cAAI,mBAAiB,sBAAW,OAAO,MAAlB,mBAAqB,eAArB,4BAAkC,gBAAe;AAClE,oBAAQ,KAAK,+BAA+B,WAAW,OAAO,oFAAoF;AAClJ,4BAAgB;AAAA,UACpB;AACA,kBAAQ,CAAC,IAAI,GAAG,cAAc,GAAG,aAAa,YAAY,IAAI,GAAG,IAAI;AACrE,kBAAQ,CAAC,EAAE,QAAQ,eAAe,CAAC;AAAA,QACvC;AAEA,WAAG,MAAM,IAAI;AAQb,gBAAQ,cAAc;AAAA,UAClB,QAAe;AAAA,UACf,cAAe;AAAA,UACf,QAAe;AAAA,QACnB,CAAC;AAAA,MACL,OACK;AAED,WAAG,MAAM,IAAI;AACb,gBAAQ,cAAc;AAAA,UAClB,QAAe,KAAK,MAAM;AAAA,UAC1B,cAAe;AAAA,UACf,QAAe;AAAA,QACnB,CAAC;AAAA,MACL;AACA,UAAI,gBAAgB;AAChB,gBAAQ,OAAO,KAAK,cAAc;AAAA,MACtC;AACA,SAAG,QAAQ;AACX,SAAG,eAAe,QAAQ,IAAI;AAAA,IAClC,OACK;AAED,SAAG,MAAM,IAAI;AACb,SAAG,QAAQ;AAAA,IACf;AACA,OAAG,sBAAsB;AAAA,EAC7B;AAAA,EACA,IAAI,OAAO;AACP,WAAO,KAAK;AAAA,EAChB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,SAAS,OAAO,KAAK,MAAM,MAAM;AAC7B,YAAQ,MAAM,KAAK,QAAQ,YAAY,KAAK,QAAQ,QAAQ,MAAM,OAAO,GAAG;AAAA,EAChF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,aAAa,MAAM,aAAa,OAAO,UAAU,OAAO;AACpD,WAAO,IAAI,KAAK,WAAW,MAAM,MAAM,MAAM,YAAY,OAAO,OAAO;AAAA,EAC3E;AAAA,EACA,cAAc,QAAQ,YAAY,OAAO;AACrC,WAAO;AAAA,EACX;AAAA,EACA,cAAc;AACV,SAAK,OAAO;AACZ,SAAK,KAAK;AAAA,EACd;AAAA,EACA,iBAAiB,EAAE,QAAQ,UAAU,MAAM,GAAG;AAC1C,UACI,KAA2B,MAC3B,QAA2B,GAAG,QAC9B,EAAE,YAAY,SAAS,IAAI;AAC/B,OAAG,QAAQ,kBAAkB;AAK7B,aAAS,QAAQ,IAAI;AAGrB,QAAI,SAAS,CAAC,MAAM,KAAK,GAAG;AACxB,YAAM,QAAQ,MAAM,QAAQ;AAC5B,aAAO,MAAM,QAAQ;AACrB,YAAM,KAAK,IAAI;AAAA,IACnB;AACA,OAAG,MAAM,SAAS,UAAU,KAAK;AACjC,OAAG,QAAQ,SAAS,UAAU,KAAK;AACnC,OAAG,SAAS,SAAS,UAAU,KAAK;AACpC,WAAO,WAAW,QAAQ;AAC1B,eAAW,KAAK,IAAI;AACpB,WAAO,QAAQ,GAAG,QAAQ,QAAQ,MAAM;AAAA,EAC5C;AAAA,EACA,eAAe,QAAQ,SAAS;AAC5B,UACI,KAAyB,MACzB,EAAE,WAAW,IAAY,SACzB,EAAE,mBAAmB,IAAI;AAC7B,QAAI,YAAY;AACZ,WAAK,QAAQ,kBAAkB;AAC/B,aAAO,mBAAmB,WAAW,QAAQ;AAC7C,yBAAmB,WAAW,KAAK,IAAI;AAAA,IAC3C;AAEA,QAAI,GAAG,yBAAyB,GAAG,YAAY;AAC3C,SAAG,OAAO;AAAA,IACd;AAAA,EACJ;AAAA,EACA,IAAI,aAAa;AACb,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,IAAI,WAAW,SAAS;AACpB,QAAI,YAAY,MAAM;AAClB,WAAK,cAAc;AAAA,QACf,SAA0B;AAAA,QAC1B,yBAA0B;AAAA,QAC1B,uBAA0B;AAAA,QAC1B,qBAA0B;AAAA,MAC9B;AAAA,IACJ,OACK;AACD,WAAK,cAAc,UAAU,OAAO,OAAO,SAAS,EAAE,SAAU,KAAK,CAAC,IAAI,EAAE,SAAU,MAAM;AAAA,IAChG;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,SAAS,iBAAiB,MAAM;AAC5B,WAAO,iBAAiB,KAAK,QAAQ,KAAK;AAAA,EAC9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,IAAI,gBAAgB;AAjgDxB;AAkgDQ,WAAO,KAAK,QAAQ,gBAAc,UAAK,iBAAL,mBAAmB,WAAU;AAAA,EACnE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,IAAI,QAAQ;AACR,WAAO,KAAK,QAAQ;AAAA,EACxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,IAAI,WAAW;AACX,WAAO,KAAK,SAAS,KAAK,SAAS,kBAAkB,KAAK,QAAQ;AAAA,EACtE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA,IAAI,UAAU;AACV,WAAO,KAAK,QAAQ;AAAA,EACxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,IAAI,QAAQ;AACR,WAAO,KAAK,QAAQ,OAAO,CAAC;AAAA,EAChC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,IAAI,OAAO;AACP,WAAO,KAAK,QAAQ,OAAO,KAAK,QAAQ,OAAO,SAAS,CAAC;AAAA,EAC7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,OAAO,MAAM,OAAO;AAEtB,WAAO,KAAK,QAAQ,MAAM,OAAO,GAAG;AAAA,EACxC;AAAA;AAAA;AAAA,EAGA,SAAS,QAAQ;AACb,UAAM,KAAK;AACX,QAAI,CAAC,GAAG,WAAW,yBAAyB;AAGxC,YAAM,cAAc,GAAG,UAAU,GAAG,WAAW,OAAO,EAAE;AACxD,UAAI,eAAe,gBAAgB,QAAQ;AACvC,cAAM,IAAI,MAAM,mBAAmB,OAAO,IAAI;AAAA,MAClD;AAAA,IACJ;AACA,OAAG,WAAW,OAAO,EAAE,IAAoB;AAC3C,OAAG,mBAAmB,OAAO,UAAU,IAAI;AAAA,EAC/C;AAAA,EACA,WAAW,QAAQ;AACf,WAAO,KAAK,WAAW,OAAO,EAAE;AAChC,WAAO,KAAK,mBAAmB,OAAO,UAAU;AAAA,EACpD;AAAA,EACA,IAAI,oBAAoB;AACpB,WAAO,OAAO,OAAO,KAAK,UAAU;AAAA,EACxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,QAAQ,IAAI;AAMR,QAAI,yBAAI,SAAS;AACb,YAAM,SAAS;AAIf,UAAI,OAAO,YAAY,CAAC,KAAK,QAAQ,UAAU,SAAS,MAAM,GAAG;AAC7D,eAAO,OAAO,OAAO,KAAK,OAAK,KAAK,QAAQ,UAAU,SAAS,CAAC,CAAC;AAAA,MACrE;AACA,aAAO;AAAA,IACX;AAEA,WAAO,KAAK,WAAW,EAAE;AAAA,EAC7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,YAAY,YAAY;AACpB,UAAM,SAAS,KAAK,QAAQ,UAAU;AACtC,WAAO,UAAU,KAAK,QAAQ,SAAS,MAAM,KAAK;AAAA,EACtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,gBAAgB,YAAY;AACxB,WAAO,KAAK,mBAAmB,UAAU;AAAA,EAC7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,SAAS,YAAY;AACjB,QAAI,KAAK,QAAQ;AACb,aAAO,KAAK,WAAW,MAAM,KAAK,UAAU,CAAC,KAAK;AAAA,IACtD;AACA,WAAO,KAAK,QAAQ,UAAU,IAAI;AAAA,EACtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAaA,QAAQ,YAAY,iBAAiB,OAAO,8BAA8B,OAAO;AAE7E,SAAI,yCAAY,YAAW,CAAC,WAAW,OAAO,SAAS,KAAK,UAAU,IAAI,GAAG;AAGzE,YAAM,eAAe,WAAW,OAAO,KAAK,OAAK,KAAK,QAAQ,UAAU,SAAS,CAAC,CAAC;AACnF,UAAI,cAAc;AACd,eAAO,KAAK,QAAQ,cAAc,cAAc;AAAA,MACpD;AACA,aAAO;AAAA,IACX;AAEA,QAAI,KAAK,QAAQ;AAEb,cAAQ,8BAA8B,KAAK,SAAS,cAAc,KAAK,QAAQ,QAAQ,QAAQ,KAAK,QAAQ,UAAU,CAAC;AAAA,IAC3H;AACA,UAAM,KAAK,MAAM,KAAK,UAAU;AAChC,QAAI,MAAM,MAAM;AACZ,aAAO;AAAA,IACX;AACA,UAAM,QAAQ,KAAK,MAAM,EAAE;AAC3B,WAAO,QAAQ,MAAM,iBAAiB,iBAAiB,OAAO,IAAI;AAAA,EACtE;AAAA,EACA,WAAW,YAAY;AACnB,QAAI,KAAK,QAAQ;AACb,aAAO,KAAK,WAAW,QAAQ,KAAK,QAAQ,UAAU,CAAC;AAAA,IAC3D,OACK;AACD,aAAO,KAAK,QAAQ,QAAQ,YAAY,IAAI;AAAA,IAChD;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAeA,kBAAkBC,QAAO,mBAAmB,OAAO;AAC/C,UACI,KAAS,MACT,SAAS,CAAC,GACV,OAAS,CAAC;AACd,QAAI;AACJ,OAAG,QAAQ,OAAK;AACZ,UAAI,CAAC,EAAE,gBAAgB,CAAC,EAAE,QAAQ;AAC9B,gBAAuB,EAAE,IAAIA,MAAK;AAClC,cAAM,iBAAiB,iBAAiB,OAAO,MAAM,QAAQ,IAAI;AACjE,YAAI,CAAC,KAAK,cAAc,GAAG;AACvB,iBAAO,KAAK,KAAK;AACjB,eAAK,cAAc,IAAI;AAAA,QAC3B;AAAA,MACJ;AAAA,IACJ,GAAG,IAAI,gBAAgB;AACvB,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,cAAcA,QAAO,OAAO;AACxB,QAAI,QAAQ;AACZ,SAAK,QAAQ,OAAK;AACd,UAAI,aAAa,QAAQ,EAAE,IAAIA,MAAK,GAAG,KAAK;AAAG;AAAA,IACnD,CAAC;AACD,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAsBA,IAAI,KAAK,MAAM;AACX,QAAI,OAAO,SAAS,UAAU;AAC1B,aAAO,aAAa,cAAc,IAAI;AAAA,IAC1C;AACA,SAAK,OAAO;AAAA,EAChB;AAAA,EACA,IAAI,OAAO;AACP,WAAO,aAAa,kBAAkB,IAAI;AAAA,EAC9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,IAAI,gBAAgB;AAChB,WAAO,aAAa,kBAAkB,MAAM,MAAM,CAAC;AAAA,EACvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAoBA,SAAS;AAGL,YAAQ,KAAK,SAAS,KAAK,SAAS,sBAAsB,KAAK,SAAS,YAAY,CAAC,IAAI,KAAK,YAAY,IAAI,YAAU,OAAO,OAAO,CAAC;AAAA,EAC3I;AAAA;AAAA;AAAA;AAAA,EAIA,yBAAyB,SAAS;AAC9B,UAAM,yBAAyB,OAAO;AACtC,WAAO,QAAQ;AAAA,EACnB;AAAA;AAAA,EAEA,cAAc,SAAS;AA7yD3B;AA8yDQ,UAAM,OAAO,CAAC;AACd,QAAI,KAAK,MAAM;AACX,iBAAK,SAAS,aAAd,mBAAwB,QAAQ,OAAK,KAAK,KAAK,EAAE,iBAAiB,OAAO,CAAC;AAAA,IAC9E,OACK;AACD,WAAK,QAAQ,OAAK,KAAK,KAAK,EAAE,iBAAiB,OAAO,CAAC,CAAC;AAAA,IAC5D;AACA,WAAO;AAAA,EACX;AAAA;AAAA,EAEA,iBAAiB,SAAS;AAxzD9B;AAyzDQ,UACI,SAAY,MAAM,iBAAiB,OAAO,GAC1C,EAAE,MAAM,IAAI;AAChB,QAAI,QAAQ;AAER,UAAI,OAAO,MAAM;AACb,eAAO,OAAO,KAAK,cAAc,OAAO;AAAA,MAC5C;AAEA,aAAO,OAAO;AACd,aAAO,OAAO;AACd,aAAO,OAAO;AAEd,YAAI,YAAO,eAAP,mBAAmB,MAAM,UAAU,OAAO,WAAW,MAAM,UAAU,SAAS,QAAO,KAAK,YAAY,cAAc,YAAY;AAChI,eAAO,OAAO;AAAA,MAClB;AAEA,UAAI,CAAC,KAAK,MAAM;AACZ,eAAO,OAAO;AAAA,MAClB;AAEA,UAAI,OAAO;AACP,eAAO,OAAO,QAAQ,KAAK;AAAA,MAC/B;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAiBA,QAAQC,KAAI,UAAU,MAAM,SAAS;AACjC,UACI,KAAW,MACX,WAAW,CAAC,GAAG,MAAM;AACjB,UAAI,CAAC,EAAE,UAAU,CAAC,EAAE,cAAc;AAC9B,eAAOA,IAAG,KAAK,SAAS,GAAG,CAAC;AAAA,MAChC;AAAA,IACJ;AACJ,cAAUH,oBAAmB,IAAI,OAAO;AACxC,QAAI,GAAG,QAAQ;AAEX,UAAI,GAAG,WAAW;AACd,kBAAU;AAAA,UACN,GAAG;AAAA,UACH,UAAW,GAAG;AAAA,QAClB;AAAA,MACJ;AACA,SAAG,SAAS,cAAc,UAAU,OAAO,OAAO;AAAA,IACtD,OACK;AAED,YAAM,UAAU,QAAQ,4BAA4B,GAAG,QAAQ,YAAY,GAAG,QAAQ;AAEtF,UAAI,GAAG,aAAa,QAAQ,8BAA8B;AACtD,iBAAS,IAAI,GAAG,IAAI,QAAQ,QAAQ,KAAK;AACrC,gBACI,SAAgB,QAAQ,CAAC,GACzB,gBAAgB,QAAQ,4BAA4B,OAAO,0BAA0B,OAAO;AAChG,cAAI,iBAAiB,OAAO,KAAK,cAAc,MAAM;AACjD,qBAAS,IAAI,GAAG,IAAI,cAAc,QAAQ,KAAK;AAC3C,oBAAM,MAAM,cAAc,CAAC;AAC3B,kBAAI,SAAS,KAAK,CAAC,MAAM,OAAO;AAC5B;AAAA,cACJ;AAAA,YACJ;AAAA,UACJ,WACS,SAAS,QAAQ,CAAC,MAAM,OAAO;AACpC;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ,OACK;AACD,iBAAS,IAAI,GAAG,IAAI,QAAQ,QAAQ,KAAK;AACrC,cAAI,SAAS,QAAQ,CAAC,GAAG,CAAC,MAAM,OAAO;AACnC;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,IAAIG,KAAI,UAAU,MAAM;AACpB,WAAO,KAAK,QAAQ,OAAO,IAAIA,KAAI,OAAO;AAAA,EAC9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA,MAAMA,KAAI,UAAU,MAAM,eAAe;AACrC,WAAO,KAAK,QAAQ,gBAAgB,cAAc,QAAQ,EAAE,MAAMA,KAAI,OAAO;AAAA,EACjF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,OAAOA,KAAI,eAAe,CAAC,GAAG,UAAU,MAAM;AAC1C,QAAI,YAAY,MAAM;AAClB,MAAAA,MAAKA,IAAG,KAAK,OAAO;AAAA,IACxB;AACA,WAAO,KAAK,QAAQ,OAAO,OAAOA,KAAI,cAAc,OAAO;AAAA,EAC/D;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,CAAC,OAAO,QAAQ,IAAI;AAChB,WAAO,KAAK,QAAQ,OAAO,OAAO,QAAQ,EAAE;AAAA,EAChD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYA,SAASA,KAAI,UAAU,KAAK,UAAU,cAAc,YAAY,KAAK,UAAU,SAAS;AACpF,UAAM,KAAK;AACX,cAAUH,oBAAmB,IAAI,OAAO;AACxC,QAAI,GAAG,QAAQ;AAEX,UAAI,OAAO,YAAY,WAAW;AAC9B,sBAAc;AACd,kBAAc,GAAG;AAAA,MACrB;AACA,UAAI,GAAG,WAAW;AACd,cAAM,WAAWG;AACjB,QAAAA,MAAK,UAAQ;AACT,cAAI,GAAG,gBAAgB,IAAI,GAAG;AAC1B,qBAAS,IAAI;AAAA,UACjB;AAAA,QACJ;AAAA,MACJ;AACA,cAAQ,SAASA,KAAI,aAAa,OAAO;AAAA,IAC7C,OACK;AACD,SAAG,QAAQ,SAAO,IAAI,SAASA,KAAI,OAAO,OAAO,GAAG,IAAI,OAAO;AAAA,IACnE;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA,cAAcA,KAAI,UAAU,KAAK,UAAU,cAAc,YAAY,KAAK,UAAU,SAAS;AACzF,UAAM,KAAK;AACX,cAAUH,oBAAmB,IAAI,OAAO;AACxC,QAAI,GAAG,QAAQ;AAEX,UAAI,OAAO,YAAY,WAAW;AAC9B,sBAAc;AACd,kBAAc,GAAG;AAAA,MACrB;AACA,UAAI,GAAG,WAAW;AACd,cAAM,WAAWG;AACjB,QAAAA,MAAK,UAAQ;AACT,cAAI,GAAG,gBAAgB,IAAI,GAAG;AAC1B,qBAAS,IAAI;AAAA,UACjB;AAAA,QACJ;AAAA,MACJ;AACA,cAAQ,cAAcA,KAAI,aAAa,OAAO;AAAA,IAClD,OACK;AACD,iBAAW,UAAU,GAAG,SAAS;AAC7B,YAAI,OAAO,SAASA,KAAI,OAAO,OAAO,MAAM,OAAO;AAC/C;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,QAAQ,YAAY,OAAO,OAAO,kBAAkB,OAAO;AACvD,UACI,KAAU,MACV,UAAU,GAAG,QAAQ;AACzB,QAAI,MAAU,GAAG,QAAQ,UAAU;AACnC,QAAI,OAAO,QAAQ,SAAS,GAAG;AAC3B,UAAI,MAAM;AACN,cAAM;AAAA,MACV,OACK;AACD,eAAO;AAAA,MACX;AAAA,IACJ;AACA,UAAM,SAAS,QAAQ,MAAM,CAAC;AAE9B,QAAI,mBAAmB,UAAU,OAAO,cAAc;AAClD,aAAO,GAAG,QAAQ,QAAQ,MAAM,CAAC,GAAG,MAAM,IAAI;AAAA,IAClD;AACA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,QAAQ,YAAY,OAAO,OAAO,kBAAkB,OAAO;AACvD,UACI,KAAU,MACV,UAAU,GAAG,QAAQ;AACzB,QAAI,MAAU,GAAG,QAAQ,UAAU;AACnC,QAAI,QAAQ,GAAG;AACX,UAAI,MAAM;AACN,cAAM,QAAQ;AAAA,MAClB,OACK;AACD,eAAO;AAAA,MACX;AAAA,IACJ;AACA,UAAM,SAAS,QAAQ,MAAM,CAAC;AAE9B,QAAI,mBAAmB,UAAU,OAAO,gBAAgB,MAAM,GAAG;AAC7D,aAAO,GAAG,QAAQ,QAAQ,MAAM,CAAC,GAAG,MAAM,IAAI;AAAA,IAClD;AACA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA,YAAY,YAAY,OAAO,MAAM,OAAO,OAAO,kBAAkB,OAAO;AACxE,WAAO,OAAO,KAAK,QAAQ,YAAY,MAAM,eAAe,IAAI,KAAK,QAAQ,YAAY,MAAM,eAAe;AAAA,EAClH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,YAAY,YAAY,OAAO,OAAO;AAClC,UACI,KAAU,MACV,UAAU,GAAG,QACb,SAAU,GAAG,QAAQ,UAAU;AACnC,QAAI,MAAU,QAAQ,QAAQ,MAAM;AACpC,QAAI,OAAO,QAAQ,SAAS,GAAG;AAC3B,UAAI,MAAM;AACN,cAAM;AAAA,MACV,OACK;AACD,eAAO;AAAA,MACX;AAAA,IACJ;AACA,WAAO,QAAQ,MAAM,CAAC;AAAA,EAC1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,YAAY,YAAY,OAAO,OAAO;AAClC,UACI,KAAU,MACV,UAAU,GAAG,QACb,SAAU,GAAG,QAAQ,UAAU;AACnC,QAAI,MAAU,QAAQ,QAAQ,MAAM;AACpC,QAAI,QAAQ,GAAG;AACX,UAAI,MAAM;AACN,cAAM,QAAQ;AAAA,MAClB,OACK;AACD,eAAO;AAAA,MACX;AAAA,IACJ;AACA,WAAO,QAAQ,MAAM,CAAC;AAAA,EAC1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA,gBAAgB,YAAY,OAAO,MAAM,OAAO,OAAO;AACnD,WAAO,OAAO,KAAK,YAAY,YAAY,IAAI,IAAI,KAAK,YAAY,YAAY,IAAI;AAAA,EACxF;AAAA;AAEJ;AACA,MAAM,UAAU;AAChB,MAAM,SAAS;;;ACpoER,IAAM,kCAAN,cAA8C,MAAM;AAAA,EACvD;AAAA,EACA;AACJ,GAAG,CAAC,SAAS;AACT,QAAM,aAAa,KAAK;AACxB,QAAMC,yCAAwC,KAAK;AAAA,IAC/C,cAAc;AACV,YAAM,GAAG,SAAS;AAClB,WAAK,gBAAgB;AACrB,WAAK,mCAAmC;AAAA,IAC5C;AAAA;AAAA;AAAA,IAGA,UAAU,SAAS,CAAC,GAAG;AACnB,aAAO,cAAc;AAAA,QACjB,KAAK;AAAA,QACL,QAAQ;AAAA,QACR,WAAW;AAAA,QACX,QAAQ;AAAA,QACR,SAAS;AAAA,QACT,SAAS;AAAA,QACT,MAAM;AAAA,QACN,QAAQ;AAAA,MACZ;AACA,aAAO,WAAW,UAAU,KAAK,MAAM,MAAM;AAAA,IACjD;AAAA;AAAA;AAAA,IAGA,QAAQ,WAAW,OAAO;AACtB,YAAM,KAAK,MAAM,EAAE,aAAa,QAAQ,IAAI,IAAI,aAAa,2CAAc,YAAY,cAAc,eAAe,eAAe,QAAQ,WAAW,MAAM,MAAM;AAClK,UAAI,CAAC,aAAa;AAEd,eAAO,WAAW,QAAQ,KAAK,IAAI,WAAW,KAAK;AAAA,MACvD;AAEA,iBAAW,QAAQ,KAAK,IAAI,GAAG,sBAAsB,EAAE,GAAG,MAAM,CAAC;AAEjE,UAAI,CAAC,WAAW,QAAQ,cAAc,KAAK,CAAC,QAAQ,eAAe;AAE/D,mBAAW,QAAQ,KAAK,IAAI,WAAW,KAAK;AAAA,MAChD,WACS,CAAC,GAAG,mBAAmB,SAAS;AAIrC,YAAI,CAAC,QAAQ,mBAAmB;AAC5B,kBAAQ,wBAAwB,CAAC;AAEjC,kBAAQ,oBAAoB,QAAQ,IAAI;AAAA,YACpC,YAAY;AAER,mBAAK,sBAAsB,QAAQ,CAAC,CAACC,aAAY,OAAOC,YAAWC,MAAK,MAAM;AAC1E,gBAAAF,YAAW,QAAQ,KAAK,OAAOC,YAAWC,MAAK;AAAA,cACnD,CAAC;AACD,sBAAQ,wBAAwB;AAChC,sBAAQ,kBAAkB;AAC1B,sBAAQ,oBAAoB;AAAA,YAChC;AAAA,YACA,MAAM;AAAA,UACV,CAAC;AAAA,QACL;AACA,gBAAQ,sBAAsB,KAAK,CAAC,YAAY,IAAI,WAAW,KAAK,CAAC;AAAA,MACzE;AAEA,aAAO;AAAA,IACX;AAAA;AAAA,IAEA,mBAAmB;AAEf,aAAO,KAAK;AAAA,IAChB;AAAA,IACA,aAAa,MAAM;AAhF3B;AAmFY,UAAI,KAAK,WAAW,EAAE,KAAK,kBAAkB,KAAK,mCAAmC;AACjF,aAAK,QAAQ,wBAAwB;AAAA,MACzC;AACA,WAAK,gBAAgB;AACrB,iBAAW,aAAa,KAAK,MAAM,IAAI;AACvC,WAAK,gBAAgB;AACrB,iBAAK,YAAL,mBAAc,QAAQ,gBAAgB,EAAE,OAAO,KAAK;AAAA,IACxD;AAAA;AAAA,IAEA,MAAM,eAAe;AACjB,UAAI,KAAK,gBAAgB,KAAK,KAAK,WAAW,CAAC,KAAK,QAAQ,cAAc,GAAG;AAEzE,cAAM,KAAK,QAAQ,YAAY;AAAA,MACnC;AACA,iBAAW,aAAa,KAAK,IAAI;AAAA,IACrC;AAAA,IACA,MAAM,SAAS,SAAS,QAAQ;AAC5B,YAAM,SAAS,KAAK,IAAI,SAAS,MAAM;AACvC,YAAM,KAAK,QAAQ,YAAY;AAC/B,aAAO;AAAA,IACX;AAAA,IACA,MAAM,YAAY,OAAO,SAAS,QAAQ;AACtC,YAAM,SAAS,KAAK,OAAO,OAAO,SAAS,MAAM;AACjD,YAAM,KAAK,QAAQ,YAAY;AAC/B,aAAO;AAAA,IACX;AAAA,IACA,MAAM,cAAc,MAAM;AACtB,WAAK,OAAO;AACZ,YAAM,KAAK,QAAQ,YAAY;AAAA,IACnC;AAAA,IACA,gBAAgB;AAjHxB;AAkHY,UAAI,KAAK,YAAY,KAAK,mBAAiB,UAAK,aAAL,mBAAe,aAAY;AAElE,aAAK,QAAQ,YAAY,EAAE,KAAK,MAAM,KAAK,OAAO,CAAC;AAAA,MACvD;AACA,aAAO,MAAM,cAAc,GAAG,SAAS;AAAA,IAC3C;AAAA,EACJ;AACA,SAAOH;AACX,CAAC,EAAE;AACH;;;AC9GO,IAAM,kCAAN,cAA8C,MAAM,CAAC,mCAAmC,KAAK,GAAG,CAAC,SAAS;AAC7G,QAAM,aAAa,KAAK;AACxB,QAAMI,yCAAwC,KAAK;AAAA,IAC/C,UAAU,OAAO;AACb,UAAI,gBAAgB;AAEpB,UAAI,aAAa,OAAO,+BAA+B,GAAG;AACtD,cAAM,UAAU,MAAM,WAAW;AACjC,YAAI,WAAW,CAAC,KAAK,WAAW,GAAG;AAC/B,eAAK,WAAW,OAAO;AACvB,0BAAgB;AAAA,QACpB;AAAA,MACJ;AACA,iBAAW,UAAU,KAAK,MAAM,KAAK;AAGrC,UAAI,iBAAiB,CAAC,cAAc;AAChC,aAAK,YAAY;AAAA,IACzB;AAAA,IACA,YAAY,OAAO,cAAc,OAAO;AACpC,iBAAW,YAAY,KAAK,MAAM,OAAO,WAAW;AACpD,YAAM,EAAE,QAAQ,IAAI;AACpB,YAAM,wBAAyB,aAAa,OAAO,+BAA+B,KAC3E,CAAC,MAAM,uBAAuB,aAAa,MAAM,aAAa,MAAM,UACvE,MAAM,YAAY,UAChB,MAAM;AAGZ,UAAI,WAAW,CAAC,QAAQ,gBAAgB,CAAC,QAAQ,wBAAwB,uBAAuB;AAC5F,aAAK,aAAa,WAAW;AAC7B,aAAK,WAAW,IAAI;AAAA,MACxB;AAEA,UAAI;AACA,aAAK,QAAQ;AAAA,IACrB;AAAA;AAAA;AAAA;AAAA;AAAA,IAKA,cAAc;AAAA,IAAE;AAAA;AAAA;AAAA;AAAA,IAIhB,aAAa,cAAc,OAAO;AAAA,IAAE;AAAA,IACpC,mBAAmB;AACf,YAAM,QAAQ,KAAK,OAAO,KAAK,OAAM,aAAa,GAAG,+BAA+B,KAAM,CAAC,CAAC,EAAE,WAAW,CAAC;AAC1G,aAAO,+BAAO;AAAA,IAClB;AAAA,IACA,MAAM,SAAS,WAAW,OAAO,QAAQ;AA9DjD;AA+DY,YAAM,SAAS,KAAK,IAAI,WAAW,OAAO,MAAM;AAChD,cAAM,UAAK,YAAL,mBAAc;AACpB,aAAO;AAAA,IACX;AAAA,IACA,MAAM,SAAS,WAAW;AAnElC;AAoEY,cAAM,UAAK,YAAL,mBAAc;AACpB,aAAO,KAAK,IAAI,SAAS;AAAA,IAC7B;AAAA,IACA,IAAI,iBAAiB;AACjB,YAAM,UAAU,KAAK,WAAW;AAChC,cAAO,mCAAS,qBAAmB,mCAAS,IAAI,gBAAe;AAAA,IACnE;AAAA,EACJ;AACA,SAAOA;AACX,CAAC,EAAE;AACH;;;AChEO,IAAM,wBAAN,cAAoC,MAAM,CAAC,+BAA+B,GAAG,CAAC,SAAS;AAC1F,QAAM,aAAa,KAAK;AACxB,QAAMC,+BAA8B,KAAK;AAAA,IACrC,WAAW,SAAS;AAChB,aAAO;AAAA,QACH;AAAA,QACA,EAAE,MAAM,aAAa,MAAM,OAAO;AAAA,QAClC,EAAE,MAAM,WAAW,MAAM,OAAO;AAAA,QAChC;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA,EAAE,MAAM,aAAa,MAAM,WAAW,cAAc,MAAM;AAAA,QAC1D,EAAE,MAAM,YAAY,MAAM,SAAS;AAAA,MACvC;AAAA,IACJ;AAAA,IACA,cAAc;AACV,aAAO,KAAK,OAAO,CAAC,EAAE;AAAA,IAC1B;AAAA,IACA,gBAAgB;AACZ,WAAK,gBAAgB;AACrB,WAAK,YAAY,EAAE,SAAS;AAAA,IAChC;AAAA;AAAA,IAEA,mBAAmB;AACf,UAAI,KAAK,iBAAiB;AACtB,eAAO,KAAK;AAGhB,UAAIC,QAAO,MAAQ,KAAK,YAAY,EAAE,SAAS,IAAI;AACnD,UAAI,WAAW,KAAK;AACpB,UAAI,YAAY,MAAM;AAGlB,mBAAW,KAAK,YAAY,IAAI,KAAK;AAAA,MACzC;AAEA,aAAO,KAAK,gBAAgBA,QAAO;AAAA,IACvC;AAAA;AAAA;AAAA;AAAA;AAAA,IAKA,cAAc;AACV,aAAO,QAAQ,KAAK,sBAAsB,KAAK,oBAAoB,KAAK,qBAAqB,KAAK,KAAK,mBAAmB,CAAC;AAAA,IAC/H;AAAA;AAAA;AAAA;AAAA,IAIA,WAAW;AACP,aAAO,QAAQ,KAAK,aAAa,KAAK,OAAO;AAAA,IACjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAOA,kBAAkB,OAAO;AACrB,UAAI,WAAW;AACf,UAAI,SAAS,UAAU,OAAO,KAAK,GAAG;AAClC,mBAAW,cAAM,MAAM,KAAK,KAAK;AACjC,YAAI,aAAa,OAAO,QAAQ,KAAK,SAAS,SAAS,GAAG;AAEtD,cAAI;AACA,uBAAW,KAAK,MAAM,KAAK;AAAA,UAC/B,SACO,GAAP;AACI,mBAAO;AAAA,UACX;AAAA,QACJ;AAAA,MACJ;AACA,aAAO;AAAA,IACX;AAAA,IACA,uBAAuB;AACnB,UAAI,KAAK;AACL,eAAO,KAAK;AAChB,YAAM,WAAW,KAAK,kBAAkB,KAAK,kBAAkB;AAC/D,aAAO,KAAK,oBAAoB,cAAM,SAAS,QAAQ;AAAA,IAC3D;AAAA,IACA,qBAAqB;AACjB,UAAI,KAAK;AACL,eAAO,KAAK;AAChB,UAAI,KAAK,qBAAqB;AAC1B,eAAO;AACX,YAAM,WAAW,KAAK,kBAAkB,KAAK,gBAAgB;AAC7D,aAAO,KAAK,kBAAkB,cAAM,SAAS,QAAQ;AAAA,IACzD;AAAA,EACJ;AACA,SAAOD;AACX,CAAC,EAAE;AACH;;;AClGO,IAAM,wBAAN,cAAoC,MAAM,CAAC,+BAA+B,GAAG,CAAC,SAAS;AAC1F,QAAM,aAAa,KAAK;AACxB,QAAME,+BAA8B,KAAK;AAAA,IACrC,cAAc;AACV,YAAM,GAAG,SAAS;AAClB,WAAK,mCAAmC;AAAA,IAC5C;AAAA,IACA,WAAW,gBAAgB;AACvB,aAAO;AAAA,QACH,YAAY;AAAA,MAChB;AAAA,IACJ;AAAA,EACJ;AACA,SAAOA;AACX,CAAC,EAAE;AACH;;;ACnBO,IAAM,+BAAN,cAA2C,MAAM,CAAC,qBAAqB,GAAG,CAAC,SAAS;AACvF,QAAM,aAAa,KAAK;AACxB,QAAMC,sCAAqC,KAAK;AAAA,IAC5C,cAAc;AACV,aAAO,KAAK;AAAA,IAChB;AAAA;AAAA,IAEA,mBAAmB;AACf,UAAI,KAAK,iBAAiB;AACtB,eAAO,KAAK;AAChB,aAAO,KAAK,gBAAgB,KAAK,YAAY,EAAE,SAAS;AAAA,IAC5D;AAAA,EACJ;AACA,SAAOA;AACX,CAAC,EAAE;AACH;;;ACVO,IAAM,gCAAN,cAA4C,MAAM,CAAC,iCAAiC,GAAG,CAAC,SAAS;AACpG,QAAM,aAAa,KAAK;AACxB,QAAMC,uCAAsC,KAAK;AAAA;AAAA,IAE7C,IAAI,aAAa;AAZzB;AAaY,cAAO,UAAK,YAAL,mBAAc;AAAA,IACzB;AAAA,IACA,IAAI,gBAAgB;AAf5B;AAgBY,cAAO,UAAK,YAAL,mBAAc;AAAA,IACzB;AAAA,IACA,IAAI,kBAAkB;AAlB9B;AAmBY,cAAO,UAAK,YAAL,mBAAc;AAAA,IACzB;AAAA,IACA,IAAI,kBAAkB;AArB9B;AAsBY,cAAO,UAAK,YAAL,mBAAc;AAAA,IACzB;AAAA,IACA,IAAI,uBAAuB;AAxBnC;AAyBY,cAAO,UAAK,YAAL,mBAAc;AAAA,IACzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAMA,aAAa,IAAI;AAhCzB;AAiCY,cAAO,UAAK,eAAL,mBAAiB,QAAQ;AAAA,IACpC;AAAA;AAAA;AAAA;AAAA,IAIA,kBAAkB,IAAI;AAtC9B;AAuCY,cAAO,UAAK,oBAAL,mBAAsB,QAAQ;AAAA,IACzC;AAAA;AAAA;AAAA;AAAA,IAIA,gBAAgB,IAAI;AA5C5B;AA6CY,cAAO,UAAK,kBAAL,mBAAoB,QAAQ;AAAA,IACvC;AAAA;AAAA;AAAA;AAAA,IAIA,kBAAkB,IAAI;AAlD9B;AAmDY,cAAO,UAAK,oBAAL,mBAAsB,QAAQ;AAAA,IACzC;AAAA;AAAA;AAAA;AAAA,IAIA,gBAAgB,IAAI;AAxD5B;AAyDY,cAAO,UAAK,yBAAL,mBAA2B,QAAQ;AAAA,IAC9C;AAAA,EACJ;AACA,SAAOA;AACX,CAAC,EAAE;AACH;;;AChDO,IAAM,wBAAN,cAAoC,MAAM,CAAC,+BAA+B,GAAG,CAAC,SAAS;AAC1F,QAAM,aAAa,KAAK;AACxB,QAAM,sBAAsB,KAAK;AAAA,IAC7B,cAAc;AACV,YAAM,GAAG,SAAS;AAClB,WAAK,UAAU;AAAA,IACnB;AAAA;AAAA,IAEA,WAAW,SAAS;AAChB,aAAO;AAAA,QACH,EAAE,MAAM,WAAW,MAAM,SAAS;AAAA,QAClC;AAAA,QACA,EAAE,MAAM,4BAA4B,MAAM,WAAW,cAAc,KAAK;AAAA,QACxE,EAAE,MAAM,aAAa,MAAM,SAAS,UAAU,KAAK;AAAA,QACnD;AAAA,QACA;AAAA,MACJ;AAAA,IACJ;AAAA,IACA,IAAI,qBAAqB;AACrB,aAAO;AAAA,IACX;AAAA,IACA,IAAI,gBAAgB;AAEhB,aAAO,KAAK,KAAK;AAAA,IACrB;AAAA;AAAA,IAEA,mBAAmB,QAAQ;AACvB,aAAO,aAAa,KAAK;AAEzB,aAAO,aAAa,KAAK,wBAAwB,EAAE,8BAA8B,KAAK,mBAAmB,cAAc;AACvH,aAAO,WAAW;AAAA,IACtB;AAAA;AAAA;AAAA,IAGA,0BAA0B,WAAW;AACjC,WAAK,YAAY;AAAA,IACrB;AAAA,IACA,YAAY;AACR,YAAM,UAAU,KAAK,WAAW;AAChC,UAAI,SAAS;AACT,eAAO,SAAS,QAAQ;AAAA,MAC5B;AACA,aAAO;AAAA,IACX;AAAA,IACA,WAAW;AACP,aAAO,KAAK,aAAa;AAAA,IAC7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAiBA,4BAA4B,SAAS,MAAM,OAAO;AA7E1D;AA8EY,YAAM,YAAW,UAAK,WAAW,MAAhB,mBAAmB;AACpC,UAAI,UAAU;AACV,kBAAU,OAAO,OAAO,EAAE,SAAS,GAAG,OAAO;AAAA,MACjD;AACA,aAAO,KAAK,cAAc,4BAA4B,SAAS,MAAM,KAAK;AAAA,IAC9E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAcA,sBAAsB,MAAM,YAAY,WAAW;AAjG3D;AAmGY,UAAI,eAAe;AACf,eAAO,EAAE,WAAW,IAAI,KAAK,IAAI,GAAG,uBAAuB,EAAE;AACjE,UAAI,MAAM,UAAU;AAChB,cAAM,IAAI,MAAM,kBAAkB;AACtC,UAAI,YAAY;AAChB,YAAM,uBAAsB,gBAAK,WAAW,MAAhB,mBAAmB,wBAAnB,YAA0C;AACtE,WAAK,4BAA4B,YAAY,EAAE,WAAW,MAAM,WAAW,KAAK,IAAI,EAAE,SAAS,MAAM,WAAW,MAAM,GAAG,CAAC,mBAAmB,iBAAiB,0BAA0B;AACpL,YAAI,SAAS;AACb,YAAI,sBAAsB,aAAa,GAAG;AACtC,cAAI,OAAO,gBAAgB,QAAQ,IAAI,kBAAkB,QAAQ;AACjE,cAAI,cAAc,MAAM;AACpB,gBAAI,qBAAqB;AACrB,oBAAM,UAAU,YACV,kBAAkB,kBAAkB,IAAK,IAAI,KAAK,kBAAkB,QAAQ,IAAI,UAAU,EAAG,kBAAkB,IAC9G,IAAI,KAAK,gBAAgB,QAAQ,IAAI,UAAU,EAAG,kBAAkB,IAAI,gBAAgB,kBAAkB;AACjH,4BAAc,UAAU,KAAK;AAAA,YACjC;AACA,wBAAY,YACN,IAAI,KAAK,kBAAkB,QAAQ,IAAI,UAAU,IACjD,IAAI,KAAK,gBAAgB,QAAQ,IAAI,UAAU;AACrD,yBAAa;AACb,qBAAS;AAAA,UACb,OACK;AACD,gBAAI,qBAAqB;AACrB,oBAAM,UAAU,kBAAkB,kBAAkB,IAAI,gBAAgB,kBAAkB;AAC1F,sBAAQ,UAAU,KAAK;AAAA,YAC3B;AACA,wBAAY,YAAY,kBAAkB;AAC1C,0BAAc;AAAA,UAClB;AAAA,QACJ;AACA,eAAO;AAAA,MACX,CAAC;AACD,aAAO,EAAE,WAAW,IAAI,KAAK,SAAS,GAAG,uBAAuB,WAAW;AAAA,IAC/E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IASA,oBAAoB,WAAW,SAAS,gBAAgB,OAAO;AAC3D,UAAI,WAAW;AACf,YAAM,aAAa,UAAU,QAAQ,KAAK,QAAQ,QAAQ,KAAK,CAAC,gBAAgB,IAAI;AACpF,UAAI,aAAa,GAAG;AAChB,SAAC,WAAW,OAAO,IAAI,CAAC,SAAS,SAAS;AAAA,MAC9C;AACA,YAAM,sBAAsB,KAAK,WAAW,EAAE;AAC9C,WAAK,4BAA4B,EAAE,WAAsB,QAAiB,GAAG,CAAC,mBAAmB,iBAAiB,0BAA0B;AACxI,YAAI,sBAAsB,aAAa,GAAG;AACtC,sBAAY,gBAAgB,QAAQ,IAAI,kBAAkB,QAAQ;AAClE,cAAI,qBAAqB;AACrB,kBAAM,UAAU,kBAAkB,kBAAkB,IAAI,gBAAgB,kBAAkB;AAC1F,wBAAY,UAAU,KAAK;AAAA,UAC/B;AAAA,QACJ;AAAA,MACJ,CAAC;AACD,aAAO,WAAW;AAAA,IACtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAQA,iBAAiB,WAAW,YAAY;AAEpC,YAAM,YAAY,cAAc;AAChC,YAAM,MAAM,KAAK,sBAAsB,WAAW,KAAK,IAAI,UAAU,GAAG,SAAS;AACjF,aAAO,IAAI,0BAA0B,IAAI,IAAI,YAAY;AAAA,IAC7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAQA,mBAAmB,SAAS,YAAY;AAEpC,YAAM,YAAY,cAAc;AAChC,YAAM,MAAM,KAAK,sBAAsB,SAAS,KAAK,IAAI,UAAU,GAAG,SAAS;AAC/E,aAAO,IAAI,0BAA0B,IAAI,IAAI,YAAY;AAAA,IAC7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAQA,mBAAmB,MAAM,YAAY,MAAM;AACvC,UAAI;AACJ,YAAM,MAAM,KAAK,4BAA4B,YAAY,EAAE,WAAW,MAAM,WAAW,KAAK,IAAI,EAAE,SAAS,MAAM,WAAW,MAAM,GAAG,CAAC,mBAAmB,iBAAiB,0BAA0B;AAChM,YAAI,sBAAsB,aAAa,GAAG;AACtC,wBAAc,YAAY,oBAAoB;AAC9C,iBAAO;AAAA,QACX;AAAA,MACJ,CAAC;AACD,UAAI,QAAQ,uBAAuB,mBAAmB,QAAQ,uBAAuB;AACjF,eAAO;AACX,aAAO,cAAc,IAAI,KAAK,WAAW,IAAI,IAAI,KAAK,IAAI;AAAA,IAC9D;AAAA;AAAA;AAAA;AAAA,IAIA,YAAY,UAAU;AAClB,aAAO,KAAK,aAAa,CAAC,QAAQ,CAAC;AAAA,IACvC;AAAA;AAAA;AAAA;AAAA,IAIA,aAAa,WAAW;AACpB,WAAK,YAAY;AACjB,aAAO,KAAK,cAAc,IAAI,SAAS;AAAA,IAC3C;AAAA;AAAA;AAAA;AAAA,IAIA,eAAe,UAAU;AACrB,aAAO,KAAK,gBAAgB,CAAC,QAAQ,CAAC;AAAA,IAC1C;AAAA;AAAA;AAAA;AAAA,IAIA,gBAAgB,WAAW;AACvB,WAAK,YAAY;AACjB,aAAO,KAAK,cAAc,OAAO,SAAS;AAAA,IAC9C;AAAA;AAAA;AAAA;AAAA,IAIA,eAAe,QAAQ;AACnB,UAAI,CAAC,QAAQ;AACT,aAAK,YAAY;AAAA,MACrB;AACA,aAAO,KAAK,cAAc,UAAU,MAAM;AAAA,IAC9C;AAAA,IACA,cAAc;AACV,WAAK,WAAW;AAChB,WAAK;AAAA,IACT;AAAA,IACA,IAAI,gBAAgB;AAChB,UAAI,KAAK,mBAAmB;AACxB,eAAO,KAAK;AAChB,YAAM,0BAA0B,IAAI,6BAA6B;AAAA,QAC7D,WAAW,KAAK;AAAA,MACpB,CAAC;AACD,8BAAwB,WAAW;AACnC,aAAO,KAAK,iBAAiB,IAAI,oBAAoB;AAAA,QACjD,UAAU;AAAA,QACV;AAAA,QACA,eAAe,KAAK;AAAA,QACpB,aAAa,KAAK,UAAU,CAAC,KAAK,OAAO,SAAS,KAAK,OAAO,gBAAgB;AAAA,MAClF,CAAC;AAAA,IACL;AAAA,IACA,aAAa;AAET,WAAK,kBAAkB,KAAK,eAAe,MAAM;AACjD,WAAK,iBAAiB;AAAA,IAC1B;AAAA,IACA,8BAA8B;AAC1B,WAAK,SAAS,CAAC,aAAa;AACxB,iBAAS,cAAc,QAAQ,CAAC,aAAa,SAAS,cAAc,CAAC;AAAA,MACzE,CAAC;AAAA,IACL;AAAA,IACA,YAAY,OAAO,QAAQ,QAAQ;AAC/B,UAAI,MAAM,WAAW,YAAY,KAAK,MAAM,GAAG,SAAS;AACxD,UAAI,CAAC,MAAM,QAAQ,GAAG,GAAG;AACrB,cAAM,CAAC,GAAG;AAAA,MACd;AAEA,UAAI,QAAQ,CAAC,MAAM;AACf,UAAE,YAAY;AACd,UAAE,4BAA4B;AAAA,MAClC,CAAC;AACD,aAAO;AAAA,IACX;AAAA,IACA,cAAc;AACV,iBAAW,YAAY,KAAK,IAAI;AAChC,WAAK,cAAc,WAAW,KAAK,WAAW,CAAC;AAAA,IACnD;AAAA,IACA,eAAe;AACX,iBAAW,aAAa,KAAK,IAAI;AACjC,WAAK,cAAc,WAAW,IAAI;AAClC,WAAK,WAAW;AAAA,IACpB;AAAA,IACA,YAAY;AACR,WAAK,aAAa;AAClB,WAAK,cAAc,QAAQ;AAC3B,YAAM,UAAU;AAAA,IACpB;AAAA,IACA,aAAaC,MAAK;AACd,YAAM,YAAY,WAAW,UAAUA,IAAG,GAAG,UAAU,WAAW,QAAQA,MAAK,SAAS,GAAG;AAC3F,UAAI,iBAAiB;AACrB,WAAK,4BAA4B,EAAE,WAAW,SAAS,WAAW,KAAK,GAAG,CAAC,oBAAoB,kBAAkB,0BAA0B;AACvI,yBAAiB,sBAAsB,aAAa;AACpD,eAAO,CAAC;AAAA,MACZ,CAAC;AACD,aAAO,CAAC;AAAA,IACZ;AAAA,IACA,uBAAuB,WAAW,SAAS;AACvC,YAAM,SAAS,CAAC;AAChB,kBAAY,WAAW,UAAU,SAAS;AAC1C,aAAO,YAAY,SAAS;AACxB,YAAI,KAAK,aAAa,SAAS,GAAG;AAC9B,iBAAO,KAAK;AAAA,YACR;AAAA,YACA,SAAS,WAAW,kBAAkB,WAAW,MAAM,IAAI;AAAA,UAC/D,CAAC;AAAA,QACL;AACA,oBAAY,WAAW,QAAQ,WAAW,SAAS,GAAG;AAAA,MAC1D;AACA,aAAO;AAAA,IACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IASA,qBAAqB,WAAW,SAAS;AACrC,YAAM,SAAS,CAAC;AAChB,WAAK,4BAA4B,EAAE,WAAW,SAAS,WAAW,KAAK,GAAG,CAAC,mBAAmB,iBAAiB,0BAA0B;AACrI,YAAI,sBAAsB,aAAa,GAAG;AACtC,gBAAM,QAAQ,sBAAsB,UAAU,CAAC;AAC/C,iBAAO,KAAK;AAAA,YACR,MAAM,MAAM;AAAA,YACZ,WAAW;AAAA,YACX,SAAS;AAAA,UACb,CAAC;AAAA,QACL;AAAA,MACJ,CAAC;AACD,aAAO;AAAA,IACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IASA,wBAAwB,WAAW,SAAS;AACxC,YAAM,SAAS,CAAC;AAChB,WAAK,4BAA4B,EAAE,WAAW,SAAS,WAAW,KAAK,GAAG,CAAC,mBAAmB,iBAAiB,0BAA0B;AACrI,YAAI,CAAC,sBAAsB,aAAa,GAAG;AACvC,gBAAM,QAAQ,sBAAsB,UAAU,CAAC;AAC/C,iBAAO,KAAK;AAAA,YACR,MAAM,MAAM;AAAA,YACZ,SAAS,MAAM;AAAA,YACf,KAAK,MAAM;AAAA,YACX,WAAW;AAAA,YACX,SAAS;AAAA,UACb,CAAC;AAAA,QACL;AAAA,MACJ,CAAC;AACD,aAAO;AAAA,IACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAQA,cAAc,WAAW,SAAS,gBAAgB;AAC9C,UAAI,gBAAgB;AAChB,YAAI;AACJ,cAAM,MAAM,KAAK,4BAA4B,EAAE,WAAW,SAAS,WAAW,KAAK,GAAG,CAAC,mBAAmB,iBAAiB,0BAA0B;AACjJ,cAAI,sBAAsB,aAAa,KAAK,qBAAqB,aAAa,mBAAmB,SAAS;AACtG,oBAAQ;AACR,mBAAO;AAAA,UACX;AAAA,QACJ,CAAC;AACD,YAAI,QAAQ,uBAAuB,mBAAmB,QAAQ,uBAAuB;AACjF,iBAAO;AACX,eAAO;AAAA,MACX,OACK;AAED,cAAM,mBAAmB,KAAK,mBAAmB,SAAS;AAC1D,eAAO,oBAAoB,qBAAqB,mBAAoB,UAAU,mBAAmB,UAAU,iBAAiB,QAAQ,MAAM,UAAU,QAAQ,IAAK;AAAA,MACrK;AAAA,IACJ;AAAA,EACJ;AACA,SAAO;AACX,CAAC,EAAE;AACH;;;ACjYO,IAAM,8BAAN,cAA0C,MAAM,CAAC,+BAA+B,GAAG,CAAC,SAAS;AAChG,QAAM,aAAa,KAAK;AACxB,QAAM,4BAA4B,KAAK;AAAA;AAAA;AAAA;AAAA;AAAA,IAKnC,iBAAiB,UAAU;AAfnC;AAiBY,iBAAW,eAAc,UAAK,aAAL,YAAiB,CAAC,GAAG;AAC1C,YAAI,WAAW,aAAa;AACxB,iBAAO;AAAA,MACf;AACA,aAAO;AAAA,IACX;AAAA,IACA,aAAa,UAAU;AACnB,aAAO,QAAQ,KAAK,iBAAiB,QAAQ,CAAC;AAAA,IAClD;AAAA;AAAA;AAAA;AAAA,IAIA,MAAM,OAAO,UAAU;AACnB,YAAM,gBAAgB,KAAK,QAAQ,gBAAgB;AACnD,WAAK,cAAc,IAAI,cAAc;AAAA,QACjC,OAAO;AAAA,QACP;AAAA,MACJ,CAAC,CAAC;AACF,aAAO,KAAK,YAAY;AAAA,IAC5B;AAAA;AAAA;AAAA;AAAA,IAIA,MAAM,SAAS,UAAU;AACrB,YAAM,aAAa,KAAK,iBAAiB,QAAQ;AACjD,WAAK,iBAAiB,UAAU;AAChC,aAAO,KAAK,YAAY;AAAA,IAC5B;AAAA,IACA,eAAe;AAIX,UAAI,KAAK,yBAAyB,KAAK,UAAU;AAC7C,cAAM,aAAa,KAAK,cAAc;AAGtC,aAAK,SAAS,QAAQ,gBAAc,WAAW,sBAAsB,IAAI,UAAU,CAAC;AAAA,MACxF;AACA,iBAAW,aAAa,KAAK,MAAM,GAAG,SAAS;AAAA,IACnD;AAAA,IACA,SAAS;AACL,UAAI,KAAK,QAAQ;AAGb,cAAM,aAAa,KAAK,cAAc;AACtC,mBAAW,OAAO,KAAK,IAAI;AAC3B,sBAAc,WAAW,kBAAkB;AAAA,MAC/C,OACK;AACD,eAAO,WAAW,OAAO,KAAK,IAAI;AAAA,MACtC;AAAA,IACJ;AAAA;AAAA;AAAA;AAAA,IAIA,cAAc,YAAY;AACtB,WAAK,WAAW,EAAE,gBAAgB,IAAI,UAAU;AAChD,aAAO;AAAA,IACX;AAAA;AAAA,IAEA,iBAAiB,YAAY;AACzB,WAAK,WAAW,EAAE,gBAAgB,OAAO,UAAU;AACnD,aAAO;AAAA,IACX;AAAA,EACJ;AACA,SAAO;AACX,CAAC,EAAE;AACH;;;AC3EO,IAAM,8BAAN,cAA0C,MAAM;AAAA,EACnD;AAAA,EACA;AAAA,EACA;AACJ,GAAG,CAAC,SAAS;AACT,QAAM,aAAa,KAAK;AACxB,QAAMC,qCAAoC,KAAK;AAAA,IAC3C,cAAc;AACV,YAAM,GAAG,SAAS;AAElB,WAAK,iBAAiB;AAEtB,WAAK,WAAW,CAAC;AAEjB,WAAK,gBAAgB,CAAC;AAAA,IAC1B;AAAA,IACA,IAAI,wBAAwB;AACxB,aAAO;AAAA,IACX;AAAA;AAAA,IAEA,cAAc;AACV,WAAK,WAAW;AAAA,IACpB;AAAA;AAAA,IAEA,aAAa,cAAc,OAAO;AAjC1C;AAkCY,iBAAW,aAAa,KAAK,MAAM,WAAW;AAC9C,iBAAK,YAAL,mBAAc;AAAA,IAClB;AAAA;AAAA;AAAA;AAAA,IAIA,aAAa;AAxCrB;AAyCY,iBAAK,YAAL,mBAAc,WAAW;AAAA,IAC7B;AAAA;AAAA;AAAA;AAAA;AAAA,IAKA,qBAAqB,WAAW;AA/CxC;AAgDY,UAAI,aAAa,KAAK,YAAY,KAAK,SAAS,SAAS,MAAM,MAAM;AACjE,eAAO,KAAK,SAAS,SAAS;AAAA,MAClC;AACA,cAAO,UAAK,IAAI,SAAS,MAAlB,YAAuB;AAAA,IAClC;AAAA;AAAA;AAAA;AAAA,IAIA,qBAAqB,WAAW;AAC5B,aAAS,aAAa,KAAK,YAAa,KAAK,SAAS,SAAS,KAAK,QAAS,KAAK,IAAI,SAAS,KAAK;AAAA,IACxG;AAAA;AAAA;AAAA;AAAA,IAIA,QAAQ,SAAS;AA9DzB;AAgEY,UAAI,KAAK,aAAW,UAAK,sBAAL,mBAAwB,UAAS;AACjD,cAAM,OAAO,OAAO,KAAK,OAAO;AAChC,iBAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,KAAK;AAClC,gBAAM,MAAM,KAAK,CAAC;AAClB,eAAK,SAAS,GAAG,IAAI,QAAQ,GAAG;AAAA,QACpC;AACA,aAAK,WAAW;AAAA,MACpB,OACK;AAED,aAAK,IAAI,OAAO;AAAA,MACpB;AAAA,IACJ;AAAA;AAAA;AAAA;AAAA,IAIA,WAAWC,QAAO,OAAO,aAAa,MAAM,UAAU,OAAO;AACzD,YAAM,KAAK;AACX,SAAG,SAASA,MAAK,IAAI;AAErB,UAAI,SAAS;AACT,YAAI,EAAEA,UAAS,GAAG,gBAAgB;AAC9B,aAAG,cAAcA,MAAK,IAAI,GAAG,IAAIA,MAAK;AAAA,QAC1C;AACA,WAAG,QAAQA,QAAO,KAAK;AAAA,MAC3B;AACA,oBAAc,GAAG,WAAW;AAAA,IAChC;AAAA;AAAA;AAAA;AAAA,IAIA,uBAAuB;AAAA,IAAE;AAAA;AAAA;AAAA;AAAA,IAIzB,oBAAoB,SAAS,OAAO;AAChC,YAAM,KAAK;AACX,SAAG,iBAAiB;AACpB,UAAI,CAAC,QAAQ;AAET,WAAG,QAAQ,GAAG,aAAa;AAE3B,WAAG,IAAI,GAAG,QAAQ;AAAA,MACtB,OACK;AACD,WAAG,QAAQ,GAAG,QAAQ;AAAA,MAC1B;AACA,SAAG,WAAW,CAAC;AACf,SAAG,gBAAgB,CAAC;AACpB,SAAG,iBAAiB;AAAA,IACxB;AAAA,EACJ;AACA,SAAOD;AACX,CAAC,EAAE;AACH;;;ACrHO,IAAM,cAAc,CAAC,UAAU,OAAO,KAAK,MAAM;AACjD,IAAM,0BAA0B,CAAC,UAAU;AAC9C,MAAI,iBAAiB,OAAO,iBAAiB;AACzC,WAAO,GAAG,KAAK;AACnB,SAAO,GAAG,CAAC,KAAK,CAAC;AACrB;AACO,IAAM,QAAQ,CAAC,UAAU,IAAI,QAAQ,aAAW,WAAW,SAAS,KAAK,CAAC;AAC1E,IAAM,SAAS,CAACE,YAAW,WAAW;AACzC,SAAOA,QAAO,QAAQ,YAAY,CAAC,OAAO,WAAW,OAAO,OAAO,MAAM,MAAM,cAAc,OAAO,MAAM,IAAI,KAAK;AACvH;;;ACNO,IAAM,+BAAN,cAA2C,MAAM,CAAC,+BAA+B,GAAG,CAAC,SAAS;AACjG,QAAM,aAAa,KAAK;AACxB,QAAMC,sCAAqC,KAAK;AAAA,IAC5C,cAAc;AACV,YAAM,GAAG,SAAS;AAClB,WAAK,wBAAwB,oBAAI,IAAI;AACrC,WAAK,2BAA2B;AAAA,IACpC;AAAA,IACA,OAAO,SAAS,QAAQ;AACpB,WAAK,wBAAwB,wBAAwB,OAAO,EAAE,MAAM;AACpE,YAAM,MAAM,WAAW,OAAO,KAAK,MAAM,SAAS,MAAM;AACxD,WAAK,sBAAsB,MAAM;AACjC,aAAO;AAAA,IACX;AAAA,IACA,UAAU,QAAQ;AACd,WAAK,2BAA2B;AAChC,YAAM,MAAM,WAAW,UAAU,KAAK,MAAM,MAAM;AAClD,WAAK,2BAA2B;AAChC,aAAO;AAAA,IACX;AAAA,EACJ;AACA,SAAOA;AACX,CAAC,EAAE;AACH;;;ACtBO,IAAM,oCAAN,cAAgD,MAAM,CAAC,+BAA+B,GAAG,CAAC,SAAS;AACtG,QAAM,aAAa,KAAK;AACxB,QAAMC,2CAA0C,KAAK;AAAA;AAAA,IAEjD,YAAY;AATpB;AAUY,YAAM,UAAU,CAAC;AAEjB,UAAI,GAAC,UAAK,aAAL,mBAAe,cAAa;AAC7B,aAAK,SAAS,YAAU,QAAQ,KAAK,MAAM,CAAC;AAAA,MAChD;AACA,YAAM,UAAU;AAChB,cAAQ,QAAQ,YAAU,OAAO,QAAQ,CAAC;AAAA,IAC9C;AAAA,EACJ;AACA,SAAOA;AACX,CAAC,EAAE;AACH;;;ACjBO,IAAM,+BAAN,cAA2C,MAAM,CAAC,+BAA+B,GAAG,CAAC,SAAS;AACjG,QAAM,aAAa,KAAK;AACxB,QAAMC,sCAAqC,KAAK;AAAA,IAC5C,cAAc;AACV,YAAM,GAAG,SAAS;AAClB,WAAK,yBAAyB,oBAAI,IAAI;AACtC,WAAK,4BAA4B;AAAA,IACrC;AAAA,IACA,OAAO,SAAS,QAAQ;AACpB,WAAK,yBAAyB,wBAAwB,OAAO,EAAE,MAAM;AACrE,YAAM,MAAM,WAAW,OAAO,KAAK,MAAM,SAAS,MAAM;AACxD,WAAK,uBAAuB,MAAM;AAClC,aAAO;AAAA,IACX;AAAA,IACA,UAAU,QAAQ;AACd,WAAK,4BAA4B;AACjC,YAAM,MAAM,WAAW,UAAU,KAAK,MAAM,MAAM;AAClD,WAAK,4BAA4B;AACjC,aAAO;AAAA,IACX;AAAA,EACJ;AACA,SAAOA;AACX,CAAC,EAAE;AACH;;;ACzBA,IAAMC,wBAAuB;AAAA,EACzB,QAAQ;AAAA,EACR,OAAO;AACX;AAEO,IAAM,0BAAN,cAAsC,MAAM,CAAC,+BAA+B,GAAG,CAAC,SAAS;AAC5F,QAAM,aAAa,KAAK;AACxB,QAAMC,iCAAgC,KAAK;AAAA,IACvC,cAAc;AACV,YAAM,GAAG,SAAS;AAClB,WAAK,wBAAwB,oBAAI,IAAI;AACrC,WAAK,yBAAyB,oBAAI,IAAI;AAAA,IAC1C;AAAA;AAAA,IAEA,aAAa,OAAO;AAhB5B;AAkBY,YAAM,cAAcD,sBAAqB,MAAM,MAAM;AACrD,YAAM,aAAa,KAAK;AACxB,UAAI,iBAAe,WAAM,YAAN,mBAAe;AAC9B,aAAK,kBAAkB;AAAA,IAC/B;AAAA;AAAA,IAEA,OAAO,SAAS,QAAQ;AACpB,YAAM,MAAM,WAAW,OAAO,KAAK,MAAM,SAAS,MAAM;AACxD,WAAK,kBAAkB;AACvB,aAAO;AAAA,IACX;AAAA;AAAA,IAEA,UAAU,QAAQ;AACd,YAAM,MAAM,WAAW,UAAU,KAAK,MAAM,MAAM;AAClD,WAAK,kBAAkB;AACvB,aAAO;AAAA,IACX;AAAA,IACA,kBAAkB,QAAQ,UAAU,OAAO,OAAO;AAE9C,YAAM,UAAU,WAAW,kBAAkB,KAAK,MAAM,GAAG,SAAS;AACpE,WAAK,kBAAkB;AACvB,aAAO;AAAA,IACX;AAAA,IACA,oBAAoB;AAChB,YAAM,EAAE,uBAAuB,uBAAuB,IAAI;AAE1D,UAAI,CAAC;AACD;AAGJ,YAAM,kBAAkB,KAAK,mBAAmB;AAChD,UAAI,mBAAmB,CAAC,gBAAgB,4BAA4B,sBAAsB,MAAM;AAC5F,cAAM,WAAW,CAAC,GAAG,qBAAqB,EAAE,OAAO,gBAAc,CAAC,gBAAgB,sBAAsB,IAAI,UAAU,CAAC;AACvH,iBAAS,SAAS,KAAK,gBAAgB,OAAO,QAAQ;AAAA,MAC1D;AACA,4BAAsB,MAAM;AAE5B,YAAM,kBAAkB,KAAK,mBAAmB;AAChD,UAAI,mBAAmB,CAAC,gBAAgB,6BAA6B,uBAAuB,MAAM;AAC9F,cAAM,WAAW,CAAC,GAAG,sBAAsB,EAAE,OAAO,gBAAc,CAAC,gBAAgB,uBAAuB,IAAI,UAAU,CAAC;AACzH,iBAAS,SAAS,KAAK,gBAAgB,OAAO,QAAQ;AAAA,MAC1D;AACA,6BAAuB,MAAM;AAAA,IACjC;AAAA,IACA,cAAc,aAAa,YAAY,OAAO;AA9DtD;AA+DY,UAAI,GAAC,UAAK,YAAL,mBAAc,uBAAsB;AACrC,cAAM,iBAAiB,KAAK,QAAQ,YAAY,EAAE;AAClD,cAAM,cAAc,kBAAkB,mBAAmB;AAEzD,YAAI,eAAe,eAAe,UAAU;AAExC,qBAAW,cAAc,eAAe,UAAU;AAC9C,uBAAW,QAAQ;AAAA,UACvB;AAAA,QACJ;AAAA,MACJ;AACA,aAAO;AAAA,IACX;AAAA,EACJ;AACA,SAAOC;AACX,CAAC,EAAE;AACH;;;AC7EA,IAAMC,wBAAuB;AAAA,EACzB,QAAQ;AAAA,EACR,OAAO;AACX;AAEO,IAAM,6BAAN,cAAyC,MAAM,CAAC,+BAA+B,GAAG,CAAC,SAAS;AAC/F,QAAM,aAAa,KAAK;AACxB,QAAMC,oCAAmC,KAAK;AAAA,IAC1C,cAAc;AACV,YAAM,GAAG,SAAS;AAClB,WAAK,wBAAwB,oBAAI,IAAI;AAAA,IACzC;AAAA;AAAA,IAEA,aAAa,OAAO;AAf5B;AAiBY,YAAM,cAAcD,sBAAqB,MAAM,MAAM;AACrD,YAAM,aAAa,KAAK;AACxB,UAAI,iBAAe,WAAM,YAAN,mBAAe;AAC9B,aAAK,qBAAqB;AAAA,IAClC;AAAA;AAAA,IAEA,OAAO,SAAS,QAAQ;AACpB,YAAM,MAAM,WAAW,OAAO,KAAK,MAAM,SAAS,MAAM;AACxD,WAAK,qBAAqB;AAC1B,aAAO;AAAA,IACX;AAAA;AAAA,IAEA,UAAU,QAAQ;AACd,YAAM,MAAM,WAAW,UAAU,KAAK,MAAM,MAAM;AAClD,WAAK,qBAAqB;AAC1B,aAAO;AAAA,IACX;AAAA,IACA,uBAAuB;AACnB,YAAM,kBAAkB,KAAK,mBAAmB;AAChD,UAAI,mBAAmB,CAAC,gBAAgB,0BAA0B;AAC9D,cAAM,wBAAwB,CAAC,GAAG,KAAK,qBAAqB,EAAE,OAAO,gBAAc,CAAC,gBAAgB,sBAAsB,IAAI,UAAU,CAAC;AACzI,8BAAsB,SAAS,KAAK,gBAAgB,OAAO,qBAAqB;AAAA,MACpF;AACA,WAAK,sBAAsB,MAAM;AAAA,IACrC;AAAA,IACA,cAAc,gBAAgB,YAAY,OAAO;AAC7C,YAAM,iBAAiB,KAAK,QAAQ,eAAe,EAAE;AACrD,YAAM,cAAc,kBAAkB,mBAAmB;AACzD,UAAI,aAAa;AAEb,mBAAW,cAAc,eAAe,YAAY,CAAC,GAAG;AACpD,qBAAW,WAAW;AAAA,QAC1B;AAAA,MACJ;AACA,aAAO;AAAA,IACX;AAAA,EACJ;AACA,SAAOC;AACX,CAAC,EAAE;AACH;;;AC/CO,IAAM,iBAAN,cAA6B,MAAM,CAAC,2BAA2B,GAAG,CAAC,SAAS;AAC/E,QAAM,aAAa,KAAK;AACxB,QAAMC,wBAAuB,KAAK;AAAA,IAC9B,cAAc;AACV,YAAM,GAAG,SAAS;AAClB,WAAK,aAAa;AAClB,WAAK,WAAW;AAChB,WAAK,YAAY;AAAA,IACrB;AAAA;AAAA,IAEA,WAAW,SAAS;AAChB,aAAO;AAAA,QACH,EAAE,MAAM,aAAa,MAAM,OAAO;AAAA,QAClC,EAAE,MAAM,WAAW,MAAM,OAAO;AAAA,QAChC,EAAE,MAAM,YAAY,MAAM,SAAS;AAAA,QACnC,EAAE,MAAM,gBAAgB,MAAM,gBAAgB,cAAc,MAAM;AAAA,MACtE;AAAA,IACJ;AAAA;AAAA,IAEA,IAAI,YAAY;AA5BxB;AA4B0B,cAAO,gBAAK,eAAL,YAAmB,KAAK,IAAI,WAAW,MAAvC,YAA4C;AAAA,IAAM;AAAA,IAC3E,IAAI,UAAU;AA7BtB;AA6BwB,cAAO,gBAAK,aAAL,YAAiB,KAAK,IAAI,SAAS,MAAnC,YAAwC;AAAA,IAAM;AAAA,IACrE,IAAI,WAAW;AA9BvB;AA8ByB,cAAO,gBAAK,cAAL,YAAkB,KAAK,IAAI,UAAU,MAArC,YAA0C;AAAA,IAAM;AAAA;AAAA,IAExE,IAAI,UAAU,OAAO;AAAE,WAAK,iBAAiB,KAAK;AAAA,IAAG;AAAA,IACrD,IAAI,QAAQ,OAAO;AAAE,WAAK,eAAe,KAAK;AAAA,IAAG;AAAA,IACjD,IAAI,SAAS,OAAO;AAAE,WAAK,gBAAgB,KAAK;AAAA,IAAG;AAAA;AAAA,IAEnD,MAAMC,QAAO,OAAO,QAAQ,oBAAoB,eAAe;AAC3D,YAAM,KAAK;AAEX,UAAI,GAAG,WAAW,CAAC,GAAG,QAAQ,iBAAiB,OAAOA,WAAU,YAAY,CAAC,eAAe;AAGxF,YAAI,eAAeA,UAAS,EAAE,eAAe,GAAG,WAAW;AACvD,aAAG,SAAS,YAAY;AACxB,aAAG,WAAW;AAAA,QAClB;AACA,YAAI,aAAaA,UAAS,EAAE,aAAa,GAAG,WAAW;AACnD,aAAG,SAAS,UAAU;AACtB,aAAG,WAAW;AAAA,QAClB;AAAA,MACJ;AAEA,aAAO,WAAW,MAAM,KAAK,IAAIA,QAAO,OAAO,QAAQ,oBAAoB,aAAa;AAAA,IAC5F;AAAA;AAAA;AAAA,IAGA,eAAe;AACX,aAAO,KAAK;AAAA,IAChB;AAAA,IACA,iBAAiB,WAAW,eAAe,EAAE,aAAa,KAAK,WAAW;AA3DlF;AA4DY,UAAI,KAAK,cAAa,uCAAW,iBAAc,UAAK,cAAL,mBAAgB,YAAW;AACtE,aAAK,aAAa;AAClB,aAAK,QAAQ,EAAE,WAAW,aAAa,CAAC;AAAA,MAC5C;AAAA,IACJ;AAAA,IACA,MAAM,aAAa,WAAW,eAAe,MAAM;AAjE3D;AAkEY,WAAK,iBAAiB,WAAW,YAAY;AAC7C,cAAO,UAAK,YAAL,mBAAc;AAAA,IACzB;AAAA;AAAA;AAAA,IAGA,aAAa;AACT,aAAO,KAAK;AAAA,IAChB;AAAA,IACA,eAAe,SAAS,eAAe,OAAO;AA1EtD;AA2EY,UAAI,KAAK,cAAa,mCAAS,iBAAc,UAAK,YAAL,mBAAc,YAAW;AAClE,aAAK,WAAW;AAChB,aAAK,QAAQ,EAAE,SAAS,aAAa,CAAC;AAAA,MAC1C;AAAA,IACJ;AAAA,IACA,MAAM,WAAW,SAAS,eAAe,OAAO;AAhFxD;AAiFY,WAAK,eAAe,SAAS,YAAY;AACzC,cAAO,UAAK,YAAL,mBAAc;AAAA,IACzB;AAAA;AAAA;AAAA,IAGA,cAAc;AACV,aAAO,KAAK;AAAA,IAChB;AAAA,IACA,gBAAgB,UAAU,MAAM,YAAY,MAAM;AAC9C,WAAK,YAAY;AACjB,WAAK,QAAQ,EAAE,UAAU,UAAU,CAAC;AACpC,UAAI;AACA,aAAK,QAAQ,EAAE,cAAc,KAAK,CAAC;AAAA,IAC3C;AAAA,IACA,MAAM,YAAY,UAAU,MAAM,YAAY,MAAM;AA/F5D;AAgGY,WAAK,gBAAgB,UAAU,MAAM,SAAS;AAC9C,cAAO,UAAK,YAAL,mBAAc;AAAA,IACzB;AAAA,IACA,kBAAkB;AACd,aAAO,KAAK;AAAA,IAChB;AAAA;AAAA;AAAA,IAGA,cAAc;AAxGtB;AAyGY,YAAM,KAAK;AACX,YAAM,UAAU,GAAG;AACnB,YAAM,YAAY,GAAG,qBAAqB,WAAW;AACrD,YAAM,UAAU,GAAG,qBAAqB,SAAS;AACjD,YAAM,WAAW,GAAG,qBAAqB,UAAU;AAEnD,UAAI,aAAa;AACb,gBAAQ,YAAY,GAAG,aAAa;AACxC,UAAI,WAAW;AACX,gBAAQ,UAAU,GAAG,WAAW;AACpC,UAAI,YAAY;AACZ,gBAAQ,WAAW,GAAG,YAAY;AAEtC,UAAI,GAAG,cAAc,CAAC,GAAG,WAAW,eAAe;AAC/C,cAAM,cAAa,QAAG,oBAAH,mBAAoB,QAAQ,SAAS,SAAS;AACjE,YAAI,YAAY;AAIZ,gBAAM,qBAAoB,QAAG,oBAAH,mBAAoB,QAAQ,SAAS,WAAW,GAAG;AAC7E,cAAI,mBAAmB;AACnB,uBAAW,cAAc,mBAAmB;AACxC,yBAAW,WAAW,SAAS,EAAE;AAAA,YACrC;AAAA,UACJ,OACK;AACD,uBAAW,cAAc,YAAY;AACjC,kBAAI,WAAW,qBAAqB,OAAO,MAAM,GAAG,IAAI;AACpD,2BAAW,WAAW,SAAS,EAAE;AAAA,cACrC;AAAA,YACJ;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ;AACA,iBAAW,YAAY,KAAK,EAAE;AAAA,IAClC;AAAA;AAAA,IAEA,WAAW,SAAS,KAAK,OAAO,eAAeA,QAAO;AA9I9D;AAgJY,WAAK,KAAK,aAAW,UAAK,sBAAL,mBAAwB,aAAYA,QAAO;AAC5D,cAAM,EAAE,KAAK,IAAIA;AACjB,YAAI,SAAS,eAAe,QAAQ,cAAc,SAAS,WAAW;AAClE,oBAAU;AAEV,eAAK,MAAM,IAAI,IAAI;AAAA,QACvB;AACA,YAAI,eAAe;AACf,oBAAU;AAAA,QACd;AAAA,MACJ;AACA,iBAAW,WAAW,KAAK,MAAM,SAAS,KAAK,OAAO,eAAeA,MAAK;AAAA,IAC9E;AAAA;AAAA,IAEA,YAAY,OAAO,QAAQ,QAAQ,oBAAoB,eAAe;AAClE,UAAI,CAAC,KAAK,kBAAkB,CAAC,eAAe;AAExC,aAAK,QAAQ;AAAA,UACT,WAAW,KAAK,qBAAqB,WAAW;AAAA,UAChD,SAAS,KAAK,qBAAqB,SAAS;AAAA,UAC5C,UAAU,KAAK,qBAAqB,UAAU;AAAA,UAC9C,cAAc,KAAK,qBAAqB,cAAc;AAAA,QAC1D,CAAC;AAAA,MACL;AACA,iBAAW,YAAY,KAAK,MAAM,OAAO,QAAQ,QAAQ,oBAAoB,aAAa;AAAA,IAC9F;AAAA;AAAA,IAEA,uBAAuB;AACnB,YAAM,KAAK;AACX,YAAM,UAAU,GAAG;AACnB,YAAM,eAAe,eAAe;AACpC,YAAM,aAAa,aAAa;AAChC,YAAM,kBAAkB,cAAc;AACtC,YAAM,EAAE,WAAW,SAAS,UAAU,cAAc,UAAU,IAAI;AAClE,UAAIC,aAAY;AAEhB,UAAI,gBAAgB,CAAC,cAAc,CAAC,iBAAiB;AAEjD,YAAI,cAAc,MAAM;AACpB,kBAAQ,UAAU;AAAA,QACtB,WAES,GAAG,qBAAqB,SAAS,KAAK,YAAY,GAAG,qBAAqB,SAAS,KAAK,CAAC,cAAc;AAC5G,kBAAQ,UAAU;AAClB,kBAAQ,WAAW;AAAA,QACvB,WAES,GAAG,qBAAqB,UAAU,MAAM,gBAAgB,CAAC,GAAG,qBAAqB,SAAS,IAAI;AACnG,UAAAA,aAAY;AAAA,QAChB,WAES,GAAG,qBAAqB,SAAS,GAAG;AACzC,UAAAA,aAAY;AAAA,QAChB;AAAA,MACJ,WAES,CAAC,gBAAgB,cAAc,CAAC,iBAAiB;AAEtD,YAAI,YAAY,MAAM;AAClB,kBAAQ,YAAY;AAAA,QACxB,WAES,GAAG,qBAAqB,WAAW,KAAK,CAAC,gBAAgB,YAAY,QAAQ,UAAU,GAAG,qBAAqB,WAAW,GAAG;AAClI,kBAAQ,YAAY;AACpB,kBAAQ,WAAW;AAAA,QACvB,WAES,GAAG,qBAAqB,UAAU,MAAM,gBAAgB,CAAC,GAAG,qBAAqB,WAAW,IAAI;AACrG,UAAAA,aAAY;AAAA,QAChB,WAES,GAAG,qBAAqB,WAAW,GAAG;AAC3C,UAAAA,aAAY;AAAA,QAChB;AAAA,MACJ,WAES,CAAC,gBAAgB,CAAC,cAAc,iBAAiB;AAEtD,YAAI,aAAa,MAAM;AACnB,kBAAQ,UAAU;AAAA,QACtB,WAES,GAAG,qBAAqB,WAAW,MAAM,aAAa,CAAC,GAAG,qBAAqB,SAAS,IAAI;AACjG,cAAI,aAAa,QAAQ,WAAW,GAAG;AACnC,oBAAQ,WAAW;AAAA,UACvB;AACA,UAAAA,aAAY;AAAA,QAChB,WAES,GAAG,qBAAqB,SAAS,GAAG;AACzC,UAAAA,aAAY;AAAA,QAChB;AAAA,MACJ,WAES,gBAAgB,cAAc,CAAC,iBAAiB;AAErD,YAAI,cAAc,QAAQ,YAAY,MAAM;AACxC,kBAAQ,WAAW;AAAA,QACvB,OAEK;AACD,UAAAA,aAAY;AAAA,QAChB;AAAA,MACJ,WAES,gBAAgB,CAAC,cAAc,iBAAiB;AACrD,QAAAA,aAAY;AAAA,MAChB,WAES,CAAC,gBAAgB,cAAc,iBAAiB;AACrD,QAAAA,aAAY;AAAA,MAChB,WAES,gBAAgB,cAAc,iBAAiB;AACpD,YAAI,YAAY,MAAM;AAClB,UAAAA,aAAY;AAAA,QAChB,WACS,aAAa,MAAM;AACxB,UAAAA,aAAY;AAAA,QAChB,OACK;AACD,UAAAA,aAAY;AAAA,QAChB;AAAA,MACJ;AAEA,YAAM,6BAA6B,GAAG,qBAAqB,WAAW;AACtE,YAAM,2BAA2B,GAAG,qBAAqB,SAAS;AAClE,YAAM,4BAA4B,GAAG,qBAAqB,UAAU;AACpE,YAAM,gCAAgC,GAAG,qBAAqB,cAAc;AAC5E,UAAI,cAAc;AAClB,cAAQA,YAAW;AAAA,QACf,KAAK;AACD,kBAAQ,YAAY,WAAW,IAAI,0BAA0B,CAAC,2BAA2B,6BAA6B;AACtH;AAAA,QACJ,KAAK;AAED,yBAAe,WAAW,GAAG,QAAQ,2BAA2B,6BAA6B;AAE7F,2BAAiB,WAAW,GAAG,+BAA+B,cAAc,GAAG;AAC/E,kBAAQ,UAAU,WAAW,IAAI,4BAA4B,gBAAgB,6BAA6B;AAC1G;AAAA,QACJ,KAAK;AAED,yBAAe,WAAW,KAAK,4BAA4B,0BAA0B,GAAG;AAExF,kBAAQ,WAAW,WAAW,GAAG,+BAA+B,cAAc,GAAG;AACjF;AAAA,MACR;AACA,UAAI,eAAe,WAAW,QAAQ,cAAc;AAChD,aAAK,aAAa,QAAQ;AAC9B,UAAI,aAAa,WAAW,QAAQ,YAAY;AAC5C,aAAK,WAAW,QAAQ;AAC5B,UAAI,cAAc,WAAW,QAAQ,aAAa;AAC9C,aAAK,YAAY,QAAQ;AAE7B,UAAI,QAAQ,cAAc;AACtB,eAAO,QAAQ;AACnB,UAAI,QAAQ,YAAY;AACpB,eAAO,QAAQ;AACnB,aAAO,QAAQ;AACf,aAAO,QAAQ;AAAA,IACnB;AAAA,EACJ;AACA,SAAOF;AACX,CAAC,EAAE;AACH;;;AChTO,IAAM,oBAAN,cAAgC,MAAM,CAAC,2BAA2B,GAAG,CAAC,SAAS;AAClF,QAAM,aAAa,KAAK;AACxB,QAAMG,2BAA0B,KAAK;AAAA,IACjC,IAAI,WAAW;AARvB;AASY,cAAO,UAAK,YAAL,mBAAc,gBAAgB,wBAAwB;AAAA,IACjE;AAAA,IACA,cAAc;AAXtB;AAcY,UAAI,KAAK,iBAAiB,CAAC,KAAK,cAAc,eAAe;AACzD,mBAAK,oBAAL,mBAAsB,MAAM,OAAK,EAAE,IAAI,UAAU,MAAM,KAAK,IAAI,QAAQ,gBAAc,WAAW,WAAW,YAAY,IAAI;AAAA,MAChI;AACA,iBAAW,YAAY,KAAK,IAAI;AAAA,IACpC;AAAA,IACA,aAAa,cAAc,OAAO;AAnB1C;AAuBY,UAAI,KAAK,YAAY,CAAC,eAAe,GAAC,UAAK,kBAAL,mBAAoB,gBAAe;AACrE,cAAM,gBAAgB,KAAK;AAG3B,aAAK,SAAS,QAAQ,gBAAc,cAAc,sBAAsB,IAAI,UAAU,CAAC;AAAA,MAC3F;AACA,iBAAW,aAAa,KAAK,IAAI;AAAA,IACrC;AAAA,IACA,WAAW,SAAS,KAAK,OAAO,cAAcC,QAAO;AAGjD,WAAIA,UAAA,gBAAAA,OAAO,UAAS,MAAM;AACtB,aAAK,SAAS,QAAQ,gBAAc;AAChC,qBAAW,IAAI,cAAc,KAAK;AAAA,QACtC,CAAC;AAAA,MACL;AACA,iBAAW,WAAW,KAAK,MAAM,SAAS,KAAK,OAAO,cAAcA,MAAK;AAAA,IAC7E;AAAA,EACJ;AACA,SAAOD;AACX,CAAC,EAAE;AACH;;;ACxCA,SAAS,KAAK,YAAY;AACtB,UAAO,yCAAY,WAAU,WAAW,KAAK;AACjD;AAIO,IAAM,sBAAN,cAAkC,MAAM,CAAC,2BAA2B,GAAG,CAAC,SAAS;AACpF,QAAM,aAAa,KAAK;AACxB,QAAME,6BAA4B,KAAK;AAAA;AAAA,IAEnC,WAAW,SAAS;AAChB,aAAO;AAAA;AAAA,QAEH,EAAE,MAAM,YAAY,SAAS,CAAC,GAAG,MAAM,MAAM,GAAG,SAAS,MAAM;AAAA,QAC/D,EAAE,MAAM,SAAS,SAAS,CAAC,GAAG,MAAM,MAAM,GAAG,SAAS,MAAM;AAAA,MAChE;AAAA,IACJ;AAAA;AAAA,IAEA,WAAWC,QAAO,OAAO,YAAY;AACjC,YAAM,EAAE,iBAAiB,YAAY,eAAe,QAAQ,IAAI;AAChE,UAAI,SAAS;AACb,UAAIA,WAAU,SAAS;AACnB,cAAM,QAAQ,aAAa,OAAO,cAAc,IAAI,QAAQ,yCAAY,QAAQ,QAAQ;AACxF,YAAI;AACA,mBAAS;AACb,gBAAQ,SAAS;AAAA,MACrB;AACA,UAAIA,WAAU,YAAY;AACtB,cAAM,WAAW,aAAa,OAAO,iBAAiB,IAAI,QAAQ,+CAAe,QAAQ,QAAQ;AACjG,YAAI;AACA,mBAAS;AACb,gBAAQ,YAAY;AAAA,MACxB;AAEA,iBAAW,WAAW,KAAK,MAAMA,QAAO,OAAO,YAAY,IAAI;AAE/D,UAAI,mBAAmB,UAAU,CAAC,QAAQ,sBAAsB,CAAC,gBAAgB,iBAAiB,CAAC,cAAc,iBAAiB,CAAC,gBAAgB,uBAAuB;AACtK,wBAAgB,kBAAkB;AAAA,MACtC;AAAA,IACJ;AAAA;AAAA,IAEA,cAAc;AACV,iBAAW,YAAY,KAAK,IAAI;AAChC,WAAK,WAAW,SAAS,KAAK,IAAI,OAAO,CAAC;AAC1C,WAAK,WAAW,YAAY,KAAK,IAAI,UAAU,CAAC;AAAA,IACpD;AAAA;AAAA;AAAA,IAGA,uBAAuB;AApD/B;AAsDY,UAAI,EAAE,QAAQ,KAAK,OAAO,WAAW,KAAK,SAAS,IAAI,KAAK;AAC5D,UAAI,UAAU,QAAQ,CAAE,aAAa,OAAO,cAAc,GAAI;AAC1D,cAAM,YAAW,UAAK,eAAL,mBAAiB,QAAQ;AAC1C,YAAI;AACA,eAAK,WAAW,SAAS,UAAU,KAAK;AAAA,MAChD;AACA,UAAI,aAAa,QAAQ,CAAE,aAAa,UAAU,iBAAiB,GAAI;AACnE,cAAM,YAAW,UAAK,kBAAL,mBAAoB,QAAQ;AAC7C,YAAI;AACA,eAAK,WAAW,YAAY,UAAU,KAAK;AAAA,MACnD;AAAA,IACJ;AAAA;AAAA,IAEA,oBAAoB,QAAQ;AACxB,YAAM,UAAU,KAAK;AACrB,UAAI,cAAc,SAAS;AACvB,gBAAQ,aAAa,KAAK,QAAQ,QAAQ;AAAA,MAC9C;AACA,UAAI,WAAW,SAAS;AACpB,gBAAQ,UAAU,KAAK,QAAQ,KAAK;AAAA,MACxC;AACA,iBAAW,oBAAoB,KAAK,MAAM,MAAM;AAAA,IACpD;AAAA;AAAA,IAEA,IAAI,MAAM,OAAO;AACb,WAAK,WAAW,SAAS,KAAK;AAC9B,WAAK,WAAW,WAAW,KAAK,KAAK,CAAC;AAAA,IAC1C;AAAA,IACA,IAAI,QAAQ;AACR,YAAM,QAAQ,KAAK,IAAI,OAAO;AAE9B,cAAO,+BAAO,OAAM,OAAO,QAAQ;AAAA,IACvC;AAAA;AAAA;AAAA,IAGA,IAAI,SAAS,UAAU;AACnB,WAAK,WAAW,YAAY,QAAQ;AACpC,WAAK,WAAW,cAAc,KAAK,QAAQ,CAAC;AAAA,IAChD;AAAA,IACA,IAAI,WAAW;AACX,YAAM,WAAW,KAAK,IAAI,UAAU;AAEpC,cAAO,qCAAU,OAAM,OAAO,WAAW;AAAA,IAC7C;AAAA,EACJ;AACA,SAAOD;AACX,CAAC,EAAE;AACH;;;AC9FO,IAAM,8BAAN,cAA0C,MAAM;AAAA,EACnD;AAAA,EACA;AAAA,EACA;AACJ,GAAG,CAAC,SAAS;AACT,QAAM,aAAa,KAAK;AACxB,QAAME,qCAAoC,KAAK;AAAA,IAC3C,WAAW,SAAS;AAChB,YAAM,SAAS,WAAW,WAAW,KAAK,MAAM,OAAO;AACvD,UAAI;AACA,aAAK,YAAY,OAAO;AAC5B,aAAO;AAAA,IACX;AAAA,IACA,YAAY,SAAS;AAAA,IAAE;AAAA,IACvB,gBAAgB;AAAA,IAAE;AAAA,EACtB;AACA,SAAOA;AACX,CAAC,EAAE;AACH;;;ACrBA,IAAM,WAAW,oBAAI,IAAI;AAIlB,IAAM,2BAAN,cAAuC,MAAM,CAAC,8BAA8B,2BAA2B,GAAG,CAAC,SAAS;AACvH,QAAM,aAAa,KAAK;AACxB,QAAMC,kCAAiC,KAAK;AAAA,IACxC,cAAc;AACV,YAAM,GAAG,SAAS;AAClB,WAAK,wBAAwB;AAAA,IACjC;AAAA,IACA,WAAW,gBAAgB;AACvB,aAAO;AAAA,QACH,YAAY;AAAA,QACZ,SAAS;AAAA,UACL,WAAW;AAAA,YACP,EAAE,UAAU,SAAS,QAAQ,MAAM;AAAA,YACnC,EAAE,UAAU,YAAY,QAAQ,MAAM;AAAA,YACtC,EAAE,UAAU,WAAW,QAAQ,MAAM;AAAA,UACzC;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AAAA,IACA,IAAI,KAAK,OAAO;AACZ,WAAK,2BAA2B;AAChC,YAAM,OAAO;AACb,WAAK,2BAA2B;AAAA,IACpC;AAAA,IACA,qBAAqB,OAAO;AACxB,aAAO,KAAK,QAAQ,SAAS,SAAS,OAAO,IAAI,KAAK;AAAA,IAC1D;AAAA,IACA,wBAAwB,UAAU;AAC9B,aAAO,KAAK,QAAQ,SAAS,YAAY,SAAS,WAAW,IAAI,KAAK;AAAA,IAC1E;AAAA,IACA,gBAAgB;AACZ,WAAK,QAAQ,eAAe;AAAA,IAChC;AAAA,IACA,oBAAoB;AAChB,WAAK,QAAQ,kBAAkB;AAAA,IACnC;AAAA,IACA,gBAAgB;AACZ,WAAK,cAAc,KAAK,gBAAgB,KAAK,YAAY,OAAO;AAChE,WAAK,iBAAiB,KAAK,gBAAgB,KAAK,eAAe,UAAU;AAAA,IAC7E;AAAA;AAAA,IAEA,gBAAgB,OAAO,WAAW;AAE9B,cAAQ,MAAM,eAAe;AAC7B,YAAM,aAAa,KAAK,SAAS,KAAK,QAAQ,SAAS,WAAW,MAAM,IAAI;AAC5E,UAAI,YAAY;AACZ,mBAAW,cAAc,YAAY;AACjC,gBAAM,SAAS,MAAM,QAAQ,WAAW,qBAAqB,SAAS,CAAC;AACvE,cAAI;AACA,uBAAW,WAAW,WAAW,MAAM;AAAA,QAC/C;AACA,aAAK,kBAAkB;AAAA,MAC3B;AAAA,IACJ;AAAA;AAAA,IAEA,kBAAkB,WAAW;AAGzB,WAAK,QAAQ,gBAAW;AAlEpC;AAkEuC,0BAAW,WAAW,YAAW,4BAAW,SAAS,MAApB,mBAAuB,OAAvB,YAA6B,yCAAY,QAAQ,eAAjD,YAA+D,WAAW,YAAY,IAAI,CAAC;AAAA,OAAC;AACxJ,WAAK,kBAAkB;AAAA,IAC3B;AAAA,IACA,gBAAgB;AACZ,WAAK,cAAc;AAAA,IACvB;AAAA,EACJ;AACA,SAAOA;AACX,CAAC,EAAE;AACH;;;ACnEO,IAAM,oBAAN,cAAgC,MAAM,CAAC,uBAAuB,2BAA2B,GAAG,CAAC,SAAS;AACzG,QAAM,aAAa,KAAK;AACxB,QAAMC,2BAA0B,KAAK;AAAA,EACrC;AACA,SAAOA;AACX,CAAC,EAAE;AACH;;;ACPO,IAAM,gCAAN,cAA4C,MAAM,CAAC,mCAAmC,2BAA2B,GAAG,CAAC,SAAS;AACjI,QAAM,aAAa,KAAK;AACxB,QAAMC,uCAAsC,KAAK;AAAA,IAC7C,WAAW,gBAAgB;AACvB,aAAO;AAAA,QACH,MAAM;AAAA,QACN,YAAY;AAAA,MAChB;AAAA,IACJ;AAAA,EACJ;AACA,SAAOA;AACX,CAAC,EAAE;AACH;;;ACfO,IAAM,sBAAN,cAAkC,MAAM,CAAC,2BAA2B,GAAG,CAAC,SAAS;AACpF,QAAM,aAAa,KAAK;AACxB,QAAMC,6BAA4B,KAAK;AAAA,IACnC,WAAW,SAAS;AAChB,aAAO;AAAA,QACH,EAAE,MAAM,aAAa,SAAS,CAAC,GAAG,MAAM,MAAM,GAAG,SAAS,MAAM;AAAA,QAChE,EAAE,MAAM,WAAW,SAAS,CAAC,GAAG,MAAM,MAAM,GAAG,SAAS,MAAM;AAAA,MAClE;AAAA,IACJ;AAAA;AAAA,IAEA,WAAWC,QAAO,OAAO,YAAY;AAd7C;AAeY,UAAI,SAAS;AACb,UAAIA,WAAU,eAAeA,WAAU,WAAW;AAC9C,cAAM,QAAQ,aAAa,OAAO,cAAc,IAAI,SAAQ,UAAK,eAAL,mBAAiB,QAAQ;AACrF,YAAI;AACA,mBAAS;AACb,gBAAQ,SAAS;AAAA,MACrB;AACA,iBAAW,WAAW,KAAK,MAAMA,QAAO,OAAO,YAAY,IAAI;AAC/D,UAAI,UAAU,CAAC,KAAK,QAAQ,sBAAsB,GAAC,UAAK,oBAAL,mBAAsB,gBAAe;AACpF,mBAAK,oBAAL,mBAAsB;AAAA,MAC1B;AAAA,IACJ;AAAA;AAAA,IAEA,cAAc;AACV,iBAAW,YAAY,KAAK,IAAI;AAGhC,WAAK,WAAW,aAAa,KAAK,IAAI,WAAW,CAAC;AAClD,WAAK,WAAW,WAAW,KAAK,IAAI,SAAS,CAAC;AAAA,IAClD;AAAA;AAAA;AAAA,IAGA,uBAAuB;AArC/B;AAuCY,UAAI,EAAE,WAAW,QAAQ,IAAI,KAAK;AAClC,UAAI,cAAc,QAAQ,CAAE,aAAa,WAAW,cAAc,GAAI;AAClE,cAAM,YAAW,UAAK,eAAL,mBAAiB,QAAQ;AAC1C,YAAI;AACA,eAAK,SAAS,YAAY;AAAA,MAClC;AACA,UAAI,YAAY,QAAQ,CAAE,aAAa,SAAS,cAAc,GAAI;AAC9D,cAAM,YAAW,UAAK,eAAL,mBAAiB,QAAQ;AAC1C,YAAI;AACA,eAAK,SAAS,UAAU;AAAA,MAChC;AAAA,IACJ;AAAA;AAAA;AAAA,IAGA,IAAI,UAAU,WAAW;AACrB,WAAK,WAAW,aAAa,SAAS;AAAA,IAC1C;AAAA,IACA,IAAI,YAAY;AACZ,YAAM,YAAY,KAAK,IAAI,WAAW;AAEtC,cAAO,uCAAW,OAAM,OAAO,YAAY;AAAA,IAC/C;AAAA,IACA,IAAI,QAAQ,SAAS;AACjB,WAAK,WAAW,WAAW,OAAO;AAAA,IACtC;AAAA,IACA,IAAI,UAAU;AACV,YAAM,UAAU,KAAK,IAAI,SAAS;AAElC,cAAO,mCAAS,OAAM,OAAO,UAAU;AAAA,IAC3C;AAAA,EACJ;AACA,SAAOD;AACX,CAAC,EAAE;AACH;;;ACpEA,IAAME,YAAW,oBAAI,IAAI;AAIlB,IAAM,2BAAN,cAAuC,MAAM,CAAC,8BAA8B,2BAA2B,GAAG,CAAC,SAAS;AACvH,QAAM,aAAa,KAAK;AACxB,QAAMC,kCAAiC,KAAK;AAAA,IACxC,cAAc;AACV,YAAM,GAAG,SAAS;AAClB,WAAK,yBAAyB,oBAAI,IAAI;AACtC,WAAK,4BAA4B;AAAA,IACrC;AAAA,IACA,WAAW,gBAAgB;AACvB,aAAO;AAAA,QACH,YAAY;AAAA,QACZ,SAAS;AAAA,UACL,WAAW;AAAA,YACP,EAAE,UAAU,aAAa,QAAQ,MAAM;AAAA,YACvC,EAAE,UAAU,WAAW,QAAQ,MAAM;AAAA,UACzC;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AAAA,IACA,wBAAwB,OAAO;AAC3B,aAAO,KAAK,QAAQ,SAAS,WAAW,KAAK,KAAKD;AAAA,IACtD;AAAA,IACA,wBAAwB,OAAO;AAC3B,aAAO,KAAK,QAAQ,SAAS,aAAa,KAAK,KAAKA;AAAA,IACxD;AAAA,IACA,IAAI,KAAK,OAAO;AACZ,WAAK,4BAA4B;AACjC,YAAM,OAAO;AACb,WAAK,4BAA4B;AAAA,IACrC;AAAA,IACA,gBAAgB;AACZ,WAAK,QAAQ,eAAe;AAAA,IAChC;AAAA,IACA,oBAAoB;AAChB,WAAK,QAAQ,kBAAkB;AAAA,IACnC;AAAA,IACA,gBAAgB;AACZ,WAAK,cAAc;AAAA,IACvB;AAAA,EACJ;AACA,SAAOC;AACX,CAAC,EAAE;AACH;;;ACxCO,IAAM,0BAAN,cAAsC,MAAM,CAAC,gBAAgB,2BAA2B,GAAG,CAAC,SAAS;AACxG,QAAM,aAAa,KAAK;AACxB,QAAMC,iCAAgC,KAAK;AAAA,IACvC,IAAI,WAAW;AAbvB;AAcY,cAAO,gBAAK,YAAL,mBAAc,gBAAgB,qBAAqB,UAAnD,YAA4D,KAAK;AAAA,IAC5E;AAAA,IACA,aAAa,cAAc,OAAO;AAE9B,WAAK,qBAAqB,KAAK;AAC/B,YAAM,aAAa,WAAW;AAAA,IAClC;AAAA,IACA,WAAW,SAAS,KAAK,OAAO,cAAcC,QAAO;AArB7D;AAuBY,UAAI,QAAQ,MAAM;AACd,mBAAK,aAAL,mBAAe,QAAQ,gBAAc,WAAW,IAAI,WAAW,KAAK;AAAA,MACxE;AACA,iBAAW,WAAW,KAAK,MAAM,SAAS,KAAK,OAAO,cAAcA,MAAK;AAAA,IAC7E;AAAA,IACA,KAAK,QAAQ,MAAM,OAAO,MAAM;AAC5B,YAAM,OAAO,WAAW,KAAK,KAAK,MAAM,OAAO,IAAI;AAGnD,UAAK,aAAa,SAAS,IAAI,KAAK,CAAC,KAAK,wBAAyB,CAAC,aAAa,SAAS,IAAI,GAAG;AAE7F,aAAK,qBAAqB,KAAK;AAAA,MACnC;AACA,aAAO;AAAA,IACX;AAAA,EACJ;AACA,SAAOD;AACX,CAAC,EAAE;AACH;;;ACjCO,IAAM,2BAAN,cAAuC,MAAM,CAAC,cAAc,GAAG,CAAC,SAAS;AAC5E,QAAM,aAAa,KAAK;AACxB,QAAME,kCAAiC,KAAK;AAAA,IACxC,IAAI,eAAe;AACf,aAAO,KAAK,QAAQ,gBAAgB,wBAAwB,IAAI;AAAA,IACpE;AAAA,IACA,IAAI,eAAe;AACf,aAAO,KAAK,QAAQ,gBAAgB,wBAAwB,IAAI;AAAA,IACpE;AAAA,IACA,eAAe;AACX,YAAM,aAAa,KAAK;AAGxB,UAAI,KAAK,cAAc;AACnB,aAAK,aAAa,QAAQ,gBAAc,WAAW,uBAAuB,IAAI,UAAU,CAAC;AAAA,MAC7F;AACA,UAAI,KAAK,cAAc;AACnB,aAAK,aAAa,QAAQ,gBAAc,WAAW,uBAAuB,IAAI,UAAU,CAAC;AAAA,MAC7F;AACA,iBAAW,aAAa,KAAK,IAAI;AAAA,IACrC;AAAA,EACJ;AACA,SAAOA;AACX,CAAC,EAAE;AACH;;;ACxBO,IAAM,qBAAN,cAAiC,MAAM;AAAA,EAC1C;AAAA,EACA;AAAA,EACA;AACJ,GAAG,CAAC,SAAS;AACT,QAAM,aAAa,KAAK;AACxB,QAAMC,4BAA2B,KAAK;AAAA,EACtC;AACA,SAAOA;AACX,CAAC,EAAE;AACH;;;ACXO,IAAM,sBAAN,cAAkC,MAAM,CAAC,yBAAyB,2BAA2B,GAAG,CAAC,SAAS;AAC7G,QAAM,aAAa,KAAK;AACxB,QAAMC,6BAA4B,KAAK;AAAA,IACnC,WAAW,gBAAgB;AACvB,aAAO;AAAA,QACH,YAAY;AAAA,MAChB;AAAA,IACJ;AAAA,IACA,cAAc;AAftB;AAgBY,iBAAK,oBAAL,mBAAsB,gBAAgB,MAAM;AAAA,IAChD;AAAA,IACA,gBAAgB;AAlBxB;AAmBY,WAAK,kBAAkB;AACvB,iBAAK,oBAAL,mBAAsB,gBAAgB,MAAM;AAAA,IAChD;AAAA,EACJ;AACA,SAAOA;AACX,CAAC,EAAE;AACH;;;AClBO,IAAM,yBAAN,cAAqC,MAAM,CAAC,4BAA4B,2BAA2B,GAAG,CAAC,SAAS;AACnH,QAAM,aAAa,KAAK;AACxB,QAAMC,gCAA+B,KAAK;AAAA,IACtC,WAAW,gBAAgB;AACvB,aAAO;AAAA,QACH,YAAY;AAAA,MAChB;AAAA,IACJ;AAAA,IACA,cAAc;AAftB;AAgBY,iBAAK,oBAAL,mBAAsB,gBAAgB,MAAM;AAAA,IAChD;AAAA,IACA,gBAAgB;AAlBxB;AAmBY,iBAAK,oBAAL,mBAAsB,gBAAgB,MAAM;AAAA,IAChD;AAAA,IACA,MAAM,UAAU;AArBxB;AAsBY,iBAAW,MAAM,KAAK,MAAM,QAAQ;AACpC,iBAAK,oBAAL,mBAAsB,kBAAkB;AAAA,IAC5C;AAAA,EACJ;AACA,SAAOA;AACX,CAAC,EAAE;AACH;;;ACxBO,IAAM,0BAA0B,MAAM;AACzC,QAAM,IAAI,MAAM,uBAAuB;AAC3C;AACO,IAAM,yBAAyB,MAAM;AACxC,QAAM,IAAI,MAAM,wCAAwC;AAC5D;AAWA,IAAqB,YAArB,cAAuCC,MAAK;AAAA,EACxC,QAAQ,KAAK;AACT,4BAAwB;AAAA,EAC5B;AAAA,EACA,QAAQ,KAAK;AACT,4BAAwB;AAAA,EAC5B;AAAA,EACA,OAAO,KAAK;AACR,4BAAwB;AAAA,EAC5B;AAAA,EACA,OAAO,KAAK;AACR,4BAAwB;AAAA,EAC5B;AAAA,EACA,mBAAmB,KAAK;AACpB,4BAAwB;AAAA,EAC5B;AAAA,EACA,kBAAkB,KAAK;AACnB,4BAAwB;AAAA,EAC5B;AAAA,EACA,yBAAyB,KAAK;AAC1B,4BAAwB;AAAA,EAC5B;AAAA,EACA,oBAAoB,KAAK;AACrB,4BAAwB;AAAA,EAC5B;AAAA,EACA,SAAS,KAAK;AACV,4BAAwB;AAAA,EAC5B;AAAA,EACA,UAAU,KAAK;AACX,4BAAwB;AAAA,EAC5B;AAAA,EACA,eAAe,KAAK;AAChB,4BAAwB;AAAA,EAC5B;AAAA,EACA,gBAAgB,KAAK;AACjB,4BAAwB;AAAA,EAC5B;AAAA,EACA,aAAa,KAAK;AACd,4BAAwB;AAAA,EAC5B;AAAA,EACA,cAAc,KAAK;AACf,4BAAwB;AAAA,EAC5B;AAAA,EACA,gBAAgB,KAAK;AACjB,4BAAwB;AAAA,EAC5B;AAAA,EACA,mBAAmB,KAAK;AACpB,4BAAwB;AAAA,EAC5B;AAAA,EACA,mBAAmB,KAAK;AACpB,4BAAwB;AAAA,EAC5B;AAAA,EACA,sBAAsB,KAAK;AACvB,4BAAwB;AAAA,EAC5B;AAAA,EACA,mBAAmB,KAAK;AACpB,4BAAwB;AAAA,EAC5B;AAAA,EACA,mBAAmB,KAAK;AACpB,4BAAwB;AAAA,EAC5B;AACJ;AACA,UAAU,SAAS;;;AC9EZ,IAAM,aAAyB,OAAO,YAAY;AAClD,IAAM,cAAyB,OAAO,aAAa;AACnD,IAAM,aAAyB,OAAO,YAAY;AAClD,IAAM,WAAyB,OAAO,UAAU;AAChD,IAAM,mBAAyB,OAAO,kBAAkB;AACxD,IAAM,yBAAyB,OAAO,wBAAwB;AAC9D,IAAM,mBAAyB,OAAO,kBAAkB;AACxD,IAAM,QAAyB,OAAO,OAAO;AAAA,EAChD;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACJ,CAAC;;;ACTD,IAAM,WAAW,oBAAI,IAAI;AASlB,IAAM,mBAAmB,CAAC,MAAM,UAAU;AAC7C,WAAS,IAAI,MAAM,KAAK;AAC5B;AASO,IAAM,kBAAkB,CAAC,UAAU;AACtC,MAAI,OAAO,UAAU,UAAU;AAC3B,YAAQ,SAAS,IAAI,KAAK;AAAA,EAC9B;AACA,SAAO;AACX;AAOA,IAAO,mBAAQ;AAAA,EACX;AAAA,EACA;AACJ;;;AC5CO,IAAM,aAAa,CAAC,KAAK,YAAY;AACxC,QAAM,EAAE,MAAM,KAAK,IAAI;AACvB,MAAI;AACJ,MAAI,QAAQ,CAAC,MAAM;AACf,eAAW;AAAA,MACP,CAAC,UAAU,GAAI,IAAI,UAAU,EAAE,MAAM,IAAI,QAAQ;AAAA,MACjD,CAAC,QAAQ,GAAM;AAAA,IACnB;AAAA,EACJ,WACS,QAAQ,CAAC,MAAM;AACpB,eAAW;AAAA,MACP,CAAC,UAAU,GAAI,IAAI,UAAU,EAAE,MAAM,GAAG,IAAI,QAAQ;AAAA,IACxD;AAAA,EACJ,OACK;AACD,eAAW;AAAA,MACP,CAAC,UAAU,GAAI,CAAC;AAAA,MAChB,CAAC,QAAQ,GAAM;AAAA,IACnB;AAAA,EACJ;AAAC;AACD,SAAO;AAAA,IACH;AAAA,IACA,MAAM;AACF,UAAI,4BAA4B,OAAO;AAAA,IAC3C;AAAA,EACJ;AACJ;;;ACfO,IAAM,qBAAN,cAAiC,UAAU;AAAA,EAC9C,UAAU;AACN,WAAO;AAAA,EACX;AAAA,EACA,UAAU;AACN,WAAO;AAAA,EACX;AAAA,EACA,SAAS;AACL,2BAAuB;AAAA,EAC3B;AAAA,EACA,SAAS;AACL,2BAAuB;AAAA,EAC3B;AAAA,EACA,SAAS,KAAK;AACV,WAAO,IAAI,aAAa,mBAAmB;AAAA,EAC/C;AAAA,EACA,YAAY;AACR,2BAAuB;AAAA,EAC3B;AAAA,EACA,iBAAiB;AACb,WAAO;AAAA,MACH,CAAC,gBAAgB,GAAI;AAAA,IACzB;AAAA,EACJ;AAAA,EACA,kBAAkB;AACd,WAAO;AAAA,MACH,CAAC,gBAAgB,GAAI;AAAA,IACzB;AAAA,EACJ;AAAA,EACA,qBAAqB;AACjB,2BAAuB;AAAA,EAC3B;AAAA,EACA,oBAAqB;AACjB,2BAAuB;AAAA,EAC3B;AAAA,EACA,2BAA2B;AACvB,2BAAuB;AAAA,EAC3B;AAAA,EACA,sBAAsB;AAClB,2BAAuB;AAAA,EAC3B;AAAA,EACA,aAAa,KAAK,SAAS;AACvB,WAAO,WAAW,KAAK,OAAO;AAAA,EAClC;AAAA,EACA,gBAAqB;AAAA,EAAC;AAAA,EACtB,qBAAqB;AAAA,EAAC;AAAA,EACtB,qBAAqB;AAAA,EAAC;AAAA,EACtB,kBAAqB;AAAA,EAAC;AAAA,EACtB,qBAAqB;AAAA,EAAC;AAAA,EACtB,qBAAqB;AAAA,EAAC;AAAA,EACtB,mBAAqB;AAAA,EAAC;AAC1B;AAMA,IAAM,gBAAgB,IAAI,mBAAmB;AAC7C,IAAO,wBAAQ;AACf,iBAAS,iBAAiB,iBAAiB,aAAa;;;ACnExD,IAAM,oBAAoB,OAAO,mBAAmB;AAQpD,IAAqB,cAArB,cAAyCC,MAAK;AAAA,EAC1C,IAAI,gBAAgB;AAChB,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAMH,OAAQ;AAAA,IACZ;AAAA,EACJ;AAAA,EACA,aAAa,MAAM;AACf,SAAK,iBAAiB,IAAI,CAAC;AAC3B,UAAM,UAAU,GAAG,IAAI;AAAA,EAC3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,IAAI,QAAQ;AACR,WAAO,KAAK,iBAAiB,EAAE,MAAM,CAAC;AAAA,EAC1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,IAAI,SAAS;AACT,WAAO,KAAK,iBAAiB,EAAE;AAAA,EACnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,UAAU,QAAQ;AACd,SAAK,iBAAiB,EAAE,KAAK,MAAM;AAAA,EACvC;AAAA;AAAA;AAAA;AAAA,EAIA,OAAO;AACH,UAAM,QAAQ,KAAK,iBAAiB;AACpC,aAAS,IAAI,MAAM,SAAS,GAAG,KAAK,GAAG,EAAE,GAAG;AACxC,YAAM,CAAC,EAAE,KAAK;AAAA,IAClB;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA,EAIA,OAAO;AACH,UAAM,QAAQ,KAAK,iBAAiB;AACpC,aAAS,IAAI,GAAG,MAAM,MAAM,QAAQ,IAAI,KAAK,EAAE,GAAG;AAC9C,YAAM,CAAC,EAAE,KAAK;AAAA,IAClB;AAAA,EACJ;AACJ;AACA,YAAY,SAAS;;;ACzDd,IAAM,kBAAN,cAA8B,UAAU;AAAA,EAC3C,QAAQ,KAAK;AAGT,WAAO,IAAI,IAAI,YAAY,IAAI,YAAY,IAAI;AAAA,EACnD;AAAA,EACA,QAAQ,KAAK;AAGT,WAAO,KAAK,IAAI,YAAY,IAAI,WAAW,IAAI;AAAA,EACnD;AAAA,EACA,OAAO,KAAK,OAAO;AACf,QAAI,SAAS,IAAI;AACjB,UACI,QAAS,IAAI,UAAU,GACvB,SAAS,KAAK,IAAI,GAAG,SAAS,KAAK,GACnC,OAAO,MAAM;AACT,UAAI,qCAAqC;AACzC,YAAM,qBAAqB,CAAC;AAC5B,aAAO,WAAW,QAAQ;AACtB,cAAM,cAAc,MAAM,EAAE,MAAM;AAClC,oBAAY,KAAK;AACjB,2BAAmB,KAAK,WAAW;AAAA,MACvC;AACA,aAAO,CAAC,IAAI,aAAa,mBAAmB,cAAc,MAAM;AAC5D,YAAI,oCAAoC,EAAE,OAAQ,QAAQ,cAAe,mBAAmB,CAAC;AAAA,MACjG,CAAC;AAAA,IACL;AACJ,WAAO,CAAC;AAAA,MACJ,CAAC,UAAU,GAAI;AAAA,MACf,CAAC,QAAQ,GAAM;AAAA,IACnB,GAAG,IAAI;AAAA,EACX;AAAA,EACA,OAAO,KAAK,OAAO;AACf,QAAI,SAAS,IAAI;AACjB,UACI,QAAS,IAAI,UAAU,GACvB,SAAS,KAAK,IAAI,MAAM,QAAQ,SAAS,KAAK;AAClD,UAAM,OAAO,MAAM;AACf,UAAI,qCAAqC;AACzC,YAAM,qBAAqB,CAAC;AAC5B,SAAG;AACC,cAAM,cAAc,MAAM,QAAQ;AAClC,oBAAY,KAAK;AACjB,2BAAmB,KAAK,WAAW;AAAA,MACvC,SACO,WAAW;AAClB,aAAO,CAAC,IAAI,aAAa,mBAAmB,cAAc,MAAM;AAC5D,YAAI,oCAAoC,EAAE,OAAQ,QAAQ,cAAe,mBAAmB,CAAC;AAAA,MACjG,CAAC;AAAA,IACL;AACA,WAAO,CAAC;AAAA,MACJ,CAAC,UAAU,GAAI;AAAA,MACf,CAAC,QAAQ,GAAM;AAAA,IACnB,GAAG,IAAI;AAAA,EACX;AAAA,EACA,WAAW;AACP,2BAAuB;AAAA,EAC3B;AAAA,EACA,YAAY;AACR,WAAO;AAAA,EACX;AAAA,EACA,iBAAiB;AACb,WAAO;AAAA,MACH,CAAC,UAAU,GAAU;AAAA,MACrB,CAAC,gBAAgB,GAAI;AAAA,IACzB;AAAA,EACJ;AAAA,EACA,kBAAkB;AACd,2BAAuB;AAAA,EAC3B;AAAA,EACA,mBAAmB,KAAK,OAAO;AAC3B,UAAM,cAAc,IAAI,YAAY,EAAE,MAAM,CAAC;AAC7C,WAAO,CAAC;AAAA,MACJ,CAAC,UAAU,GAAU;AAAA,MACrB,CAAC,gBAAgB,GAAI;AAAA,IACzB,GAAG,MAAM;AACL,UAAI,qCAAqC,WAAW;AAAA,IACxD,CAAC;AAAA,EACL;AAAA,EACA,oBAAoB;AAChB,2BAAuB;AAAA,EAC3B;AAAA,EACA,2BAA2B;AACvB,2BAAuB;AAAA,EAC3B;AAAA,EACA,sBAAsB;AAClB,2BAAuB;AAAA,EAC3B;AAAA,EACA,aAAa,KAAK,SAAS;AACvB,WAAO,WAAW,KAAK,OAAO;AAAA,EAClC;AAAA,EACA,gBAAqB;AAAA,EAAC;AAAA,EACtB,qBAAqB;AAAA,EAAC;AAAA,EACtB,qBAAqB;AAAA,EAAC;AAAA,EACtB,kBAAqB;AAAA,EAAC;AAAA,EACtB,qBAAqB;AAAA,EAAC;AAAA,EACtB,qBAAqB;AAAA,EAAC;AAAA,EACtB,mBAAqB;AAAA,EAAC;AAC1B;AAMA,IAAM,aAAa,IAAI,gBAAgB;AACvC,IAAO,qBAAQ;AACf,iBAAS,iBAAiB,cAAc,UAAU;;;AC5G3C,IAAM,sBAAN,cAAkC,UAAU;AAAA,EAC/C,UAAU;AACN,WAAO;AAAA,EACX;AAAA,EACA,UAAU;AACN,WAAO;AAAA,EACX;AAAA,EACA,WAAW;AAAA,EAAC;AAAA,EACZ,UAAU,KAAK;AACX,UAAM,cAAc,IAAI,gBAAgB;AACxC,QAAI,oCAAoC,aAAa,EAAE,UAAW,KAAK,CAAC;AACxE,WAAO;AAAA,MACH,CAAC,UAAU,GAAU;AAAA,MACrB,CAAC,gBAAgB,GAAI;AAAA,IACzB;AAAA,EACJ;AAAA,EACA,eAAe,KAAK;AAChB,WAAO,CAAC;AAAA,MACJ,CAAC,UAAU,GAAU;AAAA,MACrB,CAAC,gBAAgB,GAAI;AAAA,IACzB,GAAG,MAAM;AACL,UAAI,uBAAuB;AAAA,IAC/B,CAAC;AAAA,EACL;AAAA,EACA,kBAAkB;AACd,2BAAuB;AAAA,EAC3B;AAAA,EACA,qBAAqB;AACjB,2BAAuB;AAAA,EAC3B;AAAA,EACA,kBAAkB,KAAK,OAAO;AAC1B,UACI,cAAc,IAAI,gBAAgB,GAClC,QAAc,IAAI,UAAU;AAChC,QAAI,WAAW,IAAI,QAAQ;AAC3B,QAAI,YAAY,QAAQ;AACpB,UAAI,CAAC,YAAY,SAAS,CAAC,SAAS,IAAI,qBAAqB;AACzD,oBAAY,QAAQ,IAAI,oBAAoB,WAAW;AAAA,MAC3D,WACS,OAAO;AACZ,oBAAY,QAAQ;AAAA,MACxB;AACA,YAAM,QAAQ,IAAI;AAClB,YAAM,SAAY,EAAE;AAAA,IACxB;AACA,WAAO,CAAC;AAAA,MACJ,CAAC,UAAU,GAAU;AAAA,MACrB,CAAC,QAAQ,GAAY;AAAA,MACrB,CAAC,gBAAgB,GAAI;AAAA,IACzB,GAAG,MAAM;AACL,UAAI,oCAAoC,aAAa,EAAE,MAAO,KAAK,CAAC;AAAA,IACxE,CAAC;AAAA,EACL;AAAA,EACA,oBAAoB,KAAK;AACrB,UAAM,cAAc,IAAI,gBAAgB;AACxC,WAAO,CAAC;AAAA,MACJ,CAAC,UAAU,GAAU;AAAA,MACrB,CAAC,gBAAgB,GAAI;AAAA,IACzB,GAAG,MAAM;AACL,UAAI,YAAY,QAAQ;AACpB,oBAAY,KAAK;AAAA,MACrB;AACA,aAAO;AAAA,QACH;AAAA,QACA,MAAM;AACF,cAAI,oCAAoC,aAAa,EAAE,UAAW,KAAK,CAAC;AAAA,QAC5E;AAAA,MACJ;AAAA,IACJ,CAAC;AAAA,EACL;AAAA,EACA,2BAA2B;AACvB,2BAAuB;AAAA,EAC3B;AAAA,EACA,aAAa,KAAK,SAAS;AACvB,WAAO,WAAW,KAAK,OAAO;AAAA,EAClC;AAAA,EACA,cAAc,KAAK,OAAO,SAAS,SAAS,qBAAqB;AAC7D,UAAM,cAAc,IAAI,gBAAgB;AACxC,gBAAY,UAAU,IAAI,sBAAsB,OAAO,SAAS,SAAS,mBAAmB,CAAC;AAAA,EACjG;AAAA,EACA,mBAAmB,KAAK,aAAa,OAAO,YAAY,gBAAgB,eAAe;AACnF,UAAM,cAAc,IAAI,gBAAgB;AACxC,gBAAY,UAAU,IAAI,2BAA2B,aAAa,OAAO,YAAY,gBAAgB,aAAa,CAAC;AAAA,EACvH;AAAA,EACA,mBAAmB,KAAK,aAAa,aAAa,SAAS;AACvD,UAAM,cAAc,IAAI,gBAAgB;AACxC,gBAAY,UAAU,IAAI,2BAA2B,aAAa,aAAa,OAAO,CAAC;AAAA,EAC3F;AAAA,EACA,gBAAgB,KAAK,OAAO,QAAQ,QAAW;AAC3C,UAAM,cAAc,IAAI,gBAAgB;AACxC,gBAAY,UAAU,IAAI,wBAAwB,OAAO,QAAQ,MAAM,CAAC;AAAA,EAC5E;AAAA,EACA,mBAAmB,KAAK,OAAO,OAAO,QAAQ,SAAS,QAAQ;AAC3D,UAAM,cAAc,IAAI,gBAAgB;AACxC,gBAAY,UAAU,IAAI,2BAA2B,OAAO,OAAO,QAAQ,SAAS,MAAM,CAAC;AAAA,EAC/F;AAAA,EACA,mBAAmB,KAAK,OAAO,QAAQ,SAAS,QAAQ;AACpD,UAAM,cAAc,IAAI,gBAAgB;AACxC,gBAAY,UAAU,IAAI,2BAA2B,OAAO,QAAQ,SAAS,MAAM,CAAC;AAAA,EACxF;AAAA,EACA,iBAAiB,KAAK,OAAO,YAAY,QAAU;AAC/C,UAAM,cAAc,IAAI,gBAAgB;AACxC,gBAAY,UAAU,IAAI,yBAAyB,OAAO,YAAY,MAAM,CAAC;AAAA,EACjF;AACJ;AAMA,IAAM,iBAAiB,IAAI,oBAAoB;AAC/C,IAAO,yBAAQ;AACf,iBAAS,iBAAiB,kBAAkB,cAAc;;;ACjHnD,IAAM,sBAAN,cAAkC,UAAU;AAAA,EAC/C,WAAW,QAAQ;AACf,WAAO;AAAA,EACX;AAAA,EACA,UAAU;AACN,WAAO;AAAA,EACX;AAAA,EACA,UAAU;AACN,WAAO;AAAA,EACX;AAAA,EACA,SAAS;AACL,2BAAuB;AAAA,EAC3B;AAAA,EACA,SAAS;AACL,2BAAuB;AAAA,EAC3B;AAAA,EACA,WAAW;AACP,2BAAuB;AAAA,EAC3B;AAAA,EACA,YAAY;AACR,2BAAuB;AAAA,EAC3B;AAAA,EACA,iBAAiB;AACb,WAAO;AAAA,MACH,CAAC,gBAAgB,GAAI;AAAA,IACzB;AAAA,EACJ;AAAA,EACA,kBAAkB;AACd,WAAO;AAAA,MACH,CAAC,gBAAgB,GAAI;AAAA,IACzB;AAAA,EACJ;AAAA,EACA,qBAAqB;AACjB,2BAAuB;AAAA,EAC3B;AAAA,EACA,oBAAqB;AACjB,2BAAuB;AAAA,EAC3B;AAAA,EACA,2BAA2B;AACvB,2BAAuB;AAAA,EAC3B;AAAA,EACA,sBAAsB;AAClB,2BAAuB;AAAA,EAC3B;AAAA,EACA,eAAe;AACX,2BAAuB;AAAA,EAC3B;AAAA,EACA,gBAAqB;AAAA,EAAC;AAAA,EACtB,qBAAqB;AAAA,EAAC;AAAA,EACtB,qBAAqB;AAAA,EAAC;AAAA,EACtB,kBAAqB;AAAA,EAAC;AAAA,EACtB,qBAAqB;AAAA,EAAC;AAAA,EACtB,qBAAqB;AAAA,EAAC;AAAA,EACtB,mBAAqB;AAAA,EAAC;AAC1B;AAMA,IAAM,iBAAiB,IAAI,oBAAoB;AAC/C,IAAO,yBAAQ;AACf,iBAAS,iBAAiB,kBAAkB,cAAc;;;AC5DnD,IAAM,sBAAN,cAAkC,gBAAgB;AAAA,EACrD,iBAAiB;AACb,2BAAuB;AAAA,EAC3B;AAAA,EACA,kBAAkB;AACd,WAAO;AAAA,MACH,CAAC,UAAU,GAAU;AAAA,MACrB,CAAC,gBAAgB,GAAI;AAAA,IACzB;AAAA,EACJ;AAAA,EACA,mBAAmB,KAAK,OAAO;AAC3B,UAAM,cAAc,IAAI,YAAY,EAAE,MAAM,CAAC;AAC7C,WAAO,CAAC;AAAA,MACJ,CAAC,UAAU,GAAU;AAAA,MACrB,CAAC,gBAAgB,GAAI;AAAA,IACzB,GAAG,MAAM;AACL,UAAI,qCAAqC,WAAW;AACpD,UAAI,uBAAuB;AAAA,IAC/B,CAAC;AAAA,EACL;AAAA,EACA,cAAc,KAAK,OAAO,SAAS,SAAS;AACxC,QAAI,iBAAiB;AACrB,QAAI,cAAc,OAAO,SAAS,OAAO;AAAA,EAC7C;AAAA,EACA,mBAAmB,KAAK,aAAa,OAAO,aAAa,SAAS;AAC9D,QAAI,iBAAiB;AACrB,QAAI,mBAAmB,aAAa,OAAO,aAAa,OAAO;AAAA,EACnE;AAAA,EACA,mBAAmB,KAAK,aAAa,aAAa,SAAS;AACvD,QAAI,iBAAiB;AACrB,QAAI,mBAAmB,aAAa,aAAa,OAAO;AAAA,EAC5D;AAAA,EACA,gBAAgB,KAAK,OAAO,QAAQ,QAAQ;AACxC,QAAI,iBAAiB;AACrB,QAAI,gBAAgB,OAAO,QAAQ,MAAM;AAAA,EAC7C;AAAA,EACA,mBAAmB,KAAK,OAAO,OAAO,QAAQ,SAAS,QAAQ;AAC3D,QAAI,iBAAiB;AACrB,QAAI,mBAAmB,OAAO,OAAO,QAAQ,SAAS,MAAM;AAAA,EAChE;AAAA,EACA,mBAAmB,KAAK,OAAO,QAAQ,SAAS,QAAQ;AACpD,QAAI,iBAAiB;AACrB,QAAI,mBAAmB,OAAO,QAAQ,SAAS,MAAM;AAAA,EACzD;AAAA,EACA,iBAAiB,KAAK,OAAO,YAAY,QAAQ;AAC7C,QAAI,iBAAiB;AACrB,QAAI,iBAAiB,OAAO,YAAY,MAAM;AAAA,EAClD;AACJ;AAMA,IAAM,iBAAiB,IAAI,oBAAoB;AAC/C,IAAO,yBAAQ;AACf,iBAAS,iBAAiB,kBAAkB,cAAc;;;ACvDnD,IAAM,0BAAN,cAAsC,oBAAoB,MAAM,iBAAS,EAAE;AAAA,EAC9E,UAAU,KAAK;AACX,UACI,cAAc,IAAI,gBAAgB,GAClC,QAAc,IAAI,sBAAsB;AAC5C,QAAI,OAAO;AACP,WAAK,aAAa,KAAK;AAAA,IAC3B;AACA,QAAI,oCAAoC,aAAa,EAAE,UAAW,KAAK,CAAC;AACxE,WAAO;AAAA,MACH,CAAC,UAAU,GAAgB;AAAA,MAC3B,CAAC,gBAAgB,GAAU;AAAA,MAC3B,CAAC,sBAAsB,GAAI;AAAA,IAC/B;AAAA,EACJ;AAAA,EACA,eAAe,KAAK;AAChB,2BAAuB;AAAA,EAC3B;AAAA,EACA,gBAAgB,KAAK;AACjB,UAAM,QAAc,IAAI,sBAAsB;AAC9C,QAAI,OAAO;AACP,WAAK,aAAa,KAAK;AAAA,IAC3B;AACA,WAAO;AAAA,MACH,CAAC,UAAU,GAAgB;AAAA,MAC3B,CAAC,gBAAgB,GAAU;AAAA,MAC3B,CAAC,sBAAsB,GAAI;AAAA,IAC/B;AAAA,EACJ;AAAA,EACA,kBAAkB,KAAK,OAAO;AAC1B,UACI,cAAc,IAAI,gBAAgB,GAClC,QAAc,IAAI,sBAAsB,GACxC,QAAc,IAAI,UAAU;AAChC,QAAI,WAAW,IAAI,QAAQ;AAC3B,QAAI,OAAO;AACP,WAAK,aAAa,KAAK;AAAA,IAC3B;AACA,QAAI,YAAY,QAAQ;AACpB,UAAI,CAAC,YAAY,SAAS,CAAC,SAAS,IAAI,qBAAqB;AACzD,oBAAY,QAAQ,IAAI,oBAAoB,WAAW;AAAA,MAC3D,WACS,OAAO;AACZ,oBAAY,QAAQ;AAAA,MACxB;AACA,YAAM,QAAQ,IAAI;AAClB,YAAM,SAAY,EAAE;AAAA,IACxB;AACA,WAAO,CAAC;AAAA,MACJ,CAAC,UAAU,GAAgB;AAAA,MAC3B,CAAC,QAAQ,GAAkB;AAAA,MAC3B,CAAC,gBAAgB,GAAU;AAAA,MAC3B,CAAC,sBAAsB,GAAI;AAAA,IAC/B,GAAG,MAAM;AACL,UAAI,oCAAoC,aAAa,EAAE,MAAO,KAAK,CAAC;AAAA,IACxE,CAAC;AAAA,EACL;AAAA,EACA,yBAAyB,KAAK;AAC1B,QAAI,QAAQ,IAAI,sBAAsB;AACtC,QAAI,OAAO;AACP,WAAK,aAAa,KAAK;AAAA,IAC3B;AACA,YAAQ,KAAK;AAAA,MACT,MAAM;AACF,YAAI,gBAAgB;AAAA,MACxB;AAAA,MACA,IAAI;AAAA,IACR;AACA,WAAO;AAAA,MACH,CAAC,UAAU,GAAgB;AAAA,MAC3B,CAAC,sBAAsB,GAAI;AAAA,IAC/B;AAAA,EACJ;AAAA,EACA,aAAa,KAAK,SAAS;AACvB,WAAO,WAAW,KAAK,OAAO;AAAA,EAClC;AAAA,EACA,oBAAoB,KAAK;AACrB,UACI,cAAc,IAAI,gBAAgB,GAClC,QAAQ,IAAI,sBAAsB;AACtC,QAAI,OAAO;AACP,WAAK,aAAa,KAAK;AAAA,IAC3B;AACA,WAAO,CAAC;AAAA,MACJ,CAAC,UAAU,GAAgB;AAAA,MAC3B,CAAC,gBAAgB,GAAU;AAAA,MAC3B,CAAC,sBAAsB,GAAI;AAAA,IAC/B,GAAG,MAAM;AACL,UAAI,YAAY,QAAQ;AACpB,oBAAY,KAAK;AAAA,MACrB;AACA,aAAO;AAAA,QACH;AAAA,QACA,MAAM;AACF,cAAI,oCAAoC,aAAa,EAAE,UAAW,KAAK,CAAC;AAAA,QAC5E;AAAA,MACJ;AAAA,IACJ,CAAC;AAAA,EACL;AAAA,EACA,cAAc,QAAQ,MAAM;AACxB,UAAM,cAAc,KAAK,GAAG,IAAI;AAChC,QAAI,uBAAuB;AAAA,EAC/B;AAAA,EACA,mBAAmB,QAAQ,MAAM;AAC7B,UAAM,mBAAmB,KAAK,GAAG,IAAI;AACrC,QAAI,uBAAuB;AAAA,EAC/B;AAAA,EACA,mBAAmB,QAAQ,MAAM;AAC7B,UAAM,mBAAmB,KAAK,GAAG,IAAI;AACrC,QAAI,uBAAuB;AAAA,EAC/B;AAAA,EACA,gBAAgB,QAAQ,MAAS;AAC7B,UAAM,gBAAgB,KAAK,GAAG,IAAI;AAClC,QAAI,uBAAuB;AAAA,EAC/B;AAAA,EACA,mBAAmB,QAAQ,MAAM;AAC7B,UAAM,mBAAmB,KAAK,GAAG,IAAI;AACrC,QAAI,uBAAuB;AAAA,EAC/B;AAAA,EACA,mBAAmB,QAAQ,MAAM;AAC7B,UAAM,mBAAmB,KAAK,GAAG,IAAI;AACrC,QAAI,uBAAuB;AAAA,EAC/B;AAAA,EACA,iBAAiB,QAAQ,MAAQ;AAC7B,UAAM,iBAAiB,KAAK,GAAG,IAAI;AACnC,QAAI,uBAAuB;AAAA,EAC/B;AACJ;AAMA,IAAM,qBAAqB,IAAI,wBAAwB;AACvD,IAAO,6BAAQ;AACf,iBAAS,iBAAiB,sBAAsB,kBAAkB;;;ACjJlE,IAAMC,2BAA0B,MAAM;AAClC,QAAM,IAAI,MAAM,uBAAuB;AAC3C;AAMA,IAAqB,aAArB,cAAwCC,MAAK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMzC,IAAI,OAAO;AACP,WAAO,KAAK,YAAY;AAAA,EAC5B;AAAA;AAAA;AAAA;AAAA,EAIA,OAAO;AACH,IAAAD,yBAAwB;AAAA,EAC5B;AAAA;AAAA;AAAA;AAAA,EAIA,OAAO;AACH,IAAAA,yBAAwB;AAAA,EAC5B;AACJ;AACA,WAAW,SAAS;;;AC9BpB,IACI,aAAgB,OAAO,YAAY;AADvC,IAEI,gBAAgB,OAAO,eAAe;AAF1C,IAGI,gBAAgB,OAAO,eAAe;AAK1C,IAAqB,eAArB,cAA0C,WAAW;AAAA,EACjD,WAAW,gBAAgB;AACvB,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAOH,OAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAOR,SAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAOV,SAAU;AAAA,MACV,qBAAsB;AAAA,IAC1B;AAAA,EACJ;AAAA,EACA,IAAI,OAAO;AACP,WAAO;AAAA,EACX;AAAA,EACA,IAAI,QAAQ;AACR,WAAO,KAAK,UAAU;AAAA,EAC1B;AAAA,EACA,IAAI,MAAM,OAAO;AACb,SAAK,UAAU,IAAI;AAAA,EACvB;AAAA,EACA,IAAI,UAAU;AACV,WAAO,KAAK,aAAa;AAAA,EAC7B;AAAA,EACA,IAAI,QAAQ,OAAO;AACf,SAAK,aAAa,IAAI,EAAE,GAAG,MAAM;AAAA,EACrC;AAAA,EACA,IAAI,UAAU;AACV,WAAO,KAAK,aAAa;AAAA,EAC7B;AAAA,EACA,IAAI,QAAQ,OAAO;AACf,SAAK,aAAa,IAAI,EAAE,GAAG,MAAM;AAAA,EACrC;AAAA,EACA,OAAO;AACH,UAAM,EAAE,OAAO,QAAQ,IAAI;AAG3B,QAAI,MAAM,GAAG;AACT,aAAO,OAAO,OAAO,OAAO;AAAA,IAChC;AASA,UAAM,IAAI,SAAS,MAAM,MAAM,MAAM,QAAQ,MAAM,CAAC,CAAC;AAAA,EACzD;AAAA,EACA,OAAO;AACH,UAAM,EAAE,OAAO,QAAQ,IAAI;AAE3B,QAAI,MAAM,GAAG;AACT,aAAO,OAAO,OAAO,OAAO;AAAA,IAChC;AACA,UAAM,IAAI,SAAS,MAAM,MAAM,MAAM,QAAQ,MAAM,CAAC,CAAC;AAAA,EACzD;AACJ;AACA,aAAa,SAAS;;;AClFtB,IACI,oBAAoB,OAAO,mBAAmB;AADlD,IAEI,oBAAoB,OAAO,mBAAmB;AAFlD,IAGI,oBAAoB,OAAO,mBAAmB;AAHlD,IAII,eAAoB,OAAO,cAAc;AAK7C,IAAqB,oBAArB,cAA+C,WAAW;AAAA,EACtD,WAAW,gBAAgB;AACvB,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAOH,aAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAOd,aAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAOd,aAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAQd,SAAU;AAAA,IACd;AAAA,EACJ;AAAA,EACA,IAAI,OAAO;AACP,WAAO;AAAA,EACX;AAAA,EACA,IAAI,cAAc;AACd,WAAO,KAAK,iBAAiB;AAAA,EACjC;AAAA,EACA,IAAI,YAAY,OAAO;AACnB,SAAK,iBAAiB,IAAI;AAAA,EAC9B;AAAA,EACA,IAAI,cAAc;AACd,WAAO,KAAK,iBAAiB;AAAA,EACjC;AAAA,EACA,IAAI,YAAY,QAAQ;AACpB,SAAK,iBAAiB,IAAI,OAAO,MAAM,CAAC;AAAA,EAC5C;AAAA,EACA,IAAI,cAAc;AACd,WAAO,KAAK,iBAAiB;AAAA,EACjC;AAAA,EACA,IAAI,YAAY,OAAO;AACnB,SAAK,iBAAiB,IAAI;AAAA,EAC9B;AAAA,EACA,IAAI,UAAU;AACV,WAAO,KAAK,YAAY;AAAA,EAC5B;AAAA,EACA,IAAI,QAAQ,KAAK;AACb,SAAK,YAAY,IAAI;AAAA,EACzB;AAAA,EACA,OAAO;AACH,UACI,EAAE,aAAa,SAAS,YAAY,IAAI,MACxC,eAAe,oBAAI,IAAI,GACvB,aAAa,oBAAI,IAAI;AACzB,eAAW,cAAc,aAAa;AAClC,YAAM,MAAM,QAAQ,IAAI,UAAU;AAClC,UAAI,CAAC,KAAK;AACN,mBAAW,IAAI,UAAU;AAAA,MAC7B,OACK;AACD,YAAI,eAAe,aAAa,IAAI,IAAI,MAAM;AAC9C,YAAI,CAAC,cAAc;AACf,yBAAe,EAAE,WAAY,CAAC,GAAG,UAAW,CAAC,GAAG,uBAAwB,CAAC,EAAE;AAC3E,uBAAa,IAAI,IAAI,QAAQ,YAAY;AAAA,QAC7C;AACA,YAAI,IAAI,WAAW,aAAa;AAC5B,cAAI,IAAI,QAAQ,WAAW,aAAa;AACpC,yBAAa,UAAU,KAAK,EAAE,QAAS,IAAI,QAAQ,OAAQ,YAAY,OAAQ,IAAI,QAAQ,EAAE,CAAC;AAAA,UAClG,OACK;AACD,yBAAa,SAAS,KAAK,EAAE,QAAS,IAAI,QAAQ,OAAQ,YAAY,OAAQ,IAAI,MAAM,CAAC;AAAA,UAC7F;AAAA,QACJ,OACK;AACD,uBAAa,sBAAsB,KAAK,EAAE,QAAS,IAAI,QAAQ,OAAQ,YAAY,OAAQ,IAAI,MAAM,CAAC;AAAA,QAC1G;AAAA,MACJ;AAAA,IACJ;AACA,eAAW,gBAAgB,aAAa,OAAO,GAAG;AAC9C,YAAM,EAAE,WAAW,SAAS,IAAI;AAChC,eAAS,KAAK,CAAC,GAAG,MAAM,EAAE,QAAQ,EAAE,KAAK;AACzC,gBAAU,KAAK,CAAC,GAAG,MAAM,EAAE,QAAQ,EAAE,KAAK;AAAA,IAC9C;AACA,eAAW,QAAQ,WAAS,MAAM,OAAO,YAAY,KAAK,CAAC;AAC3D,eAAW,gBAAgB,aAAa,OAAO,GAAG;AAC9C,YAAM,EAAE,WAAW,UAAU,sBAAsB,IAAI;AACvD,eAAS,QAAQ,UAAQ;AACrB,aAAK,OAAO,YAAY,KAAK,OAAO,KAAK,KAAK;AAAA,MAClD,CAAC;AACD,gBAAU,QAAQ,UAAQ;AACtB,aAAK,OAAO,YAAY,KAAK,OAAO,KAAK,KAAK;AAAA,MAClD,CAAC;AACD,4BAAsB,QAAQ,UAAQ;AAClC,aAAK,OAAO,YAAY,KAAK,OAAO,KAAK,KAAK;AAAA,MAClD,CAAC;AAAA,IACL;AAAA,EACJ;AAAA,EACA,OAAO;AACH,UAAM,EAAE,aAAa,aAAa,YAAY,IAAI;AAClD,gBAAY,YAAY,aAAa,WAAW;AAAA,EACpD;AACJ;AACA,kBAAkB,SAAS;;;AC3H3B,IACIE,qBAAoB,OAAO,mBAAmB;AADlD,IAEIC,qBAAoB,OAAO,mBAAmB;AAFlD,IAGIC,gBAAoB,OAAO,cAAc;AAK7C,IAAqB,oBAArB,cAA+C,WAAW;AAAA,EACtD,WAAW,gBAAgB;AACvB,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAOH,aAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAOd,aAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAQd,SAAU;AAAA,IACd;AAAA,EACJ;AAAA,EACA,IAAI,OAAO;AACP,WAAO;AAAA,EACX;AAAA,EACA,IAAI,cAAc;AACd,WAAO,KAAKF,kBAAiB;AAAA,EACjC;AAAA,EACA,IAAI,YAAY,OAAO;AACnB,SAAKA,kBAAiB,IAAI;AAAA,EAC9B;AAAA,EACA,IAAI,cAAc;AACd,WAAO,KAAKC,kBAAiB;AAAA,EACjC;AAAA,EACA,IAAI,YAAY,QAAQ;AACpB,SAAKA,kBAAiB,IAAI,OAAO,MAAM,CAAC;AAAA,EAC5C;AAAA,EACA,IAAI,UAAU;AACV,WAAO,KAAKC,aAAY;AAAA,EAC5B;AAAA,EACA,IAAI,QAAQ,KAAK;AACb,SAAKA,aAAY,IAAI;AAAA,EACzB;AAAA,EACA,OAAO;AACH,UAAM,EAAE,aAAa,SAAS,YAAY,IAAI;AAG9C,gBAAY,KAAK,CAAC,KAAK,QAAQ;AAC3B,YACI,WAAW,QAAQ,IAAI,GAAG,GAC1B,WAAW,QAAQ,IAAI,GAAG;AAC9B,aAAQ,WAAW;AAAA,IACvB,CAAC;AAED,gBAAY,QAAQ,OAAK;AACrB,kBAAY,YAAY,GAAG,QAAQ,IAAI,CAAC,CAAC;AAAA,IAC7C,CAAC;AAAA,EACL;AAAA,EACA,OAAO;AACH,SAAK,YAAY,YAAY,KAAK,WAAW;AAAA,EACjD;AACJ;AACA,kBAAkB,SAAS;;;AC1E3B,IACI,aAAkB,OAAO,YAAY;AADzC,IAEI,kBAAkB,OAAO,iBAAiB;AAK9C,IAAqB,YAArB,cAAuC,WAAW;AAAA,EAC9C,WAAW,gBAAgB;AACvB,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAOH,OAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAOR,WAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAOZ,QAAS;AAAA,IACb;AAAA,EACJ;AAAA,EACA,IAAI,OAAO;AACP,WAAO;AAAA,EACX;AAAA,EACA,IAAI,QAAQ;AACR,WAAO,KAAK,UAAU;AAAA,EAC1B;AAAA,EACA,IAAI,MAAM,OAAO;AACb,SAAK,UAAU,IAAI;AAAA,EACvB;AAAA,EACA,IAAI,YAAY;AACZ,WAAO,KAAK,eAAe;AAAA,EAC/B;AAAA,EACA,IAAI,UAAU,MAAM;AAChB,SAAK,eAAe,IAAI,KAAK,MAAM,CAAC;AAAA,EACxC;AAAA,EACA,OAAO;AACH,SAAK,MAAM,OAAO,KAAK,WAAW,KAAK,MAAM;AAAA,EACjD;AAAA,EACA,OAAO;AACH,SAAK,MAAM,IAAI,KAAK,WAAW,KAAK,MAAM;AAAA,EAC9C;AACJ;AACA,UAAU,SAAS;;;ACvDnB,IACIC,cAAoB,OAAO,YAAY;AAD3C,IAEIC,mBAAoB,OAAO,iBAAiB;AAFhD,IAGIC,qBAAoB,OAAO,mBAAmB;AAHlD,IAIIC,gBAAoB,OAAO,cAAc;AAK7C,IAAqB,eAArB,cAA0C,WAAW;AAAA,EACjD,WAAW,gBAAgB;AACvB,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAOH,OAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAOR,WAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAOZ,aAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MASd,SAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAOV,QAAS;AAAA,IACb;AAAA,EACJ;AAAA,EACA,IAAI,OAAO;AACP,WAAO;AAAA,EACX;AAAA,EACA,IAAI,QAAQ;AACR,WAAO,KAAKH,WAAU;AAAA,EAC1B;AAAA,EACA,IAAI,MAAM,OAAO;AACb,SAAKA,WAAU,IAAI;AAAA,EACvB;AAAA,EACA,IAAI,YAAY;AACZ,WAAO,KAAKC,gBAAe;AAAA,EAC/B;AAAA,EACA,IAAI,UAAU,MAAM;AAChB,SAAKA,gBAAe,IAAI,KAAK,MAAM,CAAC;AAAA,EACxC;AAAA,EACA,IAAI,cAAc;AACd,WAAO,KAAKC,kBAAiB;AAAA,EACjC;AAAA,EACA,IAAI,YAAY,OAAO;AACnB,SAAKA,kBAAiB,IAAI;AAAA,EAC9B;AAAA,EACA,IAAI,UAAU;AACV,WAAO,KAAKC,aAAY;AAAA,EAC5B;AAAA,EACA,IAAI,QAAQ,SAAS;AACjB,SAAKA,aAAY,IAAI;AAAA,EACzB;AAAA,EACA,OAAO;AACH,UAAM,EAAE,OAAO,WAAW,SAAS,OAAO,IAAI;AAG9C,cAAU,KAAK,CAAC,KAAK,QAAQ;AACzB,YACI,WAAW,QAAQ,IAAI,GAAG,GAC1B,WAAW,QAAQ,IAAI,GAAG;AAC9B,aAAO,aAAa,UAAa,aAAa,SAAY,WAAW,WAAW;AAAA,IACpF,CAAC;AACD,cAAU,QAAQ,OAAK;AACnB,YAAM,QAAQ,QAAQ,IAAI,CAAC;AAE3B,QAAE,oBAAoB;AACtB,UAAI,UAAU,QAAW;AAErB,cAAM,OAAO,OAAO,GAAG,MAAM;AAAA,MACjC,OACK;AAED,cAAM,OAAO,GAAG,MAAM;AAAA,MAC1B;AACA,QAAE,oBAAoB;AAAA,IAC1B,CAAC;AAAA,EACL;AAAA,EACA,OAAO;AACH,UAAM,KAAK;AACX,OAAG,MAAM,OAAO,GAAG,aAAa,GAAG,WAAW,GAAG,MAAM;AAAA,EAC3D;AACJ;AACA,aAAa,SAAS;;;AC5GtB,IACIC,cAAkB,OAAO,YAAY;AADzC,IAEIC,mBAAkB,OAAO,iBAAiB;AAF9C,IAGIC,gBAAkB,OAAO,cAAc;AAK3C,IAAqB,eAArB,cAA0C,WAAW;AAAA,EACjD,WAAW,gBAAgB;AACvB,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAOH,OAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAOR,WAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAOZ,SAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAOV,QAAS;AAAA,IACb;AAAA,EACJ;AAAA,EACA,IAAI,OAAO;AACP,WAAO;AAAA,EACX;AAAA,EACA,IAAI,QAAQ;AACR,WAAO,KAAKF,WAAU;AAAA,EAC1B;AAAA,EACA,IAAI,MAAM,OAAO;AACb,SAAKA,WAAU,IAAI;AAAA,EACvB;AAAA,EACA,IAAI,YAAY;AACZ,WAAO,KAAKC,gBAAe;AAAA,EAC/B;AAAA,EACA,IAAI,UAAU,MAAM;AAChB,SAAKA,gBAAe,IAAI,KAAK,MAAM,CAAC;AAAA,EACxC;AAAA,EACA,IAAI,UAAU;AACV,WAAO,KAAKC,aAAY;AAAA,EAC5B;AAAA,EACA,IAAI,QAAQ,SAAS;AACjB,SAAKA,aAAY,IAAI;AAAA,EACzB;AAAA,EACA,OAAO;AACH,UAAM,EAAE,OAAO,SAAS,WAAW,OAAO,IAAI;AAG9C,cAAU,KAAK,CAAC,KAAK,QAAQ;AACzB,YACI,WAAW,QAAQ,IAAI,GAAG,GAC1B,WAAW,QAAQ,IAAI,GAAG;AAE9B,aAAO,WAAW;AAAA,IACtB,CAAC;AACD,cAAU,QAAQ,OAAK;AACnB,YAAM,QAAQ,QAAQ,IAAI,CAAC;AAE3B,YAAM,OAAO,OAAO,GAAG,MAAM;AAAA,IACjC,CAAC;AAAA,EACL;AAAA,EACA,OAAO;AACH,SAAK,MAAM,OAAO,KAAK,WAAW,KAAK,MAAM;AAAA,EACjD;AACJ;AACA,aAAa,SAAS;;;ACnFtB,IACIC,cAAmB,OAAO,YAAY;AAD1C,IAEI,mBAAmB,OAAO,kBAAkB;AAKhD,IAAqB,kBAArB,cAA6C,WAAW;AAAA,EACpD,WAAW,gBAAgB;AACvB,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAOH,OAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAOR,YAAa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAOb,QAAS;AAAA,IACb;AAAA,EACJ;AAAA,EACA,IAAI,OAAO;AACP,WAAO;AAAA,EACX;AAAA,EACA,IAAI,QAAQ;AACR,WAAO,KAAKA,WAAU;AAAA,EAC1B;AAAA,EACA,IAAI,MAAM,OAAO;AACb,SAAKA,WAAU,IAAI;AAAA,EACvB;AAAA,EACA,IAAI,aAAa;AACb,WAAO,KAAK,gBAAgB;AAAA,EAChC;AAAA,EACA,IAAI,WAAW,SAAS;AACpB,SAAK,gBAAgB,IAAI,QAAQ,MAAM,CAAC;AAAA,EAC5C;AAAA,EACA,OAAO;AACH,UAAM,EAAE,OAAO,YAAY,OAAO,IAAI;AACtC,UAAM,IAAI,YAAY,MAAM;AAAA,EAChC;AAAA,EACA,OAAO;AACH,SAAK,MAAM,UAAU,KAAK,MAAM;AAAA,EACpC;AACJ;AACA,gBAAgB,SAAS;;;ACxClB,IAAM,wBAAwB,CAAC,OAAO,SAAS,SAAS,wBAAwB;AACnF,SAAO,IAAI,aAAa;AAAA,IACpB;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACJ,CAAC;AACL;AACO,IAAM,6BAA6B,CAAC,aAAa,aAAa,aAAa,YAAY;AAC1F,SAAO,IAAI,kBAAkB;AAAA,IACzB;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACJ,CAAC;AACL;AACO,IAAM,6BAA6B,CAAC,aAAa,aAAa,YAAY;AAC7E,SAAO,IAAI,kBAAkB;AAAA,IACzB;AAAA,IACA;AAAA,IACA;AAAA,EACJ,CAAC;AACL;AACO,IAAM,0BAA0B,CAAC,OAAO,WAAW,WAAW;AACjE,SAAO,IAAI,UAAU;AAAA,IACjB;AAAA,IACA;AAAA,IACA;AAAA,EACJ,CAAC;AACL;AACO,IAAM,6BAA6B,CAAC,OAAO,aAAa,WAAW,SAAS,WAAW;AAC1F,SAAO,IAAI,aAAa;AAAA,IACpB;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACJ,CAAC;AACL;AACO,IAAM,6BAA6B,CAAC,OAAO,WAAW,SAAS,WAAW;AAC7E,SAAO,IAAI,aAAa;AAAA,IACpB;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACJ,CAAC;AACL;AACO,IAAM,2BAA2B,CAAC,OAAO,YAAY,WAAW;AACnE,SAAO,IAAI,gBAAgB;AAAA,IACvB;AAAA,IACA;AAAA,IACA;AAAA,EACJ,CAAC;AACL;AACA,IAAM,kBAAkB,CAAC,KAAK,UAAU,SAAS;AAC7C,QACI,WAAW,IAAI,OACf,WAAW,MAAM,KAAK,IAAI,UAAU,GAAG,KAAK,GAAG,IAAI;AACvD,MAAI,OAAO,aAAa,UAAU;AAC9B,QAAI,UAAU,IAAI,iBAAS,gBAAgB,QAAQ;AAAA,EACvD,WACS,oBAAoB,WAAW;AACpC,QAAI,UAAU,IAAI;AAAA,EACtB,WACS,MAAM,QAAQ,QAAQ,GAAG;AAC9B,UAAM,CAAC,OAAO,IAAI,IAAI;AACtB,QAAI,OAAO,UAAU,UAAU;AAC3B,UAAI,UAAU,IAAI,iBAAS,gBAAgB,KAAK;AAAA,IACpD,WACS,iBAAiB,WAAW;AACjC,UAAI,UAAU,IAAI;AAAA,IACtB,WACS,SAAS,OAAO,UAAU,UAAU;AACzC,YAAM,OAAO,OAAO,KAAK,KAAK;AAC9B,UAAI,UAAU,IAAI,iBAAS,gBAAgB,IAAI,UAAU,CAAC;AAAA,IAC9D;AACA,QAAI,OAAO,SAAS,YAAY;AAC5B,sBAAgB,KAAK,MAAM,GAAG,IAAI;AAAA,IACtC;AAAA,EACJ,WACS,YAAY,OAAO,aAAa,UAAU;AAC/C,UAAM,OAAO,OAAO,KAAK,QAAQ;AACjC,QAAI,UAAU,IAAI,iBAAS,gBAAgB,IAAI,UAAU,CAAC;AAAA,EAC9D;AACA,MAAI,aAAa,sBAAc,aAAa,2BAAmB,aAAa,sBAAc,aAAa,yBAAiB;AACpH,QAAI,QAAQ,OAAO;AAAA,EACvB;AACJ;AAmEA,IAAqB,uBAArB,cAAkD,eAAOC,KAAI,EAAE;AAAA,EAC3D,WAAW,gBAAgB;AACvB,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAOH,UAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAcX,YAAa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAOb,kCAAmC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAQnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MASA,qBAAsB;AAAA,IAC1B;AAAA,EACJ;AAAA,EACA,aAAa,MAAM;AACf,WAAO,OAAO,MAAM;AAAA,MAChB,CAAC,UAAU,GAAgB;AAAA,MAC3B,CAAC,WAAW,GAAe,CAAC;AAAA,MAC5B,CAAC,UAAU,GAAgB,CAAC;AAAA,MAC5B,CAAC,QAAQ,GAAkB;AAAA,MAC3B,CAAC,gBAAgB,GAAU;AAAA,MAC3B,CAAC,sBAAsB,GAAI;AAAA,MAC3B,CAAC,gBAAgB,GAAU;AAAA,IAC/B,CAAC;AACD,UAAM,UAAU,GAAG,IAAI;AAAA,EAC3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,IAAI,QAAQ;AACR,WAAO,KAAK,UAAU;AAAA,EAC1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,IAAI,WAAW;AACX,WAAO,KAAK,QAAQ;AAAA,EACxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,IAAI,SAAS;AACT,WAAO,KAAK,UAAU,EAAE;AAAA,EAC5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,IAAI,SAAS;AACT,WAAO,MAAM,KAAK,KAAK,WAAW,CAAC;AAAA,EACvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,SAAS,OAAO;AACZ,WAAO,KAAK,WAAW,EAAE,SAAS,KAAK;AAAA,EAC3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,SAAS,OAAO;AACZ,QAAI,CAAC,KAAK,SAAS,KAAK,GAAG;AACvB,WAAK,WAAW,EAAE,KAAK,KAAK;AAC5B,YAAM,MAAM;AAAA,IAChB;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,YAAY,OAAO;AACf,QAAI,KAAK,SAAS,KAAK,GAAG;AACtB,WAAK,WAAW,IAAI,KAAK,WAAW,EAAE,OAAO,OAAK,MAAM,KAAK;AAC7D,YAAM,MAAM;AAAA,IAChB;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,aAAaC,KAAI;AACb,SAAK,WAAW,EAAE,QAAQ,OAAKA,IAAG,GAAG,EAAE,EAAE,CAAC;AAAA,EAC9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,IAAI,WAAW;AACX,WAAO,KAAK,UAAU;AAAA,EAC1B;AAAA,EACA,IAAI,SAAS,KAAK;AACd,UAAM,KAAK;AACX,QAAI,GAAG,aAAa,KAAK;AACrB,UAAI,KAAK;AACL,wBAAgB,IAAI,GAAG,MAAM,WAAW,EAAE;AAAA,MAC9C,OACK;AACD,wBAAgB,IAAI,GAAG,MAAM,UAAU,EAAE;AAAA,MAC7C;AACA,SAAG,QAAQ,eAAe,EAAE,UAAW,IAAI,CAAC;AAQ5C,SAAG,QAAQ,YAAY,EAAE,UAAW,IAAI,CAAC;AAAA,IAC7C;AAAA,EACJ;AAAA,EACA,IAAI,UAAU;AACV,WAAO,CAAC,KAAK;AAAA,EACjB;AAAA;AAAA;AAAA;AAAA,EAIA,SAAS;AACL,SAAK,WAAW;AAAA,EACpB;AAAA;AAAA;AAAA;AAAA,EAIA,UAAU;AACN,SAAK,WAAW;AAAA,EACpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,IAAI,UAAU;AACV,WAAO,KAAK,UAAU,sBAAc,KAAK,UAAU;AAAA,EACvD;AAAA,EACA,mBAAmB;AACf,WAAO,KAAK,MAAM,SAAS,KAAK;AAAA,EACpC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,IAAI,cAAc;AACd,WAAO,KAAK,UAAU,0BAAkB,KAAK,UAAU;AAAA,EAC3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,IAAI,aAAa;AACb,WAAO,KAAK,gBAAgB;AAAA,EAChC;AAAA,EACA,IAAI,WAAW,OAAO;AAClB,UAAM,KAAK;AACX,QAAI,GAAG,cAAc,OAAO;AACxB,UAAI,OAAO;AACP,wBAAgB,IAAI,GAAG,MAAM,gBAAgB,EAAE;AAAA,MACnD,OACK;AACD,wBAAgB,IAAI,GAAG,MAAM,iBAAiB,EAAE;AAAA,MACpD;AAAA,IACJ;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,iBAAiB,QAAQ,MAAM;AAC3B,oBAAgB,MAAM,KAAK,MAAM,oBAAoB,KAAK;AAAA,EAC9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,gBAAgB,QAAQ,MAAM;AAC1B,oBAAgB,MAAM,KAAK,MAAM,mBAAmB,KAAK;AAAA,EAC7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,yBAAyB;AACrB,oBAAgB,MAAM,KAAK,MAAM,wBAAwB;AAAA,EAC7D;AAAA;AAAA;AAAA;AAAA,EAIA,oBAAoB;AAChB,oBAAgB,MAAM,KAAK,MAAM,mBAAmB;AAAA,EACxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,IAAI,cAAc;AACd,WAAO,KAAK,gBAAgB;AAAA,EAChC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,IAAI,QAAQ;AACR,WAAO,KAAK,UAAU,EAAE,IAAI,CAAC,MAAM,EAAE,KAAK;AAAA,EAC9C;AAAA,EACA,IAAI,WAAW;AACX,WAAO,KAAK,UAAU;AAAA,EAC1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,IAAI,cAAc;AACd,WAAO,KAAK,UAAU;AAAA,EAC1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,IAAI,UAAU;AACV,WAAO,KAAK,MAAM,QAAQ,IAAI;AAAA,EAClC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,IAAI,UAAU;AACV,WAAO,KAAK,MAAM,QAAQ,IAAI;AAAA,EAClC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,MAAM,KAAK,QAAQ,GAAG;AAClB,QAAI,CAAC,KAAK,SAAS;AACf,YAAM,KAAK,iBAAiB;AAAA,IAChC;AACA,oBAAgB,MAAM,KAAK,MAAM,QAAQ,KAAK;AAAA,EAClD;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,UAAU;AACZ,QAAI,CAAC,KAAK,SAAS;AACf,YAAM,KAAK,iBAAiB;AAAA,IAChC;AACA,SAAK,KAAK,KAAK,MAAM;AAAA,EACzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,KAAK,QAAQ,GAAG;AAClB,QAAI,CAAC,KAAK,SAAS;AACf,YAAM,KAAK,iBAAiB;AAAA,IAChC;AACA,oBAAgB,MAAM,KAAK,MAAM,QAAQ,KAAK;AAAA,EAClD;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,UAAU;AACZ,QAAI,CAAC,KAAK,SAAS;AACf,YAAM,KAAK,iBAAiB;AAAA,IAChC;AACA,SAAK,KAAK,KAAK,MAAM;AAAA,EACzB;AAAA;AAAA;AAAA;AAAA,EAIA,WAAwB,UAAU,EAAE,MAAO,MAAM,MAAO,KAAK,GAAG;AAC5D,oBAAgB,MAAM,KAAK,MAAM,cAAc,OAAO;AAAA,EAC1D;AAAA;AAAA;AAAA;AAAA,EAIA,iBAAiB;AACb,SAAK,WAAW,EAAE,MAAO,KAAK,CAAC;AAAA,EACnC;AAAA;AAAA;AAAA;AAAA,EAIA,iBAAiB;AACb,SAAK,WAAW,EAAE,MAAO,KAAK,CAAC;AAAA,EACnC;AAAA,EACA,qCAAqC,aAAa;AAC9C,SAAK,aAAa,CAAC,UAAO;AA9jBlC;AA8jBqC,yBAAM,wBAAN,+BAA4B,MAAM;AAAA,KAAY;AAQ3E,SAAK,QAAQ,kBAAkB,EAAE,KAAM,MAAM,YAAY,CAAC;AAAA,EAC9D;AAAA,EACA,oCAAoC,aAAa,QAAQ;AACrD,SAAK,aAAa,CAAC,UAAO;AAzkBlC;AAykBqC,yBAAM,uBAAN,+BAA2B,MAAM,aAAa;AAAA,KAAO;AAYlF,SAAK,QAAQ,iBAAiB,EAAE,KAAM,MAAM,aAAa,OAAO,CAAC;AAAA,EACrE;AAAA,EACA,uCAAuC;AACnC,SAAK,aAAa,CAAC,UAAO;AAxlBlC;AAwlBqC,yBAAM,wBAAN,+BAA4B;AAAA,KAAK;AAO9D,SAAK,QAAQ,kBAAkB,EAAE,KAAM,KAAK,CAAC;AAAA,EACjD;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,oCAAoC,EAAE,OAAO,aAAa,GAAG;AACzD,SAAK,aAAa,CAAC,UAAO;AAtmBlC;AAsmBqC,yBAAM,uBAAN,+BAA2B;AAAA,KAAK;AAO7D,SAAK,QAAQ,iBAAiB,EAAE,KAAM,MAAM,OAAO,aAAa,CAAC;AAAA,EACrE;AAAA,EACA,4BAA4B,SAAS;AACjC,SAAK,aAAa,CAAC,UAAO;AAhnBlC;AAgnBqC,yBAAM,oBAAN,+BAAwB,MAAM;AAAA,KAAQ;AAOnE,SAAK,QAAQ,cAAc,EAAE,KAAM,MAAM,QAAQ,CAAC;AAAA,EACtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,cAAc,OAAO,SAAS,SAAS,qBAAqB;AACxD,oBAAgB,MAAM,KAAK,MAAM,eAAe,OAAO,SAAS,SAAS,mBAAmB;AAAA,EAChG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYA,mBAAmB,aAAa,OAAO,aAAa,SAAS;AACzD,oBAAgB,MAAM,KAAK,MAAM,oBAAoB,aAAa,OAAO,aAAa,OAAO;AAAA,EACjG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,mBAAmB,aAAa,aAAa,SAAS;AAClD,oBAAgB,MAAM,KAAK,MAAM,oBAAoB,aAAa,aAAa,OAAO;AAAA,EAC1F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,gBAAgB,OAAO,QAAQ,QAAQ;AACnC,oBAAgB,MAAM,KAAK,MAAM,iBAAiB,OAAO,QAAQ,MAAM;AAAA,EAC3E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYA,mBAAmB,OAAO,OAAO,QAAQ,SAAS,QAAQ;AACtD,oBAAgB,MAAM,KAAK,MAAM,oBAAoB,OAAO,OAAO,QAAQ,SAAS,MAAM;AAAA,EAC9F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA,mBAAmB,OAAO,QAAQ,SAAS,QAAQ;AAC/C,oBAAgB,MAAM,KAAK,MAAM,oBAAoB,OAAO,QAAQ,SAAS,MAAM;AAAA,EACvF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,iBAAiB,OAAO,YAAY,QAAQ;AACxC,oBAAgB,MAAM,KAAK,MAAM,kBAAkB,OAAO,YAAY,MAAM;AAAA,EAChF;AAAA;AAAA,EAEA,eAAe,OAAO;AAClB,UAAM,KAAK;AACX,QAAI,GAAG,SAAS;AACZ,UAAI,MAAM,UAAU;AAChB,YAAI,GAAG,SAAS;AACZ,gBAAM,eAAe;AACrB,aAAG,KAAK;AAAA,QACZ;AAAA,MACJ,WACS,GAAG,SAAS;AACjB,cAAM,eAAe;AACrB,WAAG,KAAK;AAAA,MACZ;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,QAAQ;AACJ,QAAI,KAAK,aAAa;AAClB,WAAK,qBAAqB,KAAK;AAC/B,WAAK,kBAAkB;AAAA,IAC3B;AAAA,EACJ;AAAA,EACA,aAAa;AACT,QAAI,KAAK,oBAAoB;AACzB,WAAK,iBAAiB,KAAK,mBAAmB,KAAK;AACnD,WAAK,mBAAmB,KAAK;AAC7B,aAAO,KAAK;AAAA,IAChB;AAAA,EACJ;AACJ;AACA,qBAAqB,SAAS;;;AC5uBvB,IAAM,gBAAN,cAA4B,MAAM,CAAC,GAAG,cAAM,EAAE;AACrD;AACO,IAAM,mBAAN,cAA+B,MAAM,CAAC,GAAG,iBAAS,EAAE;AAC3D;AAOO,IAAM,uBAAN,cAAmC,MAAM;AAAA,EAC5C;AAAA,EACA;AAAA,EACA;AACJ,GAAG,CAAC,SAAS;AACT,QAAM,aAAa,KAAK;AACxB,QAAMC,8BAA6B,KAAK;AAAA,IACpC,cAAc;AACV,YAAM,GAAG,SAAS;AAClB,WAAK,kBAAkB;AAAA,IAC3B;AAAA,IACA,IAAI,uBAAuB;AACvB,aAAO;AAAA,IACX;AAAA,IACA,IAAI,kBAAkB;AAClB,aAAO,CAAC,KAAK,4BAA4B,KAAK;AAAA,IAClD;AAAA,IACA,UAAU,SAAS,CAAC,GAAG;AAWnB,WAAK,2BAA2B;AAChC,WAAK,sBAAsB;AAC3B,WAAK,gBAAgB;AACrB,WAAK,wBAAwB;AAC7B,YAAM,uBAAwB,0BAA0B,SAAU,OAAO,uBAAuB;AAChG,YAAM,sBAAuB,yBAAyB,SAAU,OAAO,sBAAsB;AAE7F,WAAK,mBAAoB,sBAAsB,SAAU,OAAO,mBAAmB;AAEnF,aAAO,OAAO;AACd,aAAO,OAAO;AACd,aAAO,OAAO;AACd,iBAAW,UAAU,KAAK,MAAM,MAAM;AACtC,WAAK,uBAAuB;AAC5B,WAAK,sBAAsB;AAAA,IAC/B;AAAA;AAAA,IAEA,gBAAgB,OAAO;AAAA,IAAE;AAAA;AAAA,IAEzB,oBAAoB;AAAA,IAAE;AAAA,IACtB,+BAA+B,SAAS,MAAM,MAAM;AAEhD,WAAK,GAAG,IAAI;AAAA,IAChB;AAAA;AAAA,IAEA,YAAY,OAAO;AAAA,IAAE;AAAA;AAAA,IAErB,YAAY,OAAO;AAAA,IAAE;AAAA,IACrB,MAAM,cAAc;AAChB,YAAM,IAAI,MAAM,wBAAwB;AAAA,IAC5C;AAAA;AAAA,IAEA,gBAAgB;AACZ,YAAM,IAAI,MAAM,wBAAwB;AAAA,IAC5C;AAAA,IACA,SAAS;AACL,YAAM,IAAI,MAAM,wBAAwB;AAAA,IAC5C;AAAA,EACJ;AACA,SAAOA;AACX,CAAC,EAAE;AACH;;;AChEO,IAAMC,oBAAN,cAA+B,MAAM,CAAC,GAAG,iBAAS,EAAE;AAC3D;AAKO,IAAM,4BAAN,cAAwC,MAAM;AAAA,EACjD;AAAA,EACA;AAAA,EACAA;AAAA,EACA;AACJ,GAAG,CAAC,SAAS;AACT,QAAM,aAAa,KAAK;AACxB,QAAMC,mCAAkC,KAAK;AAAA,IACzC,WAAW,eAAe;AACtB,aAAO;AAAA,QACH,KAAK,CAAC;AAAA,QACN,YAAY,CAAC;AAAA,QACb,iBAAiB,CAAC;AAAA,QAClB,eAAe,CAAC;AAAA,QAChB,iBAAiB,CAAC;AAAA,QAClB,sBAAsB,CAAC;AAAA,QACvB,iBAAiB;AAAA,QACjB,sBAAsB;AAAA,QACtB,oBAAoB;AAAA,QACpB,sBAAsB;AAAA,QACtB,oBAAoB;AAAA,QACpB,iBAAiB;AAAA,QACjB,sBAAsB;AAAA,QACtB,oBAAoB;AAAA,QACpB,sBAAsB;AAAA,QACtB,2BAA2B;AAAA,QAC3B,iBAAiB;AAAA,QACjB,eAAe;AAAA,QACf,kBAAkB;AAAA,QAClB,YAAY;AAAA,QACZ,eAAe;AAAA,MACnB;AAAA,IACJ;AAAA;AAAA;AAAA,IAGA,UAAU,SAAS,CAAC,GAAG;AA5D/B;AA6DY,YAAM,KAAK;AAEX,SAAG,eAAe,oBAAI,IAAI;AAU1B,SAAG,qBAAqB;AACxB,SAAG,uBAAuB;AAC1B,SAAG,UAAU,QAAQ,QAAQ;AAC7B,UAAI,OAAO,cAAc,CAAC,OAAO,iBAAiB;AAC9C,cAAM,aAAa,OAAO,WAAW,eAAe,OAAO;AAI3D,cAAM,kBAAkB,WAAW,qBAAmB,gBAAW,gBAAX,mBAAwB;AAE9E,YAAI,mDAAiB,mBAAmB;AACpC,iBAAO,kBAAkB;AACzB,aAAG,2BAA2B;AAAA,QAClC;AAAA,MACJ;AACA,iBAAW,UAAU,KAAK,IAAI,MAAM;AAEpC,SAAG,kBAAkB,IAAI,GAAG,qBAAqB,WAAW;AAAA,QACxD,0BAA0B,GAAG;AAAA,MACjC,CAAC;AACD,SAAG,gBAAgB,UAAU;AAC7B,YAAM,EAAE,eAAe,YAAY,kBAAkB,eAAe,gBAAgB,IAAI;AACxF,YAAM,gBAAgB,QAAQ,iBAAiB,cAAc,oBAAoB,iBAAiB,eAAe;AACjH,UAAI,eAAe;AACf,WAAG,eAAe;AAAA,UACd;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,QACJ,CAAC;AACD,eAAO,GAAG;AACV,eAAO,GAAG;AACV,eAAO,GAAG;AACV,eAAO,GAAG;AACV,eAAO,GAAG;AAAA,MACd,OACK;AAED,WAAG,oBAAoB;AAAA,MAC3B;AAAA,IACJ;AAAA,IACA,YAAY;AAnHpB;AAoHY,YAAM,KAAK;AACX,eAAG,eAAH,mBAAe;AACf,eAAG,oBAAH,mBAAoB;AACpB,eAAG,oBAAH,mBAAoB;AACpB,eAAG,kBAAH,mBAAkB;AAClB,eAAG,yBAAH,mBAAyB;AACzB,SAAG,gBAAgB,QAAQ;AAC3B,eAAG,QAAH,mBAAQ;AACR,iBAAW,UAAU,KAAK,IAAI;AAAA,IAClC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAOA,MAAM,eAAe,MAAM;AACvB,YAAM,KAAK;AACX,SAAG,sBAAsB;AACzB,UAAI,KAAK,eAAe;AACpB,WAAG,qBAAqB,OAAO,KAAK;AAAA,MACxC;AACA,UAAI,KAAK,eAAe;AACpB,WAAG,cAAc,OAAO,KAAK;AAAA,MACjC;AACA,UAAI,KAAK,iBAAiB;AACtB,WAAG,gBAAgB,OAAO,KAAK;AAAA,MACnC;AACA,UAAI,KAAK,YAAY;AACjB,WAAG,WAAW,OAAO,KAAK;AAAA,MAC9B;AACA,UAAI,KAAK,WAAW;AAChB,WAAG,WAAW,OAAO,KAAK;AAAA,MAC9B;AACA,UAAI,KAAK,kBAAkB;AACvB,WAAG,gBAAgB,OAAO,KAAK;AAAA,MACnC;AACA,YAAM,GAAG,WAAW;AACpB,SAAG,sBAAsB;AACzB;AAAA,IACJ;AAAA;AAAA;AAAA,IAGA,MAAM,aAAa;AACf,YAAM,KAAK,YAAY;AAEvB,UAAI,CAAC,KAAK;AACN,aAAK,QAAQ,MAAM;AAAA,IAC3B;AAAA,IACA,iBAAiB,OAAO;AACpB,YAAMC,MAAK,CAAC,WAAW;AACnB,eAAO,WAAW,IAAI;AACtB,eAAO,YAAY;AAAA,MACvB;AACA,UAAI,MAAM,UAAU;AAChB,cAAM,SAAS,SAASA,GAAE;AAAA,MAC9B,OACK;AACD,cAAM,QAAQA,GAAE;AAAA,MACpB;AAAA,IACJ;AAAA,IACA,mBAAmB,OAAO;AACtB,YAAMA,MAAK,CAAC,WAAW;AACnB,eAAO,aAAa;AACpB,eAAO,WAAW,IAAI;AAAA,MAC1B;AACA,UAAI,MAAM,UAAU;AAChB,cAAM,SAAS,SAAS,UAAQ;AAE5B,cAAI,SAAS,MAAM;AACf,YAAAA,IAAG,IAAI;AAAA,QACf,CAAC;AAAA,MACL,OACK;AACD,cAAM,QAAQA,GAAE;AAAA,MACpB;AAAA,IACJ;AAAA;AAAA;AAAA,IAGA,0BAA0B,MAAM,QAAQ;AAEpC,YAAM,cAAa,iCAAQ,eAAc,KAAK,GAAG,gBAAgB;AAEjE,UAAI,aAAa,iCAAQ;AACzB,UAAI,CAAC,YAAY;AAGb,YAAI,KAAK,wBAAwB,EAAE,GAAG,gBAAgB,MAAM,WAAW,wBAAwB,EAAE,YAAY;AACzG,uBAAa,WAAW,wBAAwB,EAAE;AAAA,QACtD,OAEK;AACD,uBAAa,KAAK,GAAG,gBAAgB;AAAA,QACzC;AAAA,MACJ;AACA,aAAO,EAAE,YAAY,WAAW;AAAA,IACpC;AAAA,IACA,cAAc,YAAY;AACtB,WAAK,aAAa;AAAA,IACtB;AAAA,IACA,iBAAiB,YAAY,UAAU;AACnC,YAAM,KAAK,MAAM,EAAE,IAAI,IAAI;AAC3B,SAAG,YAAY,QAAQ;AACvB,UAAI,EAAE,sBAAsB,QAAQ;AAChC,cAAM,EAAE,YAAY,WAAW,IAAI,GAAG,0BAA0B,SAAS,UAAU;AACnF,qBAAa,IAAI,WAAW,aAAa,OAAO;AAAA,UAC5C;AAAA,UACA,SAAS;AAAA,UACT;AAAA,QACJ,GAAG,UAAU,CAAC;AAAA,MAClB,OACK;AACD,mBAAW,UAAU;AACrB,YAAI,SAAS,UAAU;AACvB,WAAG,iBAAiB,UAAU;AAAA,MAClC;AACA,UAAI,YAAY,IAAI,SAAS,QAAQ,GAAG;AACpC,YAAI,YAAY,QAAQ;AACxB,WAAG,mBAAmB,QAAQ;AAC9B,cAAM,EAAE,sBAAsB,IAAI;AAElC,8BAAsB,QAAQ,gBAAc;AACxC,gBAAM,WAAW,WAAW;AAC5B,cAAI,UAAU;AACV,kBAAM,WAAW,WAAW,QAAQ,SAAS,EAAE;AAC/C,gBAAI,UAAU;AACV,yBAAW,QAAQ;AAEnB,oCAAsB,OAAO,UAAU;AAAA,YAC3C;AAAA,UACJ;AAAA,QACJ,CAAC;AACD,iBAAS,kBAAkB;AAAA,MAC/B;AACA,iBAAW,WAAW,EAAE;AACxB,aAAO;AAAA,IACX;AAAA,IACA,iBAAiB,YAAY,UAAU;AACnC,WAAK,YAAY,UAAU;AAC3B,WAAK,QAAQ,oBAAoB,EAAE,OAAO,WAAW,CAAC;AAAA,IAC1D;AAAA;AAAA;AAAA,IAGA,mBAAmB,iBAAiB;AAChC,WAAK,kBAAkB;AAAA,IAC3B;AAAA,IACA,sBAAsB,iBAAiB,UAAU;AAC7C,YAAM,KAAK,MAAM,EAAE,IAAI,IAAI;AAC3B,SAAG,YAAY,QAAQ;AACvB,UAAI,YAAY,IAAI,SAAS,QAAQ,GAAG;AACpC,YAAI,YAAY,QAAQ;AACxB,WAAG,mBAAmB,QAAQ;AAAA,MAClC;AACA,UAAI,EAAE,2BAA2B,QAAQ;AACrC,cAAM,EAAE,YAAY,WAAW,IAAI,GAAG,0BAA0B,cAAc,eAAe;AAC7F,0BAAkB,IAAI,WAAW,aAAa,OAAO;AAAA,UACjD;AAAA,UACA,SAAS;AAAA,UACT;AAAA,QACJ,GAAG,eAAe,CAAC;AAAA,MACvB,OACK;AACD,wBAAgB,UAAU;AAC1B,YAAI,SAAS,eAAe;AAC5B,WAAG,iBAAiB,eAAe;AAAA,MACvC;AACA,sBAAgB,WAAW,EAAE;AAC7B,aAAO;AAAA,IACX;AAAA,IACA,sBAAsB,iBAAiB,UAAU;AAC7C,WAAK,YAAY,eAAe;AAChC,WAAK,QAAQ,yBAAyB,EAAE,OAAO,gBAAgB,CAAC;AAAA,IACpE;AAAA;AAAA;AAAA,IAGA,iBAAiB,eAAe;AAC5B,WAAK,gBAAgB;AAAA,IACzB;AAAA,IACA,oBAAoB,eAAe,UAAU;AACzC,YAAM,KAAK,MAAM,EAAE,IAAI,IAAI;AAC3B,SAAG,YAAY,QAAQ;AACvB,UAAI,EAAE,yBAAyB,QAAQ;AACnC,cAAM,EAAE,YAAY,WAAW,IAAI,GAAG,0BAA0B,YAAY,aAAa;AACzF,wBAAgB,IAAI,WAAW,aAAa,OAAO;AAAA,UAC/C;AAAA,UACA,SAAS;AAAA,UACT;AAAA,QACJ,GAAG,aAAa,CAAC;AAAA,MACrB,OACK;AACD,sBAAc,UAAU;AACxB,YAAI,SAAS,aAAa;AAC1B,WAAG,iBAAiB,aAAa;AAAA,MACrC;AACA,UAAI,YAAY,IAAI,SAAS,QAAQ,GAAG;AACpC,YAAI,YAAY,QAAQ;AACxB,WAAG,mBAAmB,QAAQ;AAC9B,cAAM,EAAE,sBAAsB,IAAI;AAElC,8BAAsB,QAAQ,gBAAc;AACxC,gBAAM,cAAc,WAAW;AAC/B,cAAI,aAAa;AACb,kBAAM,cAAc,cAAc,QAAQ,YAAY,EAAE;AACxD,gBAAI,aAAa;AACb,yBAAW,WAAW;AAEtB,oCAAsB,OAAO,UAAU;AAAA,YAC3C;AAAA,UACJ;AAAA,QACJ,CAAC;AACD,iBAAS,qBAAqB;AAAA,MAClC;AACA,oBAAc,WAAW,EAAE;AAC3B,aAAO;AAAA,IACX;AAAA,IACA,oBAAoB,eAAe,UAAU;AACzC,WAAK,YAAY,aAAa;AAC9B,WAAK,QAAQ,uBAAuB,EAAE,OAAO,cAAc,CAAC;AAAA,IAChE;AAAA;AAAA;AAAA,IAGA,mBAAmB,iBAAiB;AAChC,WAAK,kBAAkB;AAAA,IAC3B;AAAA,IACA,sBAAsB,iBAAiB,UAAU;AAC7C,YAAM,KAAK;AACX,SAAG,YAAY,QAAQ;AACvB,UAAI,EAAE,2BAA2B,QAAQ;AACrC,cAAM,EAAE,YAAY,WAAW,IAAI,GAAG,0BAA0B,cAAc,eAAe;AAC7F,0BAAkB,IAAI,WAAW,aAAa,OAAO;AAAA,UACjD;AAAA,UACA,SAAS;AAAA,UACT,KAAK,GAAG;AAAA,QACZ,GAAG,eAAe,CAAC;AAAA,MACvB,OACK;AACD,wBAAgB,UAAU;AAC1B,WAAG,IAAI,SAAS,eAAe;AAC/B,WAAG,iBAAiB,eAAe;AAAA,MACvC;AACA,aAAO;AAAA,IACX;AAAA,IACA,sBAAsB,iBAAiB,UAAU;AAC7C,WAAK,YAAY,eAAe;AAChC,WAAK,QAAQ,yBAAyB,EAAE,OAAO,gBAAgB,CAAC;AAAA,IACpE;AAAA;AAAA;AAAA,IAGA,wBAAwB,sBAAsB;AAC1C,WAAK,uBAAuB;AAAA,IAChC;AAAA,IACA,2BAA2B,sBAAsB,UAAU;AACvD,YAAM,KAAK;AACX,SAAG,YAAY,QAAQ;AACvB,UAAI,EAAE,gCAAgC,QAAQ;AAE1C,cAAM,cAAa,6DAAsB,eAAc,GAAG;AAE1D,cAAM,cAAa,6DAAsB,eAAc,WAAW,wBAAwB,EAAE,cAAc,GAAG;AAC7G,+BAAuB,IAAI,WAAW,aAAa,OAAO;AAAA,UACtD;AAAA,UACA,SAAS;AAAA,UACT,KAAK,GAAG;AAAA,QACZ,GAAG,oBAAoB,CAAC;AAAA,MAC5B,OACK;AACD,WAAG,IAAI,SAAS,oBAAoB;AAAA,MACxC;AACA,2BAAqB,WAAW,EAAE;AAClC,aAAO;AAAA,IACX;AAAA,IACA,2BAA2B,sBAAsB,UAAU;AACvD,WAAK,YAAY,oBAAoB;AACrC,WAAK,QAAQ,8BAA8B,EAAE,OAAO,qBAAqB,CAAC;AAAA,IAC9E;AAAA;AAAA;AAAA,IAGA,IAAI,WAAW;AACX,aAAO,KAAK,aAAa,KAAK;AAAA,IAClC;AAAA,IACA,IAAI,SAAS,UAAU;AACnB,WAAK,YAAY;AAAA,IACrB;AAAA,IACA,IAAI,oBAAoB;AACpB,aAAO,KAAK;AAAA,IAChB;AAAA;AAAA;AAAA,IAGA,MAAM,SAAS,OAAO;AAClB,WAAK,WAAW,IAAI,KAAK;AACzB,aAAO,KAAK,YAAY;AAAA,IAC5B;AAAA,IACA,MAAM,cAAc,YAAY;AAC5B,WAAK,gBAAgB,IAAI,UAAU;AACnC,aAAO,KAAK,YAAY;AAAA,IAC5B;AAAA,IACA,MAAM,YAAY,UAAU;AACxB,WAAK,cAAc,IAAI,QAAQ;AAC/B,aAAO,KAAK,YAAY;AAAA,IAC5B;AAAA,IACA,MAAM,cAAc,YAAY;AAC5B,WAAK,gBAAgB,IAAI,UAAU;AACnC,aAAO,KAAK,YAAY;AAAA,IAC5B;AAAA;AAAA;AAAA;AAAA;AAAA,IAKA,sBAAsB;AAClB,UAAI,CAAC,KAAK,sBAAsB;AAC5B,aAAK,WAAW;AAAA,UACZ,IAAI;AAAA,UACJ,OAAO;AAAA,QACX,CAAC;AAAA,MACL;AAAA,IACJ;AAAA,IACA,IAAI,uBAAuB;AACvB,aAAO,KAAK,WAAW,aAAa;AAAA,IACxC;AAAA,IACA,uBAAuB;AACnB,WAAK,aAAa,aAAa;AAAA,IACnC;AAAA;AAAA;AAAA,IAGA,MAAM,cAAc;AAChB,UAAI,KAAK;AACL,eAAO,KAAK;AAChB,aAAO,KAAK,UAAU,KAAK,cAAc;AAAA,IAC7C;AAAA,IACA,MAAM,gBAAgB;AAClB,YAAM,KAAK;AACX,SAAG,qBAAqB;AAExB,SAAG,qBAAqB;AACxB,YAAM,MAAM,CAAC;AACb,UAAI,CAAC,GAAG,aAAa;AAEjB,mBAAW,UAAU,GAAG,cAAc;AAClC,iBAAO,qBAAqB;AAAA,QAChC;AACA,cAAM,EAAE,iBAAiB,qBAAqB,IAAI;AAElD,cAAM,gBAAgB,mBAAmB;AAEzC,WAAG,gBAAgB,cAAc;AACjC,WAAG,gBAAgB,cAAc;AACjC,WAAG,2BAA2B;AAC9B,WAAG,wBAAwB;AAC3B,WAAG,qBAAqB;AACxB,cAAM,SAAS,CAAC,GAAG,iBAAiB,GAAG,iBAAiB,GAAG,YAAY,GAAG,eAAe,GAAG,oBAAoB;AAChH,eAAO,QAAQ,WAAM;AAldrC;AAkdwC,6BAAM,sBAAN;AAAA,SAA2B;AACnD,WAAG,gBAAgB;AAEnB,WAAG,QAAQ,WAAW,EAAE,iBAAiB,cAAc,KAAK,CAAC;AAE7D,YAAI,eAAe;AACf,qBAAW,UAAU,GAAG,cAAc;AAClC,mBAAO,oBAAoB,IAAI;AAAA,UACnC;AAAA,QACJ,OACK;AAID,qBAAW,UAAU,GAAG,cAAc;AAClC,mBAAO,WAAW,IAAI;AACtB,mBAAO,oBAAoB;AAAA,UAC/B;AAEA,qBAAW,UAAU,GAAG,cAAc;AAClC,mBAAO,SAAS,OAAO,IAAI;AAAA,UAC/B;AAAA,QACJ;AACA,WAAG,gBAAgB;AACnB,WAAG,aAAa,MAAM;AAEtB,WAAG,QAAQ,WAAW;AACtB,eAAO,QAAQ,WAAM;AA7erC;AA6ewC,6BAAM,qBAAN;AAAA,SAA0B;AAIlD,WAAG,QAAQ,iBAAiB;AAC5B,eAAO;AAAA,MACX;AAAA,IACJ;AAAA,IACA,MAAM,iBAAiB;AACnB,aAAO,KAAK,YAAY;AAAA,IAC5B;AAAA;AAAA,IAEA,WAAW,QAAQ;AACf,WAAK,aAAa,IAAI,MAAM;AAC5B,WAAK,oBAAoB;AAAA,IAC7B;AAAA;AAAA,IAEA,MAAM,oBAAoB;AACtB,aAAO;AAAA,IACX;AAAA;AAAA;AAAA,IAGA,SAAS;AACL,aAAO,KAAK;AAAA,IAChB;AAAA;AAAA;AAAA;AAAA,IAIA,IAAI,IAAI,KAAK;AACT,YAAM,KAAK,OAAO,IAAI,qBAAqB,aAAa,OAAO;AAAA,QAC3D,UAAU;AAAA,MACd,GAAG,GAAG,CAAC;AACP,UAAI,IAAI;AAAA;AAAA,QAEJ,eAAe,YAAY;AAEvB,cAAI,QAAQ;AACZ,gBAAM,KAAK,YAAY;AACvB,cAAI,CAAC,KAAK,aAAa;AACnB,gBAAI,OAAO;AACX,iBAAK,QAAQ,oBAAoB;AAAA,UACrC;AAAA,QACJ;AAAA,MACJ,CAAC;AAAA,IACL;AAAA,IACA,IAAI,MAAM;AACN,aAAO,KAAK;AAAA,IAChB;AAAA;AAAA,IAEA,gBAAgB;AACZ,aAAO,CAAC,KAAK,wBAAwB,CAAC,KAAK,sBAAsB,KAAK;AAAA,IAC1E;AAAA,EACJ;AAEA,EAAAD,2BAA0B,eAAe;AACzC,SAAOA;AACX,CAAC,EAAE;AACH;;;ACniBO,IAAM,UAAU,CAAC,KAAK,IAAI,GAAG,EAAE;AAC/B,IAAM,UAAU,KAAK,IAAI,GAAG,EAAE,IAAI;AAElC,IAAM,iBAAiB,CAAC,QAAQ,IAAI,MAAM,GAAG,CAAC,EAAE,YAAY,IAAI,IAAI,MAAM,CAAC;AAE3E,IAAM,gBAAgB,CAAC,UAAU,OAAO,KAAK,MAAM;AAInD,IAAME,kBAAiB,CAAC,QAAQ,UAAU,UAAU;AACvD,SAAO,eAAe,QAAQ,UAAU,EAAE,OAAO,YAAY,MAAM,cAAc,KAAK,CAAC;AACvF,SAAO;AACX;AAEO,IAAM,iBAAiB,CAAC,UAAU;AACrC,SAAO,SAAU,QAAQ,aAAa;AAClC,WAAO,WAAW,IAAI;AAAA,EAC1B;AACJ;AAQO,IAAM,cAAc,CAAC,WAAW,cAAc;AACjD,aAAW,SAAS;AAChB,cAAU,IAAI,KAAK;AACvB,SAAO;AACX;AAEO,IAAMC,SAAQ,CAAC,YAAY,IAAI,QAAQ,aAAW,WAAW,SAAS,OAAO,CAAC;AAE9E,IAAM,WAAW,WAAW,QAAQ,SAAS;AAChD,MAAI;AACJ,UAAQ,QAAQ,OAAO,KAAK,OAAO,OAAO,MAAM;AAC5C,UAAM;AAAA,EACV;AACJ;AAKA,IAAI,uBAAuB;AACpB,IAAM,sBAAsB,SAAU,MAAM;AAC/C,MAAI,yBAAyB;AACzB,2BAAuB,OAAO,uBAAuB;AACzD,MAAI,yBAAyB,MAAM;AAC/B,WAAO,mBAAmB,oBAAoB,IAAI;AAAA,EACtD,OACK;AACD,WAAO,KAAK,YAAY,SAAS;AAAA,EACrC;AACJ;AAEO,IAAM,YAAY,SAAU,KAAK;AACpC,SAAO,OAAO,OAAO,IAAI,SAAS;AACtC;;;ACzDO,IAAM,QAAQ;AACrB,IAAMC,WAAU,IAAI,SAAS;AACtB,IAAM,aAAa,CAAC,SAAS,QAAQ,OAAOA;AAC5C,IAAM,QAAQ,WAAW,CAAC,MAAM;AACnC;AACJ,CAAC;AAEM,IAAM,OAAO,WAAW,CAAC,MAAM;AAClC,MAAI,OAAO,YAAY;AACnB,YAAQ,KAAK,CAAC;AACtB,CAAC;AAEM,IAAM,aAAN,cAAyB,KAAK;AACrC;AAEO,IAAM,kBAAN,cAA8B,KAAK;AAAA,EACtC,cAAc;AACV,UAAM,GAAG,SAAS;AAClB,SAAK,eAAe,CAAC;AAAA,EACzB;AAAA,EACA,OAAO,UAAU,GAAG;AAChB,UAAM,MAAM,gBAAgB,IAAI;AAAA,MAC5B,WAAW;AAAA,MACX,cAAc,gBAAgB,EAAE,KAAK;AAAA,IACzC,CAAC;AACD,WAAO;AAAA,EACX;AAAA,EACA,OAAO,eAAe;AAClB,UAAM,kBAAkB,KAAK,UAAU,IAAI,MAAM,CAAC;AAClD,oBAAgB,aAAa,OAAO,GAAG,CAAC;AACxC,WAAO;AAAA,EACX;AACJ;AAcA,IAAM,kBAAkB,CAAC,UAAU;AAC/B,SAAO,GAAG,SAAS,sDAAsD,KAAK,CAAC,EAC1E,IAAI,WAAS,WAAW,IAAI;AAAA,IAC7B,WAAW,MAAM,CAAC;AAAA,IAClB,YAAY,MAAM,CAAC;AAAA,IACnB,YAAY,OAAO,MAAM,CAAC,CAAC;AAAA,IAC3B,eAAe,OAAO,MAAM,CAAC,CAAC;AAAA,EAClC,CAAC,CAAC,EACG,QAAQ;AACjB;;;AC1DA,IAAM,qBAAqB,OAAO,oBAAoB;AAE/C,IAAM,WAAW,WAAW,CAACC,QAAO,gBAAgB;AACvD,MAAIC,YAAWD,OAAM,kBAAkB;AACvC,MAAI,CAACC;AACD,IAAAA,YAAWD,OAAM,kBAAkB,IAAI,CAAC;AAC5C,EAAAC,UAAS,KAAK,WAAW;AAC7B,CAAC;AACM,IAAM,6BAA6B,WAAW,CAAC,YAAY;AAC9D,QAAMA,YAAW,QAAQ,kBAAkB;AAC3C,MAAIA,WAAU;AACV,aAAS,IAAI,GAAG,IAAIA,UAAS,QAAQ;AACjC,UAAI,QAAQA,UAAS,CAAC,CAAC,MAAM;AACzB,cAAM,IAAI,MAAM,uBAAuB,OAAOA,UAAS,CAAC,CAAC,oBAAoB;AAAA,EACzF;AACJ,CAAC;;;ACfM,IAAI;AAAA,CACV,SAAUC,gBAAe;AACtB,EAAAA,eAAc,QAAQ,IAAI;AAC1B,EAAAA,eAAc,QAAQ,IAAI;AAC9B,GAAG,kBAAkB,gBAAgB,CAAC,EAAE;AAEjC,IAAM,aAAa,OAAO,YAAY;AACtC,IAAM,cAAc;AACpB,IAAM,wBAAwB;AAE9B,IAAM,cAAN,cAA0B,KAAK;AAAA,EAClC,cAAc;AACV,UAAM,GAAG,SAAS;AAClB,SAAK,UAAU,oBAAI,IAAI;AACvB,SAAK,UAAU,CAAC;AAChB,SAAK,eAAe;AAAA,EACxB;AAAA,EACA,UAAU,aAAa;AACnB,SAAK,aAAa,WAAW;AAAA,EACjC;AAAA,EACA,aAAa,aAAa;AACtB,SAAK,QAAQ,KAAK,MAAM,KAAK,SAAS,YAAY,IAAI,UAAQ;AAAE,aAAO,EAAE,MAAY,MAAM,YAAY,OAAO,OAAU;AAAA,IAAG,CAAC,CAAC;AAC7H,SAAK,UAAU;AAAA,EACnB;AAAA,EACA,OAAO,MAAM,UAAU;AAAA,EACvB;AAAA,EACA,kBAAkB,MAAM;AAAA,EACxB;AAAA,EACA,QAAQ,MAAM,OAAO;AACjB,WAAO,cAAc;AAAA,EACzB;AAAA,EACA,YAAY,MAAM,MAAM;AACpB,UAAM,IAAI,MAAM,wBAAwB;AAAA,EAC5C;AAAA,EACA,YAAY,MAAM,SAAS,WAAW;AAClC,UAAM,IAAI,MAAM,wBAAwB;AAAA,EAC5C;AAAA,EACA,eAAe,MAAM;AACjB,WAAO,KAAK,QAAQ,IAAI,IAAI;AAAA,EAChC;AAAA,EACA,eAAe,MAAM,WAAW,MAAM;AAClC,QAAI,CAAC,MAAM;AACP,aAAO,EAAE,WAAW,YAAY,KAAK,aAAa;AAClD,WAAK,QAAQ,IAAI,MAAM,IAAI;AAAA,IAC/B,OACK;AACD,WAAK,YAAY;AACjB,WAAK,aAAa,KAAK;AAAA,IAC3B;AACA,WAAO;AAAA,EACX;AAAA,EACA,YAAY;AACR,UAAM,UAAU,KAAK;AACrB,UAAM,UAAU,KAAK;AACrB,QAAI;AACJ,WAAO,QAAQ,QAAQ,QAAQ;AAC3B,YAAM,OAAO,QAAQ,QAAQ,CAAC,EAAE;AAChC,YAAM,cAAc,KAAK,eAAe,IAAI;AAG5C,UAAI,eAAe,YAAY,cAAc,yBAAyB,YAAY,eAAe,KAAK,cAAc;AAChH,gBAAQ,IAAI;AACZ;AAAA,MACJ;AACA,UAAI,eAAe,YAAY,eAAe,KAAK,gBAAgB,YAAY,cAAc,aAAa;AAItG,YAAI,YAAY,YAAY,OAAO;AAE/B,cAAI,KAAK,QAAQ,MAAM,OAAO,MAAM,cAAc;AAC9C;AAAA,QACR,OACK;AACD,sBAAY,YAAY;AACxB,eAAK,kBAAkB,IAAI;AAAA,QAC/B;AACA,gBAAQ,IAAI;AAAA,MAChB,OACK;AAED,YAAI,KAAK,OAAO,MAAM,QAAQ,QAAQ,CAAC,CAAC,MAAM;AAC1C;AAEJ,cAAM,eAAe,KAAK,eAAe,MAAM,OAAO,WAAW;AACjE,cAAM,eAAe,QAAQ;AAC7B,aAAK,YAAY,MAAM,SAAS,YAAY;AAK5C,YAAI,QAAQ,WAAW,cAAc;AACjC,uBAAa,YAAY;AACzB,eAAK,kBAAkB,IAAI;AAC3B,kBAAQ,IAAI;AAAA,QAChB;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AACJ;AAEO,SAAS,UAAU,OAAO;AAC7B,QAAM,SAAS,MAAM;AACrB,MAAI,WAAW;AACX,WAAO,CAAC;AACZ,QAAM,cAAc,MAAM,SAAS,CAAC,EAAE;AACtC,QAAM,QAAQ,CAAC,WAAW;AAC1B,MAAI,UAAU,SAAS;AACvB,MAAI,SAAS;AACb,SAAO,WAAW,KAAK,MAAM,OAAO,EAAE,SAAS,aAAa;AAExD,WAAO,WAAW,KAAK,MAAM,OAAO,EAAE,SAAS,MAAM,MAAM,EAAE;AACzD;AACJ,QAAI,WAAW,GAAG;AAEd,YAAM,KAAK,MAAM,OAAO,EAAE,IAAI;AAC9B,eAAS;AAAA,IACb;AAAA,EACJ;AAEA,MAAI,UAAU;AACV,WAAO,CAAC;AACZ,QAAM,KAAK,WAAW;AACtB,SAAO,MAAM,QAAQ;AACzB;;;AC7HA,IAAI,aAA0C,SAAU,YAAY,QAAQ,KAAK,MAAM;AACnF,MAAI,IAAI,UAAU,QAAQ,IAAI,IAAI,IAAI,SAAS,SAAS,OAAO,OAAO,OAAO,yBAAyB,QAAQ,GAAG,IAAI,MAAM;AAC3H,MAAI,OAAO,YAAY,YAAY,OAAO,QAAQ,aAAa;AAAY,QAAI,QAAQ,SAAS,YAAY,QAAQ,KAAK,IAAI;AAAA;AACxH,aAAS,IAAI,WAAW,SAAS,GAAG,KAAK,GAAG;AAAK,UAAI,IAAI,WAAW,CAAC;AAAG,aAAK,IAAI,IAAI,EAAE,CAAC,IAAI,IAAI,IAAI,EAAE,QAAQ,KAAK,CAAC,IAAI,EAAE,QAAQ,GAAG,MAAM;AAChJ,SAAO,IAAI,KAAK,KAAK,OAAO,eAAe,QAAQ,KAAK,CAAC,GAAG;AAChE;AAOA,IAAI,aAAa;AAMV,IAAM,oBAAoB;AAU1B,IAAM,UAAN,cAAsB,KAAK;AAAA,EAC9B,cAAc;AACV,UAAM,GAAG,SAAS;AAIlB,SAAK,YAAY;AAIjB,SAAK,SAAS,oBAAI,IAAI;AAAA,EAC1B;AACJ;AAEO,IAAM,sBAAN,cAAkC,YAAY;AAAA,EACjD,YAAY,YAAY,SAAS;AAC7B,QAAI,sBAAsB,SAAS;AAC/B,cAAQ,KAAK,EAAE,MAAM,WAAW,QAAQ,MAAM,YAAY,OAAO,OAAU,CAAC;AAAA,IAChF,OACK;AACD,YAAM,WAAW,KAAK,MAAM,gBAAgB,IAAI,UAAU;AAC1D,kBAAY,SAAS,QAAQ,aAAW,QAAQ,KAAK,EAAE,MAAM,SAAS,MAAM,YAAY,OAAO,OAAU,CAAC,CAAC;AAAA,IAC/G;AAAA,EACJ;AACJ;AAEO,IAAM,gBAAN,cAA4B,MAAM,CAAC,IAAI,GAAG,CAAC,SAAS,MAAM,sBAAsB,KAAK;AAAA,EACxF,cAAc;AACV,UAAM,GAAG,SAAS;AAIlB,SAAK,YAAY,oBAAI,IAAI;AAIzB,SAAK,WAAW,oBAAI,IAAI;AACxB,SAAK,mBAAmB;AACxB,SAAK,oBAAoB;AAAA,EAC7B;AAAA,EACA,IAAI,kBAAkB;AAClB,QAAI,KAAK,qBAAqB;AAC1B,aAAO,KAAK;AAChB,SAAK,UAAU;AACf,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,IAAI,mBAAmB;AACnB,QAAI,KAAK,sBAAsB;AAC3B,aAAO,KAAK;AAChB,SAAK,UAAU;AACf,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,IAAI,SAAS;AACT,SAAK,mBAAmB;AACxB,SAAK,oBAAoB;AACzB,SAAK,SAAS,IAAI,OAAO;AAAA,EAC7B;AAAA,EACA,IAAI,SAAS;AACT,WAAO,KAAK,SAAS,IAAI,OAAO;AAAA,EACpC;AAAA,EACA,YAAY;AACR,SAAK,mBAAmB,oBAAI,IAAI;AAChC,SAAK,oBAAoB,oBAAI,IAAI;AACjC,SAAK,SAAS,QAAQ,aAAW;AAC7B,UAAI,mBAAmB,KAAK,kBAAkB,IAAI,QAAQ,MAAM;AAChE,UAAI,CAAC,kBAAkB;AACnB,2BAAmB,oBAAI,IAAI;AAC3B,aAAK,kBAAkB,IAAI,QAAQ,QAAQ,gBAAgB;AAAA,MAC/D;AACA,uBAAiB,IAAI,OAAO;AAC5B,cAAQ,OAAO,QAAQ,WAAS;AAC5B,YAAI,kBAAkB,KAAK,iBAAiB,IAAI,KAAK;AACrD,YAAI,CAAC,iBAAiB;AAClB,4BAAkB,oBAAI,IAAI;AAC1B,eAAK,iBAAiB,IAAI,OAAO,eAAe;AAAA,QACpD;AACA,wBAAgB,IAAI,OAAO;AAAA,MAC/B,CAAC;AAAA,IACL,CAAC;AAAA,EACL;AAAA,EACA,oBAAoB;AAChB,WAAO,WAAW,eAAe,IAAI,KAAK,UAAU,aAAW,QAAQ,OAAO,OAAO,CAAC,CAAC,CAAC;AAAA,EAC5F;AAAA,EACA,WAAW;AACP,QAAI,WAAW;AACf,UAAM,cAAc,oBAAoB,IAAI,EAAE,OAAO,MAAM,SAAS,MAAM;AAAE,iBAAW;AAAM,aAAO,cAAc;AAAA,IAAQ,EAAE,CAAC;AAC7H,gBAAY,UAAU,MAAM,KAAK,KAAK,kBAAkB,CAAC,CAAC;AAC1D,WAAO;AAAA,EACX;AACJ,CAAC,EAAE;AACH;AAKO,IAAM,mBAAN,cAA+B,cAAc;AACpD;AAUO,IAAM,kBAAN,cAA8B,KAAK;AAAA,EACtC,cAAc;AACV,UAAM,GAAG,SAAS;AAIlB,SAAK,cAAc;AAKnB,SAAK,4BAA4B,oBAAI,IAAI;AACzC,SAAK,yBAAyB,oBAAI,IAAI;AAAA,EAC1C;AAAA;AAAA,EAEA,QAAQ;AACJ,SAAK,uBAAuB,MAAM;AAAA,EACtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,QAAQ,OAAO;AACX,UAAM,SAAS,KAAK,uBAAuB,IAAI,MAAM,IAAI;AACzD,QAAI,WAAW;AACX,aAAO;AACX,UAAM,aAAa,KAAK,gBAAgB,KAAK;AAC7C,SAAK,uBAAuB,IAAI,MAAM,MAAM,UAAU;AACtD,WAAO;AAAA,EACX;AAAA,EACA,gBAAgB,OAAO;AACnB,UAAM,cAAc,UAAU,IAAI,EAAE,SAAS,MAAM,MAAM,CAAC;AAC1D,UAAM,iBAAiB,MAAM,KAAK,YAAY,KAAK,CAAC,EAAE,IAAI,WAAS;AAC/D,aAAO;AAAA,QACH,YAAY,MAAM,aAAa;AAAA,QAC/B,sBAAsB,MAAM,KAAK,MAAM,kBAAkB,QAAQ,EAAE,OAAO,CAAC,OAAO,YAAY,MAAM,iBAAiB,OAAO,IAAI,QAAQ,IAAI,OAAO,CAAC;AAAA,QACpJ,sBAAsB,MAAM,qBAAqB;AAAA,MACrD;AAAA,IACJ,CAAC;AACD,mBAAe,KAAK,CAAC,MAAM,SAAS;AAChC,UAAI,KAAK,uBAAuB,KAAK;AACjC,eAAO;AACX,UAAI,KAAK,uBAAuB,KAAK;AACjC,eAAO;AACX,aAAO,KAAK,uBAAuB,KAAK;AAAA,IAC5C,CAAC;AACD,QAAI,eAAe,SAAS;AACxB,aAAO,eAAe,CAAC,EAAE;AAAA;AAEzB;AAAA,EACR;AACJ;AAQO,IAAI;AAAA,CACV,SAAUC,qBAAoB;AAC3B,EAAAA,oBAAmBA,oBAAmB,SAAS,IAAI,CAAC,IAAI;AAIxD,EAAAA,oBAAmBA,oBAAmB,kBAAkB,IAAI,CAAC,IAAI;AAIjE,EAAAA,oBAAmBA,oBAAmB,kBAAkB,IAAI,CAAC,IAAI;AAIjE,EAAAA,oBAAmBA,oBAAmB,gBAAgB,IAAI,CAAC,IAAI;AACnE,GAAG,uBAAuB,qBAAqB,CAAC,EAAE;AAK3C,IAAM,uBAAN,cAAmC,KAAK;AAAA,EAC3C,cAAc;AACV,UAAM,GAAG,SAAS;AAIlB,SAAK,UAAU;AACf,SAAK,QAAQ;AACb,SAAK,QAAQ;AAAA,EACjB;AAAA,EACA,IAAI,OAAO;AACP,QAAI,KAAK,UAAU;AACf,aAAO,KAAK;AAChB,WAAO,KAAK,QAAQ,KAAK,UAAU;AAAA,EACvC;AAAA,EACA,IAAI,cAAc;AAAE,WAAO,KAAK,QAAQ;AAAA,EAAa;AAAA;AAAA;AAAA;AAAA,EAIrD,IAAI,aAAa;AACb,WAAO,KAAK,QAAQ,QAAQ,IAAI;AAAA,EACpC;AAAA,EACA,cAAc,MAAM;AAChB,UAAM,WAAW,GAAG,IAAI;AACxB,+BAA2B,IAAI;AAC/B,SAAK,QAAQ,IAAI,IAAI,GAAG,KAAK,YAAY,SAAS,EAAE,IAAI,cAAY,CAAC,UAAU,mBAAmB,OAAO,CAAC,CAAC;AAAA,EAC/G;AAAA,EACA,YAAY;AACR,WAAO,OAAO,aAAa,GAAG,GAAG,KAAK,YAAY,SAAS,EAAE,gBAAgB,CAAC,EAAE,IAAI,WAAS,KAAK,gBAAgB,KAAK,CAAC,CAAC;AAAA,EAC7H;AAAA,EACA,gBAAgB,OAAO;AACnB,WAAO,MAAM,YAAY,CAAC,UAAU,UAAU,UAAU,WAAY,KAAK,MAAM,IAAI,QAAQ,KAAK,QAAQ,GAAI,CAAC;AAAA,EACjH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,qBAAqB,UAAU;AAC3B,QAAI,OAAO;AACP,UAAI,CAAC,KAAK,YAAY,UAAU,IAAI,QAAQ;AACxC,cAAM,IAAI,MAAM,kBAAkB;AACtC,UAAI,KAAK,UAAU;AACf,cAAM,IAAI,MAAM,gBAAgB;AAAA,IACxC;AACA,UAAM,QAAQ,KAAK,MAAM,IAAI,QAAQ;AACrC,SAAK,MAAM,IAAI,UAAU,QAAQ,mBAAmB,gBAAgB;AAAA,EACxE;AAAA,EACA,iBAAiB,UAAU;AACvB,WAAO,QAAQ,KAAK,MAAM,IAAI,QAAQ,IAAI,mBAAmB,gBAAgB;AAAA,EACjF;AAAA,EACA,uBAAuB;AACnB,WAAO,GAAG,KAAK,YAAY,SAAS,EAAE,OAAO,cAAY,KAAK,iBAAiB,QAAQ,CAAC;AAAA,EAC5F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,qBAAqB,UAAU;AAC3B,QAAI,OAAO;AACP,UAAI,CAAC,KAAK,YAAY,UAAU,IAAI,QAAQ;AACxC,cAAM,IAAI,MAAM,kBAAkB;AACtC,UAAI,KAAK,UAAU;AACf,cAAM,IAAI,MAAM,gBAAgB;AAAA,IACxC;AACA,UAAM,QAAQ,KAAK,MAAM,IAAI,QAAQ;AACrC,SAAK,MAAM,IAAI,UAAU,QAAQ,mBAAmB,gBAAgB;AAAA,EACxE;AAAA,EACA,iBAAiB,UAAU;AACvB,WAAO,QAAQ,KAAK,MAAM,IAAI,QAAQ,IAAI,mBAAmB,gBAAgB;AAAA,EACjF;AAAA,EACA,uBAAuB;AACnB,WAAO,GAAG,KAAK,YAAY,SAAS,EAAE,OAAO,cAAY,KAAK,iBAAiB,QAAQ,CAAC;AAAA,EAC5F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,sBAAsB,UAAU;AAC5B,QAAI,OAAO;AACP,UAAI,CAAC,KAAK,YAAY,UAAU,IAAI,QAAQ;AACxC,cAAM,IAAI,MAAM,kBAAkB;AACtC,UAAI,KAAK,UAAU;AACf,cAAM,IAAI,MAAM,gBAAgB;AAAA,IACxC;AACA,UAAM,QAAQ,KAAK,MAAM,IAAI,QAAQ;AACrC,SAAK,MAAM,IAAI,UAAU,QAAQ,mBAAmB,cAAc;AAAA,EACtE;AAAA,EACA,eAAe,UAAU;AACrB,WAAO,QAAQ,KAAK,MAAM,IAAI,QAAQ,IAAI,mBAAmB,cAAc;AAAA,EAC/E;AAAA,EACA,qBAAqB;AACjB,WAAO,GAAG,KAAK,YAAY,SAAS,EAAE,OAAO,cAAY,KAAK,eAAe,QAAQ,CAAC;AAAA,EAC1F;AACJ;AACA,WAAW;AAAA,EACP;AACJ,GAAG,qBAAqB,WAAW,WAAW,MAAM;AAE7C,IAAM,YAAN,cAAwB,KAAK;AAAA,EAChC,cAAc;AACV,UAAM,GAAG,SAAS;AAClB,SAAK,UAAU;AACf,SAAK,QAAQ;AACb,SAAK,WAAW;AAChB,SAAK,mBAAmB;AACxB,SAAK,qBAAqB;AAAA,EAC9B;AAAA,EACA,IAAI,oBAAoB;AACpB,QAAI,KAAK,uBAAuB;AAC5B,aAAO,KAAK;AAChB,UAAM,QAAQ,cAAc,IAAI;AAAA,MAC5B,WAAW,KAAK,YAAY;AAAA,MAC5B,UAAU,GAAG,KAAK,sBAAsB,CAAC,EAAE,IAAI,WAAS,MAAM,gBAAgB,EAAE,MAAM;AAAA,IAC1F,CAAC;AACD,WAAO,KAAK,qBAAqB;AAAA,EACrC;AAAA,EACA,IAAI,cAAc;AAAE,WAAO,KAAK,QAAQ;AAAA,EAAa;AAAA,EACrD,CAAC,wBAAwB;AACrB,QAAI,UAAU;AACd,WAAO,WAAW,QAAQ,kBAAkB;AACxC,YAAM;AACN,gBAAU,QAAQ;AAAA,IACtB;AAAA,EACJ;AAAA,EACA,+BAA+B,SAAS;AACpC,WAAO,MAAM,KAAK,QAAQ,MAAM,EAAE,KAAK,cAAY,KAAK,MAAM,iBAAiB,QAAQ,CAAC;AAAA,EAC5F;AAAA;AAAA,EAEA,uBAAuB;AACnB,UAAM,eAAe,IAAI,KAAK,MAAM,qBAAqB,GAAG,cAAY;AAAE,aAAO,EAAE,UAAU,YAAY,KAAK;AAAA,IAAG,CAAC;AAClH,UAAM,qBAAqB,IAAI,KAAK,MAAM,mBAAmB,GAAG,cAAY;AAAE,aAAO,EAAE,UAAU,YAAY,MAAM;AAAA,IAAG,CAAC;AACvH,UAAM,eAAe,GAAG,CAAC,cAAc,kBAAkB,CAAC,EAAE,OAAO,EAAE,aAAa,QAAM,GAAG,QAAQ;AACnG,WAAO,aAAa,OAAO,CAAC,aAAa,EAAE,UAAU,WAAW,MAAM;AAClE,UAAI,SAAS;AAEb,YAAM,0BAA0B,KAAK,kBAAkB,iBAAiB,IAAI,QAAQ;AACpF,UAAI,yBAAyB;AACzB,cAAM,UAAU,wBAAwB,SAAS,IAAI,MAAM,KAAK,uBAAuB,EAAE,CAAC,IAAI;AAG9F,YAAI,WAAW,KAAK,iBAAiB,OAAO,KAAK,KAAK,+BAA+B,OAAO,GAAG;AAC3F,cAAI;AACA,sBAAU;AAAA;AAEV,sBAAU;AAAA,QAClB,OACK;AACD,cAAI;AACA,sBAAU;AAAA;AAEV,sBAAU;AAAA,QAClB;AAAA,MACJ;AAEA,YAAM,iBAAiB,KAAK,kBAAkB,gBAAgB,IAAI,QAAQ;AAC1E,UAAI,EAAE,kBAAkB,eAAe,OAAO,IAAI;AAC9C,YAAI;AACA,oBAAU;AAAA;AAEV,oBAAU;AAAA,MAClB;AACA,aAAO,cAAc;AAAA,IACzB,GAAG,CAAC;AAAA,EACR;AAAA,EACA,cAAc,UAAU,UAAU;AAC9B,UAAM,wBAAwB,KAAK,4BAA4B,QAAQ;AACvE,UAAM,wBAAwB,KAAK,4BAA4B,QAAQ;AACvE,QAAI,yBAAyB,CAAC;AAC1B,aAAO;AACX,QAAI,yBAAyB,CAAC;AAC1B,aAAO;AACX,UAAM,iCAAiC,KAAK,qCAAqC,QAAQ;AACzF,UAAM,iCAAiC,KAAK,qCAAqC,QAAQ;AACzF,QAAI,iCAAiC;AACjC,aAAO;AACX,QAAI,iCAAiC;AACjC,aAAO;AACX,QAAI,KAAK,iBAAiB,QAAQ,KAAK,CAAC,KAAK,iBAAiB,QAAQ;AAClE,aAAO;AACX,QAAI,KAAK,iBAAiB,QAAQ,KAAK,CAAC,KAAK,iBAAiB,QAAQ;AAClE,aAAO;AACX,WAAO;AAAA,EACX;AAAA,EACA,iBAAiB,SAAS;AACtB,WAAO,KAAK,QAAQ,0BAA0B,IAAI,OAAO;AAAA,EAC7D;AAAA,EACA,qCAAqC,SAAS;AAC1C,QAAI,QAAQ;AACZ,UAAM,KAAK,QAAQ,MAAM,EAAE,QAAQ,cAAY;AAC3C,UAAI,KAAK,MAAM,iBAAiB,QAAQ,KAAK,KAAK,MAAM,eAAe,QAAQ;AAC3E;AAAA,IACR,CAAC;AACD,WAAO;AAAA,EACX;AAAA,EACA,kCAAkC,SAAS;AACvC,WAAO,MAAM,KAAK,QAAQ,MAAM,EAAE,MAAM,cAAY,KAAK,MAAM,iBAAiB,QAAQ,KAAK,KAAK,MAAM,eAAe,QAAQ,CAAC;AAAA,EACpI;AAAA,EACA,4BAA4B,SAAS;AACjC,WAAO,MAAM,KAAK,QAAQ,MAAM,EAAE,MAAM,cAAY,KAAK,MAAM,iBAAiB,QAAQ,CAAC;AAAA,EAC7F;AAAA,EACA,oBAAoB,SAAS;AACzB,UAAM,4BAA4B,MAAM,KAAK,QAAQ,MAAM,EAAE,MAAM,cAAY,KAAK,MAAM,iBAAiB,QAAQ,KAC5G,KAAK,MAAM,iBAAiB,QAAQ,KACpC,KAAK,kBAAkB,iBAAiB,IAAI,QAAQ,CAAC;AAC5D,UAAM,QAAQ,cAAc,IAAI,EAAE,UAAU,IAAI,IAAI,KAAK,kBAAkB,QAAQ,EAAE,CAAC;AACtF,UAAM,IAAI,OAAO;AACjB,WAAO,6BAA6B,CAAC,MAAM,SAAS;AAAA,EACxD;AAAA;AAAA,EAEA,uBAAuB,SAAS;AAC5B,UAAM,kCAAkC,KAAK,kBAAkB,iBAAiB,IAAI,QAAQ,MAAM;AAClG,UAAM,iCAAiC,KAAK,MAAM,iBAAiB,QAAQ,MAAM;AACjF,WAAO,mCACA,kCAAkC,MAAM,KAAK,QAAQ,MAAM,EAAE,KAAK,cAAY;AAG7E,aAAO,CAAC,KAAK,MAAM,iBAAiB,QAAQ,KAAK,CAAC,KAAK,MAAM,iBAAiB,QAAQ,KAE/E,CAAC,KAAK,kBAAkB,iBAAiB,IAAI,QAAQ;AAAA,IAChE,CAAC;AAAA,EACT;AAAA,EACA,oBAAoB;AAChB,WAAO,MAAM,KAAK,KAAK,YAAY,QAAQ,EAAE,OAAO,aAAW,CAAC,KAAK,kBAAkB,IAAI,OAAO,CAAC;AAAA,EACvG;AAAA,EACA,CAAC,OAAO;AACJ,UAAM,oBAAoB,KAAK,kBAAkB;AACjD,sBAAkB,KAAK,KAAK,cAAc,KAAK,IAAI,CAAC;AACpD,QAAI,UAAU;AACd,eAAW,WAAW,mBAAmB;AACrC,UAAI,CAAC,KAAK,oBAAoB,OAAO,KAAK,KAAK,uBAAuB,OAAO;AACzE;AACJ,YAAM,YAAY,UAAU,IAAI;AAAA,QAC5B,UAAU;AAAA,QACV,SAAS,KAAK;AAAA,QACd,OAAO,KAAK;AAAA,QACZ,kBAAkB;AAAA,MACtB,CAAC;AACD,aAAO,UAAU,KAAK;AACtB,gBAAU;AAAA,IACd;AACA,QAAI;AACA,YAAM;AAAA,EACd;AAAA,EACA,eAAe;AACX,WAAO,IAAI,IAAI,GAAG,KAAK,YAAY,SAAS,EAAE,IAAI,cAAY;AAC1D,YAAM,WAAW,KAAK,kBAAkB,iBAAiB,IAAI,QAAQ;AACrE,UAAI,UAAU;AACV,mBAAW,gBAAgB,UAAU;AACjC,iBAAO,CAAC,UAAU,aAAa,SAAS;AAAA,QAC5C;AAAA,MACJ;AACA,aAAO,CAAC,UAAU,iBAAiB;AAAA,IACvC,CAAC,CAAC;AAAA,EACN;AACJ;;;AC3dA,IAAIC,cAA0C,SAAU,YAAY,QAAQ,KAAK,MAAM;AACnF,MAAI,IAAI,UAAU,QAAQ,IAAI,IAAI,IAAI,SAAS,SAAS,OAAO,OAAO,OAAO,yBAAyB,QAAQ,GAAG,IAAI,MAAM;AAC3H,MAAI,OAAO,YAAY,YAAY,OAAO,QAAQ,aAAa;AAAY,QAAI,QAAQ,SAAS,YAAY,QAAQ,KAAK,IAAI;AAAA;AACxH,aAAS,IAAI,WAAW,SAAS,GAAG,KAAK,GAAG;AAAK,UAAI,IAAI,WAAW,CAAC;AAAG,aAAK,IAAI,IAAI,EAAE,CAAC,IAAI,IAAI,IAAI,EAAE,QAAQ,KAAK,CAAC,IAAI,EAAE,QAAQ,GAAG,MAAM;AAChJ,SAAO,IAAI,KAAK,KAAK,OAAO,eAAe,QAAQ,KAAK,CAAC,GAAG;AAChE;AAIO,IAAM,6BAA6B,OAAO,4BAA4B;AAgBtE,IAAM,SAAN,cAAqB,KAAK;AACjC;AACAA,YAAW;AAAA,EACP,eAAe,IAAI;AACvB,GAAG,OAAO,WAAW,QAAQ,MAAM;AACnCA,YAAW;AAAA,EACP,eAAe,IAAI;AACvB,GAAG,OAAO,WAAW,QAAQ,MAAM;AAE5B,IAAM,2BAA2B,OAAO,0BAA0B;AAkClE,IAAM,qBAAqB,OAAO,IAAI,EAAE,SAAS,yBAAyB,CAAC;AAE3E,IAAM,eAAe,OAAO,cAAc;AAI1C,IAAM,eAAN,cAA2B,OAAO;AAAA,EACrC,cAAc;AACV,UAAM,GAAG,SAAS;AAClB,SAAK,UAAU;AAAA,EACnB;AACJ;AACAA,YAAW;AAAA,EACP,eAAe,KAAK;AACxB,GAAG,aAAa,WAAW,QAAQ,MAAM;AAQlC,IAAM,SAAS,CAAC,WAAW,aAAa,IAAI,EAAE,OAAO,CAAC;AAEtD,IAAM,oBAAoB,OAAO,mBAAmB;AACpD,IAAM,iBAAiB,OAAO,IAAI,EAAE,SAAS,kBAAkB,CAAC;AAEhE,IAAM,iBAAiB,OAAO,gBAAgB;AAC9C,IAAM,WAAW,OAAO,IAAI,EAAE,SAAS,eAAe,CAAC;AAEvD,IAAM,sBAAsB,OAAO,qBAAqB;AACxD,IAAM,gBAAgB,OAAO,IAAI,EAAE,SAAS,oBAAoB,CAAC;AAEjE,IAAM,cAAc,OAAO,aAAa;AACxC,IAAM,cAAN,cAA0B,OAAO;AAAA,EACpC,cAAc;AACV,UAAM,GAAG,SAAS;AAClB,SAAK,UAAU;AAAA,EACnB;AACJ;AACAA,YAAW;AAAA,EACP,eAAe,KAAK;AACxB,GAAG,YAAY,WAAW,QAAQ,MAAM;AACjC,IAAM,QAAQ,CAAC,YAAY,kBAAkB,iBAAiB,YAAY,IAAI,EAAE,YAAY,cAAc,CAAC,eAAe,GAAG,YAAY,EAAE,CAAC;AAC5I,IAAM,qBAAqB,OAAO,oBAAoB;AACtD,IAAM,qBAAN,cAAiC,OAAO;AAAA,EAC3C,cAAc;AACV,UAAM,GAAG,SAAS;AAClB,SAAK,UAAU;AAAA,EACnB;AACJ;AACAA,YAAW;AAAA,EACP,eAAe,KAAK;AACxB,GAAG,mBAAmB,WAAW,QAAQ,MAAM;AACxC,IAAM,eAAe,CAAC,WAAW,mBAAmB,IAAI,EAAE,OAAO,CAAC;AAElE,IAAM,wBAAwB,OAAO,uBAAuB;AAC5D,IAAM,wBAAN,cAAoC,OAAO;AAAA,EAC9C,cAAc;AACV,UAAM,GAAG,SAAS;AAClB,SAAK,UAAU;AAAA,EACnB;AACJ;AACO,IAAM,kBAAkB,CAAC,eAAe,sBAAsB,IAAI,EAAE,WAAW,CAAC;AAEhF,IAAM,wBAAwB,OAAO,uBAAuB;AAC5D,IAAM,wBAAN,cAAoC,OAAO;AAAA,EAC9C,cAAc;AACV,UAAM,GAAG,SAAS;AAClB,SAAK,UAAU;AAAA,EACnB;AACJ;AACO,IAAM,kBAAkB,CAAC,eAAe,sBAAsB,IAAI,EAAE,WAAW,CAAC;AAEhF,IAAM,yBAAyB,OAAO,wBAAwB;AAC9D,IAAM,yBAAN,cAAqC,OAAO;AAAA,EAC/C,cAAc;AACV,UAAM,GAAG,SAAS;AAClB,SAAK,UAAU;AAAA,EACnB;AACJ;AACO,IAAM,mBAAmB,CAAC,eAAe,uBAAuB,IAAI,EAAE,WAAW,CAAC;AAElF,IAAM,oCAAoC,OAAO,mCAAmC;AACpF,IAAM,oCAAN,cAAgD,OAAO;AAAA,EAC1D,cAAc;AACV,UAAM,GAAG,SAAS;AAClB,SAAK,UAAU;AAAA,EACnB;AACJ;AACO,IAAM,8BAA8B,CAAC,eAAe,kCAAkC,IAAI,EAAE,WAAW,CAAC;AAExG,IAAM,kCAAkC,OAAO,iCAAiC;AAChF,IAAM,kCAAN,cAA8C,OAAO;AAAA,EACxD,cAAc;AACV,UAAM,GAAG,SAAS;AAClB,SAAK,UAAU;AAAA,EACnB;AACJ;AACO,IAAM,4BAA4B,CAAC,eAAe,gCAAgC,IAAI,EAAE,WAAW,CAAC;AAEpG,IAAM,4BAA4B,OAAO,2BAA2B;AACpE,IAAM,4BAAN,cAAwC,OAAO;AAAA,EAClD,cAAc;AACV,UAAM,GAAG,SAAS;AAClB,SAAK,UAAU;AAAA,EACnB;AACJ;AACO,IAAM,sBAAsB,CAAC,eAAe,0BAA0B,IAAI,EAAE,WAAW,CAAC;AAExF,IAAM,wCAAwC,OAAO,uCAAuC;AAC5F,IAAM,wCAAN,cAAoD,OAAO;AAAA,EAC9D,cAAc;AACV,UAAM,GAAG,SAAS;AAClB,SAAK,UAAU;AAAA,EACnB;AACJ;AACO,IAAM,kCAAkC,CAAC,eAAe,sCAAsC,IAAI,EAAE,WAAW,CAAC;AAEhH,IAAM,8BAA8B,OAAO,6BAA6B;AACxE,IAAM,8BAAN,cAA0C,OAAO;AAAA,EACpD,cAAc;AACV,UAAM,GAAG,SAAS;AAClB,SAAK,UAAU;AAAA,EACnB;AACJ;AACO,IAAM,wBAAwB,CAAC,eAAe,4BAA4B,IAAI,EAAE,WAAW,CAAC;;;AC5L5F,IAAM,6BAAN,cAAyC,qBAAqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASjE,YAAY,GAAG,YAAY,QAAQ;AAC/B,QAAI,EAAE,gBAAgB,UAAU,CAAC,KAAK;AAClC,WAAK,qBAAqB,MAAM;AACpC,QAAI,EAAE,4BAA4B,UAAU,CAAC;AACzC,WAAK,qBAAqB,MAAM;AAAA,EACxC;AACJ;;;ACdO,IAAM,cAAc,OAAO,aAAa;AAIxC,IAAM,aAAa,OAAO,YAAY;AAEtC,IAAM,iBAAN,cAA6B,MAAM,CAAC,GAAG,CAAC,SAAS,MAAM,uBAAuB,KAAK;AAAA,EACtF,cAAc;AACV,UAAM,GAAG,SAAS;AAClB,SAAK,WAAW;AAChB,SAAK,kBAAkB;AAAA,EAC3B;AAAA,EACA,uBAAuB;AACnB,WAAO,QAAQ,KAAK,YAAY,KAAK,eAAe;AAAA,EACxD;AAAA,EACA,yBAAyB;AACrB,WAAO,QAAQ,KAAK,mBAAmB,KAAK,gBAAgB,IAAI;AAAA,EACpE;AAAA,EACA,IAAI,SAAS;AACT,WAAO,KAAK,mBAAmB,KAAK,gBAAgB,OAAO,KAAK,gBAAgB,QAAQ;AAAA,EAC5F;AAAA,EACA,iBAAiB,aAAa,MAAM;AAChC,UAAM,WAAW,KAAK,WAAW,KAAK,YAAY,KAAK,KAAK,WAAW,MAAM,UAAU,GAAG,IAAI;AAC9F,WAAO,KAAK,kBAAkB,SAAS,KAAK;AAAA,EAChD;AAAA,EACA,oBAAoB,OAAO;AACvB,WAAO,KAAK,kBAAkB,KAAK,SAAS,KAAK,KAAK;AAAA,EAC1D;AAAA,EACA,qBAAqB;AACjB,SAAK,kBAAkB;AACvB,SAAK,WAAW;AAAA,EACpB;AAAA,EACA,CAAC,YAAY,aAAa,MAAM;AAC5B,UAAM,IAAI,MAAM,sCAAsC;AAAA,EAC1D;AAAA,EACA,kBAAkB,aAAa,MAAM;AACjC,SAAK,iBAAiB,UAAU,GAAG,IAAI;AACvC,WAAO,CAAC,KAAK,uBAAuB,GAAG;AACnC,WAAK,oBAAoB,SAAS,KAAK,gBAAgB,KAAK,CAAC;AAAA,IACjE;AAEA,SAAK,WAAW;AAChB,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,MAAM,mBAAmB,aAAa,MAAM;AACxC,SAAK,iBAAiB,UAAU,GAAG,IAAI;AACvC,WAAO,CAAC,KAAK,uBAAuB,GAAG;AACnC,WAAK,oBAAoB,MAAM,SAAS,KAAK,gBAAgB,KAAK,CAAC;AAAA,IACvE;AAEA,SAAK,WAAW;AAChB,WAAO,KAAK;AAAA,EAChB;AACJ,CAAC,EAAE;AACH;AAEO,IAAM,gCAAgC,OAAO,+BAA+B;AACnF,IAAM,6BAA6B,EAAE,OAAO,8BAA8B;AACnE,IAAM,kBAAN,cAA8B,MAAM,CAAC,GAAG,CAAC,SAAS,MAAM,wBAAwB,KAAK;AAAA,EACxF,cAAc;AACV,UAAM,GAAG,SAAS;AAClB,SAAK,kBAAkB;AAAA,EAC3B;AAAA,EACA,uBAAuB;AACnB,WAAO,QAAQ,KAAK,eAAe;AAAA,EACvC;AAAA,EACA,yBAAyB;AACrB,WAAO,QAAQ,KAAK,mBAAmB,KAAK,gBAAgB,IAAI;AAAA,EACpE;AAAA,EACA,IAAI,SAAS;AACT,WAAO,KAAK,mBAAmB,KAAK,gBAAgB,OAAO,KAAK,gBAAgB,QAAQ;AAAA,EAC5F;AAAA,EACA,iBAAiB,aAAa,MAAM;AAEhC,SAAK,kBAAkB;AACvB,WAAO,KAAK,kBAAkB;AAAA,MAC1B,MAAM;AAAA,MACN,OAAO,KAAK,YAAY,KAAK,KAAK,WAAW,MAAM,UAAU,GAAG,IAAI;AAAA,IACxE;AAAA,EACJ;AAAA,EACA,oBAAoB,OAAO;AACvB,UAAM,IAAI,MAAM,0CAA0C;AAAA,EAC9D;AAAA,EACA,qBAAqB;AACjB,SAAK,kBAAkB;AAAA,EAC3B;AAAA,EACA,YAAY,aAAa,MAAM;AAC3B,UAAM,IAAI,MAAM,sCAAsC;AAAA,EAC1D;AAAA,EACA,kBAAkB,aAAa,MAAM;AACjC,SAAK,iBAAiB,UAAU,GAAG,IAAI;AACvC,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,MAAM,mBAAmB,aAAa,MAAM;AACxC,UAAM,IAAI,MAAM,oDAAoD;AAAA,EACxE;AACJ,CAAC,EAAE;AACH;AAEO,SAAS,2BAA2B,QAAQ,MAAM,MAAM,OAAO;AAClE,QAAM,MAAM,KAAK,MAAM,SAAS,MAAM,IAAI;AAC1C,MAAI,YAAY,IAAI,KAAK;AACzB,SAAO,CAAC,UAAU,MAAM;AACpB,gBAAY,IAAI,KAAK,OAAO,UAAU,KAAK,CAAC;AAAA,EAChD;AACA,SAAO,UAAU;AACrB;AAEA,eAAsB,4BAA4B,QAAQ,MAAM,MAAM,OAAO;AACzE,QAAM,MAAM,KAAK,MAAM,SAAS,MAAM,IAAI;AAC1C,MAAI,YAAY,IAAI,KAAK;AACzB,SAAO,CAAC,UAAU,MAAM;AACpB,QAAI;AACJ,QAAI,SAAS;AACb,OAAG;AACC,eAAS;AACT,UAAI;AACA,2BAAmB,OAAO,UAAU,KAAK;AAAA,MAC7C,SACO,GAAP;AAOI,YAAI,aAAa,QAAQ;AAErB,cAAI,aAAa,MAAM,OAAO,CAAC;AAC/B,cAAI,eAAe,UAAU;AAEzB,mBAAO,OAAO,CAAC,CAAC;AAChB;AAAA,UACJ,OACK;AACD,qBAAS;AAAA,UACb;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ,SAAS;AACT,QAAI,UAAU,gBAAgB;AAC1B,kBAAY,IAAI,KAAK,MAAM,gBAAgB;AAAA;AAE3C,kBAAY,IAAI,KAAK,gBAAgB;AAAA,EAC7C;AACA,SAAO,UAAU;AACrB;;;ACrJO,IAAI;AAAA,CACV,SAAUC,WAAU;AACjB,EAAAA,UAASA,UAAS,QAAQ,IAAI,CAAC,IAAI;AACnC,EAAAA,UAASA,UAAS,MAAM,IAAI,CAAC,IAAI;AACrC,GAAG,aAAa,WAAW,CAAC,EAAE;AAC9B,IAAI,YAAY;AAET,IAAM,QAAN,cAAoB,SAAS,CAAC,GAAG,GAAG,CAAC,SAAS,MAAM,cAAc,KAAK;AAAA,EAC1E,cAAc;AACV,UAAM,GAAG,SAAS;AAElB,SAAK,YAAY;AACjB,SAAK,aAAa;AAElB,SAAK,QAAQ;AACb,SAAK,gBAAgB;AACrB,SAAK,qBAAqB;AAC1B,SAAK,oBAAoB;AACzB,SAAK,yBAAyB;AAE9B,SAAK,WAAW;AAChB,SAAK,SAAS;AACd,SAAK,WAAW;AAChB,SAAK,2BAA2B;AAChC,SAAK,YAAY;AACjB,SAAK,YAAY;AACjB,SAAK,aAAa;AAClB,SAAK,UAAU;AACf,SAAK,gBAAgB;AAAA,EACzB;AAAA,EACA,OAAO,IAAI,OAAO;AACd,UAAM,WAAW,IAAI,KAAK;AAC1B,aAAS,OAAO,OAAO,UAAU,KAAK;AACtC,WAAO;AAAA,EACX;AAAA,EACA,IAAI,QAAQ;AACR,WAAO,KAAK,WAAW;AAAA,EAC3B;AAAA,EACA,IAAI,cAAc;AACd,WAAO,KAAK,WAAW;AAAA,EAC3B;AAAA,EACA,IAAI,UAAU;AACV,WAAO,KAAK,WAAW,WAAW,KAAK;AAAA,EAC3C;AAAA,EACA,mBAAmB;AACf,SAAK,YAAY;AAAA,EACrB;AAAA,EACA,UAAU;AACN,SAAK,mBAAmB;AAAA,EAC5B;AAAA,EACA,WAAW;AACP,WAAO,QAAQ,KAAK,UAAU,KAAK,WAAW,IAAI;AAAA,EACtD;AAAA,EACA,aAAa,OAAO;AAChB,SAAK,aAAa;AAClB,SAAK,YAAY;AAEjB,QAAI,KAAK,YAAY;AACjB,WAAK,YAAY;AACrB,SAAK,yBAAyB;AAC9B,SAAK,mBAAmB;AAUxB,SAAK,cAAc;AACnB,SAAK,UAAU;AACf,QAAI,KAAK,UAAU,KAAK,WAAW,MAAM;AACrC,WAAK,oBAAoB;AAGzB,UAAI,KAAK,UAAU,QAAW;AAC1B,aAAK,gBAAgB,KAAK;AAAA,MAC9B;AACA,WAAK,QAAQ;AAAA,IACjB,OACK;AACD,WAAK,SAAS;AACd,WAAK,QAAQ;AAAA,IACjB;AACA,QAAI,KAAK,WAAW,wBAAwB,KAAK,kBAAkB,WAAW;AAC1E,WAAK,2BAA2B;AAChC,WAAK,gBAAgB;AAAA,IACzB;AAAA,EACJ;AAAA,EACA,SAAS,QAAQ;AACb,SAAK,QAAQ,OAAO;AACpB,SAAK,gBAAgB,OAAO;AAC5B,SAAK,oBAAoB,OAAO;AAChC,SAAK,yBAAyB,OAAO;AAAA,EACzC;AAAA,EACA,kBAAkB;AACd,SAAK,QAAQ;AACb,SAAK,gBAAgB;AACrB,SAAK,oBAAoB;AAAA,EAC7B;AAAA,EACA,oBAAoB,aAAa;AAC7B,UAAM,SAAS,KAAK;AACpB,QAAI,WAAW,KAAK;AAChB,YAAM,IAAI,MAAM,eAAe;AACnC,SAAK,SAAS,MAAM;AACpB,UAAM,WAAW,KAAK,YAAY;AAClC,eAAW,CAAC,YAAY,KAAK,KAAK,OAAO,YAAY,GAAG;AACpD,YAAM,cAAc,SAAS,IAAI,UAAU;AAC3C,UAAI,CAAC,aAAa;AACd,cAAM,SAAS,YAAY,IAAI,UAAU;AACzC,YAAI,CAAC,UAAU,OAAO,aAAa,MAAM;AACrC,mBAAS,IAAI,YAAY,UAAU,KAAK;AAAA,MAChD;AAAA,IACJ;AACA,QAAI,OAAO,kBAAkB,QAAW;AACpC,YAAM,eAAe,KAAK,gBAAgB;AAC1C,iBAAW,CAAC,YAAY,KAAK,KAAK,OAAO,gBAAgB,GAAG;AACxD,cAAM,cAAc,aAAa,IAAI,UAAU;AAC/C,YAAI,CAAC,aAAa;AACd,gBAAM,SAAS,YAAY,IAAI,UAAU;AACzC,cAAI,CAAC,UAAU,OAAO,aAAa,MAAM;AACrC,yBAAa,IAAI,YAAY,UAAU,KAAK;AAAA,QACpD;AAAA,MACJ;AAAA,IACJ;AAEA,SAAK,SAAS;AAEd,WAAO,gBAAgB;AACvB,WAAO,MAAM;AAAA,EACjB;AAAA,EACA,UAAU,QAAQ;AACd,SAAK,SAAS;AACd,SAAK,WAAW,OAAO;AAAA,EAC3B;AAAA,EACA,YAAY;AACR,QAAI,KAAK;AACL,aAAO,KAAK;AAChB,WAAO,KAAK,YAAY;AAAA,EAC5B;AAAA,EACA,cAAc;AACV,SAAK,WAAW;AAChB,WAAO,KAAK,SAAS;AAAA,EACzB;AAAA,EACA,cAAc;AACV,WAAO;AAAA,EACX;AAAA,EACA,kBAAkB;AACd,QAAI,KAAK,kBAAkB;AACvB,aAAO,KAAK;AAChB,WAAO,KAAK,gBAAgB,oBAAI,IAAI;AAAA,EACxC;AAAA,EACA,cAAc,SAAS,MAAM;AACzB,UAAM,WAAW,SAAS,SAAS,SAAS,OAAO,KAAK,gBAAgB;AACxE,aAAS,IAAI,QAAQ,YAAY,OAAO;AAAA,EAC5C;AAAA,EACA,gBAAgB;AACZ,SAAK,MAAM;AACX,QAAI,KAAK,kBAAkB;AACvB,WAAK,cAAc,MAAM;AAAA,EACjC;AAAA,EACA,WAAW;AACP,UAAM,SAAS,KAAK;AACpB,WAAO,WAAW,OACZ,KAAK,QACL,SACI,OAAO,SAAS,IAChB;AAAA,EACd;AAAA,EACA,SAAS,OAAO;AACZ,QAAI,KAAK,UAAU,KAAK,WAAW;AAC/B,YAAM,IAAI,MAAM,uCAAuC;AAC3D,SAAK,UAAU,EAAE,QAAQ;AAAA,EAG7B;AAAA,EACA,WAAW;AACP,WAAO,KAAK,SAAS,MAAM;AAAA,EAC/B;AAAA,EACA,mBAAmB;AACf,QAAI,KAAK,SAAS;AACd,aAAO;AACX,WAAO,KAAK,sBAAsB;AAAA,EACtC;AAAA,EACA,wBAAwB;AACpB,WAAO,KAAK,kBAAkB;AAAA,EAClC;AAAA,EACA,iBAAiB,aAAa;AAC1B,QAAI,KAAK,0BAA0B;AAC/B,WAAK,gBAAgB,KAAK,WAAW,mBAAmB,KAAK,KAAK,WAAW,WAAW,KAAK,YAAY,KAAK,YAAY,MAAM,WAAW;AAI3I,WAAK,2BAA2B;AAAA,IACpC;AACA,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,sBAAsB,UAAU,SAAS;AACrC,QAAI,UAAU;AACd,WAAO,SAAS;AACZ,iBAAW,YAAY,QAAQ,YAAY,EAAE,OAAO,GAAG;AACnD,YAAI,SAAS,aAAa,SAAS,kBAAkB,SAAS,UAAU,EAAE;AACtE,kBAAQ,QAAQ;AAAA,MACxB;AACA,UAAI,QAAQ,SAAS;AACjB,kBAAU,QAAQ;AAAA;AAElB,kBAAU;AAAA,IAClB;AAAA,EACJ;AAAA,EACA,6BAA6B,UAAU,SAAS;AAC5C,QAAI,UAAU;AACd,WAAO,SAAS;AACZ,iBAAW,YAAY,QAAQ,YAAY,EAAE,OAAO,GAAG;AACnD,cAAM,cAAc,SAAS,kBAAkB,SAAS,UAAU;AAClE,YAAI,eAAe,SAAS,aAAa,YAAY;AACjD,kBAAQ,QAAQ;AAAA,MACxB;AACA,UAAI,QAAQ,kBAAkB,QAAW;AACrC,mBAAW,YAAY,QAAQ,cAAc,OAAO,GAAG;AACnD,gBAAM,cAAc,SAAS,kBAAkB,SAAS,UAAU;AAClE,cAAI,eAAe,SAAS,aAAa,YAAY;AACjD,oBAAQ,QAAQ;AAAA,QACxB;AAAA,MACJ;AACA,UAAI,QAAQ,SAAS;AACjB,kBAAU,QAAQ;AAAA;AAElB,kBAAU;AAAA,IAClB;AAAA,EACJ;AAAA,EACA,wCAAwC,aAAa,SAAS;AAC1D,QAAI,UAAU;AACd,WAAO,SAAS;AACZ,iBAAW,YAAY,QAAQ,YAAY,EAAE,OAAO,GAAG;AACnD,cAAM,cAAc,YAAY,wBAAwB,SAAS,UAAU;AAC3E,YAAI,eAAe,SAAS,aAAa,YAAY;AACjD,kBAAQ,QAAQ;AAAA,MACxB;AACA,UAAI,QAAQ,kBAAkB,QAAW;AACrC,mBAAW,YAAY,QAAQ,cAAc,OAAO,GAAG;AACnD,gBAAM,cAAc,YAAY,wBAAwB,SAAS,UAAU;AAC3E,cAAI,eAAe,SAAS,aAAa,YAAY;AACjD,oBAAQ,QAAQ;AAAA,QACxB;AAAA,MACJ;AACA,UAAI,QAAQ,SAAS;AACjB,kBAAU,QAAQ;AAAA;AAElB,kBAAU;AAAA,IAClB;AAAA,EACJ;AAAA;AAAA,EAEA,iCAAiC,aAAa,SAAS;AACnD,QAAI,UAAU;AACd,WAAO,SAAS;AACZ,iBAAW,YAAY,QAAQ,YAAY,EAAE,OAAO,GAAG;AACnD,cAAM,cAAc,YAAY,kBAAkB,SAAS,UAAU;AACrE,YAAI,eAAe,SAAS,aAAa,YAAY;AACjD,kBAAQ,QAAQ;AAAA,MACxB;AACA,UAAI,QAAQ,SAAS;AACjB,kBAAU,QAAQ;AAAA;AAElB,kBAAU;AAAA,IAClB;AAAA,EACJ;AACJ,CAAC,EAAE;AACH;AAEO,IAAM,YAAY,OAAO,WAAW;;;ACnR3C,IAAIC,cAA0C,SAAU,YAAY,QAAQ,KAAK,MAAM;AACnF,MAAI,IAAI,UAAU,QAAQ,IAAI,IAAI,IAAI,SAAS,SAAS,OAAO,OAAO,OAAO,yBAAyB,QAAQ,GAAG,IAAI,MAAM;AAC3H,MAAI,OAAO,YAAY,YAAY,OAAO,QAAQ,aAAa;AAAY,QAAI,QAAQ,SAAS,YAAY,QAAQ,KAAK,IAAI;AAAA;AACxH,aAAS,IAAI,WAAW,SAAS,GAAG,KAAK,GAAG;AAAK,UAAI,IAAI,WAAW,CAAC;AAAG,aAAK,IAAI,IAAI,EAAE,CAAC,IAAI,IAAI,IAAI,EAAE,QAAQ,KAAK,CAAC,IAAI,EAAE,QAAQ,GAAG,MAAM;AAChJ,SAAO,IAAI,KAAK,KAAK,OAAO,eAAe,QAAQ,KAAK,CAAC,GAAG;AAChE;AAeO,IAAI;AAAA,CACV,SAAUC,SAAQ;AAEf,EAAAA,QAAOA,QAAO,WAAW,IAAI,CAAC,IAAI;AAClC,EAAAA,QAAOA,QAAO,wBAAwB,IAAI,CAAC,IAAI;AAC/C,EAAAA,QAAOA,QAAO,qCAAqC,IAAI,CAAC,IAAI;AAE5D,EAAAA,QAAOA,QAAO,mBAAmB,IAAI,CAAC,IAAI;AAC9C,GAAG,WAAW,SAAS,CAAC,EAAE;AAgBnB,IAAM,OAAN,cAAmB,KAAK;AAAA,EAC3B,cAAc;AACV,UAAM,GAAG,SAAS;AAIlB,SAAK,OAAO;AAQZ,SAAK,OAAO;AAEZ,SAAK,QAAQ;AAEb,SAAK,OAAO;AACZ,SAAK,uBAAuB;AAAA,EAChC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAgCA,YAAY,GAAG;AACX,UAAM,IAAI,MAAM,sCAAsC;AAAA,EAC1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,SAAS,IAAI,IAAI;AACb,WAAO,OAAO;AAAA,EAClB;AACJ;AACAD,YAAW;AAAA,EACP,eAAe,OAAO,iBAAiB;AAC3C,GAAG,KAAK,WAAW,SAAS,MAAM;AAClCA,YAAW;AAAA,EACP,eAAe,IAAI;AACvB,GAAG,KAAK,WAAW,QAAQ,MAAM;AAS1B,IAAM,aAAN,cAAyB,KAAK;AAAA,EACjC,cAAc;AACV,UAAM,GAAG,SAAS;AAIlB,SAAK,UAAU;AAEf,SAAK,qBAAqB;AAAA,EAC9B;AAAA,EACA,SAAS,WAAW;AAGhB,UAAM,WAAW,KAAK,WAAW,IAAI;AACrC,aAAS,YAAY;AACrB,aAAS,aAAa;AACtB,aAAS,2BAA2B,KAAK;AACzC,WAAO;AAAA,EACX;AAAA,EACA,MAAM,IAAI,aAAa,OAAO,kBAAkB,MAAM;AAClD,YAAQ,SAAS,YAAY,eAAe,EAAE;AAC9C,UAAM,gBAAgB;AACtB,UAAM,oBAAoB,KAAK,SAAS,IAAI,OAAO;AACnD,UAAM,qBAAqB,YAAY,MAAM;AAAA,EACjD;AAAA,EACA,mBAAmB,aAAa,kBAAkB,MAAM;AACpD,gBAAY,MAAM,MAAM,eAAe,GAAG,IAAI;AAAA,EAClD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,aAAa,OAAO,kBAAkB,MAAM;AACxC,UAAM,MAAM,MAAM,eAAe,GAAG,IAAI;AAAA,EAC5C;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,mBAAmB,OAAO;AACtB,WAAO,MAAM,UAAU,IAAI;AAAA,EAC/B;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,cAAc,OAAO;AACjB,WAAO,MAAM,KAAK,IAAI;AAAA,EAC1B;AAAA,EACA,oBAAoB,aAAa;AAC7B,WAAO,YAAY,KAAK,IAAI;AAAA,EAChC;AAAA,EACA,yBAAyB,aAAa;AAClC,WAAO,YAAY,UAAU,IAAI;AAAA,EACrC;AAAA;AAAA;AAAA;AAAA,EAIA,mBAAmB,IAAI,OAAO,aAAa;AACvC,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,WAAW,OAAO;AAAA,EAClB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,WAAW,OAAO;AAAA,EAClB;AACJ;AAIO,IAAM,cAAc,CAAC,WAAW,WAAW,IAAI,MAAM;AAErD,IAAM,YAAY,MAAM,IAAI,gBAAgB,IAAI,GAAG,CAAC;AAEpD,IAAM,WAAW,MAAM,IAAI,eAAe,IAAI,GAAG,CAAC;AAMlD,IAAM,WAAN,cAAuB,WAAW;AAAA,EACrC,YAAY,OAAO;AACf,UAAM,IAAI,MAAM,oHAAoH;AAAA,EACxI;AAAA,EACA,MAAM,IAAI,aAAa,OAAO,kBAAkB,MAAM;AAClD,YAAQ,SAAS,YAAY,eAAe,EAAE;AAC9C,UAAM,QAAQ;AACd,UAAM,oBAAoB,KAAK,SAAS,IAAI,OAAO;AAAA,EACvD;AACJ;AACAA,YAAW;AAAA,EACP,eAAe,OAAO,SAAS;AACnC,GAAG,SAAS,WAAW,SAAS,MAAM;AACtCA,YAAW;AAAA,EACP,eAAe,SAAS;AAC5B,GAAG,SAAS,WAAW,cAAc,MAAM;AAIpC,SAAS,aAAa,MAAM;AAC/B,SAAO,SAAS,IAAI,GAAG,IAAI;AAC/B;AAKO,IAAM,sBAAN,cAAkC,WAAW;AAAA,EAChD,YAAY,OAAO;AACf,WAAO,MAAM,kBAAkB;AAAA,EACnC;AACJ;AACAA,YAAW;AAAA,EACP,eAAe,SAAS;AAC5B,GAAG,oBAAoB,WAAW,cAAc,MAAM;AAI/C,SAAS,wBAAwB,MAAM;AAC1C,SAAO,oBAAoB,IAAI,GAAG,IAAI;AAC1C;AAKO,IAAM,qBAAN,cAAiC,WAAW;AAAA,EAC/C,CAAC,YAAY,OAAO;AAChB,WAAO,MAAM;AAAA,EACjB;AACJ;AACAA,YAAW;AAAA,EACP,eAAe,QAAQ;AAC3B,GAAG,mBAAmB,WAAW,cAAc,MAAM;AAI9C,SAAS,uBAAuB,MAAM;AACzC,SAAO,mBAAmB,IAAI,GAAG,IAAI;AACzC;AAEO,IAAM,yBAAyB,CAAC,eAAe;AAAE,QAAM,IAAI,MAAM,sBAAsB,YAAY;AAAG;;;AChR7G,IAAI,QAAQ;AACL,IAAM,WAAN,cAAuB,KAAK;AAAA,EAC/B,cAAc;AACV,UAAM,GAAG,SAAS;AAClB,SAAK,YAAY;AACjB,SAAK,OAAO,cAAc,KAAK;AAC/B,SAAK,WAAW;AAChB,SAAK,QAAQ,oBAAI,IAAI;AACrB,SAAK,iBAAiB;AACtB,SAAK,iBAAiB;AACtB,SAAK,gBAAgB,oBAAI,IAAI;AAAA,EACjC;AAAA,EACA,kBAAkB,YAAY;AAC1B,QAAI,WAAW;AACf,WAAO,UAAU;AACb,YAAM,QAAQ,SAAS,MAAM,IAAI,UAAU;AAC3C,UAAI;AACA,eAAO;AACX,iBAAW,SAAS;AAAA,IACxB;AACA,WAAO;AAAA,EACX;AAAA,EACA,cAAc,YAAY;AACtB,UAAM,cAAc,KAAK,kBAAkB,UAAU;AACrD,WAAO,QAAQ,eAAe,YAAY,SAAS,MAAM,SAAS;AAAA,EACtE;AAAA,EACA,CAAC,eAAe;AACZ,QAAI,WAAW;AACf,WAAO,UAAU;AACb,YAAM;AACN,iBAAW,SAAS;AAAA,IACxB;AAAA,EACJ;AACJ;;;ACjCO,IAAM,eAAN,MAAmB;AAAA,EACtB,cAAc;AACV,SAAK,SAAS;AACd,SAAK,SAAS,CAAC;AACf,SAAK,cAAc;AAAA,EACvB;AAAA,EACA,iBAAiB;AACb,aAAS,IAAI,KAAK,gBAAgB,UAAU,KAAK,cAAc,GAAG,IAAI,KAAK,OAAO,QAAQ,KAAK;AAC3F,UAAI,KAAK,OAAO,CAAC;AACb,eAAO,KAAK,cAAc;AAAA,IAClC;AACA,WAAO,KAAK,cAAc;AAAA,EAC9B;AAAA,EACA,kBAAkB;AACd,aAAS,IAAI,KAAK,gBAAgB,UAAU,KAAK,cAAc,GAAG,IAAI,KAAK,OAAO,QAAQ,KAAK;AAC3F,YAAM,QAAQ,KAAK,OAAO,CAAC;AAC3B,UAAI,OAAO;AACP,aAAK,UAAU,MAAM;AACrB,aAAK,OAAO,CAAC,IAAI;AACjB,aAAK,cAAc,IAAI;AACvB,eAAO;AAAA,MACX;AAAA,IACJ;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAeA,MAAM;AACF,aAAS,IAAI,KAAK,gBAAgB,UAAU,KAAK,cAAc,GAAG,IAAI,KAAK,OAAO,QAAQ,KAAK;AAC3F,YAAM,QAAQ,KAAK,OAAO,CAAC;AAC3B,WAAK,cAAc;AACnB,UAAI,SAAS,MAAM,SAAS,GAAG;AAC3B,aAAK;AACL,eAAO,MAAM,IAAI;AAAA,MACrB;AAAA,IACJ;AACA,SAAK,cAAc;AAAA,EACvB;AAAA,EACA,KAAK,IAAI;AACL,UAAM,UAAU,GAAG;AACnB,QAAI,QAAQ,KAAK,OAAO,OAAO;AAC/B,QAAI,CAAC,OAAO;AAER,eAAS,IAAI,KAAK,OAAO,QAAQ,IAAI,SAAS;AAC1C,aAAK,OAAO,CAAC,IAAI;AACrB,cAAQ,KAAK,OAAO,OAAO,IAAI,CAAC;AAAA,IACpC;AACA,UAAM,KAAK,EAAE;AACb,SAAK;AACL,QAAI,UAAU,KAAK;AACf,WAAK,cAAc;AAAA,EAC3B;AAAA,EACA,EAAE,OAAO,QAAQ,IAAI;AACjB,aAAS,IAAI,GAAG,IAAI,KAAK,OAAO,QAAQ,KAAK;AACzC,YAAM,QAAQ,KAAK,OAAO,CAAC;AAC3B,UAAI;AACA,eAAO;AAAA,IACf;AAAA,EACJ;AACJ;;;ACrEO,IAAM,mBAAN,cAA+B,KAAK;AAAA,EACvC,WAAW;AACP,UAAM,mBAAmB,CAAC;AAC1B,UAAM,cAAc,CAAC;AACrB,SAAK,MAAM,QAAQ,CAAC,EAAE,MAAM,QAAQ,MAAM;AACtC,uBAAiB,KAAK,IAAI;AAC1B,UAAI,YAAY,YAAY,SAAS,CAAC,MAAM;AACxC,oBAAY,KAAK,OAAO;AAAA,IAChC,CAAC;AACD,WAAO,eACH,YAAY,IAAI,WAAS,MAAM,MAAM,EAAE,EAAE,KAAK,MAAM,IACpD,wBACA,iBAAiB,KAAK,IAAI;AAAA,EAelC;AACJ;AAEO,IAAM,uCAAN,cAAmD,YAAY;AAAA,EAClE,cAAc;AAEV,UAAM,GAAG,SAAS;AAClB,SAAK,cAAc;AAAA,EACvB;AAAA,EACA,QAAQ,MAAM,OAAO;AACjB,WAAO,cAAc;AAAA,EACzB;AAAA,EACA,cAAc,MAAM,IAAI,SAAS;AAC7B,QAAI,QAAQ,KAAK,QAAQ,IAAI,EAAE;AAC/B,QAAI,CAAC,OAAO;AACR,cAAQ,EAAE,WAAW,aAAa,YAAY,KAAK,aAAa;AAChE,WAAK,QAAQ,IAAI,IAAI,KAAK;AAAA,IAC9B;AACA,YAAQ,KAAK,EAAE,MAAM,IAAI,MAAM,OAAO,OAAU,CAAC;AAAA,EACrD;AAAA,EACA,YAAY,MAAM,SAAS;AACvB,UAAM,cAAc,KAAK,YAAY,kBAAkB,IAAI;AAC3D,QAAI,aAAa;AACb,kBAAY,iCAAiC,KAAK,aAAa,mBAAiB;AAC5E,aAAK,cAAc,MAAM,cAAc,YAAY,OAAO;AAAA,MAC9D,CAAC;AAAA,IACL;AAAA,EAIJ;AACJ;;;ACzDO,IAAM,uBAAN,cAAmC,KAAK;AAAA,EAC3C,cAAc;AACV,UAAM,GAAG,SAAS;AAClB,SAAK,UAAU,oBAAI,IAAI;AACvB,SAAK,cAAc;AACnB,SAAK,eAAe;AACpB,SAAK,SAAS;AACd,SAAK,UAAU,CAAC;AAChB,SAAK,eAAe;AAAA,EACxB;AAAA,EACA,UAAU,aAAa;AACnB,SAAK,aAAa,WAAW;AAAA,EACjC;AAAA,EACA,aAAa,aAAa;AACtB,SAAK,QAAQ,KAAK,MAAM,KAAK,SAAS,WAAW;AACjD,SAAK,UAAU;AAAA,EACnB;AAAA,EACA,gBAAgB;AACZ,QAAI,KAAK,QAAQ;AACb,YAAM,IAAI,MAAM,wDAAwD;AAC5E,SAAK;AAAA,EACT;AAAA,EACA,kBAAkB,YAAY,WAAW;AACrC,QAAI,CAAC,WAAW,QAAQ,WAAW,UAAU,OAAO;AAChD,WAAK,OAAO,KAAK,SAAS;AAAA,EAClC;AAAA,EACA,QAAQ,MAAM,OAAO;AACjB,WAAO,cAAc;AAAA,EACzB;AAAA;AAAA;AAAA;AAAA,EAIA,cAAc,MAAM,IAAI,SAAS;AAC7B,QAAI,QAAQ,KAAK,QAAQ,IAAI,EAAE;AAC/B,QAAI,CAAC,OAAO;AACR,cAAQ,GAAG,SAAS,KAAK,YAAY;AACrC,YAAM,aAAa,KAAK;AACxB,WAAK,QAAQ,IAAI,IAAI,KAAK;AAAA,IAC9B;AACA,YAAQ,KAAK,EAAE;AAAA,EACnB;AAAA,EACA,YAAY,MAAM,SAAS,WAAW;AAClC,UAAM,cAAc,KAAK,aAAa,kBAAkB,IAAI;AAC5D,QAAI,aAAa;AAGb,gBAAU,WAAW;AACrB,kBAAY,wCAAwC,KAAK,aAAa,mBAAiB;AACnF,aAAK,cAAc,MAAM,cAAc,YAAY,OAAO;AAAA,MAC9D,CAAC;AAAA,IACL;AACA,eAAW,sBAAsB,UAAU,YAAY,EAAE,KAAK,GAAG;AAC7D,WAAK,cAAc,MAAM,oBAAoB,OAAO;AAAA,IACxD;AACA,QAAI,UAAU,kBAAkB;AAC5B,iBAAW,sBAAsB,UAAU,gBAAgB,EAAE,KAAK,GAAG;AACjE,aAAK,cAAc,MAAM,oBAAoB,OAAO;AAAA,MACxD;AAAA,EACR;AAAA,EACA,YAAY;AACR,UAAM,UAAU,KAAK;AACrB,UAAM,UAAU,KAAK;AACrB,QAAI;AACJ,WAAO,QAAQ,QAAQ,QAAQ;AAC3B,YAAM,OAAO,QAAQ,QAAQ,CAAC;AAC9B,UAAI,YAAY,QAAQ,IAAI,IAAI;AAChC,UAAI,aAAa,UAAU,cAAc,yBAAyB,UAAU,eAAe,KAAK,cAAc;AAC1G,kBAAU;AACV,gBAAQ,IAAI;AACZ;AAAA,MACJ;AACA,UAAI,aAAa,UAAU,eAAe,KAAK,gBAAgB,UAAU,cAAc,aAAa;AAIhG,YAAI,UAAU,YAAY,OAAO;AAE7B,cAAI,KAAK,QAAQ,MAAM,OAAO,MAAM,cAAc;AAC9C;AACJ,oBAAU;AAAA,QACd,OACK;AACD,oBAAU,YAAY;AACtB,eAAK,kBAAkB,MAAM,SAAS;AAAA,QAC1C;AACA,gBAAQ,IAAI;AAAA,MAChB,OACK;AACD,cAAM,eAAe,QAAQ;AAC7B,YAAI,CAAC,WAAW;AACZ,sBAAY,KAAK,SAAS,KAAK,YAAY;AAC3C,oBAAU,aAAa,KAAK;AAC5B,kBAAQ,IAAI,MAAM,SAAS;AAAA,QAC/B;AACA,aAAK,YAAY,MAAM,SAAS,SAAS;AACzC,YAAI,UAAU,aAAa,KAAK,cAAc;AAC1C,oBAAU,aAAa,KAAK,YAAY;AAAA,QAC5C;AACA,kBAAU,YAAY;AACtB,kBAAU;AAKV,YAAI,QAAQ,WAAW,cAAc;AACjC,oBAAU,YAAY;AACtB,eAAK,kBAAkB,MAAM,SAAS;AACtC,kBAAQ,IAAI;AAAA,QAChB;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AACJ;;;ACtGO,IAAM,iBAAiB,SAAS;AAChC,IAAM,eAAe,SAAS;AAE9B,IAAME,eAAN,cAA0B,KAAK;AAAA,EAClC,cAAc;AACV,UAAM,GAAG,SAAS;AAClB,SAAK,eAAe;AACpB,SAAK,iBAAiB;AACtB,SAAK,YAAY;AACjB,SAAK,QAAQ;AACb,SAAK,WAAW;AAChB,SAAK,cAAc;AACnB,SAAK,UAAU,oBAAI,IAAI;AAIvB,SAAK,WAAW,IAAI,aAAa;AAEjC,SAAK,cAAc,CAAC;AACpB,SAAK,eAAe;AACpB,SAAK,gBAAgB;AAErB,SAAK,uBAAuB;AAC5B,SAAK,+BAA+B;AACpC,SAAK,oCAAoC;AACzC,SAAK,mCAAmC;AACxC,SAAK,6CAA6C;AAClD,SAAK,qCAAqC;AAE1C,SAAK,UAAU,QAAQ,QAAQ;AAC/B,SAAK,qBAAqB;AAC1B,SAAK,eAAe;AACpB,SAAK,UAAU;AACf,SAAK,4BAA4B;AACjC,SAAK,mBAAmB;AAAA,EAC5B;AAAA,EACA,cAAc,MAAM;AAChB,UAAM,WAAW,GAAG,IAAI;AACxB,SAAK,cAAc,qBAAqB,IAAI;AAAA,MACxC,SAAS,KAAK;AAAA,MACd,aAAa;AAAA,MACb,cAAc,KAAK;AAAA,MACnB,QAAQ,KAAK;AAAA,IACjB,CAAC;AACD,QAAI,CAAC,KAAK;AACN,WAAK,YAAY,KAAK,eAAe,IAAI,EAAE,UAAU,KAAK,aAAa,CAAC;AAQ5E,SAAK;AAAA,IAAwC,KAAK,KAAK,KAAK,IAAI;AAChE,SAAK,gBAAgB,KAAK,UAAU,KAAK,IAAI;AAAA,EACjD;AAAA,EACA,IAAI,QAAQ;AACR,WAAO,KAAK,QAAQ,OAAO;AAAA,EAC/B;AAAA,EACA,oBAAoB;AAChB,QAAI,KAAK;AACL;AACJ,SAAK,qBAAqB;AAC1B,eAAW,qBAAqB,KAAK,aAAa,eAAe;AAC7D,YAAM,WAAW,KAAK,QAAQ,IAAI,iBAAiB;AACnD,UAAI,YAAY,SAAS,SAAS,MAAM;AACpC;AACJ,WAAK,MAAM,iBAAiB;AAAA,IAChC;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,iBAAiB;AACb,WAAO,KAAK,YAAY,KAAK,YAAY,SAAS,CAAC;AAAA,EAKvD;AAAA,EACA,WAAW,QAAQ;AACf,QAAI,UAAU,MAAM;AAChB,aAAO;AACX,WAAO,KAAK,MAAM,OAAO,OAAO,EAAE,QAAQ,IAAI;AAAA,EAClD;AAAA;AAAA,EAEA,UAAU,QAAQ;AACd,QAAI,UAAU,MAAM,GAAG;AACnB,YAAM,IAAI,MAAM,oDAAoD;AAAA,IACxE;AACA,WAAO,KAAK,MAAM,OAAO,OAAO,EAAE,QAAQ,IAAI;AAAA,EAClD;AAAA;AAAA,EAEA,UAAU,YAAY;AAElB,QAAI,EAAE,sBAAsB;AACxB,aAAO,KAAK,WAAW,UAAU;AACrC,QAAI;AACJ,UAAM,cAAc,KAAK,eAAe;AACxC,QAAI,aAAa;AACb,cAAQ,KAAK,QAAQ,YAAY,aAAa,cAAc;AAAA,IAChE,OACK;AACD,cAAQ,KAAK,QAAQ,IAAI,UAAU;AACnC,UAAI,CAAC,OAAO;AACR,cAAM,gBAAgB,KAAK,aAAa,kBAAkB,UAAU;AACpE,YAAI,CAAC;AACD,iCAAuB,UAAU;AACrC,gBAAQ,cAAc,SAAS,IAAI,gBAAgB,KAAK,MAAM,UAAU;AAAA,MAC5E;AAAA,IACJ;AACA,QAAI,MAAM,SAAS;AACf,aAAO,MAAM,SAAS;AAC1B,QAAI,MAAM;AACN,aAAO,MAAM;AAGjB,QAAI,CAAC,MAAM,YAAY,CAAC,MAAM,SAAS,SAAS;AAC5C,YAAM,iBAAiB;AAC3B,WAAO,KAAK,UAAU,MAAM,UAAU,KAAK,QAAQ,KAAK,MAAM;AAC1D,cAAQ,YAAY;AAEhB,eAAO,KAAK,SAAS,cAAc,WAAW,OAAO;AACjD,gBAAM,4BAA4B,KAAK,eAAe,KAAK,8BAA8B,CAAC,KAAK,eAAe,KAAK,SAAS,gBAAgB,CAAC,GAAG,IAAI;AAAA,QACxJ;AACA,aAAK,kBAAkB;AAEvB,YAAI,MAAM,SAAS,MAAM;AACrB,iBAAO,4BAA4B,KAAK,eAAe,KAAK,8BAA8B,CAAC,KAAK,eAAe,CAAC,KAAK,CAAC,GAAG,IAAI;AAAA,MACrI,GAAG;AAAA,IACP,CAAC,EAAE,KAAK,MAAM;AACV,UAAI,KAAK;AACL,cAAM,IAAI,MAAM,yBAAyB,OAAO,KAAK,aAAa,MAAM,GAAG;AAG/E,UAAI,CAAC,MAAM,SAAS;AAChB,cAAM,IAAI,MAAM,yBAAyB;AAC7C,aAAO,MAAM,SAAS;AAAA,IAC1B,CAAC;AAAA,EACL;AAAA;AAAA;AAAA;AAAA,EAIA,IAAI,YAAY;AAEZ,QAAI,EAAE,sBAAsB;AACxB,aAAO,KAAK,UAAU,UAAU;AACpC,QAAI;AACJ,UAAM,cAAc,KAAK,eAAe;AACxC,QAAI,aAAa;AACb,cAAQ,KAAK,QAAQ,YAAY,aAAa,cAAc;AAAA,IAChE,OACK;AACD,cAAQ,KAAK,QAAQ,IAAI,UAAU;AACnC,UAAI,CAAC,OAAO;AACR,cAAM,gBAAgB,KAAK,aAAa,kBAAkB,UAAU;AACpE,YAAI,CAAC;AACD,iCAAuB,UAAU;AACrC,gBAAQ,cAAc,SAAS,IAAI,gBAAgB,KAAK,MAAM,UAAU;AAAA,MAC5E;AAAA,IACJ;AACA,UAAM,SAAS,MAAM,SAAS;AAC9B,QAAI,WAAW;AACX,6BAAuB,UAAU;AAErC,QAAI,WAAW,UAAa,MAAM,SAAS;AACvC,aAAO;AACX,QAAI,MAAM;AACN,aAAO,MAAM;AAGjB,QAAI,CAAC,MAAM,YAAY,CAAC,MAAM,SAAS,SAAS;AAC5C,YAAM,iBAAiB;AAE3B,WAAO,KAAK,SAAS,eAAe,IAAI,WAAW,OAAO;AAEtD,WAAK,8BAA8B,KAAK,cAAc,KAAK,SAAS,gBAAgB,CAAC;AAAA,IACzF;AACA,SAAK,kBAAkB;AACvB,QAAI,WAAW,MAAM;AACjB,WAAK,8BAA8B,KAAK,cAAc,CAAC,KAAK,CAAC;AAC7D,YAAM,QAAQ,MAAM,SAAS;AAC7B,UAAI,UAAU;AACV,cAAM,IAAI,MAAM,sCAAsC;AAC1D,UAAI,UAAU;AACV,+BAAuB,UAAU;AACrC,aAAO;AAAA,IACX,OACK;AACD,YAAM,UAAU,KAAK,UAAU,MAAM,UAAU,KAAK,QAAQ,KAAK,MAAM;AAEnE,YAAI,MAAM,SAAS,MAAM;AACrB,iBAAO,4BAA4B,KAAK,eAAe,KAAK,8BAA8B,CAAC,KAAK,eAAe,CAAC,KAAK,CAAC,GAAG,IAAI;AAAA,MACrI,CAAC,EAAE,KAAK,MAAM;AACV,YAAI,KAAK;AACL,gBAAM,IAAI,MAAM,yBAAyB,OAAO,KAAK,aAAa,MAAM,GAAG;AAG/E,cAAM,QAAQ,MAAM,SAAS;AAC7B,YAAI,UAAU;AACV,gBAAM,IAAI,MAAM,8BAA8B;AAClD,YAAI,UAAU;AACV,iCAAuB,UAAU;AACrC,eAAO;AAAA,MAKX,CAAC;AACD,UAAI,OAAO;AAEP,gBAAQ,QAAQ;AAAA,MACpB;AACA,aAAO;AAAA,IAUX;AAAA,EACJ;AAAA;AAAA,EAEA,KAAK,YAAY;AAEb,QAAI,EAAE,sBAAsB;AACxB,aAAO,KAAK,UAAU,UAAU;AACpC,QAAI;AACJ,UAAM,cAAc,KAAK,eAAe;AACxC,QAAI,aAAa;AACb,cAAQ,KAAK,QAAQ,YAAY,aAAa,cAAc;AAAA,IAChE,OACK;AACD,cAAQ,KAAK,QAAQ,IAAI,UAAU;AACnC,UAAI,CAAC,OAAO;AACR,cAAM,gBAAgB,KAAK,aAAa,kBAAkB,UAAU;AACpE,YAAI,CAAC;AACD,iCAAuB,UAAU;AACrC,gBAAQ,cAAc,SAAS,IAAI,gBAAgB,KAAK,MAAM,UAAU;AAAA,MAC5E;AAAA,IACJ;AACA,UAAM,SAAS,MAAM,SAAS;AAC9B,QAAI,WAAW;AACX,6BAAuB,UAAU;AACrC,QAAI,WAAW;AACX,aAAO;AAGX,QAAI,CAAC,MAAM,YAAY,CAAC,MAAM,SAAS,SAAS;AAC5C,YAAM,iBAAiB;AAE3B,WAAO,KAAK,SAAS,eAAe,IAAI,WAAW,OAAO;AACtD,WAAK,8BAA8B,KAAK,cAAc,KAAK,SAAS,gBAAgB,CAAC;AAAA,IACzF;AAEA,SAAK,kBAAkB;AACvB,SAAK,8BAA8B,KAAK,cAAc,CAAC,KAAK,CAAC;AAC7D,UAAM,QAAQ,MAAM,SAAS;AAC7B,QAAI,UAAU;AACV,YAAM,IAAI,MAAM,sCAAsC;AAC1D,QAAI,UAAU;AACV,6BAAuB,UAAU;AACrC,WAAO;AAAA,EACX;AAAA;AAAA,EAEA,gCAAgC,YAAY;AACxC,UAAM,aAAa,KAAK,QAAQ,IAAI,UAAU;AAC9C,QAAI,YAAY;AACZ,YAAM,QAAQ,WAAW,SAAS;AAClC,UAAI,UAAU;AACV,eAAO;AACX,UAAI,WAAW,kBAAkB;AAC7B,eAAO,WAAW;AAAA,IAC1B;AACA,WAAO,KAAK,aAAa,UAAU;AAAA,EACvC;AAAA,EACA,qCAAqC,YAAY;AAC7C,UAAM,aAAa,KAAK,QAAQ,IAAI,UAAU;AAC9C,QAAI,YAAY;AACZ,YAAM,QAAQ,WAAW,SAAS;AAClC,UAAI,UAAU;AACV,eAAO;AACX,UAAI,WAAW,kBAAkB;AAC7B,eAAO,WAAW;AAAA,IAC1B;AACA,WAAO,KAAK,kBAAkB,UAAU;AAAA,EAC5C;AAAA,EACA,aAAa,YAAY;AACrB,UAAM,gBAAgB,KAAK,aAAa,kBAAkB,UAAU;AACpE,QAAI,CAAC;AACD,aAAO;AACX,UAAM,QAAQ,cAAc,SAAS;AACrC,WAAO,UAAU,YAAa,UAAU,UAAa,WAAW,OAAO,KAAK,KAAK,UAAU,IAAI,QAAS;AAAA,EAC5G;AAAA,EACA,kBAAkB,YAAY;AAC1B,UAAM,gBAAgB,KAAK,aAAa,kBAAkB,UAAU;AACpE,QAAI,CAAC;AACD,aAAO;AACX,UAAM,QAAQ,cAAc,SAAS;AACrC,WAAO,UAAU,YAAa,UAAU,SAAY,QAAQ,KAAK,UAAU,UAAU,IAAK;AAAA,EAC9F;AAAA,EACA,uBAAuB,YAAY;AAC/B,UAAM,aAAa,KAAK,QAAQ,IAAI,UAAU;AAC9C,QAAI,cAAc,WAAW,kBAAkB,QAAW;AACtD,aAAO,WAAW;AAAA,IACtB,OACK;AACD,aAAO,KAAK,aAAa,UAAU;AAAA,IACvC;AAAA,EACJ;AAAA,EACA,4BAA4B,YAAY;AACpC,UAAM,aAAa,KAAK,QAAQ,IAAI,UAAU;AAC9C,QAAI,cAAc,WAAW,kBAAkB,QAAW;AACtD,aAAO,WAAW;AAAA,IACtB,OACK;AACD,aAAO,KAAK,kBAAkB,UAAU;AAAA,IAC5C;AAAA,EACJ;AAAA,EACA,MAAM,YAAY,kBAAkB,MAAM;AACtC,QAAI,kBAAkB;AAClB,sBAAgB;AAOpB,eAAW,MAAM;AAAA,MAAK,WAAW,WAAW;AAAA,MAAY;AAAA,MAAY;AAAA,MAAM;AAAA;AAAA,MAA2C;AAAA,MAAe,GAAG;AAAA,IAAI;AAC3I,UAAM,QAAQ,KAAK,QAAQ,IAAI,UAAU;AACzC,SAAK,mBAAmB,KAAK,oBAAqB,CAAC,MAAM,SAAS,KAAK,WAAW,UAAU,OAAO;AACnG,SAAK,4BAA4B,KAAK,6BAA6B,MAAM,iBAAiB;AAAA,EAC9F;AAAA;AAAA;AAAA;AAAA,EAIA,eAAe,YAAY;AACvB,WAAO,KAAK,MAAM,UAAU,EAAE,YAAY;AAAA,EAC9C;AAAA;AAAA,EAEA,qBAAqB,YAAY;AAC7B,UAAM,QAAQ,KAAK,QAAQ,IAAI,UAAU;AACzC,WAAO,SAAS,MAAM,WAAW,QAAQ,MAAM,SAAS;AAAA,EAC5D;AAAA,EACA,MAAM,YAAY;AACd,UAAM,gBAAgB,KAAK,QAAQ,IAAI,UAAU;AACjD,QAAI,CAAC,iBAAiB,cAAc,aAAa,KAAK,YAAY;AAC9D,WAAK,YAAY,aAAa,CAAC,UAAU,CAAC;AAC9C,UAAM,QAAQ,iBAAiB,KAAK,QAAQ,IAAI,UAAU;AAC1D,UAAM,iBAAiB;AACvB,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAgBA,cAAc,YAAY;AACtB,UAAM,cAAc,KAAK,QAAQ,IAAI,UAAU;AAC/C,QAAI,eAAe,YAAY,SAAS,MAAM;AAC1C,aAAO;AACX,WAAO,QAAQ,eAAe,KAAK,aAAa,kBAAkB,UAAU,CAAC;AAAA,EACjF;AAAA;AAAA;AAAA,EAGA,cAAc,YAAY,kBAAkB,MAAM;AAG9C,QAAI,QAAQ,KAAK,QAAQ,IAAI,UAAU;AACvC,UAAM,kBAAkB,QAAQ,KAAK;AACrC,UAAM,aAAa,WAAW,UAAU,OAAO;AAC/C,QAAI,CAAC,OAAO;AACR,cAAQ,WAAW,SAAS,KAAK,YAAY;AAC7C,YAAM,WAAW,KAAK,aAAa,kBAAkB,UAAU;AAC/D,YAAM,iBAAiB;AACvB,WAAK,QAAQ,IAAI,YAAY,KAAK;AAClC,UAAI,CAAC,WAAW,QAAQ,CAAC;AACrB,aAAK,SAAS,KAAK,KAAK;AAC5B,WAAK,mBAAmB,KAAK,oBAAqB,CAAC,MAAM,SAAS,KAAK;AACvE,WAAK,4BAA4B,KAAK,6BAA6B,MAAM,iBAAiB;AAAA,IAC9F;AACA,QAAI,kBAAkB,UAAa,YAAY;AAC3C,YAAM,YAAY;AAIlB,YAAM,iBAAiB,oBAAoB,MAAM,kBAAkB,UAAa,MAAM,UAAU;AAGhG,UAAI,CAAC,kBAAkB,MAAM,kBAAkB,aAAa,MAAM,UAAU,WAAW;AACnF,mBAAW,qBAAqB,kBAAkB;AAClD,mBAAW,MAAM,KAAK,WAAW,WAAW,YAAY,YAAY,MAAM,OAAO,kBAAkB,UAAa,aAAa,OAAO,eAAe,GAAG,IAAI;AAC1J,mBAAW,qBAAqB;AAAA,MACpC;AAAA,IACJ;AAEA,QAAI,MAAM,SAAS,MAAM;AACrB,YAAM,QAAQ;AAClB,QAAI,MAAM,kBAAkB;AACxB,YAAM,gBAAgB;AAC1B,eAAW,WAAW,KAAK,KAAK;AAChC,WAAO;AAAA,EACX;AAAA,EACA,iBAAiB,YAAY;AACzB,eAAW,WAAW,KAAK,KAAK;AAChC,UAAM,QAAQ,KAAK,MAAM,UAAU,EAAE,YAAY;AACjD,UAAM,SAAS,SAAS;AAExB,SAAK,UAAU,cAAc,OAAO,UAAU;AAAA,EAClD;AAAA,EACA,sCAAsC,WAAW,OAAO;AACpD,QAAI,UAAU,MAAM,SAAS,GAAG;AAE5B,gBAAU,QAAQ;AAAA,IACtB,OACK;AAMD,iBAAW,CAAC,YAAY,KAAK,KAAK,OAAO;AACrC,YAAI,MAAM,SAAS,GAAG;AAClB,gBAAM,cAAc,UAAU,kBAAkB,UAAU;AAE1D,gBAAM,YAAY,EAAE,QAAQ,CAAC,SAAS,iBAAiB,YAAY,YAAY,EAAE,IAAI,cAAc,OAAO,CAAC;AAAA,QAC/G,OACK;AACD,oBAAU,MAAM,IAAI,YAAY,KAAK;AAAA,QACzC;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,UAAU,MAAM;AACZ,QAAI,KAAK;AACL,YAAM,IAAI,MAAM,mCAAmC;AACvD,SAAK,kBAAkB;AACvB,SAAK,WAAW;AAChB,SAAK,uBAAuB,KAAK,IAAI;AACrC,SAAK,qCAAqC,KAAK,SAAS;AAAA,EAC5D;AAAA,EACA,aAAa;AACT,SAAK,sCAAsC,KAAK,WAAW,KAAK,OAAO;AAEvE,UAAM,UAAU,KAAK;AAErB,SAAK,cAAc;AACnB,WAAO,EAAE,UAAU,KAAK,WAAW,SAAS,aAAa,KAAK;AAAA,EAClE;AAAA,EACA,OAAO,MAAM;AACT,SAAK,UAAU,IAAI;AACnB,SAAK,yBAAyB,KAAK,YAAY;AAE/C,WAAO,KAAK,WAAW;AAAA,EAC3B;AAAA,EACA,OAAO,YAAY,aAAa,IAAI,GAAG;AACnC,SAAK,eAAe;AACpB,SAAK,cAAc;AAAA,EACvB;AAAA;AAAA,EAEA,OAAO;AACH,SAAK,UAAU;AAAA,EACnB;AAAA,EACA,gBAAgB;AACZ,eAAW,SAAS,KAAK,QAAQ,OAAO,GAAG;AACvC,YAAM,QAAQ;AAAA,IAElB;AACA,SAAK,QAAQ,MAAM;AAAA,EACvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,MAAM,YAAY,MAAM;AACpB,SAAK,UAAU,IAAI;AACnB,WAAO,KAAK,UAAU,KAAK,QAAQ,KAAK,MAAM;AAC1C,aAAO,4BAA4B,KAAK,eAAe,KAAK,sBAAsB,CAAC,KAAK,aAAa,GAAG,IAAI;AAAA,IAChH,CAAC,EAAE,KAAK,MAAM;AACV,aAAO,KAAK,WAAW;AAAA,IAC3B,CAAC;AAAA,EAIL;AAAA,EACA,kBAAkB,YAAY;AAC1B,QAAI,QAAQ,KAAK,QAAQ,IAAI,UAAU,KAAK,KAAK,aAAa,kBAAkB,UAAU;AAC1F,QAAI,SAAS,MAAM,SAAS,MAAM;AAC9B,aAAO;AACX,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA,EAIA,wBAAwB,YAAY;AAChC,QAAI,QAAQ,KAAK,QAAQ,IAAI,UAAU;AACvC,QAAI,OAAO;AACP,YAAM,QAAQ,MAAM,SAAS;AAC7B,UAAI,UAAU;AACV,eAAO;AACX,aAAO,UAAU,SAAY,KAAK,aAAa,kBAAkB,UAAU,IAAI;AAAA,IACnF,OACK;AACD,aAAO,KAAK,aAAa,kBAAkB,UAAU;AAAA,IACzD;AAAA,EACJ;AAAA,EACA,QAAQ,gBAAgB,aAAa,MAAM;AACvC,UAAM,aAAa,YAAY;AAC/B,QAAI,WAAW,QAAQ,eAAe;AAClC,YAAM,IAAI,MAAM,sDAAsD;AAC1E,QAAI,QAAQ,KAAK,QAAQ,IAAI,cAAc;AAE3C,QAAI,CAAC,OAAO;AACR,YAAM,gBAAgB,KAAK,aAAa,kBAAkB,cAAc;AACxE,UAAI,CAAC;AACD,+BAAuB,cAAc;AACzC,cAAQ,eAAe,SAAS,KAAK,YAAY;AACjD,YAAM,UAAU,aAAa;AAC7B,YAAM,WAAW;AACjB,WAAK,QAAQ,IAAI,gBAAgB,KAAK;AAAA,IAC1C;AACA,UAAM,cAAc,aAAa,IAAI;AACrC,WAAO;AAAA,EACX;AAAA,EACA,4BAA4B,OAAO,OAAO;AAEtC,UAAM,QAAQ;AACd,UAAM,aAAa,MAAM;AACzB,UAAM,gBAAgB,MAAM;AAE5B,UAAM,iBAAiB,QAAQ,iBAAiB,cAAc,SAAS,KAAK,WAAW,SAAS,OAAO,cAAc,SAAS,CAAC,CAAC;AAChI,QAAI,gBAAgB;AAChB,oBAAc,wCAAwC,MAAM,2BAAyB;AACjF,cAAM,gBAAgB,KAAK,QAAQ,IAAI,sBAAsB,UAAU;AACvE,YAAI;AACA,wBAAc;AAAA,MACtB,CAAC;AASD,YAAM,YAAY;AAClB,YAAM,UAAU,cAAc,MAAM;AAIpC,YAAM,QAAQ;AAAA,IAClB,OACK;AACD,YAAM,YAAY;AAClB,YAAM,SAAS,KAAK;AAAA,IACxB;AAEA,QAAI,uBAAuB;AAC3B,QAAI,MAAM,wBAAwB;AAC9B,UAAI,MAAM,kBAAkB,QAAW;AACnC,YAAI,WAAW,SAAS,OAAO,MAAM,aAAa;AAC9C,iCAAuB;AAAA,MAC/B,OACK;AAGD,YAAI,kBAAmB,CAAC,iBAAiB,UAAU;AAC/C,iCAAuB;AAAA,MAC/B;AACA,UAAI,CAAC;AACD,aAAK,UAAU,cAAc,IAAI,UAAU;AAAA,IACnD;AAAA,EACJ;AAAA,EACA,iBAAiB,gBAAgB,aAAa,OAAO;AACjD,UAAM,iBAAiB,KAAK,QAAQ,gBAAgB,aAAa,cAAc;AAI/E,QAAI,eAAe,SAAS,KAAK,eAAe,UAAU,QAAW;AACjE,YAAM,QAAQ,eAAe,SAAS;AACtC,UAAI,UAAU;AACV,+BAAuB,cAAc;AACzC,aAAO,YAAY,oBAAoB,KAAK;AAAA,IAChD,WACS,eAAe,SAAS,GAAG;AAGhC,qBAAe,YAAY;AAC3B,qBAAe,iBAAiB;AAChC,YAAM,KAAK,cAAc;AACzB,aAAO;AAAA,IACX,OACK;AACD,UAAI,CAAC,eAAe,qBAAqB,GAAG;AACxC,cAAM,KAAK,cAAc;AACzB,YAAI,CAAC,eAAe,YAAY,CAAC,eAAe,SAAS,SAAS;AAC9D,yBAAe,iBAAiB;AACpC,eAAO;AAAA,MACX,OACK;AAGD,YAAI;AACJ,cAAM,cAAc,qCAAqC,IAAI;AAAA,UACzD,aAAa;AAAA,UACb,QAAQ,MAAMC,QAAO;AACjB,oBAAQ,iBAAiB,IAAI;AAAA,cACzB,OAAO,UAAUA,MAAK;AAAA,cACtB;AAAA,cACA;AAAA,YACJ,CAAC;AACD,mBAAO,cAAc;AAAA,UACzB;AAAA,QACJ,CAAC;AACD,oBAAY,UAAU,CAAC,eAAe,UAAU,CAAC;AACjD,eAAO;AAAA,MACX;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,CAAC,qBAAqB,SAAS;AAC3B,UAAM,QAAQ,KAAK;AACnB,WAAO,MAAM,QAAQ;AAEjB,aAAO,KAAK,6BAA6B,SAAS,MAAM,gBAAgB,CAAC;AAAA,IAC7E;AAAA,EACJ;AAAA,EACA,yBAAyB,SAAS;AAC9B,UAAM,QAAQ,KAAK;AACnB,WAAO,MAAM,QAAQ;AACjB,WAAK,8BAA8B,SAAS,MAAM,gBAAgB,CAAC;AAAA,IACvE;AAAA,EACJ;AAAA;AAAA;AAAA,EAGA,CAAC,6BAA6B,SAAS,OAAO;AAC1C,QAAI,KAAK,gBAAgB,KAAK;AAC1B;AACJ,SAAK,YAAY,cAAc;AAC/B,UAAM,UAAU,KAAK;AACrB,UAAM,uBAAuB,KAAK;AAClC,UAAM,8BAA8B,KAAK,QAAQ,KAAK,MAAM,8BAA8B;AAC1F,QAAI,UAAU;AACd,UAAM,kBAAkB,KAAK;AAC7B,SAAK,cAAc;AACnB,WAAO,MAAM,UAAU,CAAC,KAAK,gBAAgB,CAAC,KAAK,SAAS;AACxD,UAAI,+BAA+B,EAAE,YAAY,KAAK,6CAA6C;AAC/F,cAAM,MAAM,KAAK,IAAI;AACrB,cAAM,UAAU,MAAM;AACtB,YAAI,UAAU,KAAK,mCAAmC;AAClD,gBAAM,+BAA+B,KAAK;AAC1C,cAAI,CAAC,gCAAiC,MAAM,+BAAgC,KAAK,kCAAkC;AAC/G,iBAAK,+BAA+B;AACpC,iBAAK,MAAM,kCAAkC;AAAA,cACzC,OAAO,KAAK;AAAA,cACZ,WAAW,KAAK,SAAS,SAAS,MAAM;AAAA,cACxC,OAAO;AAAA,YACX,CAAC;AAID,iBAAK,cAAc;AACnB,kBAAMC,OAAM,CAAC;AACb,iBAAK,cAAc;AAAA,UACvB;AAAA,QACJ;AAAA,MACJ;AACA,UAAI,KAAK,gBAAgB,KAAK;AAC1B;AACJ,YAAM,QAAQ,MAAM,MAAM,SAAS,CAAC;AACpC,YAAM,aAAa,MAAM;AACzB,YAAM,WAAW,QAAQ,IAAI,UAAU;AACvC,UAAI,aAAa,OAAO;AACpB,cAAM,QAAQ;AACd,cAAM,IAAI;AACV;AAAA,MACJ;AACA,UAAI,MAAM,aAAa,GAAG;AAGtB,cAAM;AACN,cAAM,gBAAgB,MAAM;AAC5B,yBAAiB,cAAc,wCAAwC,MAAM,cAAY;AACrF,gBAAM,gBAAgB,QAAQ,IAAI,SAAS,UAAU;AACrD,cAAI;AACA,0BAAc;AAAA,QACtB,CAAC;AAAA,MACL;AAKA,UAAI,MAAM,YAAY,KAAK,MAAM,YAAY,MAAM,SAAS,QAAQ;AAKhE,cAAM,UAAU,MAAM,SAAS,MAAM;AAErC,YAAI,MAAM,SAAS,GAAG;AAClB,kBAAQ,OAAO,UAAU;AAAA,QAC7B;AAEA,cAAM,QAAQ;AACd,cAAM,IAAI;AACV;AAAA,MACJ;AACA;AAAA;AAAA,QAA4B,MAAM,SAAS,KAAK,MAAM,kBAAkB;AAAA,QAAW;AAC/E,cAAM,QAAQ;AACd,cAAM,IAAI;AACV;AAAA,MACJ;AACA,YAAM,iBAAiB,MAAM;AAC7B,UAAI,kBAAkB,MAAM,qBAAqB,IAAI,MAAM,kBAAkB,MAAM,iBAAiB,KAAK,YAAY;AACrH,aAAO,mBAAmB,CAAC,KAAK,gBAAgB,CAAC,KAAK,SAAS;AAC3D,cAAM,QAAQ,gBAAgB,UAAU,SAAY,OAAO,gBAAgB;AAC3E,YAAI,MAAM,uBAAuB,GAAG;AAChC,cAAI,MAAM,cAAc,gBAAgB;AACpC,iBAAK,4BAA4B,OAAO,KAAK;AAAA,UACjD;AACA,gBAAM,IAAI;AACV;AAAA,QACJ,WACS,iBAAiB,YAAY;AAClC,gBAAM,yBAAyB,KAAK,iBAAiB,OAAO,OAAO,KAAK;AAExE,cAAI,kCAAkC,kBAAkB;AACpD,iBAAK,YAAY,cAAc;AAC/B,mBAAO,KAAK,MAAM,0BAA0B,sBAAsB;AAClE,kBAAM,mBAAmB;AACzB,8BAAkB;AAAA,UACtB,OACK;AACD,8BAAkB;AAAA,UACtB;AAAA,QACJ,WACS,UAAU,+BAA+B;AAK9C,gBAAM,IAAI;AACV;AAAA,QACJ,OACK;AAED,gBAAM,eAAe,MAAM;AAG3B,cAAI,iBAAiB;AACjB;AAIJ,cAAI,MAAM,eAAe,gBAAgB;AACrC,8BAAkB,MAAM,oBAAoB,YAAY;AAAA,UAC5D,OACK;AACD,kBAAM,IAAI;AACV;AAAA,UACJ;AAAA,QAGJ;AAAA,MACJ;AAAA,IACJ;AACA,SAAK,cAAc;AAAA,EACvB;AAAA;AAAA,EAEA,8BAA8B,SAAS,OAAO;AAC1C,QAAI,KAAK,gBAAgB,KAAK;AAC1B;AACJ,SAAK,YAAY,cAAc;AAC/B,UAAM,UAAU,KAAK;AACrB,UAAM,kBAAkB,KAAK;AAC7B,SAAK,cAAc;AACnB,WAAO,MAAM,UAAU,CAAC,KAAK,gBAAgB,CAAC,KAAK,SAAS;AACxD,YAAM,QAAQ,MAAM,MAAM,SAAS,CAAC;AACpC,YAAM,aAAa,MAAM;AACzB,YAAM,WAAW,QAAQ,IAAI,UAAU;AACvC,UAAI,aAAa,OAAO;AACpB,cAAM,QAAQ;AACd,cAAM,IAAI;AACV;AAAA,MACJ;AACA,UAAI,MAAM,aAAa,GAAG;AAGtB,cAAM;AACN,cAAM,gBAAgB,MAAM;AAC5B,yBAAiB,cAAc,wCAAwC,MAAM,cAAY;AACrF,gBAAM,gBAAgB,QAAQ,IAAI,SAAS,UAAU;AACrD,cAAI;AACA,0BAAc;AAAA,QACtB,CAAC;AAAA,MACL;AAKA,UAAI,MAAM,YAAY,KAAK,MAAM,YAAY,MAAM,SAAS,QAAQ;AAKhE,cAAM,UAAU,MAAM,SAAS,MAAM;AAErC,YAAI,MAAM,SAAS,GAAG;AAClB,kBAAQ,OAAO,UAAU;AAAA,QAC7B;AAEA,cAAM,QAAQ;AACd,cAAM,IAAI;AACV;AAAA,MACJ;AACA;AAAA;AAAA,QAA4B,MAAM,SAAS,KAAK,MAAM,kBAAkB;AAAA,QAAW;AAC/E,cAAM,QAAQ;AACd,cAAM,IAAI;AACV;AAAA,MACJ;AACA,YAAM,iBAAiB,MAAM;AAC7B,UAAI,kBAAkB,MAAM,qBAAqB,IAAI,MAAM,kBAAkB,MAAM,iBAAiB,KAAK,YAAY;AACrH,aAAO,mBAAmB,CAAC,KAAK,gBAAgB,CAAC,KAAK,SAAS;AAC3D,cAAM,QAAQ,gBAAgB,UAAU,SAAY,OAAO,gBAAgB;AAC3E,YAAI,MAAM,uBAAuB,GAAG;AAChC,cAAI,MAAM,cAAc,gBAAgB;AACpC,iBAAK,4BAA4B,OAAO,KAAK;AAAA,UACjD;AACA,gBAAM,IAAI;AACV;AAAA,QACJ,WACS,iBAAiB,YAAY;AAClC,gBAAM,yBAAyB,KAAK,iBAAiB,OAAO,OAAO,KAAK;AAExE,cAAI,kCAAkC,kBAAkB;AACpD,iBAAK,YAAY,cAAc;AAC/B,iBAAK,MAAM,8BAA8B,wBAAwB,IAAI;AACrE,kBAAM,mBAAmB;AACzB,8BAAkB;AAAA,UACtB,OACK;AACD,8BAAkB;AAAA,UACtB;AAAA,QACJ,WACS,UAAU,+BAA+B;AAK9C,gBAAM,IAAI;AACV;AAAA,QACJ,OACK;AAED,gBAAM,eAAe,QAAQ,KAAK;AAClC,cAAI,UAAU,YAAY;AACtB,kBAAM,IAAI,MAAM,wHAAwH;AAG5I,cAAI,iBAAiB;AACjB;AAIJ,cAAI,MAAM,eAAe,gBAAgB;AACrC,8BAAkB,MAAM,oBAAoB,YAAY;AAAA,UAC5D,OACK;AACD,kBAAM,IAAI;AACV;AAAA,UACJ;AAAA,QAGJ;AAAA,MACJ;AAAA,IACJ;AACA,SAAK,cAAc;AAAA,EACvB;AACJ;;;ACv4BO,IAAM,aAAa;AAAA,EACtB,cAAc;AAClB;AAEO,IAAM,WAAN,cAAuB,KAAK;AAAA,EAC/B,cAAc;AACV,UAAM,GAAG,SAAS;AAClB,SAAK,WAAW,CAAC;AAAA,EACrB;AAAA,EACA,QAAQ,OAAO;AACX,aAAS,IAAI,GAAG,IAAI,KAAK,SAAS,QAAQ;AACtC,WAAK,SAAS,CAAC,EAAE,KAAK;AAAA,EAC9B;AACJ;AA8BO,IAAM,cAAN,cAA0B,KAAK;AAAA,EAClC,cAAc;AACV,UAAM,GAAG,SAAS;AAClB,SAAK,qBAAqB;AAC1B,SAAK,wBAAwB;AAC7B,SAAK,eAAe,SAAS,IAAI;AAEjC,SAAK,cAAc;AAOnB,SAAK,eAAe;AACpB,SAAK,YAAY,oBAAI,IAAI;AAKzB,SAAK,wBAAwB;AAC7B,SAAK,qBAAqB;AAC1B,SAAK,eAAe;AACpB,SAAK,8BAA8B;AACnC,SAAK,UAAU,QAAQ,QAAQ;AAC/B,SAAK,mBAAmB;AAGxB,SAAK,sBAAsB;AAK3B,SAAK,aAAa;AAIlB,SAAK,iBAAiB;AACtB,SAAK,oBAAoB;AACzB,SAAK,sBAAsB;AAC3B,SAAK,qBAAqB;AAC1B,SAAK,mBAAmBC;AACxB,SAAK,gBAAgB;AACrB,SAAK,qBAAqB;AAAA,EAC9B;AAAA,EACA,cAAc,MAAM;AAChB,UAAM,WAAW,GAAG,IAAI;AACxB,QAAI,CAAC,KAAK;AACN,WAAK,cAAc,KAAK;AAC5B,QAAI,KAAK,YAAY;AACjB,WAAK,oBAAoB,KAAK,mBAAmB,SAAS,SAAO,KAAK,OAAO,GAAG,IAAI,OAAO,QAAQ,KAAK,YAAY,GAAG;AAAA,IAC3H;AACA,SAAK,aAAa;AAAA,EACtB;AAAA;AAAA;AAAA;AAAA,EAIA,uBAAuB;AACnB,WAAO,KAAK,wBAAwB;AAAA,EACxC;AAAA,EACA,IAAI,QAAQ;AACR,WAAO,KAAK,kBAAkB;AAAA,EAClC;AAAA,EACA,QAAQ;AACJ,SAAK,OAAO;AACZ,SAAK,qBAAqB;AAE1B,SAAK,aAAa,SAAS,KAAK,aAAa,MAAM,MAAM;AACzD,SAAK,aAAa,WAAW;AAC7B,SAAK,UAAU,MAAM;AACrB,SAAK,cAAc,KAAK;AACxB,SAAK,qBAAqB;AAC1B,SAAK,qBAAqB;AAC1B,SAAK,aAAa;AAClB,SAAK,gBAAgB;AAAA,EACzB;AAAA,EACA,CAAC,wBAAwB;AACrB,QAAI,qBAAqB;AACzB,QAAI,UAAU;AACd,eAAW,YAAY,KAAK,YAAY,aAAa,GAAG;AACpD,YAAM,CAAC,UAAU,sBAAsB,UAAU,KAAK,YAAY;AAClE,UAAI,aAAa,KAAK,cAAc;AAChC,6BAAqB;AAAA,MACzB,OACK;AACD,YAAI,CAAC;AACD;AAAA,MACR;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,IAAI,kBAAkB;AAClB,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,IAAI,gBAAgB,OAAO;AACvB,SAAK,mBAAmB;AAAA,EAC5B;AAAA,EACA,eAAe;AACX,QAAI;AACJ,UAAM,uBAAuB,CAAC;AAC9B,eAAW,CAAC,UAAU,WAAW,KAAK,KAAK,sBAAsB,GAAG;AAChE,UAAI,aAAa;AACb,iBAAS;AACT,iCAAyB;AAAA,MAC7B;AAEI,6BAAqB,KAAK,QAAQ;AACtC,eAAS;AAAA,IACb;AACA,yBAAqB,QAAQ,sBAAsB;AACnD,aAAS,IAAI,qBAAqB,SAAS,GAAG,KAAK,KAAK,qBAAqB,CAAC,EAAE,mBAAmB,GAAG,KAAK;AACvG,WAAK,iBAAiB,qBAAqB,IAAI,CAAC,GAAG,qBAAqB,CAAC,CAAC;AAAA,IAC9E;AAAA,EACJ;AAAA,EACA,iBAAiB,QAAQ,SAAS;AAC9B,QAAI,QAAQ,iBAAiB,KAAK,OAAO,aAAa;AAClD,YAAM,IAAI,MAAM,2BAA2B;AAE/C,QAAI,QAAQ,kBAAkB,GAAG;AAC7B,iBAAW,CAAC,YAAY,KAAK,KAAK,OAAO,OAAO;AAC5C,YAAI,MAAM,SAAS,MAAM,WAAW;AAChC,kBAAQ,MAAM,OAAO,UAAU;AAAA,QACnC,OACK;AACD,gBAAM,YAAY,QAAQ,MAAM,IAAI,UAAU;AAC9C,cAAI,MAAM,WAAW,OAAO;AACxB,gBAAI,WAAW;AACX,wBAAU,MAAM;AAChB,wBAAU,gBAAgB;AAAA,YAC9B;AAAA,UACJ,WACS,aAAa,MAAM,WAAW,WAAW;AAC9C,kBAAM,oBAAoB,OAAO,KAAK;AAAA,UAC1C,WACS,WAAW,QAAQ,CAAC,MAAM,UAAU,aAAa,UAAU,QAAQ;AAGxE,kBAAM,YAAY,EAAE,gBAAgB,UAAU,OAAO,UAAU,SAAY,UAAU,OAAO,QAAQ,UAAU,OAAO;AAAA,UACzH;AACA,gBAAM,WAAW;AACjB,kBAAQ,MAAM,IAAI,YAAY,KAAK;AAAA,QACvC;AAAA,MACJ;AACA,kBAAY,OAAO,eAAe,QAAQ,aAAa;AAIvD,aAAO,QAAQ,QAAQ;AAEvB,cAAQ,QAAQ;AAAA,IACpB,OAEK;AACD,aAAO,QAAQ,IAAI,IAAI,OAAO,QAAQ,OAAO,OAAO,KAAK,CAAC;AAC1D,aAAO,gBAAgB,IAAI,IAAI,OAAO,QAAQ,eAAe,OAAO,aAAa,CAAC;AAClF,cAAQ;AAAA,IACZ;AAEA,WAAO,WAAW;AAAA,EACtB;AAAA,EACA,IAAI,oBAAoB;AACpB,QAAI,KAAK,uBAAuB;AAC5B,aAAO,KAAK;AAChB,UAAM,YAAY,MAAM,KAAK,KAAK,YAAY,aAAa,CAAC;AAC5D,UAAM,UAAU,CAAC;AACjB,aAAS,IAAI,UAAU,SAAS,GAAG,IAAI,GAAG;AACtC,cAAQ,KAAK,CAAC,UAAU,CAAC,GAAG,UAAU,IAAI,CAAC,CAAC,CAAC;AACjD,WAAO,KAAK,qBAAqB,IAAI,IAAI,OAAO;AAAA,EACpD;AAAA,EACA,IAAI,oBAAoB;AACpB,QAAI,KAAK;AACL,aAAO,KAAK;AAChB,WAAO,KAAK,qBAAqB,KAAK,iBAAiB,IAAI;AAAA,MACvD,cAAc,KAAK,yBAAyB,KAAK;AAAA,MACjD,OAAO;AAAA,IACX,CAAC;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAqCA,OAAO,QAAQ;AACX,UAAM,cAAc,KAAK;AACzB,WAAO,YAAY,IAAI,OAAO,OAAO,CAAC,GAAG,QAAQ,EAAE,cAAc,KAAK,aAAa,CAAC,CAAC;AAAA,EACzF;AAAA,EACA,UAAU,MAAM;AACZ,WAAO,KAAK,OAAO,IAAI;AAAA,EAC3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,OAAO,QAAQ;AACX,SAAK,kBAAkB,OAAO,aAAa,IAAI,EAAE,OAAO,CAAC,CAAC;AAE1D,SAAK,UAAU,QAAQ,QAAQ;AAC/B,SAAK,qBAAqB;AAC1B,SAAK,wBAAwB;AAC7B,QAAI,KAAK,oBAAoB;AACzB,WAAK,eAAe,KAAK;AACzB,WAAK,qBAAqB;AAAA,IAC9B;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAaA,OAAO,MAAM;AACT,SAAK,gBAAgB;AACrB,SAAK,qBAAqB;AAC1B,SAAK,qBAAqB,KAAK;AAC/B,UAAM,oBAAoB,KAAK;AAC/B,UAAM,0BAA0B,kBAAkB,OAAO,IAAI;AAC7D,SAAK,qBAAqB;AAC1B,UAAM,SAAS,KAAK,eAAe,uBAAuB;AAC1D,SAAK,qBAAqB;AAC1B,SAAK,kBAAkB;AACvB,WAAO;AAAA,EACX;AAAA,EACA,MAAM,eAAe,MAAM;AACvB,WAAO,KAAK,YAAY,IAAI;AAAA,EAChC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYA,MAAM,YAAY,MAAM;AACpB,QAAI,KAAK;AACL,aAAO,KAAK;AAChB,SAAK,gBAAgB;AACrB,SAAK,eAAe;AACpB,SAAK,qBAAqB,KAAK;AAC/B,QAAI;AACJ,WAAO,KAAK,UAAU,KAAK,QAAQ,KAAK,MAAM;AAC1C,aAAO,KAAK,cAAc,IAAI;AAAA,IAClC,CAAC,EAAE,KAAK,SAAO;AACX,eAAS;AACT,aAAO;AAAA,IACX,CAAC,EAAE,QAAQ,MAAM;AACb,WAAK,qBAAqB;AAC1B,WAAK,wBAAwB;AAC7B,WAAK,kBAAkB;AACvB,WAAK,eAAe;AAAA,IACxB,CAAC;AAAA,EACL;AAAA,EACA,MAAM,cAAc,MAAM;AACtB,SAAK,qBAAqB;AAC1B,UAAM,oBAAoB,KAAK;AAC/B,UAAM,oBAAoB,MAAM,kBAAkB,YAAY,IAAI;AAClE,UAAM,uBAAuB,QAAQ,kBAAkB,YAAY;AACnE,UAAM,oBAAoB,KAAK;AAC/B,QAAI,CAAC;AACD,WAAK,wBAAwB,kBAAkB;AACnD,SAAK,qBAAqB;AAC1B,UAAM,KAAK,oBAAoB,iBAAiB;AAChD,QAAI,KAAK;AACL,aAAO,EAAE,cAAc,aAAa,IAAI,EAAE,QAAQ,gBAAgB,CAAC,EAAE;AACzE,QAAI,kBAAkB,gBAAgB,CAAC,sBAAsB;AACzD,WAAK,wBAAwB;AAC7B,WAAK,qBAAqB;AAAA,IAC9B;AACA,UAAM,SAAS,KAAK,eAAe,iBAAiB;AACpD,QAAI,kBAAkB;AAClB,wBAAkB,cAAc;AACpC,QAAI,KAAK,SAAS,CAAC,kBAAkB,cAAc;AAC/C,YAAM,KAAK,cAAc,IAAI;AAAA,IACjC;AACA,WAAO;AAAA,EACX;AAAA,EACA,eAAe,mBAAmB;AAC9B,UAAM,EAAE,UAAU,SAAS,YAAY,IAAI;AAC3C,QAAI,CAAC,YAAY,cAAc;AAC3B,UAAI,SAAS,aAAa,KAAK;AAC3B,cAAM,IAAI,MAAM,yBAAyB;AAE7C,iBAAW,CAACC,WAAU,WAAW,KAAK,KAAK,sBAAsB,GAAG;AAChE,YAAI;AACA,UAAAA,UAAS;AACb,QAAAA,UAAS;AAAA,MACb;AACA,WAAK,eAAe,KAAK,cAAc;AAGvC,iBAAW,CAAC,YAAY,UAAU,KAAK,SAAS;AAC5C,mBAAW,QAAQ;AAEnB,YAAI,WAAW,SAAS,KAAK,CAAC,WAAW,SAAS;AAC9C;AACJ,cAAM,WAAW,KAAK,UAAU,IAAI,UAAU;AAC9C,YAAI;AACA,mBAAS,QAAQ,WAAW,SAAS,CAAC;AAAA,MAC9C;AACA,WAAK,qBAAqB;AAC1B,WAAK,aAAa;AAAA,IACtB,OACK;AAED,UAAI,KAAK;AACL,aAAK,eAAe,KAAK;AAC7B,WAAK,qBAAqB;AAC1B,WAAK,wBAAwB;AAAA,IACjC;AACA,WAAO,EAAE,cAAc,YAAY,aAAa;AAAA,EACpD;AAAA,EACA,MAAM,oBAAoB,mBAAmB;AAAA,EAC7C;AAAA,EACA,CAAC,0BAA0B,OAAO;AAC9B,UAAM,YAAY,IAAI,MAAM,yBAAyB,KAAK;AAE1D,cAAU,QAAQ;AAClB,YAAQ,KAAK,oBAAoB;AAAA,MAC7B,KAAK;AACD,gBAAQ,IAAI,UAAU,OAAO;AAC7B,cAAM,EAAE,gBAAgB,YAAY,IAAI;AAExC,eAAO,YAAY,oBAAoB,eAAe,kBAAkB,SAAY,eAAe,gBAAgB,eAAe,KAAK;AAAA,MAC3I,KAAK;AACD,cAAM;AAAA,MACV,KAAK;AACD,aAAK,OAAO,SAAS;AACrB;AAAA,MACJ,KAAK;AACD,aAAK,SAAS;AACd;AAAA,IACR;AAAA,EACJ;AAAA,EACA,8BAA8B,OAAO,aAAa;AAC9C,UAAM,YAAY,IAAI,MAAM,yBAAyB,KAAK;AAE1D,cAAU,QAAQ;AAClB,YAAQ,KAAK,oBAAoB;AAAA,MAC7B,KAAK;AACD,gBAAQ,IAAI,UAAU,OAAO;AAC7B,cAAM,EAAE,gBAAgB,YAAY,IAAI;AAExC,eAAO,YAAY,oBAAoB,eAAe,kBAAkB,SAAY,eAAe,gBAAgB,eAAe,KAAK;AAAA,MAC3I,KAAK;AACD,cAAM;AAAA,MACV,KAAK;AACD,aAAK,OAAO,SAAS;AACrB;AAAA,MACJ,KAAK;AACD,aAAK,SAAS;AACd;AAAA,IACR;AAAA,EACJ;AAAA,EACA,qBAAqB;AAIjB,QAAI,KAAK,wBAAwB,QAAQ,CAAC,KAAK,cAAc;AACzD,WAAK,sBAAsB,WAAW,KAAK,mBAAmB,EAAE;AAAA,IACpE;AAAA,EACJ;AAAA,EACA,uBAAuB;AACnB,QAAI,KAAK,wBAAwB,MAAM;AACnC,mBAAa,KAAK,mBAAmB;AACrC,WAAK,sBAAsB;AAAA,IAC/B;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,SAAS,OAAO;AACZ,UAAM,WAAW,UAAU;AAE3B,WAAO,KAAK,cAAc,UAAU,UAAU,SAAY,OAAO,KAAK;AAAA,EAC1E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,cAAc,MAAM,OAAO;AACvB,UAAM,WAAW,UAAU,EAAE,KAAK,CAAC;AAEnC,WAAO,KAAK,cAAc,UAAU,UAAU,SAAY,OAAO,KAAK;AAAA,EAC1E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,WAAW,aAAa,SAAS;AAC7B,UAAM,aAAa,oBAAoB,WAAW,IAC9C,oBAAoB,EAAE,aAAa,QAAQ,CAAC,IAExC,qBAAqB,EAAE,aAAa,QAAQ,CAAC;AACrD,WAAO,KAAK,cAAc,UAAU;AAAA,EACxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA,gBAAgB,MAAM,aAAa,SAAS;AACxC,UAAM,aAAa,YAAY,YAAY,SAAS,sBAChD,oBAAoB,EAAE,MAAM,aAAa,QAAQ,CAAC,IAE9C,qBAAqB,EAAE,MAAM,aAAa,QAAQ,CAAC;AAC3D,WAAO,KAAK,cAAc,UAAU;AAAA,EACxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,cAAc,YAAY,kBAAkB,MAAM;AAC9C,QAAI,KAAK,cAAc;AACnB,UAAI,KAAK,wBAAwB;AAC7B,cAAM,IAAI,MAAM,iCAAiC;AAAA,eAC5C,KAAK,wBAAwB;AAClC,aAAK,IAAI,MAAM,iCAAiC,CAAC;AAAA,IACzD;AACA,SAAK,kBAAkB,cAAc,YAAY,eAAe,GAAG,IAAI;AACvE,QAAI,KAAK;AACL,WAAK,mBAAmB;AAC5B,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,iBAAiB,YAAY;AACzB,QAAI,KAAK,cAAc;AACnB,UAAI,KAAK,wBAAwB;AAC7B,cAAM,IAAI,MAAM,mCAAmC;AAAA,eAC9C,KAAK,wBAAwB;AAClC,aAAK,IAAI,MAAM,oCAAoC,CAAC;AAAA,IAC5D;AACA,SAAK,kBAAkB,iBAAiB,UAAU;AAClD,SAAK,UAAU,OAAO,UAAU;AAChC,QAAI,KAAK;AACL,WAAK,mBAAmB;AAAA,EAChC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,cAAc,YAAY;AACtB,WAAO,KAAK,kBAAkB,cAAc,UAAU;AAAA,EAC1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,MAAM,YAAY,kBAAkB,MAAM;AACtC,QAAI,KAAK,cAAc;AACnB,UAAI,KAAK,wBAAwB;AAC7B,cAAM,IAAI,MAAM,qBAAqB;AAAA,eAChC,KAAK,wBAAwB;AAClC,aAAK,IAAI,MAAM,qBAAqB,CAAC;AAAA,IAC7C;AACA,SAAK,kBAAkB,MAAM,YAAY,eAAe,GAAG,IAAI;AAC/D,QAAI,KAAK;AACL,WAAK,mBAAmB;AAAA,EAChC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,aAAa,YAAY;AACrB,WAAO,KAAK,kBAAkB,aAAa,UAAU;AAAA,EACzD;AAAA;AAAA;AAAA;AAAA,EAIA,kBAAkB,YAAY;AAC1B,WAAO,KAAK,kBAAkB,kBAAkB,UAAU;AAAA,EAC9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,KAAK,YAAY;AACb,WAAO,KAAK,kBAAkB,KAAK,UAAU;AAAA,EACjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,UAAU,YAAY;AAClB,WAAO,KAAK,kBAAkB,UAAU,UAAU;AAAA,EACtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,IAAI,YAAY;AACZ,WAAO,KAAK,kBAAkB,IAAI,UAAU;AAAA,EAChD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA,QAAQ,cAAc,WAAW;AAC7B,UAAM,aAAa,KAAK,cAAc,mBAAmB,IAAI;AAAA;AAAA,MAEzD,MAAM;AAAA,MACN,aAAa;AAAA,IACjB,CAAC,CAAC;AACF,SAAK,YAAY,YAAY,SAAS;AACtC,WAAO;AAAA,EACX;AAAA,EACA,eAAe,cAAc,SAAS,WAAW;AAC7C,UAAM,aAAa,KAAK,cAAc,mBAAmB,IAAI;AAAA;AAAA,MAEzD,MAAM;AAAA,MACN,aAAa;AAAA,MACb;AAAA,IACJ,CAAC,CAAC;AACF,SAAK,YAAY,YAAY,SAAS;AACtC,WAAO;AAAA,EACX;AAAA,EACA,YAAY,YAAY,WAAW;AAC/B,QAAI,WAAW,KAAK,UAAU,IAAI,UAAU;AAC5C,QAAI,CAAC,UAAU;AACX,iBAAW,SAAS,IAAI;AACxB,WAAK,UAAU,IAAI,YAAY,QAAQ;AAAA,IAC3C;AACA,aAAS,SAAS,KAAK,SAAS;AAAA,EACpC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,OAAO;AACH,UAAM,eAAe,KAAK;AAC1B,UAAM,WAAW,aAAa;AAC9B,QAAI,CAAC;AACD,aAAO;AACX,SAAK,eAAe;AAEpB,SAAK,qBAAqB;AAC1B,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,OAAO;AACH,UAAM,eAAe,KAAK;AAC1B,QAAI,iBAAiB,KAAK;AACtB,aAAO;AACX,UAAM,eAAe,KAAK,kBAAkB,IAAI,YAAY;AAC5D,SAAK,eAAe;AAEpB,SAAK,qBAAqB;AAC1B,WAAO;AAAA,EACX;AAAA,EACA,kCAAkC,cAAc;AAAA,EAChD;AAAA,EACA,CAAC,wBAAwB,EAAE,QAAQ,aAAa;AAC5C,UAAM,cAAc,YAAY,eAAe;AAC/C,gBAAY,yBAAyB;AACrC,UAAM,gBAAgB,YAAY,iBAAiB,WAAW;AAC9D,QAAI,kBAAkB;AAClB,aAAO;AAEX,QAAI,CAAC,YAAY;AACb,aAAO;AACX,UAAM,aAAa,YAAY;AAC/B,QAAI,WAAW,MAAM;AACjB,UAAI,YAAY,SAAS,SAAS;AAC9B,eAAO,YAAY,SAAS,SAAS;AACzC,UAAI,YAAY,SAAS,iBAAiB;AACtC,eAAO,YAAY,SAAS,iBAAiB,WAAW;AAC5D,aAAO;AAAA,IACX;AACA,WAAO,YAAY,aAAa,YAAY,UAAU;AAAA,EAC1D;AAAA,EACA,CAAC,YAAY,EAAE,QAAQ,aAAa;AAChC,SAAK,OAAO,OAAO,MAAM;AACzB,WAAO;AAAA,EACX;AAAA,EACA,CAAC,iBAAiB,EAAE,QAAQ,aAAa;AACrC,WAAO;AAAA,EACX;AAAA,EACA,CAAC,cAAc,EAAE,QAAQ,aAAa;AAClC,WAAO,YAAY,eAAe;AAAA,EACtC;AAAA,EACA,CAAC,mBAAmB,EAAE,QAAQ,aAAa;AACvC,UAAM,cAAc,YAAY,eAAe;AAC/C,WAAO,YAAY;AAAA,EACvB;AAAA,EACA,CAAC,WAAW,EAAE,QAAQ,aAAa;AAC/B,UAAM,cAAc,YAAY,eAAe;AAC/C,QAAI,YAAY,WAAW;AACvB,YAAM,IAAI,MAAM,6CAA6C;AACjE,UAAM,qBAAqB,OAAO,WAAW,QAAQ,YAAY,WAAW;AAC5E,QAAI,CAAC;AACD,kBAAY,YAAY,cAAc;AAC1C,gBAAY,MAAM,OAAO,YAAY,GAAG,OAAO,YAAY;AAQ3D,WAAO,qBAAqB,SAAY;AAAA,EAC5C;AAAA,EACA,CAAC,kBAAkB,EAAE,QAAQ,aAAa;AACtC,UAAM,cAAc,YAAY,eAAe;AAC/C,QAAI,YAAY,WAAW;AACvB,YAAM,IAAI,MAAM,6CAA6C;AACjE,QAAI,qBAAqB;AAEzB,WAAO,OAAO,QAAQ,eAAa;AAC/B,UAAI,UAAU,WAAW,SAAS,YAAY,WAAW,SAAS,oBAAoB;AAClF,oBAAY,YAAY,cAAc;AACtC,6BAAqB;AAAA,MACzB;AACA,kBAAY,MAAM,UAAU,YAAY,GAAG,UAAU,YAAY;AAAA,IACrE,CAAC;AAMD,WAAO,qBAAqB,SAAY;AAAA,EAC5C;AAAA,EACA,CAAC,qBAAqB,EAAE,QAAQ,aAAa;AACzC,UAAM,cAAc,YAAY,eAAe;AAC/C,UAAM,SAAS,OAAO;AACtB,gBAAY,QAAQ,QAAQ,aAAa,YAAY;AACrD,WAAO,YAAY,aAAa,MAAM;AAAA,EAC1C;AAAA,EACA,CAAC,qBAAqB,EAAE,QAAQ,aAAa;AACzC,UAAM,cAAc,YAAY,eAAe;AAC/C,UAAM,SAAS,OAAO;AACtB,gBAAY,QAAQ,QAAQ,aAAa,YAAY;AACrD,UAAM,QAAQ,YAAY,QAAQ,IAAI,MAAM;AAC5C,UAAM,gBAAgB,SAAS,CAAC,MAAM,SAAS,IAAI,MAAM,iBAAiB,WAAW,IAAI;AACzF,WAAO;AAAA,EACX;AAAA,EACA,CAAC,sBAAsB,EAAE,QAAQ,aAAa;AAC1C,UAAM,cAAc,YAAY,eAAe;AAC/C,UAAM,SAAS,OAAO;AACtB,gBAAY,QAAQ,QAAQ,aAAa,YAAY;AACrD,UAAM,QAAQ,YAAY,QAAQ,IAAI,MAAM;AAC5C,WAAO,QAAQ,MAAM,iBAAiB,IAAI;AAAA,EAC9C;AAAA,EACA,CAAC,iCAAiC,EAAE,QAAQ,aAAa;AACrD,UAAM,cAAc,YAAY,eAAe;AAC/C,UAAM,SAAS,OAAO;AACtB,gBAAY,QAAQ,QAAQ,aAAa,YAAY;AACrD,UAAM,QAAQ,YAAY,QAAQ,IAAI,MAAM;AAC5C,WAAO,QAAQ,MAAM,iBAAiB,KAAK,CAAC,MAAM,qBAAqB;AAAA,EAC3E;AAAA,EACA,CAAC,+BAA+B,EAAE,QAAQ,aAAa;AACnD,UAAM,cAAc,YAAY,eAAe;AAC/C,UAAM,SAAS,OAAO;AACtB,gBAAY,QAAQ,QAAQ,aAAa,YAAY;AACrD,WAAO,YAAY,uBAAuB,MAAM;AAAA,EACpD;AAAA,EACA,CAAC,qCAAqC,EAAE,QAAQ,aAAa;AACzD,WAAO,YAAY,uBAAuB,OAAO,UAAU;AAAA,EAC/D;AAAA,EACA,CAAC,2BAA2B,EAAE,QAAQ,aAAa;AAC/C,WAAO,YAAY,aAAa,OAAO,UAAU;AAAA,EACrD;AAAA,EACA,CAAC,yBAAyB,EAAE,QAAQ,aAAa;AAC7C,UAAM,cAAc,YAAY,eAAe;AAC/C,UAAM,SAAS,OAAO;AACtB,gBAAY,QAAQ,QAAQ,aAAa,YAAY;AACrD,UAAM,QAAQ,YAAY,QAAQ,IAAI,MAAM;AAC5C,WAAO,SAAS,CAAC,MAAM,SAAS,IAAI,MAAM,oBAAoB;AAAA,EAClE;AACJ;;;ACzyBO,IAAM,aAAN,cAAyB,KAAK;AAAA,EACjC,cAAc;AACV,UAAM,GAAG,SAAS;AAIlB,SAAK,OAAO;AACZ,SAAK,YAAY,oBAAI,IAAI;AACzB,SAAK,SAAS;AACd,SAAK,YAAY,CAAC;AAClB,SAAK,aAAa;AAAA,EACtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,SAAS,MAAM;AACX,WAAO,KAAK,SAAS,IAAI,MAAM;AAAA,EACnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,SAAS,MAAM;AACX,WAAO,KAAK,UAAU,IAAI,IAAI;AAAA,EAClC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,SAASC,QAAO;AACZ,UAAM,OAAOA,OAAM;AACnB,QAAI,CAAC;AACD,YAAM,IAAI,MAAM,wBAAwB;AAC5C,QAAI,KAAK,UAAU,IAAI,IAAI;AACvB,YAAM,IAAI,MAAM,oBAAoB,sBAAsB;AAC9D,IAAAA,OAAM,SAAS;AACf,SAAK,UAAU,IAAI,MAAMA,MAAK;AAC9B,WAAOA;AAAA,EACX;AAAA,EACA,cAAc,MAAM;AAChB,QAAIC,UAAS;AACb,WAAOA,SAAQ;AACX,WAAKA,OAAM;AACX,MAAAA,UAASA,QAAO;AAAA,IACpB;AAAA,EACJ;AAAA,EACA,IAAI,YAAY;AACZ,QAAI,KAAK,eAAe;AACpB,aAAO,KAAK;AAChB,UAAM,YAAY,oBAAI,IAAI;AAC1B,UAAM,UAAU,oBAAI,IAAI;AACxB,SAAK,cAAc,CAAAA,YAAU;AACzB,MAAAA,QAAO,UAAU,QAAQ,CAACD,QAAO,SAAS;AACtC,YAAI,CAAC,QAAQ,IAAI,IAAI,GAAG;AACpB,kBAAQ,IAAI,IAAI;AAChB,oBAAU,IAAI,MAAMA,MAAK;AAAA,QAC7B;AAAA,MACJ,CAAC;AAAA,IACL,CAAC;AACD,WAAO,KAAK,aAAa;AAAA,EAC7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,aAAa,MAAM;AACf,SAAK,UAAU,QAAQ,IAAI;AAAA,EAC/B;AACJ;;;AC7EO,IAAI;AAAA,CACV,SAAUE,WAAU;AACjB,EAAAA,UAASA,UAAS,SAAS,IAAI,CAAC,IAAI;AACpC,EAAAA,UAASA,UAAS,UAAU,IAAI,CAAC,IAAI;AACrC,EAAAA,UAASA,UAAS,oBAAoB,IAAI,CAAC,IAAI;AAC/C,EAAAA,UAASA,UAAS,6BAA6B,IAAI,CAAC,IAAI;AAC5D,GAAG,aAAa,WAAW,CAAC,EAAE;AA2BvB,IAAM,UAAN,cAAsB,MAAM,CAAC,WAAW,GAAG,CAAC,SAAS,MAAM,gBAAgB,KAAK;AAAA,EACnF,cAAc;AACV,UAAM,GAAG,SAAS;AAIlB,SAAK,aAAa;AAClB,SAAK,WAAW,SAAS;AAAA,EAC7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,UAAUC,SAAQ;AACd,IAAAA,QAAO,WAAW,IAAI;AAAA,EAC1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,YAAY,UAAU;AAClB,aAAS,QAAQ,CAAAA,YAAU,KAAK,UAAUA,OAAM,CAAC;AAAA,EACrD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,aAAaA,SAAQ;AACjB,IAAAA,QAAO,WAAW,IAAI;AAAA,EAC1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,eAAe,UAAU;AACrB,aAAS,QAAQ,CAAAA,YAAU,KAAK,aAAaA,OAAM,CAAC;AAAA,EACxD;AACJ,CAAC,EAAE;AACH;;;ACrEO,IAAM,kBAAN,cAA8B,MAAM,CAAC,UAAU,GAAG,CAAC,SAAS,MAAM,wBAAwB,KAAK;AAAA,EAClG,cAAc;AACV,UAAM,GAAG,SAAS;AAIlB,SAAK,QAAQ;AAIb,SAAK,OAAO;AAGZ,SAAK,OAAO;AAAA,EAChB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,aAAa,OAAO;AAChB,QAAI,OAAO;AACP,UAAI,MAAM,aAAa,SAAS;AAC5B,eAAO,MAAM,IAAI,IAAI;AACzB,UAAI,MAAM,aAAa,SAAS;AAC5B,eAAO,MAAM,kBAAkB,aAAa,IAAI;AACpD,UAAI,MAAM,aAAa,SAAS;AAC5B,cAAM,kBAAkB,uBAAuB,IAAI;AACvD,aAAO,MAAM,kBAAkB,gCAAgC,IAAI;AAAA,IACvE;AAEI,aAAO,KAAK;AAAA,EACpB;AAAA,EACA,cAAc,OAAO;AACjB,QAAI;AACA,aAAO,MAAM,KAAK,IAAI;AAAA;AAEtB,aAAO,KAAK;AAAA,EACpB;AAAA,EACA,aAAa,OAAO,kBAAkB,MAAM;AACxC,QAAI;AACA,YAAM,MAAM,MAAM,eAAe,GAAG,IAAI;AAAA;AAExC,WAAK,OAAO;AAAA,EACpB;AAAA,EACA,WAAW,OAAO;AACd,UAAM,QAAQ,MAAM,kBAAkB,wBAAwB,IAAI;AAClE,QAAI;AACA,WAAK,OAAO,MAAM,SAAS;AAC/B,UAAM,WAAW,KAAK;AAAA,EAC1B;AAAA,EACA,WAAW;AACP,WAAO,KAAK;AAAA,EAChB;AACJ,CAAC,EAAE;AACH;AACO,IAAM,6BAAN,cAAyC,gBAAgB,IAAI,mBAAmB,EAAE;AACzF;AACO,IAAM,4BAAN,cAAwC,gBAAgB,IAAI,kBAAkB,EAAE;AACvF;AACO,IAAM,uBAAN,cAAmC,gBAAgB,IAAI,QAAQ,EAAE;AACxE;AAMO,IAAM,mBAAN,cAA+B,MAAM,CAAC,UAAU,GAAG,CAAC,SAAS,MAAM,yBAAyB,KAAK;AAAA,EACpG,cAAc;AACV,UAAM,GAAG,SAAS;AAIlB,SAAK,SAAS;AAId,SAAK,OAAO;AAAA,EAChB;AAAA;AAAA;AAAA;AAAA,EAIA,WAAW;AACP,WAAO;AAAA,EACX;AAAA,EACA,WAAW;AACP,WAAO,sBAAsB,KAAK;AAAA,EACtC;AACJ,CAAC,EAAE;AACH;AACO,IAAM,0BAAN,cAAsC,iBAAiB,IAAI,kBAAkB,EAAE;AACtF;;;AChGO,IAAM,QAAN,cAAoB,KAAK;AAAA,EAC5B,cAAc;AACV,UAAM,GAAG,SAAS;AAIlB,SAAK,aAAa;AAAA,EACtB;AAAA,EACA,mBAAmB,qBAAqB;AACpC,QAAI,KAAK;AACL,aAAO,KAAK;AAChB,QAAI,CAAC;AACD,aAAO;AACX,WAAO,oBAAoB,mBAAmB,IAAI,4BAA4B;AAAA,EAClF;AACJ;;;ACbA,IAAM,iBAAiB,OAAO,UAAU;AA6BjC,IAAM,SAAN,cAAqB,MAAM,CAAC,GAAG,CAAC,SAAS;AAC5C,QAAMC,gBAAe,KAAK;AAAA;AAAA;AAAA;AAAA;AAAA,IAKtB,CAAC,cAAc,IAAI;AAAA,IAAE;AAAA;AAAA;AAAA;AAAA;AAAA,IAKrB,IAAI,UAAU;AAEV,aAAO,wBAAwB,KAAK,YAAY,SAAS;AAAA,IAC7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAsBA,IAAI,IAAI;AACJ,YAAM,IAAI,CAAC;AACX,WAAK,QAAQ,aAAa,CAACC,QAAO,SAAS;AACvC,UAAE,IAAI,IAAI,KAAK,sBAAsBA,MAAK;AAAA,MAC9C,CAAC;AACD,UAAI,OAAO;AACP,cAAM,QAAQ,IAAI,MAAM,GAAG;AAAA,UACvB,IAAIC,SAAQ,UAAU,UAAU;AAC5B,gBAAI,CAACA,QAAO,QAAQ;AAChB,oBAAM,IAAI,MAAM,mCAAmC,OAAO,QAAQ,QAAQA,SAAQ,CAAC;AACvF,YAAAA,QAAO,QAAQ,EAAE,eAAe,gBAAgB,aAAa;AAC7D,mBAAOA,QAAO,QAAQ;AAAA,UAC1B;AAAA,QACJ,CAAC;AACD,eAAOC,gBAAe,MAAM,KAAK,KAAK;AAAA,MAC1C,OACK;AACD,eAAOA,gBAAe,MAAM,KAAK,CAAC;AAAA,MACtC;AAAA,IACJ;AAAA;AAAA;AAAA;AAAA,IAIA,IAAI,KAAK;AACL,aAAOA,gBAAe,MAAM,MAAM,wBAAwB,IAAI;AAAA,QAC1D,MAAM,KAAK;AAAA,QACX,QAAQ,KAAK;AAAA,QACb,aAAa,KAAK;AAAA,QAClB,SAAS;AAAA,QACT,MAAM;AAAA,MACV,CAAC,CAAC;AAAA,IACN;AAAA,IACA,IAAI,cAAc;AACd,aAAO,KAAK,YAAY,QAAQ,KAAK,QAAQ;AAAA,IACjD;AAAA,IACA,CAAC,gBAAgB;AACb,aAAO;AAAA,IACX;AAAA,IACA,sBAAsBF,QAAO;AACzB,YAAM,OAAOA,OAAM;AACnB,YAAMC,UAAS,KAAK;AACpB,YAAM,cAAc,KAAK;AACzB,YAAM,WAAWA,QAAO;AACxB,UAAI,CAAC,SAAS,IAAI;AACd,iBAAS,IAAI,IAAI,YAAY,2BAA2B,MAAMD,MAAK;AACvE,YAAM,aAAa,IAAI,SAAS,IAAI,EAAE;AACtC,iBAAW,UAAU;AACrB,iBAAW,OAAO;AAClB,iBAAW,OAAO,GAAG,KAAK,GAAG,UAAUA,OAAM;AAC7C,aAAO;AAAA,IACX;AAAA,IACA,uBAAuB,MAAM;AACzB,WAAK,QAAQ,aAAa,CAACA,QAAO,SAAS,KAAK,KAAK,EAAE,IAAI,GAAG,MAAMA,MAAK,CAAC;AAAA,IAC9E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAMA,WAAW,SAAS;AAChB,UAAI,KAAK;AACL,cAAM,IAAI,MAAM,yBAAyB;AAC7C,WAAK,QAAQ;AACb,cAAQ,cAAc,KAAK,EAAE;AAC7B,WAAK,QAAQ,aAAa,CAACA,QAAO,SAAS;AACvC,cAAM,aAAa,KAAK,EAAE,IAAI;AAC9B,gBAAQ,cAAc,YAAY,WAAW,IAAI;AACjD,mBAAW,OAAO;AAAA,MACtB,CAAC;AAAA,IACL;AAAA;AAAA;AAAA;AAAA,IAIA,WAAW,OAAO;AACd,YAAM,WAAW,KAAK;AACtB,YAAM,aAAa,SAAS;AAC5B,UAAI,CAAC;AACD;AACJ,WAAK,QAAQ,aAAa,CAACA,QAAO,SAAS,WAAW,iBAAiB,KAAK,EAAE,IAAI,CAAC,CAAC;AACpF,iBAAW,iBAAiB,KAAK,EAAE;AACnC,UAAI,eAAe;AACf,aAAK,QAAQ;AAAA,IACrB;AAAA;AAAA;AAAA;AAAA,IAIA,UAAU,KAAK;AACX,aAAO,KAAK,OAAO,GAAG;AAAA,IAC1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAMA,OAAO,KAAK;AACR,YAAM,QAAQ,KAAK;AACnB,UAAI,CAAC;AACD,eAAO;AACX,aAAO,MAAM,OAAO,GAAG;AAAA,IAC3B;AAAA,IACA,MAAM,iBAAiB;AACnB,aAAO,KAAK,YAAY;AAAA,IAC5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAMA,MAAM,YAAY,KAAK;AACnB,YAAM,QAAQ,KAAK;AACnB,UAAI,CAAC;AACD,eAAO,QAAQ,QAAQ,UAAU;AACrC,aAAO,MAAM,YAAY,GAAG;AAAA,IAChC;AAAA;AAAA;AAAA;AAAA;AAAA,IAKA,WAAW,UAAU;AACjB,aAAO,wBAAwB,KAAK,SAAS;AAAA,IACjD;AAAA,IACA,OAAO,2BAA2B,IAAIA,QAAO;AACzC,YAAM,OAAOA,OAAM;AACnB,YAAM,SAAS;AAAA,QACX,MAAM,GAAG,GAAG,GAAG,UAAU;AAAA,QACzB,OAAOA;AAAA,MACX;AAEA,UAAIA,OAAM,eAAe,MAAM;AAC3B,eAAO,OAAOA,OAAM;AACxB,UAAIA,OAAM,eAAe,MAAM;AAC3B,eAAO,OAAOA,OAAM;AACxB,UAAIA,OAAM,eAAe,UAAU;AAC/B,eAAO,WAAWA,OAAM;AAE5B,YAAM,sBAAsB,GAAG,iBAAiB,GAAG,GAAG,cAAc,IAAI,CAAC;AACzE,UAAI;AACA,eAAO,cAAc;AAEzB,YAAM,gBAAgB,GAAG,WAAW,GAAG,GAAG,QAAQ,IAAI,CAAC;AACvD,UAAI;AACA,eAAO,QAAQ;AAEnB,YAAM,wBAAwB,GAAG,kBAAkB,GAAG,GAAG,eAAe,IAAI,CAAC;AAC7E,UAAI,uBAAuB;AACvB,eAAO,qBAAqB;AAC5B,eAAO,uBAAuB;AAAA,MAClC;AAEA,YAAM,WAAWA,OAAM,mBAAmB,mBAAmB,EAAE,IAAI,MAAM;AACzE,YAAM,gBAAgB,WAAY;AAAA,MAAE;AACpC,oBAAc,YAAY;AAC1B,aAAO;AAAA,IACX;AAAA;AAAA;AAAA;AAAA;AAAA,IAKA,IAAI,eAAe,MAAM;AACrB,YAAM,WAAW,CAAC,WAAW;AACzB,YAAI,kBAAkB;AAClB,iBAAO,KAAK,MAAM,KAAK,MAAM;AACjC,cAAM,IAAI,MAAM,yDAAyD;AAAA,MAC7E;AACA,YAAM,cAAc,KAAK,MAAM;AAC/B,YAAM,kBAAkB,YAAY;AACpC,kBAAY,cAAc,CAAC;AAC3B,YAAM,MAAM,2BAA2B,UAAU,KAAK,UAAU,GAAG,MAAM,IAAI;AAC7E,kBAAY,cAAc;AAC1B,aAAO;AAAA,IACX;AAAA,IACA,OAAO,2BAA2B,WAAW;AAGzC,YAAM,cAAc;AACpB,YAAM,SAAS,KAAK;AACpB,aAAO,eAAe,QAAQ,aAAa;AAAA,QACvC,KAAK,WAAY;AACb,iBAAO,KAAK,EAAE,WAAW,EAAE,aAAa,KAAK,KAAK;AAAA,QACtD;AAAA,QACA,KAAK,SAAU,OAAO;AAClB,eAAK,EAAE,WAAW,EAAE,aAAa,KAAK,OAAO,KAAK;AAAA,QACtD;AAAA,MACJ,CAAC;AAAA,IACL;AAAA,IACA,OAAO,yBAAyB,WAAW;AAGvC,YAAM,cAAc;AACpB,YAAM,SAAS,KAAK;AACpB,YAAM,eAAe,MAAM,eAAe,WAAW;AACrD,YAAM,eAAe,MAAM,eAAe,WAAW;AACrD,YAAM,eAAe,MAAM,eAAe,WAAW;AACrD,UAAI,EAAE,gBAAgB,SAAS;AAC3B,eAAO,YAAY,IAAI,WAAY;AAC/B,iBAAO,KAAK,EAAE,WAAW,EAAE,aAAa,KAAK,KAAK;AAAA,QACtD;AAAA,MACJ;AACA,UAAI,EAAE,gBAAgB,SAAS;AAC3B,eAAO,YAAY,IAAI,SAAU,UAAU,MAAM;AAC7C,eAAK,EAAE,WAAW,EAAE,aAAa,KAAK,OAAO,OAAO,GAAG,IAAI;AAC3D,iBAAO,KAAK,QAEH,KAAK,MAAM,mBAAmB,SAAS,KAAK,MAAM,OAAO,IAAI,KAAK,MAAM,YAAY,IAErF,QAAQ,QAAQ,UAAU;AAAA,QACtC;AAAA,MACJ;AACA,UAAI,EAAE,gBAAgB,SAAS;AAC3B,eAAO,YAAY,IAAI,SAAU,UAAU,MAAM;AAC7C,eAAK,EAAE,WAAW,EAAE,aAAa,KAAK,OAAO,OAAO,GAAG,IAAI;AAAA,QAC/D;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AACA,SAAOD;AACX,CAAC,EAAE;AACH;AAEO,IAAM,0BAA0B,CAACI,WAAU;AAC9C,MAAI,SAAS,OAAO,eAAeA,MAAK;AAGxC,SAAOD,gBAAeC,QAAO,WAAW,WAAW,IAAI;AAAA,IACnD,cAAc,OAAO,eAAe,cAAc,IAAI,OAAO,OAAO;AAAA,IACpE,MAAMA,OAAM,YAAY;AAAA,EAC5B,CAAC,CAAC;AACN;AAEO,IAAM,0BAA0B,CAACA,WAAU;AAC9C,MAAI,CAACA,OAAM,eAAe,SAAS;AAC/B,4BAAwBA,MAAK;AACjC,SAAOA,OAAM;AACjB;AAKO,IAAM,gBAAgB,CAAC,aAAa,WAAW,UAAU;AAC5D,SAAO,SAAU,QAAQ,WAAW;AAChC,UAAMF,UAAS,wBAAwB,MAAM;AAC7C,UAAMD,SAAQC,QAAO,SAAS,SAAS,IAAI,OAAO,OAAO,eAAe,CAAC,GAAG;AAAA,MACxE,MAAM;AAAA,IACV,CAAC,CAAC,CAAC;AACH,UAAM,OAAO,OAAO;AACpB,SAAK,2BAA2B,SAAS;AACzC,SAAK,yBAAyB,SAAS;AAAA,EAC3C;AACJ;AAsDO,IAAM,QAAQ;AAyBd,IAAM,YAAY,SAAU,WAAW;AAE1C,SAAO,SAAU,QAAQ,aAAa,aAAa;AAC/C,4BAAwB,MAAM;AAC9B,QAAI;AACJ,QAAI,CAAC,OAAO,eAAe;AACvB,qBAAe,OAAO,gBAAgB,CAAC;AAAA,IAC3C,OACK;AACD,UAAI,CAAC,OAAO,eAAe,eAAe,GAAG;AACzC,uBAAe,OAAO,gBAAgB,OAAO,OAAO,OAAO,aAAa;AAAA,MAC5E;AAEI,uBAAe,OAAO;AAAA,IAC9B;AACA,iBAAa,SAAS,IAAI;AAAA,EAC9B;AACJ;AAEO,IAAM,QAAQ,SAAU,WAAW;AAEtC,SAAO,SAAU,QAAQ,aAAa,aAAa;AAC/C,4BAAwB,MAAM;AAC9B,QAAI;AACJ,QAAI,CAAC,OAAO,SAAS;AACjB,eAAS,OAAO,UAAU,CAAC;AAAA,IAC/B,OACK;AACD,UAAI,CAAC,OAAO,eAAe,SAAS,GAAG;AACnC,iBAAS,OAAO,UAAU,OAAO,OAAO,OAAO,OAAO;AAAA,MAC1D;AAEI,iBAAS,OAAO;AAAA,IACxB;AACA,WAAO,SAAS,IAAI;AAAA,EACxB;AACJ;AAEO,IAAM,iBAAiB,SAAU,WAAW;AAE/C,SAAO,SAAU,QAAQ,aAAa,aAAa;AAC/C,4BAAwB,MAAM;AAC9B,QAAI;AACJ,QAAI,CAAC,OAAO,gBAAgB;AACxB,sBAAgB,OAAO,iBAAiB,CAAC;AAAA,IAC7C,OACK;AACD,UAAI,CAAC,OAAO,eAAe,gBAAgB,GAAG;AAC1C,wBAAgB,OAAO,iBAAiB,OAAO,OAAO,OAAO,cAAc;AAAA,MAC/E;AAEI,wBAAgB,OAAO;AAAA,IAC/B;AACA,kBAAc,SAAS,IAAI;AAAA,EAC/B;AACJ;;;ACxcA,IAAIG,cAA0C,SAAU,YAAY,QAAQ,KAAK,MAAM;AACnF,MAAI,IAAI,UAAU,QAAQ,IAAI,IAAI,IAAI,SAAS,SAAS,OAAO,OAAO,OAAO,yBAAyB,QAAQ,GAAG,IAAI,MAAM;AAC3H,MAAI,OAAO,YAAY,YAAY,OAAO,QAAQ,aAAa;AAAY,QAAI,QAAQ,SAAS,YAAY,QAAQ,KAAK,IAAI;AAAA;AACxH,aAAS,IAAI,WAAW,SAAS,GAAG,KAAK,GAAG;AAAK,UAAI,IAAI,WAAW,CAAC;AAAG,aAAK,IAAI,IAAI,EAAE,CAAC,IAAI,IAAI,IAAI,EAAE,QAAQ,KAAK,CAAC,IAAI,EAAE,QAAQ,GAAG,MAAM;AAChJ,SAAO,IAAI,KAAK,KAAK,OAAO,eAAe,QAAQ,KAAK,CAAC,GAAG;AAChE;AAYO,IAAM,iBAAN,cAA6B,MAAM,CAAC,KAAK,GAAG,CAAC,SAAS,MAAM,uBAAuB,KAAK;AAAA,EAC3F,cAAc;AACV,UAAM,GAAG,SAAS;AAClB,SAAK,gBAAgB;AAAA,EACzB;AACJ,CAAC,EAAE;AACH;AAqBO,IAAM,YAAY,CAAC,aAAa,WAAW,mBAAmB,cAAc,aAAa,QAAQ;AAEjG,IAAM,sBAAN,cAAkC,MAAM,CAAC,eAAe,GAAG,CAAC,SAAS;AACxE,QAAMC,6BAA4B,KAAK;AAAA,IACnC,cAAc;AACV,YAAM,GAAG,SAAS;AAClB,WAAK,QAAQ;AACb,WAAK,uBAAuB;AAAA,IAChC;AAAA,IACA,YAAY;AACR,aAAO,QAAQ,KAAK,MAAM,MAAM;AAAA,IACpC;AAAA,IACA,UAAUC,SAAQ;AACd,aAAOA,QAAO,EAAE,KAAK,MAAM,MAAM;AAAA,IACrC;AAAA,IACA,mBAAmB,IAAI,OAAO,aAAa;AACvC,YAAM,gBAAgB,MAAM;AAC5B,UAAI,kBAAkB;AAClB,eAAO;AACX,YAAM,QAAQ,aAAa,eAAe,MAAM,IAAI,gBAAgB,GAAG,QAAQ,aAAa;AAC5F,UAAI,SAAS,GAAG,UAAU,GAAG;AACzB,WAAG,UAAU,KAAK,EAAE,YAAY,aAAa,GAAG,IAAI;AAAA,MACxD;AACA,aAAO;AAAA,IACX;AAAA,IACA,QAAQ,SAAS;AACb,YAAM,WAAW,KAAK,MAAM;AAC5B,aAAO,WAAW,SAAS,KAAK,KAAK,MAAM,OAAO,IAAI;AAAA,IAC1D;AAAA,IACA,WAAW,OAAO;AACd,UAAI,KAAK,UAAU,GAAG;AAClB,cAAM,QAAQ,MAAM,kBAAkB,uBAAuB,IAAI;AACjE,YAAI,iBAAiB,QAAQ;AAEzB,eAAK,UAAU,KAAK,EAAE,YAAY,MAAM,mBAAmB,KAAK,IAAI;AAAA,QACxE;AAAA,MACJ;AACA,YAAM,WAAW,KAAK;AAAA,IAC1B;AAAA,IACA,WAAW,OAAO;AACd,UAAI,KAAK,UAAU,GAAG;AAGlB,cAAM,QAAQ,MAAM,kBAAkB,uBAAuB,IAAI;AACjE,YAAI,iBAAiB,QAAQ;AACzB,eAAK,UAAU,KAAK,EAAE,iBAAiB,MAAM,mBAAmB,KAAK,IAAI;AAAA,QAC7E;AAAA,MACJ;AACA,YAAM,WAAW,KAAK;AAAA,IAC1B;AAAA,IACA,MAAM,IAAI,aAAa,GAAG,kBAAkB,MAAM;AAC9C,YAAM,QAAQ,KAAK,YAAY,qBAAqB,EAAE;AACtD,UAAI,GAAG,UAAU,GAAG;AAChB,YAAI,OAAO;AACP,gBAAM,YAAY,MAAM,SAAS;AACjC,cAAI,qBAAqB,QAAQ;AAC7B,eAAG,UAAU,SAAS,EAAE,iBAAiB,aAAa,GAAG,IAAI;AAAA,UACjE;AAAA,QACJ,WACS,YAAY,aAAa,cAAc,EAAE,GAAG;AACjD,gBAAM,QAAQ,YAAY,aAAa,EAAE;AACzC,cAAI,iBAAiB,QAAQ;AACzB,eAAG,UAAU,KAAK,EAAE,iBAAiB,aAAa,GAAG,IAAI;AAAA,UAC7D;AAAA,QACJ;AAAA,MACJ;AAGA,YAAM,MAAM,IAAI,aAAa,GAAG,aAAa;AAAA,IACjD;AAAA,EACJ;AACA,EAAAF,YAAW;AAAA,IACP,eAAe,OAAO,sBAAsB;AAAA,EAChD,GAAGC,qBAAoB,WAAW,SAAS,MAAM;AACjD,EAAAD,YAAW;AAAA,IACP,eAAe,SAAS;AAAA,EAC5B,GAAGC,qBAAoB,WAAW,cAAc,MAAM;AACtD,SAAOA;AACX,CAAC,EAAE;AACH;AACO,IAAM,6BAAN,cAAyC,oBAAoB,IAAI,gBAAgB,IAAI,mBAAmB,CAAC,EAAE;AAClH;;;AC7HA,IAAIE,cAA0C,SAAU,YAAY,QAAQ,KAAK,MAAM;AACnF,MAAI,IAAI,UAAU,QAAQ,IAAI,IAAI,IAAI,SAAS,SAAS,OAAO,OAAO,OAAO,yBAAyB,QAAQ,GAAG,IAAI,MAAM;AAC3H,MAAI,OAAO,YAAY,YAAY,OAAO,QAAQ,aAAa;AAAY,QAAI,QAAQ,SAAS,YAAY,QAAQ,KAAK,IAAI;AAAA;AACxH,aAAS,IAAI,WAAW,SAAS,GAAG,KAAK,GAAG;AAAK,UAAI,IAAI,WAAW,CAAC;AAAG,aAAK,IAAI,IAAI,EAAE,CAAC,IAAI,IAAI,IAAI,EAAE,QAAQ,KAAK,CAAC,IAAI,EAAE,QAAQ,GAAG,MAAM;AAChJ,SAAO,IAAI,KAAK,KAAK,OAAO,eAAe,QAAQ,KAAK,CAAC,GAAG;AAChE;AAaO,IAAM,uBAAN,cAAmC,MAAM,CAAC,KAAK,GAAG,CAAC,SAAS,MAAM,6BAA6B,KAAK;AAAA,EACvG,cAAc;AACV,UAAM,GAAG,SAAS;AAClB,SAAK,aAAa;AAClB,SAAK,gBAAgB;AAAA,EAGzB;AACJ,CAAC,EAAE;AACH;AAqBO,IAAM,SAAS,CAAC,aAAa,WAAW,yBAAyB,cAAc,aAAa,QAAQ;AAC3G,IAAI;AAAA,CACH,SAAUC,qBAAoB;AAC3B,EAAAA,oBAAmB,KAAK,IAAI;AAC5B,EAAAA,oBAAmB,QAAQ,IAAI;AACnC,GAAG,uBAAuB,qBAAqB,CAAC,EAAE;AAE3C,IAAM,uBAAN,cAAmC,MAAM,CAAC,KAAK,GAAG,CAAC,SAAS,MAAM,6BAA6B,KAAK;AAAA,EACvG,cAAc;AACV,UAAM,GAAG,SAAS;AAClB,SAAK,YAAY,CAAC;AAClB,SAAK,gBAAgB;AAAA,EACzB;AAAA,EACA,wBAAwB;AACpB,WAAO,KAAK,UAAU,SAAS;AAAA,EACnC;AACJ,CAAC,EAAE;AACH;AACO,IAAM,8BAA8B,qBAAqB,IAAI,SAAS;AAEtE,IAAM,4BAAN,cAAwC,MAAM,CAAC,eAAe,GAAG,CAAC,SAAS;AAI9E,QAAMC,mCAAkC,KAAK;AAAA,IACzC,cAAc;AACV,YAAM,GAAG,SAAS;AAClB,WAAK,uBAAuB;AAAA,IAChC;AAAA,IACA,YAAY,aAAaC,SAAQ;AAC7B,YAAM,QAAQ,YAAY,eAAe,IAAI;AAC7C,YAAM,UAAU,KAAK,EAAE,MAAM,mBAAmB,KAAK,QAAAA,QAAO,CAAC;AAC7D,YAAM,eAAe,YAAY;AACjC,UAAI,CAAC,MAAM,iBAAiB,aAAa,cAAc,IAAI;AACvD,cAAM,gBAAgB,YAAY,aAAa,IAAI;AAAA,IAC3D;AAAA,IACA,iBAAiB,aAAaA,SAAQ;AAClC,YAAM,WAAW,YAAY,QAAQ,IAAI,IAAI;AAE7C,UAAI,YAAY,SAAS,SAAS,MAAM;AACpC;AACJ,YAAM,QAAQ,YAAY,eAAe,IAAI;AAC7C,YAAM,UAAU,KAAK,EAAE,MAAM,mBAAmB,QAAQ,QAAAA,QAAO,CAAC;AAChE,YAAM,eAAe,YAAY;AACjC,UAAI,CAAC,MAAM,iBAAiB,aAAa,cAAc,IAAI;AACvD,cAAM,gBAAgB,YAAY,aAAa,IAAI;AAAA,IAC3D;AAAA,IACA,mBAAmB,IAAI,UAAU,aAAa;AAC1C,YAAM,QAAQ;AACd,YAAM,WAAW,IAAI,IAAI,MAAM,aAAa;AAC5C,eAAS,IAAI,GAAG,IAAI,MAAM,UAAU,QAAQ,KAAK;AAC7C,cAAM,EAAE,MAAM,QAAAA,QAAO,IAAI,MAAM,UAAU,CAAC;AAC1C,YAAI,SAAS,mBAAmB,QAAQ;AACpC,mBAAS,OAAOA,OAAM;AAAA,QAC1B,WACS,SAAS,mBAAmB,KAAK;AACtC,mBAAS,IAAIA,OAAM;AAAA,QACvB;AAAA,MACJ;AACA,aAAO;AAAA,IACX;AAAA,IACA,WAAW,OAAO;AACd,YAAM,WAAW,KAAK;AACtB,WAAK,OAAO;AAAA,IAChB;AAAA,EACJ;AACA,EAAAH,YAAW;AAAA,IACP,eAAe,OAAO,mCAAmC;AAAA,EAC7D,GAAGE,2BAA0B,WAAW,SAAS,MAAM;AACvD,EAAAF,YAAW;AAAA,IACP,eAAe,2BAA2B;AAAA,EAC9C,GAAGE,2BAA0B,WAAW,cAAc,MAAM;AAC5D,SAAOA;AACX,CAAC,EAAE;AACH;AAEO,IAAM,mCAAN,cAA+C,0BAA0B,IAAI,gBAAgB,IAAI,mBAAmB,CAAC,EAAE;AAC9H;;;ACrHO,IAAM,SAAN,cAAqB,KAAK;AAAA,EAC7B,cAAc;AACV,UAAM,GAAG,SAAS;AAClB,SAAK,WAAW,oBAAI,IAAI;AAAA,EAC5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,UAAU,MAAM;AACZ,WAAO,KAAK,SAAS,IAAI,IAAI;AAAA,EACjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,UAAU,MAAM;AACZ,WAAO,KAAK,SAAS,IAAI,IAAI;AAAA,EACjC;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,UAAUE,SAAQ;AACd,UAAM,OAAOA,QAAO;AACpB,QAAI,CAAC;AACD,YAAM,IAAI,MAAM,yBAAyB;AAC7C,QAAI,KAAK,UAAU,IAAI;AACnB,YAAM,IAAI,MAAM,qBAAqB,OAAO,IAAI,mBAAmB;AACvE,IAAAA,QAAO,SAAS;AAChB,SAAK,SAAS,IAAI,MAAMA,OAAM;AAC9B,WAAOA;AAAA,EACX;AAAA;AAAA;AAAA;AAAA,EAIA,qBAAqB;AAEjB,WAAO,CAAC,WAAW;AACf,YAAMA,UAAS,oBAAoB,MAAM;AACzC,WAAK,UAAUA,OAAM;AACrB,aAAO;AAAA,IACX;AAAA,EACJ;AACJ;AACO,IAAM,sBAAsB,CAAC,WAAW;AAC3C,QAAM,OAAO,OAAO;AACpB,MAAI,CAAC;AACD,UAAM,IAAI,MAAM,iDAAiD;AACrE,SAAO,wBAAwB,OAAO,SAAS;AACnD;AAgBO,IAAM,SAAS,MAAM;AAExB,SAAO,CAAC,WAAW;AACf,wBAAoB,MAAM;AAC1B,WAAO;AAAA,EACX;AACJ;;;AClFA,IAAIC,cAA0C,SAAU,YAAY,QAAQ,KAAK,MAAM;AACnF,MAAI,IAAI,UAAU,QAAQ,IAAI,IAAI,IAAI,SAAS,SAAS,OAAO,OAAO,OAAO,yBAAyB,QAAQ,GAAG,IAAI,MAAM;AAC3H,MAAI,OAAO,YAAY,YAAY,OAAO,QAAQ,aAAa;AAAY,QAAI,QAAQ,SAAS,YAAY,QAAQ,KAAK,IAAI;AAAA;AACxH,aAAS,IAAI,WAAW,SAAS,GAAG,KAAK,GAAG;AAAK,UAAI,IAAI,WAAW,CAAC;AAAG,aAAK,IAAI,IAAI,EAAE,CAAC,IAAI,IAAI,IAAI,EAAE,QAAQ,KAAK,CAAC,IAAI,EAAE,QAAQ,GAAG,MAAM;AAChJ,SAAO,IAAI,KAAK,KAAK,OAAO,eAAe,QAAQ,KAAK,CAAC,GAAG;AAChE;AAYO,IAAM,sBAAsB,SAAU,UAAU,UAAU;AAC7D,SAAO,aAAa,cACf,qCAAU,UAAS,KAAK,UAAU,QAAQ,IAAI,gBAAe,qCAAU,UAAS,KAAK,UAAU,QAAQ,IAAI;AACpH;AAEO,IAAM,aAAN,cAAyB,MAAM;AAAA,EAClC,cAAc;AACV,UAAM,GAAG,SAAS;AAClB,SAAK,mBAAmB,CAAC;AAAA,EAC7B;AAAA,EACA,mBAAmB,qBAAqB;AACpC,QAAI,KAAK;AACL,aAAO,KAAK;AAChB,QAAI,CAAC;AACD,aAAO;AACX,WAAO,oBAAoB,mBAAmB,IAAI,uCAAuC;AAAA,EAC7F;AACJ;AAEO,IAAM,sBAAN,cAAkC,eAAe,IAAI,UAAU,EAAE;AAAA,EACpE,cAAc;AACV,UAAM,GAAG,SAAS;AAClB,SAAK,gBAAgB;AAAA,EACzB;AACJ;AAGO,IAAM,mBAAN,cAA+B,qBAAqB,IAAI,KAAK,EAAE;AAAA,EAClE,cAAc;AACV,UAAM,GAAG,SAAS;AAClB,SAAK,gBAAgB;AAAA,EAOzB;AACJ;AAGO,IAAM,sBAAsB,OAAO,qBAAqB;AAExD,IAAM,6BAAN,cAAyC,MAAM,CAAC,eAAe,GAAG,CAAC,SAAS;AAC/E,QAAM,aAAa,KAAK;AACxB,QAAMC,oCAAmC,KAAK;AAAA,IAC1C,CAAC,mBAAmB,IAAI;AAAA,IAAE;AAAA,IAC1B,aAAa,OAAO;AAhE5B;AAiEY,UAAI,OAAO;AACP,YAAI,MAAM,aAAa,SAAS,6BAA6B;AACzD,gBAAM,cAAc,MAAM,gBAAgB,KAAK,UAAS,iBAAM,kBAAkB,eAAe,MAAvC,mBAA0C,UAA1C,YAAmD,OAAO;AAClH,cAAI,KAAK,QAAQ,CAAC,KAAK,QAAQ,QAAQ,yBAAyB,CAAC;AAC7D,mBAAO,MAAM,IAAI,IAAI;AAAA;AAErB,mBAAO,MAAM,kBAAkB,gCAAgC,IAAI;AAAA,QAC3E;AACA,eAAO,WAAW,aAAa,KAAK,MAAM,KAAK;AAAA,MACnD;AAEI,eAAO,KAAK;AAAA,IACpB;AAAA,IACA,aAAa,OAAO,kBAAkB,MAAM;AACxC,UAAI,OAAO;AACP,mBAAW,aAAa,KAAK,MAAM,OAAO,eAAe,GAAG,IAAI;AAAA,MACpE,OACK;AACD,aAAK,OAAO;AAIZ,YAAI,CAAC,KAAK,KAAK,aAAa,CAAC,KAAK,KAAK,gBAAgB;AAEnD,eAAK,KAAK,IAAI,KAAK,MAAM,MAAM,eAAe,OAAO,OAAO,IAAI;AAAA,QACpE;AAAA,MACJ;AAAA,IACJ;AAAA,IACA,MAAM,IAAI,aAAa,OAAO,kBAAkB,MAAM;AAElD,sBAAgB,GAAG,QAAQ,aAAa;AACxC,iBAAW,MAAM,KAAK,MAAM,IAAI,aAAa,OAAO,eAAe,GAAG,IAAI;AAAA,IAC9E;AAAA,IACA,QAAQ,OAAO;AACX,YAAMC,SAAQ,KAAK;AACnB,YAAM,kBAAkB,KAAK,KAAK,mBAAmBA,OAAM,IAAI;AAE/D,UAAI,mDAAiB,SAAS;AAC1B,gBAAQ,gBAAgB,QAAQ,OAAO,KAAK,QAAQ,MAAM,KAAK,OAAO;AAAA,MAE1E,WACSA,OAAM,WAAW;AACtB,gBAAQA,OAAM,UAAU,OAAOA,MAAK;AAAA,MACxC;AACA,aAAO;AAAA,IACX;AAAA,IACA,SAAS,IAAI,IAAI;AACb,UAAK,cAAc,QAAU,cAAc;AACvC,eAAO,GAAG,QAAQ,MAAM,GAAG,QAAQ;AACvC,aAAO,OAAO;AAAA,IAClB;AAAA,EACJ;AACA,EAAAF,YAAW;AAAA,IACP,eAAe,KAAK;AAAA,EACxB,GAAGC,4BAA2B,WAAW,QAAQ,MAAM;AACvD,SAAOA;AACX,CAAC,EAAE;AACH;AAEO,IAAM,iCAAN,cAA6C,MAAM,CAAC,SAAS,GAAG,CAAC,SAAS;AAC7E,QAAM,aAAa,KAAK;AACxB,QAAME,wCAAuC,KAAK;AAAA,IAC9C,SAAS,OAAO;AACZ,iBAAW,SAAS,KAAK,MAAM,KAAK;AAIpC,UAAI,UAAU;AACV,aAAK,WAAW,OAAO;AAAA,IAC/B;AAAA,EACJ;AACA,SAAOA;AACX,CAAC,EAAE;AACH;AACO,IAAM,sCAAN,cAAkD,oBAAoB,IAAI,2BAA2B,IAAI,0BAA0B,CAAC,EAAE;AAAA,EACzI,mBAAmB,IAAI,GAAG,aAAa;AACnC,UAAM,QAAQ;AACd,UAAM,gBAAgB,MAAM;AAC5B,QAAI,kBAAkB,QAAQ,kBAAkB,QAAW;AACvD,kBAAY,UAAU,2BAA2B,OAAO,MAAM,UAAU;AACxE,aAAO;AAAA,IACX;AAGA,QAAI,aAAa,eAAe,MAAM,KAAK,cAAc,OAAO;AAC5D,UAAI,GAAG,UAAU;AACb,WAAG,UAAU,aAAa,EAAE,YAAY,aAAa,GAAG,IAAI;AAChE,kBAAY,UAAU,2BAA2B,OAAO,MAAM,UAAU;AACxE,aAAO;AAAA,IACX;AACA,UAAM,WAAW,GAAG,QAAQ,aAAa;AAGzC,QAAI,aAAa,UAAU,MAAM,KAAK,SAAS,OAAO;AAClD,UAAI,GAAG,UAAU;AACb,WAAG,UAAU,QAAQ,EAAE,YAAY,aAAa,GAAG,IAAI;AAC3D,kBAAY,UAAU,2BAA2B,OAAO,MAAM,UAAU;AACxE,aAAO;AAAA,IACX,OACK;AACD,kBAAY,UAAU,2BAA2B,IAAI,MAAM,YAAY,aAAa;AACpF,aAAO;AAAA,IACX;AAAA,EACJ;AACJ;AACAH,YAAW;AAAA,EACP,eAAe,IAAI;AACvB,GAAG,oCAAoC,WAAW,QAAQ,MAAM;AAChEA,YAAW;AAAA,EACP,eAAe,8BAA8B;AACjD,GAAG,oCAAoC,WAAW,cAAc,MAAM;AAE/D,IAAM,4CAAN,cAAwD,0BAA0B,IAAI,2BAA2B,IAAI,0BAA0B,CAAC,EAAE;AACzJ;AACAA,YAAW;AAAA,EACP,eAAe,IAAI;AACvB,GAAG,0CAA0C,WAAW,QAAQ,MAAM;AAC/D,IAAM,wCAAN,cAAoD,2BAA2B,IAAI,0BAA0B,EAAE;AACtH;AACO,IAAM,uCAAN,cAAmD,2BAA2B,IAAI,yBAAyB,EAAE;AACpH;AACO,IAAM,kCAAN,cAA8C,2BAA2B,IAAI,oBAAoB,EAAE;AAC1G;AAEO,IAAM,cAAc,SAAU,mBAAmB,CAAC,GAAG,oBAAoB,CAAC,GAAG,mBAAmB,YAAY;AAC/G,SAAO,SAAU,QAAQ,aAAa;AAClC,UAAM,cAAc,cAAc,EAAE,kBAAkB,GAAG,kBAAkB,GAAG,gBAAgB;AAC9F,gBAAY,QAAQ,WAAW;AAC/B,+BAA2B,OAAO,WAAW;AAAA,EACjD;AACJ;AACO,IAAM,6BAA6B,CAACI,eAAc;AACrD,MAAI,CAACA,WAAU,eAAe,QAAQ,GAAG;AACrC,WAAO,eAAeA,YAAW,UAAU;AAAA,MACvC,KAAK,WAAY;AACb,eAAO,wBAAwB,IAAI;AAAA,MACvC;AAAA,IACJ,CAAC;AAAA,EACL;AACJ;AACO,IAAM,0BAA0B,CAAC,WAAW;AAC/C,QAAMC,SAAQ,OAAO;AACrB,QAAM,SAAS,CAAC;AAChB,MAAIA,OAAM,eAAe,SAAS,GAAG;AACjC,IAAAA,OAAM,QAAQ,UAAU,QAAQ,CAACH,WAAU;AACvC,UAAIA,kBAAiB,YAAY;AAC7B,cAAM,SAASA,OAAM,oBAAoB,CAAC;AAC1C,YAAI,CAAC,OAAO,WAAWA,OAAM,aAAaA,OAAM,cAAc,eAAe;AACzE,iBAAO,UAAUA,OAAM;AAAA,QAC3B;AACA,eAAO,KAAK,OAAO,OAAO,QAAQ;AAAA,UAC9B,SAASA;AAAA,UACT,MAAMA,OAAM;AAAA,QAChB,CAAC,CAAC;AAAA,MACN;AAAA,IACJ,CAAC;AAAA,EACL;AACA,SAAO;AACX;AACO,IAAM,gBAAgB,CAAC,MAAMA,WAAU;AAhO9C;AAiOI,MAAI,SAAS,MAAM;AACf,WAAO;AAAA,EACX;AACA,MAAI,EAAE,gBAAgB,OAAO;AACzB,WAAO,WAAW,MAAM,QAAM,KAAAA,OAAM,qBAAN,mBAAwB,aAAU,KAAAA,OAAM,qBAAN,mBAAwB,eACpF,WAAW,kBAAkB;AAAA,EACrC;AAGA,SAAO,QAAQ;AACnB;;;AC/NO,IAAM,mBAAN,cAA+B,MAAM,CAAC,QAAQ,KAAK,GAAG,CAAC,SAAS;AACnE,QAAM,aAAa,KAAK;AACxB,QAAMI,0BAAyB,KAAK;AAAA;AAAA,IAEhC,IAAI,WAAW;AACX,aAAO;AAAA,IACX;AAAA,IACA,UAAU,WAAW,MAAM;AAIvB,WAAK,YAAY,iBAAiB;AAElC,WAAK,eAAgB,SAAS,UAAU,CAAC;AAIzC,iBAAW,UAAU,KAAK,MAAM,QAAQ,GAAG,IAAI;AAE/C,iBAAW,aAAa,KAAK,cAAc;AACvC,YAAI,KAAK,EAAE,SAAS,KAAK,CAAC,KAAK,mBAAmB,SAAS,GAAG;AAC1D,eAAK,SAAS,IAAI,OAAO,SAAS;AAAA,QACtC;AAAA,MACJ;AAAA,IACJ;AAAA;AAAA;AAAA;AAAA;AAAA,IAKA,CAAC,oBAAoB;AACjB,aAAO,MAAM;AAAA,IACjB;AAAA,IACA,KAAK,QAAQ,MAAM,OAAO,MAAM;AAC5B,YAAM,OAAO,WAAW,KAAK,KAAK,MAAM,OAAO,IAAI;AACnD,YAAM,EAAE,mBAAmB,IAAI,sBAAQ,CAAC;AAGxC,UAAK,aAAa,SAAS,IAAI,KAAK,CAAC,KAAK,wBAAyB,CAAC,aAAa,SAAS,IAAI,GAAG;AAC7F,aAAK,uBAAuB,CAAC,YAAY,WAAWC,WAAU;AAlD9E;AAmDoB,cAAI,CAACA,OAAM;AAAA,YAEP,UAAK,mBAAmB,SAAS,MAAjC,mBAAoC,UAAS,YAAY,CAAC,sBAGvD,sBAAsB,6CACtB,sBAAsB,sCAAsC;AAC/D,iBAAK,SAAS,IAAI,KAAK,SAAS;AAAA,UACpC;AAAA,QACJ,CAAC;AAAA,MACL;AACA,aAAO;AAAA,IACX;AAAA,IACA,WAAW,SAAS,KAAK,OAAO,eAAeA,QAAO;AAhE9D;AAkEY,YAAM,cAAc,KAAK,QAAQ,UAASA,UAAA,gBAAAA,OAAO,SAAQ,GAAG;AAC5D,UAAI;AACA,kBAAU;AACd,UAAI;AACA,kBAAU;AACd,iBAAW,WAAW,KAAK,MAAM,SAAS,WAAU,KAAAA,UAAA,gBAAAA,OAAO,SAAP,YAAe,MAAM,KAAK,OAAO,eAAeA,MAAK;AAAA,IAC7G;AAAA,IACA,IAAI,wBAAwB;AAzEpC;AA2EY,YAAM,qBAAoB,UAAK,UAAL,mBAAY;AACtC,aAAO,QAAQ,uDAAmB,kBAAkB,KAAK,GAAG;AAAA,IAChE;AAAA,IACA,IAAI,OAAO;AACP,aAAO,KAAK;AAAA,IAChB;AAAA,IACA,IAAI,KAAK,MAAM;AACX,WAAK,QAAQ;AAEb,YAAM,EAAE,QAAQ,GAAG,OAAO,WAAW,IAAI;AACzC,eAAS,IAAI,GAAG,IAAI,OAAO,QAAQ,KAAK;AACpC,cAAM,EAAE,MAAM,YAAY,eAAe,IAAI,OAAO,CAAC;AACrD,cAAM,aAAa,EAAE,IAAI;AACzB,YAAI,YAAY;AACZ,gBAAM,QAAQ,iBACR,aAAa,QAAQ,MAAM,UAAU,IACrC,KAAK,UAAU;AAErB,eAAK,kBAAkB,cAAc,UAAU,cAAc,QAAQ,UAAU,SAAY;AAEvF,uBAAW,aAAa,OAAO,KAAK;AAAA,UACxC;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AAAA,IACA,IAAI,cAAc;AACd,YAAM,YAAY,KAAK,YAAY,QAAQ,KAAK,QAAQ;AACxD,YAAM,KAAK,KAAK;AAChB,aAAO,GAAG,YAAY,MAAM,OAAO,MAAM,OAAO,EAAE,IAAI;AAAA,IAC1D;AAAA,EACJ;AACA,SAAOD;AACX,CAAC,EAAE;AACH;;;AC3GA,IAAME,UAAS;AAAA,EACX,YAAY;AAAA,EACZ,YAAY;AAAA,EACZ,YAAY;AAAA,EACZ,uCAAuC;AAAA,IACnC,gBAAgB;AAAA,EACpB;AAAA,EACA,2CAA2C;AAAA,IACvC,gBAAgB;AAAA,EACpB;AAAA,EACA,wBAAwB;AAAA,IACpB,gBAAgB;AAAA,EACpB;AAAA,EACA,gCAAgC;AAAA,IAC5B,gBAAgB;AAAA,EACpB;AAAA,EACA,uCAAuC;AAAA,IACnC,gBAAgB;AAAA,EACpB;AAAA,EACA,sCAAsC;AAAA,IAClC,gBAAgB;AAAA,EACpB;AAAA,EACA,2BAA2B;AAAA,IACvB,gBAAgB;AAAA,EACpB;AAAA,EACA,+BAA+B;AAAA,IAC3B,YAAY;AAAA,EAChB;AAAA,EACA,sCAAsC;AAAA,IAClC,yBAAyB;AAAA,IACzB,uBAAuB;AAAA,EAC3B;AAAA,EACA,gBAAgB;AAAA,IACZ,MAAM;AAAA,MACF;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,sDAAsD;AAAA,IAClD,qBAAqB;AAAA,IACrB,mBAAmB;AAAA,EACvB;AAAA,EACA,4CAA4C;AAAA,IACxC,gBAAgB;AAAA,EACpB;AAAA,EACA,yCAAyC;AAAA,IACrC,gBAAgB;AAAA,EACpB;AAAA,EACA,4BAA4B;AAAA,IACxB,gBAAgB;AAAA,EACpB;AAAA,EACA,gCAAgC;AAAA,IAC5B,gBAAgB;AAAA,EACpB;AAAA,EACA,mCAAmC;AAAA,IAC/B,yBAAyB;AAAA,IACzB,uBAAuB;AAAA,IACvB,mBAAmB;AAAA,MACf,oBAAoB;AAAA,MACpB,qBAAqB;AAAA,MACrB,aAAa;AAAA,MACb,cAAc;AAAA,MACd,kBAAkB;AAAA,MAClB,mBAAmB;AAAA,IACvB;AAAA,EACJ;AAAA,EACA,wCAAwC;AAAA,IACpC,gBAAgB;AAAA,EACpB;AACJ;AACA,IAAOC,cAAQ,aAAa,cAAcD,OAAM;;;ACnEzC,IAAM,eAAN,cAA2B,KAAK;AAAA,EACnC,cAAc,MAAM;AAChB,UAAM,WAAW,GAAG,IAAI;AACxB,QAAI,CAAC,KAAK;AACN,WAAK,YAAY;AACrB,QAAI,CAAC,KAAK;AACN,WAAK,UAAU;AAAA,EACvB;AAAA,EACA,QAAQ,SAAS;AACb,WAAO,KAAK,UAAU,QAAQ,MAAM,QAAQ,UAAU,QAAQ,KAAK,KAAK,QAAQ,QAAQ,MAAM,QAAQ,QAAQ,QAAQ;AAAA,EAC1H;AAAA,EACA,aAAa;AACT,WAAO,KAAK,UAAU,QAAQ,MAAM,SAAS,QAAQ,KAAK,KAAK,QAAQ,QAAQ,MAAM,SAAS,QAAQ;AAAA,EAC1G;AAAA,EACA,oBAAoB;AAChB,WAAO,CAAC,KAAK,gBAAgB,KAAK,KAAK,UAAU,QAAQ,MAAM,SAAS,QAAQ;AAAA,EACpF;AAAA,EACA,kBAAkB;AACd,WAAO,CAAC,KAAK,gBAAgB,KAAK,KAAK,QAAQ,QAAQ,MAAM,SAAS,QAAQ;AAAA,EAClF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,aAAa,MAAM,gBAAgB,cAAc,MAAM;AACnD,WAAS,kBAAkB,cAAc,SAAS,QAAQ,KAAK,aAAa,OAAO,KAAK,YAE/E,kBAAkB,cAAc,UAAU,OAAO,KAAK,aAAa,QAAQ,KAAK;AAAA,EAC7F;AAAA,EACA,kBAAkB;AACd,WAAO,KAAK,YAAY,KAAK;AAAA,EACjC;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,UAAU,SAAS;AACf,UAAM,eAAe,QAAQ;AAC7B,UAAM,aAAa,QAAQ;AAC3B,UAAM,QAAQ,KAAK;AACnB,UAAM,MAAM,KAAK;AAEjB,QAAK,MAAM,gBAAkB,QAAQ,YAAa;AAE9C,aAAO;AAAA,IACX;AACA,UAAM,WAAW,IAAI,KAAK,KAAK,IAAI,MAAM,QAAQ,GAAG,aAAa,QAAQ,CAAC,CAAC;AAC3E,UAAM,SAAS,IAAI,KAAK,KAAK,IAAI,IAAI,QAAQ,GAAG,WAAW,QAAQ,CAAC,CAAC;AACrE,WAAO,KAAK,YAAY,IAAI,EAAE,WAAW,UAAU,SAAS,OAAO,CAAC;AAAA,EACxE;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,aAAa,SAAS,0BAA0B,OAAO;AA/D3D;AAgEQ,UAAM,eAAe,QAAQ;AAC7B,UAAM,aAAa,QAAQ;AAC3B,UAAM,QAAQ,KAAK;AACnB,UAAM,MAAM,KAAK;AAGjB,QAAI,yBAAyB;AACzB,UAAI,CAAC,KAAK;AACN,aAAK,iBAAiB,oBAAI,IAAI;AAClC,YAAI,aAAQ,mBAAR,mBAAwB,QAAO,GAAG;AAElC,gBAAQ,eAAe,QAAQ,KAAK,eAAe,KAAK,KAAK,cAAc;AAC3E,aAAK,qBAAqB,QAAQ;AAAA,MACtC,OAEK;AACD,aAAK,eAAe,IAAI,OAAO;AAAA,MACnC;AAAA,IACJ;AAEA,QAAI,CAAC,KAAK,gBAAgB,GAAG;AAEzB,UAAK,MAAM,gBAAkB,QAAQ,YAAa;AAE9C,aAAK,YAAY;AACjB,aAAK,UAAU;AAEf,YAAI,yBAAyB;AACzB,eAAK,qBAAqB;AAAA,QAC9B;AACA,eAAO;AAAA,MACX;AACA,WAAK,YAAY,IAAI,KAAK,KAAK,IAAI,MAAM,QAAQ,GAAG,aAAa,QAAQ,CAAC,CAAC;AAC3E,WAAK,UAAU,IAAI,KAAK,KAAK,IAAI,IAAI,QAAQ,GAAG,WAAW,QAAQ,CAAC,CAAC;AAAA,IACzE;AACA,WAAO;AAAA,EACX;AAAA,EACA,kBAAkB,MAAM;AACpB,WAAO;AAAA,EACX;AAAA,EACA,SAAS,MAAM;AACX,UAAM,WAAW,KAAK,kBAAkB,IAAI;AAE5C,WAAO,KAAK,YAAY,IAAI,QAAQ;AAAA,EACxC;AACJ;AACO,IAAM,iBAAiB,aAAa,IAAI,EAAE,WAAW,UAAU,SAAS,SAAS,CAAC;AAMlF,IAAM,qBAAqB,CAAC,eAAe,0BAA0B,UAAU;AAClF,SAAO,cAAc,OAAO,CAAC,KAAK,oBAAoB,IAAI,aAAa,iBAAiB,uBAAuB,GAAG,aAAa,IAAI,CAAC;AACxI;;;ACtHA,IAAIE,cAA0C,SAAU,YAAY,QAAQ,KAAK,MAAM;AACnF,MAAI,IAAI,UAAU,QAAQ,IAAI,IAAI,IAAI,SAAS,SAAS,OAAO,OAAO,OAAO,yBAAyB,QAAQ,GAAG,IAAI,MAAM;AAC3H,MAAI,OAAO,YAAY,YAAY,OAAO,QAAQ,aAAa;AAAY,QAAI,QAAQ,SAAS,YAAY,QAAQ,KAAK,IAAI;AAAA;AACxH,aAAS,IAAI,WAAW,SAAS,GAAG,KAAK,GAAG;AAAK,UAAI,IAAI,WAAW,CAAC;AAAG,aAAK,IAAI,IAAI,EAAE,CAAC,IAAI,IAAI,IAAI,EAAE,QAAQ,KAAK,CAAC,IAAI,EAAE,QAAQ,GAAG,MAAM;AAChJ,SAAO,IAAI,KAAK,KAAK,OAAO,eAAe,QAAQ,KAAK,CAAC,GAAG;AAChE;AAOO,IAAI;AAAA,CACV,SAAUC,yBAAwB;AAI/B,EAAAA,wBAAuB,QAAQ,IAAI;AAInC,EAAAA,wBAAuB,QAAQ,IAAI;AACvC,GAAG,2BAA2B,yBAAyB,CAAC,EAAE;AAInD,IAAM,kCAAN,cAA8CC,MAAK;AAAA;AAAA;AAAA;AAAA,EAItD,iBAAiB;AACb,UAAM,IAAI,MAAM,iBAAiB;AAAA,EACrC;AAAA;AAAA;AAAA;AAAA,EAIA,WAAW,MAAM;AACb,UAAM,IAAI,MAAM,iBAAiB;AAAA,EACrC;AACJ;AAOO,IAAM,wBAAN,cAAoC,OAAO;AAAA;AAAA;AAAA;AAAA,EAI9C,iBAAiB;AACb,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,6BAA6B;AACzB,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,2BAA2B,KAAK;AAC5B,SAAK,2BAA2B;AAAA,EACpC;AAAA;AAAA;AAAA;AAAA,EAIA,iBAAiB;AACb,WAAO,KAAK,2BAA2B,EAAE,eAAe,IAAI;AAAA,EAChE;AACJ;AACAF,YAAW;AAAA,EACP,eAAe,uBAAuB;AAC1C,GAAG,sBAAsB,WAAW,QAAQ,MAAM;AAClDA,YAAW;AAAA,EACP,eAAe,KAAK;AACxB,GAAG,sBAAsB,WAAW,QAAQ,MAAM;;;ACvElD,IAAIG,cAA0C,SAAU,YAAY,QAAQ,KAAK,MAAM;AACnF,MAAI,IAAI,UAAU,QAAQ,IAAI,IAAI,IAAI,SAAS,SAAS,OAAO,OAAO,OAAO,yBAAyB,QAAQ,GAAG,IAAI,MAAM;AAC3H,MAAI,OAAO,YAAY,YAAY,OAAO,QAAQ,aAAa;AAAY,QAAI,QAAQ,SAAS,YAAY,QAAQ,KAAK,IAAI;AAAA;AACxH,aAAS,IAAI,WAAW,SAAS,GAAG,KAAK,GAAG;AAAK,UAAI,IAAI,WAAW,CAAC;AAAG,aAAK,IAAI,IAAI,EAAE,CAAC,IAAI,IAAI,IAAI,EAAE,QAAQ,KAAK,CAAC,IAAI,EAAE,QAAQ,GAAG,MAAM;AAChJ,SAAO,IAAI,KAAK,KAAK,OAAO,eAAe,QAAQ,KAAK,CAAC,GAAG;AAChE;AAUO,IAAM,iBAAiB,OAAO,gBAAgB;AAI9C,IAAM,4BAAN,cAAwC,oBAAYC,KAAI,EAAE;AAAA,EAC7D,WAAW,QAAQ;AACf,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,OAAO,eAAe,UAAU;AAC5B,WAAO,OAAO,KAAK,EAAE,mBAAmB,GAAG,SAAS,UAAU,CAAC,EAAE,eAAe,GAAG,SAAS,UAAU,CAAC,EAAE,eAAe,CAAC;AAAA,EAC7H;AACJ;AAIO,IAAM,iBAAN,cAA6B,sBAAsB;AAAA,EACtD,cAAc;AACV,UAAM,GAAG,SAAS;AAClB,SAAK,UAAU;AAAA,EACnB;AAAA,EACA,WAAW,OAAO;AACd,UAAM,WAAW,KAAK;AAEtB,SAAK,YAAY,KAAK,2BAA2B,KAAK,SAAS;AAAA,EACnE;AAAA;AAAA;AAAA;AAAA,EAIA,iBAAiB;AACb,QAAI,CAAC,KAAK,cAAc;AAEpB,WAAK,eAAe,CAAC,EAAE,OAAO,GAAG,KAAK,UAAU,IAAI,cAAY,SAAS,eAAe,CAAC,CAAC;AAAA,IAC9F;AACA,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,2BAA2B,WAAW;AAClC,UAAM,SAAS,CAAC;AAEhB,UAAM,iBAAiB,CAAC,GAAG,SAAS,EAAE,OAAO,cAAY,CAAC,SAAS,WAAW,CAAC;AAC/E,UAAM,mBAAmB,eAAe,KAAK,cAAY,SAAS,wBAAwB,CAAC;AAE3F,QAAI,kBAAkB;AAElB,YAAM,SAAS,eAAe,KAAK,CAAC,GAAG,MAAM,MAAM,mBAAmB,KAAK,CAAC;AAE5E,YAAM,eAAe,mBAAmB,QAAQ,IAAI;AACpD,YAAM,sBAAsB,aAAa;AACzC,aAAO,KAAK,qBAAqB,gBAAgB;AAAA,IACrD,OACK;AACD,aAAO,KAAK,mBAAmB,gBAAgB,IAAI,EAAE,oBAAoB,mBAAmB,eAAe,QAAQ,GAAG,IAAI,EAAE,kBAAkB;AAAA,IAClJ;AACA,WAAO;AAAA,EACX;AACJ;AACAD,YAAW;AAAA,EACP,eAAe,oBAAoB;AACvC,GAAG,eAAe,WAAW,QAAQ,MAAM;AAC3CA,YAAW;AAAA,EACP,eAAe,yBAAyB;AAC5C,GAAG,eAAe,WAAW,4BAA4B,MAAM;AAIxD,IAAM,qBAAN,cAAiC,gCAAgC;AAAA;AAAA;AAAA;AAAA,EAIpE,UAAU;AACN,UAAM,IAAI,MAAM,iBAAiB;AAAA,EACrC;AACJ;AAKO,IAAM,gCAAN,cAA4C,oBAAYC,KAAI,EAAE;AAAA,EACjE,WAAW,QAAQ;AACf,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,OAAO,eAAe,UAAU;AAC5B,WAAO,OAAO,KAAK,EAAE,mBAAmB,GAAG,GAAG,KAAK,yBAAyB,QAAQ,CAAC;AAAA,EACzF;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,OAAO,yBAAyB,UAAU;AACtC,WAAO;AAAA,MACH,WAAW,OAAO,SAAS,WAAW,KAAK,EAAE,eAAe,CAAC;AAAA,MAC7D,WAAW,OAAO,SAAS,SAAS,KAAK,EAAE,eAAe,CAAC;AAAA,IAC/D;AAAA,EACJ;AACJ;AAIO,IAAM,qBAAN,cAAiC,aAAa;AAAA,EACjD,cAAc;AACV,UAAM,GAAG,SAAS;AAClB,SAAK,QAAQ;AACb,SAAK,eAAe;AACpB,SAAK,OAAO;AACZ,SAAK,cAAc;AAAA,EACvB;AAAA,EACA,IAAI,uBAAuB;AACvB,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA,EAIA,iBAAiB;AACb,WAAO,KAAK,wBAAwB,eAAe,IAAI;AAAA,EAC3D;AAAA;AAAA;AAAA;AAAA,EAIA,iBAAiB;AACb,WAAO,CAAC;AAAA,EACZ;AAAA,EACA,wBAAwB,aAAa;AACjC,WAAO;AAAA,EACX;AAAA,EACA,kBAAkB,MAAM;AACpB,UAAM,EAAE,OAAO,cAAc,KAAK,IAAI;AACtC,WAAO,OAAO,OAAO,EAAE,OAAO,cAAc,KAAK,GAAG,IAAI;AAAA,EAC5D;AACJ;AACAD,YAAW;AAAA,EACP,eAAe,6BAA6B;AAChD,GAAG,mBAAmB,WAAW,2BAA2B,MAAM;;;ACjJ3D,IAAM,kCAAN,cAA8C,MAAM,CAAC,iCAAiC,GAAG,CAAC,SAAS;AACtG,QAAM,aAAa,KAAK;AACxB,QAAME,yCAAwC,KAAK;AAAA;AAAA;AAAA;AAAA,IAI/C,WAAW;AACP,YAAM,UAAU,KAAK,WAAW;AAChC,aAAO,mCAAS;AAAA,IACpB;AAAA;AAAA;AAAA;AAAA;AAAA,IAKA,aAAa,IAAI;AAtBzB;AAuBY,cAAO,UAAK,cAAc,MAAnB,mBAAsB,QAAQ;AAAA,IACzC;AAAA;AAAA;AAAA;AAAA,IAIA,kBAAkB,IAAI;AA5B9B;AA6BY,cAAO,UAAK,mBAAmB,MAAxB,mBAA2B,QAAQ;AAAA,IAC9C;AAAA;AAAA;AAAA;AAAA,IAIA,gBAAgB,IAAI;AAlC5B;AAmCY,cAAO,UAAK,iBAAiB,MAAtB,mBAAyB,QAAQ;AAAA,IAC5C;AAAA;AAAA;AAAA;AAAA,IAIA,kBAAkB,IAAI;AAxC9B;AAyCY,cAAO,UAAK,mBAAmB,MAAxB,mBAA2B,QAAQ;AAAA,IAC9C;AAAA;AAAA;AAAA;AAAA,IAIA,gBAAgB,IAAI;AA9C5B;AA+CY,cAAO,UAAK,wBAAwB,MAA7B,mBAAgC,QAAQ;AAAA,IACnD;AAAA,EACJ;AACA,SAAOA;AACX,CAAC,EAAE;AACH;;;AClDO,IAAM,mBAAN,cAA+B,MAAM,CAAC,KAAK,GAAG,CAAC,SAAS,MAAM,yBAAyB,KAAK;AACnG,CAAC,EAAE;AACH;;;ACGO,IAAM,gCAAN,cAA4C,MAAM;AAAA,EACrD;AAAA,EACA;AAAA,EACA;AACJ,GAAG,CAAC,SAAS;AACT,QAAM,aAAa,KAAK;AACxB,QAAMC,uCAAsC,KAAK;AAAA,IAC7C,cAAc;AACV,YAAM,GAAG,SAAS;AAClB,WAAK,eAAe;AAAA,IACxB;AAAA,IACA,aAAa,MAAM;AAlB3B;AAqBY,iBAAK,YAAL,mBAAc,gBAAgB;AAC9B,iBAAW,aAAa,KAAK,MAAM,IAAI;AAAA,IAC3C;AAAA,IACA,SAAS,QAAQ;AAxBzB;AAyBY,iBAAW,SAAS,KAAK,MAAM,MAAM;AAIrC,OAAC,OAAO,UAAU,GAAC,UAAK,YAAL,mBAAc,YAAS,UAAK,YAAL,mBAAc;AAAA,IAC5D;AAAA,IACA,cAAc,QAAQ,OAAO,QAAQ,QAAQ,oBAAoB,eAAe;AAa5E,UAAI,CAAC,iBAAiB,EAAE,KAAK,kBAAkB,KAAK,kBAAkB,OAAO,KAAK,MAAM,EAAE,KAAK,SAAO,QAAQ,eAAe,OAAO,QAAQ,SAAS,GAAG,CAAC,GAAG;AACxJ,iBAAS;AAAA,MACb;AAEA,YAAM,cAAc,QAAQ,OAAO,QAAQ,QAAQ,oBAAoB,aAAa;AAAA,IACxF;AAAA,EACJ;AACA,SAAOA;AACX,CAAC,EAAE;AACH;;;ACtCO,IAAM,gCAAN,cAA4C,MAAM;AAAA,EACrD;AAAA,EACA;AAAA,EACA;AACJ,GAAG,CAAC,SAAS;AACT,QAAM,aAAa,KAAK;AACxB,QAAMC,uCAAsC,KAAK;AAAA;AAAA;AAAA;AAAA;AAAA,IAK7C,cAAc;AA1BtB;AA2BY,UAAI,GAAC,UAAK,YAAL,mBAAc,uBAAsB;AACrC,YAAI,KAAK,SAAS,KAAK,SAAS,KAAK,SAAS,GAAG;AAC7C,eAAK,QAAQ;AAAA,QACjB;AACA,aAAK,SAAS,EAAE,UAAU,IAAI;AAAA,MAClC;AAAA,IACJ;AAAA;AAAA;AAAA;AAAA,IAIA,aAAa,cAAc,OAAO;AAC9B,iBAAW,aAAa,KAAK,MAAM,WAAW;AAC9C,YAAM,UAAU,KAAK,SAAS;AAE9B,yCAAS,aAAa;AAEtB,WAAK,QAAQ;AAAA,IACjB;AAAA;AAAA;AAAA;AAAA,IAIA,aAAa;AACT,aAAO,WAAW,WAAW,KAAK,IAAI;AAAA,IAC1C;AAAA,IACA,mBAAmB;AACf,YAAM,QAAQ,KAAK,OAAO,KAAK,OAAM,aAAa,GAAG,6BAA6B,KAAM,CAAC,CAAC,EAAE,WAAW,CAAC;AACxG,aAAO,+BAAO;AAAA,IAClB;AAAA;AAAA,IAEA,IAAI,QAAQ;AAxDpB;AAyDY,eAAO,UAAK,YAAL,mBAAc,wBAAuB,OAAO,KAAK;AAAA,IAC5D;AAAA,IACA,IAAI,MAAM,OAAO;AACb,WAAK,SAAS;AAAA,IAClB;AAAA,EACJ;AACA,SAAOA;AACX,CAAC,EAAE;AACH;;;ACjEA,IAAIC,cAA0C,SAAU,YAAY,QAAQ,KAAK,MAAM;AACnF,MAAI,IAAI,UAAU,QAAQ,IAAI,IAAI,IAAI,SAAS,SAAS,OAAO,OAAO,OAAO,yBAAyB,QAAQ,GAAG,IAAI,MAAM;AAC3H,MAAI,OAAO,YAAY,YAAY,OAAO,QAAQ,aAAa;AAAY,QAAI,QAAQ,SAAS,YAAY,QAAQ,KAAK,IAAI;AAAA;AACxH,aAAS,IAAI,WAAW,SAAS,GAAG,KAAK,GAAG;AAAK,UAAI,IAAI,WAAW,CAAC;AAAG,aAAK,IAAI,IAAI,EAAE,CAAC,IAAI,IAAI,IAAI,EAAE,QAAQ,KAAK,CAAC,IAAI,EAAE,QAAQ,GAAG,MAAM;AAChJ,SAAO,IAAI,KAAK,KAAK,OAAO,eAAe,QAAQ,KAAK,CAAC,GAAG;AAChE;AAUA,IAAM,WAAW,OAAO,eAAe;AAChC,IAAM,sBAAsB,OAAO,qBAAqB;AAMxD,IAAM,oBAAN,cAAgC,MAAM;AAAA,EACzC;AAAA,EACA;AACJ,GAAG,CAAC,SAAS;AACT,QAAMC,2BAA0B,KAAK;AAAA,IACjC,cAAc;AACV,YAAM,GAAG,SAAS;AAGlB,WAAK,UAAU;AAAA,IACnB;AAAA,IACA,CAAC,QAAQ,IAAI;AAAA,IAAE;AAAA,EACnB;AACA,EAAAD,YAAW;AAAA,IACP,YAAY,CAAC,GAAG,EAAE,YAAY,MAAM,CAAC;AAAA,EACzC,GAAGC,mBAAkB,WAAW,WAAW,MAAM;AACjD,EAAAD,YAAW;AAAA,IACP,YAAY,EAAE,MAAM,WAAW,cAAc,KAAK,CAAC;AAAA,EACvD,GAAGC,mBAAkB,WAAW,4BAA4B,MAAM;AAClE,EAAAD,YAAW;AAAA,IACP,YAAY;AAAA,EAChB,GAAGC,mBAAkB,WAAW,aAAa,MAAM;AACnD,SAAOA;AACX,CAAC,EAAE;AACH;AAIO,IAAM,iCAAN,cAA6C,oBAAYC,KAAI,EAAE;AAAA,EAClE,WAAW,QAAQ;AACf,WAAO;AAAA,EACX;AAAA,EACA,OAAO,eAAe,QAAQ;AAC1B,UAAM,WAAW,OAAO,YAAY;AACpC,WAAO,OAAO,KAAK,EAAE,mBAAmB,GAAG,SAAS,QAAQ,SAAS,EAAE;AAAA,EAC3E;AACJ;AAMO,IAAM,sBAAN,cAAkC,sBAAsB;AAAA,EAC3D,cAAc;AACV,UAAM,GAAG,SAAS;AAClB,SAAK,UAAU;AAAA,EACnB;AAAA,EACA,iBAAiB;AACb,UAAM,WAAW,KAAK,YAAY;AAClC,WAAO,KAAK,iBAAiB,KAAK,eAAe;AAAA,MAC7C,sCAAsC,IAAI,EAAE,SAAS,CAAC;AAAA,MACtD,qCAAqC,IAAI,EAAE,SAAS,CAAC;AAAA,IACzD;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA,EAIA,cAAc;AACV,UAAM,EAAE,UAAU,IAAI;AACtB,SAAI,uCAAW,UAAS,GAAG;AACvB,iBAAW,YAAY,WAAW;AAC9B,cAAM,cAAc,SAAS,mBAAmB,KAAK,MAAM,KAAK,SAAS;AACzE,YAAI,EAAE,uBAAuB,OAAO;AAChC,iBAAO;AAAA,QACX;AAAA,MACJ;AAAA,IACJ;AACA,WAAO,UAAU,CAAC;AAAA,EACtB;AACJ;AACAF,YAAW;AAAA,EACP,eAAe,eAAe;AAClC,GAAG,oBAAoB,WAAW,QAAQ,MAAM;AAChDA,YAAW;AAAA,EACP,eAAe,8BAA8B;AACjD,GAAG,oBAAoB,WAAW,4BAA4B,MAAM;AAO7D,IAAM,oCAAN,cAAgD,oBAAY,+BAA+B,EAAE;AAAA,EAChG,WAAW,QAAQ;AACf,WAAO;AAAA,EACX;AAAA,EACA,WAAW,eAAe;AACtB,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA,MAKH,cAAc;AAAA,QACV,WAAW;AAAA,UACP,EAAE,WAAW,KAAK;AAAA,QACtB;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,iBAAiB;AACb,UAAM,EAAE,SAAS,IAAI;AACrB,WAAO,OAAO,KAAK,EAAE,mBAAmB,GAAG,SAAS,QAAQ,SAAS,EAAE;AAAA,EAC3E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,gBAAgB,UAAU;AAlI9B;AAmIQ,aAAS,eAAe,IAAI;AAE5B,WAAO,OAAO,UAAU,KAAK,YAAY;AACzC,SAAI,cAAS,cAAT,mBAAoB,QAAQ;AAC5B,eAAS,aAAa,SAAS,SAAS;AAAA,IAC5C;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA,EAIA,UAAU;AACN,UAAM,EAAE,SAAS,IAAI;AACrB,SAAK,gBAAgB,QAAQ;AAAA,EACjC;AACJ;AAKO,IAAM,wCAAN,cAAoD,kCAAkC;AAAA,EACzF,WAAW,QAAQ;AACf,WAAO;AAAA,EACX;AAAA,EACA,WAAW,eAAe;AACtB,WAAO;AAAA,MACH,cAAc;AAAA,QACV,0BAA0B;AAAA,QAC1B,WAAW;AAAA,UACP;AAAA,YACI,oBAAoB;AAAA,YACpB,kBAAkB;AAAA,YAClB,WAAW;AAAA,UACf;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AACJ;AAKO,IAAM,uCAAN,cAAmD,kCAAkC;AAAA,EACxF,WAAW,QAAQ;AACf,WAAO;AAAA,EACX;AAAA,EACA,WAAW,eAAe;AACtB,WAAO;AAAA,MACH,cAAc;AAAA,QACV,0BAA0B;AAAA,QAC1B,WAAW;AAAA,UACP;AAAA,YACI,oBAAoB;AAAA,YACpB,kBAAkB;AAAA,YAClB,WAAW;AAAA,UACf;AAAA,UACA;AAAA,YACI,oBAAoB;AAAA,YACpB,kBAAkB;AAAA,YAClB,WAAW;AAAA,UACf;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AACJ;;;ACpMA,IAAIG,eAA0C,SAAU,YAAY,QAAQ,KAAK,MAAM;AACnF,MAAI,IAAI,UAAU,QAAQ,IAAI,IAAI,IAAI,SAAS,SAAS,OAAO,OAAO,OAAO,yBAAyB,QAAQ,GAAG,IAAI,MAAM;AAC3H,MAAI,OAAO,YAAY,YAAY,OAAO,QAAQ,aAAa;AAAY,QAAI,QAAQ,SAAS,YAAY,QAAQ,KAAK,IAAI;AAAA;AACxH,aAAS,IAAI,WAAW,SAAS,GAAG,KAAK,GAAG;AAAK,UAAI,IAAI,WAAW,CAAC;AAAG,aAAK,IAAI,IAAI,EAAE,CAAC,IAAI,IAAI,IAAI,EAAE,QAAQ,KAAK,CAAC,IAAI,EAAE,QAAQ,GAAG,MAAM;AAChJ,SAAO,IAAI,KAAK,KAAK,OAAO,eAAe,QAAQ,KAAK,CAAC,GAAG;AAChE;AAeO,IAAM,cAAc,OAAO,aAAa;AAExC,IAAM,iBAAN,cAA6B,SAAS;AAAA,EACzC,cAAc;AACV,UAAM,GAAG,SAAS;AAClB,SAAK,6BAA6B,oBAAI,IAAI;AAAA,EAC9C;AACJ;AAEO,IAAM,oBAAN,cAAgCC,aAAY;AAAA,EAC/C,cAAc;AACV,UAAM,GAAG,SAAS;AAClB,SAAK,iBAAiB;AAAA,EAC1B;AAAA,EACA,WAAW,OAAO;AAlCtB;AAsCQ,SAAI,WAAM,MAAM,YAAZ,mBAAqB,kBAAkB;AACvC,YAAM,oCAAoC;AAC1C,YAAM,mCAAmC;AAAA,IAC7C;AACA,UAAM,WAAW,KAAK;AACtB,SAAK,UAAU,6BAA6B,IAAI,IAAI,KAAK,aAAa,0BAA0B;AAAA,EACpG;AAAA,EACA,cAAc,YAAY,kBAAkB,MAAM;AAC9C,QAAI,KAAK,UAAU,2BAA2B,MAAM;AAChD,WAAK,UAAU,2BAA2B,QAAQ,CAAC,uBAAuBC,gBAAe;AACrF,aAAK,MAAMA,aAAY,qBAAqB;AAAA,MAChD,CAAC;AACD,WAAK,UAAU,2BAA2B,MAAM;AAAA,IACpD;AACA,WAAO,MAAM,cAAc,YAAY,eAAe,GAAG,IAAI;AAAA,EACjE;AACJ;AAKO,IAAM,gBAAN,cAA4B,MAAM,CAAC,OAAO,GAAG,CAAC,SAAS;AAC1D,QAAM,aAAa,KAAK;AACxB,QAAMC,uBAAsB,KAAK;AAAA,IAC7B,cAAc;AACV,YAAM,GAAG,SAAS;AAClB,WAAK,eAAe,eAAe,IAAI;AACvC,WAAK,mBAAmB;AACxB,WAAK,iBAAiB;AACtB,WAAK,qBAAqB;AAC1B,WAAK,mBAAmB;AACxB,WAAK,uBAAuB;AAC5B,WAAK,uCAAuC;AAAA,IAChD;AAAA,IACA,IAAI,QAAQ;AACR,YAAM,oBAAoB,KAAK;AAC/B,aAAO,kBAAkB,QAAQ,OAAO,MAAM,kBAAkB,oBAAoB,kBAAkB;AAAA,IAC1G;AAAA,IACA,kCAAkC,cAAc;AA5ExD;AA6EY,UAAI,KAAK,+BAA+B,KAAK;AACzC,yBAAK,SAAQ,YAAb,4BAAuB,YAAY;AAAA,IAC3C;AAAA,IACA,MAAM,YAAY,MAAM;AACpB,UAAI,CAAC,KAAK,WAAW,KAAK,QAAQ;AAC9B;AACJ,WAAK,QAAQ,QAAQ,cAAc;AACnC,UAAI,KAAK,mBAAmB,KAAK,sCAAsC;AAEnE,aAAK,sBAAsB,KAAK,uBAAuB,KAAK;AAE5D,aAAK,qBAAqB;AAAA,MAC9B;AACA,YAAM,wBAAwB,KAAK,QAAQ,kBAAkB;AAC7D,UAAI;AACA,eAAO;AACX,aAAO,WAAW,YAAY,KAAK,MAAM,IAAI;AAAA,IACjD;AAAA,IACA,IAAI,kBAAkB;AAElB,aAAO,KAAK,QAAQ,mBAAmB,MAAM;AAAA,IACjD;AAAA,IACA,IAAI,gBAAgB,OAAO;AACvB,YAAM,kBAAkB;AAAA,IAC5B;AAAA,IACA,MAAM,YAAY,kBAAkB,MAAM;AAtGlD;AAuGY,YAAM,aAAY,gBAAW,UAAX,mBAAkB;AACpC,YAAM,SAAS,WAAW;AAC1B,UAAI,aAAa,QAAQ;AAErB,cAAM,oBAAmB,YAAO,yBAAP,gCAA8B,WAAW;AAClE,mBAAW,MAAM,KAAK,MAAM,YAAY,eAAe,GAAG,IAAI;AAE9D,qBAAO,wBAAP,gCAA6B,WAAW,eAAe;AAAA,MAC3D,OACK;AACD,mBAAW,MAAM,KAAK,MAAM,YAAY,eAAe,GAAG,IAAI;AAAA,MAClE;AAAA,IACJ;AAAA,IACA,MAAM,oBAAoB,mBAAmB;AAGzC,YAAM,EAAE,QAAQ,IAAI;AACpB,UAAI,CAAC,WAAW,QAAQ;AACpB;AACJ,YAAM,EAAE,QAAQ,IAAI;AACpB,YAAM,mBAAmB,oBAAI,IAAI;AACjC,UAAI,WAAW;AACX,gBAAQ,QAAQ,iBAAiB;AACrC,YAAM,EAAE,iBAAiB,qBAAqB,IAAI;AAElD,YAAM,gBAAgB,mBAAmB;AACzC,UAAI,iBAAiB;AACjB,gBAAQ,2BAA2B;AAEnC,YAAI,KAAK;AACL,eAAK,qBAAqB,KAAK;AAAA,MACvC;AACA,cAAQ,gBAAgB;AACxB,cAAQ,wBAAwB;AAEhC,UAAI,KAAK,6BAA6B;AAClC,gBAAQ,QAAQ,YAAY;AAAA,UACxB,OAAO,kBAAkB,QAAQ;AAAA,UACjC,WAAW;AAAA,UACX,OAAO;AAAA,QACX,CAAC;AAAA,MACL;AACA,YAAM,cAAc,kBAAkB;AAGtC,UAAI,YAAY,cAAc;AAC1B,gBAAQ,QAAQ,kBAAkB,EAAE,mBAAmB,iBAAiB,cAAc,CAAC;AAAA,MAC3F;AAGA,cAAQ,QAAQ,WAAW,EAAE,iBAAiB,cAAc,KAAK,CAAC;AAElE,YAAM,IAAI,QAAQ,aAAW;AACzB,mBAAW,MAAM;AA5JjC;AA6JoB,cAAI,CAAC,QAAQ,aAAa;AACtB,gBAAI,CAAC,kBAAkB,YAAY,cAAc;AAE7C,4BAAQ,2BAAR;AACA,kBAAI,WAAW;AACX,wBAAQ,KAAK,sBAAsB;AACvC,oBAAM,UAAU,oBAAI,IAAI;AACxB,yBAAW,SAAS,QAAQ,OAAO,GAAG;AAClC,sBAAM,aAAa,MAAM;AACzB,sBAAM,aAAa,MAAM,SAAS;AAClC,sBAAM,EAAE,OAAAC,OAAM,IAAI;AAClB,oBAAI,MAAM,SAAS,KAAK,CAAC,WAAW,mBAAmB,KAAK,eAAe,aAAaA,kBAAiB;AACrG;AACJ,sBAAM,SAAS,WAAW;AAC1B,sBAAM,QAAQ,OAAO;AAErB,oBAAI,CAAC,QAAQ,IAAI,MAAM,GAAG;AACtB,yBAAO,WAAW,IAAI;AACtB,0BAAQ,IAAI,MAAM;AAAA,gBACtB;AAEA,qBAAI,+BAAO,eAAc,CAAC,iBAAiB,IAAI,KAAK,GAAG;AACnD,wBAAM,kBAAkB;AACxB,mCAAiB,IAAI,KAAK;AAAA,gBAC9B;AAGA,uBAAO,KAAK,aAAaA,OAAM,IAAI,IAAI;AAAA,cAC3C;AACA,kBAAI,YAAY;AAChB,yBAAW,UAAU,SAAS;AAC1B,oBAAI,CAAC,OAAO,oBAAoB,EAAE,GAAG,OAAO,KAAK,aAAa,CAAC,GAAG;AAC9D,8BAAY;AACZ;AAAA,gBACJ;AAAA,cACJ;AACA,kBAAI,WAAW;AACX,2BAAW,UAAU,SAAS;AAC1B,yBAAO,YAAY;AAAA,gBACvB;AACA,kCAAkB,YAAY,OAAO;AACrC,wBAAQ,QAAQ,kBAAkB,EAAE,mBAAmB,iBAAiB,cAAc,CAAC;AACvF,wBAAQ,QAAQ,WAAW,EAAE,iBAAiB,cAAc,KAAK,CAAC;AAAA,cACtE,OACK;AACD,2BAAW,UAAU,SAAS;AAE1B,yBAAO,YAAY,iBAAiB,QAAQ;AAC5C,yBAAO;AACP,yBAAO,SAAS,eAAe,MAAM,IAAI;AAEzC,yBAAO,YAAY;AAAA,gBACvB;AAAA,cACJ;AACA,sBAAQ,sBAAsB;AAC9B,kBAAI,WAAW;AACX,wBAAQ,QAAQ,sBAAsB;AAE1C,sBAAQ,gBAAgB;AACxB,kBAAI,CAAC,WAAW;AACZ,wBAAQ,QAAQ,aAAa,EAAE,SAAS,gBAAgB,CAAC;AAAA,cAC7D;AAEA,4BAAQ,0BAAR,iCAAgC;AAChC,+BAAiB,QAAQ,WAAS,MAAM,iBAAiB,CAAC;AAE1D,kBAAI,eAAe;AACf,wBAAQ,WAAW,cAAc;AACjC,wBAAQ,gBAAgB,cAAc;AACtC,wBAAQ,cAAc,cAAc;AACpC,wBAAQ,gBAAgB,cAAc;AACtC,wBAAQ,qBAAqB,cAAc;AAC3C,wBAAQ,cAAc;AAAA,cAC1B;AAAA,YACJ,OAEK;AACD,sBAAQ,gBAAgB;AAAA,YAC5B;AACA,oBAAQ,QAAQ,mBAAmB,EAAE,iBAAiB,kBAAkB,CAAC;AAAA,UAC7E;AACA,kBAAQ;AAAA,QACZ,GAAG,CAAC;AAAA,MACR,CAAC;AAAA,IACL;AAAA,IACA,CAAC,0BAA0B,OAAO;AAC9B,UAAI,KAAK,uBAAuB,UAAU;AACtC,cAAM,SAAS,KAAK,QAAQ,iBAAiB,IAAI,EAAE,MAAM,CAAC;AAC1D,aAAK,MAAM,YAAY,uBAAuB,QAAQ;AAClD,gBAAM,OAAO,MAAM;AAAA,QACvB;AAAA,MACJ,OACK;AACD,eAAO,OAAO,MAAM,0BAA0B,KAAK;AAAA,MACvD;AAAA,IACJ;AAAA,IACA,OAAO,WAAW,EAAE,QAAQ,aAAa;AAErC,aAAO,KAAK,QAAQ,uBAAuB,QAAQ,WAAW;AAAA,IAClE;AAAA,IACA,OAAO,mBAAmB,EAAE,QAAQ,aAAa;AAC7C,kBAAY,YAAY,cAAc;AAEtC,aAAO,KAAK,QAAQ,+BAA+B,QAAQ,WAAW;AAAA,IAC1E;AAAA,IACA,OAAO,cAAc,EAAE,QAAQ,aAAa;AACxC,kBAAY,YAAY,cAAc;AAEtC,aAAO,KAAK,QAAQ,0BAA0B,QAAQ,WAAW;AAAA,IACrE;AAAA,IACA,CAAC,YAAY,EAAE,QAAQ,aAAa;AAChC,aAAO,MAAM,YAAY,EAAE,QAAQ,WAAW;AAAA,IAClD;AAAA,EACJ;AACA,SAAOD;AACX,CAAC,EAAE;AACH;AAUO,IAAM,wCAAN,cAAoD,oBAAY,+BAA+B,EAAE;AAAA,EACpG,WAAW,QAAQ;AACf,WAAO;AAAA,EACX;AAAA,EACA,iBAAiB;AACb,WAAO,KAAK,EAAE,mBAAmB;AAAA,EACrC;AAAA,EACA,QAAQ,YAAY;AAChB,eAAW,OAAO;AAAA,EACtB;AACJ;AAIO,IAAM,yBAAN,cAAqC,oBAAYE,KAAI,EAAE;AAAA,EAC1D,WAAW,QAAQ;AACf,WAAO;AAAA,EACX;AAAA,EACA,OAAO,eAAe,QAAQ;AAC1B,WAAO,OAAO,KAAK,EAAE,mBAAmB,GAAG,KAAK,oBAAoB,MAAM,CAAC;AAAA,EAC/E;AAAA,EACA,OAAO,oBAAoB,QAAQ;AAC/B,UAAM,SAAS,OAAO,UAAU,EAAE,MAAM;AACxC,WAAO,KAAK,OAAO,CAAC,CAAC;AACrB,WAAO,MAAM,OAAO,IAAI,WAAS,MAAM,QAAQ,MAAM,MAAM,EAAE,EAAE,KAAK,QAAQ,IAAI;AAAA,EACpF;AACJ;AAMO,IAAM,cAAN,cAA0B,sBAAsB;AAAA,EACnD,cAAc;AACV,UAAM,GAAG,SAAS;AAClB,SAAK,UAAU;AAAA,EACnB;AAAA;AAAA;AAAA;AAAA,EAIA,YAAY;AACR,QAAI,CAAC,KAAK,SAAS;AACf,YAAM,SAAS,oBAAI,IAAI;AACvB,WAAK,MAAM,MAAM,QAAQ,CAAC,EAAE,QAAQ,MAAM,OAAO,IAAI,OAAO,CAAC;AAC7D,WAAK,UAAU,CAAC,GAAG,MAAM;AAAA,IAC7B;AACA,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,sCAAsC,YAAY,MAAM,IAAI;AACxD,WAAO,WAAW,cAAc,QAAQ,WAAW,YAAY;AAAA,EACnE;AAAA,EACA,sCAAsC,MAAM,IAAI;AAC5C,UAAM,SAAS,KAAK,UAAU;AAC9B,UAAM,UAAU,OAAO,CAAC,EAAE;AAC1B,UAAM,kBAAkB,QAAQ,mBAAmB;AACnD,WAAO,gBAAgB,KAAK,CAAC,eAAe,KAAK,sCAAsC,YAAY,MAAM,EAAE,CAAC;AAAA,EAChH;AAAA;AAAA;AAAA;AAAA,EAIA,kBAAkB;AACd,QAAI,CAAC,KAAK,eAAe;AACrB,YAAM,SAAS,oBAAI,IAAI;AACvB,YAAM,SAAS,KAAK,UAAU;AAC9B,YAAM,iBAAiB,OAAO;AAC9B,UAAI,YAAY,OAAO,CAAC,GAAG;AAC3B,UAAI,mBAAmB,GAAG;AACtB,YAAK,aAAa,KAAK,sCAAsC,WAAW,SAAS,GAAI;AACjF,iBAAO,IAAI,UAAU;AAAA,QACzB;AAAA,MACJ,OACK;AACD,mBAAW,UAAU,QAAQ;AACzB,qBAAW,UAAU,QAAQ;AACzB,gBAAK,aAAa,KAAK,sCAAsC,QAAQ,MAAM,GAAI;AAC3E,qBAAO,IAAI,UAAU;AAAA,YACzB;AACA,gBAAK,aAAa,KAAK,sCAAsC,QAAQ,MAAM,GAAI;AAC3E,qBAAO,IAAI,UAAU;AAAA,YACzB;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ;AACA,WAAK,gBAAgB,CAAC,GAAG,MAAM;AAAA,IACnC;AACA,WAAO,KAAK;AAAA,EAChB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,iBAAiB;AACb,QAAI,CAAC,KAAK,cAAc;AACpB,WAAK,eAAe,CAAC,KAAK,2CAA2C,IAAI,CAAC;AAAA,IAC9E;AACA,WAAO,KAAK;AAAA,EAChB;AACJ;AACAL,aAAW;AAAA,EACP,eAAe,OAAO;AAC1B,GAAG,YAAY,WAAW,QAAQ,MAAM;AACxCA,aAAW;AAAA,EACP,eAAe,sBAAsB;AACzC,GAAG,YAAY,WAAW,4BAA4B,MAAM;AAC5DA,aAAW;AAAA,EACP,eAAe,qCAAqC;AACxD,GAAG,YAAY,WAAW,8CAA8C,MAAM;;;ACvY9E,IAAIM,eAA0C,SAAU,YAAY,QAAQ,KAAK,MAAM;AACnF,MAAI,IAAI,UAAU,QAAQ,IAAI,IAAI,IAAI,SAAS,SAAS,OAAO,OAAO,OAAO,yBAAyB,QAAQ,GAAG,IAAI,MAAM;AAC3H,MAAI,OAAO,YAAY,YAAY,OAAO,QAAQ,aAAa;AAAY,QAAI,QAAQ,SAAS,YAAY,QAAQ,KAAK,IAAI;AAAA;AACxH,aAAS,IAAI,WAAW,SAAS,GAAG,KAAK,GAAG;AAAK,UAAI,IAAI,WAAW,CAAC;AAAG,aAAK,IAAI,IAAI,EAAE,CAAC,IAAI,IAAI,IAAI,EAAE,QAAQ,KAAK,CAAC,IAAI,EAAE,QAAQ,GAAG,MAAM;AAChJ,SAAO,IAAI,KAAK,KAAK,OAAO,eAAe,QAAQ,KAAK,CAAC,GAAG;AAChE;AAQO,IAAM,sBAAN,cAAkC,MAAM,CAAC,6BAA6B,GAAG,CAAC,SAAS;AACtF,QAAM,aAAa,KAAK;AACxB,QAAMC,6BAA4B,KAAK;AAAA,EACvC;AACA,EAAAD,aAAW;AAAA,IACP,cAAc;AAAA,MACV,QAAQ;AAAA,MACR,UAAU,SAAU,IAAI;AAAE,eAAO,KAAK,aAAa,EAAE;AAAA,MAAG;AAAA,MACxD,kBAAkB;AAAA,QACd,WAAW,WAAS,+BAAO;AAAA,QAC3B,SAAS;AAAA,QACT,SAAS;AAAA,MACb;AAAA,IACJ,GAAG,mBAAmB;AAAA,EAC1B,GAAGC,qBAAoB,WAAW,SAAS,MAAM;AACjD,EAAAD,aAAW;AAAA,IACP,cAAc;AAAA,MACV,QAAQ;AAAA,MACR,UAAU,SAAU,IAAI;AAAE,eAAO,KAAK,gBAAgB,EAAE;AAAA,MAAG;AAAA,MAC3D,kBAAkB;AAAA,QACd,WAAW,cAAY,qCAAU;AAAA,QACjC,SAAS;AAAA,QACT,SAAS;AAAA,MACb;AAAA,IACJ,GAAG,mBAAmB;AAAA,EAC1B,GAAGC,qBAAoB,WAAW,YAAY,MAAM;AAEpD,6BAA2BA,oBAAmB;AAC9C,SAAOA;AACX,CAAC,EAAE;AACH;;;ACpCO,IAAM,6BAAN,cAAyC,MAAM,CAAC,8BAA8B,6BAA6B,GAAG,CAAC,SAAS;AAC3H,QAAM,aAAa,KAAK;AACxB,QAAMC,oCAAmC,KAAK;AAAA,IAC1C,cAAc;AACV,YAAM,GAAG,SAAS;AAClB,WAAK,eAAe;AAAA,IACxB;AAAA,IACA,WAAW,gBAAgB;AACvB,aAAO;AAAA,QACH,YAAY;AAAA,MAChB;AAAA,IACJ;AAAA,IACA,IAAI,KAAK,OAAO;AACZ,WAAK,2BAA2B;AAChC,YAAM,OAAO;AACb,WAAK,2BAA2B;AAAA,IACpC;AAAA,EACJ;AACA,SAAOA;AACX,CAAC,EAAE;AACH;;;ACpBO,IAAM,kCAAN,cAA8C,MAAM,CAAC,mCAAmC,6BAA6B,GAAG,CAAC,SAAS;AACrI,QAAM,aAAa,KAAK;AACxB,QAAMC,yCAAwC,KAAK;AAAA,IAC/C,cAAc;AACV,YAAM,GAAG,SAAS;AAClB,WAAK,eAAe;AAAA,IACxB;AAAA,IACA,WAAW,gBAAgB;AACvB,aAAO;AAAA,QACH,MAAM;AAAA,QACN,YAAY;AAAA,MAChB;AAAA,IACJ;AAAA,EACJ;AACA,SAAOA;AACX,CAAC,EAAE;AACH;;;ACjBO,IAAM,6BAAN,cAAyC,MAAM,CAAC,8BAA8B,6BAA6B,GAAG,CAAC,SAAS;AAC3H,QAAM,aAAa,KAAK;AACxB,QAAMC,oCAAmC,KAAK;AAAA,IAC1C,cAAc;AACV,YAAM,GAAG,SAAS;AAClB,WAAK,eAAe;AAAA,IACxB;AAAA,IACA,IAAI,KAAK,OAAO;AACZ,WAAK,4BAA4B;AACjC,YAAM,OAAO;AACb,WAAK,4BAA4B;AAAA,IACrC;AAAA,EACJ;AACA,SAAOA;AACX,CAAC,EAAE;AACH;;;AChBO,IAAI;AAAA,CACV,SAAUC,cAAa;AACpB,EAAAA,aAAY,cAAc,IAAI;AAC9B,EAAAA,aAAY,eAAe,IAAI;AAC/B,EAAAA,aAAY,aAAa,IAAI;AACjC,GAAG,gBAAgB,cAAc,CAAC,EAAE;AAE7B,IAAM,eAAe,OAAO,WAAW;AACvC,IAAM,aAAa,OAAO,SAAS;AACnC,IAAM,cAAc,OAAO,UAAU;AAErC,IAAM,mBAAmB,QAAQ,IAAI;AAAA,EACxC,QAAQ;AAAA,EACR,QAAQ,oBAAI,IAAI,CAAC,aAAa,UAAU,CAAC;AAC7C,CAAC;AACM,IAAM,iBAAiB,QAAQ,IAAI;AAAA,EACtC,QAAQ;AAAA,EACR,QAAQ,oBAAI,IAAI,CAAC,aAAa,YAAY,CAAC;AAC/C,CAAC;AACM,IAAM,kBAAkB,QAAQ,IAAI;AAAA,EACvC,QAAQ;AAAA,EACR,QAAQ,oBAAI,IAAI,CAAC,cAAc,UAAU,CAAC;AAC9C,CAAC;AAEM,IAAM,sBAAsB,iBAAiB,IAAI;AAAA,EACpD,WAAW,oBAAI,IAAI,CAAC,cAAc,YAAY,WAAW,CAAC;AAAA,EAC1D,UAAU,oBAAI,IAAI,CAAC,kBAAkB,gBAAgB,eAAe,CAAC;AACzE,CAAC;AACM,IAAM,mCAAmC,gBAAgB,IAAI;AAAA,EAChE,aAAa;AAAA,EACb,2BAA2B,oBAAI,IAAI,CAAC,cAAc,CAAC;AACvD,CAAC;AACM,IAAM,oCAAoC,gBAAgB,IAAI;AAAA,EACjE,aAAa;AAAA,EACb,2BAA2B,oBAAI,IAAI,CAAC,gBAAgB,CAAC;AACzD,CAAC;AAEM,IAAM,gBAAN,cAA4B,2BAA2B;AAAA,EAC1D,eAAe,aAAa;AACxB,QAAI,gBAAgB,YAAY;AAC5B,WAAK,sBAAsB,YAAY;AAC3C,QAAI,gBAAgB,YAAY;AAC5B,WAAK,sBAAsB,UAAU;AACzC,QAAI,gBAAgB,YAAY;AAC5B,WAAK,sBAAsB,WAAW;AAAA,EAC9C;AACJ;AAEO,IAAM,0BAAN,cAAsC,gBAAgB,IAAI,kBAAkB,EAAE;AAAA,EACjF,SAAS,IAAI,IAAI;AACb,UAAM,cAAc,GAAG;AACvB,UAAM,cAAc,GAAG;AACvB,UAAM,MAAM,YAAY,IAAI,YAAY,MAAM,YAAY,IAAI,YAAY,KACnE,YAAY,IAAI,UAAU,MAAM,YAAY,IAAI,UAAU,KAC1D,YAAY,IAAI,WAAW,MAAM,YAAY,IAAI,WAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAa/D,YAAY,IAAI,YAAY,MAAM,qBAC3B,YAAY,IAAI,UAAU,MAAM,qBAChC,YAAY,IAAI,WAAW,MAAM;AAC5C,WAAO;AAAA,EACX;AACJ;;;AC7EA,IAAIC,eAA0C,SAAU,YAAY,QAAQ,KAAK,MAAM;AACnF,MAAI,IAAI,UAAU,QAAQ,IAAI,IAAI,IAAI,SAAS,SAAS,OAAO,OAAO,OAAO,yBAAyB,QAAQ,GAAG,IAAI,MAAM;AAC3H,MAAI,OAAO,YAAY,YAAY,OAAO,QAAQ,aAAa;AAAY,QAAI,QAAQ,SAAS,YAAY,QAAQ,KAAK,IAAI;AAAA;AACxH,aAAS,IAAI,WAAW,SAAS,GAAG,KAAK,GAAG;AAAK,UAAI,IAAI,WAAW,CAAC;AAAG,aAAK,IAAI,IAAI,EAAE,CAAC,IAAI,IAAI,IAAI,EAAE,QAAQ,KAAK,CAAC,IAAI,EAAE,QAAQ,GAAG,MAAM;AAChJ,SAAO,IAAI,KAAK,KAAK,OAAO,eAAe,QAAQ,KAAK,CAAC,GAAG;AAChE;AAaO,IAAM,mBAAN,cAA+B,MAAM,CAAC,6BAA6B,GAAG,CAAC,SAAS;AACnF,QAAMC,0BAAyB,KAAK;AAAA,IAChC,cAAc,IAAI,aAAa,OAAO,UAAU;AAC5C,YAAM,uBAAuB,KAAK,wBAAwB;AAC1D,YAAM,MAAM;AAEZ,UAAI,YAAY,wBAAwB,oBAAoB,qBAAqB,CAAC,qBAAqB,SAAS,GAAG,GAAG;AAClH,6BAAqB,IAAI,QAAQ;AAAA,MACrC;AACA,SAAG,YAAY,UAAU,MAAM,KAAK,MAAM,IAAI,aAAa,OAAO,QAAQ;AAAA,IAC9E;AAAA,IACA,gBAAgB,SAAS;AA7BjC;AA8BY,cAAO,UAAK,wBAAwB,MAA7B,mBAAgC,QAAQ;AAAA,IACnD;AAAA;AAAA;AAAA;AAAA,IAIA,CAAC,6BAA6B;AAC1B,UAAI,WAAW,MAAM,KAAK,EAAE;AAC5B,UAAI,CAAC,UAAU;AACX,cAAM,UAAU,KAAK,WAAW;AAChC,mBAAW,MAAM,QAAQ,EAAE;AAAA,MAC/B;AAEA,YAAM,SAAS,EAAE;AACjB,aAAO;AAAA,IACX;AAAA;AAAA,IAEA,wBAAwB,WAAW,UAAU,UAAU;AACnD,UAAI,CAAC,MAAM,wBAAwB,WAAW,UAAU,QAAQ,GAAG;AAC/D,eAAO;AAAA,MACX;AACA,YAAM,EAAE,QAAQ,IAAI;AAGpB,UAAI,cAAc,cAAc,SAAS;AACrC,cAAM,EAAE,qBAAqB,IAAI;AACjC,eAAO,qBAAqB,SAAS,QAAQ,MAAM,qBAAqB,QAAQ,QAAQ;AAAA,MAC5F;AACA,aAAO;AAAA,IACX;AAAA,EACJ;AACA,EAAAD,aAAW;AAAA,IACP,MAAM;AAAA,MACF,UAAU,MAAM;AAAA,IACpB,CAAC;AAAA,EACL,GAAGC,kBAAiB,WAAW,qBAAqB,MAAM;AAC1D,EAAAD,aAAW;AAAA,IACP,cAAc;AAAA,MACV,kBAAkB;AAAA,QACd,SAAS;AAAA;AAAA;AAAA,QAGT,WAAW,cAAY,aAAa,SAAY,UAAa,qCAAU,OAAM;AAAA,QAC7E,SAAS;AAAA,MACb;AAAA,MACA,UAAU,SAAU,SAAS;AACzB,eAAO,KAAK,gBAAgB,OAAO;AAAA,MACvC;AAAA,MACA,MAAM;AAAA,IACV,GAAG,mBAAmB;AAAA,EAC1B,GAAGC,kBAAiB,WAAW,YAAY,MAAM;AACjD,EAAAD,aAAW;AAAA,IACP,MAAM,UAAU;AAAA,EACpB,GAAGC,kBAAiB,WAAW,iBAAiB,IAAI;AACpD,EAAAD,aAAW;AAAA,IACP,UAAU,mBAAmB;AAAA,EACjC,GAAGC,kBAAiB,WAAW,8BAA8B,IAAI;AAEjE,6BAA2BA,iBAAgB;AAC3C,SAAOA;AACX,CAAC,EAAE;AACH;AAIO,IAAM,2BAAN,cAAuC,MAAM,CAAC,GAAG,CAAC,SAAS;AAC9D,QAAM,4BAA4B,KAAK;AAAA,IACnC,cAAc;AACV,YAAM,GAAG,SAAS;AAClB,WAAK,yBAAyB,oBAAI,IAAI;AAAA,IAC1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAMA,iBAAiB,WAAW;AACxB,YAAMC,cAAa,gBAAgB,SAAS;AAC5C,UAAIA,YAAW,WAAW;AACtB,cAAM,IAAI,MAAM,yBAAyB;AAC7C,MAAAA,YAAW,KAAK,CAAC,WAAW,cAAc;AACtC,YAAI,UAAU,aAAa,UAAU;AACjC,iBAAO;AAAA;AAEP,iBAAO;AAAA,MACf,CAAC;AACD,YAAM,OAAOA,YAAW,IAAI,cAAY,SAAS,aAAa,GAAG,EAAE,KAAK,EAAE;AAC1E,YAAM,eAAeA,YAAW,IAAI,cAAY,SAAS,UAAU,GAAG,EAAE,KAAK,EAAE;AAC/E,YAAM,SAAS,KAAK,uBAAuB,IAAI,IAAI;AACnD,UAAI;AACJ,UAAI,UAAU,OAAO,iBAAiB;AAClC,cAAM,OAAO;AAAA,WACZ;AACD,cAAM,IAAI,sBAAsB,EAAE,gBAAgBA,YAAW,IAAI,cAAY,SAAS,aAAa,EAAE,CAAC;AACtG,aAAK,uBAAuB,IAAI,MAAM;AAAA,UAClC;AAAA,UACA,OAAO;AAAA,QACX,CAAC;AAAA,MACL;AACA,aAAO;AAAA,IACX;AAAA,EACJ;AACA,SAAO;AACX,CAAC,EAAE;AACH;;;ACrIA,IAAIC,eAA0C,SAAU,YAAY,QAAQ,KAAK,MAAM;AACnF,MAAI,IAAI,UAAU,QAAQ,IAAI,IAAI,IAAI,SAAS,SAAS,OAAO,OAAO,OAAO,yBAAyB,QAAQ,GAAG,IAAI,MAAM;AAC3H,MAAI,OAAO,YAAY,YAAY,OAAO,QAAQ,aAAa;AAAY,QAAI,QAAQ,SAAS,YAAY,QAAQ,KAAK,IAAI;AAAA;AACxH,aAAS,IAAI,WAAW,SAAS,GAAG,KAAK,GAAG;AAAK,UAAI,IAAI,WAAW,CAAC;AAAG,aAAK,IAAI,IAAI,EAAE,CAAC,IAAI,IAAI,IAAI,EAAE,QAAQ,KAAK,CAAC,IAAI,EAAE,QAAQ,GAAG,MAAM;AAChJ,SAAO,IAAI,KAAK,KAAK,OAAO,eAAe,QAAQ,KAAK,CAAC,GAAG;AAChE;AAwBO,IAAM,iBAAN,cAA6B,MAAM,CAAC,gBAAgB,GAAG,CAAC,SAAS;AACpE,QAAM,aAAa,KAAK;AACxB,QAAMC,wBAAuB,KAAK;AAAA,IAC9B,CAAC,oBAAoB,OAAO;AAIxB,YAAM,WAAW,MAAM;AACvB,YAAM,kBAAkB,OAAO,KAAK,kBAAkB,KAAK;AAE3D,YAAM,wBAAwB,MAAM,oBAAoB,KAAK,EAAE,SAAS;AACxE,YAAM,mBAAmB,wBAAyB,sBAAsB,CAAC,IAAI,YAAY,eAAe,YAAY,cAAe;AACnI,UAAI;AACA,wBAAgB,eAAe,gBAAgB;AAEnD,YAAM,sBAAsB,MAAM,oBAAoB,KAAK,EAAE,OAAO;AACpE,YAAM,iBAAiB,sBAAuB,oBAAoB,CAAC,IAAI,YAAY,eAAe,YAAY,gBAAiB;AAC/H,UAAI;AACA,wBAAgB,eAAe,cAAc;AAEjD,YAAM,iBAAiB,MAAM,KAAK,EAAE;AACpC,YAAM,uBAAuB,MAAM,oBAAoB,KAAK,EAAE,QAAQ;AACtE,UAAI;AACJ,UAAI,sBAAsB;AACtB,gBAAQ,qBAAqB,CAAC,GAAG;AAAA,UAC7B,KAAK;AACD,kCAAsB,YAAY;AAClC;AAAA,UACJ,KAAK;AACD,kCAAsB,YAAY;AAClC;AAAA,QACR;AAAA,MACJ;AACA,UAAI,CAAC,uBAAuB,gBAAgB,iBAAiB,WAAW,GAAG;AACvE,8BAAsB,mBAAmB,UAAU,WAAW,mBAAmB,UAAU,OAAO,YAAY,gBAAgB,YAAY;AAAA,MAC9I;AACA,UAAI;AACA,wBAAgB,eAAe,mBAAmB;AACtD,aAAO;AAAA,IACX;AAAA,IACA,CAAC,kBAAkB,GAAG;AAClB,YAAM,kBAAkB,KAAK,gBAAgB,CAAC;AAC9C,YAAM,kBAAkB,gBAAgB,IAAI;AAAA,QACxC,SAAS,KAAK,uBAAuB,CAAC;AAAA,MAC1C,CAAC;AACD,sBAAgB,YAAY,GAAG,KAAK,EAAE,WAAW,YAAY;AAC7D,sBAAgB,YAAY,GAAG,KAAK,EAAE,SAAS,UAAU;AACzD,sBAAgB,YAAY,GAAG,KAAK,EAAE,UAAU,WAAW;AAC3D,aAAO;AAAA,IACX;AAAA,IACA,uBAAuB,GAAG;AACtB,YAAM,YAAY,EAAE,KAAK,EAAE,SAAS;AACpC,aAAO,cAAc,UAAU,WAAW,cAAc,UAAU,OAAO,mCAAmC;AAAA,IAChH;AAAA,IACA,gBAAgB,GAAG;AACf,aAAO;AAAA,IACX;AAAA,IACA,wBAAwB,IAAI,OAAO,aAAa;AAC5C,YAAM,aAAa,KAAK,gBAAgB,YAAY,YAAY,EAAE,IAAI;AAAA,QAClE,SAAS,KAAK,uBAAuB,YAAY,YAAY;AAAA,MACjE,CAAC;AACD,iBAAW,qBAAqB,YAAY;AAC5C,iBAAW,qBAAqB,UAAU;AAC1C,iBAAW,qBAAqB,WAAW;AAC3C,aAAO;AAAA,IACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAQA,CAAC,mBAAmB,MAAM,WAAW;AACjC,YAAM,WAAW,MAAM,KAAK,EAAE;AAC9B,UAAI,CAAC;AACD,eAAO;AACX,YAAM,cAAc,SAAS,mBAAmB,MAAM,SAAS;AAC/D,UAAI,uBAAuB,MAAM;AAC7B,eAAO;AAAA,MACX,OACK;AACD,cAAM,SAAS,oBAAoB,IAAI;AAAA,UACnC,WAAW,CAAC,QAAQ;AAAA,UACpB,OAAO;AAAA,UACP;AAAA,UACA;AAAA,QACJ,CAAC;AACD,aAAK,MAAM,YAAY,uBAAuB,QAAQ;AAClD,gBAAM,OAAO,MAAM;AAAA,QACvB,OACK;AACD,iBAAO;AAAA,QACX;AAAA,MACJ;AAAA,IACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAUA,CAAC,gBAAgB,MAAM,WAAW,UAAU,MAAM;AAC9C,YAAM,eAAe,MAAM,KAAK,EAAE;AAElC,UAAI,QAAQ,SAAS,cAAc;AAC/B,mBAAW,OAAO,KAAK,WAAW,EAAE,iBAAiB,UAAU,MAAM,YAAY;AAAA,MACrF;AACA,aAAO,OAAO,KAAK,oCAAoC,MAAM,WAAW,QAAQ;AAAA,IACpF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAQA,aAAa,MAAM,eAAe,MAAM;AACpC,YAAM,EAAE,OAAO,QAAQ,IAAI;AAC3B,UAAI,OAAO;AACP,cAAM,MAAM,KAAK,EAAE,WAAW,MAAM,YAAY;AAChD,eAAO,MAAM,YAAY;AAAA,MAC7B,OACK;AACD,aAAK,EAAE,UAAU,OAAO;AAExB,eAAO,mCAAS;AAAA,MACpB;AAAA,IACJ;AAAA,IACA,eAAe,IAAI,aAAa,OAAO,MAAM,eAAe,MAAM;AAO9D,UAAI,CAAC,YAAY,aAAa,cAAc,EAAE,KAAK,QAAQ;AACvD;AACJ,UAAI,CAAC,KAAK,WAAW,EAAE,gBAAgB;AAEnC,aAAK,EAAE,YAAY,MAAM,KAAK,EAAE,aAAa,aAAa,QAAW,QAAQ,IAAI;AAAA,MACrF;AACA,SAAG,YAAY,UAAU,MAAM,KAAK,MAAM,IAAI,aAAa,OAAO,MAAM,YAAY;AAAA,IACxF;AAAA;AAAA;AAAA;AAAA;AAAA,IAKA,CAAC,qBAAqB;AAClB,YAAM,WAAW,MAAM,KAAK,EAAE;AAC9B,YAAM,YAAY,SAAS,WAAW,IAAI,YAAY;AACtD,UAAI,cAAc,mBAAmB;AACjC,eAAO,OAAO,KAAK,2BAA2B;AAAA,MAClD,WACS,cAAc,iBAAiB,WAAW;AAC/C,eAAO,OAAO,KAAK,uBAAuB;AAAA,MAC9C,OACK;AACD,cAAM,IAAI,MAAM,iCAAiC;AAAA,MACrD;AAAA,IACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IASA,CAAC,yBAAyB;AACtB,aAAO,OAAO,KAAK,oCAAoC,MAAM,KAAK,EAAE,SAAS,OAAO,MAAM,KAAK,EAAE,QAAQ;AAAA,IAC7G;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAQA,CAAC,6BAA6B;AAC1B,YAAM,UAAU,KAAK,WAAW;AAChC,YAAM,YAAY,MAAM;AACxB,YAAM,oBAAoB,MAAM,KAAK,EAAE;AACvC,aAAQ,CAAC,qBAAqB,QAAQ,2CAA4C,OAAO,KAAK,mBAAmB,WAAW,IAAI,IAAI;AAAA,IACxI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAQA,CAAC,oCAAoC,UAAU,WAAW,UAAU;AAChE,YAAM,eAAe,MAAM,KAAK,EAAE;AAClC,YAAM,WAAW,MAAM,KAAK,EAAE;AAC9B,YAAM,UAAU,KAAK,WAAW;AAChC,UAAI,CAAC,YAAY,YAAY,QAAQ;AACjC,eAAO;AAEX,kBAAY,cAAc,SAAY,OAAO;AAC7C,UAAI,WAAW;AACX,eAAO,SAAS,iBAAiB,UAAU,OAAO,QAAQ,iBAAiB,UAAU,cAAc,SAAS,WAAW,CAAC;AAAA,MAC5H,OACK;AACD,eAAO,SAAS,mBAAmB,UAAU,OAAO,QAAQ,iBAAiB,UAAU,cAAc,SAAS,WAAW,CAAC;AAAA,MAC9H;AAAA,IACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IASA,WAAW,MAAM,eAAe,OAAO;AACnC,YAAM,EAAE,OAAO,QAAQ,IAAI;AAC3B,UAAI,OAAO;AACP,cAAM,MAAM,KAAK,EAAE,SAAS,MAAM,YAAY;AAC9C,eAAO,MAAM,YAAY;AAAA,MAC7B,OACK;AACD,aAAK,EAAE,QAAQ,OAAO;AAEtB,eAAO,mCAAS;AAAA,MACpB;AAAA,IACJ;AAAA,IACA,aAAa,IAAI,aAAa,OAAO,MAAM,eAAe,OAAO;AAC7D,UAAI,CAAC,YAAY,aAAa,cAAc,EAAE,KAAK,QAAQ;AACvD;AACJ,UAAI,CAAC,KAAK,WAAW,EAAE,gBAAgB;AAEnC,aAAK,EAAE,YAAY,MAAM,KAAK,EAAE,aAAa,aAAa,QAAW,QAAQ,IAAI;AAAA,MACrF;AACA,SAAG,YAAY,UAAU,MAAM,KAAK,MAAM,IAAI,aAAa,OAAO,MAAM,YAAY;AAAA,IACxF;AAAA;AAAA;AAAA;AAAA;AAAA,IAKA,CAAC,mBAAmB;AAChB,YAAM,WAAW,MAAM,KAAK,EAAE;AAC9B,YAAM,YAAY,SAAS,WAAW,IAAI,UAAU;AACpD,UAAI,cAAc,mBAAmB;AACjC,eAAO,OAAO,KAAK,yBAAyB;AAAA,MAChD,WACS,cAAc,eAAe,WAAW;AAC7C,eAAO,OAAO,KAAK,qBAAqB;AAAA,MAG5C,OACK;AACD,cAAM,IAAI,MAAM,+BAA+B;AAAA,MACnD;AAAA,IACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IASA,CAAC,uBAAuB;AACpB,aAAO,OAAO,KAAK,oCAAoC,MAAM,KAAK,EAAE,WAAW,MAAM,MAAM,KAAK,EAAE,QAAQ;AAAA,IAC9G;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAQA,CAAC,2BAA2B;AACxB,YAAM,UAAU,KAAK,WAAW;AAChC,YAAM,UAAU,MAAM;AACtB,YAAM,oBAAoB,MAAM,KAAK,EAAE;AACvC,aAAQ,CAAC,qBAAqB,QAAQ,2CAA4C,OAAO,KAAK,mBAAmB,SAAS,KAAK,IAAI;AAAA,IACvI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAQA,YAAY,MAAM;AACd,YAAM,WAAW,KAAK;AACtB,aAAO,SAAS,SAAY,KAAK,WAAW,EAAE,gBAAgB,UAAU,KAAK,cAAc,IAAI,IAAI;AAAA,IACvG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAQA,YAAY,UAAU,MAAM,WAAW;AACnC,YAAM,EAAE,OAAO,QAAQ,IAAI;AAC3B,UAAI,OAAO;AAOP,YAAI,aAAa,QAAW;AACxB,gBAAM,MAAM,KAAK,EAAE,UAAU,UAAU,MAAM,SAAS;AACtD,iBAAO,MAAM,YAAY;AAAA,QAC7B;AAAA,MACJ,OACK;AACD,cAAM,QAAQ,EAAE,SAAS;AACzB,aAAK,EAAE,SAAS,OAAO;AACvB,YAAI,QAAQ;AACR,gBAAM,eAAe,KAAK,EAAE,aAAa,OAAO;AAEpD,aAAK,IAAI,KAAK;AAEd,eAAO,mCAAS;AAAA,MACpB;AAAA,IACJ;AAAA,IACA,gBAAgB,QAAQ;AACpB,YAAM,IAAI,MAAM,2BAA2B;AAAA,IAC/C;AAAA,IACA,cAAc,IAAI,aAAa,OAAO,UAAU,MAAM,YAAY,QAAW;AACzE,UAAI,WAAW;AACX,mBAAW;AACf,UAAI,CAAC,YAAY,aAAa,cAAc,EAAE,KAAK,YAAY;AAC3D;AACJ,UAAI,CAAC,KAAK,WAAW,EAAE,gBAAgB;AAEnC,aAAK,EAAE,YAAY,MAAM,KAAK,EAAE,aAAa,aAAa,QAAW,YAAY,IAAI;AAAA,MACzF;AACA,SAAG,YAAY,UAAU,MAAM,KAAK,MAAM,IAAI,aAAa,OAAO,UAAU,SAAS;AACrF,UAAI,QAAQ;AACR,oBAAY,MAAM,KAAK,EAAE,cAAc,IAAI;AAAA,IACnD;AAAA;AAAA;AAAA;AAAA;AAAA,IAKA,CAAC,oBAAoB;AACjB,YAAM,WAAW,MAAM,KAAK,EAAE;AAC9B,YAAM,YAAY,SAAS,WAAW,IAAI,WAAW;AACrD,UAAI,cAAc,mBAAmB;AACjC,eAAO,OAAO,KAAK,0BAA0B;AAAA,MACjD,WACS,cAAc,gBAAgB,WAAW;AAC9C,eAAO,OAAO,KAAK,sBAAsB;AAAA,MAG7C,OACK;AACD,cAAM,IAAI,MAAM,gCAAgC;AAAA,MACpD;AAAA,IACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAUA,CAAC,wBAAwB;AACrB,YAAM,YAAY,MAAM,KAAK,EAAE;AAC/B,YAAM,UAAU,MAAM,KAAK,EAAE;AAC7B,UAAI,CAAC,aAAa,CAAC;AACf,eAAO;AACX,UAAI,YAAY,SAAS;AACrB,cAAM,MAAM,KAAK,EAAE,UAAU,GAAG,IAAI;AAAA,MACxC,OACK;AACD,eAAO,OAAO,KAAK,2BAA2B,WAAW,OAAO;AAAA,MACpE;AAAA,IACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAQA,CAAC,4BAA4B;AACzB,aAAO,MAAM;AAAA,IACjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAQA,CAAC,2BAA2B,WAAW,SAAS,cAAc;AAC1D,UAAI,CAAC,aAAa,CAAC;AACf,eAAO;AACX,UAAI,CAAC;AACD,uBAAe,MAAM,KAAK,EAAE;AAChC,YAAM,WAAW,MAAM,KAAK,EAAE;AAC9B,YAAM,UAAU,KAAK,WAAW;AAChC,aAAO,OAAO,QAAQ,iBAAiB,SAAS,oBAAoB,WAAW,OAAO,GAAG,SAAS,aAAa,YAAY;AAAA,IAC/H;AAAA;AAAA;AAAA;AAAA,IAIA,CAAC,6BAA6B;AAC1B,YAAM,WAAW,MAAM,KAAK,EAAE;AAC9B,UAAI;AACJ,YAAM,qBAAqB,SAAS,WAAW,IAAI,WAAW;AAC9D,UAAI,uBAAuB,mBAAmB;AAC1C,iCAAyB,MAAM,KAAK,EAAE;AAAA,MAC1C,WACS,uBAAuB,gBAAgB,WAAW;AACvD,iCAAyB,OAAO,KAAK,2BAA2B,MAAM,0BAA0B,KAAK,EAAE,SAAS,GAAG,MAAM,0BAA0B,KAAK,EAAE,OAAO,CAAC;AAAA,MACtK;AACA,aAAO;AAAA,IACX;AAAA;AAAA,IAEA,CAAC,6BAA6B;AAC1B,YAAM,oBAAoB,MAAM,KAAK,EAAE;AACvC,YAAM,UAAU,KAAK,WAAW;AAChC,aAAO,qBAAqB,CAAC,QAAQ,qDAC/B,QAAQ,kBACR,OAAO,MAAM,2BAA2B;AAAA,IAClD;AAAA,EACJ;AACA,EAAAD,aAAW;AAAA,IACP,YAAY,EAAE,MAAM,OAAO,GAAG,EAAE,WAAW,cAAc,CAAC;AAAA,EAC9D,GAAGC,gBAAe,WAAW,aAAa,MAAM;AAChD,EAAAD,aAAW;AAAA,IACP,YAAY,EAAE,MAAM,OAAO,GAAG,EAAE,WAAW,cAAc,CAAC;AAAA,EAC9D,GAAGC,gBAAe,WAAW,WAAW,MAAM;AAC9C,EAAAD,aAAW;AAAA,IACP,YAAY,EAAE,MAAM,UAAU,WAAW,KAAK,CAAC;AAAA,EACnD,GAAGC,gBAAe,WAAW,YAAY,MAAM;AAC/C,EAAAD,aAAW;AAAA,IACP,YAAY,EAAE,MAAM,UAAU,cAAc,SAAS,IAAI,GAAG,EAAE,WAAW,CAAC,SAAS,WAAW,cAAc,IAAI,KAAK,SAAS,IAAI,CAAC;AAAA,EACvI,GAAGC,gBAAe,WAAW,gBAAgB,MAAM;AACnD,EAAAD,aAAW;AAAA,IACP,YAAY,EAAE,MAAM,UAAU,cAAc,UAAU,QAAQ,GAAG,EAAE,MAAM,KAAK,CAAC;AAAA,EACnF,GAAGC,gBAAe,WAAW,aAAa,MAAM;AAChD,EAAAD,aAAW;AAAA,IACP,MAAM,EAAE,eAAe,wBAAwB,CAAC;AAAA,EACpD,GAAGC,gBAAe,WAAW,cAAc,MAAM;AACjD,EAAAD,aAAW;AAAA,IACP,YAAY,EAAE,MAAM,WAAW,cAAc,MAAM,CAAC;AAAA,EACxD,GAAGC,gBAAe,WAAW,qBAAqB,MAAM;AACxD,EAAAD,aAAW;AAAA,IACP,YAAY,EAAE,MAAM,WAAW,cAAc,MAAM,CAAC;AAAA,EACxD,GAAGC,gBAAe,WAAW,eAAe,MAAM;AAClD,EAAAD,aAAW;AAAA,IACP,UAAU,YAAY;AAAA,EAC1B,GAAGC,gBAAe,WAAW,uBAAuB,IAAI;AACxD,EAAAD,aAAW;AAAA,IACP,eAAe,YAAY;AAAA,EAC/B,GAAGC,gBAAe,WAAW,2BAA2B,IAAI;AAC5D,EAAAD,aAAW;AAAA,IACP,MAAM,WAAW;AAAA,EACrB,GAAGC,gBAAe,WAAW,kBAAkB,IAAI;AACnD,EAAAD,aAAW;AAAA,IACP,UAAU,WAAW;AAAA,EACzB,GAAGC,gBAAe,WAAW,sBAAsB,IAAI;AACvD,EAAAD,aAAW;AAAA,IACP,MAAM,SAAS;AAAA,EACnB,GAAGC,gBAAe,WAAW,gBAAgB,IAAI;AACjD,EAAAD,aAAW;AAAA,IACP,UAAU,SAAS;AAAA,EACvB,GAAGC,gBAAe,WAAW,oBAAoB,IAAI;AACrD,EAAAD,aAAW;AAAA,IACP,MAAM,UAAU;AAAA,EACpB,GAAGC,gBAAe,WAAW,iBAAiB,IAAI;AAClD,EAAAD,aAAW;AAAA,IACP,UAAU,UAAU;AAAA,EACxB,GAAGC,gBAAe,WAAW,qBAAqB,IAAI;AACtD,SAAOA;AACX,CAAC,EAAE;AACH;;;AC9fA,IAAIC,eAA0C,SAAU,YAAY,QAAQ,KAAK,MAAM;AACnF,MAAI,IAAI,UAAU,QAAQ,IAAI,IAAI,IAAI,SAAS,SAAS,OAAO,OAAO,OAAO,yBAAyB,QAAQ,GAAG,IAAI,MAAM;AAC3H,MAAI,OAAO,YAAY,YAAY,OAAO,QAAQ,aAAa;AAAY,QAAI,QAAQ,SAAS,YAAY,QAAQ,KAAK,IAAI;AAAA;AACxH,aAAS,IAAI,WAAW,SAAS,GAAG,KAAK,GAAG;AAAK,UAAI,IAAI,WAAW,CAAC;AAAG,aAAK,IAAI,IAAI,EAAE,CAAC,IAAI,IAAI,IAAI,EAAE,QAAQ,KAAK,CAAC,IAAI,EAAE,QAAQ,GAAG,MAAM;AAChJ,SAAO,IAAI,KAAK,KAAK,OAAO,eAAe,QAAQ,KAAK,CAAC,GAAG;AAChE;AAYO,IAAM,0BAAN,cAAsC,MAAM,CAAC,gBAAgB,2BAA2B,GAAG,CAAC,SAAS;AACxG,QAAM,aAAa,KAAK;AACxB,QAAMC,iCAAgC,KAAK;AAAA,IACvC,IAAI,cAAc;AACd,aAAO,KAAK,WAAW,CAAC,GAAG,KAAK,QAAQ,IAAI,CAAC;AAAA,IACjD;AAAA,EACJ;AACA,EAAAD,aAAW;AAAA,IACP,cAAc,CAAC,GAAG,gBAAgB;AAAA,EACtC,GAAGC,yBAAwB,WAAW,YAAY,MAAM;AACxD,SAAOA;AACX,CAAC,EAAE;AACH;;;AC7BA,IAAIC,eAA0C,SAAU,YAAY,QAAQ,KAAK,MAAM;AACnF,MAAI,IAAI,UAAU,QAAQ,IAAI,IAAI,IAAI,SAAS,SAAS,OAAO,OAAO,OAAO,yBAAyB,QAAQ,GAAG,IAAI,MAAM;AAC3H,MAAI,OAAO,YAAY,YAAY,OAAO,QAAQ,aAAa;AAAY,QAAI,QAAQ,SAAS,YAAY,QAAQ,KAAK,IAAI;AAAA;AACxH,aAAS,IAAI,WAAW,SAAS,GAAG,KAAK,GAAG;AAAK,UAAI,IAAI,WAAW,CAAC;AAAG,aAAK,IAAI,IAAI,EAAE,CAAC,IAAI,IAAI,IAAI,EAAE,QAAQ,KAAK,CAAC,IAAI,EAAE,QAAQ,GAAG,MAAM;AAChJ,SAAO,IAAI,KAAK,KAAK,OAAO,eAAe,QAAQ,KAAK,CAAC,GAAG;AAChE;AAUO,IAAM,uBAAN,cAAmC,MAAM,CAAC,cAAc,GAAG,CAAC,SAAS;AACxE,QAAM,aAAa,KAAK;AACxB,QAAMC,8BAA6B,KAAK;AAAA,IACpC,eAAe;AAlBvB;AAoBY,UAAI,KAAK,uBAAuB;AAC5B,cAAM,oBAAoB,KAAK,MAAM;AACrC,cAAM,kBAAkB,KAAK,mBAAmB;AAChD,cAAM,WAAW,CAAC;AAUlB,mBAAW,QAAO,uBAAkB,gCAAgC,KAAK,EAAE,YAAY,MAArE,YAA0E,CAAC;AACzF,cAAI,gBAAgB,SAAS,GAAG;AAC5B,qBAAS,KAAK,GAAG;AACzB,mBAAW,QAAO,uBAAkB,gCAAgC,KAAK,EAAE,YAAY,MAArE,YAA0E,CAAC;AACzF,cAAI,gBAAgB,SAAS,GAAG;AAC5B,qBAAS,KAAK,GAAG;AACzB,aAAK,QAAQ,gBAAgB,OAAO,QAAQ;AAAA,MAChD;AACA,iBAAW,aAAa,KAAK,IAAI;AAAA,IACrC;AAAA,EACJ;AACA,EAAAD,aAAW;AAAA,IACP,cAAc,CAAC,GAAG,gBAAgB;AAAA,EACtC,GAAGC,sBAAqB,WAAW,gBAAgB,MAAM;AACzD,EAAAD,aAAW;AAAA,IACP,cAAc,CAAC,GAAG,gBAAgB;AAAA,EACtC,GAAGC,sBAAqB,WAAW,gBAAgB,MAAM;AACzD,SAAOA;AACX,CAAC,EAAE;AACH;;;AC5CO,IAAM,sBAAN,cAAkC,MAAM;AAAA,EAC3C;AAAA,EACA;AAAA,EACA;AACJ,GAAG,CAAC,SAAS;AACT,QAAM,aAAa,KAAK;AACxB,QAAMC,6BAA4B,KAAK;AAAA,EACvC;AACA,SAAOA;AACX,CAAC,EAAE;AACH;;;ACXO,IAAM,wBAAN,cAAoC,MAAM,CAAC,yBAAyB,6BAA6B,GAAG,CAAC,SAAS;AACjH,QAAMC,+BAA8B,KAAK;AAAA,IACrC,cAAc;AACV,YAAM,GAAG,SAAS;AAClB,WAAK,eAAe;AAAA,IACxB;AAAA,IACA,WAAW,gBAAgB;AACvB,aAAO;AAAA,QACH,YAAY;AAAA,MAChB;AAAA,IACJ;AAAA,IACA,IAAI,KAAK,OAAO;AACZ,YAAM,OAAO;AACb,WAAK,kBAAkB;AAAA,IAC3B;AAAA,EACJ;AACA,SAAOA;AACX,CAAC,EAAE;AACH;AAIO,IAAM,4BAAN,cAAwC,MAAM,CAAC,qBAAqB,GAAG,CAAC,SAAS;AACpF,QAAMC,mCAAkC,KAAK;AAAA,IACzC,gBAAgB;AACZ,aAAO,KAAK,WAAW,KAAK,CAAC;AAAA,IACjC;AAAA,IACA,WAAW,gBAAgB;AACvB,aAAO;AAAA,QACH,MAAM;AAAA,MACV;AAAA,IACJ;AAAA,EACJ;AACA,SAAOA;AACX,CAAC,EAAE;AACH;;;AC1CA,IAAIC,eAA0C,SAAU,YAAY,QAAQ,KAAK,MAAM;AACnF,MAAI,IAAI,UAAU,QAAQ,IAAI,IAAI,IAAI,SAAS,SAAS,OAAO,OAAO,OAAO,yBAAyB,QAAQ,GAAG,IAAI,MAAM;AAC3H,MAAI,OAAO,YAAY,YAAY,OAAO,QAAQ,aAAa;AAAY,QAAI,QAAQ,SAAS,YAAY,QAAQ,KAAK,IAAI;AAAA;AACxH,aAAS,IAAI,WAAW,SAAS,GAAG,KAAK,GAAG;AAAK,UAAI,IAAI,WAAW,CAAC;AAAG,aAAK,IAAI,IAAI,EAAE,CAAC,IAAI,IAAI,IAAI,EAAE,QAAQ,KAAK,CAAC,IAAI,EAAE,QAAQ,GAAG,MAAM;AAChJ,SAAO,IAAI,KAAK,KAAK,OAAO,eAAe,QAAQ,KAAK,CAAC,GAAG;AAChE;AASO,IAAM,oBAAN,cAAgC,MAAM,CAAC,kBAAkB,6BAA6B,GAAG,CAAC,SAAS;AACtG,QAAM,aAAa,KAAK;AACxB,QAAMC,2BAA0B,KAAK;AAAA,IACjC,IAAI,cAAc;AACd,aAAO,CAAC,GAAG,KAAK,QAAQ;AAAA,IAC5B;AAAA,IACA,aAAa,cAAc,OAAO;AAI9B,UAAI,CAAC,KAAK,kBAAkB,KAAK,YAAY,CAAC,aAAa;AACvD,cAAM,gBAAgB,KAAK,iBAAiB;AAG5C,aAAK,SAAS,QAAQ,gBAAc,cAAc,sBAAsB,IAAI,UAAU,CAAC;AAAA,MAC3F;AACA,iBAAW,aAAa,KAAK,IAAI;AAAA,IACrC;AAAA;AAAA,IAEA,WAAW,SAAS;AAChB,aAAO;AAAA,QACH,EAAE,MAAM,WAAW;AAAA,QACnB,EAAE,MAAM,YAAY,SAAS,MAAM;AAAA,MACvC;AAAA,IACJ;AAAA,EACJ;AACA,EAAAD,aAAW;AAAA,IACP,cAAc,CAAC,GAAG,gBAAgB;AAAA,EACtC,GAAGC,mBAAkB,WAAW,YAAY,MAAM;AAClD,SAAOA;AACX,CAAC,EAAE;AACH;;;ACtCO,IAAM,2BAAN,cAAuC,MAAM,CAAC,4BAA4B,6BAA6B,GAAG,CAAC,SAAS;AACvH,QAAM,aAAa,KAAK;AACxB,QAAMC,kCAAiC,KAAK;AAAA,IACxC,cAAc;AACV,YAAM,GAAG,SAAS;AAClB,WAAK,eAAe;AAAA,IACxB;AAAA,IACA,WAAW,gBAAgB;AACvB,aAAO;AAAA,QACH,YAAY;AAAA,MAChB;AAAA,IACJ;AAAA,EACJ;AACA,SAAOA;AACX,CAAC,EAAE;AACH;;;ACtBA,IAAIC,eAA0C,SAAU,YAAY,QAAQ,KAAK,MAAM;AACnF,MAAI,IAAI,UAAU,QAAQ,IAAI,IAAI,IAAI,SAAS,SAAS,OAAO,OAAO,OAAO,yBAAyB,QAAQ,GAAG,IAAI,MAAM;AAC3H,MAAI,OAAO,YAAY,YAAY,OAAO,QAAQ,aAAa;AAAY,QAAI,QAAQ,SAAS,YAAY,QAAQ,KAAK,IAAI;AAAA;AACxH,aAAS,IAAI,WAAW,SAAS,GAAG,KAAK,GAAG;AAAK,UAAI,IAAI,WAAW,CAAC;AAAG,aAAK,IAAI,IAAI,EAAE,CAAC,IAAI,IAAI,IAAI,EAAE,QAAQ,KAAK,CAAC,IAAI,EAAE,QAAQ,GAAG,MAAM;AAChJ,SAAO,IAAI,KAAK,KAAK,OAAO,eAAe,QAAQ,KAAK,CAAC,GAAG;AAChE;AAQO,IAAM,yBAAN,cAAqC,MAAM,CAAC,gBAAgB,GAAG,CAAC,SAAS;AAC5E,QAAM,aAAa,KAAK;AACxB,QAAMC,gCAA+B,KAAK;AAAA,IACtC,CAAC,qBAAqB;AAClB,YAAM,cAAc,MAAM,KAAK,EAAE;AACjC,YAAM,cAAc,MAAM,KAAK,EAAE;AACjC,YAAM,eAAe,MAAM,KAAK,EAAE;AAClC,aAAO;AAAA,QACH,aAAa;AAAA,QACb,QAAQ;AAAA,QACR,QAAQ,KAAK;AAAA,QACb,MAAM,KAAK,KAAK;AAAA,QAChB,KAAK,cAAc,KAAK,KAAK;AAAA,QAC7B,MAAM,cAAc,cAAc,KAAK,KAAK;AAAA,QAC5C,OAAO,eAAe,cAAc,KAAK,KAAK;AAAA,QAC9C,SAAS,IAAI,eAAe,cAAc,KAAK,KAAK;AAAA,QACpD,MAAM,IAAI,IAAI,eAAe,cAAc,KAAK,KAAK;AAAA,MACzD;AAAA,IACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAOA,gBAAgB,UAAU,UAAU,QAAQ;AACxC,UAAI,SAAS;AACb,UAAI,aAAa,QAAQ;AACrB,iBAAS,WAAW,KAAK,UAAU,QAAQ,IAAI,KAAK,UAAU,MAAM;AAAA,MACxE;AACA,aAAO;AAAA,IACX;AAAA,IACA,CAAC,iBAAiB,UAAU,UAAU,QAAQ;AAC1C,UAAI,CAAC,YAAY,CAAC;AACd,cAAM,IAAI,MAAM,8BAA8B;AAClD,YAAM,YAAY,MAAM,KAAK,EAAE;AAC/B,UAAI,SAAS;AACb,UAAI,aAAa,QAAQ;AACrB,iBAAS,WAAW,UAAU,QAAQ,IAAI,UAAU,MAAM;AAAA,MAC9D;AACA,aAAO;AAAA,IACX;AAAA,EACJ;AACA,EAAAD,aAAW;AAAA,IACP,MAAM;AAAA,EACV,GAAGC,wBAAuB,WAAW,aAAa,MAAM;AACxD,EAAAD,aAAW;AAAA,IACP,YAAY,EAAE,MAAM,UAAU,cAAc,GAAG,CAAC;AAAA,EACpD,GAAGC,wBAAuB,WAAW,eAAe,MAAM;AAC1D,EAAAD,aAAW;AAAA,IACP,YAAY,EAAE,MAAM,UAAU,cAAc,EAAE,CAAC;AAAA,EACnD,GAAGC,wBAAuB,WAAW,eAAe,MAAM;AAC1D,EAAAD,aAAW;AAAA,IACP,YAAY,EAAE,MAAM,UAAU,cAAc,GAAG,CAAC;AAAA,EACpD,GAAGC,wBAAuB,WAAW,gBAAgB,MAAM;AAC3D,EAAAD,aAAW;AAAA,IACP,UAAU,WAAW;AAAA,EACzB,GAAGC,wBAAuB,WAAW,sBAAsB,IAAI;AAC/D,SAAOA;AACX,CAAC,EAAE;AACH;;;ACzEA,IAAIC,eAA0C,SAAU,YAAY,QAAQ,KAAK,MAAM;AACnF,MAAI,IAAI,UAAU,QAAQ,IAAI,IAAI,IAAI,SAAS,SAAS,OAAO,OAAO,OAAO,yBAAyB,QAAQ,GAAG,IAAI,MAAM;AAC3H,MAAI,OAAO,YAAY,YAAY,OAAO,QAAQ,aAAa;AAAY,QAAI,QAAQ,SAAS,YAAY,QAAQ,KAAK,IAAI;AAAA;AACxH,aAAS,IAAI,WAAW,SAAS,GAAG,KAAK,GAAG;AAAK,UAAI,IAAI,WAAW,CAAC;AAAG,aAAK,IAAI,IAAI,EAAE,CAAC,IAAI,IAAI,IAAI,EAAE,QAAQ,KAAK,CAAC,IAAI,EAAE,QAAQ,GAAG,MAAM;AAChJ,SAAO,IAAI,KAAK,KAAK,OAAO,eAAe,QAAQ,KAAK,CAAC,GAAG;AAChE;AASO,IAAM,sBAAN,cAAkC,MAAM,CAAC,6BAA6B,GAAG,CAAC,SAAS;AACtF,QAAM,aAAa,KAAK;AACxB,QAAMC,6BAA4B,KAAK;AAAA,IACnC,IAAI,UAAU;AACV,YAAM,EAAE,GAAG,MAAM,IAAI;AAIrB,UAAI,UAAU,CAAC,MAAM,cAAc,EAAE,SAAS,KAAK,CAAC,MAAM,cAAc,EAAE,OAAO,IAAI;AACjF,eAAO;AAAA,MACX;AACA,aAAO,MAAM;AAAA,IACjB;AAAA,EACJ;AACA,EAAAD,aAAW;AAAA,IACP,cAAc;AAAA,MACV,QAAQ;AAAA,MACR,UAAU,SAAU,IAAI;AAAE,eAAO,KAAK,aAAa,EAAE;AAAA,MAAG;AAAA,MACxD,kBAAkB;AAAA,QACd,SAAS;AAAA,QACT,WAAW,WAAS,+BAAO;AAAA,QAC3B,SAAS;AAAA,MACb;AAAA,IACJ,GAAG,mBAAmB;AAAA,EAC1B,GAAGC,qBAAoB,WAAW,aAAa,MAAM;AACrD,EAAAD,aAAW;AAAA,IACP,cAAc;AAAA,MACV,QAAQ;AAAA,MACR,UAAU,SAAU,IAAI;AAAE,eAAO,KAAK,aAAa,EAAE;AAAA,MAAG;AAAA,MACxD,kBAAkB;AAAA,QACd,SAAS;AAAA,QACT,WAAW,WAAS,+BAAO;AAAA,QAC3B,SAAS;AAAA,MACb;AAAA,IACJ,GAAG,mBAAmB;AAAA,EAC1B,GAAGC,qBAAoB,WAAW,WAAW,MAAM;AACnD,EAAAD,aAAW;AAAA,IACP,YAAY,EAAE,MAAM,OAAO,cAAc,eAAe,WAAW,CAAC;AAAA,EACxE,GAAGC,qBAAoB,WAAW,QAAQ,MAAM;AAChD,EAAAD,aAAW;AAAA,IACP,YAAY,EAAE,MAAM,SAAS,CAAC;AAAA,EAClC,GAAGC,qBAAoB,WAAW,YAAY,MAAM;AACpD,EAAAD,aAAW;AAAA,IACP,YAAY,EAAE,MAAM,SAAS,CAAC;AAAA,EAClC,GAAGC,qBAAoB,WAAW,UAAU,MAAM;AAClD,SAAOA;AACX,CAAC,EAAE;AACH;;;ACnDO,IAAM,6BAAN,cAAyC,MAAM,CAAC,kBAAkB,oBAAoB,GAAG,CAAC,SAAS;AACtG,QAAM,aAAa,KAAK;AACxB,QAAMC,oCAAmC,KAAK;AAAA;AAAA,IAE1C,IAAI,wBAAwB;AACxB,aAAO,QAAQ,KAAK,wBAAwB,KAAK,yBAAyB;AAAA,IAC9E;AAAA,IACA,WAAW;AACP,aAAO,KAAK;AAAA,IAChB;AAAA,IACA,oBAAoB;AAAE,aAAO;AAAA,IAAM;AAAA,IACnC,aAAa,cAAc;AAAA,IAAE;AAAA,IAC7B,gBAAgB;AAAA,IAAE;AAAA;AAAA;AAAA,IAGlB,MAAM,cAAc;AAzB5B;AA0BY,aAAO,KAAK,+BAA6B,UAAK,YAAL,mBAAc;AAAA,IAC3D;AAAA,IACA,iCAAiC,iBAAiB,aAAa,SAAS,QAAQ;AAC5E,YAAM,SAAS;AAAA,QACX,gBAAgB;AAAA,QAChB;AAAA,UACI,8BAA8B;AAAA,UAC9B;AAAA,QACJ;AAAA,MACJ;AAEA,UAAI,2BAA2B;AAC3B,eAAO,CAAC,EAAE,WAAW;AACzB,aAAO;AAAA,IACX;AAAA,IACA,MAAM,sBAAsB,iBAAiB,aAAa;AAEtD,UAAI,gBAAgB,QAAQ,KAAK,YAAY,gBAAgB,IAAI,GAAG;AAChE,eAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACpC,eAAK,QAAQ,GAAG,KAAK,iCAAiC,iBAAiB,aAAa,SAAS,MAAM,CAAC;AAAA,QACxG,CAAC;AAAA,MACL;AAEA,aAAO,uBAAuB;AAAA,IAClC;AAAA,IACA,MAAM,uBAAuB,iBAAiB,aAAa;AACvD,aAAO,KAAK,sBAAsB,iBAAiB,WAAW;AAAA,IAClE;AAAA,IACA,MAAM,+BAA+B,iBAAiB,aAAa;AAC/D,aAAO,KAAK,sBAAsB,iBAAiB,WAAW;AAAA,IAClE;AAAA,IACA,MAAM,0BAA0B,iBAAiB,aAAa;AAC1D,aAAO,KAAK,sBAAsB,iBAAiB,WAAW;AAAA,IAClE;AAAA,IACA,qBAAqB,OAAO,cAAc;AACtC,UAAI,CAAC;AACD;AACJ,YAAM,YAAY,CAAC;AAEnB,iBAAWC,UAAS,cAAc;AAC9B,kBAAUA,MAAK,IAAI,MAAM,UAAU,cAAcA,MAAK;AAAA,MAC1D;AAEA,aAAO,OAAO,MAAM,UAAU,eAAe,YAAY;AACzD,aAAO;AAAA,IACX;AAAA,IACA,sBAAsB,QAAQ,cAAc;AACxC,YAAM,YAAY,KAAK,qBAAqB,OAAO,aAAa,YAAY;AAC5E,YAAM,WAAW,OAAO,QAAQ;AAChC,aAAO,KAAK,YAAY,EAAE,QAAQ,CAAAA,WAAS;AACvC,iBAASA,MAAK,EAAE,UAAU,cAAc,OAAO,aAAaA,MAAK,CAAC;AAAA,MACtE,CAAC;AACD,aAAO;AAAA,IACX;AAAA,IACA,qBAAqB,OAAO,cAAc;AACtC,UAAI,CAAC;AACD;AAEJ,YAAM,SAAS,MAAM;AACrB,UAAI,QAAQ;AACR,eAAO,KAAK,sBAAsB,QAAQ,YAAY;AAAA,MAC1D,OACK;AACD,eAAO,KAAK,qBAAqB,MAAM,YAAY,YAAY;AAAA,MACnE;AAAA,IACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAgCA,MAAM,gBAAgB,cAAc;AAEhC,WAAK,WAAW,MAAM,KAAK,YAAY;AACvC,YAAM,kBAAkB,CAAC;AACzB,YAAM,SAAS;AAAA,QACX,OAAO,KAAK;AAAA,QACZ,QAAQ,KAAK;AAAA,QACb,cAAc,KAAK;AAAA,QACnB,WAAW,KAAK;AAAA,QAChB,aAAa,KAAK;AAAA,QAClB,WAAW,KAAK;AAAA,MACpB;AACA,aAAO,KAAK,MAAM,EAAE,QAAQ,QAAM;AAE9B,YAAI,aAAa,EAAE,GAAG;AAClB,0BAAgB,EAAE,IAAI,KAAK,qBAAqB,OAAO,EAAE,GAAG,aAAa,EAAE,CAAC;AAAA,QAChF;AAAA,MACJ,CAAC;AAED,UAAI,sBAAsB,aAAa;AACvC,UAAI,qBAAqB;AACrB,wBAAgB,UAAU,KAAK,sBAAsB,MAAM,mBAAmB;AAAA,MAClF;AAGA,WAAK,WAAW,KAAK,kBAAkB,IAAI;AAC3C,WAAK,WAAW,MAAM,KAAK,YAAY;AAEvC,aAAO;AAAA,IACX;AAAA,EACJ;AACA,SAAOD;AACX,CAAC,EAAE;AACH;;;AC1IO,IAAM,oBAAN,cAAgC,MAAM,CAAC,cAAc,GAAG,CAAC,SAAS;AACrE,QAAM,aAAa,KAAK;AACxB,QAAME,2BAA0B,KAAK;AAAA,IACjC,WAAW,QAAQ;AACf,aAAO;AAAA,IACX;AAAA;AAAA;AAAA;AAAA,IAIA,CAAC,eAAe;AACZ,YAAM,IAAI,MAAM,gDAAgD;AAAA,IACpE;AAAA;AAAA;AAAA;AAAA,IAIA,CAAC,oBAAoB;AACjB,YAAM,IAAI,MAAM,qDAAqD;AAAA,IACzE;AAAA,IACA,CAAC,yBAAyB;AACtB,YAAM,oBAAoB,MAAM,KAAK,EAAE;AACvC,YAAM,eAAe,OAAO,KAAK,aAAa;AAC9C,UAAI,CAAC,qBAAqB,cAAc;AACpC,eAAO,OAAO,KAAK,8BAA8B;AAAA,MACrD,OACK;AACD,eAAO,OAAO,WAAW,uBAAuB,KAAK,IAAI;AAAA,MAC7D;AAAA,IACJ;AAAA,IACA,CAAC,uBAAuB;AACpB,YAAM,oBAAoB,MAAM,KAAK,EAAE;AACvC,YAAM,eAAe,OAAO,KAAK,aAAa;AAC9C,UAAI,CAAC,qBAAqB,cAAc;AACpC,eAAO,OAAO,KAAK,4BAA4B;AAAA,MACnD,OACK;AACD,eAAO,OAAO,WAAW,qBAAqB,KAAK,IAAI;AAAA,MAC3D;AAAA,IACJ;AAAA,IACA,CAAC,6BAA6B;AAC1B,YAAM,oBAAoB,MAAM,KAAK,EAAE;AACvC,YAAM,eAAe,OAAO,KAAK,aAAa;AAC9C,UAAI,CAAC,qBAAqB,cAAc;AACpC,eAAO,OAAO,KAAK,uBAAuB;AAAA,MAC9C,OACK;AACD,eAAO,OAAO,WAAW,2BAA2B,KAAK,IAAI;AAAA,MACjE;AAAA,IACJ;AAAA,IACA,CAAC,2BAA2B;AACxB,YAAM,oBAAoB,MAAM,KAAK,EAAE;AACvC,YAAM,eAAe,OAAO,KAAK,aAAa;AAC9C,UAAI,CAAC,qBAAqB,cAAc;AACpC,eAAO,OAAO,KAAK,qBAAqB;AAAA,MAC5C,OACK;AACD,eAAO,OAAO,WAAW,yBAAyB,KAAK,IAAI;AAAA,MAC/D;AAAA,IACJ;AAAA,IACA,CAAC,4BAA4B;AACzB,YAAM,oBAAoB,MAAM,KAAK,EAAE;AACvC,YAAM,eAAe,OAAO,KAAK,aAAa;AAC9C,UAAI,CAAC,qBAAqB,cAAc;AACpC,eAAO,OAAO,KAAK,sBAAsB;AAAA,MAC7C,OACK;AACD,eAAO,OAAO,WAAW,0BAA0B,KAAK,IAAI;AAAA,MAChE;AAAA,IACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAcA,CAAC,2BAA2B,OAAO;AAC/B,aAAO;AAAA,IACX;AAAA;AAAA;AAAA;AAAA;AAAA,IAKA,CAAC,gCAAgC;AAC7B,YAAM,WAAW,OAAO,KAAK,kBAAkB;AAC/C,UAAI,YAAY,SAAS,QAAQ;AACjC,iBAAW,SAAS,UAAU;AAC1B,YAAI,OAAO,KAAK,2BAA2B,KAAK,GAAG;AAC/C,cAAI,OAAO,MAAM,MAAM,EAAE;AAEzB,cAAI,CAAC,MAAM;AACP,mBAAO,MAAM,MAAM,EAAE;AAAA,UACzB;AACA,cAAI,QAAQ,KAAK,QAAQ,IAAI,WAAW;AACpC,wBAAY,KAAK,QAAQ;AAAA,UAC7B;AAAA,QACJ;AAAA,MACJ;AACA,UAAI,cAAc,SAAS,QAAQ,KAAK,cAAc,SAAS,QAAQ;AACnE,eAAO;AACX,aAAO,IAAI,KAAK,SAAS;AAAA,IAC7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAaA,CAAC,yBAAyB,OAAO;AAC7B,aAAO;AAAA,IACX;AAAA;AAAA;AAAA;AAAA;AAAA,IAKA,CAAC,8BAA8B;AAC3B,YAAM,WAAW,OAAO,KAAK,kBAAkB;AAC/C,UAAI,YAAY,SAAS,QAAQ;AACjC,iBAAW,SAAS,UAAU;AAC1B,YAAI,OAAO,KAAK,yBAAyB,KAAK,GAAG;AAC7C,cAAI,OAAO,MAAM,MAAM,EAAE;AACzB,cAAI,CAAC,MAAM;AACP,mBAAO,MAAM,MAAM,EAAE;AAAA,UACzB;AACA,cAAI,QAAQ,KAAK,QAAQ,IAAI,WAAW;AACpC,wBAAY,KAAK,QAAQ;AAAA,UAC7B;AAAA,QACJ;AAAA,MACJ;AACA,UAAI,cAAc,SAAS,QAAQ,KAAK,cAAc,SAAS,QAAQ;AACnE,eAAO;AACX,aAAO,IAAI,KAAK,SAAS;AAAA,IAC7B;AAAA,EACJ;AACA,SAAOA;AACX,CAAC,EAAE;AACH;;;ACrKA,IAAIC,eAA0C,SAAU,YAAY,QAAQ,KAAK,MAAM;AACnF,MAAI,IAAI,UAAU,QAAQ,IAAI,IAAI,IAAI,SAAS,SAAS,OAAO,OAAO,OAAO,yBAAyB,QAAQ,GAAG,IAAI,MAAM;AAC3H,MAAI,OAAO,YAAY,YAAY,OAAO,QAAQ,aAAa;AAAY,QAAI,QAAQ,SAAS,YAAY,QAAQ,KAAK,IAAI;AAAA;AACxH,aAAS,IAAI,WAAW,SAAS,GAAG,KAAK,GAAG;AAAK,UAAI,IAAI,WAAW,CAAC;AAAG,aAAK,IAAI,IAAI,EAAE,CAAC,IAAI,IAAI,IAAI,EAAE,QAAQ,KAAK,CAAC,IAAI,EAAE,QAAQ,GAAG,MAAM;AAChJ,SAAO,IAAI,KAAK,KAAK,OAAO,eAAe,QAAQ,KAAK,CAAC,GAAG;AAChE;AAWO,IAAM,mBAAN,cAA+B,MAAM,CAAC,iBAAiB,GAAG,CAAC,SAAS;AACvE,QAAM,aAAa,KAAK;AACxB,QAAMC,0BAAyB,KAAK;AAAA;AAAA;AAAA;AAAA,IAIhC,CAAC,eAAe;AACZ,YAAM,cAAc,MAAM,KAAK,EAAE;AACjC,aAAO,YAAY,OAAO;AAAA,IAC9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAWA,CAAC,oBAAoB;AACjB,aAAO,MAAM,KAAK,EAAE;AAAA,IACxB;AAAA,IACA,IAAI,SAAS;AACT,aAAO,KAAK;AAAA,IAChB;AAAA,IACA,IAAI,OAAO,OAAO;AACd,WAAK,UAAU;AACf,WAAK,cAAc;AAAA,IACvB;AAAA,EACJ;AACA,EAAAD,aAAW;AAAA,IACP,UAAU,EAAE,QAAQ,cAAc,CAAC;AAAA,EACvC,GAAGC,kBAAiB,WAAW,eAAe,MAAM;AACpD,EAAAD,aAAW;AAAA,IACP,OAAO;AAAA,EACX,GAAGC,kBAAiB,WAAW,eAAe,MAAM;AACpD,SAAOA;AACX,CAAC,EAAE;AACH;;;ACvDA,IAAIC,eAA0C,SAAU,YAAY,QAAQ,KAAK,MAAM;AACnF,MAAI,IAAI,UAAU,QAAQ,IAAI,IAAI,IAAI,SAAS,SAAS,OAAO,OAAO,OAAO,yBAAyB,QAAQ,GAAG,IAAI,MAAM;AAC3H,MAAI,OAAO,YAAY,YAAY,OAAO,QAAQ,aAAa;AAAY,QAAI,QAAQ,SAAS,YAAY,QAAQ,KAAK,IAAI;AAAA;AACxH,aAAS,IAAI,WAAW,SAAS,GAAG,KAAK,GAAG;AAAK,UAAI,IAAI,WAAW,CAAC;AAAG,aAAK,IAAI,IAAI,EAAE,CAAC,IAAI,IAAI,IAAI,EAAE,QAAQ,KAAK,CAAC,IAAI,EAAE,QAAQ,GAAG,MAAM;AAChJ,SAAO,IAAI,KAAK,KAAK,OAAO,eAAe,QAAQ,KAAK,CAAC,GAAG;AAChE;AA8BO,IAAM,6BAAN,cAAyC,SAAS;AAAA,EACrD;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACJ,GAAG,CAAC,SAAS;AACT,QAAM,aAAa,KAAK;AACxB,QAAMC,oCAAmC,KAAK;AAAA,IAC1C,UAAU,SAAS,CAAC,GAAG;AACnB,WAAK,mBAAmB,OAAO,qBAAqB;AACpD,WAAK,8BAA8B,OAAO,+BAA+B,OAAO,qBAAqB;AAErG,UAAI,EAAE,cAAc,SAAS;AAEzB,eAAO,WAAW;AAAA,MACtB;AACA,UAAI,KAAK,kBAAkB;AACvB,aAAK,uBAAuB;AAAA,MAChC;AACA,UAAI,EAAE,8CAA8C,SAAS;AACzD,eAAO,2CAA2C;AAAA,MACtD;AACA,iBAAW,UAAU,KAAK,MAAM,MAAM;AACtC,WAAK,mBAAmB,oBAAI,IAAI;AAChC,WAAK,uCAAwC,0CAA0C,SAAU,OAAO,uCAAuC;AAC/I,UAAI,KAAK,sCAAsC;AAC3C,gBAAQ,KAAK,mHAAmH;AAAA,MACpI;AACA,UAAI,CAAC,KAAK;AACN,aAAK,kBAAkB,KAAK,0BAA0B;AAC1D,UAAI,CAAC,KAAK;AACN,aAAK,kBAAkB,KAAK,0BAA0B;AAC1D,UAAI,CAAC,KAAK;AACN,aAAK,uBAAuB,KAAK,+BAA+B;AACpE,UAAI,CAAC,KAAK;AACN,aAAK,uBAAuB,KAAK,+BAA+B;AACpE,UAAI,CAAC,KAAK;AACN,aAAK,qBAAqB,KAAK,6BAA6B;AAChE,UAAI,CAAC,KAAK;AACN,aAAK,qBAAqB,KAAK,6BAA6B;AAChE,UAAI,CAAC,KAAK;AACN,aAAK,uBAAuB,KAAK,+BAA+B;AACpE,UAAI,CAAC,KAAK;AACN,aAAK,uBAAuB,KAAK,+BAA+B;AACpE,UAAI,CAAC,KAAK;AACN,aAAK,qBAAqB,KAAK,6BAA6B;AAChE,UAAI,CAAC,KAAK;AACN,aAAK,4BAA4B,KAAK,oCAAoC;AAC9E,UAAI,CAAC,KAAK;AACN,aAAK,mBAAmB,KAAK,2BAA2B;AAC5D,WAAK,cAAc;AAGnB,WAAK,kBAAkB,IAAI,KAAK,mBAAmB;AAAA,QAC/C,0BAA0B,KAAK;AAAA,MACnC,CAAC;AACD,WAAK,gBAAgB,UAAU;AAC/B,UAAI,CAAC,KAAK;AACN,aAAK,aAAa,KAAK;AAC3B,WAAK,wBAAwB,KAAK,oBAAoB;AACtD,WAAK,cAAc,KAAK,UAAU;AAClC,WAAK,mBAAmB,KAAK,eAAe;AAC5C,WAAK,iBAAiB,KAAK,aAAa;AACxC,WAAK,mBAAmB,KAAK,eAAe;AAC5C,YAAM,gBAAgB,QAAQ,KAAK,iBAAiB,KAAK,cAAc,KAAK,oBAAoB,KAAK,iBAAiB,KAAK,eAAe;AAC1I,UAAI,eAAe;AAEf,aAAK,eAAe;AAAA,UAChB,eAAe,KAAK;AAAA,UACpB,YAAY,KAAK;AAAA,UACjB,kBAAkB,KAAK;AAAA,UACvB,eAAe,KAAK;AAAA,UACpB,iBAAiB,KAAK;AAAA,QAC1B,CAAC;AACD,eAAO,KAAK;AACZ,eAAO,KAAK;AACZ,eAAO,KAAK;AACZ,eAAO,KAAK;AACZ,eAAO,KAAK;AAAA,MAChB,OACK;AAMD,YAAI,KAAK,oBAAoB,KAAK;AAC9B,eAAK,2BAA2B;AAAA,MACxC;AAAA,IACJ;AAAA,IACA,IAAI,kBAAkB;AAClB,aAAO;AAAA,QACH,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,MACT,EAAE,KAAK,WAAS,MAAM,WAAW,CAAC;AAAA,IACtC;AAAA,IACA,aAAa,cAAc;AACvB,YAAM,KAAK;AACX,UAAI,CAAC,GAAG,SAAS;AACb,WAAG,UAAU,GAAG,cAAc;AAC9B,WAAG,QAAQ,UAAU,EAAE;AACvB,WAAG,QAAQ,UAAU,GAAG,eAAe;AACvC,WAAG,QAAQ,YAAY;AAAA,MAC3B;AAGA,UAAI,gBAAgB,CAAC,GAAG,sBAAsB;AAE1C,WAAG,qBAAqB,QAAQ,OAAK;AAAE,WAAC,EAAE,SAAS,EAAE,YAAY;AAAA,QAAG,GAAG,QAAW,EAAE,2BAA2B,KAAK,CAAC;AACrH,WAAG,WAAW,QAAQ,OAAK;AAAE,WAAC,EAAE,SAAS,EAAE,YAAY;AAAA,QAAG,GAAG,QAAW,EAAE,2BAA2B,KAAK,CAAC;AAC3G,WAAG,cAAc,QAAQ,OAAK;AAAE,WAAC,EAAE,SAAS,EAAE,YAAY;AAAA,QAAG,GAAG,QAAW,EAAE,2BAA2B,KAAK,CAAC;AAC9G,WAAG,gBAAgB,QAAQ,OAAK;AAAE,WAAC,EAAE,SAAS,EAAE,YAAY;AAAA,QAAG,GAAG,QAAW,EAAE,2BAA2B,KAAK,CAAC;AAChH,WAAG,gBAAgB,QAAQ,OAAK;AAAE,WAAC,EAAE,SAAS,EAAE,YAAY;AAAA,QAAG,GAAG,QAAW,EAAE,2BAA2B,KAAK,CAAC;AAAA,MACpH;AAAA,IACJ;AAAA,IACA,gBAAgB;AACZ,YAAM,cAAc,KAAK,IAAI;AAC7B,WAAK,IAAI,QAAQ;AACjB,WAAK,IAAI,WAAW;AACpB,UAAI,CAAC,aAAa;AACd,aAAK,IAAI,OAAO;AAAA,MACpB;AAAA,IACJ;AAAA,IACA,YAAY;AAnKpB;AAoKY,YAAM,KAAK;AACX,eAAG,eAAH,mBAAe;AACf,eAAG,oBAAH,mBAAoB;AACpB,eAAG,oBAAH,mBAAoB;AACpB,eAAG,kBAAH,mBAAkB;AAClB,eAAG,yBAAH,mBAAyB;AACzB,eAAG,oBAAH,mBAAoB;AACpB,eAAG,YAAH,mBAAY;AACZ,eAAG,QAAH,mBAAQ;AACR,iBAAW,UAAU,KAAK,IAAI;AAAA,IAClC;AAAA,IACA,mBAAmB;AACf,aAAO;AAAA,QACH,SAAS;AAAA,QACT,QAAQ,OAAO,IAAI;AAAA,QACnB,6BAA6B,KAAK;AAAA,QAClC,sBAAsB,KAAK;AAAA,QAC3B,sCAAsC,KAAK;AAAA,QAC3C,kBAAkB,KAAK;AAAA,QACvB,qBAAqB;AAAA,QACrB,UAAU,SAAS;AAAA,MACvB;AAAA,IACJ;AAAA;AAAA,IAEA,gBAAgB;AACZ,aAAO,cAAc,IAAI,OAAO,EAAE,IAAI,KAAK,iBAAiB,CAAC;AAAA,IACjE;AAAA,IACA,CAAC,eAAe;AACZ,aAAO,KAAK,cAAc,EAAE,QAAQ;AAAA,IACxC;AAAA,IACA,CAAC,oBAAoB;AACjB,aAAO,KAAK,cAAc,EAAE,SAAS;AAAA,IACzC;AAAA,IACA,UAAU;AACN,aAAO,YAAY;AAAA,IACvB;AAAA,IACA,IAAI,8BAA8B;AAC9B,aAAO,KAAK;AAAA,IAChB;AAAA;AAAA;AAAA;AAAA,IAIA,IAAI,4BAA4B,OAAO;AACnC,WAAK,+BAA+B;AACpC,UAAI,KAAK;AACL,aAAK,QAAQ,8BAA8B;AAAA,IACnD;AAAA,IACA,6BAA6B;AACzB,aAAO;AAAA,IACX;AAAA;AAAA;AAAA;AAAA,IAIA,4BAA4B;AACxB,aAAO;AAAA,IACX;AAAA;AAAA;AAAA;AAAA,IAIA,4BAA4B;AACxB,aAAO;AAAA,IACX;AAAA;AAAA;AAAA;AAAA,IAIA,iCAAiC;AAC7B,aAAO;AAAA,IACX;AAAA;AAAA;AAAA;AAAA,IAIA,iCAAiC;AAC7B,aAAO;AAAA,IACX;AAAA;AAAA;AAAA;AAAA,IAIA,+BAA+B;AAC3B,aAAO;AAAA,IACX;AAAA;AAAA;AAAA;AAAA,IAIA,+BAA+B;AAC3B,aAAO;AAAA,IACX;AAAA;AAAA;AAAA;AAAA,IAIA,iCAAiC;AAC7B,aAAO;AAAA,IACX;AAAA;AAAA;AAAA;AAAA,IAIA,iCAAiC;AAC7B,aAAO;AAAA,IACX;AAAA;AAAA;AAAA;AAAA,IAIA,+BAA+B;AAC3B,aAAO;AAAA,IACX;AAAA;AAAA;AAAA;AAAA,IAIA,sCAAsC;AAClC,aAAO;AAAA,IACX;AAAA,IACA,sBAAsB;AAClB,aAAO,CAAC,KAAK,YAAY,KAAK,eAAe,KAAK,iBAAiB,KAAK,eAAe,EAAE,KAAK,OAAK,EAAE,cAAc;AAAA,IACvH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAOA,MAAM,eAAe,MAAM;AACvB,YAAM,EAAE,sBAAsB,YAAY,iBAAiB,iBAAiB,eAAe,QAAQ,IAAI;AACvG,UAAI,CAAC,KAAK,0BAA0B;AAEhC,2CAAS;AAAA,MACb,OACK;AAID,eAAO,KAAK,QAAQ,cAAc;AAC9B,gBAAM,KAAK,YAAY;AAAA,QAC3B;AAAA,MACJ;AACA,WAAI,mCAAS,gCAA+B,CAAC,KAAK,kBAAkB;AAGhE,cAAMC,OAAM,CAAC;AAIb,cAAM,KAAK,YAAY;AACvB,gBAAQ,kCAAkC,EAAE,OAAO,GAAG,WAAW,GAAG,OAAO,kBAAkB,CAAC;AAG9F,cAAMA,OAAM,EAAE;AAAA,MAClB;AACA,WAAK,2BAA2B;AAChC,WAAK,sBAAsB;AAC3B,UAAI,WAAW,OAAO;AAClB,gBAAQ,IAAI,0BAA0B,2EAA2E;AACjH,gBAAQ,KAAK,iBAAiB;AAC9B,gBAAQ,KAAK,oBAAoB;AAAA,MACrC;AAEA,UAAI,KAAK,oBAAoB,CAAC,KAAK,6BAA6B,CAAC,KAAK,oBAAoB,GAAG;AACzF,aAAK,2BAA2B;AAAA,MACpC;AACA,UAAI,KAAK,eAAe;AACpB,aAAK,gBAAgB,oBAAoB;AACzC,6BAAqB,OAAO,KAAK;AAAA,MACrC;AACA,UAAI,KAAK,cAAc,KAAK,WAAW;AACnC,aAAK,gBAAgB,UAAU;AAC/B,mBAAW,OAAO,KAAK,cAAc,KAAK;AAAA,MAC9C;AACA,UAAI,KAAK,kBAAkB;AACvB,aAAK,gBAAgB,eAAe;AACpC,wBAAgB,OAAO,KAAK;AAAA,MAChC;AACA,UAAI,KAAK,eAAe;AACpB,aAAK,gBAAgB,aAAa;AAClC,sBAAc,OAAO,KAAK;AAAA,MAC9B;AACA,UAAI,KAAK,iBAAiB;AACtB,aAAK,gBAAgB,eAAe;AACpC,wBAAgB,OAAO,KAAK;AAAA,MAChC;AACA,UAAI,KAAK,SAAS;AAEd,aAAK,qBAAqB,KAAK,OAAO;AAAA,MAC1C;AACA,UAAI,WAAW;AACX,gBAAQ,QAAQ,oBAAoB;AACxC,YAAM,SAAS,MAAM,KAAK,WAAW;AACrC,WAAK,sBAAsB;AAC3B,aAAO;AAAA,IACX;AAAA;AAAA;AAAA,IAGA,wBAAwB;AACpB,YAAM,EAAE,QAAQ,IAAI,KAAK,mBAAmB,CAAC;AAE7C,UAAI,SAAS;AAET,gBAAQ,SAAS,EAAE,UAAU,SAAS,QAAQ,MAAM,CAAC;AACrD,gBAAQ,SAAS,EAAE,UAAU,YAAY,QAAQ,MAAM,CAAC;AAAA,MAC5D;AAAA,IACJ;AAAA,IACA,yBAAyB;AACrB,YAAM,EAAE,QAAQ,IAAI,KAAK;AAEzB,cAAQ,YAAY,OAAO;AAC3B,cAAQ,YAAY,UAAU;AAAA,IAClC;AAAA,IACA,MAAM,yBAAyB,SAAS;AACpC,YAAM,KAAK;AACX,SAAG,uBAAuB;AAC1B,SAAG,sBAAsB;AAGzB,YAAMA,OAAM,CAAC;AACb,UAAI,GAAG,aAAa;AAChB,gBAAQ;AACR;AAAA,MACJ;AACA,SAAG,QAAQ,uBAAuB;AAElC,SAAG,QAAQ,WAAW,EAAE,cAAc,MAAM,CAAC;AAC7C,YAAMA,OAAM,CAAC;AACb,UAAI,GAAG,aAAa;AAChB,gBAAQ;AACR;AAAA,MACJ;AACA,SAAG,uBAAuB;AAG1B,UAAI,GAAG,sBAAsB;AAEzB,WAAG,kBAAkB,IAAI;AAAA,MAC7B,OACK;AAID,WAAG,QAAQ,iBAAiB;AAC5B,WAAG,aAAa,IAAI;AAAA,MACxB;AACA,YAAM,SAAS,MAAM,GAAG,QAAQ,YAAY;AAC5C,UAAI,GAAG,aAAa;AAChB,gBAAQ;AACR;AAAA,MACJ;AACA,cAAQ,MAAM;AACd,SAAG,4BAA4B;AAC/B,SAAG,QAAQ,qBAAqB;AAChC,SAAG,uBAAuB;AAAA,IAC9B;AAAA,IACA,6BAA6B;AACzB,UAAI,KAAK,2BAA2B;AAChC,eAAO,KAAK;AAAA,MAChB;AACA,UAAI,KAAK,qBAAqB,OAAO;AACjC,eAAO,KAAK,4BAA4B,IAAI,QAAQ;AAAA;AAAA,UAEpD,KAAK,yBAAyB,OAAO,EAAE,KAAK;AAAA,SAAC;AAAA,MACjD;AAAA,IACJ;AAAA,IACA,MAAM,aAAa;AAEf,YAAM,SAAS,MAAM,KAAK,YAAY;AAEtC,UAAI,CAAC,KAAK;AACN,aAAK,QAAQ,MAAM;AACvB,aAAO;AAAA,IACX;AAAA,IACA,gBAAgB;AACZ,YAAM,WAAW,KAAK,YAAY;AAElC,UAAI,EAAE,KAAK,eAAe;AACtB,aAAK,OAAO,SAAS,IAAI,EAAE,UAAU,KAAK,GAAG,KAAK,GAAG,CAAC;AAC1D,UAAI,KAAK,8BAA8B;AACnC,aAAK,IAAI;AAAA,UACL,MAAM,KAAK;AAAA,UACX,SAAS;AAAA,QACb,CAAC;AAAA,MACL;AACA,WAAK,IAAI;AAAA,QACL,cAAc,KAAK;AAAA,QACnB,iBAAiB,KAAK;AAAA,QACtB,gBAAgB,KAAK;AAAA,QACrB,SAAS;AAAA,MACb,CAAC;AAAA,IACL;AAAA,IACA,yBAAyB,EAAE,mBAAmB,cAAc,GAAG;AA/bvE;AAgcY,YAAM,gBAAgB,oBAAI,IAAI;AAC9B,iBAAW,SAAS,kBAAkB,QAAQ,OAAO,GAAG;AACpD,cAAM,aAAa,MAAM;AACzB,cAAM,EAAE,OAAAC,OAAM,IAAI;AAClB,YAAI,MAAM,SAAS,KAAK,CAAC,WAAW,mBAAmB,KAAKA,kBAAiB;AACzE;AACJ,cAAM,SAAS,WAAW;AAC1B,cAAM,QAAQ,OAAO;AAErB,YAAI,SAAS,CAAC,MAAM,YAAY,GAAC,uBAAkB,YAAY,wBAAwB,OAAO,EAAE,MAA/D,mBAAkE,WAAU;AACzG,cAAI,CAAC,cAAc,IAAI,KAAK,GAAG;AAC3B,0BAAc,IAAI,OAAO,oBAAI,IAAI,CAAC,MAAM,CAAC,CAAC;AAAA,UAC9C,WACS,CAAC,cAAc,IAAI,KAAK,EAAE,IAAI,MAAM,GAAG;AAC5C,0BAAc,IAAI,KAAK,EAAE,IAAI,MAAM;AAAA,UACvC;AAAA,QACJ;AAAA,MACJ;AAEA,iBAAK,2BAAL;AACA,YAAM,SAAS,MAAM,KAAK,cAAc,KAAK,CAAC,EAAE,KAAK,CAAC,GAAG,MAAM,EAAE,eAAe,EAAE,YAAY;AAE9F,aAAO,QAAQ,WAAS,MAAM,OAAO,cAAc,IAAI,KAAK,CAAC,CAAC;AAE9D,iBAAK,0BAAL,8BAA6B;AAC7B,UAAI,eAAe;AACf,aAAK,WAAW,cAAc;AAC9B,aAAK,gBAAgB,cAAc;AACnC,aAAK,cAAc,cAAc;AACjC,aAAK,gBAAgB,cAAc;AACnC,aAAK,qBAAqB,cAAc;AAAA,MAC5C;AAAA,IACJ;AAAA,IACA,kBAAkB,OAAO;AAErB,UAAI,KAAK,cAAc;AACnB,aAAK,QAAQ,wBAAwB;AACrC,aAAK,kBAAkB;AACvB,aAAK,yBAAyB,KAAK;AACnC,aAAK,kBAAkB;AACvB,aAAK,QAAQ,wBAAwB;AAAA,MACzC,OAEK;AACD,aAAK,qBAAqB;AAAA,MAC9B;AAAA,IACJ;AAAA;AAAA,IAEA,yBAAyB;AACrB,YAAM,EAAE,IAAI,IAAI;AAChB,WAAK,eAAe,IAAI;AACxB,UAAI,IAAI,eAAe,IAAI,YAAY;AACnC,aAAK,iBAAiB;AAItB,YAAI,aAAa;AAAA,MACrB;AAAA,IACJ;AAAA,IACA,uBAAuB;AACnB,UAAI,KAAK,gBAAgB;AAErB,aAAK,IAAI,aAAa;AACtB,aAAK,iBAAiB;AAAA,MAC1B;AAAA,IACJ;AAAA,IACA,oBAAoB,EAAE,QAAQ,IAAI,GAAG;AACjC,UAAI,KAAK;AACL,aAAK,QAAQ,wBAAwB;AAAA,IAC7C;AAAA;AAAA,IAEA,MAAM,mBAAmB,EAAE,OAAO,GAAG;AACjC,UAAI,KAAK;AACL,aAAK,QAAQ,wBAAwB;AACzC,YAAM,MAAM;AAEZ,UAAI,QAAQ;AACZ,YAAM,KAAK,YAAY;AACvB,UAAI,CAAC,KAAK,aAAa;AACnB,YAAI,OAAO;AACX,aAAK,QAAQ,oBAAoB;AAAA,MACrC;AAAA,IACJ;AAAA;AAAA;AAAA;AAAA;AAAA,IAKA,+BAA+B,SAAS,MAAM,MAAM;AAChD,UAAI,KAAK,sBAAsB;AAC3B,aAAK,gBAAgB,OAAO;AAC5B,aAAK,IAAI;AAAA,UACL,MAAM;AAAA,UACN,mBAAmB;AAAA,YACf,IAAI,YAAY;AACZ,oBAAM,KAAK,YAAY;AACvB,kBAAI,CAAC,KAAK,aAAa;AACnB,qBAAK,GAAG,IAAI;AAAA,cAChB;AAAA,YACJ;AAAA,YACA,MAAM;AAAA,UACV;AAAA,QACJ,CAAC;AAAA,MACL,OACK;AACD,aAAK,GAAG,IAAI;AAAA,MAChB;AAAA,IACJ;AAAA,IACA,IAAI,uBAAuB;AA3iBnC;AA4iBY,aAAO,SAAQ,UAAK,qBAAL,mBAAuB,IAAI;AAAA,IAC9C;AAAA;AAAA,IAEA,gBAAgB,OAAO;AA/iB/B;AAgjBY,YAAM,KAAK;AACX,UAAI,GAAG,uBAAuB,MAAM,YAAY,CAAC,MAAM,gBAAgB;AACnE,iBAAG,YAAH,mBAAY,kBAAkB;AAC9B,YAAI,CAAC,GAAG;AACJ,aAAG,mBAAmB,oBAAI,IAAI;AAClC,WAAG,iBAAiB,IAAI,KAAK;AAE7B,WAAG,kBAAkB;AAAA,MACzB;AAAA,IACJ;AAAA;AAAA,IAEA,oBAAoB;AAChB,YAAM,KAAK;AAEX,UAAI,GAAG,sBAAsB;AACzB;AAAA,MACJ;AACA,YAAM,EAAE,sBAAsB,YAAY,iBAAiB,iBAAiB,eAAe,SAAS,WAAW,IAAI;AACnH,UAAI,YAAY;AAEZ,WAAG,mBAAmB,sBAAsB,YAAY,iBAAiB,eAAe,eAAe;AACvG,WAAG,aAAa,EAAE;AAClB,WAAG,aAAa,GAAG,eAAe;AAClC,WAAG,QAAQ,iBAAiB;AAC5B,mBAAW,MAAM;AAAA,MACrB,OACK;AACD,WAAG,QAAQ,iBAAiB;AAAA,MAChC;AACA,YAAM,UAAU,GAAG,UAAU,GAAG,cAAc;AAE9C,cAAQ,UAAU,EAAE;AACpB,cAAQ,UAAU,GAAG,eAAe;AACpC,SAAG,iBAAiB,sBAAsB,IAAI;AAC9C,SAAG,iBAAiB,YAAY,IAAI;AACpC,SAAG,iBAAiB,iBAAiB,IAAI;AACzC,SAAG,iBAAiB,eAAe,IAAI;AACvC,SAAG,iBAAiB,iBAAiB,IAAI;AACzC,SAAG,iBAAiB,MAAM;AAC1B,SAAG,QAAQ,mBAAmB;AAAA,IAClC;AAAA;AAAA,IAEA,oBAAoB;AAEhB,UAAI,KAAK,kBAAkB,aAAa,CAAC,KAAK,uBAAuB;AAEjE,aAAK,kBAAkB,IAAI;AAC3B,eAAO,KAAK,QAAQ,YAAY;AAAA,MACpC;AACA,aAAO;AAAA,IACX;AAAA;AAAA;AAAA,IAGA,aAAa,QAAQ;AArmB7B;AAumBY,UAAI,iCAAQ,OAAO;AACf,cAAM,EAAE,kBAAkB,IAAI,KAAK;AACnC,cAAM,EAAE,EAAE,IAAI;AACd,cAAM,OAAO,OAAO,KAAK,CAAC;AAE1B,iBAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,KAAK;AAClC,gBAAM,MAAM,KAAK,CAAC;AAClB,gBAAM,aAAa,EAAE,GAAG;AACxB,gBAAM,QAAQ,kBAAkB,kBAAkB,UAAU;AAC5D,cAAI,OAAO;AACP,gBAAI,QAAQ,MAAM,SAAS;AAC3B,gBAAI,UAAU;AACV,sBAAQ,MAAM;AAClB,gBAAI,UAAU,QAAW;AACrB,yBAAW,OAAO,WAAW,iBAAiB,uBACxC,oCAAO,OAAP,YAAa,QACb;AAAA,YACV;AAAA,UACJ;AAAA,QACJ;AAEA,eAAO,QAAQ;AAAA,MACnB;AAAA,IACJ;AAAA;AAAA,IAEA,sBAAsB,QAAQ;AAC1B,aAAO,QAAQ,WAAS;AAGpB,YAAI,CAAC,KAAK,iBAAiB,IAAI,KAAK,KAAK,MAAM,gBAAgB;AAC3D,gBAAM,SAAS,CAAC,WAAW;AACvB,iBAAK,aAAa,MAAM;AAAA,UAC5B,GAAG,OAAO,OAAO;AAAA;AAAA;AAAA,YAGb,2BAA2B;AAAA,YAC3B,8BAA8B;AAAA,UAClC,CAAC;AAAA,QACL;AAAA,MACJ,CAAC;AAAA,IACL;AAAA;AAAA,IAEA,WAAW;AACP,aAAO,KAAK;AAAA,IAChB;AAAA;AAAA,IAEA,MAAM,UAAU,QAAQ;AACpB,WAAK,WAAW,IAAI,MAAM;AAC1B,aAAO,KAAK,YAAY;AAAA,IAC5B;AAAA;AAAA,IAEA,MAAM,SAAS,OAAO;AAClB,WAAK,WAAW,IAAI,KAAK;AACzB,aAAO,KAAK,YAAY;AAAA,IAC5B;AAAA;AAAA,IAEA,aAAa,OAAO;AAChB,WAAK,WAAW,IAAI,KAAK;AAAA,IAC7B;AAAA;AAAA,IAEA,MAAM,aAAa,QAAQ;AACvB,WAAK,WAAW,OAAO,MAAM;AAC7B,aAAO,KAAK,YAAY;AAAA,IAC5B;AAAA;AAAA,IAEA,aAAa,OAAO;AAChB,WAAK,WAAW,OAAO,KAAK;AAAA,IAChC;AAAA;AAAA,IAEA,MAAM,YAAY,OAAO;AACrB,WAAK,WAAW,OAAO,KAAK;AAC5B,aAAO,KAAK,YAAY;AAAA,IAC5B;AAAA,IACA,SAAS;AACL,aAAO,KAAK;AAAA,IAChB;AAAA,IACA,OAAO,KAAK;AACR,WAAK,MAAM;AACX,WAAK,IAAI,IAAI;AAAA,QACT,gBAAgB,KAAK;AAAA,QACrB,eAAe,KAAK;AAAA,QACpB,SAAS;AAAA,MACb,CAAC;AAAA,IACL;AAAA,IACA,mBAAmB;AACf,aAAO;AAAA,IACX;AAAA,IACA,CAAC,6BAA6B;AAC1B,UAAI,WAAW,MAAM,KAAK,EAAE;AAC5B,UAAI,UAAU;AAEV,cAAM,SAAS,EAAE;AAAA,MACrB,OACK;AACD,mBAAW,KAAK;AAAA,MACpB;AACA,aAAO;AAAA,IACX;AAAA,IACA,iBAAiB,OAAO,WAAW,OAAO;AACtC,YAAMC,MAAK,CAAC,WAAW;AACnB,eAAO,WAAW,IAAI;AACtB,eAAO,YAAY;AAAA,MACvB;AAGA,UAAI,MAAM,UAAU;AAChB,cAAM,SAAS,SAASA,KAAI,UAAU,IAAI;AAAA,MAC9C,OACK;AACD,cAAM,QAAQA,KAAI,MAAM;AAAA,UACpB,2BAA2B;AAAA,UAC3B,8BAA8B;AAAA,QAClC,CAAC;AAAA,MACL;AAAA,IACJ;AAAA,IACA,mBAAmB,OAAO;AACtB,YAAMA,MAAK,CAAC,WAAW;AACnB,eAAO,aAAa;AACpB,eAAO,WAAW,IAAI;AAAA,MAC1B;AAGA,UAAI,MAAM,UAAU;AAChB,cAAM,SAAS,SAAS,UAAQ;AAE5B,cAAI,SAAS,MAAM;AACf,YAAAA,IAAG,IAAI;AAAA,QACf,GAAG,OAAO,IAAI;AAAA,MAClB,OACK;AACD,cAAM,QAAQA,KAAI,MAAM;AAAA,UACpB,2BAA2B;AAAA,UAC3B,8BAA8B;AAAA,QAClC,CAAC;AAAA,MACL;AAAA,IACJ;AAAA;AAAA;AAAA;AAAA;AAAA,IAKA,cAAc,OAAO;AACjB,YAAM,gBAAgB,KAAK;AAC3B,UAAI,iBAAiB,KAAK,IAAI,SAAS,aAAa,GAAG;AACnD,aAAK,IAAI,YAAY,aAAa;AAClC,aAAK,mBAAmB,aAAa;AACrC,aAAK,YAAY,aAAa;AAC9B,cAAM,wBAAwB,cAAc;AAE5C,8BAAsB,QAAQ,gBAAc;AACxC,gBAAM,WAAW,WAAW;AAC5B,cAAI,UAAU;AACV,kBAAM,WAAW,MAAM,QAAQ,SAAS,EAAE;AAC1C,gBAAI,UAAU;AACV,yBAAW,QAAQ;AAEnB,oCAAsB,OAAO,UAAU;AAAA,YAC3C;AAAA,UACJ;AAAA,QACJ,CAAC;AACD,sBAAc,kBAAkB;AAAA,MACpC;AACA,UAAI,CAAC,SAAS,EAAE,iBAAiB,QAAQ;AACrC,cAAM,cAAa,+BAAO,eAAc,KAAK;AAC7C,aAAK,aAAa,IAAI,WAAW,aAAa,OAAO;AAAA,UACjD,YAAY,KAAK;AAAA,UACjB,SAAS;AAAA,UACT,KAAK,KAAK;AAAA,QACd,GAAG,SAAS,CAAC,CAAC,CAAC;AAAA,MACnB,OACK;AACD,aAAK,aAAa;AAClB,cAAM,WAAW,IAAI;AACrB,aAAK,IAAI,SAAS,KAAK;AAGvB,YAAI,MAAM,QAAQ,MAAM,aAAa,MAAM;AACvC,eAAK,YAAY,MAAM,SAAS,YAAY,CAAC,CAAC;AAE9C,gBAAM,WAAW;AAAA,QACrB,OACK;AACD,eAAK,iBAAiB,KAAK;AAAA,QAC/B;AAAA,MACJ;AACA,WAAK,YAAY,KAAK,UAAU;AAChC,WAAK,QAAQ,oBAAoB,EAAE,OAAO,KAAK,WAAW,CAAC;AAAA,IAC/D;AAAA;AAAA;AAAA;AAAA;AAAA,IAKA,mBAAmB,OAAO;AACtB,YAAM,qBAAqB,KAAK;AAChC,UAAI,sBAAsB,KAAK,IAAI,SAAS,kBAAkB,GAAG;AAC7D,aAAK,IAAI,YAAY,kBAAkB;AACvC,aAAK,YAAY,kBAAkB;AAAA,MACvC;AACA,UAAI,CAAC,SAAS,EAAE,iBAAiB,QAAQ;AACrC,cAAM,cAAa,+BAAO,eAAc,KAAK;AAC7C,aAAK,kBAAkB,IAAI,WAAW,aAAa,OAAO;AAAA,UACtD,YAAY,KAAK;AAAA,UACjB,SAAS;AAAA,UACT,KAAK,KAAK;AAAA,QACd,GAAG,SAAS,CAAC,CAAC,CAAC;AAAA,MACnB,OACK;AACD,aAAK,kBAAkB;AACvB,cAAM,WAAW,IAAI;AACrB,aAAK,IAAI,SAAS,KAAK;AACvB,aAAK,iBAAiB,KAAK;AAAA,MAC/B;AACA,WAAK,YAAY,KAAK,eAAe;AACrC,WAAK,QAAQ,yBAAyB,EAAE,OAAO,KAAK,gBAAgB,CAAC;AAAA,IACzE;AAAA;AAAA;AAAA;AAAA;AAAA,IAKA,iBAAiB,OAAO;AACpB,YAAM,mBAAmB,KAAK;AAC9B,UAAI,oBAAoB,KAAK,IAAI,SAAS,gBAAgB,GAAG;AACzD,aAAK,IAAI,YAAY,gBAAgB;AACrC,aAAK,mBAAmB,gBAAgB;AACxC,aAAK,YAAY,gBAAgB;AACjC,cAAM,wBAAwB,iBAAiB;AAE/C,8BAAsB,QAAQ,gBAAc;AACxC,gBAAM,cAAc,WAAW;AAC/B,cAAI,aAAa;AACb,kBAAM,cAAc,MAAM,QAAQ,YAAY,EAAE;AAChD,gBAAI,aAAa;AACb,yBAAW,WAAW;AAEtB,oCAAsB,OAAO,UAAU;AAAA,YAC3C;AAAA,UACJ;AAAA,QACJ,CAAC;AACD,yBAAiB,qBAAqB;AAAA,MAC1C;AACA,UAAI,CAAC,SAAS,EAAE,iBAAiB,QAAQ;AACrC,cAAM,cAAa,+BAAO,eAAc,KAAK;AAC7C,aAAK,gBAAgB,IAAI,WAAW,aAAa,OAAO;AAAA,UACpD,YAAY,KAAK;AAAA,UACjB,SAAS;AAAA,UACT,KAAK,KAAK;AAAA,QACd,GAAG,SAAS,CAAC,CAAC,CAAC;AAAA,MACnB,OACK;AACD,aAAK,gBAAgB;AACrB,cAAM,WAAW,IAAI;AACrB,aAAK,IAAI,SAAS,KAAK;AACvB,aAAK,iBAAiB,KAAK;AAAA,MAC/B;AACA,WAAK,YAAY,KAAK,aAAa;AACnC,WAAK,QAAQ,uBAAuB,EAAE,OAAO,KAAK,cAAc,CAAC;AAAA,IACrE;AAAA;AAAA;AAAA;AAAA;AAAA,IAKA,mBAAmB,OAAO;AACtB,YAAM,qBAAqB,KAAK;AAChC,UAAI,sBAAsB,KAAK,IAAI,SAAS,kBAAkB,GAAG;AAC7D,aAAK,IAAI,YAAY,kBAAkB;AACvC,aAAK,mBAAmB,kBAAkB;AAC1C,aAAK,YAAY,kBAAkB;AAAA,MACvC;AACA,UAAI,CAAC,SAAS,EAAE,iBAAiB,QAAQ;AACrC,cAAM,cAAa,+BAAO,eAAc,KAAK;AAC7C,aAAK,kBAAkB,IAAI,WAAW,aAAa,OAAO;AAAA,UACtD,YAAY,KAAK;AAAA,UACjB,SAAS;AAAA,UACT,KAAK,KAAK;AAAA,QACd,GAAG,SAAS,CAAC,CAAC,CAAC;AAAA,MACnB,OACK;AACD,aAAK,kBAAkB;AACvB,cAAM,WAAW,IAAI;AACrB,aAAK,IAAI,SAAS,KAAK;AACvB,aAAK,iBAAiB,KAAK;AAAA,MAC/B;AACA,WAAK,yBAAyB,KAAK,sBAAsB;AACzD,WAAK,YAAY,KAAK,eAAe;AACrC,WAAK,QAAQ,yBAAyB,EAAE,OAAO,KAAK,gBAAgB,CAAC;AAAA,IACzE;AAAA;AAAA;AAAA;AAAA;AAAA,IAKA,wBAAwB,OAAO;AAC3B,YAAM,0BAA0B,KAAK;AACrC,UAAI,2BAA2B,KAAK,IAAI,SAAS,uBAAuB,GAAG;AACvE,aAAK,IAAI,YAAY,uBAAuB;AAC5C,aAAK,YAAY,uBAAuB;AAAA,MAC5C;AACA,UAAI,CAAC,SAAS,EAAE,iBAAiB,QAAQ;AACrC,cAAM,cAAa,+BAAO,eAAc,KAAK;AAC7C,aAAK,uBAAuB,IAAI,WAAW,aAAa,OAAO;AAAA,UAC3D,YAAY,KAAK;AAAA,UACjB,SAAS;AAAA,UACT,KAAK,KAAK;AAAA,QACd,GAAG,SAAS,CAAC,CAAC,CAAC;AAAA,MACnB,OACK;AACD,aAAK,uBAAuB;AAC5B,YAAI,OAAO;AACP,gBAAM,WAAW,IAAI;AACrB,eAAK,IAAI,SAAS,KAAK;AACvB,eAAK,iBAAiB,KAAK;AAAA,QAC/B;AAAA,MACJ;AACA,WAAK,YAAY,KAAK,oBAAoB;AAC1C,WAAK,QAAQ,8BAA8B,EAAE,OAAO,KAAK,qBAAqB,CAAC;AAAA,IACnF;AAAA;AAAA,IAEA,MAAM,qBAAqB,MAAM;AAC7B,aAAO;AAAA,IACX;AAAA,IACA,qBAAqB,KAAK;AACtB,YAAM,OAAO,KAAK;AAClB,UAAI,IAAI,aAAa;AACjB,YAAI,IAAI,YAAY,QAAQ;AACxB,cAAI,aAAa,OAAK,EAAE,WAAW,CAAC;AACpC,cAAI,kBAAkB;AACtB,cAAI,aAAa,OAAK,EAAE,SAAS,CAAC;AAAA,QACtC,OACK;AACD,cAAI,gBAAgB;AAAA,QACxB;AAAA,MACJ;AAAA,IACJ;AAAA,IACA,MAAM,wBAAwB,WAAW;AACrC,YAAM,MAAM,KAAK,KAEjB,uBAAuB,IAAI,UAAU,yBAAyB,IAAI;AAElE,UAAI,sBAAsB;AACtB,YAAI,OAAO;AAAA,MACf,OAEK;AAED,YAAI,wBAAwB;AACxB,cAAI,aAAa;AAAA,QACrB;AAEA,YAAI,IAAI,aAAa;AACjB,cAAI,gBAAgB;AAAA,QACxB;AAAA,MACJ;AAEA,UAAI,iBAAiB;AAIrB,gBAAU;AAGV,UAAI,SAAS;AACb,UAAI;AACA,cAAM,eAAe,MAAM,KAAK,YAAY;AAE5C,iBAAS,CAAC,aAAa;AAAA,MAC3B,SACO,GAAP;AAEI,YAAI,CAAC,SAAS,KAAK,CAAC;AAChB,gBAAM;AACV,iBAAS;AAAA,MACb;AAEA,UAAI,QAAQ;AACR,YAAI,gBAAgB;AAEpB,YAAI,sBAAsB;AACtB,cAAI,WAAW;AAAA,QACnB;AAAA,MACJ,OAEK;AACD,aAAK,QAAQ,OAAO;AACpB,aAAK,qBAAqB,GAAG;AAAA,MACjC;AAEA,UAAI,WAAW;AACf,UAAI,aAAa;AACjB,aAAO;AAAA,IACX;AAAA,IACA,gBAAgB;AACZ,YAAM,EAAE,QAAQ,IAAI;AACpB,aAAO,KAAK,wBACJ,CAAC,KAAK,yBACF,UACE,EAAE,QAAQ,UAAU,QAAQ,qBAAqB,KAAK,QAAQ,iBAC9D;AAAA,IAClB;AAAA;AAAA,IAEA,WAAW,gBAAgB;AACvB,aAAO;AAAA,QACH,iBAAiB;AAAA,QACjB,eAAe;AAAA,QACf,kBAAkB;AAAA,QAClB,YAAY;AAAA,QACZ,eAAe;AAAA;AAAA;AAAA;AAAA,QAIf,YAAY;AAAA,QACZ,eAAe;AAAA,QACf,iBAAiB;AAAA,QACjB,iBAAiB;AAAA,QACjB,sBAAsB;AAAA,QACtB,iBAAiB;AAAA,QACjB,oBAAoB;AAAA,QACpB,sBAAsB;AAAA,QACtB,sBAAsB;AAAA,QACtB,oBAAoB;AAAA,QACpB,qBAAqB;AAAA,MACzB;AAAA,IACJ;AAAA,IACA,WAAW,YAAY;AACnB,aAAO;AAAA,QACH,mBAAmB;AAAA,MACvB;AAAA,IACJ;AAAA,EACJ;AACA,EAAAH,4BAA2B,eAAe;AAC1C,EAAAD,aAAW;AAAA,IACP,YAAY,EAAE,MAAM,WAAW,cAAc,KAAK,CAAC;AAAA,EACvD,GAAGC,4BAA2B,WAAW,4BAA4B,MAAM;AAC3E,EAAAD,aAAW;AAAA,IACP,YAAY,EAAE,MAAM,WAAW,cAAc,MAAM,CAAC;AAAA,EACxD,GAAGC,4BAA2B,WAAW,4CAA4C,MAAM;AAC3F,EAAAD,aAAW;AAAA,IACP,YAAY,EAAE,MAAM,WAAW,cAAc,KAAK,CAAC;AAAA,EACvD,GAAGC,4BAA2B,WAAW,sDAAsD,MAAM;AACrG,SAAOA;AACX,CAAC,EAAE;AACH;;;AC7hCA,IAAII,eAA0C,SAAU,YAAY,QAAQ,KAAK,MAAM;AACnF,MAAI,IAAI,UAAU,QAAQ,IAAI,IAAI,IAAI,SAAS,SAAS,OAAO,OAAO,OAAO,yBAAyB,QAAQ,GAAG,IAAI,MAAM;AAC3H,MAAI,OAAO,YAAY,YAAY,OAAO,QAAQ,aAAa;AAAY,QAAI,QAAQ,SAAS,YAAY,QAAQ,KAAK,IAAI;AAAA;AACxH,aAAS,IAAI,WAAW,SAAS,GAAG,KAAK,GAAG;AAAK,UAAI,IAAI,WAAW,CAAC;AAAG,aAAK,IAAI,IAAI,EAAE,CAAC,IAAI,IAAI,IAAI,EAAE,QAAQ,KAAK,CAAC,IAAI,EAAE,QAAQ,GAAG,MAAM;AAChJ,SAAO,IAAI,KAAK,KAAK,OAAO,eAAe,QAAQ,KAAK,CAAC,GAAG;AAChE;AAYO,IAAM,gDAAgD,WAAW,OAAO,+BAA+B,6BAA6B,UAAU,yBAAyB;AAC1K,MAAI,4BAA4B,gBAAgB;AAC5C,WAAO;AAEX,MAAI,2BAA2B,4BAA4B,gBAAgB;AACvE,UAAM,qBAAqB,oBAAI,IAAI;AAInC,eAAW,YAAY,4BAA4B,gBAAgB;AAC/D,UAAI,SAAS,WAAW,GAAG;AACvB,2BAAmB,IAAI,QAAQ;AAAA,MACnC,OACK;AACD,cAAMC,aAAY,SAAS,kBAAkB,IAErC,OAAO,MAAM,oCAAoC,SAAS,WAAW,OAAO,QAAQ,IAEpF,SAAS;AACjB,cAAMC,WAAU,SAAS,gBAAgB,IAEjC,OAAO,MAAM,oCAAoC,SAAS,SAAS,OAAO,QAAQ,IAElF,SAAS;AACjB,cAAM,iBAAiB;AACvB,2BAAmB,IAAI,eAAe,SAAS;AAAA,UAC3C,cAAc;AAAA,UACd,MAAM,eAAe,SAAS,uBAAuB,QAAQ,uBAAuB,MAAM,uBAAuB;AAAA,UACjH,WAAAD;AAAA,UACA,SAAAC;AAAA,QACJ,CAAC,CAAC;AAAA,MACN;AAAA,IACJ;AAEA,gCAA4B,iBAAiB;AAAA,EACjD;AACA,QAAM,YAAY,4BAA4B,kBAAkB,IAExD,OAAO,MAAM,oCAAoC,4BAA4B,WAAW,OAAO,QAAQ,IAEvG;AACR,QAAM,UAAU,4BAA4B,gBAAgB,IAEpD,OAAO,MAAM,oCAAoC,4BAA4B,SAAS,OAAO,QAAQ,IAErG;AACR,SAAO,mBAAmB;AAAA,IACtB;AAAA,IACA,mBAAmB,IAAI;AAAA,MACnB,gBAAgB,4BAA4B;AAAA,MAC5C;AAAA,MACA;AAAA,IACJ,CAAC;AAAA,EACL,GAAG,uBAAuB;AAC9B;AACO,IAAM,8CAA8C,WAAW,OAAO,+BAA+B,6BAA6B,UAAU,yBAAyB;AACxK,MAAI,8BAA8B,gBAAgB;AAC9C,WAAO;AAEX,MAAI,yBAAyB;AACzB,UAAM,qBAAqB,oBAAI,IAAI;AAInC,eAAW,YAAY,8BAA8B,gBAAgB;AAEjE,UAAI,SAAS,WAAW,GAAG;AACvB,2BAAmB,IAAI,QAAQ;AAAA,MACnC,OAEK;AACD,cAAMD,aAAY,SAAS,kBAAkB,IAErC,OAAO,MAAM,oCAAoC,SAAS,WAAW,MAAM,QAAQ,IAEnF,SAAS;AACjB,cAAMC,WAAU,SAAS,gBAAgB,IAEjC,OAAO,MAAM,oCAAoC,SAAS,SAAS,MAAM,QAAQ,IAEjF,SAAS;AACjB,cAAM,iBAAiB;AAEvB,2BAAmB,IAAI,eAAe,SAAS;AAAA,UAC3C,cAAc;AAAA,UACd,MAAM,eAAe,SAAS,uBAAuB,QAAQ,uBAAuB,MAAM,uBAAuB;AAAA,UACjH,WAAAD;AAAA,UACA,SAAAC;AAAA,QACJ,CAAC,CAAC;AAAA,MACN;AAAA,IACJ;AAEA,kCAA8B,iBAAiB;AAAA,EACnD;AACA,QAAM,YAAY,8BAA8B,kBAAkB,IAE1D,OAAO,MAAM,oCAAoC,8BAA8B,WAAW,MAAM,QAAQ,IAExG;AACR,QAAM,UAAU,8BAA8B,gBAAgB,IAEtD,OAAO,MAAM,oCAAoC,8BAA8B,SAAS,MAAM,QAAQ,IAEtG;AACR,SAAO,mBAAmB;AAAA,IACtB;AAAA,IACA,mBAAmB,IAAI;AAAA,MACnB,cAAc,aAAa,UAAU,gCAAgC;AAAA,MACrE,gBAAgB,aAAa,UAAU,8BAA8B,iBAAiB;AAAA,MACtF;AAAA,MACA;AAAA,IACJ,CAAC;AAAA,EACL,GAAG,uBAAuB;AAC9B;AACO,IAAM,oBAAoB;AAoC1B,IAAM,6BAAN,cAAyC,MAAM,CAAC,iBAAiB,GAAG,CAAC,SAAS;AACjF,QAAM,aAAa,KAAK;AACxB,QAAMC,oCAAmC,KAAK;AAAA;AAAA,IAE1C,CAAC,wBAAwB,MAAM,YAAY,MAAM;AAG7C,UAAI,OAAO,KAAK,aAAa;AACzB,eAAO;AACX,UAAI,WAAW,OAAO,KAAK,2BAA2B;AACtD,aAAO,QAAQ,WAAW,IAAI,OAAO,KAAK,mBAAmB,MAAM,SAAS,IAAI;AAAA,IACpF;AAAA,IACA,CAAC,qCAAqC,aAAa,8BAA8B,4BAA4B,0BAA0B,OAAO;AAC1I,YAAM,yBAAyB,OAAO,KAAK,2BAA2B;AACtE,UAAI,0BAA0B,MAAM;AAChC,eAAO;AAAA,MACX;AACA,YAAM,sBAAuB,cAAc,gDAAgD;AAC3F,YAAM,oBAAoB,OAAO,oBAAoB,MAAM,mBAAmB,8BAA8B,uBAAuB,GAAG,mBAAmB,4BAA4B,uBAAuB,GAAG,wBAAwB,uBAAuB;AAC9P,aAAO;AAAA,IACX;AAAA;AAAA;AAAA;AAAA;AAAA,IAKA,CAAC,wCAAwC;AACrC,aAAO,CAAC;AAAA,IACZ;AAAA;AAAA;AAAA;AAAA;AAAA,IAKA,CAAC,sCAAsC;AACnC,aAAO,CAAC;AAAA,IACZ;AAAA;AAAA;AAAA;AAAA;AAAA,IAKA,CAAC,6CAA6C;AAC1C,aAAO,CAAC;AAAA,IACZ;AAAA;AAAA;AAAA;AAAA;AAAA,IAKA,CAAC,2CAA2C;AACxC,aAAO,CAAC;AAAA,IACZ;AAAA,IACA,CAAC,2CAA2C,0BAA0B,OAAO;AACzE,YAAM,+BAA+B,MAAM,KAAK,EAAE;AAClD,YAAM,6BAA6B,MAAM,KAAK,EAAE;AAChD,aAAO,OAAO,KAAK;AAAA,QAAqC;AAAA;AAAA;AAAA,QAGxD,6BAA6B,OAAO,MAAM,KAAK,EAAE,4BAA4B;AAAA,QAAG,2BAA2B,OAAO,MAAM,KAAK,EAAE,0BAA0B;AAAA,QAAG;AAAA,MAAuB;AAAA,IACvL;AAAA,IACA,CAAC,2CAA2C;AACxC,aAAO,OAAO,KAAK,2CAA2C;AAAA,IAClE;AAAA,IACA,CAAC,yCAAyC,0BAA0B,OAAO;AACvE,YAAM,+BAA+B,MAAM,KAAK,EAAE;AAClD,YAAM,6BAA6B,MAAM,KAAK,EAAE;AAChD,aAAO,OAAO,KAAK;AAAA,QAAqC;AAAA;AAAA;AAAA,QAGxD,6BAA6B,OAAO,MAAM,KAAK,EAAE,4BAA4B;AAAA,QAAG,2BAA2B,OAAO,MAAM,KAAK,EAAE,0BAA0B;AAAA,QAAG;AAAA,MAAuB;AAAA,IACvL;AAAA,IACA,CAAC,yCAAyC;AACtC,aAAO,OAAO,KAAK,yCAAyC;AAAA,IAChE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAaA,CAAC,gCAAgC,OAAO;AACpC,aAAO;AAAA,IACX;AAAA,IACA,CAAC,qCAAqC;AAClC,UAAI,SAAS;AACb,YAAM,oBAAoB,OAAO,KAAK,kBAAkB;AACxD,eAAS,cAAc,mBAAmB;AACtC,YAAI;AACJ,YAAI,EAAE,OAAO,KAAK,gCAAgC,UAAU;AACxD;AACJ,aAAK,MAAM,WAAW,EAAE,uBAAuB,OAAO,WAAW,aAAa,IAAI;AAC9E,sBAAY,MAAM,WAAW,EAAE;AAAA,QACnC;AACA,oBAAY,cAAc,MAAM,WAAW,EAAE;AAC7C,YAAI,aAAa,YAAY;AACzB,mBAAS;AAAA,MACjB;AACA,aAAO,OAAO,QAAQ,IAAI,SAAS,QAAQ,IAAI,SAAS;AAAA,IAC5D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAaA,CAAC,8BAA8B,OAAO;AAClC,aAAO;AAAA,IACX;AAAA,IACA,CAAC,mCAAmC;AAChC,UAAI,SAAS;AACb,YAAM,oBAAoB,OAAO,KAAK,kBAAkB;AACxD,eAAS,cAAc,mBAAmB;AACtC,YAAI;AACJ,YAAI,EAAE,OAAO,KAAK,8BAA8B,UAAU;AACtD;AACJ,aAAK,MAAM,WAAW,EAAE,uBAAuB,OAAO,WAAW,aAAa,IAAI;AAC9E,sBAAY,MAAM,WAAW,EAAE;AAAA,QACnC;AACA,oBAAY,cAAc,MAAM,WAAW,EAAE;AAC7C,YAAI,aAAa,YAAY;AACzB,mBAAS;AAAA,MACjB;AACA,aAAO,OAAO,QAAQ,IAAI,SAAS,QAAQ,IAAI,SAAS;AAAA,IAC5D;AAAA,IACA,CAAC,6BAA6B;AAI1B,WAAK,MAAM,KAAK,EAAE,uBAAuB,MAAM,KAAK,EAAE,eAAe,UAAU,SAAS;AACpF,eAAO,MAAM,KAAK,EAAE;AAAA,MACxB;AAEA,UAAI,OAAO,KAAK,aAAa,GAAG;AAC5B,eAAO,MAAM,KAAK,EAAE;AAAA,MACxB;AACA,UAAI,EAAE,OAAO,KAAK,mBAAmB,IAAI;AACrC,eAAO,MAAM,KAAK,EAAE;AAAA,MACxB;AACA,UAAI,oBAAoB,MAAM,KAAK,EAAE;AACrC,UAAI,sBAAsB,MAAM;AAC5B,eAAO;AAAA,MACX,WACS,kBAAkB,gBAAgB,GAAG;AAE1C,4BAAoB,OAAO,KAAK,2CAA2C,IAAI;AAC/E,cAAM,WAAW,eAAe,IAAI;AAAA,UAChC,WAAW,CAAC,GAAG,kBAAkB,cAAc;AAAA,QACnD,CAAC;AACD,aAAK,MAAM,cAAc,uBAAuB,QAAQ;AACpD,gBAAM,OAAO,QAAQ;AAAA,QACzB,OACK;AACD,iBAAO;AAAA,QACX;AAAA,MACJ;AACA,aAAO,aAAa,kBAAkB,SAAS,IAAI,kBAAkB,YAAY;AAAA,IACrF;AAAA,IACA,CAAC,0BAA0B;AACvB,YAAM,OAAO,MAAM,KAAK,EAAE;AAC1B,aAAO,OAAO,KAAK,wBAAwB,MAAM,IAAI;AAAA,IACzD;AAAA,IACA,CAAC,2BAA2B;AAIxB,WAAK,MAAM,KAAK,EAAE,uBAAuB,MAAM,KAAK,EAAE,eAAe,UAAU,SAAS;AACpF,eAAO,MAAM,KAAK,EAAE;AAAA,MACxB;AAEA,UAAI,OAAO,KAAK,aAAa,GAAG;AAC5B,eAAO,MAAM,KAAK,EAAE;AAAA,MACxB;AACA,UAAI,EAAE,OAAO,KAAK,mBAAmB,IAAI;AACrC,eAAO,MAAM,KAAK,EAAE;AAAA,MACxB;AACA,UAAI,oBAAoB,MAAM,KAAK,EAAE;AACrC,UAAI,sBAAsB,MAAM;AAC5B,eAAO;AAAA,MACX,WACS,kBAAkB,gBAAgB,GAAG;AAE1C,4BAAoB,OAAO,KAAK,yCAAyC,IAAI;AAC7E,cAAM,WAAW,eAAe,IAAI;AAAA,UAChC,WAAW,CAAC,GAAG,kBAAkB,cAAc;AAAA,QACnD,CAAC;AACD,aAAK,MAAM,cAAc,uBAAuB,QAAQ;AACpD,gBAAM,OAAO,QAAQ;AAAA,QACzB,OACK;AACD,iBAAO;AAAA,QACX;AAAA,MACJ;AACA,aAAO,aAAa,kBAAkB,SAAS,IAAI,kBAAkB,YAAY;AAAA,IACrF;AAAA,IACA,CAAC,wBAAwB;AACrB,aAAO,MAAM,KAAK,EAAE;AAAA,IACxB;AAAA,IACA,CAAC,qBAAqB;AAClB,YAAM,qBAAqB,MAAM,KAAK,EAAE;AACxC,YAAM,mBAAmB,MAAM,KAAK,EAAE;AACtC,YAAM,oCAAoC,MAAM,KAAK,EAAE;AACvD,YAAM,kCAAkC,MAAM,KAAK,EAAE;AACrD,aAAO,SAAQ,yDAAoB,YAAU,qDAAkB,YAAU,uFAAmC,YAAU,mFAAiC,OAAM;AAAA,IACjK;AAAA,IACA,CAAC,yBAAyB;AACtB,YAAM,YAAY,MAAM,KAAK,EAAE;AAC/B,UAAI,cAAc,UAAU,SAAS;AAIjC,YAAI,EAAE,OAAO,KAAK,mBAAmB,OAAO,MAAM,KAAK,EAAE,uBAAuB,MAAM,KAAK,EAAE,cAAc;AACvG,iBAAO,OAAO,WAAW,uBAAuB,KAAK,IAAI;AAAA,QAC7D;AACA,gBAAQ,MAAM,KAAK,EAAE,oBAAoB,OAAO,WAAW,uBAAuB,KAAK,IAAI;AAAA,MAC/F,OACK;AACD,eAAO,OAAO,WAAW,uBAAuB,KAAK,IAAI;AAAA,MAC7D;AAAA,IACJ;AAAA,IACA,CAAC,6BAA6B;AAC1B,YAAM,YAAY,MAAM,KAAK,EAAE;AAC/B,cAAQ,WAAW;AAAA,QACf,KAAK,UAAU;AAIX,cAAI,EAAE,OAAO,KAAK,mBAAmB,OAAO,MAAM,KAAK,EAAE,uBAAuB,MAAM,KAAK,EAAE,cAAc;AACvG,mBAAO,OAAO,WAAW,2BAA2B,KAAK,IAAI;AAAA,UACjE;AACA,gBAAM,gBAAgB,MAAM,KAAK,EAAE;AACnC,cAAI,eAAe;AACf,gBAAI,aAAa,aAAa;AAC1B,qBAAO;AACX,kBAAM,0BAA0B,OAAO,WAAW,2BAA2B,KAAK,IAAI;AACtF,kBAAM,kCAAkC,MAAM,KAAK,EAAE;AACrD,gBAAI,gCAAgC,aAAa,uBAAuB;AACpE,qBAAO;AACX,mBAAO,aAAa,gCAAgC,OAAO,IAAI,gCAAgC,UAAU;AAAA,UAC7G,OACK;AACD,mBAAO,OAAO,WAAW,2BAA2B,KAAK,IAAI;AAAA,UACjE;AAAA,QACJ;AACI,iBAAO,OAAO,WAAW,2BAA2B,KAAK,IAAI;AAAA,MACrE;AAAA,IACJ;AAAA,IACA,CAAC,uBAAuB;AACpB,YAAM,YAAY,MAAM,KAAK,EAAE;AAC/B,UAAI,cAAc,UAAU,SAAS;AAIjC,YAAI,EAAE,OAAO,KAAK,mBAAmB,OAAO,MAAM,KAAK,EAAE,uBAAuB,MAAM,KAAK,EAAE,cAAc;AACvG,iBAAO,OAAO,WAAW,qBAAqB,KAAK,IAAI;AAAA,QAC3D;AACA,gBAAQ,MAAM,KAAK,EAAE,kBAAkB,OAAO,WAAW,qBAAqB,KAAK,IAAI;AAAA,MAC3F,OACK;AACD,eAAO,OAAO,WAAW,qBAAqB,KAAK,IAAI;AAAA,MAC3D;AAAA,IACJ;AAAA,IACA,CAAC,2BAA2B;AACxB,YAAM,YAAY,MAAM,KAAK,EAAE;AAC/B,cAAQ,WAAW;AAAA,QACf,KAAK,UAAU;AAIX,cAAI,EAAE,OAAO,KAAK,mBAAmB,OAAO,MAAM,KAAK,EAAE,uBAAuB,MAAM,KAAK,EAAE,cAAc;AACvG,mBAAO,OAAO,WAAW,yBAAyB,KAAK,IAAI;AAAA,UAC/D;AACA,gBAAM,cAAc,MAAM,KAAK,EAAE;AACjC,cAAI,aAAa;AACb,gBAAI,aAAa,WAAW;AACxB,qBAAO;AACX,kBAAM,wBAAwB,OAAO,WAAW,yBAAyB,KAAK,IAAI;AAClF,kBAAM,gCAAgC,MAAM,KAAK,EAAE;AACnD,gBAAI,8BAA8B,aAAa,qBAAqB;AAChE,qBAAO;AACX,mBAAO,aAAa,8BAA8B,OAAO,IAAI,8BAA8B,UAAU;AAAA,UACzG,OACK;AACD,mBAAO,OAAO,WAAW,yBAAyB,KAAK,IAAI;AAAA,UAC/D;AAAA,QACJ;AACI,iBAAO,OAAO,WAAW,yBAAyB,KAAK,IAAI;AAAA,MACnE;AAAA,IACJ;AAAA,IACA,CAAC,qBAAqB;AAClB,YAAM,UAAU,KAAK,WAAW;AAChC,aAAO,MAAM,QAAQ,EAAE;AAAA,IAC3B;AAAA,EACJ;AACA,EAAAH,aAAW;AAAA,IACP,MAAM,EAAE,MAAM,kBAAkB,CAAC;AAAA,EACrC,GAAGG,4BAA2B,WAAW,6BAA6B,MAAM;AAC5E,EAAAH,aAAW;AAAA,IACP,MAAM,EAAE,MAAM,kBAAkB,CAAC;AAAA,EACrC,GAAGG,4BAA2B,WAAW,qBAAqB,MAAM;AACpE,EAAAH,aAAW;AAAA,IACP,YAAY,EAAE,MAAM,QAAQ,SAAS,MAAM,GAAG,EAAE,MAAM,mBAAmB,WAAW,eAAe,YAAY,MAAM,CAAC;AAAA,EAC1H,GAAGG,4BAA2B,WAAW,kBAAkB,MAAM;AACjE,EAAAH,aAAW;AAAA,IACP,MAAM,EAAE,MAAM,kBAAkB,CAAC;AAAA,EACrC,GAAGG,4BAA2B,WAAW,2BAA2B,MAAM;AAC1E,EAAAH,aAAW;AAAA,IACP,MAAM,EAAE,MAAM,kBAAkB,CAAC;AAAA,EACrC,GAAGG,4BAA2B,WAAW,mBAAmB,MAAM;AAClE,EAAAH,aAAW;AAAA,IACP,YAAY,EAAE,MAAM,QAAQ,SAAS,MAAM,GAAG,EAAE,MAAM,mBAAmB,WAAW,eAAe,YAAY,MAAM,CAAC;AAAA,EAC1H,GAAGG,4BAA2B,WAAW,gBAAgB,MAAM;AAC/D,EAAAH,aAAW;AAAA,IACP,MAAM;AAAA,EACV,GAAGG,4BAA2B,WAAW,gCAAgC,MAAM;AAC/E,EAAAH,aAAW;AAAA,IACP,MAAM;AAAA,EACV,GAAGG,4BAA2B,WAAW,8BAA8B,MAAM;AAC7E,EAAAH,aAAW;AAAA,IACP,MAAM,EAAE,MAAM,kBAAkB,CAAC;AAAA,EACrC,GAAGG,4BAA2B,WAAW,qCAAqC,MAAM;AACpF,EAAAH,aAAW;AAAA,IACP,MAAM,EAAE,MAAM,kBAAkB,CAAC;AAAA,EACrC,GAAGG,4BAA2B,WAAW,mCAAmC,MAAM;AAClF,EAAAH,aAAW;AAAA,IACP,MAAM;AAAA,EACV,GAAGG,4BAA2B,WAAW,mCAAmC,MAAM;AAClF,EAAAH,aAAW;AAAA,IACP,MAAM;AAAA,EACV,GAAGG,4BAA2B,WAAW,iCAAiC,MAAM;AAChF,EAAAH,aAAW;AAAA,IACP,UAAU,8BAA8B;AAAA,EAC5C,GAAGG,4BAA2B,WAAW,yCAAyC,IAAI;AACtF,EAAAH,aAAW;AAAA,IACP,UAAU,4BAA4B;AAAA,EAC1C,GAAGG,4BAA2B,WAAW,uCAAuC,IAAI;AACpF,EAAAH,aAAW;AAAA,IACP,UAAU,mCAAmC;AAAA,EACjD,GAAGG,4BAA2B,WAAW,8CAA8C,IAAI;AAC3F,EAAAH,aAAW;AAAA,IACP,UAAU,iCAAiC;AAAA,EAC/C,GAAGG,4BAA2B,WAAW,4CAA4C,IAAI;AACzF,EAAAH,aAAW;AAAA,IACP,UAAU,iCAAiC;AAAA,EAC/C,GAAGG,4BAA2B,WAAW,4CAA4C,IAAI;AACzF,EAAAH,aAAW;AAAA,IACP,UAAU,+BAA+B;AAAA,EAC7C,GAAGG,4BAA2B,WAAW,0CAA0C,IAAI;AACvF,EAAAH,aAAW;AAAA,IACP,UAAU,2BAA2B;AAAA,EACzC,GAAGG,4BAA2B,WAAW,sCAAsC,IAAI;AACnF,EAAAH,aAAW;AAAA,IACP,UAAU,yBAAyB;AAAA,EACvC,GAAGG,4BAA2B,WAAW,oCAAoC,IAAI;AACjF,EAAAH,aAAW;AAAA,IACP,UAAU,mBAAmB;AAAA,EACjC,GAAGG,4BAA2B,WAAW,8BAA8B,IAAI;AAC3E,EAAAH,aAAW;AAAA,IACP,UAAU,gBAAgB;AAAA,EAC9B,GAAGG,4BAA2B,WAAW,2BAA2B,IAAI;AACxE,EAAAH,aAAW;AAAA,IACP,UAAU,iBAAiB;AAAA,EAC/B,GAAGG,4BAA2B,WAAW,4BAA4B,IAAI;AACzE,EAAAH,aAAW;AAAA,IACP,UAAU,cAAc;AAAA,EAC5B,GAAGG,4BAA2B,WAAW,yBAAyB,IAAI;AACtE,EAAAH,aAAW;AAAA,IACP,UAAU,WAAW;AAAA,EACzB,GAAGG,4BAA2B,WAAW,sBAAsB,IAAI;AACnE,SAAOA;AACX,CAAC,EAAE;AACH;;;ACliBA,IAAIC,eAA0C,SAAU,YAAY,QAAQ,KAAK,MAAM;AACnF,MAAI,IAAI,UAAU,QAAQ,IAAI,IAAI,IAAI,SAAS,SAAS,OAAO,OAAO,OAAO,yBAAyB,QAAQ,GAAG,IAAI,MAAM;AAC3H,MAAI,OAAO,YAAY,YAAY,OAAO,QAAQ,aAAa;AAAY,QAAI,QAAQ,SAAS,YAAY,QAAQ,KAAK,IAAI;AAAA;AACxH,aAAS,IAAI,WAAW,SAAS,GAAG,KAAK,GAAG;AAAK,UAAI,IAAI,WAAW,CAAC;AAAG,aAAK,IAAI,IAAI,EAAE,CAAC,IAAI,IAAI,IAAI,EAAE,QAAQ,KAAK,CAAC,IAAI,EAAE,QAAQ,GAAG,MAAM;AAChJ,SAAO,IAAI,KAAK,KAAK,OAAO,eAAe,QAAQ,KAAK,CAAC,GAAG;AAChE;AA8BO,IAAM,yBAAN,cAAqC,MAAM,CAAC,4BAA4B,gBAAgB,GAAG,CAAC,SAAS;AACxG,QAAM,aAAa,KAAK;AACxB,QAAM,0BAA0B,KAAK;AAAA,IACjC,cAAc;AACV,YAAM,GAAG,SAAS;AAElB,WAAK,0BAA0B;AAAA,IACnC;AAAA,IACA,eAAe,IAAI,aAAa,OAAO,MAAM,eAAe,MAAM;AAI9D,YAAM,UAAU,KAAK,WAAW;AAIhC,WAAI,mCAAS,2BACN,YAAY,MAAM,cAAc,KAAK,EAAE,SAAS,KAChD,EAAC,mCAAS,WAAW,wBACrB,CAAC,KAAK,eACN,EAAC,mCAAS,SAAS,cAAa;AACnC,cAAM,gBAAgB,KAAK,8BAA8B;AACzD,YAAI,eAAe;AACf,eAAK,iBAAiB;AACtB,eAAK,iBAAiB;AAAA,QAC1B;AAAA,MACJ;AACA,aAAO,WAAW,eAAe,KAAK,MAAM,IAAI,aAAa,OAAO,MAAM,YAAY;AAAA,IAC1F;AAAA,IACA,aAAa,IAAI,aAAa,OAAO,MAAM,eAAe,OAAO;AAI7D,YAAM,UAAU,KAAK,WAAW;AAChC,WAAI,mCAAS,2BACN,YAAY,MAAM,cAAc,KAAK,EAAE,SAAS,KAChD,gBACA,EAAC,mCAAS,WAAW,wBACrB,EAAC,mCAAS,SAAS,cAAa;AACnC,cAAM,gBAAgB,KAAK,4BAA4B;AACvD,YAAI,eAAe;AACf,eAAK,iBAAiB;AACtB,eAAK,iBAAiB;AAAA,QAC1B;AAAA,MACJ;AACA,aAAO,WAAW,aAAa,KAAK,MAAM,IAAI,aAAa,OAAO,MAAM,YAAY;AAAA,IACxF;AAAA,IACA,CAAC,0BAA0B;AACvB,UAAI,iBAAiB,MAAM;AAE3B,UAAI,EAAE,OAAO,KAAK,2BAA2B,cAAc,IAAI;AAC3D,yBAAiB;AAAA,MACrB;AACA,aAAO;AAAA,IACX;AAAA,IACA,CAAC,wBAAwB,GAAG;AACxB,UAAI,iBAAiB,MAAM;AAC3B,YAAM,iBAAiB,MAAM,KAAK,EAAE;AACpC,UAAI,CAAC,gBAAgB;AACjB,yBAAiB;AAAA,MACrB,WAES,CAAC,gBAAgB;AAEtB,yBAAiB,KAAK,6BAA6B,GAAG,cAAc;AAAA,MACxE;AACA,aAAO;AAAA,IACX;AAAA,IACA,gCAAgC;AAC5B,YAAM,EAAE,UAAU,IAAI;AACtB,UAAI,CAAC,KAAK,6BAA6B;AACnC,eAAO;AACX,cAAQ,WAAW;AAAA,QACf,KAAK,UAAU;AAAS,iBAAO,eAAe;AAAA,QAC9C,KAAK,UAAU;AAAU,iBAAO,eAAe;AAAA,MACnD;AAAA,IACJ;AAAA,IACA,8BAA8B;AAC1B,YAAM,EAAE,UAAU,IAAI;AACtB,UAAI,CAAC,KAAK,6BAA6B;AACnC,eAAO;AACX,cAAQ,WAAW;AAAA,QACf,KAAK,UAAU;AAAS,iBAAO,eAAe;AAAA,QAC9C,KAAK,UAAU;AAAU,iBAAO,eAAe;AAAA,MACnD;AAAA,IACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAMA,+BAA+B;AAC3B,YAAM,EAAE,mBAAmB,yBAAyB,eAAe,IAAI;AACvE,UAAI,SAAS;AAEb,UAAI,CAAC,qBAAqB,CAAC,yBAAyB;AAChD,YAAI,gBAAgB;AAChB,kBAAQ,gBAAgB;AAAA,YACpB,KAAK,eAAe;AAAA,YACpB,KAAK,eAAe;AAAA,YACpB,KAAK,eAAe;AAAA,YACpB,KAAK,eAAe;AAChB,uBAAS;AAAA,UACjB;AAAA,QACJ,OAEK;AACD,mBAAS;AAAA,QACb;AAAA,MACJ;AACA,aAAO;AAAA,IACX;AAAA,IACA,eAAe,YAAY,gBAAgB,QAAQ;AAO/C,WAAK,0BAA0B;AAE/B,YAAM,SAAS,MAAM,eAAe,YAAY,gBAAgB,MAAM;AACtE,WAAK,0BAA0B;AAC/B,aAAO;AAAA,IACX;AAAA;AAAA;AAAA;AAAA;AAAA,IAKA,6BAA6B,GAAG,gBAAgB;AAC5C,cAAQ,gBAAgB;AAAA,QACpB,KAAK,eAAe;AAAA,QACpB,KAAK,eAAe;AAAA,QACpB,KAAK,eAAe;AAChB,iBAAO,EAAE,0BAA0B,KAAK,EAAE,SAAS,CAAC;AAAA,QACxD,KAAK,eAAe;AAAA,QACpB,KAAK,eAAe;AAAA,QACpB,KAAK,eAAe;AAChB,iBAAO,EAAE,0BAA0B,KAAK,EAAE,OAAO,CAAC;AAAA,MAC1D;AACA,aAAO;AAAA,IACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAOA,CAAC,2BAA2B,gBAAgB;AAExC,YAAM,eAAe,OAAO,KAAK,aAAa;AAC9C,cAAQ,gBAAgB;AAAA,QAEpB,KAAK,eAAe;AAAA,QACpB,KAAK,eAAe;AAAA,QACpB,KAAK,eAAe;AAAA,QACpB,KAAK,eAAe;AAChB,iBAAO,CAAC;AAAA,MAChB;AACA,aAAO;AAAA,IACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAOA,MAAM,cAAc,gBAAgB,gBAAgB;AAChD,WAAK,iBAAiB;AACtB,UAAI,mBAAmB,QAAW;AAC9B,aAAK,iBAAiB;AAAA,MAC1B;AACA,aAAO,KAAK,YAAY;AAAA,IAC5B;AAAA,IACA,CAAC,sCAAsC;AACnC,YAAM,YAAY,OAAO,WAAW,oCAAoC,KAAK,IAAI;AACjF,YAAM,oBAAoB,MAAM,KAAK,EAAE;AACvC,YAAM,iBAAiB,MAAM,KAAK,EAAE;AACpC,YAAM,iBAAiB,MAAM,KAAK,EAAE;AACpC,YAAM,8BAA8B,KAAK,QAAQ;AAEjD,UAAI,CAAC,qBAAqB,kBAAkB,gBAAgB;AAExD,gBAAQ,gBAAgB;AAAA,UACpB,KAAK,eAAe;AAChB,sBAAU,QAAQ,4BAA4B,IAAI;AAAA,cAC9C,OAAO;AAAA,cACP,MAAM,uBAAuB;AAAA,cAC7B,WAAW;AAAA,cACX,SAAS;AAAA,YACb,CAAC,CAAC;AACF;AAAA,UACJ,KAAK,eAAe;AAChB,sBAAU,QAAQ,4BAA4B,IAAI;AAAA,cAC9C,OAAO;AAAA,cACP,MAAM,uBAAuB;AAAA,cAC7B,WAAW;AAAA,YACf,CAAC,CAAC;AACF;AAAA,UACJ,KAAK,eAAe;AAChB,sBAAU,QAAQ,4BAA4B,IAAI;AAAA,cAC9C,OAAO;AAAA,cACP,MAAM,uBAAuB;AAAA,cAC7B,SAAS;AAAA,YACb,CAAC,CAAC;AACF;AAAA,QACR;AAAA,MACJ;AACA,aAAO;AAAA,IACX;AAAA,IACA,CAAC,wCAAwC;AACrC,YAAM,YAAY,OAAO,WAAW,sCAAsC,KAAK,IAAI;AACnF,YAAM,oBAAoB,MAAM,KAAK,EAAE;AACvC,YAAM,iBAAiB,MAAM,KAAK,EAAE;AACpC,YAAM,iBAAiB,MAAM,KAAK,EAAE;AACpC,YAAM,8BAA8B,KAAK,QAAQ;AAEjD,UAAI,CAAC,qBAAqB,kBAAkB,gBAAgB;AAExD,gBAAQ,gBAAgB;AAAA,UACpB,KAAK,eAAe;AAChB,sBAAU,QAAQ,4BAA4B,IAAI;AAAA,cAC9C,OAAO;AAAA,cACP,MAAM,uBAAuB;AAAA,cAC7B,WAAW;AAAA,cACX,SAAS;AAAA,YACb,CAAC,CAAC;AACF;AAAA,UACJ,KAAK,eAAe;AAChB,sBAAU,QAAQ,4BAA4B,IAAI;AAAA,cAC9C,OAAO;AAAA,cACP,MAAM,uBAAuB;AAAA,cAC7B,WAAW;AAAA,YACf,CAAC,CAAC;AACF;AAAA,UACJ,KAAK,eAAe;AAChB,sBAAU,QAAQ,4BAA4B,IAAI;AAAA,cAC9C,OAAO;AAAA,cACP,MAAM,uBAAuB;AAAA,cAC7B,SAAS;AAAA,YACb,CAAC,CAAC;AACF;AAAA,QACR;AAAA,MACJ;AACA,aAAO;AAAA,IACX;AAAA,EACJ;AACA,EAAAA,aAAW;AAAA,IACP,YAAY,EAAE,MAAM,SAAS,GAAG,EAAE,MAAM,KAAK,CAAC;AAAA,EAClD,GAAG,kBAAkB,WAAW,kBAAkB,MAAM;AACxD,EAAAA,aAAW;AAAA,IACP,YAAY,EAAE,MAAM,OAAO,GAAG,EAAE,WAAW,eAAe,MAAM,KAAK,CAAC;AAAA,EAC1E,GAAG,kBAAkB,WAAW,kBAAkB,MAAM;AACxD,EAAAA,aAAW;AAAA,IACP,UAAU,gBAAgB;AAAA,EAC9B,GAAG,kBAAkB,WAAW,2BAA2B,IAAI;AAC/D,EAAAA,aAAW;AAAA,IACP,UAAU,gBAAgB;AAAA,EAC9B,GAAG,kBAAkB,WAAW,2BAA2B,IAAI;AAC/D,SAAO;AACX,CAAC,EAAE;AACH;AAKO,IAAM,yCAAN,cAAqD,oBAAY,kBAAkB,EAAE;AAAA,EACxF,WAAW,QAAQ;AACf,WAAO;AAAA,EACX;AAAA,EACA,YAAY;AACR,UAAM,UAAU,GAAG,SAAS;AAC5B,SAAK,QAAQ,KAAK,SAAS;AAAA,EAC/B;AAAA,EACA,iBAAiB;AACb,UAAM,EAAE,MAAM,IAAI;AAClB,WAAO,OAAO,KAAK,EAAE,mBAAmB,GAAG,MAAM,QAAQ,MAAM,IAAI,KAAK,SAAS,kBAAkB,MAAM,cAAc,CAAC;AAAA,EAC5H;AAAA;AAAA;AAAA;AAAA,EAIA,UAAU;AACN,SAAK,MAAM,iBAAiB;AAAA,EAChC;AACJ;AAIO,IAAM,oCAAN,cAAgD,8BAA8B;AAAA,EACjF,WAAW,QAAQ;AACf,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,OAAO,eAAe,UAAU;AAC5B,QAAI;AACJ,YAAQ,SAAS,MAAM,gBAAgB;AAAA,MACnC,KAAK,eAAe;AAAA,MACpB,KAAK,eAAe;AAAA,MACpB,KAAK,eAAe;AAAA,MACpB,KAAK,eAAe;AAChB,cAAM,KAAK,EAAE,4BAA4B;AACzC;AAAA,MACJ,KAAK,eAAe;AAAA,MACpB,KAAK,eAAe;AAChB,cAAM,KAAK,EAAE,0BAA0B;AACvC;AAAA,IACR;AACA,WAAO,OAAO,KAAK,GAAG,KAAK,yBAAyB,QAAQ,CAAC;AAAA,EACjE;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,OAAO,kBAAkB,gBAAgB;AACrC,WAAO,KAAK,EAAE,sBAAsB,EAAE,cAAc;AAAA,EACxD;AAAA,EACA,OAAO,yBAAyB,UAAU;AACtC,UAAM,QAAQ,SAAS;AACvB,WAAO;AAAA,MACH,WAAW,OAAO,SAAS,WAAW,KAAK,EAAE,eAAe,CAAC;AAAA,MAC7D,WAAW,OAAO,SAAS,SAAS,KAAK,EAAE,eAAe,CAAC;AAAA,MAC3D,MAAM,QAAQ,MAAM;AAAA,MACpB,KAAK,kBAAkB,MAAM,cAAc;AAAA,IAC/C;AAAA,EACJ;AACJ;AAKO,IAAM,yBAAN,cAAqC,mBAAmB;AAAA,EAC3D,kBAAkB,gBAAgB;AAC9B,WAAO,KAAK,wBAAwB,kBAAkB,kBAAkB,KAAK,MAAM,cAAc;AAAA,EACrG;AAAA,EACA,iBAAiB;AACb,WAAO,KAAK,wBAAwB,eAAe,IAAI;AAAA,EAC3D;AAAA,EACA,wBAAwB,aAAa;AACjC,UAAM,QAAQ,KAAK;AACnB,kBAAc,eAAe,MAAM,MAAM;AACzC,UAAM,sBAAsB,YAAY,QAAQ,IAAI,MAAM,EAAE,cAAc,GAAG,sBAAsB,YAAY,QAAQ,IAAI,MAAM,EAAE,cAAc;AAEjJ,WAAO,CAAC,YAAY,aAAa,cAAc,MAAM,EAAE,KACnD,uBAAuB,CAAC,oBAAoB,SAAS,KACrD,uBAAuB,CAAC,oBAAoB,SAAS;AAAA,EAC7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,iBAAiB;AACb,WAAO,KAAK,gBAAgB,KAAK,cAAc;AAAA,MAC3C,KAAK,4CAA4C,IAAI,EAAE,UAAU,KAAK,CAAC;AAAA,IAC3E;AAAA,EACJ;AACJ;AACAA,aAAW;AAAA,EACP,eAAe,sCAAsC;AACzD,GAAG,uBAAuB,WAAW,+CAA+C,MAAM;AAC1FA,aAAW;AAAA,EACP,eAAe,iCAAiC;AACpD,GAAG,uBAAuB,WAAW,2BAA2B,MAAM;;;ACjZtE,IAAIC,eAA0C,SAAU,YAAY,QAAQ,KAAK,MAAM;AACnF,MAAI,IAAI,UAAU,QAAQ,IAAI,IAAI,IAAI,SAAS,SAAS,OAAO,OAAO,OAAO,yBAAyB,QAAQ,GAAG,IAAI,MAAM;AAC3H,MAAI,OAAO,YAAY,YAAY,OAAO,QAAQ,aAAa;AAAY,QAAI,QAAQ,SAAS,YAAY,QAAQ,KAAK,IAAI;AAAA;AACxH,aAAS,IAAI,WAAW,SAAS,GAAG,KAAK,GAAG;AAAK,UAAI,IAAI,WAAW,CAAC;AAAG,aAAK,IAAI,IAAI,EAAE,CAAC,IAAI,IAAI,IAAI,EAAE,QAAQ,KAAK,CAAC,IAAI,EAAE,QAAQ,GAAG,MAAM;AAChJ,SAAO,IAAI,KAAK,KAAK,OAAO,eAAe,QAAQ,KAAK,CAAC,GAAG;AAChE;AAoBO,IAAM,yCAAN,cAAqD,MAAM,CAAC,4BAA4B,oBAAoB,GAAG,CAAC,SAAS;AAC5H,QAAM,aAAa,KAAK;AACxB,QAAMC,gDAA+C,KAAK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAWtD,CAAC,kCAAkC,YAAY;AAC3C,YAAM,YAAY,MAAM,WAAW,EAAE;AAErC,aAAO,aAAa,CAAC,cAAc,SAAS,MAAM,MAAM,WAAW,EAAE,YAE7D,EAAE,MAAM,UAAU,EAAE,cAAc,MAAM,KAAK,EAAE;AAAA,IAC3D;AAAA,IACA,CAAC,6CAA6C;AAC1C,YAAM,YAAY,OAAO,WAAW,2CAA2C,KAAK,IAAI;AACxF,YAAM,UAAU,KAAK,WAAW;AAChC,YAAM,oCAAoC,QAAQ;AAClD,iBAAW,cAAe,MAAM,KAAK,EAAE,cAAe;AAElD,YAAI,EAAE,OAAO,KAAK,kCAAkC,UAAU;AAC1D;AACJ,cAAM,cAAc,MAAM,WAAW,EAAE;AACvC,YAAI;AACJ,gBAAQ,MAAM,WAAW,EAAE,MAAM;AAAA,UAC7B,KAAK,eAAe;AAChB,8BAAkB,MAAM,YAAY,EAAE;AACtC;AAAA,UACJ,KAAK,eAAe;AAChB,8BAAkB,MAAM,YAAY,EAAE;AACtC;AAAA,QACR;AACA,YAAI,iBAAiB;AACjB,gBAAM,MAAM,MAAM,WAAW,EAAE;AAC/B,gBAAM,UAAU,MAAM,WAAW,EAAE;AACnC,gBAAM,WAAW,MAAM,WAAW,EAAE;AAGpC,gBAAM,SAAS,EAAE;AACjB,gBAAM,WAAW,kCAAkC,IAAI;AAAA,YACnD,OAAO;AAAA,YACP,WAAW,SAAS,iBAAiB,iBAAiB,OAAO,QAAQ,iBAAiB,KAAK,SAAS,SAAS,WAAW,CAAC;AAAA,YACzH,SAAS;AAAA,UACb,CAAC;AACD,oBAAU,QAAQ,QAAQ;AAAA,QAC9B;AAAA,MACJ;AACA,aAAO;AAAA,IACX;AAAA,IACA,CAAC,2CAA2C;AACxC,YAAM,YAAY,OAAO,WAAW,yCAAyC,KAAK,IAAI;AACtF,YAAM,UAAU,KAAK,WAAW;AAChC,YAAM,oCAAoC,QAAQ;AAClD,iBAAW,cAAe,MAAM,KAAK,EAAE,cAAe;AAElD,YAAI,EAAE,OAAO,KAAK,kCAAkC,UAAU;AAC1D;AACJ,cAAM,cAAc,MAAM,WAAW,EAAE;AACvC,YAAI;AACJ,gBAAQ,MAAM,WAAW,EAAE,MAAM;AAAA,UAC7B,KAAK,eAAe;AAChB,8BAAkB,MAAM,YAAY,EAAE;AACtC;AAAA,UACJ,KAAK,eAAe;AAChB,8BAAkB,MAAM,YAAY,EAAE;AACtC;AAAA,QACR;AACA,YAAI,iBAAiB;AACjB,gBAAM,MAAM,MAAM,WAAW,EAAE;AAC/B,gBAAM,UAAU,MAAM,WAAW,EAAE;AACnC,gBAAM,WAAW,MAAM,WAAW,EAAE;AAGpC,gBAAM,SAAS,EAAE;AACjB,gBAAM,WAAW,kCAAkC,IAAI;AAAA,YACnD,OAAO;AAAA,YACP,WAAW,SAAS,iBAAiB,iBAAiB,OAAO,QAAQ,iBAAiB,KAAK,SAAS,SAAS,WAAW,CAAC;AAAA,YACzH,SAAS;AAAA,UACb,CAAC;AACD,oBAAU,QAAQ,QAAQ;AAAA,QAC9B;AAAA,MACJ;AACA,aAAO;AAAA,IACX;AAAA,EACJ;AACA,EAAAD,aAAW;AAAA,IACP,YAAY,EAAE,MAAM,UAAU,CAAC;AAAA,EACnC,GAAGC,wCAAuC,WAAW,YAAY,MAAM;AACvE,SAAOA;AACX,CAAC,EAAE;AACH;AAIO,IAAM,2BAAN,cAAuC,oBAAY,kBAAkB,EAAE;AAAA,EAC1E,WAAW,QAAQ;AACf,WAAO;AAAA,EACX;AAAA,EACA,iBAAiB;AACb,UAAM,EAAE,WAAW,IAAI,MAAM,EAAE,MAAM,WAAW,QAAQ,IAAI;AAC5D,WAAO,OAAO,KAAK,EAAE,mBAAmB,GAAG,KAAK,EAAE,wBAAwB,EAAE,IAAI,GAAG,UAAU,QAAQ,UAAU,IAAI,QAAQ,QAAQ,QAAQ,EAAE;AAAA,EACjJ;AACJ;AAIO,IAAM,6BAAN,cAAyC,yBAAyB;AAAA,EACrE,WAAW,QAAQ;AACf,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA,EAIA,UAAU;AACN,SAAK,WAAW,OAAO;AAAA,EAC3B;AACJ;AAIO,IAAM,iCAAN,cAA6C,yBAAyB;AAAA,EACzE,WAAW,QAAQ;AACf,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA,EAIA,UAAU;AACN,SAAK,WAAW,SAAS;AAAA,EAC7B;AACJ;AAIO,IAAM,0CAAN,cAAsD,8BAA8B;AAAA,EACvF,WAAW,QAAQ;AACf,WAAO;AAAA,EACX;AAAA,EACA,OAAO,yBAAyB,UAAU;AACtC,UAAM,aAAa,SAAS;AAC5B,WAAO;AAAA,MACH,WAAW,OAAO,SAAS,WAAW,KAAK,EAAE,eAAe,CAAC;AAAA,MAC7D,WAAW,OAAO,SAAS,SAAS,KAAK,EAAE,eAAe,CAAC;AAAA,MAC3D,KAAK,EAAE,wBAAwB,EAAE,WAAW,IAAI;AAAA,MAChD,WAAW,UAAU;AAAA,MACrB,WAAW,QAAQ;AAAA,IACvB;AAAA,EACJ;AACJ;AAOO,IAAM,+BAAN,cAA2C,mBAAmB;AAAA,EACjE,wBAAwB,aAAa;AACjC,UAAM,aAAa,KAAK;AACxB,kBAAc,eAAe,WAAW,MAAM;AAC9C,UAAM,EAAE,QAAQ,IAAI,aAEpB,EAAE,WAAW,SAAS,KAAK,SAAS,KAAK,IAAI,WAAW,GAAG,iBAAiB,QAAQ,IAAI,SAAS,GAAG,eAAe,QAAQ,IAAI,OAAO,GAAG,WAAW,QAAQ,IAAI,GAAG,GAAG,eAAe,QAAQ,IAAI,OAAO,GAAG,YAAY,QAAQ,IAAI,IAAI;AAEvO,WAAO,CAAC,YAAY,aAAa,cAAc,WAAW,EAAE,KACxD,kBAAkB,CAAC,eAAe,SAAS,KAC3C,gBAAgB,CAAC,aAAa,SAAS,KACvC,YAAY,CAAC,SAAS,SAAS,KAC/B,gBAAgB,CAAC,aAAa,SAAS,KACvC,aAAa,CAAC,UAAU,SAAS;AAAA,EACzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,iBAAiB;AACb,WAAO,KAAK,gBAAgB,KAAK,cAAc;AAAA,MAC3C,KAAK,4CAA4C,IAAI,EAAE,YAAY,KAAK,MAAM,CAAC;AAAA,MAC/E,KAAK,wCAAwC,IAAI,EAAE,YAAY,KAAK,MAAM,CAAC;AAAA,IAC/E;AAAA,EACJ;AACJ;AACAD,aAAW;AAAA,EACP,eAAe,0BAA0B;AAC7C,GAAG,6BAA6B,WAAW,2CAA2C,MAAM;AAC5FA,aAAW;AAAA,EACP,eAAe,8BAA8B;AACjD,GAAG,6BAA6B,WAAW,+CAA+C,MAAM;AAChGA,aAAW;AAAA,EACP,eAAe,uCAAuC;AAC1D,GAAG,6BAA6B,WAAW,2BAA2B,MAAM;;;AC9N5E,IAAIE,eAA0C,SAAU,YAAY,QAAQ,KAAK,MAAM;AACnF,MAAI,IAAI,UAAU,QAAQ,IAAI,IAAI,IAAI,SAAS,SAAS,OAAO,OAAO,OAAO,yBAAyB,QAAQ,GAAG,IAAI,MAAM;AAC3H,MAAI,OAAO,YAAY,YAAY,OAAO,QAAQ,aAAa;AAAY,QAAI,QAAQ,SAAS,YAAY,QAAQ,KAAK,IAAI;AAAA;AACxH,aAAS,IAAI,WAAW,SAAS,GAAG,KAAK,GAAG;AAAK,UAAI,IAAI,WAAW,CAAC;AAAG,aAAK,IAAI,IAAI,EAAE,CAAC,IAAI,IAAI,IAAI,EAAE,QAAQ,KAAK,CAAC,IAAI,EAAE,QAAQ,GAAG,MAAM;AAChJ,SAAO,IAAI,KAAK,KAAK,OAAO,eAAe,QAAQ,KAAK,CAAC,GAAG;AAChE;AAUO,IAAM,8BAAN,cAA0C,MAAM,CAAC,mBAAmB,GAAG,CAAC,SAAS;AACpF,QAAM,aAAa,KAAK;AACxB,QAAMC,qCAAoC,KAAK;AAAA,IAC3C,CAAC,iBAAiB;AACd,YAAM,QAAQ,MAAM,KAAK,EAAE;AAG3B,UAAI;AACA,eAAO,OAAO,MAAM,yBAAyB,IAAI;AAErD,aAAO,MAAM;AAAA,IACjB;AAAA,IACA,CAAC,kBAAkB;AACf,YAAM,QAAQ,MAAM,KAAK,EAAE;AAC3B,UAAI,OAAO;AACP,cAAM,YAAY,MAAM,MAAM,EAAE;AAChC,cAAM,UAAU,MAAM,MAAM,EAAE;AAC9B,cAAM,WAAW,MAAM,MAAM,EAAE;AAC/B,YAAI,aAAa,SAAS;AACtB,gBAAMC,OAAM,oBAAI,IAAI;AACpB,UAAAA,KAAI,IAAI,UAAU,CAAC,IAAI,CAAC;AACxB,iBAAO,OAAO,MAAM,yBAAyB,WAAW,SAASA,IAAG;AAAA,QACxE;AAAA,MACJ;AACA,aAAO;AAAA,IACX;AAAA,IACA,CAAC,sBAAsB;AACnB,YAAM,QAAQ,MAAM,KAAK,EAAE;AAC3B,UAAI,OAAO;AACP,cAAM,YAAY,MAAM,MAAM,EAAE;AAChC,cAAM,WAAW,MAAM,MAAM,EAAE;AAC/B,cAAM,cAAc,MAAM,MAAM,EAAE;AAClC,eAAO,OAAO,MAAM,oCAAoC,WAAW,MAAM,WAAW,OAAO,WAAW;AAAA,MAC1G;AACA,aAAO;AAAA,IACX;AAAA,IACA,CAAC,wBAAwB;AACrB,YAAM,QAAQ,MAAM,KAAK,EAAE;AAC3B,UAAI,OAAO;AACP,cAAM,YAAY,MAAM,MAAM,EAAE;AAChC,cAAM,WAAW,MAAM,MAAM,EAAE;AAC/B,cAAM,aAAa,MAAM,KAAK,EAAE;AAChC,cAAM,wBAAwB,oBAAI,IAAI;AACtC,8BAAsB,IAAI,UAAU,CAAC,IAAI,CAAC;AAC1C,eAAO,OAAO,MAAM,yBAAyB,WAAW,YAAY,qBAAqB;AAAA,MAC7F;AACA,aAAO;AAAA,IACX;AAAA,EACJ;AACA,EAAAF,aAAW;AAAA,IACP,YAAY,EAAE,MAAM,UAAU,cAAc,IAAI,CAAC;AAAA,EACrD,GAAGC,6BAA4B,WAAW,SAAS,MAAM;AACzD,EAAAD,aAAW;AAAA,IACP,UAAU,OAAO;AAAA,EACrB,GAAGC,6BAA4B,WAAW,kBAAkB,IAAI;AAChE,EAAAD,aAAW;AAAA,IACP,MAAM,EAAE,MAAM,KAAK,CAAC;AAAA,EACxB,GAAGC,6BAA4B,WAAW,UAAU,MAAM;AAC1D,EAAAD,aAAW;AAAA,IACP,MAAM,EAAE,MAAM,KAAK,CAAC;AAAA,EACxB,GAAGC,6BAA4B,WAAW,cAAc,MAAM;AAC9D,EAAAD,aAAW;AAAA,IACP,MAAM,EAAE,MAAM,KAAK,CAAC;AAAA,EACxB,GAAGC,6BAA4B,WAAW,gBAAgB,MAAM;AAChE,EAAAD,aAAW;AAAA,IACP,UAAU,QAAQ;AAAA,EACtB,GAAGC,6BAA4B,WAAW,mBAAmB,IAAI;AACjE,EAAAD,aAAW;AAAA,IACP,UAAU,YAAY;AAAA,EAC1B,GAAGC,6BAA4B,WAAW,uBAAuB,IAAI;AACrE,EAAAD,aAAW;AAAA,IACP,UAAU,cAAc;AAAA,EAC5B,GAAGC,6BAA4B,WAAW,yBAAyB,IAAI;AACvE,SAAOA;AACX,CAAC,EAAE;AACH;;;AC1FA,IAAIE,eAA0C,SAAU,YAAY,QAAQ,KAAK,MAAM;AACnF,MAAI,IAAI,UAAU,QAAQ,IAAI,IAAI,IAAI,SAAS,SAAS,OAAO,OAAO,OAAO,yBAAyB,QAAQ,GAAG,IAAI,MAAM;AAC3H,MAAI,OAAO,YAAY,YAAY,OAAO,QAAQ,aAAa;AAAY,QAAI,QAAQ,SAAS,YAAY,QAAQ,KAAK,IAAI;AAAA;AACxH,aAAS,IAAI,WAAW,SAAS,GAAG,KAAK,GAAG;AAAK,UAAI,IAAI,WAAW,CAAC;AAAG,aAAK,IAAI,IAAI,EAAE,CAAC,IAAI,IAAI,IAAI,EAAE,QAAQ,KAAK,CAAC,IAAI,EAAE,QAAQ,GAAG,MAAM;AAChJ,SAAO,IAAI,KAAK,KAAK,OAAO,eAAe,QAAQ,KAAK,CAAC,GAAG;AAChE;AAeO,IAAM,8BAAN,cAA0C,MAAM,CAAC,mBAAmB,GAAG,CAAC,SAAS;AACpF,QAAM,aAAa,KAAK;AACxB,QAAMC,qCAAoC,KAAK;AAAA,IAC3C,CAAC,oBAAoB;AACjB,YAAM,UAAU,KAAK,WAAW;AAChC,YAAM,uBAAuB,MAAM,QAAQ,EAAE;AAC7C,UAAI;AACJ,cAAQ,sBAAsB;AAAA,QAC1B,KAAK,qBAAqB;AACtB,qBAAW,MAAM,QAAQ,EAAE;AAC3B;AAAA,QACJ,KAAK,qBAAqB;AACtB,gBAAM,YAAY,MAAM,KAAK,EAAE;AAC/B,qBAAW,aAAa,CAAC,cAAc,SAAS,IAAI,MAAM,UAAU,EAAE,oBAAoB;AAC1F;AAAA,QACJ,KAAK,qBAAqB;AACtB,gBAAM,UAAU,MAAM,KAAK,EAAE;AAC7B,qBAAW,WAAW,CAAC,cAAc,OAAO,IAAI,MAAM,QAAQ,EAAE,oBAAoB;AACpF;AAAA,MACR;AAGA,UAAI,CAAC;AACD,mBAAW,MAAM,QAAQ,EAAE;AAC/B,aAAO;AAAA,IACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAOA,MAAM,OAAO,KAAK,MAAM;AACpB,UAAI,KAAK,OAAO;AACZ,aAAK,MAAM,MAAM,KAAK,EAAE,KAAK,KAAK,IAAI;AACtC,eAAO,KAAK,MAAM,YAAY;AAAA,MAClC,OACK;AACD,aAAK,EAAE,IAAI,OAAO;AAClB,YAAI,QAAQ;AACR,eAAK,EAAE,QAAQ,OAAO;AAAA,MAC9B;AAAA,IACJ;AAAA,IACA,SAAS,IAAI,aAAa,OAAO,KAAK,OAAO,QAAW;AACpD,SAAG,YAAY,UAAU,MAAM,KAAK,MAAM,IAAI,aAAa,OAAO,GAAG;AACrE,UAAI,QAAQ;AACR,oBAAY,MAAM,KAAK,EAAE,SAAS,IAAI;AAAA,IAC9C;AAAA,EACJ;AACA,EAAAD,aAAW;AAAA,IACP,YAAY,EAAE,MAAM,UAAU,cAAc,EAAE,CAAC;AAAA,EACnD,GAAGC,6BAA4B,WAAW,OAAO,MAAM;AACvD,EAAAD,aAAW;AAAA,IACP,YAAY,EAAE,MAAM,UAAU,cAAc,SAAS,IAAI,GAAG,EAAE,WAAW,WAAW,cAAc,CAAC;AAAA,EACvG,GAAGC,6BAA4B,WAAW,WAAW,MAAM;AAC3D,EAAAD,aAAW;AAAA,IACP,MAAM;AAAA,EACV,GAAGC,6BAA4B,WAAW,YAAY,MAAM;AAC5D,EAAAD,aAAW;AAAA,IACP,YAAY,EAAE,MAAM,WAAW,cAAc,MAAM,SAAS,KAAK,CAAC;AAAA,EACtE,GAAGC,6BAA4B,WAAW,UAAU,MAAM;AAC1D,EAAAD,aAAW;AAAA,IACP,UAAU,UAAU;AAAA,EACxB,GAAGC,6BAA4B,WAAW,qBAAqB,IAAI;AACnE,EAAAD,aAAW;AAAA,IACP,MAAM,KAAK;AAAA,EACf,GAAGC,6BAA4B,WAAW,YAAY,IAAI;AAC1D,SAAOA;AACX,CAAC,EAAE;AACH;;;ACzFA,IAAIC,eAA0C,SAAU,YAAY,QAAQ,KAAK,MAAM;AACnF,MAAI,IAAI,UAAU,QAAQ,IAAI,IAAI,IAAI,SAAS,SAAS,OAAO,OAAO,OAAO,yBAAyB,QAAQ,GAAG,IAAI,MAAM;AAC3H,MAAI,OAAO,YAAY,YAAY,OAAO,QAAQ,aAAa;AAAY,QAAI,QAAQ,SAAS,YAAY,QAAQ,KAAK,IAAI;AAAA;AACxH,aAAS,IAAI,WAAW,SAAS,GAAG,KAAK,GAAG;AAAK,UAAI,IAAI,WAAW,CAAC;AAAG,aAAK,IAAI,IAAI,EAAE,CAAC,IAAI,IAAI,IAAI,EAAE,QAAQ,KAAK,CAAC,IAAI,EAAE,QAAQ,GAAG,MAAM;AAChJ,SAAO,IAAI,KAAK,KAAK,OAAO,eAAe,QAAQ,KAAK,CAAC,GAAG;AAChE;AAcO,IAAM,sBAAN,cAAkC,MAAM,CAAC,gBAAgB,GAAG,CAAC,SAAS;AACzE,QAAM,aAAa,KAAK;AACxB,QAAMC,6BAA4B,KAAK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAOnC,CAAC,uBAAuB;AACpB,YAAM,cAAc,MAAM,KAAK,EAAE;AACjC,YAAM,UAAU,KAAK,WAAW;AAChC,YAAM,yCAAyC,MAAM,QAAQ,EAAE;AAC/D,UAAI,YAAY,QAAQ,wCAAwC;AAC5D,cAAM,cAAc,MAAM,KAAK,EAAE;AACjC,YAAI,YAAY,gBAAgB,GAAG;AAC/B,iBAAO,YAAY,oBAAoB,YAAY;AAAA,QACvD,WACS,YAAY,gBAAgB,GAAG;AACpC,iBAAO,YAAY,6BAA6B,YAAY;AAAA,QAChE,OACK;AACD,iBAAO;AAAA,QACX;AAAA,MACJ,OACK;AACD,eAAO,MAAM;AAAA,MACjB;AAAA,IACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAWA,CAAC,wCAAwC,YAAY;AACjD,aAAO;AAAA,IACX;AAAA,IACA,CAAC,kCAAkC;AAC/B,YAAM,cAAc,MAAM,KAAK,EAAE;AACjC,UAAI,YAAY,MAAM;AAClB,YAAI,UAAU;AAAA,UACV,eAAe;AAAA,UACf,mBAAmB;AAAA,UACnB,eAAe;AAAA,UACf,4BAA4B;AAAA,QAChC;AACA,mBAAW,cAAc,aAAa;AAClC,cAAI,EAAE,OAAO,KAAK,wCAAwC,UAAU;AAChE;AACJ,gBAAM,mBAAmB,MAAM,WAAW,EAAE;AAC5C,cAAI,kBAAkB;AAClB,oBAAQ,iBAAiB,iBAAiB;AAC1C,oBAAQ,qBAAqB,iBAAiB;AAC9C,oBAAQ,iBAAiB,iBAAiB;AAC1C,oBAAQ,8BAA8B,iBAAiB;AAAA,UAC3D;AAAA,QACJ;AACA,eAAO;AAAA,MACX,OACK;AACD,cAAM,WAAW,MAAM,KAAK,EAAE;AAC9B,YAAI,OAAO,YAAY,UAAU;AAC7B,gBAAM,eAAe,OAAO,KAAK,WAAW,EAAE,iBAAiB,UAAU,MAAM,KAAK,EAAE,cAAc,SAAS,WAAW;AACxH,gBAAM,cAAc,MAAM,KAAK,EAAE;AACjC,iBAAO;AAAA,YACH,eAAe;AAAA,YACf,mBAAmB,eAAe;AAAA,YAClC,eAAe,iBAAiB,IAAI,IAAI;AAAA,YACxC,4BAA4B,iBAAiB,IAAI,cAAc;AAAA,UACnE;AAAA,QAEJ,OACK;AACD,iBAAO;AAAA,QACX;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AACA,EAAAD,aAAW;AAAA,IACP,YAAY,EAAE,MAAM,UAAU,cAAc,EAAE,CAAC;AAAA,EACnD,GAAGC,qBAAoB,WAAW,eAAe,MAAM;AACvD,EAAAD,aAAW;AAAA,IACP,MAAM;AAAA,EACV,GAAGC,qBAAoB,WAAW,0BAA0B,MAAM;AAClE,EAAAD,aAAW;AAAA,IACP,UAAU,aAAa;AAAA,EAC3B,GAAGC,qBAAoB,WAAW,wBAAwB,IAAI;AAC9D,EAAAD,aAAW;AAAA,IACP,UAAU,wBAAwB;AAAA,EACtC,GAAGC,qBAAoB,WAAW,mCAAmC,IAAI;AACzE,SAAOA;AACX,CAAC,EAAE;AACH;;;ACpHA,IAAIC,eAA0C,SAAU,YAAY,QAAQ,KAAK,MAAM;AACnF,MAAI,IAAI,UAAU,QAAQ,IAAI,IAAI,IAAI,SAAS,SAAS,OAAO,OAAO,OAAO,yBAAyB,QAAQ,GAAG,IAAI,MAAM;AAC3H,MAAI,OAAO,YAAY,YAAY,OAAO,QAAQ,aAAa;AAAY,QAAI,QAAQ,SAAS,YAAY,QAAQ,KAAK,IAAI;AAAA;AACxH,aAAS,IAAI,WAAW,SAAS,GAAG,KAAK,GAAG;AAAK,UAAI,IAAI,WAAW,CAAC;AAAG,aAAK,IAAI,IAAI,EAAE,CAAC,IAAI,IAAI,IAAI,EAAE,QAAQ,KAAK,CAAC,IAAI,EAAE,QAAQ,GAAG,MAAM;AAChJ,SAAO,IAAI,KAAK,KAAK,OAAO,eAAe,QAAQ,KAAK,CAAC,GAAG;AAChE;AAoBO,IAAM,kCAAN,cAA8C,MAAM,CAAC,uBAAuB,GAAG,CAAC,SAAS;AAC5F,QAAM,aAAa,KAAK;AACxB,QAAMC,yCAAwC,KAAK;AAAA,IAC/C,CAAC,2BAA2B;AACxB,YAAM,cAAc,MAAM,KAAK,EAAE;AACjC,iBAAW,cAAc,aAAa;AAClC,cAAM,WAAW,MAAM,WAAW,EAAE;AACpC,YAAI,aAAa,MAAM,iBAAiB,WAAW,EAAE,KAAK;AACtD,iBAAO;AAAA,MACf;AACA,aAAO;AAAA,IACX;AAAA;AAAA;AAAA;AAAA,IAIA,MAAM,OAAO,UAAU,QAAQ,KAAK;AAChC,YAAM,gBAAgB,KAAK,WAAW,EAAE,gBAAgB;AACxD,WAAK,cAAc,IAAI,cAAc;AAAA,QACjC,OAAO;AAAA,QACP;AAAA,QACA;AAAA,MACJ,CAAC,CAAC;AACF,aAAO,KAAK,YAAY;AAAA,IAC5B;AAAA,IACA,CAAC,4BAA4B,SAAS,MAAM;AACxC,YAAM,WAAW,MAAM,KAAK,EAAE;AAC9B,YAAM,wBAAwB,MAAM,KAAK,EAAE;AAC3C,YAAM,gCAAgC,MAAM,KAAK,EAAE;AACnD,YAAM,0BAA0B,MAAM,KAAK,EAAE,2BAA2B,QAAQ,0BAA0B,CAAC,sBAAsB;AACjI,YAAM,WAAW,KAAK,WAAW,EAAE;AACnC,UAAI,UAAU;AACV,kBAAU,OAAO,OAAO,EAAE,SAAS,GAAG,OAAO;AAAA,MACjD;AACA,aAAO,8BAA8B,4BAA4B,SAAS,CAAC,WAAW,SAAS,kCAAkC;AAC7H,cAAM,kBAAkB,8BAA8B,uBAAuB;AAC7E,cAAM,gBAAgB,8BAA8B,oBAAoB;AACxE,YAAI,gBAAgB,IAAI,QAAQ,MAEvB,0BAA0B,cAAc,KAAK,CAACC,cAAa,sBAAsB,IAAIA,SAAQ,CAAC,IAAI;AACvG,iBAAO,KAAK,WAAW,SAAS,6BAA6B;AAAA,QACjE;AAAA,MACJ,CAAC;AAAA,IACL;AAAA,IACA,CAAC,yCAAyC;AACtC,YAAM,oBAAoB,MAAM,KAAK,EAAE;AACvC,YAAM,UAAU,KAAK,WAAW;AAChC,YAAM,YAAY,CAAC,MAAM,KAAK,EAAE,iBAAiB;AACjD,UAAI,CAAC,qBAAqB,QAAQ,oDAAoD;AAClF,cAAM,wBAAwB,MAAM,KAAK,EAAE;AAC3C,kBAAU,KAAK,GAAG,sBAAsB,KAAK,CAAC;AAAA,MAClD;AACA,aAAO,KAAK,WAAW,EAAE,iBAAiB,SAAS;AAAA,IACvD;AAAA,IACA,CAAC,iCAAiC;AAC9B,YAAM,cAAc,MAAM,KAAK,EAAE;AACjC,YAAM,SAAS,oBAAI,IAAI;AACvB,iBAAW,cAAc,aAAa;AAClC,cAAM,WAAW,MAAM,WAAW,EAAE;AACpC,YAAI,UAAU;AACV,gBAAM,mBAAmB,MAAM,SAAS,EAAE;AAC1C,cAAIC,eAAc,OAAO,IAAI,gBAAgB;AAC7C,cAAI,CAACA,cAAa;AACd,YAAAA,eAAc,CAAC;AACf,mBAAO,IAAI,kBAAkBA,YAAW;AAAA,UAC5C;AACA,UAAAA,aAAY,KAAK,UAAU;AAAA,QAC/B;AAAA,MACJ;AACA,aAAO;AAAA,IACX;AAAA,IACA,CAAC,wCAAwC;AACrC,aAAO,EAAE,wBAAwB,MAAM;AAAA,IAC3C;AAAA,IACA,CAAC,+BAA+B;AAC5B,YAAM,wBAAwB,MAAM,KAAK,EAAE;AAC3C,aAAO,sBAAsB,OAAO;AAAA,IACxC;AAAA,IACA,CAAC,mBAAmB,MAAM,YAAY,MAAM,iBAAiB;AACzD,UAAI,CAAC;AACD,eAAO;AACX,YAAM,wBAAwB,MAAM,KAAK,EAAE;AAC3C,YAAM,yBAAyB,MAAM,KAAK,EAAE;AAC5C,UAAI,OAAO,KAAK,6BAA6B,GAAG;AAC5C,cAAM,UAAU,OAAO,OAAO,OAAO,KAAK,sCAAsC,GAAG,YAAY,EAAE,WAAW,MAAM,UAAU,IAAI,EAAE,SAAS,MAAM,UAAU,GAAG,eAAe;AAC7K,YAAI;AACJ,cAAM,UAAU,OAAO,KAAK,4BAA4B,SAAS,CAAC,WAAW,SAAS,kCAAkC;AACpH,wBAAc,YAAY,YAAY;AACtC,iBAAO;AAAA,QACX,CAAC;AACD,YAAI,YAAY,uBAAuB,mBAAmB,YAAY,uBAAuB,mBAAmB;AAC5G,gBAAM,YAAY,CAAC,MAAM,KAAK,EAAE,iBAAiB;AAGjD,cAAI,CAAC,QAAQ,0BAA0B,CAAC,wBAAwB;AAC5D,sBAAU,KAAK,GAAG,sBAAsB,KAAK,CAAC;AAAA,UAClD;AACA,gBAAM,SAAS,oBAAoB,IAAI;AAAA,YACnC,OAAO;AAAA,YACP;AAAA,YACA;AAAA,YACA;AAAA,UACJ,CAAC;AACD,eAAK,MAAM,YAAY,uBAAuB,QAAQ;AAClD,kBAAM,OAAO,MAAM;AAAA,UACvB,OACK;AACD,mBAAO;AAAA,UACX;AAAA,QACJ;AACA,eAAO,IAAI,KAAK,WAAW;AAAA,MAC/B,OACK;AACD,eAAO,OAAO,WAAW,mBAAmB,KAAK,MAAM,MAAM,SAAS;AAAA,MAC1E;AAAA,IACJ;AAAA,IACA,CAAC,2BAA2B,WAAW,SAAS,cAAc,iBAAiB;AAC3E,UAAI,CAAC,aAAa,CAAC,SAAS;AACxB,eAAO;AAAA,MACX;AACA,UAAI,OAAO,KAAK,6BAA6B,GAAG;AAC5C,cAAM,UAAU,OAAO,OAAO,OAAO,KAAK,sCAAsC,GAAG,EAAE,WAAW,SAAS,WAAW,KAAK,GAAG,eAAe;AAC3I,cAAM,sBAAsB,KAAK,WAAW,EAAE;AAC9C,YAAI,SAAS;AACb,eAAO,KAAK,4BAA4B,SAAS,CAACC,YAAWC,aAAY;AACrE,oBAAUA,SAAQ,QAAQ,IAAID,WAAU,QAAQ;AAChD,cAAI,qBAAqB;AACrB,kBAAM,UAAUA,WAAU,kBAAkB,IAAIC,SAAQ,kBAAkB;AAC1E,sBAAU,UAAU,KAAK;AAAA,UAC7B;AAAA,QACJ,CAAC;AACD,YAAI,CAAC;AACD,yBAAe,MAAM,KAAK,EAAE;AAChC,eAAO,OAAO,KAAK,WAAW,EAAE,iBAAiB,QAAQ,SAAS,aAAa,YAAY;AAAA,MAC/F,OACK;AACD,eAAO,OAAO,WAAW,2BAA2B,KAAK,MAAM,WAAW,SAAS,YAAY;AAAA,MACnG;AAAA,IACJ;AAAA,IACA,CAAC,oCAAoC,UAAU,YAAY,MAAM,UAAU,cAAc,iBAAiB;AACtG,UAAI,YAAY,QAAQ,MAAM,QAAQ,KAAK,YAAY;AACnD,eAAO;AACX,UAAI,YAAY;AACZ,eAAO;AACX,qBAAe,iBAAiB,MAAM,KAAK,EAAE;AAC7C,YAAM,aAAa,OAAO,KAAK,WAAW,EAAE,iBAAiB,UAAU,cAAc,SAAS,WAAW;AACzG,UAAI,UAAU,SAAS,QAAQ;AAC/B,UAAI,eAAe;AACnB,YAAM,WAAW,MAAM,KAAK,EAAE;AAC9B,UAAI,OAAO,KAAK,6BAA6B,GAAG;AAC5C,cAAM,UAAU,OAAO,OAAO,OAAO,KAAK,sCAAsC,GAAG,YAAY,EAAE,WAAW,UAAU,UAAU,IAAI,EAAE,SAAS,UAAU,UAAU,GAAG,eAAe;AACrL,cAAM,sBAAsB,KAAK,WAAW,EAAE;AAC9C,cAAM,eAAe,OAAO,KAAK,4BAA4B,SAAS,CAAC,eAAe,aAAa,kCAAkC;AACjI,gBAAM,iBAAiB,cAAc,QAAQ,GAAG,eAAe,YAAY,QAAQ,GAAG,mBAAmB,eAAe;AACxH,cAAI,oBAAoB,cAAc;AAClC,gBAAI,qBAAqB;AACrB,oBAAM,UAAU,YACV,cAAc,kBAAkB,IAAK,IAAI,KAAK,iBAAiB,YAAY,EAAG,kBAAkB,IAC/F,IAAI,KAAK,eAAe,YAAY,EAAG,kBAAkB,IAAI,YAAY,kBAAkB;AAClG,8BAAgB,UAAU,KAAK;AAAA,YACnC;AACA,sBAAU,YAAY,iBAAiB,eAAe,eAAe;AACrE,mBAAO;AAAA,UACX,OACK;AACD,4BAAgB;AAChB,gBAAI,qBAAqB;AACrB,oBAAM,UAAU,cAAc,kBAAkB,IAAI,YAAY,kBAAkB;AAClF,8BAAgB,UAAU,KAAK;AAAA,YACnC;AAAA,UACJ;AAAA,QACJ,CAAC;AAGD,eAAO,iBAAiB,uBAAuB,oBAAoB,IAAI,KAAK,OAAO,IAAI;AAAA,MAC3F,OACK;AACD,eAAO,SAAS,sBAAsB,UAAU,YAAY,SAAS,EAAE;AAAA,MAC3E;AAAA,IACJ;AAAA,EACJ;AACA,EAAAL,aAAW;AAAA,IACP,MAAM;AAAA,EACV,GAAGC,iCAAgC,WAAW,iCAAiC,MAAM;AACrF,EAAAD,aAAW;AAAA,IACP,MAAM;AAAA,EACV,GAAGC,iCAAgC,WAAW,yBAAyB,MAAM;AAC7E,EAAAD,aAAW;AAAA,IACP,YAAY,EAAE,MAAM,UAAU,CAAC;AAAA,EACnC,GAAGC,iCAAgC,WAAW,0BAA0B,MAAM;AAC9E,EAAAD,aAAW;AAAA,IACP,UAAU,+BAA+B;AAAA,EAC7C,GAAGC,iCAAgC,WAAW,0CAA0C,IAAI;AAC5F,EAAAD,aAAW;AAAA,IACP,UAAU,uBAAuB;AAAA,EACrC,GAAGC,iCAAgC,WAAW,kCAAkC,IAAI;AACpF,SAAOA;AACX,CAAC,EAAE;AACH;;;AC9NA,IAAIK,eAA0C,SAAU,YAAY,QAAQ,KAAK,MAAM;AACnF,MAAI,IAAI,UAAU,QAAQ,IAAI,IAAI,IAAI,SAAS,SAAS,OAAO,OAAO,OAAO,yBAAyB,QAAQ,GAAG,IAAI,MAAM;AAC3H,MAAI,OAAO,YAAY,YAAY,OAAO,QAAQ,aAAa;AAAY,QAAI,QAAQ,SAAS,YAAY,QAAQ,KAAK,IAAI;AAAA;AACxH,aAAS,IAAI,WAAW,SAAS,GAAG,KAAK,GAAG;AAAK,UAAI,IAAI,WAAW,CAAC;AAAG,aAAK,IAAI,IAAI,EAAE,CAAC,IAAI,IAAI,IAAI,EAAE,QAAQ,KAAK,CAAC,IAAI,EAAE,QAAQ,GAAG,MAAM;AAChJ,SAAO,IAAI,KAAK,KAAK,OAAO,eAAe,QAAQ,KAAK,CAAC,GAAG;AAChE;AAWO,IAAM,qBAAqB,OAAO,oBAAoB;AACtD,IAAM,mBAAmB,OAAO,kBAAkB;AAClD,IAAM,oBAAoB,OAAO,mBAAmB;AACpD,IAAM,yBAAyB,OAAO,wBAAwB;AAC9D,IAAM,iBAAiB,OAAO,gBAAgB;AAC9C,IAAM,eAAe,OAAO,cAAc;AAC1C,IAAM,2BAA2B,QAAQ,IAAI;AAAA,EAChD,QAAQ;AAAA,EACR,QAAQ,oBAAI,IAAI,CAAC,gBAAgB,YAAY,CAAC;AAClD,CAAC;AACM,IAAM,8CAA8C,QAAQ,IAAI;AAAA,EACnE,QAAQ;AAAA,EACR,QAAQ,oBAAI,IAAI,CAAC,gBAAgB,kBAAkB,CAAC;AACxD,CAAC;AACM,IAAM,0CAA0C,QAAQ,IAAI;AAAA,EAC/D,QAAQ;AAAA,EACR,QAAQ,oBAAI,IAAI,CAAC,cAAc,kBAAkB,CAAC;AACtD,CAAC;AACM,IAAM,8CAA8C,QAAQ,IAAI;AAAA,EACnE,QAAQ;AAAA,EACR,QAAQ,oBAAI,IAAI,CAAC,cAAc,kBAAkB,CAAC;AACtD,CAAC;AACM,IAAM,0CAA0C,QAAQ,IAAI;AAAA,EAC/D,QAAQ;AAAA,EACR,QAAQ,oBAAI,IAAI,CAAC,YAAY,kBAAkB,CAAC;AACpD,CAAC;AACM,IAAM,2CAA2C,QAAQ,IAAI;AAAA,EAChE,QAAQ;AAAA,EACR,QAAQ,oBAAI,IAAI,CAAC,cAAc,WAAW,CAAC;AAC/C,CAAC;AACM,IAAM,2CAA2C,QAAQ,IAAI;AAAA,EAChE,QAAQ;AAAA,EACR,QAAQ,oBAAI,IAAI,CAAC,gBAAgB,WAAW,CAAC;AACjD,CAAC;AACM,IAAM,sDAAsD,QAAQ,IAAI;AAAA,EAC3E,QAAQ;AAAA,EACR,QAAQ,oBAAI,IAAI,CAAC,gBAAgB,sBAAsB,CAAC;AAC5D,CAAC;AACM,IAAM,iDAAiD,QAAQ,IAAI;AAAA,EACtE,QAAQ;AAAA,EACR,QAAQ,oBAAI,IAAI,CAAC,gBAAgB,iBAAiB,CAAC;AACvD,CAAC;AAKM,IAAM,iCAAiC,QAAQ,IAAI;AAAA,EACtD,QAAQ;AAAA,EACR,QAAQ,oBAAI,IAAI,CAAC,gBAAgB,gBAAgB,CAAC;AACtD,CAAC;AACM,IAAM,0BAA0B,iBAAiB,IAAI;AAAA,EACxD,WAAW,oBAAI,IAAI;AAAA,IACf;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACJ,CAAC;AAAA,EACD,UAAU,oBAAI,IAAI;AAAA;AAAA,IAEd;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA;AAAA,IAEA;AAAA,IACA;AAAA,EACJ,CAAC;AACL,CAAC;AACM,IAAM,yBAAyB,gBAAgB,IAAI;AAAA,EACtD,aAAa;AAAA,EACb,2BAA2B,oBAAI,IAAI;AAAA,IAC/B;AAAA,IACA;AAAA,IACA;AAAA,EACJ,CAAC;AACL,CAAC;AACM,IAAM,iCAAN,cAA6C,gBAAgB,IAAI,kBAAkB,EAAE;AAAA,EACxF,SAAS,IAAI,IAAI;AACb,UAAM,cAAc,GAAG;AACvB,UAAM,cAAc,GAAG;AACvB,WAAO,YAAY,IAAI,YAAY,MAAM,YAAY,IAAI,YAAY,KAC9D,YAAY,IAAI,UAAU,MAAM,YAAY,IAAI,UAAU,KAC1D,YAAY,IAAI,WAAW,MAAM,YAAY,IAAI,WAAW,KAC5D,YAAY,IAAI,kBAAkB,MAAM,YAAY,IAAI,kBAAkB,KAC1E,YAAY,IAAI,gBAAgB,MAAM,YAAY,IAAI,gBAAgB,KACtE,YAAY,IAAI,iBAAiB,MAAM,YAAY,IAAI,iBAAiB,KACxE,YAAY,IAAI,sBAAsB,MAAM,YAAY,IAAI,sBAAsB,KAClF,YAAY,IAAI,cAAc,MAAM,YAAY,IAAI,cAAc,KAClE,YAAY,IAAI,YAAY,MAAM,YAAY,IAAI,YAAY;AAAA,EACzE;AACJ;AAIO,IAAM,2BAAN,cAAuC,MAAM,CAAC,cAAc,GAAG,CAAC,SAAS;AAC5E,QAAMC,kCAAiC,KAAK;AAAA,IACxC,IAAI,iBAAiB;AACjB,aAAO;AAAA,IACX;AAAA,IACA,IAAI,MAAM;AA5HlB;AA8HY,cAAO,UAAK,UAAL,mBAAY;AAAA,IACvB;AAAA,IACA,IAAI,IAAI,OAAO;AAAA,IACf;AAAA,IACA,eAAe,IAAI,aAAa,OAAO,MAAM,eAAe,MAAM;AAC9D,YAAM,QAAQ,KAAK;AACnB,YAAM,UAAU,KAAK,WAAW;AAEhC,UAAI,SAAS,CAAC,KAAK,mBAAmB,YAAY,aAAa,cAAc,EAAE,KAAK,EAAE,WAAW,QAAQ,OAAO,EAAE,cAAc;AAC5H,cAAM,EAAE,UAAU,YAAY,UAAU,MAAM,KAAK,MAAM,MAAM,EAAE,WAAW,aAAa,MAAM,MAAM,YAAY;AAAA,MACrH,OACK;AACD,WAAG,YAAY,UAAU,MAAM,KAAK,MAAM,IAAI,aAAa,OAAO,MAAM,YAAY;AAAA,MACxF;AAEA,UAAI,gBAAgB,KAAK,aAAa;AAClC,cAAM,QAAQ,KAAK,YAAY,KAAK,YAAY;AAChD,YAAI,QAAQ,GAAG;AACX,cAAI,UAAU;AAEd,iBAAQ,UAAU,QAAQ,aAAc;AACpC,oBAAQ,eAAe;AACvB,oBAAQ,aAAa;AAAA,UACzB;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AAAA,IACA,wBAAwB,WAAW,UAAU,UAAU;AACnD,aAAQ,cAAc,iBAAiB,cAAc,eAAgB,MAAM,wBAAwB,WAAW,UAAU,QAAQ;AAAA,IACpI;AAAA,IACA,CAAC,uBAAuB;AACpB,YAAM,aAAa,MAAM,KAAK,EAAE;AAChC,YAAM,aAAa,WAAW,WAAW,IAAI,cAAc;AAE3D,UAAI,CAAC,KAAK,OAAO;AACb,eAAO,MAAM;AAAA,MACjB;AACA,UAAI;AACJ,UAAI,eAAe,mBAAmB;AAClC,iBAAS,MAAM;AAAA,MACnB,WACS,eAAe,yCAAyC,WAAW;AACxE,iBAAS,OAAO,KAAK,2CAA2C;AAAA,MACpE,WACS,eAAe,4CAA4C,WAAW;AAC3E,cAAM,kBAAkB,MAAM,0BAA0B,KAAK,MAAM,EAAE,SAAS;AAC9E,cAAM,YAAY,MAAM,0BAA0B,KAAK,EAAE,SAAS;AAClE,iBAAS,OAAO,KAAK,MAAM,2BAA2B,iBAAiB,WAAW,SAAS,aAAa,EAAE,gBAAgB,KAAK,CAAC;AAAA,MACpI;AACA,aAAO;AAAA,IACX;AAAA,IACA,CAAC,qBAAqB;AAClB,YAAM,aAAa,MAAM,KAAK,EAAE;AAChC,YAAM,aAAa,WAAW,WAAW,IAAI,YAAY;AAEzD,UAAI,CAAC,KAAK,OAAO;AACb,eAAO,MAAM;AAAA,MACjB;AACA,UAAI;AACJ,UAAI,eAAe,mBAAmB;AAClC,iBAAS,MAAM;AAAA,MACnB,WACS,eAAe,yCAAyC,WAAW;AACxE,iBAAS,OAAO,KAAK,2CAA2C;AAAA,MACpE,WACS,eAAe,wCAAwC,WAAW;AACvE,cAAM,kBAAkB,MAAM,0BAA0B,KAAK,MAAM,EAAE,SAAS;AAC9E,cAAM,UAAU,MAAM,0BAA0B,KAAK,EAAE,OAAO;AAC9D,iBAAS,OAAO,KAAK,MAAM,2BAA2B,iBAAiB,SAAS,SAAS,aAAa,EAAE,gBAAgB,KAAK,CAAC;AAAA,MAClI,WACS,eAAe,+CAA+C,WAAW;AAC9E,iBAAS,OAAO,KAAK,iDAAiD;AAAA,MAC1E,WACS,eAAe,oDAAoD,WAAW;AACnF,iBAAS,OAAO,KAAK,sDAAsD;AAAA,MAC/E;AACA,aAAO;AAAA,IACX;AAAA,IACA,CAAC,qBAAqB;AAClB,YAAM,aAAa,MAAM,KAAK,EAAE;AAChC,YAAM,UAAU,WAAW,WAAW,IAAI,YAAY;AAEtD,UAAI,CAAC,KAAK,OAAO;AACb,eAAO,MAAM;AAAA,MACjB;AACA,UAAI;AACJ,UAAI,YAAY,4CAA4C,WAAW;AACnE,iBAAS,OAAO,KAAK,8CAA8C;AAAA,MACvE,OACK;AACD,iBAAS,OAAO,MAAM,mBAAmB;AAAA,MAC7C;AACA,aAAO;AAAA,IACX;AAAA,IACA,CAAC,mBAAmB;AAChB,YAAM,aAAa,MAAM,KAAK,EAAE;AAChC,YAAM,UAAU,WAAW,WAAW,IAAI,UAAU;AAEpD,UAAI,CAAC,KAAK,OAAO;AACb,eAAO,MAAM;AAAA,MACjB;AACA,UAAI;AACJ,UAAI,YAAY,wCAAwC,WAAW;AAC/D,iBAAS,OAAO,KAAK,0CAA0C;AAAA,MACnE,OACK;AACD,iBAAS,OAAO,MAAM,iBAAiB;AAAA,MAC3C;AACA,aAAO;AAAA,IACX;AAAA,IACA,CAAC,oBAAoB;AACjB,YAAM,aAAa,MAAM,KAAK,EAAE;AAChC,YAAM,UAAU,WAAW,WAAW,IAAI,WAAW;AAErD,UAAI,CAAC,KAAK,OAAO;AACb,eAAO,MAAM;AAAA,MACjB;AACA,UAAI;AACJ,UAAI,YAAY,yBAAyB,WAAW;AAChD,iBAAS,OAAO,KAAK,2BAA2B;AAAA,MACpD,WACS,YAAY,+BAA+B,WAAW;AAC3D,iBAAS,OAAO,KAAK,2BAA2B;AAAA,MACpD,OACK;AACD,iBAAS,OAAO,MAAM,kBAAkB;AAAA,MAC5C;AACA,aAAO;AAAA,IACX;AAAA,IACA,wBAAwB,IAAI,OAAO,aAAa;AAC5C,YAAM,aAAa,MAAM,wBAAwB,IAAI,OAAO,WAAW;AACvE,iBAAW,qBAAqB,kBAAkB;AAClD,iBAAW,qBAAqB,cAAc;AAC9C,iBAAW,qBAAqB,YAAY;AAC5C,aAAO;AAAA,IACX;AAAA,IACA,CAAC,kBAAkB,OAAO;AACtB,YAAM,aAAa,OAAO,MAAM,kBAAkB,KAAK;AAEvD,UAAI,CAAC,KAAK,OAAO;AACb,eAAO;AAAA,MACX;AAEA,UAAI,MAAM,gBAAgB,KAAK,MAAM,EAAE,SAAS,CAAC,KAAK;AAClD,mBAAW,qBAAqB,kBAAkB;AACtD,UAAI,MAAM,iBAAiB,KAAK,MAAM,EAAE,SAAS,CAAC;AAC9C,mBAAW,qBAAqB,kBAAkB;AACtD,UAAI,CAAC,MAAM,iBAAiB,KAAK,MAAM,EAAE,QAAQ,CAAC,GAAG;AACjD,mBAAW,YAAY,OAAO,KAAK,MAAM,EAAE,UAAU,iBAAiB;AACtE,YAAI,MAAM,iBAAiB,KAAK,MAAM,EAAE,OAAO,CAAC,GAAG;AAC/C,gBAAM,oBAAoB,MAAM,oBAAoB,KAAK,MAAM,EAAE,OAAO,CAAC;AACzE,cAAI,EAAC,uDAAoB,KAAI;AACzB,uBAAW,qBAAqB,gBAAgB;AAAA,UACpD;AAAA,QACJ;AACA,cAAM,mBAAmB,MAAM,KAAK,MAAM,EAAE,UAAU;AACtD,YAAI,iBAAiB,WAAW,IAAI,YAAY,MAAM,qBAClD,iBAAiB,WAAW,IAAI,UAAU,MAAM,mBAAmB;AACnE,qBAAW,qBAAqB,sBAAsB;AAAA,QAC1D;AAAA,MACJ;AACA,iBAAW,YAAY,OAAO,KAAK,EAAE,aAAa,cAAc;AAChE,iBAAW,YAAY,OAAO,KAAK,EAAE,WAAW,YAAY;AAC5D,aAAO;AAAA,IACX;AAAA,IACA,uBAAuB,GAAG;AACtB,aAAO;AAAA,IACX;AAAA;AAAA,IAEA,CAAC,mDAAmD;AAChD,YAAM,iBAAiB,MAAM,0BAA0B,KAAK,MAAM,EAAE,QAAQ;AAC5E,YAAM,qBAAqB,MAAM,KAAK,MAAM,EAAE;AAC9C,YAAM,cAAc,MAAM,KAAK,EAAE;AACjC,YAAM,cAAc,KAAK;AACzB,UAAI;AACJ,UAAI,mBAAmB,OAAO,KAAK,WAAW,EAAE,iBAAiB,gBAAgB,oBAAoB,SAAS,WAAW;AACzH,YAAM,WAAW,CAAC;AAClB,UAAI,UAAU;AACd,aAAQ,UAAU,QAAQ,iBAAkB;AACxC,iBAAS,KAAK,OAAO;AAAA,MACzB;AACA,eAAS,IAAI,SAAS,SAAS,GAAG,KAAK,GAAG,KAAK;AAC3C,cAAMC,WAAU,SAAS,CAAC;AAC1B,cAAM,qBAAqB,MAAM,0BAA0BA,SAAQ,EAAE,WAAW;AAChF,cAAM,mBAAmB,MAAM,0BAA0BA,SAAQ,EAAE,SAAS;AAC5E,cAAM,oBAAoB,mBAAmB;AAC7C,4BAAoB;AAAA,MACxB;AACA,UAAI,mBAAmB,GAAG;AACtB,YAAI,CAAC,aAAa;AACd,mBAAS,cAAc;AAAA,QAC3B,OACK;AACD,mBAAS,cAAc,KAAK,IAAI,mBAAmB,MAAM,0BAA0B,KAAK,EAAE,SAAS,KAAK,WAAW;AAAA,QACvH;AAAA,MACJ,OAGK;AACD,iBAAS;AAAA,MACb;AACA,aAAO;AAAA,IACX;AAAA;AAAA,IAEA,CAAC,wDAAwD;AACrD,YAAM,kBAAkB,MAAM,0BAA0B,KAAK,MAAM,EAAE,SAAS;AAC9E,YAAM,gBAAgB,MAAM,0BAA0B,KAAK,MAAM,EAAE,OAAO;AAC1E,YAAM,wBAAwB,OAAO,KAAK,MAAM,2BAA2B,iBAAiB,eAAe,SAAS,aAAa,EAAE,gBAAgB,KAAK,CAAC;AACzJ,YAAM,cAAc,MAAM,0BAA0B,KAAK,EAAE,WAAW;AACtE,UAAI,YAAY,MAAM,0BAA0B,KAAK,EAAE,SAAS;AAChE,UAAI,cAAc,KAAK;AACvB,UAAI,eAAe,uBAAuB;AAEtC,YAAI,aAAa,uBAAuB;AAGpC,cAAI,CAAC,gBAAgB,MAAM,0BAA0B,YAAY,EAAE,WAAW,MAAM,uBAAuB;AACvG,mBAAO;AAAA,UACX;AAEA,iBAAO;AAAA,QACX,OAEK;AACD,iBAAO;AAAA,QACX;AAAA,MACJ;AAEA,aAAO,MAAM,KAAK,EAAE;AAAA,IACxB;AAAA;AAAA,IAEA,CAAC,6CAA6C;AAC1C,YAAM,WAAW,MAAM,KAAK,EAAE;AAC9B,YAAM,eAAe,MAAM,KAAK,EAAE;AAClC,YAAM,YAAY,MAAM,KAAK,EAAE;AAC/B,aAAO,aAAa,OAAO,KAAK,MAAM,WAAW,EAAE,iBAAiB,UAAU,cAAc,SAAS,WAAW;AAAA,IACpH;AAAA;AAAA,IAEA,CAAC,6CAA6C;AAC1C,YAAM,WAAW,MAAM,KAAK,EAAE;AAC9B,YAAM,eAAe,MAAM,KAAK,EAAE;AAClC,YAAM,cAAc,MAAM,KAAK,EAAE;AACjC,aAAO,eAAe,OAAO,KAAK,MAAM,WAAW,EAAE,iBAAiB,UAAU,cAAc,SAAS,WAAW;AAAA,IACtH;AAAA;AAAA,IAEA,CAAC,4CAA4C;AACzC,YAAM,kBAAkB,MAAM,KAAK,MAAM,EAAE;AAC3C,YAAM,YAAY,MAAM,KAAK,EAAE;AAC/B,YAAM,UAAU,OAAO,KAAK,MAAM,oCAAoC,iBAAiB,MAAM,WAAW,SAAS,aAAa,EAAE,gBAAgB,KAAK,CAAC;AACtJ,YAAM,oBAAoB,MAAM,KAAK,EAAE;AACvC,aAAO,qBAAqB,CAAC,KAAK,WAAW,EAAE,2CACzC,UACA,OAAO,KAAK,MAAM,mBAAmB,SAAS,KAAK;AAAA,IAC7D;AAAA;AAAA,IAEA,CAAC,gDAAgD;AAC7C,YAAM,kBAAkB,MAAM,KAAK,MAAM,EAAE;AAC3C,YAAM,cAAc,MAAM,KAAK,EAAE;AACjC,YAAM,UAAU,OAAO,KAAK,MAAM,oCAAoC,iBAAiB,MAAM,aAAa,SAAS,aAAa,EAAE,gBAAgB,KAAK,CAAC;AACxJ,YAAM,oBAAoB,MAAM,KAAK,EAAE;AACvC,aAAO,qBAAqB,CAAC,KAAK,WAAW,EAAE,2CACzC,UACA,OAAO,KAAK,MAAM,mBAAmB,OAAO;AAAA,IACtD;AAAA;AAAA,IAEA,CAAC,6BAA6B;AAC1B,YAAM,cAAc,MAAM,KAAK,EAAE;AACjC,YAAM,YAAY,MAAM,KAAK,EAAE;AAC/B,YAAM,eAAe,MAAM,KAAK,EAAE;AAClC,aAAO,OAAO,KAAK,WAAW,EAAE,iBAAiB,YAAY,aAAa,SAAS,aAAa,YAAY;AAAA,IAChH;AAAA,IACA,CAAC,uBAAuB;AACpB,UAAI,SAAS;AAEb,UAAI,CAAC,KAAK,OAAO;AACb,eAAO,MAAM;AAAA,MACjB;AACA,YAAM,WAAW,MAAM,KAAK,MAAM,EAAE;AACpC,UAAI,UAAU;AACV,cAAM,oBAAoB,MAAM,KAAK,MAAM,EAAE;AAC7C,cAAM,iBAAiB,MAAM,KAAK,MAAM,EAAE;AAC1C,cAAM,qBAAqB,MAAM,KAAK,MAAM,EAAE;AAC9C,YAAI,mBAAmB,OAAO,KAAK,WAAW,EAAE,iBAAiB,gBAAgB,oBAAoB,SAAS,WAAW;AACzH,YAAI,2BAA2B,oBAAoB,OAAO;AAC1D,mBAAW,WAAW,UAAU;AAC5B,gBAAM,qBAAqB,QAAQ;AACnC,gBAAM,mBAAmB,QAAQ;AACjC,gBAAM,oBAAoB,mBAAmB;AAC7C,cAAI,YAAY,MAAM;AAClB,gBAAI,4BAA4B;AAC5B,qBAAO;AAAA,qBACF,2BAA2B;AAChC,qBAAO,MAAM,2BAA2B;AAAA;AAExC,qBAAO;AAAA,UACf;AACA,sCAA4B;AAAA,QAChC;AAAA,MACJ;AACA,aAAO;AAAA,IACX;AAAA,IACA,CAAC,sBAAsB;AACnB,YAAM,kBAAkB,KAAK;AAC7B,UAAI,CAAC,KAAK,OAAO;AACb,eAAO,MAAM;AAAA,MACjB;AACA,UAAI,iBAAiB;AACjB,eAAO,MAAM,gBAAgB,EAAE;AAAA,MACnC;AACA,aAAO;AAAA,IACX;AAAA,IACA,CAAC,sBAAsB;AACnB,UAAI,CAAC,KAAK,OAAO;AACb,eAAO,MAAM;AAAA,MACjB;AACA,YAAM,iBAAiB,MAAM,KAAK,MAAM,EAAE;AAC1C,YAAM,qBAAqB,MAAM,KAAK,MAAM,EAAE;AAC9C,UAAI,mBAAmB,OAAO,KAAK,WAAW,EAAE,iBAAiB,gBAAgB,oBAAoB,SAAS,WAAW;AACzH,YAAM,cAAc,MAAM,KAAK,EAAE;AACjC,YAAM,YAAY,MAAM,KAAK,EAAE;AAC/B,YAAM,aAAa,MAAM,KAAK,EAAE;AAChC,aAAO,aAAa,OAAO,YAAY,eAAe;AAAA,IAC1D;AAAA;AAAA,IAEA,CAAC,oCAAoC,UAAU,WAAW,UAAU,cAAc;AAC9E,UAAI,CAAC;AACD,uBAAe,MAAM,KAAK,EAAE;AAChC,aAAO,OAAO,KAAK,MAAM,oCAAoC,UAAU,WAAW,UAAU,cAAc,EAAE,gBAAgB,KAAK,CAAC;AAAA,IACtI;AAAA;AAAA,IAEA,CAAC,2BAA2B,WAAW,SAAS,cAAc;AAC1D,UAAI,CAAC;AACD,uBAAe,MAAM,KAAK,EAAE;AAChC,aAAO,OAAO,KAAK,MAAM,2BAA2B,WAAW,SAAS,cAAc,EAAE,gBAAgB,KAAK,CAAC;AAAA,IAClH;AAAA,IACA,CAAC,6BAA6B;AAC1B,UAAI,KAAK,OAAO;AACZ,eAAO,MAAM,KAAK,MAAM,EAAE;AAAA,MAC9B,OACK;AACD,eAAO,MAAM;AAAA,MACjB;AAAA,IACJ;AAAA,EACJ;AACA,EAAAF,aAAW;AAAA,IACP,MAAM,EAAE,eAAe,+BAA+B,CAAC;AAAA,EAC3D,GAAGC,0BAAyB,WAAW,cAAc,MAAM;AAC3D,EAAAD,aAAW;AAAA,IACP,YAAY,EAAE,SAAS,MAAM,CAAC;AAAA,EAClC,GAAGC,0BAAyB,WAAW,eAAe,MAAM;AAC5D,EAAAD,aAAW;AAAA,IACP,YAAY,EAAE,SAAS,MAAM,CAAC;AAAA,EAClC,GAAGC,0BAAyB,WAAW,aAAa,MAAM;AAC1D,EAAAD,aAAW;AAAA,IACP,MAAM;AAAA,EACV,GAAGC,0BAAyB,WAAW,eAAe,MAAM;AAC5D,EAAAD,aAAW;AAAA,IACP,MAAM;AAAA,EACV,GAAGC,0BAAyB,WAAW,oBAAoB,MAAM;AACjE,EAAAD,aAAW;AAAA,IACP,MAAM;AAAA,EACV,GAAGC,0BAAyB,WAAW,kBAAkB,MAAM;AAC/D,EAAAD,aAAW;AAAA,IACP,MAAM,WAAW;AAAA,EACrB,GAAGC,0BAAyB,WAAW,kBAAkB,IAAI;AAC7D,EAAAD,aAAW;AAAA,IACP,UAAU,aAAa;AAAA,EAC3B,GAAGC,0BAAyB,WAAW,wBAAwB,IAAI;AACnE,EAAAD,aAAW;AAAA,IACP,UAAU,WAAW;AAAA,EACzB,GAAGC,0BAAyB,WAAW,sBAAsB,IAAI;AACjE,EAAAD,aAAW;AAAA,IACP,UAAU,aAAa;AAAA,EAC3B,GAAGC,0BAAyB,WAAW,wBAAwB,IAAI;AACnE,EAAAD,aAAW;AAAA,IACP,UAAU,kBAAkB;AAAA,EAChC,GAAGC,0BAAyB,WAAW,uBAAuB,IAAI;AAClE,EAAAD,aAAW;AAAA,IACP,UAAU,gBAAgB;AAAA,EAC9B,GAAGC,0BAAyB,WAAW,uBAAuB,IAAI;AAClE,EAAAD,aAAW;AAAA,IACP,UAAU,mBAAmB;AAAA,EACjC,GAAGC,0BAAyB,WAAW,8BAA8B,IAAI;AACzE,SAAOA;AACX,CAAC,EAAE;AACH;;;AC/fA,IAAIE,eAA0C,SAAU,YAAY,QAAQ,KAAK,MAAM;AACnF,MAAI,IAAI,UAAU,QAAQ,IAAI,IAAI,IAAI,SAAS,SAAS,OAAO,OAAO,OAAO,yBAAyB,QAAQ,GAAG,IAAI,MAAM;AAC3H,MAAI,OAAO,YAAY,YAAY,OAAO,QAAQ,aAAa;AAAY,QAAI,QAAQ,SAAS,YAAY,QAAQ,KAAK,IAAI;AAAA;AACxH,aAAS,IAAI,WAAW,SAAS,GAAG,KAAK,GAAG;AAAK,UAAI,IAAI,WAAW,CAAC;AAAG,aAAK,IAAI,IAAI,EAAE,CAAC,IAAI,IAAI,IAAI,EAAE,QAAQ,KAAK,CAAC,IAAI,EAAE,QAAQ,GAAG,MAAM;AAChJ,SAAO,IAAI,KAAK,KAAK,OAAO,eAAe,QAAQ,KAAK,CAAC,GAAG;AAChE;AAgBO,IAAM,cAAc,OAAO,aAAa;AACxC,IAAM,oBAAoB,CAAC,OAAO,MAAM,WAAW,OAAO,qBAAqB,KAAK;AACpF,IAAM,uCAAuC,QAAQ,IAAI;AAAA,EAC5D,QAAQ;AAAA,EACR,QAAQ,oBAAI,IAAI,CAAC,YAAY,WAAW,CAAC;AAC7C,CAAC;AACM,IAAM,uCAAuC,QAAQ,IAAI;AAAA,EAC5D,QAAQ;AAAA,EACR,QAAQ,oBAAI,IAAI,CAAC,cAAc,WAAW,CAAC;AAC/C,CAAC;AACM,IAAM,kDAAkD,QAAQ,IAAI;AAAA,EACvE,QAAQ;AAAA,EACR,QAAQ,oBAAI,IAAI,CAAC,cAAc,YAAY,WAAW,CAAC;AAC3D,CAAC;AACM,IAAM,wBAAwB,iBAAiB,IAAI;AAAA,EACtD,WAAW,oBAAI,IAAI,CAAC,cAAc,YAAY,aAAa,WAAW,CAAC;AAAA,EACvE,UAAU,oBAAI,IAAI;AAAA,IACd;AAAA,IACA;AAAA;AAAA,IAEA;AAAA,IACA;AAAA,IACA;AAAA,EACJ,CAAC;AACL,CAAC;AACM,IAAM,8BAA8B,gBAAgB,IAAI;AAAA,EAC3D,aAAa;AAAA,EACb,2BAA2B,oBAAI,IAAI,CAAC,gBAAgB,oCAAoC,CAAC;AAC7F,CAAC;AACM,IAAM,+BAA+B,gBAAgB,IAAI;AAAA,EAC5D,aAAa;AAAA,EACb,2BAA2B,oBAAI,IAAI,CAAC,kBAAkB,oCAAoC,CAAC;AAC/F,CAAC;AACM,IAAM,4BAAN,cAAwC,gBAAgB,IAAI,kBAAkB,EAAE;AAAA,EACnF,SAAS,IAAI,IAAI;AACb,UAAM,cAAc,GAAG;AACvB,UAAM,cAAc,GAAG;AACvB,WAAO,YAAY,IAAI,YAAY,MAAM,YAAY,IAAI,YAAY,KAC9D,YAAY,IAAI,UAAU,MAAM,YAAY,IAAI,UAAU,KAC1D,YAAY,IAAI,WAAW,MAAM,YAAY,IAAI,WAAW,KAC5D,YAAY,IAAI,WAAW,MAAM,YAAY,IAAI,WAAW;AAAA,EACvE;AACJ;AACO,SAAS,qBAAqB,GAAG,GAAG;AACvC,MAAI,CAAC,KAAK,CAAC;AACP,WAAO;AACX,MAAI,KAAK;AACL,WAAO;AACX,MAAI,CAAC,KAAK,KAAK,KAAK,CAAC;AACjB,WAAO;AACX,MAAI,EAAE,WAAW,EAAE;AACf,WAAO;AACX,SAAO,EAAE,MAAM,CAAC,SAAS,UAAU,gBAAgB,SAAS,EAAE,KAAK,CAAC,CAAC;AACzE;AACO,IAAM,kBAAkB,CAAC,GAAG,MAAM;AACrC,MAAI,MAAM;AACN,WAAO;AACX,QAAM,eAAe,EAAE,UAAU,IAAI;AACrC,QAAM,WAAW,aAAa;AAC9B,QAAM,SAAS,EAAE,qBAAqB,OAAO,EAAE,UAAU,QAAQ,IAAI,SAAS,UAAU,QAAQ,EAAE,SAAS,EAAE,QAAQ;AACrH,QAAM,SAAS,EAAE,qBAAqB,OAAO,EAAE,UAAU,QAAQ,IAAI,SAAS,UAAU,QAAQ,EAAE,SAAS,EAAE,QAAQ;AACrH,QAAM,OAAO,EAAE,mBAAmB,OAAO,EAAE,QAAQ,QAAQ,IAAI,SAAS,QAAQ,QAAQ,EAAE,OAAO,EAAE,QAAQ;AAC3G,QAAM,OAAO,EAAE,mBAAmB,OAAO,EAAE,QAAQ,QAAQ,IAAI,SAAS,QAAQ,QAAQ,EAAE,OAAO,EAAE,QAAQ;AAC3G,SAAO,WAAW,UAAU,SAAS;AACzC;AACO,IAAM,kBAAN,cAA8B,MAAM,CAAC,iCAAiC,mBAAmB,GAAG,CAAC,SAAS;AACzG,QAAMC,yBAAwB,KAAK;AAAA,IAC/B,cAAc;AACV,YAAM,GAAG,SAAS;AAClB,WAAK,qBAAqB,CAAC;AAAA,IAC/B;AAAA,IACA,WAAW,QAAQ;AACf,aAAO;AAAA,IACX;AAAA,IACA,YAAY;AACR,WAAK,oBAAoB,KAAK,4BAA4B;AAC1D,YAAM,UAAU,GAAG,SAAS;AAAA,IAChC;AAAA,IACA,IAAI,mBAAmB;AACnB,UAAI,OAAO,MAAM;AAEjB,UAAI,KAAK,aAAa,CAAC,QAAQ,EAAE,cAAc,QAAQ;AACnD,mBAAW,WAAW,KAAK,UAAU;AACjC,cAAI,QAAQ,kBAAkB;AAC1B,mBAAO,QAAQ,CAAC;AAChB,iBAAK,WAAW,KAAK,wBAAwB,UAAU;AACvD;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ;AACA,aAAO;AAAA,IACX;AAAA,IACA,aAAa,oBAAoB,wBAAwB,SAAS;AAC9D,iBAAW,WAAW,KAAK,YAAY,CAAC,GAAG;AACvC,gBAAQ,aAAa,oBAAoB,wBAAwB,IAAI;AAAA,MACzE;AACA,YAAM,aAAa,oBAAoB,wBAAwB,OAAO;AAAA,IAC1E;AAAA,IACA,8BAA8B;AAC1B,aAAO;AAAA,IACX;AAAA,IACA,CAAC,kBAAkB,OAAO;AACtB,YAAM,aAAa,OAAO,MAAM,kBAAkB,KAAK;AACvD,UAAI,OAAO,KAAK,0BAA0B,GAAG;AACzC,mBAAW,qBAAqB,WAAW;AAAA,MAC/C;AACA,aAAO;AAAA,IACX;AAAA,IACA,uBAAuB,GAAG;AACtB,YAAM,YAAY,EAAE,KAAK,EAAE,SAAS;AACpC,aAAO,cAAc,UAAU,WAAW,cAAc,UAAU,OAAO,8BAA8B;AAAA,IAC3G;AAAA,IACA,CAAC,4BAA4B;AACzB,YAAM,mBAAmB,MAAM,gBAAgB,KAAK,EAAE,QAAQ;AAC9D,UAAI,SAAS;AACb,UAAI,MAAM,iBAAiB,KAAK,EAAE,QAAQ,GAAG;AACzC,iBAAS,QAAQ,gBAAgB;AAAA,MACrC;AACA,YAAM,WAAW,MAAM,0BAA0B,KAAK,EAAE,QAAQ;AAChE,UAAI,CAAC;AACD,eAAO;AACX,iBAAW,WAAW,UAAU;AAC5B,cAAM,oBAAoB,MAAM,iBAAiB,QAAQ,EAAE,SAAS;AACpE,cAAM,kBAAkB,MAAM,iBAAiB,QAAQ,EAAE,OAAO;AAChE,cAAM,mBAAmB,MAAM,iBAAiB,QAAQ,EAAE,QAAQ;AAClE,YAAI,qBAAqB,mBAAmB;AACxC,mBAAS;AAAA,MACjB;AACA,aAAO;AAAA,IACX;AAAA,IACA,cAAc,IAAI,aAAa,OAAO,OAAO;AAvJrD;AAyJY,YAAM,yBAAwB,iBAAY,kBAAkB,EAAE,MAAhC,mBAAmC;AACjE,YAAM,cAAc,0BAA0B,YAAY,wDAAyB,CAAC,IAAI,CAAC;AACzF,YAAM,iBAAiB,IAAI,IAAI,WAAW;AAC1C,YAAM,cAAc,wBAAS,CAAC;AAC9B,YAAM,iBAAiB,IAAI,IAAI,WAAW;AAC1C,WAAK,QAAQ,IAAI;AAAA;AAAA;AAAA;AAAA,QAIb,iBAAiB,MAAM,MAAM,eAAe,YAAY,OAAO,aAAW,CAAC,eAAe,IAAI,OAAO,CAAC,CAAC;AAAA,QACvG,MAAM;AAAA,MACV,CAAC;AACD,SAAG,YAAY,UAAU,MAAM,KAAK,MAAM,IAAI,aAAa,OAAO,KAAK;AACvE,WAAK,EAAE,YAAY,MAAM,KAAK,MAAM,KAAK,EAAE,aAAa,aAAa,MAAM,QAAQ,+BAAO,MAAM,CAAC;AACjG,YAAM,UAAU,KAAK;AACrB,YAAM,QAAQ,QAAQ;AACtB,iBAAW,cAAc,aAAa;AAClC,YAAI,CAAC,eAAe,IAAI,UAAU,KAAK,WAAW,UAAU,OAAO;AAC/D,qBAAW,WAAW,OAAO;AAC7B,gBAAM,UAAU,UAAU;AAAA,QAC9B;AAAA,MACJ;AAAA,IACJ;AAAA,IACA,CAAC,gBAAgB,UAAU,QAAQ;AAC/B,eAAS,UAAU,CAAC;AAEpB,UAAI,SAAS,UAAU,GAAG;AAEtB,cAAM,WAAW,SAAS,SACpB,OAAO,KAAK,WAAW,EAAE,iBAAiB,SAAS,CAAC,EAAE,YAAY,SAAS,CAAC,EAAE,aAAa,SAAS,aAAa,MAAM,KAAK,EAAE,YAAY,IAC1I;AAIN,eAAO,KAAK;AAAA,UACR,YAAY,KAAK,EAAE;AAAA,UACnB,cAAc,CAAC,UAAU,IAAI;AAAA,QACjC,CAAC;AACD,mBAAW;AAAA,MACf;AACA,aAAO,KAAK;AAAA,QACR,YAAY,KAAK,EAAE;AAAA,QACnB,cAAc,CAAC,QAAQ;AAAA,MAC3B,CAAC;AACD,YAAM,aAAa,MAAM;AAAA,IAC7B;AAAA,IACA,CAAC,oBAAoB;AACjB,YAAM,aAAa,MAAM,KAAK,EAAE;AAChC,YAAM,EAAE,OAAO,QAAQ,IAAI;AAC3B,YAAM,gBAAgB,MAAM,gBAAgB,KAAK,EAAE,QAAQ;AAC3D,UAAI,WAAW,MAAM;AACrB,YAAM,WAAW,CAAC;AAClB,UAAI,aAAa;AACjB,UAAI,UAAU;AACV,cAAM,SAAS,oBAAI,IAAI;AACvB,YAAI,kBAAkB;AACtB,YAAI,eAAe;AACnB,cAAM,EAAE,aAAa,IAAI,MAAM;AAC/B,mBAAW,WAAW,UAAU;AAC5B,gBAAM,cAAc,MAAM,QAAQ,EAAE;AACpC,gBAAM,YAAY,MAAM,QAAQ,EAAE;AAElC,gBAAM,wBAAwB,aAAa,cAAc,QAAQ,EAAE,SAAS,MACpE,MAAM,oBAAoB,QAAQ,EAAE,SAAS;AACrD,gBAAM,sBAAsB,aAAa,cAAc,QAAQ,EAAE,OAAO,MAChE,MAAM,oBAAoB,QAAQ,EAAE,OAAO;AACnD,yBAAe,iBAAgB,+DAAwB,QAAM,2DAAsB;AAEnF,cAAI,gBAAgB,WAAW;AAC3B,qBAAS,KAAK,OAAO;AAAA,UACzB,WAES,mBAAmB,eAAgB,gBAAgB,WAAY;AACpE,kBAAM,gBAAgB,gBAAgB;AAEtC,qBAAS,KAAK,OAAO;AAErB,gBAAI,gBAAgB,OAAO;AAEvB,uBAAS,KAAK,eAAe;AAC7B,oBAAM,6BAA6B,gBAAgB;AACnD,oBAAM,2BAA2B,eAE3B,YAAY,gBAAgB,cAE5B,KAAK,IAAI,WAAW,aAAa;AAEvC,oBAAM,MAAM,gBAAgB;AAE5B,gCAAkB,KAAK,kBAAkB,IAAI;AAAA,gBACzC,OAAO;AAAA,gBACP;AAAA,gBACA,aAAa;AAAA,gBACb,WAAW;AAAA,cACf,CAAC;AAAA,YACL,OACK;AACD,8BAAgB,YAAY,eAEtB,YAAY,gBAAgB,YAAY,cAExC,KAAK,IAAI,WAAW,gBAAgB,SAAS;AAAA,YACvD;AAAA,UACJ,OAEK;AACD,gBAAI,iBAAiB;AACjB,qBAAO,IAAI,eAAe;AAAA,YAC9B;AACA,8BAAkB;AAAA,UACtB;AAAA,QACJ;AACA,YAAI,iBAAiB;AACjB,iBAAO,IAAI,eAAe;AAAA,QAC9B;AACA,YAAI,OAAO,SAAS,GAAG;AACnB,mBAAS,KAAK,GAAG,MAAM;AAAA,QAC3B;AACA,qBAAa,SAAS,SAAS;AAC/B,YAAI,YAAY;AACZ,qBAAW,MAAM,KAAK,MAAM;AAAA,QAChC;AAEA,iBAAS,OAAO,CAACC,kBAAiB,SAAS,UAAU;AACjD,cAAIA,kBAAiB;AACjB,YAAAA,iBAAgB,cAAc;AAAA,UAClC;AACA,kBAAQ,kBAAkBA;AAC1B,kBAAQ,eAAe;AACvB,iBAAO;AAAA,QACX,GAAG,IAAI;AACP,YAAI,SAAS,QAAQ;AACjB,mBAAS,SAAS,SAAS,CAAC,EAAE,cAAc;AAAA,QAChD;AAAA,MACJ,WAES,eAAe;AACpB,iBAAS,KAAK,GAAG,aAAa;AAAA,MAClC;AAEA,UAAI,SAAS,QAAQ;AAEjB,iBAAS,QAAQ,aAAW,QAAQ,QAAQ,IAAI;AAChD,gBAAQ,IAAI;AAAA,UACR,iBAAiB,MAAM,MAAM,eAAe,QAAQ;AAAA,UACpD,MAAM;AAAA,QACV,CAAC;AAAA,MACL;AAEA,UAAI,YAAY;AACZ,eAAO,KAAK,gBAAgB,QAAQ;AAAA,MACxC;AACA,kBAAW,qCAAU,UAAS,IAAI,WAAW;AAC7C,aAAO;AAAA,IACX;AAAA,IACA,CAAC,4BAA4B;AACzB,YAAM,aAAa,MAAM,KAAK,EAAE;AAChC,UAAI,WAAW,MAAM,KAAK,EAAE;AAC5B,YAAM,YAAY,MAAM,KAAK,EAAE;AAC/B,YAAM,UAAU,MAAM,KAAK,EAAE;AAC7B,YAAM,WAAW,MAAM,KAAK,EAAE;AAC9B,UAAI,QAAQ,MAAM;AAClB,UAAI,UAAU;AACV,cAAM,UAAU,KAAK;AACrB,cAAM,QAAQ,KAAK;AACnB,cAAM,WAAW,CAAC;AAClB,cAAM,UAAU,CAAC;AACjB,YAAI,cAAc;AAElB,iBAAS,IAAI,SAAS,SAAS,GAAG,KAAK,GAAG,KAAK;AAC3C,gBAAM,UAAU,SAAS,CAAC;AAC1B,gBAAM,mBAAmB,MAAM,QAAQ,EAAE;AACzC,gBAAM,iBAAiB,MAAM,QAAQ,EAAE;AAEvC,cAAI,mBAAmB,SAAS;AAC5B,qBAAS,KAAK,OAAO;AACrB,0BAAc;AAAA,UAClB,OACK;AAED,gBAAI,eAAe,QAAQ,MAAM,QAAQ,QAAQ,GAAG;AAChD,oBAAM,aAAa,QAAQ,aAAa,QAAQ,QAAQ,IAAI,eAAe,QAAQ,KAAK,QAAQ;AAChG,oBAAMC,YAAW,OAAO,QAAQ,iBAAiB,YAAY,SAAS,aAAa,MAAM,QAAQ,EAAE,YAAY;AAE/G,sBAAQ,KAAK;AAAA,gBACT,YAAY,QAAQ,EAAE;AAAA,gBACtB,cAAc,CAACA,WAAU,IAAI;AAAA,cACjC,GAAG;AAAA,gBACC,YAAY,QAAQ,EAAE;AAAA,gBACtB,cAAc,CAAC,SAAS,KAAK;AAAA,cACjC,GAAG;AAAA,gBACC,YAAY,QAAQ,EAAE;AAAA,gBACtB,cAAc,CAAC,QAAQ,aAAa,QAAQ,QAAQ,IAAI,eAAe,QAAQ,EAAE;AAAA,cACrF,CAAC;AAAA,YACL;AAEA;AAAA,UACJ;AAAA,QACJ;AACA,YAAI,aAAa;AAEjB,YAAI,cAAc,IAAI;AAClB,uBAAa;AACb,mBAAS,OAAO,WAAW;AAC3B,cAAI,SAAS,QAAQ;AACjB,qBAAS,SAAS,SAAS,CAAC,EAAE,cAAc;AAAA,UAChD;AAEA,kBAAQ,IAAI;AAAA,YACR,iBAAiB,MAAM,MAAM,eAAe,QAAQ;AAAA,YACpD,MAAM;AAAA,UACV,CAAC;AAAA,QACL;AACA,YAAI,mBAAmB;AACvB,YAAI,UAAU;AACV,6BAAmB,KAAK,oBAAoB,QAAQ;AAAA,QACxD;AACA;AAAA;AAAA,UAAsC,qBAAqB,KAAK;AAAA,UAAuB;AACnF,uBAAa;AACb,qBAAW,WAAW,SAAS,MAAM,IAAI;AACzC,eAAK,wBAAwB;AAAA,QACjC;AAGA,YAAI,YAAY;AACZ,iBAAO,KAAK,gBAAgB,UAAU,OAAO;AAAA,QACjD;AAAA,MACJ;AACA,aAAO;AAAA,IACX;AAAA,IACA,oBAAoB,UAAU;AAC1B,iBAAW,YAAY,KAAK;AAC5B,aAAO,qCAAU,IAAI,aAAQ;AAjYzC;AAiY4C,oBAAK,QAAQ,cAAc,QAAM,aAAQ,cAAR,mBAAmB,aAAY,MAAM,QAAQ,YAAY,QAAM,aAAQ,YAAR,mBAAiB;AAAA,SAAW,KAAK;AAAA,IACrK;AAAA,IACA,qBAAqB,OAAO;AAExB,UAAI,SAAS;AAEb,UAAI,OAAO;AAEP,iBAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AACnC,gBAAM,UAAU,MAAM,CAAC;AACvB,gBAAM,SAAU,QAAQ,UAAU,UAAU,KAAK,kBAAkB,IAAI,OAAO;AAK9E,cAAI,CAAC,OAAO;AACR,mBAAO,QAAQ;AACnB,gBAAM,CAAC,IAAI;AAAA,QACf;AAAA,MACJ;AACA,aAAO;AAAA,IACX;AAAA,IACA,CAAC,qBAAqB;AAClB,YAAM,aAAa,MAAM,KAAK,EAAE;AAChC,YAAM,aAAa,WAAW,WAAW,IAAI,YAAY;AACzD,UAAI;AACJ,UAAI,eAAe,qCAAqC,WAAW;AAC/D,iBAAS,OAAO,KAAK,6BAA6B;AAAA,MACtD,OACK;AACD,iBAAS,OAAO,MAAM,mBAAmB;AAAA,MAC7C;AACA,aAAO;AAAA,IACX;AAAA,IACA,CAAC,+BAA+B;AAC5B,YAAM,aAAa,MAAM,KAAK,EAAE;AAChC,YAAM,WAAW,MAAM,KAAK,EAAE;AAC9B,YAAM,UAAU,MAAM,KAAK,EAAE;AAC7B,UAAI;AACJ,UAAI,UAAU;AACV,cAAM,cAAc,SAAS,SAAS,SAAS,CAAC;AAChD,cAAM,uBAAuB,MAAM,YAAY,EAAE;AACjD,cAAM,UAAU,OAAO,KAAK,oCAAoC,SAAS,OAAO,sBAAsB,SAAS,aAAa,EAAE,gBAAgB,KAAK,CAAC;AACpJ,cAAM,oBAAoB,MAAM,KAAK,EAAE;AACvC,iBAAS,qBAAqB,CAAC,KAAK,WAAW,EAAE,2CAC3C,UACA,OAAO,KAAK,mBAAmB,SAAS,IAAI;AAAA,MACtD;AACA,aAAO;AAAA,IACX;AAAA,IACA,CAAC,6BAA6B;AAC1B,YAAM,aAAa,MAAM,KAAK,EAAE;AAChC,YAAM,WAAW,MAAM,KAAK,EAAE;AAC9B,YAAM,YAAY,MAAM,KAAK,EAAE;AAC/B,UAAI;AACJ,UAAI,UAAU;AACV,cAAM,cAAc,SAAS,SAAS,SAAS,CAAC;AAChD,cAAM,uBAAuB,MAAM,YAAY,EAAE;AACjD,cAAM,UAAU,OAAO,KAAK,oCAAoC,WAAW,MAAM,sBAAsB,SAAS,aAAa,EAAE,gBAAgB,KAAK,CAAC;AACrJ,cAAM,oBAAoB,MAAM,KAAK,EAAE;AACvC,iBAAS,qBAAqB,CAAC,KAAK,WAAW,EAAE,2CAC3C,UACA,OAAO,KAAK,mBAAmB,SAAS,KAAK;AAAA,MACvD;AACA,aAAO;AAAA,IACX;AAAA,IACA,CAAC,mBAAmB;AAChB,YAAM,aAAa,MAAM,KAAK,EAAE;AAChC,YAAM,aAAa,WAAW,WAAW,IAAI,UAAU;AACvD,UAAI;AACJ,UAAI,eAAe,qCAAqC,WAAW;AAC/D,iBAAS,OAAO,KAAK,2BAA2B;AAAA,MACpD,OACK;AACD,iBAAS,OAAO,MAAM,iBAAiB;AAAA,MAC3C;AACA,aAAO;AAAA,IACX;AAAA,IACA,CAAC,4BAA4B;AACzB,UAAI;AACJ,UAAI,OAAO,KAAK,0BAA0B,GAAG;AACzC,iBAAS,OAAO,KAAK,4BAA4B;AAAA,MACrD,OACK;AACD,iBAAS,OAAO,MAAM,0BAA0B;AAAA,MACpD;AACA,aAAO;AAAA,IACX;AAAA,IACA,CAAC,mBAAmB,MAAM,YAAY,MAAM,iBAAiB;AACzD,UAAI,CAAC;AACD,eAAO;AACX,wBAAkB,OAAO,OAAO,EAAE,gBAAgB,KAAK,GAAG,eAAe;AACzE,aAAO,OAAO,MAAM,mBAAmB,MAAM,WAAW,eAAe;AAAA,IAC3E;AAAA,IACA,CAAC,8BAA8B;AAC3B,UAAI;AACJ,YAAM,aAAa,MAAM,KAAK,EAAE;AAChC,YAAM,eAAe,MAAM,KAAK,EAAE;AAClC,YAAM,WAAW,MAAM,KAAK,EAAE;AAC9B,UAAI,UAAU;AACV,YAAI,aAAa;AAEjB,mBAAW,WAAW,UAAU;AAC5B,wBAAc,QAAQ,YAAY,QAAQ;AAAA,QAC9C;AACA,mBAAW,OAAO,KAAK,WAAW,EAAE,iBAAiB,YAAY,SAAS,aAAa,YAAY;AAAA,MACvG;AACA,aAAO;AAAA,IACX;AAAA,IACA,CAAC,4BAA4B,SAAS,MAAM;AACxC,YAAM,WAAW,MAAM,KAAK,EAAE;AAC9B,YAAM,wBAAwB,MAAM,KAAK,EAAE;AAC3C,YAAM,gCAAgC,MAAM,KAAK,EAAE;AACnD,YAAM,YAAY,QAAQ,cAAc;AACxC,YAAM,0BAA0B,MAAM,KAAK,EAAE,2BAA2B,QAAQ,0BAA0B,CAAC,sBAAsB;AACjI,YAAM,WAAW,KAAK,WAAW,EAAE;AACnC,UAAI,iBAAiB,QAAQ;AAC7B,UAAI,OAAO;AACX,UAAI,gBAAgB,iBAAiB,0BAA0B,UAAU;AACzE,UAAI,CAAC,gBAAgB;AACjB,mBAAW,MAAM,KAAK,EAAE;AACxB,yBAAiB,kBAAkB,CAAC;AACpC,YAAI,CAAC,gBAAgB;AAEjB,qBAAW,SAAS,MAAM;AAC1B,cAAI,WAAW;AACX,6BAAiB,SAAS,MAAM;AAChC,8BAAkB;AAClB,mBAAO;AAEP,sCAA0B,eAAe,cAAc,eAAe,YAAY,SAAS,QAAQ;AAAA,UACvG,OACK;AACD,6BAAiB,SAAS,IAAI;AAC9B,8BAAkB,eAAe;AACjC,mBAAO;AACP,sCAA0B,eAAe;AAAA,UAC7C;AACA,qCAA2B,0BAA0B,eAAe;AAAA,QACxE;AAAA,MACJ;AACA,YAAM,oBAAoB,MAAM,KAAK,EAAE;AACvC,YAAM,UAAU,KAAK,WAAW;AAChC,aAAO,8BAA8B,4BAA4B,OAAO,OAAO,EAAE,SAAS,GAAG,OAAO,GAAG,CAAC,mBAAmB,iBAAiB,kCAAkC;AAC1K,cAAM,kBAAkB,8BAA8B,uBAAuB;AAC7E,cAAM,gBAAgB,8BAA8B,oBAAoB;AACxE,YAAI,gBAAgB,IAAI,QAAQ,MACxB,0BACG,cAAc,KAAK,CAACC,cAAa,sBAAsB,IAAIA,SAAQ,CAAC,KACnE,qBAAqB,CAAC,QAAQ,qDAAsD;AAC5F,cAAI,gBAAgB;AAChB,mBAAO,KAAK,mBAAmB,iBAAiB,6BAA6B;AAAA,UACjF,OAEK;AACD,kBAAM,aAAa,kBAAkB,QAAQ;AAC7C,gBAAI,mBAAmB,gBAAgB,QAAQ,IAAI,kBAAkB,QAAQ;AAC7E,gBAAI,KAAK,WAAW,EAAE,qBAAqB;AACvC,oBAAM,UAAU,kBAAkB,kBAAkB,IAAI,gBAAgB,kBAAkB;AAC1F,kCAAoB,UAAU,KAAK;AAAA,YACvC;AACA,gBAAI,qBAAqB;AACzB,gBAAI,WAAW;AACX,oCAAsB;AACtB,kCAAoB,kBAAkB;AAAA,YAC1C,OACK;AACD,oCAAsB,kBAAkB;AACxC,kCAAoB;AAAA,YACxB;AACA,mBAAO,kBAAkB,uBAAuB,2BAA2B,oBAAoB,eAAe,aAAa;AAEvH,oBAAM,kBAAkB,KAAK,IAAI,qBAAqB,eAAe,WAAW;AAChF,oBAAM,gBAAgB,KAAK,IAAI,mBAAmB,uBAAuB;AACzE,oBAAM,gBAAgB,IAAI,KAAK,aAAa,kBAAkB,mBAAmB;AACjF,oBAAM,cAAc,IAAI,KAAK,aAAa,gBAAgB,mBAAmB;AAC7E,oBAAM,aAAa,KAAK,eAAe,aAAa,6BAA6B;AACjF,kBAAI,eAAe;AACf,uBAAO;AAEX,0CAA4B,YAAY,QAAQ,IAAI,cAAc,QAAQ;AAE1E,kBAAI,CAAC,0BAA0B;AAE3B,iCAAiB,YAAY,SAAS,MAAM,IAAI,SAAS,IAAI;AAC7D,oBAAI,gBAAgB;AAEhB,4CAA0B,CAAC,aAAa,eAAe,cAAc,eAAe,YAAY,SAAS,QAAQ;AAEjH,6CAA2B,0BAA0B,eAAe;AAAA,gBACxE;AAAA,cACJ,OAEK;AACD;AAAA,cACJ;AAAA,YACJ;AACA,+BAAmB,OAAO;AAAA,UAC9B;AAAA,QACJ;AAAA,MACJ,CAAC;AAAA,IACL;AAAA,IACA,CAAC,+BAA+B;AAC5B,YAAM,cAAc,MAAM,KAAK,EAAE;AACjC,UAAI;AACA,eAAO;AACX,YAAM,oBAAoB,MAAM,KAAK,EAAE;AAEvC,aAAO,CAAC;AAAA,IACZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAOA,iBAAiB,MAAM,UAAU;AAC7B,iBAAW,YAAY,KAAK,YAAY;AACxC,UAAI,UAAU;AACV,cAAM,QAAQ,KAAK,sBAAsB,MAAM,QAAQ;AACvD,eAAO,SAAS,KAAK;AAAA,MACzB;AAAA,IACJ;AAAA,IACA,sBAAsB,MAAM,UAAU;AAClC,iBAAW,YAAY,KAAK,YAAY;AACxC,aAAO,WAAW,SAAS,UAAU,aAAW,QAAQ,QAAQ,aAAa,OAAO,QAAQ,OAAO,IAAI;AAAA,IAC3G;AAAA;AAAA;AAAA;AAAA,IAIA,IAAI,eAAe;AACf,YAAM,WAAW,KAAK,YAAY;AAClC,aAAO,WAAW,SAAS,CAAC,IAAI;AAAA,IACpC;AAAA;AAAA;AAAA;AAAA,IAIA,IAAI,cAAc;AACd,YAAM,WAAW,KAAK,YAAY;AAClC,aAAO,WAAW,SAAS,SAAS,SAAS,CAAC,IAAI;AAAA,IACtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAMA,WAAW,OAAO;AACd,YAAM,WAAW,KAAK,YAAY;AAClC,aAAO,qCAAW;AAAA,IACtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAOA,MAAM,gBAAgB,MAAM,MAAM,GAAG,SAAS;AAjoBtD;AAkoBY,YAAM,UAAU,KAAK,WAAW;AAChC,YAAM,QAAQ,YAAY;AAC1B,YAAM,KAAK;AAKX,UAAI,CAAC,QAAS,GAAG,yBAAuB,QAAG,gBAAH,mBAAgB;AACpD;AACJ,YAAM,WAAW,GAAG;AACpB,YAAM,eAAe,GAAG;AACxB,YAAM,YAAY,GAAG;AACrB,YAAM,UAAU,GAAG;AACnB,gBAAU,UAAU,WAAW,cAAc,OAAO,IAAI;AAIxD,UAAI,CAAC,aAAa,CAAC,WAAY,aAAa,QAAU,QAAQ,WAAY,CAAC;AACvE;AACJ,YAAM,cAAc,GAAG;AACvB,UAAI,WAAW,GAAG,YAAY,CAAC;AAC/B,UAAI,gBAAgB;AACpB,UAAI,aAAa;AACb,8BAAsB,GAAG,sBAAsB,MAAM,QAAQ;AAC7D,yBAAiB,SAAS,mBAAmB;AAC7C,YAAI,CAAC;AACD;AAAA,MACR;AACA,YAAM,cAAc,kBAAkB;AACtC,YAAM,mBAAmB,iBAAiB,YAAY,YAAY;AAClE,YAAM,sBAAsB,YAAY;AACxC,YAAM,0BAA0B,YAAY;AAC5C,YAAM,sBAAsB,GAAG,IAAI,8BAA8B,kBAAkB,MAAM,yBAAyB,EAAE,gBAAgB,KAAK,CAAC;AAC1I,YAAM,sBAAsB,sBAAsB;AAClD,YAAM,UAAU,QAAQ,IAAI,oBAAoB,KAAK,SAAS,SAAS,WAAW;AAClF,YAAM,yBAAyB,UAAU,GAAG,IAAI,8BAA8B,WAAW,MAAM,SAAS,aAAa,EAAE,gBAAgB,KAAK,CAAC;AAE7I,UAAI,gBAAgB;AAEhB,uBAAe,WAAW;AAC1B,cAAM,aAAa,KAAK,kBAAkB,IAAI;AAAA,UAC1C,UAAU;AAAA,UACV,cAAc;AAAA,UACd,aAAa;AAAA,QACjB,CAAC;AACD,mBAAW,SAAS,MAAM,CAAC;AAC3B,iBAAS,OAAO,sBAAsB,GAAG,GAAG,UAAU;AACtD,WAAG,WAAW;AACd,WAAG,WAAW;AAEd,iBAAS,IAAI,sBAAsB,GAAG,IAAI,SAAS,QAAQ,IAAI,GAAG,KAAK;AACnE,gBAAM,UAAU,SAAS,CAAC;AAC1B,cAAI,SAAS;AACT,oBAAQ,eAAe;AACvB,oBAAQ,aAAa;AAAA,UACzB;AAAA,QACJ;AAAA,MACJ,OAEK;AACD,cAAM,kBAAkB,KAAK,kBAAkB,IAAI;AAAA,UAC/C,UAAU;AAAA,UACV,cAAc;AAAA,UACd,aAAa;AAAA,QACjB,CAAC;AACD,cAAM,aAAa,KAAK,kBAAkB,IAAI;AAAA,UAC1C,UAAU,WAAW;AAAA,UACrB,cAAc;AAAA,UACd,aAAa;AAAA,QACjB,CAAC;AACD,WAAG,WAAW;AACd,WAAG,WAAW,CAAC,iBAAiB,UAAU;AAAA,MAC9C;AACA,aAAO,QAAQ,YAAY;AAAA,IAC/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAOA,MAAM,cAAc,UAAU,UAAU;AACpC,UAAI,CAAC,KAAK;AACN;AACJ,iBAAW,YAAY,KAAK;AAC5B,iBAAW,YAAY,KAAK;AAC5B,UAAI,SAAS,cAAc,SAAS,aAAa;AAC7C,YAAI,MAAM;AACV,mBAAW;AACX,mBAAW;AAAA,MACf;AAEA,eAAS,UAAU,SAAS;AAC5B,aAAO,KAAK,WAAW,EAAE,YAAY;AAAA,IACzC;AAAA;AAAA,IAEA,iBAAiB,KAAK,UAAU;AAE5B,UAAI,QAAQ,cAAc,UAAU;AAChC,cAAM,SAAS,CAAC;AAChB,mBAAW,WAAW,UAAU;AAE5B,gBAAM,cAAc,QAAQ,OAAO;AAEnC,cAAI,CAAC,KAAK,mBAAmB,QAAQ,UAAU,KAAK,QAAQ,aAAa,KAAK,mBAAmB,QAAQ,UAAU,GAAG;AAElH,mBAAO,OAAO,aAAa,QAAQ,KAAK,QAAQ;AAAA,UACpD;AACA,iBAAO,KAAK,WAAW;AAEvB,eAAK,mBAAmB,QAAQ,UAAU,IAAI,QAAQ;AAAA,QAC1D;AACA,mBAAW;AAAA,MACf;AACA,YAAM,iBAAiB,KAAK,QAAQ;AAAA,IACxC;AAAA,IACA,eAAe;AACX,YAAM,WAAW,KAAK;AACtB,UAAI,UAAU;AACV,aAAK,MAAM,eAAe,QAAQ;AAAA,MACtC;AACA,YAAM,aAAa;AAAA,IACvB;AAAA,IACA,YAAY,MAAM;AACd,WAAK,SAAS,SAAS;AACvB,YAAM,SAAS,GAAG,IAAI;AACtB,WAAK,SAAS,SAAS;AAAA,IAC3B;AAAA,IACA,KAAK,QAAQ,MAAM,OAAO,MAAM;AAC5B,YAAM,OAAO,MAAM,KAAK,OAAO,IAAI;AAInC,WAAK,KAAK,WAAW;AACrB,UAAI,KAAK,UAAU;AACf,aAAK,WAAW,KAAK,SAAS,IAAI,SAAO,OAAO,OAAO,IAAI,KAAK,GAAG,EAAE,OAAO,KAAK,CAAC,CAAC;AAAA,MACvF;AACA,aAAO;AAAA,IACX;AAAA,EACJ;AACA,EAAAJ,aAAW;AAAA,IACP,MAAM,EAAE,eAAe,0BAA0B,CAAC;AAAA,EACtD,GAAGC,iBAAgB,WAAW,cAAc,MAAM;AAClD,EAAAD,aAAW;AAAA,IACP,YAAY;AAAA,MACR,MAAM;AAAA,MACN,SAAS;AAAA,MACT,SAAS;AAAA;AAAA,MAET,sBAAsB;AAAA,IAC1B,CAAC;AAAA,EACL,GAAGC,iBAAgB,WAAW,YAAY,MAAM;AAChD,EAAAD,aAAW;AAAA,IACP,MAAM;AAAA,EACV,GAAGC,iBAAgB,WAAW,oBAAoB,MAAM;AACxD,EAAAD,aAAW;AAAA,IACP,MAAM;AAAA,EACV,GAAGC,iBAAgB,WAAW,eAAe,MAAM;AACnD,EAAAD,aAAW;AAAA,IACP,MAAM,UAAU;AAAA,EACpB,GAAGC,iBAAgB,WAAW,iBAAiB,IAAI;AACnD,EAAAD,aAAW;AAAA,IACP,UAAU,UAAU;AAAA,EACxB,GAAGC,iBAAgB,WAAW,qBAAqB,IAAI;AACvD,EAAAD,aAAW;AAAA,IACP,UAAU,kBAAkB;AAAA,EAChC,GAAGC,iBAAgB,WAAW,6BAA6B,IAAI;AAC/D,SAAOA;AACX,CAAC,EAAE;AACH;;;AC3yBA,IAAII,eAA0C,SAAU,YAAY,QAAQ,KAAK,MAAM;AACnF,MAAI,IAAI,UAAU,QAAQ,IAAI,IAAI,IAAI,SAAS,SAAS,OAAO,OAAO,OAAO,yBAAyB,QAAQ,GAAG,IAAI,MAAM;AAC3H,MAAI,OAAO,YAAY,YAAY,OAAO,QAAQ,aAAa;AAAY,QAAI,QAAQ,SAAS,YAAY,QAAQ,KAAK,IAAI;AAAA;AACxH,aAAS,IAAI,WAAW,SAAS,GAAG,KAAK,GAAG;AAAK,UAAI,IAAI,WAAW,CAAC;AAAG,aAAK,IAAI,IAAI,EAAE,CAAC,IAAI,IAAI,IAAI,EAAE,QAAQ,KAAK,CAAC,IAAI,EAAE,QAAQ,GAAG,MAAM;AAChJ,SAAO,IAAI,KAAK,KAAK,OAAO,eAAe,QAAQ,KAAK,CAAC,GAAG;AAChE;AAeO,IAAM,iBAAN,cAA6B,MAAM,CAAC,iCAAiC,gBAAgB,GAAG,CAAC,SAAS;AACrG,QAAM,aAAa,KAAK;AACxB,QAAMC,wBAAuB,KAAK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAM9B,UAAU,MAAM;AACZ,YAAM,SAAS,KAAK;AACpB,aAAO,OAAO,KAAK,WAAW,EAAE,gBAAgB,QAAQ,KAAK,YAAY,IAAI,IAAI;AAAA,IACrF;AAAA,IACA,YAAY,IAAI,aAAa,OAAO,QAAQ,MAAM;AAC9C,UAAI,SAAS;AACT,iBAAS;AACb,UAAI,CAAC,YAAY,aAAa,cAAc,EAAE,KAAK,UAAU;AACzD;AACJ,UAAI,QAAQ,QAAQ,SAAS,KAAK,YAAY;AAC1C,aAAK,EAAE,WAAW,MAAM,KAAK,MAAM,KAAK,EAAE,YAAY,aAAa,MAAM,IAAI;AAAA,MACjF;AACA,SAAG,YAAY,UAAU,MAAM,IAAI,aAAa,OAAO,MAAM;AAAA,IACjE;AAAA,IACA,cAAc,QAAQ;AAClB,YAAM,IAAI,MAAM,yBAAyB;AAAA,IAC7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAUA,CAAC,wBAAwB,YAAY;AACjC,aAAO;AAAA,IACX;AAAA;AAAA;AAAA;AAAA,IAIA,CAAC,+BAA+B;AAC5B,YAAM,cAAc,MAAM,KAAK,EAAE;AACjC,YAAM,UAAU,KAAK,WAAW;AAChC,UAAI,gBAAgB;AACpB,iBAAW,cAAc,aAAa;AAClC,YAAI,EAAE,OAAO,KAAK,wBAAwB,UAAU;AAChD;AACJ,cAAM,uBAAuB,MAAM,WAAW,EAAE;AAChD,yBAAiB,OAAO,QAAQ,iBAAiB,MAAM,WAAW,EAAE,QAAQ,sBAAsB,SAAS,WAAW;AAAA,MAC1H;AACA,aAAO,OAAO,QAAQ,iBAAiB,eAAe,SAAS,aAAa,MAAM,KAAK,EAAE,UAAU;AAAA,IACvG;AAAA,IACA,CAAC,kBAAkB;AACf,YAAM,cAAc,MAAM,KAAK,EAAE;AACjC,UAAI,YAAY,OAAO;AACnB,eAAO,OAAO,KAAK,6BAA6B;AAAA,WAC/C;AACD,cAAM,WAAW,MAAM;AACvB,eAAO,aAAa,SAAY,WAAW,OAAO,KAAK,oBAAoB;AAAA,MAC/E;AAAA,IACJ;AAAA,IACA,CAAC,sBAAsB;AACnB,YAAM,cAAc,MAAM,KAAK,EAAE;AACjC,UAAI,YAAY,OAAO;AACnB,eAAO,OAAO,KAAK,6BAA6B;AAAA,WAC/C;AACD,eAAO,OAAO,KAAK,yBAAyB,MAAM,KAAK,EAAE,WAAW,MAAM,KAAK,EAAE,OAAO;AAAA,MAC5F;AAAA,IACJ;AAAA,IACA,CAAC,0BAA0B;AACvB,aAAO,MAAM;AAAA,IACjB;AAAA,IACA,CAAC,yBAAyB,YAAY;AAClC,aAAO,OAAO,KAAK,iCAAiC,UAAU;AAAA,IAClE;AAAA,IACA,CAAC,6BAA6B,YAAY;AACtC,aAAO,OAAO,KAAK,kCAAkC,UAAU;AAAA,IACnE;AAAA,IACA,CAAC,iCAAiC,YAAY;AAC1C,aAAO,MAAM;AAAA,IACjB;AAAA,IACA,CAAC,sCAAsC;AACnC,aAAO,EAAE,wBAAwB,MAAM;AAAA,IAC3C;AAAA,IACA,CAAC,yBAAyB,WAAW,SAAS,uBAAuB;AACjE,UAAI,aAAa,QAAQ,WAAW,QAAQ,YAAY;AACpD,eAAO;AACX,UAAI,CAAC,uBAAuB;AACxB,gCAAwB,MAAM,KAAK,EAAE;AAAA,MACzC;AACA,YAAM,uBAAuB,oBAAI,IAAI;AACrC,iBAAW,CAAC,UAAU,WAAW,KAAK,uBAAuB;AACzD,YAAI,gBAAgB;AACpB,mBAAW,cAAc,aAAa;AAClC,2BAAkB,MAAM,WAAW,EAAE;AAAA,QACzC;AACA,6BAAqB,IAAI,UAAU,aAAa;AAAA,MACpD;AAEA,UAAI,UAAU;AACd,YAAM,UAAU,OAAO,OAAO,OAAO,KAAK,oCAAoC,GAAG,EAAE,WAAW,QAAQ,CAAC;AAIvG,UAAI,qBAAqB,SAAS,GAAG;AACjC,6BAAqB,IAAI,MAAM,KAAK,EAAE,mBAAmB,GAAG;AAC5D,gBAAQ,yBAAyB;AAAA,MACrC;AACA,aAAO,KAAK,4BAA4B,SAAS,CAAC,eAAe,aAAa,kCAAkC;AAC5G,cAAM,gBAAgB,8BAA8B,oBAAoB;AACxE,cAAM,iBAAiB,cAAc,QAAQ,GAAG,eAAe,YAAY,QAAQ,GAAG,mBAAmB,eAAe;AACxH,YAAI,gBAAgB;AACpB,mBAAW,mBAAmB,eAAe;AAGzC,2BAAiB,qBAAqB,IAAI,eAAe,KAAK;AAAA,QAClE;AAEA,mBAAW,gBAAgB,mBAAmB;AAAA,MAClD,CAAC;AACD,aAAO,OAAO,KAAK,WAAW,EAAE,iBAAiB,SAAS,SAAS,aAAa,MAAM,KAAK,EAAE,UAAU;AAAA,IAC3G;AAAA,IACA,CAAC,kCAAkC,aAAa;AAC5C,YAAM,SAAS,MAAM,KAAK,EAAE,QAAQ,aAAa,MAAM,KAAK,EAAE,YAAY,WAAW,OAAO,KAAK,WAAW,EAAE,iBAAiB,QAAQ,YAAY,SAAS,WAAW;AACvK,UAAI,kBAAkB;AACtB,YAAM,UAAU,OAAO,OAAO,OAAO,KAAK,oCAAoC,GAAG,EAAE,WAAW,MAAM,KAAK,EAAE,WAAW,SAAS,MAAM,KAAK,EAAE,QAAQ,CAAC;AACrJ,YAAM,wBAAwB,MAAM,KAAK,EAAE;AAC3C,aAAO,KAAK,4BAA4B,SAAS,CAAC,eAAe,aAAa,kCAAkC;AAC5G,cAAM,gBAAgB,8BAA8B,oBAAoB;AACxE,cAAM,iBAAiB,cAAc,QAAQ,GAAG,eAAe,YAAY,QAAQ,GAAG,mBAAmB,eAAe;AACxH,mBAAW,mBAAmB,eAAe;AACzC,8BACK,sBAAsB,IAAI,eAAe,IAAI,sBAAsB,IAAI,eAAe,EAAE,SAAS,KAAK;AAAA,QAC/G;AAAA,MACJ,CAAC;AACD,aAAO,kBAAkB,MAAM,WAAW,kBAAkB;AAAA,IAChE;AAAA,IACA,CAAC,gCAAgC,UAAU,YAAY,MAAM,QAAQ,YAAY;AAC7E,eAAS,WAAW,SAAY,SAAS,MAAM,KAAK,EAAE;AACtD,mBAAa,eAAe,SAAY,aAAa,MAAM,KAAK,EAAE;AAClE,YAAM,WAAW,OAAO,KAAK,WAAW,EAAE,iBAAiB,QAAQ,YAAY,SAAS,WAAW;AACnG,UAAI,YAAY,QAAQ,UAAU;AAC9B,eAAO;AACX,UAAI,UAAU,SAAS,QAAQ;AAC/B,UAAI,aAAa;AAEjB,UAAI,eAAe;AACf,eAAO,IAAI,KAAK,OAAO;AAC3B,YAAM,WAAW,MAAM,KAAK,EAAE;AAC9B,YAAM,wBAAwB,MAAM,KAAK,EAAE;AAC3C,YAAM,uBAAuB,oBAAI,IAAI;AAIrC,UAAI,WAAW;AACf,iBAAW,CAACC,WAAU,WAAW,KAAK,uBAAuB;AACzD,YAAI,gBAAgB;AACpB,mBAAW,cAAc,aAAa;AAClC,2BAAiB,MAAM,WAAW,EAAE;AAAA,QACxC;AACA,6BAAqB,IAAIA,WAAU,aAAa;AAChD,YAAI,gBAAgB;AAChB,qBAAW;AAAA,MACnB;AACA,UAAI,aAAa,OAAO,KAAK,6BAA6B,IAAI;AAC1D,cAAM,UAAU,OAAO,OAAO,OAAO,KAAK,sCAAsC,GAAG,YAAY,EAAE,WAAW,UAAU,UAAU,IAAI,EAAE,SAAS,UAAU,UAAU,CAAC;AACpK,eAAO,KAAK,4BAA4B,SAAS,CAAC,eAAe,aAAa,kCAAkC;AAC5G,gBAAM,gBAAgB,8BAA8B,oBAAoB;AACxE,gBAAM,iBAAiB,cAAc,QAAQ,GAAG,eAAe,YAAY,QAAQ,GAAG,mBAAmB,eAAe;AACxH,cAAI,gBAAgB;AACpB,qBAAW,mBAAmB,eAAe;AAGzC,6BAAiB,qBAAqB,IAAI,eAAe,KAAK;AAAA,UAClE;AAEA,gBAAM,iBAAiB,gBAAgB,mBAAmB;AAC1D,cAAI,kBAAkB,YAAY;AAM9B,sBAAU,YACJ,iBAAiB,cAAc,OAAO,iBACtC,eAAe,cAAc,OAAO;AAE1C,mBAAO;AAAA,UACX,OACK;AACD,0BAAc;AAAA,UAClB;AAAA,QACJ,CAAC;AACD,eAAO,IAAI,KAAK,OAAO;AAAA,MAC3B,OACK;AACD,eAAO,SAAS,sBAAsB,UAAU,UAAU,SAAS,EAAE;AAAA,MACzE;AAAA,IACJ;AAAA,EACJ;AACA,EAAAF,aAAW;AAAA,IACP,YAAY;AAAA,MAAE,QAAQ;AAAA;AAAA,IAAgC,CAAC;AAAA,EAC3D,GAAGC,gBAAe,WAAW,UAAU,MAAM;AAC7C,EAAAD,aAAW;AAAA,IACP,YAAY,EAAE,QAAQ,UAAU,cAAc,SAAS,KAAK,GAAG,EAAE,WAAW,CAAC,SAAS,WAAW,cAAc,IAAI,KAAK,SAAS,KAAK,CAAC;AAAA,EAC3I,GAAGC,gBAAe,WAAW,cAAc,MAAM;AACjD,EAAAD,aAAW;AAAA,IACP,MAAM,QAAQ;AAAA,EAClB,GAAGC,gBAAe,WAAW,eAAe,IAAI;AAChD,EAAAD,aAAW;AAAA,IACP,UAAU,QAAQ;AAAA,EACtB,GAAGC,gBAAe,WAAW,mBAAmB,IAAI;AACpD,SAAOA;AACX,CAAC,EAAE;AACH;;;ACtOO,IAAM,YAAY,OAAO,WAAW;AACpC,IAAM,WAAW,OAAO,UAAU;AAElC,IAAM,gBAAgB,QAAQ,IAAI;AAAA,EACrC,QAAQ;AAAA,EACR,QAAQ,oBAAI,IAAI,CAAC,cAAc,YAAY,QAAQ,CAAC;AACxD,CAAC;AACM,IAAM,eAAe,QAAQ,IAAI;AAAA,EACpC,QAAQ;AAAA,EACR,QAAQ,oBAAI,IAAI,CAAC,cAAc,YAAY,SAAS,CAAC;AACzD,CAAC;AACM,IAAM,yBAAyB,QAAQ,IAAI;AAAA,EAC9C,QAAQ;AAAA,EACR,QAAQ,oBAAI,IAAI,CAAC,cAAc,WAAW,QAAQ,CAAC;AACvD,CAAC;AACM,IAAM,2BAA2B,QAAQ,IAAI;AAAA,EAChD,QAAQ;AAAA,EACR,QAAQ,oBAAI,IAAI,CAAC,YAAY,WAAW,QAAQ,CAAC;AACrD,CAAC;AAEM,IAAM,kBAAN,cAA8B,cAAc;AACnD;AAEO,IAAM,4BAAN,cAAwC,wBAAwB;AAAA,EACnE,SAAS,IAAI,IAAI;AACb,UAAM,cAAc,GAAG;AACvB,UAAM,cAAc,GAAG;AAEvB,YAAQ,OAAO,aAAa,OAAO,eAE3B,OAAO,aAAa,OAAO,cAC5B,YAAY,IAAI,SAAS,MAAM,YAAY,IAAI,SAAS,KACxD,YAAY,IAAI,QAAQ,MAAM,YAAY,IAAI,QAAQ,KACtD,MAAM,SAAS,IAAI,EAAE;AAAA,EAChC;AACJ;;;ACvCA,IAAIE,eAA0C,SAAU,YAAY,QAAQ,KAAK,MAAM;AACnF,MAAI,IAAI,UAAU,QAAQ,IAAI,IAAI,IAAI,SAAS,SAAS,OAAO,OAAO,OAAO,yBAAyB,QAAQ,GAAG,IAAI,MAAM;AAC3H,MAAI,OAAO,YAAY,YAAY,OAAO,QAAQ,aAAa;AAAY,QAAI,QAAQ,SAAS,YAAY,QAAQ,KAAK,IAAI;AAAA;AACxH,aAAS,IAAI,WAAW,SAAS,GAAG,KAAK,GAAG;AAAK,UAAI,IAAI,WAAW,CAAC;AAAG,aAAK,IAAI,IAAI,EAAE,CAAC,IAAI,IAAI,IAAI,EAAE,QAAQ,KAAK,CAAC,IAAI,EAAE,QAAQ,GAAG,MAAM;AAChJ,SAAO,IAAI,KAAK,KAAK,OAAO,eAAe,QAAQ,KAAK,CAAC,GAAG;AAChE;AA4BO,IAAM,yBAAN,cAAqC,MAAM,CAAC,cAAc,GAAG,CAAC,SAAS;AAC1E,QAAM,aAAa,KAAK;AACxB,QAAMC,gCAA+B,KAAK;AAAA,IACtC,CAAC,0BAA0B;AACvB,cAAQ,MAAM,uBAAuB,eAAe;AAAA,IACxD;AAAA,IACA,CAAC,0BAA0B;AACvB,YAAM,wBAAwB,MAAM,KAAK,EAAE;AAC3C,aAAO,sBAAsB,OAAO,IAAI,MAAM,KAAK,EAAE,iBAAiB,eAAe;AAAA,IACzF;AAAA,IACA,4BAA4B,GAAG;AAC3B,YAAM,wBAAwB,EAAE,KAAK,EAAE,qBAAqB;AAC5D,aAAO,sBAAsB,OAAO,IAAI,EAAE,KAAK,EAAE,cAAc,IAAI,eAAe;AAAA,IACtF;AAAA,IACA,CAAC,kBAAkB,OAAO;AACtB,YAAM,iBAAiB,OAAO,KAAK,wBAAwB;AAC3D,UAAI,mBAAmB,eAAe,QAAQ;AAC1C,cAAM,kBAAkB,OAAO,WAAW,kBAAkB,KAAK,MAAM,KAAK;AAC5E,wBAAgB,YAAY,OAAO,KAAK,EAAE,QAAQ,SAAS;AAC3D,YAAI,OAAO,KAAK,yBAAyB;AACrC,0BAAgB,qBAAqB,QAAQ;AAEjD,wBAAgB,qBAAqB,QAAQ;AAC7C,eAAO;AAAA,MACX,OACK;AACD,eAAO,OAAO,WAAW,kBAAkB,KAAK,MAAM,KAAK;AAAA,MAC/D;AAAA,IACJ;AAAA,IACA,gBAAgB,GAAG;AACf,YAAM,iBAAiB,KAAK,4BAA4B,CAAC;AACzD,UAAI,mBAAmB,eAAe,QAAQ;AAC1C,eAAO;AAAA,MACX,OACK;AACD,eAAO,WAAW,gBAAgB,KAAK,MAAM,CAAC;AAAA,MAClD;AAAA,IACJ;AAAA,IACA,wBAAwB,IAAI,OAAO,aAAa;AAC5C,YAAM,aAAa,WAAW,wBAAwB,KAAK,MAAM,IAAI,OAAO,WAAW;AACvF,iBAAW,qBAAqB,SAAS;AACzC,iBAAW,qBAAqB,QAAQ;AACxC,aAAO;AAAA,IACX;AAAA,IACA,CAAC,yBAAyB,YAAY;AAClC,YAAM,iBAAiB,OAAO,KAAK,wBAAwB;AAC3D,UAAI,mBAAmB,eAAe,QAAQ;AAC1C,cAAM,WAAW,MAAM,KAAK,EAAE;AAC9B,cAAM,YAAY,SAAS,WAAW,IAAI,QAAQ;AAClD,YAAI,cAAc,mBAAmB;AACjC,iBAAO,OAAO,KAAK,iCAAiC,UAAU;AAAA,QAClE,WACS,cAAc,aAAa,WAAW;AAC3C,iBAAO,OAAO,KAAK,6BAA6B,UAAU;AAAA,QAC9D,OACK;AACD,gBAAM,IAAI,MAAM,6BAA6B;AAAA,QACjD;AAAA,MACJ,OACK;AACD,eAAO,OAAO,WAAW,yBAAyB,KAAK,MAAM,UAAU;AAAA,MAC3E;AAAA,IACJ;AAAA,IACA,CAAC,kBAAkB;AACf,YAAM,iBAAiB,OAAO,KAAK,wBAAwB;AAC3D,UAAI,mBAAmB,eAAe,QAAQ;AAC1C,cAAM,WAAW,MAAM,KAAK,EAAE;AAC9B,cAAM,YAAY,SAAS,WAAW,IAAI,SAAS;AACnD,YAAI,cAAc,mBAAmB;AACjC,iBAAO,OAAO,KAAK,wBAAwB;AAAA,QAC/C,WACS,cAAc,cAAc,WAAW;AAC5C,iBAAO,OAAO,KAAK,oBAAoB;AAAA,QAC3C,OACK;AACD,gBAAM,IAAI,MAAM,8BAA8B;AAAA,QAClD;AAAA,MACJ,OACK;AACD,eAAO,OAAO,WAAW,gBAAgB,KAAK,IAAI;AAAA,MACtD;AAAA,IACJ;AAAA,IACA,CAAC,qBAAqB;AAClB,YAAM,iBAAiB,OAAO,KAAK,wBAAwB;AAC3D,UAAI,mBAAmB,eAAe,QAAQ;AAC1C,cAAM,WAAW,MAAM,KAAK,EAAE;AAC9B,cAAM,YAAY,SAAS,WAAW,IAAI,YAAY;AACtD,YAAI,cAAc,yBAAyB,WAAW;AAClD,iBAAO,OAAO,KAAK,gCAAgC,MAAM,KAAK,EAAE,SAAS,KAAK;AAAA,QAClF,OACK;AACD,iBAAO,OAAO,WAAW,mBAAmB,KAAK,IAAI;AAAA,QACzD;AAAA,MACJ,OACK;AACD,eAAO,OAAO,WAAW,mBAAmB,KAAK,IAAI;AAAA,MACzD;AAAA,IACJ;AAAA,IACA,CAAC,mBAAmB;AAChB,YAAM,iBAAiB,OAAO,KAAK,wBAAwB;AAC3D,UAAI,mBAAmB,eAAe,QAAQ;AAC1C,cAAM,WAAW,MAAM,KAAK,EAAE;AAC9B,cAAM,YAAY,SAAS,WAAW,IAAI,UAAU;AACpD,YAAI,cAAc,uBAAuB,WAAW;AAChD,iBAAO,OAAO,KAAK,gCAAgC,MAAM,KAAK,EAAE,WAAW,IAAI;AAAA,QACnF,OACK;AACD,iBAAO,OAAO,WAAW,iBAAiB,KAAK,IAAI;AAAA,QACvD;AAAA,MACJ,OACK;AACD,eAAO,OAAO,WAAW,iBAAiB,KAAK,IAAI;AAAA,MACvD;AAAA,IACJ;AAAA,IACA,CAAC,6BAA6B;AAC1B,YAAM,WAAW,MAAM,KAAK,EAAE;AAC9B,YAAM,iBAAiB,OAAO,KAAK,wBAAwB;AAC3D,YAAM,qBAAqB,SAAS,WAAW,IAAI,WAAW;AAC9D,YAAM,mBAAmB,SAAS,WAAW,IAAI,SAAS;AAC1D,UAAI;AACJ,UAAI,uBAAuB,gBAAgB,aAAa,kBAAkB,eAAe,QAAQ;AAC7F,cAAM,8BAA8B,MAAM,0BAA0B,KAAK,EAAE,SAAS;AACpF,cAAM,4BAA4B,MAAM,0BAA0B,KAAK,EAAE,OAAO;AAChF,cAAM,sBAAsB,SAAS,WAAW,IAAI,YAAY;AAChE,cAAM,oBAAoB,SAAS,WAAW,IAAI,UAAU;AAC5D,cAAM,eAAe,MAAM,KAAK,EAAE;AAClC,YAAI,6BAA6B,wBAAwB,yBAAyB,WAAW;AACzF,mCAAyB,OAAO,KAAK,2BAA2B,OAAO,KAAK,gCAAgC,2BAA2B,KAAK,GAAG,yBAAyB;AAAA,QAC5K,WACS,+BAA+B,sBAAsB,uBAAuB,WAAW;AAC5F,mCAAyB,OAAO,KAAK,2BAA2B,6BAA6B,OAAO,KAAK,gCAAgC,6BAA6B,IAAI,CAAC;AAAA,QAC/K,WACS,+BAA+B,6BACjC,CAAC,+BAA+B,CAAC,2BAA2B;AAC/D,mCAAyB,OAAO,WAAW,2BAA2B,KAAK,IAAI;AAAA,QACnF;AAAA,MACJ;AAEI,iCAAyB,OAAO,WAAW,2BAA2B,KAAK,IAAI;AACnF,aAAO;AAAA,IACX;AAAA,EACJ;AACA,EAAAD,aAAW;AAAA,IACP,YAAY,EAAE,QAAQ,WAAW,cAAc,MAAM,CAAC;AAAA,EAC1D,GAAGC,wBAAuB,WAAW,gBAAgB,MAAM;AAC3D,EAAAD,aAAW;AAAA,IACP,YAAY,EAAE,MAAM,UAAU,cAAc,eAAe,OAAO,GAAG,EAAE,MAAM,KAAK,CAAC;AAAA,EACvF,GAAGC,wBAAuB,WAAW,kBAAkB,MAAM;AAC7D,EAAAD,aAAW;AAAA,IACP,MAAM,EAAE,eAAe,0BAA0B,CAAC;AAAA,EACtD,GAAGC,wBAAuB,WAAW,cAAc,MAAM;AACzD,EAAAD,aAAW;AAAA,IACP,UAAU,gBAAgB;AAAA,EAC9B,GAAGC,wBAAuB,WAAW,2BAA2B,IAAI;AACpE,EAAAD,aAAW;AAAA,IACP,UAAU,QAAQ;AAAA,EACtB,GAAGC,wBAAuB,WAAW,mBAAmB,IAAI;AAC5D,EAAAD,aAAW;AAAA,IACP,UAAU,WAAW;AAAA,EACzB,GAAGC,wBAAuB,WAAW,sBAAsB,IAAI;AAC/D,EAAAD,aAAW;AAAA,IACP,UAAU,SAAS;AAAA,EACvB,GAAGC,wBAAuB,WAAW,oBAAoB,IAAI;AAC7D,SAAOA;AACX,CAAC,EAAE;AACH;;;AClMO,IAAM,qCAAqC,iBAAiB,IAAI;AAAA,EACnE,WAAW,oBAAI,IAAI,CAAC,cAAc,YAAY,aAAa,WAAW,QAAQ,CAAC;AAAA,EAC/E,UAAU,oBAAI,IAAI;AAAA,IACd;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACJ,CAAC;AACL,CAAC;AACM,IAAM,8CAA8C,iBAAiB,IAAI;AAAA,EAC5E,WAAW,oBAAI,IAAI,CAAC,cAAc,YAAY,aAAa,WAAW,QAAQ,CAAC;AAAA,EAC/E,UAAU,oBAAI,IAAI;AAAA,IACd;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACJ,CAAC;AACL,CAAC;AAEM,IAAM,2CAA2C,gBAAgB,IAAI;AAAA,EACxE,aAAa;AAAA,EACb,2BAA2B,oBAAI,IAAI,CAAC,gBAAgB,aAAa,CAAC;AACtE,CAAC;AACM,IAAM,wCAAwC,gBAAgB,IAAI;AAAA,EACrE,aAAa;AAAA,EACb,2BAA2B,oBAAI,IAAI,CAAC,gBAAgB,YAAY,CAAC;AACrE,CAAC;AACM,IAAM,4CAA4C,gBAAgB,IAAI;AAAA,EACzE,aAAa;AAAA,EACb,2BAA2B,oBAAI,IAAI,CAAC,kBAAkB,aAAa,CAAC;AACxE,CAAC;AACM,IAAM,yCAAyC,gBAAgB,IAAI;AAAA,EACtE,aAAa;AAAA,EACb,2BAA2B,oBAAI,IAAI,CAAC,kBAAkB,YAAY,CAAC;AACvE,CAAC;;;ACpBM,IAAM,qBAAN,cAAiC,MAAM,CAAC,sBAAsB,GAAG,CAAC,SAAS;AAC9E,QAAM,aAAa,KAAK;AACxB,QAAMC,4BAA2B,KAAK;AAAA,IAClC,CAAC,kBAAkB,OAAO;AACtB,YAAM,iBAAiB,OAAO,KAAK,wBAAwB;AAC3D,UAAI,mBAAmB,eAAe,eAAe;AACjD,cAAM,kBAAkB,OAAO,WAAW,kBAAkB,KAAK,MAAM,KAAK;AAC5E,cAAM,eAAe,MAAM,KAAK,EAAE;AAClC,YAAI;AACA,0BAAgB,sBAAsB,SAAS;AACnD,YAAI,MAAM,iBAAiB,KAAK,EAAE,QAAQ,GAAG;AAGzC,cAAI,cAAc;AACd,4BAAgB,qBAAqB,SAAS;AAAA,UAClD,OACK;AACD,4BAAgB,qBAAqB,QAAQ;AAAA,UACjD;AAAA,QACJ;AACA,eAAO;AAAA,MACX,OACK;AACD,eAAO,OAAO,WAAW,kBAAkB,KAAK,MAAM,KAAK;AAAA,MAC/D;AAAA,IACJ;AAAA,IACA,uBAAuB,GAAG;AACtB,YAAM,iBAAiB,KAAK,4BAA4B,CAAC;AACzD,UAAI,mBAAmB,eAAe,eAAe;AACjD,cAAM,YAAY,EAAE,KAAK,EAAE,SAAS;AACpC,cAAM,eAAe,EAAE,KAAK,EAAE,YAAY;AAC1C,YAAI,cAAc,UAAU,WAAW,cAAc,UAAU,MAAM;AACjE,iBAAO,eAAe,wCAAwC;AAAA,QAClE,OACK;AACD,iBAAO,eAAe,yCAAyC;AAAA,QACnE;AAAA,MACJ,OACK;AACD,eAAO,WAAW,uBAAuB,KAAK,MAAM,CAAC;AAAA,MACzD;AAAA,IACJ;AAAA,IACA,CAAC,wCAAwC;AACrC,YAAM,iBAAiB,OAAO,KAAK,wBAAwB;AAC3D,UAAI,mBAAmB,eAAe,eAAe;AACjD,eAAO,EAAE,wBAAwB,KAAK;AAAA,MAC1C,OACK;AACD,eAAO,OAAO,WAAW,sCAAsC,KAAK,IAAI;AAAA,MAC5E;AAAA,IACJ;AAAA,EACJ;AACA,SAAOA;AACX,CAAC,EAAE;AACH;;;ACzDO,IAAM,oBAAN,cAAgC,MAAM;AAAA,EACzC;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACJ,GAAG,CAAC,SAAS;AACT,QAAMC,2BAA0B,KAAK;AAAA,EACrC;AACA,SAAOA;AACX,CAAC,EAAE;AACH;;;AChCA,IAAIC,eAA0C,SAAU,YAAY,QAAQ,KAAK,MAAM;AACnF,MAAI,IAAI,UAAU,QAAQ,IAAI,IAAI,IAAI,SAAS,SAAS,OAAO,OAAO,OAAO,yBAAyB,QAAQ,GAAG,IAAI,MAAM;AAC3H,MAAI,OAAO,YAAY,YAAY,OAAO,QAAQ,aAAa;AAAY,QAAI,QAAQ,SAAS,YAAY,QAAQ,KAAK,IAAI;AAAA;AACxH,aAAS,IAAI,WAAW,SAAS,GAAG,KAAK,GAAG;AAAK,UAAI,IAAI,WAAW,CAAC;AAAG,aAAK,IAAI,IAAI,EAAE,CAAC,IAAI,IAAI,IAAI,EAAE,QAAQ,KAAK,CAAC,IAAI,EAAE,QAAQ,GAAG,MAAM;AAChJ,SAAO,IAAI,KAAK,KAAK,OAAO,eAAe,QAAQ,KAAK,CAAC,GAAG;AAChE;AAQO,IAAM,oDAAN,cAAgE,sBAAsB;AAAA;AAAA;AAAA;AAAA,EAIzF,WAAW,SAAS;AAChB,WAAO;AAAA,MACH,EAAE,MAAM,aAAa,MAAM,WAAW,cAAc,KAAK;AAAA,IAC7D;AAAA,EACJ;AACJ;AACO,IAAM,oDAAN,cAAgE,sBAAsB;AAAA,EACzF,WAAW,gBAAgB;AACvB,WAAO;AAAA,MACH,YAAY;AAAA,IAChB;AAAA,EACJ;AACJ;AACO,IAAM,uCAAN,cAAmD,kBAAkB;AAAA,EACxE,IAAI,qBAAqB;AACrB,WAAO;AAAA,EACX;AACJ;AACAA,aAAW;AAAA,EACP,YAAY,EAAE,MAAM,WAAW,cAAc,MAAM,CAAC;AACxD,GAAG,qCAAqC,WAAW,4BAA4B,MAAM;AAC9E,IAAM,yBAAN,cAAqC,KAAK;AAAA,EAC7C,cAAc;AACV,UAAM,GAAG,SAAS;AAIlB,SAAK,SAAS;AAId,SAAK,QAAQ;AAAA,EACjB;AACJ;AACO,IAAM,+BAAN,cAA2C,uBAAuB;AACzE;AAIO,IAAM,6BAAN,cAAyC,uBAAuB;AAAA,EACnE,cAAc;AACV,UAAM,GAAG,SAAS;AAIlB,SAAK,YAAY;AAKjB,SAAK,kBAAkB;AAKvB,SAAK,mBAAmB;AAIxB,SAAK,cAAc;AACnB,SAAK,sBAAsB;AAAA,EAC/B;AACJ;AACO,IAAM,qBAAN,cAAiC,OAAO,IAAI,IAAI,EAAE;AAAA,EACrD,oCAAoC;AAChC,WAAO;AAAA,EACX;AAAA,EACA,WAAW,OAAO;AACd,YAAQ,OAAO,OAAO;AAAA,MAClB,uBAAuB;AAAA,MACvB,yBAAyB,KAAK,kCAAkC;AAAA,IACpE,GAAG,KAAK;AACR,UAAM,WAAW,KAAK;AAAA,EAC1B;AACJ;AACAA,aAAW;AAAA,EACP,MAAM;AACV,GAAG,mBAAmB,WAAW,yBAAyB,MAAM;AAChEA,aAAW;AAAA,EACP,MAAM;AACV,GAAG,mBAAmB,WAAW,cAAc,MAAM;AAM9C,IAAM,yBAAN,cAAqC,mBAAmB;AAAA,EAC3D,WAAW,OAAO;AACd,UAAM,WAAW,KAAK;AAAA,EAC1B;AAAA,EACA,WAAW,OAAO;AACd,UAAM,WAAW,KAAK;AACtB,QAAI,KAAK,UAAU;AACf,WAAK,SAAS,SAAS,OAAO,IAAI;AAAA,IACtC;AAAA,EACJ;AAAA,EACA,oCAAoC;AAChC,WAAO;AAAA,EACX;AAAA,EACA,CAAC,oCAAoC,YAAY;AAC7C,UAAM,QAAQ,MAAM,WAAW,EAAE,OAAO,QAAQ,MAAM,WAAW,EAAE,OAAO,wBAAwB,MAAM,KAAK,EAAE,uBAAuB,WAAW,UAAU,MAAM,MAAM,EAAE,WACzK,YAAY,UAAU,MAAM,MAAM,EAAE,YAAY,UAAU,UAAU,MAAM,MAAM,EAAE;AAClF,WAAO,QAAQ,SAAS,SAAS,aAAa,YAAY,yBAAyB,CAAC,SAAS;AAAA,EACjG;AAAA,EACA,CAAC,sBAAsB;AACnB,UAAM,QAAQ,CAAC,GAAG,gBAAgB,MAAM,KAAK,OAAO,WAAW,MAAM,KAAK,EAAE,UAAU,wBAAwB,MAAM,KAAK,EAAE,uBAAuB,cAAc,MAAM,SAAS,EAAE,UAAU,WAAW,MAAM,SAAS,EAAE,mBAAmB,wBAAwB,oBAAI,IAAI,GAAG,cAAc,CAAC,GAAG,sBAAsB,oBAAI,IAAI,GAAG,gBAAgB,oBAAI,IAAI;AACxV,QAAI,iCAAiC;AAErC,eAAW,cAAc,aAAa;AAElC,UAAI,EAAE,OAAO,KAAK,oCAAoC,UAAU;AAC5D;AAEJ,YAAM,WAAW,EAAE;AACnB,YAAM,QAAQ,MAAM,WAAW,EAAE;AACjC,YAAM,yBAAyB,MAAM,MAAM,EAAE;AAC7C,YAAMC,aAAY,MAAM,MAAM,EAAE;AAChC,YAAMC,WAAU,MAAM,MAAM,EAAE;AAC9B,YAAM,WAAW,MAAM,MAAM,EAAE;AAC/B,YAAM,gBAAgB,MAAM,MAAM,EAAE;AACpC,uCAAiC,kCAAkC;AAEnE,UAAI,UAAU;AACV,mBAAW,WAAW,UAAU;AAC5B,gBAAMD,aAAY,MAAM,QAAQ,EAAE;AAClC,gBAAMC,WAAU,MAAM,QAAQ,EAAE;AAChC,sBAAY,KAAK,EAAE,WAAAD,YAAW,SAAAC,UAAS,WAAW,CAAC;AAAA,QACvD;AAAA,MACJ,OACK;AACD,oBAAY,KAAK,EAAE,WAAAD,YAAW,SAAAC,UAAS,WAAW,CAAC;AAAA,MACvD;AACA,UAAIC,eAAc,sBAAsB,IAAI,aAAa;AACzD,UAAI,CAACA,cAAa;AACd,QAAAA,eAAc,CAAC;AACf,8BAAsB,IAAI,eAAeA,YAAW;AAAA,MACxD;AACA,0BAAoB,IAAI,YAAY,oBAAI,IAAI,CAAC;AAC7C,oBAAc,IAAI,YAAY,CAAC,CAAC;AAChC,MAAAA,aAAY,KAAK,UAAU;AAAA,IAC/B;AACA,UAAM,sBAAsB,IAAI,qCAAqC,EAAE,WAAW,YAAY,CAAC;AAK/F,UAAM,YAAY,CAAC,eAAe,qBAAqB,GAAG,sBAAsB,KAAK,CAAC;AACtF,UAAM,YAAY,oBAAI,IAAI;AAE1B,kBAAc,cAAc,QAAQ,UAAQ;AACxC,YAAM,WAAW,2BAA2B,IAAI,EAAE,MAAM,SAAS,CAAC;AAClE,gBAAU,IAAI,MAAM,QAAQ;AAC5B,YAAM,KAAK,QAAQ;AACnB,0BAAoB,QAAQ,CAACC,YAAW,eAAe;AACnD,cAAM,qBAAqB,6BAA6B,IAAI,EAAE,MAAM,WAAW,CAAC;AAChF,QAAAA,WAAU,IAAI,MAAM,kBAAkB;AACtC,sBAAc,IAAI,UAAU,EAAE,KAAK,kBAAkB;AAAA,MACzD,CAAC;AAAA,IACL,CAAC;AACD,QAAI,kBAAkB;AACtB,UAAM,YAAY,MAAM,CAAC,EAAE,KAAK,WAAW,UAAU,MAAM,MAAM,SAAS,CAAC,EAAE,KAAK,SAAS,mBAAmB;AAAA,MAC1G;AAAA,MACA;AAAA,MACA;AAAA,MACA,4BAA4B;AAAA,IAChC,GAAG,qBAAqB,QAAQ,QAAQ,IAAI,UAAU,QAAQ;AAE9D,QAAI,qBAAqB,SAAS,WAAW,EAAE,kBAAkB;AAC7D,uBAAiB,WAAW;AAAA,IAChC;AACA,WAAO,SAAS,4BAA4B,kBAAkB,CAAC,mBAAmB,iBAAiB,iBAAiB;AAChH,YAAM,oBAAoB,aAAa,uBAAuB;AAG9D,UAAI,kBAAkB,IAAI,aAAa,GAAG;AACtC,cAAM,OAAO,aAAa,oBAAoB,IAAI,aAAa,EAAE,CAAC,GAAG,mBAAmB,gBAAgB,QAAQ,IAAI,kBAAkB,QAAQ,GAAG,WAAW,UAAU,IAAI,IAAI,GAAG,kBAAkB,SAAS,eAAe,oBAAI,IAAI,GAAG,0BAA0B,SAAS,uBAAuB,oBAAI,IAAI;AACxS,YAAI,CAAC,SAAS,aAAa;AACvB,6BAAmB;AACnB,uBAAa;AAAA,QACjB;AACA,YAAI,QAAQ,GAAG,yBAAyB,OAAO;AAE/C,qBAAa,oBAAoB,IAAI,mBAAmB,EAAE,QAAQ,CAAC,aAAa;AAC5E,gBAAM,aAAa,SAAS;AAC5B,gBAAM,QAAQ,yCAAY;AAE1B,cAAI,SACA,kBAAkB,IAAI,MAAM,iBAAiB,MAC5C,CAAC,kCAAkC,MAAM,0BAA0B,kBAAkB,IAAI,QAAQ,IAAI;AAEtG,kBAAM,mBAAmB,KAAK,IAAI,kBAAkB,QAAQ,GAAG,WAAW,MAAM,UAAU,QAAQ,CAAC;AACnG,kBAAM,iBAAiB,KAAK,IAAI,gBAAgB,QAAQ,GAAG,WAAW,MAAM,QAAQ,QAAQ,CAAC;AAC7F,qCAAyB;AACzB,uBAAW,iBAAiB;AAC5B,kBAAM,qBAAqB,oBAAoB,IAAI,UAAU,EAAE,IAAI,IAAI;AACvE,kBAAM,mBAAmB,WAAW,WAAW,QAAQ;AACvD,+BAAmB,UAAU;AAC7B,+BAAmB,QAAQ,WAAW;AACtC,qBAAS,UAAU;AAEnB,qBAAS,WAAW;AACpB,4BAAgB,IAAI,UAAU;AAC9B,oCAAwB,IAAI,YAAY,kBAAkB;AAAA,UAC9D;AAAA,QACJ,CAAC;AAED,YAAI,kBAAkB,IAAI,QAAQ,GAAG;AACjC,mBAAS,aAAa;AAAA,QAC1B;AAEA,YAAI,OAAO;AACP,cAAI,UAAU;AAEV,gCAAoB,WAAW;AAC/B,0BAAc;AAEd,qBAAS,QAAQ,mBAAmB;AAAA,UACxC,WACS,CAAC,kBAAkB;AACxB,qBAAS,QAAQ;AAAA,UACrB;AAAA,QACJ;AACA,YAAI,wBAAwB;AACxB,mBAAS,cAAc;AACvB,mBAAS,sBAAsB;AAC/B,mBAAS,kBAAkB,SAAS,mBAAmB,SAAS,SAAS,SAAS,aAAa,SAAS,QAAQ;AAChH,mBAAS,mBAAmB,SAAS,SAAS,SAAS,aAAa,SAAS,QAAQ;AAAA,QACzF;AAAA,MACJ;AAAA,IACJ,CAAC;AACD,WAAO;AAAA,MACH;AAAA,MACA;AAAA,IACJ;AAAA,EACJ;AACJ;AACAJ,aAAW;AAAA,EACP,MAAM;AACV,GAAG,uBAAuB,WAAW,YAAY,MAAM;AACvDA,aAAW;AAAA,EACP,UAAU,YAAY;AAC1B,GAAG,uBAAuB,WAAW,uBAAuB,IAAI;AAIzD,IAAM,4BAAN,cAAwC,MAAM,CAAC,iBAAiB,GAAG,CAAC,SAAS;AAChF,QAAM,aAAa,KAAK;AACxB,QAAMK,mCAAkC,KAAK;AAAA,IACzC,cAAc;AACV,YAAM,GAAG,SAAS;AAClB,WAAK,YAAY,oBAAI,IAAI;AACzB,WAAK,WAAW,oBAAI,IAAI;AAAA,IAC5B;AAAA,IACA,YAAY,UAAU;AAClB,WAAK,MAAM,cAAc,QAAQ;AACjC,WAAK,UAAU,IAAI,QAAQ;AAAA,IAC/B;AAAA,IACA,eAAe,UAAU;AACrB,UAAI,KAAK,OAAO;AACZ,aAAK,MAAM,iBAAiB,QAAQ;AAAA,MACxC;AACA,WAAK,UAAU,OAAO,QAAQ;AAAA,IAClC;AAAA,IACA,UAAUC,SAAQ;AACd,WAAK,MAAM,UAAUA,OAAM;AAC3B,WAAK,SAAS,IAAIA,OAAM;AAAA,IAC5B;AAAA,IACA,aAAaA,SAAQ;AACjB,UAAI,KAAK,OAAO;AACZ,aAAK,MAAM,aAAaA,OAAM;AAAA,MAClC;AACA,WAAK,SAAS,OAAOA,OAAM;AAAA,IAC/B;AAAA,IACA,WAAW,SAAS;AAChB,YAAM,EAAE,MAAM,IAAI;AAClB,iBAAW,YAAY,KAAK,WAAW;AACnC,aAAK,eAAe,QAAQ;AAAA,MAChC;AACA,iBAAWA,WAAU,KAAK,UAAU;AAChC,aAAK,aAAaA,OAAM;AAAA,MAC5B;AACA,iBAAW,WAAW,KAAK,MAAM,OAAO;AAAA,IAC5C;AAAA,IACA,CAAC,4BAA4B,SAAS,MAAM;AACxC,YAAM,UAAU,KAAK,WAAW;AAChC,YAAM,WAAW,MAAM,KAAK,EAAE;AAC9B,YAAM,gCAAgC,QAAQ,iBAAiB,CAAC,QAAQ,EAAE,OAAO,QAAQ,aAAa,CAAC,CAAC,CAAC;AACzG,YAAM,WAAW,QAAQ;AACzB,YAAM,6BAA6B,QAAQ;AAC3C,UAAI,UAAU;AACV,kBAAU,OAAO,OAAO,EAAE,SAAS,GAAG,OAAO;AAAA,MACjD;AACA,aAAO,8BAA8B,4BAA4B,SAAS,CAAC,WAAW,SAAS,kCAAkC;AAC7H,cAAM,kBAAkB,8BAA8B,uBAAuB;AAC7E,YAAI,8BAA8B,gBAAgB,IAAI,QAAQ,GAAG;AAC7D,iBAAO,KAAK,WAAW,SAAS,6BAA6B;AAAA,QACjE;AAAA,MACJ,CAAC;AAAA,IACL;AAAA,EACJ;AACA,SAAOD;AACX,CAAC,EAAE;AACH;;;AC/TA,IAAIE,eAA0C,SAAU,YAAY,QAAQ,KAAK,MAAM;AACnF,MAAI,IAAI,UAAU,QAAQ,IAAI,IAAI,IAAI,SAAS,SAAS,OAAO,OAAO,OAAO,yBAAyB,QAAQ,GAAG,IAAI,MAAM;AAC3H,MAAI,OAAO,YAAY,YAAY,OAAO,QAAQ,aAAa;AAAY,QAAI,QAAQ,SAAS,YAAY,QAAQ,KAAK,IAAI;AAAA;AACxH,aAAS,IAAI,WAAW,SAAS,GAAG,KAAK,GAAG;AAAK,UAAI,IAAI,WAAW,CAAC;AAAG,aAAK,IAAI,IAAI,EAAE,CAAC,IAAI,IAAI,IAAI,EAAE,QAAQ,KAAK,CAAC,IAAI,EAAE,QAAQ,GAAG,MAAM;AAChJ,SAAO,IAAI,KAAK,KAAK,OAAO,eAAe,QAAQ,KAAK,CAAC,GAAG;AAChE;AA4BO,IAAM,2BAAN,cAAuC,MAAM,CAAC,4BAA4B,4BAA4B,gBAAgB,GAAG,CAAC,SAAS;AACtI,QAAM,aAAa,KAAK;AACxB,QAAMC,kCAAiC,KAAK;AAAA,IACxC,UAAU,SAAS,CAAC,GAAG;AACnB,WAAK,yBAAyB,OAAO,0BAA0B,KAAK,iCAAiC;AACrG,iBAAW,UAAU,KAAK,MAAM,MAAM;AACtC,UAAI,CAAC,KAAK;AACN,aAAK,8BAA8B,KAAK,sCAAsC;AAAA,IACtF;AAAA,IACA,4BAA4B;AACxB,aAAO;AAAA,IACX;AAAA,IACA,mCAAmC;AAC/B,aAAO;AAAA,IACX;AAAA,IACA,wCAAwC;AACpC,aAAO;AAAA,IACX;AAAA,IACA,CAAC,qBAAqB;AAClB,aAAO,MAAM;AAAA,IACjB;AAAA,IACA,iBAAiB;AACb,iBAAW,eAAe,MAAM,MAAM,SAAS;AAC/C,WAAK,8BAA8B,KAAK,+BAA+B;AACvE,WAAK,oCAAoC,KAAK,qCAAqC;AAAA,IACvF;AAAA,IACA,UAAU;AACN,aAAO,YAAY;AAAA,IACvB;AAAA,IACA,6BAA6B;AACzB,aAAO;AAAA,IACX;AAAA,IACA,4BAA4B;AACxB,aAAO;AAAA,IACX;AAAA,IACA,iCAAiC;AAC7B,aAAO;AAAA,IACX;AAAA,IACA,iCAAiC;AAC7B,aAAO;AAAA,IACX;AAAA,IACA,+BAA+B;AAC3B,aAAO;AAAA,IACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAsCA,MAAM,mBAAmB,WAAW,SAAS,MAAM,kBAAkB;AACjE,UAAI;AACJ,UAAI,kBAAkB;AAClB,8BAAsB,MAAM,QAAQ,gBAAgB,IAAI,mBAAmB,CAAC,gBAAgB;AAAA,MAChG;AACA,YAAM,gBAAgB,GAAG,UAAU,YAAY,EAAE,KAAK,CAAC,eAAe,WAAW,YAAY,WAAW,EAAC,2DAAqB,SAAS,YAAW;AAClJ,UAAI;AACA,eAAO,2BAA2B;AACtC,UAAI,MAAM,KAAK,mBAAmB,WAAW,SAAS,MAAM,mBAAmB,GAAG;AAC9E,eAAO,2BAA2B;AAAA,MACtC;AACA,aAAO,2BAA2B;AAAA,IACtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA4BA,MAAM,kBAAkB,WAAW,SAAS,MAAM,kBAAkB;AAChE,YAAM,mBAAmB,MAAM,KAAK,mBAAmB,WAAW,SAAS,MAAM,gBAAgB;AACjG,aAAO,qBAAqB,2BAA2B;AAAA,IAC3D;AAAA,IACA,uCAAuC,WAAW,SAAS;AACvD,aAAO;AAAA;AAAA,QAEH,QAAQ,EAAE;AAAA;AAAA,QAEV,QAAQ,EAAE;AAAA,MACd;AAAA,IACJ;AAAA,IACA,MAAM,mBAAmB,WAAW,SAAS,MAAM,kBAAkB;AACjE,YAAM,kBAAkB,KAAK,mBAAmB,EAAE;AAClD,YAAM,aAAa,IAAI,gBAAgB,EAAE,WAAW,SAAS,KAAK,CAAC;AACnE,YAAM,SAAS,KAAK,QAAQ,OAAO,EAAE,YAAY,OAAO,oBAAoB,QAAQ,CAAC;AACrF,UAAI,kBAAkB;AAClB,YAAI,CAAC,MAAM,QAAQ,gBAAgB,GAAG;AAClC,6BAAmB,CAAC,gBAAgB;AAAA,QACxC;AACA,yBAAiB,QAAQ,CAAAC,gBAAc,OAAO,aAAaA,WAAU,CAAC;AAAA,MAC1E;AACA,aAAO,UAAU,UAAU;AAC3B,iBAAW,UAAU;AAcrB,UAAI;AACA,cAAM,QAAQ,IAAI,KAAK,uCAAuC,WAAW,OAAO,EAAE,IAAI,OAAK,OAAO,UAAU,CAAC,CAAC,CAAC;AAC/G,eAAO;AAAA,MACX,SACO,GAAP;AAEI,YAAI,SAAS,KAAK,CAAC;AACf,iBAAO;AAEX,YAAI,CAAC,YAAY,KAAK,CAAC,GAAG;AACtB,gBAAM;AAAA,QACV;AAAA,MACJ;AAAA,IACJ;AAAA;AAAA;AAAA,IAGA,MAAM,uBAAuB,YAAY,oBAAoB;AACzD,aAAO,KAAK,kBAAkB,WAAW,WAAW,WAAW,SAAS,WAAW,MAAM,kBAAkB;AAAA,IAC/G;AAAA,EACJ;AACA,EAAAF,aAAW;AAAA,IACP,YAAY,EAAE,MAAM,UAAU,cAAc,qBAAqB,QAAQ,CAAC;AAAA,EAC9E,GAAGC,0BAAyB,WAAW,wBAAwB,MAAM;AACrE,EAAAD,aAAW;AAAA,IACP,YAAY,EAAE,MAAM,WAAW,cAAc,KAAK,CAAC;AAAA,EACvD,GAAGC,0BAAyB,WAAW,0CAA0C,MAAM;AACvF,EAAAD,aAAW;AAAA,IACP,YAAY,EAAE,MAAM,WAAW,cAAc,KAAK,CAAC;AAAA,EACvD,GAAGC,0BAAyB,WAAW,0BAA0B,MAAM;AACvE,SAAOA;AACX,CAAC,EAAE;AACH;AAUO,IAAM,4CAAN,cAAwD,oBAAY,+BAA+B,EAAE;AAAA,EACxG,WAAW,QAAQ;AACf,WAAO;AAAA,EACX;AAAA,EACA,iBAAiB;AACb,WAAO,KAAK,EAAE,mBAAmB;AAAA,EACrC;AAAA,EACA,QAAQ,YAAY;AAChB,eAAW,SAAS;AAAA,EACxB;AACJ;AAMO,IAAM,0BAAN,cAAsC,YAAY;AAAA;AAAA;AAAA;AAAA;AAAA,EAKrD,yBAAyB;AACrB,QAAI,CAAC,KAAK,sBAAsB;AAC5B,YAAM,eAAe,KAAK,gBAAgB;AAC1C,WAAK,uBAAuB,aAAa,OAAO;AAAA;AAAA,QAEhD,WAAW,cAAc,WAAW,YAAY,WAAW,UAAU,SAAS,WAAW,OAAO,KAAK,WAAW,QAAQ,SAAS,WAAW,SAAS;AAAA,OAAE;AAAA,IAC3J;AACA,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,kCAAkC,QAAQ;AACtC,WAAO;AAAA,MACH,KAAK,wCAAwC,IAAI,MAAM;AAAA,MACvD,KAAK,4CAA4C,IAAI,MAAM;AAAA,IAC/D;AAAA,EACJ;AAAA,EACA,sCAAsC,YAAY,MAAM,IAAI;AACxD,WAAO,WAAW,UAAU,MAAM,sCAAsC,YAAY,MAAM,EAAE;AAAA,EAChG;AAAA,EACA,iBAAiB;AACb,QAAI,CAAC,KAAK,cAAc;AACpB,YAAM,sBAAsB,KAAK,uBAAuB;AACxD,YAAM,SAAS,CAAC;AAChB,iBAAW,cAAc,qBAAqB;AAC1C,eAAO,KAAK,GAAG,KAAK,kCAAkC,EAAE,WAAW,CAAC,CAAC;AAAA,MACzE;AAGA,UAAI,CAAC,oBAAoB,QAAQ;AAC7B,eAAO,KAAK,KAAK,+CAA+C,IAAI,GAAG,GAAG,MAAM,eAAe,CAAC;AAAA,MACpG;AACA,WAAK,eAAe;AAAA,IACxB;AACA,WAAO,KAAK;AAAA,EAChB;AACJ;AACAD,aAAW;AAAA,EACP,eAAe,yCAAyC;AAC5D,GAAG,wBAAwB,WAAW,kDAAkD,MAAM;AAC9FA,aAAW;AAAA,EACP,eAAe,0BAA0B;AAC7C,GAAG,wBAAwB,WAAW,2CAA2C,MAAM;AACvFA,aAAW;AAAA,EACP,eAAe,8BAA8B;AACjD,GAAG,wBAAwB,WAAW,+CAA+C,MAAM;;;ACnS3F,IAGI,cAAgB,OAAO,OAAO;AAHlC,IAII,eAAgB,OAAO,QAAQ;AAiBnC,IAAqB,eAArB,MAAkC;AAAA,EAC9B,OAAO,OAAO,KAAK,KAAK,QAAQ,KAAK,UAAU;AAC3C,aAAS,aAAa,UAAU,QAAQ,QAAQ;AAChD,UAAM,QAAQ,aAAa,UAAU,KAAK,OAAO,EAAE,OAAO,OAAK,CAAC,OAAO,CAAC,CAAC;AACzE,QAAI,KAAK;AACL,YAAM,aAAa,UAAU,KAAK,OAAO;AACzC,eAAS,IAAI,GAAG,IAAI,IAAI,QAAQ,EAAE,GAAG;AACjC,YAAI,CAAC,MAAM,SAAS,IAAI,CAAC,CAAC,GAAG;AACzB,gBAAM,KAAK,IAAI,CAAC,CAAC;AAAA,QACrB;AAAA,MACJ;AAAA,IACJ;AACA,WAAO,aAAa,UAAU,OAAO,EAAE;AAAA,EAC3C;AAAA,EACA,OAAO,KAAK,SAAS,aAAa;AAC9B,QAAI,SAAS;AACT,UAAI,QAAQ,gBAAgB;AACxB,sBAAc,oCAAe;AAAA,MACjC,OACK;AACD,sBAAc,oCAAgB,QAAQ,SAAS,OAAO,KAAK,CAAC,QAAQ,QAAQ,OAAO;AACnF,kBAAU,IAAI,aAAa,OAAO;AAAA,MACtC;AACA,UAAI,CAAC,QAAQ,SAAS,CAAC,aAAa;AAChC,kBAAU;AAAA,MACd;AAAA,IACJ;AACA,WAAO,YAAY,cAAc,IAAI,aAAa,IAAI;AAAA,EAC1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,OAAO,UAAU,KAAK,KAAK,UAAU;AACjC,UAAM,OAAO;AACb,UACI,OAAO,OAAO,KACd,UAAU,OAAO,SACjB,WAAW,OAAO,UAClB,WAAW,CAAC,WAAW,CAAC;AAC5B,QAAI,WAAW,SAAS,UACpB,GAAG,GAAG;AACV,QAAI,SAAS,UAAU;AACnB,UAAI,IAAI,aAAa,QAAQ,gBAAgB,OAAO,IAAI,iBAAiB,YAAY;AACjF,cAAM,IAAI,aAAa,OAAO,KAAK;AACnC,mBAAW;AAAA,MACf,WACS,2BAAK,gBAAgB;AAC1B,cAAM,IAAI;AAAA,MACd,WACS,eAAe,cAAc;AAClC,cAAM,MAAM,KAAK,GAAG;AAAA,MACxB,WACS,eAAe,KAAK;AACzB,cAAM,MAAM,KAAK,IAAI,KAAK,CAAC,EAAE,OAAO,OAAK,IAAI,IAAI,CAAC,CAAC;AAAA,MACvD,WACS,eAAe,KAAK;AACzB,cAAM,MAAM,KAAK,GAAG;AAAA,MACxB,WACS,CAAC,MAAM,QAAQ,GAAG,GAAG;AAC1B,cAAM,QAAQ,cAAc,GAAG;AAAA,MACnC;AAAA,IACJ;AACA,QAAI,UAAU;AAEV,YAAM,CAAC,GAAG,IAAI,IAAI,aAAa,MAAM,GAAG,CAAC,CAAC;AAAA,IAC9C;AAEA,SAAK,IAAI,IAAI,QAAQ,MAAM,KAAgB;AACvC,UAAI,IAAI,CAAC;AACT,UAAI,CAAC,EAAE,QAAQ;AACX,YAAI,OAAO,GAAG,CAAC;AAAA,MACnB,WACS,EAAE,SAAS,GAAG,GAAG;AACtB,YAAI,OAAO,GAAG,GAAG,GAAG,aAAa,MAAM,CAAC,CAAC;AAAA,MAC7C;AAAA,IACJ;AACA,QAAI,SAAS;AACT,YAAM;AAAA,IACV,WACS,UAAU;AACf,YAAM,IAAI,KAAK,GAAG;AAAA,IACtB,OACK;AACD,YAAM,uBAAO,OAAO,IAAI;AACxB,WAAK,IAAI,GAAG,IAAI,IAAI,QAAQ,EAAE,GAAG;AAC7B,YAAI,IAAI,CAAC,CAAC,IAAI;AAAA,MAClB;AAAA,IACJ;AACA,WAAQ;AAAA,EACZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,eAAe,SAAS;AACpB,SAAK,QAAQ,GAAG,OAAO;AAAA,EAC3B;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,QAAQ;AAEJ,eAAW,OAAO,MAAM;AACpB,WAAK,GAAG,IAAI;AAAA,IAChB;AACA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,OAAO,SAAS;AACZ,WAAO,KAAK,MAAM,EAAE,QAAQ,GAAG,OAAO;AAAA,EAC1C;AAAA;AAAA,EAEA,IAAI,iBAAiB;AACjB,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,QAAQ;AACJ,WAAO,IAAI,aAAa,IAAI;AAAA,EAChC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,SAAS,WAAW;AAChB,QAAI,OAAO,cAAc,YAAY,WAAW;AAC5C,aAAO,QAAQ,KAAK,SAAS,CAAC;AAAA,IAClC;AACA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA,EAGA,WAAW;AAEP,WAAO,KAAK,SAAS,GAAG,KAAK,WAAW;AAAA,EAC5C;AAAA,EACA,SAAS;AACL,WAAO,KAAK,SAAS;AAAA,EACzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,OAAO;AACH,WAAO,KAAK;AAAA,EAChB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,QAAQ,OAAO;AACX,UACI,eAAe,aAAa,UAAU,OAAO,OAAO,GACpD,MAAM,aAAa;AACvB,QAAI,KAAK,WAAW,KAAK;AACrB,eAAS,IAAI,GAAG,IAAI,KAAK,KAAK;AAC1B,YAAI,CAAC,KAAK,aAAa,CAAC,CAAC,GAAG;AACxB,iBAAO;AAAA,QACX;AAAA,MACJ;AACA,aAAO;AAAA,IACX;AACA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,IAAI,QAAQ;AACR,QAAI,QAAQ,KAAK,WAAW,GACxB;AACJ,QAAI,SAAS,MAAM;AACf,aAAO,QAAQ,cAAc,IAAI;AACjC,WAAK,YAAY,IAAI,KAAK;AAC1B,WAAK,WAAW,IAAI,QAAQ,KAAK,KAAK,GAAG;AAAA,IAC7C;AACA,WAAO;AAAA,EACX;AAAA,EACA,IAAI,MAAM,OAAO;AACb,UACI,KAAK,MACL,OAAO,OAAO,KAAK,EAAE,GACrB,MAAM,KAAK;AACf,aAAS,IAAI,GAAG,IAAI,KAAK,KAAK;AAC1B,aAAO,GAAG,KAAK,CAAC,CAAC;AAAA,IACrB;AACA,QAAI,OAAO;AACP,SAAG,QAAQ,GAAG,CAAC,KAAK,CAAC;AAAA,IACzB,OACK;AAED,aAAO,GAAG,WAAW;AAAA,IACzB;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,IAAI,SAAS;AACT,WAAO,QAAQ,cAAc,IAAI;AAAA,EACrC;AAAA,EACA,IAAI,SAAS;AAGT,WAAO,KAAK,QAAQ,KAAK,YAAY,IAAI;AAAA,EAC7C;AAAA,EACA,QAAQ,OAAO,SAAS;AACpB,aAAS,KAAK,GAAG,IAAI,GAAG,IAAI,QAAQ,QAAQ,KAAK;AAC7C,UAAI,QAAQ,CAAC,GAAG;AACZ,cAAM,QAAQ,CAAC;AACf,YAAI,IAAI,kBAAkB,QAAQ,SAAS,GAAG,GAAG;AAE7C,eAAK,KAAK,KAAK;AACX,iBAAK,CAAC,IAAI,QAAQ,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC;AAAA,UACrC;AAAA,QACJ,OACK;AACD,gBAAM,aAAa,UAAU,QAAQ,CAAC,GAAG,OAAO;AAChD,eAAK,IAAI,GAAG,IAAI,IAAI,QAAQ,EAAE,GAAG;AAC7B,iBAAK,IAAI,CAAC,CAAC,IAAI;AAAA,UACnB;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AAEA,WAAO,KAAK,WAAW;AACvB,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,OAAO,WAAW;AACd,eAAW,OAAO,WAAW;AACzB,UAAI,CAAC,KAAK,GAAG,MAAM,CAAC,UAAU,GAAG,GAAG;AAChC,aAAK,GAAG,IAAI,UAAU,GAAG;AAEzB,eAAO,KAAK,WAAW;AAAA,MAC3B;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,SAAS,SAAS;AACd,UACI,YAAY,QAAQ,aAAa,QAAQ,eAAe,QAAQ,YAAY,SAC5E,OAAY,aAAa,KAAK,SAAS;AAC3C,SAAK,IAAI,IAAI;AACb,cAAU,QAAQ,KAAK;AAAA,EAC3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,OAAO,SAAS;AACZ,WAAO,KAAK,QAAQ,GAAG,OAAO;AAAA,EAClC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,UAAU,SAAS;AACf,WAAO,KAAK,QAAQ,GAAG,OAAO;AAAA,EAClC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAaA,OAAO,WAAW,OAAO,QAAQ,CAAC,KAAK,SAAS,CAAC,GAAG;AAChD,WAAO,QAAQ,IAAI;AAEnB,QAAI,QAAQ,KAAK,SAAS,CAAC,MAAM,MAAM;AACnC,WAAK,SAAS,IAAI;AAElB,aAAO,KAAK,WAAW;AACvB,aAAO;AAAA,IACX;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,QAAQ;AACJ,WAAO,QAAQ,cAAc,IAAI;AAAA,EACrC;AAAA,EACA,QAAQG,KAAI;AACR,WAAO,QAAQ,cAAc,IAAI,EAAE,QAAQA,GAAE;AAAA,EACjD;AACJ;AAGA,aAAa,UAAU,WAAW,IAAI;AACtC,aAAa,SAAS;;;AC9VtB,IACI,oBAAoB,CAAC,YAAY,UAAU;AACvC,MAAI,MAAM,QAAQ,MAAM,CAAC,CAAC,GAAG;AACzB,UAAM,CAAC,EAAE,QAAQ,WAAS,WAAW,KAAK,mBAAmB,MAAM,CAAC,CAAC,IAAI,MAAM,mBAAmB,KAAK,CAAC,CAAC;AAAA,EAC7G,OACK;AACD,eAAW,KAAK,mBAAmB,MAAM,CAAC,CAAC,IAAI,MAAM,mBAAmB,MAAM,CAAC,CAAC,CAAC;AAAA,EACrF;AACA,SAAO;AACX;AATJ,IAUI,mBAAoB,QAAQ,QAAQ;AAVxC,IAWI,eAAe,SAAO;AAClB,SAAO,OAAO,GAAG,EAAE,SAAS,GAAG,GAAG;AACtC;AAbJ,IAcI,eAAe,UAAQ;AACnB,SAAO,GAAI,KAAK,YAAY,KAAO,aAAa,KAAK,SAAS,IAAI,CAAC,KAAO,aAAa,KAAK,QAAQ,CAAC,KAAO,aAAa,KAAK,SAAS,CAAC,KAAO,aAAa,KAAK,WAAW,CAAC,KAAO,aAAa,KAAK,WAAW,CAAC,KAAO,KAAK,gBAAgB;AAClP;AAuGJ,IAAqB,YAArB,cAAumHzC,WAAW,gBAAgB;AACvB,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAoBH,SAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAoBV,cAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAOf,gBAAiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAQjB,gBAAiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MASjB,mBAAoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAgCpB,yBAA0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAgB1B,sBAAuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAmBvB,uBAAwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAUxB,iBAAkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MASlB,eAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAUhB,eAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAOhB,eAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAOhB,oBAAqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAQrB,mBAAoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAQpB,UAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAOX,mBAAoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAoBpB,aAAc;AAAA,QACV,QAAS;AAAA,QACT,MAAS;AAAA,QACT,QAAS;AAAA,QACT,QAAS;AAAA,MACb;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,WAAW,eAAe;AACtB,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAWH,QAAS;AAAA,IACb;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA4IA,eAAe,QAAQ;AACnB,UAAM,eAAe,MAAM;AAC3B,QAAI,KAAK,UAAU;AACf,WAAK,KAAK,EAAE,MAAM,MAAM;AAAA,MAAC,CAAC;AAAA,IAC9B;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAeA,IAAI,YAAY;AACZ,WAAO,KAAK,aAAa,IAAI,KAAK,qBAAqB,IAAI;AAAA,EAC/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,IAAI,eAAe;AACf,WAAO,QAAQ,KAAK,aAAa;AAAA,EACrC;AAAA,EACA,IAAI,cAAc,eAAe;AAC7B,QAAI,KAAK,MAAM;AACX,YAAM,IAAI,MAAM,4CAA4C;AAAA,IAChE;AACA,QAAI,KAAK,oBAAoB;AACzB,YAAM,IAAI,MAAM,qEAAqE;AAAA,IACzF;AACA,SAAK,iBAAiB;AAAA,EAC1B;AAAA,EACA,IAAI,gBAAgB;AAChB,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,IAAI,mBAAmB,oBAAoB;AACvC,QAAI,KAAK,MAAM;AACX,YAAM,IAAI,MAAM,4CAA4C;AAAA,IAChE;AACA,QAAI,KAAK,eAAe;AACpB,YAAM,IAAI,MAAM,qEAAqE;AAAA,IACzF;AACA,SAAK,sBAAsB;AAAA,EAC/B;AAAA,EACA,IAAI,qBAAqB;AACrB,WAAO,KAAK;AAAA,EAChB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,IAAI,UAAU;AACV,WAAO,KAAK,iBAAiB,KAAK;AAAA,EACtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,IAAI,WAAW;AACX,WAAQ,iBAAiB,OAAQ,KAAK,cAAc,MAAM;AAAA,EAC9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,IAAI,WAAW;AACX,QAAI,KAAK,SAAS;AACd,aAAO,KAAK,OAAO,KAAK,WAAW,KAAK,WAAW,KAAK,KAAK,QAAQ;AAAA,IACzE;AAAA,EACJ;AAAA,EACA,iBAAiB,QAAQ,cAAc;AACnC,UACI,iBAAiB,IAAI,SAAS,GAAG,GACjC,cAAiB,OAAO,QAAQ,OAAO,OAAO,CAAC,GAAG,GAAG,YAAY,CAAC,EAAE,OAAO,mBAAmB,CAAC,CAAC,EAAE,KAAK,GAAG;AAC9G,WAAO,eAAe,iBAAiB,MAAM,OAAO,cAAc;AAAA,EACtE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,MAAM,YAAY,QAAQ;AACtB,UAAM,KAAK;AACX,QAAI,GAAG,cAAc,CAAC,GAAG,qBAAqB;AAC1C,SAAG,sBAAsB;AACzB,YAAM,SAAmB,MAAM,GAAG,aAAa,CAAC,GAAG,IAAI,WAAS;AAC5D,WAAG,OAAO,MAAM;AAChB,WAAG,iBAAiB,MAAM;AAAA,MAC9B,CAAC;AACD,SAAG,sBAAsB;AACzB,aAAO;AAAA,IACX,OACK;AACD,YAAM,YAAY,MAAM;AAAA,IAC5B;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,MAAM,cAAc,QAAQ;AArvBhC;AAsvBQ,UACI,KAAK;AAGT,QAAI,GAAG,cAAc;AACjB,eAAG,mBAAH,mBAAmB;AAEnB,SAAG,sBAAsB;AACzB,YACI,WAAc,GAAG,OACjB,EAAE,QAAQ,IAAI;AAElB,SAAG,cAAsB;AACzB,YAAM,SAAmB,MAAM,GAAG,aAAa,CAAC,GAAG,IAAI,WAAS;AAC5D,WAAG,OAAO,MAAM;AAChB,gBAAU,SACJ,OACA;AAAA,UACE,QAAU;AAAA,UACV;AAAA,UACA;AAAA,UACA,SAAU,GAAG,QAAQ;AAAA,QACzB;AACJ,WAAG,mBAAmB,KAAK;AAC3B,WAAG,QAAQ,WAAW,KAAK;AAAA,MAC/B,CAAC;AACD,SAAG,sBAAsB;AACzB,aAAO;AAAA,IACX,OACK;AACD,YAAM,cAAc,MAAM;AAAA,IAC9B;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAiBA,mBAAmB,SAAS;AACxB,UACI,SAAS,CAAC;AACd,eAAW,EAAE,UAAU,UAAU,OAAO,cAAc,KAAK,SAAS;AAChE,aAAO,KAAK;AAAA,QACR,OAAQ;AAAA,QACR;AAAA,QACA;AAAA,QACA;AAAA,MACJ,CAAC;AAAA,IACL;AACA,WAAO,KAAK,UAAU,QAAQ,SAAS,KAAK,OAAO;AAC/C,aAAO,QAAQ,KACT,QACA,KAAK,GAAG,aAAa,OAAO,aAAa,KAAK,GAAG,CAAC,IAAI;AAAA,IAChE,CAAC;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAgBA,mBAAmB,SAAS;AACxB,WAAO,KAAK,UAAU,QAAQ,OAAO,YAAU,CAAC,OAAO,MAAM,EAAE,IAAI,YAAU,MAAM,CAAC;AAAA,EACxF;AAAA,EACA,eAAe;AACX,UAAM,EAAE,QAAQ,IAAI;AACpB,QAAI,KAAK,iBAAiB,KAAK,QAAQ,OAAO;AAC1C,YAAM,MAAM,QAAQ,SAAS,GAAG,IAAI,UAAW,UAAU;AACzD,aAAO,MAAM,KAAK,QAAQ,MAAM;AAAA,IACpC;AACA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,aAAa,QAAQ,WAAW,WAAWC,SAAQ,GAAG;AAElD,aAAS,aAAa,OAAO,CAAC,GAAG,KAAK,QAAQ,MAAM;AACpD,UACI,KAAQ,MACR,MAAQ,GAAG,aAAa,GACxB,QAAQ,EAAE,QAAS,SAAS,WAAW,QAAQ,IAAI;AACvD,QAAI,CAAC,KAAK;AACN,YAAM,IAAI,MAAM,uBAAuB;AAAA,IAC3C;AACA,QAAI,GAAG,QAAQ,eAAe,WAAW,KAAK,MAAM,OAAO;AACvD,YAAM;AAAA,IACV;AACA,OAAG,WAAW,CAAC,KAAK,OAAO,QAAQ,WAAW,SAAS;AACvD,QAAIA,WAAU,OAAO;AACjB,aAAO,IAAI,QAAQ,CAAC,SAAS,WAAW,GAAG,gBAAgB,SAAS,MAAM,CAAC;AAAA,IAC/E;AACA,WAAO,GAAG,uBAAuB,GAAG,qBAAqB,IAAI,QAAQ,CAAC,SAAS,WAAW;AACtF,SAAG,WAAW;AAAA,QACV,OAAAA;AAAA,QACA,IAAoB;AAAA,QACpB,MAAoB,CAAC,SAAS,MAAM;AAAA,QACpC,mBAAoB;AAAA,MACxB,CAAC;AAAA,IACL,CAAC;AAAA,EACL;AAAA;AAAA;AAAA,EAGA,MAAM,gBAAgB,SAAS,QAAQ;AACnC,UACI,KAAK,MACL;AAAA,MACI;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACJ,IAAK,GAAG;AAEZ,OAAG,qBAAqB;AACxB,QAAI,KAAK;AACL,SAAG,aAAa;AAIhB,SAAG,QAAQ,OAAO,kBAAkB,KAAK;AACzC,SAAG,QAAQ,iBAAiB,KAAK;AAEjC,UAAI,GAAG,mBAAmB,GAAG,YAAY;AACrC,eAAO,GAAG,eAAe,IAAI,GAAG,mBAAmB,GAAG,QAAQ,MAAM;AAAA,MACxE;AAGA,UAAI,GAAG,cAAc,GAAG,UAAU;AAC9B,eAAO,GAAG,aAAa,IAAI,GAAG,mBAAmB,GAAG,WAAW,GAAG,SAAS,OAAO,GAAG,OAAO,IAAI,GAAG,OAAO;AAAA,MAC9G;AAGA,UAAI,GAAG,SAAS;AACZ,YAAI,EAAG,GAAG,iBAAiB,UAAY,GAAG,sBAAsB,SAAU;AACtE,gBACI,OAAO,KAAK,IAAI,GAAG,eAAe,GAAG,GAAG,WAAW,GAAG,WAAW,QAAQ;AAC7E,cAAI,GAAG,eAAe;AAClB,mBAAO,GAAG,aAAa,IAAI;AAAA,UAC/B,OACK;AACD,mBAAO,GAAG,kBAAkB,KAAK,OAAO,KAAK,GAAG;AAAA,UACpD;AAAA,QACJ;AACA,eAAO,GAAG,iBAAiB,IAAI,GAAG;AAAA,MACtC;AACA,YAAM,UAAU,EAAE,SAAU,GAAG,SAAS,WAAY,KAAK;AACzD,UAAI,GAAG,mBAAmB;AACtB,gBAAQ,SAAS,GAAG,YAAY;AAEhC,YAAI,MAAM,MAAM;AACZ,kBAAQ,OAAO,KAAK,UAAU,MAAM,IAAI;AAAA,QAC5C;AAAA,MACJ;AACA,UAAI;AACA,cACI,UAAc,GAAG,iBAAiB,WAAW,IAAI,MAAM,MAAM,GAAG,iBAAiB,MAAM,KAAK,MAAM,GAAG,aAAa,OAAO,SAAS,GAAG,YAAY,CAAC,GAClJ,WAAc,MAAM,SACpB,OAAc,SAAS,YACvBC,WAAc,MAAM,QAAQ,IAAI,GAChC,UAAcA,YAAY,QAAS,aAAa,QAAQ,MAAM,GAAG,uBAAuB,MAAM,OAC9F,cAAcA,WAAU,OAAO,aAAa,QAAQ,MAAM,GAAG,qBAAqB;AACtF,YAAI,GAAG,aAAa;AAChB;AAAA,QACJ;AACA,WAAG,iBAAiB;AACpB,WAAG,aAAc;AACjB,cAAM,WAAW;AACjB,cAAM,OAAW;AACjB,YAAI,SAAS;AACT,cAAI,eAAe,MAAM;AACrB,eAAG,cAAc,SAAS,aAAa,EAAE;AAAA,UAC7C;AAGA,cAAI,GAAG,SAAS;AACZ,gBAAI,GAAG,eAAe,GAAG;AACrB,oBAAM,gBAAgB,GAAG,gBAAgB,OAAO,GAAG,aAAa,IAAI,OAAO,GAAG,kBAAkB,IAAI,GAAG,WAAW;AAClH,iBAAG,cAAmB,KAAK,IAAI,eAAe,GAAG,QAAQ;AAAA,YAC7D,OACK;AACD,oBAAM,IAAI,MAAM,0EAA0E;AAAA,YAC9F;AAAA,UACJ;AACA,gBAAM,OAAOA,WAAU,OAAO,aAAa,QAAQ,MAAM,GAAG,oBAAoB;AAChF,gBAAM,UAAU,KAAK;AACrB,WAAC,GAAG,eAAe,GAAG,QAAQ,SAAS,WAAW,KAAK;AACvD,kBAAQ,KAAK;AAAA,QACjB,OACK;AACD,iBAAO,OAAO,OAAO;AAAA,YACjB,WAAgB;AAAA,YAChB,eAAgB;AAAA,YAChB,OAAgB,6BAAM;AAAA,UAC1B,CAAC;AACD,WAAC,GAAG,eAAe,GAAG,QAAQ,aAAa,KAAK;AAChD,iBAAO,KAAK;AAAA,QAChB;AAEA,SAAC,GAAG,eAAe,GAAG,QAAQ,gBAAgB,KAAK;AAAA,MACvD,SACO,iBAAP;AACI,WAAG,aAAa;AAChB,cAAM,YAAY;AAClB,YAAI,2BAA2B,UAAU;AACrC,gBAAM,gBAAgB,gBAAgB,KAAK,WAAW;AACtD,gBAAM,WAAgB;AACtB,gBAAM,QAAgB,gBAAgB;AAAA,QAC1C,OACK;AACD,gBAAM,gBAAgB;AACtB,gBAAM,QAAgB;AAAA,QAC1B;AACA,SAAC,GAAG,eAAe,GAAG,QAAQ,aAAa,KAAK;AAChD,eAAO,KAAK;AAEZ,SAAC,GAAG,eAAe,GAAG,QAAQ,gBAAgB,KAAK;AAAA,MACvD;AAAA,IACJ;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAiBA,MAAM,KAAK,QAAQ;AACf,UACI,KAAK;AACT,QAAI,GAAG,SAAS;AACZ,aAAO,GAAG,SAAS,GAAG,eAAe,GAAG,MAAM;AAAA,IAClD,OACK;AACD,aAAO,GAAG,aAAa,QAAQ,IAAI,CAAC,UAAU;AAE1C,WAAG,OAAO,MAAM;AAAA,MACpB,CAAC;AAAA,IACL;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAkBA,MAAM,aAAa,cAAc;AAG7B,WAAO,KAAK,UAAU,KAAK,aAAa,EAAE,CAAC,KAAK,iBAAiB,GAAI,aAAa,GAAG,GAAG,YAAY,WAAS;AACzG,YAAM,eAAe;AACrB,UAAI,aAAa,SAAS,QAAQ;AAC9B,qBAAa,cAAc,IAAI;AAAA,MACnC;AAEA,mBAAa,KAAK,aAAa,YAAY,aAAa,IAAI,MAAM;AAClE,mBAAa,gBAAgB,aAAa,MAAM;AAAA,IACpD,GAAG,KAAK,IAAI,KAAK;AAAA,EACrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAkBA,MAAM,SAAS,MAAM,QAAQ;AACzB,QAAI,KAAK,UAAU;AACf,aAAO,KAAK,IAAI,MAAM,KAAK,QAAQ;AAAA,IACvC;AACA,UACI,KAAY,MACZ,YAAY,GAAG,gBACT;AAAA,MACE,CAAC,GAAG,aAAa,GAAI;AAAA,IACzB,IACE;AAAA,MACE,CAAC,GAAG,kBAAkB,IAAK,OAAO,KAAK,GAAG;AAAA,IAC9C;AACR,cAAU,GAAG,iBAAiB,IAAI,GAAG;AACrC,WAAO,GAAG,aAAa,aAAa,OAAO,WAAW,MAAM,GAAG,QAAQ,CAAC,UAAU;AAG9E,SAAG,SAAS,MAAM,MAAM,UAAU;AAAA,IACtC,CAAC;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAaA,MAAM,SAAS,QAAQ;AACnB,UAAM,KAAK;AACX,WAAO,GAAG,WAAW,GAAG,gBAAgB,GAAG,WAAW,GAAG,SAAS,GAAG,cAAc,GAAG,MAAM,IAAI;AAAA,EACpG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAaA,MAAM,aAAa,QAAQ;AACvB,WAAO,KAAK,WAAW,KAAK,gBAAgB,IAAI,KAAK,SAAS,KAAK,cAAc,GAAG,MAAM,IAAI;AAAA,EAClG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA4CA,MAAM,SAAS;AACX,UACI,KAAc,MACd,EAAE,QAAQ,IAAI,IACd,cAAc,CAAC;AAEnB,QAAI,GAAG,eAAe;AAClB,aAAO;AAAA,IACX;AAEA,QAAI,CAAC,SAAS;AAGV,UAAI,GAAG,SAAS,OAAO;AACnB,WAAG,SAAS,QAAQ,YAAU,OAAO,aAAa,MAAM,KAAK,CAAC;AAC9D,WAAG,SAAS,MAAM;AAAA,MACtB;AACA,aAAO;AAAA,IACX;AACA,QAAI,GAAG,QAAQ,gBAAgB,EAAE,QAAQ,CAAC,MAAM,OAAO;AAEnD,OAAC,GAAG,QAAQ,OAAO,GAAG,QAAQ,UAAU,GAAG,QAAQ,OAAO,EAAE,QAAQ,YAAU,OAAO,KAAK,aAAa,IAAI;AAE3G,SAAG,QAAQ,eAAe,EAAE,QAAQ,CAAC;AACrC,YACI,cAAc;AAAA,QACV,QAAY;AAAA,QACZ,WAAY;AAAA,QACZ;AAAA,MACJ;AACJ,UAAI,IAAI,GAAG,cAAc,WAAW;AACpC,UAAI,GAAG;AACH,oBAAY,KAAK,CAAC;AAAA,MACtB;AACA,UAAI,GAAG,YAAY,WAAW;AAC9B,UAAI,GAAG;AACH,oBAAY,KAAK,CAAC;AAAA,MACtB;AACA,UAAI,GAAG,eAAe,WAAW;AACjC,UAAI,GAAG;AACH,oBAAY,KAAK,CAAC;AAAA,MACtB;AAEA,UAAI,CAAC,YAAY,QAAQ;AACrB,WAAG,SAAS,QAAQ,OAAK,EAAE,aAAa,MAAM,KAAK,CAAC;AACpD,WAAG,SAAS,MAAM;AAClB,WAAG,MAAM,QAAQ,OAAK,EAAE,aAAa,MAAM,KAAK,CAAC;AACjD,WAAG,MAAM,MAAM;AACf,WAAG,QAAQ,MAAM;AACjB,WAAG,QAAQ,UAAU,EAAE,QAAQ,CAAC;AAChC,eAAO;AAAA,MACX;AAOA,UAAI,YAAY,WAAW,IAAI,YAAY,CAAC,IAAI,QAAQ,IAAI,WAAW;AACvE,aAAO,GAAG,gBAAgB,IAAI,QAAQ,CAAC,SAAS,WAAW;AACvD,UAAE,KAAK,MAAM;AACT,aAAG,gBAAgB;AACnB,cAAI,YAAY,WAAW;AACvB,eAAG,QAAQ,aAAa,WAAW;AACnC,mBAAO,WAAW;AAAA,UACtB,OACK;AACD,eAAG,QAAQ,UAAU,EAAE,QAAQ,CAAC;AAChC,oBAAQ,WAAW;AAAA,UACvB;AAAA,QACJ,CAAC,EAAE,MAAM,MAAM;AACX,aAAG,gBAAgB;AACnB,iBAAO,WAAW;AAAA,QACtB,CAAC;AAAA,MACL,CAAC;AAAA,IACL;AAAA,EACJ;AAAA;AAAA,EAEA,eAAe;AACX,QAAI,KAAK,gBAAgB,GAAG;AACxB,WAAK,OAAO,EAAE,MAAM,iBAAe;AAC/B,cAAM,EAAE,SAAS,IAAI;AAGrB,YAAI,EAAE,aAAa,SAAS,MAAM,SAAS,cAAc,CAAC,KAAK,GAAG,EAAE,SAAS,SAAS,MAAM,KAAK;AAC7F,gBAAM;AAAA,QACV;AAAA,MACJ,CAAC;AAAA,IACL;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAkBA,YAAY,aAAa;AACrB,UACI,KAAQ,MACR,QAAQ,GAAG,OACX,QAAQ,EAAE,QAAS,UAAU,QAAS,GAAG,OAAO;AACpD,WAAO,MAAM,SAAS,GAAG,YAAY,IAAI,QAAQ,CAAC,YAAY;AAC1D,YAAM,QAAe,MAAM,OAAO,IAAI,OAAK,EAAE,eAAe;AAC5D,kBAAY,SAAS;AACrB,YAAM,OAAO,EAAE,MAAO,MAAM;AAC5B,SAAG,QAAQ,iBAAiB,KAAK;AACjC,UAAI,aAAa,MAAM;AACvB,UAAI,GAAG,gBAAgB;AACnB,cACI,WAAW,IAAI,SAAS;AAC5B,iBAAS,OAAO,QAAQ,KAAK,UAAU,KAAK,CAAC;AAC7C,qBAAa;AAAA,MACjB;AACA,YACI,UAAU,EAAE,SAAU,GAAG,SAAS,WAAY,KAAK,GACnD,MAAU,GAAG,YAAY,GAAG,iBAAiB,GAAG,WAAW,GAAG,MAAM;AACxE,UAAI,GAAG,mBAAmB;AACtB,gBAAQ,SAAS,GAAG,YAAY;AAAA,MACpC;AACA,iBAAW,KAAK,KAAK,YAAY,aAAa,OAAO,SAAS,GAAG,YAAY,CAAC,EAAE,KAAK,cAAY;AAC7F,cACI,OAAU,SAAS,YACnBA,WAAU,MAAM,QAAQ,IAAI,GAC5B,UAAUA,YAAY,QAAS,KAAK,YAAY;AACpD,oBAAY,WAAW;AACvB,cAAM,OAAiB;AACvB,cAAM,WAAiB;AACvB,YAAI,SAAS;AAGT,aAAG,oBAAoB,MAAM,QAAQA,WAAU,OAAO,aAAa,QAAQ,MAAM,GAAG,oBAAoB,CAAC;AAEzG,gBAAM,MAAM;AACZ,aAAG,QAAQ,aAAa;AAGxB,aAAG,QAAQ,WAAW,KAAK;AAC3B,kBAAQ,WAAW;AAAA,QACvB,OACK;AAED,gBAAM,QAAQ,OAAK,EAAE,KAAK,aAAa,KAAK;AAC5C,sBAAY,YAAY,MAAM,YAAY;AAC1C,sBAAY,gBAAgB,MAAM,gBAAgB;AAClD,aAAG,QAAQ,aAAa,KAAK;AAC7B,kBAAQ,WAAW;AAAA,QACvB;AAEA,WAAG,QAAQ,gBAAgB,KAAK;AAAA,MACpC,CAAC,EAAE,MAAM,qBAAmB;AAExB,cAAM,QAAQ,OAAK,EAAE,KAAK,aAAa,KAAK;AAC5C,oBAAY,YAAY,MAAM,YAAY;AAC1C,YAAI,2BAA2B,UAAU;AACrC,sBAAY,WAAW;AACvB,gBAAM,gBAAiB,gBAAgB,KAAK,WAAW;AACvD,gBAAM,WAAiB;AACvB,gBAAM,QAAiB,gBAAgB;AAAA,QAC3C,OACK;AACD,gBAAM,gBAAgB;AACtB,gBAAM,QAAgB;AAAA,QAC1B;AACA,WAAG,QAAQ,aAAa,KAAK;AAC7B,gBAAQ,WAAW;AAEnB,WAAG,QAAQ,gBAAgB,KAAK;AAAA,MACpC,CAAC;AAAA,IACL,CAAC,IAAI;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAkBA,eAAe,aAAa;AACxB,UACI,KAAe,MAEf,EAAE,SAAS,IAAI,GAAG,SAClB,QAAe,EAAE,QAAS,UAAU,QAAS,GAAG,OAAO,GACvD,SAAe,SAAS,UAAU,GAAG,YAAY,IAAI,QAAQ,aAAW;AAIpE,YACI,gBAAgB,SAAS,IAAI,YAAU;AACnC,YAAI,GAAG,gBAAgB;AACnB,iBAAO,OAAO;AAAA,QAClB,OACK;AACD,iBAAO,OAAO;AAAA,QAClB;AAAA,MACJ,CAAC,EAAE,OAAO,QAAM,CAAC,aAAa,QAAQ,EAAE,CAAC;AAE7C,UAAI,cAAc,WAAW,GAAG;AAC5B,WAAG,SAAS,MAAM;AAClB,iBAAS,QAAQ,OAAK,EAAE,KAAK,aAAa,KAAK;AAC/C,gBAAQ;AACR;AAAA,MACJ;AACA,kBAAY,SAAS;AACrB,YAAM,OAAO,EAAE,MAAO,cAAc;AACpC,SAAG,QAAQ,iBAAiB,KAAK;AACjC,UAAI,aAAa,MAAM;AACvB,UAAI,GAAG,gBAAgB;AACnB,cACI,WAAW,IAAI,SAAS;AAC5B,iBAAS,OAAO,QAAQ,KAAK,UAAU,aAAa,CAAC;AACrD,qBAAa;AAAA,MACjB;AACA,YACI,UAAU,EAAE,SAAU,GAAG,SAAS,WAAY,KAAK;AACvD,UAAI,GAAG,mBAAmB;AACtB,gBAAQ,SAAS,GAAG,YAAY;AAAA,MACpC;AACA,iBAAW;AAAA,QACP,GAAG,YAAY,GAAG,iBAAiB,GAAG,WAAW,GAAG,MAAM;AAAA,QAC1D;AAAA,QACA,aAAa,OAAO,SAAS,GAAG,YAAY;AAAA,MAChD,EAAE,KAAK,cAAY;AACf,cACI,OAAU,SAAS,YACnBA,WAAU,MAAM,QAAQ,IAAI,GAC5B,UAAUA,YAAY,QAAS,KAAK,YAAY;AACpD,oBAAY,WAAW;AACvB,cAAM,OAAiB;AACvB,cAAM,WAAiB;AACvB,YAAI,SAAS;AAGT,aAAG,oBAAoB,UAAUA,WAAU,OAAO,aAAa,QAAQ,MAAM,GAAG,oBAAoB,GAAG,IAAI;AAE3G,aAAG,SAAS,MAAM;AAClB,aAAG,QAAQ,gBAAgB;AAI3B,aAAG,QAAQ,WAAW,KAAK;AAC3B,kBAAQ,WAAW;AAAA,QACvB,OACK;AAED,mBAAS,QAAQ,OAAK,EAAE,KAAK,aAAa,KAAK;AAC/C,sBAAY,YAAY,MAAM,YAAY;AAC1C,gBAAM,gBAAkB;AACxB,aAAG,QAAQ,aAAa,KAAK;AAC7B,kBAAQ,WAAW;AAAA,QACvB;AAEA,WAAG,QAAQ,gBAAgB,KAAK;AAAA,MACpC,CAAC,EAAE,MAAM,qBAAmB;AAExB,iBAAS,QAAQ,OAAK,EAAE,KAAK,aAAa,KAAK;AAC/C,oBAAY,YAAY,MAAM,YAAY;AAC1C,YAAI,2BAA2B,UAAU;AACrC,sBAAY,WAAW;AACvB,gBAAM,gBAAiB,gBAAgB,KAAK,WAAW;AACvD,gBAAM,WAAiB;AACvB,gBAAM,QAAiB,gBAAgB;AAAA,QAC3C,OACK;AACD,gBAAM,gBAAgB;AACtB,gBAAM,QAAgB;AAAA,QAC1B;AACA,WAAG,QAAQ,aAAa,KAAK;AAC7B,gBAAQ,WAAW;AAEnB,WAAG,QAAQ,gBAAgB,KAAK;AAAA,MACpC,CAAC;AAAA,IACL,CAAC,IAAI;AAET,QAAI,CAAC,SAAS,UAAU,GAAG,SAAS,OAAO;AACvC,SAAG,SAAS,MAAM;AAAA,IACtB;AACA,WAAO;AAAA,EACX;AAAA,EACA,oBAAoB,cAAc,cAAc,aAAa,OAAO;AAChE,UACI,KAAe,MACfC,SAAe,GAAG,YAClB,eAAeA,OAAM,SAAS,GAAG;AACrC,iBAAa,QAAQ,CAAC,SAAS,MAAM;AACjC,YACI,SAAS,aAAa,CAAC;AAE3B,aAAO,aAAa,MAAM,KAAK;AAE/B,aAAO,OAAO,QAAQ,YAAY,CAAC;AAGnC,aAAO,OAAO,aAAa,CAAC,EAAE,MAAMA,OAAM,YAAY,SAAS,YAAY,IAAI,MAAM,CAAC;AAAA,IAC1F,CAAC;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAkBA,cAAc,aAAa;AACvB,UACI,KAAU,MACV,UAAU,GAAG,SACb,QAAU,EAAE,QAAS,UAAU,QAAS,GAAG,OAAO;AACtD,WAAO,QAAQ,SAAS,GAAG,YAAY,IAAI,QAAQ,CAAC,YAAY;AAC5D,kBAAY,SAAS;AACrB,YAAM,OAAO,EAAE,KAAM,QAAQ,IAAI,OAAK,EAAE,EAAE,EAAE;AAC5C,SAAG,QAAQ,iBAAiB,KAAK;AACjC,UAAI,aAAa,MAAM;AACvB,UAAI,GAAG,gBAAgB;AACnB,cACI,WAAW,IAAI,SAAS;AAC5B,iBAAS,OAAO,MAAM,KAAK,UAAU,WAAW,GAAG,CAAC;AACpD,qBAAa;AAAA,MACjB;AACA,YACI,UAAU,EAAE,SAAU,GAAG,SAAS,WAAY,KAAK;AACvD,UAAI,GAAG,mBAAmB;AACtB,gBAAQ,SAAS,GAAG,YAAY;AAAA,MACpC;AACA,iBAAW;AAAA,QACP,GAAG,YAAY,GAAG,iBAAiB,GAAG,WAAW,GAAG,MAAM;AAAA,QAC1D;AAAA,QACA,aAAa,OAAO,SAAS,GAAG,YAAY;AAAA,MAChD,EAAE,KAAK,cAAY;AACf,cACI,OAAU,SAAS,YACnBD,WAAU,MAAM,QAAQ,IAAI,GAC5B,UAAUA,YAAY,QAAS,KAAK,YAAY;AACpD,oBAAY,WAAW;AACvB,cAAM,OAAiB;AACvB,cAAM,WAAiB;AACvB,YAAI,SAAS;AACT,kBAAQ,QAAQ,YAAU,OAAO,KAAK,aAAa,KAAK;AACxD,kBAAQ,MAAM;AACd,aAAG,QAAQ,eAAe;AAC1B,aAAG,QAAQ,WAAW,KAAK;AAC3B,kBAAQ,WAAW;AAAA,QACvB,OACK;AAED,kBAAQ,QAAQ,OAAK,EAAE,KAAK,aAAa,KAAK;AAC9C,sBAAY,YAAY,MAAM,YAAY;AAC1C,gBAAM,gBAAgB;AACtB,aAAG,QAAQ,aAAa,KAAK;AAC7B,kBAAQ,WAAW;AAAA,QACvB;AAEA,WAAG,QAAQ,gBAAgB,KAAK;AAAA,MACpC,CAAC,EAAE,MAAM,qBAAmB;AAExB,gBAAQ,QAAQ,OAAK,EAAE,KAAK,aAAa,KAAK;AAC9C,oBAAY,YAAY,MAAM,YAAY;AAC1C,YAAI,2BAA2B,UAAU;AACrC,sBAAY,WAAW;AACvB,gBAAM,gBAAiB,gBAAgB,KAAK,WAAW;AACvD,gBAAM,WAAiB;AACvB,gBAAM,QAAiB,gBAAgB;AAAA,QAC3C,OACK;AACD,gBAAM,gBAAgB;AACtB,gBAAM,QAAgB;AAAA,QAC1B;AACA,WAAG,QAAQ,aAAa,KAAK;AAC7B,gBAAQ,WAAW;AAEnB,WAAG,QAAQ,gBAAgB,KAAK;AAAA,MACpC,CAAC;AAAA,IACL,CAAC,IAAI;AAAA,EACT;AAAA,EACA,IAAI,eAAe;AACf,WAAO,QAAQ,KAAK,mBAAmB,KAAK,aAAa;AAAA,EAC7D;AAAA,EACA,IAAI,aAAa;AACb,WAAO,QAAQ,KAAK,aAAa;AAAA,EACrC;AACJ;AAv6CI,cADiB,WACV,SAAQ;AAw6CnB,UAAU,SAAS;;;ACtiDnB,IAAqB,eAArB,MAAkC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAO9B,OAAO,IAAI,SAAS,KAAK;AACrB,UAAM,SAAU,QAAQ,aAAa,QAAQ,WAAW,CAAC;AACzD,WAAQ,OAAO,OAAQ,OAAO,GAAG,IAAK;AAAA,EAC1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,OAAO,OAAO,SAAS,KAAK;AACxB,UACI,EAAE,SAAS,IAAI,SACf,MAAM,qCAAW;AACrB,8CAAkB;AAClB,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,OAAO,IAAI,SAAS,MAAM,OAAO;AAC7B,QAAI,UAAU,WAAW,GAAG;AACxB,OAAC,QAAQ,aAAa,QAAQ,WAAW,CAAC,IAAI,IAAI,IAAI;AAAA,IAC1D,OACK;AACD,cAAQ,WAAW;AAAA,IACvB;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,OAAO,OAAO,SAAS,MAAM;AACzB,WAAO,OAAQ,QAAQ,aAAa,QAAQ,WAAW,CAAC,IAAK,IAAI;AAAA,EACrE;AACJ;AACA,aAAa,SAAS;;;AC/CtB,IAAqB,mBAArB,MAAqC;AAAA,EAEjC,YAAY,EAAE,OAAO,KAAK,GAAG;AAVjC;AAWQ,WAAO,OAAO,MAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAMhB,KAAK,WAAM,OAAN,YAAY,MAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAMvB,OAAO,kCAAM,WAAN,YAAgB,MAAM,YAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAMzC,OAAO,WAAM,SAAN,YAAc,MAAM;AAAA,IAC/B,CAAC;AACD,QAAI,eAAe,kBAAiB;AAChC,aAAO,OAAO,IAAI;AAAA,IACtB;AAAA,EACJ;AACJ;AA3BA,IAAqB,kBAArB;AACI,cADiB,iBACV,SAAQ;AA2BnB,gBAAgB,SAAS;;;ACvBzB,IAAqB,eAArB,cAA0C,MAAM;AAAA,EAC5C,WAAW,SAAS;AAChB,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAMH;AAAA,QACI,MAAW;AAAA,QACX,UAAW;AAAA,MACf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAMA;AAAA,QACI,MAAW;AAAA,QACX,UAAW;AAAA,MACf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAOA;AAAA,QACI,MAAW;AAAA,QACX,UAAW;AAAA,MACf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAMA;AAAA,QACI,MAAW;AAAA,QACX,UAAW;AAAA,MACf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAMA;AAAA,QACI,MAAW;AAAA,QACX,UAAW;AAAA,MACf;AAAA,IACJ;AAAA,EACJ;AACJ;AACA,aAAa,iBAAiB;AAC9B,aAAa,SAAS;;;AC3DtB,IAAO,wCAAQ,YAAU,MAAM,sCAAsC,OAAO;AAAA,EACxE,WAAW,QAAQ;AACf,WAAO;AAAA,EACX;AAAA,EACA,WAAW,eAAe;AACtB,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAYH,kBAAmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAQnB,qBAAsB;AAAA,MACtB,iCAAkC;AAAA,MAClC,iCAAkC;AAAA,MAClC,8BAA+B;AAAA,MAC/B,uBAAwB;AAAA,IAC5B;AAAA,EACJ;AAAA,EACA,IAAI,oCAAoC;AACpC,WAAO,CAAC;AAAA,EACZ;AAAA,EACA,6BAA6B,WAAW,WAAW,kBAAkB;AACjE,UACI,WAAkB,CAAC,GACnB,EAAE,QAAQ,IAAQ,WAClB,kBAAkB,KAAK,mCACvB,SAAkB,EAAE,CAAC,OAAO,GAAI,CAAC,EAAE;AAEvC,QAAI,WAAW;AACX,UAAI,CAAC,UAAU,MAAM;AACjB,iBAAS,KAAK,MAAM,0FAA0F;AAC9G,eAAO,OAAO,EAAE,OAAO,CAAC,KAAK;AAAA,MACjC;AAAA,IACJ,WAES,mDAAiB,SAAS,UAAU;AACzC,eAAS,KAAK,SAAS,iEAAiE;AACxF,aAAO,OAAO,EAAE,OAAO,CAAC,KAAK;AAAA,IACjC;AAEA,QAAI,SAAS,QAAQ;AACjB,aAAO,OAAO,kBAAkB,MAAM;AAAA,IAC1C;AACA,WAAO;AAAA,EACX;AAAA,EACA,wBAAwB,UAAU;AAC9B,UACI,WAAmB,CAAC,GACpB,mBAAmB,CAAC;AACxB,QAAI,CAAC,KAAK,qBAAqB;AAC3B,uBAAiB,UAAU;AAAA,IAC/B;AAEA,SAAK,iBAAiB,CAAC,OAAO,SAAS,cAAc;AACjD,eAAS,KAAK,GAAG,KAAK,6BAA6B,WAAW,qCAAW,UAAU,gBAAgB,CAAC;AAAA,IACxG,CAAC;AACD,QAAI,SAAS,QAAQ;AACjB,eAAS,KAAK,qDACV,KAAK,UAAU,kBAAkB,MAAM,CAAC,EAAE,QAAQ,aAAa,KAAK,CAAC;AACzE,eAAS,KAAK,KAAK,qBAAqB;AAAA,IAC5C;AACA,WAAO;AAAA,EACX;AAAA,EACA,qBAAqB,UAAU;AAC3B,UAAM,WAAW,KAAK,wBAAwB,QAAQ;AACtD,QAAI,SAAS,QAAQ;AACjB,cAAQ,KAAK,KAAK,kCAAkC,OAAO,SAAS,KAAK,IAAI,CAAC;AAAA,IAClF;AAAA,EACJ;AAAA,EACA,6BAA6B,WAAW,WAAW,WAAW,kBAAkB;AAC5E,UACI,WAAmB,CAAC,GACpB,cAAmB,CAAC,GACpB,iBAAmB,CAAC,GACpB,EAAE,QAAQ,IAAS,WACnB,SAAmB,EAAE,CAAC,OAAO,GAAI,CAAC,EAAE,GACpC,iBAAmB,UAAU,kBAAkB,KAAK,gBACpD,EAAE,WAAW,IAAM,UAAU,OAC7B,EAAE,QAAQ,IAAS,YACnB,iBAAmB,uCAAW,SAAQ,CAAC,GACvC,oBAAmB,uCAAW,YAAW,CAAC;AAC9C,QAAI,mCAAmC;AAEvC,QAAI,uCAAW,OAAO;AAClB,kBAAY;AAAA,QACR,GAAG,UAAU,MAAM,OAAO,YAAU;AAChC,iBAAO,CAAC,cAAc,KAAK,SAAO,IAAI,cAAc,KAAK,OAAO,cAAc,CAAC,KAC3E,CAAC,iBAAiB,KAAK,SAAO,IAAI,cAAc,KAAK,OAAO,cAAc,KAAK,IAAI,OAAO,KAAK,OAAO,cAAc,CAAC;AAAA,QAC7H,CAAC,EAAE,IAAI,aAAW,EAAE,CAAC,cAAc,GAAI,OAAO,cAAc,GAAG,CAAC,OAAO,GAAI,MAAM,EAAE;AAAA,MACvF;AACA,UAAI,YAAY,QAAQ;AACpB,cAAM,aAAa,YAAY,IAAI,SAAO,MAAM,IAAI,cAAc,CAAC,EAAE,KAAK,IAAI;AAC9E,iBAAS,KAAK,MAAM,gEAAgE,yIACyB;AAAA,MACjH;AAAA,IACJ;AAEA,QAAI,KAAK,0BAA0B;AAE/B,UAAI,CAAC,YAAY,UAAU,WAAW;AAClC,YAAI,OAAO,cAAc,YAAY,MAAM,QAAQ,SAAS,GAAG;AAC3D,mBAAS,KAAK,MAAM,6CAA6C;AACjE,iBAAO,OAAO,EAAE,KAAK,IAAI;AAAA,QAC7B;AAEA,YAAI,UAAU,QAAQ,CAAC,MAAM,QAAQ,UAAU,IAAI,GAAG;AAClD,mBAAS,KAAK,MAAM,kDAAkD;AACtE,sBAAY,KAAK,KAAK;AAAA,QAC1B;AAEA,YAAI,UAAU,WAAW,CAAC,MAAM,QAAQ,UAAU,OAAO,GAAG;AACxD,mBAAS,KAAK,MAAM,sDAAsD;AAC1E,yBAAe,KAAK,KAAK;AAAA,QAC7B;AAAA,MACJ;AAAA,IACJ,OAEK;AAED,UAAI,uCAAW,SAAS;AACpB,cAAM,qBAAqB,UAAU,QAAQ,OAAO,YAAU,CAAC,cAAc,KAAK,SAAO,IAAI,OAAO,KAAK,OAAO,OAAO,CAAC,CAAC,EACpH,IAAI,aAAW,EAAE,CAAC,OAAO,GAAI,OAAO,OAAO,EAAE,EAAE;AACpD,oBAAY,KAAK,GAAG,kBAAkB;AACtC,YAAI,mBAAmB,QAAQ;AAC3B,gBAAM,aAAa,mBAAmB,IAAI,SAAO,MAAM,IAAI,OAAO,CAAC,EAAE,KAAK,IAAI;AAC9E,mBAAS,KAAK,MAAM,kEAAkE,mFAC/B;AACvD,6CAAmC;AAAA,QACvC;AAAA,MACJ;AACA,UAAI,YAAY,QAAQ;AACpB,oBAAY,KAAK,KAAK;AAAA,MAC1B;AAEA,UAAI,uCAAW,SAAS;AACpB,uBAAe;AAAA,UACX,GAAG,UAAU,QAAQ,OAAO,YAAU,CAAC,cAAc,KAAK,SAAO,IAAI,OAAO,KAAK,OAAO,OAAO,CAAC,CAAC,EAC5F,IAAI,aAAW,EAAE,CAAC,OAAO,GAAI,OAAO,OAAO,EAAE,EAAE;AAAA,QACxD;AACA,YAAI,eAAe,QAAQ;AACvB,gBAAM,aAAa,eAAe,IAAI,SAAO,MAAM,IAAI,OAAO,CAAC,EAAE,KAAK,IAAI;AAC1E,mBAAS,KAAK,MAAM,qEAAqE,mFAClC;AACvD,iBAAO,OAAO,EAAE,UAAU;AAC1B,yBAAe,KAAK,KAAK;AACzB,6CAAmC;AAAA,QACvC;AAAA,MACJ;AAAA,IACJ;AACA,QAAI,YAAY,QAAQ;AACpB,aAAO,OAAO,EAAE,OAAO;AAAA,IAC3B;AAEA,QAAI,CAAC,SAAS,QAAQ;AAClB,aAAO,OAAO,OAAO;AAAA,IACzB;AAEA,WAAO,OAAO,kBAAkB,MAAM;AACtC,WAAO,EAAE,UAAU,iCAAiC;AAAA,EACxD;AAAA,EACA,wBAAwB,UAAU,aAAa;AAC3C,UACI,WAAmB,CAAC,GACpB,mBAAmB,CAAC,GACpB,UAAmB,YAAY;AACnC,QAAI,CAAC,KAAK,qBAAqB;AAC3B,uBAAiB,UAAU;AAAA,IAC/B;AACA,QAAI,mCAAmC;AAEvC,SAAK,iBAAiB,CAAC,OAAO,SAAS,cAAc;AACjD,YAAM,WAAW,KAAK,6BAA6B,WAAW,mCAAU,UAAU,SAAS,OAAO,GAAG,gBAAgB;AACrH,yCAAmC,oCAAoC,SAAS;AAChF,eAAS,KAAK,GAAG,SAAS,QAAQ;AAAA,IACtC,CAAC;AACD,QAAI,SAAS,QAAQ;AACjB,eAAS,KAAK,qDACV,KAAK,UAAU,kBAAkB,MAAM,CAAC,EAAE,QAAQ,yBAAyB,KAAK,EAAE,QAAQ,aAAa,KAAK,CAAC;AACjH,UAAI,kCAAkC;AAClC,iBAAS,KAAK,KAAK,4BAA4B;AAAA,MACnD;AACA,eAAS,KAAK,KAAK,qBAAqB;AAAA,IAC5C;AACA,WAAO;AAAA,EACX;AAAA,EACA,qBAAqB,UAAU,SAAS;AACpC,UAAM,WAAW,KAAK,wBAAwB,UAAU,OAAO;AAC/D,QAAI,SAAS,QAAQ;AACjB,cAAQ,KAAK,KAAK,kCAAkC,OAAO,SAAS,KAAK,IAAI,CAAC;AAAA,IAClF;AAAA,EACJ;AACJ;;;ACxMO,IAAM,2BAAN,cAAuC,MAAM;AAAC;AAC9C,IAAM,0BAAN,cAAsC,yBAAyB;AAAA,EAClE,YAAY,MAAM,CAAC,GAAG;AAd1B;AAeQ,UAAM,IAAI,WAAW,IAAI,WAAW,aAAa,YAAW,SAAI,YAAJ,mBAAa,IAAI,IAAI,aAAa,6BAA6B;AAC3H,WAAO,OAAO,MAAM,GAAG;AACvB,SAAK,UAAS,UAAK,YAAL,mBAAc;AAAA,EAChC;AACJ;AACA,IACI,cAAkB,SAAS,KAAK,KAAK,cAAc;AAC/C,MAAI,IAAI,OAAO;AACX,UAAM,IAAI;AAAA,EACd;AACA,MAAI,IAAI,OAAO;AACX,UAAM,IAAI;AAAA,EACd;AACA,QAAM,IAAI,YAAY,KAAK;AAC3B,QAAM,IAAI,YAAY,KAAK;AAC3B,SAAQ,MAAM,MAAO,KAAO,MAAM,MAAO,IAAI;AACjD;AAXJ,IAaI,kBAAkB,SAAS,KAAK,KAAK;AACjC,SAAO,YAAY,KAAK,KAAK,cAAc;AAC/C;AAfJ,IAiBI,kBAAkB,SAAS,KAAK,KAAK;AACjC,SAAO,YAAY,KAAK,KAAK,cAAc;AAC/C;AAgCJ,IAAO,mCAAQ,YAAU;AAvEzB;AA0EI,SAAO,SAAS,OAAO;AACvB,QAAM,SAAS,CAAC;AAGhB,MAAI,CAAC,OAAO,UAAU;AAClB,WAAO,KAAK,cAAM;AAAA,EACtB;AACA,MAAI,CAAC,OAAO,aAAa;AACrB,WAAO,KAAK,iBAAS;AAAA,EACzB;AACA,SAAO,KAAK,qCAA6B;AACzC,SAAO,oBAAwC,UAAUE,OAAM,MAAM,GAAG,MAAM,EAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAwB5E,WAAW,QAAQ;AACf,aAAO;AAAA,IACX;AAAA;AAAA,IAEA,WAAW,gBAAgB;AACvB,aAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAUH,cAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAkBf,YAAa,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QA+Dd,iBAAkB;AAAA,QAClB,iBAAkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAmClB,WAAY,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAUb,mBAAoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAWpB,0BAA2B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAO3B,gBAAiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAOjB,sBAAuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAWvB,UAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAQX,iBAAkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QASlB,UAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAQX,oBAAqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAuBrB,mBAAoB,CAAC;AAAA,QACrB,mBAAoB,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAWrB,gBAAiB;AAAA,QACjB,mBAAoB;AAAA,QACpB,wBAAyB;AAAA;AAAA,QAEzB,YAAa;AAAA,QACb,sBAAuB;AAAA,QACvB,sBAAuB;AAAA,QACvB,iBAAkB;AAAA,MACtB;AAAA,IACJ;AAAA,IAoEA,IAAI,gBAAgB;AAChB,aAAO;AAAA,IACX;AAAA;AAAA;AAAA,IAGA,UAAU,SAAS,CAAC,GAAG;AACnB,WAAK,aAAa;AAClB,WAAK,iBAAiB,CAAC;AACvB,WAAK,kBAAkB,CAAC;AACxB,YAAM,UAAU,MAAM;AAAA,IAC1B;AAAA,IACA,iBAAiB;AACb,YAAM,eAAe;AACrB,UAAI,KAAK,UAAU;AACf,aAAK,mBAAmB,KAAK,WAAW;AAAA,MAC5C;AAAA,IACJ;AAAA;AAAA;AAAA,IAGA,IAAI,UAAU;AA3btB,UAAAC,KAAA;AA4bY,cAAO,MAAAA,MAAA,KAAK,cAAL,gBAAAA,IAAgB,SAAhB,mBAAsB;AAAA,IACjC;AAAA,IACA,cAAc,KAAK;AACf,mBAAa,QAAQ,MAAM,sBAAsB,GAAG;AAAA,IACxD;AAAA,IACA,IAAI,UAAU;AAjctB,UAAAA,KAAA;AAkcY,cAAO,MAAAA,MAAA,KAAK,cAAL,gBAAAA,IAAgB,SAAhB,mBAAsB;AAAA,IACjC;AAAA,IACA,cAAc,KAAK;AACf,mBAAa,QAAQ,MAAM,sBAAsB,GAAG;AAAA,IACxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IASA,mBAAmB,SAAS;AACxB,UAAI,CAAC;AAAS,eAAO;AACrB,UAAI,mBAAmB;AAAO,eAAO,KAAK,WAAW,KAAK,eAAa,UAAU,UAAU,OAAO;AAClG,UAAI,OAAO,YAAY;AAAU,eAAO,KAAK,gBAAgB,QAAQ,OAAO;AAC5E,aAAO,KAAK,gBAAgB,OAAO,KAAK,KAAK,mBAAmB,MAAM,SAAS,OAAO,CAAC;AAAA,IAC3F;AAAA,IACA,oBAAoB,YAAY;AAC5B,YACI,EAAE,MAAM,IAAI,YACZ;AAAA,QACI,kBAAkB,KAAK;AAAA,QACvB;AAAA,MACJ,IAAY;AAChB,UAAI,CAAC,WAAW,SAAS;AACrB,mBAAW,UAAU,MAAM,eAAe,KAAK,MAAM;AAAA,MACzD;AACA,UAAI,CAAC,WAAW,SAAS;AACrB,mBAAW,UAAU,WAAW;AAAA,MACpC;AACA,UAAI,CAAC,WAAW,gBAAgB;AAC5B,mBAAW,iBAAiB,WAAW;AAAA,MAC3C;AACA,UAAI,CAAC,WAAW,sBAAsB;AAClC,mBAAW,uBAAuB,WAAW;AAAA,MACjD;AACA,UAAI,EAAE,oBAAoB,aAAa;AACnC,mBAAW,iBAAiB,MAAM;AAAA,MACtC;AACA,aAAO;AAAA,IACX;AAAA,IACA,uBAAuB;AACnB,YACI,kBAAkB,KAAK,kBAAkB,CAAC;AAC9C,WAAK,WAAW,QAAQ,WAAS,MAAM,YAAY,gBAAgB,MAAM,OAAO,IAAI,MAAM;AAAA,IAC9F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IASA,aAAa,SAAS;AAClB,YAAM,kBAAkB,KAAK,mBAAmB,OAAO;AACvD,aAAO,mDAAiB;AAAA,IAC5B;AAAA,IACA,iBAAiBC,KAAI,UAAU,MAAM;AACjC,UAAI,CAACA,KAAI;AACL,cAAM,IAAI,MAAM,oCAAoC;AAAA,MACxD;AACA,WAAK,WAAW;AAAA,QAAM,WAClBA,IAAG,KAAK,SAAS,MAAM,OAAO,MAAM,SAAS,KAAK,MAAM;AAAA,MAC5D;AAAA,IACJ;AAAA,IACA,IAAI,WAAW,QAAQ;AACnB,WAAK,cAAc,CAAC;AACpB,WAAK,aAAa,MAAM;AAIxB,iBAAW,SAAS,KAAK,aAAa;AAClC,cAAM,eAAe,MAAM,eAAe;AAAA,MAC9C;AAAA,IACJ;AAAA,IACA,IAAI,aAAa;AACb,aAAO,KAAK;AAAA,IAChB;AAAA,IACA,IAAI,oBAAoB;AACpB,aAAO,KAAK;AAAA,IAChB;AAAA,IACA,IAAI,kBAAkB,QAAQ;AAC1B,aAAO,KAAK,qBAAqB;AAAA,IACrC;AAAA,IACA,IAAI,kBAAkB,QAAQ;AAC1B,WAAK,qBAAqB,CAAC;AAC3B,WAAK,wBAAwB,MAAM;AAAA,IACvC;AAAA,IACA,IAAI,oBAAoB;AACpB,aAAO,KAAK;AAAA,IAChB;AAAA,IACA,qBAAqB,OAAO;AACxB,YACI,KAAK;AACT,UAAI;AAEJ,UAAI,iBAAiB,OAAO;AACxB,oBAAY,EAAE,MAAM;AAAA,MACxB,WACS,OAAO,UAAU,UAAU;AAChC,YAAI,CAAC,MAAM,OAAO;AAEd,kBAAQ;AAAA,YACJ,SAAU,MAAM;AAAA,YAChB,OAAU,IAAI,MAAM,KAAK;AAAA,UAC7B;AAAA,QACJ;AACA,oBAAY;AAAA,MAChB,OAEK;AACD,oBAAY,EAAE,OAAQ,MAAM,SAAS,KAAK,EAAE;AAAA,MAChD;AACA,SAAG,oBAAoB,SAAS;AAEhC,cAAQ,UAAU;AAElB,UAAI,MAAM,gBAAgB;AACtB,cAAM,eAAe,EAAE;AAAA,MAC3B,OAEK;AACD,cAAM,cAAc;AAAA,MACxB;AAEA,YAAM,WAAW;AAEjB,UAAI,GAAG,WAAW,GAAG,SAAS;AAC1B,cAAM,aAAa;AACnB,cAAM,WAAW;AACjB,YAAI,MAAM,aAAa,MAAM,aAAa,MAAM,aAAa,MAAM,SAAS;AACxE,kBAAQ,KAAK,gJAAiJ;AAAA,QAClK;AAAA,MACJ;AAEA,SAAG,uBAAuB,KAAK;AAC/B,aAAO;AAAA,IACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAsDA,aAAa,OAAO,UAAU,WAAW;AACrC,cAAQ,YAAY,QAAQ,KAAK;AACjC,UAAI,EAAC,+BAAO,SAAQ;AAChB;AAAA,MACJ;AACA,YACI,KAAS,MACT,SAAS,MAAM,IAAI,GAAG,sBAAsB,EAAE;AAElD,UAAI,OAAO,aAAa,aAAa;AACjC,WAAG,WAAW,KAAK,GAAG,MAAM;AAAA,MAChC,OAEK;AAED,YAAI,WAAW;AACX,cAAI,qBAAqB,SAAS,OAAO,cAAc;AAAU,wBAAY,GAAG,mBAAmB,SAAS;AAE5G,sBAAY,GAAG,WAAW,QAAQ,SAAS;AAAA,QAC/C;AAEA,WAAG,WAAW,OAAO,UAAU,GAAG,GAAG,MAAM;AAAA,MAC/C;AACA,SAAG,kBAAkB,KAAK,GAAG,MAAM;AACnC,SAAG,qBAAqB;AAAA,IAC5B;AAAA;AAAA;AAAA,IAGA,oBAAoB,OAAO;AACvB,YAAM,KAAK;AACX,UAAI,CAAC,GAAG,aAAa,KAAK,GAAG;AACzB,WAAG,aAAa,OAAO,YAAY,mBAAmB,OAAO,GAAG,YAAY,eAAe,CAAC;AAAA,MAChG;AACA,UAAI,CAAC,GAAG,sBAAsB,KAAK,GAAG;AAClC,WAAG,wBAAwB,OAAO,YAAY,mBAAmB,OAAO,GAAG,mBAAmB,eAAe,CAAC;AAAA,MAClH;AAAA,IACJ;AAAA,IACA,aAAa,OAAO;AAzqB5B,UAAAD;AA0qBY,cAAOA,MAAA,KAAK,eAAL,gBAAAA,IAAiB,KAAK,OAAK,MAAM,SAAS,EAAE,UAAU,SAAS,EAAE,YAAY;AAAA,IACxF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAiBA,gBAAgB,OAAO;AACnB,YACI,KAAa,MACb,SAAa,GAAG,YAChB,aAAa,OAAO,KAAK,OAAK,MAAM,SAAS,EAAE,UAAU,SAAS,EAAE,YAAY,KAAK;AACzF,UAAI,YAAY;AAEZ,WAAG,yBAAyB,WAAW,KAAK;AAC5C,eAAO,GAAG,gBAAgB,WAAW,OAAO;AAC5C,oBAAY,OAAO,QAAQ,UAAU;AACrC,YAAI,GAAG,mBAAmB;AACtB,aAAG,6BAA6B,KAAK;AAAA,QACzC;AAAA,MACJ,OACK;AACD,cAAM,IAAI,MAAM,sCAAsC;AAAA,MAC1D;AAAA,IACJ;AAAA;AAAA;AAAA,IAGA,uBAAuB,OAAO;AAC1B,YAAM,IAAI;AAAA,QACN,MAAO,MAAM;AAAA;AAAA,QAEb,cAAe;AAAA,QACf,QAAe;AAAA,QACf,SAAe;AAAA,QACf,SAAe;AAAA,MACnB,CAAC;AAAA,IACL;AAAA,IACA,yBAAyB,OAAO;AAC5B,WAAK,gBAAgB,MAAM,EAAE;AAAA,IACjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAiDA,wBAAwB,OAAO,UAAU,WAAW;AAChD,UAAI,CAAC,OAAO;AACR;AAAA,MACJ;AACA,cAAQ,YAAY,QAAQ,KAAK;AACjC,YACI,KAAO,MAEP,OAAO,MAAM,OAAO,CAAC,YAAYE,WAAU;AACvC,cAAM,IAAI,GAAG,mBAAmBA,MAAK;AACrC,aAAK,WAAW,KAAK,CAAC;AACtB,eAAO;AAAA,MACX,GAAG,CAAC,CAAC;AAET,UAAI,OAAO,aAAa,aAAa;AACjC,WAAG,kBAAkB,KAAK,GAAG,IAAI;AAAA,MAErC,OACK;AACD,YAAI,MAAM;AAEV,YAAI,WAAW;AACX,cAAI,qBAAqB,SAAS,OAAO,cAAc;AAAU,wBAAY,GAAG,mBAAmB,SAAS;AAE5G,iBAAO,GAAG,kBAAkB,QAAQ,SAAS;AAAA,QACjD;AAGA,WAAG,kBAAkB,OAAO,KAAK,GAAG,GAAG,IAAI;AAAA,MAC/C;AACA,YAAM,eAAe,GAAG,kBAAkB,IAAI,CAAC,EAAE,QAAQ,MAAM,OAAO;AACtE,SAAG,oBAAoB,CAAC,GAAG,GAAG,iBAAiB;AAC/C,SAAG,WAAW,QAAQ,eAAa;AAC/B,YAAI,CAAC,aAAa,SAAS,UAAU,OAAO,GAAG;AAC3C,aAAG,kBAAkB,KAAK,SAAS;AAAA,QACvC;AAAA,MACJ,CAAC;AAAA,IACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAaA,6BAA6B,OAAO;AAChC,YAAM,QAAQ,KAAK,kBAAkB,UAAU,OAAK,MAAM,SAAS,EAAE,UAAU,SAAS,EAAE,YAAY,KAAK;AAC3G,UAAI,QAAQ,IAAI;AACZ,aAAK,kBAAkB,OAAO,OAAO,CAAC;AAEtC,aAAK,kBAAkB,OAAO,OAAO,CAAC;AAAA,MAC1C;AAAA,IACJ;AAAA,IACA,sBAAsB,OAAO;AACzB,aAAO,KAAK,kBAAkB,KAAK,OAAK,MAAM,SAAS,EAAE,UAAU,SAAS,EAAE,YAAY,KAAK;AAAA,IACnG;AAAA;AAAA;AAAA;AAAA,IAIA,mBAAmB,EAAE,QAAS,MAAM,GAAG;AACnC,WAAK,gBAAgB,KAAK;AAAA,IAC9B;AAAA,IACA,kBAAkB,OAAO;AACrB,YAAM,KAAK;AACX,UAAI,GAAG,mBAAmB;AACtB;AAAA,MACJ;AAYA,UAAI,GAAG,oBAAoB,+BAAO,MAAM,GAAG;AACvC,WAAG,QAAQ,YAAY;AACvB,YAAI,GAAG,UAAU;AACb,aAAG,iBAAiB;AAAA,QACxB;AAAA,MACJ,OACK;AACD,WAAG,QAAQ,WAAW;AAAA,MAC1B;AAAA,IACJ;AAAA;AAAA;AAAA;AAAA;AAAA,IAKA,kBAAkB;AACd,WAAK;AAAA,IACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAOA,eAAe,SAAS,MAAM;AAC1B,YAAM,KAAK;AACX,SAAG;AACH,UAAI,GAAG,0BAA0B,GAAG;AAChC,WAAG,yBAAyB;AAE5B,YAAI,UAAU,GAAG,YAAY,GAAG,oBAAoB,GAAG;AACnD,aAAG,iBAAiB;AAAA,QACxB;AAAA,MACJ;AAAA,IACJ;AAAA,IACA,IAAI,sBAAsB;AACtB,aAAO,KAAK,yBAAyB;AAAA,IACzC;AAAA,IACA,mBAAmB;AACf,YAAM,KAAK;AAEX,UAAI,CAAC,GAAG,WAAW,UAAU,KAAK,CAAC,GAAG,qBAAqB;AACvD,WAAG,WAAW;AAAA,UACV,MAAO;AAAA,UACP,IAAO,MAAM;AACT,eAAG,KAAK,EAAE,MAAM,WAAS;AAAA,YACzB,CAAC;AAAA,UACL;AAAA,UACA,OAAQ,GAAG;AAAA,QACf,CAAC;AAAA,MACL;AAAA,IACJ;AAAA,IACA,MAAM,2BAA2B,SAAS,UAAU,cAAc,cAAc;AAC5E,YAAM,EAAE,SAAS,MAAO,YAAY,IAAI;AAUxC,WAAK,QAAQ,eAAe,EAAE,aAAa,UAAU,cAAc,iBAAkB,aAAa,CAAC;AAkBnG,WAAK,QAAQ,cAAc,QAAQ,EAAE,UAAU,iBAAkB,cAAc,cAAc,QAAQ,CAAC;AAAA,IAC1G;AAAA,IACA,MAAM,mBAAmB,SAAS,cAAc,cAAc;AAC1D,YACI,KAAkC,MAClC,WAAkC,eAAe,GAAG,OAAO,YAAY,IAAI,MAC3E,EAAE,SAAS,MAAO,YAAY,IAAI;AACtC,UAAI,gBAAgB,CAAC,UAAU;AAC3B,gBAAQ,MAAM,+BAA+B,YAAY;AAAA,MAC7D;AACA,UAAI,CAAC,aAAa,GAAG,sBAAsB,SAAS,YAAY,QAAQ,CAAC,SAAS,UAAU;AACxF,WAAG,2BAA2B,SAAS,UAAU,cAAc,YAAY;AAAA,MAC/E,WAEI,GAAG,QAAQ,uBAAuB,EAAE,aAAa,SAAS,CAAC,MAAM,SACjE,GAAG,QAAQ,SAAS,aAAa,WAAW,WAAW,UAAU,EAAE,UAAU,QAAQ,CAAC,MAAM,OAC9F;AACE,WAAG,eAAe,SAAS;AAC3B,cAAM,GAAG,cAAc,SAAS,UAAU,OAAO;AAEjD,YAAI,GAAG,aAAa;AAChB;AAAA,QACJ;AASA,WAAG,QAAQ,eAAe,EAAE,aAAa,UAAU,iBAAkB,aAAa,CAAC;AAgBnF,WAAG,QAAQ,aAAa,EAAE,UAAU,iBAAkB,cAAc,QAAQ,CAAC;AAC7E,YAAI,gBAAgB,UAAU,CAAC,GAAG,oBAAoB,GAAG;AAgBrD,aAAG,QAAQ,WAAW;AACtB,cAAI,gBAAgB,QAAQ;AACxB,eAAG,oBAAoB,QAAQ,KAAK,QAAQ,cAAc;AAAA,UAC9D;AAAA,QACJ;AAAA,MACJ;AACA,aAAO;AAAA,IACX;AAAA;AAAA;AAAA,IAGA,yBAAyB;AACrB,WAAK;AAAA,IACT;AAAA,IACA,sBAAsB,iBAAiB;AACnC,UAAI,KAAK,qBAAqB,CAAC,EAAE,KAAK,qBAAqB,CAAC,iBAAiB;AACzE,aAAK,kBAAkB;AAAA,MAC3B;AAAA,IACJ;AAAA,IACA,IAAI,oBAAoB;AACpB,aAAO,KAAK,oBAAoB;AAAA,IACpC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAoBA,oBAAoB,SAAS;AACzB,aAAO,UACD,KAAK,iBAAiB,KAAK,aAAa,OAAO,CAAC,IAChD,KAAK,WAAW,KAAK,YAAU,KAAK,iBAAiB,OAAO,KAAK,CAAC;AAAA,IAC5E;AAAA,IACA,iBAAiB,OAAO;AACpB,aAAO,QAAQ,MAAM,OAAO;AAAA,IAChC;AAAA;AAAA;AAAA,IAGA,aAAa;AACT,aAAO,KAAK,KAAK,EAAE,MAAM,WAAS;AAAA,MAClC,CAAC;AAAA,IACL;AAAA,IACA,oBAAoB,QAAQ,WAAW,aAAa;AAChD,YAAM,QAAQ,EAAE,QAAS,SAAS,WAAW,GAAG,YAAY;AAC5D,iBAAW,SAAS,KAAK,YAAY;AACjC,YAAI,OAAO,SAAS,MAAM,OAAO,GAAG;AAChC,gBAAM,MAAM,QAAQ,WAAW,KAAK;AAAA,QACxC;AAAA,MACJ;AAAA,IACJ;AAAA,IACA,eAAe,SAAS;AACpB,YACI,OAAc;AAAA,QACV,MAAY;AAAA,QACZ,WAAY,KAAK;AAAA,MACrB,GACA,SAAc,KAAK,YACnB,cAAc,OAAO,OAAO,CAAC,GAAG,OAAO;AAG3C,aAAO,YAAY;AACnB,WAAK,SAAS,OAAO,IAAI,WAAS;AAzjC9C,YAAAF;AA0jCgB,cACI,OAAW,2CAAc,MAAM,UAC/B,WAAW,MAAM,cAAYA,MAAA,MAAM,UAAN,gBAAAA,IAAa;AAC9C,YAAI,QAAQ,UAAU;AAClB,gBACI,SAAS,OAAO,OAAO;AAAA,YACnB,SAAU,MAAM;AAAA,YAChB,MAAU;AAAA,UACd,GAAG,IAAI;AACX,cAAI,UAAU;AACV,mBAAO,WAAW;AAAA,UACtB;AACA,gBAAM,cAAc,OAAO;AAE3B,cAAI,MAAM;AACN,mBAAO,YAAY,MAAM,OAAO;AAAA,UACpC;AACA,iBAAO;AAAA,QACX;AACA,eAAO,MAAM;AAAA,MACjB,CAAC;AAED,aAAO,OAAO,MAAM,WAAW;AAC/B,aAAO;AAAA,IACX;AAAA,IACA,cAAc,OAAO,MAAM,SAAS;AAChC,YAAM,OAAO,6BAAM;AACnB,WAAI,mCAAS,YAAU,6BAAM,SAAQ;AACjC,cAAM,IAAI,IAAI;AAAA,MAClB,OACK;AACD,cAAM,OAAO;AAAA,MACjB;AACA,YAAM,QAAQ,QAAQ,EAAE,MAAO,KAAK,CAAC;AAAA,IACzC;AAAA,IACA,oBAAoB,WAAW,MAAM,SAAS;AAC1C,YACI,QAAQ,UAAU,OAClB,OAAQ,6BAAM;AAClB,YAAM,YAAY;AAClB,UAAI,MAAM;AACN,aAAK,cAAc,OAAO,MAAM,SAAS,SAAS;AAAA,MACtD;AACA,YAAM,YAAY;AAAA,IACtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAqBA,oBAAoB,UAAU,UAAU,CAAC,GAAG;AAExC,WAAK,uBAAuB;AAE5B,WAAK,WAAW,QAAQ,eAAa;AACjC,cACI,UAAU,UAAU,SACpB,OAAU,SAAS,OAAO;AAC9B,YAAI,MAAM;AACN,eAAK,oBAAoB,WAAW,MAAM,QAAQ,OAAO,CAAC;AAAA,QAC9D;AAAA,MACJ,CAAC;AACD,WAAK,sBAAsB,IAAI;AAAA,IACnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAOA,IAAI,uBAAuB;AACvB,aAAO,QAAQ,KAAK,eAAe,QAAQ,KAAK,oBAAoB;AAAA,IACxE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAOA,IAAI,uBAAuB;AACvB,aAAO,QAAQ,KAAK,eAAe,QAAQ,KAAK,oBAAoB;AAAA,IACxE;AAAA,IACA,IAAI,qBAAqB;AACrB,aAAO,QAAQ,KAAK,wBAAwB,KAAK,oBAAoB;AAAA,IACzE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAmFA,KAAK,SAAS;AACV,UAAI,OAAO,YAAY,UAAU;AAC7B,kBAAU;AAAA,UACN,SAAU;AAAA,YACN,KAAM;AAAA,UACV;AAAA,QACJ;AAAA,MACJ;AACA,YACI,KAAO,MACP,OAAO,GAAG,eAAe,OAAO;AACpC,SAAG,mBAAmB;AACtB,aAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AAOpC,YAAI,GAAG,QAAQ,cAAc,EAAE,KAAK,CAAC,MAAM,OAAO;AAE9C,gBAAM,EAAE,KAAK,IAAI,GAAG;AACpB,cAAI,MAAM;AACN,eAAG,cAAc,KAAK,MAAM,KAAK,MAAM;AACvC,eAAG,QAAQ,gBAAgB,EAAE,KAAK,CAAC;AAAA,UACvC;AACA,gBAAM,UAAU,QAAQ,OAAO;AAAA,YAC3B,IAAU,KAAK;AAAA,YACf,MAAU,GAAG,OAAO,IAAI;AAAA,YACxB,MAAU;AAAA,YACV,SAAU,GAAG;AAAA,YACb,SAAU,GAAG;AAAA,YACb,SAAU;AAAA,UACd,GAAG,mCAAS,OAAO;AACnB,aAAG,eAAe,OAAO;AAAA,YACrB,MAAO;AAAA,YACP;AAAA,YACA;AAAA,YACA;AAAA,YACA,UAAU,MAAM;AAGZ,sBAAQ,UAAU,QAAQ,UAAU;AACpC,qBAAO,GAAG,IAAI;AAAA,YAClB;AAAA,YACA,IAAO,KAAK;AAAA,YACZ,MAAO,GAAG,YAAY,OAAO;AAAA,UACjC;AACA,aAAG,oBAAoB,KAAK,QAAQ,WAAW;AAC/C,aAAG,QAAQ,aAAa,EAAE,KAAK,CAAC;AAAA,QACpC,OACK;AASD,aAAG,QAAQ,gBAAgB,EAAE,KAAK,CAAC;AACnC,iBAAO,EAAE,WAAY,KAAK,CAAC;AAAA,QAC/B;AAAA,MACJ,CAAC;AAAA,IACL;AAAA,IACA,4BAA4B,aAAa;AACrC,UAAI,UAAU,KAAK,eAAe,WAAW;AAC7C,UAAI,CAAC,WAAW,KAAK,mBAAmB;AACpC,kBAAU,OAAO,OAAO,KAAK,cAAc,EAAE,CAAC;AAAA,MAClD;AACA,aAAO;AAAA,IACX;AAAA;AAAA;AAAA,IAGA,uBAAuB,QAAQ,WAAW;AACtC,YACI,KAAuB,MACvB,EAAE,MAAM,IAAe,WACvB,EAAE,OAAO,IAAc,OACvB,iBAAuB,UAAU,kBAAkB,GAAG,gBACtD,uBAAuB,UAAU,wBAAwB,GAAG,sBAC5D,iBAAuB,MAAM,WAAW,UAAU,OAAO,CAAAG,WAASA,OAAM,QAAQ,GAChF,MAAuB,OAAO,aAC9B,OAAuB,OAAO,OAAO,OAAO,iBAAiB;AAAA,QACzD,CAAC,cAAc,GAAI,OAAO;AAAA,MAC9B,CAAC;AACL,UAAI,QAAQ;AACR,cAAM,EAAE,OAAO,IAAI;AACnB,YAAI,UAAU,CAAC,OAAO,UAAU,OAAO,WAAW;AAC9C,eAAK,oBAAoB,IAAI,OAAO;AAAA,QACxC;AAAA,MACJ;AACA,UAAI,GAAG,oBAAoB;AACvB,qBAAa,WAAW,MAAM,IAAI,OAAO;AAAA,MAC7C;AAEA,qBAAe,QAAQ,CAAAA,WAAS;AAC5B,cAAM,WAAW,OAAO,IAAIA,OAAM,IAAI;AACtC,YAAI,SAAS,UAAU;AACnB,eAAKA,OAAM,UAAU,IAAI;AAAA,YACrB,OAAQ,SAAS,SAAS,EACrB,IAAI,CAAAC,YAAU,GAAG,uBAAuBA,SAAQ,EAAE,OAAQ,SAAS,CAAC,CAAC;AAAA,UAC9E;AAAA,QACJ;AAAA,MACJ,CAAC;AACD,aAAO;AAAA,IACX;AAAA,IACA,aAAa,MAAM,WAAW;AAC1B,aAAO,KAAK,OAAO,YAAU,OAAO,OAAO,EAAE,IAAI,YAAU,KAAK,uBAAuB,QAAQ,SAAS,CAAC;AAAA,IAC7G;AAAA,IACA,eAAe,MAAM,WAAW;AAC5B,YACI,EAAE,MAAM,IAAe,WACvB,EAAE,OAAO,IAAc,OACvB,iBAAuB,UAAU,kBAAmB,UAAU,mBAAmB,SAAS,KAAK,gBAC/F,uBAAuB,UAAU,wBAAwB,KAAK,sBAC9D,iBAAuB,MAAM,WAAW,UAAU,OAAO,CAAAD,WAASA,OAAM,QAAQ;AACpF,UAAI,UAAU,MAAM,MAAM;AACtB,cAAM,WAAW,UAAU,MAAM;AACjC,eAAO,KAAK,OAAO,YAAU,WAAW,QAAQ;AAAA,MACpD;AACA,aAAO,KAAK,OAAO,YAAU,OAAO,OAAO,EAAE,OAAO,CAAC,MAAM,WAAW;AAClE,YAAI;AAEJ,YAAI,gBAAgB;AAChB,uBAAa,OAAO;AAAA,QACxB,OACK;AACD,uBAAa,OAAO;AAAA,QACxB;AACA,YAAI,QAAQ;AACR,gBAAM,EAAE,OAAO,IAAI;AACnB,cAAI,UAAU,CAAC,OAAO,UAAU,OAAO,WAAW;AAC9C,uBAAW,oBAAoB,IAAI,OAAO;AAAA,UAC9C;AAAA,QACJ;AAEA,uBAAe,QAAQ,CAAAA,WAAS;AAC5B,gBAAM,WAAW,OAAO,IAAIA,OAAM,IAAI;AACtC,qBAAWA,OAAM,UAAU,IAAI,KAAK,oBAAoB,EAAE,OAAQ,SAAS,CAAC;AAAA,QAChF,CAAC;AAED,YAAI,CAAC,aAAa,QAAQ,UAAU,GAAG;AACnC,eAAK,KAAK,UAAU;AAAA,QACxB;AACA,eAAO;AAAA,MACX,GAAG,CAAC,CAAC;AAAA,IACT;AAAA,IACA,eAAe,MAAM;AACjB,aAAO,KAAK,IAAI,YAAU;AACtB,cAAM,MAAM,OAAO;AACnB,eAAO,aAAa,QAAQ,CAAC,GAAG,IAAI,SAAS,OAAO,EAAE;AAAA,MAC1D,CAAC;AAAA,IACL;AAAA,IACA,oBAAoB,iBAAiB;AACjC,YAAM,EAAE,MAAM,IAAI;AAClB,UAAI,EAAE,QAAQ,CAAC,GAAG,UAAW,UAAU,CAAC,GAAG,UAAU,CAAC,EAAE,IAAK,MAAM,WAAW,CAAC,GAC3E;AACJ,UAAI,MAAM;AAAQ,gBAAQ,KAAK,aAAa,OAAO,eAAe;AAClE,UAAI,QAAQ;AAAQ,kBAAU,KAAK,eAAe,SAAS,eAAe;AAC1E,UAAI,QAAQ;AAAQ,kBAAU,KAAK,eAAe,OAAO;AAEzD,UAAI,MAAM,UAAU,QAAQ,UAAU,QAAQ,QAAQ;AAClD,iBAAS,CAAC;AACV,YAAI,MAAM;AAAQ,iBAAO,QAAQ;AACjC,YAAI,QAAQ;AAAQ,iBAAO,UAAU;AACrC,YAAI,QAAQ;AAAQ,iBAAO,UAAU;AAAA,MACzC;AACA,aAAO;AAAA,IACX;AAAA,IACA,sBAAsB;AAClB,YAAM,EAAE,QAAQ,IAAI;AACpB,aAAO,WAAW,KAAK,YACjB;AAAA,QACE,MAAY;AAAA,QACZ,WAAY,KAAK;AAAA,QACjB,UAAY,KAAK;AAAA,QACjB,GAAG;AAAA,MACP,IAAI;AAAA,IACZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAyBA,IAAI,UAAU;AACV,YAAM,OAAO,CAAC;AACd,WAAK,WAAW,QAAQ,WAAS;AAC7B,cAAM,UAAU,KAAK,oBAAoB,KAAK;AAC9C,YAAI,SAAS;AACT,eAAK,MAAM,OAAO,IAAI;AAAA,QAC1B;AAAA,MACJ,CAAC;AACD,aAAO,OAAO,KAAK,IAAI,EAAE,SAAS,IAAI,OAAO;AAAA,IACjD;AAAA,IACA,wBAAwB,EAAE,OAAO,QAAQ,GAAG,eAAe,WAAW;AAt8C9E,UAAAH,KAAA;AAu8CY,YACI,KAAiB,MACjB,EAAE,WAAW,IAAI,OACjB,eAAiB,WAAW,SAE5B;AAAA,QACI,SAAU;AAAA,QACV,SAAU;AAAA,MACd,IAAiB,aAAa,CAAC;AACnC,UAAI,MAAM,SAAS;AAEnB,UAAI,eAAe;AACf,iBAAS;AACT,cAAM,eAAe,CAAC;AAEtB,iBAAUA,MAAA,cAAc,SAAd,gBAAAA,IAAoB,YAAW,CAAC;AAC1C,oBAAU,mBAAc,YAAd,mBAAuB,YAAW,CAAC;AAE7C,SAAC,GAAG,MAAM,GAAG,OAAO,EAAE,QAAQ,oBAAkB;AAC5C,gBAAM,KAAK,aAAa,QAAQ,gBAAgB,YAAY;AAC5D,uBAAa,EAAE,IAAI;AAAA,QACvB,CAAC;AAGD,YAAI,GAAG,0BAA0B;AAE7B,2DAAgB,QAAQ,UAAQ;AAC5B,kBAAM,KAAK,aAAa,QAAQ,MAAM,YAAY;AAElD,gBAAI,CAAC,aAAa,EAAE,GAAG;AACnB,mBAAK,KAAK,EAAE,CAAC,YAAY,GAAI,GAAG,CAAC;AAAA,YACrC;AAAA,UACJ;AAEA,2DAAgB,QAAQ,UAAQ;AAC5B,kBAAM,KAAK,aAAa,QAAQ,MAAM,YAAY;AAElD,gBAAI,CAAC,aAAa,EAAE,GAAG;AACnB,sBAAQ,KAAK,EAAE,CAAC,YAAY,GAAI,GAAG,CAAC;AAAA,YACxC;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ,WAES,kBAAkB,gBAAgB;AACvC,iBAAU;AACV,eAAU;AACV,kBAAU;AAAA,MACd;AAEA,cAAU,6BAAM,UAAS,OAAO;AAChC,iBAAU,mCAAS,UAAS,UAAU;AACtC,aAAO;AAAA,QACH;AAAA,QACA;AAAA,QACA;AAAA,MACJ;AAAA,IACJ;AAAA,IACA,oBAAoB,WAAW,eAAe,WAAW;AAjgDjE,UAAAA;AAkgDY,YACI,KAAoB,MACpB,iBAAoB,UAAU,kBAAkB,GAAG,gBACnD,EAAE,MAAM,IAAY,WACpB,UAAoB,MAAM,WAAW,mBAAmB,IAAI,GAC5D,iBAAoB,MAAM,WAAW,UAAU,OAAO,CAAAG,WAASA,OAAM,QAAQ,GAE7E,EAAE,MAAM,SAAS,OAAO,IAAI,GAAG,wBAAwB,WAAW,eAAe,SAAS,GAC1F,QAAQ,CAAC,GACT,UAAU,CAAC;AAEf,UAAI,MAAM;AACN,mBAAW,QAAQ,MAAM;AAErB,cAAI,MAAM,SAAQH,MAAA,KAAK,cAAc,MAAnB,OAAAA,MAAwB,KAAK,OAAO,CAAC,GAAG;AACtD,oBAAQ,KAAK,IAAI;AAAA,UACrB,OAEK;AACD,kBAAM,KAAK,IAAI;AAAA,UACnB;AAAA,QACJ;AAAA,MACJ;AACA,YAAM,kBAAkB,CAAC;AAEzB,UAAI,QAAQ,UAAU,eAAe,QAAQ;AACzC,gBAAQ,QAAQ,gBAAc;AA5hD9C,cAAAA,KAAA;AA6hDoB,gBACI,SAAS,MAAM,SAAQA,MAAA,WAAW,cAAc,MAAzB,OAAAA,MAA8B,WAAW,OAAO,CAAC,GAExE,kBAAgB,eAAU,UAAV,mBAAiB,KAAK,OAAK,EAAE,cAAc,KAAK,WAAW,cAAc,SACrF,eAAU,YAAV,mBAAmB,KAAK,OAAK,EAAE,OAAO,KAAK,WAAW,OAAO;AACrE,gBAAM,eAAe,CAAC;AACtB,yBAAe,QAAQ,CAAAG,WAAS;AAC5B,kBAAMD,SAAQ,OAAO,IAAIC,OAAM,IAAI;AACnC,eAAG;AAAA,cAAoB,EAAE,OAAAD,OAAM;AAAA,cAAG,WAAWC,OAAM,UAAU;AAAA,cACzD,+CAAgBA,OAAM;AAAA,YAC1B;AAIA,yBAAaA,OAAM,UAAU,IAAI;AACjC,mBAAO,WAAWA,OAAM,UAAU;AAAA,UACtC,CAAC;AACD,0BAAgB,KAAK,CAAC,QAAQ,YAAY,CAAC;AAAA,QAC/C,CAAC;AAAA,MACL;AAEA,YAAM,MAAM,MAAM,eAAe,EAAE,SAAS,OAAO,QAAQ,GAAG,MAAM,gBAAgB,QAAQ,IAAI;AAChG,sBAAgB,QAAQ,CAAC,CAAC,QAAQ,QAAQ,MAAM,OAAO,OAAO,IAAI,IAAI,OAAO,EAAE,GAAG,QAAQ,CAAC;AAC3F,aAAO;AAAA,IACX;AAAA,IACA,kBAAkB,UAAU,SAAS;AAtjD7C,UAAAH;AAujDY,YACI,KAAS,MACT,SAAS,GAAG;AAChB,SAAG,oBAAoB,GAAG,uBAAuB;AACjD,SAAG,uBAAuB;AAC1B,iBAAW,SAAS,QAAQ;AACxB,WAAG,oBAAoB,OAAO,SAAS,MAAM,OAAO,IAAGA,MAAA,mCAAS,SAAT,gBAAAA,IAAgB,MAAM,QAAQ;AAAA,MACzF;AACA,SAAG,sBAAsB,IAAI;AAC7B,SAAG,oBAAoB,GAAG,uBAAuB;AAAA,IACrD;AAAA,IACA,kBAAkB,UAAU,SAAS;AACjC,WAAK,uBAAuB;AAC5B,WAAK,oBAAoB,UAAU,OAAO;AAC1C,WAAK,uBAAuB;AAAA,IAChC;AAAA,IACA,MAAM,cAAc,SAAS,UAAU,SAAS;AAC5C,YACI,KAAK,MAEL,eAAe,GAAG,qBAAqB,SAAS,QAAQ,QAAQ;AACpE,cAAQ,cAAc;AAAA,QAClB,KAAK;AACD,cAAI,GAAG,kBAAkB;AACrB,eAAG,qBAAqB,QAAQ;AAAA,UACpC;AACA,aAAG,kBAAkB,UAAU,OAAO;AACtC;AAAA,QACJ,KAAK;AACD,cAAI,GAAG,kBAAkB;AACrB,eAAG,qBAAqB,UAAU,OAAO;AAAA,UAC7C;AACA,aAAG,kBAAkB,UAAU,OAAO;AACtC;AAAA,MACR;AAAA,IACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAkCA,eAAe,SAAS,cAAc,MAAM,gBAAgB,aAAa,OAAO;AAC5E,YACI,KAAM,MACN,MAAM,aAAa,oBAAI,IAAI,IAAI;AACnC,SAAG,gBAAgB;AACnB,SAAG,uBAAuB;AAC1B,iBAAW,EAAE,OAAO,gBAAAK,gBAAe,KAAK,GAAG,mBAAmB;AAC1D,YAAI,QAAQ,MAAM,EAAE,GAAG;AACnB,gBAAM,WAAW,MAAM;AAAA,YACnB,QAAQ,MAAM,EAAE;AAAA,YAChB;AAAA,YACAA,mBAAkB,GAAG;AAAA;AAAA,YAErB;AAAA,YACA;AAAA,UACJ;AACA,cAAI,UAAU;AACV,gBAAI,IAAI,MAAM,IAAI,QAAQ;AAAA,UAC9B;AAAA,QACJ;AAAA,MACJ;AACA,SAAG,sBAAsB,IAAI;AAC7B,SAAG,eAAe,KAAK;AACvB,aAAO;AAAA,IACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IASA,IAAI,YAAY;AACZ,aAAO,OAAO,SAAS,GAAG,KAAK,IAAI,IAAK,KAAK,cAAe;AAAA,IAChE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA0CA,OAAO;AACH,YAAM,KAAK;AAEX,SAAG,aAAa,UAAU;AAC1B,UAAI,GAAG,eAAe,MAAM;AAQxB,WAAG,QAAQ,aAAa;AAExB,eAAO,GAAG,oBAAoB,GAAG,kBAAkB,QAAQ,MAAM,GAAG,KAAK,CAAC;AAAA,MAC9E;AAGA,aAAO,GAAG,oBAAoB,IAAI,QAAQ,CAAC,SAAS,WAAW;AAE3D,cAAM,OAAO,GAAG,oBAAoB;AAEpC,YAAI,CAAC,MAAM;AACP,kBAAQ,IAAI;AACZ;AAAA,QACJ;AAeA,YAAI,GAAG,QAAQ,cAAc,EAAE,KAAK,CAAC,MAAM,OAAO;AAC9C,aAAG,QAAQ,aAAa,EAAE,KAAK,CAAC;AAEhC,aAAG,eAAe,OAAO;AAAA,YACrB,MAAO;AAAA,YACP;AAAA,YACA;AAAA,YACA;AAAA,YACA,IAAO,KAAK;AAAA,YACZ,MAAO,GAAG,YAAY;AAAA,cAClB,IAAU,KAAK;AAAA,cACf,MAAU,GAAG,OAAO,IAAI;AAAA,cACxB,MAAU;AAAA,cACV,SAAU,GAAG;AAAA,cACb,SAAU,GAAG;AAAA,cACb,SAAU;AAAA,YACd,CAAC;AAAA,UACL;AAAA,QACJ,OACK;AAOD,aAAG,QAAQ,gBAAgB,EAAE,KAAK,CAAC;AACnC,iBAAO,EAAE,WAAY,KAAK,CAAC;AAAA,QAC/B;AAAA,MACJ,CAAC,EAAE,MAAM,WAAS;AAEd,YAAI,SAAS,CAAC,MAAM,WAAW;AAC3B,gBAAM;AAAA,QACV;AAEA,eAAO;AAAA,MACX,CAAC;AAAA,IACL;AAAA,IACA,MAAM,qBAAqB,aAAa,cAAc,SAAS;AAC3D,YACI,KAAK,MACL;AAAA,QACI,MAAO;AAAA,QACP,IAAO;AAAA,MACX,IAAK;AACT,UAAI,GAAG;AAAa;AACpB,UAAI,eAAe;AACnB,gBAAU,GAAG,eAAe,WAAW;AAEvC,UAAI;AACA,uBAAe,MAAM,YAAY,KAAK;AAAA,MAC1C,SACO,GAAP;AAAA,MACA;AAEA,UAAI,GAAG;AAAa;AAUpB,WAAI,mCAAS,QAAO,WAAW;AAC3B,cAAM,IAAI,MAAM,eAAe,gCAAgC;AAAA,MACnE;AAKA,SAAG,eAAe,WAAW,IAAI;AACjC,YAAM,WAAW,MAAM,GAAG,mBAAmB,SAAS,cAAc,YAAY;AAEhF,UAAI,GAAG;AAAa;AACpB,UAAI,CAAC,aAAa,GAAG,uBAAsB,qCAAU,aAAY,QAAQ,EAAC,qCAAU,WAAU;AAC1F,cAAM,QAAQ;AAAA,UACV;AAAA,UACA;AAAA,UACA;AAAA,QACJ;AACA,YAAI,qCAAU,SAAS;AACnB,gBAAM,UAAU,SAAS;AAAA,QAC7B;AACA,gBAAQ,OAAO,IAAI,wBAAwB,KAAK,CAAC;AAAA,MACrD;AAEA,SAAG,SAAS,aAAa,WAAW,QAAQ,IAAI,IAAI,IAAI,IAAI;AAC5D,cAAQ,QAAQ,EAAE,UAAU,aAAa,cAAc,QAAQ,CAAC;AAAA,IACpE;AAAA,IACA,MAAM,qBAAqB,aAAa,cAAc,SAAS;AA50DvE,UAAAL;AA60DY,YAAM,KAAK;AACX,UAAI,GAAG;AAAa;AACpB,gBAAU,GAAG,eAAe,QAAQ,IAAI;AACxC,YACI,UAAcA,MAAA,6CAAc,oBAAd,gBAAAA,IAA+B,QAC7C,aAAc,QAAQ,iCAAQ,OAAO;AACzC,UAAI,CAAC,YAAY;AACb,YAAI,UACA,eAAe;AACnB,YAAI;AACA,yBAAe,MAAM,YAAY,KAAK;AACtC,qBAAW,GAAG,OAAO,YAAY;AAAA,QACrC,SACO,GAAP;AAAA,QACA;AAEA,YAAI,GAAG;AAAa;AACpB,WAAG,2BAA2B,SAAS,UAAU,cAAc,YAAY;AAE3E,YAAI,GAAG;AAAa;AACpB,gBAAQ,OAAO,IAAI,wBAAwB;AAAA,UACvC;AAAA,UACA;AAAA,QACJ,CAAC,CAAC;AAAA,MACN;AAEA,SAAG,eAAe,QAAQ,IAAI,IAAI;AAAA,IACtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAUA,gBAAgB;AACZ,WAAK,WAAW,QAAQ,WAAS,MAAM,MAAM,cAAc,CAAC;AAAA,IAChE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAMA,gBAAgB;AAEZ,WAAK,uBAAuB;AAAA,IAChC;AAAA,IACA,yBAAyB;AACrB,YAAM,EAAE,qBAAqB,IAAI,KAAK;AAGtC,WAAK,kBAAkB,QAAQ,CAAC,EAAE,MAAM,OAAO,CAAC,MAAM,qBAAqB,CAAC,yBAAyB,MAAM,cAAc,CAAC;AAAA,IAC9H;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAMA,YAAY;AACR,YACI,KAAiB,MACjB,EAAE,MAAM,KAAK,IAAI,GAAG;AACxB,cAAQ,GAAG,cAAc,KAAK,MAAM,KAAK,MAAM;AAC/C,cAAQ,GAAG,cAAc,KAAK,MAAM,KAAK,MAAM;AAC/C,aAAO,GAAG,WAAW,SAAS,GAAG;AAC7B,WAAG,gBAAgB,GAAG,WAAW,CAAC,CAAC;AAAA,MACvC;AACA,YAAM,aAAa,MAAM,UAAU;AAAA,IACvC;AAAA,EACJ,GA/iDI,cAhRG,IAgRI,gBAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA2BlB,SAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA2BV,SAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAMV,WAAY;AAAA,EAChB,IACA,cA9UG,IA8UI,aAAY;AAAA;AAAA;AAAA,IAGf,YAAa;AAAA,EACjB,IAlVG;AAg0DX;;;AC32DA,IAAqB,sBAArB,cAAiDM,MAAK,MAAM,gCAAwB,EAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUlF,IAAI,WAAW;AACX,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,IAAI,SAAS,OAAO;AAChB,SAAK,eAAe;AAAA,EACxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA+BA,IAAI,OAAO;AACP,WAAO,aAAa,kBAAkB,IAAI;AAAA,EAC9C;AAAA,EACA,IAAI,KAAK,MAAM;AACX,QAAI,OAAO,SAAS,UAAU;AAC1B,aAAO,aAAa,cAAc,IAAI;AAAA,IAC1C;AACA,SAAK,iBAAiB,WAAS;AAC3B,YAAM,WAAW,GAAG,MAAM;AAC1B,UAAI,KAAK,QAAQ,GAAG;AAChB,cAAM,OAAO,KAAK,QAAQ;AAAA,MAC9B;AAAA,IACJ,CAAC;AAAA,EACL;AAAA,EACA,WAAW,gBAAgB;AACvB,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAWH,QAAS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAeb;AAAA,EACJ;AAAA;AAAA;AAAA,EAGA,UAAU,SAAS,CAAC,GAAG;AACnB,QAAI,OAAO,QAAQ;AACf,aAAO,aAAa,OAAO;AAC3B,aAAO,OAAO;AAAA,IAClB;AACA,UAAM,UAAU,MAAM;AAAA,EAC1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAuCA,SAAS;AAEL,UAAM,SAAS,CAAC;AAChB,SAAK,iBAAiB,CAAC,OAAO,YAAY,OAAO,GAAG,aAAa,IAAI,MAAM,OAAO,CAAC;AACnF,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA2BA,IAAI,aAAa;AACb,WAAO,KAAK,OAAO;AAAA,EACvB;AAAA,EACA,IAAI,WAAW,MAAM;AACjB,SAAK,OAAO;AAAA,EAChB;AAAA;AAAA;AAAA,EAGA,IAAI,OAAO,QAAQ;AACf,QAAI,WAAW,KAAK,YAAY;AAC5B,WAAK,aAAa;AAAA,IACtB;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,IAAI,SAAS;AACT,WAAO,KAAK;AAAA,EAChB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,IAAI,YAAY;AACZ,WAAO,KAAK;AAAA,EAChB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAsDA,YAAY,MAAM;AACd,WAAO,KAAK,aAAa,GAAG,IAAI;AAAA,EACpC;AAAA,EACA,eAAe,MAAM;AACjB,WAAO,KAAK,gBAAgB,GAAG,IAAI;AAAA,EACvC;AAAA,EACA,YAAY,MAAM;AACd,WAAO,KAAK,aAAa,GAAG,IAAI;AAAA,EACpC;AAAA,EACA,cAAc,MAAM;AAChB,WAAO,KAAK,oBAAoB,GAAG,IAAI;AAAA,EAC3C;AAAA,EACA,YAAY,MAAM;AACd,WAAO,KAAK,oBAAoB,GAAG,IAAI;AAAA,EAC3C;AACJ;AACA,oBAAoB,SAAS;;;ACrS7B,IAAO,wBAAQ,YAAU,MAAM,uBAAuB,UAAUC,OAAM;AAAA,EAClE,WAAW,QAAQ;AACfgKA,WAAW,gBAAgB;AACvB,WAAO;AAAA,MACH,MAAO;AAAA,MACP,MAAO;AAAA,IACX;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,cAAc,gBAAgB,QAAQ;AAhM1C;AAiMQ,yBAAe,UAAf;AACA,QAAI,CAAC,KAAK,cAAc;AACpB,aAAO,EAAE,WAAY,KAAK,CAAC;AAAA,IAC/B;AAAA,EACJ;AAAA,EACA,4BAA4B,SAAS,QAAQ,WAAW;AACpD,WAAO,EAAE,WAAW,UAAU,WAAW,UAAU,CAAC;AAAA,EACxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAkBA,YAAY,SAAS;AACjB,UACI,KAAkB,MAClB,EAAE,KAAK,IAAW,SAClB,kBAAkB,GAAG,UAAU,QAAQ,IAAI,KAAK,CAAC,GAEjD,gBAAkB,QAAQ,OAAO,CAAC,GAAG,iBAAiB,gBAAgB,aAAa;AACvF,QAAI,QAAQ,KAAK;AACb,oBAAc,MAAM,QAAQ;AAAA,IAChC;AACA,kBAAc,SAAS,cAAc,UAAU,cAAc,cAAc,QAAQ,IAAI;AACvF,kBAAc,SAAS,QAAQ,OAAO,cAAc,UAAU,CAAC,GAAG,QAAQ,MAAM;AAChF,QAAI,EAAE,UAAU,IAAI;AAEpB,QAAI,GAAG,4BAA4B,iBAAiB,cAAc,QAAQ,SAAS,GAAG;AAClF,oBAAc,OAAO;AAErB,oBAAc,UAAU,cAAc,WAAW,CAAC;AAClD,oBAAc,QAAQ,cAAc,IAAI,cAAc,QAAQ,cAAc,KAAK;AAAA,IACrF,OACK;AAED,kBAAY,aAAa;AACzB,oBAAc,OAAO,SAAS,IAAI;AAAA,IACtC;AACA,QAAI,CAAC,cAAc,KAAK;AACpB,YAAM,IAAI,MAAM,yCAAyC;AAAA,IAC7D;AAEA,WAAO,cAAc;AACrB,WAAO,cAAc;AACrB,QAAI,aAAa;AACjB,aAAS,cAAc;AAEnB,oBAAc,cAAc,cAAc;AAC1C,aAAO,cAAc;AACrB,UAAI,YAAY;AAChB,YAAM,eAAe,QAAQ,OAAO,CAAC,GAAG,eAAe,cAAc,YAAY;AACjF,oBAAe,WAAW,MAAM,cAAc,KAAK,YAAY;AAC/D,aAAO,YAAY,MAAM,WAAS;AAjQ9C;AAkQgB,oBAAY,OAAO;AACnB,iBAAG,YAAH,4BAAa,oBAAoB,EAAE,SAAU,MAAM;AACnD,cAAM,UAAS,kBAAa,oBAAb,mBAA8B;AAC7C,YAAI,QAAQ;AACR,sBAAY,OAAO;AACnB,cAAI,CAAC,WAAW;AACZ,oBAAQ,KAAK,KAAK;AAAA,UACtB;AAAA,QACJ;AACA,eAAO,EAAE,OAAO,UAAU;AAAA,MAC9B,CAAC,EAAE,KAAK,cAAY;AA5QhC;AA6QgB,oBAAY,OAAO;AACnB,iBAAG,YAAH,4BAAa,oBAAoB,EAAE,SAAU,QAAQ,qCAAU,EAAE,EAAE;AACnE,cAAM,YAAW,qCAAU,MAAK,QAAQ,UAAU,QAAQ;AAC1D,eAAO,qCAAU,KAAK,QAAQ,WAAW,IAAI,UAAU,cAAc;AAAA,MACzE,CAAC;AAAA,IACL;AAyBA,UAAM,mBAAmB,GAAG,QAAQ,cAAc;AAAA,MAC9C,QAAc,cAAc;AAAA,MAC5B,aAAc,QAAQ;AAAA,MACtB;AAAA,MACA,QAAc;AAAA,IAClB,CAAC;AACD,QAAI,QAAQ,UAAU,gBAAgB,GAAG;AACrC,sBAAgB,iBAAiB,KAAK,WAAW;AAAA,IACrD,OACK;AACD,sBAAgB,YAAY;AAAA,IAChC;AACA,kBAAc,QAAQ,MAAM;AAvTpC;AAwTY,UAAI,CAAC,YAAY,MAAM;AACnB,0BAAY,UAAZ;AAAA,MACJ;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AACJ;;;AC/SA,IAAO,sBAAQ,YAAU,MAAM,qBAAqB,UAAUC,OAAM;AAAA,EAChE,WAAW,QAAQ;AACf,WAAO;AAAA,EACX;AAAA,EACA,WAAW,gBAAgB;AACvB,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAiCH,SAAU,CAAC;AAAA,IACf;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,OAAO,aAAa;AA/DxB;AAgEQ,kBAAc,OAAO,OAAO,CAAC,IAAG,UAAK,YAAL,mBAAc,aAAa,WAAW;AACtE,WAAO,aAAa,kBAAkB,WAAW;AAAA,EACrD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,OAAO,cAAc;AACjB,WAAO,aAAa,cAAc,YAAY;AAAA,EAClD;AACJ;;;ACvEA,IAAM,sBAAsB;AAAA,EACxB,WAAiB;AAAA,EACjB,SAAiB;AAAA,EACjB,gBAAiB;AAAA,EACjB,cAAiB;AACrB;AAMA,IAAO,8BAAQ,YAAO;AAjBtB;AAiByB,6BAAmC,UAAU,UAAU;AAAA,IAsB5E,IAAI,WAAW;AACX,aAAO,KAAK,QAAQ,UAAU;AAAA,IAClC;AAAA,IACA,IAAI,SAAS,UAAU;AACnB,WAAK,QAAQ,YAAY,QAAQ;AAAA,IACrC;AAAA,IACA,aAAaC,QAAO,MAAM;AACtB,WAAK,IAAIA,QAAO,KAAK,YAAY,OAAO,eAAe,WAAW,MAAM,KAAK,QAAQ,IAAI,MAAM,IAAI;AAEnG,WAAK,KAAKA,MAAK,IAAI,KAAKA,MAAK;AAAA,IACjC;AAAA,IACA,aAAaA,QAAO;AAChB,UAAI,KAAK,YAAY,QAAQ,KAAKA,MAAK,GAAG;AACtC,eAAO,eAAe,aAAa,KAAKA,MAAK,GAAG,KAAK,QAAQ;AAAA,MACjE;AACA,aAAO,KAAKA,MAAK;AAAA,IACrB;AAAA,IACA,eAAe,YAAY;AAEvB,UAAI,KAAK,YAAY,MAAM;AACvB,mBAAWA,UAAS,qBAAqB;AACrC,cAAI,WAAWA,MAAK,GAAG;AACnB,iBAAK,aAAaA,QAAO,IAAI,KAAK,WAAWA,MAAK,CAAC,CAAC;AACpD,mBAAO,WAAWA,MAAK;AAAA,UAC3B;AAAA,QACJ;AAAA,MACJ;AACA,aAAO,MAAM,eAAe,GAAG,SAAS;AAAA,IAC5C;AAAA,IACA,wBAAwBA,QAAO;AApEnC,UAAAC,KAAA;AAqEQ,UAAI,KAAK,YAAY,MAAM;AACvB,cAAM,aAAY,MAAAA,MAAAD,UAAA,gBAAAA,OAAO,UAAP,OAAAC,MAAgBD,UAAA,gBAAAA,OAAO,SAAvB,YAA+BA;AAEjD,YAAI,oBAAoB,SAAS,GAAG;AAChC,iBAAO,KAAK,aAAa,SAAS;AAAA,QACtC;AAAA,MACJ;AACA,aAAO,MAAM,wBAAwBA,MAAK;AAAA,IAC9C;AAAA;AAAA,IAEA,kBAAkB,UAAU;AACxB,YACI,KAAgB,MAChB,eAAgB,EAAE,GAAG,GAAG,KAAK,SAAS,GACtC,gBAAgB,EAAE,GAAG,oBAAoB;AAE7C,UAAI,GAAG,UAAU,CAAC,GAAG,mBAAmB;AACpC,eAAO,cAAc;AACrB,eAAO,cAAc;AAAA,MACzB;AAEA,iBAAWA,UAAS,eAAe;AAE/B,YAAI,GAAGA,MAAK,KAAK,MAAM;AACnB,wBAAcA,MAAK,IAAI,GAAGA,MAAK;AAE/B,cAAI,GAAG,YAAY,MAAM;AACrB,0BAAcA,MAAK,IAAI,GAAG,aAAaA,MAAK;AAE5C,gBAAI,aAAaA,MAAK,GAAG;AACrB,2BAAaA,MAAK,IAAI,eAAe,aAAa,aAAaA,MAAK,GAAG,GAAG,QAAQ;AAAA,YACtF;AAAA,UACJ;AAAA,QACJ,OACK;AACD,iBAAO,cAAcA,MAAK;AAAA,QAC9B;AAAA,MACJ;AAEA,SAAG,WAAW;AAEd,iBAAWA,UAAS,eAAe;AAE/B,WAAG,aAAaA,QAAO,cAAcA,MAAK,GAAG,KAAK;AAClD,sBAAcA,MAAK,IAAI;AAEvB,YAAI,GAAG,YAAY,QAAQ,aAAaA,MAAK,GAAG;AAC5C,uBAAaA,MAAK,IAAI,eAAe,WAAW,aAAaA,MAAK,GAAG,GAAG,QAAQ;AAAA,QACpF;AAAA,MACJ;AAEA,SAAG,aAAa,MAAM,MAAM,aAAa;AAEzC,UAAI,CAAC,aAAa,QAAQ,YAAY,GAAG;AACrC,WAAG,KAAK,WAAW;AACnB,WAAG,OAAO,QAAQ,WAAS,MAAM,SAAS,IAAI,EAAE,CAAC;AAAA,MACrD;AAAA,IACJ;AAAA,EACJ,GA7GI,cADqB,IACd,SAAQ,wBACf,cAFqB,IAEd,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAeb;AAAA,MACI,MAAU;AAAA,MACV,SAAU;AAAA,IACd;AAAA,EACJ,IArBqB;AAAA;;;ACuBzB,IAAqB,WAArB,cAAsC,MAAM,MAAM,2BAAmB,EAAE;AAAA,EACnE,WAAW,QAAQ;AACf,WAAO;AAAA,EACX;AAAA;AAAA,EAEA,WAAW,SAAS;AAChB,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAcH;AAAA,QACI,MAAO;AAAA,QACP,MAAO;AAAA,MACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAcA;AAAA,QACI,MAAO;AAAA,QACP,MAAO;AAAA,MACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAMA;AAAA,QACI,MAAY;AAAA,QACZ,MAAY;AAAA,QACZ,WAAY;AAAA,QACZ,UAAY;AAAA,MAChB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAkBA;AAAA,QACI,MAAe;AAAA,QACf,MAAe;AAAA,QACf,cAAe;AAAA,QACf,UAAe;AAAA,MACnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAQA;AAAA,QACI,MAAU;AAAA,QACV,SAAU;AAAA,QACV,QAAU;AAAA,UACN,MAAO;AAAA,QACX;AAAA,MACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAaA;AAAA,QACI,MAAe;AAAA,QACf,cAAe;AAAA,QACf,UAAe;AAAA,MACnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAQA;AAAA,QACI,MAAW;AAAA,QACX,UAAW;AAAA,MACf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAUA;AAAA,QACI,MAAW;AAAA,QACX,MAAW;AAAA,QACX,UAAW;AAAA,MACf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAMA;AAAA,QACI,MAAe;AAAA,QACf,MAAe;AAAA,QACf,cAAe;AAAA,MACnB;AAAA,IACJ;AAAA,EACJ;AAAA;AAAA;AAAA,EAGA,UAAU,SAAS,MAAM;AAErB,QAAI,6BAAM,cAAc;AACpB,YAAM,EAAE,WAAW,KAAK,IAAI,KAAK;AACjC,WAAK,WAAW;AAChB,WAAK,OAAO;AACZ,aAAO,KAAK;AAAA,IAChB;AACA,UAAM,UAAU,MAAM,GAAG,IAAI;AAC7B,SAAK,UAAU;AAAA,EACnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,IAAI,aAAa;AA3MrB;AA4MQ,UAAM,KAAK;AAEX,QAAI,GAAG,cAAc;AACjB,aAAO,GAAG,kBAAkB;AAAA,IAChC;AACA,QAAI,CAAC,GAAG,aAAa;AACjB,SAAG,eAAc,QAAG,WAAH,mBAAW,KAAK,OAAK,EAAE;AAAA,IAC5C;AACA,WAAO,GAAG;AAAA,EACd;AAAA,EACA,YAAY;AACR,UACI,KAAiD,MACjD,EAAE,WAAW,SAAS,UAAU,aAAa,IAAI,IACjD,cAAiD,YAAY;AAEjE,QAAI,aAAa,WAAW,CAAC,aAAa;AACtC,SAAG,QAAQ,YAAY,WAAG,KAAK,WAAW,SAAS,cAAc,IAAI,CAAC;AAAA,IAC1E,WAES,aAAa,CAAC,WAAW,aAAa;AAC3C,SAAG,QAAQ,WAAW,WAAG,IAAI,WAAW,UAAU,YAAY,CAAC;AAAA,IACnE,WAES,CAAC,aAAa,WAAW,aAAa;AAC3C,SAAG,QAAQ,aAAa,WAAG,IAAI,SAAS,CAAC,UAAU,YAAY,CAAC;AAAA,IACpE;AAAA,EACJ;AAAA;AAAA;AAAA,EAGA,kBAAkB,KAAK;AACnB,QAAI,KAAK,MAAM;AACX,WAAK,KAAK,QAAQ;AAAA,IACtB,OACK;AACD,WAAK,OAAO,IAAI,aAAa,GAAG;AAAA,IACpC;AAAA,EACJ;AAAA,EACA,IAAI,YAAY,KAAK;AACjB,SAAK,kBAAkB,GAAG;AAC1B,SAAK,IAAI,OAAO,KAAK,KAAK,KAAK;AAAA,EACnC;AAAA,EACA,IAAI,cAAc;AACd,UAAM,EAAE,IAAI,IAAI;AAEhB,QAAI,2BAAK,gBAAgB;AACrB,aAAO;AAAA,IACX;AACA,SAAK,cAAc;AACnB,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,IAAI,MAAM;AACN,QAAI,CAAC,KAAK,MAAM;AACZ,WAAK,OAAO,IAAI,aAAa,MAAM,IAAI,KAAK,CAAC;AAAA,IACjD;AACA,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,IAAI,IAAI,KAAK;AACT,SAAK,cAAc;AAAA,EACvB;AAAA,EACA,IAAI,YAAY;AACZ,WAAO,KAAK,IAAI,WAAW;AAAA,EAC/B;AAAA,EACA,IAAI,UAAU,MAAM;AAChB,SAAK,aAAa,IAAI;AAAA,EAC1B;AAAA,EACA,IAAI,UAAU;AACV,WAAO,KAAK,IAAI,SAAS;AAAA,EAC7B;AAAA,EACA,IAAI,QAAQ,MAAM;AACd,SAAK,WAAW,IAAI;AAAA,EACxB;AAAA,EACA,IAAI,aAAa;AACb,UACI,KAAK,MACL;AAAA,MACI;AAAA,MACA;AAAA,IACJ,IAAK;AACT,QAAI,SAAS;AAQT,aAAO;AAAA,IACX;AACA,WAAO,WAAG,IAAI,WAAW,GAAG,UAAU,GAAG,YAAY;AAAA,EACzD;AAAA,EACA,IAAI,WAAW;AACX,WAAO,KAAK,IAAI,UAAU;AAAA,EAC9B;AAAA,EACA,IAAI,SAAS,UAAU;AACnB,SAAK,YAAY,UAAU,KAAK,YAAY;AAAA,EAChD;AAAA,EACA,IAAI,eAAe;AACf,WAAO,KAAK,IAAI,cAAc;AAAA,EAClC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,YAAY,UAAU,eAAe,KAAK,cAAc;AAEpD,eAAW,WAAW,QAAQ;AAC9B,SAAK,IAAI;AAAA,MACL;AAAA,MACA;AAAA,MACA,GAAG,KAAK,wBAAwB,UAAU,YAAY;AAAA,IAC1D,CAAC;AAAA,EACL;AAAA,EACA,wBAAwB,WAAW,MAAM,YAAY,KAAK,WAAW,UAAU,KAAK,SAAS;AACzF,UAAM,SAAS,CAAC;AAChB,QAAI,WAAW;AACX,aAAO,UAAU,WAAG,IAAI,WAAW,WAAW,IAAI;AAAA,IACtD,WACS,SAAS;AACd,aAAO,YAAY,WAAG,IAAI,SAAS,CAAC,WAAW,IAAI;AAAA,IACvD;AACA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,kBAAkB,MAAM,YAAY;AAChC,UAAM,KAAK;AACX,QAAI,GAAG,aAAa,GAAG,SAAS;AAC5B,aAAO,WAAG,kBAAkB,GAAG,WAAW,GAAG,SAAS,MAAM,UAAU;AAAA,IAC1E,OACK;AACD,aAAO,WAAG,GAAG,MAAM,GAAG,UAAU,GAAG,YAAY;AAAA,IACnD;AAAA,EACJ;AAAA,EACA,IAAI,eAAe;AAEf,WAAO,IAAI,SAAS;AAAA,MAChB,MAAY,KAAK;AAAA,MACjB,WAAY,KAAK;AAAA,IACrB,CAAC;AAAA,EACL;AAAA,EACA,IAAI,aAAa,UAAU;AACvB,QAAI,OAAO,aAAa,UAAU;AAC9B,iBAAW,WAAG,cAAc,UAAU,MAAM,KAAK,YAAY;AAAA,IACjE;AACA,SAAK,YAAY,SAAS,WAAW,SAAS,IAAI;AAAA,EACtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,aAAa,MAAM,eAAe,MAAM;AACpC,UACI,KAAQ,MACR,QAAQ;AAAA,MACJ,WAAY;AAAA,IAChB;AACJ,QAAI,MAAM;AACN,UAAI;AACJ,UAAI,cAAc;AACd,sBAAc,GAAG,YAAY;AAAA,MACjC,OACK;AACD,YAAI,GAAG,SAAS;AACZ,gBAAM,WAAW,WAAG,KAAK,MAAM,GAAG,SAAS,GAAG,cAAc,IAAI;AAChE,cAAI,MAAM,WAAW;AAAG,kBAAM,IAAI,MAAM,mBAAmB;AAAA,QAC/D,OACK;AACD,wBAAc,KAAK,YAAY;AAAA,QACnC;AAAA,MACJ;AACA,UAAI,aAAa;AAEb,cAAM,UAAU,WAAG,IAAI,MAAM,GAAG,kBAAkB,GAAG,GAAG,GAAG;AAAA,MAC/D;AAAA,IACJ,OACK;AACD,YAAM,WAAW;AAAA,IACrB;AACA,OAAG,IAAI,KAAK;AAAA,EAChB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,WAAW,MAAM,eAAe,OAAO;AACnC,UACI,KAAQ,MACR,QAAQ;AAAA,MACJ,SAAU;AAAA,IACd;AACJ,QAAI,MAAM;AACN,UAAI;AACJ,UAAI,iBAAiB,MAAM;AACvB,wBAAgB,GAAG,YAAY;AAAA,MACnC,OACK;AACD,YAAI,GAAG,WAAW;AACd,gBAAM,WAAW,WAAG,KAAK,GAAG,WAAW,MAAM,GAAG,cAAc,IAAI;AAClE,cAAI,MAAM,WAAW;AAAG,kBAAM,IAAI,MAAM,mBAAmB;AAAA,QAC/D,OACK;AACD,0BAAgB,KAAK,YAAY;AAAA,QACrC;AAAA,MACJ;AACA,UAAI,eAAe;AACf,cAAM,YAAY,WAAG,IAAI,MAAM,CAAC,GAAG,UAAU,GAAG,YAAY;AAAA,MAChE;AAAA,IACJ;AACA,OAAG,IAAI,KAAK;AAAA,EAChB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,gBAAgB,OAAO,KAAK,QAAQ;AAChC,SAAK,IAAI;AAAA,MACL,WAAY;AAAA,MACZ,SAAY;AAAA,IAChB,GAAG,MAAM,MAAM;AAAA,EACnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,IAAI,QAAQ;AACR,UACI,QAAY,CAAC,GACb,YAAY,WAAG,QAAQ,KAAK,WAAW,KAAK,GAC5C,UAAY,KAAK;AACrB,aAAS,OAAO,WAAW,OAAO,SAAS,OAAO,WAAG,IAAI,MAAM,GAAG,KAAK,GAAG;AACtE,YAAM,KAAK,IAAI;AAAA,IACnB;AACA,WAAO;AAAA,EACX;AAAA,EACA,IAAI,cAAc;AA9ctB;AA+cQ,YAAQ,UAAK,YAAY,KAAK,iBAAiB,WAAW,IAAI,KAAK,IAAI,WAAW,IAAI,KAAK,cAAnF,mBAA+F;AAAA,EAC3G;AAAA,EACA,IAAI,YAAY;AAjdpB;AAkdQ,YAAQ,UAAK,YAAY,KAAK,iBAAiB,SAAS,IAAI,KAAK,IAAI,SAAS,IAAI,KAAK,YAA/E,mBAAyF;AAAA,EACrG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,IAAI,aAAa;AACb,UAAM,EAAE,WAAW,YAAY,IAAI;AACnC,QAAI,aAAa,aAAa;AAC1B,aAAO,YAAY;AAAA,IACvB,OACK;AACD,aAAO,WAAG,eAAe,KAAK,YAAY,GAAG,KAAK,YAAY;AAAA,IAClE;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,IAAI,cAAc;AACd,WAAO,KAAK,aAAa;AAAA,EAC7B;AAAA,EACA,eAAeE,QAAO;AAClB,QAAI,OAAOA,WAAU,UAAU;AAG3B,UAAI,EAAE,WAAW,SAAS,UAAU,eAAe,KAAK,aAAa,IAAIA;AAEzE,UAAI,OAAO,cAAc,UAAU;AAC/B,oBAAY,KAAK,mBAAmB,WAAW,EAAE,QAAQ,SAAS;AAAA,MACtE;AACA,UAAI,OAAO,YAAY,UAAU;AAC7B,kBAAU,KAAK,mBAAmB,SAAS,EAAE,QAAQ,OAAO;AAAA,MAChE;AACA,UAAI,cAAcA,QAAO;AACrB,YAAI,aAAa,CAAC,SAAS;AACvB,oBAAU,WAAG,IAAI,WAAW,UAAU,cAAc,MAAM,IAAI;AAAA,QAClE;AACA,YAAI,CAAC,aAAa,SAAS;AACvB,sBAAY,WAAG,IAAI,SAAS,CAAC,UAAU,cAAc,MAAM,IAAI;AAAA,QACnE;AAAA,MACJ,WACS,aAAa,SAAS;AAE3B,mBAAW,WAAG,GAAG,cAAc,WAAG,KAAK,WAAW,SAAS,KAAK,IAAI,GAAG,GAAG;AAAA,MAC9E;AAEA,YAAM,eAAe,OAAO,SAASA,MAAK,IAAI,aAAa,MAAMA,MAAK,IAAIA;AAC1E,oBAAc,aAAa,YAAY;AACvC,kBAAY,aAAa,UAAU;AACnC,kBAAY,SAAS,aAAa,WAAW;AAC7C,aAAO;AAAA,IACX;AAAA,EACJ;AAAA,EACA,YAAYA,QAAO,OAAO;AA5gB9B;AA6gBQ,UAAM,SAAS,MAAM,YAAYA,QAAO,KAAK;AAE7C,QAAI,OAAO,cAAc;AACrB,YAAM,EAAE,WAAW,KAAK,IAAI,OAAO;AACnC,aAAO,WAAe;AACtB,aAAO,eAAe;AAAA,IAC1B;AAEA,QAAI,CAAC,KAAK,gBAAgB,CAAC,KAAK,aAAa;AAEzC,WAAK,cAAc,UAAU,OAAO,iBAAiB,EAAE,OAAO,aAAa,OAAO,UAAU;AACxF,eAAO;AAAA,UACH;AAAA,UACA,KAAK;AAAA,aACD,YAAO,aAAP,YAAmB,KAAK;AAAA,aACxB,YAAO,iBAAP,YAAuB,KAAK;AAAA,YAC5B,OAAO;AAAA,YACP,OAAO;AAAA,UACX;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA,EACA,MAAMA,QAAO,OAAO,QAAQ,oBAAoB,eAAe,WAAW;AACtE,QAAI,CAAC,eAAe;AAChB,MAAAA,SAAQ,KAAK,eAAeA,MAAK,KAAKA;AAAA,IAC1C;AACA,WAAO,MAAM,MAAMA,QAAO,OAAO,QAAQ,oBAAoB,eAAe,SAAS;AAAA,EACzF;AAAA;AAAA,EAEA,WAAW,SAAS,KAAK,OAAO,eAAeA,QAAO;AAClD,QAAI,QAAQ,OAAO;AACf,WAAK,kBAAkB,KAAK;AAAA,IAChC;AAEA,QAAI,QAAQ,gBAAgB;AACxB,WAAK,GAAG,IAAI;AAAA,IAChB;AACA,UAAM,WAAW,SAAS,KAAK,OAAO,eAAeA,MAAK;AAAA,EAC9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,YAAY,MAAM,SAAS;AACvB,WAAO,KAAK,MAAM,QAAQ,KAAK,KAAK,OAAO,CAAC;AAAA,EAChD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,IAAI,cAAc;AACd,UAAM,EAAE,aAAa,UAAU,IAAI;AACnC,WAAO,YAAY,eAAe;AAAA,EACtC;AAAA;AAAA,EAEA,IAAI,UAAU;AACV,UAAM,EAAE,WAAW,QAAQ,IAAI;AAC/B,WAAO,CAAC,aAAa,CAAC,WAAY,UAAU,aAAa;AAAA,EAC7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,QAAQ,OAAO,KAAK,cAAc;AACpC,QAAI,OAAO,WAAW,UAAU;AAC5B,YAAM,IAAI;AACV,eAAS;AACT,aAAO;AAAA,IACX;AACA,WAAO,KAAK,aAAa,WAAG,IAAI,KAAK,WAAW,QAAQ,MAAM,IAAI,GAAG,IAAI;AAAA,EAC7E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,IAAI,UAAU;AACV,WAAO,KAAK,YAAY,KAAK,UAAU,KAAK,GAAG;AAAA,EACnD;AAAA,EACA,IAAI,QAAQ,OAAO;AAEf,SAAK,WAAW;AAAA,EACpB;AAAA,EACA,WAAW;AAEP,WAAO,KAAK,KAAK,MAAM,MAAM,SAAS;AAAA,EAC1C;AAAA,EACA,WAAW,UAAU;AACjB,WAAO,KAAK,gBAAgB,SAAS,WAAW,SAAS,OAAO;AAAA,EACpE;AAAA,EACA,gBAAgB,OAAO,KAAK;AACxB,UACI,UAAU,KAAK,WACf,QAAU,KAAK;AACnB,WAAO,WAAW,SAAS,WAAG,eAAe,SAAS,OAAO,OAAO,GAAG;AAAA,EAC3E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAiBA,MAAM,aAAa,KAAK;AACpB,UACI,KAAiB,MACjB,QAAiB,GAAG,KAAK,GACzB;AAAA,MACI;AAAA,MACA;AAAA,MACA;AAAA,IACJ,IAAiB,IACjB,cAAiB,IAAI,SAAS,YAAY,GAC1C,gBAAiB,IAAI,SAAS,YAAY;AAC9C,QAAI,gBACA;AACJ,QAAI,OAAO,eAAe,UAAU;AAChC,uBAAiB,IAAI,SAAS,UAAU;AAExC,UAAI,eAAe,SAAS,YAAY,MAAM;AAC1C,sBAAc,aAAa,eAAe;AAAA,MAC9C,OAEK;AACD,sBAAc,YAAY,WAAG,GAAG,eAAe,MAAM,WAAW,IAAI,eAAe;AACnF,sBAAc,OAAO,eAAe;AACpC,uBAAe;AAAA,MACnB;AAAA,IACJ,OACK;AACD,uBAAiB,IAAI,SAAS,aAAa,IAAI,aAAa,GAAG,WAAW,YAAY,GAAG,YAAY;AACrG,oBAAc,aAAa,eAAe;AAAA,IAC9C;AACA,UAAM,YAAY,WAAG,IAAI,GAAG,WAAW,eAAe,WAAW,eAAe,IAAI;AACpF,QAAI,cAAc;AACd,YAAM,eAAe;AACrB,SAAG,eAAe;AAAA,IACtB,OACK;AACD,YAAM,WAAW,cAAc;AAC/B,SAAG,WAAW,eAAe;AAAA,IACjC;AACA,QAAI,YAAY;AACZ,iBAAW,IAAI,KAAK;AACpB,UAAI,mBAAmB,CAAC,WAAW,sBAAsB;AACrD,wBAAgB;AAAA,UACZ,GAAG,YAAY,IAAI,gBAAc;AAC7B,kBAAM,aAAa,OAAO,OAAO,CAAC,GAAG,WAAW,MAAM;AAAA,cAClD,SAAW,MAAM;AAAA;AAAA,cAEjB,OAAW;AAAA,cACX,UAAW;AAAA,YACf,CAAC;AACD,mBAAO,WAAW;AAClB,mBAAO;AAAA,UACX,CAAC;AAAA,QACL;AAAA,MACJ;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA,EACA,YAAY,iBAAiB,CAAC,GAAG;AAC7B,QAAI,CAAC,KAAK,aAAa;AACnB,aAAO;AAAA,IACX;AACA,UACI;AAAA,MACI;AAAA,MACA;AAAA,IACJ,IAAY,MAEZ,YAAY,eAAe,WAAW,WAAG,OAAO,oBAAI,KAAK,GAAG,IAAI;AACpE,WAAO,eAAe;AACtB,QAAI,WAAW,CAAC;AAChB,QAAI,KAAK,QAAQ;AACb,iBAAW;AAAA,QACP,sBAAuB,WAAG,OAAO,WAAW,GAAG;AAAA,QAC/C,oBAAuB,WAAG,OAAO,SAAS,GAAG;AAAA,MACjD;AAAA,IACJ,OACK;AACD,iBAAW;AAAA,QACP,SAAU,WAAG,OAAO,WAAW,IAAI;AAAA,QACnC,OAAU,WAAG,OAAO,SAAS,IAAI;AAAA,MACrC;AAAA,IACJ;AACA,UACI,UAAiB,cAAc,aAAa,cAAc,WAAW,WAAW,KAAO,cAAc,YAAY,cAAc,WAAW,UAAU,KAAM,IAC1J,gBAAgB;AAAA,MACZ,OAAW;AAAA,MACX,SAAW;AAAA,MACX,UAAW;AAAA,MACX,QAAW,oCAAoC;AAAA,MAC/C,KAAW;AAAA,IACf,GACA,cAAgB;AAAA,MACZ,OAAU;AAAA,MACV,KAAU,KAAK,KAAK;AAAA,MACpB,OAAU;AAAA,MACV,SAAU,KAAK;AAAA,MACf,SAAU;AAAA,MACV,GAAG;AAAA,MACH,GAAI,KAAK,iBAAiB,EAAE,OAAQ,KAAK,eAAe,IAAI,CAAC;AAAA,MAC7D,GAAG;AAAA,MACH,KAAU;AAAA,IACd,GACA,WAAgB,OAAO,KAAK,aAAa,EAAE,IAAI,SAAO,GAAG,OAAO,cAAc,GAAG,GAAG,GACpF,aAAgB,OAAO,KAAK,WAAW,EAAE,IAAI,SAAO,GAAG,OAAO,YAAY,GAAG,GAAG;AAEpF,aAAS,OAAO,SAAS,SAAS,GAAG,GAAG,GAAG,UAAU;AACrD,WAAO,SAAS,KAAK,IAAI;AAAA,EAC7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAaA,YAAY,gBAAgB;AACxB,QAAI,KAAK,aAAa;AAClB,YAAM,OAAO,IAAI,KAAK,CAAC,KAAK,YAAY,cAAc,CAAC,GAAG,EAAE,MAAO,gBAAgB,CAAC;AACpF,oBAAc,aAAa,OAAO,KAAK,QAAQ,WAAW,MAAM;AAAA,IACpE;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,WAAW,WAAW;AAElB,WAAO,KAAK,mBAAmB,SAAS,IAAI,OAAO;AAAA,EACvD;AAAA,EACA,gBAAgB,WAAW;AACvB,QAAI,cAAc,gBAAgB;AAC9B,aAAO,MAAM,gBAAgB,UAAU,KAAK,MAAM,gBAAgB,cAAc;AAAA,IACpF;AACA,WAAO,MAAM,gBAAgB,SAAS;AAAA,EAC1C;AACJ;AACA,SAAS,SAAS;;;AC1xBlB,IAAM,iBAAiB;AACvB,IAAM,OAAO,CAAC,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,IAAI;AACtD,IAAqB,2BAArB,cAAsDC,MAAK;AAAA,EACvD,OAAO,UAAU,QAAQ;AACrB,QAAI,WACA;AACJ,QAAK,YAAY,eAAe,KAAK,MAAM,GAAI;AAC3C,eAAS,CAAC,KAAK,QAAQ,UAAU,CAAC,CAAC,CAAC;AAEpC,UAAI,UAAU,CAAC,GAAG;AACd,kBAAU,CAAC,IAAI,SAAS,UAAU,CAAC,GAAG,EAAE;AACxC,eAAO,KAAK,UAAU,CAAC,CAAC;AAAA,MAC5B;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA,EACA,OAAO,UAAUC,MAAK;AAClB,QAAI;AAEJ,QAAI,MAAM,QAAQA,IAAG,GAAG;AACpB,OAACA,MAAK,QAAQ,IAAIA;AAAA,IACtB;AACA,YAAQ,WAAW,SAAS,SAAS,IAAI,MAAM,KAAKA,IAAG;AAAA,EAC3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,OAAO,OAAO,SAAS;AACnB,UAAM,SAAS,CAAC;AAChB,QAAI;AACJ,QAAI,SAAS;AACT,eAAS,IAAI,GAAG,IAAI,QAAQ,QAAQ,KAAK;AACrC,YAAK,YAAY,KAAK,UAAU,QAAQ,CAAC,CAAC,GAAI;AAC1C,iBAAO,KAAK,SAAS;AAAA,QACzB;AAAA,MACJ;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA,EACA,OAAO,OAAOC,OAAM;AAChB,UAAM,SAAS,CAAC;AAChB,QAAID;AACJ,QAAIC,OAAM;AACN,eAAS,IAAI,GAAG,IAAIA,MAAK,QAAQ,KAAK;AAClC,YAAKD,OAAM,KAAK,UAAUC,MAAK,CAAC,CAAC,GAAI;AACjC,iBAAO,KAAKD,IAAG;AAAA,QACnB;AAAA,MACJ;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AACJ;AACA,yBAAyB,SAAS;;;ACjDlC,IACI,oBAAoB;AADxB,IAEI,kBAAkB,eAAa;AAC3B,QAAM,SAAS,UAAU,QAAQ,mBAAmB,EAAE;AACtD,SAAO,WAAW,QAAQ,QAAQ;AACtC;AALJ,IAMI,KAAK,CAAC,MAAM,SAAS,SAAS,aAAa,SAAS,gBAAgB,MAAM,OAAO;AANrF,IAOI,wBAAwB,UAAQ,qBAAqB;AACzD,IAAI;AACJ,IAAqB,6BAArB,cAAwDE,MAAK;AAAA,EAGzD,OAAO,uBAAuB,QAAQ;AAClC,UACI,EAAE,WAAW,IAAI,QACjB;AAAA,MACI;AAAA,MACA;AAAA,MACA;AAAA,MACA,SAAU;AAAA,MACV;AAAA,IACJ,IAAI;AAKR,QAAI,CAAC,OAAO,oBAAoB,CAAC,SAAS,KAAK,kBAAkB;AAE7D,YACI,kBAAkB,WAAW,IAAI,SAAS,WAAW,UAAU,gBAAgB,SAAS,CAAC,GACzFC,WAAU,WAAW;AAAA,QACjB;AAAA,QACA,OAAO,WAAW;AAAA,MACtB;AACJ,WAAK,YAAY;AAAA,QACb,kBAAmB;AAAA,QACnB,WAAmB,SAAS;AAAA,QAC5B,SAAAA;AAAA,QACA;AAAA,QACA;AAAA,MACJ,CAAC;AAAA,IACL;AAEA,UAAM,gBAAgB,SAAS;AAE/B,QAAI;AAAA,MACA,YAAY;AAAA,MACZ,UAAY;AAAA,IAChB,IAAI;AAEJ,QAAI,YAAY,eAAe;AAC3B,kBAAY;AAAA,IAChB;AAEA,QAAI,OAAO;AACP,UAAI,CAAC,WAAW,UAAU,OAAO;AAC7B,kBAAU;AAAA,MACd;AAAA,IACJ,WAKS,SAAS,YAAY,eAAe;AAEzC,WAAK,YAAY;AAAA,QACb;AAAA,QACA,IAAK;AAAA,MACT,CAAC;AAED,UAAI,CAAC,WAAW,UAAU,oBAAoB;AAE1C,kBAAU,IAAI,KAAK,mBAAmB,QAAQ,IAAI,CAAC;AAAA,MACvD;AAAA,IACJ;AAEA,UAAM,sBAAsB;AAQ5B,QAAI,CAAC,OAAO,WAAW;AACnB,kBAAY,IAAI,KAAK,WAAW,IAAI,WAAW,IAAI,WAAW,CAAC,UAAU,gBAAgB,SAAS,CAAC,GAAG,aAAa,CAAC;AAAA,IACxH;AACA,WAAO,OAAO,OAAO;AAAA,MACjB,WAAY,CAAC;AAAA;AAAA,MAEb,WAAY,CAAC,QAAQ,SAAS,UAAU;AAAA,IAC5C,GAAG,QAAQ;AAAA,MACP;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA,WAAwB,mCAAS;AAAA,MACjC,iBAAwB,cAAc,QAAQ;AAAA,MAC9C,uBAAwB,oBAAoB,QAAQ;AAAA,MACpD,YAAwB,SAAS;AAAA,MACjC,YAAwB,aAAa,iBAAiB,UAAU;AAAA,IACpE,CAAC;AAAA,EACL;AAAA,EACA,OAAO,mBAAmB,OAAO;AAC7B,QAAI,MAAM,cAAc;AACpB,aAAO,WAAW,KAAK,MAAM,kBAAkB,WAAW,MAAM,WAAW,gBAAgB,MAAM,kBAAkB,WAAW,SAAS,CAAC;AAAA,IAC5I;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,OAAO,kBAAkB,WAAW,SAASC,MAAK,OAAO;AACrD,QAAI,QAAQ,MAAM;AAClB,QAAI,OAAO;AACP,UAAI,QAAQ,GAAG;AACX,eAAO;AACP,qBAAa;AAAA,MACjB,OACK;AACD,eAAO;AACP,qBAAa;AAAA,MACjB;AAEA,YAAM,QAAQA,OAAM,WAAW,OAAO;AAGtC,UAAI,OAAO,QAAQ,GAAG;AAClB,iBAAS;AAAA,MACb;AAKA,eAAS,IAAI,KAAK,UAAU;AAC5B,aAAO,QAAQ,WAAW,QAAQ,KAAK,QAAQ,QAAQ,IAAI,KAAK;AAGhE,UAAI,SAAS,aAAa,SAAS,SAAS;AACxC,iBAAS;AAAA,MACb;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA,EACA,OAAO,UAAU,MAAMC,QAAO,MAAM;AAChC,UAAM,KAAK,IAAI,KAAK,MAAMA,QAAO,IAAI;AACrC,QAAI,GAAG,YAAY,MAAM,QAAQ,GAAG,SAAS,MAAMA,UAAS,GAAG,QAAQ,MAAM,MAAM;AAC/E,aAAO;AAAA,IACX;AAAA,EACJ;AAAA,EACA,OAAO,gBAAgB,UAAU;AAC7B,WAAO,QAAQ,QAAQ;AAAA,EAC3B;AAAA,EACA,OAAO,uBAAuB,OAAO,WAAWC,KAAI,OAAO;AACvD,UAAM,cAAc,MAAM,QACtB,YAAgB,CAAC;AACrB,aAAS,IAAI,GAAG,IAAI,UAAU,QAAQ,KAAK;AACvC,YAAM,QAAQ,UAAU,CAAC;AACzB,UAAI,KAAK,gBAAgB,KAAK,GAAG;AAC7B,cAAM,OAAO,QAAQ,IAAI,MAAM,QAAQ,CAAC,IAAI,MAAM,cAAc,KAAK;AACrE,YAAI,QAAQ,CAAC,UAAU,KAAK,QAAQ,CAAC,GAAG;AAEpC,oBAAU,KAAK,QAAQ,CAAC,IAAI;AAE5B,cAAIA,IAAG,KAAK,OAAO,IAAI,MAAM,OAAO;AAChC,mBAAO;AAAA,UACX;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,OAAO,SAAS,WAAW,gBAAgB,qBAAqB,YAAY,UAAU;AAClF,YACI,YACM,kBAAkB,sBAClB,eAAe,QAAQ,IAAI,aAAa,wBAC7C,CAAC,SAAS,aAAa,cAAc;AAAA,EAC9C;AAAA;AAAA,EAEA,OAAO,WAAW,WAAW,eAAe,kBAAkB,uBAAuB,YAAY,UAAU;AACvG,YACI,YACM,oBAAoB,wBACpB,mBAAmB,aAAa,0BACrC,CAAC,SAAS,aAAa,aAAa;AAAA,EAC7C;AACJ;AAtLI,cADiB,4BACV,aAAY;AACnB,cAFiB,4BAEV,yBAAwB;AAsLnC,2BAA2B,SAAS;;;AC7LpC,IAAqB,0BAArB,cAAqD,2BAA2B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAmB5E,OAAO,YAAY,QAAQ;AACvB,UACI;AAAA,MACI;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA,IAAAC;AAAA,MACA;AAAA,MACA,QAAQ;AAAA,IACZ,IAAmB,KAAK,uBAAuB,MAAM,GACrD,EAAE,SAAS,IAAQ,YACnBC,SAAmB,YAAY,eAE/B,mBAAmB,WAAW,OAC9B,mBAAmB,KAAK,MAAMA,SAAQ,gBAAgB;AAC1D,QAAI,EAAE,MAAM,IAAU,YAClB,UAAkB,GAClB,iBAAkB,WAAW,IAAI,eAAe,mBAAmB,UAAU,KAAK,GAClF,mBAAmB,eAAe,QAAQ;AAC9C,QAAI,CAAC,WAAW,CAAC,OAAO;AACpB,cAAQ,KAAK;AAAA,IACjB;AACA,WAAO,CAAC,aAAa,mBAAmB,WAAW;AAC/C,YAAM,SAAS,KAAK,WAAW,WAAW,gBAAgB,kBAAkB,uBAAuB,YAAY,QAAQ;AACvH;AACA,UAAI,WACE,aAAa,mBAAmB,aAAcD,IAAG,MAAM,OAAO,CAAC,gBAAgB,SAAS,YAAY,KAAK,YAAY,UAAU,GAAG,SAAS,CAAC,MAAM,SAAU,SAAS,WAAW,QACpL;AACE;AAAA,MACJ;AAEA,uBAAiB,WAAW,IAAI,gBAAgB,UAAU,KAAK;AAC/D,yBAAmB,eAAe,QAAQ;AAAA,IAC9C;AAAA,EACJ;AACJ;AA5DI,cADiB,yBACV,aAAY;AA6DvB,wBAAwB,SAAS;;;AC7DjC,IAAqB,2BAArB,cAAsD,2BAA2B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAiB7E,OAAO,YAAY,QAAQ;AACvB,UACI;AAAA,MACI;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA,IAAAE;AAAA,MACA;AAAA,MACA,QAAQ;AAAA,IACZ,IAAwB,KAAK,uBAAuB,MAAM,GAC1D;AAAA,MACI;AAAA,MACA,MAAAC;AAAA,IACJ,IAAwB,YACxB,EAAE,aAAa,IAAS,YACxB,aAAwB,cAAc,SAAS,GAC/C,eAAwB,cAAc,WAAW,GACjD,eAAwB,cAAc,WAAW,GACjD,UAAwB,cAAc,gBAAgB;AAC1D,QAAI,UAAa,GACb,EAAE,MAAM,IAAK,YACb,WAAa,yBAAe,OAAOA,KAAI,GACvC,eAAe;AAEnB,QAAI,EAAC,qCAAU,SAAQ;AACnB,iBAAW,CAAC,CAAC,cAAc,OAAO,CAAC,CAAC;AAAA,IACxC;AAKA,QAAI,eAAe,GAAG;AAClB,eAAS,IAAI,GAAG,IAAI,SAAS,QAAQ,KAAK;AACtC,YAAI,eAAe,SAAS,CAAC,EAAE,CAAC,GAAG;AAC/B,mBAAS,CAAC,EAAE,CAAC,IAAI,IAAI,eAAe,SAAS,CAAC,EAAE,CAAC;AAAA,QACrD,OACK;AACD,mBAAS,CAAC,EAAE,CAAC,KAAK;AAAA,QACtB;AAAA,MACJ;AAAA,IACJ;AAEA,aAAS,KAAK,CAAC,GAAG,MAAM,EAAE,CAAC,IAAI,EAAE,CAAC,CAAC;AAGnC,oBAAgB,WAAW,QAAQ,SAAS,WAAW,IAAI,gBAAgB,WAAW,QAAQ,CAAC;AAC/F,QAAI,CAAC,aAAa,CAAC,OAAO;AACtB,cAAQ,KAAK;AAAA,IACjB;AACA,WAAO,CAAC,aAAa,cAAc,QAAQ,IAAI,WAAW;AACtD,eAAS,IAAI,GAAG,IAAI,SAAS,QAAQ,KAAK;AAEtC,yBAAiB,IAAI;AAAA,UACjB,cAAc,YAAY;AAAA,UAC1B,cAAc,SAAS;AAAA,UACvB,cAAc,QAAQ,IAAI,SAAS,CAAC,EAAE,CAAC;AAAA,UACvC;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,QACJ;AACA,cAAM,mBAAmB,eAAe,QAAQ;AAChD,YAAI,oBAAoB,iBAAiB;AACrC,gBAAM,SAAS,KAAK,WAAW,WAAW,gBAAgB,kBAAkB,uBAAuB,YAAY,QAAQ;AACvH;AACA,cAAI,WACE,aAAa,oBAAoB,aAClCD,IAAG,MAAM,OAAO,CAAC,gBAAgB,SAAS,YAAY,KAAK,YAAY,UAAU,GAAG,SAAS,CAAC,MAAM,SACpG,SAAS,WAAW,QACvB;AACE;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ;AAEA,sBAAgB,WAAW,QAAQ,eAAe,QAAQ,QAAQ;AAAA,IACtE;AAAA,EACJ;AACJ;AArGI,cADiB,0BACV,aAAY;AAsGvB,yBAAyB,SAAS;;;ACvGlC,IAAqB,4BAArB,cAAuD,2BAA2B;AAAA,EAE9E,OAAO,iBAAiB,MAAM,QAAQ;AAClC,UAAM,cAAc,WAAW,YAAY,IAAI;AAC/C,QAAI,SAAS;AACb,QAAI,UAAU,KAAK,IAAI,MAAM,KAAK,aAAa;AAC3C,eAAS,IAAI,KAAK,KAAK,YAAY,GAAG,KAAK,SAAS,GAAG,SAAS,IAAI,cAAc,SAAS,IAAI,MAAM;AAAA,IACzG;AACA,WAAO;AAAA,EACX;AAAA,EACA,OAAO,gBAAgB,UAAU;AAC7B,WAAO,YAAY,KAAK,IAAI,QAAQ,IAAI,KAAK,KAAK,IAAI,QAAQ,KAAK;AAAA,EACvE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAgBA,OAAO,YAAY,QAAQ;AACvB,UACI;AAAA,MACI;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA,IAAAE;AAAA,MACA;AAAA,MACA,QAAQ;AAAA,IACZ,IAAiB,KAAK,uBAAuB,MAAM,GACnD;AAAA,MACI;AAAA,MACA,MAAAC;AAAA,MACA;AAAA,MACA;AAAA,IACJ,IAAI,YACJ,WAAiB,yBAAe,OAAOA,KAAI,GAC3C,eAAiB,aAAa,UAAU,QACxC,gBAAiB,CAAC;AACtB,QACI,EAAE,UAAU,IAAK,YACjB,UAAiB,GACjB,iBACA,gBAAgB,cAChB,OAAO,gBAAgB;AAG3B,qBAAiB,WAAW,QAAQ,SAAS,WAAW,IAAI,gBAAgB,WAAW,OAAO;AAC9F,mBAAiB,IAAI,KAAK,WAAW,QAAQ,gBAAgB,SAAS,CAAC,IAAI,CAAC;AAE5E,QAAI,EAAE,aAAa,UAAU,WAAW,EAAE,YAAY,SAAS,SAAS;AACpE,kBAAY,CAAC,cAAc,QAAQ,CAAC;AAAA,IACxC;AACA,QAAI,YAAY,SAAS,QAAQ;AAE7B,eAAS,QAAQ,CAAAC,SAAO;AACpB,YAAIA,KAAI,CAAC,GAAG;AACR,4BAA0B,mBAAmB,CAAC;AAC9C,0BAAgBA,KAAI,CAAC,CAAC,IAAIA,KAAI,CAAC;AAAA,QACnC;AAAA,MACJ,CAAC;AAAA,IACL;AACA,YAAQ,CAAC,WAAW,UAAU,oBAAoB,CAAC,SAAS,UAAU,QAAQ;AAC1E,cAAQ,CAAC;AACT,UAAI,YAAY,SAAS,QAAQ;AAC7B,iBAAS,QAAQ,CAAAA,SAAO;AACpB,gBAAM,UAAUA,KAAI,CAAC;AACrB,cAAI,OAAU,GACV,OAAU;AAEd,cAAIA,KAAI,CAAC,GAAG;AACR,mBAAO,OAAOA,KAAI,CAAC;AAAA,UACvB;AACA,eAAK,IAAI,MAAM,KAAK,MAAM,KAAK;AAC3B,gBAAK,iBAAiB,KAAK,kBAAkB,gBAAgB,cAAc,SAAS,CAAC,GAAI;AACrF,+BAAiB,WAAW,eAAe,gBAAgB,aAAa;AACxE,kBAAI,CAAC,cAAc,eAAe,QAAQ,CAAC,GAAG;AAE1C,8BAAc,eAAe,QAAQ,CAAC,IAAI;AAC1C,sBAAM,KAAK,cAAc;AAAA,cAC7B;AAAA,YACJ;AAAA,UACJ;AAAA,QACJ,CAAC;AACD,cAAM,KAAK,CAAC,GAAG,MAAM,IAAI,CAAC;AAC1B,YAAI,CAAC,cAAc;AACf,eAAK,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AAC/B,6BAAiB,MAAM,CAAC;AACxB,gBAAI,kBAAkB,eAAe;AACjC,oBAAM,SAAS,KAAK,SAAS,WAAW,gBAAgB,qBAAqB,YAAY,QAAQ;AACjG;AACA,kBAAI,WACE,WAAW,kBAAkB,WAAaF,IAAG,MAAM,OAAO,CAAC,gBAAgB,SAAS,YAAY,KAAK,YAAY,UAAU,GAAG,SAAS,CAAC,MAAM,SAAW,SAAS,WAAW,QACjL;AACE,uBAAO;AAAA,cACX;AAAA,YACJ;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ,OACK;AACD,cAAM,mBAAmB,CAAC;AAC1B,aAAK,IAAI,GAAG,IAAI,UAAU,QAAQ,KAAK;AAEnC,eAAK,iBAAiB,KAAK,iBAAiB,gBAAgB,UAAU,CAAC,CAAC,MAAM,CAAC,cAAc,eAAe,QAAQ,CAAC,GAAG;AACpH,0BAAc,eAAe,QAAQ,CAAC,IAAI;AAC1C,6BAAiB,KAAK,cAAc;AAAA,UACxC;AAAA,QACJ;AAEA,yBAAiB,KAAK,CAAC,GAAG,MAAM,IAAI,CAAC;AACrC,aAAK,IAAI,GAAG,IAAI,iBAAiB,QAAQ,KAAK;AAC1C,2BAAiB,WAAW,eAAe,iBAAiB,CAAC,GAAG,aAAa;AAC7E,cAAI,cAAc;AACd,kBAAM,KAAK,cAAc;AAAA,UAC7B,WACS,kBAAkB,eAAe;AACtC,kBAAM,SAAS,KAAK,SAAS,WAAW,gBAAgB,qBAAqB,YAAY,QAAQ;AACjG;AACA,gBAAI,WACE,WAAW,iBAAiB,WAAaA,IAAG,MAAM,OAAO,CAAC,gBAAgB,SAAS,YAAY,KAAK,YAAY,UAAU,GAAG,SAAS,CAAC,MAAM,SAAW,SAAS,WAAW,QAChL;AACE;AAAA,YACJ;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ;AACA,UAAI,gBAAgB,MAAM,QAAQ;AAC9B,aAAK,uBAAuB,OAAO,WAAW,CAAAG,oBAAkB;AAC5D,cAAIA,mBAAkB,eAAe;AACjC,kBAAM,SAAS,YAAYA,mBAAkB,sBAAsBA,gBAAe,QAAQ,IAAI,aAAa,uBAAuB,CAAC,SAAS,aAAaA,eAAc;AACvK;AAEA,gBAAI,WAAW,CAAC,WAAWA,mBAAkB;AAAA,aAExCH,IAAG,MAAM,OAAO,CAACG,iBAAgB,SAAS,YAAY,KAAK,YAAY,UAAU,GAAG,SAAS,CAAC,MAAM,SAAU,SAAS,WAAW,QACrI;AACE,qBAAO;AAAA,YACX;AAAA,UACJ;AAAA,QACJ,CAAC;AAAA,MACL;AAEA,uBAAiB,WAAW,QAAQ,gBAAgB,SAAS,QAAQ;AACrE,qBAAiB,IAAI,KAAK,WAAW,QAAQ,gBAAgB,SAAS,CAAC,IAAI,CAAC;AAAA,IAChF;AAAA,EACJ;AACJ;AAhKI,cADiB,2BACV,aAAY;AAiKvB,0BAA0B,SAAS;;;AClKnC,IAAqB,2BAArB,cAAsD,2BAA2B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAiB7E,OAAO,YAAY,QAAQ;AACvB,UACI;AAAA,MACI;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA,IAAAC;AAAA,MACA;AAAA,MACA,QAAQ;AAAA,IACZ,IAAiB,KAAK,uBAAuB,MAAM,GACnD;AAAA,MACI;AAAA,MACA,MAAAC;AAAA,MACA;AAAA,MACA;AAAA,IACJ,IAAI,YACJ,WAAiB,yBAAe,OAAOA,KAAI,GAC3C,eAAiB,aAAa,UAAU,QACxC,gBAAiB,CAAC;AACtB,QACI,EAAE,OAAO,IAAQ,YACjB,UAAiB,GACjB,GAAG,gBAAgB,OAAO,eAAe,aAAa;AAG1D,oBAAgB,WAAW,QAAQ,SAAS,WAAW,IAAI,gBAAgB,WAAW,MAAM;AAC5F,kBAAgB,IAAI,KAAK,WAAW,QAAQ,eAAe,QAAQ,CAAC,IAAI,CAAC;AACzE,cAAU,OAAO,KAAK,CAAC,GAAG,MAAM,IAAI,CAAC;AAErC,QAAI,EAAE,UAAU,OAAO,WAAW,EAAE,YAAY,SAAS,SAAS;AAC9D,eAAS,CAAC,cAAc,SAAS,IAAI,CAAC;AAAA,IAC1C;AACA,QAAI,YAAY,SAAS,QAAQ;AAE7B,eAAS,QAAQ,CAAAC,SAAO;AACpB,YAAIA,KAAI,CAAC,GAAG;AACR,4BAA0B,mBAAmB,CAAC;AAC9C,0BAAgBA,KAAI,CAAC,CAAC,IAAIA,KAAI,CAAC;AAAA,QACnC;AAAA,MACJ,CAAC;AAAA,IACL;AACA,YAAQ,CAAC,WAAW,UAAU,mBAAmB,CAAC,SAAS,UAAU,QAAQ;AACzE,cAAQ,CAAC;AACT,UAAI,YAAY,SAAS,QAAQ;AAC7B,iBAAS,QAAQ,CAAAA,SAAO;AACpB,gBAAM,UAAUA,KAAI,CAAC;AACrB,cACI,OAAO,GACP,OAAO;AAEX,cAAIA,KAAI,CAAC,GAAG;AACR,mBAAO,OAAOA,KAAI,CAAC;AAAA,UACvB;AACA,eAAK,IAAI,MAAM,KAAK,MAAM,KAAK;AAC3B,gBAAK,iBAAiB,KAAK,kBAAkB,eAAe,aAAa,SAAS,CAAC,GAAI;AACnF,+BAAiB,WAAW,eAAe,gBAAgB,aAAa;AACxE,kBAAI,CAAC,cAAc,eAAe,QAAQ,CAAC,GAAG;AAE1C,8BAAc,eAAe,QAAQ,CAAC,IAAI;AAC1C,sBAAM,KAAK,cAAc;AAAA,cAC7B;AAAA,YACJ;AAAA,UACJ;AAAA,QACJ,CAAC;AACD,cAAM,KAAK,CAAC,GAAG,MAAM,IAAI,CAAC;AAC1B,YAAI,CAAC,cAAc;AACf,eAAK,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AAC/B,6BAAiB,MAAM,CAAC;AACxB,gBAAI,kBAAkB,eAAe;AACjC,oBAAM,SAAS,KAAK,SAAS,WAAW,gBAAgB,qBAAqB,YAAY,QAAQ;AACjG;AACA,kBAAI,WACE,WAAW,kBAAkB,WAC9BF,IAAG,MAAM,OAAO,CAAC,gBAAgB,SAAS,YAAY,KAAK,YAAY,UAAU,GAAG,SAAS,CAAC,MAAM,SACpG,SAAS,WAAW,QACvB;AACE;AAAA,cACJ;AAAA,YACJ;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ,OACK;AACD,aAAK,IAAI,GAAG,IAAI,OAAO,QAAQ,KAAK;AAChC,cAAK,iBAAiB,KAAK,UAAU,cAAc,YAAY,GAAG,OAAO,CAAC,IAAI,GAAG,cAAc,QAAQ,CAAC,GAAI;AACxG,6BAAiB,WAAW,eAAe,gBAAgB,aAAa;AAExE,gBAAI,CAAC,cAAc,eAAe,QAAQ,CAAC,GAAG;AAC1C,4BAAc,eAAe,QAAQ,CAAC,IAAI;AAC1C,kBAAI,cAAc;AACd,sBAAM,KAAK,cAAc;AAAA,cAC7B,WACS,kBAAkB,eAAe;AACtC,sBAAM,SAAS,YAAY,kBAAkB,sBAAsB,eAAe,QAAQ,IAAI,aAAa,uBAAuB,CAAC,SAAS,aAAa,cAAc;AACvK;AACA,oBAAI,WACE,WAAW,kBAAkB,WAC9BA,IAAG,MAAM,OAAO,CAAC,gBAAgB,SAAS,YAAY,KAAK,YAAY,UAAU,GAAG,SAAS,CAAC,MAAM,SACpG,SAAS,WAAW,QACvB;AACE;AAAA,gBACJ;AAAA,cACJ;AAAA,YACJ;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ;AACA,UAAI,gBAAgB,MAAM,QAAQ;AAC9B,aAAK,uBAAuB,OAAO,WAAW,CAAAG,oBAAkB;AAC5D,cAAIA,mBAAkB,eAAe;AACjC,kBAAM,SAAS,YAAYA,mBAAkB,sBAAsBA,gBAAe,QAAQ,IAAI,aAAa,uBAAuB,CAAC,SAAS,aAAaA,eAAc;AACvK;AAEA,gBAAI,WAAW,CAAC,WAAWA,kBAAiB,UAAU;AAElD,kBAAIH,IAAG,MAAM,OAAO,CAACG,iBAAgB,SAAS,YAAY,KAAK,YAAY,UAAU,GAAG,SAAS,CAAC,MAAM,SAAU,SAAS,WAAW,OAAQ;AAC1I,uBAAO;AAAA,cACX;AAAA,YACJ;AAAA,UACJ;AAAA,QACJ,CAAC;AAAA,MACL;AAEA,sBAAgB,WAAW,QAAQ,eAAe,QAAQ,QAAQ;AAClE,oBAAgB,IAAI,KAAK,WAAW,QAAQ,eAAe,QAAQ,CAAC,IAAI,CAAC;AAAA,IAC7E;AAAA,EACJ;AACJ;AArJI,cADiB,0BACV,aAAY;AAsJvB,yBAAyB,SAAS;;;ACxJlC,IAAM,sBAAsB,CAAC;AAC7B,CAAC,yBAAyB,0BAA0B,2BAA2B,wBAAwB,EAAE,QAAQ,QAAM;AACnH,sBAAoB,GAAG,SAAS,IAAI;AACxC,CAAC;AACD,SAAS,iCAAiC,OAAO;AAC7C,MAAI,OAAO;AACP,QAAI,OAAO,SAAS,UAAU;AAC1B,cAAQ,MAAM,MAAM,GAAG,EAAE,IAAI,UAAQ,SAAS,MAAM,EAAE,CAAC;AAAA,IAC3D;AAAA,EACJ,OACK;AACD,YAAQ;AAAA,EACZ;AACA,SAAO;AACX;AACA,SAAS,0BAA0B,OAAO;AACtC,MAAI,OAAO;AACP,QAAI,OAAO,SAAS,UAAU;AAC1B,cAAQ,MAAM,MAAM,GAAG;AAAA,IAC3B;AAAA,EACJ,OACK;AACD,YAAQ;AAAA,EACZ;AACA,SAAO;AACX;AACA,SAAS,gBAAgB,QAAQ,QAAQ;AACrC,SAAO,OAAO,MAAM,MAAM,OAAO,MAAM;AAC3C;AACA,SAAS,eAAe,OAAO;AAC3B,MAAI,KAAK,gBAAgB,UAAU,QAAW;AAC1C,WAAO,KAAK;AAAA,EAChB;AACA,MAAI,KAAK,aAAa,SAAS,MAAM;AACjC,WAAO;AAAA,EACX;AACA,UAAQ,SAAS,KAAK;AACtB,SAAO,MAAM,KAAK,IAAI,SAAY;AACtC;AAUA,IAAqB,kBAArB,cAA6C,MAAM;AAAA,EAC/C,WAAW,QAAQ;AACf,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,IAAI,oBAAoB;AACpB,WAAO;AAAA,EACX;AAAA;AAAA,EAEA,WAAW,SAAS;AAChB,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA,MAKH,EAAE,MAAO,aAAa,cAAe,QAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAM7C,EAAE,MAAO,YAAY,cAAe,GAAG,SAAU,eAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAMhE,EAAE,MAAO,WAAW,MAAO,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAOlC,EAAE,MAAO,SAAS,WAAY,MAAM,SAAU,eAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAW7D;AAAA,QACI,MAAU;AAAA,QACV,SAAU;AAAA,QACV,SAAU;AAAA,MACd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAOA;AAAA,QACI,MAAU;AAAA,QACV,SAAU;AAAA,QACV,SAAU;AAAA,MACd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAOA;AAAA,QACI,MAAU;AAAA,QACV,SAAU;AAAA,QACV,SAAU;AAAA,MACd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAOA;AAAA,QACI,MAAU;AAAA,QACV,SAAU;AAAA,QACV,SAAU;AAAA,MACd;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,IAAI,aAAa;AACb,WAAO,KAAK,eAAe;AAAA,EAC/B;AAAA,EACA,IAAI,WAAWC,SAAQ;AACnB,SAAK,cAAcA;AAAA,EACvB;AAAA,EACA,IAAI,qBAAqB;AACrB,WAAO,oBAAoB,KAAK,SAAS;AAAA,EAC7C;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,IAAI,WAAW;AACX,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,IAAI,SAAS,OAAO;AAChB,SAAK,YAAY;AAAA,EACrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,IAAI,OAAO;AACP,UACI,KAAS,MACT,SAAS,CAAC;AACd,QAAI,GAAG,WAAW;AACd,aAAO,KAAK,QAAQ,GAAG,WAAW;AAClC,UAAI,GAAG,WAAW,GAAG;AACjB,eAAO,KAAK,YAAY,GAAG,UAAU;AAAA,MACzC;AACA,UAAI,GAAG,QAAQ,GAAG,KAAK,QAAQ;AAC3B,eAAO,KAAK,WAAW,GAAG,KAAK,KAAK,GAAG,CAAC;AAAA,MAC5C;AACA,UAAI,GAAG,aAAa,GAAG,UAAU,QAAQ;AACrC,eAAO,KAAK,gBAAgB,GAAG,UAAU,KAAK,GAAG,CAAC;AAAA,MACtD;AACA,UAAI,GAAG,UAAU,GAAG,OAAO,QAAQ;AAC/B,eAAO,KAAK,aAAa,GAAG,OAAO,KAAK,GAAG,CAAC;AAAA,MAChD;AACA,UAAI,GAAG,OAAO;AACV,eAAO,KAAK,SAAS,GAAG,OAAO;AAAA,MACnC;AACA,UAAI,GAAG,SAAS;AACZ,eAAO,KAAK,WAAW,WAAW,OAAO,GAAG,SAAS,GAAG,UAAU,CAAC;AAAA,MACvE;AACA,UAAI,GAAG,aAAa,GAAG,UAAU,QAAQ;AACrC,eAAO,KAAK,cAAc,GAAG,UAAU,KAAK,GAAG,CAAC;AAAA,MACpD;AAAA,IACJ;AACA,WAAO,OAAO,KAAK,GAAG;AAAA,EAC1B;AAAA,EACA,IAAI,KAAK,MAAM;AACX,UACI,KAAS,MACT,SAAS;AAAA,MACL,WAAY;AAAA,MACZ,UAAY;AAAA,MACZ,OAAY;AAAA,MACZ,SAAY;AAAA,MACZ,MAAY;AAAA,MACZ,WAAY;AAAA,MACZ,QAAY;AAAA,MACZ,WAAY;AAAA,IAChB;AACJ,OAAG,WAAW;AACd,QAAI,MAAM;AACN,YAAM,QAAQ,KAAK,MAAM,GAAG;AAC5B,eAAS,IAAI,GAAG,MAAM,MAAM,QAAQ,IAAI,KAAK,KAAK;AAC9C,cACI,OAAO,MAAM,CAAC,EAAE,MAAM,GAAG,GACzB,QAAS,KAAK,CAAC;AACnB,gBAAQ,KAAK,CAAC,GAAG;AAAA,UACb,KAAK;AACD,mBAAO,YAAY;AACnB;AAAA,UACJ,KAAK;AACD,mBAAO,WAAW;AAClB;AAAA,UACJ,KAAK;AACD,mBAAO,QAAQ;AACf,mBAAO,QAAQ;AACf;AAAA,UACJ,KAAK;AACD,gBAAI,OAAO;AACP,qBAAO,UAAU,WAAW,MAAM,OAAO,GAAG,UAAU;AAAA,YAC1D,OACK;AACD,qBAAO,UAAU;AAAA,YACrB;AACA,mBAAO,QAAQ;AACf;AAAA,UACJ,KAAK;AACD,mBAAO,OAAO;AACd;AAAA,UACJ,KAAK;AACD,mBAAO,YAAY;AACnB;AAAA,UACJ,KAAK;AACD,mBAAO,SAAS;AAChB;AAAA,UACJ,KAAK;AACD,mBAAO,YAAY;AACnB;AAAA,QACR;AAAA,MACJ;AAAA,IACJ;AACA,OAAG,IAAI,MAAM;AACb,QAAI,MAAM;AACN,SAAG,SAAS;AAAA,IAChB;AACA,OAAG,SAAS;AAAA,EAChB;AAAA,EACA,UAAU,OAAO,CAAC,GAAG;AACjB,UACI,KAAqB,MACrB,EAAE,MAAM,SAAS,IAAI;AACzB,OAAG,8BAA8B;AACjC,WAAO,KAAK;AACZ,WAAO,KAAK;AACZ,UAAM,UAAU,GAAG,SAAS;AAC5B,QAAI,MAAM;AACN,SAAG,yBAAyB;AAC5B,SAAG,OAAO;AACV,SAAG,wBAAwB;AAAA,IAC/B;AACA,OAAG,WAAW;AAAA,EAClB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAcA,kBAAkB,WAAW,SAASC,KAAI;AACtC,QAAI,KAAK,SAAS,WAAW;AACzB,WAAK,mBAAmB,YAAY;AAAA,QAChC,YAAa;AAAA,QACb;AAAA,QACA;AAAA,QACA,GAAG,MAAM,SAAS,OAAO,UAAU;AAC/B,iBAAOA,IAAG,SAAS,gBAAgB,MAAM,KAAK,GAAG,OAAO,SAAS,IAAI;AAAA,QACzE;AAAA,MACJ,CAAC;AAAA,IACL;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,WAAW;AAnTf;AAoTQ,UACI,KAAoB,MACpB,qBAAoB,QAAG,aAAH,mBAAa,WACjC,SAAoB,CAAC;AACzB,OAAG,eAAe;AAClB,YAAQ,GAAG,WAAW;AAAA,MAClB,KAAK;AACD,eAAO,YAAe;AACtB,eAAO,OAAe;AACtB,eAAO,YAAe;AACtB,eAAO,SAAe;AACtB;AAAA,MACJ,KAAK,UAAW;AACZ,eAAO,YAAY;AACnB,eAAO,YAAY;AACnB,eAAO,SAAS;AAChB,cAAM,EAAE,MAAAC,MAAK,IAAI;AACjB,YAAI,sBAAqBA,SAAA,gBAAAA,MAAM,YAAW,KAAKA,MAAK,CAAC,MAAM,yBAAyB,UAAU,kBAAkB,OAAO,CAAC,GAAG;AACvH,iBAAO,OAAO;AAAA,QAClB;AACA;AAAA,MACJ;AAAA,MACA,KAAK,WAAY;AACb,aAAI,QAAG,cAAH,mBAAc,QAAQ;AACtB,iBAAO,YAAY;AACnB,iBAAO,OAAO;AAAA,QAClB;AACA,eAAO,SAAS;AAChB,cAAM,EAAE,UAAU,IAAI;AACtB,YAAI,sBAAqB,uCAAW,YAAW,KAAK,UAAU,CAAC,MAAM,kBAAkB,QAAQ,GAAG;AAC9F,iBAAO,YAAY;AAAA,QACvB;AACA;AAAA,MACJ;AAAA,MACA,KAAK,UAAW;AACZ,eAAO,YAAY;AACnB,cAAM,EAAE,OAAO,IAAI;AACnB,YAAI,sBAAqB,iCAAQ,YAAW,KAAK,OAAO,CAAC,MAAM,kBAAkB,SAAS,IAAI,GAAG;AAC7F,iBAAO,SAAS;AAAA,QACpB;AACA;AAAA,MACJ;AAAA,IACJ;AACA,OAAG,IAAI,MAAM;AACb,OAAG,eAAe;AAAA,EACtB;AAAA,EACA,QAAQ,MAAM;AACV,UAAM,SAAS,MAAM,KAAK,GAAG,IAAI;AACjC,WAAO,aAAa,KAAK;AACzB,WAAO,WAAa,KAAK;AACzB,WAAO;AAAA,EACX;AAAA,EACA,YAAY,OAAO,QAAQ,QAAQ;AAC/B,UACI,SAAe,MAAM,YAAY,OAAO,QAAQ,MAAM,GACtD,EAAE,SAAS,IAAI;AACnB,QAAI,CAAC,KAAK,cAAc;AAEpB,WAAK,SAAS;AAAA,IAClB;AACA,QAAI,UAAU;AACV,eAAS,uBAAuB,IAAI;AACpC,UAAI,CAAC,KAAK,8BAA8B;AACpC,iBAAS,oBAAoB;AAAA,MACjC;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA,EACA,IAAIC,QAAO,UAAU,MAAM;AACvB,UAAM,SAAS,OAAOA,WAAU,WAAWA,SAAQ,EAAE,CAACA,MAAK,GAAI,MAAM;AAErE,QAAI,OAAO,OAAO;AACd,aAAO,UAAU;AAAA,IACrB,WAES,OAAO,SAAS;AACrB,aAAO,QAAQ;AAAA,IACnB;AACA,UAAM,IAAI,QAAQ,QAAW,GAAG,IAAI;AAAA,EACxC;AAAA,EACA,IAAI,+BAA+B;AAC/B,WAAO,QAAQ,KAAK,2BAA2B;AAAA,EACnD;AAAA,EACA,2BAA2B;AACvB,SAAK;AAAA,EACT;AAAA,EACA,0BAA0B;AACtB,QAAI,KAAK;AAA6B,WAAK;AAAA,EAC/C;AACJ;AACA,gBAAgB,SAAS;;;ACzYzB,SAAS,2BAA2B,OAAO;AACvC,QACI,SAAiB,CAAC,GAClB,EAAE,WAAW,IAAI;AACrB,MAAI,OAAO;AACP,YAAQ,OAAO,SAAS,WAAW,MAAM,MAAM,GAAG,IAAI,YAAY,QAAQ,KAAK;AAC/E,UAAM,QAAQ,UAAQ;AAClB,UAAI,OAAO,QAAQ,UAAU;AACzB,eAAO,WAAW,MAAM,MAAM,UAAU;AAAA,MAC5C;AAEA,UAAI,CAAC,MAAM,IAAI,GAAG;AACd,eAAO,WAAW,QAAQ,IAAI,CAAC,IAAI;AAAA,MACvC;AAAA,IACJ,CAAC;AAAA,EACL;AACA,SAAO;AACX;AACA,SAAS,6BAA6B,OAAO;AACzC,QACI,SAAiB,CAAC,GAClB,EAAE,WAAW,IAAI;AACrB,aAAW,QAAQ,OAAO;AACtB,QAAI,MAAM,IAAI,GAAG;AACb,aAAO,KAAK,WAAW,OAAO,WAAW,SAAS,IAAI,GAAG,UAAU,CAAC;AAAA,IACxE;AAAA,EACJ;AACA,SAAO;AACX;AACA,IAAMC,cAAa,CAAC;AAoBpB,IAAO,4BAAQ,YAAU,MAAM,2BAA2B,UAAU,UAAU;AAAA,EAC1E,WAAW,QAAQ;AACf,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,IAAI,oBAAoB;AACpB,WAAO;AAAA,EACX;AAAA,EACA,WAAW,SAAS;AAChB,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAOH;AAAA,QACI,MAAW;AAAA,QACX,UAAW;AAAA,MACf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAmCA;AAAA,QACI,MAAY;AAAA,QACZ,SAAY;AAAA,QACZ,WAAY;AAAA,QACZ,UAAY;AAAA,MAChB;AAAA,IACJ;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,SAAS;AACL,QAAI,KAAK,cAAc;AACnB,YACI,KAAK,MACL,EAAE,kBAAkB,IAAI;AAC5B,SAAG,YAAY;AACf,wBAAkB,WAAW;AAC7B,SAAG,yBAAyB;AAC5B,wBAAkB,SAAS;AAAA,IAC/B,OACK;AACD,aAAO,MAAM,OAAO,GAAG,SAAS;AAAA,IACpC;AAAA,EACJ;AAAA,EACA,IAAI,aAAa;AA7IrB;AA8IQ,QAAI,SAAS,KAAK,eAAe,KAAK,eAAe,aAAa,MAAM;AAIxE,QAAI,CAAC,YAAU,UAAK,eAAL,mBAAiB,4BAA2B;AACvD,eAAS,KAAK;AAAA,IAClB;AACA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,IAAI,kBAAkB;AAClB,WAAO,KAAK,oBAAoB;AAAA,EACpC;AAAA,EACA,IAAI,gBAAgB,OAAO;AACvB,SAAK,mBAAmB;AAAA,EAC5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAoCA,cAAc,YAAY,UAAU,eAAe;AAC/C,UAAM,KAAK;AACX,QAAI;AACJ,QAAI,YAAY;AACZ,UAAI,CAAC,WAAW,mBAAmB;AAC/B,YAAI,OAAO,eAAe,UAAU;AAChC,uBAAa;AAAA,YACT,WAAY;AAAA,UAChB;AACA,cAAI,UAAU;AACV,uBAAW,WAAW;AAAA,UAC1B;AAEA,cAAI,eAAe;AACf,gBAAI,yBAAyB,MAAM;AAC/B,yBAAW,UAAU;AAAA,YACzB,OACK;AACD,yBAAW,QAAQ;AAAA,YACvB;AAAA,UACJ;AAAA,QACJ;AACA,qBAAa,IAAI,GAAG,gBAAgB,UAAU;AAAA,MAClD;AAIA,iBAAW,WAAW;AACtB,uBAAiB,WAAW;AAAA,IAChC;AACA,OAAG,aAAiB;AACpB,OAAG,iBAAiB;AAAA,EACxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,IAAI,aAAa;AACb,UACI,KAAK,MACL,OAAO,GAAG;AACd,QAAI,CAAC,GAAG,eAAe,MAAM;AACzB,SAAG,cAAc,IAAI,GAAG,gBAAgB,EAAE,MAAM,UAAW,IAAI,IAAK,GAAG,GAAG,gBAAgB,CAAC;AAAA,IAC/F;AACA,WAAO,GAAG;AAAA,EACd;AAAA,EACA,IAAI,WAAW,YAAY;AACvB,UAAM,KAAK;AACX,OAAG,cAAc;AACjB,QAAI,YAAY;AAEZ,iBAAW,WAAW;AACtB,SAAG,iBAAmB,WAAW;AAAA,IACrC,OACK;AAGD,UAAI,GAAG,cAAc;AACjB,WAAG,QAAQ,kBAAkB,IAAI;AAAA,MACrC,OACK;AACD,WAAG,iBAAiB;AAAA,MACxB;AAAA,IACJ;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,IAAI,cAAc;AAGd,WAAO,QAAQ,CAAC,KAAK,gBAAgB,KAAK,UAAU;AAAA,EACxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,IAAI,eAAe;AACf,WAAO,QAAQ,KAAK,iBAAiB;AAAA,EACzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,IAAI,oBAAoB;AACpB,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,IAAI,gBAAgB;AAChB,WAAO,MAAM,kBAAkB,CAAC,KAAK,qBAAqB,CAAC,KAAK;AAAA,EACpE;AAAA,EACA,IAAI,kBAAkB,mBAAmB;AACrC,SAAK,qBAAqB;AAAA,EAC9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,2BAA2B,WAAW,UAAU,WAAW;AACvD,WAAO,KAAK,WAAW,0BAA0B,MAAM,WAAW,OAAO;AAAA,EAC7E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAcA,IAAI,cAAc;AACd,QAAI,KAAK,aAAa;AAClB,YAAM,SAAS,CAAC;AAEhB,WAAK,cAAc,QAAQ,gBAAc;AACrC,YAAI,eAAe,MAAM;AACrB,iBAAO,KAAK,UAAU;AAAA,QAC1B;AAAA,MACJ,CAAC;AACD,aAAO;AAAA,IACX;AACA,WAAOA;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,IAAI,gBAAgB;AAChB,WAAO,KAAK,oBAAoB,KAAK,kBAAkB,oBAAI,IAAI;AAAA,EACnE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,iBAAiB,gBAAgB;AAjWrC;AAkWQ,UAAM,OAAO,eAAe,aAAa,eAAe,iBAAiB;AAEzE,eAAK,eAAL,mBAAiB,kBAAkB,OAAO,KAAK,oBAAoB,IAAI;AAEvE,SAAK,cAAc,OAAO,WAAW,QAAQ,IAAI,CAAC;AAAA,EACtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,sBAAsB,MAAM;AACxB,SAAK,cAAc,QAAQ,CAAC,YAAY,YAAY;AAChD,UAAI,WAAW,SAAS,OAAO,KAAK,MAAM;AACtC,aAAK,iBAAiB,UAAU;AAAA,MACpC;AAAA,IACJ,CAAC;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,oBAAoB;AAIhB,KAAC,MAAM,GAAG,KAAK,WAAW,EAAE,QAAQ,gBAAc,KAAK,iBAAiB,UAAU,CAAC;AAAA,EACvF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,sBAAsB;AArY1B;AAsYQ,SAAK,mBAAiB,UAAK,eAAL,mBAAiB,SAAQ;AAAA,EACnD;AAAA,EACA,uBAAuB,aAAa,KAAK,YAAY;AAGjD,QAAI,WAAW,SAAS;AACpB,YACI,UAAqB,WAAW,UAAU,WAAW,OAAO,GAC5D,EAAE,eAAe,IAAI;AAEzB,WAAK,sBAAsB,OAAO;AAElC,UAAI,gBAAgB;AAChB,mBAAW,WAAW,gBAAgB;AAClC,gBAAM,gBAAgB,WAAW,SAAS,OAAO;AACjD,cAAI,iBAAiB,SAAS;AAC1B,mBAAO,eAAe,OAAO;AAAA,UACjC;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,IAAI,iBAAiB;AAnazB;AAoaQ,aAAO,UAAK,KAAK,aAAV,mBAAoB,cAAa,KAAK;AAAA,EACjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,IAAI,kBAAkB;AAClB,WAAO,2BAA2B,mBAAmB,IAAI;AAAA,EAC7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAcA,gBAAgB,gBAAgB,SAAS;AA7b7C;AA8bQ,UACI,KAAwB,MACxB;AAAA,MACI;AAAA,MACA;AAAA,MACA;AAAA,IACJ,IAAwB,IACxB,qBAAwB,QAAG,eAAH,mBAAe,mBACvC,gBAAwB,WAAW,QAAQ,cAAc,GACzD,KAAwB,GAAG,oBAAoB,gBAAgB,aAAa,GAC5E,cAAwB,EAAE,iBAAiB,GAAG,YAC9C,EAAE,SAAS,IAAa,GAAG;AAE/B,QAAI,aAAe,uDAAmB,IAAI,KACtC,EAAE,SAAS,IAAI;AAInB,QAAI,GAAG,YAAY,GAAG,UAAU,CAAC,WAAW;AACxC,iBAAW,WAAW,GAAG,GAAG,cAAc,GAAG,QAAQ,QAAQ,IAAI,GAAG,UAAU,QAAQ,CAAC;AAAA,IAC3F;AAEA,UAAM,oBAAoB,aAAa,SAAY,WAAW,IAAI,gBAAgB,UAAU,GAAG,YAAY,IAAI;AAC/G,QAAI,CAAC,YAAY;AAGb,UAAI,WAAW,aAAa;AACxB,qBAAa;AAGb,YAAI,CAAC,aAAa;AACd,aAAG,gBAAgB,gBAAgB,mBAAmB,IAAI;AAI1D,qBAAW,yBAAyB;AACpC,qBAAW,SAAS;AACpB,qBAAW,wBAAwB;AAAA,QACvC;AAIA,aAAK,mBAAmB;AAAA,MAC5B,OAEK;AACD,qBAAa,GAAG;AAAA,UACZ;AAAA,YACI,CAAC,SAAS,GAAG,UAAU,GAAW;AAAA,YAClC,CAAC,SAAS,UAAU,UAAU,GAAI;AAAA,YAClC,CAAC,SAAS,QAAQ,UAAU,GAAM;AAAA,YAClC,CAAC,SAAS,SAAS,UAAU,GAAK;AAAA,YAClC,gBAAkC;AAAA,YAClC,gBAAkC;AAAA,UACtC;AAAA,UACA,EAAE,oBAAqB,KAAK;AAAA,QAChC;AACA,mBAAW,oBAAoB;AAAA,MACnC;AACA,6DAAmB,IAAI,IAAI;AAG3B,oBAAc,IAAI,eAAe,UAAU;AAAA,IAC/C;AACA,WAAO;AAAA,EACX;AAAA,EACA,oBAAoB,OAAO,KAAK,WAAW,UAAU,MAAM;AACvD,WAAO,cAAc,KAAK,MAAM,WAAW,WAAW,QAAQ,IAAI;AAAA,EACtE;AAAA;AAAA,EAEA,mBAAmB,QAAQ,QAAQ;AApgBvC;AAqgBQ,QAAI,CAAC,KAAK,cAAc;AACpB;AAAA,IACJ;AACA,UACI,KAAK,MACL;AAAA,MACI;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACJ,IAAkB,IAClB,QAAkB,cAAc,kBAAkB,WAAW,OAG7D,gBAAkB,sCAAQ,oBAAR,mBAAyB,UAAS,GAAG,KAAK;AAChE,sBAAkB,WAAW;AAC7B,OAAG,yBAAyB;AAC5B,OAAG,aAAa;AAGhB,OAAG,QAAQ,MAAM,GAAG,WAAW,kBAAkB,UAAU,CAAC;AAC5D,QAAI,aAAa;AAEb,aAAO,GAAG,KAAK;AAAA,IACnB;AAEA,sBAAkB,WAAW,IAAI,IAAI,MAAM;AAG3C,QAAI,OAAO;AACP,SAAG,WAAW,QAAQ,QAAQ;AAAA,IAClC;AACA,QAAI,eAAe,UAAU;AACzB,SAAG,OAAO,eAAe,QAAQ;AAAA,IACrC;AAEA,QAAI,aAAa;AACb,aAAO,GAAG,KAAK;AAAA,IACnB;AACA,QAAI,QAAQ;AACR,aAAO,OAAO;AAAA,IAClB;AAEA,sBAAkB,SAAS;AAAA,EAC/B;AAAA,EACA,YAAY,OAAO,QAAQ,WAAW,MAAM;AACxC,UACI,KAAiB,MACjB,EAAE,WAAW,IAAI;AAErB,QAAI,oBAAoB,QAAQ;AAC5B,SAAG,cAAc;AAIjB,+CAAY,gBAAgB,OAAO,eAAe,QAAQ,QAAQ,UAAU;AAAA,IAChF;AAQA,QAAI,GAAG,cAAc;AACjB,SAAG,mBAAmB,QAAQ,MAAM;AAAA,IACxC,WAES,sBAAsB,QAAQ;AACnC,SAAG,KAAK,SAAS,iBAAiB;AAClC,aAAO,GAAG,KAAK,SAAS;AAGxB,SAAG,iBAAiB,OAAO,iBAAiB,KAAK;AAAA,IACrD;AACA,WAAO,MAAM,YAAY,OAAO,QAAQ,QAAQ,GAAG,IAAI;AAAA,EAC3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,2BAA2B;AACvB,UACI,KAAwC,MAGxC,EAAE,mBAAmB,gBAAgB,UAAU,IAAI;AAEvD,OAAG,oBAAoB;AAIvB,sBAAkB,iBAAiB,cAAc;AAIjD,QAAI,GAAG,gBAAgB;AAEnB,wBAAkB,WAAW,UAAU,WAAW,IAAI,WAAW,IAAI,QAAQ;AAAA,IACjF;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,IAAI,iBAAiB,MAAM;AACvB,QAAI,MAAM;AACN,YAAM,iBAAiB,KAAK,mBAAmB,KAAK,iBAAiB,CAAC;AACtE,qBAAe,WAAW,QAAQ,IAAI,CAAC,IAAI;AAAA,IAC/C;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,iBAAiB,kBAAkB;AAC/B,WAAO,KAAK,IAAI;AAAA,MACZ;AAAA,IACJ,CAAC;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,aAAa,MAAM;AA7oBvB;AA8oBQ,YAAO,UAAK,mBAAL,mBAAsB,WAAW,QAAQ,IAAI;AAAA,EACxD;AACJ;;;AChnBA,IAAqB,yBAArB,cAAoD,SAAS,MAAM,yBAAiB,EAAE;AAAA,EA8BlF,IAAI,QAAQ;AACR,WAAO,GAAG,KAAK,YAAY,eAAe,KAAK;AAAA,EACnD;AAAA;AAAA;AAAA,EAGA,IAAI,sBAAsB;AACtB,WAAO;AAAA,EACX;AAAA;AAAA,EAEA,IAAI,YAAY;AACZ,WAAO,KAAK,WAAW,CAAC,KAAK,QAAQ,IAAI,CAAC;AAAA,EAC9C;AAAA;AAAA,EAEA,IAAI,mBAAmB;AACnB,WAAO,KAAK;AAAA,EAChB;AACJ;AA7CI,cADiB,wBACV,SAAQ;AAAA;AAEf,cAHiB,wBAGV,UAAS;AAAA;AAAA;AAAA;AAAA;AAAA,EAKZ;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA;AACJ;AACA,cAfiB,wBAeV,aAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOf,UAAW;AAAA,IACP,YAAwB;AAAA,IACxB,cAAwB;AAAA,IACxB,uBAAwB;AAAA,IACxB,mBAAwB;AAAA,EAC5B;AACJ;AACA,cA7BiB,wBA6BV,eAAc;AAkBzB,uBAAuB,SAAS;;;AC1EhC,IACIC,cAAa,OAAO,OAAO,CAAC,CAAC;AAMjC,IAAO,kCAAQ,YAAU,MAAM,iCAAiC,UAAUC,OAAM;AAAA,EAC5E,WAAW,QAAQ;AACf,WAAO;AAAA,EACX;AAAA,EACA,aAAa,MAAM;AACf,UAAM,KAAK;AAGX,OAAG,oBAAoB,oBAAI,IAAI;AAG/B,OAAG,kBAAkB,oBAAI,IAAI;AAC7B,UAAM,UAAU,GAAG,IAAI;AAAA,EAC3B;AAAA;AAAA,EAEA,gBAAgB;AAGZ,SAAK,kBAAkB,MAAM;AAE7B,SAAK,4BAA4B,OAAO;AACxC,SAAK,4BAA4B,UAAU,KAAK,QAAQ,SAAS;AACjE,UAAM,iBAAiB,MAAM,cAAc;AAAA,EAC/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,aAAa,EAAE,QAAQ,OAAO,SAAS,SAAS,GAAG;AAE/C,SAAK,4BAA4B,QAAQ,OAAO,SAAS,QAAQ;AACjE,UAAM,aAAa,GAAG,SAAS;AAAA,EACnC;AAAA,EACA,4BAA4B,QAAQ,QAAQD,aAAY,UAAUA,aAAY,UAAU;AACpF,UACI,KAAsB,MACtB,EAAE,gBAAgB,IAAI,IACtB,gBAAsB,qCAAU;AACpC,YAAQ,QAAQ;AAAA,MACZ,KAAK;AACD,wBAAgB,MAAM;AACtB;AAAA,MAEJ,KAAK,UAAU;AAEX,YAAI,eAAe;AACf,kBAAQ,MAAM,MAAM;AACpB,oBAAU,QAAQ,MAAM;AACxB,mBAAS,IAAI,GAAG,IAAI,eAAe,KAAK;AACpC,oBAAQ,KAAK,SAAS,CAAC,EAAE,CAAC,CAAC;AAC3B,kBAAM,KAAK,SAAS,CAAC,EAAE,CAAC,CAAC;AAAA,UAC7B;AAAA,QACJ;AACA,cACI,aAAe,MAAM,QACrB,eAAe,QAAQ;AAE3B,YAAI,gBAAgB,gBAAgB,MAAM;AACtC,mBAAS,IAAI,GAAG,IAAI,cAAc,KAAK;AAGnC,4BAAgB,OAAO,QAAQ,CAAC,CAAC;AAAA,UACrC;AAAA,QACJ;AAEA,YAAI,YAAY;AACZ,mBAAS,IAAI,GAAG,IAAI,YAAY,KAAK;AACjC,kBAAM,WAAW,MAAM,CAAC;AAExB,gBAAI,SAAS,aAAa;AACtB,8BAAgB,IAAI,QAAQ;AAAA,YAChC;AAAA,UACJ;AAAA,QACJ;AACA;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,QAAQ,IAAI;AACR,QAAI,SAAS,MAAM,QAAQ,EAAE;AAE7B,QAAI,CAAC,QAAQ;AACT,eAAS,KAAK,kBAAkB,IAAI,KAAK,WAAW,KAAK,EAAE,CAAC;AAAA,IAChE;AACA,WAAO;AAAA,EACX;AAAA,EACA,cAAc,QAAQ,OAAO,QAAQ,QAAQ,oBAAoB;AAC7D,UAAM,iCAAiC,CAAC,UAAU,KAAK,+BAA+B,QAAQ,MAAM;AAIpG,QAAI,gCAAgC;AAChC,aAAO,kBAAkB;AAAA,IAC7B;AACA,UAAM,cAAc,GAAG,SAAS;AAKhC,QAAI,gCAAgC;AAChC,YAAM,QAAQ,EAAE,QAAS,SAAS,SAAU,KAAK,QAAQ,OAAO;AAChE,WAAK,QAAQ,WAAW,KAAK;AAC7B,WAAK,QAAQ,UAAU,KAAK;AAAA,IAChC;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,+BAA+B,UAAU,QAAQ;AAC7C,WAAO,SAAS,eAAe,oBAAoB;AAAA,EACvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,0BAA0B,UAAU,WAAW,SAAS;AACpD,UAAM,SAAS,CAAC;AAChB,QAAI,SAAS,aAAa;AACtB,eAAS,WAAW,kBAAkB,WAAW,SAAS,OAAK,OAAO,KAAK,CAAC,CAAC;AAAA,IACjF;AACA,WAAO;AAAA,EACX;AAAA,EACA,IAAI,KAAK,MAAM;AAEX,SAAK,kBAAkB,MAAM;AAC7B,UAAM,OAAO;AAAA,EACjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,wBAAwB;AACpB,WAAO,CAAC,GAAG,KAAK,eAAe;AAAA,EACnC;AACJ;;;AC9GA,IAAqB,yBAArB,cAAoD,UAAU,MAAM,+BAAuB,EAAE;AAAA,EAEzF,WAAW,gBAAgB;AACvB,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA,MAKH,cAAe;AAAA;AAAA;AAAA;AAAA;AAAA,MAKf,cAAe;AAAA;AAAA;AAAA;AAAA;AAAA,MAKf,eAAgB;AAAA,MAChB,YAAa;AAAA,MACb,SAAa;AAAA,IACjB;AAAA,EACJ;AAAA,EACA,IAAI,cAAc,OAAO;AACrB,SAAK,iBAAiB;AAEtB,QAAI,CAAC,KAAK,eAAe;AACrB,WAAK,cAAc,IAAI;AAAA,IAC3B;AAAA,EACJ;AAAA,EACA,IAAI,gBAAgB;AAChB,WAAO,KAAK;AAAA,EAChB;AAAA;AAAA,EAEA,qBAAqB,mBAAmB;AACpC,WAAO,CAAC,kBAAkB,QAAQ;AAAA,EACtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYA,UAAU,EAAE,gBAAgB,WAAW,QAAQ,GAAG;AAC9C,UAAM,oBAAoB,eAAe,WAAW,QAAQ,WAAS;AACjE,UAAI,MAAM,mBAAmB;AACzB,eAAO,MAAM,2BAA2B,WAAW,OAAO;AAAA,MAC9D;AACA,UAAI,MAAM,gBAAgB,WAAW,OAAO,GAAG;AAC3C,eAAO;AAAA,MACX;AACA,aAAO,CAAC;AAAA,IACZ,CAAC;AACD,WAAO,kBAAkB,KAAK,CAAC,OAAO,UAAU,MAAM,YAAY,MAAM,SAAS;AAAA,EACrF;AACJ;AA3DI,cADiB,wBACV,SAAQ;AA4DnB,uBAAuB,SAAS;;;AClGhC,IAAO,wBAAQ,YAAU,MAAM,uBAAuB,UAAUE,OAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAoClE,WAAW,QAAQ;AACf,WAAO;AAAA,EACX;AACJ;;;AC1CA,IAAO,+BAAQ,YAAU,MAAM,6BAA6B,OAAO;AAAA,EAC/D,WAAW,QAAQ;AACf,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAsBA,WAAW,SAAS;AAChB,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAMH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAMA,EAAE,MAAO,oBAAoB,MAAO,UAAU;AAAA,MAC9C;AAAA,MACA;AAAA,IACJ;AAAA,EACJ;AAAA;AAAA,EAEA,UAAU,SAAS,MAAM;AACrB,WAAO,QAAQ,CAAC;AAChB,UACI,EAAE,SAAS,IAAO,MAClB,eAAkB,SAAS,QAAQ,YACnC,kBAAkB,SAAS,WAAW,YACtC,aAAkB,SAAS,MAAM,YACjC,gBAAkB,SAAS,SAAS,YACpC,UAAkB,KAAK,YAAY,GACnC,aAAkB,KAAK,eAAe,GACtC,QAAkB,KAAK,UAAU,GACjC,WAAkB,KAAK,aAAa;AAExC,QAAI,WAAW,MAAM;AACjB,WAAK,UAAU,IAAI;AAAA,IACvB,WACS,SAAS,MAAM;AACpB,WAAK,YAAY,IAAI,MAAM,UAAU,MAAM,KAAK;AAAA,IACpD;AACA,QAAI,cAAc,MAAM;AACpB,WAAK,aAAa,IAAI;AAAA,IAC1B,WACS,YAAY,MAAM;AACvB,WAAK,eAAe,IAAI,SAAS,UAAU,SAAS,KAAK;AAAA,IAC7D;AACA,UAAM,UAAU,MAAM,GAAG,IAAI;AAAA,EACjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,IAAI,mBAAmB;AACnB,WAAO,KAAK,sBAAsB,KAAK,OAAO,KAAK,QAAQ;AAAA,EAC/D;AAAA,EACA,sBAAsB,OAAO,UAAU;AACnC,QAAI,UAAU;AACd,QAAI,OAAO;AACP,iBAAW,MAAM,UAAU,MAAM,KAAK;AAAA,IAC1C,OACK;AACD,iBAAW,KAAK;AAAA,IACpB;AACA,QAAI,UAAU;AACV,oBAAc,SAAS,UAAU,SAAS,KAAK;AAAA,IACnD,OACK;AACD,oBAAc,KAAK;AAAA,IACvB;AACA,WAAO,GAAG,YAAY;AAAA,EAC1B;AAAA,EACA,cAAc,EAAE,OAAO,SAAS,GAAG;AAC/B,WAAO,KAAK,sBAAsB,OAAO,QAAQ;AAAA,EACrD;AAAA,EACA,IAAIC,QAAO,UAAU,MAAM;AAjH/B;AAkHQ,UAAM,QAAQ,KAAK,YAAYA,QAAO,KAAK;AAE3C,QAAI,cAAc,OAAO;AACrB,YAAI,WAAM,aAAN,mBAAgB,QAAO,QAAW;AAClC,cAAM,aAAa,MAAM,SAAS;AAAA,MACtC;AAAA,IACJ,WAES,gBAAgB,SAAS,KAAK,YAAY,sBAAsB;AACrE,YAAM,WAAW,MAAM;AAAA,IAC3B;AAEA,QAAI,WAAW,OAAO;AAClB,YAAI,WAAM,UAAN,mBAAa,QAAO,QAAW;AAC/B,cAAM,UAAU,MAAM,MAAM;AAAA,MAChC;AAAA,IACJ,WACS,aAAa,SAAS,KAAK,YAAY,sBAAsB;AAClE,YAAM,QAAQ,MAAM;AAAA,IACxB;AACA,WAAO,MAAM,IAAI,OAAO,MAAM,GAAG,IAAI;AAAA,EACzC;AAAA,EACA,YAAY,OAAO,QAAQ,QAAQ,oBAAoB,eAAe;AAxI1E;AAyIQ,UAAM,KAAK;AAGX,QAAI,CAAC,GAAG,YAAY,yBAAwB,iCAAQ,iBAChD,QAAG,aAAH,mBAAa,QAAO,OAAO,WAAW,OAAO;AAC7C,SAAG,WAAW,OAAO,WAAW;AAAA,IACpC,WAMS,GAAG,YAAY,0BAAwB,QAAG,YAAH,mBAAY,4BACxD,iCAAQ,YAAW,EAAC,iCAAQ,WAC3B,MAAM,MAAM,UAAU,OAAO,QAAQ,SAAS,MAAM,MAAM,MAAM,OAAO,OAAO,QAAQ,QACzF;AAEE,aAAO,OAAO;AACd,aAAO,GAAG,KAAK,SAAS;AAAA,IAC5B;AACA,WAAO,MAAM,YAAY,GAAG,SAAS;AAAA,EACzC;AAAA;AAAA,EAEA,IAAI,WAAW,OAAO;AAClB,UAAM,EAAE,SAAS,IAAI;AAGrB,SAAI,qCAAU,YAAW,SAAS,OAAO,OAAO;AAC5C,WAAK,IAAI,cAAc,KAAK;AAAA,IAChC,OACK;AACD,WAAK,WAAW;AAAA,IACpB;AAAA,EACJ;AAAA,EACA,IAAI,aAAa;AA3KrB;AA6KQ,YAAO,gBAAK,aAAL,mBAAe,OAAf,YAAqB,KAAK,IAAI,YAAY;AAAA,EACrD;AAAA;AAAA,EAEA,IAAI,QAAQ,OAAO;AACf,UAAM,EAAE,MAAM,IAAI;AAGlB,SAAI,+BAAO,YAAW,MAAM,OAAO,OAAO;AACtC,WAAK,IAAI,WAAW,KAAK;AAAA,IAC7B,OACK;AACD,WAAK,QAAQ;AAAA,IACjB;AAAA,EACJ;AAAA,EACA,IAAI,UAAU;AA3LlB;AA6LQ,YAAO,gBAAK,UAAL,mBAAY,OAAZ,YAAkB,KAAK,IAAI,SAAS;AAAA,EAC/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,IAAI,YAAY;AApMpB;AAqMQ,YAAO,UAAK,UAAL,mBAAY;AAAA,EACvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,IAAI,eAAe;AA5MvB;AA6MQ,YAAO,UAAK,aAAL,mBAAe;AAAA,EAC1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,cAAc;AACV,WAAO,KAAK;AAAA,EAChB;AAAA;AAAA;AAAA,EAGA,IAAI,eAAe;AACf,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,IAAI,gBAAgB;AAjOxB;AAkOQ,UACI;AAAA,MACI;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACJ,IAAc,MACd,cAAc,mDAAiB;AACnC,QAAI;AACJ,QAAI,iBAAiB;AAIjB,eAAS,KAAK,WAAW,MAAM,kBAAkB,eAAe,CAAC,MAAM,kBAAkB,CAAC,SAAS;AAAA,IACvG,OAEK;AACD,eAAS,CAAC,KAAK,aAAa,QAAQ,eAAe,CAAC,CAAC;AAAA,IACzD;AAEA,WAAO,UAAU,MAAM,iBAAiB,GAAC,UAAK,UAAL,mBAAY;AAAA,EACzD;AAAA,EACA,IAAI,UAAU;AACV,WAAO,KAAK,YAAY,QAAQ,KAAK,SAAS;AAAA,EAClD;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,WAAW;AACP,QAAI,KAAK,cAAc;AACnB,aAAO,GAAG,KAAK,gBAAgB,KAAK,MAAM,KAAK,KAAK;AAAA,IACxD;AACA,WAAO;AAAA,EACX;AAAA;AAAA,EAEA,wBAAwB,WAAW,UAAU,UAAU;AAtQ3D;AAuQQ,QAAI,CAAC,MAAM,wBAAwB,WAAW,UAAU,QAAQ,GAAG;AAC/D,aAAO;AAAA,IACX;AACA,QAAI,cAAc,WAAW,cAAc,WAAW;AAClD,YAAM,cAAa,UAAK,YAAL,mBAAc;AACjC,UAAI,cAAc,WAAW,SAAS,QAAQ,MAAM,WAAW,QAAQ,QAAQ,GAAG;AAC9E,eAAO;AAAA,MACX;AAAA,IACJ;AACA,QAAI,cAAc,cAAc,cAAc,cAAc;AACxD,YAAM,iBAAgB,UAAK,YAAL,mBAAc;AACpC,UAAI,iBAAiB,cAAc,SAAS,QAAQ,MAAM,cAAc,QAAQ,QAAQ,GAAG;AACvF,eAAO;AAAA,MACX;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA;AAEJ;;;ACrRA,IAAM,cAAc;AAgEpB,IAAqB,kBAArB,cAA6C,6BAAqB,sBAAc,YAAY,OAAO,KAAK,CAAC,CAAC,EAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAgBxG,WAAW,QAAQ;AACf,WAAO;AAAA,EACX;AACJ;AACA,gBAAgB,iBAAiB;AACjC,gBAAgB,SAAS;;;AC7EzB,IAAO,+BAAQ,YAAU,MAAM,6BAA6B,OAAO;AAAA,EAC/D,WAAW,QAAQ;AACfkGA,WAAW,gBAAgB;AACvB,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA,MAKH,cAAe;AAAA;AAAA;AAAA;AAAA;AAAA,MAKf,cAAe;AAAA,MACf,SAAU;AAAA,IACd;AAAA,EACJ;AAAA,EACA,IAAI,mBAAmB,MAAM;AAhIjC;AAiIQ,qBAAiB,YAAY,QAAQ,cAAc;AACnD,aAAS,IAAI,GAAG,IAAI,eAAe,QAAQ,KAAK;AAC5C,UAAI,aAAa,eAAe,CAAC;AACjC,UAAI,EAAE,sBAAsB,QAAQ;AAChC,uBAAe,CAAC,IAAI,aAAa,KAAK,aAAa,UAAU;AAAA,MACjE;AACA,UAAI,CAAC,KAAK,uBAAuB,KAAK,QAAQ,UAAU,oBAAoB,WAAW,kBAAkB,IAAI,MAAM,IAAI;AACnH,cAAM,IAAI,MAAM,+BAA+B,WAAW,wBAAwB,WAAW,YAAY;AAAA,MAC7G;AACA,WAAI,gBAAW,UAAX,mBAAkB,YAAY;AAC9B,mBAAW,aAAa;AAAA,MAC5B;AAAA,IACJ;AACA,WAAO,MAAM,IAAI,gBAAgB,GAAG,IAAI;AAAA,EAC5C;AAAA,EACA,mBAAmB,SAAS,YAAY;AACpC,WAAO,KAAK,QAAQ,UAAU,oBAAoB,GAAG,WAAW,cAAc,IAAI,MAAM;AAAA,EAC5F;AAAA,EACA,aAAa,MAAM;AACf,QAAI,KAAK,sBAAsB;AAC3B,YAAM,IAAI,MAAM,6IAA6I;AAAA,IACjK;AACA,UAAM,aAAa,IAAI;AAAA,EAC3B;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,IAAI,QAAQ,SAAS;AACjB,UAAM,UAAU;AAGhB,SAAK,QAAQ,SAAS,EAAE,UAAW,oBAAoB,aAAc,EAAE,OAAQ,MAAM,UAAW,KAAK,EAAE,CAAC;AAAA,EAC5G;AAAA,EACA,IAAI,UAAU;AAEV,WAAO,KAAK,YAAY,MAAM;AAAA,EAClC;AAAA;AAAA;AAAA;AAAA,EAIA,IAAI,oBAAoB;AACpB,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA,cAAc,oBAAoB,YAAY;AAE1C,QAAI,CAAC,sBAAsB,EAAC,yCAAY,eAAc;AAClD,aAAO;AAAA,IACX;AAEA,UAAM,KAAK;AACX,WAAO;AAAA,MACH,IAAyB,GAAG,WAAW,OAAO,mBAAmB;AAAA,MACjE,OAAyB;AAAA,MACzB,UAAyB,mBAAmB;AAAA,MAC5C,SAAyB,WAAW;AAAA,MACpC,YAAyB,mBAAmB,SAAS;AAAA,MACrD,cAAyB;AAAA;AAAA,MAEzB,wBAAyB;AAAA;AAAA,MAEzB,aAAa,cAAc;AACvB,eAAO,GAAG,uBAAuB,MAAM,YAAY;AAAA,MACvD;AAAA,IACJ;AAAA,EACJ;AAAA;AAAA,EAEA,uBAAuB,sBAAsB,cAAc;AACvD,UACI,KAAa,MACb,aAAa,aAAa,MAAM,cAChC,EAAE,GAAG,IAAQ;AACjB,QAAI,EAAE,eAAe,IAAI;AACzB,QAAI,CAAC,gBAAgB;AACjB,uBAAiB,GAAG,iBAAiB,CAAC;AAAA,IAC1C;AACA,QAAI,CAAC,eAAe,EAAE,GAAG;AACrB,qBAAe,EAAE,IAAI,CAAC;AAAA,IAC1B;AACA,WAAO,eAAe,EAAE,EAAE,UAAU,MAAM,eAAe,EAAE,EAAE,UAAU,IAAI,CAAC;AAAA,EAChF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYA,uBAAuB,OAAOC,KAAI,UAAU;AACxC,YAAQ,KAAK,WAAW,QAAQ,KAAK;AACrC,UACI,QAAkB,QAAQA,GAAE,GAC5B,cAAkB,QAAQ,QAAQ;AACtC,QAAI,SAAS,aAAa;AACtB,aAAO,MAAM,YAAY,OAAO,CAAC,QAAQ,eAAe;AACpD,cAAM,YAAY,QAAQA,IAAG,UAAU,IAAI;AAC3C,YAAI,CAAC,eAAe,SAAS,SAAS,GAAG;AACrC,iBAAO,KAAK,SAAS;AAAA,QACzB;AACA,eAAO;AAAA,MACX,GAAG,CAAC,CAAC;AAAA,IACT;AACA,WAAO,MAAM;AAAA,EACjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,0BAA0B,UAAUA,KAAI,UAAU;AAC9C,eAAW,KAAK,cAAc,QAAQ,QAAQ;AAC9C,UACI,QAAkB,QAAQA,GAAE,GAC5B,cAAkB,QAAQ,QAAQ;AACtC,QAAI,SAAS,aAAa;AACtB,aAAO,SAAS,YAAY,OAAO,CAAC,QAAQ,eAAe;AACvD,cAAM,YAAY,QAAQA,IAAG,UAAU,IAAI;AAC3C,YAAI,CAAC,eAAe,SAAS,SAAS,GAAG;AACrC,iBAAO,KAAK,SAAS;AAAA,QACzB;AACA,eAAO;AAAA,MACX,GAAG,CAAC,CAAC;AAAA,IACT;AACA,WAAO,SAAS;AAAA,EACpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,uBAAuB,OAAO;AAC1B,WAAO,MAAM;AAAA,EACjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,0BAA0B,OAAO;AAC7B,WAAO,KAAK,OAAO,MAAM,WAAW;AAAA,EACxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,0BAA0B,UAAU;AAChC,eAAW,KAAK,cAAc,QAAQ,QAAQ;AAC9C,WAAO,SAAS;AAAA,EACpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,6BAA6B,UAAU;AACnC,SAAK,OAAO,KAAK,0BAA0B,QAAQ,CAAC;AAAA,EACxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,qBAAqB,OAAO;AACxB,WAAO,MAAM;AAAA,EACjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,qBAAqB,UAAU;AAC3B,eAAW,KAAK,cAAc,QAAQ,QAAQ;AAC9C,WAAO,qCAAU;AAAA,EACrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA,sBAAsB,OAAO,WAAW,oBAAoB,MAAM,4BAA4B,OAAO;AAtVzG;AAuVQ,UACI,KAAW,MACX,WAAW,4BAA4B,IAAI,IAAI,MAAM,WAAW,IAAI;AACxE,gBAAY,YAAY,QAAQ,SAAS,EAAE,IAAI,OAAE;AA1VzD,UAAAC;AA0V4D,cAAAA,MAAA,EAAE,cAAF,OAAAA,MAAe;AAAA,KAAC;AACpE,SAAI,QAAG,eAAH,mBAAe,sBAAsB;AAErC,WAAI,WAAM,gBAAN,mBAAmB,QAAQ;AAC3B,YAAI,CAAC,GAAG,0BAA0B,OAAO,UAAU,CAAC,CAAC,GAAG;AACpD,gBAAM,WAAW,UAAU,CAAC;AAAA,QAChC;AACA,eAAO,CAAC;AAAA,MACZ,OAEK;AACD,cAAM,aAAa,UAAU,CAAC,EAAE;AAAA,MACpC;AAAA,IACJ;AACA,QAAI,iBAAiB,CAAC;AACtB,OAAG,kBAAkB;AAErB,cAAU,QAAQ,cAAY;AA3WtC,UAAAA;AA4WY,YAAM,qBAAqB,GAAG,iCAAiC,OAAO,QAAQ;AAC9E,UAAI,CAAC,oBAAoB;AACrB,cAAM,aAAa;AAAA,UACf;AAAA,UACA;AAAA,QACJ;AACA,uBAAe,MAAKA,MAAA,uDAAoB,gBAApB,OAAAA,MAAmC,UAAU;AAAA,MACrE,WACS,2BAA2B;AAChC,iBAAS,OAAO,kBAAkB;AAAA,MACtC;AAAA,IACJ,CAAC;AACD,qBAAiB,GAAG,IAAI,cAAc;AACtC,QAAI,2BAA2B;AAC3B,SAAG,OAAO,MAAM,KAAK,QAAQ,CAAC;AAAA,IAClC;AAEA,OAAG,iBAAiB;AACpB,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,0BAA0B,OAAO,WAAW;AACxC,UACI,KAAK,MACL,sBAAsB,CAAC;AAC3B,QAAI,CAAC,WAAW;AACZ,aAAO,GAAG,0BAA0B,KAAK;AAAA,IAC7C;AACA,gBAAY,YAAY,QAAQ,SAAS;AACzC,aAAS,IAAI,GAAG,IAAI,UAAU,QAAQ,KAAK;AACvC,UAAI,GAAG,0BAA0B,OAAO,UAAU,CAAC,CAAC,GAAG;AACnD,4BAAoB,KAAK,GAAG,iCAAiC,OAAO,UAAU,CAAC,CAAC,CAAC;AAAA,MACrF;AAAA,IACJ;AACA,WAAO,GAAG,OAAO,mBAAmB;AAAA,EACxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,0BAA0B,OAAO,UAAU;AACvC,WAAO,QAAQ,KAAK,iCAAiC,OAAO,QAAQ,CAAC;AAAA,EACzE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,iCAAiC,OAAO,UAAU;AAC9C,QAAI;AAGJ,QACI,EAAE,QAAQ,KAAK,WAAW,QAAQ,KAAK,MACvC,EAAE,cAAc,MAAM;AAAA;AAAA;AAAA,IAItB,EAAE,WAAW,KAAK,cAAc,QAAQ,QAAQ,QAAQ,IAC1D;AACE,aAAO;AAAA,IACX;AACA,WAAO,KAAK,cAAc,YAAY,KAAK,OAAE;AAxbrD;AAwbwD,sBAAE,aAAF,mBAAY,eAAc,SAAS;AAAA,KAAS,GAAG,KAAK;AAAA,EACxG;AAAA;AAEJ;;;ACrbA,IAAMC,eAAc,sBAAc,yBAAyB,OAAO,SAAS,CAAC;AA0C5E,IAAqB,kBAArB,cAA6C,6BAAqBA,YAAW,EAAE;AAAA,EAE3E,WAAW,gBAAgB;AACvB,WAAO;AAAA,MACH,YAAa;AAAA,IACjB;AAAA,EACJ;AACJ;AANI,cADiB,iBACV,SAAQ;AAOnB,gBAAgB,SAAS;;;AC1CzB,IAAO,0BAAQ,YAAU,MAAM,yBAAyB,UAAUC,OAAM;AAAA,EACpE,WAAW,QAAQ;AACf,WAAO;AAAA,EACX;AAAA;AAAA,EAEA,UAAU,QAAQ;AACd,UAAM,UAAU,MAAM;AACtB,SAAK,WAAW;AAAA,EACpB;AAAA;AAAA;AAAA,EAGA,IAAI,gBAAgB,iBAAiB;AACjC,UAAM,kBAAkB;AAAA,EAC5B;AAAA,EACA,IAAI,kBAAkB;AAElB,UAAM,SAAS,MAAM;AAErB,QAAI,UAAU,WAAW,eAAe,YAAY;AAChD,aAAO,OAAK,EAAE,cAAc,OAAO,CAAC;AAAA,IACxC;AACA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAmBA,eAAe,SAAS;AACpB,UACI,KAAS,MACT;AAAA,MACI;AAAA,MACA;AAAA,IACJ,IAAS,IAET,SAAS,GAAG,UAAU;AAAA,MAClB,GAAG;AAAA,MACH,eAAgB,GAAG,aAAc,GAAG,qBAAqB,kBAAkB,iBAAe,MAAM,SAAS,WAAW,IAAI,GAAG,QAAQ,WAAW,IAAI,KAAK,gBAAgB,WAAW,IAAK;AAAA,MACvL,SAAgB,QAAQ,WAAW;AAAA,IACvC,CAAC;AACL,WAAO,QAAQ,CAAC,OAAO,QAAQ,OAAO,IAAI,KAAK,MAAM,MAAM,CAAC;AAC5D,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAaA,sBAAsBC,KAAI,UAAU,MAAM;AACtC,SAAK,QAAQ,WAAS;AAClB,YAAM,EAAE,WAAW,QAAQ,IAAI;AAC/B,UAAI,aAAa,SAAS;AACtB,eAAOA,IAAG,KAAK,SAAS,OAAO,WAAW,OAAO;AAAA,MACrD;AAAA,IACJ,CAAC;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,mBAAmB;AACf,QAAI,WAAW,IAAI,KAAK,MAAM,GAAG,CAAC,GAC9B,SAAW,oBAAI,KAAK,CAAC;AACzB,SAAK,QAAQ,WAAS;AAClB,UAAI,MAAM,WAAW;AACjB,mBAAW,WAAW,IAAI,MAAM,WAAW,QAAQ;AAAA,MACvD;AACA,UAAI,MAAM,SAAS;AACf,iBAAS,WAAW,IAAI,MAAM,SAAS,MAAM;AAAA,MACjD;AAAA,IACJ,CAAC;AACD,eAAW,WAAW,IAAI,KAAK,MAAM,GAAG,CAAC,IAAI,WAAW;AACxD,aAAW,SAAS,oBAAI,KAAK,CAAC,IAAI,SAAS;AAE3C,WAAQ,KAAK,oBAAoB;AAAA,MAC7B,WAAY,YAAY;AAAA,MACxB,SAAY,UAAU,YAAY;AAAA,IACtC;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,mBAAmB,OAAO;AACtB,WAAO,MAAM;AAAA,EACjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYA,qBAAqB,OAAO,KAAK,cAAc,UAAU;AAGrD,QAAI,SAAS,KAAK,iBAAiB;AAC/B,aAAO;AAAA,IACX;AAEA,UAAM,YAAY,IAAI,IAAI,KAAK,qBAAqB,QAAQ,CAAC;AAM7D,QAAI,6CAAc,cAAc;AAC5B,YACI,eAAe,aAAa,OAC5B,YAAe,aAAa;AAChC,gBAAU,QAAQ,CAAAC,cAAY;AAE1B,YAAIA,UAAS,OAAO,aAAa,YAAY;AACzC,eAAK,qBAAqBA,SAAQ,EAAE,QAAQ,WAAS,UAAU,IAAI,KAAK,CAAC;AAAA,QAC7E;AAAA,MACJ,CAAC;AAAA,IACL;AACA,QAAI,cAAc;AACd,YAAM,gBAAgB,aAAa,eAAe,aAAa,QAAQ;AACvE,gBAAU,OAAO,aAAa;AAAA,IAClC;AACA,WAAO,CAAC,MAAM,KAAK,SAAS,EAAE,KAAK,WAAS,MAAM,eAAe,WAAW,eAAe,OAAO,KAAK,MAAM,WAAW,MAAM,OAAO,CAAC;AAAA,EAC1I;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA,wBAAwB,UAAUD,KAAI,UAAU,MAAM;AAClD,WAAO,SAAS,UAAU,IAAI,EAAE,OAAOA,IAAG,KAAK,OAAO,CAAC;AAAA,EAC3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,qBAAqB,OAAO;AAExB,QAAI,MAAM,cAAc;AACpB,cAAQ,MAAM;AAAA,IAClB;AACA,WAAO,KAAK,gBAAgB,qBAAqB,KAAK;AAAA,EAC1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,qBAAqB,UAAU;AAC3B,WAAO,KAAK,gBAAgB,qBAAqB,QAAQ;AAAA,EAC7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,uBAAuB,OAAO;AAC1B,WAAO,KAAK,gBAAgB,uBAAuB,KAAK,KAAK,CAAC;AAAA,EAClE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,0BAA0B,UAAU;AAChC,WAAO,KAAK,gBAAgB,0BAA0B,QAAQ,KAAK,CAAC;AAAA,EACxE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,sBAAsB,OAAO,UAAU,4BAA4B,OAAO;AACtE,WAAO,KAAK,gBAAgB,sBAAsB,OAAO,UAAU,QAAW,yBAAyB;AAAA,EAC3G;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,0BAA0B,OAAO,UAAU;AACvC,SAAK,gBAAgB,0BAA0B,OAAO,QAAQ;AAAA,EAClE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,oCAAoC,OAAO,aAAa,aAAa;AACjE,UACI,KAAgB,MAChB,gBAAgB,MAAM,KAAK,WAAW,GACtC,aAAgB,GAAG,gBAAgB,iCAAiC,OAAO,WAAW;AAC1F,QAAI,YAAY;AACZ,iBAAW,aAAa;AAAA,IAC5B,OACK;AACD,SAAG,gBAAgB,sBAAsB,OAAO,WAAW;AAAA,IAC/D;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,0BAA0B,OAAO,UAAU;AACvC,WAAO,KAAK,gBAAgB,0BAA0B,OAAO,QAAQ;AAAA,EACzE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,0BAA0B,OAAO;AAC7B,SAAK,gBAAgB,0BAA0B,KAAK;AAAA,EACxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,6BAA6B,UAAU;AACnC,SAAK,gBAAgB,6BAA6B,QAAQ;AAAA,EAC9D;AAAA;AAEJ;;;ACvSA,IACIE,cAAe,MAAM;AADzB,IAEI,eAAe,WAAS,CAAC,MAAM;AAQnC,IAAO,yBAAQ,YAAO;AAftB;AAeyB,4BAA6B,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA8CzD,UAAU;AAAA,MACN,QAAAC;AAAA,MACA;AAAA,MACA;AAAA;AAAA,MACA;AAAA;AAAA,MACA;AAAA;AAAA,MACA;AAAA;AAAA,MACA;AAAA;AAAA,MACA,eAAe;AAAA;AAAA,MACf,UAAU;AAAA;AAAA,MACV,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA,MAKV;AAAA,IACJ,GAAG;AACC,YACI,KAAoB,MACpB,UAAoB,UAAU,CAAC,GAC/B;AAAA,QACI;AAAA,QACA;AAAA,QACA;AAAA,MACJ,IAAI,IACJ,eAAoBA;AAExB,UAAI,cAAc;AACd,gBAAQ,SAAS,eAAe,OAAK,aAAa,CAAC,KAAK,EAAE,UAAU,SAAS,OAAK,EAAE,UAAU;AAAA,MAClG;AAGA,UAAI,EAAE,eAAe,UAAU;AAC3B,oBAAY,QAAQ,YAAY;AAAA,MACpC;AACA,UAAI,EAAE,wBAAwB,UAAU;AACpC,6BAAqB,QAAQ,qBAAqB;AAAA,MACtD;AACA,UAAI,EAAE,kBAAkB,UAAU;AAC9B,uBAAe,QAAQ,eAAe,CAAC;AAAA,MAC3C;AAOA,cAAQ,gBAAgB,GAAG,cAAc,CAAC,QAAQ,gBAAiB,GAAG,qBAAqB,kBAAmB,iBAAe,MAAM,SAAS,WAAW,IAAI,GAAG,QAAQ,WAAW,IAAI,KAAK,gBAAgB,WAAW,IAAM;AAE3N,UAAI,CAAC,SAAS;AACV,YAAI,WAAW;AACX,oBAAU,QAAQ,UAAU,WAAW,UAAU,SAAS;AAC1D,kBAAQ,QAAQ,QAAQ,QAAQ,IAAI,CAAC;AAAA,QACzC,OAEK;AAED,cAAI,oBAAoB;AACpB,kBAAM,IAAI,MAAM,uFAAuF;AAAA,UAC3G;AACA,kBAAQ,aAAaD;AAAA,QACzB;AAAA,MACJ;AACA,UAAI,CAAC,QAAQ,YAAY;AAErB,YAAI,WAAW;AACX,kBAAQ,aAAa,OAAK;AAEtB,kBAAM,iBAAiB,EAAE,iBAAiB,WAAW,IAAI,EAAE,IAAI,WAAW,IAAI,EAAE;AAChF,mBAAO,kBAAkB,EAAE,WAAW,UAAU,cAAc,IAAI;AAAA,UACtE;AAAA,QACJ,WAES,cAAc;AACnB,kBAAQ,aAAa,OAAK;AAEtB,kBACI,iBAAiB,EAAE,iBAAiB,WAAW,IAAI,EAAE,IAAI,WAAW,IAAI,EAAE,WAC1E,eAAiB,EAAE,iBAAiB,SAAS,IAAI,EAAE,IAAI,SAAS,IAAI,EAAE,WAAW,gBACjF,cAAiB,EAAE,iBAAiB;AACxC,mBAAO,mBAAmB,cAAc,WAAW,mBAAmB,gBAAgB,WAAW,OAAO,IAAI,WAAW,eAAe,gBAAgB,cAAc,WAAW,OAAO;AAAA,UAC1L;AAAA,QACJ,OAEK;AACD,kBAAQ,aAAa,OAAK;AAEtB,kBACI,iBAAiB,EAAE,iBAAiB,WAAW,IAAI,EAAE,IAAI,WAAW,IAAI,EAAE,WAC1E,eAAiB,EAAE,iBAAiB,SAAS,IAAI,EAAE,IAAI,SAAS,IAAI,EAAE,WAAW;AACrF,mBAAO,kBAAkB,kBAAkB,aAAa,gBAAgB;AAAA,UAC5E;AAAA,QACJ;AAAA,MACJ;AACA,YAAM,eAAe;AAAA,QACjB;AAAA,QACA;AAAA,MACJ;AAEA,SAAG,2BAA2B;AA4C9B,SAAG,QAAQ,iBAAiB;AAAA,QACxB,KAAU,iBAAiB,CAAC;AAAA,QAC5B,KAAU,QAAQ,MAAM,YAAY;AAAA,QACpC,SAAU,QAAQ,CAAC,kBAAkB,cAAc,YAAY,aAAa,aAAa,cAAc,UAAU,aAAa,QAAQ;AAAA,MAC1I,CAAC;AAED,SAAG,gBAAgB,QAAQ,MAAM,YAAY;AAC7C,aAAO,UAAU,GAAG,eAAe,OAAO,IAAI,GAAG,iBAAiB,OAAO;AAAA,IAC7E;AAAA;AAAA;AAAA;AAAA;AAAA,IAKA,iBAAiB;AAAA,MACb,QAAAC;AAAA,MACA;AAAA,MACA;AAAA,MACA,YAAY;AAAA;AAAA,MACZ;AAAA;AAAA,MACA;AAAA;AAAA,MACA,qBAAqB;AAAA;AAAA,MACrB,UAAU;AAAA;AAAA,MAEV;AAAA,MACA;AAAA;AAAA;AAAA;AAAA;AAAA,MAKA;AAAA,IACJ,GAAG;AACC,YACI,KAAS,MACT,SAAS,CAAC,GACV,QAAS,gBAAgB,GAAG,QAAQ,GAAG;AAC3C,UAAI,OAAO;AACP,YAAI,kBAAkB,iBAAiB,GAAG,qBAAqB,cAAc,IAAI;AAGjF,YAAI,CAAC,gBAAgB;AACjB,gBACI,YAAY,GAAG,YAAY,OAAO,GAClC,WAAY,oBAAI,IAAI,GACpB,YAAY,YAAY,cAAc;AAE1C,aAAG,gBAAgB,QAAQ,OAAK;AAC5B,gBAAI,UAAU,QAAQ,WAAW,EAAE,SAAS,KAAK,WAAW;AACxD,uBAAS,IAAI,CAAC;AAAA,YAClB;AAAA,UACJ,CAAC;AAED,qBAAWC,QAAO,IAAI,KAAK,SAAS,GAAGA,QAAO,SAASA,MAAK,QAAQA,MAAK,QAAQ,IAAI,CAAC,GAAG;AACrF,kBAAM,mBAAmB,UAAU,IAAI,eAAe,aAAaA,KAAI,IAAI,WAAWA,KAAI;AAC1F,iEAAkB,QAAQ,OAAK,SAAS,IAAI,CAAC;AAAA,UACjD;AAKA,4BAAkB,CAAC,GAAG,QAAQ;AAAA,QAClC;AAIA,YAAI,eAAe;AACf,4BAAkB,gBAAgB,OAAO,aAAa;AAAA,QAC1D;AAIA,iBAAS,IAAI,GAAG,EAAE,OAAO,IAAI,iBAAiB,IAAI,QAAQ,KAAK;AAC3D,gBAAM,IAAI,gBAAgB,CAAC;AAE3B,cAAI,sBAAsB,EAAE,aAAa;AACrC,mBAAO,KAAK,MAAM,QAAQ,EAAE,2BAA2B,WAAW,OAAO,EAAE,OAAO,UAAU,CAAC;AAAA,UACjG,WAES,WAAW,CAAC,GAAG;AACpB,mBAAO,KAAK,CAAC;AAAA,UACjB;AAAA,QACJ;AAAA,MACJ;AACA,aAAOD,UAAS,OAAO,OAAOA,OAAM,IAAI;AAAA,IAC5C;AAAA;AAAA;AAAA;AAAA;AAAA,IAKA,eAAe;AAAA,MACX,QAAS;AAAA,MACT;AAAA,MACA;AAAA;AAAA,MACA,YAAY;AAAA;AAAA,MACZ;AAAA;AAAA,MACA;AAAA;AAAA,MACA,qBAAqB;AAAA;AAAA,MACrB;AAAA;AAAA,MACA,UAAU;AAAA,MACV;AAAA;AAAA;AAAA;AAAA;AAAA,MAKA;AAAA,IACJ,GAAG;AApTP,UAAAE;AAqTQ,YAAM,KAAK;AAEX,UAAI,mCAAS,OAAO;AAChB,gBAAQ,MAAM;AAAA,MAClB,OACK;AACD,kBAAU,oBAAI,IAAI;AAAA,MACtB;AACA,UAAI,GAAG,OAAO;AACV,cACI,YAAkB,GAAG,YAAY,OAAO,GACxC,YAAkB,YAAY,cAAc,QAC5C,kBAAkB,CAAC,GACnBF,UAAkB,QAAM,CAAC,gBAAgB,aAAa,CAAC,OAAO,CAAC,iBAAiB,cAAc,CAAC,IAC/F,kBAAkB,OAAK,aAAa,CAAC,KAAKA,QAAO,CAAC;AACtD,kBAAU,UAAU;AAEpB,YAAI,gBAAgB;AAChB,gBAAM,IAAI,MAAM,oFAAoF;AAAA,QACxG,OACK;AAGD,WAAAE,MAAA,GAAG,oBAAH,gBAAAA,IAAoB,QAAQ,OAAK;AAC7B,gBAAI,QAAQ,WAAW,EAAE,SAAS,IAAI,SAAS;AAC3C,8BAAgB,KAAK,CAAC;AAAA,YAC1B;AAAA,UACJ;AAEA,qBAAWD,QAAO,IAAI,KAAK,SAAS,GAAGA,QAAO,SAASA,MAAK,QAAQA,MAAK,QAAQ,IAAI,CAAC,GAAG;AACrF,gBAAI,CAAC,kBAAkB,GAAG,IAAI,UAAU,IAAI,eAAe,aAAaA,KAAI,IAAI,WAAWA,OAAM,IAAI;AAErG,gBAAI,qDAAkB,MAAM;AAKxB,iCAAmB,CAAC,GAAG,gBAAgB,EAAE,OAAO,eAAe;AAE/D,kBAAI,iBAAiB,QAAQ;AACzB,iBAAC,QAAQ,IAAI,GAAG,KAAM,QAAQ,IAAI,KAAK,CAAC,CAAC,EAAE,IAAI,GAAG,GAAI,KAAK,GAAG,gBAAgB;AAAA,cAClF;AAAA,YACJ;AAAA,UACJ;AAAA,QACJ;AAEA,iBAAS,IAAI,GAAG,EAAE,OAAO,IAAI,iBAAiB,IAAI,QAAQ,KAAK;AAC3D,gBACI,IAAI,gBAAgB,CAAC,GAIrB,eAAe,qBAAqB,EAAE,2BAA2B,WAAW,OAAO,IAAI,CAAC,CAAC,GAAG,OAAOD,OAAM,GACzG,WAAc,WAAW,IAAI,SAAS,GAAG,KAAK;AAElD,mBAASG,SAAQC,KAAI,GAAG,EAAE,QAAAC,QAAO,IAAI,aAAaD,KAAIC,SAAQD,MAAK;AAC/D,kBACI,aAAa,YAAYA,EAAC,GAC1BH,QAAO,QAAQ,WAAW,WAAW,SAAS,GAC9CK,aAAY,eAAe,aAAaL,KAAI,IAAK,YAAY,cAAc,QAC3E,uBAAwBK,eAAc,eAAgB,CAAC,WAAW,aAC5D,WAAW,IAAIL,OAAM,GAAG,KAAK,IAC7B,WAAW,IAAI,WAAW,WAAW,WAAW,IAAI,WAAW,WAAW,WAAW,UAAU,WAAW,YAAY,GAAG,QAAQ;AAE3I,mBAAOA,QAAO,sBAAsBA,MAAK,QAAQA,MAAK,QAAQ,IAAI,CAAC,GAAG;AAClE,oBAAM,MAAM,QAAQ,QAAQA,KAAI;AAChC,eAACE,UAAS,QAAQ,IAAI,GAAG,MAAM,QAAQ,IAAI,KAAKA,UAAS,CAAC,CAAC;AAC3D,cAAAA,QAAO,KAAK,UAAU;AAAA,YAC1B;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ;AACA,aAAO;AAAA,IACX;AAAA,EACJ,GA/WI,cADqB,IACd,SAAQ,mBADM;AAAA;;;ACXzB,IACI,oBAAoB,KAAK;AAD7B,IAEI,kBAAoB,KAAK;AAF7B,IAGI,iBAAoB,KAAK;AAH7B,IAII,SAAoB;AA4ExB,IAAqB,UAArB,MAA6B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOzB,OAAO,OAAO,WAAW;AACrB,UACI,IAAI,KAAK,MAAM,YAAY,eAAe,GAC1C,IAAI,KAAK,MAAM,YAAY,iBAAiB,IAAI;AACpD,WAAO,GAAG,KAAK,IAAI,KAAK,MAAM,KAAK;AAAA,EACvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,OAAO,MAAM,MAAM;AACf,UAAM,OAAO,OAAO;AACpB,QAAI,SAAS,UAAU;AACnB,YAAM,QAAQ,OAAO,KAAK,IAAI;AAC9B,aAAO,OAAO,MAAM,CAAC,KAAK,CAAC,IAAI,kBAAkB,OAAO,MAAM,CAAC,KAAK,CAAC,IAAI;AAAA,IAC7E,WACS,SAAS,UAAU;AACxB,aAAO,WAAG,aAAa,IAAI;AAAA,IAC/B,WACS,QAAQ,IAAI;AACjB,cAAQ;AAAA,IACZ;AACA,WAAO,KAAK,IAAI,KAAK,IAAI,KAAK,MAAM,IAAI,GAAG,CAAC,GAAG,cAAc;AAAA,EACjE;AAAA,EACA,YAAY,QAAQ;AAChB,QAAI,aAAa,GACb,WAAW;AACf,QAAI,iCAAQ,WAAW;AAEnB,mBAAa,OAAO;AACpB,kBAAY,OAAO;AACnB,gBAAU,OAAO;AAAA,IACrB,WACS,OAAO,WAAW,UAAU;AACjC,mBAAa,YAAY,UAAU;AAAA,IACvC,WACS,QAAQ;AAOb,mBAAa,OAAO;AAOpB,kBAAY,OAAO;AAOnB,gBAAU,OAAO;AAAA,IACrB;AACA,SAAK,aAAa,aAAa,QAAQ,MAAM,cAAc,CAAC;AAC5D,SAAK,WAAe,WAAW,QACxB,aAAa,kBAAkB,iBAChC,QAAQ,MAAM,OAAO,MAAM;AACjC,SAAK,YAAc,aAAa,OAAQ,aAAa,QAAQ,MAAM,SAAS;AAAA,EAChF;AAAA,EACA,IAAI,YAAY;AACZ,WAAO,KAAK,MAAM,KAAK,YAAY,eAAe;AAAA,EACtD;AAAA,EACA,IAAI,UAAU;AACV,WAAO,KAAK,MAAM,KAAK,UAAU,eAAe;AAAA,EACpD;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,IAAI,oBAAoB;AACpB,UAAM,EAAE,YAAY,UAAU,IAAI;AAClC,WAAQ,YAAY,aAAc,iBAAiB,aAAa,YAAa,YAAY;AAAA,EAC7F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,IAAI,QAAQ;AACR,WAAO,KAAK,WAAW,oBAAI,KAAK,CAAC;AAAA,EACrC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,KAAK,MAAM;AACP,UAAM,MAAM,KAAK,WAAW,IAAI;AAChC,QAAI,MAAM,MAAM;AACZ,UAAI,QAAQ,IAAI,QAAQ,IAAI,CAAC;AAAA,IACjC;AACA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,SAAS,MAAM;AACX,WAAO,CAAC,KAAK,QAAQ,IAAI;AAAA,EAC7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,QAAQ,MAAM;AACV,WAAO,KAAK,UAAU,MAAM,EAAE;AAC9B,WAAO,WAAG,QAAQ,IAAI;AAAA,EAC1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,UAAU,MAAM;AACZ,WAAO,KAAK,UAAU,WAAG,UAAU,IAAI,CAAC;AAAA,EAC5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,UAAU,MAAM;AACZ,WAAO,KAAK,UAAU,MAAM,EAAE;AAC9B,WAAO,KAAK,OAAO;AAAA,EACvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,MAAM,OAAO,MAAM;AACrB,UACI,EAAE,UAAU,IAAI,MAChB,OAAO,QAAQ,MAAM,IAAI,GACzB,KAAM,KAAK,cAAc,OAAO,YAAa,OAAO,iBAAiB,QAAQ;AACjF,WAAQ,SAAS,OAAQ,IAAI,WAAG,GAAG,MAAM,GAAG,IAAI;AAAA,EACpD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,SAAS,OAAO,MAAM;AAClB,UACI,EAAE,WAAW,QAAQ,IAAI,MACzB,SAAU,YAAY,UAAW,UAAU,YAAa,iBAAiB,YAAY;AACzF,WAAQ,SAAS,OAAQ,SAAS,WAAG,GAAG,MAAM,QAAQ,IAAI;AAAA,EAC9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,OAAO,OAAO;AAEV,WAAO,KAAK,gBAAe,+BAAO,eAAc,KAAK,cAAc,MAAM,aAAa,KAAK,YAAY,MAAM;AAAA,EACjH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,WAAW,WAAW,SAAS;AAC3B,UACI,KAAyB,MACzB,EAAE,WAAW,QAAQ,IAAI,IACzB,CAAC,OAAO,KAAK,IAAY,GAAG,eAAe,WAAW,OAAO,GAC7D,CAAC,OAAO,GAAG,IAAc,GAAG,UAAU,OAAO,KAAK;AACtD,QAAI,YAAY,SAAS;AACrB,UAAI,QAAQ,KAAK;AACb,eAAO,QAAQ,WAAW,aAAa;AAAA,MAC3C;AACA,aAAO,QAAQ,WAAW,aAAa;AAAA,IAC3C;AACA,WAAO,EAAE,QAAQ,QAAQ,QAAQ,WAAW,aAAa;AAAA,EAC7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,WAAW,WAAW,SAAS;AAC3B,UACI,KAAiB,MACjB,CAAC,OAAO,KAAK,IAAI,GAAG,eAAe,WAAW,OAAO,GACrD,WAAiB,GAAG,WAAW,KAAK,GACpC,OAAiB,iBAAiB,WAAG,KAAK,UAAU,OAAO,IAAI;AAEnE,QAAI,OAAO,GAAG;AACV,aAAO;AAAA,IACX;AAGA,WAAO,OAAO,KAAK,WAAW;AAAA,EAClC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,WAAW,UAAU;AACjB,WAAO,SAAS,UAAU,CAAC,KAAK,WAAW,GAAG,SAAS;AAAA,EAC3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,QAAQ,MAAM;AACV,UACI,EAAE,YAAY,WAAW,QAAQ,IAAI,MACrC,OAAO,QAAQ,MAAM,IAAI;AAC7B,QAAI,YAAY,SAAS;AASrB,UAAI,OAAO,WAAW;AAClB,eAAQ,OAAO,aAAc,IAAI;AAAA,MACrC;AACA,UAAI,OAAO,SAAS;AAChB,eAAO;AAAA,MACX;AACA,aAAQ,OAAO,aAAc,KAAK;AAAA,IACtC;AASA,QAAI,OAAO,WAAW,QAAQ,WAAW;AACrC,aAAO;AAAA,IACX;AACA,WAAQ,OAAO,aAAc,IAAI;AAAA,EACrC;AAAA,EACA,SAAS,KAAK;AACV,WAAO,KAAK,UAAU,WAAG,SAAS,GAAG,CAAC;AAAA,EAC1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,UAAU,MAAM,YAAY,GAAG;AAC3B,UACI,EAAE,WAAW,IAAI,MACjB,OAAO,OAAO;AAClB,WAAQ,SAAS,WAAY,IAAI,KAAK,IAAI,IAAK,SAAS,WAAW,WAAG,MAAM,IAAI,IAAI,IAAI,KAAK,KAAK,QAAQ,CAAC;AAI3G,QAAI,aAAa,YAAY;AACzB,WAAK,gBAAiB,YAAY,IAAK,aAAa,CAAC,UAAU;AAAA,IACnE;AACA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,WAAW,MAAM,QAAQ;AACrB,UAAM,aAAa,KAAK,WAAW,IAAI;AACvC,WAAO,iCAAQ,KAAK,CAAC,QAAQ,WAAW;AACpC,eAAS,OAAO,eAAe;AAC/B,eAAS,OAAO,eAAe;AAC/B,UAAI,EAAE,WAAW,OAAO,IAAI,QACxB,EAAE,WAAW,OAAO,IAAI;AAE5B,UAAI,CAAC,QAAQ;AACT,eAAO;AAAA,MACX;AACA,UAAI,CAAC,QAAQ;AACT,eAAO;AAAA,MACX;AAGA,eAAU,SAAS,aAAc,aAAa;AAC9C,eAAU,SAAS,aAAc,aAAa;AAE9C,aAAO,SAAS,UAAW,OAAO,UAAU,UAAW,OAAO,UAAU;AAAA,IAC5E;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,WAAW,MAAM;AACb,WAAO,KAAK,UAAU,MAAM,EAAE;AAC9B,WAAO,WAAG,UAAU,IAAI;AACxB,WAAO,KAAK,UAAU,IAAI;AAC1B,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,UAAU,WAAW,SAAS;AAC1B,UAAM,CAAC,OAAO,GAAG,IAAI,KAAK,eAAe,WAAW,OAAO;AAC3D,WAAO,CAAC,WAAG,aAAa,KAAK,GAAG,WAAG,aAAa,GAAG,CAAC;AAAA,EACxD;AAAA,EACA,WAAW;AACP,UACI,EAAE,YAAY,SAAS,UAAU,IAAI,MACrC,SAAS,aAAa,IAAI,QAAQ,OAAO,UAAU,MAAM,IACzD,SAAS,QAAQ,OAAO,SAAS;AACrC,QAAI,cAAc,SAAS;AACvB,aAAO,aAAa,SAAS;AAAA,IACjC;AACA,WAAO,GAAG,UAAU,QAAQ,OAAO,OAAO,IAAI;AAAA,EAClD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,eAAe,WAAW,SAAS;AAC/B,WAAO,UAAU,UAAU,CAAC,UAAU,WAAW,UAAU,UAAU,IAAI,CAAC,WAAW,OAAO;AAAA,EAChG;AACJ;AAOA,QAAQ,WAAW,IAAI,QAAQ;AAAA,EAC3B,YAAa;AAAA,EACb,WAAa;AAAA,EACb,SAAa;AACjB,CAAC;AACD,QAAQ,oBAAoB;AAC5B,QAAQ,kBAAkB;AAC1B,QAAQ,iBAAiB;AACzB,QAAQ,SAAS;;;ACxdjB,IAEI,eAAe;AAAA,EACX,MAAY;AAAA,EACZ,WAAY;AAChB;AALJ,IAMI,aAAqB,OAAO,OAAO,YAAY;AANnD,IAOII,cAAqB,OAAO,OAAO,CAAC,CAAC;AAPzC,IAQI,EAAE,gBAAAC,gBAAe,IAAI;AAQzB,IAAqB,gBAArB,MAAmC;AAAA,EAC/B,YAAY,OAAO,SAAS;AAUxB,SAAK,UAAU,WAAW,QAAQ;AAOlC,SAAK,QAAQ;AAQb,SAAK,QAAQ,CAAC,KAAK,OAAO;AAAA,EAC9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,IAAI,WAAW,MAAM,aAAa;AAC9B,UACI,QAAW,KAAK,aAAa,SAAS,CAAC,GACvC,MAAW,KAAK,QAAQ,QAAQ,IAAI,GACpC,QAAW,MAAM,GAAG,MAAM,MAAM,GAAG,IAAI,oBAAI,IAAI;AACnD,UAAM,IAAI,WAAW;AAAA,EACzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,SAAS,aAAa;AApE1B;AAqEQ,QAAI,UAAS,UAAK,QAAQ,WAAW,YAAY,SAAS,MAA7C,mBAAgD,WACzD;AACJ,QAAI,QAAQ;AACR,mBAAY,uBAAY,YAAZ,mBAAqB,cAArB,YAAkC;AAC9C,WAAK,IAAI,aAAa,QAAQ,WAAW;AACzC,SAAG;AACC,aAAK,IAAI,QAAQ,QAAQ,WAAW;AACpC,kBAAUA;AAAA,MACd,SAAS,SAAS;AAAA,IACtB;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA,EAIA,QAAQ;AACJ,eAAW,QAAQ,UAAQ,KAAK,IAAI,IAAI,uBAAO,OAAO,IAAI,CAAC;AAAA,EAC/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA,IAAI,WAAW,MAAM,WAAW;AAE5B,KAAC,KAAK,eAAe,KAAK,WAAW;AACrC,QAAI,MAAM,KAAK,aAAa,SAAS,CAAC,GAClC;AACJ,QAAI,MAAM;AACN,YAAM,KAAK,QAAQ,QAAQ,IAAI;AAC/B,YAAM,YAAY,CAAC,IAAI,GAAG,GAAG,GAAG,IAAI,IAAI,GAAG;AAAA,IAC/C;AACA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,aAAa;AACT,SAAK,cAAc;AACnB,SAAK,MAAM;AACX,SAAK,KAAK,UAAU,KAAK,MAAM,QAAQ,SAAS;AAAA,EACpD;AAAA,EACA,aAAa;AACT,SAAK,cAAc;AACnB,eAAW,QAAQ,UAAQ,KAAK,IAAI,IAAI,IAAI;AAAA,EAChD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,QAAQ,SAAS;AACb,WAAO,KAAK,QAAQ,eAAe,QAAQ;AAAA,EAC/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,OAAO,WAAW,MAAM,aAAa;AACjC,UACI,QAAQ,KAAK,aAAa,SAAS,CAAC,GACpC,MAAQ,KAAK,QAAQ,QAAQ,IAAI,GACjC,QAAQ,MAAM,GAAG;AACrB,QAAI,OAAO;AACP,YAAM,OAAO,WAAW;AAAA,IAC5B;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,YAAY,aAAa,WAAW,SAAS;AA1JjD;AA2JQ,QAAI,UAAS,UAAK,QAAQ,WAAW,SAAS,MAAjC,mBAAoC,WAC7C;AACJ,QAAI,QAAQ;AACR,mBAAY,wCAAS,cAAT,YAAsB;AAClC,WAAK,OAAO,aAAa,QAAQ,WAAW;AAC5C,SAAG;AACC,aAAK,OAAO,QAAQ,QAAQ,WAAW;AACvC,kBAAUA;AAAA,MACd,SAAS,SAAS;AAAA,IACtB;AAAA,EACJ;AAAA,EACA,KAAK,QAAQ,OAAO,SAAS,UAAU,QAAQ;AAtKnD;AAuKQ,YAAQ,SAASD;AACjB,cAAU,WAAWA;AACrB,UACI,KAAgB,MAChB,aAAgB,MAAM,QACtB,eAAgB,QAAQ,QACxB,gBAAgB,qCAAU;AAC9B,QAAI,GAAG,UAAU;AACjB,QAAI,CAAC,GAAG,aAAa;AACjB;AAAA,IACJ;AACA,YAAQ,QAAQ;AAAA,MACZ,KAAK;AACD,WAAG,MAAM;AACT;AAAA,MAEJ,KAAK;AAED,YAAI,eAAe;AACf,kBAAQ,MAAM,MAAM;AACpB,oBAAU,QAAQ,MAAM;AACxB,eAAK,IAAI,GAAG,IAAI,eAAe,KAAK;AAChC,oBAAQ,KAAK,SAAS,CAAC,EAAE,CAAC,CAAC;AAC3B,kBAAM,KAAK,SAAS,CAAC,EAAE,CAAC,CAAC;AAAA,UAC7B;AAAA,QACJ;AAEA,YAAI,cAAc;AACd,eAAK,IAAI,GAAG,IAAI,cAAc,KAAK;AAC/B,4BAAgB,QAAQ,CAAC;AACzB,eAAG,YAAY,eAAe,cAAc,WAAW,cAAc,OAAO;AAAA,UAChF;AAAA,QACJ;AAEA,YAAI,YAAY;AACZ,eAAK,IAAI,GAAG,IAAI,YAAY,KAAK;AAC7B,uBAAW,MAAM,CAAC;AAGlB,gBAAI,SAAS,eAAe,CAAC,SAAS,UAAU;AAC5C,iBAAG,SAAS,QAAQ;AAAA,YACxB;AAAA,UACJ;AAAA,QACJ;AACA;AAAA,MAEJ,KAAK;AACD,wBAAgB,MAAM,CAAC;AACvB,WAAG;AAAA,UAAY;AAAA,YAAe,YAAO,cAAP,mBAAkB,aAAY,cAAc;AAAA,YACtE,YAAO,YAAP,mBAAgB,aAAY,cAAc;AAAA,QAAO;AAErD,WAAG,KAAK,UAAU,KAAK;AACvB;AAAA,IACR;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,SAAS,SAAS;AACd,SAAK,MAAM,KAAK,OAAO;AAAA,EAC3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,WAAW,SAAS;AAChB,UACI,EAAE,MAAM,IAAI,MACZ,IAAI,MAAM,QAAQ,OAAO;AAC7B,QAAI,IAAI,IAAI;AACR,YAAM,OAAO,GAAG,CAAC;AAAA,IACrB;AACA,WAAO,CAAC,MAAM;AAAA,EAClB;AACJ;AAEA,IAAME,SAAQ,cAAc;AAC5B,WAAW,QAAQ,UAAQA,OAAM,IAAI,IAAI,IAAI;AAC7CA,OAAM,cAAc;AACpB,cAAc,SAAS;;;ACpPvB,IAAM,EAAE,SAAS,IAAI;AASrB,IAAO,wBAAQ,YAAO;AAdtB;AAcyB,4BAA4B,OAAO;AAAA,IAExD,UAAU,QAAQ;AACd,YAAM,UAAU,MAAM;AACtB,WAAK,aAAa;AAAA,IACtB;AAAA;AAAA;AAAA,IAGA,gBAAgB;AAtBpB,UAAAC;AAuBQ,WAAK,YAAY,UAAU,KAAK,QAAQ,SAAS;AACjD,OAAAA,MAAA,MAAM,kBAAN,gBAAAA,IAAA;AAAA,IACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAQA,aAAa,EAAE,QAAQ,OAAO,SAAS,SAAS,GAAG;AAE/C,WAAK,YAAY,QAAQ,OAAO,SAAS,QAAQ;AACjD,YAAM,aAAa,GAAG,SAAS;AAAA,IACnC;AAAA,IACA,eAAe,QAAQ,MAAM;AAEzB,WAAK,YAAY,OAAO;AACxB,WAAK,YAAY,UAAU,KAAK,QAAQ,MAAM;AAC9C,YAAM,eAAe,QAAQ,IAAI;AAAA,IACrC;AAAA,IACA,cAAc,QAAQ,OAAO,QAAQ,QAAQ,oBAAoB;AAE7D,UAAK,eAAe,UAAY,aAAa,QAAS;AAClD,aAAK,YAAY,cAAc,CAAC,MAAM,GAAG,MAAM,MAAM,MAAM;AAAA,MAC/D;AACA,YAAM,cAAc,GAAG,SAAS;AAAA,IACpC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAOA,uBAAuB;AAzD3B,UAAAA;AA0DQ,OAAAA,MAAA,KAAK,eAAL,gBAAAA,IAAiB,QAAQ,cAAY,SAAS,WAAW;AAAA,IAC7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAQA,iBAAiB,SAAS;AACtB,YACI,KAAK,MACL,aAAa,GAAG,eAAe,GAAG,aAAa,CAAC;AACpD,UAAI,UAAU;AACd,WAAK,IAAI,GAAG,CAAC,YAAY,IAAI,WAAW,QAAQ,EAAE,GAAG;AACjD,YAAI,WAAW,CAAC,EAAE,QAAQ,OAAO,GAAG;AAChC,WAAC,WAAW,WAAW,CAAC,GAAG,SAAS,OAAO;AAAA,QAC/C;AAAA,MACJ;AACA,OAAC,YAAY,WAAW,KAAK,WAAW,IAAI,cAAc,IAAI,OAAO,CAAC;AACtE,aAAO;AAAA,IACX;AAAA,IACA,eAAe,MAAM;AAhFzB,UAAAA;AAiFQ,OAAAA,MAAA,KAAK,eAAL,gBAAAA,IAAiB,QAAQ,cAAY,SAAS,KAAK,GAAG,IAAI;AAAA,IAC9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAQA,mBAAmB,SAAS;AACxB,YACI,KAAK,MACL,EAAE,WAAW,IAAI;AACrB,eAAS,IAAI,yCAAY,QAAQ,MAAM,KAAgB;AACnD,YAAI,WAAW,CAAC,EAAE,QAAQ,OAAO,GAAG;AAChC,cAAI,WAAW,CAAC,EAAE,WAAW,OAAO,GAAG;AACnC,uBAAW,OAAO,GAAG,CAAC;AAAA,UAC1B;AACA;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IASA,YAAY,SAAS;AACjB,YACI,KAAiB,MACjB,EAAE,WAAW,IAAI;AACrB,gBAAU,WAAW;AACrB,eAAS,IAAI,GAAG,cAAc,IAAI,WAAW,QAAQ,EAAE,GAAG;AACtD,YAAI,WAAW,CAAC,EAAE,QAAQ,OAAO,GAAG;AAChC,iBAAO,WAAW,CAAC;AAAA,QACvB;AAAA,MACJ;AACA,UAAI,QAAQ,YAAY;AACpB,cAAM,IAAI,MAAM,+BAA+B,cAAc,GAAG,IAAI;AAAA,MACxE;AACA,aAAO,GAAG,iBAAiB,QAAQ;AAAA,IACvC;AAAA;AAAA,EAEJ,GAhHI,cADqB,IACd,SAAQ,kBADM;AAAA;;;ACJzB,IAAO,gCAAQ,YAAU,MAAM,8BAA8B,OAAO;AAAA,EAChE,WAAW,QAAQ;AACfkGA,WAAW,gBAAgB;AACvB,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA,MAKH,cAAe;AAAA;AAAA;AAAA;AAAA;AAAA,MAKf,cAAe;AAAA,MACf,SAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAQV,uBAAwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAUxB,kBAAmB;AAAA,IACvB;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,UAAU,QAAQ;AACd,UAAM,UAAU,QAAQ,IAAI;AAC5B,QAAI,KAAK,kBAAkB;AACvB,WAAK,uBAAuB;AAAA,IAChC;AACA,QAAI,CAAC,KAAK,WAAW,cAAc;AAC/B,YAAM,IAAI,MAAM,uDAAuD;AAAA,IAC3E;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,OAAO,QAAQ;AACX,WAAO,KAAK,IAAI,MAAM;AAAA,EAC1B;AAAA;AAAA,EAEA,IAAI,UAAU;AACV,WAAO,MAAM;AAAA,EACjB;AAAA,EACA,IAAI,QAAQ,SAAS;AA3KzB;AA4KQ,UAAM,UAAU;AAChB,SAAK,gBAAgB,SAAS;AAC9B,QAAI,SAAS;AAET,WAAI,aAAQ,oBAAR,mBAAyB,mBAAmB;AAC5C,aAAK,wBAAwB,QAAQ,eAAe;AAAA,MACxD;AAGA,cAAQ,IAAI;AAAA,QACR,MAAwB;AAAA,QACxB,uBAAwB;AAAA,QACxB,SAAwB;AAAA,QACxB,MAAwB;AAAA;AAAA,MAC5B,CAAC;AAAA,IACL;AAAA,EACJ;AAAA;AAAA;AAAA,EAGA,IAAI,uBAAuB;AACvB,QAAI,KAAK,WAAW;AAChB,aAAO,KAAK,YAAY;AAAA,IAC5B;AACA,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,IAAI,qBAAqB,OAAO;AAC5B,SAAK,wBAAwB;AAAA,EACjC;AAAA,EACA,eAAe,cAAc;AAxMjC;AAyMQ,UACI,EAAE,gBAAgB,IAAI,MACtB,mBAAmB,CAAC;AAIxB,QAAI,iBAAiB;AACjB,sBAAgB,wBAAwB;AAAA,IAC5C;AACA,mBAAe,MAAM,eAAe,cAAc,mBAAmB,GAAC,UAAK,QAAL,mBAAU,iBAAgB,iBAAe;AAE3G,YAAM,aAAa,YAAY,IAAI,YAAY;AAC/C,UAAI,CAAC,YAAY,yBAAyB,cAAc,MAAM;AAI1D,YAAI,CAAC,gBAAgB,mBAAmB,YAAY,IAAI,UAAU,GAAG;AAGjE,2BAAiB,KAAK;AAAA,YAClB,IAAU,gBAAgB,WAAW,WAAW,EAAE;AAAA,YAClD;AAAA,YACA,SAAU,YAAY;AAAA,UAC1B,CAAC;AAAA,QACL;AAAA,MACJ;AAEA,kBAAY,wBAAwB;AAAA,IACxC,MAAM,MAAS;AACf,QAAI,iBAAiB;AACjB,sBAAgB,QAAQ,kBAAkB;AAC1C,sBAAgB,wBAAwB;AACxC,sBAAgB,IAAI,gBAAgB;AAAA,IACxC;AACA,WAAO;AAAA,EACX;AAAA,EACA,mBAAmB,SAAS;AACxB,UAAM,EAAE,gBAAgB,IAAI;AAC5B,QAAI,iBAAiB;AAIjB,sBAAgB,wBAAwB;AACxC,YAAM,mBAAmB,OAAO;AAChC,sBAAgB,QAAQ,kBAAkB;AAC1C,sBAAgB,wBAAwB;AAAA,IAC5C,OACK;AACD,YAAM,mBAAmB,OAAO;AAAA,IACpC;AAAA,EACJ;AAAA,EACA,cAAc,aAAa,YAAY,OAAO;AAC1C,kBAAc,MAAM,cAAc,aAAa,SAAS;AACxD,UAAM,aAAa,YAAY,IAAI,YAAY;AAC/C,QAAI,cAAc,QAAQ,CAAC,YAAY,KAAK,+BAA+B;AACvE,YACI,KAAsB,MACtB,EAAE,gBAAgB,IAAI,IACtB,iBAAsB,GAAG,QAAQ,YAAY,EAAE,GAC/C,cAAsB,kBAAkB,mBAAmB,eAAe,CAAC;AAG/E,UAAI,aAAa;AAEb,cAAM,aAAa,gBAAgB,KAAK,OAAK,EAAE,YAAY,YAAY,EAAE;AACzE,YAAI,YAAY;AACZ,qBAAW,WAAW;AACtB,sBAAY,wBAAwB;AAAA,QACxC;AAAA,MACJ,OAGK;AACD,WAAG,sBAAsB;AAAA,MAC7B;AAGA,SAAG,uBAAuB;AAAA,IAC9B;AACA,WAAO;AAAA,EACX;AAAA,EACA,qBAAqB;AA1RzB;AA2RQ,UACI,KAAkB,MAElB,mBAAkB,QAAG,oBAAH,aAAsB,QAAG,gBAAH,mBAAgB;AAC5D,QAAI,GAAG,wBAAuB,mDAAiB,sBAAqB,IAAE,QAAG,YAAH,mBAAY,6BAA4B,GAAG,YAAY;AACzH,YAAM,cAAc,CAAC;AAErB,SAAG,QAAQ,iBAAe;AACtB,cAAM,EAAE,YAAY,IAAK,QAAQ,IAAI;AACrC,YAAI,cAAc,MAAM;AAEpB,sBAAY,KAAK;AAAA,YACb,IAAK,gBAAgB,WAAW,WAAW,EAAE;AAAA,YAC7C;AAAA,YACA;AAAA,UACJ,CAAC;AAAA,QACL;AAAA,MACJ,CAAC;AAED,sBAAgB,aAAa;AAAA,QACzB,qBAA0B;AAAA,QAC1B,yBAA0B;AAAA,QAC1B,uBAA0B;AAAA,MAC9B;AAEA,sBAAgB,uBAAuB;AAEvC,sBAAgB,uBAAuB;AACvC,sBAAgB,OAAO;AACvB,sBAAgB,uBAAuB;AACvC,SAAG,sBAAsB;AAAA,IAC7B;AAAA,EACJ;AAAA,EACA,WAAW;AACP,UAAM,SAAS,GAAG,SAAS;AAC3B,SAAK,mBAAmB;AAAA,EAC5B;AAAA;AAAA,EAEA,yBAAyB,EAAE,QAAQ,GAAG;AAjU1C;AAkUQ,UAAM,KAAK;AACX,QACI,GAAG,yBAAyB,CAAC,GAAG,cAAc,CAAC,GAAG,iBAClD,GAAC,QAAG,QAAH,mBAAQ,gBAAe,CAAC,GAAG;AAAA,IAE5B,CAAC,GAAG,gBAAgB,uBAAuB,CAAC,GAAG,cAAc,qBAC/D;AACE,YAAM,WAAW,oBAAI,IAAI;AAEzB,cAAQ,QAAQ,sBAAoB;AAChC,cAAM,EAAE,MAAM,IAAI;AAElB,YAAI,SAAS,CAAC,MAAM,aAAa,MAAM,YAAY,MAAM,OAAK,QAAQ,SAAS,CAAC,CAAC,GAAG;AAChF,mBAAS,IAAI,KAAK;AAAA,QACtB;AAAA,MACJ,CAAC;AAED,UAAI,SAAS,MAAM;AACf,WAAG,OAAO,CAAC,GAAG,QAAQ,CAAC;AAAA,MAC3B;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,+BAA+B,EAAE,MAAM,GAAG;AACtC,SAAK,wBAAwB,KAAK;AAAA,EACtC;AAAA,EACA,wBAAwB,iBAAiB;AACrC,UAAM,KAAK;AACX,OAAG,gBAAgB,iBAAiB;AACpC,QAAI,iBAAiB;AACjB,SAAG,mBAAmB;AACtB,sBAAgB,IAAI;AAAA,QAChB,MAAO;AAAA;AAAA,QAEP,aAAa,EAAE,QAAQ,GAAG;AACtB,cAAI,GAAG,wBAAwB,CAAC,GAAG,iBAAiB,CAAC,GAAG,aAAa;AACjE,oBAAQ,QAAQ,gBAAc;AAC1B,oBAAM,EAAE,MAAM,IAAI;AAClB,mBAAI,+BAAO,YAAW,MAAM,eAAe,WAAW,YAAY;AAC9D,sBAAM,KAAK,cAAc;AACzB,sBAAM,IAAI,cAAc,WAAW,UAAU;AAC7C,sBAAM,KAAK,cAAc;AAAA,cAC7B;AAAA,YACJ,CAAC;AAAA,UACL;AAAA,QACJ;AAAA;AAAA,QAEA,cAAe;AAAA;AAAA,QAEf,gBAAgB,EAAE,QAAQ,GAAG;AACzB,cAAI,GAAG,sBAAsB;AACzB,oBAAQ,QAAQ,gBAAc;AApXtD;AAsX4B,uBAAG,QAAQ,WAAW,OAAO,MAA7B,mBAAgC,IAAI,cAAc;AAAA,YACtD,CAAC;AAAA,UACL;AAAA,QACJ;AAAA,QACA,qBAAqB;AACjB,cAAI,GAAG,wBAAwB,CAAC,GAAG,eAAe;AAC9C,eAAG,WAAW,QAAQ,iBAAe,YAAY,IAAI,cAAc,IAAI,CAAC;AAAA,UAC5E;AAAA,QACJ;AAAA;AAAA,QAEA,OAAO,EAAE,QAAQ,QAAQ,GAAG;AACxB,cAAI,GAAG,wBAAwB,gBAAgB,SAAS;AACpD,kBAAM,EAAE,MAAM,IAAI;AAClB,kBAAM,KAAK,cAAc;AACzB,kBAAM,IAAI,cAAc,QAAQ,WAAW,KAAK;AAChD,kBAAM,KAAK,cAAc;AAAA,UAC7B;AAAA,QACJ;AAAA,QACA,SAAU;AAAA,MACd,CAAC;AAAA,IACL;AAAA,EACJ;AAAA,EACA,IAAI,KAAK,MAAM;AACX,SAAK,gBAAgB;AAGrB,QAAI,KAAK,wBAAwB,CAAC,KAAK,kBAAkB,CAAC,KAAK,WAAW;AACtE,WAAK,gBAAgB,UAAU,IAAI;AAAA,IACvC;AACA,UAAM,OAAO;AACb,SAAK,gBAAgB;AAAA,EACzB;AAAA;AAAA;AAAA,EAGA,QAAQ,WAAW,QAAQ;AAxZ/B;AAyZQ,UAAM,EAAE,QAAQ,IAAI,UAAU,CAAC;AAI/B,QAAI,WAAW,gBAAgB,WAAW,OAAO,KAAK,OAAO,EAAE,WAAW,KAAK,GAAC,UAAK,QAAL,mBAAU,cAAa;AACnG,aAAO,WAAW;AAAA,IACtB;AACA,WAAO,MAAM,QAAQ,GAAG,SAAS;AAAA,EACrC;AAAA,EACA,OAAO,YAAY,MAAM;AAla7B;AAmaQ,UAAM,SAAS,MAAM,OAAO,SAAS,GAAG,IAAI;AAE5C,QAAI,OAAO,UAAU,KAAK,sBAAsB;AAC5C,iBAAW,eAAe,QAAQ;AAC9B,YAAI,CAAC,YAAY,cAAc;AAC3B,WAAC,UAAK,qBAAmB,UAAK,gBAAL,mBAAkB,qBAA1C,mBAA4D,OAAO,YAAY,aAAa;AAAA,QACjG;AAAA,MACJ;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA;AAEJ;;;ACraA,IAAO,+BAAQ,YAAU,MAAM,6BAA6B,gCAAwB,UAAUC,KAAI,EAAE;AAAA,EAChG,WAAW,QAAQ;AACf,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,qBAAqB;AACjB,WAAO,KAAK,sBAAsB;AAAA,EACtC;AAAA,EACA,mBAAmB,OAAO;AAEtB,WAAO,MAAM,mBAAmB,KAAK,MAAM,CAAC,MAAM,qBAAqB,CAAC,MAAM;AAAA,EAClF;AACJ;;;AC3BA,IACI,WAAW,MAAO,KAAK,KAAK;AAQhC,IAAO,0BAAQ,YAAU,MAAM,wBAAwB,OAAO;AAAA,EAC1D,WAAW,QAAQ;AACf,WAAO;AAAA,EACX;AAAA;AAAA,EAEA,WAAW,eAAe;AACtB,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAsBA,WAAW,SAAS;AAChB,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAqEH;AAAA,QACI,MAAW;AAAA,QACX,UAAW;AAAA,MACf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAMA;AAAA,QACI,MAAS;AAAA,QACT,QAAS;AAAA,UACL,MAAO;AAAA,QACX;AAAA,QACA,SAAW;AAAA,QACX,UAAW;AAAA,MACf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAOA;AAAA,QACI,MAAe;AAAA,QACf,MAAe;AAAA,QACf,SAAe;AAAA,QACf,cAAe;AAAA,QACf,UAAe;AAAA,MACnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAQA;AAAA,QACI,MAAe;AAAA,QACf,SAAe;AAAA,QACf,cAAe;AAAA,QACf,UAAe;AAAA,MACnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAOA;AAAA,QACI,MAAe;AAAA,QACf,MAAe;AAAA,QACf,cAAe;AAAA,MACnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAQA;AAAA,QACI,MAAW;AAAA,QACX,UAAW;AAAA,MACf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAQA;AAAA,QACI,MAAW;AAAA,QACX,UAAW;AAAA,MACf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAMA;AAAA,QACI,MAAW;AAAA,QACX,UAAW;AAAA,MACf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAOA;AAAA,QACI,MAAW;AAAA,QACX,UAAW;AAAA,MACf;AAAA,IACJ;AAAA,EACJ;AAAA;AAAA;AAAA,EAGA,2BAA2B;AACvB,SAAK,SAAS,QAAQ,gBAAc;AAChC,iBAAW,UAAU,KAAK;AAAA,IAC9B,CAAC;AAAA,EACL;AAAA,EACA,OAAO,OAAO;AACV,UAAM,OAAO,KAAK;AAClB,SAAK,yBAAyB;AAAA,EAClC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,IAAI,YAAY;AAEZ,WAAO,KAAK,YAAY,OAAO,CAAC,WAAW,EAAE,SAAS,MAAM;AACxD,kBAAY,UAAU,KAAK,SAAS,SAAS;AAC7C,aAAO;AAAA,IACX,GAAG,CAAC,CAAC;AAAA,EACT;AAAA,EACA,IAAI,UAAU,WAAW;AACrB,gBAAY,YAAY,QAAQ,SAAS;AACzC,UACI,KAAiB,MACjB,iBAAiB,UAAU,IAAI,GAAG,YAAY,IAAI;AACtD,QAAI,GAAG,sBAAsB;AACzB,SAAG,IAAI,cAAc,eAAe,CAAC,CAAC;AAAA,IAC1C,OACK;AACD,YACI,sBAA0C,GAAG,YAAY,IAAI,OAAK,EAAE,SAAS,EAAE,GAC/E,EAAE,SAAU,OAAO,SAAU,SAAS,IAAI,YAAY,MAAM,gBAAgB,mBAAmB;AAEnG,SAAG,gBAAgB,IAAI,MAAM,IAAI,iBAAe,EAAE,UAAW,YAAY,OAAQ,GAAG,EAAE,CAAC;AACvF,SAAG,gBAAgB,OAAO,SAAS,IAAI,gBAAc,GAAG,YAAY,KAAK,OAAK,EAAE,SAAS,OAAO,UAAU,CAAC,CAAC;AAAA,IAChH;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,gBAAgBC,KAAI,UAAU,MAAM;AAChC,eAAW,YAAY,KAAK,WAAW;AACnC,UAAIA,IAAG,KAAK,SAAS,QAAQ,MAAM,OAAO;AACtC;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,YAAY,YAAY;AACpB,QAAI,cAAc,MAAM;AACpB,aAAO,KAAK;AAAA,IAChB;AACA,WAAO,KAAK,gBAAgB,KAAK,cAAc,QAAQ,UAAU,IAAI;AAAA,EACzE;AAAA;AAAA;AAAA,EAGA,IAAI,YAAY;AAvRpB;AAwRQ,QAAI;AACJ,QAAI,KAAK,cAAc;AACnB,WAAK,KAAK,IAAI,WAAW;AAAA,IAC7B,OACK;AAED,YAAK,UAAK,eAAL,YAAmB,MAAM;AAAA,IAClC;AACA,QAAI,KAAK,QAAQ;AACb,WAAK,KAAK,YAAY,mBAAmB,EAAE;AAAA,IAC/C;AACA,WAAO;AAAA,EACX;AAAA,EACA,IAAI,UAAU,WAAW;AACrB,QAAI,KAAK,UAAU;AACf,WAAK,aAAa;AAClB,WAAK,IAAI,EAAE,UAAU,CAAC;AAAA,IAC1B,OACK;AACD,YAAM,YAAY;AAAA,IACtB;AAAA,EACJ;AAAA,EACA,IAAI,UAAU;AA9SlB;AA+SQ,QAAI;AACJ,QAAI,KAAK,cAAc;AACnB,WAAK,KAAK,IAAI,SAAS;AAAA,IAC3B,OACK;AAED,YAAK,UAAK,aAAL,YAAiB,MAAM;AAAA,IAChC;AACA,QAAI,KAAK,QAAQ;AACb,WAAK,KAAK,YAAY,iBAAiB,EAAE;AAAA,IAC7C;AACA,WAAO;AAAA,EACX;AAAA,EACA,IAAI,QAAQ,SAAS;AACjB,QAAI,KAAK,UAAU;AACf,WAAK,WAAW;AAChB,WAAK,IAAI,EAAE,QAAQ,CAAC;AAAA,IACxB,OACK;AACD,YAAM,UAAU;AAAA,IACpB;AAAA,EACJ;AAAA;AAAA;AAAA,EAGA,IAAI,gBAAgB;AAChB,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,IAAI,cAAc,OAAO;AAAA,EAAC;AAAA,EAC1B,IAAI,cAAc;AACd,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,IAAI,YAAY,OAAO;AAAA,EAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAcxB,IAAI,UAAU;AACV,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,IAAI,cAAc;AACd,WAAO,CAAC,KAAK,YAAY,KAAK;AAAA,EAClC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA,IAAI,cAAc;AACd,WAAO,CAAC,KAAK,gBAAgB,CAAC,KAAK,YAAY,KAAK,sBAAsB,KAAK;AAAA,EACnF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,IAAI,gBAAgB;AAEhB,WAAO,MAAM,iBAAiB,CAAC,KAAK;AAAA,EACxC;AAAA,EACA,WAAW;AACP,UACI,KAAK,MACL,EAAE,eAAgB,gBAAgB,MAAO,EAAE,aAAa,EAAE,IAAI;AAGlE,QAAI,cAAc;AACd,UAAI,aAAa,cAAc;AAC3B,eAAO,GAAG;AAMV,YAAI,GAAG,WAAW;AACd,aAAG,cAAc;AAAA,QACrB;AAAA,MACJ;AACA,UAAI,eAAe,cAAc;AAC7B,eAAO,GAAG;AACV,YAAI,GAAG,UAAU;AACb,aAAG,gBAAgB;AAAA,QACvB;AAAA,MACJ;AAAA,IACJ;AACA,UAAM,SAAS,GAAG,SAAS;AAE3B,QAAI,GAAG,iBAAiB,CAAC,kBAAkB,CAAC,GAAG,aAAa,GAAG,UAAU;AACrE,iBAAW,cAAc,GAAG,UAAU;AAClC,mBAAW,OAAO;AAAA,UAAQ,OACtB,EAAE,2BAA2B,UAAU;AAAA,QAC3C;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,IAAI,aAAa;AACb,WAAO,MAAM;AAAA,EACjB;AAAA,EACA,IAAI,WAAW,OAAO;AAClB,UAAM,aAAa;AACnB,SAAK,YAAY,QAAQ,YAAU,OAAO,aAAa,KAAK;AAAA,EAChE;AAAA;AAAA;AAAA,EAGA,IAAI,uBAAuB;AACvB,WAAO,CAAC,KAAK,cAAc,KAAK,WAAW;AAAA,EAC/C;AAAA,EACA,QAAQ,MAAM;AACV,UAAM,OAAO,MAAM,KAAK,GAAG,IAAI;AAE/B,QAAI,CAAC,KAAK,sBAAsB;AAC5B,WAAK,aAAa;AAAA,IACtB;AACA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,IAAI,kBAAkB;AAClB,UAAM,OAAO,MAAM;AACnB,QAAI,CAAC,KAAK,sBAAsB;AAC5B,aAAO,KAAK;AAAA,IAChB;AACA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,IAAI,WAAW;AACX,UAAM,EAAE,UAAU,IAAI;AACtB,WAAO,UAAU,SAAS,UAAU,CAAC,IAAI;AAAA,EAC7C;AAAA,EACA,IAAI,SAAS,gBAAgB;AAEzB,SAAK,aAAa,KAAK,YAAY,KAAK,cAAc;AAAA,EAC1D;AAAA,EACA,IAAI,aAAa;AAhdrB;AAidQ,WAAO,KAAK,uBAAuB,KAAK,IAAI,YAAY,KAAI,UAAK,aAAL,mBAAe;AAAA,EAC/E;AAAA,EACA,IAAI,WAAW,YAAY;AACvB,SAAK,gBAAgB,UAAU;AAAA,EACnC;AAAA;AAAA,EAEA,IAAI,mBAAmB;AAvd3B;AAwdQ,YAAO,gBAAK,cAAL,mBAAgB,QAAQ,oBAAmB;AAAA,MAC9C;AAAA,MACA,GAAG,eAAe;AAAA,IACtB,OAHO,YAGA,CAAC;AAAA,EACZ;AAAA,EACA,gBAAgB,YAAY,iBAAiB,OAAO;AA7dxD;AA8dQ,UACI,KAA8B,MAC9B,EAAE,YAAY,YAAY,IAAI;AAElC,QAAI,YAAY;AAEZ,YAAM,kBAAkB,WAAW,qBAAmB,gBAAW,gBAAX,mBAAwB;AAC9E,UAAI,cAAc,MAAM;AACpB,YAAI,CAAC,GAAG,KAAK,+BAA+B;AACxC,qBAAW,uBAAuB;AAAA,QACtC;AAEA,aAAI,2CAAa,WAAU,eAAe,YAAY,CAAC,EAAE,YAAY;AAGjE,gBAAM,kBAAkB,QAAQ,WAAW,eAAe;AAC1D,6BAAmB,gBAAgB,cAAc;AACjD,sBAAY,CAAC,EAAE,WAAW;AAC1B,6BAAmB,gBAAgB,aAAa;AAAA,QACpD,OAEK;AACD,0BAAgB,sBAAsB,IAAI,UAAU;AAAA,QACxD;AAAA,MACJ,OACK;AAED,wBAAgB,OAAO,WAAW;AAAA,MACtC;AAAA,IACJ,WAES,CAAC,gBAAgB;AACtB,SAAG,IAAI,EAAE,WAAW,CAAC;AAAA,IACzB;AAAA,EACJ;AAAA;AAAA,EAEA,WAAW,SAAS,SAAS,OAAO,eAAeC,QAAO;AACtD,QAAIA,UAASA,OAAM,SAAS,gBAAgB,CAAC,KAAK,KAAK,aAAa;AAChE,YAAM,EAAE,WAAW,IAAI;AACvB,qBAAe,WAAW,cAAc;AACxC,WAAK,gBAAgB,OAAO,IAAI;AAChC,qBAAe,WAAW,cAAc;AAAA,IAC5C;AACA,UAAM,WAAW,SAAS,SAAS,OAAO,eAAeA,MAAK;AAAA,EAClE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,IAAI,cAAc;AACd,WAAO,CAAC,GAAI,KAAK,YAAY,CAAC,CAAE;AAAA,EACpC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYA,OAAO,UAAU,4BAA4B,OAAO;AAChD,UAAM,EAAE,WAAW,IAAI;AACvB,QAAI,cAAc,CAAC,WAAW,sBAAsB;AAChD,iBAAW,sBAAsB,MAAM,UAAU,yBAAyB;AAAA,IAC9E,OACK;AAGD,WAAK,aAAa,KAAK,YAAY,KAAK,QAAQ;AAChD,UAAI,CAAC,YAAY;AAEb,aAAK,KAAK,gCAAgC;AAAA,MAC9C;AAAA,IACJ;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,SAAS,UAAU,mBAAmB,OAAO;AAtjBjD;AAujBQ,UAAM,KAAK;AACX,eAAW,GAAG,YAAY,KAAK,QAAQ;AAEvC,OAAG,KAAK,mBAAmB;AAC3B,aAAG,eAAH,mBAAe,0BAA0B,IAAI;AAC7C,OAAG,KAAK,mBAAmB;AAAA,EAC/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,SAAS,eAAe,eAAe;AACnC,SAAK,cAAc,KAAK,WAAW,oCAAoC,MAAM,eAAe,aAAa;AAAA,EAC7G;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,aAAa,UAAU;AACnB,UAAM,aAAa,KAAK,YAAY,KAAK,QAAQ;AACjD,WAAO,KAAK,YAAY,KAAK,gBAAc,WAAW,eAAe,UAAU;AAAA,EACnF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,IAAI,eAAe;AA5lBvB;AA6lBQ,WAAO,CAAC,IAAG,UAAK,iBAAL,YAAqB,CAAC,CAAC;AAAA,EACtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,IAAI,aAAa;AAvmBrB;AAwmBQ,WAAO,CAAC,IAAG,UAAK,iBAAL,YAAqB,CAAC,CAAC;AAAA,EACtC;AAAA,EACA,IAAI,eAAe;AA1mBvB;AA4mBQ,WAAO,CAAC,IAAG,UAAK,iBAAL,YAAqB,CAAC,GAAG,IAAG,UAAK,iBAAL,YAAqB,CAAC,CAAC;AAAA,EAClE;AAAA;AAAA,EAEA,YAAY;AAAA,EAEZ;AAAA,EACA,iBAAiB;AAAA,EAEjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,IAAI,iBAAiB;AACjB,WAAO,KAAK;AAAA,EAChB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYA,IAAI,aAAa;AACb,UAAM,EAAE,WAAW,IAAI;AAGvB,QAAI,cAAc,YAAa,CAAC,cAAc,KAAK,QAAS;AACxD,aAAO;AAAA,IACX;AAEA,UACI;AAAA,MACI;AAAA,MACA;AAAA,IACJ,IAAI,MACJ,qBAAqB,WAAG,UAAU,SAAS;AAE/C,QAAI,aAAa,SAAS;AACtB,yBAAmB,QAAQ,mBAAmB,QAAQ,IAAI,CAAC;AAE3D,cAAQ,WAAW,WAAG,IAAI,WAAW,UAAU,KAAK;AAAA,IACxD;AAAA,EACJ;AAAA;AAAA,EAEA,OAAO,mBAAmB,IAAI;AAC1B,QAAI,MAAM,GAAG,SAAS;AAClB,WAAK,GAAG,IAAI,WAAW;AAAA,IAC3B;AACA,QAAI,IAAI;AACJ,WAAK,WAAG,UAAU,IAAI,IAAI;AAAA,IAC9B;AACA,WAAO;AAAA,EACX;AAAA,EACA,OAAO,iBAAiB,IAAI;AACxB,QAAI,MAAM,GAAG,SAAS;AAClB,WAAK,GAAG,IAAI,SAAS;AAAA,IACzB;AACA,QAAI,OAAO,GAAG,SAAS,IAAI,KAAK,GAAG,WAAW,IAAI,KAAK,GAAG,WAAW,IAAI,KAAK,GAAG,gBAAgB,IAAI,IAAI;AACrG,WAAK,WAAG,QAAQ,IAAI,KAAK,CAAC;AAAA,IAC9B;AACA,WAAO;AAAA,EACX;AAAA,EACA,OAAO,0BAA0B,IAAI;AACjC,QAAI,MAAM,GAAG,SAAS;AAClB,WAAK,GAAG,IAAI,WAAW;AAAA,IAC3B;AACA,WAAO,WAAG,UAAU,IAAI,IAAI;AAAA,EAChC;AAAA,EACA,OAAO,wBAAwB,WAAW,SAAS;AAC/C,QAAI,aAAa,UAAU,SAAS;AAChC,gBAAY,UAAU,IAAI,SAAS;AACnC,kBAAY,UAAU,IAAI,WAAW;AAAA,IACzC;AACA,QAAI,SAAS;AACT,kBAAY,KAAK,YAAY,0BAA0B,SAAS;AAIhE,UAAI,WAAG,UAAU,SAAS,IAAI,EAAE,QAAQ,MAAM,QAAQ,QAAQ,GAAG;AAC7D,kBAAU,WAAG,IAAI,SAAS,WAAG,KAAK,EAAE;AAAA,MACxC,WACS,UAAU,QAAQ,MAAM,QAAQ,QAAQ,GAAG;AAChD,kBAAU,WAAG,UAAU,SAAS,IAAI;AAAA,MACxC;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAcA,WAAW,WAAW;AAClB,YAAQ,WAAW;AAAA,MAEf,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AACD,eAAO,KAAK;AAAA,IACpB;AACA,WAAO,MAAM,WAAW,SAAS;AAAA,EACrC;AAAA;AAEJ;;;AC/tBA,IAAMC,eAAc;AAwFpB,IAAqB,aAArB,cAAwCA,aAAY,OAAO,QAAQ,EAAE;AAAA,EACjE;AAAA,EACA;AAAA,EACA;AACJ,EAAE;AAAA,EACE,WAAW,QAAQ;AACf,WAAO;AAAA,EACX;AACJ;AACA,WAAW,iBAAiB;AAC5B,WAAW,SAAS;;;AC7FpB,IAAMC,eAAc,sBAAc,oBAAoB,OAAO,SAAS,CAAC;AAwDvE,IAAqB,aAArB,cAAwCA,aAAY;AAAA,EAChD;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACJ,EAAE;AAAA,EAEE,WAAW,gBAAgB;AACvB,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAQH,YAAa;AAAA,IACjB;AAAA,EACJ;AACJ;AAbI,cAPiB,YAOV,SAAQ;AAcnB,WAAW,SAAS;;;AC9EpB,IAAO,6BAAQ,YAAU,MAAM,4BAA4B,UAAUC,OAAM;AAAA,EACvE,WAAW,QAAQ;AACf,WAAO;AAAA,EACX;AAAA,EACA,IAAI,kBAAkB;AAClkGA,WAAW,gBAAgB;AACvB,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA,MAKH,cAAe;AAAA;AAAA;AAAA;AAAA;AAAA,MAKf,cAAe;AAAA,MACf,SAAe;AAAA,MACf,UAAe;AAAA,IACnB;AAAA,EACJ;AAAA,EACA,UAAU,QAAQ;AACd,UAAM,UAAU,MAAM;AACtB,QAAI,CAAC,KAAK,WAAW,iBAAiB;AAClC,YAAM,IAAI,MAAM,qDAAqD;AAAA,IACzE;AAAA,EACJ;AAAA,EACA,YAAY;AACR,UAAM,SAAS,MAAM,UAAU,GAAG,SAAS;AAE3C,cAAU,KAAK,gBAAgB,UAAU;AACzC,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,iBAAiB,EAAE,QAAQ,UAAU,MAAM,GAAG;AAC1C,UAAM,iBAAiB,EAAE,QAAQ,UAAU,MAAM,CAAC;AAClD,QAAI,OAAO,gBAAgB,IAAI,GAAG;AAC9B,WAAK,eAAe;AACpB,aAAO,4BAA4B;AACnC,WAAK,eAAe;AAAA,IACxB;AAAA,EACJ;AAAA;AAAA,EAEA,IAAI,qBAAqB;AACrB,WAAO,KAAK,wBAAwB,KAAK,sBAAsB,KAAK,kBAAkB;AAAA,EAC1F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,sBAAsB,EAAE,WAAW,QAAQ,GAAG;AAC1C,WAAO,KAAK,MAAM,cAAY,KAAK,WAAW,qBAAqB,WAAW,SAAS,MAAM,QAAQ,CAAC;AAAA,EAC1G;AACJ;;;ACjKA,IAAO,6BAAQ,YAAU,MAAM,2BAA2B,OAAO;AAAA,EAC7D,WAAW,QAAQ;AACf,WAAO;AAAA,EACX;AAAA;AAAA,EAEA,WAAW,kBAAkB;AACzB,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAwBA,WAAW,SAAS;AAChB,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAWH,EAAE,MAAO,QAAQ,MAAO,UAAU,SAAU,KAAK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MASjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAMA,EAAE,MAAO,kBAAkB,MAAO,SAAS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAM3C,EAAE,MAAO,aAAa,MAAO,SAAS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAkCtC;AAAA,IACJ;AAAA,EACJ;AAAA;AAAA;AAAA,EAGA,8BAA8B;AAC1B,SAAK,SAAS,QAAQ,gBAAc;AAChC,iBAAW,aAAa,KAAK;AAAA,IACjC,CAAC;AAAA,EACL;AAAA,EACA,OAAO,OAAO;AACV,UAAM,OAAO,KAAK;AAClB,SAAK,4BAA4B;AAAA,EACrC;AAAA;AAAA;AAAA;AAAA,EAIA,IAAI,SAAS;AACT,WAAO,KAAK,YAAY,OAAO,CAAC,QAAQ,eAAe;AACnD,UAAI,WAAW,OAAO;AAClB,eAAO,KAAK,WAAW,KAAK;AAAA,MAChC;AACA,aAAO;AAAA,IACX,GAAG,CAAC,CAAC;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,IAAI,cAAc;AACd,WAAO,KAAK,WAAW,CAAC,GAAG,KAAK,QAAQ,IAAI,CAAC;AAAA,EACjD;AAAA,EACA,IAAI,YAAY,aAAa;AAEzB,gBAAY,QAAQ,gBAAc;AAC9B,iBAAW,WAAW;AAAA,IAC1B,CAAC;AAAA,EACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,YAAY;AACR,kBAAc,UAAU,aAAa,SAAS,4DAA4D;AAC1G,WAAO,KAAK;AAAA,EAChB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,IAAI,gBAAgB;AAChB,WAAO,MAAM,kBAAkB,CAAC,KAAK,UAAU,KAAK,OAAO;AAAA,EAC/D;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,cAAc;AACV,SAAK,eAAe,KAAK,gBAAgB,OAAO,KAAK,WAAW;AAAA,EACpE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,IAAI,WAAW;AACX,UACI,EAAE,OAAO,GAAG,IAAI;AACpB,QAAI,CAAC,MAAM;AACP,aAAO;AAAA,IACX;AACA,UAAM,QAAgB,KAAK,MAAM,GAAG,GAChC,eAAgB,MAAM,CAAC,EAAE,CAAC,GAC1B,cAAiB,MAAM,SAAS,IAAI,MAAM,MAAM,SAAS,CAAC,EAAE,CAAC,IAAI;AACrE,WAAO,eAAe;AAAA,EAC1B;AAAA,EACA,cAAc,MAAM;AA3NxB;AA4NQ,UAAM,WAAY,KAAK,uBAAqB,UAAK,YAAL,mBAAc;AAC1D,WAAO,CAAC,cAAY,cAAS,kBAAT,kCAAyB;AAAA,EACjD;AACJ;;;AC3NA,IAAMC,eAAc;AAuEpB,IAAqB,gBAArB,cAA2C,2BAAmB,sBAAcA,aAAY,OAAO,YAAY,CAAC,CAAC,EAAE;AAS/G;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADI,cARiB,eAQV,SAAQ;AAEnB,cAAc,iBAAiB;AAC/B,cAAc,SAAS;;;AChFvB,IAAMC,eAAc,sBAAc,uBAAuB,OAAO,SAAS,CAAC;AA0C1E,IAAqB,gBAArB,cAA2C,2BAAmBA,YAAW,EAAE;AAAA,EACvE,WAAW,gBAAgB;AACvB,WAAO;AAAA,MACH,YAAa;AAAA,IACjB;AAAA,EACJ;AACJ;AACA,cAAc,SAAS;;;ACjDvB,IAAM,2BAA2B;AAAA,EAC7B;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACJ;AAMA,IAAqB,sBAArB,cAAiD,MAAM;AAAA,EACnD,WAAW,QAAQ;AACf,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAgCA,WAAW,OAAO;AACd,WAAO;AAAA,MACH,cAAe;AAAA,MACf,YAAe;AAAA,MACf,YAAe;AAAA,MACf,UAAe;AAAA,IACnB;AAAA,EACJ;AAAA,EACA,WAAW,SAAS;AAChB,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAOH,EAAE,MAAO,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAMhB,EAAE,MAAO,KAAK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAMd,EAAE,MAAO,QAAQ,MAAO,OAAO,cAAe,EAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAMhD,EAAE,MAAO,OAAO,cAAe,GAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAMlC,EAAE,MAAO,iBAAiB,MAAO,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAM3C,EAAE,MAAO,YAAY,MAAO,SAAS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAMrC,EAAE,MAAO,UAAU,MAAO,SAAS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAMnC,EAAE,MAAO,OAAO,MAAO,UAAU,WAAY,MAAM,cAAe,EAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAkBpE;AAAA,QACI,MAAe;AAAA,QACf,MAAe;AAAA,QACf,cAAe;AAAA,MACnB;AAAA,MACA,EAAE,MAAO,eAAe,SAAU,OAAO,UAAW,KAAK;AAAA,IAC7D;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA4BA,UAAU,MAAM;AACZ,UACI,OAAO,KAAK,KAAK,SAAS,KAAK,UAAU,GACzC,KAAO,KAAK,KAAK,SAAS,GAAG,UAAU;AAE3C,QAAI,QAAQ,MAAM;AACd,WAAK,YAAY;AAAA,IACrB;AACA,QAAI,MAAM,MAAM;AACZ,WAAK,UAAU;AAAA,IACnB;AACA,UAAM,UAAU,GAAG,SAAS;AAAA,EAChC;AAAA;AAAA,EAEA,IAAI,aAAa;AAjLrB;AAkLQ,WAAO,KAAK,gBAAc,UAAK,eAAe,CAAC,MAArB,mBAAwB;AAAA,EACtD;AAAA,EACA,IAAI,KAAK,OAAO;AACZ,UAAM,EAAE,UAAU,IAAI;AAGtB,SAAI,uCAAW,YAAW,UAAU,OAAO,OAAO;AAC9C,WAAK,IAAI,QAAQ,KAAK;AAAA,IAC1B,OACK;AACD,WAAK,YAAY;AAAA,IACrB;AAAA,EACJ;AAAA,EACA,IAAI,OAAO;AACP,WAAO,KAAK,IAAI,MAAM;AAAA,EAC1B;AAAA,EACA,IAAI,GAAG,OAAO;AACV,UAAM,EAAE,QAAQ,IAAI;AAGpB,SAAI,mCAAS,YAAW,QAAQ,OAAO,OAAO;AAC1C,WAAK,IAAI,MAAM,KAAK;AAAA,IACxB,OACK;AACD,WAAK,UAAU;AAAA,IACnB;AAAA,EACJ;AAAA,EACA,IAAI,KAAK;AACL,WAAO,KAAK,IAAI,IAAI;AAAA,EACxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,IAAI,WAAW;AACX,WAAO,KAAK,YAAY;AAAA,EAC5B;AAAA,EACA,IAAI,SAAS,MAAM;AACf,SAAK,YAAY,IAAI;AAAA,EACzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,cAAc;AACV,WAAO,KAAK,IAAI,MAAM;AAAA,EAC1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,YAAY,MAAM;AACd,QAAI;AACJ,QAAI,SAAS,KAAK,UAAU;AACxB,eAAS,KAAK,IAAI;AAAA,QACd;AAAA,QACA,UAAW;AAAA,QACX,QAAW;AAAA,MACf,CAAC;AAAA,IACL;AACA,WAAO;AAAA,EACX;AAAA,EACA,IAAI,MAAM;AACN,WAAO,KAAK,IAAI,KAAK;AAAA,EACzB;AAAA,EACA,IAAI,IAAI,KAAK;AACT,SAAK,OAAO,GAAG;AAAA,EACnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,OAAO,KAAK,UAAU,KAAK,SAAS;AAGhC,QAAI,UAAU,WAAW,GAAG;AACxB,UAAI,OAAO,QAAQ,UAAU;AACzB,aAAK,MAAM;AAAA,MACf,OACK;AACD,cAAM,WAAW,cAAc,GAAG;AAClC,aAAK,IAAI;AAAA,UACL,KAAU,IAAI;AAAA,UACd,SAAU,IAAI;AAAA,QAClB,CAAC;AAAA,MACL;AACA;AAAA,IACJ;AAEA,UAAM,WAAW,GAAG;AACpB,SAAK,IAAI;AAAA,MACL;AAAA,MACA;AAAA,IACJ,CAAC;AAAA,EACL;AAAA,EACA,SAAS;AACL,QAAI,KAAK,KAAK;AACV,aAAO,GAAG,KAAK,MAAM,IAAI,MAAM,MAAM,KAAK,IAAI,KAAK,GAAG,IAAI,WAAW,mBAAmB,KAAK,OAAO;AAAA,IACxG;AACA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,IAAI,UAAU;AACV,WAAO,IAAI,SAAS;AAAA,MAChB,MAAY,KAAK;AAAA,MACjB,WAAY,KAAK;AAAA,IACrB,CAAC;AAAA,EACL;AAAA,EACA,IAAI,QAAQ,KAAK;AACb,QAAI,OAAO,QAAQ,UAAU;AACzB,WAAK,OAAO,GAAG;AAAA,IACnB,OACK;AACD,WAAK,OAAO,IAAI,WAAW,IAAI,IAAI;AAAA,IACvC;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,IAAI,gBAAgB;AAChB,UACI,KAAK,MACL,EAAE,QAAQ,eAAe,IAAI,IAC7B,QAAQ,OAAO,CAAC;AACpB,QAAI;AACJ,QAAI,OAAO;AACP,YACI,EAAE,WAAW,QAAQ,IAAI,IACzB,cAAyB,MAAM;AAGnC,eAAS,cAAc,eAAe,CAAC,UAAU,mBAAmB,YAAY,eAAe,CAAC,QAAQ;AAAA,IAC5G,OACK;AACD,eAAS,QAAQ,eAAe,CAAC,CAAC;AAAA,IACtC;AACA,WAAO,UAAU,MAAM;AAAA,EAC3B;AAAA,EACA,eAAe;AACX,UAAM,EAAE,WAAW,QAAQ,IAAI;AAC/B,SAAI,uCAAW,iBAAe,mCAAS,cAAa;AAChD,YAAM,OAAO,oBAAoB;AACjC,UAAI,YACA;AACJ,cAAQ,KAAK,MAAM;AAAA,QACf,KAAK,KAAK;AACN,uBAAa,UAAU;AACvB,uBAAa,QAAQ;AACrB;AAAA,QACJ,KAAK,KAAK;AACN,uBAAa,UAAU;AACvB,uBAAa,QAAQ;AACrB;AAAA,QACJ,KAAK,KAAK;AACN,uBAAa,UAAU;AACvB,uBAAa,QAAQ;AACrB;AAAA,QACJ,KAAK,KAAK;AACN,uBAAa,UAAU;AACvB,uBAAa,QAAQ;AACrB;AAAA,QACJ;AACI,gBAAM,IAAI,MAAM,8BAA8B,KAAK,IAAI;AAAA,MAC/D;AACA,aAAO;AAAA,QACH,OAAQ,KAAK,IAAI,YAAY,UAAU;AAAA,QACvC,KAAQ,KAAK,IAAI,YAAY,UAAU;AAAA,MAC3C;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,UAAU,KAAK;AAvXnB;AAwXQ,UAAM,WAAU,gBAAK,gBAAL,mBAAkB,MAAM,SAAxB,YAAgC,CAAC;AACjD,QAAI,CAAC,QAAQ,SAAS,GAAG,GAAG;AACxB,WAAK,cAAc,QAAQ,OAAO,GAAG,EAAE,KAAK,GAAG;AAAA,IACnD;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,YAAY,KAAK;AACb,UAAM,EAAE,YAAY,IAAI;AACxB,QAAI,aAAa;AACb,YACI,UAAU,YAAY,MAAM,GAAG,GAC/B,QAAU,QAAQ,QAAQ,GAAG;AACjC,UAAI,SAAS,GAAG;AACZ,gBAAQ,OAAO,OAAO,CAAC;AACvB,aAAK,cAAc,QAAQ,KAAK,GAAG;AAAA,MACvC;AAAA,IACJ;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,kBAAkB,KAAK;AACnB,WAAO,KAAK,eAAe,KAAK,YAAY,MAAM,GAAG,EAAE,SAAS,GAAG;AAAA,EACvE;AAAA,EACA,mBAAmB,KAAK;AACpB,UAAM,WAAW,yBAAyB,KAAK,IAAI;AACnD,QAAI,KAAK;AACL,aAAO;AAAA,IACX;AAEA,QAAI,KAAK,SAAS,oBAAoB,KAAK,YAAY;AACnD,aAAO;AAAA,IACX;AACA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA+BA,WAAW;AACP,WAAO,GAAG,KAAK,OAAO,KAAK,mBAAmB,IAAI,KAAK,OAAO;AAAA,EAClE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,IAAI,UAAU;AACV,UAAM,EAAE,WAAW,SAAS,KAAK,IAAI;AACrC,WAAO,OAAO,SAAS,YAAY,aAAa,WAAW,cAAc;AAAA,EAC7E;AAAA,EACA,IAAI,gBAAgB;AAjdxB;AAkdQ,aAAO,UAAK,cAAL,mBAAgB,SAAQ;AAAA,EACnC;AAAA,EACA,IAAI,cAAc;AApdtB;AAqdQ,aAAO,UAAK,YAAL,mBAAc,SAAQ;AAAA,EACjC;AAAA;AAAA,EAEA,wBAAwB,WAAW,UAAU,UAAU;AAxd3D;AAydQ,QAAI,CAAC,MAAM,wBAAwB,WAAW,UAAU,QAAQ,GAAG;AAC/D,aAAO;AAAA,IACX;AACA,QAAI,cAAc,UAAU,cAAc,QAAQ,cAAc,eAAe,cAAc,WAAW;AACpG,YAAM,cAAa,UAAK,YAAL,mBAAc;AACjC,UAAI,cAAc,WAAW,SAAS,QAAQ,MAAM,WAAW,QAAQ,QAAQ,GAAG;AAC9E,eAAO;AAAA,MACX;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA;AAEJ;AACA,oBAAoB,iBAAiB;AACrC,oBAAoB,SAAS;;;ACpe7B,IAAMC,eAAc;AA4DpB,IAAqB,kBAArB,cAA6C,sBAAcA,aAAY,OAAO,mBAAmB,CAAC,EAAE;AAAA,EAChG,WAAW,QAAQ;AACf,WAAO;AAAA,EACX;AAAA;AAAA,EAEA,iBAAiB,UAAU,QAAQ,KAAK;AACpC,UACI,QAAY,oBAAoB,MAChC,YAAY,MAAM,UAAU,QAC5B,UAAY,MAAM,SAAS;AAC/B,QAAI,aAAa,WAAW;AACxB,aAAQ,WAAW,YAAa,MAAM,eAAe,MAAM;AAAA,IAC/D;AACA,WAAQ,WAAW,UAAW,MAAM,WAAW,MAAM;AAAA,EACzD;AACJ;AACA,gBAAgB,iBAAiB;AACjC,gBAAgB,SAAS;;;ACpEzB,IAAO,+BAAQ,YAAU,MAAM,6BAA6B,OAAO;AAAA,EAC/D,WAAW,QAAQ;AACfkGA,WAAW,gBAAgB;AACvB,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA,MAKH,cAAe;AAAA;AAAA;AAAA;AAAA;AAAA,MAKf,cAAe;AAAA,MACf,SAAU;AAAA,IACd;AAAA,EACJ;AAAA,EACA,wBAAwB,OAAO,UAAU,QAAQ,OAAO,MAAM,cAAc;AACxE,mBAAe,iBAAiB,CAAAC,WAAS,KAAK,qBAAqBA,MAAK;AACxE,YAAQ,YAAY,QAAQ,KAAK;AACjC,UAAM,OAAO,CAACC,SAAQD,WAAU;AAC5B,UAAIA,OAAM,YAAY,CAAC,MAAM;AACzB,QAAAA,OAAM,SAAS,SAAO;AAClB,UAAAC,UAAS,aAAa,GAAG,EAAE,OAAO,UAAUA,OAAM;AAAA,QACtD,CAAC;AAAA,MACL,OACK;AACD,QAAAA,UAAS,aAAaD,MAAK,EAAE,OAAO,UAAUC,OAAM;AAAA,MACxD;AAAA,IACJ,GAAG,MAAM;AACT,WAAO;AAAA,EACX;AAAA,EACA,qBAAqB,OAAOC,KAAI,UAAU,MAAM,cAAc;AAC1D,WAAO,KAAK,wBAAwB,OAAO,CAAC,QAAQ,eAAe;AAC/D,eAAS,UAAU,KAAK,OAAO,KAAK,UAAU;AAC9C,aAAO;AAAA,IACX,GAAG,CAAC,GAAG,MAAM,YAAY;AAAA,EAC7B;AAAA,EACA,qBAAqB,OAAOA,KAAI,UAAU,MAAM;AAC5C,WAAO,KAAK,wBAAwB,OAAO,CAAC,QAAQ,eAAe;AAC/D,eAAS,UAAU,KAAK,OAAO,KAAK,UAAU;AAC9C,aAAO;AAAA,IACX,GAAG,CAAC,GAAG,IAAI;AAAA,EACf;AAAA,EACA,mBAAmB,OAAOA,KAAI,UAAU,MAAM;AAC1C,WAAO,KAAK,sBAAsB,OAAO,CAAC,QAAQ,eAAe;AAC7D,eAAS,UAAU,KAAK,OAAO,KAAK,UAAU;AAC9C,aAAO;AAAA,IACX,GAAG,CAAC,GAAG,IAAI;AAAA,EACf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,qBAAqB,OAAO;AACxB,WAAO,CAAC,EAAE,OAAO,MAAM,gBAAgB,CAAC,GAAG,MAAM,cAAc,CAAC,CAAC;AAAA,EACrE;AAAA,EACA,wBAAwB,OAAO;AAC3B,SAAK,OAAO,KAAK,qBAAqB,KAAK,CAAC;AAAA,EAChD;AAAA,EACA,wBAAwB,OAAO;AAC3B,SAAK,OAAO,MAAM,YAAY;AAAA,EAClC;AAAA,EACA,sBAAsB,OAAO,MAAM;AAC/B,SAAK,OAAO,MAAM,UAAU;AAAA,EAChC;AAAA,EACA,oBAAoB,KAAK;AACrB,WAAO,KAAK,QAAQ;AAAA,MAAK,OACrB,OAAO,KAAK,YAAY,uCAAuC,EAAE,MAAM,EAAE,EAAE;AAAA,IAC/E;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,sCAAsC,aAAa,aAAa;AAC5D,kBAAc,MAAM,KAAK,WAAW;AACpC,kBAAc,MAAM,KAAK,WAAW;AACpC,WAAO,KAAK,oBAAoB,KAAK,YAAY,uCAAuC,aAAa,WAAW,CAAC;AAAA,EACrH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,2BAA2B,aAAa,aAAa;AACjD,WAAO,KAAK,sCAAsC,aAAa,WAAW,KACtE,KAAK,sCAAsC,aAAa,WAAW;AAAA,EAC3E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAcA,MAAM,kBAAkB,oBAAoB,MAAM,MAAM;AACpD,QAAI,YAAY,oBAAoB,UAAU;AAC9C,QAAI,sBAAsB,MAAM;AAC5B,aAAO;AAAA,IACX;AAEA,QAAI,mBAAmB,mBAAmB;AACtC,OAAC,EAAE,WAAW,QAAQ,IAAI;AAAA,IAC9B;AAEA,gBAAY,KAAK,WAAW,QAAQ,SAAS;AAE7C,cAAU,KAAK,WAAW,QAAQ,OAAO;AAGzC,QAAI,aAAa,SAAS;AAEtB,UAAI,CAAC,UAAU,WAAW,CAAC,QAAQ,SAAS;AACxC,eAAO;AAAA,MACX;AAEA,aAAO,KAAK,QAAQ,kBAAkB,WAAW,SAAS,IAAI;AAAA,IAClE;AACA,WAAO,uBAAuB;AAAA,EAClC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,0BAA0B,QAAQ,MAAM,MAAM;AAC1C,WAAO,KAAK,kBAAkB,QAAQ,MAAM,IAAI;AAAA,EACpD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,2BAA2B,KAAK;AAC5B,WAAO,KAAK,QAAQ,OAAO,CAAC,QAAQ,QAAQ;AACxC,UAAI,IAAI,kBAAkB,GAAG;AAAG,eAAO,KAAK,GAAG;AAC/C,aAAO;AAAA,IACX,GAAG,CAAC,CAAC;AAAA,EACT;AAAA,EACA,OAAO,uCAAuC,MAAM,IAAI;AACpD,WAAO,UAAU,gBAAgB;AAAA,EACrC;AAAA;AAAA,EAEA,wBAAwB,QAAQ;AAC5B,WAAO,KAAK,qBAAqB,MAAM;AAAA,EAC3C;AAAA;AAEJ;;;ACjRA,IAAMC,eAAc,sBAAc,yBAAyB,OAAO,SAAS,CAAC;AAyC5E,IAAqB,kBAArB,cAA6C,6BAAqBA,aAAY,OAAO,SAAS,CAAC,EAAE;AAAA,EAC7F,WAAW,gBAAgB;AACvB,WAAO;AAAA,MACH,YAAa;AAAA,IACjB;AAAA,EACJ;AACJ;AACA,gBAAgB,SAAS;;;ACrCzB,IAAO,6BAAQ,YAAU,MAAM,4BAA4B,UAAUC,OAAM,MAAM,kCAA0B,uBAAe,mBAAW,EAAE;AAAA;AAAA,EAEnI,WAAW,gBAAgB;AACvB,WAAO;AAAA,MACH,SAAU;AAAA,IACd;AAAA,EACJ;AAAA,EACA,eAAe,QAAQ;AAEnB,SAAK,UAAU,SAAS;AACxB,UAAM,eAAe,MAAM;AAC3B,SAAK,kBAAkB,oBAAI,IAAI;AAAA,EACnC;AAAA,EACA,MAAM,aAAa;AACf,UAAM,EAAE,QAAQ,IAAI;AAEpB,QAAI,SAAS;AACT,YAAM,QAAQ,YAAY;AAAA,IAC9B;AACA,WAAO,MAAM,WAAW;AAAA,EAC5B;AAAA,EACA,qBAAqB,UAAU;AAC3B,UACI,KAAK,MACL,EAAE,QAAQ,IAAI;AAClB,OAAG,0BAA0B;AAC7B,UACI,iBAAiB,QAAQ,SAAS,WAClC,eAAiB,QAAQ,SAAS,SAClC,YAAiB,aAAa,QAAQ,UAAU,eAAe,UAAU,GACzE,UAAiB,aAAa,QAAQ,UAAU,aAAa,UAAU;AAE3E,QAAI,OAAO,cAAc,UAAU;AAC/B,mBAAa,QAAQ,UAAU,eAAe,YAAY,eAAe,QAAQ,SAAS,CAAC;AAAA,IAC/F;AACA,QAAI,OAAO,YAAY,UAAU;AAC7B,mBAAa,QAAQ,UAAU,aAAa,YAAY,aAAa,QAAQ,OAAO,CAAC;AAAA,IACzF;AACA,WAAO,OAAO,SAAS,QAAQ;AAC/B,OAAG,gBAAgB,IAAI,IAAI,QAAQ;AACnC,OAAG,0BAA0B;AAAA,EACjC;AAAA,EACA,oBAAoB,UAAU,UAAU,CAAC,GAAG;AACxC,UACI,KAAK,MACL,EAAE,QAAQ,IAAI;AAElB,OAAG,uBAAuB;AAC1B,UAAM,oBAAoB,GAAG,SAAS;AAEtC,QAAI,qCAAU,SAAS;AAMnB,UAAI,QAAQ,sBAAsB;AAC9B,gBAAQ,IAAI;AAAA,UACR,iBAAkB,MAAM;AACpB,eAAG,uBAAuB;AAC1B,eAAG,qBAAqB,SAAS,OAAO;AACxC,eAAG,sBAAsB;AAAA,UAC7B;AAAA,UACA,MAAO;AAAA,QACX,CAAC;AAAA,MACL,OACK;AACD,WAAG,qBAAqB,SAAS,OAAO;AAAA,MAC5C;AAAA,IACJ;AACA,OAAG,sBAAsB;AAAA,EAC7B;AAAA,EACA,MAAM,OAAO;AACT,UAAM,EAAE,QAAQ,IAAI;AAEpB,SAAK,gBAAgB;AAErB,QAAI,SAAS;AACT,YAAM,QAAQ,YAAY;AAAA,IAC9B;AACA,QAAI,KAAK,cAAc;AACnB;AAAA,IACJ;AAEA,SAAK,eAAe,KAAK;AACzB,WAAO,MAAM,KAAK;AAAA,EACtB;AAAA,EACA,MAAM,cAAc,SAAS,UAAU,SAAS;AAxGpD;AAyGQ,UAAM,KAAK;AACX,QAAI,GAAG,iBAAe,QAAG,YAAH,mBAAY,cAAa;AAC3C;AAAA,IACJ;AACA,OAAG,QAAQ,qBAAqB;AAChC,UAAM,MAAM,cAAc,SAAS,UAAU,OAAO;AAIpD,SAAI,qCAAU,YAAY,GAAG,8BAA4B,wCAAS,SAAT,mBAAe,UAAU;AAE9E,SAAG,qBAAqB,SAAS,aAAW,wCAAS,SAAT,mBAAe,QAAO;AAAA,IACtE;AAEA,QAAI,GAAG,SAAS;AACZ,UAAI,cAAc,QAAQ;AAE1B,UAAI,GAAG,mBAAmB;AACtB,sBAAc,SAAS,QAAQ;AAAA,MACnC;AAEA,YAAM,kBAAkB,cAAc,aAAa,WAAW,WAAW;AACzE,SAAG,gBAAgB;AACnB,SAAG,eAAe,IAAI;AACtB,YAAM,OAAO,GAAG,QAAQ,mBAAmB,CAAC,GAAG,QAAQ;AAEvD,YAAM,GAAG,QAAQ,YAAY;AAC7B,SAAG,eAAe,IAAI;AAEtB,eAAG,mBAAH,4BAAoB;AAEpB,eAAG,2BAAH;AAAA,IACJ;AAEA,aAAG,YAAH,4BAAa;AAAA,EACjB;AAAA,EACA,qBAAqB,MAAM;AA7I/B;AA8IQ,UACI,KAAc,MACd,eAAc,QAAG,YAAH,mBAAY,IAAI;AAClC,QAAI,gBAAgB,SAAS,GAAG,0BAA0B;AACtD,SAAG,QAAQ,IAAI,QAAQ;AAAA,IAC3B;AACA,UAAM,kBAAkB,GAAG,IAAI;AAC/B,QAAI,gBAAgB,OAAO;AACvB,SAAG,QAAQ,IAAI,OAAO;AAAA,IAC1B;AAAA,EACJ;AAAA,EACA,6BAA6B,QAAQC,QAAO,OAAO;AAC/C,UAAM,WAAW,OAAOA,MAAK;AAC7B,IAAAA,SAAQ,OAAO,mBAAmBA,MAAK;AAGvC,YAAOA,UAAA,gBAAAA,OAAO,WAAUA,OAAM,QAAQ,UAAU,KAAK,IAAI,aAAa,QAAQ,UAAU,KAAK;AAAA,EACjG;AAAA,EACA,yBAAyB;AAErB,SAAK,gBAAgB,QAAQ,CAAC,SAAS,WAAW;AAC9C,aAAO,QAAQ,OAAO,EAAE,QAAQ,CAAC,CAAC,KAAK,KAAK,MAAM;AAG9C,YAAI,KAAK,6BAA6B,QAAQ,KAAK,KAAK,GAAG;AACvD,iBAAO,OAAO,KAAK,SAAS,GAAG;AAAA,QACnC;AAAA,MACJ,CAAC;AAAA,IACL,CAAC;AACD,SAAK,gBAAgB,MAAM;AAAA,EAC/B;AAAA,EACA,oBAAoB,WAAW,eAAe,cAAc,MAAM;AAC9D,UAAM,aAAa,MAAM,oBAAoB,WAAW,eAAe,WAAW,GAAG,IAAI;AAGzF,QAAI,WAAW,QAAQ,KAAK,SAAS;AACjC,iBAAW,CAAC,IAAI,OAAO,KAAK,YAAY;AACpC,cAAM,SAAS,UAAU,MAAM,QAAQ,EAAE;AACzC,kBAAU,KAAK,gBAAgB,IAAI,QAAQ,OAAO;AAAA,MACtD;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AACJ;;;AChLA,IAAO,6BAAQ,YAAO;AATtB;AASyB,6BAAkC,UAAU,OAAO;AAAA,IAExE,WAAW,eAAe;AACtB,aAAO;AAAA;AAAA,QAEH,aAAe;AAAA,QACf,cAAe;AAAA,QACf,WAAe;AAAA,QACf,YAAe;AAAA,MACnB;AAAA,IACJ;AAAA;AAAA,IAEA,IAAI,cAAc;AACd,aAAO,KAAK,gBAAgB;AAAA,IAChC;AAAA,IACA,kBAAkB,aAAa;AAC3B,WAAK,gBAAgB,OAAO;AAAA,IAChC;AAAA,IACA,IAAI,eAAe;AACf,aAAO,KAAK,gBAAgB;AAAA,IAChC;AAAA,IACA,mBAAmB,cAAc;AAC7B,WAAK,gBAAgB,OAAO;AAAA,IAChC;AAAA,IACA,IAAI,YAAY;AACZ,aAAO,KAAK,cAAc;AAAA,IAC9B;AAAA,IACA,gBAAgB,WAAW;AACvB,WAAK,cAAc,OAAO;AAAA,IAC9B;AAAA,IACA,IAAI,aAAa;AACb,aAAO,KAAK,eAAe;AAAA,IAC/B;AAAA,IACA,cAAc,WAAW,SAAS;AAC9B,YACI,QAAQ,KAAK,gBACb,MAAM,CAAC;AACX,iBAAW,YAAY,OAAO;AAE1B,YAAI,SAAS,aAAa;AACtB,cAAI,KAAK,GAAG,SAAS,2BAA2B,WAAW,OAAO,CAAC;AAAA,QACvE,WACS,SAAS,YAAY,WAAW,YAAY,SAAS,SAAS;AACnE,cAAI,KAAK,QAAQ;AAAA,QACrB;AAAA,MACJ;AACA,aAAO;AAAA,IACX;AAAA,IACA,iBAAiB,YAAY;AACzB,WAAK,eAAe,OAAO;AAAA,IAC/B;AAAA,IACA,sBAAsB,WAAW,SAAS;AACtC,YACI,QAAQ,KAAK,wBACb,MAAM,CAAC;AACX,iBAAW,YAAY,OAAO;AAE1B,YAAI,SAAS,aAAa;AACtB,cAAI,KAAK,GAAG,SAAS,2BAA2B,WAAW,OAAO,CAAC;AAAA,QACvE,WACS,SAAS,YAAY,WAAW,YAAY,SAAS,SAAS;AACnE,cAAI,KAAK,QAAQ;AAAA,QACrB;AAAA,MACJ;AACA,aAAO;AAAA,IACX;AAAA;AAAA,EAEJ,GAlEI,cADqB,IACd,SAAQ,uBADM;AAAA;;;ACCzB,IAAO,oCAAQ,YAAO;AAVtB;AAUyB,6BAAyC,UAAU,OAAO;AAAA,IA4C/E,IAAI,mBAAmB;AACnB,aAAO,CAAC,KAAK,WAAW,KAAK,gBAAgB,KAAK,sBAAsB,EAAE,OAAO,OAAK,CAAC;AAAA,IAC3F;AAAA;AAAA;AAAA,IAGA,2BAA2B,OAAO;AAC9B,UAAI,KAAK,iBAAiB,SAAS,KAAK,KAAK,CAAC,MAAM,wBAAwB;AACxE,cAAM,yBACF,eAAe,OAAO,OAAO,iBAAiB,CAAC,QAAQ,cAAc;AACjE,cAAI,aAAa,MAAM,eAAe;AAElC,iBAAK,wBAAwB,MAAM;AAAA,UACvC;AAAA,QACJ,CAAC;AAAA,MACT;AAAA,IACJ;AAAA,IACA,YAAY,OAAO;AACf,YAAM,YAAY,KAAK;AAEvB,UAAI,SAAS,KAAK,YAAY,QAAQ,KAAK,iBAAiB,SAAS,KAAK,GAAG;AACzE,aAAK,wBAAwB,CAAC,KAAK,CAAC;AACpC,aAAK,2BAA2B;AAAA,MACpC;AAAA,IACJ;AAAA,IACA,YAAY,OAAO;AACf,YAAM,YAAY,KAAK;AAEvB,UAAI,SAAS,CAAC,MAAM,aAAa;AAC7B,cAAM,EAAE,uBAAuB,IAAI;AACnC,YAAI,wBAAwB;AACxB,iCAAuB;AACvB,gBAAM,yBAAyB;AAE/B,eAAK,wBAAwB,CAAC,KAAK,GAAG,IAAI;AAAA,QAC9C;AAAA,MACJ;AAAA,IACJ;AAAA,IACA,iBAAiB,EAAE,QAAQ,QAAQ,SAAS,SAAS,GAAG;AACpD,YAAM,KAAK;AACX,UAAI,GAAG,YAAY,QAAQ,GAAG,iBAAiB,SAAS,MAAM,GAAG;AAE7D,YAAI,CAAC,OAAO,SAAS,EAAE,SAAS,MAAM,GAAG;AACrC,cAAI,EAAC,mCAAS,YAAU,qCAAU,SAAQ;AACtC,sBAAU;AAAA,UACd;AACA,cAAI,QAAQ,QAAQ;AAChB,oBAAQ,QAAQ,YAAU,OAAO,WAAW,GAAG,QAAQ;AAAA,UAC3D;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AAAA,IACA,wBAAwB,QAAQ,WAAW,KAAK,UAAU;AAzG9D,UAAAC;AA0GQ,YACI,KAAgB,MAChB,iBAAgBA,MAAA,GAAG,QAAH,gBAAAA,IAAQ;AAE5B,UAAI,eAAe;AACf,WAAG,IAAI,aAAa;AAAA,MACxB;AACA,iBAAW,SAAS,QAAQ;AACxB,uCAAO,QAAQ,OAAK,GAAG,wBAAwB,GAAG,QAAQ;AAAA,MAC9D;AACA,UAAI,eAAe;AAEf,WAAG,gBAAgB;AAAA,MACvB;AAAA,IACJ;AAAA,IACA,wBAAwB,QAAQ,WAAW,KAAK,UAAU;AAzH9D,UAAAA;AA0HQ,UAAI,OAAO,aAAa,UAAU;AAC9B,eAAO,gBAAgB;AAEvB,aAAIA,MAAA,OAAO,cAAP,gBAAAA,IAAkB,OAAO;AACzB,qBAAW,MAAM,OAAO,WAAW;AAE/B,gBAAI,OAAO,aAAa,GAAG,UAAU;AACjC,iBAAG,WAAW,OAAO;AAAA,YACzB;AACA,eAAG,kBAAkB,QAAQ;AAAA,UACjC;AAAA,QACJ;AACA,eAAO,kBAAkB,QAAQ;AACjC,eAAO,gBAAgB;AAAA,MAC3B;AAAA,IACJ;AAAA,IACA,eAAe,UAAU,aAAa;AAClC,YACI,KAAgB,MAChB,gBAAgB,GAAG,0BAA0B,GAAG;AACpD,SAAG,QAAQ,wBAAwB;AAAA,QAC/B;AAAA,QACA;AAAA,QACA;AAAA,MACJ,CAAC;AACD,SAAG,qBAAqB,QAAQ,cAAY,SAAS,YAAY,CAAC;AAElE,SAAG,wBAAwB,GAAG,gBAAgB;AAC9C,SAAG,iBAAiB,QAAQ,WAAS,GAAG,2BAA2B,KAAK,CAAC;AAEzE,UAAI,GAAG,WAAW;AACd,cAAM,YAAY,eAAe,OAAO,eAAe,aAAa,GAAG,WAAW,WAAW,IAAI,GAAG;AACpG,WAAG,YAAY,YAAY,OAAO,eAAe,WAAW,WAAW,QAAQ,IAAI;AAAA,MACvF;AACA,SAAG,sBAAsB;AACzB,SAAG,YAAY,EAAE,KAAK,MAAM;AACxB,YAAI,CAAC,GAAG,aAAa;AACjB,aAAG,QAAQ,kBAAkB;AAAA,YACzB;AAAA,YACA;AAAA,YACA;AAAA,UACJ,CAAC;AAAA,QACL;AACA,eAAO,GAAG;AAAA,MACd,CAAC;AAAA,IACL;AAAA,EACJ,GA7JI,cADqB,IACd,SAAQ,8BACf,cAFqB,IAEd,gBAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAmClB,UAAW;AAAA;AAAA;AAAA,MAGP,SAAU;AAAA,MACV,OAAU;AAAA,IACd;AAAA,EACJ,IA3CqB;AAAA;;;ACMzB,IAAO,4BAAQ,YAAO;AAhBtB;AAgByB,6BAAiC,UAAU,OAAO;AAAA,IACvE;AAAA,IACA;AAAA,EACJ,EAAE;AAAA,IACE,WAAW,QAAQ;AACf,aAAO;AAAA,IACX;AAAA;AAAA,IAEA,WAAW,gBAAgB;AACvB,aAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAYH,KAAM,CAAC;AAAA,QACP,qBAA8B;AAAA,QAC9B,6BAA8B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAQ9B,qBAAsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAQtB,6BAA8B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAgB9B,YAAkB,CAAC;AAAA,QACnB,iBAAkB,CAAC;AAAA,QACnB,iBAAkB,CAAC;AAAA,QACnB,eAAkB,CAAC;AAAA,QACnB,gBAAkB;AAAA,MACtB;AAAA,IACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAoFA,IAAI,aAAa;AACb,aAAO,aAAa,cAAc,MAAM,IAAI;AAAA,IAChD;AAAA,IACA,IAAI,WAAW,YAAY;AACvB,WAAK,OAAO;AAAA,IAChB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAyDA,UAAU,SAAS,CAAC,GAAG;AACnB,YAAM,UAAU,GAAG,SAAS;AAE5B,UAAI,OAAO,gBAAgB;AACvB,aAAK,eAAe,OAAO,OAAO;AAAA,MACtC;AACA,UAAI,OAAO,wBAAwB;AAC/B,aAAK,uBAAuB,OAAO,OAAO;AAAA,MAC9C;AAAA,IACJ;AAAA,IACA,iBAAiB;AACb,YAAM,eAAe;AACrB,YAAM,KAAK;AACX,OAAC,GAAG,eAAe,OAAO,GAAG,IAAI,SAAS,GAAG,cAAc;AAC3D,OAAC,GAAG,uBAAuB,OAAO,GAAG,IAAI,SAAS,GAAG,sBAAsB;AAAA,IAC/E;AAAA;AAAA;AAAA;AAAA,IAIA,YAAY,OAAO;AACf,UAAI,OAAO;AACP,cAAM,IAAI;AAAA,UACN,MAAU,MAAM;AAAA,UAChB,QAAU;AAAA,UACV,SAAU;AAAA,QACd,CAAC;AAAA,MACL;AACA,YAAM,YAAY,KAAK;AAAA,IAC3B;AAAA;AAAA,IAEA,YAAY,OAAO;AACf,UAAI,OAAO;AACP,aAAK,gBAAgB,MAAM,MAAM;AACjC,cAAM,YAAY,KAAK;AAAA,MAC3B;AAAA,IACJ;AAAA,IACA,iBAAiB,OAAO;AACpB,YAAM,iBAAiB,KAAK;AAyB5B,aAAO,KAAK,QAAQ,UAAU,EAAE,OAAQ,MAAM,QAAQ,GAAG,OAAO,QAAS,KAAK,CAAC;AAAA,IACnF;AAAA,IACA,qBAAqB,OAAO,UAAU;AAClC,WAAK,YAAY,QAAQ;AACzB,WAAK,YAAY,KAAK;AAAA,IAC1B;AAAA,IACA,kBAAkB,OAAO;AACrB,WAAK,iBAAiB;AAAA,IAC1B;AAAA,IACA,qBAAqB,OAAO;AAExB,UAAI,SAAS,CAAC,MAAM,SAAS;AACzB,gBAAQ,KAAK,oBAAoB,IAAI;AAAA,UACjC,YAAa,KAAK;AAAA,QACtB,GAAG,KAAK;AAAA,MACZ;AACA,aAAO;AAAA,IACX;AAAA,IACA,6BAA6B,OAAO,UAAU;AAC1C,WAAK,YAAY,QAAQ;AACzB,WAAK,YAAY,KAAK;AAAA,IAC1B;AAAA,IACA,6BAA6B,OAAO;AAEhC,UAAI,SAAS,CAAC,MAAM,SAAS;AACzB,gBAAQ,KAAK,4BAA4B,IAAI;AAAA,UACzC,YAAa,KAAK;AAAA,QACtB,GAAG,KAAK;AAAA,MACZ;AACA,aAAO;AAAA,IACX;AAAA,IACA,0BAA0B,OAAO;AAC7B,WAAK,yBAAyB;AAAA,IAClC;AAAA;AAAA;AAAA,IAGA,IAAI,SAAS;AACT,aAAO,KAAK,WAAW;AAAA,IAC3B;AAAA,IACA,aAAa,QAAQ;AACjB,WAAK,WAAW,OAAO;AAAA,IAC3B;AAAA,IACA,IAAI,qBAAqB;AACrB,aAAO,KAAK,uBAAuB;AAAA,IACvC;AAAA,IACA,yBAAyB,oBAAoB;AACzC,WAAK,uBAAuB,OAAO;AAAA,IACvC;AAAA,IACA,MAAM,eAAe,MAAM;AAEvB,WAAK,sBAAsB;AAE3B,UAAI,KAAK,wBAAwB;AAC7B,aAAK,uBAAuB,OAAO,KAAK;AAAA,MAC5C;AACA,UAAI,KAAK,gBAAgB;AACrB,aAAK,eAAe,OAAO,KAAK;AAAA,MACpC;AACA,aAAO,MAAM,eAAe,IAAI;AAAA,IACpC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA4CA,SAAS;AACL,YACI,KAAK,MACL,SAAS;AAAA,QACL,YAAyB,GAAG,WAAW,OAAO;AAAA,QAC9C,eAAyB,GAAG,cAAc,OAAO;AAAA,QACjD,kBAAyB,GAAG,gBAAgB,OAAO;AAAA,QACnD,gBAAyB,GAAG,eAAe,OAAO;AAAA,QAClD,wBAAyB,GAAG,uBAAuB,OAAO;AAAA,MAC9D;AACJ,UAAI,CAAC,GAAG,WAAW,sBAAsB;AACrC,eAAO,kBAAkB,GAAG,gBAAgB,OAAO;AAAA,MACvD;AACA,aAAO;AAAA,IACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA+BA,IAAI,OAAO;AACP,aAAO,MAAM;AAAA,IACjB;AAAA,IACA,WAAW,MAAM;AACb,UAAI,OAAO,SAAS,UAAU;AAC1B,eAAO,aAAa,cAAc,IAAI;AAAA,MAC1C;AACA,aAAO;AAAA,IACX;AAAA,IACA,WAAW,MAAM;AACb,cAAQ,KAAK,eAAe,IAAI;AAAA,IACpC;AAAA;AAAA,IAEA,YAAY,OAAO,QAAQ;AACvB,YAAM,YAAY,GAAG,SAAS;AAC9B,UAAI,OAAO,UAAU;AACjB,aAAK,QAAQ,gBAAgB;AAAA,MACjC;AAAA,IACJ;AAAA,IACA,YAAY;AACR,WAAK,eAAe,QAAQ;AAC5B,WAAK,uBAAuB,QAAQ;AACpC,YAAM,UAAU;AAAA,IACpB;AAAA,EACJ,GA3XI,cA9DqB,IA8Dd,gBAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAalB,MAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAcP,gBAAiB;AAAA,MACb,OAAQ;AAAA,QACJ,IAAa;AAAA,QACb,YAAa;AAAA,MACjB;AAAA,MACA,SAAU;AAAA,IACd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAcA,wBAAyB;AAAA,MACrB,OAAU,CAAC;AAAA,MACX,SAAU;AAAA,IACd;AAAA;AAAA,IAEA,QAAqB;AAAA,IACrB,oBAAqB;AAAA,EACzB,IApHqB;AAAA;;;ACPzB,IAAO,+BAAQ,YAAU,MAAM,6BAA6B,OAAO;AAAA;AAAA;AAAA,EAG/D,iBAAiB,SAAS;AACtB,UACI,KAAS,MACT,SAAS,MAAM,iBAAiB,OAAO;AAC3C,QAAI,QAAQ;AACR,iBAAW,aAAa,CAAC,cAAc,iBAAiB,mBAAmB,mBAAmB,kBAAkB,wBAAwB,GAAG;AACvI,cAAM,QAAQ,GAAG,SAAS;AAC1B,YAAI,OAAO;AACP,cAAI,MAAM,OAAO;AACb,mBAAO,MAAM,KAAK,MAAM,IAAI,MAAM,cAAc,OAAO;AAAA,UAC3D;AAEA,gBAAM,aAAa,MAAM,iBAAiB,OAAO;AACjD,cAAI,cAAc,OAAO,KAAK,UAAU,EAAE,SAAS,GAAG;AAClD,mBAAO,SAAS,IAAI,OAAO,OAAO,OAAO,SAAS,KAAK,CAAC,GAAG,UAAU;AAAA,UACzE,WAES,OAAO,SAAS,KAAK,OAAO,KAAK,OAAO,SAAS,CAAC,EAAE,WAAW,GAAG;AACvE,mBAAO,OAAO,SAAS;AAAA,UAC3B;AAAA,QACJ;AAAA,MACJ;AACA,UAAI,OAAO,gBAAgB;AAEvB,YAAI,GAAG,eAAe,uBAAuB,GAAG,uBAAuB,GAAG,eAAe,mBAAmB,UAAU,YAAY;AAC9H,iBAAO,OAAO,eAAe;AAAA,QACjC;AAEA,YAAI,OAAO,eAAe,YAAY,cAAc;AAChD,iBAAO,OAAO,eAAe;AAAA,QACjC;AAEA,YAAI,OAAO,KAAK,OAAO,cAAc,EAAE,WAAW,GAAG;AACjD,iBAAO,OAAO;AAAA,QAClB;AAAA,MACJ;AAEA,UAAI,GAAG,UAAU,aAAa;AAC1B,eAAO,OAAO;AACd,eAAO,OAAO;AACd,eAAO,OAAO;AAAA,MAClB;AACA,aAAO;AAAA,IACX;AAAA,EACJ;AACJ;;;AC/CA,IAAqB,0BAArB,cAAqDC,MAAK;AAAA;AAAA,EAEtD,IAAI,WAAW,eAAe;AAC1B,UAAM,KAAK;AACX,OAAG,sBAAsB,GAAG,mBAAmB;AAC/C,OAAG,cAAc;AACjB,QAAI,iBAAiB,cAAc,YAAY;AAC3C,SAAG,qBAAqB,cAAc,IAAI;AAAA,QACtC,cAAe,GAAG;AAAA,QAClB,SAAe;AAAA,QACf,YAAe;AAAA;AAAA,QAEf,MAAe;AAAA,MACnB,CAAC;AAAA,IACL;AAAA,EACJ;AAAA,EACA,IAAI,aAAa;AACb,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,IAAI,cAAc,kBAAkB;AAChC,UAAM,KAAK;AACX,OAAG,yBAAyB,GAAG,sBAAsB;AACrD,OAAG,iBAAiB;AACpB,QAAI,oBAAoB,iBAAiB,YAAY;AACjD,SAAG,wBAAwB,iBAAiB,IAAI;AAAA,QAC5C,cAAe,GAAG;AAAA,QAClB,SAAe;AAAA,QACf,YAAe;AAAA;AAAA,QAEf,MAAe;AAAA,MACnB,CAAC;AAAA,IACL;AAAA,EACJ;AAAA,EACA,IAAI,gBAAgB;AAChB,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,IAAI,gBAAgB,oBAAoB;AACpC,UAAM,KAAK;AACX,OAAG,2BAA2B,GAAG,wBAAwB;AACzD,OAAG,mBAAmB;AACtB,QAAI,sBAAsB,mBAAmB,UAAU;AACnD,SAAG,0BAA0B,mBAAmB,IAAI;AAAA,QAChD,cAAe,GAAG;AAAA,QAClB,SAAe;AAAA,QACf,YAAe;AAAA;AAAA,QAEf,MAAe;AAAA,MACnB,CAAC;AAAA,IACL;AAAA,EACJ;AAAA,EACA,IAAI,kBAAkB;AAClB,WAAO,KAAK;AAAA,EAChB;AAAA,EACA,IAAI,gBAAgB,oBAAoB;AACpC,UAAM,KAAK;AACX,OAAG,2BAA2B,GAAG,wBAAwB;AACzD,OAAG,mBAAmB;AACtB,QAAI,sBAAsB,mBAAmB,UAAU;AACnD,SAAG,0BAA0B,mBAAmB,IAAI;AAAA,QAChD,cAAe,GAAG;AAAA,QAClB,SAAe;AAAA,QACf,YAAe;AAAA;AAAA,QAEf,MAAe;AAAA,MACnB,CAAC;AAAA,IACL;AAAA,EACJ;AAAA,EACA,IAAI,kBAAkB;AAClB,WAAO,KAAK;AAAA,EAChB;AAAA;AAAA;AAAA,EAGA,uBAAuB,EAAE,QAAQ,GAAG;AAChC,UAAM,KAAK;AACX,OAAG,oCAAoC,OAAO;AAC9C,WAAO,GAAG,kBAAkB,OAAO;AAAA,EACvC;AAAA,EACA,0BAA0B,EAAE,QAAQ,GAAG;AACnC,UAAM,KAAK;AACX,OAAG,oCAAoC,OAAO;AAC9C,WAAO,GAAG,kBAAkB,OAAO;AAAA,EACvC;AAAA,EACA,4BAA4B,EAAE,QAAQ,GAAG;AACrC,UAAM,KAAK;AACX,OAAG,oCAAoC,OAAO;AAC9C,WAAO,GAAG,kBAAkB,OAAO;AAAA,EACvC;AAAA,EACA,4BAA4B,EAAE,QAAQ,GAAG;AACrC,UAAM,KAAK;AACX,OAAG,oCAAoC,OAAO;AAC9C,WAAO,GAAG,kBAAkB,OAAO;AAAA,EACvC;AAAA;AAAA;AAAA,EAGA,oCAAoC,SAAS;AACzC,UAAM,kBAAkB,QAAQ,SAAS,CAAC;AAC1C,QAAI,GAAG;AAEP,SAAK,IAAI,gBAAgB,SAAS,GAAG,KAAK,GAAG,EAAE,GAAG;AAC9C,UAAI,gBAAgB,CAAC;AACrB,UAAI,CAAC,EAAE,eAAe;AAClB,wBAAgB,OAAO,gBAAgB,QAAQ,CAAC,GAAG,CAAC;AAAA,MACxD;AAAA,IACJ;AAEA,QAAI,gBAAgB,WAAW,GAAG;AAC9B,cAAQ,MAAM,SAAS;AAAA,IAC3B;AAAA,EACJ;AAAA,EACA,kBAAkB,SAAS;AACvB,WAAO,QAAS,QAAQ,SAAS,QAAQ,MAAM,SAAS,KACnD,QAAQ,YAAY,QAAQ,SAAS,SAAS,KAC9C,QAAQ,WAAW,QAAQ,QAAQ,SAAS,CAAE;AAAA,EACvD;AAAA;AAEJ;AACA,wBAAwB,SAAS;;;ACjHjC,IAAMC,eAAc;AA2HpB,IAAqB,eAArB,cAA0C,6BAAqB,0BAAkBA,YAAW,CAAC,EAAE;AAAA,EAC3F,WAAW,QAAQ;AACfmMA,WAAW,gBAAgB;AACvB,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MASH,iBAAkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MASlB,sBAAuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MASvB,oBAAqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MASrB,sBAAuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAQvB,iBAAkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAQlB,sBAAuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAQvB,oBAAqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAQrB,sBAAuB;AAAA,IAC3B;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAmDA,aAAa,MAAM;AACf,UAAM,UAAU,GAAG,IAAI;AACvB,QAAI,cAAc,WAAW;AACzB,iBAAW,QAAQ,cAAc;AAAA,IACrC;AAEA,SAAK,0BAA0B,KAAK,8BAA8B;AAAA,EACtE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,gCAAgC;AAC5B,WAAO,IAAI,wBAAwB;AAAA,MAC/B,YAAkB;AAAA,MAClB,eAAkB,KAAK;AAAA,MACvB,iBAAkB,KAAK;AAAA,MACvB,iBAAkB,KAAK;AAAA,IAC3B,CAAC;AAAA,EACL;AAAA,EACA,YAAY;AACR,SAAK,wBAAwB,QAAQ;AACrC,UAAM,UAAU;AAAA,EACpB;AAAA;AAAA,EAEA,IAAI,YAAY;AACZ,WAAO,KAAK;AAAA,EAChB;AACJ;AACA,aAAa,eAAe;AAC5B,aAAa,UAAU;AACvB,aAAa,SAAS;;;ACretB,IAAM,yBAAyB,CAAC,UAAU,aAAa;AACnD,MAAI,aAAa,UAAU;AACvB,UAAM,IAAI,MAAM,mDAAmD;AAAA,EACvE;AACJ;AASA,IAAOC,yBAAQ,YAAU,MAAM,uBAAuB,UAAUC,OAAM;AAAA,EAClE,WAAW,QAAQ;AACf,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAmBA,IAAI,YAAY;AACZ,WAAO,KAAK;AAAA,EAChB;AAAA;AAAA,EAEA,IAAI,UAAU,OAAO;AACjB,SAAK,aAAa;AAAA,EACtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,IAAI,aAAa;AAtDrB;AAuDQ,YAAO,UAAK,YAAL,mBAAc;AAAA,EACzB;AAAA,EACA,IAAI,wBAAwB;AACxB,UAAM,UAAU,KAAK;AACrB,YAAO,mCAAS,oBAAmB;AAAA,EACvC;AAAA;AAAA,EAEA,IAAI,WAAW,OAAO;AAClB,2BAAuB,KAAK,YAAY,KAAK;AAAA,EACjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,IAAI,kBAAkB;AAzE1B;AA0EQ,YAAO,UAAK,YAAL,mBAAc;AAAA,EACzB;AAAA;AAAA,EAEA,IAAI,gBAAgB,OAAO;AACvB,2BAAuB,KAAK,iBAAiB,KAAK;AAAA,EACtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,IAAI,kBAAkB;AAxF1B;AAyFQ,YAAO,UAAK,YAAL,mBAAc;AAAA,EACzB;AAAA;AAAA,EAEA,IAAI,gBAAgB,OAAO;AACvB,2BAAuB,KAAK,iBAAiB,KAAK;AAAA,EACtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,IAAI,gBAAgB;AAvGxB;AAwGQ,YAAO,UAAK,YAAL,mBAAc;AAAA,EACzB;AAAA;AAAA,EAEA,IAAI,cAAc,OAAO;AACrB,2BAAuB,KAAK,eAAe,KAAK;AAAA,EACpD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,IAAI,uBAAuB;AArH/B;AAsHQ,YAAO,UAAK,YAAL,mBAAc;AAAA,EACzB;AAAA;AAAA,EAEA,IAAI,qBAAqB,OAAO;AAC5B,2BAAuB,KAAK,sBAAsB,KAAK;AAAA,EAC3D;AACJ;;;ACvDA,IAAqBC,mBAArB,cAA6CC,uBAAc,6BAAqB,4BAA4B,OAAO,KAAK,CAAC,CAAC,EAAE;AAAA;AAAA;AAAA,EAiCxH,IAAI,QAAQ;AACR,UACI,EAAE,QAAQ,IAAI,MACd,QAAc,MAAM;AAExB,QAAI,mCAAS,uBAAuB;AAChC,aAAO,QAAQ,WAAW,QAAQ,KAAK;AAAA,IAC3C;AACA,WAAO;AAAA,EACX;AAAA,EACA,IAAI,MAAM,OAAO;AACb,UAAM,QAAQ;AAAA,EAClB;AAAA,EACA,IAAI,WAAW;AACX,UACI,EAAE,QAAQ,IAAK;AACnB,QAAI,WAAe,MAAM;AAEzB,QAAI,mCAAS,uBAAuB;AAChC,iBAAW,QAAQ,cAAc,QAAQ,QAAQ;AAAA,IACrD;AACA,WAAO,qCAAU;AAAA,EACrB;AAAA,EACA,IAAI,SAAS,UAAU;AACnB,UAAM,WAAW;AAAA,EACrB;AAAA;AAAA,EAEA,IAAI,mBAAmB;AACnB,WAAO,KAAK,wBACN,KAAK,sBAAsB,KAAK,OAAO,KAAK,QAAQ,IACpD,KAAK,sBAAsB,KAAK,EAAE,MAAM,MAAM,KAAK,EAAE,SAAS,IAAI;AAAA,EAC5E;AACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AApCI,cA7BiBD,kBA6BV,SAAQ;AACf,cA9BiBA,kBA8BV,wBAAuB;AAoClCA,iBAAgB,SAAS;;;ACvFzB,IAAqBE,mBAArB,cAA6CC,uBAAc,6BAAqB,2BAA2B,OAAO,SAAS,CAAC,CAAC,EAAE;AAAA,EAE3H,WAAW,gBAAgB;AACvB,WAAO;AAAA,MACH,YAAaC;AAAA,IACjB;AAAA,EACJ;AACJ;AANI,cADiBF,kBACV,SAAQ;AAOnBA,iBAAgB,SAAS;;;AC7CzB,IAAqB,wBAArB,cAAmDG,uBAAc,sBAAsB,OAAO,KAAK,CAAC,EAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAyElG,WAAW,QAAQ;AACf,WAAO;AAAA,EACX;AAAA;AAEJ;AACA,sBAAsB,SAAS;;;ACvE/B,IAAqB,gBAArB,cAA2CC,uBAAc,kBAAkB,OAAO,KAAK,CAAC,EAAE;AAAA;AAAA,EAEtF,WAAW,QAAQ;AACf,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA4DA,WAAW,SAAS;AAChB,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAmCH;AAAA,QACI,MAAe;AAAA,QACf,UAAe;AAAA,QACf,cAAe;AAAA,MACnB;AAAA,IACJ;AAAA,EACJ;AAAA;AAAA,EAEA,WAAW;AACP,WAAO,KAAK,QAAQ;AAAA,EACxB;AAAA,EACA,WAAW,gBAAgB;AACvB,WAAO;AAAA,MACH,4BAA6B;AAAA,IACjC;AAAA,EACJ;AACJ;AACA,cAAc,SAAS;;;ACrHvB,IAAqB,uBAArB,cAAkDC,uBAAc,gCAAgC,OAAO,SAAS,CAAC,EAAE;AAAA;AAAA,EAE/G,WAAW,gBAAgB;AACvB,WAAO;AAAA,MACH,MAAe;AAAA,MACf,YAAe;AAAA;AAAA;AAAA;AAAA;AAAA,MAKf,cAAe;AAAA;AAAA;AAAA;AAAA;AAAA,MAKf,cAAe;AAAA,MACf,SAAe;AAAA,IACnB;AAAA,EACJ;AAAA;AAEJ;AACA,qBAAqB,SAAS;;;ACyB9B,IAAqBC,mBAArB,cAA6CC,uBAAc,4BAA4B,OAAO,mBAAmB,CAAC,EAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYhH,WAAW,QAAQ;AACf,WAAO;AAAA,EACX;AAAA,EACA,WAAW,uBAAuB;AAC9B,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA,EAIA,IAAI,YAAY;AArFpB;AAsFQ,SAAI,UAAK,YAAL,mBAAc,uBAAuB;AACrC,aAAO,KAAK,QAAQ,WAAW,QAAQ,MAAM,SAAS;AAAA,IAC1D;AACA,WAAO,MAAM;AAAA,EACjB;AAAA,EACA,IAAI,UAAU,MAAM;AAChB,UAAM,YAAY;AAAA,EACtB;AAAA,EACA,IAAI,UAAU;AA9FlB;AA+FQ,SAAI,UAAK,YAAL,mBAAc,uBAAuB;AACrC,aAAO,KAAK,QAAQ,WAAW,QAAQ,MAAM,OAAO;AAAA,IACxD;AACA,WAAO,MAAM;AAAA,EACjB;AAAA,EACA,IAAI,QAAQ,IAAI;AACZ,UAAM,UAAU;AAAA,EACpB;AAAA;AAEJ;AACAD,iBAAgB,SAAS;;;AC1DzB,IAAqBE,mBAArB,cAA6CC,uBAAc,6BAAqB,2BAA2B,OAAO,SAAS,CAAC,CAAC,EAAE;AAAA,EAC3H,WAAW,gBAAgB;AACvB,WAAO;AAAA,MACH,YAAaC;AAAA,IACjB;AAAA,EACJ;AACJ;AACAF,iBAAgB,SAAS;;;AC/CzB,IAAO,2BAAQ,YAAU,MAAM,yBAAyB,OAAO;AAAA,EAC3D,WAAW,QAAQ;AACf,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYA,IAAI,YAAY;AACZ,WAAO,KAAK,cAAc;AAAA,EAC9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,IAAI,cAAc;AACd,WAAO,KAAK,eAAe;AAAA,EAC/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,IAAI,eAAe;AACf,WAAO,KAAK,aAAa,CAAC,KAAK;AAAA,EACnC;AAAA;AAAA,EAEA,OAAO;AACH,UAAM,OAAO,MAAM,KAAK,GAAG,SAAS;AACpC,SAAK,cAAc;AACnB,SAAK,aAAa;AAClB,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,IAAI,sBAAsB;AACtB,UAAM,QAAQ,OAAO,KAAK,gBAAgB,YAAY,CAAC,MAAM,KAAK,WAAW,IAAI,KAAK,cAAc;AACpG,WAAO,KAAK,wBAAwB,KAAK;AAAA,EAC7C;AAAA,EACA,wBAAwB,QAAQ,GAAG;AAC/B,QAAI,SAAS,IAAI;AACb,aAAO,KAAK,MAAM,KAAK;AAAA,IAC3B;AACA,WAAO,KAAK,MAAM,KAAK;AAAA,EAC3B;AAAA,EACA,IAAI,oBAAoB,OAAO;AAC3B,SAAK,cAAc;AAAA,EACvB;AACJ;;;ACrDA,IAAqB,oBAArB,cAA+C,yBAAyB,OAAO,QAAQ,EAAE;AAAA,EACrF;AAAA,EACA;AACJ,EAAE;AAAA,EACE,WAAW,QAAQ;AACf,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAeA,IAAI,OAAO;AACP,WAAO,KAAK;AAAA,EAChB;AACJ;AACA,kBAAkB,SAAS;;;AC2D3B,IAAqBG,cAArB,cAAwC,kBAAkB,OAAO,QAAQ,EAAE;AAAA,EACvyKE,WAAW,QAAQ;AACf,WAAO;AAAA,EACX;AAAA,EAEA,WAAW,SAAS;AAChkBAAkB,MAAO,WAAW,cAAe,MAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAMlE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAeA;AAAA,QACI,MAAU;AAAA,QACV,SAAU,WAAS,QAAQ,IAAI,SAAS,KAAK,IAAI;AAAA,MACrD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAeA;AAAA,QACI,MAAU;AAAA,QACV,SAAU,WAAS,QAAQ,IAAI,SAAS,KAAK,IAAI;AAAA,MACrD;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,8BAA8B;AAC1B,WAAO;AAAA,EACX;AAAA;AAAA;AAAA,EAGA,eAAe,MAAM,UAAU,UAAU,MAAM;AAC3C,eAAW,IAAI,SAAS,QAAQ;AAChC,WAAO,IAAI,KAAK,KAAK,QAAQ,KAAK,UAAU,IAAI,MAAM,SAAS,YAAY;AAAA,EAC/E;AAAA,EACA,IAAI,YAAY;AAriBpB;AAsiBQ,QAAI;AACJ,QAAI,KAAK,cAAc;AACnB,WAAK,KAAK,IAAI,WAAW;AAAA,IAC7B,OACK;AAED,YAAK,UAAK,eAAL,YAAmB,MAAM;AAAA,IAClC;AACA,QAAI,KAAK,QAAQ;AACb,WAAK,KAAK,YAAY,mBAAmB,EAAE;AAAA,IAC/C;AACA,WAAO;AAAA,EACX;AAAA,EACA,IAAI,UAAU,WAAW;AACrB,UAAM,KAAK;AAEX,QAAI,GAAG,cAAc,GAAG,YAAY,CAAC,GAAG,eAAe;AACnD,YAAM,WAAW,WAAW,KAAK,GAAG,WAAW,SAAS;AACxD,UAAI,UAAU;AAEV,mBAAW,SAAS,KAAK,UAAU;AAC/B,gBAAM,YAAY,WAAW,IAAI,MAAM,WAAW,QAAQ;AAAA,QAC9D;AAAA,MACJ;AAAA,IACJ;AACA,QAAI,GAAG,UAAU;AACb,SAAG,aAAa;AAChB,SAAG,IAAI,EAAE,UAAU,CAAC;AAAA,IACxB,OACK;AACD,YAAM,YAAY;AAClB,UAAI,GAAG,UAAU;AACb,WAAG,gBAAgB;AACnB,WAAG,cAAc;AAAA,MACrB;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,IAAI,UAAU;AA3kBlB;AA4kBQ,QAAI;AACJ,QAAI,KAAK,cAAc;AACnB,WAAK,KAAK,IAAI,SAAS;AAAA,IAC3B,OACK;AAED,YAAK,UAAK,aAAL,YAAiB,MAAM;AAAA,IAChC;AACA,QAAI,KAAK,QAAQ;AACb,WAAK,KAAK,YAAY,iBAAiB,EAAE;AAAA,IAC7C;AACA,WAAO;AAAA,EACX;AAAA,EACA,IAAI,QAAQ,SAAS;AACjB,UAAM,KAAK;AACX,QAAI,GAAG,UAAU;AACb,SAAG,WAAW;AACd,SAAG,IAAI,EAAE,QAAQ,CAAC;AAAA,IACtB,OACK;AACD,YAAM,UAAU;AAChB,UAAI,GAAG,WAAW;AACd,WAAG,gBAAgB;AACnB,WAAG,cAAc;AAAA,MACrB;AAAA,IACJ;AAAA,EACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,IAAI,aAAa;AACb,WAAO,IAAI,SAAS;AAAA,MAChB,MAAY,KAAK;AAAA,MACjB,WAAY,KAAK;AAAA,IACrB,CAAC;AAAA,EACL;AAAA,EACA,IAAI,WAAW,QAAQ;AACnB,SAAK,UAAU,OAAO,WAAW,OAAO,IAAI;AAAA,EAChD;AAAA;AAAA;AAAA,EAGA,IAAI,gBAAgB;AAChB,UACI,KAA0B,MAC1B,EAAE,UAAU,UAAU,IAAI,IAC1B,gBAA0B,GAAG;AACjC,QAAI;AACJ,QAAI,eAAe;AACf,eAAS;AAAA,IACb,OACK;AACD,UAAI,UAAU;AACV,iBAAS,GAAG,eAAe,WAAW,UAAU,KAAK;AACrD,WAAG,iBAAiB;AAAA,MACxB,OACK;AACD,iBAAS;AAAA,MACb;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA,EACA,IAAI,cAAc,OAAO;AACrB,SAAK,iBAAiB;AAAA,EAC1B;AAAA,EACA,IAAI,cAAc;AACd,UACI,KAAyB,MACzB,EAAE,WAAW,QAAQ,IAAI,IACzB,cAAyB,GAAG;AAChC,QAAI;AACJ,QAAI,aAAa;AACb,eAAS;AAAA,IACb,OACK;AACD,UAAI,WAAW;AACX,iBAAS,GAAG,eAAe,SAAS,WAAW,IAAI;AACnD,WAAG,eAAe;AAAA,MACtB,OACK;AACD,iBAAS;AAAA,MACb;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA,EACA,IAAI,YAAY,OAAO;AACnB,SAAK,eAAe;AAAA,EACxB;AAAA,EACA,IAAI,MAAM;AACN,UAAM,WAAW,OAAO,SAAS;AACjC,QAAI,SAAS,cAAe,YAAY,cAAc,MAAO;AACzD,WAAK,gBAAgB;AAAA,IACzB;AACA,QAAI,SAAS,eAAgB,YAAY,eAAe,MAAO;AAC3D,WAAK,cAAc;AAAA,IACvB;AACA,WAAO,MAAM,IAAI,GAAG,SAAS;AAAA,EACjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,IAAI,iBAAiB;AACjB,WAAO,KAAK;AAAA,EAChB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,IAAI,eAAe;AACf,WAAO,KAAK;AAAA,EAChB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAgBA,WAAW,WAAW;AAClB,YAAQ,WAAW;AAAA,MAEf,KAAK;AAAA,MACL,KAAK;AACD,eAAO;AAAA,MAEX,KAAK;AAAA,MACL,KAAK;AACD,eAAO,KAAK;AAAA,MAEhB,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AACD,eAAO,KAAK,UAAU,KAAK;AAAA,IACnC;AACA,WAAO,MAAM,WAAW,SAAS;AAAA,EACrC;AAAA;AAAA,EAEA,IAAI,MAAM;AApuBd;AAquBQ,YAAO,gBAAK,mBAAL,mBAAqB,QAArB,YAA4B,MAAM;AAAA,EAC7C;AAAA,EACA,IAAI,IAAI,KAAK;AACT,UAAM,MAAM;AAAA,EAChB;AAAA;AAAA,EAEA,IAAI,WAAW;AACX,UACI,EAAE,QAAQ,IAAK,MACf,WAAe,MAAM;AAEzB,SAAI,mCAAS,0BAAyB,CAAC,UAAU;AAC7C,aAAO,QAAQ,gBAAgB,QAAQ,SAAS,SAAS,IAAI;AAAA,IACjE;AACA,WAAO;AAAA,EACX;AAAA,EACA,IAAI,SAAS,UAAU;AACnB,UAAM,WAAW;AAAA,EACrB;AAAA;AAAA,EAEA,iBAAiB,SAAS;AACtB,UACI,EAAE,SAAS,IAAI,MACf,SAAe,MAAM,iBAAiB,OAAO;AAEjD,QAAI,UAAU,UAAU;AACpB,aAAO,WAAW,SAAS,IAAI,aAAW,QAAQ,iBAAiB,OAAO,CAAC;AAAA,IAC/E;AACA,WAAO;AAAA,EACX;AACJ;AAhfI,cAjLiBD,aAiLV,mBAAkB;AAif7BA,YAAW,SAAS;;;AC9sBpB,IAAqBE,cAArB,cAAwCC,uBAAc,8BAAsB,6BAAqB,uBAAe,sBAAc,wBAAgB,sBAAsB,OAAO,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;AAAA,EAGxL,WAAW,gBAAgB;AACvB,WAAO;AAAA,MACH,YAAaC;AAAA,IACjB;AAAA,EACJ;AAAA;AAEJ;AAAA;AAPI,cAFiBF,aAEV,SAAQ;AAQnBA,YAAW,SAAS;;;ACYpB,IAAqBG,iBAArB,cAA2CC,uBAAc,2BAAmB,0BAA0B,OAAO,YAAY,CAAC,CAAC,EAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAyBzH,WAAW,QAAQ;AACf,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAgBA,IAAI,WAAW;AAvHnB;AAwHQ,UAAM,EAAE,QAAQ,IAAI;AAEpB,SAAI,wCAAS,gBAAgB,QAAQ,aAAjC,mBAA2C,UAAU;AACrD,cAAO,aAAQ,gBAAgB,QAAQ,SAAS,YAAY,IAAI,MAAzD,YAA8D,oBAAI,IAAI;AAAA,IACjF;AACA,WAAO,MAAM;AAAA,EACjB;AAAA,EACA,IAAI,SAAS,UAAU;AACnB,UAAM,WAAW;AAAA,EACrB;AAAA;AAEJ;AACAD,eAAc,SAAS;;;ACpFvB,IAAqBE,iBAArB,cAA2CC,uBAAc,2BAAmB,yBAAyB,OAAO,SAAS,CAAC,CAAC,EAAE;AAAA,EACrH,WAAW,gBAAgB;AACvB,WAAO;AAAA,MACH,YAAaC;AAAA,IACjB;AAAA,EACJ;AACJ;AACAF,eAAc,SAAS;;;ACvCvB,IAAOG,8BAAQ,YAAU,MAAM,4BAA4B,UAAUC,OAAM,MAAM,0BAA2B,EAAE;AAAA,EAC1G,WAAW,eAAe;AACtB,WAAO;AAAA,MACH,iCAAkC;AAAA,MAClC,iCAAkC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAOlC,0BAA2B;AAAA,IAC/B;AAAA,EACJ;AAAA,EACA,aAAa,MAAM;AACf,UAAM,KAAK;AACX,UAAM,UAAU,GAAG,IAAI;AAEvB,OAAG,oBAAoB,GAAG,oBAAoB;AAC9C,OAAG,oBAAoB,GAAG,eAAe;AACzC,OAAG,oBAAoB,GAAG,eAAe;AACzC,OAAG,oBAAoB,GAAG,aAAa;AACvC,OAAG,oBAAoB,GAAG,UAAU;AACpC,QAAI,GAAG,gBAAgB;AACnB,SAAG,oBAAoB,GAAG,cAAc;AAAA,IAC5C;AACA,QAAI,GAAG,wBAAwB;AAC3B,SAAG,oBAAoB,GAAG,sBAAsB;AAAA,IACpD;AAAA,EACJ;AAAA,EACA,IAAI,UAAU;AACV,WAAO;AAAA,EACX;AAAA,EACA,IAAI,QAAQ,OAAO;AACf,UAAM,UAAU;AAAA,EACpB;AAAA,EACA,IAAI,oCAAoC;AACpC,WAAO,CAAC,KAAK,mBAAmB,KAAK,UAAU,EAAE,OAAO;AAAA,EAC5D;AAAA,EACA,uBAAuB,MAAM;AACzB,QAAI,KAAK,oBAAoB,CAAC,KAAK,yBAAyB,CAAC,KAAK,oBAAoB,GAAG;AACrF,WAAK,2BAA2B;AAAA,IACpC;AACA,UAAM,oBAAoB,GAAG,IAAI;AAAA,EACrC;AAAA,EACA,gBAAgB;AACZ,UAAM,cAAc;AAEpB,SAAK,aAAa,MAAM,KAAK;AAAA,EACjC;AAAA,EACA,gBAAgB;AAIZ,SAAK,uBAAuB;AAE5B,SAAK,IAAI,KAAK,KAAK,UAAU,QAAW,IAAI;AAAA,EAChD;AAAA;AAAA,EAEA,oBAAoB,SAAS;AACzB,UAAM,QAAQ,KAAK,aAAa,OAAO;AACvC,QAAI;AACJ,QAAI,OAAO;AACP,eAAS,MAAM,oBAAoB,KAAK;AAAA,IAC5C,OACK;AACD,eAAS,KAAK,yBAAyB,MAAM,oBAAoB;AAAA,IACrE;AACA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAqCA,IAAI,UAAU;AACV,QAAI,UAAU,MAAM;AACpB,QAAI,KAAK,0BAA0B;AAC/B,YAAM,iBAAiB,KAAK;AAE5B,UAAI,gBAAgB;AAChB,kBAAU,WAAW,CAAC;AACtB,gBAAQ,UAAU;AAAA,MACtB;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA,EACA,6BAA6B,QAAQC,QAAO,OAAO;AAG/C,QAAI,OAAO,mBAAmBA,WAAU,aAAa;AACjD,aAAO,CAAC,OAAO,IAAI,WAAW,EAAE;AAAA,IACpC;AACA,WAAO,MAAM,6BAA6B,GAAG,SAAS;AAAA,EAC1D;AACJ;;;ACxIA,IAAM,aAAa,CAAC,WAAW,SAAS,WAAW;AAC/C,QACIC,SAAiB,OAAO,mBAAmB,SAAS,GACpD,EAAE,WAAW,IAAIA,QACjB,WAAiB,OAAO,YAAY,aAAa,WAAW,QAAQ,UAAU,GAAG,MAAM;AAC3F,SAAO,cAAc,WAAW,CAACA,OAAM,QAAQ,UAAU,OAAO,SAAS,CAAC;AAC9E;AAKA,IAAO,oCAAQ,YAAU,MAAM,mCAAmC,UAAUC,OAAM;AAAA,EAC9E,eAAe,QAAQ;AAEnB,SAAK,UAAU,SAAS;AACxB,UAAM,eAAe,MAAM;AAAA,EAC/B;AAAA,EACA,4BAA4B;AACxB,UAAM,EAAE,IAAI,IAAI;AAChB,QAAI,eAAe;AACnB,SAAK,uBAAuB;AAC5B,QAAI,IAAI,SAAS;AACb,qBAAe;AACf,UAAI,IAAI,aAAa;AACjB,YAAI,MAAM;AAAA,MACd;AACA,UAAI,KAAK,0BAA0B;AAC/B,YAAI,QAAQ;AAAA,MAChB,OACK;AACD,YAAI,iBAAiB;AAAA,MACzB;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA2BA,MAAM,oBAAoB,SAAS;AAnEvC;AAoEQ,UACI,KAAe,MACf,eAAe,GAAG,0BAA0B;AAEhD,OAAG,oBAAoB;AACvB,QAAI,QAAQ,SAAS;AACjB,SAAG,qBAAqB,QAAQ,OAAO;AAAA,IAC3C;AAIA,OAAG,eAAe,aAAa,MAAM,OAAO,GAAG,CAAC,cAAc,UAAU;AACpE,UAAK,MAAM,OAAO,WAAW,MAAM,OAAO,UAAW;AACjD,cACI,EAAE,WAAW,IAAI,OACjB,YAAiB,WAAW,mBAAmB,WAAW,GAC1D,UAAiB,WAAW,mBAAmB,SAAS;AAC5D,YAAI,aAAa,SAAS;AACtB,qBAAW,QAAQ,aAAa,SAAS;AACrC,kBAAM,SAAS,MAAM,QAAQ,KAAK,WAAW,OAAO,CAAC;AACrD,gBAAI,EACA,WAAW,kBAAkB,MAAM,MAAM,KACzC,WAAW,kBAAkB,MAAM,MAAM,IAC1C;AACC,qBAAO,KAAK,SAAS;AACrB,qBAAO,KAAK,OAAO;AAAA,YACvB;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ,CAAC;AACD,UAAM,GAAG,YAAY;AAErB,OAAG,uBAAuB;AAG1B,eAAW,WAAW,SAAS;AAC3B,YAAM,kBAAkB,GAAG,mBAAmB,OAAO;AAErD,UAAI,iBAAiB;AACjB,cAGI,EAAE,MAAM,IAAO,iBACf,eAAe,QAAQ,OAAO,GAC9B,cAAe,CAAC,IAAG,kBAAa,YAAb,YAAwB,CAAC,GAAG,IAAG,kBAAa,UAAb,YAAsB,CAAC,CAAC;AAE9E,YAAI,OAAO;AAEP,qBAAW,QAAQ,aAAa;AAC5B,kBAAM,SAAS,MAAM,QAAQ,KAAK,MAAM,WAAW,OAAO,CAAC;AAE3D,gBAAI,QAAQ;AAER,yBAAW,aAAa,OAAO,eAAe;AAC1C,oBAAI,CAAC,WAAW,WAAW,MAAM,MAAM,GAAG;AACtC,yBAAO,OAAO,KAAK,SAAS,SAAS;AAAA,gBACzC;AAAA,cACJ;AAAA,YACJ;AAAA,UACJ;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AACA,OAAG,yBAAyB,YAAY;AACxC,OAAG,oBAAoB;AAGvB,UAAM,GAAG,YAAY;AAAA,EACzB;AAAA,EACA,yBAAyB,cAAc;AACnC,QAAI,cAAc;AACd,YAAM,EAAE,IAAI,IAAI;AAChB,UAAI,KAAK,0BAA0B;AAC/B,YAAI,OAAO;AAAA,MACf,OACK;AACD,YAAI,gBAAgB;AAAA,MACxB;AACA,UAAI,WAAW;AAAA,IACnB;AACA,SAAK,sBAAsB;AAAA,EAC/B;AACJ;;;AC/IA,IAAqB,oBAArB,cAA+C,aAAa;AAAA,EACxD,IAAI,OAAO;AACP,WAAO;AAAA,EACX;AAAA,EACA,UAAU,QAAQ;AACd,QAAI;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACJ,IAAI;AAEJ,QAAI,QAAQ,YAAY,QAAQ,UAAU;AACtC,gBAAU,EAAE,GAAG,QAAQ;AACvB,gBAAU,EAAE,GAAG,QAAQ;AACvB,YACI,kBAAkB,QAAQ,SAAS,MAAM,GACzC,kBAAkB,QAAQ,SAAS,MAAM;AAC7C,UAAI,aAAa;AAKjB,cAAQ,SAAS,QAAQ,CAAC,SAAS,UAAU;AACzC,cAAM,eAAe,QAAQ,SAAS,QAAQ,OAAO;AAGrD,YAAI,eAAe,IAAI;AACnB,0BAAgB,KAAK,IAAI,gBAAgB,YAAY,IAAI;AACzD,uBAAa;AAAA,QACjB;AAAA,MACJ,CAAC;AACD,UAAI,YAAY;AACZ,gBAAQ,WAAW;AACnB,gBAAQ,WAAW;AAAA,MACvB;AAAA,IACJ;AACA,WAAO,MAAM,UAAU;AAAA,MACnB;AAAA,MACA;AAAA,MACA;AAAA,IACJ,CAAC;AAAA,EACL;AACJ;AACA,kBAAkB,SAAS;;;AC7CpB,IAAMC,yBAAwB,CAAC,OAAO,SAAS,YAAY;AAE9D,MAAI,MAAM,mBAAmB;AACzB,WAAO,IAAI,kBAAkB;AAAA,MACzB;AAAA,MACA;AAAA,MACA;AAAA,IACJ,CAAC;AAAA,EACL;AACA,SAAO,IAAI,aAAa;AAAA,IACpB;AAAA,IACA;AAAA,IACA;AAAA,EACJ,CAAC;AACL;AA6EA,IAAqBC,wBAArB,cAAkD,qBAAyB;AAAA,EACvE,WAAW,gBAAgB;AACvB,WAAO;AAAA,MACH,uBAAAD;AAAA,IACJ;AAAA,EACJ;AACJ;AACAC,sBAAqB,SAAS;;;ACkH9B,IAAqBC,gBAArB,cAA0C,kCAA0BC,4BAAmB,0BAAkB,wBAAwB,CAAC,CAAC,EAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAiFjI,WAAW,QAAQ;AACf,WAAO;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAyQA,WAAW,gBAAgB;AACvB,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAyNH,oBAAqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MASrB,sBAAuBC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MASvB,iBAAkBC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MASlB,sBAAuBC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MASvB,oBAAqBC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAQrB,2BAA4B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAQ5B,sBAAuBC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAQvB,iBAAkBC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAQlB,sBAAuBC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAQvB,oBAAqBC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MASrB,eAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAOhB,8BAA+B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAc/B,kBAAmB;AAAA,MACnB,sBAAuB,CAAC;AAAA,MACxB,UAAWC;AAAA,IACf;AAAA,EACJ;AAAA,EACA,WAAW,eAAe;AACtB,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAkBH,WAAY;AAAA,IAChB;AAAA,EACJ;AAAA;AAAA,EAEA,IAAI,YAAY;AACZ,WAAO,KAAK;AAAA,EAChB;AAAA;AAAA;AAAA,EAGA,IAAI,YAAY;AACZ,WAAO,KAAK,qBAAqB;AAAA,EACrC;AAAA,EACA,gBAAgB,WAAW;AACvB,SAAK,qBAAqB,OAAO;AAAA,EACrC;AAAA;AAEJ;AACAV,cAAa,SAAS;",
  "names": ["later", "min", "month", "constraint", "i", "fn", "field", "split", "expr", "every", "str", "t", "hour", "map", "mixin", "self", "base", "required", "mixinState", "defaultValue", "document", "defaultValue", "hasOwnProperty", "toString", "equal", "fn", "field", "oldValue", "newValue", "defineProperty", "configuringSymbol", "instancePropertiesSymbol", "emptyObject", "Base", "fn", "delay", "mixin", "proto", "defaultValue", "bucket", "filter", "map", "fn", "hasOwnProperty", "fn", "args", "hasOwnProperty", "Base", "delay", "name", "fn", "bucket", "result", "locale", "Base", "locale", "escape", "emptyObject", "Base", "locale", "clsName", "toString", "DATE_TYPE", "locale", "day", "format", "emptyFn", "month", "format", "fn", "month", "dateString", "parser", "day", "unit", "amount", "min", "toString", "DATE_TYPE", "tempDate", "locale", "TimeUnit", "ConstraintType", "SchedulingMode", "DependencyValidationResult", "DependencyType", "DependenciesCalendar", "ProjectType", "Direction", "ConstraintIntervalSide", "EdgeInclusion", "CalendarIteratorResult", "IndexPosition", "uniqueOnly", "startDate", "AbstractPartOfProjectGenericMixin", "hasOwn", "split", "proto", "map", "defaultValue", "Base", "fn", "Base", "defineProperty", "performance", "map", "fn", "Base", "delay", "Base", "Base", "_a", "Base", "Base", "field", "value", "Base", "fn", "i", "beforeRecord", "field", "Base", "_a", "defineProperty", "Base", "registry", "getOwnPropertyDescriptor", "Base", "field", "record", "defineProperty", "hasOwn", "Base", "field", "defaultValue", "value", "fn", "Base", "filter", "idCounts", "Base", "emptyArray", "Base", "map", "fn", "filter", "item", "_a", "fn", "Base", "added", "field", "Base", "changes", "Base", "filter", "fn", "field", "Base", "field", "fn", "prototype", "records", "Base", "Base", "_a", "Base", "field", "min", "sum", "Base", "field", "fn", "Base", "field", "fn", "Base", "field", "Base", "filter", "emptyArray", "Base", "_a", "event", "node", "field", "p", "map", "i", "fn", "Base", "field", "STM_PROP", "Base", "context", "index", "defaultTraverseOptions", "fixTraverseOptions", "Base", "field", "fn", "AbstractPartOfProjectStoreMixin", "superProto", "eventName", "param", "AbstractPartOfProjectModelMixin", "CalendarIntervalMixin", "base", "CalendarIntervalStore", "UnspecifiedTimeIntervalModel", "CorePartOfProjectGenericMixin", "day", "CorePartOfProjectModelMixin", "field", "format", "AbstractAssignmentStoreMixin", "AbstractCalendarManagerStoreMixin", "AbstractDependencyStoreMixin", "dataAddRemoveActions", "AbstractEventStoreMixin", "dataAddRemoveActions", "AbstractResourceStoreMixin", "CoreEventMixin", "field", "calculate", "CoreResourceMixin", "field", "CoreAssignmentMixin", "field", "CorePartOfProjectStoreMixin", "CoreAssignmentStoreMixin", "CoreCalendarMixin", "CoreCalendarManagerStoreMixin", "CoreDependencyMixin", "field", "emptySet", "CoreDependencyStoreMixin", "CoreHasAssignmentsMixin", "field", "CoreHasDependenciesMixin", "SchedulerCoreEvent", "CoreEventStoreMixin", "CoreResourceStoreMixin", "Base", "Base", "throwAbstractMethodCall", "Base", "PARENT_MODEL_PROP", "CHILD_MODELS_PROP", "CONTEXT_PROP", "STORE_PROP", "MODEL_LIST_PROP", "INSERT_INDEX_PROP", "CONTEXT_PROP", "STORE_PROP", "MODEL_LIST_PROP", "CONTEXT_PROP", "STORE_PROP", "Base", "fn", "AbstractProjectMixin", "DelayableWrapper", "SchedulerCoreProjectMixin", "fn", "defineProperty", "delay", "emptyFn", "proto", "required", "OnCycleAction", "VariableInputState", "__decorate", "EdgeType", "__decorate", "Levels", "Transaction", "stack", "delay", "Transaction", "revision", "field", "entity", "ReadMode", "entity", "Entity", "field", "entity", "defineProperty", "proto", "__decorate", "ReferenceIdentifier", "entity", "__decorate", "BucketMutationType", "ReferenceBucketIdentifier", "entity", "entity", "__decorate", "ChronoModelFieldIdentifier", "field", "ChronoModelReferenceFieldQuark", "prototype", "proto", "ChronoModelMixin", "field", "locale", "En_default", "__decorate", "EffectResolutionResult", "Base", "__decorate", "Base", "ChronoPartOfProjectGenericMixin", "ChronoPartOfProjectStoreMixin", "ChronoPartOfProjectModelMixin", "__decorate", "BaseCalendarMixin", "Base", "__decorate", "Transaction", "identifier", "EngineReplica", "field", "Base", "__decorate", "BaseAssignmentMixin", "ChronoAssignmentStoreMixin", "ChronoCalendarManagerStoreMixin", "ChronoDependencyStoreMixin", "Instruction", "__decorate", "HasCalendarMixin", "uniqueOnly", "__decorate", "BaseEventMixin", "__decorate", "BaseHasAssignmentsMixin", "__decorate", "HasDependenciesMixin", "SchedulerBasicEvent", "ChronoEventStoreMixin", "ChronoEventTreeStoreMixin", "__decorate", "BaseResourceMixin", "ChronoResourceStoreMixin", "__decorate", "DurationConverterMixin", "__decorate", "BaseDependencyMixin", "ChronoAbstractProjectMixin", "field", "HasSubEventsMixin", "__decorate", "HasChildrenMixin", "__decorate", "SchedulerBasicProjectMixin", "delay", "field", "fn", "__decorate", "startDate", "endDate", "ConstrainedEarlyEventMixin", "__decorate", "__decorate", "ScheduledByDependenciesEarlyEventMixin", "__decorate", "SchedulerProAssignmentMixin", "map", "__decorate", "SchedulerProDependencyMixin", "__decorate", "HasPercentDoneMixin", "__decorate", "SchedulerProHasAssignmentsMixin", "calendar", "assignments", "startDate", "endDate", "__decorate", "SchedulerProEventSegment", "segment", "__decorate", "SplitEventMixin", "previousSegment", "duration", "calendar", "__decorate", "HasEffortMixin", "calendar", "__decorate", "HasSchedulingModeMixin", "FixedDurationMixin", "SchedulerProEvent", "__decorate", "startDate", "endDate", "assignments", "ticksData", "SchedulerProResourceMixin", "entity", "__decorate", "SchedulerProProjectMixin", "dependency", "fn", "delay", "isArray", "Model", "Base", "_a", "fn", "store", "field", "record", "phantomIdField", "Base", "Base", "Base", "field", "_a", "field", "Base", "day", "days", "Base", "endDate", "day", "month", "fn", "fn", "delay", "fn", "days", "fn", "days", "day", "occurrenceDate", "fn", "days", "day", "occurrenceDate", "format", "fn", "days", "field", "emptyArray", "emptyArray", "Base", "Base", "field", "fn", "_a", "EngineMixin", "Base", "fn", "resource", "returnTrue", "filter", "date", "_a", "bucket", "i", "length", "indexName", "emptyArray", "MILLIS_PER_DAY", "proto", "_a", "Base", "fn", "field", "EngineMixin", "EngineMixin", "Base", "EngineMixin", "EngineMixin", "EngineMixin", "event", "result", "fn", "EngineMixin", "Base", "field", "_a", "Base", "EngineMixin", "PartOfProject_default", "Base", "AssignmentModel", "PartOfProject_default", "AssignmentStore", "PartOfProject_default", "AssignmentModel", "PartOfProject_default", "PartOfProject_default", "PartOfProject_default", "DependencyModel", "PartOfProject_default", "DependencyStore", "PartOfProject_default", "DependencyModel", "EventModel", "PartOfProject_default", "EventStore", "PartOfProject_default", "EventModel", "ResourceModel", "PartOfProject_default", "ResourceStore", "PartOfProject_default", "ResourceModel", "ProjectCrudManager_default", "Base", "field", "field", "Base", "makeModelUpdateAction", "StateTrackingManager", "ProjectModel", "ProjectCrudManager_default", "DependencyModel", "EventModel", "AssignmentModel", "ResourceModel", "DependencyStore", "EventStore", "AssignmentStore", "ResourceStore", "StateTrackingManager"]
}
