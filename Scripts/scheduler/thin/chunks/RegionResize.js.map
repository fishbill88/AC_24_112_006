{"version":3,"file":"RegionResize.js","sources":["../../../../Grid/lib/Grid/column/NumberColumn.js","../../../../Grid/lib/Grid/feature/RegionResize.js"],"sourcesContent":["import Column from './Column.js';\nimport ColumnStore from '../data/ColumnStore.js';\nimport NumberFormat from '../../Core/helper/util/NumberFormat.js';\nimport ObjectHelper from '../../Core/helper/ObjectHelper.js';\n\n/**\n * @module Grid/column/NumberColumn\n */\n\n/**\n * A column for showing/editing numbers.\n *\n * Default editor is a {@link Core.widget.NumberField NumberField}.\n *\n * ```javascript\n * new Grid({\n *     appendTo : document.body,\n *     columns : [\n *         { type: 'number', min: 0, max : 100, field: 'score' }\n *     ]\n * });\n * ```\n *\n * Provide a {@link Core/helper/util/NumberFormat} config as {@link #config-format} to be able to show currency. For\n * example:\n * ```javascript\n * new Grid({\n *     appendTo : document.body,\n *     columns : [\n *         {\n *             type   : 'number',\n *             format : {\n *                style    : 'currency'\n *                currency : 'USD',\n *             }\n *         }\n *     ]\n * });\n * ```\n *\n * @extends Grid/column/Column\n * @classType number\n * @inlineexample Grid/column/NumberColumn.js\n * @column\n */\nexport default class NumberColumn extends Column {\n    //region Config\n\n    static type = 'number';\n\n    // Type to use when auto adding field\n    static fieldType = 'number';\n\n    static fields = [\n        'format',\n\n        /**\n         * The minimum value for the field used during editing.\n         * @config {Number} min\n         * @category Common\n         */\n        'min',\n\n        /**\n         * The maximum value for the field used during editing.\n         * @config {Number} max\n         * @category Common\n         */\n        'max',\n\n        /**\n         * Step size for the field used during editing.\n         * @config {Number} step\n         * @category Common\n         */\n        'step',\n\n        /**\n         * Large step size for the field used during editing. In effect for `SHIFT + click/arrows`\n         * @config {Number} largeStep\n         * @category Common\n         */\n        'largeStep',\n\n        /**\n         * Unit to append to displayed value.\n         * @config {String} unit\n         * @category Common\n         */\n        'unit'\n    ];\n\n    static get defaults() {\n        return {\n            filterType : 'number',\n\n            /**\n             * The format to use for rendering numbers.\n             *\n             * By default, the locale's default number formatter is used. For `en-US`, the\n             * locale default is a maximum of 3 decimal digits, using thousands-based grouping.\n             * This would render the number `1234567.98765` as `'1,234,567.988'`.\n             *\n             * @config {String|NumberFormatConfig}\n             */\n            format : ''\n        };\n    }\n\n    //endregion\n\n    //region Init\n\n    get defaultEditor() {\n        const { format, name, max, min, step, largeStep, align } = this;\n\n        // Remove any undefined configs, to allow config system to use default values instead\n        return ObjectHelper.cleanupProperties({\n            type      : 'numberfield',\n            format,\n            name,\n            max,\n            min,\n            step,\n            largeStep,\n            textAlign : align\n        });\n    }\n\n    get formatter() {\n        const\n            me         = this,\n            { format } = me;\n\n        let formatter = me._formatter;\n\n        if (!formatter || me._lastFormat !== format) {\n            me._formatter = formatter = NumberFormat.get(me._lastFormat = format);\n        }\n\n        return formatter;\n    }\n\n    formatValue(value) {\n        if (value != null) {\n            value = this.formatter.format(value);\n\n            if (this.unit) {\n                value = `${value}${this.unit}`;\n            }\n        }\n        return value ?? '';\n    }\n\n    /**\n     * Renderer that displays value + optional unit in the cell\n     * @private\n     */\n    defaultRenderer({ value }) {\n        return this.formatValue(value);\n    }\n}\n\nColumnStore.registerColumnType(NumberColumn, true);\nNumberColumn.exposeProperties();\n","import EventHelper from '../../Core/helper/EventHelper.js';\nimport InstancePlugin from '../../Core/mixin/InstancePlugin.js';\nimport GridFeatureManager from '../feature/GridFeatureManager.js';\n\n/**\n * @module Grid/feature/RegionResize\n */\n\n/**\n * Makes the splitter between grid section draggable so you can resize grid sections.\n *\n * {@inlineexample Grid/feature/RegionResize.js}\n *\n * ```javascript\n * // enable RegionResize\n * const grid = new Grid({\n *   features: {\n *     regionResize: true\n *   }\n * });\n * ```\n *\n * This feature is <strong>disabled</strong> by default.\n *\n * @extends Core/mixin/InstancePlugin\n * @demo Grid/features\n * @classtype regionResize\n * @feature\n */\nexport default class RegionResize extends InstancePlugin {\n    // region Init\n\n    static $name = 'RegionResize';\n\n    static get pluginConfig() {\n        return {\n            chain : ['onElementPointerDown', 'onElementDblClick', 'onElementTouchMove', 'onSubGridCollapse', 'onSubGridExpand', 'render']\n        };\n    }\n\n    //endregion\n\n    onElementDblClick(event) {\n        const\n            me         = this,\n            { client } = me,\n            splitterEl = event.target.closest('.b-grid-splitter-collapsed');\n\n        // If collapsed splitter is dblclicked and region is not expanding\n        // It is unlikely that user might dblclick splitter twice and even if he does, nothing should happen.\n        // But just in case lets not expand twice.\n        if (splitterEl && !me.expanding) {\n            me.expanding = true;\n\n            let region  = splitterEl.dataset.region,\n                subGrid = client.getSubGrid(region);\n\n            // Usually collapsed splitter means corresponding region is collapsed. But in case of last two regions one\n            // splitter can be collapsed in two directions. So, if corresponding region is expanded then last one is collapsed\n            if (!subGrid.collapsed) {\n                region = client.getLastRegions()[1];\n                subGrid = client.getSubGrid(region);\n            }\n\n            subGrid.expand().then(() => me.expanding = false);\n        }\n    }\n\n    //region Move splitter\n\n    /**\n     * Begin moving splitter.\n     * @private\n     * @param splitterElement Splitter element\n     * @param clientX Initial x position from which new width will be calculated on move\n     */\n    startMove(splitterElement, clientX) {\n        const\n            me              = this,\n            { client }      = me,\n            region          = splitterElement.dataset.region,\n            gridEl          = client.element,\n            nextRegion      = client.regions[client.regions.indexOf(region) + 1],\n            nextSubGrid     = client.getSubGrid(nextRegion),\n            splitterSubGrid = client.getSubGrid(region);\n\n        let\n            subGrid = splitterSubGrid,\n            flip    = 1;\n\n        if (subGrid.flex != null) {\n            // If subgrid has flex, check if next one does not\n            if (nextSubGrid.flex == null) {\n                subGrid = nextSubGrid;\n                flip = -1;\n            }\n        }\n\n        if (client.rtl) {\n            flip *= -1;\n        }\n\n        if (splitterElement.classList.contains('b-grid-splitter-collapsed')) {\n            return;\n        }\n\n        const availableWidth = subGrid.element.offsetWidth + nextSubGrid.element.offsetWidth;\n\n        me.dragContext = {\n            element       : splitterElement,\n            headerEl      : subGrid.header.element,\n            subGridEl     : subGrid.element,\n            subGrid,\n            splitterSubGrid,\n            originalWidth : subGrid.element.offsetWidth,\n            originalX     : clientX,\n            minWidth      : subGrid.minWidth || 0,\n            maxWidth      : Math.min(availableWidth, subGrid.maxWidth || availableWidth),\n            flip\n        };\n\n        gridEl.classList.add('b-moving-splitter');\n        splitterSubGrid.toggleSplitterCls('b-moving');\n\n        me.pointerDetacher = EventHelper.on({\n            element     : document,\n            pointermove : 'onPointerMove',\n            pointerup   : 'onPointerUp',\n            thisObj     : me\n        });\n    }\n\n    /**\n     * Stop moving splitter.\n     * @private\n     */\n    endMove() {\n        const\n            me              = this,\n            { dragContext } = me;\n\n        if (dragContext) {\n            me.pointerDetacher();\n            me.client.element.classList.remove('b-moving-splitter');\n            dragContext.splitterSubGrid.toggleSplitterCls('b-moving', false);\n            me.dragContext = null;\n        }\n    }\n\n    onCollapseClick(subGrid, splitterEl, domEvent) {\n        const\n            me         = this,\n            { client } = me,\n            region     = splitterEl.dataset.region,\n            regions    = client.getLastRegions();\n\n        /**\n         * Fired by the Grid when the collapse icon is clicked. Return `false` to prevent the default collapse action,\n         * if you want to implement your own behavior.\n         * @event splitterCollapseClick\n         * @on-owner\n         * @preventable\n         * @param {Grid.view.Grid} source The Grid instance.\n         * @param {Grid.view.SubGrid} subGrid The subgrid\n         * @param {Event} domEvent The native DOM event\n         */\n        if (client.trigger('splitterCollapseClick', { subGrid, domEvent }) === false) {\n            return;\n        }\n        // Last splitter in the grid is responsible for collapsing/expanding last 2 regions and is always related to the\n        // left one. Check if we are working with last splitter\n        if (regions[0] === region) {\n            const lastSubGrid = client.getSubGrid(regions[1]);\n            if (lastSubGrid.collapsed) {\n                lastSubGrid.expand();\n                return;\n            }\n        }\n\n        subGrid.collapse();\n    }\n\n    onExpandClick(subGrid, splitterEl, domEvent) {\n        const\n            me         = this,\n            { client } = me,\n            region     = splitterEl.dataset.region,\n            regions    = client.getLastRegions();\n\n        /**\n         * Fired by the Grid when the expand icon is clicked. Return `false` to prevent the default expand action,\n         * if you want to implement your own behavior.\n         * @event splitterExpandClick\n         * @preventable\n         * @param {Grid.view.Grid} source The Grid instance.\n         * @param {Grid.view.SubGrid} subGrid The subgrid\n         * @param {Event} domEvent The native DOM event\n         */\n        if (client.trigger('splitterExpandClick', { subGrid, domEvent }) === false) {\n            return;\n        }\n\n        // Last splitter in the grid is responsible for collapsing/expanding last 2 regions and is always related to the\n        // left one. Check if we are working with last splitter\n        if (regions[0] === region) {\n            if (!subGrid.collapsed) {\n                const lastSubGrid = client.getSubGrid(regions[1]);\n                lastSubGrid.collapse();\n                return;\n            }\n        }\n\n        subGrid.expand();\n    }\n\n    /**\n     * Update splitter position.\n     * @private\n     * @param newClientX\n     */\n    updateMove(newClientX) {\n        const { dragContext } = this;\n\n        if (dragContext) {\n            const\n                difX     = newClientX - dragContext.originalX,\n                newWidth = Math.max(Math.min(dragContext.maxWidth, dragContext.originalWidth + difX * dragContext.flip), 0);\n\n            // SubGrids monitor their own size and keep any splitters synced\n            dragContext.subGrid.width = Math.max(newWidth, dragContext.minWidth);\n        }\n    }\n\n    //endregion\n\n    //region Events\n\n    /**\n     * Start moving splitter on mouse down (on splitter).\n     * @private\n     * @param event\n     */\n    onElementPointerDown(event) {\n        const\n            me            = this,\n            { target }    = event,\n            // Only care about left clicks, avoids a bug found by monkeys\n            splitter      = event.button === 0 && target.closest(':not(.b-row-reordering):not(.b-dragging-event):not(.b-dragging-task):not(.b-dragging-header):not(.b-dragselecting) .b-grid-splitter'),\n            subGrid       = splitter && me.client.getSubGrid(splitter.dataset.region);\n\n        let toggle;\n\n        if (splitter) {\n            if (target.closest('.b-grid-splitter-button-collapse')) {\n                me.onCollapseClick(subGrid, splitter, event);\n            }\n            else if (target.closest('.b-grid-splitter-button-expand')) {\n                me.onExpandClick(subGrid, splitter, event);\n            }\n            else {\n                me.startMove(splitter, event.clientX);\n                toggle = splitter;\n            }\n        }\n\n        if (event.pointerType === 'touch') {\n            // Touch on splitter makes splitter wider, touch outside or expand/collapse makes it smaller again\n            me.toggleTouchSplitter(toggle);\n        }\n    }\n\n    /**\n     * Move splitter on mouse move.\n     * @private\n     * @param event\n     */\n    onPointerMove(event) {\n        if (this.dragContext) {\n            this.updateMove(event.clientX);\n            event.preventDefault();\n        }\n    }\n\n    onElementTouchMove(event) {\n        if (this.dragContext) {\n            // Needed to prevent scroll in Mobile Safari, preventing pointermove is not enough\n            event.preventDefault();\n        }\n    }\n\n    /**\n     * Stop moving splitter on mouse up.\n     * @private\n     * @param event\n     */\n    onPointerUp(event) {\n        if (this.dragContext) {\n            this.endMove();\n            event.preventDefault();\n        }\n    }\n\n    onSubGridCollapse({ subGrid }) {\n        const\n            splitterEl = this.client.resolveSplitter(subGrid),\n            regions    = this.client.getLastRegions();\n\n        // if last region was collapsed\n        if (regions[1] === subGrid.region) {\n            splitterEl.classList.add('b-grid-splitter-allow-collapse');\n        }\n    }\n\n    onSubGridExpand({ subGrid }) {\n        const splitterEl = this.client.resolveSplitter(subGrid);\n        splitterEl.classList.remove('b-grid-splitter-allow-collapse');\n    }\n\n    //endregion\n\n    /**\n     * Adds b-touching CSS class to splitterElements when touched. Removes when touched outside.\n     * @private\n     * @param splitterElement\n     */\n    toggleTouchSplitter(splitterElement) {\n        const\n            me                  = this,\n            { touchedSplitter } = me;\n\n        // If other splitter is touched, deactivate old one\n        if (splitterElement && touchedSplitter && splitterElement.dataset.region !== touchedSplitter.dataset.region) {\n            me.toggleTouchSplitter();\n        }\n\n        // Either we have touched a splitter (should activate) or touched outside (should deactivate)\n        const splitterSubGrid = me.client.getSubGrid(splitterElement ? splitterElement.dataset.region : touchedSplitter?.dataset.region);\n        if (splitterSubGrid) {\n            splitterSubGrid.toggleSplitterCls('b-touching', Boolean(splitterElement));\n            if (splitterElement) {\n                splitterSubGrid.startSplitterButtonSyncing();\n            }\n            else {\n                splitterSubGrid.stopSplitterButtonSyncing();\n            }\n        }\n\n        me.touchedSplitter = splitterElement;\n    }\n\n    render() {\n        const { regions, subGrids } = this.client;\n\n        // Multiple regions, only allow collapsing to the edges by hiding buttons\n        if (regions.length > 2) {\n            // Only works in a 3 subgrid scenario. To support more subgrids we have to merge splitters or something\n            // on collapse. Not going down that path currently...\n            subGrids[regions[0]].splitterElement.classList.add('b-left-only');\n            subGrids[regions[1]].splitterElement.classList.add('b-right-only');\n        }\n    }\n}\n\nRegionResize.featureClass = 'b-split';\n\nGridFeatureManager.registerFeature(RegionResize);\n"],"names":["NumberColumn","Column","type","fieldType","fields","defaults","filterType","format","defaultEditor","name","max","min","step","largeStep","align","ObjectHelper","cleanupProperties","textAlign","formatter","me","_formatter","_lastFormat","NumberFormat","get","formatValue","value","unit","defaultRenderer","ColumnStore","registerColumnType","exposeProperties","_$name","RegionResize","InstancePlugin","$name","pluginConfig","chain","onElementDblClick","event","client","splitterEl","target","closest","expanding","region","dataset","subGrid","getSubGrid","collapsed","getLastRegions","expand","then","startMove","splitterElement","clientX","gridEl","element","nextRegion","regions","indexOf","nextSubGrid","splitterSubGrid","flip","flex","rtl","classList","contains","availableWidth","offsetWidth","dragContext","headerEl","header","subGridEl","originalWidth","originalX","minWidth","maxWidth","Math","add","toggleSplitterCls","pointerDetacher","EventHelper","on","document","pointermove","pointerup","thisObj","endMove","remove","onCollapseClick","domEvent","trigger","lastSubGrid","collapse","onExpandClick","updateMove","newClientX","difX","newWidth","width","onElementPointerDown","splitter","button","toggle","pointerType","toggleTouchSplitter","onPointerMove","preventDefault","onElementTouchMove","onPointerUp","onSubGridCollapse","resolveSplitter","onSubGridExpand","touchedSplitter","Boolean","startSplitterButtonSyncing","stopSplitterButtonSyncing","render","subGrids","length","featureClass","GridFeatureManager","registerFeature"],"mappings":"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"}