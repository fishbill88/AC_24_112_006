{"version":3,"file":"Scale.js","sources":["../../../../Core/lib/Core/widget/graph/Histogram.js","../../../../Core/lib/Core/widget/graph/Scale.js"],"sourcesContent":["import Widget from '../Widget.js';\nimport StringHelper from '../../helper/StringHelper.js';\nimport DomSync from '../../helper/DomSync.js';\nimport Tooltip from '../Tooltip.js';\n\n/**\n * @module Core/widget/graph/Histogram\n */\nconst\n    ns = 'http://www.w3.org/2000/svg',\n    // Outline series must overlay bars\n    typePrio = {\n        bar     : 1,\n        outline : 2,\n        text    : 3\n    },\n    byDatasetOrder = (l, r) => parseInt(l.dataset.order, 10) - parseInt(r.dataset.order, 10),\n    getField = s => s.field,\n    returnFalse = () => false;\n\n/**\n * Displays a simple bar histogram based upon an array of data objects passed in the {@link #config-data} config.\n * @extends Core/widget/Widget\n * @classtype histogram\n */\nexport default class Histogram extends Widget {\n    //region Config\n\n    static get type() {\n        return 'histogram';\n    }\n\n    static get $name() {\n        return 'Histogram';\n    }\n\n    static get defaultConfig() {\n        return {\n            /**\n             * An array of data objects used to drive the histogram. The property/properties used\n             * are defined in the {@link #config-series} option.\n             * @config {Object[]}\n             * @default\n             */\n            data : null,\n\n            /**\n             * The values to represent in bar form.\n             * @config {Number[]}\n             */\n            values : null,\n\n            /**\n             * Each item in the array must contain two properties:\n             *  - `type` A String, either `'bar'` or `'outline'`\n             *  - `field` A String, the name of the property to use from the data objects in the {@link #config-data} option.\n             * @config {Object[]}\n             */\n            series : null,\n\n            /**\n             * By default, the bars are scaled based upon the detected max value across all the series.\n             * A specific top value to represent the 100% height may be configured.\n             * @config {Number}\n             */\n            topValue : null,\n\n            element : {\n                children : [{\n                    ns,\n                    tag                 : 'svg',\n                    reference           : 'svgElement',\n                    width               : '100%',\n                    height              : '100%',\n                    preserveAspectRatio : 'none',\n                    children            : [{\n                        ns,\n                        tag       : 'g',\n                        reference : 'scaledSvgGroup'\n                    }, {\n                        ns,\n                        tag       : 'g',\n                        reference : 'unscaledSvgGroup'\n                    }]\n                }]\n            },\n\n            /**\n             * By default, all bars are rendered, even those with zero height. Configure this as `true`\n             * to omit zero height bars.\n             * @config {Number}\n             */\n            omitZeroHeightBars : null,\n\n            monitorResize : true,\n\n            /**\n             * A Function which returns a CSS class name to add to a rectangle element.\n             * The following parameters are passed:\n             * @param {Object} series - The series being rendered\n             * @param {Object} rectConfig - The rectangle configuration object\n             * @param {Object} datum - The datum being rendered\n             * @param {Number} index - The index of the datum being rendered\n             * @config {Function}\n             */\n            getRectClass : null,\n\n            /**\n             * A Function which returns the tooltip text to display when hovering a bar.\n             * The following parameters are passed:\n             * @param {Object} series - The series being rendered\n             * @param {Object} rectConfig - The rectangle configuration object\n             * @param {Object} datum - The datum being rendered\n             * @param {Number} index - The index of the datum being rendered\n             * @config {Function}\n             */\n            getBarTip : null,\n\n            /**\n             * A Function which returns the text to render inside a bar.\n             * The following parameters are passed:\n             * @param {Object} datum - The datum being rendered\n             * @param {Number} index - The index of the datum being rendered\n             * @config {Function}\n             */\n            getBarText : null,\n\n            getBarTextRenderData : null,\n\n            getBarTextTip : null\n        };\n    }\n\n    //endregion\n\n    //region Init\n\n    construct(config) {\n        super.construct(config);\n        this.scheduleRefresh = this.createOnFrame(this.refresh, [], this, true);\n        this.refresh();\n    }\n\n    set tip(tip) {\n        const me = this;\n\n        me.tip?.destroy();\n\n        if (tip) {\n            me._tip = Tooltip.new({\n                owner             : me,\n                forElement        : me.svgElement,\n                forSelector       : 'rect',\n                internalListeners : {\n                    beforeShow : 'up.onBeforeTipShow'\n                }\n            }, tip);\n        }\n        else {\n            me._tip = null;\n        }\n    }\n\n    onElementResize() {\n        super.onElementResize(...arguments);\n\n        const svgRect = this.svgElement.getBoundingClientRect();\n\n        this.scaledSvgGroup.setAttribute('transform', `scale(${svgRect.width} ${svgRect.height})`);\n    }\n\n    onBeforeTipShow({ source : tip }) {\n        const index = parseInt(tip.activeTarget.dataset.index);\n\n        tip.html = tip.contentTemplate({\n            histogram : this,\n            index\n        });\n    }\n\n    set series(value) {\n        const\n            me     = this,\n            series = me._series = {};\n\n        for (const id in value) {\n            // Providing\n            //\n            // \"series\" : {\n            //     \"foo\" : false\n            //     ...\n            //\n            // disables the \"foo\" serie (that could be defined on a prototype level for example)\n\n            if (value[id] !== false) {\n                const data = series[id] = Object.assign({}, value[id]);\n\n                // support type & field provided on config prototype level\n\n                if (!data.type && value[id].type) {\n                    data.type = value[id].type;\n                }\n\n                if (!data.field && value[id].field) {\n                    data.field = value[id].field;\n                }\n\n                if (!('order' in series)) {\n                    data.order = typePrio[data.type];\n                }\n\n                data.id = id;\n            }\n        }\n\n        me.scheduleRefresh();\n    }\n\n    get series() {\n        return this._series;\n    }\n\n    set data(data) {\n        const me = this;\n\n        // <remove-on-release>\n        // TODO: me.topValue = undefined;\n        // </remove-on-release>\n\n        me._data = data;\n\n        // Calculate the top value from all the series\n        if (!me.topValue) {\n            const fields   = Object.values(me.series).map(getField);\n\n            for (let i = 0, { length } = data; i < length; i++) {\n                for (let j = 0, { length } = fields; j < length; j++) {\n                    me.topValue = Math.max(me.topValue || 0, data[i][fields[j]]);\n                }\n            }\n        }\n\n        me.scheduleRefresh();\n    }\n\n    get data() {\n        return this._data;\n    }\n\n    set topValue(value) {\n        this._topValue = value;\n\n        this.scheduleRefresh();\n    }\n\n    get topValue() {\n        return this._topValue;\n    }\n\n    // Must exist from the start because configuration setters call it.\n    // Once configured, will be replaced with a function which schedules a refresh for the next animation frame.\n    scheduleRefresh() {\n\n    }\n\n    refresh() {\n        const\n            me             = this,\n            {\n                series,\n                _tip\n            }              = me,\n            histogramElements = [];\n\n        for (const id in series) {\n            const\n                data     = series[id],\n                elConfig = me[`draw${StringHelper.capitalize(data.type)}`](data);\n\n            if (Array.isArray(elConfig)) {\n                histogramElements.push.apply(histogramElements, elConfig);\n            }\n            else {\n                histogramElements.push(elConfig);\n            }\n        }\n\n        histogramElements.sort(byDatasetOrder);\n\n        DomSync.syncChildren({\n            domConfig      : { children : histogramElements },\n            configEquality : returnFalse\n        }, me.scaledSvgGroup);\n\n        DomSync.syncChildren({\n            domConfig : { children : me.drawText() }\n        }, me.unscaledSvgGroup);\n\n        if (_tip && _tip.isVisible) {\n            me.onBeforeTipShow({ source : _tip });\n        }\n    }\n\n    drawBar(series) {\n        const\n            me           = this,\n            {\n                topValue,\n                data,\n                omitZeroHeightBars,\n                barStyle\n            }            = me,\n            {\n                field,\n                order\n            }            = series,\n            defaultWidth = 1 / data.length,\n            children     = [];\n\n        let\n            width;\n\n        for (let index = 0, x = 0, { length } = data; index < length; index++, x += width) {\n            const\n                datum = data[index],\n                value = datum[field],\n                // limit height with topValue otherwise the histogram looks fine\n                // yet the bar tooltip picks wrong Y-coordinate and there is an empty space between it and the bar\n                height = datum.height || (value > topValue ? topValue : value) / topValue,\n                y = 1 - height,\n                rectConfig = (datum.rectConfig = {\n                    ns,\n                    tag     : 'rect',\n                    dataset : {}\n                }),\n                barTip = me.callback('getBarTip', me, [series, rectConfig, datum, index]);\n\n            // use either provided width or the calculated value\n            width = datum.width || defaultWidth;\n\n            if (barStyle) {\n                rectConfig.style = barStyle;\n            }\n            else {\n                delete rectConfig.style;\n            }\n            Object.assign(rectConfig.dataset, {\n                index,\n                order\n            });\n            Object.assign(rectConfig, {\n                x,\n                y,\n                width,\n                height,\n                class : me.callback('getRectClass', me, [series, rectConfig, datum, index])\n            });\n\n            if (barTip) {\n                rectConfig.dataset.btip = barTip;\n            }\n            else {\n                delete rectConfig.dataset.btip;\n            }\n\n            if (height || !omitZeroHeightBars) {\n                children.push(rectConfig);\n            }\n        }\n        return children;\n    }\n\n    drawOutline(series) {\n        const\n            me           = this,\n            {\n                topValue,\n                data\n            }            = me,\n            {\n                field,\n                order\n            }            = series,\n            defaultWidth = 1 / data.length,\n            coords       = ['M 0,1'],\n            result       = series.outlineElement || (series.outlineElement = {\n                ns,\n                tag     : 'path',\n                dataset : {\n                    order\n                }\n            });\n\n        let\n            barWidth,\n            command1 = 'M',\n            command2 = 'L';\n\n        for (let i = 0, x = 0, { length } = data; i < length; i++) {\n            const barHeight = 1 - data[i][field] / topValue;\n\n            // use either provided with or the calculated value\n            barWidth = data[i].width || defaultWidth;\n\n            coords.push(`${command1} ${x},${barHeight} ${command2} ${x += barWidth},${barHeight}`);\n            command1 = command2 = '';\n        }\n        // coords.push('1,1');\n\n        result.d = coords.join(' ');\n\n        return result;\n    }\n\n    drawText() {\n        const\n            me                = this,\n            { data }          = me,\n            defaultWidth      = 1 / data.length,\n            defaultY          = '100%',\n            unscaledSvgGroups = [];\n\n        for (let index = 0, width, x = 0, { length } = data; index < length; index++, x += width) {\n            width = data[index].width || defaultWidth;\n\n            const barText = me.callback('getBarText', me, [data[index], index]);\n\n            if (barText) {\n\n                const renderData = me.callback('getBarTextRenderData', me, [{\n                    ns,\n                    tag       : 'text',\n                    className : 'b-bar-legend',\n                    html      : barText,\n                    x         : `${(x + width / 2) * 100}%`,\n                    y         : data[index].y !== undefined ? data[index].y : defaultY,\n                    dataset   : {\n                        index\n                    }\n                }, data[index], index]);\n\n                const barTip = me.callback('getBarTextTip', me, [renderData, data[index], index]);\n                if (barTip) {\n                    renderData.dataset.btip = barTip;\n                }\n                else {\n                    delete renderData.dataset.btip;\n                }\n\n                unscaledSvgGroups.push(renderData);\n            }\n        }\n\n        return unscaledSvgGroups;\n    }\n\n    //endregion\n\n    // Injectable method\n    getBarText(datum, index) {\n        return '';\n    }\n\n    // Injectable method\n    getBarTextRenderData(renderData, datum, index) {\n        return renderData;\n    }\n\n    // Injectable method\n    getBarTip(series, rectConfig, datum, index) {\n\n    }\n\n    // Injectable method\n    getBarTextTip(renderData, datum, index) {\n\n    }\n\n    // Injectable method\n    getRectClass(series, rectConfig, datum, index) {\n        return '';\n    }\n}\n\nHistogram.initClass();\n","import Widget from '../Widget.js';\nimport DomSync from '../../helper/DomSync.js';\n\n/**\n * @module Core/widget/graph/Scale\n */\nconst\n    ns = 'http://www.w3.org/2000/svg';\n\n/**\n * Displays a scale with ticks and labels.\n * @extends Core/widget/Widget\n * @classtype scale\n */\nexport default class Scale extends Widget {\n    //region Config\n\n    static get type() {\n        return 'scale';\n    }\n\n    static get $name() {\n        return 'Scale';\n    }\n\n    static get configurable() {\n        return {\n            scalePoints : null,\n\n            // Padding after the max scale point.\n            // Expressed as the share of the height.\n            scaleMaxPadding : 0.1,\n\n            /**\n             * Configure as `true` to create a horizontal scale. Scales are vertical by default.\n             * @config {Boolean}\n             */\n            horizontal : false,\n\n            /**\n             * Side to align the scale to. Defaults to `bottom` for {@link #config-horizontal} Scales\n             * and `right` for vertical Scales.\n             * @config {String}\n             */\n            align : {\n                value   : false,\n                $config : {\n                    merge : 'replace'\n                }\n            },\n\n            element : {\n                children : [{\n                    ns,\n                    tag                 : 'svg',\n                    reference           : 'svgElement',\n                    width               : '100%',\n                    height              : '100%',\n                    preserveAspectRatio : 'none',\n                    children            : [{\n                        ns,\n                        tag       : 'g',\n                        reference : 'scaledSvgGroup',\n                        children  : [{\n                            ns,\n                            tag       : 'path',\n                            reference : 'pathElement'\n                        }]\n                    }, {\n                        ns,\n                        tag       : 'g',\n                        reference : 'unscaledSvgGroup'\n                    }]\n                }]\n            },\n\n            monitorResize : true\n        };\n    }\n\n    //endregion\n\n    //region Init\n\n    construct(config) {\n        super.construct(config);\n        this.scheduleRefresh = this.createOnFrame(this.refresh, [], this, true);\n        this.refresh();\n    }\n\n    changeAlign(align) {\n        if (!align) {\n            align = this.horizontal ? 'bottom' : 'right';\n        }\n        return align;\n    }\n\n    updateAlign(align, oldAlign) {\n        this.element.classList.remove(`b-align-${oldAlign}`);\n        this.element.classList.add(`b-align-${align}`);\n    }\n\n    updateHorizontal(horizontal, oldHorizontal) {\n        this.element.classList.remove(`b-scale-${oldHorizontal ? 'horizontal' : 'vertical'}`);\n        this.element.classList.add(`b-scale-${horizontal ? 'horizontal' : 'vertical'}`);\n    }\n\n    onElementResize() {\n        super.onElementResize(...arguments);\n        this.scheduleRefresh();\n    }\n\n    // Must exist from the start because configuration setters call it.\n    // Once configured, will be replaced with a function which schedules a refresh for the next animation frame.\n    scheduleRefresh() {\n\n    }\n\n    refresh() {\n        const\n            me             = this,\n            {\n                horizontal,\n                width,\n                height,\n                align,\n                scalePoints,\n                scaleMaxPadding\n            }                  = me,\n            scaleMax           = scalePoints[scalePoints.length - 1].value,\n            path               = [],\n            labels             = [];\n\n        const posFactor = 1 / (scaleMax + scaleMaxPadding * scaleMax);\n\n        me.scaledSvgGroup.setAttribute('transform', `scale(${horizontal ? width : 1} ${horizontal ? 1 : height})`);\n\n        for (const point of scalePoints) {\n            const isLabelStep = Boolean(point.text),\n                pos = posFactor * point.value;\n\n            if (isLabelStep) {\n                const label = {\n                    ns,\n                    tag       : 'text',\n                    className : 'b-scale-tick-label',\n                    html      : point.text,\n                    dataset   : {\n                        tick : point.value\n                    }\n                };\n\n                if (horizontal) {\n                    label.x = `${pos * 100}%`;\n                    label.y = align === 'top' ? '1.6em' : height - 12;\n                }\n                else {\n                    label.x = align === 'left' ? '12' : `${width - 12}`;\n                    label.y = `${(1 - pos) * 100}%`;\n                }\n                labels.push(label);\n            }\n\n            if (horizontal) {\n                if (align === 'top') {\n                    path.push(`M${pos},0 L${pos},${isLabelStep ? 10 : 5}`);\n                }\n                else {\n                    path.push(`M${pos},${height} L${pos},${height - (isLabelStep ? 10 : 5)}`);\n                }\n            }\n            else {\n                if (align === 'left') {\n                    path.push(`M0,${1 - pos} L${isLabelStep ? 10 : 5},${1 - pos}`);\n                }\n                else {\n                    path.push(`M${width},${1 - pos} L${width - (isLabelStep ? 10 : 5)},${1 - pos}`);\n                }\n            }\n        }\n        me.pathElement.setAttribute('d', path.join(''));\n        DomSync.syncChildren({\n            domConfig : { children : labels }\n        }, me.unscaledSvgGroup);\n    }\n\n    //endregion\n}\nScale.initClass();\n"],"names":["ns","typePrio","bar","outline","text","byDatasetOrder","l","r","parseInt","dataset","order","getField","s","field","returnFalse","Histogram","Widget","type","$name","defaultConfig","data","values","series","topValue","element","children","tag","reference","width","height","preserveAspectRatio","omitZeroHeightBars","monitorResize","getRectClass","getBarTip","getBarText","getBarTextRenderData","getBarTextTip","construct","config","scheduleRefresh","createOnFrame","refresh","tip","_me$tip","me","destroy","_tip","Tooltip","new","owner","forElement","svgElement","forSelector","internalListeners","beforeShow","onElementResize","arguments","svgRect","getBoundingClientRect","scaledSvgGroup","setAttribute","onBeforeTipShow","source","index","activeTarget","html","contentTemplate","histogram","value","_series","id","Object","assign","_data","fields","map","i","length","j","Math","max","_topValue","histogramElements","elConfig","StringHelper","capitalize","Array","isArray","push","apply","sort","DomSync","syncChildren","domConfig","configEquality","drawText","unscaledSvgGroup","isVisible","drawBar","barStyle","defaultWidth","x","datum","y","rectConfig","barTip","callback","style","class","btip","drawOutline","coords","result","outlineElement","barWidth","command1","command2","barHeight","d","join","defaultY","unscaledSvgGroups","barText","renderData","className","undefined","initClass","_$name","Scale","configurable","scalePoints","scaleMaxPadding","horizontal","align","$config","merge","changeAlign","updateAlign","oldAlign","classList","remove","add","updateHorizontal","oldHorizontal","scaleMax","path","labels","posFactor","point","isLabelStep","Boolean","pos","label","tick","pathElement"],"mappings":"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"}