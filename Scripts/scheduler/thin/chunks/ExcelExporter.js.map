{"version":3,"file":"ExcelExporter.js","sources":["../../../../Grid/lib/Grid/feature/GroupSummary.js","../../../../Grid/lib/Grid/util/TableExporter.js","../../../../Grid/lib/Grid/util/BooleanUnicodeSymbol.js","../../../../Grid/lib/Grid/feature/experimental/ExcelExporter.js"],"sourcesContent":["import InstancePlugin from '../../Core/mixin/InstancePlugin.js';\nimport GridFeatureManager from '../feature/GridFeatureManager.js';\nimport SummaryFormatter from './mixin/SummaryFormatter.js';\nimport DomHelper from '../../Core/helper/DomHelper.js';\nimport ObjectHelper from '../../Core/helper/ObjectHelper.js';\n\n/**\n * @module Grid/feature/GroupSummary\n */\n\n/**\n * Displays a summary row as a group footer in a grouped grid. Uses same configuration options on columns as\n * {@link Grid.feature.Summary}.\n *\n * This feature is <strong>disabled</strong> by default.\n *\n * ```javascript\n * features : {\n *     group        : 'city',\n *     groupSummary : true\n * }\n * ```\n *\n * @extends Core/mixin/InstancePlugin\n *\n * @demo Grid/groupsummary\n * @classtype groupSummary\n * @feature\n *\n * @inlineexample Grid/feature/GroupSummary.js\n */\nexport default class GroupSummary extends SummaryFormatter(InstancePlugin) {\n    //region Init\n\n    static get $name() {\n        return 'GroupSummary';\n    }\n\n    static get configurable() {\n        return {\n            /**\n             * Set to `true` to have group summaries rendered in the group header when a group is collapsed.\n             *\n             * Only applies when {@link #config-target} is `'footer'` (the default).\n             *\n             * @member {Boolean} collapseToHeader\n             */\n            /**\n             * Configure as `true` to have group summaries rendered in the group header when a group is collapsed.\n             *\n             * ```javascript\n             * const grid = new Grid({\n             *    features : {\n             *        groupSummary : {\n             *            collapseToHeader : true\n             *        }\n             *    }\n             * });\n             * ```\n             *\n             * Only applies when {@link #config-target} is `'footer'` (the default).\n             *\n             * @config {Boolean}\n             */\n            collapseToHeader : null,\n\n            /**\n             * Where to render the group summaries to, either `header` to display them in the group header or `footer`\n             * to display them in the group footer (the default).\n             *\n             * @member {'header'|'footer'} target\n             */\n            /**\n             * Where to render the group summaries to, either `header` to display them in the group header or `footer`\n             * to display them in the group footer (the default).\n             *\n             * ```javascript\n             * const grid = new Grid({\n             *    features : {\n             *        groupSummary : {\n             *            target : 'header'\n             *        }\n             *    }\n             * });\n             * ```\n             *\n             * @config {'header'|'footer'}\n             * @default\n             */\n            target : 'footer'\n        };\n    }\n\n    construct(grid, config) {\n        this.grid = grid;\n\n        super.construct(grid, config);\n\n        if (!grid.features.group) {\n            throw new Error('Requires Group feature to work, please enable');\n        }\n\n        this.bindStore(grid.store);\n\n        grid.rowManager.ion({\n            beforeRenderRow : 'onBeforeRenderRow',\n            renderCell      : 'renderCell',\n\n            // The feature gets to see cells being rendered after the Group feature\n            // because the Group feature injects header content into group header rows\n            // and adds rendering info to the cells renderData which we must comply with.\n            // In particular, it calculates the isFirstColumn flag which it adds to\n            // the cell renderData which we interrogate.\n            prio    : 1000,\n            thisObj : this\n        });\n    }\n\n    bindStore(store) {\n        this.detachListeners('store');\n\n        store.ion({\n            name    : 'store',\n            update  : 'onStoreUpdate',\n            // need to run before grids listener, to flag for full refresh\n            prio    : 1,\n            thisObj : this\n        });\n    }\n\n    get store() {\n        return this.grid.store;\n    }\n\n    doDisable(disable) {\n        // Toggle footers if needed\n        this.updateTarget(this.target);\n\n        super.doDisable(disable);\n    }\n\n    changeTarget(target) {\n        ObjectHelper.assertString(target, 'target');\n\n        return target;\n    }\n\n    updateTarget(target) {\n        // Flag that will make the Store insert rows for group footers\n        this.store.useGroupFooters = !this.disabled && target === 'footer';\n\n        // Refresh groups to show/hide footers\n        if (!this.isConfiguring) {\n            this.store.group();\n        }\n    }\n\n    changeCollapseToHeader(collapseToHeader) {\n        ObjectHelper.assertBoolean(collapseToHeader, 'collapseToHeader');\n\n        return collapseToHeader;\n    }\n\n    updateCollapseToHeader() {\n        if (!this.isConfiguring) {\n            this.store.group();\n        }\n    }\n\n    //endregion\n\n    //region Plugin config\n\n    // Plugin configuration. This plugin chains some of the functions in Grid.\n    static get pluginConfig() {\n        return {\n            chain : ['bindStore']\n        };\n    }\n\n    //endregion\n\n    //region Render\n\n    /**\n     * Called before rendering row contents, used to reset rows no longer used as group summary rows\n     * @private\n     */\n    onBeforeRenderRow({ row, record }) {\n        if (row.isGroupFooter && !('groupFooterFor' in record.meta)) {\n            // not a group row.\n            row.isGroupFooter = false;\n            // force full \"redraw\" when rendering cells\n            row.forceInnerHTML = true;\n        }\n        else if (row.isGroupHeader && !record.meta.collapsed) {\n            // remove any summary elements\n            row.eachElement(this.removeSummaryElements);\n        }\n    }\n\n    removeSummaryElements(rowEl) {}\n\n    /**\n     * Called when a cell is rendered, styles the group rows first cell.\n     * @private\n     */\n    renderCell({ column, cellElement, row, record, size, isFirstColumn }) {\n        const\n            me            = this,\n            { meta }      = record,\n            { rowHeight } = me.grid,\n            isGroupHeader = 'groupRowFor' in meta,\n            isGroupFooter = 'groupFooterFor' in meta,\n            targetsHeader = me.target === 'header',\n            rowClasses    = {\n                'b-group-footer'   : 0,\n                'b-header-summary' : 0\n            },\n            isSummaryTarget =\n                // Header cell should have summary content if we are targeting the header or if the group is collapsed\n                // and we are configured with collapseToHeader, excluding the first column which holds the group title\n                (isGroupHeader && (targetsHeader || me.collapseToHeader && meta.collapsed) && !isFirstColumn) ||\n                // Footer cell should have summary content if we are targeting the footer (won't render if collapsed)\n                (isGroupFooter && !targetsHeader);\n\n        // Needed to restore height when summary is no longer displayed\n        if (isGroupHeader || isGroupFooter) {\n            size.height = isGroupHeader ? (size.height || rowHeight) : rowHeight;\n        }\n\n        if (me.store.isGrouped && isSummaryTarget && !me.disabled) {\n            // clear cell before add any HTML in it. if the cell contained widgets, they will be properly destroyed.\n            column.clearCell(cellElement);\n\n            const groupRecord = isGroupHeader ? record : meta.groupRecord;\n\n            row.isGroupFooter = isGroupFooter;\n            row.isGroupHeader = isGroupHeader;\n\n            // This is a group footer row, add css\n            if (isGroupFooter) {\n                rowClasses['b-group-footer'] = 1;\n            }\n            // This is a group header row, add css\n            else {\n                rowClasses['b-header-summary'] = 1;\n            }\n\n            // returns height config or count. config format is { height, count }. where `height is in px and should be\n            // added to value calculated from `count\n            const\n                heightSetting = me.updateSummaryHtml(cellElement, column, groupRecord),\n                count         = typeof heightSetting === 'number' ? heightSetting : heightSetting.count;\n\n            // number of summaries returned, use to calculate cell height\n            if (count > 1) {\n                size.height += (meta.collapsed && !targetsHeader ? 0 : count * rowHeight * 0.1);\n            }\n\n            // height config with height specified, added to cell height\n            if (heightSetting.height) {\n                size.height += heightSetting.height;\n            }\n        }\n\n        // Sync row's classes with its status as a group header or footer.\n        row.assignCls(rowClasses);\n    }\n\n    updateSummaryHtml(cellElement, column, groupRecord) {\n        const records = groupRecord.groupChildren.slice();\n\n        // Group footers should not be included in summary calculations\n        if (records[records.length - 1].isGroupFooter) {\n            records.pop();\n        }\n\n        const html = this.generateHtml(column, records, 'b-grid-group-summary', groupRecord, groupRecord.meta.groupField, groupRecord.meta.groupRowFor);\n\n        // First time, set table\n        if (!cellElement.children.length) {\n            cellElement.innerHTML = html;\n        }\n        // Following times, sync changes\n        else {\n            DomHelper.sync(html, cellElement.firstElementChild);\n        }\n\n        // return summary \"count\", used to set row height\n        return column.summaries ? column.summaries.length : column.sum ? 1 : 0;\n    }\n\n    //endregion\n\n    //region Events\n\n    /**\n     * Updates summaries on store changes (except record update, handled below)\n     * @private\n     */\n    onStoreUpdate({ source : store, changes }) {\n        if (!this.disabled && store.isGrouped) {\n            // If a grouping field is among the changes, StoreGroup#onDataChanged will\n            // take care of the update by re-sorting.\n            if (changes && store.groupers.find(grouper => grouper.field in changes)) {\n                return;\n            }\n            // only update summary when a field that affects summary is changed\n            // <remove-on-release>\n            // TODO: this should maybe be removed, another column might depend on the value for its summary?\n            // </remove-on-release>\n            const shouldUpdate = Object.keys(changes).some(field => {\n                const colField = this.grid.columns.get(field);\n                // check existence, since a field not used in a column might have changed\n                return Boolean(colField) && (Boolean(colField.sum) || Boolean(colField.summaries));\n            });\n\n            if (shouldUpdate) {\n                this.grid.forceFullRefresh = true;\n            }\n        }\n    }\n\n    //endregion\n\n    /**\n     * Refreshes the summaries\n     */\n    refresh() {\n        this.grid.columns.visibleColumns.forEach(column => {\n            if (this.hasSummary(column)) {\n                this.grid.refreshColumn(column);\n            }\n        });\n    }\n\n    hasSummary(column) {\n        return column.sum || column.summaries;\n    }\n}\n\nGroupSummary.featureClass = 'b-group-summary';\n\nGridFeatureManager.registerFeature(GroupSummary);\n","import DomHelper from '../../Core/helper/DomHelper.js';\nimport Base from '../../Core/Base.js';\nimport ObjectHelper from '../../Core/helper/ObjectHelper.js';\n\n/**\n * @module Grid/util/TableExporter\n */\n\n/**\n * This class transforms grid component into two arrays: rows and columns. Columns array contains objects with\n * meta information about column: field name, column name, width and type of the rendered value, rows array contains\n * arrays of cell values.\n *\n * ```javascript\n * const exporter = new TableExporter({ target : grid });\n * exporter.export()\n *\n * // Output\n * {\n *     columns : [\n *         { field : 'name',     value : 'First name', type : 'string',  width : 100 },\n *         { field : 'surname',  value : 'Last name',  type : 'string',  width : 100 },\n *         { field : 'age',      value : 'Age',        type : 'number',  width : 50  },\n *         { field : 'married',  value : 'Married',    type : 'boolean', width : 50  },\n *         { field : 'children', value : 'Children',   type : 'object',  width : 100 }\n *     ],\n *     rows : [\n *         ['Michael', 'Scott',   40, false, []],\n *         ['Jim',     'Halpert', 30, true,  [...]]\n *     ]\n * }\n * ```\n *\n * ## How data is exported\n *\n * Exporter iterates over store records and processes each record for each column being exported. Exporter uses same\n * approach to retrieve data as column: reading record field, configured on the column, or calling renderer function\n * if one is provided. This means data can be of any type: primitives or objects. So children array in the above code\n * snippet may contain instances of child record class.\n *\n * ## Column renderers\n *\n * Column renderers are commonly used to style the cell, or even render more HTML into it, like {@link Grid.column.WidgetColumn}\n * does. This is not applicable in case of export. Also, given grid uses virtual rendering (only renders visible rows) and\n * exporter iterates over all records, not just visible ones, we cannot provide all data necessary to the renderer. Some\n * arguments, like cellElement and row, wouldn't exist. Thus renderer is called with as much data we have: value,\n * record, column, grid, other {@link Grid.column.Column#config-renderer documented arguments} would be undefined.\n *\n * Exporter adds one more flag for renderer function: isExport. When renderer receives this flag it knows\n * data is being exported and can skip DOM work to return simpler value. Below snippet shows simplified code of the\n * widget column handling export:\n *\n * ```javascript\n * renderer({ isExport }) {\n *     if (isExport) {\n *         return null;\n *     }\n *     else {\n *         // widget rendering routine\n *         ...\n *     }\n * }\n * ```\n *\n * ## Column types\n *\n * Column types are not actually a complete list of JavaScript types (you can get actual type of the cell using typeof) it\n * is a simple and helpful meta information.\n *\n * Available column types are:\n *  * string\n *  * number\n *  * boolean\n *  * date\n *  * object\n *\n * Everything which is not primitive like string/number/bool (or a date) is considered an object. This includes null, undefined,\n * arrays, classes, functions etc.\n *\n * ## Getting column type\n *\n * If existing grid column is used, column type first would be checked with {@link Grid.column.Column#config-exportedType exportedType}\n * config. If exportedType is undefined or column does not exist in grid, type is read from a record field definition.\n * If the field is not defined, object type is used.\n *\n * Configuring exported type:\n *\n * ```javascript\n * new Grid({\n *     columns : [\n *         {\n *             name         : 'Name',\n *             field        : 'name',\n *             exportedType : 'object',\n *             renderer     : ({ value, isExport }) => {\n *                 if (isExport) {\n *                     return { value }; // return value wrapped into object\n *                 }\n *             }\n *     ]\n * })\n * ```\n *\n * @extends Core/Base\n */\nexport default class TableExporter extends Base {\n    static get defaultConfig() {\n        return {\n            /**\n             * Target grid instance to export data from\n             * @config {Grid.view.Grid} target\n             */\n            target : null,\n\n            /**\n             * Specifies a default column width if no width specified\n             * @config {Number} defaultColumnWidth\n             * @default\n             */\n            defaultColumnWidth : 100,\n\n            /**\n             * Set to false to export date as it is displayed by Date column formatter\n             * @config {Boolean}\n             * @default\n             */\n            exportDateAsInstance : true,\n\n            /**\n             * If true and the grid is grouped, shows the grouped value in the first column. True by default.\n             * @config {Boolean} showGroupHeader\n             * @default\n             */\n            showGroupHeader : true,\n\n            /**\n             * An array of column configuration objects used to specify column widths, header text, and data fields to get the data from.\n             * 'field' config is required. If 'text' is missing, it will read it from the grid column or the 'field' config.\n             * If 'width' is missing, it will try to get it retrieved from the grid column or {@link #config-defaultColumnWidth} config.\n             * If no columns provided the config will be generated from the grid columns.\n             *\n             * For example:\n             * ```javascript\n             * columns : [\n             *     'firstName', // field\n             *     'age', // field\n             *     { text : 'Starts', field : 'start', width : 140 },\n             *     { text : 'Ends', field : 'finish', width : 140 }\n             * ]\n             * ```\n             *\n             * @config {String[]|Object[]} columns\n             * @default\n             */\n            columns : null,\n\n            /**\n             * When true and tree is being exported, node names are indented with {@link #config-indentationSymbol}\n             * @config {Boolean}\n             * @default\n             */\n            indent : true,\n\n            /**\n             * This symbol (four spaces by default) is used to indent node names when {@link #config-indent} is true\n             * @config {String}\n             * @default\n             */\n            indentationSymbol : '\\u00A0\\u00A0\\u00A0\\u00A0'\n        };\n    }\n\n    /**\n     * Exports grid data according to provided config\n     * @param {Object} config\n     * @returns {{ rows : Object[][], columns : Object[] }}\n     */\n    export(config = {}) {\n        const me = this;\n\n        config = ObjectHelper.assign({}, me.config, config);\n\n        me.normalizeColumns(config);\n\n        return me.generateExportData(config);\n    }\n\n    generateExportData(config) {\n        const\n            me      = this,\n            columns = me.generateColumns(config),\n            rows    = me.generateRows(config);\n\n        return { rows, columns };\n    }\n\n    normalizeColumns(config) {\n        // In case columns are provided we need to use normalized config. If those are not provided, we are going\n        // to use real columns, possible invoking renderers (we need to pass column instance to the renderer to\n        // avoid breaking API too much)\n        const columns = config.columns || this.target.columns.visibleColumns.filter(rec => rec.exportable !== false);\n\n        config.columns = columns.map(col => {\n            if (typeof col === 'string') {\n                return this.target.columns.find(column => column.field === col) || { field : col };\n            }\n            else {\n                return col;\n            }\n        });\n    }\n\n    generateColumns(config) {\n        return config.columns.map(col => this.processColumn(col, config));\n    }\n\n    generateRows(config) {\n        const { columns, rows } = config;\n\n        if (columns.length === 0 || rows?.length === 0) {\n            return [];\n        }\n\n        const\n            me         = this,\n            { target } = me;\n\n        return (rows || target.store)\n            // although columns are taken from config, it is convenient to provide them as a separate argument\n            // because that allows to override set of columns to process\n            .map(record => me.processRecord(record, columns, config))\n            // filter out empty rows\n            .filter(cells => cells?.length);\n    }\n\n    getColumnType(column, store = this.target.store) {\n        let result = column.exportedType || 'object';\n\n        if (column.exportedType === undefined) {\n            if (column.field) {\n                const fieldDefinition = store.modelClass.getFieldDefinition(column.field);\n\n                if (fieldDefinition && fieldDefinition.type !== 'auto') {\n                    result = fieldDefinition.type;\n                }\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Extracts export data from the column instance\n     * @param {Grid.column.Column} column\n     * @param {Object} config\n     * @private\n     * @returns {Object}\n     */\n    processColumn(column, config) {\n        const\n            me                     = this,\n            { target }             = me,\n            { defaultColumnWidth } = config;\n\n        let { field, text : value, width, minWidth } = column;\n\n        // If column is not configured with field, field is generated (see Column.js around line 514).\n        // In export we want empty string there\n        if (!(field in target.store.modelClass.fieldMap)) {\n            field = '';\n        }\n\n        // If name or width is missing try to retrieve them from the grid column and the field, or use default values.\n        if (!value || !width) {\n            const gridColumn = target.columns.find(col => col.field === field);\n\n            if (!value) {\n                value = gridColumn && gridColumn.text || field;\n            }\n\n            // null or undefined\n            if (width == null) {\n                width = gridColumn && gridColumn.width || defaultColumnWidth;\n            }\n        }\n\n        width = Math.max(width || defaultColumnWidth, minWidth || defaultColumnWidth);\n\n        return { field, value, width, type : me.getColumnType(column) };\n    }\n\n    /**\n     * Extracts export data from the record instance reading supplied column configs\n     * @param {Core.data.Model|null} record If null is passed, all columns will be filled with empty strings\n     * @param {Grid.column.Column[]} columns\n     * @param {Object} config\n     * @private\n     * @returns {Object[]}\n     */\n    processRecord(record, columns, config) {\n        const\n            { target } = this,\n            {\n                showGroupHeader,\n                indent,\n                indentationSymbol\n            }  = config;\n\n        let cells;\n\n        if (!record) {\n            cells = columns.map(() => '');\n        }\n        else if (record.isSpecialRow) {\n            if (showGroupHeader && record.meta.groupRowFor) {\n                cells = columns.map(column => {\n                    return target.features.group.buildGroupHeader({\n                        // Create dummy element to get html from\n                        cellElement : DomHelper.createElement(),\n                        grid        : target,\n                        record,\n                        column\n                    });\n                });\n            }\n        }\n        else {\n            cells = columns.map(column => {\n                let value = column.field?.includes('.') ? record.get(column.field) : record[column.field];\n                const useRenderer = column.renderer || column.defaultRenderer;\n\n                if (useRenderer && !(value && column.isDateColumn && config.exportDateAsInstance)) {\n                    value = useRenderer.call(column, {\n                        value,\n                        record,\n                        column,\n                        grid     : target,\n                        isExport : true\n                    });\n                }\n\n                if (indent && column.tree) {\n                    value = `${indentationSymbol.repeat(record.childLevel)}${value}`;\n                }\n\n                return value;\n            });\n        }\n\n        return cells;\n    }\n}\n","export default class BooleanUnicodeSymbol {\n    constructor(value) {\n        this._value = value;\n    }\n\n    get value() {\n        return this._value;\n    }\n\n    toString() {\n        return Boolean(this.value) ? '✓' : '';\n    }\n}\n","import GridFeatureManager from '../GridFeatureManager.js';\nimport InstancePlugin from '../../../Core/mixin/InstancePlugin.js';\nimport TableExporter from '../../util/TableExporter.js';\nimport BooleanUnicodeSymbol from '../../util/BooleanUnicodeSymbol.js';\nimport DateHelper from '../../../Core/helper/DateHelper.js';\nimport ObjectHelper from '../../../Core/helper/ObjectHelper.js';\n\n/**\n * @module Grid/feature/experimental/ExcelExporter\n */\n\n/**\n * **NOTE**: This class requires a 3rd party library to operate.\n *\n * A feature that allows exporting Grid data to Excel without involving the server. It uses {@link Grid.util.TableExporter}\n * class as data provider, [zipcelx library](https://www.npmjs.com/package/zipcelx)\n * forked and adjusted to support [column width config](https://github.com/bryntum/zipcelx/tree/column-width-build)\n * and [Microsoft XML specification](https://msdn.microsoft.com/en-us/library/office/documentformat.openxml.spreadsheet.aspx).\n * Zipcelx should be either in global scope (window) or can be provided with {@link #config-zipcelx} config.\n *\n * ```html\n * // Global scope\n * <script src=\"zipcelx.js\"></script>\n * ```\n *\n * ```javascript\n * // importing from package\n * import zipcelx from 'zipcelx';\n *\n * const grid = new Grid({\n *     features : {\n *         excelExporter : {\n *             zipcelx\n *         }\n *     }\n * })\n * ```\n *\n * Here is an example of how to add the feature:\n *\n * ```javascript\n * const grid = new Grid({\n *     features : {\n *         excelExporter : {\n *             // Choose the date format for date fields\n *             dateFormat : 'YYYY-MM-DD HH:mm',\n *\n *             exporterConfig : {\n *                 // Choose the columns to include in the exported file\n *                 columns : ['name', 'role'],\n *                 // Optional, export only selected rows\n *                 rows    : grid.selectedRecords\n *             }\n *         }\n *     }\n * });\n * ```\n *\n * And how to call it:\n *\n * ```javascript\n * grid.features.excelExporter.export({\n *     filename : 'Export',\n *     exporterConfig : {\n *         columns : [\n *             { text : 'First Name', field : 'firstName', width : 90 },\n *             { text : 'Age', field : 'age', width : 40 },\n *             { text : 'Starts', field : 'start', width : 140 },\n *             { text : 'Ends', field : 'finish', width : 140 }\n *         ]\n *     }\n * })\n * ```\n *\n * @extends Core/mixin/InstancePlugin\n * @demo Grid/exporttoexcel\n * @classtype excelExporter\n * @feature\n */\nexport default class ExcelExporter extends InstancePlugin {\n    static get $name() {\n        return 'ExcelExporter';\n    }\n\n    static get defaultConfig() {\n        return {\n            /**\n             * Name of the exported file\n             * @config {String} filename\n             * @default\n             */\n            filename : null,\n\n            /**\n             * Defines how dates in a cell will be formatted\n             * @config {String} dateFormat\n             * @default\n             */\n            dateFormat : 'YYYY-MM-DD',\n\n            /**\n             * Exporter class to use as a data provider. {@link Grid.util.TableExporter} by default.\n             * @config {Grid.util.TableExporter}\n             * @typings {typeof TableExporter}\n             * @default\n             */\n            exporterClass : TableExporter,\n\n            /**\n             * Configuration object for {@link #config-exporterClass exporter class}.\n             * @config {Object}\n             */\n            exporterConfig : null,\n\n            /**\n             * Reference to zipcelx library. If not provided, exporter will look in the global scope.\n             * @config {Object}\n             */\n            zipcelx : null,\n\n            /**\n             * If this config is true, exporter will convert all empty values to ''. Empty values are:\n             * * undefined, null, NaN\n             * * Objects/class instances that do not have toString method defined and are stringified to [object Object]\n             * * functions\n             * @config {Boolean}\n             */\n            convertEmptyValueToEmptyString : true\n        };\n    }\n\n    processValue(value) {\n        if (\n            value === undefined ||\n            value === null ||\n            Number.isNaN(value) ||\n            typeof value === 'function' ||\n            (typeof value === 'object' && String(value) === '[object Object]')\n        ) {\n            return '';\n        }\n        else {\n            return value;\n        }\n    }\n\n    generateExportData(config) {\n        const\n            me                = this,\n            { rows, columns } = me.exporter.export(config.exporterConfig);\n\n        return {\n            rows : rows.map(row => {\n                return row.map((value, index) => {\n                    if (value instanceof Date) {\n                        value = DateHelper.format(value, config.dateFormat);\n                    }\n                    else if (typeof value === 'boolean') {\n                        value = new BooleanUnicodeSymbol(value);\n                    }\n\n                    if (me.convertEmptyValueToEmptyString) {\n                        value = me.processValue(value);\n                    }\n\n                    const type = columns[index]?.type === 'number' ? 'number' : 'string';\n\n                    return { value, type };\n                });\n            }),\n            columns : columns.map(col => {\n                let { field, value, width, type } = col;\n\n                // when number column is exported with zipcelx, excel warns that sheet is broken and asks for repair\n                // repair works, but having error on open doesn't look acceptable\n                // type = type === 'number' ? 'number' : 'string';\n                type = 'string';\n\n                return { field, value, width, type };\n            })\n        };\n    }\n\n    /**\n     * Generate and download an Excel file (.xslx).\n     * @param {Object} config Optional configuration object, which overrides initial settings of the feature/exporter.\n     * @param {String} [config.filename] Name of the exported file\n     * @param {String} [config.dateFormat] Defines how dates in a cell will be formatted\n     * @param {String[]|Object[]} [config.columns] An array of column configuration objects\n     * @param {Core.data.Model[]} [config.rows] An array of records to export\n     * @returns {Promise} Promise that resolves when the export is completed\n     */\n    export(config = {}) {\n        const\n            me      = this,\n            zipcelx = me.zipcelx || globalThis.zipcelx;\n\n        if (!zipcelx) {\n            throw new Error('ExcelExporter: \"zipcelx\" library is required');\n        }\n\n        if (me.disabled) {\n            return;\n        }\n\n        config = ObjectHelper.assign({}, me.config, config);\n\n        if (!config.filename) {\n            config.filename = me.client.$$name;\n        }\n\n        const\n            { filename }      = config,\n            { rows, columns } = me.generateExportData(config);\n\n        return zipcelx({\n            filename,\n            sheet : {\n                data : [columns].concat(rows),\n                cols : columns\n            }\n        });\n    }\n\n    construct(grid, config) {\n        super.construct(grid, config);\n\n        if (!this.zipcelx) {\n            if (typeof zipcelx !== 'undefined') {\n                this.zipcelx = globalThis.zipcelx;\n            }\n        }\n    }\n\n    get exporter() {\n        const me = this;\n\n        return me._exporter || (me._exporter = me.exporterClass.new({ target : me.client }, me.exporterConfig));\n    }\n}\n\nGridFeatureManager.registerFeature(ExcelExporter, false, 'Grid');\n"],"names":["GroupSummary","SummaryFormatter","InstancePlugin","$name","configurable","collapseToHeader","target","construct","grid","config","features","group","Error","bindStore","store","rowManager","ion","beforeRenderRow","renderCell","prio","thisObj","detachListeners","name","update","doDisable","disable","updateTarget","changeTarget","ObjectHelper","assertString","useGroupFooters","disabled","isConfiguring","changeCollapseToHeader","assertBoolean","updateCollapseToHeader","pluginConfig","chain","onBeforeRenderRow","row","record","isGroupFooter","meta","forceInnerHTML","isGroupHeader","collapsed","eachElement","removeSummaryElements","rowEl","column","cellElement","size","isFirstColumn","me","rowHeight","targetsHeader","rowClasses","isSummaryTarget","height","isGrouped","clearCell","groupRecord","heightSetting","updateSummaryHtml","count","assignCls","records","groupChildren","slice","length","pop","html","generateHtml","groupField","groupRowFor","children","innerHTML","DomHelper","sync","firstElementChild","summaries","sum","onStoreUpdate","source","changes","groupers","find","grouper","field","shouldUpdate","Object","keys","some","colField","columns","get","Boolean","forceFullRefresh","refresh","visibleColumns","forEach","hasSummary","refreshColumn","featureClass","_$name","GridFeatureManager","registerFeature","TableExporter","Base","defaultConfig","defaultColumnWidth","exportDateAsInstance","showGroupHeader","indent","indentationSymbol","export","assign","normalizeColumns","generateExportData","generateColumns","rows","generateRows","filter","rec","exportable","map","col","processColumn","processRecord","cells","getColumnType","result","exportedType","undefined","fieldDefinition","modelClass","getFieldDefinition","type","text","value","width","minWidth","fieldMap","gridColumn","Math","max","isSpecialRow","buildGroupHeader","createElement","_column$field","includes","useRenderer","renderer","defaultRenderer","isDateColumn","call","isExport","tree","repeat","childLevel","BooleanUnicodeSymbol","constructor","_value","toString","ExcelExporter","filename","dateFormat","exporterClass","exporterConfig","zipcelx","convertEmptyValueToEmptyString","processValue","Number","isNaN","String","exporter","index","_columns$index","Date","DateHelper","format","globalThis","client","$$name","sheet","data","concat","cols","_exporter","new"],"mappings":";;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe,MAAMA,YAAY,SAASC,gBAAgB,CAACC,cAAc,CAAC,CAAC;AACvE;EACA,WAAWC,KAAKA,GAAG;AACf,IAAA,OAAO,cAAc,CAAA;AACzB,GAAA;EACA,WAAWC,YAAYA,GAAG;IACtB,OAAO;AACH;AACZ;AACA;AACA;AACA;AACA;AACA;AACY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACYC,MAAAA,gBAAgB,EAAG,IAAI;AACvB;AACZ;AACA;AACA;AACA;AACA;AACY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACYC,MAAAA,MAAM,EAAG,QAAA;KACZ,CAAA;AACL,GAAA;AACAC,EAAAA,SAASA,CAACC,IAAI,EAAEC,MAAM,EAAE;IACpB,IAAI,CAACD,IAAI,GAAGA,IAAI,CAAA;AAChB,IAAA,KAAK,CAACD,SAAS,CAACC,IAAI,EAAEC,MAAM,CAAC,CAAA;AAC7B,IAAA,IAAI,CAACD,IAAI,CAACE,QAAQ,CAACC,KAAK,EAAE;AACtB,MAAA,MAAM,IAAIC,KAAK,CAAC,+CAA+C,CAAC,CAAA;AACpE,KAAA;AACA,IAAA,IAAI,CAACC,SAAS,CAACL,IAAI,CAACM,KAAK,CAAC,CAAA;AAC1BN,IAAAA,IAAI,CAACO,UAAU,CAACC,GAAG,CAAC;AAChBC,MAAAA,eAAe,EAAG,mBAAmB;AACrCC,MAAAA,UAAU,EAAQ,YAAY;AAC9B;AACA;AACA;AACA;AACA;AACAC,MAAAA,IAAI,EAAM,IAAI;AACdC,MAAAA,OAAO,EAAG,IAAA;AACd,KAAC,CAAC,CAAA;AACN,GAAA;EACAP,SAASA,CAACC,KAAK,EAAE;AACb,IAAA,IAAI,CAACO,eAAe,CAAC,OAAO,CAAC,CAAA;IAC7BP,KAAK,CAAC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"}