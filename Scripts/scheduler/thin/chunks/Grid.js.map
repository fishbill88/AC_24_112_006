{"version":3,"file":"Grid.js","sources":["../../../../Grid/lib/Grid/feature/ColumnAutoWidth.js","../../../../Grid/lib/Grid/feature/RowCopyPaste.js","../../../../Grid/lib/Grid/view/Grid.js"],"sourcesContent":["import InstancePlugin from '../../Core/mixin/InstancePlugin.js';\nimport GridFeatureManager from '../feature/GridFeatureManager.js';\nimport Delayable from '../../Core/mixin/Delayable.js';\n\nconst storeListenerName = 'store';\n\n/**\n * @module Grid/feature/ColumnAutoWidth\n */\n\n/**\n * Enables the {@link Grid.column.Column#config-autoWidth} config for a grid's columns.\n *\n * This feature is <strong>enabled</strong> by default.\n *\n * @extends Core/mixin/InstancePlugin\n * @mixes Core/mixin/Delayable\n * @classtype columnAutoWidth\n * @feature\n */\nexport default class ColumnAutoWidth extends Delayable(InstancePlugin) {\n    static get $name() {\n        return 'ColumnAutoWidth';\n    }\n\n    //region Config\n\n    static get configurable() {\n        return {\n            /**\n             * The default `autoWidth` option for columns with `autoWidth: true`. This can\n             * be a single number for the minimum column width, or an array of two numbers\n             * for the `[minWidth, maxWidth]`.\n             * @config {Number|Number[]}\n             */\n            default : null,\n\n            /**\n             * The amount of time (in milliseconds) to delay after a store modification\n             * before synchronizing `autoWidth` columns.\n             * @config {Number}\n             * @default\n             */\n            delay : 0\n        };\n    }\n\n    //endregion\n\n    //region Internals\n\n    static get pluginConfig() {\n        return {\n            after : {\n                bindStore        : 'bindStore',\n                unbindStore      : 'unbindStore',\n                renderRows       : 'syncAutoWidthColumns',\n                onInternalResize : 'onInternalResize'\n            },\n\n            assign : [\n                'columnAutoWidthPending',\n                'syncAutoWidthColumns'\n            ]\n        };\n    }\n\n    construct(config) {\n        super.construct(config);\n\n        const { store } = this.client;\n\n        // The initial bindStore can come super early such that our hooks won't catch it:\n        store && this.bindStore(store);\n    }\n\n    doDestroy() {\n        this.unbindStore();\n\n        super.doDestroy();\n    }\n\n    bindStore(store) {\n        this.lastSync = null;\n\n        store.ion({\n            name : storeListenerName,\n\n            [`change${this.client.asyncEventSuffix}`] : 'onStoreChange',\n\n            thisObj : this\n        });\n    }\n\n    unbindStore() {\n        this.detachListeners(storeListenerName);\n    }\n\n    get columnAutoWidthPending() {\n        return this.lastSync === null || this.hasTimeout('syncAutoWidthColumns');\n    }\n\n    onStoreChange({ action }) {\n        if (action !== 'move') {\n            const\n                me           = this,\n                { cellEdit } = me.client.features;\n\n            ++me.storeGeneration;\n\n            // If we are editing, sync right away so cell editing can align correctly to next cell\n            // unless editing is finished/canceled by tapping outside of grid body\n            if (cellEdit?.isEditing && !cellEdit.editingStoppedByTapOutside) {\n                me.syncAutoWidthColumns();\n            }\n            else if (!me.hasTimeout('syncAutoWidthColumns')) {\n                me.setTimeout('syncAutoWidthColumns', me.delay);\n            }\n        }\n    }\n\n    // Handle scenario with Grid being inside DIV with display none, and no width. Sync column widths after being shown\n    onInternalResize(element, newWidth, newHeight, oldWidth) {\n        if (oldWidth === 0) {\n            // Force remeasure after we get a width\n            this.lastSync = null;\n            this.syncAutoWidthColumns();\n        }\n    }\n\n    syncAutoWidthColumns() {\n        const\n            me = this,\n            grid = me.client,\n            storeGeneration = me.storeGeneration;\n\n        if (me.lastSync !== storeGeneration) {\n            me.lastSync = storeGeneration;\n\n            let autoWidth, resizingColumns;\n\n            for (const column of grid.columns.visibleColumns) {\n                autoWidth = column.autoWidth;\n\n                if (autoWidth) {\n                    if (autoWidth === true) {\n                        autoWidth = me.default;\n                    }\n\n                    grid.resizingColumns = resizingColumns = true;\n                    column.resizeToFitContent(autoWidth);\n                }\n            }\n\n            if (resizingColumns) {\n                grid.resizingColumns = false;\n                grid.afterColumnsResized();\n            }\n        }\n\n        if (me.hasTimeout('syncAutoWidthColumns')) {\n            me.clearTimeout('syncAutoWidthColumns');\n        }\n    }\n\n    //endregion\n}\n\nColumnAutoWidth.prototype.storeGeneration = 0;\n\nGridFeatureManager.registerFeature(ColumnAutoWidth, true);\n","import InstancePlugin from '../../Core/mixin/InstancePlugin.js';\nimport GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\n\n/**\n * @module Grid/feature/RowCopyPaste\n */\n\n/**\n * Allow using [Ctrl/CMD + C/X] and [Ctrl/CMD + V] to copy/cut and paste rows. Also makes cut, copy and paste actions\n * available via the cell context menu.\n *\n * You can configure how a newly pasted record is named using {@link #function-generateNewName}\n *\n * This feature is **enabled** by default\n *\n * ```javascript\n * const grid = new Grid({\n *     features : {\n *         rowCopyPaste : true\n *     }\n * });\n * ```\n *\n * {@inlineexample Grid/feature/RowCopyPaste.js}\n *\n * This feature will work alongside with CellCopyPaste but there is differences on functionality.\n * * When used together, context menu options will be detailed so the user will know to copy the cell or the row.\n * * They will also detect what type of selection is present at the moment. If there is only rows selected, only row\n *   alternatives are shown in the context menu and the keyboard shortcuts will be processed by RowCopyPaste.\n * * If there is only cells selected, there will be context menu options for both row and cell but keyboard shortcuts\n *   will be handled by CellCopyPaste.\n * * They do not share clipboard, so it is possible to have rows and cells copied or cut at the same time.\n *\n * ## Keyboard shortcuts\n * The feature has the following default keyboard shortcuts:\n *\n * | Keys       | Action  | Weight ยน | Action description                                                                      |\n * |------------|---------|:--------:|-----------------------------------------------------------------------------------------|\n * | `Ctrl`+`C` | *copy*  | 10       | Calls {@link #function-copyRows} which copies selected row(s) into the clipboard.       |\n * | `Ctrl`+`X` | *cut*   | 10       | Calls {@link #function-copyRows} which cuts out selected row(s) and saves in clipboard. |\n * | `Ctrl`+`V` | *paste* | 10       | Calls {@link #function-pasteRows} which inserts copied or cut row(s) from the clipboard.|\n *\n * **ยน** Customization of keyboard shortcuts that has a `weight` can affect other features that also uses that\n * particular keyboard shortcut. Read more in [our guide](#Grid/guides/customization/keymap.md).\n *\n * <div class=\"note\">Please note that <code>Ctrl</code> is the equivalent to <code>Command</code> and <code>Alt</code>\n * is the equivalent to <code>Option</code> for Mac users</div>\n *\n * For more information on how to customize keyboard shortcuts, please see\n * [our guide](#Grid/guides/customization/keymap.md).\n *\n * @extends Core/mixin/InstancePlugin\n * @classtype rowCopyPaste\n * @feature\n */\nexport default class RowCopyPaste extends InstancePlugin {\n\n    static $name = 'RowCopyPaste';\n    static type  = 'rowCopyPaste';\n\n    static pluginConfig = {\n        assign : [\n            'copyRows',\n            'pasteRows'\n        ],\n        chain : [\n            'populateCellMenu'\n        ]\n    };\n\n    clipboardRecords = [];\n\n    static configurable = {\n        /**\n         * The field to use as the name field when updating the name of copied records\n         * @config {String}\n         * @default\n         */\n        nameField : 'name',\n\n        /**\n         * See {@link #keyboard-shortcuts Keyboard shortcuts} for details\n         * @config {Object<String,String>}\n         */\n        keyMap : {\n            // Weight to give CellCopyPaste priority\n            'Ctrl+C' : { weight : 10, handler : 'copy' },\n            'Ctrl+X' : { weight : 10, handler : 'cut' },\n            'Ctrl+V' : { weight : 10, handler : 'paste' }\n        },\n\n        copyRecordText         : 'L{copyRecord}',\n        cutRecordText          : 'L{cutRecord}',\n        pasteRecordText        : 'L{pasteRecord}',\n        rowSpecifierText       : 'L{row}',\n        rowSpecifierTextPlural : 'L{rows}',\n        localizableProperties  : [\n            'copyRecordText',\n            'cutRecordText',\n            'pasteRecordText',\n            'rowSpecifierText',\n            'rowSpecifierTextPlural'\n        ],\n\n        /**\n         * Adds `Cut (row)`, `Copy (row)` and `Paste (row)` options when opening a context menu on a selected cell when\n         * {@link Grid.view.mixin.GridSelection#config-selectionMode cellSelection} and\n         * {@link Grid.feature.CellCopyPaste} is active. Default behaviour will only provide row copy/paste actions on a\n         * selected row.\n         * @config {Boolean}\n         * @default\n         */\n        rowOptionsOnCellContextMenu : false\n\n    };\n\n    construct(grid, config) {\n        super.construct(grid, config);\n\n        grid.rowManager.ion({\n            beforeRenderRow : 'onBeforeRenderRow',\n            thisObj         : this\n        });\n\n        this.grid = grid;\n    }\n\n    // Used in events to separate events from different features from each other\n    entityName = 'row';\n\n    onBeforeRenderRow({ row, record }) {\n        row.cls['b-cut-row'] = this._isCut && this.clipboardRecords.includes(record);\n    }\n\n    isActionAvailable({ event }) {\n        const\n            { grid }     = this,\n            { cellEdit } = grid.features,\n            { target }   = event;\n        // No action if\n        // 1. there is selected text on the page\n        // 2. cell editing is active\n        // 3. cursor is not in the grid (filter bar etc)\n        return !this.disabled &&\n            globalThis.getSelection().toString().length === 0 &&\n            (!cellEdit || !cellEdit.isEditing) &&\n            grid.selectedRecords?.length > 0 && // No key action when no selected records\n            (!target || Boolean(target.closest('.b-gridbase:not(.b-schedulerbase) .b-grid-subgrid,.b-grid-subgrid:not(.b-timeaxissubgrid)')));\n    }\n\n    copy() {\n        this.copyRows();\n    }\n\n    cut() {\n        this.copyRows(true);\n    }\n\n    paste(referenceRecord) {\n        this.pasteRows(referenceRecord?.isModel ? referenceRecord : null);\n    }\n\n    /**\n     * Copy or cut rows to clipboard to paste later\n     *\n     * @fires beforeCopy\n     * @param {Boolean} [isCut] Copies by default, pass `true` to cut\n     * @category Common\n     * @on-owner\n     */\n    copyRows(isCut = false) {\n        const\n            me                     = this,\n            { client, entityName } = me,\n            // Don't cut readOnly records\n            records                = me.selectedRecords.filter(r => !r.readOnly || !isCut);\n\n        /**\n         * Fires on the owning Grid before a copy action is performed, return `false` to prevent the action\n         * @event beforeCopy\n         * @preventable\n         * @on-owner\n         * @param {Grid.view.Grid} source Owner grid\n         * @param {Core.data.Model[]} records The records about to be copied\n         * @param {Boolean} isCut `true` if this is a cut action\n         * @param {String} entityName 'row' to distinguish this event from other beforeCopy events\n         */\n        if (!records.length || client.readOnly ||\n            client.trigger('beforeCopy', { records, isCut, entityName }) === false\n        ) {\n            return;\n        }\n\n        me._isCut = isCut;\n\n        me.clipboardRecords.forEach(rec => client.rowManager.getRowById(rec)?.removeCls('b-cut-row'));\n\n        me.clipboardRecords = records.slice();\n\n        client.store.forEach(rec => {\n            rec.meta.isCut = me._isCut && me.clipboardRecords.includes(rec);\n        });\n\n        // refresh to call reapply the cls for records where the cut was canceled\n        records.forEach(record => this.onRowCutOrCopy(record, isCut));\n        /**\n         * Fires on the owning Grid after a copy action is performed.\n         * @event copy\n         * @on-owner\n         * @param {Grid.view.Grid} source Owner grid\n         * @param {Core.data.Model[]} records The records that were copied\n         * @param {Boolean} isCut `true` if this is a cut action\n         * @param {String} entityName 'row' to distinguish this event from other copy events\n         */\n        client.trigger('copy', { records, isCut, entityName });\n    }\n\n    onRowCutOrCopy(record, isCut) {\n        this.client.rowManager.getRowById(record)?.toggleCls('b-cut-row', isCut);\n    }\n\n    /**\n     * Paste rows below selected or passed record\n     *\n     * @fires beforePaste\n     * @param {Core.data.Model} [record] Paste below this record, or currently selected record if left out\n     * @category Common\n     * @on-owner\n     */\n    pasteRows(record) {\n        const\n            me                     = this,\n            records                = me.clipboardRecords,\n            { client, entityName } = me, { store }       = client,\n            referenceRecord        = record || client.selectedRecord;\n\n        /**\n         * Fires on the owning Grid before a paste action is performed, return `false` to prevent the action\n         * @event beforePaste\n         * @preventable\n         * @on-owner\n         * @param {Grid.view.Grid} source Owner grid\n         * @param {Core.data.Model} referenceRecord The reference record, the clipboard records will be pasted below\n         * this record\n         * @param {Core.data.Model[]} records The records about to be pasted\n         * @param {Boolean} isCut `true` if this is a cut action\n         * @param {String} entityName 'row' to distinguish this event from other beforePaste events\n         */\n        if (client.readOnly || client.isTreeGrouped || !records.length ||\n            (store.tree && me._isCut && records.some(rec => rec.contains(referenceRecord, true))) || client.trigger('beforePaste', {\n            records, referenceRecord, isCut : me._isCut, entityName\n        }) === false) {\n            return [];\n        }\n\n        // sort selected to move records to make sure it will be added in correct order independent of how it was selected.\n        // Should be done with real records in the clipboard, after records are copied, all indexes will be changed\n        me.sortByIndex(records);\n\n        const\n            idMap            = {},\n            // We need to go over selected records, find all top level nodes and reassemble the tree\n            recordsToProcess = me.extractParents(records, idMap);\n\n        me.insertCopiedRecords(recordsToProcess, referenceRecord);\n\n        if (me._isCut) {\n            // reset clipboard\n            me.clearClipboard();\n        }\n        else {\n            client.selectedRecords = recordsToProcess;\n        }\n\n        /**\n         * Fires on the owning Grid after a paste action is performed.\n         * @event paste\n         * @on-owner\n         * @param {Grid.view.Grid} source Owner grid\n         * @param {Core.data.Model} referenceRecord The reference record, below which the records were pasted\n         * @param {Core.data.Model[]} records Pasted records\n         * @param {Core.data.Model[]} originalRecords For a copy action, these are the records that were copied.\n         * For cut action, this is same as the `records` param.\n         * @param {Boolean} isCut `true` if this is a cut action\n         * @param {String} entityName 'row' to distinguish this event from other paste events\n         */\n        client.trigger('paste', {\n            records         : recordsToProcess,\n            originalRecords : records,\n            isCut           : me._isCut,\n            referenceRecord,\n            entityName\n        });\n\n        // Focus first cell of last copied or cut row\n        client.getRowFor(recordsToProcess[recordsToProcess.length - 1])?.cells?.[0].focus();\n\n        return recordsToProcess;\n    }\n\n    /**\n     * Clears the clipboard and refreshes the UI\n     *\n     * @category Common\n     */\n    clearClipboard() {\n        if (this._isCut) {\n            this.clipboardRecords.forEach(rec => this.client.rowManager.getRowById(rec)?.removeCls('b-cut-row'));\n        }\n        this._isCut           = false;\n        this.clipboardRecords = [];\n    }\n\n    /**\n     * A method used to generate the name for a copy-pasted record. By defaults appends \"- 2\", \"- 3\" as a suffix. Override\n     * it to provide your own naming of pasted records.\n     *\n     * @param {Core.data.Model} record The new record being pasted\n     * @returns {String}\n     */\n    generateNewName(record) {\n        const originalName = record[this.nameField];\n\n        let counter = 2;\n\n        while (this.client.store.findRecord(this.nameField, `${originalName} - ${counter}`)) {\n            counter++;\n        }\n\n        return `${originalName} - ${counter}`;\n    }\n\n    insertCopiedRecords(toInsert, recordReference) {\n        const\n            { store } = this.client,\n            insertAt  = store.indexOf(recordReference) + 1;\n\n        if (store.tree) {\n            return recordReference.parent.insertChild(toInsert, recordReference.nextSibling, false, {\n                // Specify node to insert before in the ordered tree. It allows to paste to a\n                // correct place both ordered and visual.\n                // Covered by TaskOrderedWbs.t.js\n                orderedBeforeNode : recordReference.nextOrderedSibling\n            });\n        }\n        else if (this._isCut) {\n            store.move(toInsert, store.getAt(insertAt));\n        }\n        else {\n            return store.insert(insertAt, toInsert);\n        }\n    }\n\n    get selectedRecords() {\n        const records = [...this.client.selectedRecords];\n\n        // Add eventual selected cells records\n        this.client.selectedCells.forEach(cell => {\n            if (!records.includes(cell.record)) {\n                records.push(cell.record);\n            }\n        });\n\n        return records;\n    }\n\n    getMenuItemText(action, addRowSpecifier = false) {\n        const me = this;\n        let text = me[action + 'RecordText'];\n\n        // If cellCopyPaste is enabled and there is selected cells, add a row specifier text to menu options\n        if (addRowSpecifier) {\n            text += ` (${me.selectedRecords.length > 1 ? me.rowSpecifierTextPlural : me.rowSpecifierText})`;\n        }\n\n        return text;\n    }\n\n    populateCellMenu({ record, items, cellSelector }) {\n        const\n            me           = this,\n            {\n                client,\n                rowOptionsOnCellContextMenu\n            }            = me,\n            cellCopyPaste = client.features.cellCopyPaste?.enabled === true,\n            // If cellCopyPaste is active and contextmenu originates from a selected cell\n            targetIsCell = cellCopyPaste && client.isCellSelected(cellSelector);\n\n        if (!client.readOnly &&\n            !client.isTreeGrouped &&\n            record?.isSpecialRow === false &&\n            (cellCopyPaste ? client.selectedRows.length : client.selectedRecords.length) &&\n            (!targetIsCell || me.rowOptionsOnCellContextMenu)\n        ) {\n            items.cut = {\n                text        : me.getMenuItemText('cut', targetIsCell && rowOptionsOnCellContextMenu),\n                localeClass : me,\n                icon        : 'b-icon b-icon-cut',\n                weight      : 135,\n                disabled    : record.readOnly,\n                onItem      : () => me.cut()\n            };\n\n            items.copy = {\n                text        : me.getMenuItemText('copy', targetIsCell && rowOptionsOnCellContextMenu),\n                localeClass : me,\n                cls         : 'b-separator',\n                icon        : 'b-icon b-icon-copy',\n                weight      : 120,\n                onItem      : () => me.copy()\n            };\n\n            items.paste = {\n                text        : me.getMenuItemText('paste', targetIsCell && rowOptionsOnCellContextMenu),\n                localeClass : me,\n                icon        : 'b-icon b-icon-paste',\n                weight      : 140,\n                disabled    : !me.clipboardRecords.length,\n                onItem      : () => me.paste(record)\n            };\n        }\n    }\n\n    /**\n     * Sort array of records ASC by its indexes stored in indexPath\n     * @param {Core.data.Model[]} array array to sort\n     * @private\n     */\n    sortByIndex(array) {\n        const { store } = this.client;\n\n        return array.sort((rec1, rec2) => {\n            const\n                idx1 = rec1.indexPath,\n                idx2 = rec2.indexPath;\n\n            // When a record is copied without its parent, its index in the visible tree should be used\n            if (!array.includes(rec1.parent) && !array.includes(rec2.parent)) {\n                // For row copy-paste feature both records are normally in store. Unless someone wants\n                // to include invisible records. Which does not happen yet.\n                return store.indexOf(rec1) - store.indexOf(rec2);\n            }\n\n            if (idx1.length === idx2.length) {\n                for (let i = 0; i < idx1.length; i++) {\n                    if (idx1[i] < idx2[i]) {\n                        return -1;\n                    }\n                    if (idx1[i] > idx2[i]) {\n                        return 1;\n                    }\n                }\n                return 0;\n            }\n            else {\n                return idx1.length - idx2.length;\n            }\n        });\n    }\n\n    /**\n     * Iterates over passed pre-sorted list of records and reassembles hierarchy of records.\n     * @param {Core.data.Model[]} taskRecords array of records to extract parents from\n     * @param {Object} idMap Empty object which will contain map linking original id with copied record\n     * @returns {Core.data.Model[]} Returns array of new top-level nodes with children filled\n     * @private\n     */\n    extractParents(taskRecords, idMap) {\n        const\n            me                         = this,\n            { client, _isCut : isCut } = me;\n\n        // Unwrap children to pass them all through `generateNewName` function\n        if (client.store.tree) {\n            taskRecords.forEach(node => {\n                node.traverse(n => {\n                    const parents = n.getTopParent(true);\n                    if (!taskRecords.includes(n) && (!isCut || !taskRecords.some(rec => parents.includes(rec)))) {\n                        taskRecords.push(n);\n                    }\n                });\n            });\n        }\n\n        const result = taskRecords.reduce((parents, node) => {\n            let copy;\n            // Fallback is for when the node was removed from the tree\n            const parentId = node.parentId || node.meta.modified;\n\n            if (isCut) {\n                copy = node;\n\n                // reset record cut state\n                copy.meta.isCut = false;\n            }\n            else {\n                copy               = node.copy();\n                copy[me.nameField] = me.generateNewName(copy);\n\n                // Ensure initial expanded state in new node matches state that the client's\n                // store has for source node.\n                copy.data.expanded = node.isExpanded(client.store);\n            }\n\n            idMap[node.id] = copy;\n\n            // If we're copying top level node, add it directly\n            if (node.parent === client.store.rootNode) {\n                parents.push(copy);\n            }\n            // If node parent is also copied, append copy to the copied parent. Parents\n            // are always at the beginning of the array, so we know if there is a parent\n            // it was already copied\n            else if (parentId in idMap) {\n                idMap[parentId].appendChild(copy, true); // Silent to not cause redraws\n            }\n            // If parent is not copied and record is not top level, then append it as a\n            // sibling.\n            else {\n                parents.push(copy);\n            }\n            return parents;\n        }, []);\n\n        // Now when tree is assembled we want to restore ordered tree. Traverse the tree, sort children\n        // by previous value of `orderedParentIndex`\n        result.forEach(parent => {\n            parent.sortOrderedChildren(true, true);\n        });\n\n        return result;\n    }\n\n}\n\nRowCopyPaste.featureClass = 'b-row-copypaste';\n\nGridFeatureManager.registerFeature(RowCopyPaste, true, 'Grid');\nGridFeatureManager.registerFeature(RowCopyPaste, false, 'Gantt');\nGridFeatureManager.registerFeature(RowCopyPaste, false, 'SchedulerPro');\nGridFeatureManager.registerFeature(RowCopyPaste, false, 'ResourceHistogram');\n","//region Import\n\nimport GridBase from './GridBase.js';\n\n// import default features (might be able to skip this when draft on dynamic import is implemented)\nimport '../feature/CellEdit.js';\nimport '../feature/CellMenu.js';\nimport '../feature/ColumnAutoWidth.js';\nimport '../feature/ColumnDragToolbar.js';\nimport '../feature/ColumnPicker.js';\nimport '../feature/ColumnReorder.js';\nimport '../feature/ColumnResize.js';\nimport '../feature/Filter.js';\nimport '../feature/FilterBar.js';\nimport '../feature/Group.js';\nimport '../feature/HeaderMenu.js';\nimport '../feature/RowCopyPaste.js';\nimport '../feature/Sort.js';\nimport '../feature/Stripe.js';\n\n// To enable using checkbox selection mode, moved here to not be dragged into GridBase automatically\nimport '../column/CheckColumn.js';\n\n//endregion\n\n/**\n * @module Grid/view/Grid\n */\n\n/**\n * The Grid component is a very powerful and performant UI component that shows tabular data (or tree data using the\n * {@link Grid.view.TreeGrid}).\n *\n * <h2>Intro</h2>\n * The Grid widget has a wide range of features and a large API to allow users to work with data efficiently in the\n * browser. The two most important configs are {@link #config-store} and {@link #config-columns}. With the store config,\n * you decide which data to load into the grid. You can work with both in-memory arrays or load data using ajax. See the\n * {@link Core.data.Store} class to learn more about loading data into stores.\n *\n * The columns config accepts an array of {@link Grid.column.Column Column} descriptors defining which fields that will\n * be displayed in the grid. The {@link Grid.column.Column#config-field} property in the column descriptor maps to a\n * field in your dataset. The simplest grid configured with inline data and two columns would look like this:\n *\n * {@frameworktabs}\n * {@js}\n *\n *  ```javascript\n *  const grid = new Grid({\n *       appendTo : document.body,\n *\n *       columns: [\n *           { field: 'name', text: 'Name' },\n *           { field: 'job', text: 'Job', renderer: ({value}) => value || 'Unemployed' }\n *       ],\n *\n *       data: [\n *           { name: 'Bill', job: 'Retired' },\n *           { name: 'Elon', job: 'Visionary' },\n *           { name: 'Me' }\n *       ]\n * });\n * ```\n *\n * {@endjs}\n * {@react}\n *\n * ```jsx\n * const App = props => {\n *     const [columns, setColumns] = useState([\n *          { field: 'name', text: 'Name' },\n *          { field: 'job', text: 'Job', renderer: ({value}) => value || 'Unemployed' }\n *     ]);\n *\n *     const [data, setData] = useState([\n *          { name: 'Bill', job: 'Retired' },\n *          { name: 'Elon', job: 'Visionary' },\n *          { name: 'Me' }\n *     ]);\n *\n *     return <BryntumGrid column={columns} data={data} />\n * }\n * ```\n *\n * {@endreact}\n * {@vue}\n *\n *  ```html\n * <bryntum-grid :columns=\"columns\" :data=\"data\" />\n * ```\n *\n * ```javascript\n * export default {\n *    setup() {\n *      return {\n *        columns : [\n *          { field: 'name', text: 'Name' },\n *          { field: 'job', text: 'Job', renderer: ({value}) => value || 'Unemployed' }\n *        ]\n *        data : reactive([\n *          { name: 'Bill', job: 'Retired' },\n *          { name: 'Elon', job: 'Visionary' },\n *          { name: 'Me' }\n *        ])\n *      };\n *    }\n * }\n * ```\n *\n * {@endvue}\n * {@angular}\n * ```html\n * <bryntum-grid [columns]=\"columns\" [data]=\"data\"></bryntum-grid>\n * ```\n *\n * ```typescript\n * export class AppComponent {\n *      columns = [\n *          { field: 'name', text: 'Name' },\n *          { field: 'job', text: 'Job', renderer: ({value}) => value || 'Unemployed' }\n *      ]\n *\n *      data = [\n *          { name: 'Bill', job: 'Retired' },\n *          { name: 'Elon', job: 'Visionary' },\n *          { name: 'Me' }\n *      ]\n *  }\n * ```\n *\n * {@endangular}\n * {@endframeworktabs}\n *\n * {@inlineexample Grid/view/Grid.js}\n *\n * <h2>Features</h2>\n * To avoid the Grid core being bloated, its main features are implemented in separate `feature` classes. These can be\n * turned on and off based on your requirements. To configure (or disable) a feature, use the {@link #config-features}\n * object to provide your desired configuration for the features you want to use. Each feature has an ยดidยด that you use\n * as a key in the features object:\n *\n * ```javascript\n * const grid = new Grid({\n *     features : {\n *         cellEdit     : false,\n *         regionResize : true,\n *         cellTooltip  : {\n *             tooltipRenderer : (data) => {\n *             }\n *         },\n *         ...\n *     }\n * });\n * ```\n *\n * {@region Column configuration options}\n * A grid contains a number of columns that control how your data is rendered. The simplest option is to simply point a\n * Column to a field in your dataset, or define a custom {@link Grid.column.Column#config-renderer}. The renderer\n * function receives one object parameter containing rendering data for the current cell being rendered.\n *\n * ```javascript\n * const grid = new Grid({\n *     columns: [\n *         {\n *             field: 'task',\n *             text: 'Task',\n *             renderer(renderData) {\n *                 const record = renderData.record;\n *\n *                 if (record.percentDone === 100) {\n *                     renderData.cellElement.classList.add('taskDone');\n *                     renderData.cellElement.style.background = 'green';\n *                 }\n *\n *                 return renderData.value;\n *             }\n *         }\n *     ]\n * });\n * ```\n *\n * {@endregion}\n * {@region Grid sections (aka \"locked\" or \"frozen\" columns)}\n * The grid can be divided horizontally into individually scrollable sections. This is great if you have lots of columns\n * that don't fit the available width of the screen. To enable this feature, simply mark the columns you want to `lock`.\n * Locked columns are then displayed in their own section to the left of the other columns:\n *\n * ```javascript\n * const grid = new Grid({\n *     width    : 500,\n *     subGridConfigs : {\n *         // set a fixed locked section width if desired\n *         locked : { width: 300 }\n *     },\n *     columns : [\n *         { field : 'name', text : 'Name', width : 200, locked : true },\n *         { field : 'firstName', text : 'First name', width : 100, locked : true },\n *         { field : 'surName', text : 'Last name', width : 100, locked : true },\n *         { field : 'city', text : 'City', width : 100 },\n *         { type : 'number', field : 'age', text : 'Age', width : 200 },\n *         { field : 'food', text : 'Food', width : 200 }\n *     ]\n * });\n * ```\n *\n * {@inlineexample Grid/view/LockedGrid.js}\n * You can also move columns between sections by using drag and drop, or use the built-in header context menu. If you\n * want to be able to resize the locked grid section, enable the {@link Grid.feature.RegionResize} feature.\n * {@endregion}\n * {@region Filtering}\n * One important requirement of a good Grid component is the ability to filter large datasets to quickly find what you\n * are looking for. To enable filtering (through the context menu), add the {@link Grid.feature.Filter} feature:\n *\n * ```javascript\n * const grid = new Grid({\n *     features: {\n *         filter: true\n *     }\n * });\n * ```\n *\n * Or activate a default filter at initial rendering:\n *\n * ```javascript\n * const grid = new Grid({\n *     features: {\n *         filter: { property : 'city', value : 'New York' }\n *     }\n * });\n * ```\n *\n * {@inlineexample Grid/feature/Filter.js}\n * {@endregion}\n * {@region Tooltips}\n * If you have a data models with many fields, and you want to show\n * additional data when hovering over a cell, use the {@link Grid.feature.CellTooltip} feature. To show a\n * tooltip for all cells:\n *\n * ```javascript\n * const grid = new Grid({\n *     features: {\n *         cellTooltip: ({value}) => value\n *     }\n * });\n * ```\n *\n * {@inlineexample Grid/feature/CellTooltip.js}\n * {@endregion}\n * {@region Inline Editing (default <strong>on</strong>)}\n * To enable inline cell editing in the grid, simply add the {@link Grid.feature.CellEdit} feature:\n *\n * ```javascript\n * const grid = new Grid({\n *     features : {\n *         cellEdit : true\n *     },\n *     columns: [\n *         {\n *             field: 'task',\n *             text: 'Task'\n *         }\n *     ]\n * });\n * ```\n *\n * {@inlineexample Grid/feature/CellEdit.js}\n * {@endregion}\n * {@region Context Menu}\n * Use {@link Grid.feature.CellMenu} and {@link Grid.feature.HeaderMenu} features if you want your users to be able to\n * interact with the data through the context menu:\n *\n * ```javascript\n * const grid = new Grid({\n *     features : {\n *         headerMenu : {\n *             items : {\n *                 showInfo : {\n *                     text   : 'Show info',\n *                     icon   : 'fa fa-info-circle',\n *                     weight : 200,\n *                     onItem : ({ item }) => console.log(item.text)\n *                 }\n *             }\n *         },\n *         cellMenu :  {\n *             items : {\n *                 showOptions : {\n *                     text   : 'Show options',\n *                     icon   : 'fa fa-gear',\n *                     weight : 200\n *                 }\n *             }\n *         }\n *     }\n * });\n * ```\n *\n * {@inlineexample Grid/feature/CellMenu.js}\n * {@endregion}\n * {@region Grouping}\n * To group rows by a field in your dataset, use the {@link Grid.feature.Group} feature.\n * {@inlineexample Grid/feature/Group.js}\n * {@endregion}\n * {@region Searching}\n * When working with lots of data, a quick alternative to filtering is the {@link Grid.feature.Search} feature.\n * It highlights matching values in the grid as you type.\n * {@inlineexample Grid/feature/Search2.js}\n * {@endregion}\n * {@region Loading and saving data}\n * The grid keeps all its data in a {@link Core.data.Store}, which is essentially an Array of {@link Core.data.Model}\n * items. You define your own Model representing your data entities and use the Model API to get and set values.\n *\n * ```javascript\n * class Person extends Model {}\n *\n * const person = new Person({\n *     name: 'Steve',\n *     age: 38\n * });\n *\n * person.name = 'Linda'; // person object is now `dirty`\n *\n * const store = new Store({\n *     data : [\n *         { name : 'Don', age : 40 }\n *     ]\n * });\n *\n * store.add(person);\n *\n * console.log(store.count()); // === 2\n *\n * store.remove(person); // Remove from store\n * ```\n *\n * When you update a record in a store, it's considered dirty, until you call {@link Core.data.mixin.StoreCRUD#function-commit}\n * on the containing Store. You can also configure your Store to commit automatically (like Google docs). If you use an\n * AjaxStore, it will send changes to your server when commit is called.\n *\n * Any changes you make to the Store or its records are immediately reflected in the Grid, so there is no need to tell\n * it to refresh manually.\n *\n * To create a custom load mask, subscribe to the grid's store events and {@link Core.widget.Widget#config-masked mask}\n * on {@link Core.data.AjaxStore#event-beforeRequest} and unmask on {@link Core.data.AjaxStore#event-afterRequest}. The\n * mask can also be used to display error messages if an {@link Core.data.AjaxStore#event-exception} occurs.\n *\n * ```javascript\n *  const grid = new Grid({\n *      loadMask : null\n *  });\n *\n *  grid.store.on({\n *      beforeRequest() {\n *          grid.masked = {\n *              text : 'Data is loading...'\n *          };\n *      },\n *      afterRequest() {\n *          grid.masked = null;\n *      },\n *      exception({ response }) {\n *          grid.masked.error = response.message || 'Load failed';\n *      }\n *  });\n *\n *  store.load();\n * ```\n *\n * To learn more about loading and saving data, please refer to [this guide](#Grid/guides/data/displayingdata.md).\n * {@endregion}\n * {@region Default configs}\n * There is a myriad of configs and features available for Grid, some of them on by default and some of them requiring\n * extra configuration. The code below tries to illustrate the major things that are used by default:\n *\n * ```javascript\n * const grid = new Grid({\n *    // The following features are enabled by default:\n *    features : {\n *        cellEdit      : true,\n *        columnPicker  : true,\n *        columnReorder : true,\n *        columnResize  : true,\n *        cellMenu      : true,\n *        headerMenu    : true,\n *        group         : true,\n *        rowCopyPaste  : true, // Allow using [Ctrl/CMD + C/X] and [Ctrl/CMD + V] to copy/cut and paste rows\n *        sort          : true\n *    },\n *\n *    animateRemovingRows       : true,  // Rows will slide out on removal\n *    autoHeight                : false, // Grid needs to have a height supplied through CSS (strongly recommended) or by specifying `height`\n *    columnLines               : true,  // Themes might override it to hide lines anyway\n *    emptyText                 : 'No rows to display',\n *    enableTextSelection       : false, // Not allowed to select text in cells by default,\n *    fillLastColumn            : true,  // By default the last column is stretched to fill the grid\n *    fullRowRefresh            : true,  // Refreshes entire row when a cell value changes\n *    loadMask                  : 'Loading...',\n *    resizeToFitIncludesHeader : true,  // Also measure header when auto resizing columns\n *    responsiveLevels : {\n *      small : 400,\n *      medium : 600,\n *      large : '*'\n *    },\n *    rowHeight                  : null,  // Determined using CSS, it will measure rowHeight\n *    showDirty                  : false, // No indicator for changed cells\n * });\n * ```\n *\n * {@endregion}\n * {@region Keyboard shortcuts}\n * Grid has the following default keyboard shortcuts:\n * <div class=\"compact\">\n *\n * | Keys                 | Action                 | Weight ยน | Action description                                                                                 |\n * |----------------------|------------------------|:--------:|----------------------------------------------------------------------------------------------------|\n * | `ArrowUp`            | *navigateUp*           | 10       | Focuses the cell above currently focused cell.                                                     |\n * | `ArrowRight`         | *navigateRight*        | 10       | Focuses the cell to the right of currently focused cell                                            |\n * | `ArrowDown`          | *navigateDown*         | 10       | Focuses the cell below currently focused cell                                                      |\n * | `ArrowLeft`          | *navigateLeft*         | 10       | Focuses the cell to the left of currently focused cell                                             |\n * | `Shift`+`ArrowUp`    | *extendSelectionUp*    |          | Extends the selection one row up from currently focused cell                                       |\n * | `Shift`+`ArrowRight` | *extendSelectionRight* |          | Extends the selection one column to the right from currently focused cell                          |\n * | `Shift`+`ArrowDown`  | *extendSelectionDown*  |          | Extends the selection one row down from currently focused cell                                     |\n * | `Shift`+`ArrowLeft`  | *extendSelectionLeft*  |          | Extends the selection one column to the left from currently focused cell                           |\n * | `Space`              | *toggleSelection*      | 10       | Toggles selection of currently focused cell if selectionMode.selectOnKeyboardNavigation is `false` |\n * | `Ctrl`+`Home`        | *navigateFirstCell*    |          | Focuses the first cell at the first row (including header)                                         |\n * | `Home`               | *navigateFirstColumn*  |          | Focuses the first cell of current focused row                                                      |\n * | `Ctrl`+`End`         | *navigateLastCell*     |          | Focuses the last cell of the last row                                                              |\n * | `End`                | *navigateLastColumn*   |          | Focuses the last cell of current focused row                                                       |\n * | `PageUp`             | *navigatePrevPage*     |          | Displays previous page                                                                             |\n * | `PageDown`           | *navigateNextPage*     |          | Displays next page                                                                                 |\n * | `Enter`              | *activateHeader*       |          | Equals to a header click                                                                           |\n * | `Space`              | *clickCellByKey*       | 1000     | Equals to a cell click                                                                             |\n * | `Ctrl`+`Z`           | *undoRedoKeyPress*     |          | Undo/redo (when using {@link Core.data.stm.StateTrackingManager})                                  |\n * | `Ctrl`+`Shift`+`Z`   | *undoRedoKeyPress*     |          | Undo/redo (when using {@link Core.data.stm.StateTrackingManager})                                  |\n *\n * **ยน** Customization of keyboard shortcuts that has a `weight` can affect other features that also uses that\n * particular keyboard shortcut. Read more in [our guide](#Grid/guides/customization/keymap.md).\n *\n *</div>\n *\n * <div class=\"note\" style=\"font-size: 0.9em\">Please note that <code>Ctrl</code> is the equivalent to <code>Command</code> and <code>Alt</code>\n * is the equivalent to <code>Option</code> for Mac users</div>\n *\n * The following Grid features has their own keyboard shortcuts. Follow the links for details.\n * * {@link Grid.feature.CellCopyPaste#keyboard-shortcuts CellCopyPaste}\n * * {@link Grid.feature.CellEdit#keyboard-shortcuts CellEdit}\n * * {@link Grid.feature.CellMenu#keyboard-shortcuts CellMenu}\n * * {@link Grid.feature.ColumnRename#keyboard-shortcuts ColumnRename}\n * * {@link Grid.feature.Filter#keyboard-shortcuts Filter}\n * * {@link Grid.feature.Group#keyboard-shortcuts Group}\n * * {@link Grid.feature.HeaderMenu#keyboard-shortcuts HeaderMenu}\n * * {@link Grid.feature.QuickFind#keyboard-shortcuts QuickFind}\n * * {@link Grid.feature.RowCopyPaste#keyboard-shortcuts RowCopyPaste}\n * * {@link Grid.feature.Search#keyboard-shortcuts Search}\n * * {@link Grid.feature.Tree#keyboard-shortcuts Tree}\n *\n * For more information on how to customize keyboard shortcuts, please see\n * [our guide](#Grid/guides/customization/keymap.md)\n *\n * {@endregion}\n * {@region Performance}\n * In general the Grid widget has very good performance and you can try loading any amount of data in the\n * <a target=\"_blank\" href=\"../examples/bigdataset/\">bigdataset</a> demo.\n * The overall rendering performance is naturally affected by many other things than the data volume. Other important\n * factors that can impact performance: number of columns, complex cell renderers, locked columns, the number of\n * features enabled and of course the browser (Chrome fastest).\n * {@endregion}\n * {@region Accessibility}\n * As far as possible, the grid is accessible to WAI-ARIA standards. Every cell, including column header cells is\n * visitable. The arrow keys navigate, and if a cell contains focusable content, navigating to that cell focuses the\n * content. `Escape` will exit from that and focus the encapsulating cell.\n *\n * When tabbing back into a grid that has previously been entered, focus moves to the last focused cell.\n *\n * The column menu is invoked using the `Space` key when focused on a column header.\n *\n * The cell menu is invoked using the `Space` key when focused on a data cell.\n * {@endregion}\n *\n * @extends Grid/view/GridBase\n * @classType grid\n * @widget\n */\nexport default class Grid extends GridBase {\n    static get $name() {\n        return 'Grid';\n    }\n\n    // Factoryable type name\n    static get type() {\n        return 'grid';\n    }\n}\n\n// Register this widget type with its Factory\nGrid.initClass();\n"],"names":["storeListenerName","ColumnAutoWidth","Delayable","InstancePlugin","$name","configurable","default","delay","pluginConfig","after","bindStore","unbindStore","renderRows","onInternalResize","assign","construct","config","store","client","doDestroy","lastSync","ion","name","asyncEventSuffix","thisObj","detachListeners","columnAutoWidthPending","hasTimeout","onStoreChange","action","me","cellEdit","features","storeGeneration","isEditing","editingStoppedByTapOutside","syncAutoWidthColumns","setTimeout","element","newWidth","newHeight","oldWidth","grid","autoWidth","resizingColumns","column","columns","visibleColumns","resizeToFitContent","afterColumnsResized","clearTimeout","prototype","_$name","GridFeatureManager","registerFeature","RowCopyPaste","type","chain","clipboardRecords","nameField","keyMap","weight","handler","copyRecordText","cutRecordText","pasteRecordText","rowSpecifierText","rowSpecifierTextPlural","localizableProperties","rowOptionsOnCellContextMenu","rowManager","beforeRenderRow","entityName","onBeforeRenderRow","row","record","cls","_isCut","includes","isActionAvailable","event","_grid$selectedRecords","target","disabled","globalThis","getSelection","toString","length","selectedRecords","Boolean","closest","copy","copyRows","cut","paste","referenceRecord","pasteRows","isModel","isCut","records","filter","r","readOnly","trigger","forEach","rec","_client$rowManager$ge","getRowById","removeCls","slice","meta","onRowCutOrCopy","_this$client$rowManag","toggleCls","_client$getRowFor","_client$getRowFor$cel","selectedRecord","isTreeGrouped","tree","some","contains","sortByIndex","idMap","recordsToProcess","extractParents","insertCopiedRecords","clearClipboard","originalRecords","getRowFor","cells","focus","_this$client$rowManag2","generateNewName","originalName","counter","findRecord","toInsert","recordReference","insertAt","indexOf","parent","insertChild","nextSibling","orderedBeforeNode","nextOrderedSibling","move","getAt","insert","selectedCells","cell","push","getMenuItemText","addRowSpecifier","text","populateCellMenu","items","cellSelector","_client$features$cell","cellCopyPaste","enabled","targetIsCell","isCellSelected","isSpecialRow","selectedRows","localeClass","icon","onItem","array","sort","rec1","rec2","idx1","indexPath","idx2","i","taskRecords","node","traverse","n","parents","getTopParent","result","reduce","parentId","modified","data","expanded","isExpanded","id","rootNode","appendChild","sortOrderedChildren","featureClass","Grid","GridBase","initClass"],"mappings":"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"}