{"version":3,"file":"TreeGroup.js","sources":["../../../../Grid/lib/Grid/feature/RowReorder.js","../../../../Grid/lib/Grid/feature/TreeGroup.js"],"sourcesContent":["/**\n * @module Grid/feature/RowReorder\n */\n\nimport GridFeatureManager from './GridFeatureManager.js';\nimport DragHelper from '../../Core/helper/DragHelper.js';\nimport InstancePlugin from '../../Core/mixin/InstancePlugin.js';\nimport DomHelper from '../../Core/helper/DomHelper.js';\nimport Delayable from '../../Core/mixin/Delayable.js';\nimport Rectangle from '../../Core/helper/util/Rectangle.js';\n\n/**\n * Object with information about a tree position\n * @typedef {Object} RecordPositionContext\n * @property {Core.data.Model} record Tree node\n * @property {Number} parentIndex Index among parents children\n * @property {String|Number} parentId Parent node's id\n */\n\n/**\n * Allows user to reorder rows by dragging them. To get notified about row reorder listen to `change` event\n * on the grid {@link Core.data.Store store}.\n *\n * This feature is **off** by default. For info on enabling it, see {@link Grid.view.mixin.GridFeatures}.\n * This feature is **enabled** by default for Gantt.\n *\n * {@inlineexample Grid/feature/RowReorder.js}\n *\n * If the grid is set to {@link Grid.view.Grid#config-readOnly}, reordering is disabled. Inside all event listeners you\n * have access a `context` object which has a `record` property (the dragged record).\n *\n * ## Validation\n * You can validate the drag drop flow by listening to the `gridrowdrag` event. Inside this listener you have access to\n * the `index` property which is the target drop position. For trees you get access to the `parent` record and `index`,\n * where index means the child index inside the parent.\n *\n * You can also have an async finalization step using the {@link #event-gridRowBeforeDropFinalize}, for showing a\n * confirmation dialog or making a network request to decide if drag operation is valid (see code snippet below)\n *\n * ```javascript\n * features : {\n *     rowReorder : {\n *         showGrip : true\n *     },\n *     listeners : {\n *        gridRowDrag : ({ context }) => {\n *           // Here you have access to context.insertBefore, and additionally context.parent for trees\n *        },\n *\n *        gridRowBeforeDropFinalize : async ({ context }) => {\n *           const result = await MessageDialog.confirm({\n *               title   : 'Please confirm',\n *               message : 'Did you want the row here?'\n *           });\n *\n *           // true to accept the drop or false to reject\n *           return result === MessageDialog.yesButton;\n *        }\n *    }\n * }\n * ```\n *\n * Note, that this feature uses the concept of \"insert before\" when choosing a drop point in the data. So the dropped\n * record's position is *before the visual next record's position*.\n *\n * This may look like a pointless distinction, but consider the case when a Store is filtered. The record *above* the\n * drop point may have several filtered out records below it. When unfiltered, the dropped record will be *below* these\n * because of the \"insert before\" behaviour.\n *\n * ## Behavior with multiple subgrids\n *\n * For grids with multiple subgrids, row reordering is only enabled for the first subgrid.\n *\n * NOTE: This feature cannot be used simultaneously with the `enableTextSelection` config.\n *\n * @extends Core/mixin/InstancePlugin\n * @demo Grid/rowreordering\n * @classtype rowReorder\n * @feature\n */\nexport default class RowReorder extends Delayable(InstancePlugin) {\n    //region Events\n    /**\n     * Fired before dragging starts, return false to prevent the drag operation.\n     * @preventable\n     * @event gridRowBeforeDragStart\n     * @param {Core.helper.DragHelper} source\n     * @param {Object} context\n     * @param {Core.data.Model[]} context.records The dragged row records\n     * @param {MouseEvent|TouchEvent} event\n     * @on-owner\n     */\n\n    /**\n     * Fired when dragging starts.\n     * @event gridRowDragStart\n     * @param {Core.helper.DragHelper} source\n     * @param {Object} context\n     * @param {Core.data.Model[]} context.records The dragged row records\n     * @param {MouseEvent|TouchEvent} event\n     * @on-owner\n     */\n\n    /**\n     * Fired while the row is being dragged, in the listener function you have access to `context.insertBefore` a grid /\n     * tree record, and additionally `context.parent` (a TreeNode) for trees. You can signal that the drop position is\n     * valid or invalid by setting `context.valid = false;`\n     * @event gridRowDrag\n     * @param {Core.helper.DragHelper} source\n     * @param {Object} context\n     * @param {Boolean} context.valid Set this to true or false to indicate whether the drop position is valid.\n     * @param {Core.data.Model} context.insertBefore The record to insert before (`null` if inserting at last position of a parent node)\n     * @param {Core.data.Model} context.parent The parent record of the current drop position (only applicable for trees)\n     * @param {Core.data.Model[]} context.records The dragged row records\n     * @param {MouseEvent} event\n     * @on-owner\n     */\n\n    /**\n     * Fired before the row drop operation is finalized. You can return false to abort the drop operation, or a\n     * Promise yielding `true` / `false` which allows for asynchronous abort (e.g. first show user a confirmation dialog).\n     * @event gridRowBeforeDropFinalize\n     * @preventable\n     * @async\n     * @param {Core.helper.DragHelper} source\n     * @param {Object} context\n     * @param {Boolean} context.valid Set this to true or false to indicate whether the drop position is valid\n     * @param {Core.data.Model} context.insertBefore The record to insert before (`null` if inserting at last position of a parent node)\n     * @param {Core.data.Model} context.parent The parent record of the current drop position (only applicable for trees)\n     * @param {Core.data.Model[]} context.records The dragged row records\n     * @param {RecordPositionContext[]} context.oldPositionContext An array of objects with information about the previous tree position.\n     * Objects contain the `record`, and its original `parentIndex` and `parentId` values\n     * @param {MouseEvent} event\n     * @on-owner\n     */\n\n    /**\n     * Fired after the row drop operation has completed, regardless of validity\n     * @event gridRowDrop\n     * @param {Core.helper.DragHelper} source\n     * @param {Object} context\n     * @param {Boolean} context.valid true or false depending on whether the drop position was valid\n     * @param {Core.data.Model} context.insertBefore The record to insert before (`null` if inserting at last position of a parent node)\n     * @param {Core.data.Model} context.parent The parent record of the current drop position (only applicable for trees)\n     * @param {Core.data.Model} context.record [DEPRECATED] The dragged row record\n     * @param {Core.data.Model[]} context.records The dragged row records\n     * @param {RecordPositionContext[]} context.oldPositionContext An array of objects with information about the previous tree position.\n     * Objects contain the record, and its original `parentIndex` and `parentId` values\n     * @param {MouseEvent} event\n     * @on-owner\n     */\n\n    /**\n     * Fired when a row drag operation is aborted\n     * @event gridRowAbort\n     * @param {Core.helper.DragHelper} source\n     * @param {Object} context\n     * @param {MouseEvent} event\n     * @on-owner\n     */\n\n    static get deprecatedEvents() {\n        return {\n            gridRowBeforeDragStart : {\n                product            : 'Grid',\n                invalidAsOfVersion : '6.0.0',\n                message            : '`gridRowBeforeDragStart` event is deprecated, listen on this event on the Grid instead.'\n            },\n            gridRowDragStart : {\n                product            : 'Grid',\n                invalidAsOfVersion : '6.0.0',\n                message            : '`gridRowDragStart` event is deprecated, listen on this event on the Grid instead.'\n            },\n            gridRowDrag : {\n                product            : 'Grid',\n                invalidAsOfVersion : '6.0.0',\n                message            : '`gridRowDrag` event is deprecated, listen on this event on the Grid instead.'\n            },\n            gridRowBeforeDropFinalize : {\n                product            : 'Grid',\n                invalidAsOfVersion : '6.0.0',\n                message            : '`gridRowBeforeDropFinalize` event is deprecated, listen on this event on the Grid instead.'\n            },\n            gridRowDrop : {\n                product            : 'Grid',\n                invalidAsOfVersion : '6.0.0',\n                message            : '`gridRowDrop` event is deprecated, listen on this event on the Grid instead.'\n            },\n            gridRowAbort : {\n                product            : 'Grid',\n                invalidAsOfVersion : '6.0.0',\n                message            : '`gridRowAbort` event is deprecated, listen on this event on the Grid instead.'\n            }\n        };\n    }\n    //endregion\n\n    //region Init\n\n    static $name = 'RowReorder';\n\n    static configurable = {\n        /**\n         * Set to `true` to show a grip icon on the left side of each row.\n         * @config {Boolean}\n         */\n        showGrip : null,\n\n        /**\n         * Set to `true` to only allow reordering by the {@link #config-showGrip} config\n         * @config {Boolean}\n         */\n        gripOnly : null,\n\n        /**\n         * If hovering over a parent node for this period of a time in a tree, the node will expand\n         * @config {Number}\n         */\n        hoverExpandTimeout : 1000,\n\n        /**\n         * The amount of milliseconds to wait after a touchstart, before a drag gesture will be allowed to start.\n         * @config {Number}\n         * @default\n         */\n        touchStartDelay : 300,\n\n        /**\n         * Enables creation of parents by dragging a row and dropping it onto a leaf row. Only works in a Grid with\n         * a tree store.\n         * @config {Boolean}\n         */\n        dropOnLeaf : false,\n\n        /**\n         * An object used to configure the internal {@link Core.helper.DragHelper} class\n         * @config {DragHelperConfig}\n         */\n        dragHelperConfig : null\n    };\n\n    construct(grid, config) {\n        this.grid = grid;\n\n        super.construct(...arguments);\n    }\n\n    doDestroy() {\n        this.dragHelper?.destroy();\n\n        super.doDestroy();\n    }\n\n    /**\n     * Initialize drag & drop (called on first paint)\n     * @private\n     */\n    init() {\n        const\n            me       = this,\n            { grid } = me;\n\n        me.dragHelper = DragHelper.new({\n            name               : 'rowReorder',\n            cloneTarget        : true,\n            dragThreshold      : 10,\n            proxyTopOffset     : 10,\n            targetSelector     : '.b-grid-row',\n            lockX              : true,\n            dragWithin         : grid.bodyContainer,\n            allowDropOutside   : true,\n            scrollManager      : grid.scrollManager,\n            outerElement       : me.targetSubGridElement,\n            touchStartDelay    : me.touchStartDelay,\n            isElementDraggable : me.isElementDraggable.bind(me),\n            monitoringConfig   : {\n                scrollables : [\n                    {\n                        element   : grid.scrollable.element,\n                        direction : 'vertical'\n                    }\n                ]\n            },\n            setXY(element, x, y) {\n                const { context } = this;\n\n                if (!context.started) {\n                    const\n                        elementRect       = Rectangle.from(context.element, this.dragWithin),\n                        pointerDownOffset = context.startPageY - globalThis.pageYOffset - context.element.getBoundingClientRect().top;\n\n                    // manually position the row a bit below the cursor\n                    y = elementRect.top + pointerDownOffset + this.proxyTopOffset;\n                }\n                DomHelper.setTranslateXY(element, x, y);\n            },\n            // Since parent nodes can expand after hovering, meaning original drag start position now refers to a different point in the tree\n            ignoreSamePositionDrop : false,\n            createProxy(element) {\n                const\n                    clone     = element.cloneNode(true),\n                    container = document.createElement('div');\n\n                container.classList.add('b-row-reorder-proxy');\n\n                clone.removeAttribute('id');\n                // The containing element will be positioned instead, and sized using CSS\n                clone.style.transform = '';\n                clone.style.width = '';\n\n                container.appendChild(clone);\n\n                if (grid.selectedRecords.length > 1) {\n                    const clone2 = clone.cloneNode(true);\n\n                    clone2.classList.add('b-row-dragging-multiple');\n\n                    container.appendChild(clone2);\n                }\n\n                DomHelper.removeClsGlobally(container, 'b-selected', 'b-hover', 'b-focused');\n\n                return container;\n            },\n\n            internalListeners : {\n                beforedragstart : 'onBeforeDragStart',\n                dragstart       : 'onDragStart',\n                drag            : 'onDrag',\n                drop            : 'onDrop',\n                reset           : 'onReset',\n                prio            : 10000, // To ensure our listener is run before the relayed listeners (for the outside world)\n                thisObj         : me\n            }\n        }, me.dragHelperConfig);\n\n        // Remove in 6.0\n        me.relayEvents(me.dragHelper, ['beforeDragStart', 'dragStart', 'drag', 'abort'], 'gridRow');\n\n        grid.relayEvents(me.dragHelper, ['beforeDragStart', 'dragStart', 'drag', 'abort'], 'gridRow');\n\n        me.dropIndicator = DomHelper.createElement({\n            className : 'b-row-drop-indicator'\n        });\n\n        me.dropOverTargetCls = ['b-row-reordering-target', 'b-hover'];\n    }\n\n    //endregion\n\n    //region Plugin config\n\n    static pluginConfig = {\n        after : ['onPaint']\n    };\n\n    get targetSubGridElement() {\n        const targetSubGrid = this.grid.regions[0];\n\n        return this.grid.subGrids[targetSubGrid].element;\n    }\n\n    //endregion\n\n    //region Events (drop)\n\n    isElementDraggable(el, event) {\n        if (!el.closest('.b-grid-cell .b-widget')) {\n            if (this.gripOnly) {\n                const firstCell = el.closest('.b-grid-cell:first-child');\n\n                // Event is in the first cell. Now check if it's on the handle\n                if (firstCell) {\n                    const\n                        gripperStyle = getComputedStyle(firstCell, ':before'),\n                        offsetX      = this.grid.rtl ? firstCell.getBoundingClientRect().width - event.borderOffsetX : event.borderOffsetX,\n                        onGrip       = DomHelper.roundPx(offsetX) <= DomHelper.roundPx(parseFloat(gripperStyle.width));\n\n                    // Prevent drag select if mousedown on grip, would collide with reordering\n                    // (reset by GridSelection)\n                    if (onGrip) {\n                        this.client.preventDragSelect = true;\n                    }\n\n                    return onGrip;\n                }\n            }\n            else {\n                return true;\n            }\n        }\n    }\n\n    onBeforeDragStart({ event, source, context }) {\n        const\n            me        = this,\n            { grid }  = me,\n            subGridEl = me.targetSubGridElement;\n\n        // Only dragging enabled in the leftmost grid section\n        if (me.disabled || grid.readOnly || grid.isTreeGrouped || !subGridEl.contains(context.element)) {\n            return false;\n        }\n\n        const startRecord = context.startRecord = grid.getRecordFromElement(context.element);\n\n        // Don't allow starting drag on a readOnly record nor on special rows\n        if (startRecord.readOnly || startRecord.isSpecialRow) {\n            return false;\n        }\n\n        context.originalRowTop = grid.rowManager.getRowFor(startRecord).top;\n\n        // Don't select row if checkboxOnly is set\n        if (!grid.selectionMode.checkboxOnly) {\n            if (source.startEvent.pointerType === 'touch') {\n                // Touchstart doesn't focus/navigate on its own, so we do it at the last moment before drag start\n                if (!grid.isSelected(startRecord)) {\n                    grid.selectRow({\n                        record         : startRecord,\n                        addToSelection : false\n                    });\n                }\n            }\n            else if (!grid.isSelected(startRecord) && !event.shiftKey && !event.ctrlKey) {\n                // If record is not selected and shift/ctrl is not pressed then select single row\n                grid.selectRow({\n                    record : startRecord\n                });\n            }\n        }\n\n        // Read-only records will not be moved\n        const selectedRecords = grid.selectedRecords.filter(r => !r.readOnly);\n        context.records       = [startRecord];\n\n        // If clicked record is selected, move all selected records\n        if (selectedRecords.includes(startRecord)) {\n            context.records.push(...selectedRecords.filter(r => r !== startRecord));\n            context.records.sort((r1, r2) => grid.store.indexOf(r1) - grid.store.indexOf(r2));\n        }\n\n        return true;\n    }\n\n    onDragStart({ context }) {\n        const\n            me                                 = this,\n            { grid }                           = me,\n            { cellEdit, cellMenu, headerMenu } = grid.features;\n\n        if (cellEdit) {\n            me.cellEditDisabledState = cellEdit.disabled;\n            cellEdit.disabled        = true; // prevent editing from being started through keystroke during row reordering\n        }\n\n        cellMenu?.hideContextMenu?.(false);\n        headerMenu?.hideContextMenu?.(false);\n\n        grid.element.classList.add('b-row-reordering');\n\n        const focusedCell = context.element.querySelector('.b-focused');\n        focusedCell?.classList.remove('b-focused');\n\n        context.element.firstElementChild.classList.remove('b-selected', 'b-hover');\n\n        grid.bodyContainer.appendChild(me.dropIndicator);\n    }\n\n    onDrag({ context, event }) {\n        const\n            me                    = this,\n            { grid }              = me,\n            { store, rowManager } = grid,\n            { clientY }           = event;\n\n        let valid = true,\n            row   = rowManager.getRowAt(clientY),\n            overRecord,\n            dataIndex,\n            after,\n            over,\n            insertBefore;\n\n        if (row) {\n            const\n                rowTop        = row.top + grid.scrollable.element.getBoundingClientRect().top - grid.scrollable.y,\n                quarter       = row.height / 4,\n                topQuarter    = rowTop + quarter,\n                middleY       = rowTop + row.height / 2,\n                bottomQuarter = rowTop + quarter * 3;\n\n            dataIndex  = row.dataIndex;\n            overRecord = store.getAt(dataIndex);\n\n            // If Tree and pointer is in quarter 2 and 3, add as child of hovered row\n            if (store.tree) {\n                over = (overRecord.isParent || me.dropOnLeaf) && clientY > topQuarter && clientY < bottomQuarter;\n            }\n            else if (store.isGrouped) {\n                over = overRecord.isGroupHeader && overRecord.meta.collapsed;\n            }\n\n            // Else, drop after row below if mouse is in bottom half of hovered row\n            after = !over && event.clientY >= middleY;\n        }\n        // User dragged below last row or above the top row.\n        else {\n            if (event.pageY < grid._bodyRectangle.y) {\n                dataIndex  = 0;\n                overRecord = store.first;\n                after      = false;\n            }\n            else {\n                dataIndex  = store.count - 1;\n                overRecord = store.last;\n                after      = true;\n            }\n            row = grid.rowManager.getRow(dataIndex);\n        }\n\n        if (overRecord === me.overRecord && me.after === after && me.over === over) {\n            context.valid = me.reorderValid;\n            // nothing's changed\n            return;\n        }\n\n        if (me.overRecord !== overRecord) {\n            rowManager.getRowById(me.overRecord)?.removeCls(me.dropOverTargetCls);\n        }\n\n        me.overRecord = overRecord;\n        me.after      = after;\n        me.over       = over;\n\n        if (\n            // Hovering the dragged record. This is a no-op.\n            // But still gather the contextual data.\n            overRecord === context.startRecord ||\n            // Not allowed to drop above topmost group header or below a collapsed header\n            (!after && !over && dataIndex === 0 && store.isGrouped) ||\n            // Not allowed to drop after last collapsed group\n            (after && overRecord.isGroupHeader && overRecord.meta.collapsed && store.indexOf(overRecord) === store.count - 1)\n        ) {\n            valid = false;\n        }\n\n        if (store.tree) {\n            insertBefore = after ? overRecord.nextSibling : overRecord;\n\n            // For trees, prevent moving a parent into its own hierarchy\n            if (context.records.some(rec => rec.contains(overRecord))) {\n                valid = false;\n            }\n\n            context.parent = valid && over ? overRecord : overRecord.parent;\n\n            me.clearTimeout(me.hoverTimer);\n\n            if (overRecord && overRecord.isParent && !overRecord.isExpanded(store)) {\n                me.hoverTimer = me.setTimeout(() => grid.expand(overRecord), me.hoverExpandTimeout);\n            }\n        }\n        else {\n            insertBefore = after ? store.getAt(dataIndex + 1) : overRecord;\n        }\n\n        row.toggleCls(me.dropOverTargetCls, valid && over);\n\n        // If hovering results in same dataIndex, regardless of what row is hovered, and parent has not changed\n        if (!over && dataIndex === store.indexOf(context.startRecord) + (after ? -1 : 1) &&\n            context.parent && context.startRecord.parent === context.parent) {\n            valid = false;\n        }\n\n        // Provide visual clue to user of the drop position\n        // In FF (in tests) it might not have had time to redraw rows after scroll before getting here\n        row && DomHelper.setTranslateY(me.dropIndicator, Math.max(row.top + (after ? row.element.getBoundingClientRect().height : 0), 1));\n\n        // Don't show dropIndicator if holding over a row\n        me.dropIndicator.style.visibility = over ? 'hidden' : 'visible';\n        me.dropIndicator.classList.toggle('b-drag-invalid', !valid);\n\n        // Public property used for validation\n        context.insertBefore = insertBefore;\n\n        context.valid = me.reorderValid = valid;\n    }\n\n    /**\n     * Handle drop\n     * @private\n     */\n    async onDrop(event) {\n        const\n            me          = this,\n            { client }  = me,\n            { context } = event;\n\n        context.valid = context.valid && me.reorderValid;\n\n        if (context.valid) {\n            context.async = true;\n\n            if (client.store.tree) {\n                // For tree scenario, add context about previous positions of dragged tree nodes\n                context.oldPositionContext = context.records.map((record) => ({\n                    record,\n                    parentId    : record.parent?.id,\n                    parentIndex : record.parentIndex\n                }));\n            }\n\n            // Remove for 6.0\n            let result = await me.trigger('gridRowBeforeDropFinalize', event);\n\n            if (result === false) {\n                context.valid = false;\n            }\n\n            // Outside world provided us one or more Promises to wait for\n            result = await client.trigger('gridRowBeforeDropFinalize', event);\n\n            if (result === false) {\n                context.valid = false;\n            }\n\n            await me.dragHelper.animateProxyTo(me.dropIndicator, { align : 'l0-l0' });\n\n            await me.finalizeReorder(context);\n        }\n\n        // already dropped the node, don't have to expand any node hovered anymore\n        // (cancelling expand action after timeout)\n        me.clearTimeout(me.hoverTimer);\n\n        me.overRecord = me.after = me.over = null;\n\n        me.trigger('gridRowDrop', event);\n        client.trigger('gridRowDrop', event);\n    }\n\n    async finalizeReorder(context) {\n        const\n            me                     = this,\n            { grid }               = me,\n            { store, focusedCell } = grid;\n\n        let { records } = context;\n\n        context.valid = context.valid && !records.some(rec => !store.includes(rec));\n\n        if (context.valid) {\n            let result;\n\n            if (store.tree) {\n                // Remove any selected child records of parent nodes\n                records = records.filter(record => !record.parent || record.bubbleWhile(parent => !records.includes(parent), true));\n\n                result = await context.parent.tryInsertChild(records, me.over ? context.parent.children?.[0] : context.insertBefore);\n                // remove reorder cls from preview parent element dropped\n                grid.rowManager.forEach(r => r.removeCls(me.dropOverTargetCls));\n\n                // If parent wasn't expanded, expand it if it now has children\n                if (!context.parent.isExpanded() && context.parent.children?.length) {\n                    grid.expand(context.parent);\n                }\n\n                context.valid = result !== false;\n            }\n            else if (store.isGrouped && me.over) {\n                store.move(records, store.getAt(store.indexOf(context.insertBefore) + 1));\n            }\n            else {\n                store.move(records, context.insertBefore);\n            }\n\n            if (focusedCell?._rowIndex >= 0) {\n                grid._focusedCell = null;\n                // Refresh focused cell\n                grid.focusCell({\n                    grid,\n                    record   : focusedCell.record,\n                    columnId : focusedCell.columnId\n                });\n            }\n\n            store.clearSorters();\n        }\n\n        context.finalize(context.valid);\n\n        grid.element.classList.remove('b-row-reordering');\n    }\n\n    /**\n     * Clean up on reset\n     * @private\n     */\n    onReset() {\n        const\n            me       = this,\n            { grid } = me,\n            cellEdit = grid.features.cellEdit;\n\n        grid.element.classList.remove('b-row-reordering');\n\n        if (cellEdit) {\n            cellEdit.disabled = me.cellEditDisabledState;\n        }\n\n        me.dropIndicator.remove();\n\n        DomHelper.removeClsGlobally(\n            grid.element,\n            ...me.dropOverTargetCls\n        );\n    }\n\n    //endregion\n\n    //region Render\n\n    onPaint({ firstPaint }) {\n        // columns shown, hidden or reordered\n        if (firstPaint) {\n            this.init();\n        }\n    }\n\n    //endregion\n\n    updateShowGrip(show) {\n        this.grid.element.classList.toggle('b-row-reorder-with-grip', show);\n    }\n}\n\nRowReorder.featureClass = '';\n\nGridFeatureManager.registerFeature(RowReorder, false);\nGridFeatureManager.registerFeature(RowReorder, true, 'Gantt');\n","import TreeColumn from '../column/TreeColumn.js';\nimport InstancePlugin from '../../Core/mixin/InstancePlugin.js';\nimport GridFeatureManager from './GridFeatureManager.js';\nimport ObjectHelper from '../../Core/helper/ObjectHelper.js';\n\n/**\n * @module Grid/feature/TreeGroup\n */\n\n/**\n * A feature that allows transforming a flat dataset (or the leaves of a hierarchical) into a tree by specifying a\n * record field per parent level. Parents are generated based on each leaf's value for those fields.\n *\n * {@inlineexample Grid/feature/TreeGroup.js}\n *\n * This feature can be used to mimic multi grouping or to generate another view for hierarchical data. The actual\n * transformation happens in a new store, that contains links to the original records. The original stores structure is\n * kept intact and will be plugged back in when calling {@link #function-clearGroups}.\n *\n * Any modification of the links is relayed to the original store. So cell editing etc. will work as expected and the\n * original data will be updated.\n *\n * <div class=\"note\">\n * Please note that this feature requires using a {@link Grid.view.TreeGrid} or having the {@link Grid.feature.Tree}\n * feature enabled.\n * </div>\n *\n * This snippet shows how the sample dataset used in the demo above is transformed:\n *\n * ```javascript\n * const grid = new TreeGrid({\n *     // Original data\n *     data : [\n *         { id : 1, name : 'Project 1', children : [\n *             { id : 11, name : 'Task 11', status : 'wip', prio : 'high' },\n *             { id : 12, name : 'Task 12', status : 'done', prio : 'low' },\n *             { id : 13, name : 'Task 13', status : 'done', prio : 'high' }\n *         ]},\n *         { id : 2, name : 'Project 2', children : [\n *             { id : 21, name : 'Task 21', status : 'wip', prio : 'high' },\n *         ]}\n *     ],\n *\n *     features : {\n *         treeGroup : {\n *             // Fields to build a new tree from\n *             levels : [ 'prio', 'status' ]\n *         }\n *     }\n * });\n *\n * // Resulting data\n * [\n *     { name : 'low', children : [\n *         { name : 'done', children : [\n *             { id : 12, name : 'Task 12', status : 'done', prio : 'low' }\n *         ]}\n *     ]},\n *     { name : 'high', children : [\n *         { name : 'done', children : [\n *             { id : 13, name : 'Task 13', status : 'done', prio : 'high' }\n *         ]},\n *         { name : 'wip', children : [\n *             { id : 11, name : 'Task 11', status : 'wip', prio : 'high' },\n *             { id : 21, name : 'Task 21', status : 'wip', prio : 'low' }\n *         ]}\n *     ]}\n * ]\n * ```\n *\n * ## Important information\n *\n * Using the TreeGroup feature comes with some caveats:\n *\n * * Generated parents are read-only, they cannot be edited using the default UI.\n * * Moving nodes manually in the tree is not supported while it is grouped. The linked records have their own\n *   `parentId` fields, not linked to the original records value.\n * * The generated structure is not meant to be persisted.\n *\n * <div class=\"note\">\n * Please note that this feature is not supported in vertical mode in Scheduler.\n * </div>\n *\n * This feature is <strong>disabled</strong> by default.\n *\n * @extends Core/mixin/InstancePlugin\n *\n * @classtype treeGroup\n * @feature\n */\nexport default class TreeGroup extends InstancePlugin {\n    static $name = 'TreeGroup';\n\n    static configurable = {\n        /**\n         * An array of model field names or functions used to determine the levels in the resulting tree.\n         *\n         * When supplying a function, it will be called for each leaf in the original data, and it is expected to return\n         * an atomic value used to determine which parent the leaf will be added to at that level.\n         *\n         * ```javascript\n         * const grid = new TreeGrid({\n         *     features : {\n         *         treeGroup : {\n         *             levels : [\n         *                 // First level is determined by the value of the status field\n         *                 'status',\n         *                 // Second level by the result of this function\n         *                 // (which puts percentdone 0-9 in one group, 10-19 into another and so on)\n         *                 record => (record.percentDone % 10) * 10\n         *             ]\n         *         }\n         *     }\n         * });\n         * ```\n         *\n         * The function form can also be used as a formatter/renderer of sorts, simply by returning a string:\n         *\n         * ```javascript\n         * const grid = new TreeGrid({\n         *     features : {\n         *         treeGroup : {\n         *             levels : [\n         *                 record => `Status: ${record.status}`\n         *             ]\n         *         }\n         *     }\n         * });\n         * ```\n         *\n         * Assigning `null` restores data to its original state.\n         *\n         * @prp {Array<String|Function(Core.data.Model) : any>} levels\n         */\n        levels : null,\n\n        /**\n         * CSS class to apply to the generated parents.\n         *\n         * @config {String}\n         * @default\n         */\n        parentCls : 'b-generated-parent'\n    };\n\n    /**\n     * A reference to the original store when a tree grouping has been applied. Use this to modify / load data\n     * while tree grouping is active.\n     * @member {Core.data.Store} originalStore\n     * @readonly\n     */\n\n    static pluginConfig = {\n        assign : ['group', 'clearGroups']\n    };\n\n    static properties = {\n        isApplying    : 0,\n        originalStore : null\n    };\n\n    construct(grid, config) {\n        super.construct(grid, config);\n\n        if (!grid.hasFeature('tree')) {\n            throw new Error('The TreeGroup feature requires the Tree feature to be enabled');\n        }\n    }\n\n    processParentData(parentData) {\n        // Apply cls to allow custom styling of generated parents\n        if (this.parentCls) {\n            parentData.cls = this.parentCls;\n        }\n    }\n\n    processTransformedData(transformedData) {}\n\n    async waitForReadiness() {\n        // Wait for store to finish loading before transforming the data\n        if (this.originalStore.isLoading) {\n            await this.originalStore.await('load', false);\n\n            if (this.isDestroyed) {\n                return;\n            }\n        }\n\n        // For Scheduler, Pro & Gantt, to not have to implement a TreeGroup in Scheduler just to add this\n        const { crudManager } = this.client;\n\n        if (crudManager) {\n            if (crudManager.isLoadingOrSyncing || crudManager._autoLoadPromise) {\n                await crudManager.await('requestDone');\n\n                if (this.isDestroyed) {\n                    return;\n                }\n            }\n\n            await this.client.project.commitAsync();\n        }\n    }\n\n    async applyLevels(levels) {\n        const\n            me         = this,\n            { client } = me,\n            treeColumn = client.columns.find(col => col instanceof TreeColumn);\n\n        let { store } = client,\n            result    = null;\n\n        me._levels = levels;\n\n        me.isApplying++;\n\n        client.suspendRefresh();\n\n        if (levels && !me.originalStore) {\n            me.originalStore = store;\n            store            = new store.constructor({\n                tree       : true,\n                modelClass : store.modelClass,\n                load       : store.load?.bind(store),\n                commit     : store.commit.bind(store)\n            });\n            client.store     = store;\n\n            me.originalStore.ion({\n                name      : 'originalStore',\n                refresh   : me.onOriginalStoreRefresh,\n                add       : me.onOriginalStoreChanged,\n                remove    : me.onOriginalStoreChanged,\n                removeAll : me.onOriginalStoreChanged,\n                thisObj   : me\n            });\n        }\n\n        await me.waitForReadiness();\n\n        if (me.isDestroyed) {\n            return;\n        }\n\n        // Applying custom levels\n        if (levels) {\n            // Plug links in to allow transforming them below\n            store.data = me.originalStore.allRecords.flatMap(record => record.isLeaf ? [record.link()] : []);\n\n            // Transform it according to levels\n            result = store.treeify(levels, parentData => {\n                // Use group key as tree columns content\n                ObjectHelper.setPath(parentData, store.modelClass.getFieldDataSource(treeColumn.field), parentData.key);\n\n                // Let the outside world manipulate generated parents data before turning it into a record\n                me.processParentData(parentData);\n            });\n\n            me.processTransformedData(result);\n\n            // Load the transformed result into the \"display store\"\n            store.data = result.children;\n        }\n        // Clearing custom levels\n        else {\n            client.store = me.originalStore;\n            me.detachListeners('originalStore');\n            me.originalStore = null;\n        }\n\n        me.isApplying--;\n\n        client.resumeRefresh();\n        client.rowManager.reinitialize();\n\n        return result;\n    }\n\n    onOriginalStoreChanged() {\n        this.applyLevels(this._levels);\n    }\n\n    onOriginalStoreRefresh({ action }) {\n        if (action === 'dataset') {\n            this.applyLevels(this.levels);\n        }\n    }\n\n    updateLevels(levels) {\n        if (levels || !this.isConfiguring) {\n            this.applyLevels(levels);\n        }\n    }\n\n    /**\n     * Transforms the data according to the supplied levels.\n     *\n     * Yields the same result as assigning to {@link #property-levels}.\n     *\n     * ```javascript\n     * // Transform into a tree with two parent levels\n     * grid.group('status', record => (record.percentDone % 10) * 10);\n     * ```\n     *\n     * @param {Array<String|Function(Core.data.Model) : any>} levels Field names or functions use to generate parents in resulting tree.\n     * @on-owner\n     * @category Common\n     */\n    async group(levels) {\n        ObjectHelper.assertArray(levels, 'group()');\n\n        await this.applyLevels(levels);\n    }\n\n    /**\n     * Clears the previously applied transformation, restoring data to its initial state.\n     *\n     * Yields the same result as assigning `null` to {@link #property-levels}.\n     *\n     * ```javascript\n     * // Restore original data\n     * grid.clearGroupers();\n     * ```\n     * @on-owner\n     * @category Common\n     */\n    async clearGroups() {\n        if (this.isGrouped) {\n            await this.applyLevels(null);\n        }\n    }\n\n    get isGrouped() {\n        return Boolean(this._levels);\n    }\n}\n\nGridFeatureManager.registerFeature(TreeGroup);\n"],"names":["RowReorder","Delayable","InstancePlugin","deprecatedEvents","gridRowBeforeDragStart","product","invalidAsOfVersion","message","gridRowDragStart","gridRowDrag","gridRowBeforeDropFinalize","gridRowDrop","gridRowAbort","$name","configurable","showGrip","gripOnly","hoverExpandTimeout","touchStartDelay","dropOnLeaf","dragHelperConfig","construct","grid","config","arguments","doDestroy","_this$dragHelper","dragHelper","destroy","init","me","DragHelper","new","name","cloneTarget","dragThreshold","proxyTopOffset","targetSelector","lockX","dragWithin","bodyContainer","allowDropOutside","scrollManager","outerElement","targetSubGridElement","isElementDraggable","bind","monitoringConfig","scrollables","element","scrollable","direction","setXY","x","y","context","started","elementRect","Rectangle","from","pointerDownOffset","startPageY","globalThis","pageYOffset","getBoundingClientRect","top","DomHelper","setTranslateXY","ignoreSamePositionDrop","createProxy","clone","cloneNode","container","document","createElement","classList","add","removeAttribute","style","transform","width","appendChild","selectedRecords","length","clone2","removeClsGlobally","internalListeners","beforedragstart","dragstart","drag","drop","reset","prio","thisObj","relayEvents","dropIndicator","className","dropOverTargetCls","pluginConfig","after","targetSubGrid","regions","subGrids","el","event","closest","firstCell","gripperStyle","getComputedStyle","offsetX","rtl","borderOffsetX","onGrip","roundPx","parseFloat","client","preventDragSelect","onBeforeDragStart","source","subGridEl","disabled","readOnly","isTreeGrouped","contains","startRecord","getRecordFromElement","isSpecialRow","originalRowTop","rowManager","getRowFor","selectionMode","checkboxOnly","startEvent","pointerType","isSelected","selectRow","record","addToSelection","shiftKey","ctrlKey","filter","r","records","includes","push","sort","r1","r2","store","indexOf","onDragStart","_cellMenu$hideContext","_headerMenu$hideConte","cellEdit","cellMenu","headerMenu","features","cellEditDisabledState","hideContextMenu","call","focusedCell","querySelector","remove","firstElementChild","onDrag","clientY","valid","row","getRowAt","overRecord","dataIndex","over","insertBefore","rowTop","quarter","height","topQuarter","middleY","bottomQuarter","getAt","tree","isParent","isGrouped","isGroupHeader","meta","collapsed","pageY","_bodyRectangle","first","count","last","getRow","reorderValid","_rowManager$getRowByI","getRowById","removeCls","nextSibling","some","rec","parent","clearTimeout","hoverTimer","isExpanded","setTimeout","expand","toggleCls","setTranslateY","Math","max","visibility","toggle","onDrop","async","oldPositionContext","map","_record$parent","parentId","id","parentIndex","result","trigger","animateProxyTo","align","finalizeReorder","_context$parent$child","_context$parent$child2","bubbleWhile","tryInsertChild","children","forEach","move","_rowIndex","_focusedCell","focusCell","columnId","clearSorters","finalize","onReset","onPaint","firstPaint","updateShowGrip","show","featureClass","_$name","GridFeatureManager","registerFeature","TreeGroup","levels","parentCls","assign","properties","isApplying","originalStore","hasFeature","Error","processParentData","parentData","cls","processTransformedData","transformedData","waitForReadiness","isLoading","await","isDestroyed","crudManager","isLoadingOrSyncing","_autoLoadPromise","project","commitAsync","applyLevels","treeColumn","columns","find","col","TreeColumn","_levels","suspendRefresh","_store$load","constructor","modelClass","load","commit","ion","refresh","onOriginalStoreRefresh","onOriginalStoreChanged","removeAll","data","allRecords","flatMap","isLeaf","link","treeify","ObjectHelper","setPath","getFieldDataSource","field","key","detachListeners","resumeRefresh","reinitialize","action","updateLevels","isConfiguring","group","assertArray","clearGroups","Boolean"],"mappings":";;;;;AAAA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe,MAAMA,UAAU,SAASC,SAAS,CAACC,cAAc,CAAC,CAAC;AAC9D;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACI,WAAWC,gBAAgBA,GAAG;IAC1B,OAAO;AACHC,MAAAA,sBAAsB,EAAG;AACrBC,QAAAA,OAAO,EAAc,MAAM;AAC3BC,QAAAA,kBAAkB,EAAG,OAAO;AAC5BC,QAAAA,OAAO,EAAc,yFAAA;OACxB;AACDC,MAAAA,gBAAgB,EAAG;AACfH,QAAAA,OAAO,EAAc,MAAM;AAC3BC,QAAAA,kBAAkB,EAAG,OAAO;AAC5BC,QAAAA,OAAO,EAAc,mFAAA;OACxB;AACDE,MAAAA,WAAW,EAAG;AACVJ,QAAAA,OAAO,EAAc,MAAM;AAC3BC,QAAAA,kBAAkB,EAAG,OAAO;AAC5BC,QAAAA,OAAO,EAAc,8EAAA;OACxB;AACDG,MAAAA,yBAAyB,EAAG;AACxBL,QAAAA,OAAO,EAAc,MAAM;AAC3BC,QAAAA,kBAAkB,EAAG,OAAO;AAC5BC,QAAAA,OAAO,EAAc,4FAAA;OACxB;AACDI,MAAAA,WAAW,EAAG;AACVN,QAAAA,OAAO,EAAc,MAAM;AAC3BC,QAAAA,kBAAkB,EAAG,OAAO;AAC5BC,QAAAA,OAAO,EAAc,8EAAA;OACxB;AACDK,MAAAA,YAAY,EAAG;AACXP,QAAAA,OAAO,EAAc,MAAM;AAC3BC,QAAAA,kBAAkB,EAAG,OAAO;AAC5BC,QAAAA,OAAO,EAAc,+EAAA;AACzB,OAAA;KACH,CAAA;AACL,GAAA;AACA;AACA;EACA,OAAOM,KAAK,GAAG,YAAY,CAAA;AAC3B,EAAA,OAAOC,YAAY,GAAG;AAClB;AACR;AACA;AACA;AACQC,IAAAA,QAAQ,EAAG,IAAI;AACf;AACR;AACA;AACA;AACQC,IAAAA,QAAQ,EAAG,IAAI;AACf;AACR;AACA;AACA;AACQC,IAAAA,kBAAkB,EAAG,IAAI;AACzB;AACR;AACA;AACA;AACA;AACQC,IAAAA,eAAe,EAAG,GAAG;AACrB;AACR;AACA;AACA;AACA;AACQC,IAAAA,UAAU,EAAG,KAAK;AAClB;AACR;AACA;AACA;AACQC,IAAAA,gBAAgB,EAAG,IAAA;GACtB,CAAA;AACDC,EAAAA,SAASA,CAACC,IAAI,EAAEC,MAAM,EAAE;IACpB,IAAI,CAACD,IAAI,GAAGA,IAAI,CAAA;AAChB,IAAA,KAAK,CAACD,SAAS,CAAC,GAAGG,SAAS,CAAC,CAAA;AACjC,GAAA;AACAC,EAAAA,SAASA,GAAG;AAAA,IAAA,IAAAC,gBAAA,CAAA;IACR,CAAAA,gBAAA,GAAI,IAAA,CAACC,UAAU,MAAA,IAAA,IAAAD,gBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAfA,gBAAA,CAAiBE,OAAO,EAAE,CAAA;IAC1B,KAAK,CAACH,SAAS,EAAE,CAAA;AACrB,GAAA;AACA;AACJ;AACA;AACA;AACII,EAAAA,IAAIA,GAAG;IACH,MACIC,EAAE,GAAS,IAAI;AACf,MAAA;AAAER,QAAAA,IAAAA;AAAK,OAAC,GAAGQ,EAAE,CAAA;AACjBA,IAAAA,EAAE,CAACH,UAAU,GAAGI,UAAU,CAACC,GAAG,CAAC;AAC3BC,MAAAA,IAAI,EAAiB,YAAY;AACjCC,MAAAA,WAAW,EAAU,IAAI;AACzBC,MAAAA,aAAa,EAAQ,EAAE;AACvBC,MAAAA,cAAc,EAAO,EAAE;AACvBC,MAAAA,cAAc,EAAO,aAAa;AAClCC,MAAAA,KAAK,EAAgB,IAAI;MACzBC,UAAU,EAAWjB,IAAI,CAACkB,aAAa;AACvCC,MAAAA,gBAAgB,EAAK,IAAI;MACzBC,aAAa,EAAQpB,IAAI,CAACoB,aAAa;MACvCC,YAAY,EAASb,EAAE,CAACc,oBAAoB;MAC5C1B,eAAe,EAAMY,EAAE,CAACZ,eAAe;MACvC2B,kBAAkB,EAAGf,EAAE,CAACe,kBAAkB,CAACC,IAAI,CAAChB,EAAE,CAAC;AACnDiB,MAAAA,gBAAgB,EAAK;AACjBC,QAAAA,WAAW,EAAG,CACV;AACIC,UAAAA,OAAO,EAAK3B,IAAI,CAAC4B,UAAU,CAACD,OAAO;AACnCE,UAAAA,SAAS,EAAG,UAAA;SACf,CAAA;OAER;AACDC,MAAAA,KAAKA,CAACH,OAAO,EAAEI,CAAC,EAAEC,CAAC,EAAE;QACjB,MAAM;AAAEC,UAAAA,OAAAA;AAAQ,SAAC,GAAG,IAAI,CAAA;AACxB,QAAA,IAAI,CAACA,OAAO,CAACC,OAAO,EAAE;AAClB,UAAA,MACIC,WAAW,GAASC,SAAS,CAACC,IAAI,CAACJ,OAAO,CAACN,OAAO,EAAE,IAAI,CAACV,UAAU,CAAC;AACpEqB,YAAAA,iBAAiB,GAAGL,OAAO,CAACM,UAAU,GAAGC,UAAU,CAACC,WAAW,GAAGR,OAAO,CAACN,OAAO,CAACe,qBAAqB,EAAE,CAACC,GAAG,CAAA;AACjH;UACAX,CAAC,GAAGG,WAAW,CAACQ,GAAG,GAAGL,iBAAiB,GAAG,IAAI,CAACxB,cAAc,CAAA;AACjE,SAAA;QACA8B,SAAS,CAACC,cAAc,CAAClB,OAAO,EAAEI,CAAC,EAAEC,CAAC,CAAC,CAAA;OAC1C;AACD;AACAc,MAAAA,sBAAsB,EAAG,KAAK;MAC9BC,WAAWA,CAACpB,OAAO,EAAE;AACjB,QAAA,MACIqB,KAAK,GAAOrB,OAAO,CAACsB,SAAS,CAAC,IAAI,CAAC;AACnCC,UAAAA,SAAS,GAAGC,QAAQ,CAACC,aAAa,CAAC,KAAK,CAAC,CAAA;AAC7CF,QAAAA,SAAS,CAACG,SAAS,CAACC,GAAG,CAAC,qBAAqB,CAAC,CAAA;AAC9CN,QAAAA,KAAK,CAACO,eAAe,CAAC,IAAI,CAAC,CAAA;AAC3B;AACAP,QAAAA,KAAK,CAACQ,KAAK,CAACC,SAAS,GAAG,EAAE,CAAA;AAC1BT,QAAAA,KAAK,CAACQ,KAAK,CAACE,KAAK,GAAG,EAAE,CAAA;AACtBR,QAAAA,SAAS,CAACS,WAAW,CAACX,KAAK,CAAC,CAAA;AAC5B,QAAA,IAAIhD,IAAI,CAAC4D,eAAe,CAACC,MAAM,GAAG,CAAC,EAAE;AACjC,UAAA,MAAMC,MAAM,GAAGd,KAAK,CAACC,SAAS,CAAC,IAAI,CAAC,CAAA;AACpCa,UAAAA,MAAM,CAACT,SAAS,CAACC,GAAG,CAAC,yBAAyB,CAAC,CAAA;AAC/CJ,UAAAA,SAAS,CAACS,WAAW,CAACG,MAAM,CAAC,CAAA;AACjC,SAAA;QACAlB,SAAS,CAACmB,iBAAiB,CAACb,SAAS,EAAE,YAAY,EAAE,SAAS,EAAE,WAAW,CAAC,CAAA;AAC5E,QAAA,OAAOA,SAAS,CAAA;OACnB;AACDc,MAAAA,iBAAiB,EAAG;AAChBC,QAAAA,eAAe,EAAG,mBAAmB;AACrCC,QAAAA,SAAS,EAAS,aAAa;AAC/BC,QAAAA,IAAI,EAAc,QAAQ;AAC1BC,QAAAA,IAAI,EAAc,QAAQ;AAC1BC,QAAAA,KAAK,EAAa,SAAS;AAC3BC,QAAAA,IAAI,EAAc,KAAK;AAAE;AACzBC,QAAAA,OAAO,EAAW/D,EAAAA;AACtB,OAAA;AACJ,KAAC,EAAEA,EAAE,CAACV,gBAAgB,CAAC,CAAA;AACvB;AACAU,IAAAA,EAAE,CAACgE,WAAW,CAAChE,EAAE,CAACH,UAAU,EAAE,CAAC,iBAAiB,EAAE,WAAW,EAAE,MAAM,EAAE,OAAO,CAAC,EAAE,SAAS,CAAC,CAAA;AAC3FL,IAAAA,IAAI,CAACwE,WAAW,CAAChE,EAAE,CAACH,UAAU,EAAE,CAAC,iBAAiB,EAAE,WAAW,EAAE,MAAM,EAAE,OAAO,CAAC,EAAE,SAAS,CAAC,CAAA;AAC7FG,IAAAA,EAAE,CAACiE,aAAa,GAAG7B,SAAS,CAACQ,aAAa,CAAC;AACvCsB,MAAAA,SAAS,EAAG,sBAAA;AAChB,KAAC,CAAC,CAAA;AACFlE,IAAAA,EAAE,CAACmE,iBAAiB,GAAG,CAAC,yBAAyB,EAAE,SAAS,CAAC,CAAA;AACjE,GAAA;AACA;AACA;AACA,EAAA,OAAOC,YAAY,GAAG;IAClBC,KAAK,EAAG,CAAC,SAAS,CAAA;GACrB,CAAA;EACD,IAAIvD,oBAAoBA,GAAG;IACvB,MAAMwD,aAAa,GAAG,IAAI,CAAC9E,IAAI,CAAC+E,OAAO,CAAC,CAAC,CAAC,CAAA;IAC1C,OAAO,IAAI,CAAC/E,IAAI,CAACgF,QAAQ,CAACF,aAAa,CAAC,CAACnD,OAAO,CAAA;AACpD,GAAA;AACA;AACA;AACAJ,EAAAA,kBAAkBA,CAAC0D,EAAE,EAAEC,KAAK,EAAE;AAC1B,IAAA,IAAI,CAACD,EAAE,CAACE,OAAO,CAAC,wBAAwB,CAAC,EAAE;MACvC,IAAI,IAAI,CAACzF,QAAQ,EAAE;AACf,QAAA,MAAM0F,SAAS,GAAGH,EAAE,CAACE,OAAO,CAAC,0BAA0B,CAAC,CAAA;AACxD;AACA,QAAA,IAAIC,SAAS,EAAE;AACX,UAAA,MACIC,YAAY,GAAGC,gBAAgB,CAACF,SAAS,EAAE,SAAS,CAAC;YACrDG,OAAO,GAAQ,IAAI,CAACvF,IAAI,CAACwF,GAAG,GAAGJ,SAAS,CAAC1C,qBAAqB,EAAE,CAACgB,KAAK,GAAGwB,KAAK,CAACO,aAAa,GAAGP,KAAK,CAACO,aAAa;AAClHC,YAAAA,MAAM,GAAS9C,SAAS,CAAC+C,OAAO,CAACJ,OAAO,CAAC,IAAI3C,SAAS,CAAC+C,OAAO,CAACC,UAAU,CAACP,YAAY,CAAC3B,KAAK,CAAC,CAAC,CAAA;AAClG;AACA;AACA,UAAA,IAAIgC,MAAM,EAAE;AACR,YAAA,IAAI,CAACG,MAAM,CAACC,iBAAiB,GAAG,IAAI,CAAA;AACxC,WAAA;AACA,UAAA,OAAOJ,MAAM,CAAA;AACjB,SAAA;AACJ,OAAC,MACI;AACD,QAAA,OAAO,IAAI,CAAA;AACf,OAAA;AACJ,KAAA;AACJ,GAAA;AACAK,EAAAA,iBAAiBA,CAAC;IAAEb,KAAK;IAAEc,MAAM;AAAE/D,IAAAA,OAAAA;AAAQ,GAAC,EAAE;IAC1C,MACIzB,EAAE,GAAU,IAAI;AAChB,MAAA;AAAER,QAAAA,IAAAA;AAAK,OAAC,GAAIQ,EAAE;MACdyF,SAAS,GAAGzF,EAAE,CAACc,oBAAoB,CAAA;AACvC;IACA,IAAId,EAAE,CAAC0F,QAAQ,IAAIlG,IAAI,CAACmG,QAAQ,IAAInG,IAAI,CAACoG,aAAa,IAAI,CAACH,SAAS,CAACI,QAAQ,CAACpE,OAAO,CAACN,OAAO,CAAC,EAAE;AAC5F,MAAA,OAAO,KAAK,CAAA;AAChB,KAAA;AACA,IAAA,MAAM2E,WAAW,GAAGrE,OAAO,CAACqE,WAAW,GAAGtG,IAAI,CAACuG,oBAAoB,CAACtE,OAAO,CAACN,OAAO,CAAC,CAAA;AACpF;AACA,IAAA,IAAI2E,WAAW,CAACH,QAAQ,IAAIG,WAAW,CAACE,YAAY,EAAE;AAClD,MAAA,OAAO,KAAK,CAAA;AAChB,KAAA;AACAvE,IAAAA,OAAO,CAACwE,cAAc,GAAGzG,IAAI,CAAC0G,UAAU,CAACC,SAAS,CAACL,WAAW,CAAC,CAAC3D,GAAG,CAAA;AACnE;AACA,IAAA,IAAI,CAAC3C,IAAI,CAAC4G,aAAa,CAACC,YAAY,EAAE;AAClC,MAAA,IAAIb,MAAM,CAACc,UAAU,CAACC,WAAW,KAAK,OAAO,EAAE;AAC3C;AACA,QAAA,IAAI,CAAC/G,IAAI,CAACgH,UAAU,CAACV,WAAW,CAAC,EAAE;UAC/BtG,IAAI,CAACiH,SAAS,CAAC;AACXC,YAAAA,MAAM,EAAWZ,WAAW;AAC5Ba,YAAAA,cAAc,EAAG,KAAA;AACrB,WAAC,CAAC,CAAA;AACN,SAAA;AACJ,OAAC,MACI,IAAI,CAACnH,IAAI,CAACgH,UAAU,CAACV,WAAW,CAAC,IAAI,CAACpB,KAAK,CAACkC,QAAQ,IAAI,CAAClC,KAAK,CAACmC,OAAO,EAAE;AACzE;QACArH,IAAI,CAACiH,SAAS,CAAC;AACXC,UAAAA,MAAM,EAAGZ,WAAAA;AACb,SAAC,CAAC,CAAA;AACN,OAAA;AACJ,KAAA;AACA;AACA,IAAA,MAAM1C,eAAe,GAAG5D,IAAI,CAAC4D,eAAe,CAAC0D,MAAM,CAACC,CAAC,IAAI,CAACA,CAAC,CAACpB,QAAQ,CAAC,CAAA;AACrElE,IAAAA,OAAO,CAACuF,OAAO,GAAS,CAAClB,WAAW,CAAC,CAAA;AACrC;AACA,IAAA,IAAI1C,eAAe,CAAC6D,QAAQ,CAACnB,WAAW,CAAC,EAAE;AACvCrE,MAAAA,OAAO,CAACuF,OAAO,CAACE,IAAI,CAAC,GAAG9D,eAAe,CAAC0D,MAAM,CAACC,CAAC,IAAIA,CAAC,KAAKjB,WAAW,CAAC,CAAC,CAAA;MACvErE,OAAO,CAACuF,OAAO,CAACG,IAAI,CAAC,CAACC,EAAE,EAAEC,EAAE,KAAK7H,IAAI,CAAC8H,KAAK,CAACC,OAAO,CAACH,EAAE,CAAC,GAAG5H,IAAI,CAAC8H,KAAK,CAACC,OAAO,CAACF,EAAE,CAAC,CAAC,CAAA;AACrF,KAAA;AACA,IAAA,OAAO,IAAI,CAAA;AACf,GAAA;AACAG,EAAAA,WAAWA,CAAC;AAAE/F,IAAAA,OAAAA;AAAQ,GAAC,EAAE;IAAA,IAAAgG,qBAAA,EAAAC,qBAAA,CAAA;IACrB,MACI1H,EAAE,GAAmC,IAAI;AACzC,MAAA;AAAER,QAAAA,IAAAA;AAAK,OAAC,GAA6BQ,EAAE;AACvC,MAAA;QAAE2H,QAAQ;QAAEC,QAAQ;AAAEC,QAAAA,UAAAA;OAAY,GAAGrI,IAAI,CAACsI,QAAQ,CAAA;AACtD,IAAA,IAAIH,QAAQ,EAAE;AACV3H,MAAAA,EAAE,CAAC+H,qBAAqB,GAAGJ,QAAQ,CAACjC,QAAQ,CAAA;AAC5CiC,MAAAA,QAAQ,CAACjC,QAAQ,GAAU,IAAI,CAAC;AACpC,KAAA;;AACAkC,IAAAA,QAAQ,aAARA,QAAQ,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,CAAAH,qBAAA,GAARG,QAAQ,CAAEI,eAAe,MAAA,IAAA,IAAAP,qBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAzBA,qBAAA,CAAAQ,IAAA,CAAAL,QAAQ,EAAoB,KAAK,CAAC,CAAA;AAClCC,IAAAA,UAAU,aAAVA,UAAU,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,CAAAH,qBAAA,GAAVG,UAAU,CAAEG,eAAe,MAAA,IAAA,IAAAN,qBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAA3BA,qBAAA,CAAAO,IAAA,CAAAJ,UAAU,EAAoB,KAAK,CAAC,CAAA;IACpCrI,IAAI,CAAC2B,OAAO,CAAC0B,SAAS,CAACC,GAAG,CAAC,kBAAkB,CAAC,CAAA;IAC9C,MAAMoF,WAAW,GAAGzG,OAAO,CAACN,OAAO,CAACgH,aAAa,CAAC,YAAY,CAAC,CAAA;IAC/DD,WAAW,KAAA,IAAA,IAAXA,WAAW,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAXA,WAAW,CAAErF,SAAS,CAACuF,MAAM,CAAC,WAAW,CAAC,CAAA;AAC1C3G,IAAAA,OAAO,CAACN,OAAO,CAACkH,iBAAiB,CAACxF,SAAS,CAACuF,MAAM,CAAC,YAAY,EAAE,SAAS,CAAC,CAAA;IAC3E5I,IAAI,CAACkB,aAAa,CAACyC,WAAW,CAACnD,EAAE,CAACiE,aAAa,CAAC,CAAA;AACpD,GAAA;AACAqE,EAAAA,MAAMA,CAAC;IAAE7G,OAAO;AAAEiD,IAAAA,KAAAA;AAAM,GAAC,EAAE;IACvB,MACI1E,EAAE,GAAsB,IAAI;AAC5B,MAAA;AAAER,QAAAA,IAAAA;AAAK,OAAC,GAAgBQ,EAAE;AAC1B,MAAA;QAAEsH,KAAK;AAAEpB,QAAAA,UAAAA;AAAW,OAAC,GAAG1G,IAAI;AAC5B,MAAA;AAAE+I,QAAAA,OAAAA;AAAQ,OAAC,GAAa7D,KAAK,CAAA;IACjC,IAAI8D,KAAK,GAAG,IAAI;AACZC,MAAAA,GAAG,GAAKvC,UAAU,CAACwC,QAAQ,CAACH,OAAO,CAAC;MACpCI,UAAU;MACVC,SAAS;MACTvE,KAAK;MACLwE,IAAI;MACJC,YAAY,CAAA;AAChB,IAAA,IAAIL,GAAG,EAAE;MACL,MACIM,MAAM,GAAUN,GAAG,CAACtG,GAAG,GAAG3C,IAAI,CAAC4B,UAAU,CAACD,OAAO,CAACe,qBAAqB,EAAE,CAACC,GAAG,GAAG3C,IAAI,CAAC4B,UAAU,CAACI,CAAC;AACjGwH,QAAAA,OAAO,GAASP,GAAG,CAACQ,MAAM,GAAG,CAAC;QAC9BC,UAAU,GAAMH,MAAM,GAAGC,OAAO;AAChCG,QAAAA,OAAO,GAASJ,MAAM,GAAGN,GAAG,CAACQ,MAAM,GAAG,CAAC;AACvCG,QAAAA,aAAa,GAAGL,MAAM,GAAGC,OAAO,GAAG,CAAC,CAAA;MACxCJ,SAAS,GAAIH,GAAG,CAACG,SAAS,CAAA;AAC1BD,MAAAA,UAAU,GAAGrB,KAAK,CAAC+B,KAAK,CAACT,SAAS,CAAC,CAAA;AACnC;MACA,IAAItB,KAAK,CAACgC,IAAI,EAAE;AACZT,QAAAA,IAAI,GAAG,CAACF,UAAU,CAACY,QAAQ,IAAIvJ,EAAE,CAACX,UAAU,KAAKkJ,OAAO,GAAGW,UAAU,IAAIX,OAAO,GAAGa,aAAa,CAAA;AACpG,OAAC,MACI,IAAI9B,KAAK,CAACkC,SAAS,EAAE;QACtBX,IAAI,GAAGF,UAAU,CAACc,aAAa,IAAId,UAAU,CAACe,IAAI,CAACC,SAAS,CAAA;AAChE,OAAA;AACA;MACAtF,KAAK,GAAG,CAACwE,IAAI,IAAInE,KAAK,CAAC6D,OAAO,IAAIY,OAAO,CAAA;AAC7C,KAAA;AACA;SACK;MACD,IAAIzE,KAAK,CAACkF,KAAK,GAAGpK,IAAI,CAACqK,cAAc,CAACrI,CAAC,EAAE;AACrCoH,QAAAA,SAAS,GAAI,CAAC,CAAA;QACdD,UAAU,GAAGrB,KAAK,CAACwC,KAAK,CAAA;AACxBzF,QAAAA,KAAK,GAAQ,KAAK,CAAA;AACtB,OAAC,MACI;AACDuE,QAAAA,SAAS,GAAItB,KAAK,CAACyC,KAAK,GAAG,CAAC,CAAA;QAC5BpB,UAAU,GAAGrB,KAAK,CAAC0C,IAAI,CAAA;AACvB3F,QAAAA,KAAK,GAAQ,IAAI,CAAA;AACrB,OAAA;MACAoE,GAAG,GAAGjJ,IAAI,CAAC0G,UAAU,CAAC+D,MAAM,CAACrB,SAAS,CAAC,CAAA;AAC3C,KAAA;AACA,IAAA,IAAID,UAAU,KAAK3I,EAAE,CAAC2I,UAAU,IAAI3I,EAAE,CAACqE,KAAK,KAAKA,KAAK,IAAIrE,EAAE,CAAC6I,IAAI,KAAKA,IAAI,EAAE;AACxEpH,MAAAA,OAAO,CAAC+G,KAAK,GAAGxI,EAAE,CAACkK,YAAY,CAAA;AAC/B;AACA,MAAA,OAAA;AACJ,KAAA;AACA,IAAA,IAAIlK,EAAE,CAAC2I,UAAU,KAAKA,UAAU,EAAE;AAAA,MAAA,IAAAwB,qBAAA,CAAA;MAC9B,CAAAA,qBAAA,GAAAjE,UAAU,CAACkE,UAAU,CAACpK,EAAE,CAAC2I,UAAU,CAAC,cAAAwB,qBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAApCA,qBAAA,CAAsCE,SAAS,CAACrK,EAAE,CAACmE,iBAAiB,CAAC,CAAA;AACzE,KAAA;IACAnE,EAAE,CAAC2I,UAAU,GAAGA,UAAU,CAAA;IAC1B3I,EAAE,CAACqE,KAAK,GAAQA,KAAK,CAAA;IACrBrE,EAAE,CAAC6I,IAAI,GAASA,IAAI,CAAA;AACpB,IAAA;AACI;AACA;IACAF,UAAU,KAAKlH,OAAO,CAACqE,WAAW;AAClC;IACC,CAACzB,KAAK,IAAI,CAACwE,IAAI,IAAID,SAAS,KAAK,CAAC,IAAItB,KAAK,CAACkC,SAAU;AACvD;IACCnF,KAAK,IAAIsE,UAAU,CAACc,aAAa,IAAId,UAAU,CAACe,IAAI,CAACC,SAAS,IAAIrC,KAAK,CAACC,OAAO,CAACoB,UAAU,CAAC,KAAKrB,KAAK,CAACyC,KAAK,GAAG,CAAE,EACnH;AACEvB,MAAAA,KAAK,GAAG,KAAK,CAAA;AACjB,KAAA;IACA,IAAIlB,KAAK,CAACgC,IAAI,EAAE;AACZR,MAAAA,YAAY,GAAGzE,KAAK,GAAGsE,UAAU,CAAC2B,WAAW,GAAG3B,UAAU,CAAA;AAC1D;AACA,MAAA,IAAIlH,OAAO,CAACuF,OAAO,CAACuD,IAAI,CAACC,GAAG,IAAIA,GAAG,CAAC3E,QAAQ,CAAC8C,UAAU,CAAC,CAAC,EAAE;AACvDH,QAAAA,KAAK,GAAG,KAAK,CAAA;AACjB,OAAA;MACA/G,OAAO,CAACgJ,MAAM,GAAGjC,KAAK,IAAIK,IAAI,GAAGF,UAAU,GAAGA,UAAU,CAAC8B,MAAM,CAAA;AAC/DzK,MAAAA,EAAE,CAAC0K,YAAY,CAAC1K,EAAE,CAAC2K,UAAU,CAAC,CAAA;AAC9B,MAAA,IAAIhC,UAAU,IAAIA,UAAU,CAACY,QAAQ,IAAI,CAACZ,UAAU,CAACiC,UAAU,CAACtD,KAAK,CAAC,EAAE;AACpEtH,QAAAA,EAAE,CAAC2K,UAAU,GAAG3K,EAAE,CAAC6K,UAAU,CAAC,MAAMrL,IAAI,CAACsL,MAAM,CAACnC,UAAU,CAAC,EAAE3I,EAAE,CAACb,kBAAkB,CAAC,CAAA;AACvF,OAAA;AACJ,KAAC,MACI;AACD2J,MAAAA,YAAY,GAAGzE,KAAK,GAAGiD,KAAK,CAAC+B,KAAK,CAACT,SAAS,GAAG,CAAC,CAAC,GAAGD,UAAU,CAAA;AAClE,KAAA;IACAF,GAAG,CAACsC,SAAS,CAAC/K,EAAE,CAACmE,iBAAiB,EAAEqE,KAAK,IAAIK,IAAI,CAAC,CAAA;AAClD;AACA,IAAA,IAAI,CAACA,IAAI,IAAID,SAAS,KAAKtB,KAAK,CAACC,OAAO,CAAC9F,OAAO,CAACqE,WAAW,CAAC,IAAIzB,KAAK,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,IAC5E5C,OAAO,CAACgJ,MAAM,IAAIhJ,OAAO,CAACqE,WAAW,CAAC2E,MAAM,KAAKhJ,OAAO,CAACgJ,MAAM,EAAE;AACjEjC,MAAAA,KAAK,GAAG,KAAK,CAAA;AACjB,KAAA;AACA;AACA;AACAC,IAAAA,GAAG,IAAIrG,SAAS,CAAC4I,aAAa,CAAChL,EAAE,CAACiE,aAAa,EAAEgH,IAAI,CAACC,GAAG,CAACzC,GAAG,CAACtG,GAAG,IAAIkC,KAAK,GAAGoE,GAAG,CAACtH,OAAO,CAACe,qBAAqB,EAAE,CAAC+G,MAAM,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAA;AACjI;IACAjJ,EAAE,CAACiE,aAAa,CAACjB,KAAK,CAACmI,UAAU,GAAGtC,IAAI,GAAG,QAAQ,GAAG,SAAS,CAAA;IAC/D7I,EAAE,CAACiE,aAAa,CAACpB,SAAS,CAACuI,MAAM,CAAC,gBAAgB,EAAE,CAAC5C,KAAK,CAAC,CAAA;AAC3D;IACA/G,OAAO,CAACqH,YAAY,GAAGA,YAAY,CAAA;AACnCrH,IAAAA,OAAO,CAAC+G,KAAK,GAAGxI,EAAE,CAACkK,YAAY,GAAG1B,KAAK,CAAA;AAC3C,GAAA;AACA;AACJ;AACA;AACA;EACI,MAAM6C,MAAMA,CAAC3G,KAAK,EAAE;IAChB,MACI1E,EAAE,GAAY,IAAI;AAClB,MAAA;AAAEqF,QAAAA,MAAAA;AAAO,OAAC,GAAIrF,EAAE;AAChB,MAAA;AAAEyB,QAAAA,OAAAA;AAAQ,OAAC,GAAGiD,KAAK,CAAA;IACvBjD,OAAO,CAAC+G,KAAK,GAAG/G,OAAO,CAAC+G,KAAK,IAAIxI,EAAE,CAACkK,YAAY,CAAA;IAChD,IAAIzI,OAAO,CAAC+G,KAAK,EAAE;MACf/G,OAAO,CAAC6J,KAAK,GAAG,IAAI,CAAA;AACpB,MAAA,IAAIjG,MAAM,CAACiC,KAAK,CAACgC,IAAI,EAAE;AACnB;QACA7H,OAAO,CAAC8J,kBAAkB,GAAG9J,OAAO,CAACuF,OAAO,CAACwE,GAAG,CAAE9E,MAAM,IAAA;AAAA,UAAA,IAAA+E,cAAA,CAAA;UAAA,OAAM;YAC1D/E,MAAM;YACNgF,QAAQ,EAAA,CAAAD,cAAA,GAAM/E,MAAM,CAAC+D,MAAM,MAAA,IAAA,IAAAgB,cAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAbA,cAAA,CAAeE,EAAE;YAC/BC,WAAW,EAAGlF,MAAM,CAACkF,WAAAA;WACxB,CAAA;AAAA,SAAC,CAAC,CAAA;AACP,OAAA;AACA;MACA,IAAIC,MAAM,GAAG,MAAM7L,EAAE,CAAC8L,OAAO,CAAC,2BAA2B,EAAEpH,KAAK,CAAC,CAAA;MACjE,IAAImH,MAAM,KAAK,KAAK,EAAE;QAClBpK,OAAO,CAAC+G,KAAK,GAAG,KAAK,CAAA;AACzB,OAAA;AACA;MACAqD,MAAM,GAAG,MAAMxG,MAAM,CAACyG,OAAO,CAAC,2BAA2B,EAAEpH,KAAK,CAAC,CAAA;MACjE,IAAImH,MAAM,KAAK,KAAK,EAAE;QAClBpK,OAAO,CAAC+G,KAAK,GAAG,KAAK,CAAA;AACzB,OAAA;MACA,MAAMxI,EAAE,CAACH,UAAU,CAACkM,cAAc,CAAC/L,EAAE,CAACiE,aAAa,EAAE;AAAE+H,QAAAA,KAAK,EAAG,OAAA;AAAQ,OAAC,CAAC,CAAA;AACzE,MAAA,MAAMhM,EAAE,CAACiM,eAAe,CAACxK,OAAO,CAAC,CAAA;AACrC,KAAA;AACA;AACA;AACAzB,IAAAA,EAAE,CAAC0K,YAAY,CAAC1K,EAAE,CAAC2K,UAAU,CAAC,CAAA;IAC9B3K,EAAE,CAAC2I,UAAU,GAAG3I,EAAE,CAACqE,KAAK,GAAGrE,EAAE,CAAC6I,IAAI,GAAG,IAAI,CAAA;AACzC7I,IAAAA,EAAE,CAAC8L,OAAO,CAAC,aAAa,EAAEpH,KAAK,CAAC,CAAA;AAChCW,IAAAA,MAAM,CAACyG,OAAO,CAAC,aAAa,EAAEpH,KAAK,CAAC,CAAA;AACxC,GAAA;EACA,MAAMuH,eAAeA,CAACxK,OAAO,EAAE;IAC3B,MACIzB,EAAE,GAAuB,IAAI;AAC7B,MAAA;AAAER,QAAAA,IAAAA;AAAK,OAAC,GAAiBQ,EAAE;AAC3B,MAAA;QAAEsH,KAAK;AAAEY,QAAAA,WAAAA;AAAY,OAAC,GAAG1I,IAAI,CAAA;IACjC,IAAI;AAAEwH,MAAAA,OAAAA;AAAQ,KAAC,GAAGvF,OAAO,CAAA;IACzBA,OAAO,CAAC+G,KAAK,GAAG/G,OAAO,CAAC+G,KAAK,IAAI,CAACxB,OAAO,CAACuD,IAAI,CAACC,GAAG,IAAI,CAAClD,KAAK,CAACL,QAAQ,CAACuD,GAAG,CAAC,CAAC,CAAA;IAC3E,IAAI/I,OAAO,CAAC+G,KAAK,EAAE;AACf,MAAA,IAAIqD,MAAM,CAAA;MACV,IAAIvE,KAAK,CAACgC,IAAI,EAAE;QAAA,IAAA4C,qBAAA,EAAAC,sBAAA,CAAA;AACZ;AACAnF,QAAAA,OAAO,GAAGA,OAAO,CAACF,MAAM,CAACJ,MAAM,IAAI,CAACA,MAAM,CAAC+D,MAAM,IAAI/D,MAAM,CAAC0F,WAAW,CAAC3B,MAAM,IAAI,CAACzD,OAAO,CAACC,QAAQ,CAACwD,MAAM,CAAC,EAAE,IAAI,CAAC,CAAC,CAAA;AACnHoB,QAAAA,MAAM,GAAG,MAAMpK,OAAO,CAACgJ,MAAM,CAAC4B,cAAc,CAACrF,OAAO,EAAEhH,EAAE,CAAC6I,IAAI,IAAAqD,qBAAA,GAAGzK,OAAO,CAACgJ,MAAM,CAAC6B,QAAQ,MAAA,IAAA,IAAAJ,qBAAA,KAAvBA,KAAAA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,qBAAA,CAA0B,CAAC,CAAC,GAAGzK,OAAO,CAACqH,YAAY,CAAC,CAAA;AACpH;AACAtJ,QAAAA,IAAI,CAAC0G,UAAU,CAACqG,OAAO,CAACxF,CAAC,IAAIA,CAAC,CAACsD,SAAS,CAACrK,EAAE,CAACmE,iBAAiB,CAAC,CAAC,CAAA;AAC/D;QACA,IAAI,CAAC1C,OAAO,CAACgJ,MAAM,CAACG,UAAU,EAAE,IAAA,CAAAuB,sBAAA,GAAI1K,OAAO,CAACgJ,MAAM,CAAC6B,QAAQ,MAAA,IAAA,IAAAH,sBAAA,KAAvBA,KAAAA,CAAAA,IAAAA,sBAAA,CAAyB9I,MAAM,EAAE;AACjE7D,UAAAA,IAAI,CAACsL,MAAM,CAACrJ,OAAO,CAACgJ,MAAM,CAAC,CAAA;AAC/B,SAAA;AACAhJ,QAAAA,OAAO,CAAC+G,KAAK,GAAGqD,MAAM,KAAK,KAAK,CAAA;OACnC,MACI,IAAIvE,KAAK,CAACkC,SAAS,IAAIxJ,EAAE,CAAC6I,IAAI,EAAE;QACjCvB,KAAK,CAACkF,IAAI,CAACxF,OAAO,EAAEM,KAAK,CAAC+B,KAAK,CAAC/B,KAAK,CAACC,OAAO,CAAC9F,OAAO,CAACqH,YAAY,CAAC,GAAG,CAAC,CAAC,CAAC,CAAA;AAC7E,OAAC,MACI;QACDxB,KAAK,CAACkF,IAAI,CAACxF,OAAO,EAAEvF,OAAO,CAACqH,YAAY,CAAC,CAAA;AAC7C,OAAA;MACA,IAAI,CAAAZ,WAAW,KAAA,IAAA,IAAXA,WAAW,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAXA,WAAW,CAAEuE,SAAS,KAAI,CAAC,EAAE;QAC7BjN,IAAI,CAACkN,YAAY,GAAG,IAAI,CAAA;AACxB;QACAlN,IAAI,CAACmN,SAAS,CAAC;UACXnN,IAAI;UACJkH,MAAM,EAAKwB,WAAW,CAACxB,MAAM;UAC7BkG,QAAQ,EAAG1E,WAAW,CAAC0E,QAAAA;AAC3B,SAAC,CAAC,CAAA;AACN,OAAA;MACAtF,KAAK,CAACuF,YAAY,EAAE,CAAA;AACxB,KAAA;AACApL,IAAAA,OAAO,CAACqL,QAAQ,CAACrL,OAAO,CAAC+G,KAAK,CAAC,CAAA;IAC/BhJ,IAAI,CAAC2B,OAAO,CAAC0B,SAAS,CAACuF,MAAM,CAAC,kBAAkB,CAAC,CAAA;AACrD,GAAA;AACA;AACJ;AACA;AACA;AACI2E,EAAAA,OAAOA,GAAG;IACN,MACI/M,EAAE,GAAS,IAAI;AACf,MAAA;AAAER,QAAAA,IAAAA;AAAK,OAAC,GAAGQ,EAAE;AACb2H,MAAAA,QAAQ,GAAGnI,IAAI,CAACsI,QAAQ,CAACH,QAAQ,CAAA;IACrCnI,IAAI,CAAC2B,OAAO,CAAC0B,SAAS,CAACuF,MAAM,CAAC,kBAAkB,CAAC,CAAA;AACjD,IAAA,IAAIT,QAAQ,EAAE;AACVA,MAAAA,QAAQ,CAACjC,QAAQ,GAAG1F,EAAE,CAAC+H,qBAAqB,CAAA;AAChD,KAAA;AACA/H,IAAAA,EAAE,CAACiE,aAAa,CAACmE,MAAM,EAAE,CAAA;IACzBhG,SAAS,CAACmB,iBAAiB,CACvB/D,IAAI,CAAC2B,OAAO,EACZ,GAAGnB,EAAE,CAACmE,iBACV,CAAC,CAAA;AACL,GAAA;AACA;AACA;AACA6I,EAAAA,OAAOA,CAAC;AAAEC,IAAAA,UAAAA;AAAW,GAAC,EAAE;AACpB;AACA,IAAA,IAAIA,UAAU,EAAE;MACZ,IAAI,CAAClN,IAAI,EAAE,CAAA;AACf,KAAA;AACJ,GAAA;AACA;EACAmN,cAAcA,CAACC,IAAI,EAAE;AACjB,IAAA,IAAI,CAAC3N,IAAI,CAAC2B,OAAO,CAAC0B,SAAS,CAACuI,MAAM,CAAC,yBAAyB,EAAE+B,IAAI,CAAC,CAAA;AACvE,GAAA;AACJ,CAAA;AACAjP,UAAU,CAACkP,YAAY,GAAG,EAAE,CAAA;AAC5BlP,UAAU,CAACmP,MAAM,GAAG,YAAY,CAAA;AAAEC,kBAAkB,CAACC,eAAe,CAACrP,UAAU,EAAE,KAAK,CAAC,CAAA;AACvFoP,kBAAkB,CAACC,eAAe,CAACrP,UAAU,EAAE,IAAI,EAAE,OAAO,CAAC;;ACrmB7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe,MAAMsP,SAAS,SAASpP,cAAc,CAAC;EAClD,OAAOW,KAAK,GAAG,WAAW,CAAA;AAC1B,EAAA,OAAOC,YAAY,GAAG;AAClB;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQyO,IAAAA,MAAM,EAAG,IAAI;AACb;AACR;AACA;AACA;AACA;AACA;AACQC,IAAAA,SAAS,EAAG,oBAAA;GACf,CAAA;AACD;AACJ;AACA;AACA;AACA;AACA;AACI,EAAA,OAAOtJ,YAAY,GAAG;AAClBuJ,IAAAA,MAAM,EAAG,CAAC,OAAO,EAAE,aAAa,CAAA;GACnC,CAAA;AACD,EAAA,OAAOC,UAAU,GAAG;AAChBC,IAAAA,UAAU,EAAM,CA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"}