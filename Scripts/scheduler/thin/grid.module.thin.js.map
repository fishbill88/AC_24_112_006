{"version":3,"file":"grid.module.thin.js","sources":["../../../Grid/lib/Grid/column/ActionColumn.js","../../../Grid/lib/Grid/column/AggregateColumn.js","../../../Grid/lib/Grid/column/PercentColumn.js","../../../Grid/lib/Grid/column/RatingColumn.js","../../../Grid/lib/Grid/column/TemplateColumn.js","../../../Grid/lib/Grid/column/TimeColumn.js","../../../Grid/lib/Grid/feature/CellCopyPaste.js","../../../Grid/lib/Grid/feature/CellTooltip.js","../../../Grid/lib/Grid/feature/ColumnRename.js","../../../Grid/lib/Grid/feature/FillHandle.js","../../../Grid/lib/Grid/feature/MergeCells.js","../../../Grid/lib/Grid/feature/QuickFind.js","../../../Grid/lib/Grid/feature/RowExpander.js","../../../Grid/lib/Grid/feature/Search.js","../../../Grid/lib/Grid/feature/StickyCells.js","../../../Grid/lib/Grid/widget/TreeCombo.js","../../../Grid/bundle/entry.thin.js"],"sourcesContent":["import Column from './Column.js';\nimport ColumnStore from '../data/ColumnStore.js';\nimport DomHelper from '../../Core/helper/DomHelper.js';\nimport Tooltip from '../../Core/widget/Tooltip.js';\n\n/**\n * @module Grid/column/ActionColumn\n */\n\n/**\n * Config object for an action in an ActionColumn.\n * @typedef {Object} ActionConfig\n * @property {String} cls CSS Class for action icon\n * @property {Function|String|TooltipConfig} tooltip Tooltip text, or a config object which can reconfigure the shared\n * tooltip by setting boolean, numeric and string config values, or a function to return the tooltip text, passed the\n * row's `record`\n * @property {Function|Boolean} visible Boolean to define the action icon visibility or a callback function, passed the\n * row's `record`, to change it dynamically\n * @property {Function} onClick Callback to handle click action item event, passed the row's `record`\n * @property {Boolean} showForGroup Set to true to have action icon visible in group headers only when using the `group`\n * feature\n * @property {Function|String} renderer A render function, or the name of a function in the Grid's ownership tree used\n * to define the action element. Passed the row's `record`, expected to return an HTML string or a DOM config object.\n * **Note**: when specified, the `cls` action config is ignored. Make sure you add an action icon manually, for example:\n * ```javascript\n * {\n *      type    : 'action',\n *      text    : 'Increase amount',\n *      actions : [{\n *          cls      : 'b-fa b-fa-plus', // this line will be ignored\n *          renderer : ({ record }) => '<i class=\"b-action-item b-fa b-fa-plus\"></i> ' + record.name,\n *          onClick  : ({ record }) => {}\n *      }]\n * }\n * ```\n *\n * or\n *\n * ```javascript\n * {\n *      type    : 'action',\n *      text    : 'Increase amount',\n *      actions : [{\n *          cls      : 'b-fa b-fa-plus', // this line will be ignored\n *          renderer : 'up.renderAction' // Defined on the Grid\n *          onClick  : ({ record }) => {}\n *      }]\n * }\n * ```\n */\n\n/**\n * A column that displays actions as clickable icons in the cell.\n *\n * {@inlineexample Grid/column/ActionColumn.js}\n *\n * ```javascript\n * new TreeGrid({\n *     appendTo : document.body,\n *     columns  : [{\n *         type    : 'action',\n *         text    : 'Increase amount',\n *         actions : [{\n *             cls      : 'b-fa b-fa-plus',\n *             renderer : ({ action, record }) => `<i class=\"b-action-item ${action.cls} b-${record.enabled ? \"green\" : \"red\"}-class\"></i>`,\n *             visible  : ({ record }) => record.canAdd,\n *             tooltip  : ({ record }) => `<p class=\"b-nicer-than-default\">Add to ${record.name}</p>`,\n *             onClick  : ({ record }) => console.log(`Adding ${record.name}`)\n *         }, {\n *             cls     : 'b-fa b-fa-pencil',\n *             tooltip : 'Edit note',\n *             onClick : ({ record }) => console.log(`Editing ${record.name}`)\n *         }]\n *     }]\n * });\n * ```\n *\n * Actions may be placed in {@link Grid/feature/Group} headers, by setting `action.showForGroup` to `true`. Those\n * actions will not be shown on normal rows.\n *\n * @extends Grid/column/Column\n * @classType action\n * @column\n */\nexport default class ActionColumn extends Column {\n\n    static type = 'action';\n\n    static fields = [\n        /**\n         * An array of action config objects, see {@link #typedef-ActionConfig} for details.\n         *\n         * ```javascript\n         * new Grid({\n         *     columns  : [{\n         *         type    : 'action',\n         *         text    : 'Actions',\n         *         actions : [{\n         *             cls      : 'b-fa b-fa-plus',\n         *             visible  : ({ record }) => record.canAdd,\n         *             onClick  : ({ record }) => console.log(`Adding ${record.name}`)\n         *         }, {\n         *             cls     : 'b-fa b-fa-pencil',\n         *             tooltip : 'Edit note',\n         *             onClick : ({ record }) => console.log(`Editing ${record.name}`)\n         *         }]\n         *     }]\n         * });\n         * ```\n         *\n         * @config {ActionConfig[]} actions List of action configs\n         * @category Common\n         */\n        { name : 'actions', type : 'array' },\n\n        /**\n         * Set true to hide disable actions in this column if the grid is {@link Core.widget.Widget#config-readOnly}\n         * @config {Boolean} disableIfGridReadOnly\n         * @default\n         * @category Common\n         */\n        { name : 'disableIfGridReadOnly', defaultValue : false }\n    ];\n\n    static defaults = {\n        /**\n         * Filtering by action column is not supported by default, because it has a custom renderer and uses HTML with icons as content.\n         * @config {Boolean} filterable\n         * @default false\n         * @category Interaction\n         * @hide\n         */\n        filterable : false,\n\n        /**\n         * Grouping by action column is not supported by default, because it has a custom renderer and uses HTML with icons as content.\n         * @config {Boolean} groupable\n         * @default false\n         * @category Interaction\n         * @hide\n         */\n        groupable : false,\n\n        /**\n         * Sorting by action column is not supported by default, because it has a custom renderer and uses HTML with icons as content.\n         * @config {Boolean} sortable\n         * @default false\n         * @category Interaction\n         * @hide\n         */\n        sortable : false,\n\n        /**\n         * Editor for action column is not supported by default, because it has a custom renderer and uses HTML with icons as content.\n         * @config {Boolean} editor\n         * @default false\n         * @category Interaction\n         * @hide\n         */\n        editor : false,\n\n        /**\n         * Searching by action column is not supported by default, because it has a custom renderer and uses HTML with icons as content.\n         * @config {Boolean} searchable\n         * @default false\n         * @category Interaction\n         * @hide\n         */\n        searchable : false,\n\n        /**\n         * By default, for action column this flag is switched to `true`, because the content of this column is always HTML.\n         * @config {Boolean} htmlEncode\n         * @default false\n         * @category Misc\n         * @hide\n         */\n        htmlEncode : false,\n\n        /**\n         * Set to `true` to allow the column to being drag-resized when the ColumnResize plugin is enabled.\n         * @config {Boolean} resizable\n         * @default false\n         * @category Interaction\n         */\n        resizable : false,\n\n        /**\n         * Column minimal width. If value is Number then minimal width is in pixels.\n         * @config {Number|String} minWidth\n         * @default 30\n         * @category Layout\n         */\n        minWidth : 30\n    };\n\n    get groupHeaderReserved() {\n        return true;\n    }\n\n    construct(config, store) {\n        const me = this;\n\n        super.construct(...arguments);\n\n        // use auto-size only as default behaviour\n        if (!config.width && !config.flex) {\n            me.grid.ion({ paint : 'updateAutoWidth', thisObj : me });\n        }\n\n        if (me.disableIfGridReadOnly) {\n            me.grid.element.classList.add('b-actioncolumn-readonly');\n        }\n\n        me.externalRenderer = me.renderer;\n        me.renderer = me.internalRenderer;\n    }\n\n    /**\n     * Renderer that displays action icon(s) in the cell.\n     * @private\n     */\n    internalRenderer({ grid, column, record, callExternalRenderer = true }) {\n        const\n            inGroupTitle = record && ('groupRowFor' in record.meta),\n            { subGrid }  = column;\n\n        if (callExternalRenderer) {\n            this.externalRenderer?.(...arguments);\n        }\n\n        return {\n            className : { 'b-action-ct' : 1 },\n            children  : column.actions?.map((actionConfig, index) => {\n                if ('visible' in actionConfig) {\n                    if ((typeof actionConfig.visible === 'function') && actionConfig.visible({ record }) === false) {\n                        return '';\n                    }\n                    if (actionConfig.visible === false) {\n                        return '';\n                    }\n                }\n\n                // check if an action allowed to be shown in case of using grouping\n                if ((inGroupTitle && !actionConfig.showForGroup) || (!inGroupTitle && actionConfig.showForGroup)) {\n                    return '';\n                }\n\n                const\n                    {\n                        tooltip,\n                        renderer\n                    }    = actionConfig,\n                    btip = (typeof tooltip === 'function' || tooltip?.startsWith?.('up.')) ? subGrid.callback(tooltip, subGrid, [{ record }]) : tooltip || '';\n\n                // handle custom renderer if it is specified\n                if (renderer) {\n                    const customRendererData = subGrid.callback(renderer, subGrid, [{\n                        index,\n                        record,\n                        column,\n                        tooltip : btip,\n                        action  : actionConfig\n                    }]);\n\n                    // take of set data-index to make onClick handler work stable\n                    if (typeof customRendererData === 'string') {\n                        return {\n                            tag     : 'span',\n                            dataset : {\n                                ...Tooltip.encodeConfig(btip),\n                                index\n                            },\n                            html : customRendererData\n                        };\n                    }\n                    else {\n                        customRendererData.dataset = customRendererData.dataset || {};\n                        customRendererData.dataset.index = index;\n                        return customRendererData;\n                    }\n                }\n                else {\n                    return {\n                        tag     : 'button',\n                        dataset : {\n                            ...Tooltip.encodeConfig(btip),\n                            index\n                        },\n                        'aria-label' : btip,\n                        className    : {\n                            'b-tool'           : 1,\n                            'b-action-item'    : 1,\n                            [actionConfig.cls] : actionConfig.cls\n                        }\n                    };\n                }\n            })\n        };\n    }\n\n    /**\n     * Handle icon click and call action handler.\n     * @private\n     */\n    onCellClick({ grid, column, record, target }) {\n        if (column !== this || !target.classList.contains('b-action-item')) {\n            return;\n        }\n\n        let actionIndex = target.dataset.index;\n        // index may be set in a parent node if user used an html string in his custom renderer\n        // and we take care to set this property to support onClick handler\n        if (!actionIndex) {\n            actionIndex = target.parentElement.dataset && target.parentElement.dataset.index;\n        }\n\n        const\n            action        = column.actions?.[actionIndex],\n            actionHandler = action && action.onClick;\n\n        if (actionHandler) {\n            this.callback(actionHandler, column, [{ record, action, target }]);\n        }\n    }\n\n    /**\n     * Update width for actions column to fit content.\n     * @private\n     */\n    updateAutoWidth() {\n        const\n            me           = this,\n            groupActions = [],\n            {\n                actions : oldActions\n            }            = me;\n\n        // header may be disabled, in that case we won't be able to calculate the width properly\n        if (!me.element) {\n            return;\n        }\n\n        const actions = me.actions = [];\n\n        // collect group and non group actions to check length later\n        oldActions?.forEach(actionOriginal => {\n            const action = { ...actionOriginal };\n\n            // remove possible visibility condition to make sure an action will exists in test HTML\n            delete action.visible;\n            // group actions shows in different row and never together with non group\n            if (action.showForGroup) {\n                delete action.showForGroup;\n                groupActions.push(action);\n            }\n            else {\n                actions.push(action);\n            }\n        });\n\n        // use longest actions length to calculate column width\n        if (groupActions.length > actions.length) {\n            me._actions = groupActions;\n        }\n\n        const actionsHtml = DomHelper.createElement(me.internalRenderer({ column : me, callExternalRenderer : false })).outerHTML;\n\n        me.width = DomHelper.measureText(actionsHtml, me.element, true, me.element.parentElement);\n        me.actions = oldActions;\n    }\n}\n\nColumnStore.registerColumnType(ActionColumn);\nActionColumn.exposeProperties();\n","import ColumnStore from '../data/ColumnStore.js';\nimport NumberColumn from './NumberColumn.js';\n\n/**\n * @module Grid/column/AggregateColumn\n */\n\n/**\n * A column, which, when used as part of a {@link Grid.view.TreeGrid}, aggregates the values of this column's descendants using\n * a configured function which defaults to `sum`. The aggregate value is re-calculated after any change to the data,\n * and if you want aggregate values to be change-tracked, please set {@link #config-includeParentInChangeSet} to true.\n *\n * Default editor depends on the data field type. If it is a number, default editor is a {@link Core/widget/NumberField}.\n * Otherwise Default editor is a {@link Core/widget/TextField}.\n *\n * ```javascript\n * const grid = new TreeGrid({\n *     // Custom aggregation handler.\n *     // For test purposes, this just does \"sum\"\n *     myAggregator(...values) {\n *         let result = 0;\n *\n *         for (let i = 0, { length } = values; i < length; i++) {\n *             result += parseInt(args[i], 10);\n *         }\n *         return result;\n *     },\n *     columns : [\n *         { field : 'name', text : 'Name' },\n *\n *         // Will sum the ages of leaf nodes. This is the default.\n *         { type : 'aggregate', field : 'age', text : 'Age', renderer : ({ value }) => `<b>${value}<b>` },\n *\n *         // Will use AggregateColumn's built-in avg of scores of leaf nodes\n *         { type : 'aggregate', field : 'score', text : 'Score', function : 'avg' },\n *\n *         // Will use the grid's myAggregator function\n *         { type : 'aggregate', field : 'revenue', text : 'Revenue', function : 'up.myAggregator' },\n *     ]\n * });\n * ```\n *\n * @extends Grid/column/NumberColumn\n * @classType aggregate\n * @column\n */\nexport default class AggregateColumn extends NumberColumn {\n    //region Config\n\n    static type = 'aggregate';\n\n    static fields = [\n        'function',\n        'includeParentInChangeSet'\n    ];\n\n    static get defaults() {\n        return {\n            /**\n             * Math Function name, or function name prepended by `\"up.\"` that is resolvable in an\n             * ancestor component (such as the owning Grid, or a hight Container), or a function to\n             * use to aggregate child record values for this column, or a function.\n             *\n             * This Column is provided with a `sum` and `avg` function. The default function is `sum`\n             * which is used for the aggregation.\n             *\n             * The function is passed a set of child node values, each value in a separate argument\n             * and should return a single value based upon the value set passed.\n             * @config {Function|String}\n             * @category Common\n             */\n            function : 'sum',\n\n            /**\n             * Set to `true` to include changes to parent (aggregate) rows in the store's modification tracking.\n             * @config {Boolean} includeParentInChangeSet\n             * @category Common\n             */\n            includeParentInChangeSet : false\n        };\n    }\n\n    construct(data, columnStore) {\n        this.configuredAlign = 'align' in data;\n        this.configuredEditor = 'editor' in data;\n\n        super.construct(...arguments);\n\n        const { grid } = columnStore;\n\n        // 'sum' is reserved by Summary feature, so we use a different name\n        if (this.function === 'sum') {\n            this.function = 'sumChildren';\n        }\n\n        if (grid) {\n            this.store = grid.store;\n        }\n    }\n\n    set store(store) {\n        const\n            me             = this,\n            storeListeners = {\n                update  : 'onRecordUpdate',\n                thisObj : me,\n                prio    : 1000\n            },\n            oldStore = me._store;\n\n        if (store !== oldStore) {\n            if (oldStore) {\n                oldStore.un(storeListeners);\n            }\n\n            me._store = store;\n\n            const\n                { modelClass } = store,\n                field = modelClass.fieldMap[me.field];\n\n            // It's *likely*, but not certain that this will be used for a numeric field.\n            // Use numeric defaults unless configured otherwise if so.\n            if (field && field.type === 'number') {\n                if (!me.configuredAlign) {\n                    me.align = 'end';\n                }\n                if (!me.configuredEditor) {\n                    me.editor = 'number';\n                }\n            }\n\n            store.ion(storeListeners);\n        }\n    }\n\n    canEdit(record) {\n        return record.isLeaf;\n    }\n\n    get store() {\n        return this._store;\n    }\n\n    sumChildren(...args) {\n        let result = 0;\n\n        for (let i = 0, { length } = args; i < length; i++) {\n            result += parseFloat(args[i] || 0, 10);\n        }\n        return result;\n    }\n\n    avg(...args) {\n        let result = 0;\n        const { length } = args;\n\n        for (let i = 0; i < length; i++) {\n            result += parseFloat(args[i] || 0, 10);\n        }\n        return result / length;\n    }\n\n    onRecordUpdate({ record, changes }) {\n        const\n            me = this,\n            { rowManager } = me.grid;\n\n        if (me.field in changes) {\n            if (record.isLeaf) {\n                record.bubble(rec => {\n                    const row = rowManager.getRowFor(rec);\n\n                    if (row) {\n                        const cellElement = row.getCell(me.field);\n\n                        if (cellElement) {\n                            row.renderCell(cellElement);\n                        }\n                    }\n                }, true);\n            }\n        }\n    }\n\n    getRawValue(record) {\n        let value = 0;\n\n        if (record.children?.length) {\n            const\n                me       = this,\n                fn       = me.function,\n                isMathFn = typeof fn === 'string' && typeof Math[fn] === 'function',\n                {\n                    handler,\n                    thisObj\n                } = isMathFn ? {\n                    handler : Math[fn],\n                    thisObj : Math\n                } : me.resolveCallback(fn);\n\n            // Gather all child node values before passing them to the aggregator function.\n            value = handler.apply(thisObj, record.children.map(r => me.getRawValue(r)));\n            if (me.includeParentInChangeSet) {\n                record.set(me.field, value, true);\n            }\n            else {\n                record.setData(me.field, value);\n            }\n        }\n        else {\n            value = record[this.field];\n        }\n        return value;\n    }\n\n    canFillValue() {\n        return false;\n    }\n}\n\nColumnStore.registerColumnType(AggregateColumn, true);\nAggregateColumn.exposeProperties();\n","import NumberColumn from './NumberColumn.js';\nimport ColumnStore from '../data/ColumnStore.js';\n\n/**\n * @module Grid/column/PercentColumn\n */\n\n/**\n * A column that display a basic progress bar.\n *\n * {@inlineexample Grid/column/PercentColumn.js}\n *\n * ```javascript\n * new Grid({\n *     appendTo : document.body,\n *\n *     columns : [\n *         { type: 'percent', text: 'Progress', data: 'progress' }\n *     ]\n * });\n * ```\n *\n * Default editor is a {@link Core.widget.NumberField NumberField}.\n *\n * @extends Grid/column/NumberColumn\n * @classType percent\n * @column\n */\nexport default class PercentColumn extends NumberColumn {\n\n    static type = 'percent';\n\n    // Type to use when auto adding field\n    static fieldType = 'number';\n\n    static fields = ['showValue', 'lowThreshold'];\n\n    static get defaults() {\n        return {\n            min : 0,\n            max : 100,\n\n            /**\n             * Set to `true` to render the number value inside the bar, for example \"15%\"\n             * @config {Boolean}\n             * @default\n             * @category Rendering\n             */\n            showValue : false,\n\n            /**\n             * When below this percentage the bar will have `b-low` CSS class added. By default it turns the bar red.\n             * @config {Number}\n             * @default\n             * @category Rendering\n             */\n            lowThreshold : 20,\n\n            htmlEncode      : false,\n            searchable      : false,\n            summaryRenderer : sum => `${sum}%`,\n            fitMode         : false\n        };\n    }\n\n    constructor(config, store) {\n        super(...arguments);\n\n        this.internalCellCls = 'b-percent-bar-cell';\n    }\n\n    /**\n     * Renderer that displays a progress bar in the cell. If you create a custom renderer, and want to include the\n     * default markup you can call `defaultRenderer` from it.\n     *\n     * ```javascript\n     * new Grid({\n     *     columns: [\n     *         {\n     *             type: 'percent',\n     *             text : 'Percent',\n     *             field : 'percent',\n     *             renderer({ value }) {\n     *                 const domConfig = this.defaultRenderer();\n     *\n     *                 if (value > 100) {\n     *                     domConfig.className = b-percent-bar-outer over-allocated';\n     *                 }\n     *\n     *                 return domConfig;\n     *             }\n     *         }\n     *     ]\n     * }\n     * ```\n     *\n     * @param {Object} rendererData The data object passed to the renderer\n     * @param {Number} rendererData.value The value to display\n     * @returns {DomConfig} DomConfig object representing the default markup for the cells content\n     */\n    defaultRenderer({ value }) {\n        value = value || 0;\n\n        return {\n            className       : 'b-percent-bar-outer',\n            role            : 'progressbar',\n            'aria-Valuemin' : 0,\n            'aria-Valuemax' : 100,\n            'aria-Valuenow' : value,\n            tabIndex        : 0,\n            children        : [\n                {\n                    tag       : 'div',\n                    className : {\n                        'b-percent-bar' : 1,\n                        'b-zero'        : value === 0,\n                        'b-low'         : value < this.lowThreshold\n                    },\n                    style : {\n                        width : value + '%'\n                    },\n                    children : [\n                        this.showValue ? {\n                            tag  : 'span',\n                            text : value + '%'\n                        } : undefined\n                    ]\n                }\n            ]\n        };\n    }\n\n    // Null implementation because the column width drives the width of its content.\n    // So the concept of sizing to content is invalid here.\n    resizeToFitContent() {}\n}\n\nPercentColumn.sum = 'average';\n\nColumnStore.registerColumnType(PercentColumn, true);\n","import NumberColumn from './NumberColumn.js';\nimport ColumnStore from '../data/ColumnStore.js';\nimport ArrayHelper from '../../Core/helper/ArrayHelper.js';\n\n/**\n * @module Grid/column/RatingColumn\n */\n\n/**\n * A column that displays a star rating. Click a start to set a value, shift+click to unset a single start from the end.\n * Clicking the first and only star toggles it.\n *\n * This column uses a custom widget as its editor, and it is not intended to be changed.\n *\n * @extends Grid/column/NumberColumn\n *\n * @example\n * new Grid({\n *     appendTo : document.body,\n *\n *     columns : [\n *         { type: 'rating', max : 10, field: 'rating' }\n *     ]\n * });\n *\n * @classType rating\n * @inlineexample Grid/column/RatingColumn.js\n * @column\n */\nexport default class RatingColumn extends NumberColumn {\n\n    // <debug>\n    // region Localization test\n    static localization = [\n        'L{Column.cellLabel}'\n    ];\n    // endregion\n    // </debug>\n\n    static $name = 'RatingColumn';\n\n    static type = 'rating';\n\n    // Type to use when auto adding field\n    static fieldType = 'number';\n\n    static fields = ['emptyIcon', 'filledIcon', 'editable'];\n\n    static get defaults() {\n        return {\n            min : 0,\n            max : 5,\n\n            /**\n             * The empty rating icon to show\n             * @config {String}\n             * @category Rendering\n             */\n            emptyIcon : 'b-icon b-icon-star',\n\n            /**\n             * The filled rating icon to show\n             * @config {String}\n             * @category Rendering\n             */\n            filledIcon : 'b-icon b-icon-star',\n\n            /**\n             * Allow user to click an icon to change the value\n             * @config {Boolean}\n             * @category Interaction\n             */\n            editable : true,\n\n            filterType : 'number',\n            searchable : false,\n            width      : '11.2em',\n            htmlEncode : false,\n            minWidth   : '11.2em',\n            editor     : false,\n            fitMode    : 'value'\n        };\n    }\n\n    /**\n     * Renderer that displays a number of stars in the cell. Also adds CSS class 'b-rating-cell' to the cell.\n     * @private\n     */\n    renderer({ value }) {\n        return {\n            className : {\n                'b-rating-cell-inner' : 1,\n                'b-not-editable'      : !this.editable\n            },\n            children : ArrayHelper.populate(this.max, i => {\n                const filled = i < value;\n                return {\n                    tag       : 'i',\n                    className : {\n                        'b-rating-icon'                             : true,\n                        'b-filled'                                  : filled,\n                        'b-empty'                                   : !filled,\n                        [filled ? this.filledIcon : this.emptyIcon] : true\n                    }\n                };\n            })\n        };\n    }\n\n    onCellClick({ grid, column, record, target, event }) {\n        if (target.classList.contains('b-rating-icon') && !grid.readOnly && column.editable) {\n            let starIndex = [].indexOf.call(target.parentNode.childNodes, target);\n\n            if (target.classList.contains('b-filled') && (event.metaKey || event.shiftKey)) {\n                starIndex = starIndex - 1;\n            }\n\n            // Clicking first star when it is only one removes it\n            if (record.get(column.field) === 1 && starIndex === 0) {\n                starIndex = -1;\n            }\n\n            record.set(column.field, starIndex + 1);\n        }\n    }\n}\n\nColumnStore.registerColumnType(RatingColumn, true);\nRatingColumn.exposeProperties();\n","import Column from './Column.js';\nimport ColumnStore from '../data/ColumnStore.js';\n\n/**\n * @module Grid/column/TemplateColumn\n */\n\n/**\n * A column that uses a template for cell content. Any function can be used as template, and the function is passed { value, record, field } properties.\n * It should return a string which will be rendered in the cell.\n *\n * Default editor is a {@link Core.widget.TextField TextField}.\n *\n * @extends Grid/column/Column\n *\n * @example\n * new Grid({\n *     appendTo : document.body,\n *\n *     columns : [\n *         { type: 'template', field: 'age', template: ({value}) => `${value} years old` }\n *     ]\n * });\n *\n * @classType template\n * @inlineexample Grid/column/TemplateColumn.js\n * @column\n */\nexport default class TemplateColumn extends Column {\n\n    static type = 'template';\n\n    static fields = [\n        /**\n         * Template function used to generate a value displayed in the cell. Called with arguments `{ value, record, field }`\n         * @config {Function} template\n         * @param {Object} data An object that contains data about the cell being rendered.\n         * @param {*} data.value The value (only present when you set a `field` on the column)\n         * @param {Core.data.Model} data.record The record representing the row\n         * @param {String} data.field The column field name\n         * @category Common\n         */\n        'template'\n    ];\n\n    static get defaults() {\n        return {\n            htmlEncode : false\n        };\n    }\n\n    constructor(config, store) {\n        super(...arguments);\n\n        const me = this;\n\n        if (!me.template) {\n            throw new Error('TemplateColumn needs a template');\n        }\n\n        if (typeof me.template !== 'function') {\n            throw new Error('TemplateColumn.template must be a function');\n        }\n    }\n\n    /**\n     * Renderer that uses a template for cell content.\n     * @private\n     */\n    renderer(renderData) {\n        // If it's a special row, such as a group row, we can't use the user's template\n        if (!renderData.record.isSpecialRow) {\n            return this.template({\n                value  : renderData.value,\n                record : renderData.record,\n                field  : renderData.column.field\n            });\n        }\n    }\n}\n\nColumnStore.registerColumnType(TemplateColumn, true);\nTemplateColumn.exposeProperties();\n","import Column from './Column.js';\nimport ColumnStore from '../data/ColumnStore.js';\nimport DateHelper from '../../Core/helper/DateHelper.js';\n\n/**\n * @module Grid/column/TimeColumn\n */\n\n/**\n * A column that displays a time in the specified format (see {@link Core.helper.DateHelper#function-format-static} for formatting options).\n *\n * Default editor is a {@link Core.widget.TimeField TimeField}.\n *\n * @extends Grid/column/Column\n *\n * @example\n * new Grid({\n *     appendTo : document.body,\n *\n *     columns : [\n *          { type: 'time', text: 'Start time', format: 'HH:mm:ss', data: 'start' }\n *     ]\n * });\n *\n * @classType time\n * @inlineexample Grid/column/TimeColumn.js\n * @column\n */\nexport default class TimeColumn extends Column {\n\n    //region Config\n\n    static type = 'time';\n\n    // Type to use when auto adding field\n    static fieldType = 'date';\n\n    static fields = ['format'];\n\n    static get defaults() {\n        return {\n            /**\n             * Time format\n             * @config {String}\n             * @category Common\n             */\n            format : 'LT',\n\n            minWidth : 140,\n\n            filterType : 'time'\n        };\n    }\n\n    //endregion\n\n    //region Display\n\n    /**\n     * Renderer that displays the time with the specified format. Also adds cls 'b-time-cell' to the cell.\n     * @private\n     */\n    defaultRenderer({ value }) {\n        return value ? this.formatValue(value) : '';\n    }\n\n    /**\n     * Group renderer that displays the time with the specified format.\n     * @private\n     */\n    groupRenderer({ cellElement, groupRowFor }) {\n        cellElement.innerHTML = this.formatValue(groupRowFor);\n    }\n\n    //endregion\n\n    //region Formatter\n\n    /**\n     * Used by both renderer and groupRenderer to do the actual formatting of the time\n     * @private\n     * @param value\n     * @returns {String}\n     */\n    formatValue(value) {\n        // Ideally we should be served a time, but if not make it easier for the user by parsing\n        if (typeof value === 'string') {\n            value = DateHelper.parse(value, this.format);\n        }\n        return DateHelper.format(value, this.format);\n    }\n\n    //endregion\n\n    //region Getters/Setters\n    /**\n     * Get/Set format for time displayed in cell and editor (see {@link Core.helper.DateHelper#function-format-static} for formatting options)\n     * @property {String}\n     */\n    set format(value) {\n        const { editor } = this;\n\n        this.set('format', value);\n\n        if (editor) {\n            editor.format = value;\n        }\n    }\n\n    get format() {\n        return  this.get('format');\n    }\n\n    get defaultEditor() {\n        return {\n            name   : this.field,\n            type   : 'time',\n            format : this.format\n        };\n    }\n\n    //endregion\n}\n\nColumnStore.registerColumnType(TimeColumn, true);\nTimeColumn.exposeProperties();\n","import InstancePlugin from '../../Core/mixin/InstancePlugin.js';\nimport BrowserHelper from '../../Core/helper/BrowserHelper.js';\nimport VersionHelper from '../../Core/helper/VersionHelper.js';\nimport GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\n\n/**\n * @module Grid/feature/CellCopyPaste\n */\n\n/**\n * Allows using `[Ctrl/CMD + C]`, `[Ctrl/CMD + X]` and `[Ctrl/CMD + V]` to cut, copy and paste cell or cell ranges. Also\n * makes cut, copy and paste actions available via the cell context menu.\n *\n * <div class=\"note\">\n * Requires {@link Grid/view/Grid#config-selectionMode selectionMode.cell} to be activated. Also, if the\n * {@link Grid/feature/CellEdit} feature is disabled, the {@link #config-copyOnly} config will default to `true` which\n * prevents cut and paste actions completely. Set {@link #config-copyOnly} to `false` to prevent this behaviour.\n * </div>\n *\n * This feature will work alongside with {@link Grid/feature/RowCopyPaste} but there is differences on functionality.\n * * When used together, context menu options will be detailed so the user will know to copy the cell or the row.\n * * They will also detect what type of selection is present at the moment. If there are only rows selected, only row\n *   alternatives are shown in the context menu and the keyboard shortcuts will be processed by RowCopyPaste.\n * * If there are only cells selected, there will be context menu options for both row and cell but keyboard shortcuts\n *   will be handled by CellCopyPaste.\n * * They do not share clipboard, so it is possible to have rows and cells copied or cut at the same time.\n *\n * If the {@link https://developer.mozilla.org/en-US/docs/Web/API/Clipboard_API Clipboard API} is available, that will\n * be used. This enables copying and pasting between different Bryntum products or completely different applications.\n * Please note that only string values are supported.\n *\n * This feature is **disabled** by default\n *\n * ```javascript\n * const grid = new Grid({\n *     features : {\n *         cellCopyPaste : true\n *     }\n * });\n * ```\n *\n * {@inlineexample Grid/feature/CellCopyPaste.js}\n *\n * ## Keyboard shortcuts\n * The feature has the following default keyboard shortcuts:\n *\n * | Keys       | Action  | Action description                                                                      |\n * |------------|---------|-----------------------------------------------------------------------------------------|\n * | `Ctrl`+`C` | *copy*  | Calls {@link #function-copy} which copies selected cell values into the clipboard.      |\n * | `Ctrl`+`X` | *cut*   | Calls {@link #function-cut} which cuts out selected cell values and saves in clipboard. |\n * | `Ctrl`+`V` | *paste* | Calls {@link #function-paste} which inserts string values from the clipboard.           |\n *\n * <div class=\"note\">Please note that <code>Ctrl</code> is the equivalent to <code>Command</code> and <code>Alt</code>\n * is the equivalent to <code>Option</code> for Mac users</div>\n *\n * For more information on how to customize keyboard shortcuts, please see\n * [this guide](#Grid/guides/customization/keymap.md).\n *\n * @extends Core/mixin/InstancePlugin\n * @classtype cellCopyPaste\n * @feature\n */\nexport default class CellCopyPaste extends InstancePlugin {\n    static $name = 'CellCopyPaste';\n\n    static pluginConfig = {\n        chain : [\n            'populateCellMenu', 'afterSelectionModeChange'\n        ]\n    };\n\n    static configurable = {\n\n        /**\n         * If `true` this prevents cutting and pasting. Will default to `true` if {@link Grid/feature/CellEdit} feature is disabled.\n         * Set to `false` to prevent this behaviour.\n         * @config {Boolean}\n         */\n        copyOnly : null,\n\n        /**\n         * If an empty value (null or empty string) is copied or cut, this config will replace that value.\n         * This allows for clipboard data to skip columns.\n         *\n         * For example, look at these two selections\n         * |  ROW  |   0  |      1       |       2      |   3  |\n         * |-------|------|--------------|--------------|------|\n         * | ROW 1 | SEL1 | not selected | not selected | SEL2 |\n         * | ROW 2 | SEL3 | SEL4 (empty) | SEL5 (empty) | SEL6 |\n         *\n         * The clipboardData for `ROW 1` will look like this:\n         `* SEL1\\t\\t\\SEl2\\nSEL3\\t\\t\\SEL4`\n         *\n         * And `ROW 2` will look like this:\n         * `SEL3\\t\\u{0020}\\t\\u{0020}\\tSEL6`\n         *\n         * `ROW 1` will set value `SEL1` at column index 0 and `SEL2` at column index 3. This leaves column index 1 and\n         * 2 untouched.\n         *\n         * `ROW 2` will set value `SEL3` at column index 0, `u{0020}` at column index 1 and 2, and `SEL`6 at column\n         * index 3.\n         *\n         * The default `u{0020}` is a blank space.\n         *\n         * @config {String}\n         * @default\n         */\n        emptyValueChar : '\\u{0020}',\n\n        /**\n         * See {@link #keyboard-shortcuts Keyboard shortcuts} for details\n         * @config {Object<String,String>}\n         */\n        keyMap : {\n            'Ctrl+C' : 'copy',\n            'Ctrl+X' : 'cut',\n            'Ctrl+V' : 'paste'\n        },\n\n        /**\n         * Set this to `false` to not use native Clipboard API even if it is available\n         * @config {Boolean}\n         * @default true\n         */\n        useNativeClipboard : !VersionHelper.isTestEnv,\n\n        /**\n         * Provide a function to be able to customize the string value which is copied.\n         *\n         * ````javascript\n         * new Grid({\n         *     features : {\n         *         cellCopyPaste : {\n         *             toCopyString({currentValue, column, record}) {\n         *                 if(record.isAvatar){\n         *                     return record.fullName;\n         *                 }\n         *                 return currentValue;\n         *             }\n         *         }\n         *     }\n         * });\n         * ````\n         *\n         * @param {Object} data\n         * @param {String} data.currentValue\n         * @param {Grid.column.Column} data.column\n         * @param {Core.data.Model} data.record\n         * @config {Function}\n         */\n        toCopyString : null,\n\n        /**\n         * Provide a function to be able to customize the value which will be set onto the record\n         *\n         * ````javascript\n         * new Grid({\n         *     features : {\n         *         cellCopyPaste : {\n         *             toPasteValue({currentValue, column, record, field}) {\n         *                 if(typeof currentValue === 'string'){\n         *                     return currentValue.replace('$', '');\n         *                 }\n         *                 return currentValue;\n         *             }\n         *         }\n         *     }\n         * });\n         * ````\n         *\n         * @param {Object} data\n         * @param {String} data.currentValue\n         * @param {Grid.column.Column} data.column\n         * @param {Core.data.Model} data.record\n         * @config {Function}\n         */\n        toPasteValue : null,\n\n        copyText  : 'L{copy}',\n        cutText   : 'L{cut}',\n        pasteText : 'L{paste}'\n    };\n\n    afterConstruct() {\n        super.afterConstruct();\n        this.afterSelectionModeChange();\n    }\n\n    afterSelectionModeChange() {\n        const me = this;\n\n        if (!me.client.selectionMode.cell) {\n            me.disabled = true;\n        }\n        else if (me._disabledBySelectionMode) {\n            me.disabled = false;\n            delete me._disabledBySelectionMode;\n        }\n    }\n\n    // Used in events to separate events from different features from each other\n    entityName = 'cell';\n\n    get copyOnly() {\n        // If celledit is disabled, cut and paste actions are disabled by default\n        if (this._copyOnly == null) {\n            return !this.client.features.cellEdit?.enabled;\n        }\n\n        return Boolean(this._copyOnly);\n    }\n\n    get canCopy() {\n        const { client } = this;\n\n        return Boolean(!this.disabled && client.selectedCells.length &&\n            (\n                !client._selectedRows.length ||\n                client.features.rowCopyPaste?.disabled ||\n                client.focusedCell && client.isCellSelected(client.focusedCell)\n            ));\n    }\n\n    get canCutPaste() {\n        return this.canCopy && !this.copyOnly && !this.client.features.cellEdit?.isEditing && !this.client.readOnly;\n    }\n\n    // Called from keyMap. Also used internally here\n    isActionAvailable({ actionName }) {\n        return this.canCopy && (actionName === 'copy' || this.canCutPaste);\n    }\n\n    // Takes cell locations and converts them to tab and new-line separated string values.\n    // Then stores them in native clipboard or the internal clipboard\n    async sendToClipboard(cells) {\n        const\n            me           = this;\n        let lastRowIndex = 0,\n            lastColIndex = 0,\n            stringData   = '';\n\n        // Sorted by rowIndex then by columnIndex\n        cells.sort((c1, c2) => c1.rowIndex === c2.rowIndex ? c1.columnIndex - c2.columnIndex : c1.rowIndex - c2.rowIndex);\n\n        for (const cell of cells) {\n            const { record, column, rowIndex, columnIndex } = cell;\n\n            // Separate with \\n if new row\n            if (rowIndex > lastRowIndex) {\n                if (stringData.length > 0) {\n                    stringData += '\\n'.repeat(rowIndex - lastRowIndex);\n                }\n                lastRowIndex = rowIndex;\n                lastColIndex = columnIndex;\n            }\n            // Separate with \\t if new column\n            else if (columnIndex > lastColIndex) {\n                if (stringData.length > 0) {\n                    stringData += '\\t'.repeat(columnIndex - lastColIndex);\n                }\n                lastColIndex = columnIndex;\n            }\n\n            // The column can provide its own toClipboardString\n            let cellValue = column.toClipboardString?.(cell);\n\n            // Or we use the raw value from the record\n            if (cellValue === undefined) {\n                cellValue = record.get(column.field)?.toString();\n            }\n\n            // The client can provide its own as well.\n            if (me.toCopyString) {\n                cellValue = me.toCopyString({ currentValue : cellValue, column, record });\n            }\n\n            cellValue = cellValue?.replace(/[\\n\\t]/, ' ');\n\n            stringData += cellValue || me.emptyValueChar;\n        }\n\n        await BrowserHelper.writeToClipboard(stringData, this.useNativeClipboard);\n\n        return stringData;\n    }\n\n    /**\n     * Cuts selected cells to clipboard (native if accessible) to paste later\n     * @async\n     */\n    async cut() {\n        await this.copy(true);\n    }\n\n    /**\n     * Copies selected cells to clipboard (native if accessible) to paste later\n     * @async\n     */\n    async copy(cut) {\n        const\n            me    = this,\n            {\n                client,\n                entityName\n            }     = me,\n            isCut = typeof cut === 'boolean' ? cut : false, // If called by keymap, arguments[0] will be an event\n            cells = isCut ? client.selectedCells.filter(r => !r.record?.readOnly) : client.selectedCells;\n\n        if (cells) {\n\n            /**\n             * Fires on the owning Grid before a copy action is performed, return `false` to prevent the action\n             * @event beforeCopy\n             * @preventable\n             * @on-owner\n             * @param {Grid.view.Grid} source Owner grid\n             * @param {Grid.util.Location[]} cells The cells about to be copied or cut\n             * @param {Boolean} isCut `true` if this is a cut action\n             * @param {String} entityName 'cell' to distinguish this event from other beforeCopy events\n             */\n            if ((isCut ? !me.canCutPaste : !me.canCopy) ||\n                client.trigger('beforeCopy', { cells, isCut, entityName }) === false\n            ) {\n                return;\n            }\n\n            const copiedDataString = await me.sendToClipboard(cells);\n\n            if (isCut === true) {\n                for (const cell of cells) {\n                    if (!cell.column.readOnly) {\n                        cell.record.set(cell.column.field, null);\n                    }\n                }\n            }\n\n            /**\n             * Fires on the owning Grid after a copy action is performed.\n             * @event copy\n             * @on-owner\n             * @param {Grid.view.Grid} source Owner grid\n             * @param {Grid.util.Location[]} cells The cells about to be copied or cut\n             * @param {String} copiedDataString The concatenated data string that was copied or cut\n             * @param {Boolean} isCut `true` if this was a cut action\n             * @param {String} entityName 'cell' to distinguish this event from other copy events\n             */\n            client.trigger('copy', { cells, copiedDataString, isCut, entityName });\n\n        }\n    }\n\n    /**\n     * Pastes string data into a cell or a range of cells. Either from native clipboard if that is accessible or from a\n     * fallback clipboard that is only available to the owner Grid.\n     *\n     * The string data will be split on `\\n` and `\\t` and put in different rows and columns accordingly.\n     *\n     * Note that there must be a selected cell to paste the data into.\n     * @async\n     */\n    async paste() {\n        const\n            me            = this,\n            {\n                client,\n                entityName\n            }             = me,\n            clipboardData = await BrowserHelper.readFromClipboard(me.useNativeClipboard),\n            targetCell    = client.selectedCells[0];\n\n        /**\n         * Fires on the owning Grid before a paste action is performed, return `false` to prevent the action\n         * @event beforePaste\n         * @preventable\n         * @on-owner\n         * @param {Grid.view.Grid} source Owner grid\n         * @param {String} clipboardData The clipboardData about to be pasted\n         * @param {Grid.util.Location} targetCell The cell from which the paste will be started\n         * @param {String} entityName 'cell' to distinguish this event from other beforePaste events\n         */\n        if (\n            !me.canCutPaste ||\n            !clipboardData?.length ||\n            !targetCell ||\n            client.trigger('beforePaste', { clipboardData, targetCell, entityName }) === false\n        ) {\n            return;\n        }\n\n        const\n            modifiedRecords       = new Set(),\n            // Converts the clipboard data into a 2-dimensional array of string values.\n            rows                  = me.stringAs2dArray(clipboardData),\n            targetCells           = [],\n            { _shiftSelectRange } = client;\n\n        // No valid clipboard data, break\n        if (!rows?.length) {\n            return;\n        }\n\n        // If there is a selected range, pasting should be repeated into that range\n        if (_shiftSelectRange?.some(cell => cell.equals(targetCell))) {\n            const cellRows = me.cellSelectorsAs2dArray(_shiftSelectRange);\n\n            // The selection must fit the whole paste content. If pasting 2 rows for example, a number of rows that is\n            // divisible by 2 is required. Same for columns.\n            if (cellRows?.length % rows.length === 0 && cellRows.columnCount % rows.columnCount === 0) {\n                // This code will calculate each cell target to repeat the pasting on\n                for (let curI = 0; curI < cellRows.length; curI += rows.length) {\n                    for (let curX = 0; curX < cellRows.columnCount; curX += rows.columnCount) {\n                        targetCells.push(cellRows[curI][curX]);\n                    }\n                }\n            }\n        }\n\n        // No valid range, just use one target\n        if (!targetCells.length) {\n            targetCells.push(targetCell);\n        }\n\n        for (const targetCell of targetCells) {\n            for (let rI = 0; rI < rows.length; rI++) {\n                const\n                    row          = rows[rI],\n                    targetRecord = client.store.getAt(targetCell.rowIndex + rI);\n\n                // Starts with targetCell rowIndex and columnIndex and applies values from the clipboard string.\n                if (targetRecord && !targetRecord.readOnly) {\n                    for (let cI = 0; cI < row.length; cI++) {\n                        const\n                            targetColumn = client.columns.visibleColumns[targetCell.columnIndex + cI],\n                            targetField  = targetColumn?.field;\n                        let value        = row[cI];\n\n                        // If no value, or readOnly, this column is skipped\n                        if (targetField && value && !targetColumn.readOnly) {\n                            if (value === me.emptyValueChar) {\n                                value = null;\n                            }\n\n                            // Column provided paste conversion function\n                            if (targetColumn.fromClipboardString) {\n                                value = targetColumn.fromClipboardString({\n                                    string : value,\n                                    record : targetRecord\n                                });\n                            }\n\n                            // Client provided paste customization function\n                            if (me.toPasteValue) {\n                                value = me.toPasteValue({\n                                    currentValue : value,\n                                    record       : targetRecord,\n                                    column       : targetColumn,\n                                    field        : targetField\n                                });\n                            }\n\n                            targetRecord.set(targetField, value, false, false, false, true);\n                            modifiedRecords.add(targetRecord);\n                        }\n                    }\n                }\n            }\n        }\n\n        /**\n         * Fires on the owning Grid after a paste action is performed.\n         * @event paste\n         * @on-owner\n         * @param {Grid.view.Grid} source Owner grid\n         * @param {String} clipboardData The clipboardData that was pasted\n         * @param {Core.data.Model[]} modifiedRecords The records which have been modified due to the paste action\n         * @param {Grid.util.Location} targetCell The cell from which the paste will be started\n         * @param {String} entityName 'cell' to distinguish this event from other paste events\n         */\n        client.trigger('paste', { clipboardData, targetCell, modifiedRecords : [...modifiedRecords], entityName });\n    }\n\n    /**\n     * Converts an array of Location objects to a two-dimensional array where first level is rows and second level is\n     * columns. If the array is inconsistent in the number of columns present for each row, the function will return\n     * false.\n     * @param {Grid.util.Location[]} locations\n     * @private\n     */\n    cellSelectorsAs2dArray(locations) {\n        const\n            rows = [];\n        let rId  = null,\n            columns;\n\n        for (const location of locations) {\n            // If new id (new record) create new \"row\"\n            if (location.id !== rId) {\n                rId = location.id;\n                columns = [];\n                rows.push(columns);\n            }\n            columns.push(location);\n        }\n\n        // Save number of \"columns\" for easier access\n        rows.columnCount = rows[0].length;\n\n        // All \"rows\" must have the same number of columns\n        if (rows.some(row => row.length !== rows.columnCount)) {\n            return false;\n        }\n\n        return rows;\n    }\n\n    /**\n     * Converts a new-line- and tab-separated string to a two-dimensional array where first level is rows and second\n     * level is columns. If the string is inconsistent in the number of columns present for each row, the function will\n     * return false.\n     * @param {String} string String values separated with new-line(\\n,\\r or similar) and tabs (\\t)\n     * @private\n     */\n    stringAs2dArray(string) {\n        const\n            rows       = [],\n            stringRows = string.split(/\\r\\n|(?!\\r\\n)[\\n-\\r\\x85\\u2028\\u2029]/);\n\n        for (const row of stringRows) {\n            const columns = row.split('\\t');\n\n            // All \"rows\" must have the same number of columns\n            if (rows.columnCount && columns.length !== rows.columnCount) {\n                return false;\n            }\n            // Save number of \"columns\" for easier access\n            rows.columnCount = columns.length;\n            rows.push(columns);\n        }\n        return rows;\n    }\n\n    populateCellMenu({ record, items }) {\n        const me = this;\n\n        if (me.canCopy) {\n            items.cutCell = {\n                text        : me.cutText,\n                localeClass : me,\n                icon        : 'b-icon b-icon-cut',\n                weight      : 115,\n                disabled    : record.readOnly || !me.canCutPaste,\n                onItem      : () => me.cut()\n            };\n\n            items.pasteCell = {\n                text        : me.pasteText,\n                localeClass : me,\n                icon        : 'b-icon b-icon-paste',\n                weight      : 120,\n                disabled    : record.readOnly || !me.canCutPaste,\n                onItem      : () => me.paste()\n            };\n\n            items.copyCell = {\n                text        : me.copyText,\n                localeClass : me,\n                cls         : 'b-separator',\n                icon        : 'b-icon b-icon-copy',\n                weight      : 110,\n                onItem      : () => me.copy()\n            };\n        }\n    }\n}\n\nGridFeatureManager.registerFeature(CellCopyPaste);\n","import Objects from '../../Core/helper/util/Objects.js';\nimport Tooltip from '../../Core/widget/Tooltip.js';\nimport InstancePlugin from '../../Core/mixin/InstancePlugin.js';\nimport GridFeatureManager from '../feature/GridFeatureManager.js';\n\n/**\n * @module Grid/feature/CellTooltip\n */\n\n/**\n * Displays a tooltip when hovering cells.\n *\n * {@inlineexample Grid/feature/CellTooltip.js}\n *\n * To show contents when hovering a cell, you can specify a global {@link #config-tooltipRenderer} function for the\n * feature, you can also define a {@link Grid.column.Column#config-tooltipRenderer} for individual columns.\n *\n * ```javascript\n * // Column with its own tooltip renderer\n * {\n *   text            : 'Name',\n *   field           : 'name',\n *   tooltipRenderer : ({ record }) => `My name is\\xa0<b>${record.name}</b>`\n * }\n * ```\n *\n * Configuration properties passed into this feature are used to configure the {@link Core.widget.Tooltip} instance\n * used.\n *\n * This feature is <strong>disabled</strong> by default.\n *\n * ## Showing async content\n * Showing remotely loaded content is super easy using the {@link #config-tooltipRenderer}:\n *\n * ```javascript\n * // Async tooltip with some custom settings\n * const grid = new Grid({\n *   features: {\n *     cellTooltip: {\n *       // Time that mouse needs to be over cell before tooltip is shown\n *       hoverDelay : 4000,\n *       // Time after mouse out to hide the tooltip, 0 = instantly\n *       hideDelay  : 0,\n *       // Async tooltip renderer, return a Promise which yields the text content\n *       tooltipRenderer({ record, tip }) {\n *         return fetch(`tip.php?id=${record.id}`).then(response => response.text())\n *       }\n *     }\n *   }\n * });\n * ```\n *\n * @extends Core/mixin/InstancePlugin\n * @extendsconfigs Core/widget/Tooltip\n * @demo Grid/celltooltip\n * @classtype cellTooltip\n * @feature\n */\nexport default class CellTooltip extends InstancePlugin {\n    //region Config\n\n    static $name = 'CellTooltip';\n\n    static configurable = {\n        /**\n         * Function called to generate the HTML content for the cell tooltip.\n         * The function should return a string (your HTML), or a Promise yielding a string (for remotely loaded\n         * content)\n         * @prp {Function}\n         * @param {Object} context\n         * @param {HTMLElement} context.cellElement The cell element\n         * @param {Core.data.Model} context.record The row record\n         * @param {Grid.column.Column} context.column The column\n         * @param {Core.widget.Tooltip} context.tip The Tooltip instance\n         * @param {Grid.feature.CellTooltip} context.cellTooltip The feature\n         * @param {Event} context.event The raw DOM event\n         * @returns {String|Promise}\n         */\n        tooltipRenderer : null\n    };\n\n    //endregion\n\n    // region Init\n\n    construct(grid, config) {\n        super.construct(grid, this.processConfig(config));\n    }\n\n    initTip() {\n        const me = this;\n\n        me.tip = Tooltip.new({\n            forElement        : me.client.element,\n            forSelector       : '.b-grid-row:not(.b-group-row) .b-grid-cell, .b-grid-merged-cells',\n            hoverDelay        : 1000,\n            trackMouse        : false,\n            cls               : 'b-celltooltip-tip',\n            getHtml           : me.getTooltipContent.bind(me),\n            internalListeners : {\n                pointerOver : 'onPointerOver',\n                thisObj     : me\n            },\n            // eslint-disable-next-line bryntum/no-listeners-in-lib\n            listeners : me.configuredListeners\n        }, me.initialConfig);\n\n        me.relayEvents(me.tip, ['beforeShow', 'show']);\n    }\n\n    onPointerOver({ target }) {\n        const column = this.client.getColumnFromElement(target);\n\n        // Veto onPointerOver if column's tooltipRenderer is false\n        return column.tooltipRenderer !== false && Boolean(column.tooltipRenderer || this.tooltipRenderer);\n    }\n\n    // CellTooltip feature handles special config cases, where user can supply a function to use as tooltipRenderer\n    // instead of a normal config object\n    processConfig(config) {\n        if (typeof config === 'function') {\n            return {\n                tooltipRenderer : config\n            };\n        }\n\n        return config;\n    }\n\n    // override setConfig to process config before applying it (used mainly from ReactGrid)\n    setConfig(config) {\n        super.setConfig(this.processConfig(config));\n    }\n\n    doDestroy() {\n        this.tip && this.tip.destroy();\n        super.doDestroy();\n    }\n\n    doDisable(disable) {\n        if (!disable) {\n            this.initTip();\n        }\n        else if (this.tip) {\n            this.tip.destroy();\n            this.tip = null;\n        }\n\n        super.doDisable(disable);\n    }\n\n    //endregion\n\n    //region Content\n\n    /**\n     * Called from Tooltip to populate it with html.\n     * @private\n     */\n    getTooltipContent({ tip, activeTarget : cellElement, event }) {\n        const\n            me     = this,\n            record = me.client.getRecordFromElement(cellElement),\n            column = me.client.getColumnFromElement(cellElement),\n            arg    = { cellElement, record, column, event, tip, cellTooltip : me };\n\n        let result;\n\n        // If we have not changed context, we should not change content, unless we have a custom target selector (element within the cell)\n        if (!me.forSelector && record === me.lastRecord && record.generation === me.lastRecordGeneration && column === me.lastColumn) {\n            return me.tip._html;\n        }\n\n        me.lastRecord = record;\n        me.lastRecordGeneration = record.generation;\n        me.lastColumn = column;\n\n        // first, use columns tooltipRenderer if any\n        if (column.tooltipRenderer) {\n            result = column.tooltipRenderer(arg);\n        }\n        // secondly, try feature's renderer (specifying column.tooltipRenderer as false prevents tooltip in that column)\n        else if (me.tooltipRenderer && column.tooltipRenderer !== false) {\n            result = me.tooltipRenderer(arg);\n        }\n\n        // No caching of async requests\n        if (Objects.isPromise(result)) {\n            me.lastRecord = me.lastRecordGeneration = me.lastColumn = null;\n        }\n\n        // Tip should hide if no content is available\n        if (!result) {\n            tip.hide();\n        }\n\n        return result;\n    }\n\n    //endregion\n}\n\nGridFeatureManager.registerFeature(CellTooltip);\n","import InstancePlugin from '../../Core/mixin/InstancePlugin.js';\nimport Editor from '../../Core/widget/Editor.js';\nimport GridFeatureManager from '../feature/GridFeatureManager.js';\n\n/**\n * @module Grid/feature/ColumnRename\n */\n\n/**\n * Allows user to rename columns by either right-clicking column header or using keyboard shortcuts when column header\n * is focused.\n *\n * To get notified about column renaming listen to `change` event on {@link Grid.data.ColumnStore columns} store.\n *\n * This feature is <strong>disabled</strong> by default.\n *\n * {@inlineexample Grid/feature/ColumnRename.js}\n *\n * ## Keyboard shortcuts\n * This feature has the following default keyboard shortcuts:\n *\n * | Keys          | Action           | Action description                        |\n * |---------------|------------------|-------------------------------------------|\n * | `F2`          | *startEdit*      | Starts editing focused column header text |\n *\n * <div class=\"note\">Please note that <code>Ctrl</code> is the equivalent to <code>Command</code> and <code>Alt</code>\n * is the equivalent to <code>Option</code> for Mac users</div>\n *\n * For more information on how to customize keyboard shortcuts, please see\n * [our guide](#Grid/guides/customization/keymap.md)\n *\n * @extends Core/mixin/InstancePlugin\n *\n * @demo Grid/columns\n * @classtype columnRename\n * @feature\n */\nexport default class ColumnRename extends InstancePlugin {\n\n    static $name = 'ColumnRename';\n\n    static configurable = {\n        /**\n         * See {@link #keyboard-shortcuts Keyboard shortcuts} for details\n         * @config {Object<String,String>}\n         */\n        keyMap : {\n            F2 : 'startEdit'\n        }\n    };\n\n    doDestroy() {\n        this.editor?.destroy();\n        super.doDestroy();\n    }\n\n    static get pluginConfig() {\n        return {\n            after : ['populateHeaderMenu']\n        };\n    }\n\n    populateHeaderMenu({ items, column }) {\n        items.rename = {\n            weight   : 215,\n            icon     : 'b-fw-icon b-icon-edit',\n            text     : this.L('L{rename}'),\n            disabled : column.readOnly,\n            onItem   : () => this.startEdit(column)\n        };\n    }\n\n    startEdit(column) {\n        if (column instanceof Event) {\n            // If started editing by key\n            column = this.client.getHeaderDataFromEvent(column)?.column;\n        }\n\n        if (column) {\n            if (column.readOnly) {\n                // return false to let keyMap know that we didn't handle this event\n                return false;\n            }\n\n            const { textWrapper } = column;\n            let { editor } = this;\n\n            if (!editor) {\n                this.editor = editor = new Editor({\n                    owner : this.client,\n                    align : {\n                        align : 't0-t0'\n                    }\n                });\n            }\n\n            editor.render(textWrapper);\n\n            editor.startEdit({\n                target : textWrapper,\n                record : column,\n                field  : 'text'\n            });\n        }\n    }\n}\n\nGridFeatureManager.registerFeature(ColumnRename, false);\n","import InstancePlugin from '../../Core/mixin/InstancePlugin.js';\nimport Delayable from '../../Core/mixin/Delayable.js';\nimport GridFeatureManager from '../../Grid/feature/GridFeatureManager.js';\nimport DomHelper from '../../Core/helper/DomHelper.js';\nimport EventHelper from '../../Core/helper/EventHelper.js';\nimport Location from '../../Grid/util/Location.js';\nimport GlobalEvents from '../../Core/GlobalEvents.js';\nimport Rectangle from '../../Core/helper/util/Rectangle.js';\n\n/**\n * @module Grid/feature/FillHandle\n */\n\n/**\n * This features adds a fill handle to a Grid range selection, which when dragged, fills the cells being dragged over\n * with values based on the values in the original selected range. This is similar to functionality normally seen in\n * various spreadsheet applications.\n *\n * {@inlineexample Grid/feature/FillHandle.js}\n *\n * Requires {@link Grid/view/Grid#config-selectionMode selectionMode.cell} to be activated.\n *\n * This feature is **disabled** by default\n *\n * ```javascript\n * const grid = new Grid({\n *     features : {\n *         fillHandle : true\n *     }\n * });\n * ```\n *\n * @extends Core/mixin/InstancePlugin\n * @classtype fillHandle\n * @feature\n */\nexport default class FillHandle extends InstancePlugin.mixin(Delayable) {\n    static $name = 'FillHandle';\n\n    static configurable = {\n        /**\n         * Implement this function to be able to customize the value that cells will be filled with.\n         * Return `undefined` to use default calculations.\n         *\n         * ````javascript\n         * new Grid({\n         *    features : {\n         *        fillHandle : {\n         *           calculateFillValue({cell, column, range, record}) {\n         *              if(column.field === 'number') {\n         *                 return range.reduce(\n         *                    (sum, location) => sum + location.record[location.column.field]\n         *                 );\n         *              }\n         *           }\n         *        }\n         *    }\n         * });\n         * ````\n         *\n         * @param {Object} data Object containing information about current cell and fill value\n         * @param {Grid.util.Location} data.cell Current cell data\n         * @param {Grid.column.Column} data.column Current cell column\n         * @param {Grid.util.Location[]} data.range Range from where to calculate values\n         * @param {Core.data.Model} data.record Current cell record\n         * @returns {String|Number|Date} Value to fill current cell\n         * @config {Function}\n         */\n        calculateFillValue : null,\n\n        /**\n         * Set to `true` to enable the fill range to crop the original selected range. This clears the cells which were\n         * a part of the original selected range, but are no longer a part of the smaller range.\n         * @config {Boolean}\n         */\n        allowCropping : false\n\n    };\n\n    // Plugin configuration. This plugin chains/overrides some functions in Grid.\n    static pluginConfig = {\n        chain    : ['afterSelectionChange', 'onContentChange', 'afterColumnsChange', 'fixElementHeights'],\n        override : ['getCellDataFromEvent']\n    };\n\n    afterConstruct() {\n        super.afterConstruct();\n\n        if (!this.client.selectionMode.cell) {\n            this.disabled = true;\n        }\n\n        this._fillListeners = {};\n    }\n\n    delayable = {\n        handleSelection : 'raf'\n    };\n\n    onContentChange() {\n        this.handleSelection();\n    }\n\n    afterColumnsChange() {\n        this.handleSelection();\n    }\n\n    fixElementHeights() {\n        this.handleSelection();\n    }\n\n    getCellDataFromEvent(event, includeSingleAxisMatch) {\n        if (includeSingleAxisMatch) {\n            includeSingleAxisMatch = !event.target.classList.contains('b-fill-handle');\n        }\n        return this.overridden.getCellDataFromEvent(event, includeSingleAxisMatch);\n    }\n\n    // region Pattern recognition\n    findPatternsIn2dRange(range, horizontal, negative) {\n        const values = {};\n\n        // Converts a cellselector range to values per column or row\n        for (const cell of range) {\n            const\n                id    = horizontal ? cell.id : cell.columnId;\n            let value = cell.record[cell.column.field];\n\n            // If a number string, convert to number\n            if (value && typeof value === 'string' && !isNaN(value)) {\n                value = parseFloat(value);\n            }\n\n            if (!values[id]) {\n                values[id] = [];\n            }\n            values[id].push(value);\n        }\n\n        // Find patterns for each column or row in range\n        for (const rowOrCol in values) {\n            values[rowOrCol].pattern = this.findPatternsIn1dRange(values[rowOrCol], negative);\n        }\n\n        return values;\n    }\n\n    findPatternsIn1dRange(range, negative) {\n        const\n            lastValue = range[negative ? 0 : (range.length - 1)],\n            pattern   = {\n                next : () => lastValue,\n                lastValue\n            };\n\n        // If all values in same column/row is either number or date\n        if (range.every(val => typeof val === 'number') || range.every(val => val instanceof Date)) {\n            const diffs = range.map((val, ix) => val - range[ix - 1]);\n            diffs.shift(); // Removes initial NaN\n\n            // Found a repeating pattern\n            if (new Set(diffs).size === 1) {\n                pattern.increaseBy = diffs[0] * (negative ? -1 : 1);\n\n                pattern.next = () => {\n                    if (pattern.lastValue instanceof Date) {\n                        pattern.lastValue = new Date(pattern.lastValue.getTime() + pattern.increaseBy);\n                    }\n                    else {\n                        pattern.lastValue += pattern.increaseBy;\n                    }\n                    return pattern.lastValue;\n                };\n            }\n        }\n        // Else it's treated as a string value\n        else if (range.length > 1) {\n            pattern.stringPattern = [...range];\n            pattern.next = () => {\n                if (pattern.currentIndex === undefined) {\n                    pattern.currentIndex = 0;\n                }\n                else {\n                    pattern.currentIndex += 1;\n                    if (pattern.currentIndex >= pattern.stringPattern.length) {\n                        pattern.currentIndex = 0;\n                    }\n                }\n                return pattern.stringPattern[pattern.currentIndex];\n            };\n        }\n        return pattern;\n    }\n\n    // endregion\n\n    afterSelectionChange() {\n        const me = this;\n\n        if (me.client.readOnly) {\n            me.removeElements();\n            return;\n        }\n\n        // If selection isn't finished, wait for mouse up and then add fill elements\n        if (GlobalEvents.isMouseDown()) {\n            me.client.delayUntilMouseUp(() => me.handleSelection(true));\n            // Remove prev elements immediately in this case\n            me.removeElements();\n        }\n        // Otherwise, add fill elements immediately\n        else {\n            me.handleSelection(true);\n        }\n    }\n\n    /**\n     * Checks selection and sees to it that fill handle and border is drawn.\n     * Runs on next animation frame\n     * @internal\n     */\n    handleSelection() {\n        if (!this._isExtending) {\n            const range = this.rangeSelection;\n\n            if (range) {\n                this.drawFillHandleAndBorder(range[0], range[range.length - 1]);\n            }\n            else {\n                this.removeElements();\n            }\n        }\n    }\n\n    // region Mouse events\n\n    // On fillHandle mouse down only\n    onMouseDown(event) {\n        const { client } = this;\n\n        if (!client.readOnly) {\n            this._fillListeners.mouseMoveOrUp = EventHelper.on({\n                element   : globalThis,\n                mouseover : {\n                    handler : 'onMouseOver',\n                    element : client.selectionDragMouseEventListenerElement\n                },\n                mouseup : 'onMouseUp',\n                thisObj : this\n            });\n            event.preventDefault();\n            event.stopImmediatePropagation();\n            event.handled = true;\n        }\n    }\n\n    // Responsible for doing the filling\n    onMouseUp() {\n        const\n            me              = this,\n            {\n                client,\n                currentRange,\n                _isCropping\n            }               = me,\n            range           = me.rangeSelection,\n            selectionChange = range && currentRange && client.internalSelectRange(currentRange.from, currentRange.to),\n            selectedCells   = selectionChange?.selectedCells || [],\n            // For extending : Only modify cells that are not a part of original range\n            // For cropping  : Only clear cells that are not a part of new selection\n            extensionCells  = _isCropping ? me.croppingCells\n                : selectedCells.filter(cell => !range.some(sel => sel.equals(cell, true)));\n\n        delete me._isCropping; // Removing flag in case we bail out early\n\n        if (me._isExtending) {\n            client.disableScrollingCloseToEdges(client.items);\n            delete me._isExtending;\n        }\n\n        // If no extension, do nothing\n        if (!extensionCells?.length) {\n            me.handleSelection();\n            return;\n        }\n\n        client.suspendRefresh();\n\n        // If trimming (inverted extension), clear cells that where previously selected and not a part of new selection\n        if (_isCropping) {\n            extensionCells.forEach(cell => cell.record.set(cell.column.field, null, false, false, false, true));\n        }\n        // Extending cell values depending on pattern\n        else {\n            const\n                [firstCell] = extensionCells,\n                // If extensioncells has a record that is included in original selection, then we are dragging horizontally\n                horizontal  = range.some(sel => sel.record === firstCell.record),\n                // negative in this aspect, means dragging either upwards or to the left depending on horizontal or vertical\n                negative    = horizontal\n                    ? firstCell.columnIndex < range[0].columnIndex\n                    : firstCell.rowIndex < range[0].rowIndex,\n                patterns    = me.findPatternsIn2dRange(range, horizontal, negative),\n                changeMap   = new Map();\n\n            if (negative) {\n                extensionCells.reverse();\n            }\n\n            for (const cell of extensionCells) {\n                const { column, record } = cell;\n\n                if (!column.readOnly && column.canFillValue({ range, record, cell })) {\n                    let value   = me.calculateFillValue?.({ range, column, record, cell }),\n                        changed = changeMap.get(record);\n\n                    if (!changed) {\n                        changed = {};\n                        changeMap.set(record, changed);\n                    }\n\n                    if (value === undefined) {\n                        const pattern = patterns[horizontal ? cell.id : cell.columnId].pattern;\n                        value = pattern.next();\n                    }\n\n                    changed[column.field] = column.calculateFillValue?.({ value, record, range }) || value;\n                }\n            }\n\n            for (const [record, changes] of changeMap) {\n                record.set(changes, null, null, null, null, true);\n            }\n        }\n\n        client.resumeRefresh(true);\n\n        // Selects the extended area\n        client.performSelection(selectionChange);\n\n        delete me.currentRange;\n        me.handleSelection();\n    }\n\n    // The fill border and handle should refresh on mouse move\n    onMouseOver(event) {\n        const\n            me           = this,\n            {\n                client,\n                rangeSelection\n            }            = me,\n            first        = rangeSelection[0],\n            last         = rangeSelection[rangeSelection.length - 1],\n            cellData     = client.getCellDataFromEvent(event, true);\n        let cellSelector = cellData && client.normalizeCellContext(cellData.cellSelector);\n\n        if (cellSelector?._column?.region === first._column.region) {\n            const\n                equalOrSmaller = rangeSelection.some(cs => cs.equals(cellSelector, true));\n            let negative;\n\n            if (!me._isExtending) {\n                client.enableScrollingCloseToEdges(client.items);\n            }\n\n            if (equalOrSmaller) {\n                // If were smaller, were cropping (if it's allowed)\n                me._isCropping = me.allowCropping &&\n                    (cellSelector.rowIndex < last.rowIndex || cellSelector.columnIndex < last.columnIndex);\n            }\n            else {\n                // If cellSelector is on a row in range, endSelector should be current column but end/first row\n                if (cellSelector.rowIndex >= first.rowIndex && cellSelector.rowIndex <= last.rowIndex) {\n                    negative     = first.columnIndex > cellSelector.columnIndex;\n                    cellSelector = new Location({\n                        grid   : client,\n                        record : negative ? first.record : last.record,\n                        column : cellSelector.column\n                    });\n                }\n                // Else endSelector should be current row but end/first column\n                else {\n                    negative     = first.rowIndex > cellSelector.rowIndex;\n                    cellSelector = new Location({\n                        grid   : client,\n                        record : cellSelector.record,\n                        column : negative ? first.column : last.column\n                    });\n                }\n            }\n\n            // negative means that current mouse over cell is above or to the left\n            const\n                // If negative, draw from calculated mouse over cell\n                // otherwise, draw from top-left selection cell\n                from = negative ? cellSelector : first,\n                // If negative or were inside selection (but not cropping), draw to bottom-right selection cell\n                // otherwise, draw to calculated mouse over cell\n                to   = negative || (equalOrSmaller && !me._isCropping) ? last : cellSelector;\n\n            me.currentRange = { from, to };\n\n            // This flag is true even if were trimming\n            me._isExtending = true;\n\n            me.drawFillHandleAndBorder(from, to, true);\n        }\n    }\n\n    // endregion\n\n    // region Creating, updating and removing fillhandle and fillborder\n    drawFillHandleAndBorder(from, to, keepListeners = false) {\n        const\n            me        = this,\n            {\n                client,\n                currentRange,\n                _fillListeners\n            }         = me,\n            regionEl  = client.subGrids[from.column.region].element,\n            { x }     = Rectangle.from(from.cell || from.column.element, regionEl),\n            { right } = Rectangle.from(to.cell || to.column.element, regionEl),\n            { y }     = client.getRecordCoords(from.record, true),\n            bottom    = client.getRecordCoords(to.record, true).bottom - 1;\n        let {\n            borderElement,\n            handleElement\n        }             = me;\n\n        me.removeElements(keepListeners);\n\n        if (!borderElement) {\n            me.borderElement = borderElement = DomHelper.createElement({\n                className : 'b-fill-selection-border'\n            });\n\n            me.handleElement = handleElement = DomHelper.createElement({\n                className : 'b-fill-handle'\n            });\n        }\n\n        DomHelper.setRect(borderElement, { y, x, width : (right - x), height : (bottom - y) });\n        regionEl.appendChild(borderElement);\n\n        // If fill handle is drawn at right edge, put it to the left instead\n        DomHelper.setTopLeft(handleElement, bottom, right >= regionEl.scrollWidth ? x : right);\n        regionEl.appendChild(handleElement);\n\n        // Remove all previously cropping cls\n        me.toggleCroppingCls(false);\n        delete me.croppingCells;\n\n        // If were cropping, we should add cls class to the cells that will be \"shrunk\"\n        if (me._isCropping && me.rangeSelection?.length) {\n            const newCells = client.getRange(currentRange.from, currentRange.to);\n\n            me.croppingCells = me.rangeSelection.filter(sel => !newCells.some(cell => cell.equals(sel, true)));\n            me.toggleCroppingCls();\n        }\n\n        if (!_fillListeners.handleClick) {\n            _fillListeners.handleClick = EventHelper.on({\n                element   : client.rootElement,\n                delegate  : '.b-fill-handle',\n                mousedown : 'onMouseDown',\n                thisObj   : me\n            });\n        }\n\n        me.hasFillElements = true;\n    }\n\n    toggleCroppingCls(add = true) {\n        this.croppingCells?.forEach(sel => this.client.getCell(sel)?.classList.toggle('b-indicate-crop', add));\n    }\n\n    removeElements(keepListeners = false) {\n        const me = this;\n\n        me.handleElement?.remove();\n        me.borderElement?.remove();\n\n        if (!keepListeners) {\n            me.removeListeners();\n        }\n\n        me.hasFillElements = false;\n    }\n\n    // Detach listeners\n    removeListeners() {\n        const me = this;\n\n        for (const listener in me._fillListeners) {\n            me._fillListeners[listener]();\n        }\n        me._fillListeners = {};\n    }\n\n    // endregion\n\n    // Gets current selection range. Only allows for single range or single cell.\n    get rangeSelection() {\n        const\n            { client }        = this,\n            { selectedCells } = client,\n            range             = client._shiftSelectRange ?? (selectedCells.length === 1 && selectedCells);\n\n        // We only got one selected range, nothing else selected\n        // Only allow fill handle on single region selection\n        if (!client._selectedRows.length && range?.length && range.length === selectedCells.length &&\n            range.every(c1 => selectedCells.some(c2 => c1.equals(c2, true)) &&\n                c1._column.parent && c1._column.region === range[0]._column.region && client.store.isAvailable(c1.id)\n            )\n        ) {\n            return range;\n        }\n\n        return null;\n    }\n}\n\nGridFeatureManager.registerFeature(FillHandle);\n","import ArrayHelper from '../../Core/helper/ArrayHelper.js';\nimport DomHelper from '../../Core/helper/DomHelper.js';\nimport DomSync from '../../Core/helper/DomSync.js';\nimport StringHelper from '../../Core/helper/StringHelper.js';\nimport Rectangle from '../../Core/helper/util/Rectangle.js';\nimport InstancePlugin from '../../Core/mixin/InstancePlugin.js';\nimport GridFeatureManager from './GridFeatureManager.js';\nimport DomClassList from '../../Core/helper/util/DomClassList.js';\n\n/**\n * @module Grid/feature/MergeCells\n */\n\n// Maps DOM events to relayed events that need correct casing\nconst camelCase = {\n    mousedown   : 'mouseDown',\n    mousemove   : 'mouseMove',\n    mouseup     : 'mouseUp',\n    touchdown   : 'touchDown',\n    touchmove   : 'touchMove',\n    touchup     : 'touchUp',\n    pointerover : 'mouseOver',\n    mouseout    : 'mouseOut',\n    dblclick    : 'dblClick',\n    keydown     : 'keyDown',\n    keypress    : 'keyPress',\n    keyup       : 'keyUp',\n    contextmenu : 'contextMenu'\n};\n\n/**\n * This feature merges cells that have the same value in sorted columns configured to\n * {@link Grid/column/Column#config-mergeCells}. The content of merged cells is sticky for Grids with a single subgrid\n * section when all columns fit in view (content stays in view until the cell is scrolled fully out of view).\n *\n * <div class=\"note\">Support for sticky content is limited because of how <code>position: sticky</code> works. Grid\n * scrolls vertically in one element, and horizontally in another (to support multiple regions in the grid), and this\n * setup is not supported by current browsers implementation of sticky positioning</div>\n *\n * Try scrolling in the demo below. Also try sorting by the other columns (\"City\" and \"Favorite food\" are configured\n * to merge cells):\n *\n * {@inlineexample Grid/feature/MergeCells.js}\n *\n * This feature is **disabled** by default.\n *\n * @extends Core/mixin/InstancePlugin\n * @classtype mergeCells\n * @feature\n */\nexport default class MergeCells extends InstancePlugin {\n    //region Config\n\n    static $name = 'MergeCells';\n\n    static configurable = {\n        /**\n         * By default merged cells allow pointer events to pass through to the underlying row/cell, to allow selecting a\n         * row and editing an individual cell even when they are merged. Configure as `false` to allow merged cells to\n         * catch and react to the pointer events instead.\n         *\n         * ```javascript\n         * const grid = new Grid({\n         *     features : {\n         *         mergeCells : {\n         *             // Let merged cells react to pointer events\n         *             passthrough : false\n         *         }\n         *     }\n         * });\n         * ```\n         *\n         * @config {Boolean}\n         */\n        passthrough : true\n    };\n\n    // All current ranges (once rendered)\n    mergedRanges = [];\n    // Ranges indexed by row index & column id -> Each range included multiple times, for easy lookup\n    mergedMap    = {};\n\n    static get pluginConfig() {\n        return {\n            chain : [\n                'beforeRenderCell',\n                'afterRenderRow',\n                'bindStore',\n                'afterColumnsChange',\n                'afterRemove',\n                'afterToggleGroup',\n                'afterToggleSubGrid',\n                'handleEvent',\n                'populateHeaderMenu',\n                // 'setHoveredRow'\n                'afterSelectionChange'\n            ],\n\n            // Grid must perform its update *after* we do.\n            before : [\n                'onInternalResize'\n            ],\n            override : [\n                'getColumnFromElement',\n                'getRecordFromElement'\n            ]\n        };\n    };\n\n    //endregion\n\n    //region Init\n\n    afterConstruct() {\n        const\n            me         = this,\n            { client } = me;\n\n        // Each subgrid gets a merged cells container\n        client.eachSubGrid(subGrid => me.setupSubGrid(subGrid));\n\n        // Merged cells are synced after rows are updated\n        client.rowManager.ion({\n            renderDone : 'onRenderDone',\n            thisObj    : me\n        });\n\n        me.bindStore(client.store);\n    }\n\n    setupSubGrid(subGrid) {\n        // Element that will contain the merged cells\n        subGrid.$mergedCellsElement = DomHelper.createElement({\n            parent    : subGrid.element,\n            className : {\n                'b-grid-merged-cells-container' : 1\n            }\n        });\n    }\n\n    doDisable(disable) {\n        if (!this.isConfiguring) {\n            // Flag to allow reset to redraw even though we are already disabled at this stage\n            this.isDisabling = true;\n            this.reset();\n            this.isDisabling = false;\n        }\n\n        super.doDisable(disable);\n    }\n\n    updatePassthrough(use) {\n        // Toggle CSS class that has `pointer-events : none`\n        this.client.element.classList.toggle('b-mergecells-passthrough', use);\n    }\n\n    //endregion\n\n    //region Grid hooks\n\n    bindStore(store) {\n        this.detachListeners('store');\n\n        store.ion({\n            name    : 'store',\n            change  : 'onStoreChange',\n            // Call our refresh logic before grids\n            refresh : {\n                prio : 1,\n                fn   : 'onStoreRefresh'\n            },\n            thisObj : this\n        });\n    }\n\n    // Refresh all ranges when grid is resized\n    onInternalResize() {\n        this.refreshBounds();\n    }\n\n    // Get / create ranges before cell contents are rendered, redirecting the contents to the range\n    beforeRenderCell(renderData) {\n        const\n            { column, record, cellElement } = renderData,\n            subGrid                         = this.client.subGrids[column.region];\n\n        // Only affect sorted columns configured to merge cells\n        if (!this.disabled && column.mergeCells && column.isSorted && !record.isSpecialRow && !subGrid.collapsed) {\n            const mergedRange = this.getMergeRange(record, column);\n            if (mergedRange?.use) {\n                // Flag the unmerged cell to allow styling it\n                cellElement.classList.add('b-merged-cell');\n                // Make sure it is empty\n                cellElement.innerHTML = '';\n                // Redirect output to the merged cell\n                renderData.cellElement = mergedRange.cellElement;\n\n                // <remove-on-release>\n                // TODO: Consider bailing out after rendering first available cell of a merge. It would help with\n                //  performance, but any side effects from the renderer would be lost (such as assigning classes to row)\n                // </remove-on-release>\n            }\n        }\n    }\n\n    afterRenderRow({ row, oldId, oldHeight }) {\n        // Row reused for same record changed height\n        if (oldId === row.id && oldHeight !== row.height) {\n            this.heightChanged = true;\n        }\n    }\n\n    // Refresh all ranges when a column is resized (since it might affect their position and size)\n    afterColumnsChange({ action, changes, column }) {\n        if (this.disabled) {\n            return;\n        }\n\n        if (action === 'update' && changes.mergeCells && !column.mergeCells) {\n            // Remove all ranges for the column when mergeCells is set to false\n            for (const range of this.mergedRanges.slice()) {\n                if (range.column === column) {\n                    this.removeRange(range);\n                }\n            }\n\n            this.syncDom();\n            return;\n        }\n\n        this.refreshBounds();\n    }\n\n    // Remove might be transitioned, wait until it finishes before resetting (in the afterRemove hook)\n    afterRemove() {\n        !this.disabled && this.reset();\n    }\n\n    // Group collapsed or expanded\n    afterToggleGroup() {\n        !this.disabled && this.reset();\n    }\n\n    // SubGrid collapsed or expanded\n    afterToggleSubGrid() {\n        !this.disabled && this.reset();\n    }\n\n    // setHoveredRow(row) {\n    //     this.$hovered = row && this.mergedRanges.find(r => r.fromIndex <= row.dataIndex && r.toIndex >= row.dataIndex);\n    //\n    //     this.syncDom();\n    // }\n\n    // Selection changed, range is considered selected when all of its rows are selected (only in passthrough mode)\n    afterSelectionChange() {\n        if (!this.passthrough) {\n            const\n                { client } = this,\n                indices    = client.selectedRecords.map(r => client.store.indexOf(r));\n            let changed    = false;\n\n            for (const range of this.mergedRanges) {\n                let allSelected = true;\n                // Check if all records in the range are selected\n                for (let i = range.fromIndex; i <= range.toIndex && allSelected; i++) {\n                    allSelected = indices.includes(i);\n                }\n\n                if (range.isSelected !== allSelected) {\n                    range.isSelected = allSelected;\n                    changed = true;\n                }\n            }\n\n            // Only redraw if a range selection status changed\n            changed && this.syncDom();\n        }\n    }\n\n    //endregion\n\n    //region Grid overrides\n\n    // Extract record from merged cells\n    getRecordFromElement(element) {\n        if (element.elementData?.range) {\n            return this.client.store.getAt(element.elementData.range.fromIndex);\n        }\n\n        return this.overridden.getRecordFromElement(element);\n    }\n\n    // Extract column from merged cells\n    getColumnFromElement(element) {\n        if (element.elementData?.range) {\n            return element.elementData.range.column;\n        }\n\n        return this.overridden.getColumnFromElement(element);\n    }\n\n    //endregion\n\n    //region Header menu\n\n    // Allow toggling merging cells from the column header menu (unless column is explicitly disallowing it)\n    populateHeaderMenu({ column, items }) {\n        if (column.mergeable !== false) {\n            items.mergeCells = {\n                text     : 'L{MergeCells.mergeCells}',\n                icon     : `b-fw-icon ${column.mergeCells ? 'b-icon-checked' : 'b-icon-unchecked'}`,\n                tooltip  : 'L{MergeCells.menuTooltip}',\n                cls      : 'b-separator',\n                weight   : 500,\n                disabled : this.disabled,\n                onItem   : () => column.mergeCells = !column.mergeCells\n            };\n        }\n    }\n\n    //endregion\n\n    //region Relaying events\n\n    // Relay pointer events from the merged cell on grid\n    async handleEvent(event) {\n        if (!this.passthrough) {\n            const mergedCellsElement = event.target.closest('.b-grid-merged-cells');\n\n            if (mergedCellsElement) {\n                const\n                    { client }   = this,\n                    { range }    = mergedCellsElement.elementData,\n                    { cellEdit } = client.features,\n                    { column }   = range,\n                    type         = StringHelper.capitalize(camelCase[event.type] ?? event.type),\n                    eventData    = {\n                        grid        : client,\n                        records     : [],\n                        column,\n                        cellElement : mergedCellsElement.firstElementChild,\n                        target      : event.target,\n                        event\n                    };\n\n                for (let i = range.fromIndex; i <= range.toIndex; i++) {\n                    eventData.records.push(client.store.getAt(i));\n                }\n\n                client.trigger(`mergedCell${type}`, eventData);\n\n                // Cell editing, pass through to cell underneath even when not using passthrough mode\n                if (cellEdit?.triggerEvent.toLowerCase() === `cell${type}`.toLowerCase()) {\n                    const row = client.rowManager.getRowAt(event.clientY);\n                    await cellEdit.startEditing({ id : row.id, columnId : column.id });\n                }\n                // Select ranges rows when clicking the merged cell\n                else if (event.type === 'click') {\n                    this.onRangeClick({ range });\n                }\n            }\n        }\n    }\n\n    //endregion\n\n    //region Event listeners\n\n    // Select ranges rows when clicking a merged cell\n    onRangeClick({ range }) {\n        const records = [];\n\n        for (let i = range.fromIndex; i <= range.toIndex; i++) {\n            records.push(this.client.store.getAt(i));\n        }\n\n        this.client.selectedRecords = records;\n    }\n\n    // Reset when data changes\n    onStoreChange() {\n        !this.disabled && this.reset();\n    }\n\n    // Reset before grids refresh listener come into play, grid will redraw\n    onStoreRefresh({ action }) {\n        // filter & dataset triggers change too, handled above\n        if (action !== 'filter' && action !== 'dataset') {\n            !this.disabled && this.reset(false);\n        }\n    }\n\n    //endregion\n\n    //region Render\n\n    // Element is needed early since it is passed to column renderers, and syncing for each rendered cell would give a\n    // lot of overhead. Thus creating element directly instead\n    createRangeElement(range) {\n        const\n            parent = this.client.getSubGridFromColumn(range.column).$mergedCellsElement,\n            syncId = `${range.fromIndex}-@-${range.column.id}`;\n\n        // If there is already an element for the range (also if previously released), we grab that one.\n        // We are bending the rules of DomSync here by spawning the element early\n        let element = parent.syncIdMap?.[syncId] ?? parent.releasedIdMap?.[syncId];\n\n        // No longer considered released\n        if (parent.releasedIdMap) {\n            delete parent.releasedIdMap[syncId];\n        }\n\n        if (!element) {\n            element = DomHelper.createElement(this.createRangeDomConfig(range));\n        }\n\n        // New element or reusing released one, DomSync need to be made aware\n        DomSync.addChild(parent, element, syncId);\n\n        range.element = element;\n        range.cellElement = element.firstElementChild;\n\n        return element;\n    }\n\n    // Create a DomConfig object for the supplied range, used initially with DomHelper and thereafter with DomSync\n    createRangeDomConfig(range) {\n        const\n            { column, fromIndex, toIndex, top, left, width, height } = range,\n            { type } = column,\n            record = this.client.store.getAt(fromIndex),\n            domConfig = {\n                className : {\n                    'b-grid-merged-cells' : 1,\n                    // 'b-hover'             : this.$hovered === range,\n                    'b-selected'          : range.isSelected\n                },\n                elementData : {\n                    range\n                },\n                style : {\n                    top,\n                    left,\n                    height,\n                    width\n                },\n                dataset : {\n                    syncId   : `${fromIndex}-@-${column.id}`,\n                    fromIndex,\n                    toIndex,\n                    column   : column.field,\n                    columnId : column.id\n                },\n                children : [\n                    // Div for an actual cell\n                    {\n                        className : new DomClassList(this.client.cellCls).assign({\n                            [`b-${type?.toLowerCase()}-cell`] : type,\n                            [column.cellCls]                  : column.cellCls,\n                            [column.internalCellCls]          : column.internalCellCls\n                        }).assign(column.autoCls),\n                        // Don't touch cell children that might have been added by renderer\n                        keepChildren : true,\n                        // Tag along the range for easy resolving later\n                        elementData  : {\n                            range\n                        },\n                        // Dataset expected on cells\n                        dataset : {\n                            column   : column.field,\n                            columnId : column.id\n                        },\n                        // Size using configured row height, to at least have a chance of lining up with surrounding cells\n                        style : {\n                            height : this.client.rowManager.rowHeight\n                        }\n                    }\n                ]\n            };\n\n        // Allow application code a chance to affect the merged cell (intended for styling)\n        column.mergedRenderer?.({ domConfig, value : column.getRawValue(record), record, column, fromIndex, toIndex });\n\n        return domConfig;\n    }\n\n    buildMergedCellsConfig(fromIndex, toIndex, rows) {\n        const\n            me             = this,\n            { client }     = me,\n            { rowManager } = client;\n\n        // When exporting content we render rows to a document fragment one by one without RowManager. In\n        // order to draw ranges correctly in this case we need provide some meta information - list of row-like\n        // objects from which we can size for merged cell element, i.e. top, bottom, height, dataIndex\n        // Match grids row buffer, drawing ranges from the topmost row to the bottommost\n        fromIndex = fromIndex ?? rowManager.topRow?.dataIndex;\n        toIndex = toIndex ?? rowManager.bottomRow?.dataIndex;\n\n        const\n            // { locked = [], normal = [] }\n            domConfigMap = client.regions.reduce((map, region) => {\n                map[region] = {\n                    className : {\n                        'b-grid-merged-cells-container' : 1\n                    },\n                    children : []\n                };\n                return map;\n            }, {});\n\n        // Determine and update visible ranges\n        for (const range of me.mergedRanges) {\n            if (range.use && range.fromIndex <= toIndex && range.toIndex >= fromIndex) {\n                // Update the range, in case more of it has been scrolled into view\n                me.updateRange(range, me.heightChanged, rows);\n                // Create a DomConfig for it\n                domConfigMap[range.column.region].children.push(me.createRangeDomConfig(range));\n            }\n        }\n\n        return domConfigMap;\n    }\n\n    syncDom(force = false) {\n        const\n            me             = this,\n            { client }     = me,\n            { rowManager } = client;\n\n        // Bail out if we get here too early (happens in Scheduler) or are disabled\n        if (!force && !rowManager.topRow || me.disabled && !me.isDisabling) {\n            return;\n        }\n\n        const domConfigMap = this.buildMergedCellsConfig();\n\n        // Sync per subgrid\n        client.eachSubGrid(subGrid => {\n            DomSync.sync({\n                targetElement : subGrid.$mergedCellsElement,\n                syncIdField   : 'syncId',\n                domConfig     : domConfigMap[subGrid.region]\n            });\n        });\n\n        me.heightChanged = false;\n    }\n\n    // Called after rows are updated, sync visible ranges per subgrid\n    onRenderDone() {\n        this.syncDom();\n    }\n\n    //endregion\n\n    //region Ranges\n\n    // Remove range from list and index/column map, leaving no trace it since we don't know if it will ever\n    // come back (element will be released by DomSync)\n    removeRange(range) {\n        ArrayHelper.remove(this.mergedRanges, range);\n        for (let index = range.fromIndex; index <= range.toIndex; index++) {\n            delete this.mergedMap[`${index}-@-${range.column.id}`];\n        }\n    }\n\n    // Full reset, regenerating all ranges\n    reset(redraw = true) {\n        const\n            me        = this,\n            columns   = me.client.columns.visibleColumns.filter(c => c.mergeCells && c.isSorted, true),\n            hadRanges = me.mergedRanges.length;\n\n        me.mergedRanges = [];\n        me.mergedMap = {};\n\n        if (redraw && !me.client.refreshSuspended) {\n            for (const row of me.client.rowManager.rows) {\n                for (const column of columns) {\n                    row.renderCell(row.getCell(column.id));\n                }\n            }\n\n            // Redraw, forcing it if all rows are gone\n            me.syncDom(hadRanges && !me.client.rowManager.rowCount);\n        }\n    }\n\n    // Refreshes existing ranges coords\n    refreshBounds() {\n        const\n            { mergedRanges } = this,\n            boundsMap        = new Map();\n\n        for (const range of mergedRanges.slice()) {\n            const\n                { column }  = range,\n                { element } = column;\n\n            // Column shown\n            if (element) {\n                let bounds = boundsMap.get(column);\n\n                if (!bounds) {\n                    // Temporarily cache bounds to avoid calculating them multiple times\n                    boundsMap.set(column, bounds = Rectangle.from(element, element.parentElement));\n                }\n\n                range.left = bounds.left;\n                range.width = bounds.width;\n            }\n            // Column hidden or removed\n            else {\n                this.removeRange(range);\n            }\n        }\n\n        this.syncDom();\n    }\n\n    // Updates the range as user scrolls, until its start and end coords are fully known\n    // Rows argument is required to render merged cells on export. We provide row-like objects there\n    updateRange(range, force, rows = null) {\n        const\n            { store, rowManager }           = this.client,\n            { topRendered, bottomRendered } = range,\n            { rowOffsetHeight }             = rowManager;\n\n        let { fromIndex, toIndex } = range,\n            topRow, bottomRow;\n\n        force = rows ? rows.length > 0 : force;\n\n        // No need to update anything if bounds are correct already\n        if (!force && topRendered && bottomRendered) {\n            return;\n        }\n\n        if (!topRendered || force) {\n            if (rows) {\n                const index = rows.findIndex(row => row.dataIndex >= fromIndex);\n                topRow = rows[index];\n                fromIndex = topRow.dataIndex;\n            }\n            else {\n                // <remove-on-release>\n                // TODO: Should not need to iterate here, calculate top instead\n                // </remove-on-release>\n                do {\n                    topRow = rowManager.getRowById(store.getAt(fromIndex));\n                }\n                while (!topRow && fromIndex++ < toIndex);\n            }\n\n            // topRow is the actual topmost row in the range\n            range.topRendered = (fromIndex === range.fromIndex);\n\n            const rowsAbove = fromIndex - range.fromIndex;\n\n            range.top = topRow.top - rowsAbove * (rows ? topRow.offsetHeight : rowOffsetHeight);\n        }\n\n        if (!bottomRendered || force) {\n            if (rows) {\n                // We need to find last index, so we can just pick max between -1 and whatever we find\n                const index = rows.findIndex(row => row.dataIndex === toIndex);\n                bottomRow = rows[index === -1 ? rows.length - 1 : index];\n                fromIndex = bottomRow.dataIndex;\n            }\n            else {\n                // <remove-on-release>\n                // TODO: Should not need to iterate here, calculate bottom instead\n                // </remove-on-release>\n                do {\n                    bottomRow = rowManager.getRowById(store.getAt(toIndex));\n                }\n                while (!bottomRow && toIndex-- > fromIndex);\n            }\n\n            // bottomRow is the actual bottommost row in the range\n            range.bottomRendered = (toIndex === range.toIndex);\n\n            const rowsBelow = range.toIndex - toIndex;\n\n            range.bottom = bottomRow.bottom + rowsBelow * (rows ? bottomRow.offsetHeight : rowOffsetHeight);\n        }\n\n        range.height = range.bottom - range.top;\n    }\n\n    // Retrieve a range for the specified record / column, creating a new one if none found by walking upwards and\n    // downwards until a deviating value is found\n    getMergeRange(record, column) {\n        if (record.isSpecialRow) {\n            return;\n        }\n\n        const\n            me            = this,\n            { mergedMap } = me,\n            { store }     = me.client,\n            columnId      = column.id,\n            index         = store.indexOf(record),\n            key           = `${index}-@-${columnId}`;\n\n        let range = mergedMap[key];\n\n        if (!range) {\n            const value = column.getRawValue(record);\n\n            range = mergedMap[key] = {\n                column\n            };\n\n            me.mergedRanges.push(range);\n\n            // Search up until encountering different value\n            let earlierRecord, earlierValue, earlierIndex = index;\n\n            do {\n                earlierRecord = store.getAt(--earlierIndex);\n                earlierValue  = earlierRecord && column.getRawValue(earlierRecord);\n\n                if (earlierValue === value) {\n                    mergedMap[`${earlierIndex}-@-${columnId}`] = range;\n                }\n\n            } while (earlierRecord && earlierValue === value);\n\n            // And down\n            let laterRecord, laterValue, laterIndex = index;\n\n            do {\n                laterRecord = store.getAt(++laterIndex);\n                laterValue  = laterRecord && column.getRawValue(laterRecord);\n\n                if (laterValue === value) {\n                    mergedMap[`${laterIndex}-@-${columnId}`] = range;\n                }\n            } while (laterRecord && laterValue === value);\n\n            range.fromIndex = earlierIndex + 1;\n            range.toIndex   = laterIndex - 1;\n\n            // We only care about ranges longer than 1 record\n            if (range.toIndex - range.fromIndex > 0) {\n                // <remove-on-release>\n                // TODO: get relative element with different approach, to work with grouped headers\n                // </remove-on-release>\n                const headerBounds = Rectangle.from(column.element, column.element.parentElement);\n                range.left  = headerBounds.left;\n                range.width = headerBounds.width;\n                range.use = true;\n            }\n        }\n\n        if (!range.element && range.use) {\n            me.createRangeElement(range);\n        }\n\n        return range;\n    }\n\n    //endregion\n}\n\nGridFeatureManager.registerFeature(MergeCells);\n","import DomHelper from '../../Core/helper/DomHelper.js';\nimport InstancePlugin from '../../Core/mixin/InstancePlugin.js';\nimport GridFeatureManager from '../feature/GridFeatureManager.js';\nimport StringHelper from '../../Core/helper/StringHelper.js';\n\n// <remove-on-release>\n// TODO: Handle date columns\n// TODO: Icons to navigate between hits in the header? or in each cell?\n// TODO: Icon to clear quickfind in header\n// TODO: regex for valid key pressed?\n// </remove-on-release>\n\n/**\n * @module Grid/feature/QuickFind\n */\n\n/**\n * Feature that allows the user to search in a column by focusing a cell and typing. Navigate between hits using the\n * keyboard, [f3] or [ctrl]/[cmd] + [g] moves to next, also pressing [shift] moves to previous.\n *\n * This feature is <strong>disabled</strong> by default.\n *\n * ## Keyboard shortcuts\n * This feature has the following default keyboard shortcuts:\n *\n * | Keys                | Action             | Action description                |\n * |---------------------|--------------------|-----------------------------------|\n * | `F3`                | *goToNextHit*      | Move focus to next search hit     |\n * | `Shift`+F3`         | *goToPrevHit*      | Move focus to previous search hit |\n * | `Ctrl`+`G`          | *goToNextHit*      | Move focus to next search hit     |\n * | `Ctrl`+`Shift`+`G`  | *goToPrevHit*      | Move focus to previous search hit |\n * | `Ctrl`+`Shift`+`F3` | *showFilterEditor* | Shows the filter editor           |\n * | `Escape`            | *clearSearch*      | Removes the search completely     |\n *\n * <div class=\"note\">Please note that <code>Ctrl</code> is the equivalent to <code>Command</code> and <code>Alt</code>\n * is the equivalent to <code>Option</code> for Mac users</div>\n *\n * For more information on how to customize keyboard shortcuts, please see\n * [our guide](#Grid/guides/customization/keymap.md)\n *\n * @extends Core/mixin/InstancePlugin\n *\n * @example\n * // enable QuickFind\n * let grid = new Grid({\n *   features: {\n *     quickFind: true\n *   }\n * });\n *\n * // navigate to next hit programmatically\n * grid.features.quickFind.gotoNextHit();\n *\n * @demo Grid/quickfind\n * @classtype quickFind\n * @inlineexample Grid/feature/QuickFind.js\n * @feature\n */\nexport default class QuickFind extends InstancePlugin {\n    //region Config\n\n    static get $name() {\n        return 'QuickFind';\n    }\n\n    static configurable = {\n        mode : 'header',\n        find : '',\n\n        /**\n         * See {@link #keyboard-shortcuts Keyboard shortcuts} for details\n         * @config {Object<String,String>}\n         */\n        keyMap : {\n            F3             : 'gotoNextHit',\n            'Shift+F3'     : 'gotoPrevHit',\n            'Ctrl+g'       : 'gotoNextHit',\n            'Ctrl+Shift+g' : 'gotoPrevHit',\n            'Ctrl+Shift+f' : 'showFilterEditor',\n            Escape         : 'clearSearch',\n\n            //Private\n            Backspace : 'onBackspace'\n        }\n    };\n\n    // Plugin configuration. This plugin chains some of the functions in Grid.\n    static get pluginConfig() {\n        return {\n            chain : ['onElementKeyPress', 'onCellNavigate']\n        };\n    }\n\n    //endregion\n\n    //region Init\n\n    static get properties() {\n        return {\n            hitCls          : 'b-quick-hit',\n            hitCellCls      : 'b-quick-hit-cell',\n            hitCellBadgeCls : 'b-quick-hit-cell-badge',\n            hitTextCls      : 'b-quick-hit-text'\n        };\n    }\n\n    construct(grid, config) {\n        super.construct(grid, config);\n\n        Object.assign(this, {\n            grid,\n            treeWalker : grid.setupTreeWalker(grid.element, DomHelper.NodeFilter.SHOW_TEXT, () => DomHelper.NodeFilter.FILTER_ACCEPT)\n        });\n    }\n\n    isActionAvailable() {\n        const { focusedCell } = this.grid;\n        return !this.disabled && focusedCell?.record && !focusedCell.isActionable && this.find.length > 0;\n    }\n\n    doDisable(disable) {\n        if (disable) {\n            this.clear();\n        }\n\n        super.doDisable(disable);\n    }\n\n    get store() {\n        return this.grid.store;\n    }\n\n    //endregion\n\n    //region Show/hide QuickFind\n\n    /**\n     * Shows a \"searchfield\" in the header. Triggered automatically when you have a cell focused and start typing.\n     * @private\n     */\n    showQuickFind() {\n        const\n            me     = this,\n            header = me.grid.getHeaderElement(me.columnId);\n\n        if (header) {\n            if (!me.headerField) {\n                const [element, field, badge] = DomHelper.createElement({\n                    tag       : 'div',\n                    className : 'b-quick-hit-header',\n                    children  : [\n                        { tag : 'div', className : 'b-quick-hit-field' },\n                        { tag : 'div', className : 'b-quick-hit-badge' }\n                    ]\n                }, { returnAll : true });\n\n                if (me.mode === 'header') {\n                    header.appendChild(element);\n                }\n                else {\n                    element.className += ' b-quick-hit-mode-grid';\n                    me.grid.element.appendChild(element);\n                }\n\n                me.headerField = {\n                    header    : element,\n                    field,\n                    badge,\n                    colHeader : header\n                };\n            }\n\n            me.headerField.field.innerHTML = me.find;\n            me.headerField.badge.innerHTML = me.found.length;\n\n            header.classList.add('b-quick-find-header');\n\n            if (!me.renderListenerInitialized) {\n                me.grid.rowManager.ion({\n                    rendercell : me.renderCell,\n                    thisObj    : me\n                });\n                me.renderListenerInitialized = true;\n            }\n        }\n    }\n\n    /**\n     * Hide the \"searchfield\" and remove highlighted hits. Called automatically when pressing [esc] or backspacing away\n     * the keywords.\n     * @private\n     */\n    hideQuickFind() {\n        const\n            me                    = this,\n            { grid, headerField } = me;\n\n        // rerender cells to remove quick-find markup\n        for (const hit of (me.prevFound || me.found)) {\n            const row = grid.getRowById(hit.id);\n            if (row) {\n                // Need to force replace quick finds markup\n                row.forceInnerHTML = true;\n\n                const cellElement = row.getCell(me.columnId);\n                cellElement._content = null;\n                row.renderCell(cellElement);\n\n                row.forceInnerHTML = false;\n            }\n        }\n\n        if (headerField) {\n            headerField.header.parentNode.removeChild(headerField.header);\n            headerField.colHeader.classList.remove('b-quick-find-header');\n            me.headerField = null;\n        }\n\n        if (me.renderListenerInitialized) {\n            grid.rowManager.un({ rendercell : me.renderCell }, me);\n            me.renderListenerInitialized = false;\n        }\n\n        grid.trigger('hideQuickFind');\n    }\n\n    //endregion\n\n    //region Search\n\n    /**\n     * Performs a search and highlights hits. If find is empty, QuickFind is closed.\n     * @param {String} find Text to search for\n     * @param {String} columnFieldOrId Column to search\n     */\n    search(find, columnFieldOrId = this.columnId) {\n        const\n            me       = this,\n            { grid } = me,\n            column   = grid.columns.getById(columnFieldOrId) || grid.columns.get(columnFieldOrId),\n            found    = me.store.findByField(column.field, find, column.mergeCells && column.isSorted);\n\n        let i = 1;\n\n        Object.assign(me, {\n            foundMap  : {},\n            prevFound : me.found,\n            found,\n            find,\n            columnId  : column.id,\n            findRe    : new RegExp(`(\\\\s+)?(${StringHelper.escapeRegExp(String(find))})(\\\\s+)?`, 'ig')\n        });\n\n        if (find) {\n            me.showQuickFind();\n        }\n        else {\n            me.hideQuickFind();\n        }\n\n        // clear old hits\n        for (const cellElement of DomHelper.children(grid.element, `.${me.hitCls}`)) {\n            cellElement.classList.remove(me.hitCls, me.hitCellCls);\n\n            if (cellElement._originalContent) {\n                cellElement.innerHTML = cellElement._originalContent;\n                cellElement._originalContent = null;\n            }\n        }\n\n        if (!found) {\n            return;\n        }\n\n        if (found.length > 0) {\n            me.gotoClosestHit(grid.focusedCell, found);\n        }\n\n        // highlight hits for visible cells\n        for (const hit of found) {\n            me.foundMap[hit.id] = i++;\n\n            const row = grid.getRowById(hit.data.id);\n            row?.renderCell(row.getCell(column.id));\n\n            // limit highlighted hits\n            if (i > 1000) {\n                break;\n            }\n        }\n\n        grid.trigger('quickFind', { find, found });\n    }\n\n    /**\n     * Clears and closes QuickFind.\n     */\n    clear() {\n        if (this.find || this.found?.length) {\n            this.search('');\n        }\n    }\n\n    /**\n     * Number of results found\n     * @type {Number}\n     * @readonly\n     */\n    get foundCount() {\n        return this.found?.length ?? 0;\n    }\n\n    /**\n     * Found results (as returned by Store#findByField), an array in format { index: x, data: record }\n     * @member {StoreSearchResult[]} found\n     * @readonly\n     */\n\n    //endregion\n\n    //region Navigation\n\n    /**\n     * Go to specified hit.\n     * @param {Number} index\n     */\n    gotoHit(index) {\n        const nextHit = this.found[index];\n\n        if (nextHit) {\n            this.grid.focusCell({\n                columnId : this.columnId,\n                id       : nextHit.id\n            }, { doSelect : true });\n        }\n\n        return !!nextHit;\n    }\n\n    gotoClosestHit(focusedCell, found) {\n        const\n            focusedIndex = focusedCell ? this.grid.store.indexOf(focusedCell.id) : 0,\n            foundSorted  = found.slice().sort(\n                (a, b) => Math.abs(a.index - focusedIndex) - Math.abs(b.index - focusedIndex)\n            );\n\n        this.gotoHit(found.indexOf(foundSorted[0]));\n    }\n\n    /**\n     * Go to the first hit.\n     */\n    gotoFirstHit() {\n        this.gotoHit(0);\n    }\n\n    /**\n     * Go to the last hit.\n     */\n    gotoLastHit() {\n        this.gotoHit(this.found.length - 1);\n    }\n\n    /**\n     * Select the next hit, scrolling it into view. Triggered with [f3] or [ctrl]/[cmd] + [g].\n     */\n    gotoNextHit() {\n        const\n            me           = this,\n            { grid }     = me,\n            // start from focused cell, or if focus has left grid use lastFocusedCell\n            currentId    = grid._focusedCell?.id ?? grid.lastFocusedCell?.id,\n            currentIndex = grid.store.indexOf(currentId) || 0,\n            nextHit      = me.found.find(hit => hit.index > currentIndex);\n\n        if (nextHit) {\n            grid.focusCell({\n                columnId : me.columnId,\n                id       : nextHit.id\n            }, { doSelect : true });\n        }\n        else {\n            me.gotoFirstHit();\n        }\n    }\n\n    /**\n     * Select the previous hit, scrolling it into view. Triggered with [shift] + [f3] or [shift] + [ctrl]/[cmd] + [g].\n     */\n    gotoPrevHit() {\n        const\n            me              = this,\n            { grid, found } = me,\n            currentId       = grid._focusedCell?.id ?? grid.lastFocusedCell?.id,\n            currentIndex    = grid.store.indexOf(currentId) || 0;\n\n        let prevHit;\n\n        if (!found.length) {\n            return;\n        }\n\n        for (let i = found.length - 1; i--; i >= 0) {\n            if (found[i].index < currentIndex) {\n                prevHit = found[i];\n                break;\n            }\n        }\n\n        if (prevHit) {\n            grid.focusCell({\n                columnId : me.columnId,\n                id       : prevHit.id\n            }, { doSelect : true });\n        }\n        else {\n            me.gotoLastHit();\n        }\n    }\n\n    //endregion\n\n    //region Render\n\n    /**\n     * Called from SubGrid when a cell is rendered.\n     * @private\n     */\n    renderCell({ cellElement, column, record }) {\n        const\n            me           = this,\n            { classList } = cellElement,\n            {\n                treeWalker,\n                findRe,\n                hitTextCls\n            }           = me,\n            hitIndex    = me.columnId === column.id && me.foundMap?.[record.id];\n\n        if (hitIndex) {\n            // highlight cell\n            classList.add(me.hitCls);\n            cellElement.isQuickHit = true;\n            cellElement._originalContent = cellElement.innerHTML;\n\n            // if features have added other stuff to the cell, value is in div.b-grid-cell-value\n            // highlight in cell if found in innerHTML\n            const inner = treeWalker.currentNode = DomHelper.down(cellElement, '.b-grid-cell-value,.b-tree-cell-value') || cellElement;\n\n            for (let textNode = treeWalker.nextNode(); textNode && inner.contains(textNode);) {\n                const\n                    nodeToReplace = textNode,\n                    textContent   = textNode.nodeValue,\n                    newText       = ['<span>'];\n\n                // Move onto next text node before we replace the node with a highlight HTML sequence\n                textNode = treeWalker.nextNode();\n\n                let offset = findRe.lastIndex;\n\n                // Convert textContent into an innerHTML string which htmlEncodes the text and embeds\n                // a highlighting span which contains the target text.\n                for (let match = findRe.exec(textContent); match; match = findRe.exec(textContent)) {\n                    const\n                        preamble    = textContent.substring(offset, match.index),\n                        spaceBefore = match[1] ? '\\xa0' : '',\n                        v           = match[2],\n                        spaceAfter  = match[3] ? '\\xa0' : '';\n\n                    newText.push(`${StringHelper.encodeHtml(preamble)}${spaceBefore}<span class=\"${hitTextCls}\">${v}</span>${spaceAfter}`);\n                    offset = findRe.lastIndex;\n                }\n\n                newText.push(StringHelper.encodeHtml(textContent.substring(offset)), '</span>');\n\n                // Insert a fragment with each match wrapped with a span.\n                nodeToReplace.parentNode.insertBefore(DomHelper.createElementFromTemplate(newText.join(''), {\n                    fragment : true\n                }), nodeToReplace);\n                nodeToReplace.remove();\n            }\n            DomHelper.createElement({\n                parent    : cellElement,\n                className : me.hitCellBadgeCls,\n                text      : hitIndex\n            });\n        }\n    }\n\n    //endregion\n\n    //region Events\n\n    onBackspace(event) {\n        const me = this;\n        if (me.find) {\n            me.find = me.find.substr(0, me.find.length - 1);\n            me.search(me.find);\n            return true;\n        }\n        return false;\n    }\n\n    clearSearch() {\n        if (this.find) {\n            this.find = '';\n            this.search(this.find);\n            return true;\n        }\n        return false;\n    }\n\n    showFilterEditor() {\n        const\n            me = this,\n            { filter } = me.client.features;\n\n        if (filter && me.columnId && me.foundCount) {\n            me.clear();\n            filter.showFilterEditor(me.client.columns.getById(me.columnId), me.find);\n        }\n    }\n\n    /**\n     * Chained function called on grids keypress event. Handles input for \"searchfield\".\n     * @private\n     * @param event\n     */\n    onElementKeyPress(event) {\n        const\n            me              = this,\n            { grid }        = me,\n            { focusedCell } = grid;\n\n        // Only react to keystrokes on grid cell elements\n        if (!event.handled && !me.disabled && focusedCell?.record && !focusedCell.isActionable && event.key?.length === 1) {\n            const column = grid.columns.getById(grid._focusedCell.columnId);\n            // if trying to search in invalid column, it's a hard failure\n            //<debug>\n            console.assert(column, 'Focused cell column not found');\n            //</debug>\n            if (column && column.searchable !== false) {\n                me.columnId = grid._focusedCell.columnId;\n                me.find += event.key;\n                me.search(me.find);\n            }\n        }\n    }\n\n    onCellNavigate(grid, fromCellSelector, toCellSelector) {\n        const\n            me    = this;\n\n        if (me.find && (!toCellSelector || toCellSelector.columnId !== me.columnId)) {\n            me.clear();\n        }\n    }\n\n    //endregion\n}\n\nGridFeatureManager.registerFeature(QuickFind);\n","import InstancePlugin from '../../Core/mixin/InstancePlugin.js';\nimport GridFeatureManager from '../feature/GridFeatureManager.js';\nimport DomHelper from '../../Core/helper/DomHelper.js';\nimport EventHelper from '../../Core/helper/EventHelper.js';\nimport Objects from '../../Core/helper/util/Objects.js';\nimport '../column/ActionColumn.js';\n\n/**\n * @module Grid/feature/RowExpander\n */\n\nconst storeRemoveActions = { remove : 1, filter : 1, dataset : 1, replace : 1 };\n\n/**\n * Enables expanding of Grid rows by either row click or double click, or by adding a separate Grid column which renders\n * a button that expands or collapses the row.\n *\n * {@inlineexample Grid/feature/RowExpander.js}\n *\n * The content of the expanded row body is rendered by providing a {@link #config-renderer} function to the\n * rowExpander feature config.\n *\n * ```javascript\n * new Grid({\n *    features : {\n *        rowExpander : {\n *            renderer({record, region, expanderElement}){\n *                return htmlToBeExpanded;\n *            }\n *        }\n *    }\n * });\n * ```\n *\n * <div class=\"note\">Note that if used in a Gantt, the Gant's `fixedRowHeight` must be set to `false`.</div>\n *\n * This feature is **disabled** by default\n *\n * ## Expand on click\n * Set {@link #config-triggerEvent} to a Grid cell event that should trigger row expanding and collapsing.\n *\n * ```javascript\n * new Grid({\n *    features : {\n *        rowExpander : {\n *            triggerEvent: 'celldblclick',\n *            renderer...\n *        }\n *    }\n * });\n * ```\n *\n * ## Expander column position\n * The expander column can either be inserted before or after the existing Grid columns. If the Grid has multiple\n * regions the column will be added to the first region.\n *\n * Adjust expander column position to last in a specific Grid region by setting {@link #config-columnPosition}\n * to `last` and configuring the {@link #config-column} with a region name.\n *\n * ```javascript\n * new Grid({\n *    features : {\n *        rowExpander : {\n *            column: {\n *                region: 'last'\n *            },\n *            columnPosition: 'last',\n *            renderer...\n *        }\n *    }\n * });\n * ```\n *\n * ## Record update\n * If the expander content depends on row record data, the expander can be re-rendered on record update by setting\n * {@link #config-refreshOnRecordChange} to `true`.\n * ```javascript\n * new Grid({\n *    features : {\n *        rowExpander : {\n *            refreshOnRecordChange: true,\n *            renderer...\n *        }\n *    }\n * });\n * ```\n *\n * ## Async\n * When the content of the row expander should be rendered async just see to it that you return a promise.\n * ```javascript\n * new Grid({\n *    features : {\n *        rowExpander : {\n *            async renderer({record, region, expanderElement}){\n *                return fetchFromBackendAndRenderData(record);\n *            }\n *        }\n *    }\n * });\n * ```\n *\n * @extends Core/mixin/InstancePlugin\n * @classtype rowExpander\n * @feature\n */\nexport default class RowExpander extends InstancePlugin {\n\n    //region Config\n    static $name = 'RowExpander';\n\n    // Cannot use `static properties = {}`, new Map/Set would pollute the prototype\n    static get properties() {\n        return {\n            // CSS classes\n            expanderBodyClass : 'b-rowexpander-body',\n            expandedRowClass  : 'b-rowexpander-row-expanded', // Map where the keys are the expanded records and values are an object {rowHeight, cellHeight, expandElements}\n            recordStateMap    : new Map(),\n            collapsingRecords : new Set()\n        };\n    }\n\n    static configurable = {\n\n        /**\n         * The implementation of this function is called each time the body of an expanded row is rendered. Either\n         * return an HTML string, or a {@link Core.helper.DomHelper#typedef-DomConfig} object describing the markup.\n         *\n         * ```javascript\n         * new Grid({\n         *    features : {\n         *        rowExpander : {\n         *            renderer({record, region, expanderElement}){\n         *                return htmlToBeExpanded;\n         *            }\n         *        }\n         *    }\n         * });\n         * ```\n         *\n         * Or return a {@link Core.helper.DomHelper#typedef-DomConfig} object.\n         *\n         * ```javascript\n         * new Grid({\n         *    features : {\n         *        rowExpander : {\n         *            renderer({record, region, expanderElement}){\n         *                return {\n         *                   tag       : 'form',\n         *                   className : 'expanded-row-form',\n         *                   children  : [\n         *                       {\n         *                           tag        : 'textarea',\n         *                           name       : 'description',\n         *                           className  : 'expanded-textarea'\n         *                       },\n         *                       {\n         *                           tag        : 'button',\n         *                           text       : 'Save',\n         *                           className  : 'expanded-save-button',\n         *                       }\n         *                   ]\n         *                };\n         *            }\n         *        }\n         *    }\n         * });\n         * ```\n         *\n         * It is also possible to add markup directly to the expanderElement.\n         *\n         * ```javascript\n         * new Grid({\n         *    features : {\n         *        rowExpander : {\n         *            renderer({record, region, expanderElement}){\n         *                new UIComponent({\n         *                    appendTo: expanderElement,\n         *                    ...\n         *                });\n         *            }\n         *        }\n         *    }\n         * });\n         * ```\n         * The renderer function can also be asynchronous.\n         *\n         * ```javascript\n         * new Grid({\n         *    features : {\n         *        rowExpander : {\n         *            async renderer({record, region, expanderElement}){\n         *                return await awaitAsynchronousOperation();\n         *            }\n         *        }\n         *    }\n         * });\n         * ```\n         * @param {Object} renderData Object containing renderer parameters\n         * @param {Core.data.Model} renderData.record Record for the row\n         * @param {HTMLElement} renderData.expanderElement Expander body element\n         * @param {HTMLElement} renderData.rowElement Row element\n         * @param {String} renderData.region Grid region name\n         * @returns {String|DomConfig} Row expander body content\n         * @config {Function}\n         * @async\n         */\n        renderer : null,\n\n        /**\n         * The name of the Grid event that will toggle expander. Defaults to `null` but can be set to any event such\n         * as {@link Grid.view.mixin.GridElementEvents#event-cellDblClick} or\n         * {@link Grid.view.mixin.GridElementEvents#event-cellClick}.\n         *\n         * ```javascript\n         * features : {\n         *     rowExpander : {\n         *         triggerEvent : 'cellclick'\n         *     }\n         * }\n         * ```\n         *\n         * @config {String}\n         */\n        triggerEvent : null,\n\n        /**\n         * Provide a column config object to display a button with expand/collapse functionality.\n         * Shown by default, set to `null` to not include.\n         *\n         * ```javascript\n         * new Grid({\n         *    features : {\n         *        rowExpander : {\n         *            column: {\n         *                // Use column config options here\n         *                region: 'last'\n         *            }\n         *        }\n         *    }\n         * });\n         * ```\n         *\n         * @config {ActionColumnConfig|Grid.column.ActionColumn}\n         */\n        column : { },\n\n        /**\n         * Makes the expand/collapse button column appear either as the first column (default or `first`) or as the\n         * last (set to `last`). Note that the column by default will be added to the first region, if the Grid\n         * has multiple regions. Use the {@link #config-column} config to change region.\n         * @config {String}\n         * @default\n         */\n        columnPosition : 'first',\n\n        /**\n         * If set to `true`, the RowExpander will, on record update, re-render an expanded row by calling the\n         * {@link #config-renderer} function.\n         * @config {Boolean}\n         * @default\n         */\n        refreshOnRecordChange : false,\n\n        /**\n         * Use this for customizing async {@link #config-renderer} loading indicator height.\n         * @config {Number}\n         * @defalt\n         */\n        loadingIndicatorHeight : 100,\n\n        /**\n         * Use this for customizing async {@link #config-renderer} loading indicator text.\n         * @config {String}\n         * @default Loading\n         */\n        loadingIndicatorText : 'L{loading}',\n\n        /**\n         * Use this to disable expand and collapse animations.\n         * @config {Boolean}\n         * @default\n         */\n        enableAnimations : true\n    };\n\n    // Plugin configuration. This plugin chains/overrides some of the functions in Grid.\n    static get pluginConfig() {\n        return {\n            chain    : ['afterColumnsChange', 'beforeRenderRow', 'processRowHeight', 'bindStore'],\n            override : ['onGridBodyFocusIn']\n        };\n    }\n\n    //endregion\n\n    //region Init\n\n    afterConstruct() {\n        const\n            me         = this,\n            { client } = me;\n        if (!me.renderer) {\n            console.warn('RowExpander requires implementing the renderer function.');\n            return;\n        }\n        if (client.isGanttBase && client.fixedRowHeight !== false) {\n            console.warn('When using RowExpander on a Gantt, the Gantt`s fixedRowHeight config must be set to false.');\n        }\n\n        // Bind initial store\n        me.bindStore(client.store);\n\n        if (me.triggerEvent) {\n            client.ion({ [me.triggerEvent] : 'onTriggerEvent', thisObj : me });\n        }\n\n        me.addColumn();\n    }\n\n    bindStore(store) {\n        const me = this;\n\n        me.recordStateMap.clear();\n        me.collapsingRecords.clear();\n        me.detachListeners('clientStoreChange');\n\n        store.ion({\n            name    : 'clientStoreChange',\n            change  : me.onStoreChange,\n            thisObj : me\n        });\n    }\n\n    doDisable(disable) {\n        const { client } = this;\n\n        if (disable) {\n            this.recordStateMap.clear();\n            this.collapsingRecords.clear();\n        }\n\n        if (!client.isConfiguring) {\n            client.rowManager.renderFromRow();\n        }\n        super.doDisable(disable);\n    }\n\n    changeLoadingIndicatorText(text) {\n        return text ? this.L(text) : text;\n    }\n\n    // Overrides onGridBodyFocusIn to ignore events on row expander body.\n    onGridBodyFocusIn(event) {\n        if (!this.client.lastMousedownEvent?.target?.closest('.b-rowexpander-body')) {\n            this.overridden.onGridBodyFocusIn(event);\n        }\n    }\n\n    get isAnimating() {\n        return this.client.isAnimating;\n    }\n\n    set isAnimating(value) {\n        const\n            { client }   = this,\n            wasAnimating = client.isAnimating;\n\n        client.isAnimating = value;\n\n        if (client.isAnimating !== wasAnimating) {\n            client.element.classList.toggle('b-rowexpander-animating');\n        }\n    }\n\n    //endregion\n\n    //region Events\n    /**\n     * This event fires before row expand is started.\n     *\n     * Returning `false` from a listener prevents the RowExpander to expand the row.\n     *\n     * Note that this event fires when the RowExpander toggles the row, not when the actual row expander body is\n     * rendered. Most of the time this is synchronous, but in the case of a row that is not yet rendered into view by\n     * scrolling, it can happen much later.\n     *\n     * @event beforeExpand\n     * @preventable\n     * @async\n     * @param {Core.data.Model} record Record\n     */\n\n    /**\n     * This event fires before row collapse is started.\n     *\n     * Returning `false` from a listener prevents the RowExpander to collapse the row.\n     *\n     * Note that this event fires when the RowExpander toggles the row, not when the actual row expander body is\n     * rendered. Most of the time this is synchronous, but in the case of a row that is not yet rendered into view by\n     * scrolling, it can happen much later.\n     *\n     * @event beforeCollapse\n     * @preventable\n     * @async\n     * @param {Core.data.Model} record Record\n     */\n    //endregion\n\n    //region ExpanderColumn\n    afterColumnsChange() {\n        this.addColumn();\n    }\n\n    changeColumn(config) {\n        if (config == null) {\n            return config;\n        }\n        return {\n            type    : 'action',\n            actions : [{\n                cls     : 'b-icon b-icon-collapse-down',\n                tooltip : ({ record }) => this.L(this.recordStateMap.has(record) ? 'L{RowExpander.collapse}' : 'L{RowExpander.expand}'),\n                onClick : ({ record }) => this.toggleExpand(record)\n            }],\n            width    : 40,\n            hideable : false,\n            align    : 'center',\n            region   : this.client.regions[0],\n            ...config,\n            field    : 'expanderActionColumn'\n        };\n    }\n\n    // Called in construct and if grid columns change\n    addColumn() {\n        const\n            me = this,\n            { column } = me,\n            { columns } = me.client;\n\n        if (!me._isAddingExpanderColumn && column && (!me._expander || !columns.includes(me._expander))) {\n            me._isAddingExpanderColumn = true;\n            if (me.columnPosition === 'last') {\n                [me._expander] = columns.add(column);\n            }\n            else {\n                [me._expander] = columns.insert(0, column);\n            }\n            me._isAddingExpanderColumn = false;\n        }\n    }\n    //endregion\n\n    //region UI events\n\n    onTriggerEvent({ target }) {\n        // Only grid cell event is handled. Action-cell event has its own handler.\n        if (this.disabled || target?.closest('.b-action-cell') || !target.closest('.b-grid-cell')) {\n            return;\n        }\n        this.toggleExpand(this.client.getRecordFromElement(target));\n    }\n\n    /**\n     * Toggles expander state.\n     * @private\n     * @param {Core.data.Model} record The record that should be toggled\n     * @category Internal\n     */\n    toggleExpand(record) {\n        if (record) {\n            if (this.recordStateMap.has(record)) {\n                this.collapse(record);\n            }\n            else {\n                this.expand(record);\n            }\n        }\n    }\n\n    //endregion\n\n    //region Rendering\n\n    /**\n     * Listens to changes in the Grid Store. Will remove expand State data on Store removal.\n     * If the refreshOnRecordChange config is `true`, it will trigger a re-render of the expander.\n     * @private\n     * @param {String} action\n     * @param {Core.data.Store} source\n     * @param {Core.data.Model[]} records\n     * @category Internal\n     */\n    onStoreChange({ action, source, records }) {\n        const\n            me = this,\n            { recordStateMap, collapsingRecords } = me;\n        if (me.disabled) {\n            return;\n        }\n        if (action === 'removeAll') {\n            recordStateMap.clear();\n            collapsingRecords.clear();\n        }\n        else if (storeRemoveActions[action]) {\n            for (const [record] of recordStateMap) {\n                if (!source.includes(record)) {\n                    recordStateMap.delete(record);\n                    collapsingRecords.delete(record);\n                }\n            }\n        }\n        else if (me.refreshOnRecordChange && records?.length) {\n            if (action === 'update') {\n                const recordState = recordStateMap.get(records[0]);\n                if (recordState?.isCreated) {\n                    recordState.isCreated = false;\n                    me.client.rowManager.renderFromRecord(records[0]);\n                }\n            }\n            else if (action === 'updatemultiple') {\n                let topRecordIndex,\n                    topRecord;\n                for (const rec of records) {\n                    const recordState = recordStateMap.get(rec);\n                    if (recordState?.isCreated) {\n                        recordState.isCreated = false;\n                        const index = source.records.indexOf(rec);\n                        if (!topRecord || topRecordIndex > index) {\n                            topRecordIndex = index;\n                            topRecord = rec;\n                        }\n                    }\n                }\n                if (topRecord) {\n                    me.client.rowManager.renderFromRecord(topRecord);\n                }\n            }\n        }\n    }\n\n    // Implements grid.processRowHeight hook\n    processRowHeight(record, height) {\n        const recordState = this.recordStateMap.get(record);\n        if (recordState) {\n            // If we are waiting for async rendering, height is calculated from a fixed loadingIndicatorHeight.\n            if (!recordState.isCreated && recordState.isRenderingAsync) {\n                return this.loadingIndicatorHeight + height;\n            }\n            // If we have a recordState but no expanderBodyHeight, we should recalculate height.\n            if (!recordState.expanderBodyHeight) {\n                for (const region of this.client.regions) {\n                    const height = recordState.expandElements[region].offsetHeight;\n                    if (height > recordState.expanderBodyHeight) {\n                        recordState.expanderBodyHeight = height;\n                    }\n                }\n            }\n        }\n        return (recordState?.expanderBodyHeight ?? 0) + height;\n    }\n\n    /**\n     * Hooks on before row render to render or remove row expander content depending on record state.\n     * @private\n     * @category Internal\n     */\n    beforeRenderRow({ row, record }) {\n        const\n            me = this,\n            { regions } = me.client,\n            { expandedRowClass } = me;\n\n        row.cls.toggle('b-rowexpander-disabled', me.disabled);\n\n        // If current row is expanded, always remove all expander content and settings.\n        if (row.cls[expandedRowClass]) {\n            // If animating a collapse, content should not be removed until animation is complete\n            if (me.enableAnimations && me.isAnimating && me.collapsingRecords.has(record)) {\n                me.waitForTransition(row, () => {\n                    // Make sure record still should be collapsed after animation is complete\n                    if (me.collapsingRecords.has(record)) {\n                        me.removeExpander(row);\n                    }\n                });\n            }\n            else {\n                me.removeExpander(row);\n            }\n        }\n        else {\n            // Makes sure record should collapse no longer\n            me.collapsingRecords.delete(record);\n        }\n\n        // The map only contains record that are expanded\n        const recordState = me.recordStateMap.get(record);\n        if (!me.disabled && recordState) {\n            // Expander content is created once, then reused.\n            if (!recordState.isCreated) {\n                me.renderExpander(record, row, recordState);\n            }\n            row.cls.add(expandedRowClass);\n            for (const region of regions) {\n                const rowElement = row.getElement(region);\n                if (recordState.isCreated) {\n                    rowElement.appendChild(recordState.expandElements[region]);\n                }\n                else {\n                    // If the renderer is async, we show a loading indicator.\n                    me.renderLoadingIndicator(rowElement, recordState);\n                }\n                me.lockCellHeight(rowElement, recordState.cellHeight, false);\n            }\n\n            // If expander body is rendered not fully in view, it will be scrolled into view\n            if (me._shouldScrollIntoView) {\n                me._shouldScrollIntoView = false;\n                if (!DomHelper.isInView(recordState.expandElements[regions[0]], true)) {\n                    // Waits for rendering to complete, then scrolls\n                    me.client.rowManager.ion({\n                        once       : true,\n                        thisObj    : me,\n                        renderDone : () => me.scrollRowIntoView(row, record)\n                    });\n                }\n            }\n        }\n    }\n\n    /**\n     * Scrolls expanded row into view. This function is called after rowManager has finished rendering.\n     * @private\n     * @category Internal\n     */\n    scrollRowIntoView(row, record) {\n        // If animating expand, need to wait for the animation to end before scrolling.\n        if (this.isAnimating) {\n            this.waitForTransition(row, () => this.client.scrollRowIntoView(record));\n        }\n        else {\n            this.client.scrollRowIntoView(record);\n        }\n    }\n\n    /**\n     * Waits for height transition on the provided rows element. Then calls provided function.\n     * @private\n     * @category Internal\n     */\n    waitForTransition(row, fn) {\n        EventHelper.onTransitionEnd({\n            element  : row.element,\n            property : 'height',\n            handler  : fn,\n            thisObj  : this\n        });\n    }\n\n    removeExpander(row) {\n        row.cls.remove(this.expandedRowClass);\n        for (const region of this.client.regions) {\n            const rowElement = row.getElement(region);\n            // If this function is called after animation finished, we need to remove class `manually`\n            rowElement.classList.remove(this.expandedRowClass);\n            DomHelper.removeEachSelector(rowElement, '.' + this.expanderBodyClass);\n            this.lockCellHeight(rowElement, null, false);\n        }\n    }\n\n    renderLoadingIndicator(rowElement, recordState) {\n        DomHelper.createElement({\n            parent    : rowElement,\n            className : this.expanderBodyClass + ' b-rowexpander-loading',\n            style     : {\n                top    : recordState.cellHeight,\n                height : this.loadingIndicatorHeight\n            },\n            children : [\n                {\n                    tag       : 'i',\n                    className : 'b-icon b-icon-spinner'\n                },\n                this.loadingIndicatorText\n            ]\n        });\n    }\n\n    /**\n     * Creates expander element for each grid region and calls the renderer, also for each grid region.\n     * @private\n     * @param {Core.data.Model} record\n     * @param {Grid.row.Row} row\n     * @param {Object} recordState\n     * @category Internal\n     */\n    renderExpander(record, row, recordState) {\n        const\n            me                = this,\n            cellHeight        = row.cells[0]?.offsetHeight,\n            expandElements    = {},\n            renderings        = [],\n            // Will be called sync or async depending on the implementation of the renderer function.\n            continueRendering = (content, expanderElement, region) => {\n                if (content != null) {\n                    if (typeof content === 'string') {\n                        expanderElement.innerHTML = content;\n                    }\n                    // Everything else will be treated as a dom config for now\n                    else {\n                        content = DomHelper.createElement(content);\n                        expanderElement.appendChild(content);\n                    }\n                }\n                expandElements[region] = expanderElement;\n            };\n\n        // If another rendering of the same record is made while waiting for async, we should ignore it.\n        if (recordState.isRenderingAsync) {\n            return;\n        }\n\n        Object.assign(recordState, { cellHeight, expandElements, expanderBodyHeight : 0 });\n\n        for (const region of me.client.regions) {\n            const rowElement = row.getElement(region);\n\n            // class needed at this point to give the expander container correct height\n            row.addCls(me.expandedRowClass);\n\n            // Create expand container\n            // Expander element needs to be in the DOM for appendTo to work correctly\n            const expanderElement = DomHelper.createElement({\n                parent    : rowElement,\n                tabIndex  : -1,\n                className : me.expanderBodyClass,\n                style     : {\n                    top : cellHeight + 'px'\n                }\n            });\n\n            // The renderer can be async or sync\n            const renderResponse = me.renderer({ record, expanderElement, rowElement, region });\n            if (Objects.isPromise(renderResponse)) {\n                renderings.push(renderResponse.then((content) => continueRendering(content, expanderElement, region)));\n            }\n            else {\n                continueRendering(renderResponse, expanderElement, region);\n            }\n        }\n\n        // If we have async renderer, wait for all to complete\n        if (renderings.length) {\n            recordState.isRenderingAsync = true;\n            Promise.all(renderings).then(() => {\n                // Flag that indicates the completion of expand rendering\n                recordState.isCreated = true;\n                // The rows need to refresh to recalculate row height\n                // (?. since we might have been destroyed while waiting for promises)\n                me.renderRowsWithAnimation?.(record);\n                recordState.isRenderingAsync = false;\n            });\n        }\n        else {\n            recordState.isCreated = true;\n        }\n    }\n\n    /**\n     * Called when grid rows needs to re-render, for example on expand or collapse.\n     * Activates animations on grid, and deactivates them when they are completed.\n     * @private\n     * @param {Core.data.Model} record Record whose row was toggled\n     * @category Internal\n     */\n    renderRowsWithAnimation(record) {\n        const me = this;\n        if (me.enableAnimations) {\n            const row = me.client.rowManager.getRowById(record);\n            if (row) {\n                me.isAnimating = true;\n                if (me.collapsingRecords.has(record)) {\n                    row.addCls('b-row-is-collapsing');\n                }\n                me.waitForTransition(row, () => {\n                    me.isAnimating = false;\n                    if (!row.isDestroyed) {\n                        row.removeCls?.('b-row-is-collapsing');\n                    }\n                });\n            }\n        }\n        me.client.rowManager.renderFromRecord(record);\n    }\n\n    /**\n     * Called when row is expanded. This function locks all cell's height to current height (before expanding).\n     * @private\n     * @param {HTMLElement} rowElement\n     * @param {Number} cellHeight The height to lock\n     * @param {Boolean} unlock To remove locked cell height when the row is collapsed\n     * @category Internal\n     */\n    lockCellHeight(rowElement, cellHeight, unlock) {\n        for (let a = 0; a < rowElement.children.length; a++) {\n            const child = rowElement.children[a];\n            // Should not lock expander element\n            if (!child.classList.contains(this.expanderBodyClass)) {\n                child.style.height = unlock ? '' : cellHeight + 'px';\n            }\n        }\n    }\n    //endregion\n\n    //region Public\n\n    /**\n     * Tells the RowExpander that the provided record should be expanded. If or when the record is rendered into view,\n     * the record will be expanded.\n     *\n     * @param {Core.data.Model} record Record whose row should be expanded\n     * @category Common\n     */\n    async expand(record) {\n        const me = this;\n        if (me.disabled) {\n            return;\n        }\n\n        if (await me.trigger('beforeExpand', { record }) === false) {\n            return;\n        }\n        // Tells renderer that this record should be expanded\n        me.recordStateMap.set(record, { isCreated : false });\n        // In the event that we have expanded a record which is in collapsing animation state\n        me.collapsingRecords.delete(record);\n        me._shouldScrollIntoView = true;\n        me.renderRowsWithAnimation(record);\n    }\n\n    /**\n     * Tells the RowExpander that the provided record should be collapsed. If the record is in view, it will be\n     * collapsed. If the record is not in view, it will simply not be expanded when rendered into view.\n     *\n     * @param {Core.data.Model} record Record whose row should be collapsed\n     * @category Common\n     */\n    async collapse(record) {\n        const me = this;\n        if (me.disabled) {\n            return;\n        }\n\n        if (await me.trigger('beforeCollapse', { record }) === false) {\n            return;\n        }\n        me.recordStateMap.delete(record);\n        me.collapsingRecords.add(record);\n        me.renderRowsWithAnimation(record);\n    }\n    //endregion\n}\n\nGridFeatureManager.registerFeature(RowExpander);\n","import DomHelper from '../../Core/helper/DomHelper.js';\nimport InstancePlugin from '../../Core/mixin/InstancePlugin.js';\nimport DomDataStore from '../../Core/data/DomDataStore.js';\nimport GridFeatureManager from './GridFeatureManager.js';\nimport Delayable from '../../Core/mixin/Delayable.js';\nimport StringHelper from '../../Core/helper/StringHelper.js';\n\n// <remove-on-release>\n// TODO: Should listen for store search also, to work the other way around\n// TODO: Buggy sometimes, try searching for Barcelona tigers, navigate using buttons\n// TODO: Allow regex\n// TODO: Optional case sensitive\n// TODO: build in UI, popup with keyboard shortcut?\n// </remove-on-release>\n\n/**\n * @module Grid/feature/Search\n */\n\n/**\n * {@inlineexample Grid/feature/Search.js}\n *\n * Feature that allows the user to search the entire grid. Navigate between hits using the\n * keyboard, [F3] or [Ctrl/CMD + G] moves to next, also pressing [Shift] moves to previous.\n *\n * Note that this feature does not include a UI, please build your own and call appropriate methods in the feature.\n * For a demo implementation, see <a href=\"../examples/search/\" target=\"_blank\">Search example</a>.\n *\n * This feature is <strong>disabled</strong> by default.\n *\n * ## Keyboard shortcuts\n *\n * This feature has the following default keyboard shortcuts:\n *\n * | Keys               | Action        | Action description                |\n * |--------------------|---------------|-----------------------------------|\n * | `F3`               | *goToNextHit* | Move focus to next search hit     |\n * | `Shift`+`F3`       | *goToPrevHit* | Move focus to previous search hit |\n * | `Ctrl`+`G`         | *goToNextHit* | Move focus to next search hit     |\n * | `Ctrl`+`Shift`+`G` | *goToPrevHit* | Move focus to previous search hit |\n *\n * <div class=\"note\">Please note that <code>Ctrl</code> is the equivalent to <code>Command</code> and <code>Alt</code>\n * is the equivalent to <code>Option</code> for Mac users</div>\n *\n * For more information on how to customize keyboard shortcuts, please see\n * [our guide](#Grid/guides/customization/keymap.md)\n *\n * @extends Core/mixin/InstancePlugin\n *\n * @example\n * // enable Search\n * let grid = new Grid({\n *   features: {\n *     search: true\n *   }\n * });\n *\n * // perform search\n * grid.features.search.search('steve');\n *\n * @demo Grid/search\n * @classtype search\n * @feature\n */\nexport default class Search extends Delayable(InstancePlugin) {\n    //region Init\n\n    static get $name() {\n        return 'Search';\n    }\n\n    static get configurable() {\n        return {\n            /**\n             * The maximum amount of search hits\n             * @config {Number}\n             * @default\n             */\n            limit : 1000,\n\n            /**\n             * Set to false to not show the search hit index numbers\n             * @config {Boolean}\n             * @default\n             */\n            showHitIndex : true,\n\n            /**\n             * See {@link #keyboard-shortcuts Keyboard shortcuts} for details\n             * @config {Object<String,String>}\n             */\n            keyMap : {\n                F3             : 'gotoNextHit',\n                'Ctrl+g'       : 'gotoNextHit',\n                'Shift+F3'     : 'gotoPrevHit',\n                'Ctrl+Shift+g' : 'gotoPrevHit'\n            }\n        };\n    }\n\n    static get properties() {\n        return {\n            hitCls          : 'b-search-hit',\n            hitCellCls      : 'b-search-hit-cell',\n            hitCellBadgeCls : 'b-search-hit-cell-badge',\n            hitTextCls      : 'b-search-hit-text'\n        };\n    }\n\n    construct(grid, config) {\n        const me = this;\n\n        super.construct(grid, config);\n\n        Object.assign(me, {\n            grid,\n            text       : '',\n            hitEls     : [],\n            treeWalker : grid.setupTreeWalker(grid.element, DomHelper.NodeFilter.SHOW_TEXT, () => DomHelper.NodeFilter.FILTER_ACCEPT)\n        });\n\n        // When new nodes appear due to node expand, include them in the search\n        grid.ion({\n            expandNode : 'onTreeNodeExpand',\n            thisObj    : me\n        });\n    }\n\n    isActionAvailable() {\n        return Boolean(this.text);\n    }\n\n    onTreeNodeExpand() {\n        if (this.text) {\n            this.requestAnimationFrame(this.search, [this.text, false, true]);\n        }\n    }\n\n    doDestroy() {\n        this.clear(true);\n        super.doDestroy();\n    }\n\n    doDisable(disable) {\n        if (disable) {\n            this.clear();\n        }\n\n        super.doDisable(disable);\n    }\n\n    get store() {\n        return this.grid.store;\n    }\n\n    //endregion\n\n    //region Plugin config\n\n    // Plugin configuration. This plugin chains some of the functions in Grid.\n    static get pluginConfig() {\n        return {\n            chain : ['populateCellMenu']\n        };\n    }\n\n    //endregion\n\n    //region Search\n\n    /**\n     * Performs a search and highlights hits.\n     * @param {String} text Text to search for\n     * @param {Boolean} [gotoHit] Go to first hit after search\n     * @param {Boolean} [reapply] Pass true to force search\n     * @param {String[]} [fields] An array of the fields to search for the value in\n     */\n    async search(text, gotoHit = true, reapply = false, fields) {\n        const me = this;\n\n        // empty search considered a clear\n        if (!text) {\n            return me.clear();\n        }\n\n        // searching for same thing again, do nothing\n        if (!reapply && text === me.text || me.disabled) {\n            return;\n        }\n\n        const\n            { grid, store } = me,\n            // Only search columns in use\n            columns         = grid.columns.visibleColumns.filter(col => col.searchable !== false),\n            formatters      = [];\n\n        fields      = fields || columns.map(col => {\n            // For date / number columns\n            formatters.push(col.formatValue?.bind(col));\n            return col.field;\n        });\n        const found = store.search(text, fields, formatters);\n\n        if (store.isTree && found.length) {\n            await grid.expandTo(found.map(hit => hit.id));\n        }\n\n        // Only include first result for merged cells in the count\n        for (const column of columns) {\n            if (column.mergeCells && column.isSorted) {\n                let prevValue = null,\n                    belongsTo = null;\n\n                for (const hit of found) {\n                    if (hit.field === column.field) {\n                        const value = hit.data[hit.field];\n                        if (value === prevValue) {\n                            hit.belongsTo = belongsTo;\n                        }\n                        prevValue = value;\n                        belongsTo = `${hit.field}-${hit.id}`;\n                    }\n                }\n            }\n        }\n\n        let i = 1;\n\n        Object.assign(me, {\n            foundMap  : {},\n            prevFound : me.found,\n            found,\n            text,\n            findRe    : new RegExp(`(\\\\s+)?(${StringHelper.escapeRegExp(String(text))})(\\\\s+)?`, 'ig')\n        });\n\n        me.clearHits();\n\n        if (!found) {\n            return;\n        }\n\n        // highlight hits for visible cells\n        for (const hit of found) {\n            // merged cells reuse the index of the first hit in the range\n            me.foundMap[`${hit.field}-${hit.id}`] = hit.belongsTo ? me.foundMap[hit.belongsTo] : i++;\n            // limit hits\n            if (i > me.limit) {\n                break;\n            }\n        }\n\n        if (!me.listenersInitialized) {\n            grid.rowManager.ion({\n                name       : 'renderCell',\n                renderCell : 'renderCell',\n                thisObj    : me\n            });\n            store.ion({\n                name                                : 'storeRefresh',\n                [`refresh${grid.asyncEventSuffix}`] : 'onStoreRefresh',\n                thisObj                             : me\n            });\n            me.listenersInitialized = true;\n        }\n\n        grid.refreshRows();\n\n        grid.trigger('search', { grid, find : text, found });\n\n        if (gotoHit && !me.isHitFocused) {\n            me.gotoNextHit(true);\n        }\n\n        return found;\n    }\n\n    clearHits() {\n        // Clear old hits\n        for (const cellElement of DomHelper.children(this.grid.element, '.' + this.hitCls)) {\n            cellElement.classList.remove(this.hitCls, this.hitCellCls);\n\n            // Rerender cell to remove search-hit-text\n            const row = DomDataStore.get(cellElement).row;\n\n            // Merged cells have no row, but they will be cleared anyway by their own DomSync call\n            if (row) {\n                // Need to force replace the markup\n                row.forceInnerHTML = true;\n                row.renderCell(cellElement);\n                row.forceInnerHTML = false;\n            }\n        }\n    }\n\n    /**\n     * Clears search results.\n     */\n    clear(silent = false) {\n        const\n            me       = this,\n            { grid } = me;\n\n        if (me.foundMap) {\n            delete me.foundMap;\n        }\n\n        me.text = null;\n\n        me.clearHits();\n\n        if (me.listenersInitialized) {\n            this.detachListeners('renderCell');\n            this.detachListeners('storeRefresh');\n            me.listenersInitialized = false;\n        }\n\n        if (!silent) {\n            grid.trigger('clearSearch', { grid });\n        }\n    }\n\n    /**\n     * Number of results found\n     * @readonly\n     * @property {Number}\n     */\n    get foundCount() {\n        return this.found?.length ?? 0;\n    }\n\n    //endregion\n\n    //region Navigation\n\n    /**\n     * Returns true if focused row is a hit\n     * @property {Boolean}\n     * @readonly\n     */\n    get isHitFocused() {\n        const\n            me              = this,\n            { grid }        = me,\n            { focusedCell } = grid;\n\n        if (focusedCell?.cell?.contains(DomHelper.getActiveElement(grid.element))) {\n            const { rowIndex, column } = focusedCell;\n\n            return rowIndex !== -1 && me.found.some(hit =>\n                hit.index === rowIndex && column && hit.field === column.field\n            );\n        }\n    }\n\n    /**\n     * Select the next hit, scrolling it into view. Triggered with [f3] or [ctrl]/[cmd] + [g].\n     */\n    gotoNextHit(fromStart = false) {\n        const\n            me = this;\n\n        if (!me.found?.length) return;\n\n        const\n            { grid, store } = me,\n            fromCell        = grid.focusedCell || grid.lastFocusedCell,\n            currentIndex    = fromCell && fromStart !== true ? store.indexOf(fromCell.record, undefined, true) : -1,\n            nextHit         = me.found.findIndex(hit => hit.index > currentIndex);\n\n        if (nextHit !== -1) {\n            me.gotoHit(nextHit);\n        }\n    }\n\n    /**\n     * Select the previous hit, scrolling it into view. Triggered with [shift] + [f3] or [shift] + [ctrl]/[cmd] + [g].\n     */\n    gotoPrevHit() {\n        const\n            me        = this,\n            { store } = me;\n\n        if (!me.found?.length) return;\n\n        const\n            { grid, found } = me,\n            fromCell        = grid.focusedCell || grid.lastFocusedCell,\n            currentIndex    = fromCell ? store.indexOf(fromCell.record, undefined, true) : 0;\n\n        for (let i = found.length - 1; i--; i >= 0) {\n            const hit = found[i];\n            if (hit.index < currentIndex) {\n                me.gotoHit(i);\n                break;\n            }\n        }\n    }\n\n    /**\n     * Go to specified hit.\n     * @param {Number} index\n     */\n    gotoHit(index) {\n        const\n            { grid } = this,\n            nextHit  = this.found[index];\n\n        if (nextHit) {\n            grid.focusCell({\n                field : nextHit.field,\n                id    : nextHit.id\n            });\n        }\n\n        return Boolean(nextHit);\n    }\n\n    /**\n     * Go to the first hit.\n     */\n    gotoFirstHit() {\n        this.gotoHit(0);\n    }\n\n    /**\n     * Go to the last hit.\n     */\n    gotoLastHit() {\n        this.gotoHit(this.found.length - 1);\n    }\n\n    //endregion\n\n    //region Render\n\n    /**\n     * Called from SubGrid when a cell is rendered. Highlights search hits.\n     * @private\n     */\n    renderCell({ cellElement, column, record, value }) {\n        const\n            me       = this,\n            {\n                treeWalker,\n                findRe,\n                hitTextCls,\n                showHitIndex\n            }        = me,\n            hitIndex = me.foundMap?.[column.field + '-' + record.id];\n\n        if (hitIndex) {\n            // highlight cell\n            cellElement.classList.add(me.hitCls);\n\n            // Remove any previous hit badge\n            showHitIndex && cellElement.querySelector(`.${me.hitCellBadgeCls}`)?.remove();\n\n            // highlight in cell if found in innerHTML\n            const inner = DomHelper.down(cellElement, '.b-grid-cell-value,.b-tree-cell-value') || cellElement;\n\n            if (String(value).toLowerCase() === String(me.text).toLowerCase()) {\n                inner.innerHTML = `<span class=\"${me.hitTextCls}\">${inner.innerHTML}</span>${showHitIndex ? `<div class=\"${me.hitCellBadgeCls}\">${hitIndex}</div>` : ''}`;\n            }\n            // Replace every occurrence of the text in every descendant text node with a span\n            // encapsulating the matched string.\n            else {\n                treeWalker.currentNode = inner;\n                for (let textNode = treeWalker.nextNode(); textNode && inner.contains(textNode);) {\n                    const\n                        nodeToReplace = textNode,\n                        textContent   = textNode.nodeValue,\n                        newText       = ['<span>'];\n\n                    // Move onto next text node before we replace the node with a highlihght HTML sequence\n                    textNode = treeWalker.nextNode();\n\n                    let offset = findRe.lastIndex;\n\n                    // Convert textContent into an innerHTML string which htmlEncodes the text and embeds\n                    // a highlighting span which contains the target text.\n                    for (let match = findRe.exec(textContent); match; match = findRe.exec(textContent)) {\n                        const\n                            preamble    = textContent.substring(offset, match.index),\n                            spaceBefore = match[1] ? '\\xa0' : '',\n                            v           = match[2],\n                            spaceAfter  = match[3] ? '\\xa0' : '';\n\n                        newText.push(`${StringHelper.encodeHtml(preamble)}${spaceBefore}<span class=\"${hitTextCls}\">${v}</span>${spaceAfter}`);\n                        offset = findRe.lastIndex;\n                    }\n\n                    newText.push(StringHelper.encodeHtml(textContent.substring(offset)), '<span>');\n\n                    // Insert a fragment with each match wrapped with a span.\n                    nodeToReplace.parentNode.insertBefore(DomHelper.createElementFromTemplate(newText.join(''), {\n                        fragment : true\n                    }), nodeToReplace);\n                    nodeToReplace.remove();\n                }\n\n                if (showHitIndex) {\n                    DomHelper.createElement({\n                        parent    : cellElement,\n                        className : me.hitCellBadgeCls,\n                        text      : hitIndex\n                    });\n                }\n            }\n\n            me.hitEls.push(cellElement);\n        }\n    }\n\n    //endregion\n\n    //region Context menu\n\n    /**\n     * Add search menu item to cell context menu.\n     * @param {Object} options Contains menu items and extra data retrieved from the menu target.\n     * @param {Grid.column.Column} options.column Column for which the menu will be shown\n     * @param {Core.data.Model} options.record Record for which the menu will be shown\n     * @param {Object<String,MenuItemConfig|Boolean|null>} options.items A named object to describe menu items\n     * @internal\n     */\n    populateCellMenu({ column, record, items, cellElement }) {\n        const me = this;\n\n        if (column.searchable) {\n            items.search = {\n                text        : 'L{searchForValue}',\n                localeClass : me,\n                icon        : 'b-fw-icon b-icon-search',\n                cls         : 'b-separator',\n                weight      : 200,\n                disabled    : me.disabled,\n                onItem      : () => {\n                    // <remove-on-release>\n                    // TODO: Only extract selection from current cell instead? Lazy way for now\n                    // </remove-on-release>\n                    let sel = globalThis.getSelection().toString();\n\n                    if (!sel) {\n                        sel = cellElement.innerText;\n                    }\n\n                    me.search(sel);\n                }\n            };\n        }\n    }\n\n    //endregion\n\n    //region Events\n\n    onStoreRefresh() {\n        this.search(this.text, false, true);\n    }\n\n    //endregion\n}\n\nSearch.featureClass = 'b-search';\n\nGridFeatureManager.registerFeature(Search);\n","import DomHelper from '../../Core/helper/DomHelper.js';\nimport InstancePlugin from '../../Core/mixin/InstancePlugin.js';\nimport GridFeatureManager from '../feature/GridFeatureManager.js';\nimport Rectangle from '../../Core/helper/util/Rectangle.js';\n\n/**\n * @module Grid/feature/StickyCells\n */\n\n/**\n * A feature which pins configurable content from a grid row to the top of the grid\n * while the row scrolls off the top but is still visible.\n *\n * As soon as the row becomes too small to contain the content, it is unpinned, and\n * scrolls out naturally, and the following row's configured content becomes pinned.\n *\n * For example:\n *\n * ```javascript\n *     new Grid({\n *         features : {\n *             stickyCells : {\n *                 // Identifies elements to clone and pin to the grid top.\n *                 contentSelector : '.myClassName'\n *             }\n *         }\n *     });\n * ```\n *\n * @extends Core/mixin/InstancePlugin\n * @classtype stickyCells\n * @feature\n */\nexport default class StickyCells extends InstancePlugin {\n    //region Config\n\n    static get $name() {\n        return 'StickyCells';\n    }\n\n    static get defaultConfig() {\n        return {\n            /**\n             * A CSS selector which must identify the content within your grid row which you\n             * require to be pinned to the grid while the row if the topmost row, and remains visible.\n             * @config {String}\n             */\n            contentSelector : null,\n\n            currentTopRowCls : 'b-sticky-cells-current-top-row'\n        };\n    }\n\n    // Plugin configuration. This plugin chains some of the functions in Grid.\n    static get pluginConfig() {\n        return {\n            before : ['renderRows']\n        };\n    }\n    //endregion\n\n    //region Init\n\n    construct(grid, config) {\n        super.construct(grid, config);\n\n        // We cannot chain our client's onGridScroll because that is now a delayable injected method.\n        grid.ion({\n            scroll  : 'onGridScroll',\n            thisObj : this\n        });\n        Object.assign(this, DomHelper.createElement({\n            reference : 'element',\n            parent    : grid.element,\n            className : 'b-grid-sticky-row',\n            children  : [{\n                reference : 'contentElement',\n                className : 'b-grid-cell'\n            }]\n        }));\n\n        // Clean these classes from copied cell and row classLists\n        this.removeClasses = {\n            'b-focused'             : false,\n            'b-hover'               : false,\n            'b-selected'            : false,\n            [this.currentTopRowCls] : false\n        };\n    }\n\n    renderRows() {\n        // Do not leave stranded sticky row visible on data change\n        this.element.classList.add('b-hide-visibility');\n    }\n\n    onGridScroll() {\n        const\n            me = this,\n            {\n                client : grid,\n                element,\n                contentElement\n            } = me,\n            gridViewport  = Rectangle.client(grid.bodyContainer).roundPx(),\n            currentTopRow = grid.rowManager.getRowAt(gridViewport.y),\n            topRowChanged = currentTopRow !== me.currentTopRow;\n\n        if (currentTopRow) {\n            if (topRowChanged) {\n                if (me.currentTopRow) {\n                    me.currentTopRow.removeCls(me.currentTopRowCls);\n                    me.currentTopRow.removeCls('b-not-enough-height');\n                }\n\n                me.currentTopRow = currentTopRow;\n                currentTopRow.addCls(me.currentTopRowCls);\n\n                contentElement.innerHTML = '';\n                contentElement.appendChild(me.updateStickyContent());\n            }\n\n            // If the outgoing row is not too tall, and doesn't *need* the content\n            // pinning to the top, hide the sticky row, and make the source sticky\n            // elements pin themselves to the bottom of the cell using the b-not-enough-height\n            // class to switch them to align-self: flex-end\n            const notEnoughHeight = me.currentTopRow.bottom - me.client.scrollable.y <= me.stickyContentHeight;\n            me.element.classList[notEnoughHeight ? 'add' : 'remove']('b-hide-visibility');\n            me.currentTopRow[notEnoughHeight ? 'addCls' : 'removeCls']('b-not-enough-height');\n\n            // Keep sticky row aligned while constrained to the viewport.\n            // This keeps it pinned to the top.\n            gridViewport.y += me.stickyContentTop;\n            DomHelper.alignTo(element, me.stickyEls[0], { align : 't0-t0', constrainTo : gridViewport }, true);\n        }\n\n        me.lastProcessedTopRow = currentTopRow;\n    }\n\n    updateStickyContent() {\n        const\n            me            = this,\n            {\n                currentTopRow,\n                removeClasses\n            }             = me,\n            rowClasses   = {\n                'b-grid-sticky-row' : 1\n            },\n            cellClasses  = {},\n            stickyContent = me.stickyContent || (me.stickyContent = document.createDocumentFragment()),\n            stickyEls     = me.stickyEls || (me.stickyEls = []);\n\n        // Release the sticky state on the previous row's sticky elements\n        stickyEls.forEach(e => {\n            e.classList.remove('b-sticky-content-el');\n        });\n\n        // Collect the elements we need to clone from the current top row\n        stickyEls.length = 0;\n        currentTopRow.eachElement(rowEl => {\n            stickyEls.push(...rowEl.querySelectorAll(me.contentSelector));\n        });\n\n        // Clear the documentFragment which we use to hold our clones\n        while (stickyContent.firstChild) {\n            stickyContent.remove(stickyContent.firstChild);\n        }\n\n        me.stickyContentHeight = 0;\n        me.stickyContentTop = 0;\n\n        // Clone the selected elements and measure them for alignment.\n        stickyEls.map(e => {\n            // Collect the app classes that may be necessary on the cell and row elements.\n            e.closest('.b-grid-cell').classList.forEach(cls => cellClasses[cls] = 1);\n            e.closest('.b-grid-row').classList.forEach(cls => rowClasses[cls] = 1);\n\n            // Clean out grid's classes from the class sets.\n            Object.assign(cellClasses, removeClasses);\n            Object.assign(rowClasses,  removeClasses);\n\n            const eTop = e.offsetTop;\n\n            me.stickyContentTop = Math.max(me.stickyContentTop, eTop);\n\n            // We need to know how tall the sticky content is\n            e.style.alignSelf = 'flex-end';\n            me.stickyContentHeight = Math.max(me.stickyContentHeight, me.currentTopRow.height - e.offsetTop + eTop);\n            e.style.alignSelf = '';\n\n            const result = e.cloneNode(true);\n\n            // Tag the content al *after* cloning it.\n            e.classList.add('b-sticky-content-el');\n\n            stickyContent.appendChild(result);\n\n            return result;\n        });\n\n        cellClasses['b-focused'] = false;\n        DomHelper.syncClassList(me.contentElement, cellClasses);\n        DomHelper.syncClassList(me.element, rowClasses);\n\n        return stickyContent;\n    }\n}\n\nGridFeatureManager.registerFeature(StickyCells, false);\n","import Combo from '../../Core/widget/Combo.js';\nimport ObjectHelper from '../../Core/helper/ObjectHelper.js';\nimport StringHelper from '../../Core/helper/StringHelper.js';\nimport '../../Grid/view/TreeGrid.js';\n\n/**\n * @module Grid/widget/TreeCombo\n */\n\n/**\n * A powerful {@link Core/widget/Combo} box using a {@link Grid/view/TreeGrid} as its drop down widget. You can define\n * your own set of columns to display and use all the regular features of the Grid.\n *\n * {@inlineexample Grid/widget/TreeCombo.js}\n *\n * ```javascript\n * new TreeCombo({\n *     label    : 'Pick task(s)',\n *     width    : '30em',\n *     appendTo : document.body,\n *     picker   : {\n *         // Define the columns to show in the grid\n *         columns : [\n *             { type : 'tree', text : 'Tasks', field : 'name', flex : 1 },\n *             { text : 'Priority', field : 'prio' }\n *         ]\n *     },\n *     chipView : {\n *         // Render the chips in the combo field\n *         itemTpl(record) {\n *             return StringHelper.xss`${record.name}`;\n *         }\n *     },\n *     store : {\n *         fields     : [\n *             'prio'\n *         ],\n *         data : [\n *             {\n *                 name     : 'Development Tasks',\n *                 expanded : true,\n *                 children : [\n *                     { id : 1, name : 'Improve React docs', prio : 'High' },\n *                     { id : 2, name : 'Build Angular module', prio : 'Low' },\n *                     { id : 3, name : 'Creat Vue project', prio : 'Low' }\n *                 ]\n *             },\n *             { name : 'Customer meeting', prio : 'Normal' },\n *             {\n *                 name     : 'Customer Tasks',\n *                 expanded : true,\n *                 children : [\n *                     { id : 4, name : 'Intro meeting', prio : 'Normal' },\n *                     { id : 5, name : 'Build POC', prio : 'High' },\n *                     { id : 6, name : 'Documentation', prio : 'Low' }\n *                 ]\n *             }\n *         ]\n *     }\n * });\n * ```\n *\n * @extends Core/widget/Combo\n * @classtype treecombo\n * @inputfield\n */\nexport default class TreeCombo extends Combo {\n    static $name = 'TreeCombo';\n\n    static type = 'treecombo';\n\n    static configurable = {\n        multiSelect : true,\n        chipView    : {\n            itemTpl(record) {\n                return StringHelper.xss`${record.name}`;\n            },\n            scrollable : {\n                overflowX : 'hidden-scroll'\n            }\n        }\n    };\n\n    configure(config) {\n        super.configure(config);\n        const me = this;\n\n        me.ion({\n            change() {\n                me.picker.selectedRecords = me.value;\n            }\n        });\n    }\n\n    changePicker(picker, oldPicker) {\n        const me = this;\n        return super.changePicker(ObjectHelper.assign({}, picker, {\n            type                       : 'treegrid',\n            minWidth                   : '35em',\n            readOnly                   : me.readOnly,\n            disableGridRowModelWarning : true,\n            selectedRecords            : me.value.map(val => me.store.getById(val)),\n            selectionMode              : {\n                row                  : true,\n                multiSelect          : me.multiSelect,\n                rowCheckboxSelection : true\n            },\n            internalListeners : {\n                selectionChange({ selection }) {\n                    me.value = selection;\n                }\n            }\n        }), oldPicker);\n    }\n}\n\nTreeCombo.initClass();\n","// column\nexport { default as ActionColumn } from '../lib/Grid/column/ActionColumn.js';\nexport { default as AggregateColumn } from '../lib/Grid/column/AggregateColumn.js';\nexport { default as CheckColumn } from '../lib/Grid/column/CheckColumn.js';\nexport { default as Column } from '../lib/Grid/column/Column.js';\nexport { default as DateColumn } from '../lib/Grid/column/DateColumn.js';\nexport { default as NumberColumn } from '../lib/Grid/column/NumberColumn.js';\nexport { default as PercentColumn } from '../lib/Grid/column/PercentColumn.js';\nexport { default as RatingColumn } from '../lib/Grid/column/RatingColumn.js';\nexport { default as RowNumberColumn } from '../lib/Grid/column/RowNumberColumn.js';\nexport { default as TemplateColumn } from '../lib/Grid/column/TemplateColumn.js';\nexport { default as TimeColumn } from '../lib/Grid/column/TimeColumn.js';\nexport { default as TreeColumn } from '../lib/Grid/column/TreeColumn.js';\nexport { default as WidgetColumn } from '../lib/Grid/column/WidgetColumn.js';\n\n// data\nexport { default as ColumnStore } from '../lib/Grid/data/ColumnStore.js';\nexport { default as GridRowModel } from '../lib/Grid/data/GridRowModel.js';\n\n// feature\nexport { default as CellCopyPaste } from '../lib/Grid/feature/CellCopyPaste.js';\nexport { default as CellEdit } from '../lib/Grid/feature/CellEdit.js';\nexport { default as CellMenu } from '../lib/Grid/feature/CellMenu.js';\nexport { default as CellTooltip } from '../lib/Grid/feature/CellTooltip.js';\nexport { default as ColumnAutoWidth } from '../lib/Grid/feature/ColumnAutoWidth.js';\nexport { default as ColumnDragToolbar } from '../lib/Grid/feature/ColumnDragToolbar.js';\nexport { default as ColumnPicker } from '../lib/Grid/feature/ColumnPicker.js';\nexport { default as ColumnRename } from '../lib/Grid/feature/ColumnRename.js';\nexport { default as ColumnReorder } from '../lib/Grid/feature/ColumnReorder.js';\nexport { default as ColumnResize } from '../lib/Grid/feature/ColumnResize.js';\nexport { default as FillHandle } from '../lib/Grid/feature/FillHandle.js';\nexport { default as Filter } from '../lib/Grid/feature/Filter.js';\nexport { default as FilterBar } from '../lib/Grid/feature/FilterBar.js';\nexport { default as GridFeatureManager } from '../lib/Grid/feature/GridFeatureManager.js';\nexport { default as Group } from '../lib/Grid/feature/Group.js';\nexport { default as GroupSummary } from '../lib/Grid/feature/GroupSummary.js';\nexport { default as HeaderMenu } from '../lib/Grid/feature/HeaderMenu.js';\nexport { default as MergeCells } from '../lib/Grid/feature/MergeCells.js';\nexport { default as QuickFind } from '../lib/Grid/feature/QuickFind.js';\nexport { default as RegionResize } from '../lib/Grid/feature/RegionResize.js';\nexport { default as RowCopyPaste } from '../lib/Grid/feature/RowCopyPaste.js';\nexport { default as RowExpander } from '../lib/Grid/feature/RowExpander.js';\nexport { default as RowReorder } from '../lib/Grid/feature/RowReorder.js';\nexport { default as Search } from '../lib/Grid/feature/Search.js';\nexport { default as Sort } from '../lib/Grid/feature/Sort.js';\nexport { default as StickyCells } from '../lib/Grid/feature/StickyCells.js';\nexport { default as Stripe } from '../lib/Grid/feature/Stripe.js';\nexport { default as Summary } from '../lib/Grid/feature/Summary.js';\nexport { default as Tree } from '../lib/Grid/feature/Tree.js';\nexport { default as TreeGroup } from '../lib/Grid/feature/TreeGroup.js';\n\n// export feature\nexport { default as ExportDialog } from '../lib/Grid/view/export/ExportDialog.js';\nexport { default as Exporter } from '../lib/Grid/feature/export/exporter/Exporter.js';\nexport { default as ExportOrientationCombo } from '../lib/Grid/view/export/field/ExportOrientationCombo.js';\nexport { default as ExportRowsCombo } from '../lib/Grid/view/export/field/ExportRowsCombo.js';\nexport { default as MultiPageExporter } from '../lib/Grid/feature/export/exporter/MultiPageExporter.js';\nexport { default as MultiPageVerticalExporter } from '../lib/Grid/feature/export/exporter/MultiPageVerticalExporter.js';\nexport { default as PdfExport } from '../lib/Grid/feature/export/PdfExport.js';\nexport { default as SinglePageExporter } from '../lib/Grid/feature/export/exporter/SinglePageExporter.js';\nexport { FileFormat, Orientation, PaperFormat, RowsRange } from '../lib/Grid/feature/export/Utils.js';\n\n// feature experimental\nexport { default as ExcelExporter } from '../lib/Grid/feature/experimental/ExcelExporter.js';\n\n// row\nexport { default as Row } from '../lib/Grid/row/Row.js';\n\n// util\nexport { default as Location } from '../lib/Grid/util/Location.js';\nexport { default as TableExporter } from '../lib/Grid/util/TableExporter.js';\n\n// view\nexport { default as Bar } from '../lib/Grid/view/Bar.js';\nexport { default as Footer } from '../lib/Grid/view/Footer.js';\nexport { default as Grid } from '../lib/Grid/view/Grid.js';\nexport { default as GridBase } from '../lib/Grid/view/GridBase.js';\nexport { default as Header } from '../lib/Grid/view/Header.js';\nexport { default as RowManager } from '../lib/Grid/row/RowManager.js';\nexport { default as SubGrid } from '../lib/Grid/view/SubGrid.js';\nexport { default as TreeGrid } from '../lib/Grid/view/TreeGrid.js';\n\n// view mixin\nexport { default as GridElementEvents } from '../lib/Grid/view/mixin/GridElementEvents.js';\nexport { default as GridFeatures } from '../lib/Grid/view/mixin/GridFeatures.js';\nexport { default as GridResponsive } from '../lib/Grid/view/mixin/GridResponsive.js';\nexport { default as GridSelection } from '../lib/Grid/view/mixin/GridSelection.js';\nexport { default as GridState } from '../lib/Grid/view/mixin/GridState.js';\nexport { default as GridSubGrids } from '../lib/Grid/view/mixin/GridSubGrids.js';\n\n// widget\nexport { default as GridFieldFilterPicker } from '../lib/Grid/widget/GridFieldFilterPicker.js';\nexport { default as GridFieldFilterPickerGroup } from '../lib/Grid/widget/GridFieldFilterPickerGroup.js';\nexport { default as TreeCombo } from '../lib/Grid/widget/TreeCombo.js';\n"],"names":["ActionColumn","Column","type","fields","name","defaultValue","defaults","filterable","groupable","sortable","editor","searchable","htmlEncode","resizable","minWidth","groupHeaderReserved","construct","config","store","me","arguments","width","flex","grid","ion","paint","thisObj","disableIfGridReadOnly","element","classList","add","externalRenderer","renderer","internalRenderer","column","record","callExternalRenderer","_column$actions","inGroupTitle","meta","subGrid","_this$externalRendere","call","className","children","actions","map","actionConfig","index","_tooltip$startsWith","visible","showForGroup","tooltip","btip","startsWith","callback","customRendererData","action","tag","dataset","Tooltip","encodeConfig","html","cls","onCellClick","target","_column$actions2","contains","actionIndex","parentElement","actionHandler","onClick","updateAutoWidth","groupActions","oldActions","forEach","actionOriginal","push","length","_actions","actionsHtml","DomHelper","createElement","outerHTML","measureText","ColumnStore","registerColumnType","exposeProperties","_$name","AggregateColumn","NumberColumn","function","includeParentInChangeSet","data","columnStore","configuredAlign","configuredEditor","storeListeners","update","prio","oldStore","_store","un","modelClass","field","fieldMap","align","canEdit","isLeaf","sumChildren","args","result","i","parseFloat","avg","onRecordUpdate","changes","rowManager","bubble","rec","row","getRowFor","cellElement","getCell","renderCell","getRawValue","_record$children","value","fn","isMathFn","Math","handler","resolveCallback","apply","r","set","setData","canFillValue","PercentColumn","fieldType","min","max","showValue","lowThreshold","summaryRenderer","sum","fitMode","constructor","internalCellCls","defaultRenderer","role","tabIndex","style","text","undefined","resizeToFitContent","RatingColumn","$name","emptyIcon","filledIcon","editable","filterType","ArrayHelper","populate","filled","event","readOnly","starIndex","indexOf","parentNode","childNodes","metaKey","shiftKey","get","TemplateColumn","template","Error","renderData","isSpecialRow","TimeColumn","format","formatValue","groupRenderer","groupRowFor","innerHTML","DateHelper","parse","defaultEditor","CellCopyPaste","InstancePlugin","pluginConfig","chain","configurable","copyOnly","emptyValueChar","keyMap","useNativeClipboard","VersionHelper","isTestEnv","toCopyString","toPasteValue","copyText","cutText","pasteText","afterConstruct","afterSelectionModeChange","client","selectionMode","cell","disabled","_disabledBySelectionMode","entityName","_copyOnly","_this$client$features","features","cellEdit","enabled","Boolean","canCopy","_client$features$rowC","selectedCells","_selectedRows","rowCopyPaste","focusedCell","isCellSelected","canCutPaste","_this$client$features2","isEditing","isActionAvailable","actionName","sendToClipboard","cells","lastRowIndex","lastColIndex","stringData","sort","c1","c2","rowIndex","columnIndex","_column$toClipboardSt","_cellValue","repeat","cellValue","toClipboardString","_record$get","toString","currentValue","replace","BrowserHelper","writeToClipboard","cut","copy","isCut","filter","_r$record","trigger","copiedDataString","paste","clipboardData","readFromClipboard","targetCell","modifiedRecords","Set","rows","stringAs2dArray","targetCells","_shiftSelectRange","some","equals","cellRows","cellSelectorsAs2dArray","columnCount","curI","curX","rI","targetRecord","getAt","cI","targetColumn","columns","visibleColumns","targetField","fromClipboardString","string","locations","rId","location","id","stringRows","split","populateCellMenu","items","cutCell","localeClass","icon","weight","onItem","pasteCell","copyCell","GridFeatureManager","registerFeature","CellTooltip","tooltipRenderer","processConfig","initTip","tip","new","forElement","forSelector","hoverDelay","trackMouse","getHtml","getTooltipContent","bind","internalListeners","pointerOver","listeners","configuredListeners","initialConfig","relayEvents","onPointerOver","getColumnFromElement","setConfig","doDestroy","destroy","doDisable","disable","activeTarget","getRecordFromElement","arg","cellTooltip","lastRecord","generation","lastRecordGeneration","lastColumn","_html","Objects","isPromise","hide","ColumnRename","F2","_this$editor","after","populateHeaderMenu","rename","L","startEdit","Event","_this$client$getHeade","getHeaderDataFromEvent","textWrapper","Editor","owner","render","FillHandle","mixin","Delayable","calculateFillValue","allowCropping","override","_fillListeners","delayable","handleSelection","onContentChange","afterColumnsChange","fixElementHeights","getCellDataFromEvent","includeSingleAxisMatch","overridden","findPatternsIn2dRange","range","horizontal","negative","values","columnId","isNaN","rowOrCol","pattern","findPatternsIn1dRange","lastValue","next","every","val","Date","diffs","ix","shift","size","increaseBy","getTime","stringPattern","currentIndex","afterSelectionChange","removeElements","GlobalEvents","isMouseDown","delayUntilMouseUp","_isExtending","rangeSelection","drawFillHandleAndBorder","onMouseDown","mouseMoveOrUp","EventHelper","on","globalThis","mouseover","selectionDragMouseEventListenerElement","mouseup","preventDefault","stopImmediatePropagation","handled","onMouseUp","currentRange","_isCropping","selectionChange","internalSelectRange","from","to","extensionCells","croppingCells","sel","disableScrollingCloseToEdges","suspendRefresh","firstCell","patterns","changeMap","Map","reverse","_me$calculateFillValu","_column$calculateFill","changed","resumeRefresh","performSelection","onMouseOver","_cellSelector","_cellSelector$_column","first","last","cellData","cellSelector","normalizeCellContext","_column","region","equalOrSmaller","cs","enableScrollingCloseToEdges","Location","keepListeners","_me$rangeSelection","regionEl","subGrids","x","Rectangle","right","y","getRecordCoords","bottom","borderElement","handleElement","setRect","height","appendChild","setTopLeft","scrollWidth","toggleCroppingCls","newCells","getRange","handleClick","rootElement","delegate","mousedown","hasFillElements","_this$croppingCells","_this$client$getCell","toggle","_me$handleElement","_me$borderElement","remove","removeListeners","listener","parent","isAvailable","camelCase","mousemove","touchdown","touchmove","touchup","pointerover","mouseout","dblclick","keydown","keypress","keyup","contextmenu","MergeCells","passthrough","mergedRanges","mergedMap","before","eachSubGrid","setupSubGrid","renderDone","bindStore","$mergedCellsElement","isConfiguring","isDisabling","reset","updatePassthrough","use","detachListeners","change","refresh","onInternalResize","refreshBounds","beforeRenderCell","mergeCells","isSorted","collapsed","mergedRange","getMergeRange","afterRenderRow","oldId","oldHeight","heightChanged","slice","removeRange","syncDom","afterRemove","afterToggleGroup","afterToggleSubGrid","indices","selectedRecords","allSelected","fromIndex","toIndex","includes","isSelected","_element$elementData","elementData","_element$elementData2","mergeable","handleEvent","mergedCellsElement","closest","StringHelper","capitalize","eventData","records","firstElementChild","triggerEvent","toLowerCase","getRowAt","clientY","startEditing","onRangeClick","onStoreChange","onStoreRefresh","createRangeElement","_parent$syncIdMap","_parent$releasedIdMap","getSubGridFromColumn","syncId","syncIdMap","releasedIdMap","createRangeDomConfig","DomSync","addChild","_column$mergedRendere","top","left","domConfig","DomClassList","cellCls","assign","autoCls","keepChildren","rowHeight","mergedRenderer","buildMergedCellsConfig","_rowManager$topRow","_rowManager$bottomRow","topRow","dataIndex","bottomRow","domConfigMap","regions","reduce","updateRange","force","sync","targetElement","syncIdField","onRenderDone","redraw","c","hadRanges","refreshSuspended","rowCount","boundsMap","bounds","topRendered","bottomRendered","rowOffsetHeight","findIndex","getRowById","rowsAbove","offsetHeight","rowsBelow","key","earlierRecord","earlierValue","earlierIndex","laterRecord","laterValue","laterIndex","headerBounds","QuickFind","mode","find","F3","Escape","Backspace","properties","hitCls","hitCellCls","hitCellBadgeCls","hitTextCls","Object","treeWalker","setupTreeWalker","NodeFilter","SHOW_TEXT","FILTER_ACCEPT","isActionable","clear","showQuickFind","header","getHeaderElement","headerField","badge","returnAll","colHeader","found","renderListenerInitialized","rendercell","hideQuickFind","hit","prevFound","forceInnerHTML","_content","removeChild","search","columnFieldOrId","getById","findByField","foundMap","findRe","RegExp","escapeRegExp","String","_originalContent","gotoClosestHit","_this$found","foundCount","_this$found2","gotoHit","nextHit","focusCell","doSelect","focusedIndex","foundSorted","a","b","abs","gotoFirstHit","gotoLastHit","gotoNextHit","_grid$_focusedCell","_grid$lastFocusedCell","currentId","_focusedCell","lastFocusedCell","gotoPrevHit","_grid$_focusedCell2","_grid$lastFocusedCell2","prevHit","_me$foundMap","hitIndex","isQuickHit","inner","currentNode","down","textNode","nextNode","nodeToReplace","textContent","nodeValue","newText","offset","lastIndex","match","exec","preamble","substring","spaceBefore","v","spaceAfter","encodeHtml","insertBefore","createElementFromTemplate","join","fragment","onBackspace","substr","clearSearch","showFilterEditor","onElementKeyPress","_event$key","onCellNavigate","fromCellSelector","toCellSelector","storeRemoveActions","RowExpander","expanderBodyClass","expandedRowClass","recordStateMap","collapsingRecords","columnPosition","refreshOnRecordChange","loadingIndicatorHeight","loadingIndicatorText","enableAnimations","console","warn","isGanttBase","fixedRowHeight","addColumn","renderFromRow","changeLoadingIndicatorText","onGridBodyFocusIn","_this$client$lastMous","_this$client$lastMous2","lastMousedownEvent","isAnimating","wasAnimating","changeColumn","has","toggleExpand","hideable","_isAddingExpanderColumn","_expander","insert","onTriggerEvent","collapse","expand","source","delete","recordState","isCreated","renderFromRecord","topRecordIndex","topRecord","processRowHeight","isRenderingAsync","expanderBodyHeight","expandElements","beforeRenderRow","waitForTransition","removeExpander","renderExpander","rowElement","getElement","renderLoadingIndicator","lockCellHeight","cellHeight","_shouldScrollIntoView","isInView","once","scrollRowIntoView","onTransitionEnd","property","removeEachSelector","_row$cells$","renderings","continueRendering","content","expanderElement","addCls","renderResponse","then","Promise","all","_me$renderRowsWithAni","renderRowsWithAnimation","isDestroyed","_row$removeCls","removeCls","unlock","child","Search","limit","showHitIndex","hitEls","expandNode","onTreeNodeExpand","requestAnimationFrame","reapply","col","formatters","_col$formatValue","isTree","expandTo","prevValue","belongsTo","clearHits","listenersInitialized","asyncEventSuffix","refreshRows","isHitFocused","DomDataStore","silent","_focusedCell$cell","getActiveElement","fromStart","_me$found","fromCell","_me$found2","_cellElement$querySel","querySelector","getSelection","innerText","featureClass","StickyCells","defaultConfig","contentSelector","currentTopRowCls","scroll","reference","removeClasses","renderRows","onGridScroll","contentElement","gridViewport","bodyContainer","roundPx","currentTopRow","topRowChanged","updateStickyContent","notEnoughHeight","scrollable","stickyContentHeight","stickyContentTop","alignTo","stickyEls","constrainTo","lastProcessedTopRow","rowClasses","cellClasses","stickyContent","document","createDocumentFragment","e","eachElement","rowEl","querySelectorAll","firstChild","eTop","offsetTop","alignSelf","cloneNode","syncClassList","TreeCombo","Combo","multiSelect","chipView","itemTpl","xss","overflowX","configure","picker","changePicker","oldPicker","ObjectHelper","disableGridRowModelWarning","rowCheckboxSelection","selection","initClass","HOSTS","ONE_DAY","EXPIRING_CLASSES","host","test","href","initialized","initExpiryHelper","baseClass","ExpiryHelper","widget","__foo","product","productName","version","getVersion","callHomeDelay","blockUrl","queryString","Product","verifyUrl","blocked","lastVersionCheck","trialKey","versionCheckKey","log","cacheTrialStartTime","isExpired","readyState","onTrialExpired","addEventListener","setTimeout","updateBlockedStatus","timeString","getLocalStorageItem","time","Number","trialStartTime","now","setLocalStorageItem","_window$bryntum","_window$bryntum$this$","window","bryntum","expired","saveVersionCheckKey","url","encodeURIComponent","logUrl","license","img","Image","onload","naturalWidth","blockTrial","onerror","src","rootEl","expirationShown","floatRoot","Toast","show","timeout","forEachSelector","Widget","fromElement","maskExpiredWidget","removeLocalStorageItem","mask","cover","setWaterMark","darkColor","lightColor","_DomHelper$themeInfo","_DomHelper$themeInfo$","thumb","color","themeInfo","endsWith","svgString","backgroundImage","btoa","applyBaseOverride","Override","class","onPaintOverride","setWatermarks","targets","GridBase","RowManager","matchRowCount","_this$grid","isScheduler","_overridden","_this$grid2","_this$grid3","ignoreDomainRe","websiteUrls","products","frameworks","splice","prod","framework","concat","flat","newScript","dataLayer","gtag","head"],"mappings":";;;;;;;;;;;;;;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe,MAAMA,YAAY,SAASC,MAAM,CAAC;EAC7C,OAAOC,IAAI,GAAG,QAAQ,CAAA;AACtB,EAAA,OAAOC,MAAM,GAAG;AACZ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQ,EAAA;AAAEC,IAAAA,IAAI,EAAG,SAAS;AAAEF,IAAAA,IAAI,EAAG,OAAA;GAAS;AACpC;AACR;AACA;AACA;AACA;AACA;AACQ,EAAA;AAAEE,IAAAA,IAAI,EAAG,uBAAuB;AAAEC,IAAAA,YAAY,EAAG,KAAA;AAAM,GAAC,CAC3D,CAAA;AACD,EAAA,OAAOC,QAAQ,GAAG;AACd;AACR;AACA;AACA;AACA;AACA;AACA;AACQC,IAAAA,UAAU,EAAG,KAAK;AAClB;AACR;AACA;AACA;AACA;AACA;AACA;AACQC,IAAAA,SAAS,EAAG,KAAK;AACjB;AACR;AACA;AACA;AACA;AACA;AACA;AACQC,IAAAA,QAAQ,EAAG,KAAK;AAChB;AACR;AACA;AACA;AACA;AACA;AACA;AACQC,IAAAA,MAAM,EAAG,KAAK;AACd;AACR;AACA;AACA;AACA;AACA;AACA;AACQC,IAAAA,UAAU,EAAG,KAAK;AAClB;AACR;AACA;AACA;AACA;AACA;AACA;AACQC,IAAAA,UAAU,EAAG,KAA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AC,CAAA;AAChDA,UAAU,CAAC5F,gBAAgB,EAAE,CAAA;AAC7B4F,UAAU,CAAC3F,MAAM,GAAG,YAAY;;AClGhC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe,MAAMoG,aAAa,SAASC,cAAc,CAAC;EACtD,OAAOhC,KAAK,GAAG,eAAe,CAAA;AAC9B,EAAA,OAAOiC,YAAY,GAAG;AAClBC,IAAAA,KAAK,EAAG,CACJ,kBAAkB,EAAE,0BAA0B,CAAA;GAErD,CAAA;AACD,EAAA,OAAOC,YAAY,GAAG;AAClB;AACR;AACA;AACA;AACA;AACQC,IAAAA,QAAQ,EAAG,IAAI;AACf;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQC,IAAAA,cAAc,EAAG,UAAU;AAC3B;AACR;AACA;AACA;AACQC,IAAAA,MAAM,EAAG;AACL,MAAA,QAAQ,EAAG,MAAM;AACjB,MAAA,QAAQ,EAAG,KAAK;AAChB,MAAA,QAAQ,EAAG,OAAA;KACd;AACD;AACR;AACA;AACA;AACA;AACQC,IAAAA,kBAAkB,EAAG,CAACC,aAAa,CAACC,SAAS;AAC7C;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQC,IAAAA,YAAY,EAAG,IAAI;AACnB;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;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AK,EAAE;AACvCQ,QAAAA,EAAE,CAACoW,QAAQ,GAAGhW,IAAI,CAACkpB,YAAY,CAAClT,QAAQ,CAAA;AACxCpW,QAAAA,EAAE,CAACwlB,IAAI,IAAItc,KAAK,CAAC4b,GAAG,CAAA;AACpB9kB,QAAAA,EAAE,CAACynB,MAAM,CAACznB,EAAE,CAACwlB,IAAI,CAAC,CAAA;AACtB,OAAA;AACJ,KAAA;AACJ,GAAA;AACAoG,EAAAA,cAAcA,CAACxrB,IAAI,EAAEyrB,gBAAgB,EAAEC,cAAc,EAAE;IACnD,MACI9rB,EAAE,GAAM,IAAI,CAAA;AAChB,IAAA,IAAIA,EAAE,CAACwlB,IAAI,KAAK,CAACsG,cAAc,IAAIA,cAAc,CAAC1V,QAAQ,KAAKpW,EAAE,CAACoW,QAAQ,CAAC,EAAE;MACzEpW,EAAE,CAACwmB,KAAK,EAAE,CAAA;AACd,KAAA;AACJ,GAAA;AACA;AACJ,CAAA;;AACAlB,SAAS,CAACjhB,MAAM,GAAG,WAAW,CAAA;AAAEoN,kBAAkB,CAACC,eAAe,CAAC4T,SAAS,CAAC;;ACxc7E;AACA;AACA;AACA,MAAMyG,kBAAkB,GAAG;AAAEpP,EAAAA,MAAM,EAAG,CAAC;AAAEhO,EAAAA,MAAM,EAAG,CAAC;AAAEnM,EAAAA,OAAO,EAAG,CAAC;AAAE6L,EAAAA,OAAO,EAAG,CAAA;AAAE,CAAC,CAAA;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe,MAAM2d,WAAW,SAASthB,cAAc,CAAC;AACpD;EACA,OAAOhC,KAAK,GAAG,aAAa,CAAA;AAC5B;EACA,WAAWkd,UAAUA,GAAG;IACpB,OAAO;AACH;AACAqG,MAAAA,iBAAiB,EAAG,oBAAoB;AACxCC,MAAAA,gBAAgB,EAAI,4BAA4B;AAAE;AAClDC,MAAAA,cAAc,EAAM,IAAI3S,GAAG,EAAE;MAC7B4S,iBAAiB,EAAG,IAAIhd,GAAG,EAAC;KAC/B,CAAA;AACL,GAAA;AACA,EAAA,OAAOvE,YAAY,GAAG;AAClB;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQhK,IAAAA,QAAQ,EAAG,IAAI;AACf;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQsgB,IAAAA,YAAY,EAAG,IAAI;AACnB;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQpgB,MAAM,EAAG,EAAG;AACZ;AACR;AACA;AACA;AACA;AACA;AACA;AACQsrB,IAAAA,cAAc,EAAG,OAAO;AACxB;AACR;AACA;AACA;AACA;AACA;AACQC,IAAAA,qBAAqB,EAAG,KAAK;AAC7B;AACR;AACA;AACA;AACA;AACQC,IAAAA,sBAAsB,EAAG,GAAG;AAC5B;AACR;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"}